# encoding: utf-8
# module Microsoft.JScript calls itself JScript
# from Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
# by generator 1.145
""" no doc """
from __future__ import annotations
from Microsoft.JScript.Vsa import (IJSVsaCodeItem, IJSVsaEngine, IJSVsaError, 
    IJSVsaItem, IJSVsaItems, IJSVsaSite, JSVsaItemType)

from Microsoft_VsaVb import VsaEngine

from System import (AppDomain, ApplicationException, Array, Attribute, Byte, 
    Decimal, Enum, Int16, Int64, RuntimeTypeHandle, SByte, Single, Type, 
    TypeCode, UInt16, UInt32, UInt64)

from System.CodeDom.Compiler import CodeDomProvider

from System.Collections import (IDictionaryEnumerator, IEnumerable, 
    IEnumerator)

from System.Globalization import CultureInfo

from System.IO import Stream

from System.Reflection import (Assembly, Binder, BindingFlags, 
    ConstructorInfo, FieldInfo, IReflect, MethodInfo, Module, PropertyInfo)

from System.Runtime.InteropServices.Expando import IExpando

from typing import Self, Tuple as Tuple_

"""The following names are not found in the module: (Array[ParameterInfo], 
    BoundEvent, SyncTextWriter, field#)
"""

# no functions
# classes

class ScriptObject(IReflect): # skipped bases: <type 'object'>
    """ no doc """
    def GetParent(self) -> ScriptObject:
        """ GetParent(self: ScriptObject) -> ScriptObject """
        ...

    def WrapMembers(self, *args): #cannot find CLR method
        """
        WrapMembers(members: Array[MemberInfo], obj: object) -> Array[MemberInfo]
        WrapMembers(member: MemberInfo, obj: object) -> Array[MemberInfo]
        WrapMembers(members: Array[MemberInfo], obj: object, cache: SimpleHashtable) -> Array[MemberInfo]
        """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]=x.__setitem__(i, y) <==> x[i]=x.__setitem__(i, y) <==> x[i]=x.__setitem__(i, y) <==> x[i]= """
        ...

    engine = ...
    parent = ...


class ActivationObject(ScriptObject, IActivationObject): # skipped bases: <type 'IReflect'>, <type 'object'>
    """ no doc """
    def CreateField(self, *args): #cannot find CLR method
        """ CreateField(self: ActivationObject, name: str, attributeFlags: FieldAttributes, value: object) -> JSVariableField """
        ...

    field_table = ...
    parent = ...


class JSObject(ScriptObject, IEnumerable, IExpando): # skipped bases: <type 'IReflect'>, <type 'object'>
    """ JSObject() """
    def SetMemberValue2(self, name:str, value:object): # -> 
        """ SetMemberValue2(self: JSObject, name: str, value: object) """
        ...

    def ToString(self) -> str:
        """ ToString(self: JSObject) -> str """
        ...

    def __str__(self, *args): #cannot find CLR method
        ...

    field_table = ...
    parent = ...


class ScriptFunction(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def length(self) -> int:
        """
        Get: length(self: ScriptFunction) -> int
        Set: length(self: ScriptFunction) = value
        """
        ...

    @property
    def prototype(self) -> object:
        """
        Get: prototype(self: ScriptFunction) -> object
        Set: prototype(self: ScriptFunction) = value
        """
        ...


    def CreateInstance(self, args:Array) -> object:
        """ CreateInstance(self: ScriptFunction, *args: Array[object]) -> object """
        ...

    def GetPrototypeForConstructedObject(self, *args): #cannot find CLR method
        """ GetPrototypeForConstructedObject(self: ScriptFunction) -> ScriptObject """
        ...

    def Invoke(self, thisob:object, args:Array) -> object:
        """ Invoke(self: ScriptFunction, thisob: object, *args: Array[object]) -> object """
        ...

    def InvokeMember(self, name:str, invokeAttr:BindingFlags, binder:Binder, target:object, args:Array, modifiers:Array, culture:CultureInfo, namedParameters:Array) -> object:
        """ InvokeMember(self: ScriptFunction, name: str, invokeAttr: BindingFlags, binder: Binder, target: object, args: Array[object], modifiers: Array[ParameterModifier], culture: CultureInfo, namedParameters: Array[str]) -> object """
        ...

    def __new__(cls, *args): #cannot find CLR constructor
        """ __new__(cls: type, parent: ScriptObject, name: str) """
        ...

    field_table = ...
    ilength = ...
    parent = ...


class ActiveXObjectConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    ilength = ...
    parent = ...


class ArgumentsObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    callee = ...
    caller = ...
    field_table = ...
    length = ...
    parent = ...


class ArrayConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def ConstructArray(self, args:Array) -> ArrayObject:
        """ ConstructArray(self: ArrayConstructor, args: Array[object]) -> ArrayObject """
        ...

    field_table = ...
    ilength = ...
    parent = ...


class AST: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    pass

class ArrayLiteral(AST): # skipped bases: <type 'object'>
    """ ArrayLiteral(context: Context, elements: ASTList) """
    def __new__(cls, context:Context, elements:ASTList) -> Self:
        """ __new__(cls: type, context: Context, elements: ASTList) """
        ...


class ArrayObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def length(self) -> object:
        """
        Get: length(self: ArrayObject) -> object
        Set: length(self: ArrayObject) = value
        """
        ...


    def SpliceSlowly(self, *args): #cannot find CLR method
        """ SpliceSlowly(self: ArrayObject, start: UInt32, deleteCount: UInt32, args: Array[object], outArray: ArrayObject, oldLength: UInt32, newLength: UInt32) """
        ...

    field_table = ...
    parent = ...


class ArrayPrototype(ArrayObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def constructor(self) -> ArrayConstructor:
        """ Get: constructor() -> ArrayConstructor """
        ...


    @staticmethod
    def concat(thisob:object, engine:VsaEngine, args:Array) -> ArrayObject:
        """ concat(thisob: object, engine: VsaEngine, *args: Array[object]) -> ArrayObject """
        ...

    @staticmethod
    def join(thisob:object, separator:object) -> str:
        """ join(thisob: object, separator: object) -> str """
        ...

    @staticmethod
    def pop(thisob:object) -> object:
        """ pop(thisob: object) -> object """
        ...

    @staticmethod
    def push(thisob:object, args:Array) -> Int64:
        """ push(thisob: object, *args: Array[object]) -> Int64 """
        ...

    @staticmethod
    def reverse(thisob:object) -> object:
        """ reverse(thisob: object) -> object """
        ...

    @staticmethod
    def shift(thisob:object) -> object:
        """ shift(thisob: object) -> object """
        ...

    @staticmethod
    def slice(thisob:object, engine:VsaEngine, start:float, end:object) -> ArrayObject:
        """ slice(thisob: object, engine: VsaEngine, start: float, end: object) -> ArrayObject """
        ...

    @staticmethod
    def sort(thisob:object, function:object) -> object:
        """ sort(thisob: object, function: object) -> object """
        ...

    @staticmethod
    def splice(thisob:object, engine:VsaEngine, start:float, deleteCnt:float, args:Array) -> ArrayObject:
        """ splice(thisob: object, engine: VsaEngine, start: float, deleteCnt: float, *args: Array[object]) -> ArrayObject """
        ...

    @staticmethod
    def toLocaleString(thisob:object) -> str:
        """ toLocaleString(thisob: object) -> str """
        ...

    @staticmethod
    def toString(thisob:object) -> str:
        """ toString(thisob: object) -> str """
        ...

    @staticmethod
    def unshift(thisob:object, args:Array) -> object:
        """ unshift(thisob: object, *args: Array[object]) -> object """
        ...

    field_table = ...
    parent = ...


class ArrayWrapper(ArrayObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetType(self) -> Type:
        """ GetType(self: ArrayWrapper) -> Type """
        ...

    field_table = ...
    parent = ...


class AssemblyCustomAttributeList(AST): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ASTList(AST): # skipped bases: <type 'object'>
    """ no doc """
    pass

class BinaryOp(AST): # skipped bases: <type 'object'>
    """ no doc """
    def GetOperator(self, *args): #cannot find CLR method
        """ GetOperator(self: BinaryOp, ir1: IReflect, ir2: IReflect) -> MethodInfo """
        ...

    operand1 = ...
    operand2 = ...
    operatorMeth = ...
    operatorTok = ...
    type1 = ...
    type2 = ...


class Binding(AST): # skipped bases: <type 'object'>
    """ no doc """
    def GetObject(self, *args): #cannot find CLR method
        """ GetObject(self: Binding) -> object """
        ...

    def HandleNoSuchMemberError(self, *args): #cannot find CLR method
        """ HandleNoSuchMemberError(self: Binding) """
        ...

    @staticmethod
    def IsMissing(value:object) -> bool:
        """ IsMissing(value: object) -> bool """
        ...

    def ResolveRHValue(self, *args): #cannot find CLR method
        """ ResolveRHValue(self: Binding) """
        ...

    def TranslateToILObject(self, *args): #cannot find CLR method
        """ TranslateToILObject(self: Binding, il: ILGenerator, obtype: Type, noValue: bool) """
        ...

    def TranslateToILWithDupOfThisOb(self, *args): #cannot find CLR method
        """ TranslateToILWithDupOfThisOb(self: Binding, il: ILGenerator) """
        ...

    defaultMember = ...
    isAssignmentToDefaultIndexedProperty = ...
    isFullyResolved = ...
    isNonVirtual = ...
    name = ...


class BitwiseBinary(BinaryOp): # skipped bases: <type 'object'>
    """ BitwiseBinary(operatorTok: int) """
    def EvaluateBitwiseBinary(self, v1:object, v2:object) -> object:
        """ EvaluateBitwiseBinary(self: BitwiseBinary, v1: object, v2: object) -> object """
        ...

    def __new__(cls, operatorTok:int) -> Self:
        """ __new__(cls: type, operatorTok: int) """
        ...

    operand1 = ...
    operand2 = ...
    operatorMeth = ...
    operatorTok = ...
    type1 = ...
    type2 = ...


class Block(AST): # skipped bases: <type 'object'>
    """ no doc """
    pass

class BlockScope(ActivationObject): # skipped bases: <type 'IActivationObject'>, <type 'IReflect'>, <type 'object'>
    """ BlockScope(parent: ScriptObject, name: str, scopeId: int) """
    def __new__(cls, parent:ScriptObject, name:str, scopeId:int) -> Self:
        """ __new__(cls: type, parent: ScriptObject, name: str, scopeId: int) """
        ...

    field_table = ...
    parent = ...


class BooleanConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    ilength = ...
    parent = ...


class BooleanObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetType(self) -> Type:
        """ GetType(self: BooleanObject) -> Type """
        ...

    def __new__(cls, *args): #cannot find CLR constructor
        """ __new__(cls: type, prototype: ScriptObject, subType: Type) """
        ...

    field_table = ...
    parent = ...


class BooleanPrototype(BooleanObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def constructor(self) -> BooleanConstructor:
        """ Get: constructor() -> BooleanConstructor """
        ...


    @staticmethod
    def toString(thisob:object) -> str:
        """ toString(thisob: object) -> str """
        ...

    @staticmethod
    def valueOf(thisob:object) -> object:
        """ valueOf(thisob: object) -> object """
        ...

    field_table = ...
    parent = ...


class BreakOutOfFinally(ApplicationException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    BreakOutOfFinally(target: int)
    BreakOutOfFinally(m: str)
    BreakOutOfFinally(m: str, e: Exception)
    """
    SerializeObjectState = ...
    target = ...


class Closure(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ Closure(func: FunctionObject) """
    arguments = ...
    caller = ...
    field_table = ...
    ilength = ...
    parent = ...


class CmdLineError(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CmdLineError, values: AssemblyNotFound (2001), CannotCreateEngine (2002), CompilerConstant (2003), DuplicateFileAsSourceAndAssembly (2004), DuplicateResourceFile (2005), DuplicateResourceName (2006), DuplicateSourceFile (2007), ErrorSavingCompiledState (2008), IncompatibleTargets (2038), InvalidAssembly (2009), InvalidCharacters (2036), InvalidCodePage (2010), InvalidDefinition (2011), InvalidForCompilerOptions (2037), InvalidLocaleID (2012), InvalidPlatform (2039), InvalidSourceFile (2014), InvalidTarget (2013), InvalidVersion (2031), InvalidWarningLevel (2015), LAST (2039), ManagedResourceNotFound (2022), MissingDefineArgument (2018), MissingExtension (2019), MissingLibArgument (2020), MissingReference (2034), MissingVersionInfo (2021), MultipleOutputNames (2016), MultipleTargets (2017), MultipleWin32Resources (2033), NestedResponseFiles (2023), NoCodePage (2024), NoError (0), NoFileName (2025), NoInputSourcesSpecified (2026), NoLocaleID (2027), NoWarningLevel (2028), ResourceNotFound (2029), SourceFileTooBig (2032), SourceNotFound (2035), UnknownOption (2030), Unspecified (2999) """
    AssemblyNotFound: CmdLineError = ...
    CannotCreateEngine: CmdLineError = ...
    CompilerConstant: CmdLineError = ...
    DuplicateFileAsSourceAndAssembly: CmdLineError = ...
    DuplicateResourceFile: CmdLineError = ...
    DuplicateResourceName: CmdLineError = ...
    DuplicateSourceFile: CmdLineError = ...
    ErrorSavingCompiledState: CmdLineError = ...
    IncompatibleTargets: CmdLineError = ...
    InvalidAssembly: CmdLineError = ...
    InvalidCharacters: CmdLineError = ...
    InvalidCodePage: CmdLineError = ...
    InvalidDefinition: CmdLineError = ...
    InvalidForCompilerOptions: CmdLineError = ...
    InvalidLocaleID: CmdLineError = ...
    InvalidPlatform: CmdLineError = ...
    InvalidSourceFile: CmdLineError = ...
    InvalidTarget: CmdLineError = ...
    InvalidVersion: CmdLineError = ...
    InvalidWarningLevel: CmdLineError = ...
    LAST: CmdLineError = ...
    ManagedResourceNotFound: CmdLineError = ...
    MissingDefineArgument: CmdLineError = ...
    MissingExtension: CmdLineError = ...
    MissingLibArgument: CmdLineError = ...
    MissingReference: CmdLineError = ...
    MissingVersionInfo: CmdLineError = ...
    MultipleOutputNames: CmdLineError = ...
    MultipleTargets: CmdLineError = ...
    MultipleWin32Resources: CmdLineError = ...
    NestedResponseFiles: CmdLineError = ...
    NoCodePage: CmdLineError = ...
    NoError: CmdLineError = ...
    NoFileName: CmdLineError = ...
    NoInputSourcesSpecified: CmdLineError = ...
    NoLocaleID: CmdLineError = ...
    NoWarningLevel: CmdLineError = ...
    ResourceNotFound: CmdLineError = ...
    SourceFileTooBig: CmdLineError = ...
    SourceNotFound: CmdLineError = ...
    UnknownOption: CmdLineError = ...
    Unspecified: CmdLineError = ...
    value__ = ...


class CmdLineException(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    CmdLineException(errorCode: CmdLineError, culture: CultureInfo)
    CmdLineException(errorCode: CmdLineError, context: str, culture: CultureInfo)
    CmdLineException()
    CmdLineException(m: str)
    CmdLineException(m: str, e: Exception)
    """
    def ResourceKey(self, errorCode:CmdLineError) -> str:
        """ ResourceKey(self: CmdLineException, errorCode: CmdLineError) -> str """
        ...

    SerializeObjectState = ...


class CmdLineOptionParser: # skipped bases: <type 'object'>, <type 'object'>
    """ CmdLineOptionParser() """
    @staticmethod
    def IsArgumentOption(option:str, *__args:str) -> str:
        """
        IsArgumentOption(option: str, prefix: str) -> str
        IsArgumentOption(option: str, shortPrefix: str, longPrefix: str) -> str
        """
        ...

    @staticmethod
    def IsBooleanOption(option:str, *__args:str) -> object:
        """
        IsBooleanOption(option: str, prefix: str) -> object
        IsBooleanOption(option: str, shortPrefix: str, longPrefix: str) -> object
        """
        ...

    @staticmethod
    def IsSimpleOption(option:str, prefix:str) -> bool:
        """ IsSimpleOption(option: str, prefix: str) -> bool """
        ...


class COMCharStream(Stream): # skipped bases: <type 'IDisposable'>, <type 'object'>
    """ COMCharStream(messageReceiver: IMessageReceiver) """
    def __new__(cls, messageReceiver:IMessageReceiver) -> Self:
        """ __new__(cls: type, messageReceiver: IMessageReceiver) """
        ...


class MemberInfoInitializer: # skipped bases: <type 'object'>
    """ no doc """
    def GetCOMMemberInfo(self) -> COMMemberInfo:
        """ GetCOMMemberInfo(self: MemberInfoInitializer) -> COMMemberInfo """
        ...

    def Initialize(self, name:str, dispatch:COMMemberInfo): # -> 
        """ Initialize(self: MemberInfoInitializer, name: str, dispatch: COMMemberInfo) """
        ...


class COMFieldInfo(MemberInfoInitializer, FieldInfo): # skipped bases: <type '_MemberInfo'>, <type '_FieldInfo'>, <type 'ICustomAttributeProvider'>, <type 'object'>
    """ COMFieldInfo() """
    pass

class COMMemberInfo: # skipped bases: <type 'object'>
    """ no doc """
    def Call(self, invokeAttr:BindingFlags, binder:Binder, arguments:Array, culture:CultureInfo) -> object:
        """ Call(self: COMMemberInfo, invokeAttr: BindingFlags, binder: Binder, arguments: Array[object], culture: CultureInfo) -> object """
        ...

    def GetValue(self, invokeAttr:BindingFlags, binder:Binder, index:Array, culture:CultureInfo) -> object:
        """ GetValue(self: COMMemberInfo, invokeAttr: BindingFlags, binder: Binder, index: Array[object], culture: CultureInfo) -> object """
        ...

    def SetValue(self, value:object, invokeAttr:BindingFlags, binder:Binder, index:Array, culture:CultureInfo): # -> 
        """ SetValue(self: COMMemberInfo, value: object, invokeAttr: BindingFlags, binder: Binder, index: Array[object], culture: CultureInfo) """
        ...

    def __call__(self, *args): #cannot find CLR method
        """ Call(self: COMMemberInfo, invokeAttr: BindingFlags, binder: Binder, arguments: Array[object], culture: CultureInfo) -> object """
        ...


class JSMethod(MethodInfo): # skipped bases: <type '_MemberInfo'>, <type '_MethodInfo'>, <type '_MethodBase'>, <type 'ICustomAttributeProvider'>, <type 'object'>
    """ no doc """
    pass

class COMMethodInfo(MemberInfoInitializer, JSMethod): # skipped bases: <type '_MemberInfo'>, <type '_MethodInfo'>, <type '_MethodBase'>, <type 'ICustomAttributeProvider'>, <type 'object'>
    """ COMMethodInfo() """
    EmptyParams = ...
    _comObject = ...
    _name = ...


class COMPropertyInfo(MemberInfoInitializer, PropertyInfo): # skipped bases: <type '_MemberInfo'>, <type 'ICustomAttributeProvider'>, <type '_PropertyInfo'>, <type 'object'>
    """ COMPropertyInfo() """
    pass

class Context: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def EndColumn(self) -> int:
        """ Get: EndColumn(self: Context) -> int """
        ...

    @property
    def EndLine(self) -> int:
        """ Get: EndLine(self: Context) -> int """
        ...

    @property
    def EndPosition(self) -> int:
        """ Get: EndPosition(self: Context) -> int """
        ...

    @property
    def StartColumn(self) -> int:
        """ Get: StartColumn(self: Context) -> int """
        ...

    @property
    def StartLine(self) -> int:
        """ Get: StartLine(self: Context) -> int """
        ...

    @property
    def StartPosition(self) -> int:
        """ Get: StartPosition(self: Context) -> int """
        ...


    def GetCode(self) -> str:
        """ GetCode(self: Context) -> str """
        ...

    def GetToken(self) -> JSToken:
        """ GetToken(self: Context) -> JSToken """
        ...


class ContinueOutOfFinally(ApplicationException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    ContinueOutOfFinally()
    ContinueOutOfFinally(target: int)
    ContinueOutOfFinally(m: str)
    ContinueOutOfFinally(m: str, e: Exception)
    """
    SerializeObjectState = ...
    target = ...


class Convert: # skipped bases: <type 'object'>, <type 'object'>
    """ Convert() """
    @staticmethod
    def CheckIfDoubleIsInteger(d:float) -> float:
        """ CheckIfDoubleIsInteger(d: float) -> float """
        ...

    @staticmethod
    def CheckIfSingleIsInteger(s:Single) -> Single:
        """ CheckIfSingleIsInteger(s: Single) -> Single """
        ...

    @staticmethod
    def Coerce(value:object, type:object) -> object:
        """ Coerce(value: object, type: object) -> object """
        ...

    @staticmethod
    def Coerce2(value:object, target:TypeCode, truncationPermitted:bool) -> object:
        """ Coerce2(value: object, target: TypeCode, truncationPermitted: bool) -> object """
        ...

    @staticmethod
    def CoerceT(value:object, t:Type, explicitOK:bool) -> object:
        """ CoerceT(value: object, t: Type, explicitOK: bool) -> object """
        ...

    @staticmethod
    def IsBadIndex(ast:AST) -> bool:
        """ IsBadIndex(ast: AST) -> bool """
        ...

    @staticmethod
    def ThrowTypeMismatch(val:object): # -> 
        """ ThrowTypeMismatch(val: object) """
        ...

    @staticmethod
    def ToBoolean(*__args:float) -> bool:
        """
        ToBoolean(d: float) -> bool
        ToBoolean(value: object) -> bool
        ToBoolean(value: object, explicitConversion: bool) -> bool
        """
        ...

    @staticmethod
    def ToForInObject(value:object, engine:VsaEngine) -> object:
        """ ToForInObject(value: object, engine: VsaEngine) -> object """
        ...

    @staticmethod
    def ToInt32(value:object) -> int:
        """ ToInt32(value: object) -> int """
        ...

    @staticmethod
    def ToNativeArray(value:object, handle:RuntimeTypeHandle) -> object:
        """ ToNativeArray(value: object, handle: RuntimeTypeHandle) -> object """
        ...

    @staticmethod
    def ToNumber(*__args:object) -> float:
        """
        ToNumber(value: object) -> float
        ToNumber(str: str) -> float
        """
        ...

    @staticmethod
    def ToObject(value:object, engine:VsaEngine) -> object:
        """ ToObject(value: object, engine: VsaEngine) -> object """
        ...

    @staticmethod
    def ToObject2(value:object, engine:VsaEngine) -> object:
        """ ToObject2(value: object, engine: VsaEngine) -> object """
        ...

    @staticmethod
    def ToString(*__args:bool) -> str:
        """
        ToString(value: object, explicitOK: bool) -> str
        ToString(b: bool) -> str
        ToString(d: float) -> str
        """
        ...


class DateConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @staticmethod
    def parse(str:str) -> float:
        """ parse(str: str) -> float """
        ...

    @staticmethod
    def UTC(year:object, month:object, date:object, hours:object, minutes:object, seconds:object, ms:object) -> float:
        """ UTC(year: object, month: object, date: object, hours: object, minutes: object, seconds: object, ms: object) -> float """
        ...

    field_table = ...
    ilength = ...
    parent = ...


class DateObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    parent = ...


class DatePrototype(DateObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def constructor(self) -> DateConstructor:
        """ Get: constructor() -> DateConstructor """
        ...


    @staticmethod
    def getDate(thisob:object) -> float:
        """ getDate(thisob: object) -> float """
        ...

    @staticmethod
    def getDay(thisob:object) -> float:
        """ getDay(thisob: object) -> float """
        ...

    @staticmethod
    def getFullYear(thisob:object) -> float:
        """ getFullYear(thisob: object) -> float """
        ...

    @staticmethod
    def getHours(thisob:object) -> float:
        """ getHours(thisob: object) -> float """
        ...

    @staticmethod
    def getMilliseconds(thisob:object) -> float:
        """ getMilliseconds(thisob: object) -> float """
        ...

    @staticmethod
    def getMinutes(thisob:object) -> float:
        """ getMinutes(thisob: object) -> float """
        ...

    @staticmethod
    def getMonth(thisob:object) -> float:
        """ getMonth(thisob: object) -> float """
        ...

    @staticmethod
    def getSeconds(thisob:object) -> float:
        """ getSeconds(thisob: object) -> float """
        ...

    @staticmethod
    def getTime(thisob:object) -> float:
        """ getTime(thisob: object) -> float """
        ...

    @staticmethod
    def getTimezoneOffset(thisob:object) -> float:
        """ getTimezoneOffset(thisob: object) -> float """
        ...

    @staticmethod
    def getUTCDate(thisob:object) -> float:
        """ getUTCDate(thisob: object) -> float """
        ...

    @staticmethod
    def getUTCDay(thisob:object) -> float:
        """ getUTCDay(thisob: object) -> float """
        ...

    @staticmethod
    def getUTCFullYear(thisob:object) -> float:
        """ getUTCFullYear(thisob: object) -> float """
        ...

    @staticmethod
    def getUTCHours(thisob:object) -> float:
        """ getUTCHours(thisob: object) -> float """
        ...

    @staticmethod
    def getUTCMilliseconds(thisob:object) -> float:
        """ getUTCMilliseconds(thisob: object) -> float """
        ...

    @staticmethod
    def getUTCMinutes(thisob:object) -> float:
        """ getUTCMinutes(thisob: object) -> float """
        ...

    @staticmethod
    def getUTCMonth(thisob:object) -> float:
        """ getUTCMonth(thisob: object) -> float """
        ...

    @staticmethod
    def getUTCSeconds(thisob:object) -> float:
        """ getUTCSeconds(thisob: object) -> float """
        ...

    @staticmethod
    def getVarDate(thisob:object) -> object:
        """ getVarDate(thisob: object) -> object """
        ...

    @staticmethod
    def getYear(thisob:object) -> float:
        """ getYear(thisob: object) -> float """
        ...

    @staticmethod
    def setDate(thisob:object, ddate:float) -> float:
        """ setDate(thisob: object, ddate: float) -> float """
        ...

    @staticmethod
    def setFullYear(thisob:object, dyear:float, month:object, date:object) -> float:
        """ setFullYear(thisob: object, dyear: float, month: object, date: object) -> float """
        ...

    @staticmethod
    def setHours(thisob:object, dhour:float, min:object, sec:object, msec:object) -> float:
        """ setHours(thisob: object, dhour: float, min: object, sec: object, msec: object) -> float """
        ...

    @staticmethod
    def setMilliseconds(thisob:object, dmsec:float) -> float:
        """ setMilliseconds(thisob: object, dmsec: float) -> float """
        ...

    @staticmethod
    def setMinutes(thisob:object, dmin:float, sec:object, msec:object) -> float:
        """ setMinutes(thisob: object, dmin: float, sec: object, msec: object) -> float """
        ...

    @staticmethod
    def setMonth(thisob:object, dmonth:float, date:object) -> float:
        """ setMonth(thisob: object, dmonth: float, date: object) -> float """
        ...

    @staticmethod
    def setSeconds(thisob:object, dsec:float, msec:object) -> float:
        """ setSeconds(thisob: object, dsec: float, msec: object) -> float """
        ...

    @staticmethod
    def setTime(thisob:object, time:float) -> float:
        """ setTime(thisob: object, time: float) -> float """
        ...

    @staticmethod
    def setUTCDate(thisob:object, ddate:float) -> float:
        """ setUTCDate(thisob: object, ddate: float) -> float """
        ...

    @staticmethod
    def setUTCFullYear(thisob:object, dyear:float, month:object, date:object) -> float:
        """ setUTCFullYear(thisob: object, dyear: float, month: object, date: object) -> float """
        ...

    @staticmethod
    def setUTCHours(thisob:object, dhour:float, min:object, sec:object, msec:object) -> float:
        """ setUTCHours(thisob: object, dhour: float, min: object, sec: object, msec: object) -> float """
        ...

    @staticmethod
    def setUTCMilliseconds(thisob:object, dmsec:float) -> float:
        """ setUTCMilliseconds(thisob: object, dmsec: float) -> float """
        ...

    @staticmethod
    def setUTCMinutes(thisob:object, dmin:float, sec:object, msec:object) -> float:
        """ setUTCMinutes(thisob: object, dmin: float, sec: object, msec: object) -> float """
        ...

    @staticmethod
    def setUTCMonth(thisob:object, dmonth:float, date:object) -> float:
        """ setUTCMonth(thisob: object, dmonth: float, date: object) -> float """
        ...

    @staticmethod
    def setUTCSeconds(thisob:object, dsec:float, msec:object) -> float:
        """ setUTCSeconds(thisob: object, dsec: float, msec: object) -> float """
        ...

    @staticmethod
    def setYear(thisob:object, dyear:float) -> float:
        """ setYear(thisob: object, dyear: float) -> float """
        ...

    @staticmethod
    def toDateString(thisob:object) -> str:
        """ toDateString(thisob: object) -> str """
        ...

    @staticmethod
    def toGMTString(thisob:object) -> str:
        """ toGMTString(thisob: object) -> str """
        ...

    @staticmethod
    def toLocaleDateString(thisob:object) -> str:
        """ toLocaleDateString(thisob: object) -> str """
        ...

    @staticmethod
    def toLocaleString(thisob:object) -> str:
        """ toLocaleString(thisob: object) -> str """
        ...

    @staticmethod
    def toLocaleTimeString(thisob:object) -> str:
        """ toLocaleTimeString(thisob: object) -> str """
        ...

    @staticmethod
    def toString(thisob:object) -> str:
        """ toString(thisob: object) -> str """
        ...

    @staticmethod
    def toTimeString(thisob:object) -> str:
        """ toTimeString(thisob: object) -> str """
        ...

    @staticmethod
    def toUTCString(thisob:object) -> str:
        """ toUTCString(thisob: object) -> str """
        ...

    @staticmethod
    def valueOf(thisob:object) -> float:
        """ valueOf(thisob: object) -> float """
        ...

    field_table = ...
    parent = ...


class DebugBreak(AST): # skipped bases: <type 'object'>
    """ no doc """
    pass

class DebugConvert(IDebugConvert2, IDebugConvert): # skipped bases: <type 'object'>
    """ DebugConvert() """
    pass

class DocumentContext: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    pass

class DynamicFieldInfo: # skipped bases: <type 'object'>, <type 'object'>
    """
    DynamicFieldInfo(name: str, value: object)
    DynamicFieldInfo(name: str, value: object, fieldTypeName: str)
    """
    fieldTypeName = ...
    name = ...
    value = ...


class Empty: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    pass

class ParserException(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ no doc """
    SerializeObjectState = ...


class EndOfFile(ParserException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ no doc """
    SerializeObjectState = ...


class EnumeratorConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    ilength = ...
    parent = ...


class EnumeratorObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def LoadObject(self, *args): #cannot find CLR method
        """ LoadObject(self: EnumeratorObject) """
        ...

    enumerator = ...
    field_table = ...
    parent = ...


class EnumeratorPrototype(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def constructor(self) -> EnumeratorConstructor:
        """ Get: constructor() -> EnumeratorConstructor """
        ...


    @staticmethod
    def atEnd(thisob:object) -> bool:
        """ atEnd(thisob: object) -> bool """
        ...

    @staticmethod
    def item(thisob:object) -> object:
        """ item(thisob: object) -> object """
        ...

    @staticmethod
    def moveFirst(thisob:object): # -> 
        """ moveFirst(thisob: object) """
        ...

    @staticmethod
    def moveNext(thisob:object): # -> 
        """ moveNext(thisob: object) """
        ...

    field_table = ...
    parent = ...


class Equality(BinaryOp): # skipped bases: <type 'object'>
    """ Equality(operatorTok: int) """
    def EvaluateEquality(self, v1:object, v2:object) -> bool:
        """ EvaluateEquality(self: Equality, v1: object, v2: object) -> bool """
        ...

    @staticmethod
    def JScriptEquals(v1:object, v2:object) -> bool:
        """ JScriptEquals(v1: object, v2: object) -> bool """
        ...

    def __new__(cls, operatorTok:int) -> Self:
        """ __new__(cls: type, operatorTok: int) """
        ...

    operand1 = ...
    operand2 = ...
    operatorMeth = ...
    operatorTok = ...
    type1 = ...
    type2 = ...


class ErrorConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    ilength = ...
    parent = ...


class ErrorObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @staticmethod
    def ToException(err:ErrorObject) -> Exception:
        """ ToException(err: ErrorObject) -> Exception """
        ...

    description = ...
    field_table = ...
    message = ...
    number = ...
    parent = ...


class ErrorPrototype(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def constructor(self) -> ErrorConstructor:
        """ Get: constructor(self: ErrorPrototype) -> ErrorConstructor """
        ...


    @staticmethod
    def toString(thisob:object) -> str:
        """ toString(thisob: object) -> str """
        ...

    field_table = ...
    name = ...
    parent = ...


class ErrorType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ErrorType, values: EvalError (1), OtherError (0), RangeError (2), ReferenceError (3), SyntaxError (4), TypeError (5), URIError (6) """
    EvalError: ErrorType = ...
    OtherError: ErrorType = ...
    RangeError: ErrorType = ...
    ReferenceError: ErrorType = ...
    SyntaxError: ErrorType = ...
    TypeError: ErrorType = ...
    URIError: ErrorType = ...
    value__ = ...


class Eval(AST): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptEvaluate(source:object, *__args:VsaEngine) -> object:
        """
        JScriptEvaluate(source: object, engine: VsaEngine) -> object
        JScriptEvaluate(source: object, unsafeOption: object, engine: VsaEngine) -> object
        """
        ...


class EvalErrorObject(ErrorObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    parent = ...


class Expando(Attribute): # skipped bases: <type '_Attribute'>, <type 'object'>
    """ Expando() """
    pass

class FieldAccessor: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetValue(self, thisob:object) -> object:
        """ GetValue(self: FieldAccessor, thisob: object) -> object """
        ...

    def SetValue(self, thisob:object, value:object): # -> 
        """ SetValue(self: FieldAccessor, thisob: object, value: object) """
        ...


class ForIn(AST): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptGetEnumerator(coll:object) -> IEnumerator:
        """ JScriptGetEnumerator(coll: object) -> IEnumerator """
        ...


class FunctionConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    ilength = ...
    parent = ...


class FunctionDeclaration(AST): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptFunctionDeclaration(handle:RuntimeTypeHandle, name:str, method_name:str, formal_parameters:Array, fields:Array, must_save_stack_locals:bool, hasArgumentsObject:bool, text:str, declaringObject:object, engine:VsaEngine) -> Closure:
        """ JScriptFunctionDeclaration(handle: RuntimeTypeHandle, name: str, method_name: str, formal_parameters: Array[str], fields: Array[JSLocalField], must_save_stack_locals: bool, hasArgumentsObject: bool, text: str, declaringObject: object, engine: VsaEngine) -> Closure """
        ...


class FunctionExpression(AST): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptFunctionExpression(handle:RuntimeTypeHandle, name:str, method_name:str, formal_params:Array, fields:Array, must_save_stack_locals:bool, hasArgumentsObject:bool, text:str, engine:VsaEngine) -> FunctionObject:
        """ JScriptFunctionExpression(handle: RuntimeTypeHandle, name: str, method_name: str, formal_params: Array[str], fields: Array[JSLocalField], must_save_stack_locals: bool, hasArgumentsObject: bool, text: str, engine: VsaEngine) -> FunctionObject """
        ...


class FunctionObject(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    ilength = ...
    parent = ...


class FunctionPrototype(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def constructor(self) -> FunctionConstructor:
        """ Get: constructor() -> FunctionConstructor """
        ...


    @staticmethod
    def apply(thisob:object, thisarg:object, argArray:object) -> object:
        """ apply(thisob: object, thisarg: object, argArray: object) -> object """
        ...

    @staticmethod
    def call(thisob:object, thisarg:object, args:Array) -> object:
        """ call(thisob: object, thisarg: object, *args: Array[object]) -> object """
        ...

    @staticmethod
    def toString(thisob:object) -> str:
        """ toString(thisob: object) -> str """
        ...

    field_table = ...
    ilength = ...
    parent = ...


class FunctionWrapper(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    ilength = ...
    parent = ...


class GlobalObject: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ActiveXObject(self) -> ActiveXObjectConstructor:
        """ Get: ActiveXObject() -> ActiveXObjectConstructor """
        ...

    @property
    def Array(self) -> ArrayConstructor:
        """ Get: Array() -> ArrayConstructor """
        ...

    @property
    def Boolean(self) -> BooleanConstructor:
        """ Get: Boolean() -> BooleanConstructor """
        ...

    @property
    def boolean(self) -> Type:
        """ Get: boolean() -> Type """
        ...

    @property
    def byte(self) -> Type:
        """ Get: byte() -> Type """
        ...

    @property
    def char(self) -> Type:
        """ Get: char() -> Type """
        ...

    @property
    def Date(self) -> DateConstructor:
        """ Get: Date() -> DateConstructor """
        ...

    @property
    def decimal(self) -> Type:
        """ Get: decimal() -> Type """
        ...

    @property
    def double(self) -> Type:
        """ Get: double() -> Type """
        ...

    @property
    def Enumerator(self) -> EnumeratorConstructor:
        """ Get: Enumerator() -> EnumeratorConstructor """
        ...

    @property
    def Error(self) -> ErrorConstructor:
        """ Get: Error() -> ErrorConstructor """
        ...

    @property
    def EvalError(self) -> ErrorConstructor:
        """ Get: EvalError() -> ErrorConstructor """
        ...

    @property
    def float(self) -> Type:
        """ Get: float() -> Type """
        ...

    @property
    def Function(self) -> FunctionConstructor:
        """ Get: Function() -> FunctionConstructor """
        ...

    @property
    def int(self) -> Type:
        """ Get: int() -> Type """
        ...

    @property
    def long(self) -> Type:
        """ Get: long() -> Type """
        ...

    @property
    def Math(self) -> MathObject:
        """ Get: Math() -> MathObject """
        ...

    @property
    def Number(self) -> NumberConstructor:
        """ Get: Number() -> NumberConstructor """
        ...

    @property
    def Object(self) -> ObjectConstructor:
        """ Get: Object() -> ObjectConstructor """
        ...

    @property
    def RangeError(self) -> ErrorConstructor:
        """ Get: RangeError() -> ErrorConstructor """
        ...

    @property
    def ReferenceError(self) -> ErrorConstructor:
        """ Get: ReferenceError() -> ErrorConstructor """
        ...

    @property
    def RegExp(self) -> RegExpConstructor:
        """ Get: RegExp() -> RegExpConstructor """
        ...

    @property
    def sbyte(self) -> Type:
        """ Get: sbyte() -> Type """
        ...

    @property
    def short(self) -> Type:
        """ Get: short() -> Type """
        ...

    @property
    def String(self) -> StringConstructor:
        """ Get: String() -> StringConstructor """
        ...

    @property
    def SyntaxError(self) -> ErrorConstructor:
        """ Get: SyntaxError() -> ErrorConstructor """
        ...

    @property
    def TypeError(self) -> ErrorConstructor:
        """ Get: TypeError() -> ErrorConstructor """
        ...

    @property
    def uint(self) -> Type:
        """ Get: uint() -> Type """
        ...

    @property
    def ulong(self) -> Type:
        """ Get: ulong() -> Type """
        ...

    @property
    def URIError(self) -> ErrorConstructor:
        """ Get: URIError() -> ErrorConstructor """
        ...

    @property
    def ushort(self) -> Type:
        """ Get: ushort() -> Type """
        ...

    @property
    def VBArray(self) -> VBArrayConstructor:
        """ Get: VBArray() -> VBArrayConstructor """
        ...

    @property
    def void(self) -> Type:
        """ Get: void() -> Type """
        ...


    @staticmethod
    def CollectGarbage(): # -> 
        """ CollectGarbage() """
        ...

    @staticmethod
    def decodeURI(encodedURI:object) -> str:
        """ decodeURI(encodedURI: object) -> str """
        ...

    @staticmethod
    def decodeURIComponent(encodedURI:object) -> str:
        """ decodeURIComponent(encodedURI: object) -> str """
        ...

    @staticmethod
    def encodeURI(uri:object) -> str:
        """ encodeURI(uri: object) -> str """
        ...

    @staticmethod
    def encodeURIComponent(uriComponent:object) -> str:
        """ encodeURIComponent(uriComponent: object) -> str """
        ...

    @staticmethod
    def escape(string:object) -> str:
        """ escape(string: object) -> str """
        ...

    @staticmethod
    def eval(x:object) -> object:
        """ eval(x: object) -> object """
        ...

    @staticmethod
    def GetObject(moniker:object, progId:object) -> object:
        """ GetObject(moniker: object, progId: object) -> object """
        ...

    @staticmethod
    def isFinite(number:float) -> bool:
        """ isFinite(number: float) -> bool """
        ...

    @staticmethod
    def isNaN(num:object) -> bool:
        """ isNaN(num: object) -> bool """
        ...

    @staticmethod
    def parseFloat(string:object) -> float:
        """ parseFloat(string: object) -> float """
        ...

    @staticmethod
    def parseInt(string:object, radix:object) -> float:
        """ parseInt(string: object, radix: object) -> float """
        ...

    @staticmethod
    def ScriptEngine() -> str:
        """ ScriptEngine() -> str """
        ...

    @staticmethod
    def ScriptEngineBuildVersion() -> int:
        """ ScriptEngineBuildVersion() -> int """
        ...

    @staticmethod
    def ScriptEngineMajorVersion() -> int:
        """ ScriptEngineMajorVersion() -> int """
        ...

    @staticmethod
    def ScriptEngineMinorVersion() -> int:
        """ ScriptEngineMinorVersion() -> int """
        ...

    @staticmethod
    def unescape(string:object) -> str:
        """ unescape(string: object) -> str """
        ...

    Infinity: float = ...
    NaN: float = ...
    originalActiveXObjectField = ...
    originalArrayField = ...
    originalBooleanField = ...
    originalDateField = ...
    originalEnumeratorField = ...
    originalErrorField = ...
    originalEvalErrorField = ...
    originalFunctionField = ...
    originalNumberField = ...
    originalObjectField = ...
    originalObjectPrototypeField = ...
    originalRangeErrorField = ...
    originalReferenceErrorField = ...
    originalRegExpField = ...
    originalStringField = ...
    originalSyntaxErrorField = ...
    originalTypeErrorField = ...
    originalURIErrorField = ...
    originalVBArrayField = ...


class Globals: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def ConstructArray(args:Array) -> ArrayObject:
        """ ConstructArray(*args: Array[object]) -> ArrayObject """
        ...

    @staticmethod
    def ConstructArrayLiteral(args:Array) -> ArrayObject:
        """ ConstructArrayLiteral(args: Array[object]) -> ArrayObject """
        ...

    contextEngine: VsaEngine = ...


class IActivationObject: # skipped bases: <type 'object'>
    """ no doc """
    def GetDefaultThisObject(self) -> object:
        """ GetDefaultThisObject(self: IActivationObject) -> object """
        ...

    def GetField(self, name:str, lexLevel:int) -> FieldInfo:
        """ GetField(self: IActivationObject, name: str, lexLevel: int) -> FieldInfo """
        ...

    def GetGlobalScope(self) -> GlobalScope:
        """ GetGlobalScope(self: IActivationObject) -> GlobalScope """
        ...

    def GetLocalField(self, name:str) -> FieldInfo:
        """ GetLocalField(self: IActivationObject, name: str) -> FieldInfo """
        ...

    def GetMemberValue(self, name:str, lexlevel:int) -> object:
        """ GetMemberValue(self: IActivationObject, name: str, lexlevel: int) -> object """
        ...


class GlobalScope(ActivationObject, IExpando): # skipped bases: <type 'IActivationObject'>, <type 'IReflect'>, <type 'object'>
    """ GlobalScope(parent: GlobalScope, engine: VsaEngine) """
    def GetFields(self, bindingAttr:BindingFlags) -> Array:
        """ GetFields(self: GlobalScope, bindingAttr: BindingFlags) -> Array[FieldInfo] """
        ...

    def GetMethods(self, bindingAttr:BindingFlags) -> Array:
        """ GetMethods(self: GlobalScope, bindingAttr: BindingFlags) -> Array[MethodInfo] """
        ...

    def GetProperties(self, bindingAttr:BindingFlags) -> Array:
        """ GetProperties(self: GlobalScope, bindingAttr: BindingFlags) -> Array[PropertyInfo] """
        ...

    def __new__(cls, parent:GlobalScope, engine:VsaEngine) -> Self:
        """ __new__(cls: type, parent: GlobalScope, engine: VsaEngine) """
        ...

    field_table = ...
    parent = ...


class Hide(Attribute): # skipped bases: <type '_Attribute'>, <type 'object'>
    """ Hide() """
    pass

class IAuthorServices: # skipped bases: <type 'object'>
    """ no doc """
    def GetCodeSense(self) -> IParseText:
        """ GetCodeSense(self: IAuthorServices) -> IParseText """
        ...

    def GetColorizer(self) -> IColorizeText:
        """ GetColorizer(self: IAuthorServices) -> IColorizeText """
        ...


class IColorizeText: # skipped bases: <type 'object'>
    """ no doc """
    def Colorize(self, sourceCode:str, state:SourceState) -> ITokenEnumerator:
        """ Colorize(self: IColorizeText, sourceCode: str, state: SourceState) -> ITokenEnumerator """
        ...

    def GetStateForText(self, sourceCode:str, currentState:SourceState) -> SourceState:
        """ GetStateForText(self: IColorizeText, sourceCode: str, currentState: SourceState) -> SourceState """
        ...


class IDebugConvert: # skipped bases: <type 'object'>
    """ no doc """
    def BooleanToString(self, value:bool) -> str:
        """ BooleanToString(self: IDebugConvert, value: bool) -> str """
        ...

    def ByteToString(self, value:Byte, radix:int) -> str:
        """ ByteToString(self: IDebugConvert, value: Byte, radix: int) -> str """
        ...

    def DoubleToDateString(self, value:float) -> str:
        """ DoubleToDateString(self: IDebugConvert, value: float) -> str """
        ...

    def DoubleToString(self, value:float) -> str:
        """ DoubleToString(self: IDebugConvert, value: float) -> str """
        ...

    def GetErrorMessageForHR(self, hr:int, engine:IJSVsaEngine) -> str:
        """ GetErrorMessageForHR(self: IDebugConvert, hr: int, engine: IJSVsaEngine) -> str """
        ...

    def GetManagedCharObject(self, i:UInt16) -> object:
        """ GetManagedCharObject(self: IDebugConvert, i: UInt16) -> object """
        ...

    def GetManagedInt64Object(self, i:Int64) -> object:
        """ GetManagedInt64Object(self: IDebugConvert, i: Int64) -> object """
        ...

    def GetManagedObject(self, value:object) -> object:
        """ GetManagedObject(self: IDebugConvert, value: object) -> object """
        ...

    def GetManagedUInt64Object(self, i:UInt64) -> object:
        """ GetManagedUInt64Object(self: IDebugConvert, i: UInt64) -> object """
        ...

    def Int16ToString(self, value:Int16, radix:int) -> str:
        """ Int16ToString(self: IDebugConvert, value: Int16, radix: int) -> str """
        ...

    def Int32ToString(self, value:int, radix:int) -> str:
        """ Int32ToString(self: IDebugConvert, value: int, radix: int) -> str """
        ...

    def Int64ToString(self, value:Int64, radix:int) -> str:
        """ Int64ToString(self: IDebugConvert, value: Int64, radix: int) -> str """
        ...

    def RegexpToString(self, source:str, ignoreCase:bool, global_:bool, multiline:bool) -> str:
        """ RegexpToString(self: IDebugConvert, source: str, ignoreCase: bool, global: bool, multiline: bool) -> str """
        ...

    def SByteToString(self, value:SByte, radix:int) -> str:
        """ SByteToString(self: IDebugConvert, value: SByte, radix: int) -> str """
        ...

    def SingleToString(self, value:Single) -> str:
        """ SingleToString(self: IDebugConvert, value: Single) -> str """
        ...

    def StringToPrintable(self, source:str) -> str:
        """ StringToPrintable(self: IDebugConvert, source: str) -> str """
        ...

    def ToPrimitive(self, value:object, typeCode:TypeCode, truncationPermitted:bool) -> object:
        """ ToPrimitive(self: IDebugConvert, value: object, typeCode: TypeCode, truncationPermitted: bool) -> object """
        ...

    def UInt16ToString(self, value:UInt16, radix:int) -> str:
        """ UInt16ToString(self: IDebugConvert, value: UInt16, radix: int) -> str """
        ...

    def UInt32ToString(self, value:UInt32, radix:int) -> str:
        """ UInt32ToString(self: IDebugConvert, value: UInt32, radix: int) -> str """
        ...

    def UInt64ToString(self, value:UInt64, radix:int) -> str:
        """ UInt64ToString(self: IDebugConvert, value: UInt64, radix: int) -> str """
        ...


class IDebugConvert2: # skipped bases: <type 'object'>
    """ no doc """
    def DecimalToString(self, value:Decimal) -> str:
        """ DecimalToString(self: IDebugConvert2, value: Decimal) -> str """
        ...


class IDebuggerObject: # skipped bases: <type 'object'>
    """ no doc """
    def HasEnumerableMember(self, name:str) -> bool:
        """ HasEnumerableMember(self: IDebuggerObject, name: str) -> bool """
        ...

    def IsCOMObject(self) -> bool:
        """ IsCOMObject(self: IDebuggerObject) -> bool """
        ...

    def IsEqual(self, o:IDebuggerObject) -> bool:
        """ IsEqual(self: IDebuggerObject, o: IDebuggerObject) -> bool """
        ...

    def IsScriptFunction(self) -> bool:
        """ IsScriptFunction(self: IDebuggerObject) -> bool """
        ...

    def IsScriptObject(self) -> bool:
        """ IsScriptObject(self: IDebuggerObject) -> bool """
        ...


class IDebugScriptScope: # skipped bases: <type 'object'>
    """ no doc """
    def SetThisValue(self, thisValue:object): # -> 
        """ SetThisValue(self: IDebugScriptScope, thisValue: object) """
        ...


class IDebugType: # skipped bases: <type 'object'>
    """ no doc """
    def HasInstance(self, o:object) -> bool:
        """ HasInstance(self: IDebugType, o: object) -> bool """
        ...


class IDebugVsaScriptCodeItem: # skipped bases: <type 'object'>
    """ no doc """
    def Evaluate(self) -> object:
        """ Evaluate(self: IDebugVsaScriptCodeItem) -> object """
        ...

    def ParseNamedBreakPoint(self, input, functionName, nargs, arguments, returnType, offset) -> Tuple_[bool, str, int, str, str, UInt64]:
        """ ParseNamedBreakPoint(self: IDebugVsaScriptCodeItem, input: str) -> (bool, str, int, str, str, UInt64) """
        ...


class IDefineEvent: # skipped bases: <type 'object'>
    """ no doc """
    def AddEvent(self, code:str, startLine:int) -> object:
        """ AddEvent(self: IDefineEvent, code: str, startLine: int) -> object """
        ...


class IEngine2: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self, domain:AppDomain) -> IJSVsaEngine:
        """ Clone(self: IEngine2, domain: AppDomain) -> IJSVsaEngine """
        ...

    def CompileEmpty(self) -> bool:
        """ CompileEmpty(self: IEngine2) -> bool """
        ...

    def ConnectEvents(self): # -> 
        """ ConnectEvents(self: IEngine2) """
        ...

    def DisconnectEvents(self): # -> 
        """ DisconnectEvents(self: IEngine2) """
        ...

    def GetAssembly(self) -> Assembly:
        """ GetAssembly(self: IEngine2) -> Assembly """
        ...

    def GetGlobalScope(self) -> IVsaScriptScope:
        """ GetGlobalScope(self: IEngine2) -> IVsaScriptScope """
        ...

    def GetModule(self) -> Module:
        """ GetModule(self: IEngine2) -> Module """
        ...

    def InitVsaEngine(self, rootMoniker:str, site:IJSVsaSite): # -> 
        """ InitVsaEngine(self: IEngine2, rootMoniker: str, site: IJSVsaSite) """
        ...

    def Interrupt(self): # -> 
        """ Interrupt(self: IEngine2) """
        ...

    def RegisterEventSource(self, name:str): # -> 
        """ RegisterEventSource(self: IEngine2, name: str) """
        ...

    def Restart(self): # -> 
        """ Restart(self: IEngine2) """
        ...

    def Run(self, domain:AppDomain): # -> 
        """ Run(self: IEngine2, domain: AppDomain) """
        ...

    def RunEmpty(self): # -> 
        """ RunEmpty(self: IEngine2) """
        ...


class IErrorHandler: # skipped bases: <type 'object'>
    """ no doc """
    def OnCompilerError(self, error:IVsaFullErrorInfo) -> bool:
        """ OnCompilerError(self: IErrorHandler, error: IVsaFullErrorInfo) -> bool """
        ...


class IMessageReceiver: # skipped bases: <type 'object'>
    """ no doc """
    def Message(self, strValue:str): # -> 
        """ Message(self: IMessageReceiver, strValue: str) """
        ...


class IMethodsCompletionInfo: # skipped bases: <type 'object'>
    """ no doc """
    pass

class Import(AST): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptImport(name:str, engine:VsaEngine): # -> 
        """ JScriptImport(name: str, engine: VsaEngine) """
        ...


class In(BinaryOp): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptIn(v1:object, v2:object) -> bool:
        """ JScriptIn(v1: object, v2: object) -> bool """
        ...

    operand1 = ...
    operand2 = ...
    operatorMeth = ...
    operatorTok = ...
    type1 = ...
    type2 = ...


class INeedEngine: # skipped bases: <type 'object'>
    """ no doc """
    def GetEngine(self) -> VsaEngine:
        """ GetEngine(self: INeedEngine) -> VsaEngine """
        ...

    def SetEngine(self, engine:VsaEngine): # -> 
        """ SetEngine(self: INeedEngine, engine: VsaEngine) """
        ...


class Instanceof(BinaryOp): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptInstanceof(v1:object, v2:object) -> bool:
        """ JScriptInstanceof(v1: object, v2: object) -> bool """
        ...

    operand1 = ...
    operand2 = ...
    operatorMeth = ...
    operatorTok = ...
    type1 = ...
    type2 = ...


class IObjectCompletionInfo: # skipped bases: <type 'object'>
    """ no doc """
    pass

class IParseText: # skipped bases: <type 'object'>
    """ no doc """
    def Parse(self, code:str, error:IErrorHandler): # -> 
        """ Parse(self: IParseText, code: str, error: IErrorHandler) """
        ...


class IRedirectOutput: # skipped bases: <type 'object'>
    """ no doc """
    def SetOutputStream(self, output:IMessageReceiver): # -> 
        """ SetOutputStream(self: IRedirectOutput, output: IMessageReceiver) """
        ...


class ISite2: # skipped bases: <type 'object'>
    """ no doc """
    def GetParentChain(self, obj:object) -> Array:
        """ GetParentChain(self: ISite2, obj: object) -> Array[object] """
        ...


class ITokenColorInfo: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Color(self) -> TokenColor:
        """ Get: Color(self: ITokenColorInfo) -> TokenColor """
        ...

    @property
    def EndPosition(self) -> int:
        """ Get: EndPosition(self: ITokenColorInfo) -> int """
        ...

    @property
    def StartPosition(self) -> int:
        """ Get: StartPosition(self: ITokenColorInfo) -> int """
        ...



class ITokenEnumerator: # skipped bases: <type 'object'>
    """ no doc """
    def GetNext(self) -> ITokenColorInfo:
        """ GetNext(self: ITokenEnumerator) -> ITokenColorInfo """
        ...

    def Reset(self): # -> 
        """ Reset(self: ITokenEnumerator) """
        ...


class IVsaFullErrorInfo(IJSVsaError): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def EndLine(self) -> int:
        """ Get: EndLine(self: IVsaFullErrorInfo) -> int """
        ...



class IVsaScriptCodeItem(IJSVsaCodeItem): # skipped bases: <type 'IJSVsaItem'>, <type 'object'>
    """ no doc """
    @property
    def StartColumn(self) -> int:
        """
        Get: StartColumn(self: IVsaScriptCodeItem) -> int
        Set: StartColumn(self: IVsaScriptCodeItem) = value
        """
        ...

    @property
    def StartLine(self) -> int:
        """
        Get: StartLine(self: IVsaScriptCodeItem) -> int
        Set: StartLine(self: IVsaScriptCodeItem) = value
        """
        ...


    def Execute(self) -> object:
        """ Execute(self: IVsaScriptCodeItem) -> object """
        ...


class IVsaScriptScope(IJSVsaItem): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> IVsaScriptScope:
        """ Get: Parent(self: IVsaScriptScope) -> IVsaScriptScope """
        ...


    def AddItem(self, itemName:str, type:JSVsaItemType) -> IJSVsaItem:
        """ AddItem(self: IVsaScriptScope, itemName: str, type: JSVsaItemType) -> IJSVsaItem """
        ...

    def CreateDynamicItem(self, itemName:str, type:JSVsaItemType) -> IJSVsaItem:
        """ CreateDynamicItem(self: IVsaScriptScope, itemName: str, type: JSVsaItemType) -> IJSVsaItem """
        ...

    def GetItem(self, itemName:str) -> IJSVsaItem:
        """ GetItem(self: IVsaScriptScope, itemName: str) -> IJSVsaItem """
        ...

    def GetItemAtIndex(self, index:int) -> IJSVsaItem:
        """ GetItemAtIndex(self: IVsaScriptScope, index: int) -> IJSVsaItem """
        ...

    def GetItemCount(self) -> int:
        """ GetItemCount(self: IVsaScriptScope) -> int """
        ...

    def GetObject(self) -> object:
        """ GetObject(self: IVsaScriptScope) -> object """
        ...

    def RemoveItem(self, *__args:str): # -> 
        """ RemoveItem(self: IVsaScriptScope, itemName: str)RemoveItem(self: IVsaScriptScope, item: IJSVsaItem) """
        ...

    def RemoveItemAtIndex(self, index:int): # -> 
        """ RemoveItemAtIndex(self: IVsaScriptScope, index: int) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IWrappedMember: # skipped bases: <type 'object'>
    """ no doc """
    def GetWrappedObject(self) -> object:
        """ GetWrappedObject(self: IWrappedMember) -> object """
        ...


class JSAuthor(IAuthorServices): # skipped bases: <type 'object'>
    """ JSAuthor() """
    pass

class JSBuiltin(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum JSBuiltin, values: Array_concat (1), Array_join (2), Array_pop (3), Array_push (4), Array_reverse (5), Array_shift (6), Array_slice (7), Array_sort (8), Array_splice (9), Array_toLocaleString (10), Array_toString (11), Array_unshift (12), Boolean_toString (13), Boolean_valueOf (14), Date_getDate (15), Date_getDay (16), Date_getFullYear (17), Date_getHours (18), Date_getMilliseconds (19), Date_getMinutes (20), Date_getMonth (21), Date_getSeconds (22), Date_getTime (23), Date_getTimezoneOffset (24), Date_getUTCDate (25), Date_getUTCDay (26), Date_getUTCFullYear (27), Date_getUTCHours (28), Date_getUTCMilliseconds (29), Date_getUTCMinutes (30), Date_getUTCMonth (31), Date_getUTCSeconds (32), Date_getVarDate (33), Date_getYear (34), Date_parse (35), Date_setDate (36), Date_setFullYear (37), Date_setHours (38), Date_setMilliseconds (40), Date_setMinutes (39), Date_setMonth (41), Date_setSeconds (42), Date_setTime (43), Date_setUTCDate (44), Date_setUTCFullYear (45), Date_setUTCHours (46), Date_setUTCMilliseconds (48), Date_setUTCMinutes (47), Date_setUTCMonth (49), Date_setUTCSeconds (50), Date_setYear (51), Date_toDateString (52), Date_toGMTString (53), Date_toLocaleDateString (54), Date_toLocaleString (55), Date_toLocaleTimeString (56), Date_toString (57), Date_toTimeString (58), Date_toUTCString (59), Date_UTC (60), Date_valueOf (61), Enumerator_atEnd (62), Enumerator_item (63), Enumerator_moveFirst (64), Enumerator_moveNext (65), Error_toString (66), Function_apply (67), Function_call (68), Function_toString (69), Global_CollectGarbage (70), Global_decodeURI (71), Global_decodeURIComponent (72), Global_encodeURI (73), Global_encodeURIComponent (74), Global_escape (75), Global_eval (76), Global_GetObject (77), Global_isFinite (79), Global_isNaN (78), Global_parseFloat (80), Global_parseInt (81), Global_ScriptEngine (82), Global_ScriptEngineBuildVersion (83), Global_ScriptEngineMajorVersion (84), Global_ScriptEngineMinorVersion (85), Global_unescape (86), Math_abs (87), Math_acos (88), Math_asin (89), Math_atan (90), Math_atan2 (91), Math_ceil (92), Math_cos (93), Math_exp (94), Math_floor (95), Math_log (96), Math_max (97), Math_min (98), Math_pow (99), Math_random (100), Math_round (101), Math_sin (102), Math_sqrt (103), Math_tan (104), None (0), Number_toExponential (105), Number_toFixed (106), Number_toLocaleString (107), Number_toPrecision (108), Number_toString (109), Number_valueOf (110), Object_hasOwnProperty (111), Object_isPrototypeOf (112), Object_propertyIsEnumerable (113), Object_toLocaleString (114), Object_toString (115), Object_valueOf (116), RegExp_compile (117), RegExp_exec (118), RegExp_test (119), RegExp_toString (120), String_anchor (121), String_big (122), String_blink (123), String_bold (124), String_charAt (125), String_charCodeAt (126), String_concat (127), String_fixed (128), String_fontcolor (129), String_fontsize (130), String_fromCharCode (131), String_indexOf (132), String_italics (133), String_lastIndexOf (134), String_link (135), String_localeCompare (136), String_match (137), String_replace (138), String_search (139), String_slice (140), String_small (141), String_split (142), String_strike (143), String_sub (144), String_substr (145), String_substring (146), String_sup (147), String_toLocaleLowerCase (148), String_toLocaleUpperCase (149), String_toLowerCase (150), String_toString (151), String_toUpperCase (152), String_valueOf (153), VBArray_dimensions (154), VBArray_getItem (155), VBArray_lbound (156), VBArray_toArray (157), VBArray_ubound (158) """
    Array_concat: JSBuiltin = ...
    Array_join: JSBuiltin = ...
    Array_pop: JSBuiltin = ...
    Array_push: JSBuiltin = ...
    Array_reverse: JSBuiltin = ...
    Array_shift: JSBuiltin = ...
    Array_slice: JSBuiltin = ...
    Array_sort: JSBuiltin = ...
    Array_splice: JSBuiltin = ...
    Array_toLocaleString: JSBuiltin = ...
    Array_toString: JSBuiltin = ...
    Array_unshift: JSBuiltin = ...
    Boolean_toString: JSBuiltin = ...
    Boolean_valueOf: JSBuiltin = ...
    Date_getDate: JSBuiltin = ...
    Date_getDay: JSBuiltin = ...
    Date_getFullYear: JSBuiltin = ...
    Date_getHours: JSBuiltin = ...
    Date_getMilliseconds: JSBuiltin = ...
    Date_getMinutes: JSBuiltin = ...
    Date_getMonth: JSBuiltin = ...
    Date_getSeconds: JSBuiltin = ...
    Date_getTime: JSBuiltin = ...
    Date_getTimezoneOffset: JSBuiltin = ...
    Date_getUTCDate: JSBuiltin = ...
    Date_getUTCDay: JSBuiltin = ...
    Date_getUTCFullYear: JSBuiltin = ...
    Date_getUTCHours: JSBuiltin = ...
    Date_getUTCMilliseconds: JSBuiltin = ...
    Date_getUTCMinutes: JSBuiltin = ...
    Date_getUTCMonth: JSBuiltin = ...
    Date_getUTCSeconds: JSBuiltin = ...
    Date_getVarDate: JSBuiltin = ...
    Date_getYear: JSBuiltin = ...
    Date_parse: JSBuiltin = ...
    Date_setDate: JSBuiltin = ...
    Date_setFullYear: JSBuiltin = ...
    Date_setHours: JSBuiltin = ...
    Date_setMilliseconds: JSBuiltin = ...
    Date_setMinutes: JSBuiltin = ...
    Date_setMonth: JSBuiltin = ...
    Date_setSeconds: JSBuiltin = ...
    Date_setTime: JSBuiltin = ...
    Date_setUTCDate: JSBuiltin = ...
    Date_setUTCFullYear: JSBuiltin = ...
    Date_setUTCHours: JSBuiltin = ...
    Date_setUTCMilliseconds: JSBuiltin = ...
    Date_setUTCMinutes: JSBuiltin = ...
    Date_setUTCMonth: JSBuiltin = ...
    Date_setUTCSeconds: JSBuiltin = ...
    Date_setYear: JSBuiltin = ...
    Date_toDateString: JSBuiltin = ...
    Date_toGMTString: JSBuiltin = ...
    Date_toLocaleDateString: JSBuiltin = ...
    Date_toLocaleString: JSBuiltin = ...
    Date_toLocaleTimeString: JSBuiltin = ...
    Date_toString: JSBuiltin = ...
    Date_toTimeString: JSBuiltin = ...
    Date_toUTCString: JSBuiltin = ...
    Date_UTC: JSBuiltin = ...
    Date_valueOf: JSBuiltin = ...
    Enumerator_atEnd: JSBuiltin = ...
    Enumerator_item: JSBuiltin = ...
    Enumerator_moveFirst: JSBuiltin = ...
    Enumerator_moveNext: JSBuiltin = ...
    Error_toString: JSBuiltin = ...
    Function_apply: JSBuiltin = ...
    Function_call: JSBuiltin = ...
    Function_toString: JSBuiltin = ...
    Global_CollectGarbage: JSBuiltin = ...
    Global_decodeURI: JSBuiltin = ...
    Global_decodeURIComponent: JSBuiltin = ...
    Global_encodeURI: JSBuiltin = ...
    Global_encodeURIComponent: JSBuiltin = ...
    Global_escape: JSBuiltin = ...
    Global_eval: JSBuiltin = ...
    Global_GetObject: JSBuiltin = ...
    Global_isFinite: JSBuiltin = ...
    Global_isNaN: JSBuiltin = ...
    Global_parseFloat: JSBuiltin = ...
    Global_parseInt: JSBuiltin = ...
    Global_ScriptEngine: JSBuiltin = ...
    Global_ScriptEngineBuildVersion: JSBuiltin = ...
    Global_ScriptEngineMajorVersion: JSBuiltin = ...
    Global_ScriptEngineMinorVersion: JSBuiltin = ...
    Global_unescape: JSBuiltin = ...
    Math_abs: JSBuiltin = ...
    Math_acos: JSBuiltin = ...
    Math_asin: JSBuiltin = ...
    Math_atan: JSBuiltin = ...
    Math_atan2: JSBuiltin = ...
    Math_ceil: JSBuiltin = ...
    Math_cos: JSBuiltin = ...
    Math_exp: JSBuiltin = ...
    Math_floor: JSBuiltin = ...
    Math_log: JSBuiltin = ...
    Math_max: JSBuiltin = ...
    Math_min: JSBuiltin = ...
    Math_pow: JSBuiltin = ...
    Math_random: JSBuiltin = ...
    Math_round: JSBuiltin = ...
    Math_sin: JSBuiltin = ...
    Math_sqrt: JSBuiltin = ...
    Math_tan: JSBuiltin = ...
    Number_toExponential: JSBuiltin = ...
    Number_toFixed: JSBuiltin = ...
    Number_toLocaleString: JSBuiltin = ...
    Number_toPrecision: JSBuiltin = ...
    Number_toString: JSBuiltin = ...
    Number_valueOf: JSBuiltin = ...
    Object_hasOwnProperty: JSBuiltin = ...
    Object_isPrototypeOf: JSBuiltin = ...
    Object_propertyIsEnumerable: JSBuiltin = ...
    Object_toLocaleString: JSBuiltin = ...
    Object_toString: JSBuiltin = ...
    Object_valueOf: JSBuiltin = ...
    RegExp_compile: JSBuiltin = ...
    RegExp_exec: JSBuiltin = ...
    RegExp_test: JSBuiltin = ...
    RegExp_toString: JSBuiltin = ...
    String_anchor: JSBuiltin = ...
    String_big: JSBuiltin = ...
    String_blink: JSBuiltin = ...
    String_bold: JSBuiltin = ...
    String_charAt: JSBuiltin = ...
    String_charCodeAt: JSBuiltin = ...
    String_concat: JSBuiltin = ...
    String_fixed: JSBuiltin = ...
    String_fontcolor: JSBuiltin = ...
    String_fontsize: JSBuiltin = ...
    String_fromCharCode: JSBuiltin = ...
    String_indexOf: JSBuiltin = ...
    String_italics: JSBuiltin = ...
    String_lastIndexOf: JSBuiltin = ...
    String_link: JSBuiltin = ...
    String_localeCompare: JSBuiltin = ...
    String_match: JSBuiltin = ...
    String_replace: JSBuiltin = ...
    String_search: JSBuiltin = ...
    String_slice: JSBuiltin = ...
    String_small: JSBuiltin = ...
    String_split: JSBuiltin = ...
    String_strike: JSBuiltin = ...
    String_sub: JSBuiltin = ...
    String_substr: JSBuiltin = ...
    String_substring: JSBuiltin = ...
    String_sup: JSBuiltin = ...
    String_toLocaleLowerCase: JSBuiltin = ...
    String_toLocaleUpperCase: JSBuiltin = ...
    String_toLowerCase: JSBuiltin = ...
    String_toString: JSBuiltin = ...
    String_toUpperCase: JSBuiltin = ...
    String_valueOf: JSBuiltin = ...
    value__ = ...
    VBArray_dimensions: JSBuiltin = ...
    VBArray_getItem: JSBuiltin = ...
    VBArray_lbound: JSBuiltin = ...
    VBArray_toArray: JSBuiltin = ...
    VBArray_ubound: JSBuiltin = ...


class JSConstructor(ConstructorInfo): # skipped bases: <type '_MemberInfo'>, <type '_MethodBase'>, <type 'ICustomAttributeProvider'>, <type '_ConstructorInfo'>, <type 'object'>
    """ no doc """
    pass

class JScriptCodeProvider(CodeDomProvider): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ JScriptCodeProvider() """
    pass

class JScriptException(ApplicationException, IVsaFullErrorInfo): # skipped bases: <type 'IJSVsaError'>, <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    JScriptException()
    JScriptException(m: str)
    JScriptException(m: str, e: Exception)
    JScriptException(errorNumber: JSError)
    """
    @property
    def Column(self) -> int:
        """ Get: Column(self: JScriptException) -> int """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description(self: JScriptException) -> str """
        ...

    @property
    def EndColumn(self) -> int:
        """ Get: EndColumn(self: JScriptException) -> int """
        ...

    @property
    def ErrorNumber(self) -> int:
        """ Get: ErrorNumber(self: JScriptException) -> int """
        ...

    @property
    def Line(self) -> int:
        """ Get: Line(self: JScriptException) -> int """
        ...

    @property
    def LineText(self) -> str:
        """ Get: LineText(self: JScriptException) -> str """
        ...

    @property
    def Number(self) -> int:
        """ Get: Number(self: JScriptException) -> int """
        ...

    @property
    def Severity(self) -> int:
        """ Get: Severity(self: JScriptException) -> int """
        ...

    @property
    def SourceItem(self) -> IJSVsaItem:
        """ Get: SourceItem(self: JScriptException) -> IJSVsaItem """
        ...

    @property
    def SourceMoniker(self) -> str:
        """ Get: SourceMoniker(self: JScriptException) -> str """
        ...

    @property
    def StartColumn(self) -> int:
        """ Get: StartColumn(self: JScriptException) -> int """
        ...


    SerializeObjectState = ...


class JSError(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum JSError, values: AbstractCannotBePrivate (1157), AbstractCannotBeStatic (1216), AbstractWithBody (1192), ActionNotSupported (445), AmbiguousBindingBecauseOfEval (1150), AmbiguousBindingBecauseOfWith (1149), AmbiguousConstructorCall (1184), AmbiguousMatch (1183), ArrayLengthAssignIncorrect (5030), ArrayLengthConstructIncorrect (5029), ArrayMayBeCopied (1215), AssemblyAttributesMustBeGlobal (1249), AssignmentToReadOnly (5040), BadBreak (1019), BadContinue (1020), BadFunctionDeclaration (1199), BadHexDigit (1023), BadLabel (1025), BadModifierInInterface (1224), BadOctalLiteral (1242), BadPropertyDeclaration (1200), BadReturn (1018), BadSwitch (1103), BadThrow (1239), BadVariableDeclaration (1198), BadWayToLeaveFinally (1190), BaseClassIsExpandoAlready (1156), BooleanExpected (5010), CannotAssignToFunctionResult (5003), CannotBeAbstract (1212), CannotCallSecurityMethodLateBound (5044), CannotChangeVisibility (1171), CannotInstantiateAbstractClass (1214), CannotNestPositionDirective (1119), CannotReturnValueFromVoidFunction (1182), CannotUseNameOfClass (1124), CannotUseStaticSecurityAttribute (5045), CantAssignThis (5000), CantCreateObject (429), CcInvalidElif (1106), CcInvalidElse (1105), CcInvalidEnd (1104), CcInvalidInDebugger (1256), CcOff (1030), CircularDefinition (1120), ClashWithProperty (1177), ClassNotAllowed (1109), ConstructorMayNotHaveReturnType (1233), CustomAttributeUsedMoreThanOnce (1236), DateExpected (5006), DelegatesShouldNotBeExplicitlyConstructed (1258), Deprecated (1121), DifferentReturnTypeFromBase (1176), DoesNotHaveAnAddress (1203), DupDefault (1027), DuplicateMethod (1251), DuplicateName (1111), DuplicateNamedParameter (5036), DupVisibility (1101), EnumeratorExpected (5015), EnumNotAllowed (1230), ErrEOF (1107), ExceptionFromHResult (6011), ExecutablesCannotBeLocalized (1254), ExpandoClassShouldNotImpleEnumerable (1162), ExpandoMustBePublic (1257), ExpandoPrecludesAbstract (1222), ExpandoPrecludesOverride (1220), ExpandoPrecludesStatic (1250), ExpectedAssembly (1248), ExpressionExpected (1195), FileNotFound (53), FinalPrecludesAbstract (1209), FractionOutOfRange (5026), FuncEvalAborted (6000), FuncEvalBadLocation (6007), FuncEvalBadThreadNotStarted (6005), FuncEvalBadThreadState (6004), FuncEvalThreadSleepWaitJoin (6003), FuncEvalThreadSuspended (6002), FuncEvalTimedout (6001), FuncEvalWebMethod (6008), FunctionExpected (5002), GetAndSetAreInconsistent (1142), HidesAbstractInBase (1172), HidesParentMember (1170), IllegalAssignment (5008), IllegalChar (1014), IllegalEval (5033), IllegalParamArrayAttribute (1221), IllegalUseOfSuper (1189), IllegalUseOfThis (1122), IllegalVisibility (1102), ImplicitlyReferencedAssemblyNotFound (1259), ImpossibleConversion (1208), IncompatibleAssemblyReference (1267), IncompatibleVisibility (1108), IncorrectNumberOfIndices (5042), InstanceNotAccessibleFromStatic (1243), InterfaceIllegalInInterface (1227), InternalError (51), InvalidAssemblyKeyFile (1268), InvalidBaseTypeForEnum (1213), InvalidCall (5), InvalidCustomAttribute (1143), InvalidCustomAttributeArgument (1144), InvalidCustomAttributeClassOrCtor (1146), InvalidCustomAttributeTarget (1231), InvalidDebugDirective (1235), InvalidElse (1034), InvalidImport (1229), InvalidLanguageOption (1179), InvalidPositionDirective (1114), InvalidPrototype (5023), InvalidResource (1262), ItemNotAllowedOnExpandoClass (1152), KeywordUsedAsIdentifier (1137), MemberInitializerCannotContainFuncExpr (1270), MemberTypeCLSCompliantMismatch (1265), MethodClashOnExpandoSuperClass (1155), MethodInBaseIsNotVirtual (1174), MethodNotAllowedOnExpandoClass (1153), MissingConstructForAttributes (1160), MissingNameParameter (5037), MoreNamedParametersThanArguments (5038), MustBeEOL (1115), MustImplementMethod (1128), MustProvideNameForNamedParameter (5035), NeedArrayObject (5031), NeedCompileTimeConstant (1110), NeedInstance (1210), NeedInterface (1129), NeedObject (424), NeedType (1112), NestedInstanceTypeCannotBeExtendedByStatic (1237), NewNotSpecifiedInMethodDeclaration (1173), NoAt (1032), NoCatch (1033), NoCcEnd (1029), NoColon (1003), NoComma (1100), NoCommaOrTypeDefinitionError (1191), NoCommentEnd (1016), NoConstructor (5032), NoEqual (1011), NoError (0), NoFuncEvalAllowed (6006), NoIdentifier (1010), NoLabel (1026), NoLeftCurly (1008), NoLeftParen (1005), NoMemberIdentifier (1028), NoMethodInBaseToNew (1175), NoMethodInBaseToOverride (1180), NonCLSCompliantMember (1163), NonCLSCompliantType (1264), NonClsException (5046), NonStaticWithTypeName (1245), NonSupportedInDebugger (5039), NoRightBracket (1007), NoRightBracketOrComma (1194), NoRightCurly (1009), NoRightParen (1006), NoRightParenOrComma (1193), NoSemicolon (1004), NoSuchMember (1151), NoSuchStaticMember (1246), NoSuchType (1241), NotAccessible (1123), NotAllowedInSuperConstructorCall (1140), NotAnExpandoFunction (1252), NotCollection (451), NotConst (1031), NotDeletable (1164), NotIndexable (1158), NotInsideClass (1113), NotMeantToBeCalledDirectly (1141), NotOKToCallSuper (1188), NotValidForConstructor (1181), NotValidVersionString (1253), NotYetImplemented (5034), NoVarInEnum (1228), NoWhile (1024), NumberExpected (5001), ObjectExpected (5007), OctalLiteralsAreDeprecated (1186), OLENoPropOrMethod (438), OnlyClassesAllowed (1161), OnlyClassesAndPackagesAllowed (1234), OutOfMemory (7), OutOfStack (28), OverrideAndHideUsedTogether (1178), PackageExpected (1165), PackageInWrongContext (1232), ParamListNotLast (1240), PossibleBadConversion (1260), PossibleBadConversionFromString (1261), PrecisionOutOfRange (5027), PropertyLevelAttributesMustBeOnGetter (1238), RefParamsNonSupportedInDebugger (5043), RegExpExpected (5016), RegExpSyntax (5017), ShouldBeAbstract (1223), SideEffectsDisallowed (6012), StaticIsAlreadyFinal (1217), StaticMethodsCannotHide (1219), StaticMethodsCannotOverride (1218), StaticMissingInStaticInit (1159), StaticRequiresTypeName (1244), StaticVarNotAvailable (6009), StringConcatIsSlow (1255), StringExpected (5005), SuperClassConstructorNotAccessible (1185), SuspectAssignment (1206), SuspectLoopCondition (1247), SuspectSemicolon (1207), SyntaxError (1002), TooFewParameters (1204), TooManyParameters (1148), TooManyTokensSkipped (1197), TypeAssemblyCLSCompliantMismatch (1266), TypeCannotBeExtended (1134), TypeMismatch (13), TypeNameTooLong (1269), TypeObjectNotAvailable (6010), UncaughtException (5022), UndeclaredVariable (1135), UndefinedIdentifier (5009), UnexpectedSemicolon (1196), UnreachableCatch (1133), UnterminatedString (1015), URIDecodeError (5025), URIEncodeError (5024), UselessAssignment (1205), UselessExpression (1169), VariableLeftUninitialized (1136), VariableMightBeUnitialized (1187), VarIllegalInInterface (1226), VBArrayExpected (5013), WriteOnlyProperty (5041), WrongDirective (1118), WrongUseOfAddressOf (1263) """
    AbstractCannotBePrivate: JSError = ...
    AbstractCannotBeStatic: JSError = ...
    AbstractWithBody: JSError = ...
    ActionNotSupported: JSError = ...
    AmbiguousBindingBecauseOfEval: JSError = ...
    AmbiguousBindingBecauseOfWith: JSError = ...
    AmbiguousConstructorCall: JSError = ...
    AmbiguousMatch: JSError = ...
    ArrayLengthAssignIncorrect: JSError = ...
    ArrayLengthConstructIncorrect: JSError = ...
    ArrayMayBeCopied: JSError = ...
    AssemblyAttributesMustBeGlobal: JSError = ...
    AssignmentToReadOnly: JSError = ...
    BadBreak: JSError = ...
    BadContinue: JSError = ...
    BadFunctionDeclaration: JSError = ...
    BadHexDigit: JSError = ...
    BadLabel: JSError = ...
    BadModifierInInterface: JSError = ...
    BadOctalLiteral: JSError = ...
    BadPropertyDeclaration: JSError = ...
    BadReturn: JSError = ...
    BadSwitch: JSError = ...
    BadThrow: JSError = ...
    BadVariableDeclaration: JSError = ...
    BadWayToLeaveFinally: JSError = ...
    BaseClassIsExpandoAlready: JSError = ...
    BooleanExpected: JSError = ...
    CannotAssignToFunctionResult: JSError = ...
    CannotBeAbstract: JSError = ...
    CannotCallSecurityMethodLateBound: JSError = ...
    CannotChangeVisibility: JSError = ...
    CannotInstantiateAbstractClass: JSError = ...
    CannotNestPositionDirective: JSError = ...
    CannotReturnValueFromVoidFunction: JSError = ...
    CannotUseNameOfClass: JSError = ...
    CannotUseStaticSecurityAttribute: JSError = ...
    CantAssignThis: JSError = ...
    CantCreateObject: JSError = ...
    CcInvalidElif: JSError = ...
    CcInvalidElse: JSError = ...
    CcInvalidEnd: JSError = ...
    CcInvalidInDebugger: JSError = ...
    CcOff: JSError = ...
    CircularDefinition: JSError = ...
    ClashWithProperty: JSError = ...
    ClassNotAllowed: JSError = ...
    ConstructorMayNotHaveReturnType: JSError = ...
    CustomAttributeUsedMoreThanOnce: JSError = ...
    DateExpected: JSError = ...
    DelegatesShouldNotBeExplicitlyConstructed: JSError = ...
    Deprecated: JSError = ...
    DifferentReturnTypeFromBase: JSError = ...
    DoesNotHaveAnAddress: JSError = ...
    DupDefault: JSError = ...
    DuplicateMethod: JSError = ...
    DuplicateName: JSError = ...
    DuplicateNamedParameter: JSError = ...
    DupVisibility: JSError = ...
    EnumeratorExpected: JSError = ...
    EnumNotAllowed: JSError = ...
    ErrEOF: JSError = ...
    ExceptionFromHResult: JSError = ...
    ExecutablesCannotBeLocalized: JSError = ...
    ExpandoClassShouldNotImpleEnumerable: JSError = ...
    ExpandoMustBePublic: JSError = ...
    ExpandoPrecludesAbstract: JSError = ...
    ExpandoPrecludesOverride: JSError = ...
    ExpandoPrecludesStatic: JSError = ...
    ExpectedAssembly: JSError = ...
    ExpressionExpected: JSError = ...
    FileNotFound: JSError = ...
    FinalPrecludesAbstract: JSError = ...
    FractionOutOfRange: JSError = ...
    FuncEvalAborted: JSError = ...
    FuncEvalBadLocation: JSError = ...
    FuncEvalBadThreadNotStarted: JSError = ...
    FuncEvalBadThreadState: JSError = ...
    FuncEvalThreadSleepWaitJoin: JSError = ...
    FuncEvalThreadSuspended: JSError = ...
    FuncEvalTimedout: JSError = ...
    FuncEvalWebMethod: JSError = ...
    FunctionExpected: JSError = ...
    GetAndSetAreInconsistent: JSError = ...
    HidesAbstractInBase: JSError = ...
    HidesParentMember: JSError = ...
    IllegalAssignment: JSError = ...
    IllegalChar: JSError = ...
    IllegalEval: JSError = ...
    IllegalParamArrayAttribute: JSError = ...
    IllegalUseOfSuper: JSError = ...
    IllegalUseOfThis: JSError = ...
    IllegalVisibility: JSError = ...
    ImplicitlyReferencedAssemblyNotFound: JSError = ...
    ImpossibleConversion: JSError = ...
    IncompatibleAssemblyReference: JSError = ...
    IncompatibleVisibility: JSError = ...
    IncorrectNumberOfIndices: JSError = ...
    InstanceNotAccessibleFromStatic: JSError = ...
    InterfaceIllegalInInterface: JSError = ...
    InternalError: JSError = ...
    InvalidAssemblyKeyFile: JSError = ...
    InvalidBaseTypeForEnum: JSError = ...
    InvalidCall: JSError = ...
    InvalidCustomAttribute: JSError = ...
    InvalidCustomAttributeArgument: JSError = ...
    InvalidCustomAttributeClassOrCtor: JSError = ...
    InvalidCustomAttributeTarget: JSError = ...
    InvalidDebugDirective: JSError = ...
    InvalidElse: JSError = ...
    InvalidImport: JSError = ...
    InvalidLanguageOption: JSError = ...
    InvalidPositionDirective: JSError = ...
    InvalidPrototype: JSError = ...
    InvalidResource: JSError = ...
    ItemNotAllowedOnExpandoClass: JSError = ...
    KeywordUsedAsIdentifier: JSError = ...
    MemberInitializerCannotContainFuncExpr: JSError = ...
    MemberTypeCLSCompliantMismatch: JSError = ...
    MethodClashOnExpandoSuperClass: JSError = ...
    MethodInBaseIsNotVirtual: JSError = ...
    MethodNotAllowedOnExpandoClass: JSError = ...
    MissingConstructForAttributes: JSError = ...
    MissingNameParameter: JSError = ...
    MoreNamedParametersThanArguments: JSError = ...
    MustBeEOL: JSError = ...
    MustImplementMethod: JSError = ...
    MustProvideNameForNamedParameter: JSError = ...
    NeedArrayObject: JSError = ...
    NeedCompileTimeConstant: JSError = ...
    NeedInstance: JSError = ...
    NeedInterface: JSError = ...
    NeedObject: JSError = ...
    NeedType: JSError = ...
    NestedInstanceTypeCannotBeExtendedByStatic: JSError = ...
    NewNotSpecifiedInMethodDeclaration: JSError = ...
    NoAt: JSError = ...
    NoCatch: JSError = ...
    NoCcEnd: JSError = ...
    NoColon: JSError = ...
    NoComma: JSError = ...
    NoCommaOrTypeDefinitionError: JSError = ...
    NoCommentEnd: JSError = ...
    NoConstructor: JSError = ...
    NoEqual: JSError = ...
    NoError: JSError = ...
    NoFuncEvalAllowed: JSError = ...
    NoIdentifier: JSError = ...
    NoLabel: JSError = ...
    NoLeftCurly: JSError = ...
    NoLeftParen: JSError = ...
    NoMemberIdentifier: JSError = ...
    NoMethodInBaseToNew: JSError = ...
    NoMethodInBaseToOverride: JSError = ...
    NonCLSCompliantMember: JSError = ...
    NonCLSCompliantType: JSError = ...
    NonClsException: JSError = ...
    NonStaticWithTypeName: JSError = ...
    NonSupportedInDebugger: JSError = ...
    NoRightBracket: JSError = ...
    NoRightBracketOrComma: JSError = ...
    NoRightCurly: JSError = ...
    NoRightParen: JSError = ...
    NoRightParenOrComma: JSError = ...
    NoSemicolon: JSError = ...
    NoSuchMember: JSError = ...
    NoSuchStaticMember: JSError = ...
    NoSuchType: JSError = ...
    NotAccessible: JSError = ...
    NotAllowedInSuperConstructorCall: JSError = ...
    NotAnExpandoFunction: JSError = ...
    NotCollection: JSError = ...
    NotConst: JSError = ...
    NotDeletable: JSError = ...
    NotIndexable: JSError = ...
    NotInsideClass: JSError = ...
    NotMeantToBeCalledDirectly: JSError = ...
    NotOKToCallSuper: JSError = ...
    NotValidForConstructor: JSError = ...
    NotValidVersionString: JSError = ...
    NotYetImplemented: JSError = ...
    NoVarInEnum: JSError = ...
    NoWhile: JSError = ...
    NumberExpected: JSError = ...
    ObjectExpected: JSError = ...
    OctalLiteralsAreDeprecated: JSError = ...
    OLENoPropOrMethod: JSError = ...
    OnlyClassesAllowed: JSError = ...
    OnlyClassesAndPackagesAllowed: JSError = ...
    OutOfMemory: JSError = ...
    OutOfStack: JSError = ...
    OverrideAndHideUsedTogether: JSError = ...
    PackageExpected: JSError = ...
    PackageInWrongContext: JSError = ...
    ParamListNotLast: JSError = ...
    PossibleBadConversion: JSError = ...
    PossibleBadConversionFromString: JSError = ...
    PrecisionOutOfRange: JSError = ...
    PropertyLevelAttributesMustBeOnGetter: JSError = ...
    RefParamsNonSupportedInDebugger: JSError = ...
    RegExpExpected: JSError = ...
    RegExpSyntax: JSError = ...
    ShouldBeAbstract: JSError = ...
    SideEffectsDisallowed: JSError = ...
    StaticIsAlreadyFinal: JSError = ...
    StaticMethodsCannotHide: JSError = ...
    StaticMethodsCannotOverride: JSError = ...
    StaticMissingInStaticInit: JSError = ...
    StaticRequiresTypeName: JSError = ...
    StaticVarNotAvailable: JSError = ...
    StringConcatIsSlow: JSError = ...
    StringExpected: JSError = ...
    SuperClassConstructorNotAccessible: JSError = ...
    SuspectAssignment: JSError = ...
    SuspectLoopCondition: JSError = ...
    SuspectSemicolon: JSError = ...
    SyntaxError: JSError = ...
    TooFewParameters: JSError = ...
    TooManyParameters: JSError = ...
    TooManyTokensSkipped: JSError = ...
    TypeAssemblyCLSCompliantMismatch: JSError = ...
    TypeCannotBeExtended: JSError = ...
    TypeMismatch: JSError = ...
    TypeNameTooLong: JSError = ...
    TypeObjectNotAvailable: JSError = ...
    UncaughtException: JSError = ...
    UndeclaredVariable: JSError = ...
    UndefinedIdentifier: JSError = ...
    UnexpectedSemicolon: JSError = ...
    UnreachableCatch: JSError = ...
    UnterminatedString: JSError = ...
    URIDecodeError: JSError = ...
    URIEncodeError: JSError = ...
    UselessAssignment: JSError = ...
    UselessExpression: JSError = ...
    value__ = ...
    VariableLeftUninitialized: JSError = ...
    VariableMightBeUnitialized: JSError = ...
    VarIllegalInInterface: JSError = ...
    VBArrayExpected: JSError = ...
    WriteOnlyProperty: JSError = ...
    WrongDirective: JSError = ...
    WrongUseOfAddressOf: JSError = ...


class JSField(FieldInfo): # skipped bases: <type '_MemberInfo'>, <type '_FieldInfo'>, <type 'ICustomAttributeProvider'>, <type 'object'>
    """ no doc """
    pass

class JSFieldInfo(FieldInfo): # skipped bases: <type '_MemberInfo'>, <type '_FieldInfo'>, <type 'ICustomAttributeProvider'>, <type 'object'>
    """ no doc """
    pass

class JSFunctionAttribute(Attribute): # skipped bases: <type '_Attribute'>, <type 'object'>
    """
    JSFunctionAttribute(value: JSFunctionAttributeEnum)
    JSFunctionAttribute(value: JSFunctionAttributeEnum, builtinFunction: JSBuiltin)
    """
    def GetAttributeValue(self) -> JSFunctionAttributeEnum:
        """ GetAttributeValue(self: JSFunctionAttribute) -> JSFunctionAttributeEnum """
        ...

    def __new__(cls, value:JSFunctionAttributeEnum, builtinFunction:JSBuiltin = ...) -> Self:
        """
        __new__(cls: type, value: JSFunctionAttributeEnum)
        __new__(cls: type, value: JSFunctionAttributeEnum, builtinFunction: JSBuiltin)
        """
        ...


class JSFunctionAttributeEnum(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) JSFunctionAttributeEnum, values: ClassicFunction (35), ClassicNestedFunction (47), HasArguments (1), HasEngine (32), HasStackFrame (8), HasThisObject (2), HasVarArgs (16), IsExpandoMethod (64), IsInstanceNestedClassConstructor (128), IsNested (4), NestedFunction (44), None (0) """
    ClassicFunction: JSFunctionAttributeEnum = ...
    ClassicNestedFunction: JSFunctionAttributeEnum = ...
    HasArguments: JSFunctionAttributeEnum = ...
    HasEngine: JSFunctionAttributeEnum = ...
    HasStackFrame: JSFunctionAttributeEnum = ...
    HasThisObject: JSFunctionAttributeEnum = ...
    HasVarArgs: JSFunctionAttributeEnum = ...
    IsExpandoMethod: JSFunctionAttributeEnum = ...
    IsInstanceNestedClassConstructor: JSFunctionAttributeEnum = ...
    IsNested: JSFunctionAttributeEnum = ...
    NestedFunction: JSFunctionAttributeEnum = ...
    value__ = ...


class JSVariableField(JSField): # skipped bases: <type '_MemberInfo'>, <type '_FieldInfo'>, <type 'ICustomAttributeProvider'>, <type 'object'>
    """ no doc """
    pass

class JSLocalField(JSVariableField): # skipped bases: <type '_MemberInfo'>, <type '_FieldInfo'>, <type 'ICustomAttributeProvider'>, <type 'object'>
    """ JSLocalField(name: str, handle: RuntimeTypeHandle, slotNumber: int) """
    def GetValue(self, obj:object) -> object:
        """ GetValue(self: JSLocalField, obj: object) -> object """
        ...

    def SetValue(self, obj:object, value:object, invokeAttr:BindingFlags = ..., binder:Binder = ..., locale:CultureInfo = ...): # -> 
        """ SetValue(self: JSLocalField, obj: object, value: object, invokeAttr: BindingFlags, binder: Binder, locale: CultureInfo) """
        ...

    def __new__(cls, name:str, handle:RuntimeTypeHandle, slotNumber:int) -> Self:
        """ __new__(cls: type, name: str, handle: RuntimeTypeHandle, slotNumber: int) """
        ...


class JSMethodInfo(MethodInfo): # skipped bases: <type '_MemberInfo'>, <type '_MethodInfo'>, <type '_MethodBase'>, <type 'ICustomAttributeProvider'>, <type 'object'>
    """ no doc """
    pass

class JSParser: # skipped bases: <type 'object'>, <type 'object'>
    """ JSParser(context: Context) """
    def Parse(self) -> ScriptBlock:
        """ Parse(self: JSParser) -> ScriptBlock """
        ...

    def ParseEvalBody(self) -> Block:
        """ ParseEvalBody(self: JSParser) -> Block """
        ...


class JSPrototypeObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    constructor = ...
    field_table = ...
    parent = ...


class JSScanner: # skipped bases: <type 'object'>, <type 'object'>
    """
    JSScanner()
    JSScanner(sourceContext: Context)
    """
    def GetCurrentLine(self) -> int:
        """ GetCurrentLine(self: JSScanner) -> int """
        ...

    def GetCurrentPosition(self, absolute:bool) -> int:
        """ GetCurrentPosition(self: JSScanner, absolute: bool) -> int """
        ...

    def GetNextToken(self): # -> 
        """ GetNextToken(self: JSScanner) """
        ...

    def GetSourceCode(self) -> str:
        """ GetSourceCode(self: JSScanner) -> str """
        ...

    def GetStartLinePosition(self) -> int:
        """ GetStartLinePosition(self: JSScanner) -> int """
        ...

    def GetStringLiteral(self) -> str:
        """ GetStringLiteral(self: JSScanner) -> str """
        ...

    def GotEndOfLine(self) -> bool:
        """ GotEndOfLine(self: JSScanner) -> bool """
        ...

    @staticmethod
    def IsKeyword(token:JSToken) -> bool:
        """ IsKeyword(token: JSToken) -> bool """
        ...

    @staticmethod
    def IsOperator(token:JSToken) -> bool:
        """ IsOperator(token: JSToken) -> bool """
        ...

    def SetAuthoringMode(self, mode:bool): # -> 
        """ SetAuthoringMode(self: JSScanner, mode: bool) """
        ...

    def SetSource(self, sourceContext:Context): # -> 
        """ SetSource(self: JSScanner, sourceContext: Context) """
        ...

    def SkipMultiLineComment(self) -> int:
        """ SkipMultiLineComment(self: JSScanner) -> int """
        ...


class JSToken(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum JSToken, values: Abstract (15), AccessField (38), Assert (104), Assign (69), BitwiseAnd (52), BitwiseAndAssign (74), BitwiseNot (40), BitwiseOr (50), BitwiseOrAssign (75), BitwiseXor (51), BitwiseXorAssign (76), Boolean (105), Break (6), Byte (106), Case (84), Catch (85), Char (107), Class (24), Colon (82), Comma (83), Comment (102), ConditionalIf (81), Const (23), Continue (5), Debugger (86), Decimal (108), Decrement (45), Default (87), Delete (41), Divide (65), DivideAssign (73), Do (3), Double (109), DoubleColon (110), Else (88), EndOfFile (0), EndOfLine (132), Ensure (112), Enum (111), Equal (53), Event (21), Export (89), Extends (90), False (30), Final (20), Finally (91), FirstBinaryOp (46), FirstOp (39), Float (113), For (2), Function (25), Get (92), Goto (114), GreaterThan (57), GreaterThanEqual (60), Identifier (32), If (1), Implements (93), Import (8), In (68), Increment (44), Instanceof (67), Int (115), IntegerLiteral (34), Interface (94), Internal (14), Invariant (116), LastAssign (80), LastBinaryOp (80), LastOp (83), LastPPOperator (66), LeftBracket (37), LeftCurly (26), LeftParen (36), LeftShift (61), LeftShiftAssign (78), LessThan (58), LessThanEqual (59), LogicalAnd (49), LogicalNot (39), LogicalOr (48), Long (117), Minus (47), MinusAssign (71), Modulo (66), ModuloAssign (77), Multiply (64), MultiplyAssign (72), Namespace (118), Native (119), New (95), None (-1), NotEqual (54), Null (28), NumericLiteral (35), Package (13), ParamArray (126), Plus (46), PlusAssign (70), PreProcessDirective (133), PreProcessorConstant (101), Private (18), Protected (19), Public (16), Require (120), Return (7), RightBracket (100), RightCurly (99), RightParen (98), RightShift (62), RightShiftAssign (79), Sbyte (121), Semicolon (27), Set (96), Short (122), Static (17), StrictEqual (55), StrictNotEqual (56), StringLiteral (33), Super (97), Switch (10), Synchronized (123), This (31), Throw (11), Throws (125), Transient (124), True (29), Try (12), Typeof (43), Uint (129), Ulong (130), UnsignedRightShift (63), UnsignedRightShiftAssign (80), UnterminatedComment (103), Use (131), Ushort (128), Var (22), Void (42), Volatile (127), While (4), With (9) """
    Abstract: JSToken = ...
    AccessField: JSToken = ...
    Assert: JSToken = ...
    Assign: JSToken = ...
    BitwiseAnd: JSToken = ...
    BitwiseAndAssign: JSToken = ...
    BitwiseNot: JSToken = ...
    BitwiseOr: JSToken = ...
    BitwiseOrAssign: JSToken = ...
    BitwiseXor: JSToken = ...
    BitwiseXorAssign: JSToken = ...
    Boolean: JSToken = ...
    Break: JSToken = ...
    Byte: JSToken = ...
    Case: JSToken = ...
    Catch: JSToken = ...
    Char: JSToken = ...
    Class: JSToken = ...
    Colon: JSToken = ...
    Comma: JSToken = ...
    Comment: JSToken = ...
    ConditionalIf: JSToken = ...
    Const: JSToken = ...
    Continue: JSToken = ...
    Debugger: JSToken = ...
    Decimal: JSToken = ...
    Decrement: JSToken = ...
    Default: JSToken = ...
    Delete: JSToken = ...
    Divide: JSToken = ...
    DivideAssign: JSToken = ...
    Do: JSToken = ...
    Double: JSToken = ...
    DoubleColon: JSToken = ...
    Else: JSToken = ...
    EndOfFile: JSToken = ...
    EndOfLine: JSToken = ...
    Ensure: JSToken = ...
    Enum: JSToken = ...
    Equal: JSToken = ...
    Event: JSToken = ...
    Export: JSToken = ...
    Extends: JSToken = ...
    Final: JSToken = ...
    Finally: JSToken = ...
    FirstBinaryOp: JSToken = ...
    FirstOp: JSToken = ...
    Float: JSToken = ...
    For: JSToken = ...
    Function: JSToken = ...
    Get: JSToken = ...
    Goto: JSToken = ...
    GreaterThan: JSToken = ...
    GreaterThanEqual: JSToken = ...
    Identifier: JSToken = ...
    If: JSToken = ...
    Implements: JSToken = ...
    Import: JSToken = ...
    In: JSToken = ...
    Increment: JSToken = ...
    Instanceof: JSToken = ...
    Int: JSToken = ...
    IntegerLiteral: JSToken = ...
    Interface: JSToken = ...
    Internal: JSToken = ...
    Invariant: JSToken = ...
    LastAssign: JSToken = ...
    LastBinaryOp: JSToken = ...
    LastOp: JSToken = ...
    LastPPOperator: JSToken = ...
    LeftBracket: JSToken = ...
    LeftCurly: JSToken = ...
    LeftParen: JSToken = ...
    LeftShift: JSToken = ...
    LeftShiftAssign: JSToken = ...
    LessThan: JSToken = ...
    LessThanEqual: JSToken = ...
    LogicalAnd: JSToken = ...
    LogicalNot: JSToken = ...
    LogicalOr: JSToken = ...
    Long: JSToken = ...
    Minus: JSToken = ...
    MinusAssign: JSToken = ...
    Modulo: JSToken = ...
    ModuloAssign: JSToken = ...
    Multiply: JSToken = ...
    MultiplyAssign: JSToken = ...
    Namespace: JSToken = ...
    Native: JSToken = ...
    New: JSToken = ...
    NotEqual: JSToken = ...
    Null: JSToken = ...
    NumericLiteral: JSToken = ...
    Package: JSToken = ...
    ParamArray: JSToken = ...
    Plus: JSToken = ...
    PlusAssign: JSToken = ...
    PreProcessDirective: JSToken = ...
    PreProcessorConstant: JSToken = ...
    Private: JSToken = ...
    Protected: JSToken = ...
    Public: JSToken = ...
    Require: JSToken = ...
    Return: JSToken = ...
    RightBracket: JSToken = ...
    RightCurly: JSToken = ...
    RightParen: JSToken = ...
    RightShift: JSToken = ...
    RightShiftAssign: JSToken = ...
    Sbyte: JSToken = ...
    Semicolon: JSToken = ...
    Set: JSToken = ...
    Short: JSToken = ...
    Static: JSToken = ...
    StrictEqual: JSToken = ...
    StrictNotEqual: JSToken = ...
    StringLiteral: JSToken = ...
    Super: JSToken = ...
    Switch: JSToken = ...
    Synchronized: JSToken = ...
    This: JSToken = ...
    Throw: JSToken = ...
    Throws: JSToken = ...
    Transient: JSToken = ...
    Try: JSToken = ...
    Typeof: JSToken = ...
    Uint: JSToken = ...
    Ulong: JSToken = ...
    UnsignedRightShift: JSToken = ...
    UnsignedRightShiftAssign: JSToken = ...
    UnterminatedComment: JSToken = ...
    Use: JSToken = ...
    Ushort: JSToken = ...
    value__ = ...
    Var: JSToken = ...
    Void: JSToken = ...
    Volatile: JSToken = ...
    While: JSToken = ...
    With: JSToken = ...


class LateBinding: # skipped bases: <type 'object'>, <type 'object'>
    """
    LateBinding(name: str)
    LateBinding(name: str, obj: object)
    """
    def Call(self, arguments:Array, construct:bool, brackets:bool, engine:VsaEngine) -> object:
        """ Call(self: LateBinding, arguments: Array[object], construct: bool, brackets: bool, engine: VsaEngine) -> object """
        ...

    @staticmethod
    def CallValue(thisob:object, val:object, arguments:Array, construct:bool, brackets:bool, engine:VsaEngine) -> object:
        """ CallValue(thisob: object, val: object, arguments: Array[object], construct: bool, brackets: bool, engine: VsaEngine) -> object """
        ...

    @staticmethod
    def CallValue2(val:object, thisob:object, arguments:Array, construct:bool, brackets:bool, engine:VsaEngine) -> object:
        """ CallValue2(val: object, thisob: object, arguments: Array[object], construct: bool, brackets: bool, engine: VsaEngine) -> object """
        ...

    def Delete(self) -> bool:
        """ Delete(self: LateBinding) -> bool """
        ...

    @staticmethod
    def DeleteMember(obj:object, name:str) -> bool:
        """ DeleteMember(obj: object, name: str) -> bool """
        ...

    def GetNonMissingValue(self) -> object:
        """ GetNonMissingValue(self: LateBinding) -> object """
        ...

    def GetValue2(self) -> object:
        """ GetValue2(self: LateBinding) -> object """
        ...

    @staticmethod
    def SetIndexedPropertyValueStatic(obj:object, arguments:Array, value:object): # -> 
        """ SetIndexedPropertyValueStatic(obj: object, arguments: Array[object], value: object) """
        ...

    def SetValue(self, value:object): # -> 
        """ SetValue(self: LateBinding, value: object) """
        ...

    def __call__(self, *args): #cannot find CLR method
        """ Call(self: LateBinding, arguments: Array[object], construct: bool, brackets: bool, engine: VsaEngine) -> object """
        ...

    obj = ...


class LenientArrayPrototype(ArrayPrototype): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    concat = ...
    constructor = ...
    field_table = ...
    join = ...
    parent = ...
    pop = ...
    push = ...
    reverse = ...
    shift = ...
    slice = ...
    sort = ...
    splice = ...
    toLocaleString = ...
    toString = ...
    unshift = ...


class LenientBooleanPrototype(BooleanPrototype): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    constructor = ...
    field_table = ...
    parent = ...
    toString = ...
    valueOf = ...


class LenientDateConstructor(DateConstructor): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    ilength = ...
    parent = ...
    parse = ...
    UTC = ...


class LenientDatePrototype(DatePrototype): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    constructor = ...
    field_table = ...
    getDate = ...
    getDay = ...
    getFullYear = ...
    getHours = ...
    getMilliseconds = ...
    getMinutes = ...
    getMonth = ...
    getSeconds = ...
    getTime = ...
    getTimezoneOffset = ...
    getUTCDate = ...
    getUTCDay = ...
    getUTCFullYear = ...
    getUTCHours = ...
    getUTCMilliseconds = ...
    getUTCMinutes = ...
    getUTCMonth = ...
    getUTCSeconds = ...
    getVarDate = ...
    getYear = ...
    parent = ...
    setDate = ...
    setFullYear = ...
    setHours = ...
    setMilliseconds = ...
    setMinutes = ...
    setMonth = ...
    setSeconds = ...
    setTime = ...
    setUTCDate = ...
    setUTCFullYear = ...
    setUTCHours = ...
    setUTCMilliseconds = ...
    setUTCMinutes = ...
    setUTCMonth = ...
    setUTCSeconds = ...
    setYear = ...
    toDateString = ...
    toGMTString = ...
    toLocaleDateString = ...
    toLocaleString = ...
    toLocaleTimeString = ...
    toString = ...
    toTimeString = ...
    toUTCString = ...
    valueOf = ...


class LenientEnumeratorPrototype(EnumeratorPrototype): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    atEnd = ...
    constructor = ...
    field_table = ...
    item = ...
    moveFirst = ...
    moveNext = ...
    parent = ...


class LenientErrorPrototype(ErrorPrototype): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    constructor = ...
    field_table = ...
    name = ...
    parent = ...
    toString = ...


class LenientFunctionPrototype(FunctionPrototype): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    apply = ...
    call = ...
    constructor = ...
    field_table = ...
    ilength = ...
    parent = ...
    toString = ...


class LenientGlobalObject(GlobalObject): # skipped bases: <type 'object'>
    """ no doc """
    boolean = ...
    byte = ...
    char = ...
    decimal = ...
    decodeURI = ...
    decodeURIComponent = ...
    double = ...
    encodeURI = ...
    encodeURIComponent = ...
    escape = ...
    eval = ...
    float = ...
    GetObject = ...
    Infinity = ...
    int = ...
    isFinite = ...
    isNaN = ...
    long = ...
    NaN = ...
    originalActiveXObjectField = ...
    originalArrayField = ...
    originalBooleanField = ...
    originalDateField = ...
    originalEnumeratorField = ...
    originalErrorField = ...
    originalEvalErrorField = ...
    originalFunctionField = ...
    originalNumberField = ...
    originalObjectField = ...
    originalObjectPrototypeField = ...
    originalRangeErrorField = ...
    originalReferenceErrorField = ...
    originalRegExpField = ...
    originalStringField = ...
    originalSyntaxErrorField = ...
    originalTypeErrorField = ...
    originalURIErrorField = ...
    originalVBArrayField = ...
    parseFloat = ...
    parseInt = ...
    sbyte = ...
    ScriptEngine = ...
    ScriptEngineBuildVersion = ...
    ScriptEngineMajorVersion = ...
    ScriptEngineMinorVersion = ...
    short = ...
    uint = ...
    ulong = ...
    undefined = ...
    unescape = ...
    ushort = ...
    void = ...


class MathObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @staticmethod
    def abs(d:float) -> float:
        """ abs(d: float) -> float """
        ...

    @staticmethod
    def acos(x:float) -> float:
        """ acos(x: float) -> float """
        ...

    @staticmethod
    def asin(x:float) -> float:
        """ asin(x: float) -> float """
        ...

    @staticmethod
    def atan(x:float) -> float:
        """ atan(x: float) -> float """
        ...

    @staticmethod
    def atan2(dy:float, dx:float) -> float:
        """ atan2(dy: float, dx: float) -> float """
        ...

    @staticmethod
    def ceil(x:float) -> float:
        """ ceil(x: float) -> float """
        ...

    @staticmethod
    def cos(x:float) -> float:
        """ cos(x: float) -> float """
        ...

    @staticmethod
    def exp(x:float) -> float:
        """ exp(x: float) -> float """
        ...

    @staticmethod
    def floor(x:float) -> float:
        """ floor(x: float) -> float """
        ...

    @staticmethod
    def log(x:float) -> float:
        """ log(x: float) -> float """
        ...

    @staticmethod
    def max(x:object, y:object, args:Array) -> float:
        """ max(x: object, y: object, *args: Array[object]) -> float """
        ...

    @staticmethod
    def min(x:object, y:object, args:Array) -> float:
        """ min(x: object, y: object, *args: Array[object]) -> float """
        ...

    @staticmethod
    def pow(dx:float, dy:float) -> float:
        """ pow(dx: float, dy: float) -> float """
        ...

    @staticmethod
    def random() -> float:
        """ random() -> float """
        ...

    @staticmethod
    def round(d:float) -> float:
        """ round(d: float) -> float """
        ...

    @staticmethod
    def sin(x:float) -> float:
        """ sin(x: float) -> float """
        ...

    @staticmethod
    def sqrt(x:float) -> float:
        """ sqrt(x: float) -> float """
        ...

    @staticmethod
    def tan(x:float) -> float:
        """ tan(x: float) -> float """
        ...

    E: float = ...
    field_table = ...
    LN10: float = ...
    LN2: float = ...
    LOG10E: float = ...
    LOG2E: float = ...
    parent = ...
    PI: float = ...
    SQRT1_2: float = ...
    SQRT2: float = ...


class LenientMathObject(MathObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    abs = ...
    acos = ...
    asin = ...
    atan = ...
    atan2 = ...
    ceil = ...
    cos = ...
    E: float = ...
    exp = ...
    field_table = ...
    floor = ...
    LN10: float = ...
    LN2: float = ...
    log = ...
    LOG10E: float = ...
    LOG2E: float = ...
    max = ...
    min = ...
    parent = ...
    PI: float = ...
    pow = ...
    random = ...
    round = ...
    sin = ...
    sqrt = ...
    SQRT1_2: float = ...
    SQRT2: float = ...
    tan = ...


class NumberObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetType(self) -> Type:
        """ GetType(self: NumberObject) -> Type """
        ...

    def __new__(cls, *args): #cannot find CLR constructor
        """ __new__(cls: type, parent: ScriptObject, value: object) """
        ...

    field_table = ...
    parent = ...


class NumberPrototype(NumberObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def constructor(self) -> NumberConstructor:
        """ Get: constructor() -> NumberConstructor """
        ...


    @staticmethod
    def toExponential(thisob:object, fractionDigits:object) -> str:
        """ toExponential(thisob: object, fractionDigits: object) -> str """
        ...

    @staticmethod
    def toFixed(thisob:object, fractionDigits:float) -> str:
        """ toFixed(thisob: object, fractionDigits: float) -> str """
        ...

    @staticmethod
    def toLocaleString(thisob:object) -> str:
        """ toLocaleString(thisob: object) -> str """
        ...

    @staticmethod
    def toPrecision(thisob:object, precision:object) -> str:
        """ toPrecision(thisob: object, precision: object) -> str """
        ...

    @staticmethod
    def toString(thisob:object, radix:object) -> str:
        """ toString(thisob: object, radix: object) -> str """
        ...

    @staticmethod
    def valueOf(thisob:object) -> object:
        """ valueOf(thisob: object) -> object """
        ...

    field_table = ...
    parent = ...


class LenientNumberPrototype(NumberPrototype): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    constructor = ...
    field_table = ...
    parent = ...
    toExponential = ...
    toFixed = ...
    toLocaleString = ...
    toPrecision = ...
    toString = ...
    valueOf = ...


class ObjectPrototype(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def constructor(self) -> ObjectConstructor:
        """ Get: constructor() -> ObjectConstructor """
        ...


    @staticmethod
    def hasOwnProperty(thisob:object, name:object) -> bool:
        """ hasOwnProperty(thisob: object, name: object) -> bool """
        ...

    @staticmethod
    def isPrototypeOf(thisob:object, ob:object) -> bool:
        """ isPrototypeOf(thisob: object, ob: object) -> bool """
        ...

    @staticmethod
    def propertyIsEnumerable(thisob:object, name:object) -> bool:
        """ propertyIsEnumerable(thisob: object, name: object) -> bool """
        ...

    @staticmethod
    def toLocaleString(thisob:object) -> str:
        """ toLocaleString(thisob: object) -> str """
        ...

    @staticmethod
    def toString(thisob:object) -> str:
        """ toString(thisob: object) -> str """
        ...

    @staticmethod
    def valueOf(thisob:object) -> object:
        """ valueOf(thisob: object) -> object """
        ...

    field_table = ...
    parent = ...


class LenientObjectPrototype(ObjectPrototype): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    constructor = ...
    field_table = ...
    hasOwnProperty = ...
    isPrototypeOf = ...
    parent = ...
    propertyIsEnumerable = ...
    toLocaleString = ...
    toString = ...
    valueOf = ...


class RegExpPrototype(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def constructor(self) -> RegExpConstructor:
        """ Get: constructor() -> RegExpConstructor """
        ...


    @staticmethod
    def compile(thisob:object, source:object, flags:object) -> RegExpObject:
        """ compile(thisob: object, source: object, flags: object) -> RegExpObject """
        ...

    @staticmethod
    def exec(thisob:object, input:object) -> object:
        """ exec(thisob: object, input: object) -> object """
        ...

    @staticmethod
    def test(thisob:object, input:object) -> bool:
        """ test(thisob: object, input: object) -> bool """
        ...

    @staticmethod
    def toString(thisob:object) -> str:
        """ toString(thisob: object) -> str """
        ...

    field_table = ...
    parent = ...


class LenientRegExpPrototype(RegExpPrototype): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    compile = ...
    constructor = ...
    field_table = ...
    parent = ...
    test = ...
    toString = ...


class StringConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @staticmethod
    def fromCharCode(args:Array) -> str:
        """ fromCharCode(*args: Array[object]) -> str """
        ...

    field_table = ...
    ilength = ...
    parent = ...


class LenientStringConstructor(StringConstructor): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    fromCharCode = ...
    ilength = ...
    parent = ...


class StringObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def length(self) -> int:
        """ Get: length(self: StringObject) -> int """
        ...


    def Equals(self, ob:object) -> bool:
        """ Equals(self: StringObject, ob: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: StringObject) -> int """
        ...

    def GetType(self) -> Type:
        """ GetType(self: StringObject) -> Type """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __new__(cls, *args): #cannot find CLR constructor
        """ __new__(cls: type, prototype: ScriptObject, value: str) """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    field_table = ...
    parent = ...


class StringPrototype(StringObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def constructor(self) -> StringConstructor:
        """ Get: constructor() -> StringConstructor """
        ...


    @staticmethod
    def anchor(thisob:object, anchorName:object) -> str:
        """ anchor(thisob: object, anchorName: object) -> str """
        ...

    @staticmethod
    def big(thisob:object) -> str:
        """ big(thisob: object) -> str """
        ...

    @staticmethod
    def blink(thisob:object) -> str:
        """ blink(thisob: object) -> str """
        ...

    @staticmethod
    def bold(thisob:object) -> str:
        """ bold(thisob: object) -> str """
        ...

    @staticmethod
    def charAt(thisob:object, pos:float) -> str:
        """ charAt(thisob: object, pos: float) -> str """
        ...

    @staticmethod
    def charCodeAt(thisob:object, pos:float) -> object:
        """ charCodeAt(thisob: object, pos: float) -> object """
        ...

    @staticmethod
    def concat(thisob:object, args:Array) -> str:
        """ concat(thisob: object, *args: Array[object]) -> str """
        ...

    @staticmethod
    def fixed(thisob:object) -> str:
        """ fixed(thisob: object) -> str """
        ...

    @staticmethod
    def fontcolor(thisob:object, colorName:object) -> str:
        """ fontcolor(thisob: object, colorName: object) -> str """
        ...

    @staticmethod
    def fontsize(thisob:object, fontSize:object) -> str:
        """ fontsize(thisob: object, fontSize: object) -> str """
        ...

    @staticmethod
    def indexOf(thisob:object, searchString:object, position:float) -> int:
        """ indexOf(thisob: object, searchString: object, position: float) -> int """
        ...

    @staticmethod
    def italics(thisob:object) -> str:
        """ italics(thisob: object) -> str """
        ...

    @staticmethod
    def lastIndexOf(thisob:object, searchString:object, position:float) -> int:
        """ lastIndexOf(thisob: object, searchString: object, position: float) -> int """
        ...

    @staticmethod
    def link(thisob:object, linkRef:object) -> str:
        """ link(thisob: object, linkRef: object) -> str """
        ...

    @staticmethod
    def localeCompare(thisob:object, thatob:object) -> int:
        """ localeCompare(thisob: object, thatob: object) -> int """
        ...

    @staticmethod
    def match(thisob:object, engine:VsaEngine, regExp:object) -> object:
        """ match(thisob: object, engine: VsaEngine, regExp: object) -> object """
        ...

    @staticmethod
    def replace(thisob:object, regExp:object, replacement:object) -> str:
        """ replace(thisob: object, regExp: object, replacement: object) -> str """
        ...

    @staticmethod
    def search(thisob:object, engine:VsaEngine, regExp:object) -> int:
        """ search(thisob: object, engine: VsaEngine, regExp: object) -> int """
        ...

    @staticmethod
    def slice(thisob:object, start:float, end:object) -> str:
        """ slice(thisob: object, start: float, end: object) -> str """
        ...

    @staticmethod
    def small(thisob:object) -> str:
        """ small(thisob: object) -> str """
        ...

    @staticmethod
    def split(thisob:object, engine:VsaEngine, separator:object, limit:object) -> ArrayObject:
        """ split(thisob: object, engine: VsaEngine, separator: object, limit: object) -> ArrayObject """
        ...

    @staticmethod
    def strike(thisob:object) -> str:
        """ strike(thisob: object) -> str """
        ...

    @staticmethod
    def sub(thisob:object) -> str:
        """ sub(thisob: object) -> str """
        ...

    @staticmethod
    def substr(thisob:object, start:float, count:object) -> str:
        """ substr(thisob: object, start: float, count: object) -> str """
        ...

    @staticmethod
    def substring(thisob:object, start:float, end:object) -> str:
        """ substring(thisob: object, start: float, end: object) -> str """
        ...

    @staticmethod
    def sup(thisob:object) -> str:
        """ sup(thisob: object) -> str """
        ...

    @staticmethod
    def toLocaleLowerCase(thisob:object) -> str:
        """ toLocaleLowerCase(thisob: object) -> str """
        ...

    @staticmethod
    def toLocaleUpperCase(thisob:object) -> str:
        """ toLocaleUpperCase(thisob: object) -> str """
        ...

    @staticmethod
    def toLowerCase(thisob:object) -> str:
        """ toLowerCase(thisob: object) -> str """
        ...

    @staticmethod
    def toString(thisob:object) -> str:
        """ toString(thisob: object) -> str """
        ...

    @staticmethod
    def toUpperCase(thisob:object) -> str:
        """ toUpperCase(thisob: object) -> str """
        ...

    @staticmethod
    def valueOf(thisob:object) -> object:
        """ valueOf(thisob: object) -> object """
        ...

    field_table = ...
    parent = ...


class LenientStringPrototype(StringPrototype): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    anchor = ...
    big = ...
    blink = ...
    bold = ...
    charAt = ...
    charCodeAt = ...
    concat = ...
    constructor = ...
    field_table = ...
    fixed = ...
    fontcolor = ...
    fontsize = ...
    indexOf = ...
    italics = ...
    lastIndexOf = ...
    link = ...
    localeCompare = ...
    match = ...
    parent = ...
    replace = ...
    search = ...
    slice = ...
    small = ...
    split = ...
    strike = ...
    sub = ...
    substr = ...
    substring = ...
    sup = ...
    toLocaleLowerCase = ...
    toLocaleUpperCase = ...
    toLowerCase = ...
    toString = ...
    toUpperCase = ...
    valueOf = ...


class VBArrayPrototype(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def constructor(self) -> VBArrayConstructor:
        """ Get: constructor() -> VBArrayConstructor """
        ...


    @staticmethod
    def dimensions(thisob:object) -> int:
        """ dimensions(thisob: object) -> int """
        ...

    @staticmethod
    def getItem(thisob:object, args:Array) -> object:
        """ getItem(thisob: object, *args: Array[object]) -> object """
        ...

    @staticmethod
    def lbound(thisob:object, dimension:object) -> int:
        """ lbound(thisob: object, dimension: object) -> int """
        ...

    @staticmethod
    def toArray(thisob:object, engine:VsaEngine) -> ArrayObject:
        """ toArray(thisob: object, engine: VsaEngine) -> ArrayObject """
        ...

    @staticmethod
    def ubound(thisob:object, dimension:object) -> int:
        """ ubound(thisob: object, dimension: object) -> int """
        ...

    field_table = ...
    parent = ...


class LenientVBArrayPrototype(VBArrayPrototype): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    constructor = ...
    dimensions = ...
    field_table = ...
    getItem = ...
    lbound = ...
    parent = ...
    toArray = ...
    ubound = ...


class MemberInfoList: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    pass

class MethodInvoker: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def Invoke(self, thisob:object, parameters:Array) -> object:
        """ Invoke(self: MethodInvoker, thisob: object, parameters: Array[object]) -> object """
        ...


class Missing: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    Value: Missing = ...


class Namespace: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def GetNamespace(name:str, engine:VsaEngine) -> Namespace:
        """ GetNamespace(name: str, engine: VsaEngine) -> Namespace """
        ...


class NoContextException(ApplicationException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    NoContextException()
    NoContextException(m: str)
    NoContextException(m: str, e: Exception)
    """
    SerializeObjectState = ...


class NotRecommended(Attribute): # skipped bases: <type '_Attribute'>, <type 'object'>
    """ NotRecommended(message: str) """
    @property
    def IsError(self) -> bool:
        """ Get: IsError(self: NotRecommended) -> bool """
        ...

    @property
    def Message(self) -> str:
        """ Get: Message(self: NotRecommended) -> str """
        ...


    def __new__(cls, message:str) -> Self:
        """ __new__(cls: type, message: str) """
        ...


class NumberConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    ilength = ...
    MAX_VALUE: float = ...
    MIN_VALUE: float = ...
    NaN: float = ...
    NEGATIVE_INFINITY: float = ...
    parent = ...
    POSITIVE_INFINITY: float = ...


class NumericBinary(BinaryOp): # skipped bases: <type 'object'>
    """ NumericBinary(operatorTok: int) """
    @staticmethod
    def DoOp(v1:object, v2:object, operatorTok:JSToken) -> object:
        """ DoOp(v1: object, v2: object, operatorTok: JSToken) -> object """
        ...

    def EvaluateNumericBinary(self, v1:object, v2:object) -> object:
        """ EvaluateNumericBinary(self: NumericBinary, v1: object, v2: object) -> object """
        ...

    def __new__(cls, operatorTok:int) -> Self:
        """ __new__(cls: type, operatorTok: int) """
        ...

    operand1 = ...
    operand2 = ...
    operatorMeth = ...
    operatorTok = ...
    type1 = ...
    type2 = ...


class UnaryOp(AST): # skipped bases: <type 'object'>
    """ no doc """
    operand = ...


class NumericUnary(UnaryOp): # skipped bases: <type 'object'>
    """ NumericUnary(operatorTok: int) """
    def EvaluateUnary(self, v:object) -> object:
        """ EvaluateUnary(self: NumericUnary, v: object) -> object """
        ...

    def __new__(cls, operatorTok:int) -> Self:
        """ __new__(cls: type, operatorTok: int) """
        ...

    operand = ...


class ObjectConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def ConstructObject(self) -> JSObject:
        """ ConstructObject(self: ObjectConstructor) -> JSObject """
        ...

    field_table = ...
    ilength = ...
    parent = ...


class Override(Attribute): # skipped bases: <type '_Attribute'>, <type 'object'>
    """ Override() """
    pass

class Package(AST): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptPackage(rootName:str, engine:VsaEngine): # -> 
        """ JScriptPackage(rootName: str, engine: VsaEngine) """
        ...


class Plus(BinaryOp): # skipped bases: <type 'object'>
    """ Plus() """
    @staticmethod
    def DoOp(v1:object, v2:object) -> object:
        """ DoOp(v1: object, v2: object) -> object """
        ...

    def EvaluatePlus(self, v1:object, v2:object) -> object:
        """ EvaluatePlus(self: Plus, v1: object, v2: object) -> object """
        ...

    operand1 = ...
    operand2 = ...
    operatorMeth = ...
    operatorTok = ...
    type1 = ...
    type2 = ...


class PostOrPrefixOperator(UnaryOp): # skipped bases: <type 'object'>
    """ PostOrPrefixOperator(operatorTok: int) """
    def EvaluatePostOrPrefix(self, v:object) -> Tuple_[object, object]:
        """ EvaluatePostOrPrefix(self: PostOrPrefixOperator, v: object) -> (object, object) """
        ...

    def __new__(cls, operatorTok:int) -> Self:
        """ __new__(cls: type, operatorTok: int) """
        ...

    operand = ...


class RangeErrorObject(ErrorObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    parent = ...


class ReferenceAttribute(Attribute): # skipped bases: <type '_Attribute'>, <type 'object'>
    """ ReferenceAttribute(reference: str) """
    def __new__(cls, reference:str) -> Self:
        """ __new__(cls: type, reference: str) """
        ...

    reference = ...


class ReferenceErrorObject(ErrorObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    parent = ...


class RegExpConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def index(self) -> object:
        """ Get: index(self: RegExpConstructor) -> object """
        ...

    @property
    def input(self) -> object:
        """
        Get: input(self: RegExpConstructor) -> object
        Set: input(self: RegExpConstructor) = value
        """
        ...

    @property
    def lastIndex(self) -> object:
        """ Get: lastIndex(self: RegExpConstructor) -> object """
        ...

    @property
    def lastMatch(self) -> object:
        """ Get: lastMatch(self: RegExpConstructor) -> object """
        ...

    @property
    def lastParen(self) -> object:
        """ Get: lastParen(self: RegExpConstructor) -> object """
        ...

    @property
    def leftContext(self) -> object:
        """ Get: leftContext(self: RegExpConstructor) -> object """
        ...

    @property
    def rightContext(self) -> object:
        """ Get: rightContext(self: RegExpConstructor) -> object """
        ...


    def Construct(self, pattern:str, ignoreCase:bool, global_:bool, multiline:bool) -> object:
        """ Construct(self: RegExpConstructor, pattern: str, ignoreCase: bool, global: bool, multiline: bool) -> object """
        ...

    field_table = ...
    ilength = ...
    parent = ...


class RegExpMatch(ArrayObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    parent = ...


class RegExpObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def global(self) -> bool:
        """ Get: global(self: RegExpObject) -> bool """
        ...

    @property
    def ignoreCase(self) -> bool:
        """ Get: ignoreCase(self: RegExpObject) -> bool """
        ...

    @property
    def lastIndex(self) -> object:
        """
        Get: lastIndex(self: RegExpObject) -> object
        Set: lastIndex(self: RegExpObject) = value
        """
        ...

    @property
    def multiline(self) -> bool:
        """ Get: multiline(self: RegExpObject) -> bool """
        ...

    @property
    def source(self) -> str:
        """ Get: source(self: RegExpObject) -> str """
        ...


    field_table = ...
    parent = ...


class Relational(BinaryOp): # skipped bases: <type 'object'>
    """ Relational(operatorTok: int) """
    def EvaluateRelational(self, v1:object, v2:object) -> float:
        """ EvaluateRelational(self: Relational, v1: object, v2: object) -> float """
        ...

    @staticmethod
    def JScriptCompare(v1:object, v2:object) -> float:
        """ JScriptCompare(v1: object, v2: object) -> float """
        ...

    def __new__(cls, operatorTok:int) -> Self:
        """ __new__(cls: type, operatorTok: int) """
        ...

    operand1 = ...
    operand2 = ...
    operatorMeth = ...
    operatorTok = ...
    type1 = ...
    type2 = ...


class ReturnOutOfFinally(ApplicationException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    ReturnOutOfFinally()
    ReturnOutOfFinally(m: str)
    ReturnOutOfFinally(m: str, e: Exception)
    """
    SerializeObjectState = ...


class Runtime: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def DoubleToInt64(val:float) -> Int64:
        """ DoubleToInt64(val: float) -> Int64 """
        ...

    @staticmethod
    def Equals(*__args) -> bool:
        """ Equals(v1: object, v2: object) -> bool """
        ...

    @staticmethod
    def UncheckedDecimalToInt64(val:Decimal) -> Int64:
        """ UncheckedDecimalToInt64(val: Decimal) -> Int64 """
        ...

    __all__: list = ...


class ScriptBlock(AST): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ScriptStream: # skipped bases: <type 'object'>, <type 'object'>
    """ ScriptStream() """
    @staticmethod
    def PrintStackTrace(e=None): # -> 
        """ PrintStackTrace()PrintStackTrace(e: Exception) """
        ...

    @staticmethod
    def Write(str:str): # -> 
        """ Write(str: str) """
        ...

    @staticmethod
    def WriteLine(str:str): # -> 
        """ WriteLine(str: str) """
        ...

    Error = ...
    Out = ...


class SimpleHashtable: # skipped bases: <type 'object'>, <type 'object'>
    """ SimpleHashtable(threshold: UInt32) """
    def GetEnumerator(self) -> IDictionaryEnumerator:
        """ GetEnumerator(self: SimpleHashtable) -> IDictionaryEnumerator """
        ...

    def Remove(self, key:object): # -> 
        """ Remove(self: SimpleHashtable, key: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class SourceState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SourceState, values: STATE_COLOR_COMMENT (1), STATE_COLOR_NORMAL (0), STATE_COLOR_STRING (2) """
    STATE_COLOR_COMMENT: SourceState = ...
    STATE_COLOR_NORMAL: SourceState = ...
    STATE_COLOR_STRING: SourceState = ...
    value__ = ...


class StackFrame(ScriptObject, IActivationObject): # skipped bases: <type 'IReflect'>, <type 'object'>
    """ no doc """
    @staticmethod
    def PushStackFrameForMethod(thisob:object, fields:Array, engine:VsaEngine): # -> 
        """ PushStackFrameForMethod(thisob: object, fields: Array[JSLocalField], engine: VsaEngine) """
        ...

    @staticmethod
    def PushStackFrameForStaticMethod(thisclass:RuntimeTypeHandle, fields:Array, engine:VsaEngine): # -> 
        """ PushStackFrameForStaticMethod(thisclass: RuntimeTypeHandle, fields: Array[JSLocalField], engine: VsaEngine) """
        ...

    closureInstance = ...
    localVars = ...
    parent = ...


class StrictEquality(BinaryOp): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptStrictEquals(v1:object, v2:object) -> bool:
        """ JScriptStrictEquals(v1: object, v2: object) -> bool """
        ...

    operand1 = ...
    operand2 = ...
    operatorMeth = ...
    operatorTok = ...
    type1 = ...
    type2 = ...


class SuperTypeMembersSorter: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    pass

class SyntaxErrorObject(ErrorObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    parent = ...


class Throw(AST): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptThrow(value:object) -> Exception:
        """ JScriptThrow(value: object) -> Exception """
        ...


class TokenColor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TokenColor, values: COLOR_COMMENT (3), COLOR_CONDITIONAL_COMP (7), COLOR_IDENTIFIER (1), COLOR_KEYWORD (2), COLOR_NUMBER (5), COLOR_OPERATOR (4), COLOR_STRING (6), COLOR_TEXT (0) """
    COLOR_COMMENT: TokenColor = ...
    COLOR_CONDITIONAL_COMP: TokenColor = ...
    COLOR_IDENTIFIER: TokenColor = ...
    COLOR_KEYWORD: TokenColor = ...
    COLOR_NUMBER: TokenColor = ...
    COLOR_OPERATOR: TokenColor = ...
    COLOR_STRING: TokenColor = ...
    COLOR_TEXT: TokenColor = ...
    value__ = ...


class Try(AST): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptExceptionValue(e:object, engine:VsaEngine) -> object:
        """ JScriptExceptionValue(e: object, engine: VsaEngine) -> object """
        ...

    @staticmethod
    def PushHandlerScope(engine:VsaEngine, id:str, scopeId:int): # -> 
        """ PushHandlerScope(engine: VsaEngine, id: str, scopeId: int) """
        ...


class TypedArray(IReflect): # skipped bases: <type 'object'>
    """ TypedArray(elementType: IReflect, rank: int) """
    def Equals(self, obj:object) -> bool:
        """ Equals(self: TypedArray, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: TypedArray) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: TypedArray) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class TypeErrorObject(ErrorObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    parent = ...


class Typeof(UnaryOp): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptTypeof(value:object) -> str:
        """ JScriptTypeof(value: object) -> str """
        ...

    operand = ...


class TypeReflector(ScriptObject): # skipped bases: <type 'IReflect'>, <type 'object'>
    """ no doc """
    parent = ...


class URIErrorObject(ErrorObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    parent = ...


class VBArrayConstructor(ScriptFunction): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    field_table = ...
    ilength = ...
    parent = ...


class VBArrayObject(JSObject): # skipped bases: <type 'IExpando'>, <type 'IReflect'>, <type 'IEnumerable'>, <type 'object'>
    """ VBArrayObject(parent: VBArrayPrototype, array: Array) """
    def __new__(cls, parent:VBArrayPrototype, array:Array) -> Self:
        """ __new__(cls: type, parent: VBArrayPrototype, array: Array) """
        ...

    field_table = ...
    parent = ...


class VsaItem(IJSVsaItem): # skipped bases: <type 'object'>
    """ no doc """
    flag = ...
    isDirty = ...
    name = ...
    type = ...


class VsaItems(IJSVsaItems): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ VsaItems(engine: VsaEngine) """
    def Close(self): # -> 
        """ Close(self: VsaItems) """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: VsaItems) -> IEnumerator """
        ...


class VSAITEMTYPE2(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum VSAITEMTYPE2, values: EXPRESSION (22), HOSTOBJECT (16), HOSTSCOPE (17), HOSTSCOPEANDOBJECT (18), None (0), SCRIPTBLOCK (20), SCRIPTSCOPE (19), STATEMENT (21) """
    EXPRESSION: VSAITEMTYPE2 = ...
    HOSTOBJECT: VSAITEMTYPE2 = ...
    HOSTSCOPE: VSAITEMTYPE2 = ...
    HOSTSCOPEANDOBJECT: VSAITEMTYPE2 = ...
    SCRIPTBLOCK: VSAITEMTYPE2 = ...
    SCRIPTSCOPE: VSAITEMTYPE2 = ...
    STATEMENT: VSAITEMTYPE2 = ...
    value__ = ...


class With(AST): # skipped bases: <type 'object'>
    """ no doc """
    @staticmethod
    def JScriptWith(withOb:object, engine:VsaEngine) -> object:
        """ JScriptWith(withOb: object, engine: VsaEngine) -> object """
        ...


# variables with complex values

