# encoding: utf-8
# module Microsoft.Office.Interop.Excel calls itself Excel
# from Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c
# by generator 1.145
""" no doc """
from __future__ import annotations
from Microsoft.Office.Interop.Publisher import (GlowFormat, ReflectionFormat, 
    SoftEdgeFormat)

from Microsoft.Office.Interop.Word import CanvasShapes

from Microsoft.Vbe.Interop import VBE, VBProject

from Microsoft.VisualStudio.CommandBars import CommandBars

from System import Array, DateTime, Enum, MulticastDelegate, Single

from System.Collections import IEnumerable

from System.Management.Automation import Signature

from typing import Tuple as Tuple_

"""The following names are not found in the module: (AnswerWizard, Assistant, 
    BoundEvent, COMAddIns, Crop, CustomXMLParts, DocumentInspectors, 
    DocumentLibraryVersions, FileSearch, GradientStops, HTMLProject, 
    IAssistance, IFind, IMsoDiagram, LanguageSettings, MetaProperties, 
    MsoAlignCmd, MsoArrowheadLength, MsoArrowheadStyle, MsoArrowheadWidth, 
    MsoAutoShapeType, MsoAutoSize, MsoAutomationSecurity, 
    MsoBackgroundStyleIndex, MsoBevelType, MsoBlackWhiteMode, 
    MsoCalloutAngleType, MsoCalloutDropType, MsoCalloutType, 
    MsoChartElementType, MsoColorType, MsoConnectorType, MsoDiagramNodeType, 
    MsoDiagramType, MsoDistributeCmd, MsoEditingType, MsoEncoding, 
    MsoEnvelope, MsoExtrusionColorType, MsoFeatureInstall, 
    MsoFileValidationMode, MsoFillType, MsoFlipCmd, MsoGradientColorType, 
    MsoGradientStyle, MsoHorizontalAnchor, MsoLightRigType, MsoLineDashStyle, 
    MsoLineStyle, MsoOrgChartLayoutType, MsoPathFormat, MsoPatternType, 
    MsoPictureColorType, MsoPictureCompress, MsoPresetCamera, 
    MsoPresetExtrusionDirection, MsoPresetGradientType, 
    MsoPresetLightingDirection, MsoPresetLightingSoftness, MsoPresetMaterial, 
    MsoPresetTextEffect, MsoPresetTextEffectShape, MsoPresetTexture, 
    MsoPresetThreeDFormat, MsoRelativeNodePosition, MsoScreenSize, 
    MsoSegmentType, MsoShadowStyle, MsoShadowType, MsoShapeStyleIndex, 
    MsoShapeType, MsoSyncEventType, MsoTargetBrowser, MsoTextEffectAlignment, 
    MsoTextOrientation, MsoTextureAlignment, MsoTextureType, 
    MsoThemeColorIndex, MsoTriState, MsoVerticalAnchor, MsoWarpFormat, 
    MsoZOrderCmd, NewFile, OfficeTheme, Permission, PictureEffects, Ruler2, 
    Script, Scripts, ServerPolicy, SharedWorkspace, SignatureSet, SmartArt, 
    SmartArtColors, SmartArtLayout, SmartArtLayouts, SmartArtQuickStyles, 
    SmartDocument, Sync, TextColumn2, TextRange2, WebPageFonts, WorkflowTasks, 
    WorkflowTemplates, _IMsoDispObj, __ComObject, field#)
"""

# no functions
# classes

class AboveAverage: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AboveBelow(self) -> XlAboveBelow:
        """
        Get: AboveBelow(self: AboveAverage) -> XlAboveBelow
        Set: AboveBelow(self: AboveAverage) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: AboveAverage) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: AboveAverage) -> Range """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: AboveAverage) -> Borders """
        ...

    @property
    def CalcFor(self) -> XlCalcFor:
        """
        Get: CalcFor(self: AboveAverage) -> XlCalcFor
        Set: CalcFor(self: AboveAverage) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: AboveAverage) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: AboveAverage) -> Font """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: AboveAverage) -> Interior """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: AboveAverage) -> object
        Set: NumberFormat(self: AboveAverage) = value
        """
        ...

    @property
    def NumStdDev(self) -> int:
        """
        Get: NumStdDev(self: AboveAverage) -> int
        Set: NumStdDev(self: AboveAverage) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AboveAverage) -> object """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: AboveAverage) -> int
        Set: Priority(self: AboveAverage) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: AboveAverage) -> bool """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: AboveAverage) -> XlPivotConditionScope
        Set: ScopeType(self: AboveAverage) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """
        Get: StopIfTrue(self: AboveAverage) -> bool
        Set: StopIfTrue(self: AboveAverage) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: AboveAverage) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: AboveAverage) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: AboveAverage, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: AboveAverage) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: AboveAverage) """
        ...


class Action: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Action) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """ Get: Caption(self: Action) -> str """
        ...

    @property
    def Content(self) -> str:
        """ Get: Content(self: Action) -> str """
        ...

    @property
    def Coordinate(self) -> str:
        """ Get: Coordinate(self: Action) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Action) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Action) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Action) -> object """
        ...

    @property
    def Type(self) -> XlActionType:
        """ Get: Type(self: Action) -> XlActionType """
        ...


    def Execute(self): # -> 
        """ Execute(self: Action) """
        ...


class Actions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Actions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Actions) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Actions) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Actions) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AddIn: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AddIn) -> Application """
        ...

    @property
    def Author(self) -> str:
        """ Get: Author(self: AddIn) -> str """
        ...

    @property
    def CLSID(self) -> str:
        """ Get: CLSID(self: AddIn) -> str """
        ...

    @property
    def Comments(self) -> str:
        """ Get: Comments(self: AddIn) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: AddIn) -> XlCreator """
        ...

    @property
    def FullName(self) -> str:
        """ Get: FullName(self: AddIn) -> str """
        ...

    @property
    def Installed(self) -> bool:
        """
        Get: Installed(self: AddIn) -> bool
        Set: Installed(self: AddIn) = value
        """
        ...

    @property
    def IsOpen(self) -> bool:
        """ Get: IsOpen(self: AddIn) -> bool """
        ...

    @property
    def Keywords(self) -> str:
        """ Get: Keywords(self: AddIn) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: AddIn) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AddIn) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: AddIn) -> str """
        ...

    @property
    def progID(self) -> str:
        """ Get: progID(self: AddIn) -> str """
        ...

    @property
    def Subject(self) -> str:
        """ Get: Subject(self: AddIn) -> str """
        ...

    @property
    def Title(self) -> str:
        """ Get: Title(self: AddIn) -> str """
        ...



class AddIns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AddIns) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: AddIns) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: AddIns) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AddIns) -> object """
        ...


    def Add(self, Filename:str, CopyFile:object) -> AddIn:
        """ Add(self: AddIns, Filename: str, CopyFile: object) -> AddIn """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AddIns2(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AddIns2) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: AddIns2) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: AddIns2) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AddIns2) -> object """
        ...


    def Add(self, Filename:str, CopyFile:object) -> AddIn:
        """ Add(self: AddIns2, Filename: str, CopyFile: object) -> AddIn """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Adjustments(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: Adjustments) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Adjustments) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class AllowEditRange: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Range(self) -> Range:
        """
        Get: Range(self: AllowEditRange) -> Range
        Set: Range(self: AllowEditRange) = value
        """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: AllowEditRange) -> str
        Set: Title(self: AllowEditRange) = value
        """
        ...

    @property
    def Users(self) -> UserAccessList:
        """ Get: Users(self: AllowEditRange) -> UserAccessList """
        ...


    def ChangePassword(self, Password:str): # -> 
        """ ChangePassword(self: AllowEditRange, Password: str) """
        ...

    def Delete(self): # -> 
        """ Delete(self: AllowEditRange) """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: AllowEditRange, Password: object) """
        ...


class AllowEditRanges(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: AllowEditRanges) -> int """
        ...


    def Add(self, Title:str, Range:Range, Password:object) -> AllowEditRange:
        """ Add(self: AllowEditRanges, Title: str, Range: Range, Password: object) -> AllowEditRange """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AppEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterCalculate(self): # -> 
        """ AfterCalculate(self: AppEvents) """
        ...

    def NewWorkbook(self, Wb:Workbook): # -> 
        """ NewWorkbook(self: AppEvents, Wb: Workbook) """
        ...

    def ProtectedViewWindowActivate(self, Pvw:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowActivate(self: AppEvents, Pvw: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowBeforeClose(self, Pvw, Reason, Cancel) -> bool:
        """ ProtectedViewWindowBeforeClose(self: AppEvents, Pvw: ProtectedViewWindow, Reason: XlProtectedViewCloseReason) -> bool """
        ...

    def ProtectedViewWindowBeforeEdit(self, Pvw, Cancel) -> bool:
        """ ProtectedViewWindowBeforeEdit(self: AppEvents, Pvw: ProtectedViewWindow) -> bool """
        ...

    def ProtectedViewWindowDeactivate(self, Pvw:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowDeactivate(self: AppEvents, Pvw: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowOpen(self, Pvw:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowOpen(self: AppEvents, Pvw: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowResize(self, Pvw:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowResize(self: AppEvents, Pvw: ProtectedViewWindow) """
        ...

    def SheetActivate(self, Sh:object): # -> 
        """ SheetActivate(self: AppEvents, Sh: object) """
        ...

    def SheetBeforeDelete(self, Sh:object): # -> 
        """ SheetBeforeDelete(self: AppEvents, Sh: object) """
        ...

    def SheetBeforeDoubleClick(self, Sh, Target, Cancel) -> bool:
        """ SheetBeforeDoubleClick(self: AppEvents, Sh: object, Target: Range) -> bool """
        ...

    def SheetBeforeRightClick(self, Sh, Target, Cancel) -> bool:
        """ SheetBeforeRightClick(self: AppEvents, Sh: object, Target: Range) -> bool """
        ...

    def SheetCalculate(self, Sh:object): # -> 
        """ SheetCalculate(self: AppEvents, Sh: object) """
        ...

    def SheetChange(self, Sh:object, Target:Range): # -> 
        """ SheetChange(self: AppEvents, Sh: object, Target: Range) """
        ...

    def SheetDeactivate(self, Sh:object): # -> 
        """ SheetDeactivate(self: AppEvents, Sh: object) """
        ...

    def SheetFollowHyperlink(self, Sh:object, Target:Hyperlink): # -> 
        """ SheetFollowHyperlink(self: AppEvents, Sh: object, Target: Hyperlink) """
        ...

    def SheetLensGalleryRenderComplete(self, Sh:object): # -> 
        """ SheetLensGalleryRenderComplete(self: AppEvents, Sh: object) """
        ...

    def SheetPivotTableAfterValueChange(self, Sh:object, TargetPivotTable:PivotTable, TargetRange:Range): # -> 
        """ SheetPivotTableAfterValueChange(self: AppEvents, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        ...

    def SheetPivotTableBeforeAllocateChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ SheetPivotTableBeforeAllocateChanges(self: AppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def SheetPivotTableBeforeCommitChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ SheetPivotTableBeforeCommitChanges(self: AppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def SheetPivotTableBeforeDiscardChanges(self, Sh:object, TargetPivotTable:PivotTable, ValueChangeStart:int, ValueChangeEnd:int): # -> 
        """ SheetPivotTableBeforeDiscardChanges(self: AppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        ...

    def SheetPivotTableUpdate(self, Sh:object, Target:PivotTable): # -> 
        """ SheetPivotTableUpdate(self: AppEvents, Sh: object, Target: PivotTable) """
        ...

    def SheetSelectionChange(self, Sh:object, Target:Range): # -> 
        """ SheetSelectionChange(self: AppEvents, Sh: object, Target: Range) """
        ...

    def SheetTableUpdate(self, Sh:object, Target:TableObject): # -> 
        """ SheetTableUpdate(self: AppEvents, Sh: object, Target: TableObject) """
        ...

    def WindowActivate(self, Wb:Workbook, Wn:Window): # -> 
        """ WindowActivate(self: AppEvents, Wb: Workbook, Wn: Window) """
        ...

    def WindowDeactivate(self, Wb:Workbook, Wn:Window): # -> 
        """ WindowDeactivate(self: AppEvents, Wb: Workbook, Wn: Window) """
        ...

    def WindowResize(self, Wb:Workbook, Wn:Window): # -> 
        """ WindowResize(self: AppEvents, Wb: Workbook, Wn: Window) """
        ...

    def WorkbookActivate(self, Wb:Workbook): # -> 
        """ WorkbookActivate(self: AppEvents, Wb: Workbook) """
        ...

    def WorkbookAddinInstall(self, Wb:Workbook): # -> 
        """ WorkbookAddinInstall(self: AppEvents, Wb: Workbook) """
        ...

    def WorkbookAddinUninstall(self, Wb:Workbook): # -> 
        """ WorkbookAddinUninstall(self: AppEvents, Wb: Workbook) """
        ...

    def WorkbookAfterSave(self, Wb:Workbook, Success:bool): # -> 
        """ WorkbookAfterSave(self: AppEvents, Wb: Workbook, Success: bool) """
        ...

    def WorkbookAfterXmlExport(self, Wb:Workbook, Map:XmlMap, Url:str, Result:XlXmlExportResult): # -> 
        """ WorkbookAfterXmlExport(self: AppEvents, Wb: Workbook, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        ...

    def WorkbookAfterXmlImport(self, Wb:Workbook, Map:XmlMap, IsRefresh:bool, Result:XlXmlImportResult): # -> 
        """ WorkbookAfterXmlImport(self: AppEvents, Wb: Workbook, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        ...

    def WorkbookBeforeClose(self, Wb, Cancel) -> bool:
        """ WorkbookBeforeClose(self: AppEvents, Wb: Workbook) -> bool """
        ...

    def WorkbookBeforePrint(self, Wb, Cancel) -> bool:
        """ WorkbookBeforePrint(self: AppEvents, Wb: Workbook) -> bool """
        ...

    def WorkbookBeforeSave(self, Wb, SaveAsUI, Cancel) -> bool:
        """ WorkbookBeforeSave(self: AppEvents, Wb: Workbook, SaveAsUI: bool) -> bool """
        ...

    def WorkbookBeforeXmlExport(self, Wb, Map, Url, Cancel) -> bool:
        """ WorkbookBeforeXmlExport(self: AppEvents, Wb: Workbook, Map: XmlMap, Url: str) -> bool """
        ...

    def WorkbookBeforeXmlImport(self, Wb, Map, Url, IsRefresh, Cancel) -> bool:
        """ WorkbookBeforeXmlImport(self: AppEvents, Wb: Workbook, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        ...

    def WorkbookDeactivate(self, Wb:Workbook): # -> 
        """ WorkbookDeactivate(self: AppEvents, Wb: Workbook) """
        ...

    def WorkbookModelChange(self, Wb:Workbook, Changes:ModelChanges): # -> 
        """ WorkbookModelChange(self: AppEvents, Wb: Workbook, Changes: ModelChanges) """
        ...

    def WorkbookNewChart(self, Wb:Workbook, Ch:Chart): # -> 
        """ WorkbookNewChart(self: AppEvents, Wb: Workbook, Ch: Chart) """
        ...

    def WorkbookNewSheet(self, Wb:Workbook, Sh:object): # -> 
        """ WorkbookNewSheet(self: AppEvents, Wb: Workbook, Sh: object) """
        ...

    def WorkbookOpen(self, Wb:Workbook): # -> 
        """ WorkbookOpen(self: AppEvents, Wb: Workbook) """
        ...

    def WorkbookPivotTableCloseConnection(self, Wb:Workbook, Target:PivotTable): # -> 
        """ WorkbookPivotTableCloseConnection(self: AppEvents, Wb: Workbook, Target: PivotTable) """
        ...

    def WorkbookPivotTableOpenConnection(self, Wb:Workbook, Target:PivotTable): # -> 
        """ WorkbookPivotTableOpenConnection(self: AppEvents, Wb: Workbook, Target: PivotTable) """
        ...

    def WorkbookRowsetComplete(self, Wb:Workbook, Description:str, Sheet:str, Success:bool): # -> 
        """ WorkbookRowsetComplete(self: AppEvents, Wb: Workbook, Description: str, Sheet: str, Success: bool) """
        ...

    def WorkbookSync(self, Wb:Workbook, SyncEventType): # ->  # Not found arg types: {'SyncEventType': 'MsoSyncEventType'}
        """ WorkbookSync(self: AppEvents, Wb: Workbook, SyncEventType: MsoSyncEventType) """
        ...


class AppEvents_AfterCalculateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_AfterCalculateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: AppEvents_AfterCalculateEventHandler) """
        ...


class AppEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterCalculate(self): # -> 
        """ add_AfterCalculate(self: AppEvents_Event, : AppEvents_AfterCalculateEventHandler) """
        ...

    def add_NewWorkbook(self): # -> 
        """ add_NewWorkbook(self: AppEvents_Event, : AppEvents_NewWorkbookEventHandler) """
        ...

    def add_ProtectedViewWindowActivate(self): # -> 
        """ add_ProtectedViewWindowActivate(self: AppEvents_Event, : AppEvents_ProtectedViewWindowActivateEventHandler) """
        ...

    def add_ProtectedViewWindowBeforeClose(self): # -> 
        """ add_ProtectedViewWindowBeforeClose(self: AppEvents_Event, : AppEvents_ProtectedViewWindowBeforeCloseEventHandler) """
        ...

    def add_ProtectedViewWindowBeforeEdit(self): # -> 
        """ add_ProtectedViewWindowBeforeEdit(self: AppEvents_Event, : AppEvents_ProtectedViewWindowBeforeEditEventHandler) """
        ...

    def add_ProtectedViewWindowDeactivate(self): # -> 
        """ add_ProtectedViewWindowDeactivate(self: AppEvents_Event, : AppEvents_ProtectedViewWindowDeactivateEventHandler) """
        ...

    def add_ProtectedViewWindowOpen(self): # -> 
        """ add_ProtectedViewWindowOpen(self: AppEvents_Event, : AppEvents_ProtectedViewWindowOpenEventHandler) """
        ...

    def add_ProtectedViewWindowResize(self): # -> 
        """ add_ProtectedViewWindowResize(self: AppEvents_Event, : AppEvents_ProtectedViewWindowResizeEventHandler) """
        ...

    def add_SheetActivate(self): # -> 
        """ add_SheetActivate(self: AppEvents_Event, : AppEvents_SheetActivateEventHandler) """
        ...

    def add_SheetBeforeDelete(self): # -> 
        """ add_SheetBeforeDelete(self: AppEvents_Event, : AppEvents_SheetBeforeDeleteEventHandler) """
        ...

    def add_SheetBeforeDoubleClick(self): # -> 
        """ add_SheetBeforeDoubleClick(self: AppEvents_Event, : AppEvents_SheetBeforeDoubleClickEventHandler) """
        ...

    def add_SheetBeforeRightClick(self): # -> 
        """ add_SheetBeforeRightClick(self: AppEvents_Event, : AppEvents_SheetBeforeRightClickEventHandler) """
        ...

    def add_SheetCalculate(self): # -> 
        """ add_SheetCalculate(self: AppEvents_Event, : AppEvents_SheetCalculateEventHandler) """
        ...

    def add_SheetChange(self): # -> 
        """ add_SheetChange(self: AppEvents_Event, : AppEvents_SheetChangeEventHandler) """
        ...

    def add_SheetDeactivate(self): # -> 
        """ add_SheetDeactivate(self: AppEvents_Event, : AppEvents_SheetDeactivateEventHandler) """
        ...

    def add_SheetFollowHyperlink(self): # -> 
        """ add_SheetFollowHyperlink(self: AppEvents_Event, : AppEvents_SheetFollowHyperlinkEventHandler) """
        ...

    def add_SheetLensGalleryRenderComplete(self): # -> 
        """ add_SheetLensGalleryRenderComplete(self: AppEvents_Event, : AppEvents_SheetLensGalleryRenderCompleteEventHandler) """
        ...

    def add_SheetPivotTableAfterValueChange(self): # -> 
        """ add_SheetPivotTableAfterValueChange(self: AppEvents_Event, : AppEvents_SheetPivotTableAfterValueChangeEventHandler) """
        ...

    def add_SheetPivotTableBeforeAllocateChanges(self): # -> 
        """ add_SheetPivotTableBeforeAllocateChanges(self: AppEvents_Event, : AppEvents_SheetPivotTableBeforeAllocateChangesEventHandler) """
        ...

    def add_SheetPivotTableBeforeCommitChanges(self): # -> 
        """ add_SheetPivotTableBeforeCommitChanges(self: AppEvents_Event, : AppEvents_SheetPivotTableBeforeCommitChangesEventHandler) """
        ...

    def add_SheetPivotTableBeforeDiscardChanges(self): # -> 
        """ add_SheetPivotTableBeforeDiscardChanges(self: AppEvents_Event, : AppEvents_SheetPivotTableBeforeDiscardChangesEventHandler) """
        ...

    def add_SheetPivotTableUpdate(self): # -> 
        """ add_SheetPivotTableUpdate(self: AppEvents_Event, : AppEvents_SheetPivotTableUpdateEventHandler) """
        ...

    def add_SheetSelectionChange(self): # -> 
        """ add_SheetSelectionChange(self: AppEvents_Event, : AppEvents_SheetSelectionChangeEventHandler) """
        ...

    def add_SheetTableUpdate(self): # -> 
        """ add_SheetTableUpdate(self: AppEvents_Event, : AppEvents_SheetTableUpdateEventHandler) """
        ...

    def add_WindowActivate(self): # -> 
        """ add_WindowActivate(self: AppEvents_Event, : AppEvents_WindowActivateEventHandler) """
        ...

    def add_WindowDeactivate(self): # -> 
        """ add_WindowDeactivate(self: AppEvents_Event, : AppEvents_WindowDeactivateEventHandler) """
        ...

    def add_WindowResize(self): # -> 
        """ add_WindowResize(self: AppEvents_Event, : AppEvents_WindowResizeEventHandler) """
        ...

    def add_WorkbookActivate(self): # -> 
        """ add_WorkbookActivate(self: AppEvents_Event, : AppEvents_WorkbookActivateEventHandler) """
        ...

    def add_WorkbookAddinInstall(self): # -> 
        """ add_WorkbookAddinInstall(self: AppEvents_Event, : AppEvents_WorkbookAddinInstallEventHandler) """
        ...

    def add_WorkbookAddinUninstall(self): # -> 
        """ add_WorkbookAddinUninstall(self: AppEvents_Event, : AppEvents_WorkbookAddinUninstallEventHandler) """
        ...

    def add_WorkbookAfterSave(self): # -> 
        """ add_WorkbookAfterSave(self: AppEvents_Event, : AppEvents_WorkbookAfterSaveEventHandler) """
        ...

    def add_WorkbookAfterXmlExport(self): # -> 
        """ add_WorkbookAfterXmlExport(self: AppEvents_Event, : AppEvents_WorkbookAfterXmlExportEventHandler) """
        ...

    def add_WorkbookAfterXmlImport(self): # -> 
        """ add_WorkbookAfterXmlImport(self: AppEvents_Event, : AppEvents_WorkbookAfterXmlImportEventHandler) """
        ...

    def add_WorkbookBeforeClose(self): # -> 
        """ add_WorkbookBeforeClose(self: AppEvents_Event, : AppEvents_WorkbookBeforeCloseEventHandler) """
        ...

    def add_WorkbookBeforePrint(self): # -> 
        """ add_WorkbookBeforePrint(self: AppEvents_Event, : AppEvents_WorkbookBeforePrintEventHandler) """
        ...

    def add_WorkbookBeforeSave(self): # -> 
        """ add_WorkbookBeforeSave(self: AppEvents_Event, : AppEvents_WorkbookBeforeSaveEventHandler) """
        ...

    def add_WorkbookBeforeXmlExport(self): # -> 
        """ add_WorkbookBeforeXmlExport(self: AppEvents_Event, : AppEvents_WorkbookBeforeXmlExportEventHandler) """
        ...

    def add_WorkbookBeforeXmlImport(self): # -> 
        """ add_WorkbookBeforeXmlImport(self: AppEvents_Event, : AppEvents_WorkbookBeforeXmlImportEventHandler) """
        ...

    def add_WorkbookDeactivate(self): # -> 
        """ add_WorkbookDeactivate(self: AppEvents_Event, : AppEvents_WorkbookDeactivateEventHandler) """
        ...

    def add_WorkbookModelChange(self): # -> 
        """ add_WorkbookModelChange(self: AppEvents_Event, : AppEvents_WorkbookModelChangeEventHandler) """
        ...

    def add_WorkbookNewChart(self): # -> 
        """ add_WorkbookNewChart(self: AppEvents_Event, : AppEvents_WorkbookNewChartEventHandler) """
        ...

    def add_WorkbookNewSheet(self): # -> 
        """ add_WorkbookNewSheet(self: AppEvents_Event, : AppEvents_WorkbookNewSheetEventHandler) """
        ...

    def add_WorkbookOpen(self): # -> 
        """ add_WorkbookOpen(self: AppEvents_Event, : AppEvents_WorkbookOpenEventHandler) """
        ...

    def add_WorkbookPivotTableCloseConnection(self): # -> 
        """ add_WorkbookPivotTableCloseConnection(self: AppEvents_Event, : AppEvents_WorkbookPivotTableCloseConnectionEventHandler) """
        ...

    def add_WorkbookPivotTableOpenConnection(self): # -> 
        """ add_WorkbookPivotTableOpenConnection(self: AppEvents_Event, : AppEvents_WorkbookPivotTableOpenConnectionEventHandler) """
        ...

    def add_WorkbookRowsetComplete(self): # -> 
        """ add_WorkbookRowsetComplete(self: AppEvents_Event, : AppEvents_WorkbookRowsetCompleteEventHandler) """
        ...

    def add_WorkbookSync(self): # -> 
        """ add_WorkbookSync(self: AppEvents_Event, : AppEvents_WorkbookSyncEventHandler) """
        ...

    def remove_AfterCalculate(self): # -> 
        """ remove_AfterCalculate(self: AppEvents_Event, : AppEvents_AfterCalculateEventHandler) """
        ...

    def remove_NewWorkbook(self): # -> 
        """ remove_NewWorkbook(self: AppEvents_Event, : AppEvents_NewWorkbookEventHandler) """
        ...

    def remove_ProtectedViewWindowActivate(self): # -> 
        """ remove_ProtectedViewWindowActivate(self: AppEvents_Event, : AppEvents_ProtectedViewWindowActivateEventHandler) """
        ...

    def remove_ProtectedViewWindowBeforeClose(self): # -> 
        """ remove_ProtectedViewWindowBeforeClose(self: AppEvents_Event, : AppEvents_ProtectedViewWindowBeforeCloseEventHandler) """
        ...

    def remove_ProtectedViewWindowBeforeEdit(self): # -> 
        """ remove_ProtectedViewWindowBeforeEdit(self: AppEvents_Event, : AppEvents_ProtectedViewWindowBeforeEditEventHandler) """
        ...

    def remove_ProtectedViewWindowDeactivate(self): # -> 
        """ remove_ProtectedViewWindowDeactivate(self: AppEvents_Event, : AppEvents_ProtectedViewWindowDeactivateEventHandler) """
        ...

    def remove_ProtectedViewWindowOpen(self): # -> 
        """ remove_ProtectedViewWindowOpen(self: AppEvents_Event, : AppEvents_ProtectedViewWindowOpenEventHandler) """
        ...

    def remove_ProtectedViewWindowResize(self): # -> 
        """ remove_ProtectedViewWindowResize(self: AppEvents_Event, : AppEvents_ProtectedViewWindowResizeEventHandler) """
        ...

    def remove_SheetActivate(self): # -> 
        """ remove_SheetActivate(self: AppEvents_Event, : AppEvents_SheetActivateEventHandler) """
        ...

    def remove_SheetBeforeDelete(self): # -> 
        """ remove_SheetBeforeDelete(self: AppEvents_Event, : AppEvents_SheetBeforeDeleteEventHandler) """
        ...

    def remove_SheetBeforeDoubleClick(self): # -> 
        """ remove_SheetBeforeDoubleClick(self: AppEvents_Event, : AppEvents_SheetBeforeDoubleClickEventHandler) """
        ...

    def remove_SheetBeforeRightClick(self): # -> 
        """ remove_SheetBeforeRightClick(self: AppEvents_Event, : AppEvents_SheetBeforeRightClickEventHandler) """
        ...

    def remove_SheetCalculate(self): # -> 
        """ remove_SheetCalculate(self: AppEvents_Event, : AppEvents_SheetCalculateEventHandler) """
        ...

    def remove_SheetChange(self): # -> 
        """ remove_SheetChange(self: AppEvents_Event, : AppEvents_SheetChangeEventHandler) """
        ...

    def remove_SheetDeactivate(self): # -> 
        """ remove_SheetDeactivate(self: AppEvents_Event, : AppEvents_SheetDeactivateEventHandler) """
        ...

    def remove_SheetFollowHyperlink(self): # -> 
        """ remove_SheetFollowHyperlink(self: AppEvents_Event, : AppEvents_SheetFollowHyperlinkEventHandler) """
        ...

    def remove_SheetLensGalleryRenderComplete(self): # -> 
        """ remove_SheetLensGalleryRenderComplete(self: AppEvents_Event, : AppEvents_SheetLensGalleryRenderCompleteEventHandler) """
        ...

    def remove_SheetPivotTableAfterValueChange(self): # -> 
        """ remove_SheetPivotTableAfterValueChange(self: AppEvents_Event, : AppEvents_SheetPivotTableAfterValueChangeEventHandler) """
        ...

    def remove_SheetPivotTableBeforeAllocateChanges(self): # -> 
        """ remove_SheetPivotTableBeforeAllocateChanges(self: AppEvents_Event, : AppEvents_SheetPivotTableBeforeAllocateChangesEventHandler) """
        ...

    def remove_SheetPivotTableBeforeCommitChanges(self): # -> 
        """ remove_SheetPivotTableBeforeCommitChanges(self: AppEvents_Event, : AppEvents_SheetPivotTableBeforeCommitChangesEventHandler) """
        ...

    def remove_SheetPivotTableBeforeDiscardChanges(self): # -> 
        """ remove_SheetPivotTableBeforeDiscardChanges(self: AppEvents_Event, : AppEvents_SheetPivotTableBeforeDiscardChangesEventHandler) """
        ...

    def remove_SheetPivotTableUpdate(self): # -> 
        """ remove_SheetPivotTableUpdate(self: AppEvents_Event, : AppEvents_SheetPivotTableUpdateEventHandler) """
        ...

    def remove_SheetSelectionChange(self): # -> 
        """ remove_SheetSelectionChange(self: AppEvents_Event, : AppEvents_SheetSelectionChangeEventHandler) """
        ...

    def remove_SheetTableUpdate(self): # -> 
        """ remove_SheetTableUpdate(self: AppEvents_Event, : AppEvents_SheetTableUpdateEventHandler) """
        ...

    def remove_WindowActivate(self): # -> 
        """ remove_WindowActivate(self: AppEvents_Event, : AppEvents_WindowActivateEventHandler) """
        ...

    def remove_WindowDeactivate(self): # -> 
        """ remove_WindowDeactivate(self: AppEvents_Event, : AppEvents_WindowDeactivateEventHandler) """
        ...

    def remove_WindowResize(self): # -> 
        """ remove_WindowResize(self: AppEvents_Event, : AppEvents_WindowResizeEventHandler) """
        ...

    def remove_WorkbookActivate(self): # -> 
        """ remove_WorkbookActivate(self: AppEvents_Event, : AppEvents_WorkbookActivateEventHandler) """
        ...

    def remove_WorkbookAddinInstall(self): # -> 
        """ remove_WorkbookAddinInstall(self: AppEvents_Event, : AppEvents_WorkbookAddinInstallEventHandler) """
        ...

    def remove_WorkbookAddinUninstall(self): # -> 
        """ remove_WorkbookAddinUninstall(self: AppEvents_Event, : AppEvents_WorkbookAddinUninstallEventHandler) """
        ...

    def remove_WorkbookAfterSave(self): # -> 
        """ remove_WorkbookAfterSave(self: AppEvents_Event, : AppEvents_WorkbookAfterSaveEventHandler) """
        ...

    def remove_WorkbookAfterXmlExport(self): # -> 
        """ remove_WorkbookAfterXmlExport(self: AppEvents_Event, : AppEvents_WorkbookAfterXmlExportEventHandler) """
        ...

    def remove_WorkbookAfterXmlImport(self): # -> 
        """ remove_WorkbookAfterXmlImport(self: AppEvents_Event, : AppEvents_WorkbookAfterXmlImportEventHandler) """
        ...

    def remove_WorkbookBeforeClose(self): # -> 
        """ remove_WorkbookBeforeClose(self: AppEvents_Event, : AppEvents_WorkbookBeforeCloseEventHandler) """
        ...

    def remove_WorkbookBeforePrint(self): # -> 
        """ remove_WorkbookBeforePrint(self: AppEvents_Event, : AppEvents_WorkbookBeforePrintEventHandler) """
        ...

    def remove_WorkbookBeforeSave(self): # -> 
        """ remove_WorkbookBeforeSave(self: AppEvents_Event, : AppEvents_WorkbookBeforeSaveEventHandler) """
        ...

    def remove_WorkbookBeforeXmlExport(self): # -> 
        """ remove_WorkbookBeforeXmlExport(self: AppEvents_Event, : AppEvents_WorkbookBeforeXmlExportEventHandler) """
        ...

    def remove_WorkbookBeforeXmlImport(self): # -> 
        """ remove_WorkbookBeforeXmlImport(self: AppEvents_Event, : AppEvents_WorkbookBeforeXmlImportEventHandler) """
        ...

    def remove_WorkbookDeactivate(self): # -> 
        """ remove_WorkbookDeactivate(self: AppEvents_Event, : AppEvents_WorkbookDeactivateEventHandler) """
        ...

    def remove_WorkbookModelChange(self): # -> 
        """ remove_WorkbookModelChange(self: AppEvents_Event, : AppEvents_WorkbookModelChangeEventHandler) """
        ...

    def remove_WorkbookNewChart(self): # -> 
        """ remove_WorkbookNewChart(self: AppEvents_Event, : AppEvents_WorkbookNewChartEventHandler) """
        ...

    def remove_WorkbookNewSheet(self): # -> 
        """ remove_WorkbookNewSheet(self: AppEvents_Event, : AppEvents_WorkbookNewSheetEventHandler) """
        ...

    def remove_WorkbookOpen(self): # -> 
        """ remove_WorkbookOpen(self: AppEvents_Event, : AppEvents_WorkbookOpenEventHandler) """
        ...

    def remove_WorkbookPivotTableCloseConnection(self): # -> 
        """ remove_WorkbookPivotTableCloseConnection(self: AppEvents_Event, : AppEvents_WorkbookPivotTableCloseConnectionEventHandler) """
        ...

    def remove_WorkbookPivotTableOpenConnection(self): # -> 
        """ remove_WorkbookPivotTableOpenConnection(self: AppEvents_Event, : AppEvents_WorkbookPivotTableOpenConnectionEventHandler) """
        ...

    def remove_WorkbookRowsetComplete(self): # -> 
        """ remove_WorkbookRowsetComplete(self: AppEvents_Event, : AppEvents_WorkbookRowsetCompleteEventHandler) """
        ...

    def remove_WorkbookSync(self): # -> 
        """ remove_WorkbookSync(self: AppEvents_Event, : AppEvents_WorkbookSyncEventHandler) """
        ...

    AfterCalculate = ...
    NewWorkbook = ...
    ProtectedViewWindowActivate = ...
    ProtectedViewWindowBeforeClose = ...
    ProtectedViewWindowBeforeEdit = ...
    ProtectedViewWindowDeactivate = ...
    ProtectedViewWindowOpen = ...
    ProtectedViewWindowResize = ...
    SheetActivate = ...
    SheetBeforeDelete = ...
    SheetBeforeDoubleClick = ...
    SheetBeforeRightClick = ...
    SheetCalculate = ...
    SheetChange = ...
    SheetDeactivate = ...
    SheetFollowHyperlink = ...
    SheetLensGalleryRenderComplete = ...
    SheetPivotTableAfterValueChange = ...
    SheetPivotTableBeforeAllocateChanges = ...
    SheetPivotTableBeforeCommitChanges = ...
    SheetPivotTableBeforeDiscardChanges = ...
    SheetPivotTableUpdate = ...
    SheetSelectionChange = ...
    SheetTableUpdate = ...
    WindowActivate = ...
    WindowDeactivate = ...
    WindowResize = ...
    WorkbookActivate = ...
    WorkbookAddinInstall = ...
    WorkbookAddinUninstall = ...
    WorkbookAfterSave = ...
    WorkbookAfterXmlExport = ...
    WorkbookAfterXmlImport = ...
    WorkbookBeforeClose = ...
    WorkbookBeforePrint = ...
    WorkbookBeforeSave = ...
    WorkbookBeforeXmlExport = ...
    WorkbookBeforeXmlImport = ...
    WorkbookDeactivate = ...
    WorkbookModelChange = ...
    WorkbookNewChart = ...
    WorkbookNewSheet = ...
    WorkbookOpen = ...
    WorkbookPivotTableCloseConnection = ...
    WorkbookPivotTableOpenConnection = ...
    WorkbookRowsetComplete = ...
    WorkbookSync = ...


class AppEvents_NewWorkbookEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_NewWorkbookEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook): # -> 
        """ Invoke(self: AppEvents_NewWorkbookEventHandler, Wb: Workbook) """
        ...


class AppEvents_ProtectedViewWindowActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_ProtectedViewWindowActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Pvw:ProtectedViewWindow): # -> 
        """ Invoke(self: AppEvents_ProtectedViewWindowActivateEventHandler, Pvw: ProtectedViewWindow) """
        ...


class AppEvents_ProtectedViewWindowBeforeCloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_ProtectedViewWindowBeforeCloseEventHandler(: object, : UIntPtr) """
    def Invoke(self, Pvw, Reason, Cancel) -> bool:
        """ Invoke(self: AppEvents_ProtectedViewWindowBeforeCloseEventHandler, Pvw: ProtectedViewWindow, Reason: XlProtectedViewCloseReason) -> bool """
        ...


class AppEvents_ProtectedViewWindowBeforeEditEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_ProtectedViewWindowBeforeEditEventHandler(: object, : UIntPtr) """
    def Invoke(self, Pvw, Cancel) -> bool:
        """ Invoke(self: AppEvents_ProtectedViewWindowBeforeEditEventHandler, Pvw: ProtectedViewWindow) -> bool """
        ...


class AppEvents_ProtectedViewWindowDeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_ProtectedViewWindowDeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Pvw:ProtectedViewWindow): # -> 
        """ Invoke(self: AppEvents_ProtectedViewWindowDeactivateEventHandler, Pvw: ProtectedViewWindow) """
        ...


class AppEvents_ProtectedViewWindowOpenEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_ProtectedViewWindowOpenEventHandler(: object, : UIntPtr) """
    def Invoke(self, Pvw:ProtectedViewWindow): # -> 
        """ Invoke(self: AppEvents_ProtectedViewWindowOpenEventHandler, Pvw: ProtectedViewWindow) """
        ...


class AppEvents_ProtectedViewWindowResizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_ProtectedViewWindowResizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Pvw:ProtectedViewWindow): # -> 
        """ Invoke(self: AppEvents_ProtectedViewWindowResizeEventHandler, Pvw: ProtectedViewWindow) """
        ...


class AppEvents_SheetActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object): # -> 
        """ Invoke(self: AppEvents_SheetActivateEventHandler, Sh: object) """
        ...


class AppEvents_SheetBeforeDeleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetBeforeDeleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object): # -> 
        """ Invoke(self: AppEvents_SheetBeforeDeleteEventHandler, Sh: object) """
        ...


class AppEvents_SheetBeforeDoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetBeforeDoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh, Target, Cancel) -> bool:
        """ Invoke(self: AppEvents_SheetBeforeDoubleClickEventHandler, Sh: object, Target: Range) -> bool """
        ...


class AppEvents_SheetBeforeRightClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetBeforeRightClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh, Target, Cancel) -> bool:
        """ Invoke(self: AppEvents_SheetBeforeRightClickEventHandler, Sh: object, Target: Range) -> bool """
        ...


class AppEvents_SheetCalculateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetCalculateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object): # -> 
        """ Invoke(self: AppEvents_SheetCalculateEventHandler, Sh: object) """
        ...


class AppEvents_SheetChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, Target:Range): # -> 
        """ Invoke(self: AppEvents_SheetChangeEventHandler, Sh: object, Target: Range) """
        ...


class AppEvents_SheetDeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetDeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object): # -> 
        """ Invoke(self: AppEvents_SheetDeactivateEventHandler, Sh: object) """
        ...


class AppEvents_SheetFollowHyperlinkEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetFollowHyperlinkEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, Target:Hyperlink): # -> 
        """ Invoke(self: AppEvents_SheetFollowHyperlinkEventHandler, Sh: object, Target: Hyperlink) """
        ...


class AppEvents_SheetLensGalleryRenderCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetLensGalleryRenderCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object): # -> 
        """ Invoke(self: AppEvents_SheetLensGalleryRenderCompleteEventHandler, Sh: object) """
        ...


class AppEvents_SheetPivotTableAfterValueChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetPivotTableAfterValueChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, TargetPivotTable:PivotTable, TargetRange:Range): # -> 
        """ Invoke(self: AppEvents_SheetPivotTableAfterValueChangeEventHandler, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        ...


class AppEvents_SheetPivotTableBeforeAllocateChangesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetPivotTableBeforeAllocateChangesEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ Invoke(self: AppEvents_SheetPivotTableBeforeAllocateChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...


class AppEvents_SheetPivotTableBeforeCommitChangesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetPivotTableBeforeCommitChangesEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ Invoke(self: AppEvents_SheetPivotTableBeforeCommitChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...


class AppEvents_SheetPivotTableBeforeDiscardChangesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetPivotTableBeforeDiscardChangesEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, TargetPivotTable:PivotTable, ValueChangeStart:int, ValueChangeEnd:int): # -> 
        """ Invoke(self: AppEvents_SheetPivotTableBeforeDiscardChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        ...


class AppEvents_SheetPivotTableUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetPivotTableUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, Target:PivotTable): # -> 
        """ Invoke(self: AppEvents_SheetPivotTableUpdateEventHandler, Sh: object, Target: PivotTable) """
        ...


class AppEvents_SheetSelectionChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetSelectionChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, Target:Range): # -> 
        """ Invoke(self: AppEvents_SheetSelectionChangeEventHandler, Sh: object, Target: Range) """
        ...


class AppEvents_SheetTableUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_SheetTableUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, Target:TableObject): # -> 
        """ Invoke(self: AppEvents_SheetTableUpdateEventHandler, Sh: object, Target: TableObject) """
        ...


class AppEvents_SinkHelper(AppEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterCalculateDelegate = ...
    m_dwCookie = ...
    m_NewWorkbookDelegate = ...
    m_ProtectedViewWindowActivateDelegate = ...
    m_ProtectedViewWindowBeforeCloseDelegate = ...
    m_ProtectedViewWindowBeforeEditDelegate = ...
    m_ProtectedViewWindowDeactivateDelegate = ...
    m_ProtectedViewWindowOpenDelegate = ...
    m_ProtectedViewWindowResizeDelegate = ...
    m_SheetActivateDelegate = ...
    m_SheetBeforeDeleteDelegate = ...
    m_SheetBeforeDoubleClickDelegate = ...
    m_SheetBeforeRightClickDelegate = ...
    m_SheetCalculateDelegate = ...
    m_SheetChangeDelegate = ...
    m_SheetDeactivateDelegate = ...
    m_SheetFollowHyperlinkDelegate = ...
    m_SheetLensGalleryRenderCompleteDelegate = ...
    m_SheetPivotTableAfterValueChangeDelegate = ...
    m_SheetPivotTableBeforeAllocateChangesDelegate = ...
    m_SheetPivotTableBeforeCommitChangesDelegate = ...
    m_SheetPivotTableBeforeDiscardChangesDelegate = ...
    m_SheetPivotTableUpdateDelegate = ...
    m_SheetSelectionChangeDelegate = ...
    m_SheetTableUpdateDelegate = ...
    m_WindowActivateDelegate = ...
    m_WindowDeactivateDelegate = ...
    m_WindowResizeDelegate = ...
    m_WorkbookActivateDelegate = ...
    m_WorkbookAddinInstallDelegate = ...
    m_WorkbookAddinUninstallDelegate = ...
    m_WorkbookAfterSaveDelegate = ...
    m_WorkbookAfterXmlExportDelegate = ...
    m_WorkbookAfterXmlImportDelegate = ...
    m_WorkbookBeforeCloseDelegate = ...
    m_WorkbookBeforePrintDelegate = ...
    m_WorkbookBeforeSaveDelegate = ...
    m_WorkbookBeforeXmlExportDelegate = ...
    m_WorkbookBeforeXmlImportDelegate = ...
    m_WorkbookDeactivateDelegate = ...
    m_WorkbookModelChangeDelegate = ...
    m_WorkbookNewChartDelegate = ...
    m_WorkbookNewSheetDelegate = ...
    m_WorkbookOpenDelegate = ...
    m_WorkbookPivotTableCloseConnectionDelegate = ...
    m_WorkbookPivotTableOpenConnectionDelegate = ...
    m_WorkbookRowsetCompleteDelegate = ...
    m_WorkbookSyncDelegate = ...


class AppEvents_WindowActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WindowActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Wn:Window): # -> 
        """ Invoke(self: AppEvents_WindowActivateEventHandler, Wb: Workbook, Wn: Window) """
        ...


class AppEvents_WindowDeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WindowDeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Wn:Window): # -> 
        """ Invoke(self: AppEvents_WindowDeactivateEventHandler, Wb: Workbook, Wn: Window) """
        ...


class AppEvents_WindowResizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WindowResizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Wn:Window): # -> 
        """ Invoke(self: AppEvents_WindowResizeEventHandler, Wb: Workbook, Wn: Window) """
        ...


class AppEvents_WorkbookActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook): # -> 
        """ Invoke(self: AppEvents_WorkbookActivateEventHandler, Wb: Workbook) """
        ...


class AppEvents_WorkbookAddinInstallEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookAddinInstallEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook): # -> 
        """ Invoke(self: AppEvents_WorkbookAddinInstallEventHandler, Wb: Workbook) """
        ...


class AppEvents_WorkbookAddinUninstallEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookAddinUninstallEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook): # -> 
        """ Invoke(self: AppEvents_WorkbookAddinUninstallEventHandler, Wb: Workbook) """
        ...


class AppEvents_WorkbookAfterSaveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookAfterSaveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Success:bool): # -> 
        """ Invoke(self: AppEvents_WorkbookAfterSaveEventHandler, Wb: Workbook, Success: bool) """
        ...


class AppEvents_WorkbookAfterXmlExportEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookAfterXmlExportEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Map:XmlMap, Url:str, Result:XlXmlExportResult): # -> 
        """ Invoke(self: AppEvents_WorkbookAfterXmlExportEventHandler, Wb: Workbook, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        ...


class AppEvents_WorkbookAfterXmlImportEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookAfterXmlImportEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Map:XmlMap, IsRefresh:bool, Result:XlXmlImportResult): # -> 
        """ Invoke(self: AppEvents_WorkbookAfterXmlImportEventHandler, Wb: Workbook, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        ...


class AppEvents_WorkbookBeforeCloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookBeforeCloseEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb, Cancel) -> bool:
        """ Invoke(self: AppEvents_WorkbookBeforeCloseEventHandler, Wb: Workbook) -> bool """
        ...


class AppEvents_WorkbookBeforePrintEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookBeforePrintEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb, Cancel) -> bool:
        """ Invoke(self: AppEvents_WorkbookBeforePrintEventHandler, Wb: Workbook) -> bool """
        ...


class AppEvents_WorkbookBeforeSaveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookBeforeSaveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb, SaveAsUI, Cancel) -> bool:
        """ Invoke(self: AppEvents_WorkbookBeforeSaveEventHandler, Wb: Workbook, SaveAsUI: bool) -> bool """
        ...


class AppEvents_WorkbookBeforeXmlExportEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookBeforeXmlExportEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb, Map, Url, Cancel) -> bool:
        """ Invoke(self: AppEvents_WorkbookBeforeXmlExportEventHandler, Wb: Workbook, Map: XmlMap, Url: str) -> bool """
        ...


class AppEvents_WorkbookBeforeXmlImportEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookBeforeXmlImportEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb, Map, Url, IsRefresh, Cancel) -> bool:
        """ Invoke(self: AppEvents_WorkbookBeforeXmlImportEventHandler, Wb: Workbook, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        ...


class AppEvents_WorkbookDeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookDeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook): # -> 
        """ Invoke(self: AppEvents_WorkbookDeactivateEventHandler, Wb: Workbook) """
        ...


class AppEvents_WorkbookModelChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookModelChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Changes:ModelChanges): # -> 
        """ Invoke(self: AppEvents_WorkbookModelChangeEventHandler, Wb: Workbook, Changes: ModelChanges) """
        ...


class AppEvents_WorkbookNewChartEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookNewChartEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Ch:Chart): # -> 
        """ Invoke(self: AppEvents_WorkbookNewChartEventHandler, Wb: Workbook, Ch: Chart) """
        ...


class AppEvents_WorkbookNewSheetEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookNewSheetEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Sh:object): # -> 
        """ Invoke(self: AppEvents_WorkbookNewSheetEventHandler, Wb: Workbook, Sh: object) """
        ...


class AppEvents_WorkbookOpenEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookOpenEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook): # -> 
        """ Invoke(self: AppEvents_WorkbookOpenEventHandler, Wb: Workbook) """
        ...


class AppEvents_WorkbookPivotTableCloseConnectionEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookPivotTableCloseConnectionEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Target:PivotTable): # -> 
        """ Invoke(self: AppEvents_WorkbookPivotTableCloseConnectionEventHandler, Wb: Workbook, Target: PivotTable) """
        ...


class AppEvents_WorkbookPivotTableOpenConnectionEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookPivotTableOpenConnectionEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Target:PivotTable): # -> 
        """ Invoke(self: AppEvents_WorkbookPivotTableOpenConnectionEventHandler, Wb: Workbook, Target: PivotTable) """
        ...


class AppEvents_WorkbookRowsetCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookRowsetCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, Description:str, Sheet:str, Success:bool): # -> 
        """ Invoke(self: AppEvents_WorkbookRowsetCompleteEventHandler, Wb: Workbook, Description: str, Sheet: str, Success: bool) """
        ...


class AppEvents_WorkbookSyncEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AppEvents_WorkbookSyncEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wb:Workbook, SyncEventType): # ->  # Not found arg types: {'SyncEventType': 'MsoSyncEventType'}
        """ Invoke(self: AppEvents_WorkbookSyncEventHandler, Wb: Workbook, SyncEventType: MsoSyncEventType) """
        ...


class _Application: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveCell(self) -> Range:
        """ Get: ActiveCell(self: _Application) -> Range """
        ...

    @property
    def ActiveChart(self) -> Chart:
        """ Get: ActiveChart(self: _Application) -> Chart """
        ...

    @property
    def ActiveDialog(self) -> DialogSheet:
        """ Get: ActiveDialog(self: _Application) -> DialogSheet """
        ...

    @property
    def ActiveEncryptionSession(self) -> int:
        """ Get: ActiveEncryptionSession(self: _Application) -> int """
        ...

    @property
    def ActiveMenuBar(self) -> MenuBar:
        """ Get: ActiveMenuBar(self: _Application) -> MenuBar """
        ...

    @property
    def ActivePrinter(self) -> str:
        """
        Get: ActivePrinter(self: _Application) -> str
        Set: ActivePrinter(self: _Application) = value
        """
        ...

    @property
    def ActiveProtectedViewWindow(self) -> ProtectedViewWindow:
        """ Get: ActiveProtectedViewWindow(self: _Application) -> ProtectedViewWindow """
        ...

    @property
    def ActiveSheet(self) -> object:
        """ Get: ActiveSheet(self: _Application) -> object """
        ...

    @property
    def ActiveWindow(self) -> Window:
        """ Get: ActiveWindow(self: _Application) -> Window """
        ...

    @property
    def ActiveWorkbook(self) -> Workbook:
        """ Get: ActiveWorkbook(self: _Application) -> Workbook """
        ...

    @property
    def AddIns(self) -> AddIns:
        """ Get: AddIns(self: _Application) -> AddIns """
        ...

    @property
    def AddIns2(self) -> AddIns2:
        """ Get: AddIns2(self: _Application) -> AddIns2 """
        ...

    @property
    def AlertBeforeOverwriting(self) -> bool:
        """
        Get: AlertBeforeOverwriting(self: _Application) -> bool
        Set: AlertBeforeOverwriting(self: _Application) = value
        """
        ...

    @property
    def AltStartupPath(self) -> str:
        """
        Get: AltStartupPath(self: _Application) -> str
        Set: AltStartupPath(self: _Application) = value
        """
        ...

    @property
    def AlwaysUseClearType(self) -> bool:
        """
        Get: AlwaysUseClearType(self: _Application) -> bool
        Set: AlwaysUseClearType(self: _Application) = value
        """
        ...

    @property
    def AnswerWizard(self): # -> AnswerWizard
        """ Get: AnswerWizard(self: _Application) -> AnswerWizard """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Application) -> Application """
        ...

    @property
    def ArbitraryXMLSupportAvailable(self) -> bool:
        """ Get: ArbitraryXMLSupportAvailable(self: _Application) -> bool """
        ...

    @property
    def AskToUpdateLinks(self) -> bool:
        """
        Get: AskToUpdateLinks(self: _Application) -> bool
        Set: AskToUpdateLinks(self: _Application) = value
        """
        ...

    @property
    def Assistance(self): # -> IAssistance
        """ Get: Assistance(self: _Application) -> IAssistance """
        ...

    @property
    def Assistant(self): # -> Assistant
        """ Get: Assistant(self: _Application) -> Assistant """
        ...

    @property
    def AutoCorrect(self) -> AutoCorrect:
        """ Get: AutoCorrect(self: _Application) -> AutoCorrect """
        ...

    @property
    def AutoFormatAsYouTypeReplaceHyperlinks(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceHyperlinks(self: _Application) -> bool
        Set: AutoFormatAsYouTypeReplaceHyperlinks(self: _Application) = value
        """
        ...

    @property
    def AutomationSecurity(self): # -> MsoAutomationSecurity
        """
        Get: AutomationSecurity(self: _Application) -> MsoAutomationSecurity
        Set: AutomationSecurity(self: _Application) = value
        """
        ...

    @property
    def AutoPercentEntry(self) -> bool:
        """
        Get: AutoPercentEntry(self: _Application) -> bool
        Set: AutoPercentEntry(self: _Application) = value
        """
        ...

    @property
    def AutoRecover(self) -> AutoRecover:
        """ Get: AutoRecover(self: _Application) -> AutoRecover """
        ...

    @property
    def Build(self) -> int:
        """ Get: Build(self: _Application) -> int """
        ...

    @property
    def CalculateBeforeSave(self) -> bool:
        """
        Get: CalculateBeforeSave(self: _Application) -> bool
        Set: CalculateBeforeSave(self: _Application) = value
        """
        ...

    @property
    def Calculation(self) -> XlCalculation:
        """
        Get: Calculation(self: _Application) -> XlCalculation
        Set: Calculation(self: _Application) = value
        """
        ...

    @property
    def CalculationInterruptKey(self) -> XlCalculationInterruptKey:
        """
        Get: CalculationInterruptKey(self: _Application) -> XlCalculationInterruptKey
        Set: CalculationInterruptKey(self: _Application) = value
        """
        ...

    @property
    def CalculationState(self) -> XlCalculationState:
        """ Get: CalculationState(self: _Application) -> XlCalculationState """
        ...

    @property
    def CalculationVersion(self) -> int:
        """ Get: CalculationVersion(self: _Application) -> int """
        ...

    @property
    def CanPlaySounds(self) -> bool:
        """ Get: CanPlaySounds(self: _Application) -> bool """
        ...

    @property
    def CanRecordSounds(self) -> bool:
        """ Get: CanRecordSounds(self: _Application) -> bool """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: _Application) -> str
        Set: Caption(self: _Application) = value
        """
        ...

    @property
    def CellDragAndDrop(self) -> bool:
        """
        Get: CellDragAndDrop(self: _Application) -> bool
        Set: CellDragAndDrop(self: _Application) = value
        """
        ...

    @property
    def Cells(self) -> Range:
        """ Get: Cells(self: _Application) -> Range """
        ...

    @property
    def ChartDataPointTrack(self) -> bool:
        """
        Get: ChartDataPointTrack(self: _Application) -> bool
        Set: ChartDataPointTrack(self: _Application) = value
        """
        ...

    @property
    def Charts(self) -> Sheets:
        """ Get: Charts(self: _Application) -> Sheets """
        ...

    @property
    def ClusterConnector(self) -> str:
        """
        Get: ClusterConnector(self: _Application) -> str
        Set: ClusterConnector(self: _Application) = value
        """
        ...

    @property
    def ColorButtons(self) -> bool:
        """
        Get: ColorButtons(self: _Application) -> bool
        Set: ColorButtons(self: _Application) = value
        """
        ...

    @property
    def Columns(self) -> Range:
        """ Get: Columns(self: _Application) -> Range """
        ...

    @property
    def COMAddIns(self): # -> COMAddIns
        """ Get: COMAddIns(self: _Application) -> COMAddIns """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: _Application) -> CommandBars """
        ...

    @property
    def CommandUnderlines(self) -> XlCommandUnderlines:
        """
        Get: CommandUnderlines(self: _Application) -> XlCommandUnderlines
        Set: CommandUnderlines(self: _Application) = value
        """
        ...

    @property
    def ConstrainNumeric(self) -> bool:
        """
        Get: ConstrainNumeric(self: _Application) -> bool
        Set: ConstrainNumeric(self: _Application) = value
        """
        ...

    @property
    def ControlCharacters(self) -> bool:
        """
        Get: ControlCharacters(self: _Application) -> bool
        Set: ControlCharacters(self: _Application) = value
        """
        ...

    @property
    def CopyObjectsWithCells(self) -> bool:
        """
        Get: CopyObjectsWithCells(self: _Application) -> bool
        Set: CopyObjectsWithCells(self: _Application) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: _Application) -> XlCreator """
        ...

    @property
    def Cursor(self) -> XlMousePointer:
        """
        Get: Cursor(self: _Application) -> XlMousePointer
        Set: Cursor(self: _Application) = value
        """
        ...

    @property
    def CursorMovement(self) -> int:
        """
        Get: CursorMovement(self: _Application) -> int
        Set: CursorMovement(self: _Application) = value
        """
        ...

    @property
    def CustomListCount(self) -> int:
        """ Get: CustomListCount(self: _Application) -> int """
        ...

    @property
    def CutCopyMode(self) -> XlCutCopyMode:
        """
        Get: CutCopyMode(self: _Application) -> XlCutCopyMode
        Set: CutCopyMode(self: _Application) = value
        """
        ...

    @property
    def DataEntryMode(self) -> int:
        """
        Get: DataEntryMode(self: _Application) -> int
        Set: DataEntryMode(self: _Application) = value
        """
        ...

    @property
    def DDEAppReturnCode(self) -> int:
        """ Get: DDEAppReturnCode(self: _Application) -> int """
        ...

    @property
    def DecimalSeparator(self) -> str:
        """
        Get: DecimalSeparator(self: _Application) -> str
        Set: DecimalSeparator(self: _Application) = value
        """
        ...

    @property
    def DefaultFilePath(self) -> str:
        """
        Get: DefaultFilePath(self: _Application) -> str
        Set: DefaultFilePath(self: _Application) = value
        """
        ...

    @property
    def DefaultSaveFormat(self) -> XlFileFormat:
        """
        Get: DefaultSaveFormat(self: _Application) -> XlFileFormat
        Set: DefaultSaveFormat(self: _Application) = value
        """
        ...

    @property
    def DefaultSheetDirection(self) -> int:
        """
        Get: DefaultSheetDirection(self: _Application) -> int
        Set: DefaultSheetDirection(self: _Application) = value
        """
        ...

    @property
    def DefaultWebOptions(self) -> DefaultWebOptions:
        """ Get: DefaultWebOptions(self: _Application) -> DefaultWebOptions """
        ...

    @property
    def DeferAsyncQueries(self) -> bool:
        """
        Get: DeferAsyncQueries(self: _Application) -> bool
        Set: DeferAsyncQueries(self: _Application) = value
        """
        ...

    @property
    def Dialogs(self) -> Dialogs:
        """ Get: Dialogs(self: _Application) -> Dialogs """
        ...

    @property
    def DialogSheets(self) -> Sheets:
        """ Get: DialogSheets(self: _Application) -> Sheets """
        ...

    @property
    def DisplayAlerts(self) -> bool:
        """
        Get: DisplayAlerts(self: _Application) -> bool
        Set: DisplayAlerts(self: _Application) = value
        """
        ...

    @property
    def DisplayClipboardWindow(self) -> bool:
        """
        Get: DisplayClipboardWindow(self: _Application) -> bool
        Set: DisplayClipboardWindow(self: _Application) = value
        """
        ...

    @property
    def DisplayCommentIndicator(self) -> XlCommentDisplayMode:
        """
        Get: DisplayCommentIndicator(self: _Application) -> XlCommentDisplayMode
        Set: DisplayCommentIndicator(self: _Application) = value
        """
        ...

    @property
    def DisplayDocumentActionTaskPane(self) -> bool:
        """
        Get: DisplayDocumentActionTaskPane(self: _Application) -> bool
        Set: DisplayDocumentActionTaskPane(self: _Application) = value
        """
        ...

    @property
    def DisplayDocumentInformationPanel(self) -> bool:
        """
        Get: DisplayDocumentInformationPanel(self: _Application) -> bool
        Set: DisplayDocumentInformationPanel(self: _Application) = value
        """
        ...

    @property
    def DisplayExcel4Menus(self) -> bool:
        """
        Get: DisplayExcel4Menus(self: _Application) -> bool
        Set: DisplayExcel4Menus(self: _Application) = value
        """
        ...

    @property
    def DisplayFormulaAutoComplete(self) -> bool:
        """
        Get: DisplayFormulaAutoComplete(self: _Application) -> bool
        Set: DisplayFormulaAutoComplete(self: _Application) = value
        """
        ...

    @property
    def DisplayFormulaBar(self) -> bool:
        """
        Get: DisplayFormulaBar(self: _Application) -> bool
        Set: DisplayFormulaBar(self: _Application) = value
        """
        ...

    @property
    def DisplayFullScreen(self) -> bool:
        """
        Get: DisplayFullScreen(self: _Application) -> bool
        Set: DisplayFullScreen(self: _Application) = value
        """
        ...

    @property
    def DisplayFunctionToolTips(self) -> bool:
        """
        Get: DisplayFunctionToolTips(self: _Application) -> bool
        Set: DisplayFunctionToolTips(self: _Application) = value
        """
        ...

    @property
    def DisplayInfoWindow(self) -> bool:
        """
        Get: DisplayInfoWindow(self: _Application) -> bool
        Set: DisplayInfoWindow(self: _Application) = value
        """
        ...

    @property
    def DisplayInsertOptions(self) -> bool:
        """
        Get: DisplayInsertOptions(self: _Application) -> bool
        Set: DisplayInsertOptions(self: _Application) = value
        """
        ...

    @property
    def DisplayNoteIndicator(self) -> bool:
        """
        Get: DisplayNoteIndicator(self: _Application) -> bool
        Set: DisplayNoteIndicator(self: _Application) = value
        """
        ...

    @property
    def DisplayPasteOptions(self) -> bool:
        """
        Get: DisplayPasteOptions(self: _Application) -> bool
        Set: DisplayPasteOptions(self: _Application) = value
        """
        ...

    @property
    def DisplayRecentFiles(self) -> bool:
        """
        Get: DisplayRecentFiles(self: _Application) -> bool
        Set: DisplayRecentFiles(self: _Application) = value
        """
        ...

    @property
    def DisplayScrollBars(self) -> bool:
        """
        Get: DisplayScrollBars(self: _Application) -> bool
        Set: DisplayScrollBars(self: _Application) = value
        """
        ...

    @property
    def DisplayStatusBar(self) -> bool:
        """
        Get: DisplayStatusBar(self: _Application) -> bool
        Set: DisplayStatusBar(self: _Application) = value
        """
        ...

    @property
    def Dummy101(self) -> object:
        """ Get: Dummy101(self: _Application) -> object """
        ...

    @property
    def Dummy22(self) -> bool:
        """
        Get: Dummy22(self: _Application) -> bool
        Set: Dummy22(self: _Application) = value
        """
        ...

    @property
    def Dummy23(self) -> bool:
        """
        Get: Dummy23(self: _Application) -> bool
        Set: Dummy23(self: _Application) = value
        """
        ...

    @property
    def EditDirectlyInCell(self) -> bool:
        """
        Get: EditDirectlyInCell(self: _Application) -> bool
        Set: EditDirectlyInCell(self: _Application) = value
        """
        ...

    @property
    def EnableAnimations(self) -> bool:
        """
        Get: EnableAnimations(self: _Application) -> bool
        Set: EnableAnimations(self: _Application) = value
        """
        ...

    @property
    def EnableAutoComplete(self) -> bool:
        """
        Get: EnableAutoComplete(self: _Application) -> bool
        Set: EnableAutoComplete(self: _Application) = value
        """
        ...

    @property
    def EnableCancelKey(self) -> XlEnableCancelKey:
        """
        Get: EnableCancelKey(self: _Application) -> XlEnableCancelKey
        Set: EnableCancelKey(self: _Application) = value
        """
        ...

    @property
    def EnableCheckFileExtensions(self) -> bool:
        """
        Get: EnableCheckFileExtensions(self: _Application) -> bool
        Set: EnableCheckFileExtensions(self: _Application) = value
        """
        ...

    @property
    def EnableEvents(self) -> bool:
        """
        Get: EnableEvents(self: _Application) -> bool
        Set: EnableEvents(self: _Application) = value
        """
        ...

    @property
    def EnableLargeOperationAlert(self) -> bool:
        """
        Get: EnableLargeOperationAlert(self: _Application) -> bool
        Set: EnableLargeOperationAlert(self: _Application) = value
        """
        ...

    @property
    def EnableLivePreview(self) -> bool:
        """
        Get: EnableLivePreview(self: _Application) -> bool
        Set: EnableLivePreview(self: _Application) = value
        """
        ...

    @property
    def EnableMacroAnimations(self) -> bool:
        """
        Get: EnableMacroAnimations(self: _Application) -> bool
        Set: EnableMacroAnimations(self: _Application) = value
        """
        ...

    @property
    def EnableSound(self) -> bool:
        """
        Get: EnableSound(self: _Application) -> bool
        Set: EnableSound(self: _Application) = value
        """
        ...

    @property
    def EnableTipWizard(self) -> bool:
        """
        Get: EnableTipWizard(self: _Application) -> bool
        Set: EnableTipWizard(self: _Application) = value
        """
        ...

    @property
    def ErrorCheckingOptions(self) -> ErrorCheckingOptions:
        """ Get: ErrorCheckingOptions(self: _Application) -> ErrorCheckingOptions """
        ...

    @property
    def Excel4IntlMacroSheets(self) -> Sheets:
        """ Get: Excel4IntlMacroSheets(self: _Application) -> Sheets """
        ...

    @property
    def Excel4MacroSheets(self) -> Sheets:
        """ Get: Excel4MacroSheets(self: _Application) -> Sheets """
        ...

    @property
    def ExtendList(self) -> bool:
        """
        Get: ExtendList(self: _Application) -> bool
        Set: ExtendList(self: _Application) = value
        """
        ...

    @property
    def FeatureInstall(self): # -> MsoFeatureInstall
        """
        Get: FeatureInstall(self: _Application) -> MsoFeatureInstall
        Set: FeatureInstall(self: _Application) = value
        """
        ...

    @property
    def FileExportConverters(self) -> FileExportConverters:
        """ Get: FileExportConverters(self: _Application) -> FileExportConverters """
        ...

    @property
    def FileFind(self): # -> IFind
        """ Get: FileFind(self: _Application) -> IFind """
        ...

    @property
    def FileSearch(self): # -> FileSearch
        """ Get: FileSearch(self: _Application) -> FileSearch """
        ...

    @property
    def FileValidation(self): # -> MsoFileValidationMode
        """
        Get: FileValidation(self: _Application) -> MsoFileValidationMode
        Set: FileValidation(self: _Application) = value
        """
        ...

    @property
    def FileValidationPivot(self) -> XlFileValidationPivotMode:
        """
        Get: FileValidationPivot(self: _Application) -> XlFileValidationPivotMode
        Set: FileValidationPivot(self: _Application) = value
        """
        ...

    @property
    def FindFormat(self) -> CellFormat:
        """
        Get: FindFormat(self: _Application) -> CellFormat
        Set: FindFormat(self: _Application) = value
        """
        ...

    @property
    def FixedDecimal(self) -> bool:
        """
        Get: FixedDecimal(self: _Application) -> bool
        Set: FixedDecimal(self: _Application) = value
        """
        ...

    @property
    def FixedDecimalPlaces(self) -> int:
        """
        Get: FixedDecimalPlaces(self: _Application) -> int
        Set: FixedDecimalPlaces(self: _Application) = value
        """
        ...

    @property
    def FlashFill(self) -> bool:
        """
        Get: FlashFill(self: _Application) -> bool
        Set: FlashFill(self: _Application) = value
        """
        ...

    @property
    def FlashFillMode(self) -> bool:
        """
        Get: FlashFillMode(self: _Application) -> bool
        Set: FlashFillMode(self: _Application) = value
        """
        ...

    @property
    def FormulaBarHeight(self) -> int:
        """
        Get: FormulaBarHeight(self: _Application) -> int
        Set: FormulaBarHeight(self: _Application) = value
        """
        ...

    @property
    def GenerateGetPivotData(self) -> bool:
        """
        Get: GenerateGetPivotData(self: _Application) -> bool
        Set: GenerateGetPivotData(self: _Application) = value
        """
        ...

    @property
    def GenerateTableRefs(self) -> XlGenerateTableRefs:
        """
        Get: GenerateTableRefs(self: _Application) -> XlGenerateTableRefs
        Set: GenerateTableRefs(self: _Application) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: _Application) -> float
        Set: Height(self: _Application) = value
        """
        ...

    @property
    def HighQualityModeForGraphics(self) -> bool:
        """
        Get: HighQualityModeForGraphics(self: _Application) -> bool
        Set: HighQualityModeForGraphics(self: _Application) = value
        """
        ...

    @property
    def Hinstance(self) -> int:
        """ Get: Hinstance(self: _Application) -> int """
        ...

    @property
    def HinstancePtr(self) -> object:
        """ Get: HinstancePtr(self: _Application) -> object """
        ...

    @property
    def Hwnd(self) -> int:
        """ Get: Hwnd(self: _Application) -> int """
        ...

    @property
    def IgnoreRemoteRequests(self) -> bool:
        """
        Get: IgnoreRemoteRequests(self: _Application) -> bool
        Set: IgnoreRemoteRequests(self: _Application) = value
        """
        ...

    @property
    def Interactive(self) -> bool:
        """
        Get: Interactive(self: _Application) -> bool
        Set: Interactive(self: _Application) = value
        """
        ...

    @property
    def IsSandboxed(self) -> bool:
        """ Get: IsSandboxed(self: _Application) -> bool """
        ...

    @property
    def Iteration(self) -> bool:
        """
        Get: Iteration(self: _Application) -> bool
        Set: Iteration(self: _Application) = value
        """
        ...

    @property
    def LanguageSettings(self): # -> LanguageSettings
        """ Get: LanguageSettings(self: _Application) -> LanguageSettings """
        ...

    @property
    def LargeButtons(self) -> bool:
        """
        Get: LargeButtons(self: _Application) -> bool
        Set: LargeButtons(self: _Application) = value
        """
        ...

    @property
    def LargeOperationCellThousandCount(self) -> int:
        """
        Get: LargeOperationCellThousandCount(self: _Application) -> int
        Set: LargeOperationCellThousandCount(self: _Application) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: _Application) -> float
        Set: Left(self: _Application) = value
        """
        ...

    @property
    def LibraryPath(self) -> str:
        """ Get: LibraryPath(self: _Application) -> str """
        ...

    @property
    def MailSession(self) -> object:
        """ Get: MailSession(self: _Application) -> object """
        ...

    @property
    def MailSystem(self) -> XlMailSystem:
        """ Get: MailSystem(self: _Application) -> XlMailSystem """
        ...

    @property
    def MapPaperSize(self) -> bool:
        """
        Get: MapPaperSize(self: _Application) -> bool
        Set: MapPaperSize(self: _Application) = value
        """
        ...

    @property
    def MathCoprocessorAvailable(self) -> bool:
        """ Get: MathCoprocessorAvailable(self: _Application) -> bool """
        ...

    @property
    def MaxChange(self) -> float:
        """
        Get: MaxChange(self: _Application) -> float
        Set: MaxChange(self: _Application) = value
        """
        ...

    @property
    def MaxIterations(self) -> int:
        """
        Get: MaxIterations(self: _Application) -> int
        Set: MaxIterations(self: _Application) = value
        """
        ...

    @property
    def MeasurementUnit(self) -> int:
        """
        Get: MeasurementUnit(self: _Application) -> int
        Set: MeasurementUnit(self: _Application) = value
        """
        ...

    @property
    def MemoryFree(self) -> int:
        """ Get: MemoryFree(self: _Application) -> int """
        ...

    @property
    def MemoryTotal(self) -> int:
        """ Get: MemoryTotal(self: _Application) -> int """
        ...

    @property
    def MemoryUsed(self) -> int:
        """ Get: MemoryUsed(self: _Application) -> int """
        ...

    @property
    def MenuBars(self) -> MenuBars:
        """ Get: MenuBars(self: _Application) -> MenuBars """
        ...

    @property
    def MergeInstances(self) -> bool:
        """
        Get: MergeInstances(self: _Application) -> bool
        Set: MergeInstances(self: _Application) = value
        """
        ...

    @property
    def Modules(self) -> Modules:
        """ Get: Modules(self: _Application) -> Modules """
        ...

    @property
    def MouseAvailable(self) -> bool:
        """ Get: MouseAvailable(self: _Application) -> bool """
        ...

    @property
    def MoveAfterReturn(self) -> bool:
        """
        Get: MoveAfterReturn(self: _Application) -> bool
        Set: MoveAfterReturn(self: _Application) = value
        """
        ...

    @property
    def MoveAfterReturnDirection(self) -> XlDirection:
        """
        Get: MoveAfterReturnDirection(self: _Application) -> XlDirection
        Set: MoveAfterReturnDirection(self: _Application) = value
        """
        ...

    @property
    def MultiThreadedCalculation(self) -> MultiThreadedCalculation:
        """ Get: MultiThreadedCalculation(self: _Application) -> MultiThreadedCalculation """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _Application) -> str """
        ...

    @property
    def Names(self) -> Names:
        """ Get: Names(self: _Application) -> Names """
        ...

    @property
    def NetworkTemplatesPath(self) -> str:
        """ Get: NetworkTemplatesPath(self: _Application) -> str """
        ...

    @property
    def NewWorkbook(self): # -> NewFile
        """ Get: NewWorkbook(self: _Application) -> NewFile """
        ...

    @property
    def ODBCErrors(self) -> ODBCErrors:
        """ Get: ODBCErrors(self: _Application) -> ODBCErrors """
        ...

    @property
    def ODBCTimeout(self) -> int:
        """
        Get: ODBCTimeout(self: _Application) -> int
        Set: ODBCTimeout(self: _Application) = value
        """
        ...

    @property
    def OLEDBErrors(self) -> OLEDBErrors:
        """ Get: OLEDBErrors(self: _Application) -> OLEDBErrors """
        ...

    @property
    def OnCalculate(self) -> str:
        """
        Get: OnCalculate(self: _Application) -> str
        Set: OnCalculate(self: _Application) = value
        """
        ...

    @property
    def OnData(self) -> str:
        """
        Get: OnData(self: _Application) -> str
        Set: OnData(self: _Application) = value
        """
        ...

    @property
    def OnDoubleClick(self) -> str:
        """
        Get: OnDoubleClick(self: _Application) -> str
        Set: OnDoubleClick(self: _Application) = value
        """
        ...

    @property
    def OnEntry(self) -> str:
        """
        Get: OnEntry(self: _Application) -> str
        Set: OnEntry(self: _Application) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: _Application) -> str
        Set: OnSheetActivate(self: _Application) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: _Application) -> str
        Set: OnSheetDeactivate(self: _Application) = value
        """
        ...

    @property
    def OnWindow(self) -> str:
        """
        Get: OnWindow(self: _Application) -> str
        Set: OnWindow(self: _Application) = value
        """
        ...

    @property
    def OperatingSystem(self) -> str:
        """ Get: OperatingSystem(self: _Application) -> str """
        ...

    @property
    def OrganizationName(self) -> str:
        """ Get: OrganizationName(self: _Application) -> str """
        ...

    @property
    def Parent(self) -> Application:
        """ Get: Parent(self: _Application) -> Application """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: _Application) -> str """
        ...

    @property
    def PathSeparator(self) -> str:
        """ Get: PathSeparator(self: _Application) -> str """
        ...

    @property
    def PivotTableSelection(self) -> bool:
        """
        Get: PivotTableSelection(self: _Application) -> bool
        Set: PivotTableSelection(self: _Application) = value
        """
        ...

    @property
    def PrintCommunication(self) -> bool:
        """
        Get: PrintCommunication(self: _Application) -> bool
        Set: PrintCommunication(self: _Application) = value
        """
        ...

    @property
    def ProductCode(self) -> str:
        """ Get: ProductCode(self: _Application) -> str """
        ...

    @property
    def PromptForSummaryInfo(self) -> bool:
        """
        Get: PromptForSummaryInfo(self: _Application) -> bool
        Set: PromptForSummaryInfo(self: _Application) = value
        """
        ...

    @property
    def ProtectedViewWindows(self) -> ProtectedViewWindows:
        """ Get: ProtectedViewWindows(self: _Application) -> ProtectedViewWindows """
        ...

    @property
    def QuickAnalysis(self) -> QuickAnalysis:
        """ Get: QuickAnalysis(self: _Application) -> QuickAnalysis """
        ...

    @property
    def Quitting(self) -> bool:
        """ Get: Quitting(self: _Application) -> bool """
        ...

    @property
    def Ready(self) -> bool:
        """ Get: Ready(self: _Application) -> bool """
        ...

    @property
    def RecentFiles(self) -> RecentFiles:
        """ Get: RecentFiles(self: _Application) -> RecentFiles """
        ...

    @property
    def RecordRelative(self) -> bool:
        """ Get: RecordRelative(self: _Application) -> bool """
        ...

    @property
    def ReferenceStyle(self) -> XlReferenceStyle:
        """
        Get: ReferenceStyle(self: _Application) -> XlReferenceStyle
        Set: ReferenceStyle(self: _Application) = value
        """
        ...

    @property
    def ReplaceFormat(self) -> CellFormat:
        """
        Get: ReplaceFormat(self: _Application) -> CellFormat
        Set: ReplaceFormat(self: _Application) = value
        """
        ...

    @property
    def RollZoom(self) -> bool:
        """
        Get: RollZoom(self: _Application) -> bool
        Set: RollZoom(self: _Application) = value
        """
        ...

    @property
    def Rows(self) -> Range:
        """ Get: Rows(self: _Application) -> Range """
        ...

    @property
    def RTD(self) -> RTD:
        """ Get: RTD(self: _Application) -> RTD """
        ...

    @property
    def SaveISO8601Dates(self) -> bool:
        """
        Get: SaveISO8601Dates(self: _Application) -> bool
        Set: SaveISO8601Dates(self: _Application) = value
        """
        ...

    @property
    def ScreenUpdating(self) -> bool:
        """
        Get: ScreenUpdating(self: _Application) -> bool
        Set: ScreenUpdating(self: _Application) = value
        """
        ...

    @property
    def Selection(self) -> object:
        """ Get: Selection(self: _Application) -> object """
        ...

    @property
    def Sheets(self) -> Sheets:
        """ Get: Sheets(self: _Application) -> Sheets """
        ...

    @property
    def SheetsInNewWorkbook(self) -> int:
        """
        Get: SheetsInNewWorkbook(self: _Application) -> int
        Set: SheetsInNewWorkbook(self: _Application) = value
        """
        ...

    @property
    def ShowChartTipNames(self) -> bool:
        """
        Get: ShowChartTipNames(self: _Application) -> bool
        Set: ShowChartTipNames(self: _Application) = value
        """
        ...

    @property
    def ShowChartTipValues(self) -> bool:
        """
        Get: ShowChartTipValues(self: _Application) -> bool
        Set: ShowChartTipValues(self: _Application) = value
        """
        ...

    @property
    def ShowDevTools(self) -> bool:
        """
        Get: ShowDevTools(self: _Application) -> bool
        Set: ShowDevTools(self: _Application) = value
        """
        ...

    @property
    def ShowMenuFloaties(self) -> bool:
        """
        Get: ShowMenuFloaties(self: _Application) -> bool
        Set: ShowMenuFloaties(self: _Application) = value
        """
        ...

    @property
    def ShowQuickAnalysis(self) -> bool:
        """
        Get: ShowQuickAnalysis(self: _Application) -> bool
        Set: ShowQuickAnalysis(self: _Application) = value
        """
        ...

    @property
    def ShowSelectionFloaties(self) -> bool:
        """
        Get: ShowSelectionFloaties(self: _Application) -> bool
        Set: ShowSelectionFloaties(self: _Application) = value
        """
        ...

    @property
    def ShowStartupDialog(self) -> bool:
        """
        Get: ShowStartupDialog(self: _Application) -> bool
        Set: ShowStartupDialog(self: _Application) = value
        """
        ...

    @property
    def ShowToolTips(self) -> bool:
        """
        Get: ShowToolTips(self: _Application) -> bool
        Set: ShowToolTips(self: _Application) = value
        """
        ...

    @property
    def ShowWindowsInTaskbar(self) -> bool:
        """
        Get: ShowWindowsInTaskbar(self: _Application) -> bool
        Set: ShowWindowsInTaskbar(self: _Application) = value
        """
        ...

    @property
    def SmartArtColors(self): # -> SmartArtColors
        """ Get: SmartArtColors(self: _Application) -> SmartArtColors """
        ...

    @property
    def SmartArtLayouts(self): # -> SmartArtLayouts
        """ Get: SmartArtLayouts(self: _Application) -> SmartArtLayouts """
        ...

    @property
    def SmartArtQuickStyles(self): # -> SmartArtQuickStyles
        """ Get: SmartArtQuickStyles(self: _Application) -> SmartArtQuickStyles """
        ...

    @property
    def SmartTagRecognizers(self) -> SmartTagRecognizers:
        """ Get: SmartTagRecognizers(self: _Application) -> SmartTagRecognizers """
        ...

    @property
    def Speech(self) -> Speech:
        """ Get: Speech(self: _Application) -> Speech """
        ...

    @property
    def SpellingOptions(self) -> SpellingOptions:
        """ Get: SpellingOptions(self: _Application) -> SpellingOptions """
        ...

    @property
    def StandardFont(self) -> str:
        """
        Get: StandardFont(self: _Application) -> str
        Set: StandardFont(self: _Application) = value
        """
        ...

    @property
    def StandardFontSize(self) -> float:
        """
        Get: StandardFontSize(self: _Application) -> float
        Set: StandardFontSize(self: _Application) = value
        """
        ...

    @property
    def StartupPath(self) -> str:
        """ Get: StartupPath(self: _Application) -> str """
        ...

    @property
    def StatusBar(self) -> object:
        """
        Get: StatusBar(self: _Application) -> object
        Set: StatusBar(self: _Application) = value
        """
        ...

    @property
    def TemplatesPath(self) -> str:
        """ Get: TemplatesPath(self: _Application) -> str """
        ...

    @property
    def ThisCell(self) -> Range:
        """ Get: ThisCell(self: _Application) -> Range """
        ...

    @property
    def ThisWorkbook(self) -> Workbook:
        """ Get: ThisWorkbook(self: _Application) -> Workbook """
        ...

    @property
    def ThousandsSeparator(self) -> str:
        """
        Get: ThousandsSeparator(self: _Application) -> str
        Set: ThousandsSeparator(self: _Application) = value
        """
        ...

    @property
    def Toolbars(self) -> Toolbars:
        """ Get: Toolbars(self: _Application) -> Toolbars """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: _Application) -> float
        Set: Top(self: _Application) = value
        """
        ...

    @property
    def TransitionMenuKey(self) -> str:
        """
        Get: TransitionMenuKey(self: _Application) -> str
        Set: TransitionMenuKey(self: _Application) = value
        """
        ...

    @property
    def TransitionMenuKeyAction(self) -> int:
        """
        Get: TransitionMenuKeyAction(self: _Application) -> int
        Set: TransitionMenuKeyAction(self: _Application) = value
        """
        ...

    @property
    def TransitionNavigKeys(self) -> bool:
        """
        Get: TransitionNavigKeys(self: _Application) -> bool
        Set: TransitionNavigKeys(self: _Application) = value
        """
        ...

    @property
    def UILanguage(self) -> int:
        """
        Get: UILanguage(self: _Application) -> int
        Set: UILanguage(self: _Application) = value
        """
        ...

    @property
    def UsableHeight(self) -> float:
        """ Get: UsableHeight(self: _Application) -> float """
        ...

    @property
    def UsableWidth(self) -> float:
        """ Get: UsableWidth(self: _Application) -> float """
        ...

    @property
    def UseClusterConnector(self) -> bool:
        """
        Get: UseClusterConnector(self: _Application) -> bool
        Set: UseClusterConnector(self: _Application) = value
        """
        ...

    @property
    def UsedObjects(self) -> UsedObjects:
        """ Get: UsedObjects(self: _Application) -> UsedObjects """
        ...

    @property
    def UserControl(self) -> bool:
        """
        Get: UserControl(self: _Application) -> bool
        Set: UserControl(self: _Application) = value
        """
        ...

    @property
    def UserLibraryPath(self) -> str:
        """ Get: UserLibraryPath(self: _Application) -> str """
        ...

    @property
    def UserName(self) -> str:
        """
        Get: UserName(self: _Application) -> str
        Set: UserName(self: _Application) = value
        """
        ...

    @property
    def UseSystemSeparators(self) -> bool:
        """
        Get: UseSystemSeparators(self: _Application) -> bool
        Set: UseSystemSeparators(self: _Application) = value
        """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: _Application) -> str """
        ...

    @property
    def VBE(self) -> VBE:
        """ Get: VBE(self: _Application) -> VBE """
        ...

    @property
    def Version(self) -> str:
        """ Get: Version(self: _Application) -> str """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _Application) -> bool
        Set: Visible(self: _Application) = value
        """
        ...

    @property
    def WarnOnFunctionNameConflict(self) -> bool:
        """
        Get: WarnOnFunctionNameConflict(self: _Application) -> bool
        Set: WarnOnFunctionNameConflict(self: _Application) = value
        """
        ...

    @property
    def Watches(self) -> Watches:
        """ Get: Watches(self: _Application) -> Watches """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: _Application) -> float
        Set: Width(self: _Application) = value
        """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: _Application) -> Windows """
        ...

    @property
    def WindowsForPens(self) -> bool:
        """ Get: WindowsForPens(self: _Application) -> bool """
        ...

    @property
    def WindowState(self) -> XlWindowState:
        """
        Get: WindowState(self: _Application) -> XlWindowState
        Set: WindowState(self: _Application) = value
        """
        ...

    @property
    def Workbooks(self) -> Workbooks:
        """ Get: Workbooks(self: _Application) -> Workbooks """
        ...

    @property
    def WorksheetFunction(self) -> WorksheetFunction:
        """ Get: WorksheetFunction(self: _Application) -> WorksheetFunction """
        ...

    @property
    def Worksheets(self) -> Sheets:
        """ Get: Worksheets(self: _Application) -> Sheets """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: _Application) -> str """
        ...


    def ActivateMicrosoftApp(self, Index:XlMSApplication): # -> 
        """ ActivateMicrosoftApp(self: _Application, Index: XlMSApplication) """
        ...

    def AddChartAutoFormat(self, Chart:object, Name:str, Description:object): # -> 
        """ AddChartAutoFormat(self: _Application, Chart: object, Name: str, Description: object) """
        ...

    def AddCustomList(self, ListArray:object, ByRow:object): # -> 
        """ AddCustomList(self: _Application, ListArray: object, ByRow: object) """
        ...

    def Calculate(self): # -> 
        """ Calculate(self: _Application) """
        ...

    def CalculateFull(self): # -> 
        """ CalculateFull(self: _Application) """
        ...

    def CalculateFullRebuild(self): # -> 
        """ CalculateFullRebuild(self: _Application) """
        ...

    def CalculateUntilAsyncQueriesDone(self): # -> 
        """ CalculateUntilAsyncQueriesDone(self: _Application) """
        ...

    def CentimetersToPoints(self, Centimeters:float) -> float:
        """ CentimetersToPoints(self: _Application, Centimeters: float) -> float """
        ...

    def CheckAbort(self, KeepAbort:object): # -> 
        """ CheckAbort(self: _Application, KeepAbort: object) """
        ...

    def CheckSpelling(self, Word:str, CustomDictionary:object, IgnoreUppercase:object) -> bool:
        """ CheckSpelling(self: _Application, Word: str, CustomDictionary: object, IgnoreUppercase: object) -> bool """
        ...

    def ConvertFormula(self, Formula:object, FromReferenceStyle:XlReferenceStyle, ToReferenceStyle:object, ToAbsolute:object, RelativeTo:object) -> object:
        """ ConvertFormula(self: _Application, Formula: object, FromReferenceStyle: XlReferenceStyle, ToReferenceStyle: object, ToAbsolute: object, RelativeTo: object) -> object """
        ...

    def DDEExecute(self, Channel:int, String:str): # -> 
        """ DDEExecute(self: _Application, Channel: int, String: str) """
        ...

    def DDEInitiate(self, App:str, Topic:str) -> int:
        """ DDEInitiate(self: _Application, App: str, Topic: str) -> int """
        ...

    def DDEPoke(self, Channel:int, Item:object, Data:object): # -> 
        """ DDEPoke(self: _Application, Channel: int, Item: object, Data: object) """
        ...

    def DDERequest(self, Channel:int, Item:str) -> object:
        """ DDERequest(self: _Application, Channel: int, Item: str) -> object """
        ...

    def DDETerminate(self, Channel:int): # -> 
        """ DDETerminate(self: _Application, Channel: int) """
        ...

    def DeleteChartAutoFormat(self, Name:str): # -> 
        """ DeleteChartAutoFormat(self: _Application, Name: str) """
        ...

    def DeleteCustomList(self, ListNum:int): # -> 
        """ DeleteCustomList(self: _Application, ListNum: int) """
        ...

    def DisplayXMLSourcePane(self, XmlMap:object): # -> 
        """ DisplayXMLSourcePane(self: _Application, XmlMap: object) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: _Application) """
        ...

    def Dummy1(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ Dummy1(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def Dummy10(self, arg:object) -> bool:
        """ Dummy10(self: _Application, arg: object) -> bool """
        ...

    def Dummy11(self): # -> 
        """ Dummy11(self: _Application) """
        ...

    def Dummy12(self, p1:PivotTable, p2:PivotTable): # -> 
        """ Dummy12(self: _Application, p1: PivotTable, p2: PivotTable) """
        ...

    def Dummy13(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Dummy13(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Dummy14(self): # -> 
        """ Dummy14(self: _Application) """
        ...

    def Dummy2(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object) -> object:
        """ Dummy2(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> object """
        ...

    def Dummy20(self, grfCompareFunctions:int) -> object:
        """ Dummy20(self: _Application, grfCompareFunctions: int) -> object """
        ...

    def Dummy3(self) -> object:
        """ Dummy3(self: _Application) -> object """
        ...

    def Dummy4(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object) -> object:
        """ Dummy4(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object) -> object """
        ...

    def Dummy5(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object) -> object:
        """ Dummy5(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object) -> object """
        ...

    def Dummy6(self) -> object:
        """ Dummy6(self: _Application) -> object """
        ...

    def Dummy7(self) -> object:
        """ Dummy7(self: _Application) -> object """
        ...

    def Dummy8(self, Arg1:object) -> object:
        """ Dummy8(self: _Application, Arg1: object) -> object """
        ...

    def Dummy9(self) -> object:
        """ Dummy9(self: _Application) -> object """
        ...

    def Evaluate(self, Name:object) -> object:
        """ Evaluate(self: _Application, Name: object) -> object """
        ...

    def ExecuteExcel4Macro(self, String:str) -> object:
        """ ExecuteExcel4Macro(self: _Application, String: str) -> object """
        ...

    def FindFile(self) -> bool:
        """ FindFile(self: _Application) -> bool """
        ...

    def GetCustomListContents(self, ListNum:int) -> object:
        """ GetCustomListContents(self: _Application, ListNum: int) -> object """
        ...

    def GetCustomListNum(self, ListArray:object) -> int:
        """ GetCustomListNum(self: _Application, ListArray: object) -> int """
        ...

    def GetOpenFilename(self, FileFilter:object, FilterIndex:object, Title:object, ButtonText:object, MultiSelect:object) -> object:
        """ GetOpenFilename(self: _Application, FileFilter: object, FilterIndex: object, Title: object, ButtonText: object, MultiSelect: object) -> object """
        ...

    def GetPhonetic(self, Text:object) -> str:
        """ GetPhonetic(self: _Application, Text: object) -> str """
        ...

    def GetSaveAsFilename(self, InitialFilename:object, FileFilter:object, FilterIndex:object, Title:object, ButtonText:object) -> object:
        """ GetSaveAsFilename(self: _Application, InitialFilename: object, FileFilter: object, FilterIndex: object, Title: object, ButtonText: object) -> object """
        ...

    def Goto(self, Reference:object, Scroll:object): # -> 
        """ Goto(self: _Application, Reference: object, Scroll: object) """
        ...

    def Help(self, HelpFile:object, HelpContextID:object): # -> 
        """ Help(self: _Application, HelpFile: object, HelpContextID: object) """
        ...

    def InchesToPoints(self, Inches:float) -> float:
        """ InchesToPoints(self: _Application, Inches: float) -> float """
        ...

    def InputBox(self, Prompt:str, Title:object, Default:object, Left:object, Top:object, HelpFile:object, HelpContextID:object, Type:object) -> object:
        """ InputBox(self: _Application, Prompt: str, Title: object, Default: object, Left: object, Top: object, HelpFile: object, HelpContextID: object, Type: object) -> object """
        ...

    def Intersect(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> Range:
        """ Intersect(self: _Application, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        ...

    def MacroOptions(self, Macro:object, Description:object, HasMenu:object, MenuText:object, HasShortcutKey:object, ShortcutKey:object, Category:object, StatusBar:object, HelpContextID:object, HelpFile:object): # -> 
        """ MacroOptions(self: _Application, Macro: object, Description: object, HasMenu: object, MenuText: object, HasShortcutKey: object, ShortcutKey: object, Category: object, StatusBar: object, HelpContextID: object, HelpFile: object) """
        ...

    def MacroOptions2(self, Macro:object, Description:object, HasMenu:object, MenuText:object, HasShortcutKey:object, ShortcutKey:object, Category:object, StatusBar:object, HelpContextID:object, HelpFile:object, ArgumentDescriptions:object): # -> 
        """ MacroOptions2(self: _Application, Macro: object, Description: object, HasMenu: object, MenuText: object, HasShortcutKey: object, ShortcutKey: object, Category: object, StatusBar: object, HelpContextID: object, HelpFile: object, ArgumentDescriptions: object) """
        ...

    def MailLogoff(self): # -> 
        """ MailLogoff(self: _Application) """
        ...

    def MailLogon(self, Name:object, Password:object, DownloadNewMail:object): # -> 
        """ MailLogon(self: _Application, Name: object, Password: object, DownloadNewMail: object) """
        ...

    def NextLetter(self) -> Workbook:
        """ NextLetter(self: _Application) -> Workbook """
        ...

    def OnKey(self, Key:str, Procedure:object): # -> 
        """ OnKey(self: _Application, Key: str, Procedure: object) """
        ...

    def OnRepeat(self, Text:str, Procedure:str): # -> 
        """ OnRepeat(self: _Application, Text: str, Procedure: str) """
        ...

    def OnTime(self, EarliestTime:object, Procedure:str, LatestTime:object, Schedule:object): # -> 
        """ OnTime(self: _Application, EarliestTime: object, Procedure: str, LatestTime: object, Schedule: object) """
        ...

    def OnUndo(self, Text:str, Procedure:str): # -> 
        """ OnUndo(self: _Application, Text: str, Procedure: str) """
        ...

    def Quit(self): # -> 
        """ Quit(self: _Application) """
        ...

    def RecordMacro(self, BasicCode:object, XlmCode:object): # -> 
        """ RecordMacro(self: _Application, BasicCode: object, XlmCode: object) """
        ...

    def RegisterXLL(self, Filename:str) -> bool:
        """ RegisterXLL(self: _Application, Filename: str) -> bool """
        ...

    def Repeat(self): # -> 
        """ Repeat(self: _Application) """
        ...

    def ResetTipWizard(self): # -> 
        """ ResetTipWizard(self: _Application) """
        ...

    def Run(self, Macro:object, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Run(self: _Application, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Save(self, Filename:object): # -> 
        """ Save(self: _Application, Filename: object) """
        ...

    def SaveWorkspace(self, Filename:object): # -> 
        """ SaveWorkspace(self: _Application, Filename: object) """
        ...

    def SendKeys(self, Keys:object, Wait:object): # -> 
        """ SendKeys(self: _Application, Keys: object, Wait: object) """
        ...

    def SetDefaultChart(self, FormatName:object, Gallery:object): # -> 
        """ SetDefaultChart(self: _Application, FormatName: object, Gallery: object) """
        ...

    def SharePointVersion(self, bstrUrl:str) -> int:
        """ SharePointVersion(self: _Application, bstrUrl: str) -> int """
        ...

    def Support(self, Object:object, ID:int, arg:object) -> object:
        """ Support(self: _Application, Object: object, ID: int, arg: object) -> object """
        ...

    def Undo(self): # -> 
        """ Undo(self: _Application) """
        ...

    def Union(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> Range:
        """ Union(self: _Application, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        ...

    def Volatile(self, Volatile:object): # -> 
        """ Volatile(self: _Application, Volatile: object) """
        ...

    def Wait(self, Time:object) -> bool:
        """ Wait(self: _Application, Time: object) -> bool """
        ...

    def _Evaluate(self, Name:object) -> object:
        """ _Evaluate(self: _Application, Name: object) -> object """
        ...

    def _FindFile(self): # -> 
        """ _FindFile(self: _Application) """
        ...

    def _Run2(self, Macro:object, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ _Run2(self: _Application, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def _Wait(self, Time:object): # -> 
        """ _Wait(self: _Application, Time: object) """
        ...

    def _WSFunction(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ _WSFunction(self: _Application, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Application(AppEvents_Event, _Application): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ApplicationClass(Application, __ComObject): # skipped bases: <type '_Application'>, <type 'AppEvents_Event'>, <type 'object'>
    """ ApplicationClass() """
    @property
    def ActiveCell(self) -> Range:
        """ Get: ActiveCell(self: ApplicationClass) -> Range """
        ...

    @property
    def ActiveChart(self) -> Chart:
        """ Get: ActiveChart(self: ApplicationClass) -> Chart """
        ...

    @property
    def ActiveDialog(self) -> DialogSheet:
        """ Get: ActiveDialog(self: ApplicationClass) -> DialogSheet """
        ...

    @property
    def ActiveEncryptionSession(self) -> int:
        """ Get: ActiveEncryptionSession(self: ApplicationClass) -> int """
        ...

    @property
    def ActiveMenuBar(self) -> MenuBar:
        """ Get: ActiveMenuBar(self: ApplicationClass) -> MenuBar """
        ...

    @property
    def ActivePrinter(self) -> str:
        """
        Get: ActivePrinter(self: ApplicationClass) -> str
        Set: ActivePrinter(self: ApplicationClass) = value
        """
        ...

    @property
    def ActiveProtectedViewWindow(self) -> ProtectedViewWindow:
        """ Get: ActiveProtectedViewWindow(self: ApplicationClass) -> ProtectedViewWindow """
        ...

    @property
    def ActiveSheet(self) -> object:
        """ Get: ActiveSheet(self: ApplicationClass) -> object """
        ...

    @property
    def ActiveWindow(self) -> Window:
        """ Get: ActiveWindow(self: ApplicationClass) -> Window """
        ...

    @property
    def ActiveWorkbook(self) -> Workbook:
        """ Get: ActiveWorkbook(self: ApplicationClass) -> Workbook """
        ...

    @property
    def AddIns(self) -> AddIns:
        """ Get: AddIns(self: ApplicationClass) -> AddIns """
        ...

    @property
    def AddIns2(self) -> AddIns2:
        """ Get: AddIns2(self: ApplicationClass) -> AddIns2 """
        ...

    @property
    def AlertBeforeOverwriting(self) -> bool:
        """
        Get: AlertBeforeOverwriting(self: ApplicationClass) -> bool
        Set: AlertBeforeOverwriting(self: ApplicationClass) = value
        """
        ...

    @property
    def AltStartupPath(self) -> str:
        """
        Get: AltStartupPath(self: ApplicationClass) -> str
        Set: AltStartupPath(self: ApplicationClass) = value
        """
        ...

    @property
    def AlwaysUseClearType(self) -> bool:
        """
        Get: AlwaysUseClearType(self: ApplicationClass) -> bool
        Set: AlwaysUseClearType(self: ApplicationClass) = value
        """
        ...

    @property
    def AnswerWizard(self): # -> AnswerWizard
        """ Get: AnswerWizard(self: ApplicationClass) -> AnswerWizard """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ApplicationClass) -> Application """
        ...

    @property
    def ArbitraryXMLSupportAvailable(self) -> bool:
        """ Get: ArbitraryXMLSupportAvailable(self: ApplicationClass) -> bool """
        ...

    @property
    def AskToUpdateLinks(self) -> bool:
        """
        Get: AskToUpdateLinks(self: ApplicationClass) -> bool
        Set: AskToUpdateLinks(self: ApplicationClass) = value
        """
        ...

    @property
    def Assistance(self): # -> IAssistance
        """ Get: Assistance(self: ApplicationClass) -> IAssistance """
        ...

    @property
    def Assistant(self): # -> Assistant
        """ Get: Assistant(self: ApplicationClass) -> Assistant """
        ...

    @property
    def AutoCorrect(self) -> AutoCorrect:
        """ Get: AutoCorrect(self: ApplicationClass) -> AutoCorrect """
        ...

    @property
    def AutoFormatAsYouTypeReplaceHyperlinks(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceHyperlinks(self: ApplicationClass) -> bool
        Set: AutoFormatAsYouTypeReplaceHyperlinks(self: ApplicationClass) = value
        """
        ...

    @property
    def AutomationSecurity(self): # -> MsoAutomationSecurity
        """
        Get: AutomationSecurity(self: ApplicationClass) -> MsoAutomationSecurity
        Set: AutomationSecurity(self: ApplicationClass) = value
        """
        ...

    @property
    def AutoPercentEntry(self) -> bool:
        """
        Get: AutoPercentEntry(self: ApplicationClass) -> bool
        Set: AutoPercentEntry(self: ApplicationClass) = value
        """
        ...

    @property
    def AutoRecover(self) -> AutoRecover:
        """ Get: AutoRecover(self: ApplicationClass) -> AutoRecover """
        ...

    @property
    def Build(self) -> int:
        """ Get: Build(self: ApplicationClass) -> int """
        ...

    @property
    def CalculateBeforeSave(self) -> bool:
        """
        Get: CalculateBeforeSave(self: ApplicationClass) -> bool
        Set: CalculateBeforeSave(self: ApplicationClass) = value
        """
        ...

    @property
    def Calculation(self) -> XlCalculation:
        """
        Get: Calculation(self: ApplicationClass) -> XlCalculation
        Set: Calculation(self: ApplicationClass) = value
        """
        ...

    @property
    def CalculationInterruptKey(self) -> XlCalculationInterruptKey:
        """
        Get: CalculationInterruptKey(self: ApplicationClass) -> XlCalculationInterruptKey
        Set: CalculationInterruptKey(self: ApplicationClass) = value
        """
        ...

    @property
    def CalculationState(self) -> XlCalculationState:
        """ Get: CalculationState(self: ApplicationClass) -> XlCalculationState """
        ...

    @property
    def CalculationVersion(self) -> int:
        """ Get: CalculationVersion(self: ApplicationClass) -> int """
        ...

    @property
    def CanPlaySounds(self) -> bool:
        """ Get: CanPlaySounds(self: ApplicationClass) -> bool """
        ...

    @property
    def CanRecordSounds(self) -> bool:
        """ Get: CanRecordSounds(self: ApplicationClass) -> bool """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ApplicationClass) -> str
        Set: Caption(self: ApplicationClass) = value
        """
        ...

    @property
    def CellDragAndDrop(self) -> bool:
        """
        Get: CellDragAndDrop(self: ApplicationClass) -> bool
        Set: CellDragAndDrop(self: ApplicationClass) = value
        """
        ...

    @property
    def Cells(self) -> Range:
        """ Get: Cells(self: ApplicationClass) -> Range """
        ...

    @property
    def ChartDataPointTrack(self) -> bool:
        """
        Get: ChartDataPointTrack(self: ApplicationClass) -> bool
        Set: ChartDataPointTrack(self: ApplicationClass) = value
        """
        ...

    @property
    def Charts(self) -> Sheets:
        """ Get: Charts(self: ApplicationClass) -> Sheets """
        ...

    @property
    def ClusterConnector(self) -> str:
        """
        Get: ClusterConnector(self: ApplicationClass) -> str
        Set: ClusterConnector(self: ApplicationClass) = value
        """
        ...

    @property
    def ColorButtons(self) -> bool:
        """
        Get: ColorButtons(self: ApplicationClass) -> bool
        Set: ColorButtons(self: ApplicationClass) = value
        """
        ...

    @property
    def Columns(self) -> Range:
        """ Get: Columns(self: ApplicationClass) -> Range """
        ...

    @property
    def COMAddIns(self): # -> COMAddIns
        """ Get: COMAddIns(self: ApplicationClass) -> COMAddIns """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: ApplicationClass) -> CommandBars """
        ...

    @property
    def CommandUnderlines(self) -> XlCommandUnderlines:
        """
        Get: CommandUnderlines(self: ApplicationClass) -> XlCommandUnderlines
        Set: CommandUnderlines(self: ApplicationClass) = value
        """
        ...

    @property
    def ConstrainNumeric(self) -> bool:
        """
        Get: ConstrainNumeric(self: ApplicationClass) -> bool
        Set: ConstrainNumeric(self: ApplicationClass) = value
        """
        ...

    @property
    def ControlCharacters(self) -> bool:
        """
        Get: ControlCharacters(self: ApplicationClass) -> bool
        Set: ControlCharacters(self: ApplicationClass) = value
        """
        ...

    @property
    def CopyObjectsWithCells(self) -> bool:
        """
        Get: CopyObjectsWithCells(self: ApplicationClass) -> bool
        Set: CopyObjectsWithCells(self: ApplicationClass) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ApplicationClass) -> XlCreator """
        ...

    @property
    def Cursor(self) -> XlMousePointer:
        """
        Get: Cursor(self: ApplicationClass) -> XlMousePointer
        Set: Cursor(self: ApplicationClass) = value
        """
        ...

    @property
    def CursorMovement(self) -> int:
        """
        Get: CursorMovement(self: ApplicationClass) -> int
        Set: CursorMovement(self: ApplicationClass) = value
        """
        ...

    @property
    def CustomListCount(self) -> int:
        """ Get: CustomListCount(self: ApplicationClass) -> int """
        ...

    @property
    def CutCopyMode(self) -> XlCutCopyMode:
        """
        Get: CutCopyMode(self: ApplicationClass) -> XlCutCopyMode
        Set: CutCopyMode(self: ApplicationClass) = value
        """
        ...

    @property
    def DataEntryMode(self) -> int:
        """
        Get: DataEntryMode(self: ApplicationClass) -> int
        Set: DataEntryMode(self: ApplicationClass) = value
        """
        ...

    @property
    def DDEAppReturnCode(self) -> int:
        """ Get: DDEAppReturnCode(self: ApplicationClass) -> int """
        ...

    @property
    def DecimalSeparator(self) -> str:
        """
        Get: DecimalSeparator(self: ApplicationClass) -> str
        Set: DecimalSeparator(self: ApplicationClass) = value
        """
        ...

    @property
    def DefaultFilePath(self) -> str:
        """
        Get: DefaultFilePath(self: ApplicationClass) -> str
        Set: DefaultFilePath(self: ApplicationClass) = value
        """
        ...

    @property
    def DefaultSaveFormat(self) -> XlFileFormat:
        """
        Get: DefaultSaveFormat(self: ApplicationClass) -> XlFileFormat
        Set: DefaultSaveFormat(self: ApplicationClass) = value
        """
        ...

    @property
    def DefaultSheetDirection(self) -> int:
        """
        Get: DefaultSheetDirection(self: ApplicationClass) -> int
        Set: DefaultSheetDirection(self: ApplicationClass) = value
        """
        ...

    @property
    def DefaultWebOptions(self) -> DefaultWebOptions:
        """ Get: DefaultWebOptions(self: ApplicationClass) -> DefaultWebOptions """
        ...

    @property
    def DeferAsyncQueries(self) -> bool:
        """
        Get: DeferAsyncQueries(self: ApplicationClass) -> bool
        Set: DeferAsyncQueries(self: ApplicationClass) = value
        """
        ...

    @property
    def Dialogs(self) -> Dialogs:
        """ Get: Dialogs(self: ApplicationClass) -> Dialogs """
        ...

    @property
    def DialogSheets(self) -> Sheets:
        """ Get: DialogSheets(self: ApplicationClass) -> Sheets """
        ...

    @property
    def DisplayAlerts(self) -> bool:
        """
        Get: DisplayAlerts(self: ApplicationClass) -> bool
        Set: DisplayAlerts(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayClipboardWindow(self) -> bool:
        """
        Get: DisplayClipboardWindow(self: ApplicationClass) -> bool
        Set: DisplayClipboardWindow(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayCommentIndicator(self) -> XlCommentDisplayMode:
        """
        Get: DisplayCommentIndicator(self: ApplicationClass) -> XlCommentDisplayMode
        Set: DisplayCommentIndicator(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayDocumentActionTaskPane(self) -> bool:
        """
        Get: DisplayDocumentActionTaskPane(self: ApplicationClass) -> bool
        Set: DisplayDocumentActionTaskPane(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayDocumentInformationPanel(self) -> bool:
        """
        Get: DisplayDocumentInformationPanel(self: ApplicationClass) -> bool
        Set: DisplayDocumentInformationPanel(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayExcel4Menus(self) -> bool:
        """
        Get: DisplayExcel4Menus(self: ApplicationClass) -> bool
        Set: DisplayExcel4Menus(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayFormulaAutoComplete(self) -> bool:
        """
        Get: DisplayFormulaAutoComplete(self: ApplicationClass) -> bool
        Set: DisplayFormulaAutoComplete(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayFormulaBar(self) -> bool:
        """
        Get: DisplayFormulaBar(self: ApplicationClass) -> bool
        Set: DisplayFormulaBar(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayFullScreen(self) -> bool:
        """
        Get: DisplayFullScreen(self: ApplicationClass) -> bool
        Set: DisplayFullScreen(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayFunctionToolTips(self) -> bool:
        """
        Get: DisplayFunctionToolTips(self: ApplicationClass) -> bool
        Set: DisplayFunctionToolTips(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayInfoWindow(self) -> bool:
        """
        Get: DisplayInfoWindow(self: ApplicationClass) -> bool
        Set: DisplayInfoWindow(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayInsertOptions(self) -> bool:
        """
        Get: DisplayInsertOptions(self: ApplicationClass) -> bool
        Set: DisplayInsertOptions(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayNoteIndicator(self) -> bool:
        """
        Get: DisplayNoteIndicator(self: ApplicationClass) -> bool
        Set: DisplayNoteIndicator(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayPasteOptions(self) -> bool:
        """
        Get: DisplayPasteOptions(self: ApplicationClass) -> bool
        Set: DisplayPasteOptions(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayRecentFiles(self) -> bool:
        """
        Get: DisplayRecentFiles(self: ApplicationClass) -> bool
        Set: DisplayRecentFiles(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayScrollBars(self) -> bool:
        """
        Get: DisplayScrollBars(self: ApplicationClass) -> bool
        Set: DisplayScrollBars(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayStatusBar(self) -> bool:
        """
        Get: DisplayStatusBar(self: ApplicationClass) -> bool
        Set: DisplayStatusBar(self: ApplicationClass) = value
        """
        ...

    @property
    def Dummy101(self) -> object:
        """ Get: Dummy101(self: ApplicationClass) -> object """
        ...

    @property
    def Dummy22(self) -> bool:
        """
        Get: Dummy22(self: ApplicationClass) -> bool
        Set: Dummy22(self: ApplicationClass) = value
        """
        ...

    @property
    def Dummy23(self) -> bool:
        """
        Get: Dummy23(self: ApplicationClass) -> bool
        Set: Dummy23(self: ApplicationClass) = value
        """
        ...

    @property
    def EditDirectlyInCell(self) -> bool:
        """
        Get: EditDirectlyInCell(self: ApplicationClass) -> bool
        Set: EditDirectlyInCell(self: ApplicationClass) = value
        """
        ...

    @property
    def EnableAnimations(self) -> bool:
        """
        Get: EnableAnimations(self: ApplicationClass) -> bool
        Set: EnableAnimations(self: ApplicationClass) = value
        """
        ...

    @property
    def EnableAutoComplete(self) -> bool:
        """
        Get: EnableAutoComplete(self: ApplicationClass) -> bool
        Set: EnableAutoComplete(self: ApplicationClass) = value
        """
        ...

    @property
    def EnableCancelKey(self) -> XlEnableCancelKey:
        """
        Get: EnableCancelKey(self: ApplicationClass) -> XlEnableCancelKey
        Set: EnableCancelKey(self: ApplicationClass) = value
        """
        ...

    @property
    def EnableCheckFileExtensions(self) -> bool:
        """
        Get: EnableCheckFileExtensions(self: ApplicationClass) -> bool
        Set: EnableCheckFileExtensions(self: ApplicationClass) = value
        """
        ...

    @property
    def EnableEvents(self) -> bool:
        """
        Get: EnableEvents(self: ApplicationClass) -> bool
        Set: EnableEvents(self: ApplicationClass) = value
        """
        ...

    @property
    def EnableLargeOperationAlert(self) -> bool:
        """
        Get: EnableLargeOperationAlert(self: ApplicationClass) -> bool
        Set: EnableLargeOperationAlert(self: ApplicationClass) = value
        """
        ...

    @property
    def EnableLivePreview(self) -> bool:
        """
        Get: EnableLivePreview(self: ApplicationClass) -> bool
        Set: EnableLivePreview(self: ApplicationClass) = value
        """
        ...

    @property
    def EnableMacroAnimations(self) -> bool:
        """
        Get: EnableMacroAnimations(self: ApplicationClass) -> bool
        Set: EnableMacroAnimations(self: ApplicationClass) = value
        """
        ...

    @property
    def EnableSound(self) -> bool:
        """
        Get: EnableSound(self: ApplicationClass) -> bool
        Set: EnableSound(self: ApplicationClass) = value
        """
        ...

    @property
    def EnableTipWizard(self) -> bool:
        """
        Get: EnableTipWizard(self: ApplicationClass) -> bool
        Set: EnableTipWizard(self: ApplicationClass) = value
        """
        ...

    @property
    def ErrorCheckingOptions(self) -> ErrorCheckingOptions:
        """ Get: ErrorCheckingOptions(self: ApplicationClass) -> ErrorCheckingOptions """
        ...

    @property
    def Excel4IntlMacroSheets(self) -> Sheets:
        """ Get: Excel4IntlMacroSheets(self: ApplicationClass) -> Sheets """
        ...

    @property
    def Excel4MacroSheets(self) -> Sheets:
        """ Get: Excel4MacroSheets(self: ApplicationClass) -> Sheets """
        ...

    @property
    def ExtendList(self) -> bool:
        """
        Get: ExtendList(self: ApplicationClass) -> bool
        Set: ExtendList(self: ApplicationClass) = value
        """
        ...

    @property
    def FeatureInstall(self): # -> MsoFeatureInstall
        """
        Get: FeatureInstall(self: ApplicationClass) -> MsoFeatureInstall
        Set: FeatureInstall(self: ApplicationClass) = value
        """
        ...

    @property
    def FileExportConverters(self) -> FileExportConverters:
        """ Get: FileExportConverters(self: ApplicationClass) -> FileExportConverters """
        ...

    @property
    def FileFind(self): # -> IFind
        """ Get: FileFind(self: ApplicationClass) -> IFind """
        ...

    @property
    def FileSearch(self): # -> FileSearch
        """ Get: FileSearch(self: ApplicationClass) -> FileSearch """
        ...

    @property
    def FileValidation(self): # -> MsoFileValidationMode
        """
        Get: FileValidation(self: ApplicationClass) -> MsoFileValidationMode
        Set: FileValidation(self: ApplicationClass) = value
        """
        ...

    @property
    def FileValidationPivot(self) -> XlFileValidationPivotMode:
        """
        Get: FileValidationPivot(self: ApplicationClass) -> XlFileValidationPivotMode
        Set: FileValidationPivot(self: ApplicationClass) = value
        """
        ...

    @property
    def FindFormat(self) -> CellFormat:
        """
        Get: FindFormat(self: ApplicationClass) -> CellFormat
        Set: FindFormat(self: ApplicationClass) = value
        """
        ...

    @property
    def FixedDecimal(self) -> bool:
        """
        Get: FixedDecimal(self: ApplicationClass) -> bool
        Set: FixedDecimal(self: ApplicationClass) = value
        """
        ...

    @property
    def FixedDecimalPlaces(self) -> int:
        """
        Get: FixedDecimalPlaces(self: ApplicationClass) -> int
        Set: FixedDecimalPlaces(self: ApplicationClass) = value
        """
        ...

    @property
    def FlashFill(self) -> bool:
        """
        Get: FlashFill(self: ApplicationClass) -> bool
        Set: FlashFill(self: ApplicationClass) = value
        """
        ...

    @property
    def FlashFillMode(self) -> bool:
        """
        Get: FlashFillMode(self: ApplicationClass) -> bool
        Set: FlashFillMode(self: ApplicationClass) = value
        """
        ...

    @property
    def FormulaBarHeight(self) -> int:
        """
        Get: FormulaBarHeight(self: ApplicationClass) -> int
        Set: FormulaBarHeight(self: ApplicationClass) = value
        """
        ...

    @property
    def GenerateGetPivotData(self) -> bool:
        """
        Get: GenerateGetPivotData(self: ApplicationClass) -> bool
        Set: GenerateGetPivotData(self: ApplicationClass) = value
        """
        ...

    @property
    def GenerateTableRefs(self) -> XlGenerateTableRefs:
        """
        Get: GenerateTableRefs(self: ApplicationClass) -> XlGenerateTableRefs
        Set: GenerateTableRefs(self: ApplicationClass) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ApplicationClass) -> float
        Set: Height(self: ApplicationClass) = value
        """
        ...

    @property
    def HighQualityModeForGraphics(self) -> bool:
        """
        Get: HighQualityModeForGraphics(self: ApplicationClass) -> bool
        Set: HighQualityModeForGraphics(self: ApplicationClass) = value
        """
        ...

    @property
    def Hinstance(self) -> int:
        """ Get: Hinstance(self: ApplicationClass) -> int """
        ...

    @property
    def HinstancePtr(self) -> object:
        """ Get: HinstancePtr(self: ApplicationClass) -> object """
        ...

    @property
    def Hwnd(self) -> int:
        """ Get: Hwnd(self: ApplicationClass) -> int """
        ...

    @property
    def IgnoreRemoteRequests(self) -> bool:
        """
        Get: IgnoreRemoteRequests(self: ApplicationClass) -> bool
        Set: IgnoreRemoteRequests(self: ApplicationClass) = value
        """
        ...

    @property
    def Interactive(self) -> bool:
        """
        Get: Interactive(self: ApplicationClass) -> bool
        Set: Interactive(self: ApplicationClass) = value
        """
        ...

    @property
    def IsSandboxed(self) -> bool:
        """ Get: IsSandboxed(self: ApplicationClass) -> bool """
        ...

    @property
    def Iteration(self) -> bool:
        """
        Get: Iteration(self: ApplicationClass) -> bool
        Set: Iteration(self: ApplicationClass) = value
        """
        ...

    @property
    def LanguageSettings(self): # -> LanguageSettings
        """ Get: LanguageSettings(self: ApplicationClass) -> LanguageSettings """
        ...

    @property
    def LargeButtons(self) -> bool:
        """
        Get: LargeButtons(self: ApplicationClass) -> bool
        Set: LargeButtons(self: ApplicationClass) = value
        """
        ...

    @property
    def LargeOperationCellThousandCount(self) -> int:
        """
        Get: LargeOperationCellThousandCount(self: ApplicationClass) -> int
        Set: LargeOperationCellThousandCount(self: ApplicationClass) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ApplicationClass) -> float
        Set: Left(self: ApplicationClass) = value
        """
        ...

    @property
    def LibraryPath(self) -> str:
        """ Get: LibraryPath(self: ApplicationClass) -> str """
        ...

    @property
    def MailSession(self) -> object:
        """ Get: MailSession(self: ApplicationClass) -> object """
        ...

    @property
    def MailSystem(self) -> XlMailSystem:
        """ Get: MailSystem(self: ApplicationClass) -> XlMailSystem """
        ...

    @property
    def MapPaperSize(self) -> bool:
        """
        Get: MapPaperSize(self: ApplicationClass) -> bool
        Set: MapPaperSize(self: ApplicationClass) = value
        """
        ...

    @property
    def MathCoprocessorAvailable(self) -> bool:
        """ Get: MathCoprocessorAvailable(self: ApplicationClass) -> bool """
        ...

    @property
    def MaxChange(self) -> float:
        """
        Get: MaxChange(self: ApplicationClass) -> float
        Set: MaxChange(self: ApplicationClass) = value
        """
        ...

    @property
    def MaxIterations(self) -> int:
        """
        Get: MaxIterations(self: ApplicationClass) -> int
        Set: MaxIterations(self: ApplicationClass) = value
        """
        ...

    @property
    def MeasurementUnit(self) -> int:
        """
        Get: MeasurementUnit(self: ApplicationClass) -> int
        Set: MeasurementUnit(self: ApplicationClass) = value
        """
        ...

    @property
    def MemoryFree(self) -> int:
        """ Get: MemoryFree(self: ApplicationClass) -> int """
        ...

    @property
    def MemoryTotal(self) -> int:
        """ Get: MemoryTotal(self: ApplicationClass) -> int """
        ...

    @property
    def MemoryUsed(self) -> int:
        """ Get: MemoryUsed(self: ApplicationClass) -> int """
        ...

    @property
    def MenuBars(self) -> MenuBars:
        """ Get: MenuBars(self: ApplicationClass) -> MenuBars """
        ...

    @property
    def MergeInstances(self) -> bool:
        """
        Get: MergeInstances(self: ApplicationClass) -> bool
        Set: MergeInstances(self: ApplicationClass) = value
        """
        ...

    @property
    def Modules(self) -> Modules:
        """ Get: Modules(self: ApplicationClass) -> Modules """
        ...

    @property
    def MouseAvailable(self) -> bool:
        """ Get: MouseAvailable(self: ApplicationClass) -> bool """
        ...

    @property
    def MoveAfterReturn(self) -> bool:
        """
        Get: MoveAfterReturn(self: ApplicationClass) -> bool
        Set: MoveAfterReturn(self: ApplicationClass) = value
        """
        ...

    @property
    def MoveAfterReturnDirection(self) -> XlDirection:
        """
        Get: MoveAfterReturnDirection(self: ApplicationClass) -> XlDirection
        Set: MoveAfterReturnDirection(self: ApplicationClass) = value
        """
        ...

    @property
    def MultiThreadedCalculation(self) -> MultiThreadedCalculation:
        """ Get: MultiThreadedCalculation(self: ApplicationClass) -> MultiThreadedCalculation """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ApplicationClass) -> str """
        ...

    @property
    def Names(self) -> Names:
        """ Get: Names(self: ApplicationClass) -> Names """
        ...

    @property
    def NetworkTemplatesPath(self) -> str:
        """ Get: NetworkTemplatesPath(self: ApplicationClass) -> str """
        ...

    @property
    def NewWorkbook(self): # -> NewFile
        """ Get: NewWorkbook(self: ApplicationClass) -> NewFile """
        ...

    @property
    def ODBCErrors(self) -> ODBCErrors:
        """ Get: ODBCErrors(self: ApplicationClass) -> ODBCErrors """
        ...

    @property
    def ODBCTimeout(self) -> int:
        """
        Get: ODBCTimeout(self: ApplicationClass) -> int
        Set: ODBCTimeout(self: ApplicationClass) = value
        """
        ...

    @property
    def OLEDBErrors(self) -> OLEDBErrors:
        """ Get: OLEDBErrors(self: ApplicationClass) -> OLEDBErrors """
        ...

    @property
    def OnCalculate(self) -> str:
        """
        Get: OnCalculate(self: ApplicationClass) -> str
        Set: OnCalculate(self: ApplicationClass) = value
        """
        ...

    @property
    def OnData(self) -> str:
        """
        Get: OnData(self: ApplicationClass) -> str
        Set: OnData(self: ApplicationClass) = value
        """
        ...

    @property
    def OnDoubleClick(self) -> str:
        """
        Get: OnDoubleClick(self: ApplicationClass) -> str
        Set: OnDoubleClick(self: ApplicationClass) = value
        """
        ...

    @property
    def OnEntry(self) -> str:
        """
        Get: OnEntry(self: ApplicationClass) -> str
        Set: OnEntry(self: ApplicationClass) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: ApplicationClass) -> str
        Set: OnSheetActivate(self: ApplicationClass) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: ApplicationClass) -> str
        Set: OnSheetDeactivate(self: ApplicationClass) = value
        """
        ...

    @property
    def OnWindow(self) -> str:
        """
        Get: OnWindow(self: ApplicationClass) -> str
        Set: OnWindow(self: ApplicationClass) = value
        """
        ...

    @property
    def OperatingSystem(self) -> str:
        """ Get: OperatingSystem(self: ApplicationClass) -> str """
        ...

    @property
    def OrganizationName(self) -> str:
        """ Get: OrganizationName(self: ApplicationClass) -> str """
        ...

    @property
    def Parent(self) -> Application:
        """ Get: Parent(self: ApplicationClass) -> Application """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: ApplicationClass) -> str """
        ...

    @property
    def PathSeparator(self) -> str:
        """ Get: PathSeparator(self: ApplicationClass) -> str """
        ...

    @property
    def PivotTableSelection(self) -> bool:
        """
        Get: PivotTableSelection(self: ApplicationClass) -> bool
        Set: PivotTableSelection(self: ApplicationClass) = value
        """
        ...

    @property
    def PrintCommunication(self) -> bool:
        """
        Get: PrintCommunication(self: ApplicationClass) -> bool
        Set: PrintCommunication(self: ApplicationClass) = value
        """
        ...

    @property
    def ProductCode(self) -> str:
        """ Get: ProductCode(self: ApplicationClass) -> str """
        ...

    @property
    def PromptForSummaryInfo(self) -> bool:
        """
        Get: PromptForSummaryInfo(self: ApplicationClass) -> bool
        Set: PromptForSummaryInfo(self: ApplicationClass) = value
        """
        ...

    @property
    def ProtectedViewWindows(self) -> ProtectedViewWindows:
        """ Get: ProtectedViewWindows(self: ApplicationClass) -> ProtectedViewWindows """
        ...

    @property
    def QuickAnalysis(self) -> QuickAnalysis:
        """ Get: QuickAnalysis(self: ApplicationClass) -> QuickAnalysis """
        ...

    @property
    def Quitting(self) -> bool:
        """ Get: Quitting(self: ApplicationClass) -> bool """
        ...

    @property
    def Ready(self) -> bool:
        """ Get: Ready(self: ApplicationClass) -> bool """
        ...

    @property
    def RecentFiles(self) -> RecentFiles:
        """ Get: RecentFiles(self: ApplicationClass) -> RecentFiles """
        ...

    @property
    def RecordRelative(self) -> bool:
        """ Get: RecordRelative(self: ApplicationClass) -> bool """
        ...

    @property
    def ReferenceStyle(self) -> XlReferenceStyle:
        """
        Get: ReferenceStyle(self: ApplicationClass) -> XlReferenceStyle
        Set: ReferenceStyle(self: ApplicationClass) = value
        """
        ...

    @property
    def ReplaceFormat(self) -> CellFormat:
        """
        Get: ReplaceFormat(self: ApplicationClass) -> CellFormat
        Set: ReplaceFormat(self: ApplicationClass) = value
        """
        ...

    @property
    def RollZoom(self) -> bool:
        """
        Get: RollZoom(self: ApplicationClass) -> bool
        Set: RollZoom(self: ApplicationClass) = value
        """
        ...

    @property
    def Rows(self) -> Range:
        """ Get: Rows(self: ApplicationClass) -> Range """
        ...

    @property
    def RTD(self) -> RTD:
        """ Get: RTD(self: ApplicationClass) -> RTD """
        ...

    @property
    def SaveISO8601Dates(self) -> bool:
        """
        Get: SaveISO8601Dates(self: ApplicationClass) -> bool
        Set: SaveISO8601Dates(self: ApplicationClass) = value
        """
        ...

    @property
    def ScreenUpdating(self) -> bool:
        """
        Get: ScreenUpdating(self: ApplicationClass) -> bool
        Set: ScreenUpdating(self: ApplicationClass) = value
        """
        ...

    @property
    def Selection(self) -> object:
        """ Get: Selection(self: ApplicationClass) -> object """
        ...

    @property
    def Sheets(self) -> Sheets:
        """ Get: Sheets(self: ApplicationClass) -> Sheets """
        ...

    @property
    def SheetsInNewWorkbook(self) -> int:
        """
        Get: SheetsInNewWorkbook(self: ApplicationClass) -> int
        Set: SheetsInNewWorkbook(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowChartTipNames(self) -> bool:
        """
        Get: ShowChartTipNames(self: ApplicationClass) -> bool
        Set: ShowChartTipNames(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowChartTipValues(self) -> bool:
        """
        Get: ShowChartTipValues(self: ApplicationClass) -> bool
        Set: ShowChartTipValues(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowDevTools(self) -> bool:
        """
        Get: ShowDevTools(self: ApplicationClass) -> bool
        Set: ShowDevTools(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowMenuFloaties(self) -> bool:
        """
        Get: ShowMenuFloaties(self: ApplicationClass) -> bool
        Set: ShowMenuFloaties(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowQuickAnalysis(self) -> bool:
        """
        Get: ShowQuickAnalysis(self: ApplicationClass) -> bool
        Set: ShowQuickAnalysis(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowSelectionFloaties(self) -> bool:
        """
        Get: ShowSelectionFloaties(self: ApplicationClass) -> bool
        Set: ShowSelectionFloaties(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowStartupDialog(self) -> bool:
        """
        Get: ShowStartupDialog(self: ApplicationClass) -> bool
        Set: ShowStartupDialog(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowToolTips(self) -> bool:
        """
        Get: ShowToolTips(self: ApplicationClass) -> bool
        Set: ShowToolTips(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowWindowsInTaskbar(self) -> bool:
        """
        Get: ShowWindowsInTaskbar(self: ApplicationClass) -> bool
        Set: ShowWindowsInTaskbar(self: ApplicationClass) = value
        """
        ...

    @property
    def SmartArtColors(self): # -> SmartArtColors
        """ Get: SmartArtColors(self: ApplicationClass) -> SmartArtColors """
        ...

    @property
    def SmartArtLayouts(self): # -> SmartArtLayouts
        """ Get: SmartArtLayouts(self: ApplicationClass) -> SmartArtLayouts """
        ...

    @property
    def SmartArtQuickStyles(self): # -> SmartArtQuickStyles
        """ Get: SmartArtQuickStyles(self: ApplicationClass) -> SmartArtQuickStyles """
        ...

    @property
    def SmartTagRecognizers(self) -> SmartTagRecognizers:
        """ Get: SmartTagRecognizers(self: ApplicationClass) -> SmartTagRecognizers """
        ...

    @property
    def Speech(self) -> Speech:
        """ Get: Speech(self: ApplicationClass) -> Speech """
        ...

    @property
    def SpellingOptions(self) -> SpellingOptions:
        """ Get: SpellingOptions(self: ApplicationClass) -> SpellingOptions """
        ...

    @property
    def StandardFont(self) -> str:
        """
        Get: StandardFont(self: ApplicationClass) -> str
        Set: StandardFont(self: ApplicationClass) = value
        """
        ...

    @property
    def StandardFontSize(self) -> float:
        """
        Get: StandardFontSize(self: ApplicationClass) -> float
        Set: StandardFontSize(self: ApplicationClass) = value
        """
        ...

    @property
    def StartupPath(self) -> str:
        """ Get: StartupPath(self: ApplicationClass) -> str """
        ...

    @property
    def StatusBar(self) -> object:
        """
        Get: StatusBar(self: ApplicationClass) -> object
        Set: StatusBar(self: ApplicationClass) = value
        """
        ...

    @property
    def TemplatesPath(self) -> str:
        """ Get: TemplatesPath(self: ApplicationClass) -> str """
        ...

    @property
    def ThisCell(self) -> Range:
        """ Get: ThisCell(self: ApplicationClass) -> Range """
        ...

    @property
    def ThisWorkbook(self) -> Workbook:
        """ Get: ThisWorkbook(self: ApplicationClass) -> Workbook """
        ...

    @property
    def ThousandsSeparator(self) -> str:
        """
        Get: ThousandsSeparator(self: ApplicationClass) -> str
        Set: ThousandsSeparator(self: ApplicationClass) = value
        """
        ...

    @property
    def Toolbars(self) -> Toolbars:
        """ Get: Toolbars(self: ApplicationClass) -> Toolbars """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ApplicationClass) -> float
        Set: Top(self: ApplicationClass) = value
        """
        ...

    @property
    def TransitionMenuKey(self) -> str:
        """
        Get: TransitionMenuKey(self: ApplicationClass) -> str
        Set: TransitionMenuKey(self: ApplicationClass) = value
        """
        ...

    @property
    def TransitionMenuKeyAction(self) -> int:
        """
        Get: TransitionMenuKeyAction(self: ApplicationClass) -> int
        Set: TransitionMenuKeyAction(self: ApplicationClass) = value
        """
        ...

    @property
    def TransitionNavigKeys(self) -> bool:
        """
        Get: TransitionNavigKeys(self: ApplicationClass) -> bool
        Set: TransitionNavigKeys(self: ApplicationClass) = value
        """
        ...

    @property
    def UILanguage(self) -> int:
        """
        Get: UILanguage(self: ApplicationClass) -> int
        Set: UILanguage(self: ApplicationClass) = value
        """
        ...

    @property
    def UsableHeight(self) -> float:
        """ Get: UsableHeight(self: ApplicationClass) -> float """
        ...

    @property
    def UsableWidth(self) -> float:
        """ Get: UsableWidth(self: ApplicationClass) -> float """
        ...

    @property
    def UseClusterConnector(self) -> bool:
        """
        Get: UseClusterConnector(self: ApplicationClass) -> bool
        Set: UseClusterConnector(self: ApplicationClass) = value
        """
        ...

    @property
    def UsedObjects(self) -> UsedObjects:
        """ Get: UsedObjects(self: ApplicationClass) -> UsedObjects """
        ...

    @property
    def UserControl(self) -> bool:
        """
        Get: UserControl(self: ApplicationClass) -> bool
        Set: UserControl(self: ApplicationClass) = value
        """
        ...

    @property
    def UserLibraryPath(self) -> str:
        """ Get: UserLibraryPath(self: ApplicationClass) -> str """
        ...

    @property
    def UserName(self) -> str:
        """
        Get: UserName(self: ApplicationClass) -> str
        Set: UserName(self: ApplicationClass) = value
        """
        ...

    @property
    def UseSystemSeparators(self) -> bool:
        """
        Get: UseSystemSeparators(self: ApplicationClass) -> bool
        Set: UseSystemSeparators(self: ApplicationClass) = value
        """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: ApplicationClass) -> str """
        ...

    @property
    def VBE(self) -> VBE:
        """ Get: VBE(self: ApplicationClass) -> VBE """
        ...

    @property
    def Version(self) -> str:
        """ Get: Version(self: ApplicationClass) -> str """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ApplicationClass) -> bool
        Set: Visible(self: ApplicationClass) = value
        """
        ...

    @property
    def WarnOnFunctionNameConflict(self) -> bool:
        """
        Get: WarnOnFunctionNameConflict(self: ApplicationClass) -> bool
        Set: WarnOnFunctionNameConflict(self: ApplicationClass) = value
        """
        ...

    @property
    def Watches(self) -> Watches:
        """ Get: Watches(self: ApplicationClass) -> Watches """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ApplicationClass) -> float
        Set: Width(self: ApplicationClass) = value
        """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: ApplicationClass) -> Windows """
        ...

    @property
    def WindowsForPens(self) -> bool:
        """ Get: WindowsForPens(self: ApplicationClass) -> bool """
        ...

    @property
    def WindowState(self) -> XlWindowState:
        """
        Get: WindowState(self: ApplicationClass) -> XlWindowState
        Set: WindowState(self: ApplicationClass) = value
        """
        ...

    @property
    def Workbooks(self) -> Workbooks:
        """ Get: Workbooks(self: ApplicationClass) -> Workbooks """
        ...

    @property
    def WorksheetFunction(self) -> WorksheetFunction:
        """ Get: WorksheetFunction(self: ApplicationClass) -> WorksheetFunction """
        ...

    @property
    def Worksheets(self) -> Sheets:
        """ Get: Worksheets(self: ApplicationClass) -> Sheets """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: ApplicationClass) -> str """
        ...


    def ActivateMicrosoftApp(self, Index:XlMSApplication): # -> 
        """ ActivateMicrosoftApp(self: ApplicationClass, Index: XlMSApplication) """
        ...

    def AddChartAutoFormat(self, Chart:object, Name:str, Description:object): # -> 
        """ AddChartAutoFormat(self: ApplicationClass, Chart: object, Name: str, Description: object) """
        ...

    def AddCustomList(self, ListArray:object, ByRow:object): # -> 
        """ AddCustomList(self: ApplicationClass, ListArray: object, ByRow: object) """
        ...

    def add_AfterCalculate(self): # -> 
        """ add_AfterCalculate(self: ApplicationClass, : AppEvents_AfterCalculateEventHandler) """
        ...

    def add_NewWorkbook(self): # -> 
        """ add_NewWorkbook(self: ApplicationClass, : AppEvents_NewWorkbookEventHandler) """
        ...

    def add_ProtectedViewWindowActivate(self): # -> 
        """ add_ProtectedViewWindowActivate(self: ApplicationClass, : AppEvents_ProtectedViewWindowActivateEventHandler) """
        ...

    def add_ProtectedViewWindowBeforeClose(self): # -> 
        """ add_ProtectedViewWindowBeforeClose(self: ApplicationClass, : AppEvents_ProtectedViewWindowBeforeCloseEventHandler) """
        ...

    def add_ProtectedViewWindowBeforeEdit(self): # -> 
        """ add_ProtectedViewWindowBeforeEdit(self: ApplicationClass, : AppEvents_ProtectedViewWindowBeforeEditEventHandler) """
        ...

    def add_ProtectedViewWindowDeactivate(self): # -> 
        """ add_ProtectedViewWindowDeactivate(self: ApplicationClass, : AppEvents_ProtectedViewWindowDeactivateEventHandler) """
        ...

    def add_ProtectedViewWindowOpen(self): # -> 
        """ add_ProtectedViewWindowOpen(self: ApplicationClass, : AppEvents_ProtectedViewWindowOpenEventHandler) """
        ...

    def add_ProtectedViewWindowResize(self): # -> 
        """ add_ProtectedViewWindowResize(self: ApplicationClass, : AppEvents_ProtectedViewWindowResizeEventHandler) """
        ...

    def add_SheetActivate(self): # -> 
        """ add_SheetActivate(self: ApplicationClass, : AppEvents_SheetActivateEventHandler) """
        ...

    def add_SheetBeforeDelete(self): # -> 
        """ add_SheetBeforeDelete(self: ApplicationClass, : AppEvents_SheetBeforeDeleteEventHandler) """
        ...

    def add_SheetBeforeDoubleClick(self): # -> 
        """ add_SheetBeforeDoubleClick(self: ApplicationClass, : AppEvents_SheetBeforeDoubleClickEventHandler) """
        ...

    def add_SheetBeforeRightClick(self): # -> 
        """ add_SheetBeforeRightClick(self: ApplicationClass, : AppEvents_SheetBeforeRightClickEventHandler) """
        ...

    def add_SheetCalculate(self): # -> 
        """ add_SheetCalculate(self: ApplicationClass, : AppEvents_SheetCalculateEventHandler) """
        ...

    def add_SheetChange(self): # -> 
        """ add_SheetChange(self: ApplicationClass, : AppEvents_SheetChangeEventHandler) """
        ...

    def add_SheetDeactivate(self): # -> 
        """ add_SheetDeactivate(self: ApplicationClass, : AppEvents_SheetDeactivateEventHandler) """
        ...

    def add_SheetFollowHyperlink(self): # -> 
        """ add_SheetFollowHyperlink(self: ApplicationClass, : AppEvents_SheetFollowHyperlinkEventHandler) """
        ...

    def add_SheetLensGalleryRenderComplete(self): # -> 
        """ add_SheetLensGalleryRenderComplete(self: ApplicationClass, : AppEvents_SheetLensGalleryRenderCompleteEventHandler) """
        ...

    def add_SheetPivotTableAfterValueChange(self): # -> 
        """ add_SheetPivotTableAfterValueChange(self: ApplicationClass, : AppEvents_SheetPivotTableAfterValueChangeEventHandler) """
        ...

    def add_SheetPivotTableBeforeAllocateChanges(self): # -> 
        """ add_SheetPivotTableBeforeAllocateChanges(self: ApplicationClass, : AppEvents_SheetPivotTableBeforeAllocateChangesEventHandler) """
        ...

    def add_SheetPivotTableBeforeCommitChanges(self): # -> 
        """ add_SheetPivotTableBeforeCommitChanges(self: ApplicationClass, : AppEvents_SheetPivotTableBeforeCommitChangesEventHandler) """
        ...

    def add_SheetPivotTableBeforeDiscardChanges(self): # -> 
        """ add_SheetPivotTableBeforeDiscardChanges(self: ApplicationClass, : AppEvents_SheetPivotTableBeforeDiscardChangesEventHandler) """
        ...

    def add_SheetPivotTableUpdate(self): # -> 
        """ add_SheetPivotTableUpdate(self: ApplicationClass, : AppEvents_SheetPivotTableUpdateEventHandler) """
        ...

    def add_SheetSelectionChange(self): # -> 
        """ add_SheetSelectionChange(self: ApplicationClass, : AppEvents_SheetSelectionChangeEventHandler) """
        ...

    def add_SheetTableUpdate(self): # -> 
        """ add_SheetTableUpdate(self: ApplicationClass, : AppEvents_SheetTableUpdateEventHandler) """
        ...

    def add_WindowActivate(self): # -> 
        """ add_WindowActivate(self: ApplicationClass, : AppEvents_WindowActivateEventHandler) """
        ...

    def add_WindowDeactivate(self): # -> 
        """ add_WindowDeactivate(self: ApplicationClass, : AppEvents_WindowDeactivateEventHandler) """
        ...

    def add_WindowResize(self): # -> 
        """ add_WindowResize(self: ApplicationClass, : AppEvents_WindowResizeEventHandler) """
        ...

    def add_WorkbookActivate(self): # -> 
        """ add_WorkbookActivate(self: ApplicationClass, : AppEvents_WorkbookActivateEventHandler) """
        ...

    def add_WorkbookAddinInstall(self): # -> 
        """ add_WorkbookAddinInstall(self: ApplicationClass, : AppEvents_WorkbookAddinInstallEventHandler) """
        ...

    def add_WorkbookAddinUninstall(self): # -> 
        """ add_WorkbookAddinUninstall(self: ApplicationClass, : AppEvents_WorkbookAddinUninstallEventHandler) """
        ...

    def add_WorkbookAfterSave(self): # -> 
        """ add_WorkbookAfterSave(self: ApplicationClass, : AppEvents_WorkbookAfterSaveEventHandler) """
        ...

    def add_WorkbookAfterXmlExport(self): # -> 
        """ add_WorkbookAfterXmlExport(self: ApplicationClass, : AppEvents_WorkbookAfterXmlExportEventHandler) """
        ...

    def add_WorkbookAfterXmlImport(self): # -> 
        """ add_WorkbookAfterXmlImport(self: ApplicationClass, : AppEvents_WorkbookAfterXmlImportEventHandler) """
        ...

    def add_WorkbookBeforeClose(self): # -> 
        """ add_WorkbookBeforeClose(self: ApplicationClass, : AppEvents_WorkbookBeforeCloseEventHandler) """
        ...

    def add_WorkbookBeforePrint(self): # -> 
        """ add_WorkbookBeforePrint(self: ApplicationClass, : AppEvents_WorkbookBeforePrintEventHandler) """
        ...

    def add_WorkbookBeforeSave(self): # -> 
        """ add_WorkbookBeforeSave(self: ApplicationClass, : AppEvents_WorkbookBeforeSaveEventHandler) """
        ...

    def add_WorkbookBeforeXmlExport(self): # -> 
        """ add_WorkbookBeforeXmlExport(self: ApplicationClass, : AppEvents_WorkbookBeforeXmlExportEventHandler) """
        ...

    def add_WorkbookBeforeXmlImport(self): # -> 
        """ add_WorkbookBeforeXmlImport(self: ApplicationClass, : AppEvents_WorkbookBeforeXmlImportEventHandler) """
        ...

    def add_WorkbookDeactivate(self): # -> 
        """ add_WorkbookDeactivate(self: ApplicationClass, : AppEvents_WorkbookDeactivateEventHandler) """
        ...

    def add_WorkbookModelChange(self): # -> 
        """ add_WorkbookModelChange(self: ApplicationClass, : AppEvents_WorkbookModelChangeEventHandler) """
        ...

    def add_WorkbookNewChart(self): # -> 
        """ add_WorkbookNewChart(self: ApplicationClass, : AppEvents_WorkbookNewChartEventHandler) """
        ...

    def add_WorkbookNewSheet(self): # -> 
        """ add_WorkbookNewSheet(self: ApplicationClass, : AppEvents_WorkbookNewSheetEventHandler) """
        ...

    def add_WorkbookOpen(self): # -> 
        """ add_WorkbookOpen(self: ApplicationClass, : AppEvents_WorkbookOpenEventHandler) """
        ...

    def add_WorkbookPivotTableCloseConnection(self): # -> 
        """ add_WorkbookPivotTableCloseConnection(self: ApplicationClass, : AppEvents_WorkbookPivotTableCloseConnectionEventHandler) """
        ...

    def add_WorkbookPivotTableOpenConnection(self): # -> 
        """ add_WorkbookPivotTableOpenConnection(self: ApplicationClass, : AppEvents_WorkbookPivotTableOpenConnectionEventHandler) """
        ...

    def add_WorkbookRowsetComplete(self): # -> 
        """ add_WorkbookRowsetComplete(self: ApplicationClass, : AppEvents_WorkbookRowsetCompleteEventHandler) """
        ...

    def add_WorkbookSync(self): # -> 
        """ add_WorkbookSync(self: ApplicationClass, : AppEvents_WorkbookSyncEventHandler) """
        ...

    def Calculate(self): # -> 
        """ Calculate(self: ApplicationClass) """
        ...

    def CalculateFull(self): # -> 
        """ CalculateFull(self: ApplicationClass) """
        ...

    def CalculateFullRebuild(self): # -> 
        """ CalculateFullRebuild(self: ApplicationClass) """
        ...

    def CalculateUntilAsyncQueriesDone(self): # -> 
        """ CalculateUntilAsyncQueriesDone(self: ApplicationClass) """
        ...

    def CentimetersToPoints(self, Centimeters:float) -> float:
        """ CentimetersToPoints(self: ApplicationClass, Centimeters: float) -> float """
        ...

    def CheckAbort(self, KeepAbort:object): # -> 
        """ CheckAbort(self: ApplicationClass, KeepAbort: object) """
        ...

    def CheckSpelling(self, Word:str, CustomDictionary:object, IgnoreUppercase:object) -> bool:
        """ CheckSpelling(self: ApplicationClass, Word: str, CustomDictionary: object, IgnoreUppercase: object) -> bool """
        ...

    def ConvertFormula(self, Formula:object, FromReferenceStyle:XlReferenceStyle, ToReferenceStyle:object, ToAbsolute:object, RelativeTo:object) -> object:
        """ ConvertFormula(self: ApplicationClass, Formula: object, FromReferenceStyle: XlReferenceStyle, ToReferenceStyle: object, ToAbsolute: object, RelativeTo: object) -> object """
        ...

    def DDEExecute(self, Channel:int, String:str): # -> 
        """ DDEExecute(self: ApplicationClass, Channel: int, String: str) """
        ...

    def DDEInitiate(self, App:str, Topic:str) -> int:
        """ DDEInitiate(self: ApplicationClass, App: str, Topic: str) -> int """
        ...

    def DDEPoke(self, Channel:int, Item:object, Data:object): # -> 
        """ DDEPoke(self: ApplicationClass, Channel: int, Item: object, Data: object) """
        ...

    def DDERequest(self, Channel:int, Item:str) -> object:
        """ DDERequest(self: ApplicationClass, Channel: int, Item: str) -> object """
        ...

    def DDETerminate(self, Channel:int): # -> 
        """ DDETerminate(self: ApplicationClass, Channel: int) """
        ...

    def DeleteChartAutoFormat(self, Name:str): # -> 
        """ DeleteChartAutoFormat(self: ApplicationClass, Name: str) """
        ...

    def DeleteCustomList(self, ListNum:int): # -> 
        """ DeleteCustomList(self: ApplicationClass, ListNum: int) """
        ...

    def DisplayXMLSourcePane(self, XmlMap:object): # -> 
        """ DisplayXMLSourcePane(self: ApplicationClass, XmlMap: object) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: ApplicationClass) """
        ...

    def Dummy1(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ Dummy1(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def Dummy10(self, arg:object) -> bool:
        """ Dummy10(self: ApplicationClass, arg: object) -> bool """
        ...

    def Dummy11(self): # -> 
        """ Dummy11(self: ApplicationClass) """
        ...

    def Dummy12(self, p1:PivotTable, p2:PivotTable): # -> 
        """ Dummy12(self: ApplicationClass, p1: PivotTable, p2: PivotTable) """
        ...

    def Dummy13(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Dummy13(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Dummy14(self): # -> 
        """ Dummy14(self: ApplicationClass) """
        ...

    def Dummy2(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object) -> object:
        """ Dummy2(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> object """
        ...

    def Dummy20(self, grfCompareFunctions:int) -> object:
        """ Dummy20(self: ApplicationClass, grfCompareFunctions: int) -> object """
        ...

    def Dummy3(self) -> object:
        """ Dummy3(self: ApplicationClass) -> object """
        ...

    def Dummy4(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object) -> object:
        """ Dummy4(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object) -> object """
        ...

    def Dummy5(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object) -> object:
        """ Dummy5(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object) -> object """
        ...

    def Dummy6(self) -> object:
        """ Dummy6(self: ApplicationClass) -> object """
        ...

    def Dummy7(self) -> object:
        """ Dummy7(self: ApplicationClass) -> object """
        ...

    def Dummy8(self, Arg1:object) -> object:
        """ Dummy8(self: ApplicationClass, Arg1: object) -> object """
        ...

    def Dummy9(self) -> object:
        """ Dummy9(self: ApplicationClass) -> object """
        ...

    def Evaluate(self, Name:object) -> object:
        """ Evaluate(self: ApplicationClass, Name: object) -> object """
        ...

    def ExecuteExcel4Macro(self, String:str) -> object:
        """ ExecuteExcel4Macro(self: ApplicationClass, String: str) -> object """
        ...

    def FindFile(self) -> bool:
        """ FindFile(self: ApplicationClass) -> bool """
        ...

    def GetCustomListContents(self, ListNum:int) -> object:
        """ GetCustomListContents(self: ApplicationClass, ListNum: int) -> object """
        ...

    def GetCustomListNum(self, ListArray:object) -> int:
        """ GetCustomListNum(self: ApplicationClass, ListArray: object) -> int """
        ...

    def GetOpenFilename(self, FileFilter:object, FilterIndex:object, Title:object, ButtonText:object, MultiSelect:object) -> object:
        """ GetOpenFilename(self: ApplicationClass, FileFilter: object, FilterIndex: object, Title: object, ButtonText: object, MultiSelect: object) -> object """
        ...

    def GetPhonetic(self, Text:object) -> str:
        """ GetPhonetic(self: ApplicationClass, Text: object) -> str """
        ...

    def GetSaveAsFilename(self, InitialFilename:object, FileFilter:object, FilterIndex:object, Title:object, ButtonText:object) -> object:
        """ GetSaveAsFilename(self: ApplicationClass, InitialFilename: object, FileFilter: object, FilterIndex: object, Title: object, ButtonText: object) -> object """
        ...

    def Goto(self, Reference:object, Scroll:object): # -> 
        """ Goto(self: ApplicationClass, Reference: object, Scroll: object) """
        ...

    def Help(self, HelpFile:object, HelpContextID:object): # -> 
        """ Help(self: ApplicationClass, HelpFile: object, HelpContextID: object) """
        ...

    def InchesToPoints(self, Inches:float) -> float:
        """ InchesToPoints(self: ApplicationClass, Inches: float) -> float """
        ...

    def InputBox(self, Prompt:str, Title:object, Default:object, Left:object, Top:object, HelpFile:object, HelpContextID:object, Type:object) -> object:
        """ InputBox(self: ApplicationClass, Prompt: str, Title: object, Default: object, Left: object, Top: object, HelpFile: object, HelpContextID: object, Type: object) -> object """
        ...

    def Intersect(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> Range:
        """ Intersect(self: ApplicationClass, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        ...

    def MacroOptions(self, Macro:object, Description:object, HasMenu:object, MenuText:object, HasShortcutKey:object, ShortcutKey:object, Category:object, StatusBar:object, HelpContextID:object, HelpFile:object): # -> 
        """ MacroOptions(self: ApplicationClass, Macro: object, Description: object, HasMenu: object, MenuText: object, HasShortcutKey: object, ShortcutKey: object, Category: object, StatusBar: object, HelpContextID: object, HelpFile: object) """
        ...

    def MacroOptions2(self, Macro:object, Description:object, HasMenu:object, MenuText:object, HasShortcutKey:object, ShortcutKey:object, Category:object, StatusBar:object, HelpContextID:object, HelpFile:object, ArgumentDescriptions:object): # -> 
        """ MacroOptions2(self: ApplicationClass, Macro: object, Description: object, HasMenu: object, MenuText: object, HasShortcutKey: object, ShortcutKey: object, Category: object, StatusBar: object, HelpContextID: object, HelpFile: object, ArgumentDescriptions: object) """
        ...

    def MailLogoff(self): # -> 
        """ MailLogoff(self: ApplicationClass) """
        ...

    def MailLogon(self, Name:object, Password:object, DownloadNewMail:object): # -> 
        """ MailLogon(self: ApplicationClass, Name: object, Password: object, DownloadNewMail: object) """
        ...

    def NextLetter(self) -> Workbook:
        """ NextLetter(self: ApplicationClass) -> Workbook """
        ...

    def OnKey(self, Key:str, Procedure:object): # -> 
        """ OnKey(self: ApplicationClass, Key: str, Procedure: object) """
        ...

    def OnRepeat(self, Text:str, Procedure:str): # -> 
        """ OnRepeat(self: ApplicationClass, Text: str, Procedure: str) """
        ...

    def OnTime(self, EarliestTime:object, Procedure:str, LatestTime:object, Schedule:object): # -> 
        """ OnTime(self: ApplicationClass, EarliestTime: object, Procedure: str, LatestTime: object, Schedule: object) """
        ...

    def OnUndo(self, Text:str, Procedure:str): # -> 
        """ OnUndo(self: ApplicationClass, Text: str, Procedure: str) """
        ...

    def Quit(self): # -> 
        """ Quit(self: ApplicationClass) """
        ...

    def RecordMacro(self, BasicCode:object, XlmCode:object): # -> 
        """ RecordMacro(self: ApplicationClass, BasicCode: object, XlmCode: object) """
        ...

    def RegisterXLL(self, Filename:str) -> bool:
        """ RegisterXLL(self: ApplicationClass, Filename: str) -> bool """
        ...

    def remove_AfterCalculate(self): # -> 
        """ remove_AfterCalculate(self: ApplicationClass, : AppEvents_AfterCalculateEventHandler) """
        ...

    def remove_NewWorkbook(self): # -> 
        """ remove_NewWorkbook(self: ApplicationClass, : AppEvents_NewWorkbookEventHandler) """
        ...

    def remove_ProtectedViewWindowActivate(self): # -> 
        """ remove_ProtectedViewWindowActivate(self: ApplicationClass, : AppEvents_ProtectedViewWindowActivateEventHandler) """
        ...

    def remove_ProtectedViewWindowBeforeClose(self): # -> 
        """ remove_ProtectedViewWindowBeforeClose(self: ApplicationClass, : AppEvents_ProtectedViewWindowBeforeCloseEventHandler) """
        ...

    def remove_ProtectedViewWindowBeforeEdit(self): # -> 
        """ remove_ProtectedViewWindowBeforeEdit(self: ApplicationClass, : AppEvents_ProtectedViewWindowBeforeEditEventHandler) """
        ...

    def remove_ProtectedViewWindowDeactivate(self): # -> 
        """ remove_ProtectedViewWindowDeactivate(self: ApplicationClass, : AppEvents_ProtectedViewWindowDeactivateEventHandler) """
        ...

    def remove_ProtectedViewWindowOpen(self): # -> 
        """ remove_ProtectedViewWindowOpen(self: ApplicationClass, : AppEvents_ProtectedViewWindowOpenEventHandler) """
        ...

    def remove_ProtectedViewWindowResize(self): # -> 
        """ remove_ProtectedViewWindowResize(self: ApplicationClass, : AppEvents_ProtectedViewWindowResizeEventHandler) """
        ...

    def remove_SheetActivate(self): # -> 
        """ remove_SheetActivate(self: ApplicationClass, : AppEvents_SheetActivateEventHandler) """
        ...

    def remove_SheetBeforeDelete(self): # -> 
        """ remove_SheetBeforeDelete(self: ApplicationClass, : AppEvents_SheetBeforeDeleteEventHandler) """
        ...

    def remove_SheetBeforeDoubleClick(self): # -> 
        """ remove_SheetBeforeDoubleClick(self: ApplicationClass, : AppEvents_SheetBeforeDoubleClickEventHandler) """
        ...

    def remove_SheetBeforeRightClick(self): # -> 
        """ remove_SheetBeforeRightClick(self: ApplicationClass, : AppEvents_SheetBeforeRightClickEventHandler) """
        ...

    def remove_SheetCalculate(self): # -> 
        """ remove_SheetCalculate(self: ApplicationClass, : AppEvents_SheetCalculateEventHandler) """
        ...

    def remove_SheetChange(self): # -> 
        """ remove_SheetChange(self: ApplicationClass, : AppEvents_SheetChangeEventHandler) """
        ...

    def remove_SheetDeactivate(self): # -> 
        """ remove_SheetDeactivate(self: ApplicationClass, : AppEvents_SheetDeactivateEventHandler) """
        ...

    def remove_SheetFollowHyperlink(self): # -> 
        """ remove_SheetFollowHyperlink(self: ApplicationClass, : AppEvents_SheetFollowHyperlinkEventHandler) """
        ...

    def remove_SheetLensGalleryRenderComplete(self): # -> 
        """ remove_SheetLensGalleryRenderComplete(self: ApplicationClass, : AppEvents_SheetLensGalleryRenderCompleteEventHandler) """
        ...

    def remove_SheetPivotTableAfterValueChange(self): # -> 
        """ remove_SheetPivotTableAfterValueChange(self: ApplicationClass, : AppEvents_SheetPivotTableAfterValueChangeEventHandler) """
        ...

    def remove_SheetPivotTableBeforeAllocateChanges(self): # -> 
        """ remove_SheetPivotTableBeforeAllocateChanges(self: ApplicationClass, : AppEvents_SheetPivotTableBeforeAllocateChangesEventHandler) """
        ...

    def remove_SheetPivotTableBeforeCommitChanges(self): # -> 
        """ remove_SheetPivotTableBeforeCommitChanges(self: ApplicationClass, : AppEvents_SheetPivotTableBeforeCommitChangesEventHandler) """
        ...

    def remove_SheetPivotTableBeforeDiscardChanges(self): # -> 
        """ remove_SheetPivotTableBeforeDiscardChanges(self: ApplicationClass, : AppEvents_SheetPivotTableBeforeDiscardChangesEventHandler) """
        ...

    def remove_SheetPivotTableUpdate(self): # -> 
        """ remove_SheetPivotTableUpdate(self: ApplicationClass, : AppEvents_SheetPivotTableUpdateEventHandler) """
        ...

    def remove_SheetSelectionChange(self): # -> 
        """ remove_SheetSelectionChange(self: ApplicationClass, : AppEvents_SheetSelectionChangeEventHandler) """
        ...

    def remove_SheetTableUpdate(self): # -> 
        """ remove_SheetTableUpdate(self: ApplicationClass, : AppEvents_SheetTableUpdateEventHandler) """
        ...

    def remove_WindowActivate(self): # -> 
        """ remove_WindowActivate(self: ApplicationClass, : AppEvents_WindowActivateEventHandler) """
        ...

    def remove_WindowDeactivate(self): # -> 
        """ remove_WindowDeactivate(self: ApplicationClass, : AppEvents_WindowDeactivateEventHandler) """
        ...

    def remove_WindowResize(self): # -> 
        """ remove_WindowResize(self: ApplicationClass, : AppEvents_WindowResizeEventHandler) """
        ...

    def remove_WorkbookActivate(self): # -> 
        """ remove_WorkbookActivate(self: ApplicationClass, : AppEvents_WorkbookActivateEventHandler) """
        ...

    def remove_WorkbookAddinInstall(self): # -> 
        """ remove_WorkbookAddinInstall(self: ApplicationClass, : AppEvents_WorkbookAddinInstallEventHandler) """
        ...

    def remove_WorkbookAddinUninstall(self): # -> 
        """ remove_WorkbookAddinUninstall(self: ApplicationClass, : AppEvents_WorkbookAddinUninstallEventHandler) """
        ...

    def remove_WorkbookAfterSave(self): # -> 
        """ remove_WorkbookAfterSave(self: ApplicationClass, : AppEvents_WorkbookAfterSaveEventHandler) """
        ...

    def remove_WorkbookAfterXmlExport(self): # -> 
        """ remove_WorkbookAfterXmlExport(self: ApplicationClass, : AppEvents_WorkbookAfterXmlExportEventHandler) """
        ...

    def remove_WorkbookAfterXmlImport(self): # -> 
        """ remove_WorkbookAfterXmlImport(self: ApplicationClass, : AppEvents_WorkbookAfterXmlImportEventHandler) """
        ...

    def remove_WorkbookBeforeClose(self): # -> 
        """ remove_WorkbookBeforeClose(self: ApplicationClass, : AppEvents_WorkbookBeforeCloseEventHandler) """
        ...

    def remove_WorkbookBeforePrint(self): # -> 
        """ remove_WorkbookBeforePrint(self: ApplicationClass, : AppEvents_WorkbookBeforePrintEventHandler) """
        ...

    def remove_WorkbookBeforeSave(self): # -> 
        """ remove_WorkbookBeforeSave(self: ApplicationClass, : AppEvents_WorkbookBeforeSaveEventHandler) """
        ...

    def remove_WorkbookBeforeXmlExport(self): # -> 
        """ remove_WorkbookBeforeXmlExport(self: ApplicationClass, : AppEvents_WorkbookBeforeXmlExportEventHandler) """
        ...

    def remove_WorkbookBeforeXmlImport(self): # -> 
        """ remove_WorkbookBeforeXmlImport(self: ApplicationClass, : AppEvents_WorkbookBeforeXmlImportEventHandler) """
        ...

    def remove_WorkbookDeactivate(self): # -> 
        """ remove_WorkbookDeactivate(self: ApplicationClass, : AppEvents_WorkbookDeactivateEventHandler) """
        ...

    def remove_WorkbookModelChange(self): # -> 
        """ remove_WorkbookModelChange(self: ApplicationClass, : AppEvents_WorkbookModelChangeEventHandler) """
        ...

    def remove_WorkbookNewChart(self): # -> 
        """ remove_WorkbookNewChart(self: ApplicationClass, : AppEvents_WorkbookNewChartEventHandler) """
        ...

    def remove_WorkbookNewSheet(self): # -> 
        """ remove_WorkbookNewSheet(self: ApplicationClass, : AppEvents_WorkbookNewSheetEventHandler) """
        ...

    def remove_WorkbookOpen(self): # -> 
        """ remove_WorkbookOpen(self: ApplicationClass, : AppEvents_WorkbookOpenEventHandler) """
        ...

    def remove_WorkbookPivotTableCloseConnection(self): # -> 
        """ remove_WorkbookPivotTableCloseConnection(self: ApplicationClass, : AppEvents_WorkbookPivotTableCloseConnectionEventHandler) """
        ...

    def remove_WorkbookPivotTableOpenConnection(self): # -> 
        """ remove_WorkbookPivotTableOpenConnection(self: ApplicationClass, : AppEvents_WorkbookPivotTableOpenConnectionEventHandler) """
        ...

    def remove_WorkbookRowsetComplete(self): # -> 
        """ remove_WorkbookRowsetComplete(self: ApplicationClass, : AppEvents_WorkbookRowsetCompleteEventHandler) """
        ...

    def remove_WorkbookSync(self): # -> 
        """ remove_WorkbookSync(self: ApplicationClass, : AppEvents_WorkbookSyncEventHandler) """
        ...

    def Repeat(self): # -> 
        """ Repeat(self: ApplicationClass) """
        ...

    def ResetTipWizard(self): # -> 
        """ ResetTipWizard(self: ApplicationClass) """
        ...

    def Run(self, Macro:object, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Run(self: ApplicationClass, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Save(self, Filename:object): # -> 
        """ Save(self: ApplicationClass, Filename: object) """
        ...

    def SaveWorkspace(self, Filename:object): # -> 
        """ SaveWorkspace(self: ApplicationClass, Filename: object) """
        ...

    def SendKeys(self, Keys:object, Wait:object): # -> 
        """ SendKeys(self: ApplicationClass, Keys: object, Wait: object) """
        ...

    def SetDefaultChart(self, FormatName:object, Gallery:object): # -> 
        """ SetDefaultChart(self: ApplicationClass, FormatName: object, Gallery: object) """
        ...

    def SharePointVersion(self, bstrUrl:str) -> int:
        """ SharePointVersion(self: ApplicationClass, bstrUrl: str) -> int """
        ...

    def Support(self, Object:object, ID:int, arg:object) -> object:
        """ Support(self: ApplicationClass, Object: object, ID: int, arg: object) -> object """
        ...

    def Undo(self): # -> 
        """ Undo(self: ApplicationClass) """
        ...

    def Union(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> Range:
        """ Union(self: ApplicationClass, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        ...

    def Volatile(self, Volatile:object): # -> 
        """ Volatile(self: ApplicationClass, Volatile: object) """
        ...

    def Wait(self, Time:object) -> bool:
        """ Wait(self: ApplicationClass, Time: object) -> bool """
        ...

    def _Evaluate(self, Name:object) -> object:
        """ _Evaluate(self: ApplicationClass, Name: object) -> object """
        ...

    def _FindFile(self): # -> 
        """ _FindFile(self: ApplicationClass) """
        ...

    def _Run2(self, Macro:object, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ _Run2(self: ApplicationClass, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def _Wait(self, Time:object): # -> 
        """ _Wait(self: ApplicationClass, Time: object) """
        ...

    def _WSFunction(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ _WSFunction(self: ApplicationClass, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AfterCalculate = ...
    AppEvents_Event_NewWorkbook = ...
    ProtectedViewWindowActivate = ...
    ProtectedViewWindowBeforeClose = ...
    ProtectedViewWindowBeforeEdit = ...
    ProtectedViewWindowDeactivate = ...
    ProtectedViewWindowOpen = ...
    ProtectedViewWindowResize = ...
    SheetActivate = ...
    SheetBeforeDelete = ...
    SheetBeforeDoubleClick = ...
    SheetBeforeRightClick = ...
    SheetCalculate = ...
    SheetChange = ...
    SheetDeactivate = ...
    SheetFollowHyperlink = ...
    SheetLensGalleryRenderComplete = ...
    SheetPivotTableAfterValueChange = ...
    SheetPivotTableBeforeAllocateChanges = ...
    SheetPivotTableBeforeCommitChanges = ...
    SheetPivotTableBeforeDiscardChanges = ...
    SheetPivotTableUpdate = ...
    SheetSelectionChange = ...
    SheetTableUpdate = ...
    WindowActivate = ...
    WindowDeactivate = ...
    WindowResize = ...
    WorkbookActivate = ...
    WorkbookAddinInstall = ...
    WorkbookAddinUninstall = ...
    WorkbookAfterSave = ...
    WorkbookAfterXmlExport = ...
    WorkbookAfterXmlImport = ...
    WorkbookBeforeClose = ...
    WorkbookBeforePrint = ...
    WorkbookBeforeSave = ...
    WorkbookBeforeXmlExport = ...
    WorkbookBeforeXmlImport = ...
    WorkbookDeactivate = ...
    WorkbookModelChange = ...
    WorkbookNewChart = ...
    WorkbookNewSheet = ...
    WorkbookOpen = ...
    WorkbookPivotTableCloseConnection = ...
    WorkbookPivotTableOpenConnection = ...
    WorkbookRowsetComplete = ...
    WorkbookSync = ...


class Arc: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: Arc) -> bool
        Set: AddIndent(self: Arc) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Arc) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Arc) -> object
        Set: AutoScaleFont(self: Arc) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Arc) -> bool
        Set: AutoSize(self: Arc) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Arc) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: Arc) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Arc) -> str
        Set: Caption(self: Arc) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Arc) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Arc) -> bool
        Set: Enabled(self: Arc) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Arc) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Arc) -> str
        Set: Formula(self: Arc) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Arc) -> float
        Set: Height(self: Arc) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: Arc) -> object
        Set: HorizontalAlignment(self: Arc) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Arc) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Arc) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Arc) -> float
        Set: Left(self: Arc) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Arc) -> bool
        Set: Locked(self: Arc) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Arc) -> bool
        Set: LockedText(self: Arc) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Arc) -> str
        Set: Name(self: Arc) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Arc) -> str
        Set: OnAction(self: Arc) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: Arc) -> object
        Set: Orientation(self: Arc) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Arc) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Arc) -> object
        Set: Placement(self: Arc) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Arc) -> bool
        Set: PrintObject(self: Arc) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Arc) -> int
        Set: ReadingOrder(self: Arc) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Arc) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Arc) -> str
        Set: Text(self: Arc) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Arc) -> float
        Set: Top(self: Arc) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: Arc) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: Arc) -> object
        Set: VerticalAlignment(self: Arc) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Arc) -> bool
        Set: Visible(self: Arc) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Arc) -> float
        Set: Width(self: Arc) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Arc) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: Arc) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Arc, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Arc) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Arc, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Arc) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Arc) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Arc) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Arc, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Arc) -> object """
        ...

    def _Dummy43(self): # -> 
        """ _Dummy43(self: Arc) """
        ...


class Arcs(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: Arcs) -> bool
        Set: AddIndent(self: Arcs) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Arcs) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Arcs) -> object
        Set: AutoScaleFont(self: Arcs) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Arcs) -> bool
        Set: AutoSize(self: Arcs) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Arcs) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Arcs) -> str
        Set: Caption(self: Arcs) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Arcs) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Arcs) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Arcs) -> bool
        Set: Enabled(self: Arcs) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Arcs) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Arcs) -> str
        Set: Formula(self: Arcs) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Arcs) -> float
        Set: Height(self: Arcs) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: Arcs) -> object
        Set: HorizontalAlignment(self: Arcs) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Arcs) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Arcs) -> float
        Set: Left(self: Arcs) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Arcs) -> bool
        Set: Locked(self: Arcs) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Arcs) -> bool
        Set: LockedText(self: Arcs) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Arcs) -> str
        Set: OnAction(self: Arcs) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: Arcs) -> object
        Set: Orientation(self: Arcs) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Arcs) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Arcs) -> object
        Set: Placement(self: Arcs) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Arcs) -> bool
        Set: PrintObject(self: Arcs) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Arcs) -> int
        Set: ReadingOrder(self: Arcs) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Arcs) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Arcs) -> str
        Set: Text(self: Arcs) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Arcs) -> float
        Set: Top(self: Arcs) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: Arcs) -> object
        Set: VerticalAlignment(self: Arcs) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Arcs) -> bool
        Set: Visible(self: Arcs) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Arcs) -> float
        Set: Width(self: Arcs) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Arcs) -> int """
        ...


    def Add(self, X1:float, Y1:float, X2:float, Y2:float) -> Arc:
        """ Add(self: Arcs, X1: float, Y1: float, X2: float, Y2: float) -> Arc """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: Arcs) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Arcs, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Arcs) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Arcs, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Arcs) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Arcs) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Arcs) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: Arcs) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: Arcs, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Arcs, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Arcs) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: Arcs) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: Arcs) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: Arcs) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: Arcs) """
        ...

    def _Dummy43(self): # -> 
        """ _Dummy43(self: Arcs) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class Areas(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Areas) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Areas) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Areas) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Areas) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AutoCorrect: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoCorrect) -> Application """
        ...

    @property
    def AutoExpandListRange(self) -> bool:
        """
        Get: AutoExpandListRange(self: AutoCorrect) -> bool
        Set: AutoExpandListRange(self: AutoCorrect) = value
        """
        ...

    @property
    def AutoFillFormulasInLists(self) -> bool:
        """
        Get: AutoFillFormulasInLists(self: AutoCorrect) -> bool
        Set: AutoFillFormulasInLists(self: AutoCorrect) = value
        """
        ...

    @property
    def CapitalizeNamesOfDays(self) -> bool:
        """
        Get: CapitalizeNamesOfDays(self: AutoCorrect) -> bool
        Set: CapitalizeNamesOfDays(self: AutoCorrect) = value
        """
        ...

    @property
    def CorrectCapsLock(self) -> bool:
        """
        Get: CorrectCapsLock(self: AutoCorrect) -> bool
        Set: CorrectCapsLock(self: AutoCorrect) = value
        """
        ...

    @property
    def CorrectSentenceCap(self) -> bool:
        """
        Get: CorrectSentenceCap(self: AutoCorrect) -> bool
        Set: CorrectSentenceCap(self: AutoCorrect) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: AutoCorrect) -> XlCreator """
        ...

    @property
    def DisplayAutoCorrectOptions(self) -> bool:
        """
        Get: DisplayAutoCorrectOptions(self: AutoCorrect) -> bool
        Set: DisplayAutoCorrectOptions(self: AutoCorrect) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoCorrect) -> object """
        ...

    @property
    def ReplaceText(self) -> bool:
        """
        Get: ReplaceText(self: AutoCorrect) -> bool
        Set: ReplaceText(self: AutoCorrect) = value
        """
        ...

    @property
    def TwoInitialCapitals(self) -> bool:
        """
        Get: TwoInitialCapitals(self: AutoCorrect) -> bool
        Set: TwoInitialCapitals(self: AutoCorrect) = value
        """
        ...


    def AddReplacement(self, What:str, Replacement:str) -> object:
        """ AddReplacement(self: AutoCorrect, What: str, Replacement: str) -> object """
        ...

    def DeleteReplacement(self, What:str) -> object:
        """ DeleteReplacement(self: AutoCorrect, What: str) -> object """
        ...


class AutoFilter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoFilter) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: AutoFilter) -> XlCreator """
        ...

    @property
    def FilterMode(self) -> bool:
        """ Get: FilterMode(self: AutoFilter) -> bool """
        ...

    @property
    def Filters(self) -> Filters:
        """ Get: Filters(self: AutoFilter) -> Filters """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoFilter) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: AutoFilter) -> Range """
        ...

    @property
    def Sort(self) -> Sort:
        """ Get: Sort(self: AutoFilter) -> Sort """
        ...


    def ApplyFilter(self): # -> 
        """ ApplyFilter(self: AutoFilter) """
        ...

    def ShowAllData(self): # -> 
        """ ShowAllData(self: AutoFilter) """
        ...


class AutoRecover: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoRecover) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: AutoRecover) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: AutoRecover) -> bool
        Set: Enabled(self: AutoRecover) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoRecover) -> object """
        ...

    @property
    def Path(self) -> str:
        """
        Get: Path(self: AutoRecover) -> str
        Set: Path(self: AutoRecover) = value
        """
        ...

    @property
    def Time(self) -> int:
        """
        Get: Time(self: AutoRecover) -> int
        Set: Time(self: AutoRecover) = value
        """
        ...



class Axes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Axes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Axes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Axes) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Axes) -> object """
        ...


    def Item(self, Type:XlAxisType, AxisGroup:XlAxisGroup) -> Axis:
        """ Item(self: Axes, Type: XlAxisType, AxisGroup: XlAxisGroup) -> Axis """
        ...

    def _Default(self, Type:XlAxisType, AxisGroup:XlAxisGroup) -> Axis:
        """ _Default(self: Axes, Type: XlAxisType, AxisGroup: XlAxisGroup) -> Axis """
        ...


class Axis: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Axis) -> Application """
        ...

    @property
    def AxisBetweenCategories(self) -> bool:
        """
        Get: AxisBetweenCategories(self: Axis) -> bool
        Set: AxisBetweenCategories(self: Axis) = value
        """
        ...

    @property
    def AxisGroup(self) -> XlAxisGroup:
        """ Get: AxisGroup(self: Axis) -> XlAxisGroup """
        ...

    @property
    def AxisTitle(self) -> AxisTitle:
        """ Get: AxisTitle(self: Axis) -> AxisTitle """
        ...

    @property
    def BaseUnit(self) -> XlTimeUnit:
        """
        Get: BaseUnit(self: Axis) -> XlTimeUnit
        Set: BaseUnit(self: Axis) = value
        """
        ...

    @property
    def BaseUnitIsAuto(self) -> bool:
        """
        Get: BaseUnitIsAuto(self: Axis) -> bool
        Set: BaseUnitIsAuto(self: Axis) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Axis) -> Border """
        ...

    @property
    def CategoryNames(self) -> object:
        """
        Get: CategoryNames(self: Axis) -> object
        Set: CategoryNames(self: Axis) = value
        """
        ...

    @property
    def CategoryType(self) -> XlCategoryType:
        """
        Get: CategoryType(self: Axis) -> XlCategoryType
        Set: CategoryType(self: Axis) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Axis) -> XlCreator """
        ...

    @property
    def Crosses(self) -> XlAxisCrosses:
        """
        Get: Crosses(self: Axis) -> XlAxisCrosses
        Set: Crosses(self: Axis) = value
        """
        ...

    @property
    def CrossesAt(self) -> float:
        """
        Get: CrossesAt(self: Axis) -> float
        Set: CrossesAt(self: Axis) = value
        """
        ...

    @property
    def DisplayUnit(self) -> XlDisplayUnit:
        """
        Get: DisplayUnit(self: Axis) -> XlDisplayUnit
        Set: DisplayUnit(self: Axis) = value
        """
        ...

    @property
    def DisplayUnitCustom(self) -> float:
        """
        Get: DisplayUnitCustom(self: Axis) -> float
        Set: DisplayUnitCustom(self: Axis) = value
        """
        ...

    @property
    def DisplayUnitLabel(self) -> DisplayUnitLabel:
        """ Get: DisplayUnitLabel(self: Axis) -> DisplayUnitLabel """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Axis) -> ChartFormat """
        ...

    @property
    def HasDisplayUnitLabel(self) -> bool:
        """
        Get: HasDisplayUnitLabel(self: Axis) -> bool
        Set: HasDisplayUnitLabel(self: Axis) = value
        """
        ...

    @property
    def HasMajorGridlines(self) -> bool:
        """
        Get: HasMajorGridlines(self: Axis) -> bool
        Set: HasMajorGridlines(self: Axis) = value
        """
        ...

    @property
    def HasMinorGridlines(self) -> bool:
        """
        Get: HasMinorGridlines(self: Axis) -> bool
        Set: HasMinorGridlines(self: Axis) = value
        """
        ...

    @property
    def HasTitle(self) -> bool:
        """
        Get: HasTitle(self: Axis) -> bool
        Set: HasTitle(self: Axis) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: Axis) -> float """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: Axis) -> float """
        ...

    @property
    def LogBase(self) -> float:
        """
        Get: LogBase(self: Axis) -> float
        Set: LogBase(self: Axis) = value
        """
        ...

    @property
    def MajorGridlines(self) -> Gridlines:
        """ Get: MajorGridlines(self: Axis) -> Gridlines """
        ...

    @property
    def MajorTickMark(self) -> XlTickMark:
        """
        Get: MajorTickMark(self: Axis) -> XlTickMark
        Set: MajorTickMark(self: Axis) = value
        """
        ...

    @property
    def MajorUnit(self) -> float:
        """
        Get: MajorUnit(self: Axis) -> float
        Set: MajorUnit(self: Axis) = value
        """
        ...

    @property
    def MajorUnitIsAuto(self) -> bool:
        """
        Get: MajorUnitIsAuto(self: Axis) -> bool
        Set: MajorUnitIsAuto(self: Axis) = value
        """
        ...

    @property
    def MajorUnitScale(self) -> XlTimeUnit:
        """
        Get: MajorUnitScale(self: Axis) -> XlTimeUnit
        Set: MajorUnitScale(self: Axis) = value
        """
        ...

    @property
    def MaximumScale(self) -> float:
        """
        Get: MaximumScale(self: Axis) -> float
        Set: MaximumScale(self: Axis) = value
        """
        ...

    @property
    def MaximumScaleIsAuto(self) -> bool:
        """
        Get: MaximumScaleIsAuto(self: Axis) -> bool
        Set: MaximumScaleIsAuto(self: Axis) = value
        """
        ...

    @property
    def MinimumScale(self) -> float:
        """
        Get: MinimumScale(self: Axis) -> float
        Set: MinimumScale(self: Axis) = value
        """
        ...

    @property
    def MinimumScaleIsAuto(self) -> bool:
        """
        Get: MinimumScaleIsAuto(self: Axis) -> bool
        Set: MinimumScaleIsAuto(self: Axis) = value
        """
        ...

    @property
    def MinorGridlines(self) -> Gridlines:
        """ Get: MinorGridlines(self: Axis) -> Gridlines """
        ...

    @property
    def MinorTickMark(self) -> XlTickMark:
        """
        Get: MinorTickMark(self: Axis) -> XlTickMark
        Set: MinorTickMark(self: Axis) = value
        """
        ...

    @property
    def MinorUnit(self) -> float:
        """
        Get: MinorUnit(self: Axis) -> float
        Set: MinorUnit(self: Axis) = value
        """
        ...

    @property
    def MinorUnitIsAuto(self) -> bool:
        """
        Get: MinorUnitIsAuto(self: Axis) -> bool
        Set: MinorUnitIsAuto(self: Axis) = value
        """
        ...

    @property
    def MinorUnitScale(self) -> XlTimeUnit:
        """
        Get: MinorUnitScale(self: Axis) -> XlTimeUnit
        Set: MinorUnitScale(self: Axis) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Axis) -> object """
        ...

    @property
    def ReversePlotOrder(self) -> bool:
        """
        Get: ReversePlotOrder(self: Axis) -> bool
        Set: ReversePlotOrder(self: Axis) = value
        """
        ...

    @property
    def ScaleType(self) -> XlScaleType:
        """
        Get: ScaleType(self: Axis) -> XlScaleType
        Set: ScaleType(self: Axis) = value
        """
        ...

    @property
    def TickLabelPosition(self) -> XlTickLabelPosition:
        """
        Get: TickLabelPosition(self: Axis) -> XlTickLabelPosition
        Set: TickLabelPosition(self: Axis) = value
        """
        ...

    @property
    def TickLabels(self) -> TickLabels:
        """ Get: TickLabels(self: Axis) -> TickLabels """
        ...

    @property
    def TickLabelSpacing(self) -> int:
        """
        Get: TickLabelSpacing(self: Axis) -> int
        Set: TickLabelSpacing(self: Axis) = value
        """
        ...

    @property
    def TickLabelSpacingIsAuto(self) -> bool:
        """
        Get: TickLabelSpacingIsAuto(self: Axis) -> bool
        Set: TickLabelSpacingIsAuto(self: Axis) = value
        """
        ...

    @property
    def TickMarkSpacing(self) -> int:
        """
        Get: TickMarkSpacing(self: Axis) -> int
        Set: TickMarkSpacing(self: Axis) = value
        """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: Axis) -> float """
        ...

    @property
    def Type(self) -> XlAxisType:
        """
        Get: Type(self: Axis) -> XlAxisType
        Set: Type(self: Axis) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: Axis) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: Axis) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: Axis) -> object """
        ...


class AxisTitle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AxisTitle) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: AxisTitle) -> object
        Set: AutoScaleFont(self: AxisTitle) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: AxisTitle) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: AxisTitle) -> str
        Set: Caption(self: AxisTitle) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: AxisTitle) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: AxisTitle) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: AxisTitle) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: AxisTitle) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: AxisTitle) -> str
        Set: Formula(self: AxisTitle) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: AxisTitle) -> str
        Set: FormulaLocal(self: AxisTitle) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: AxisTitle) -> str
        Set: FormulaR1C1(self: AxisTitle) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: AxisTitle) -> str
        Set: FormulaR1C1Local(self: AxisTitle) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: AxisTitle) -> float """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: AxisTitle) -> object
        Set: HorizontalAlignment(self: AxisTitle) = value
        """
        ...

    @property
    def IncludeInLayout(self) -> bool:
        """
        Get: IncludeInLayout(self: AxisTitle) -> bool
        Set: IncludeInLayout(self: AxisTitle) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: AxisTitle) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: AxisTitle) -> float
        Set: Left(self: AxisTitle) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: AxisTitle) -> str """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: AxisTitle) -> object
        Set: Orientation(self: AxisTitle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AxisTitle) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: AxisTitle) -> XlChartElementPosition
        Set: Position(self: AxisTitle) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: AxisTitle) -> int
        Set: ReadingOrder(self: AxisTitle) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: AxisTitle) -> bool
        Set: Shadow(self: AxisTitle) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: AxisTitle) -> str
        Set: Text(self: AxisTitle) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: AxisTitle) -> float
        Set: Top(self: AxisTitle) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: AxisTitle) -> object
        Set: VerticalAlignment(self: AxisTitle) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: AxisTitle) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: AxisTitle) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: AxisTitle) -> object """
        ...


class Border: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Border) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: Border) -> object
        Set: Color(self: Border) = value
        """
        ...

    @property
    def ColorIndex(self) -> object:
        """
        Get: ColorIndex(self: Border) -> object
        Set: ColorIndex(self: Border) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Border) -> XlCreator """
        ...

    @property
    def LineStyle(self) -> object:
        """
        Get: LineStyle(self: Border) -> object
        Set: LineStyle(self: Border) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Border) -> object """
        ...

    @property
    def ThemeColor(self) -> object:
        """
        Get: ThemeColor(self: Border) -> object
        Set: ThemeColor(self: Border) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: Border) -> object
        Set: TintAndShade(self: Border) = value
        """
        ...

    @property
    def Weight(self) -> object:
        """
        Get: Weight(self: Border) -> object
        Set: Weight(self: Border) = value
        """
        ...



class Borders(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Borders) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: Borders) -> object
        Set: Color(self: Borders) = value
        """
        ...

    @property
    def ColorIndex(self) -> object:
        """
        Get: ColorIndex(self: Borders) -> object
        Set: ColorIndex(self: Borders) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Borders) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Borders) -> XlCreator """
        ...

    @property
    def LineStyle(self) -> object:
        """
        Get: LineStyle(self: Borders) -> object
        Set: LineStyle(self: Borders) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Borders) -> object """
        ...

    @property
    def ThemeColor(self) -> object:
        """
        Get: ThemeColor(self: Borders) -> object
        Set: ThemeColor(self: Borders) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: Borders) -> object
        Set: TintAndShade(self: Borders) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: Borders) -> object
        Set: Value(self: Borders) = value
        """
        ...

    @property
    def Weight(self) -> object:
        """
        Get: Weight(self: Borders) -> object
        Set: Weight(self: Borders) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Button: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: Button) -> object
        Set: Accelerator(self: Button) = value
        """
        ...

    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: Button) -> bool
        Set: AddIndent(self: Button) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Button) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Button) -> object
        Set: AutoScaleFont(self: Button) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Button) -> bool
        Set: AutoSize(self: Button) = value
        """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: Button) -> Range """
        ...

    @property
    def CancelButton(self) -> bool:
        """
        Get: CancelButton(self: Button) -> bool
        Set: CancelButton(self: Button) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Button) -> str
        Set: Caption(self: Button) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Button) -> XlCreator """
        ...

    @property
    def DefaultButton(self) -> bool:
        """
        Get: DefaultButton(self: Button) -> bool
        Set: DefaultButton(self: Button) = value
        """
        ...

    @property
    def DismissButton(self) -> bool:
        """
        Get: DismissButton(self: Button) -> bool
        Set: DismissButton(self: Button) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Button) -> bool
        Set: Enabled(self: Button) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Button) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Button) -> str
        Set: Formula(self: Button) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Button) -> float
        Set: Height(self: Button) = value
        """
        ...

    @property
    def HelpButton(self) -> bool:
        """
        Get: HelpButton(self: Button) -> bool
        Set: HelpButton(self: Button) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: Button) -> object
        Set: HorizontalAlignment(self: Button) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Button) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Button) -> float
        Set: Left(self: Button) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Button) -> bool
        Set: Locked(self: Button) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Button) -> bool
        Set: LockedText(self: Button) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Button) -> str
        Set: Name(self: Button) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Button) -> str
        Set: OnAction(self: Button) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: Button) -> object
        Set: Orientation(self: Button) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Button) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: Button) -> object
        Set: PhoneticAccelerator(self: Button) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Button) -> object
        Set: Placement(self: Button) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Button) -> bool
        Set: PrintObject(self: Button) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Button) -> int
        Set: ReadingOrder(self: Button) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Button) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Button) -> str
        Set: Text(self: Button) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Button) -> float
        Set: Top(self: Button) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: Button) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: Button) -> object
        Set: VerticalAlignment(self: Button) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Button) -> bool
        Set: Visible(self: Button) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Button) -> float
        Set: Width(self: Button) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Button) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: Button) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Button, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Button) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Button, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Button) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Button) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Button) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Button, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Button) -> object """
        ...


class Buttons(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: Buttons) -> object
        Set: Accelerator(self: Buttons) = value
        """
        ...

    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: Buttons) -> bool
        Set: AddIndent(self: Buttons) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Buttons) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Buttons) -> object
        Set: AutoScaleFont(self: Buttons) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Buttons) -> bool
        Set: AutoSize(self: Buttons) = value
        """
        ...

    @property
    def CancelButton(self) -> bool:
        """
        Get: CancelButton(self: Buttons) -> bool
        Set: CancelButton(self: Buttons) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Buttons) -> str
        Set: Caption(self: Buttons) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Buttons) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Buttons) -> XlCreator """
        ...

    @property
    def DefaultButton(self) -> bool:
        """
        Get: DefaultButton(self: Buttons) -> bool
        Set: DefaultButton(self: Buttons) = value
        """
        ...

    @property
    def DismissButton(self) -> bool:
        """
        Get: DismissButton(self: Buttons) -> bool
        Set: DismissButton(self: Buttons) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Buttons) -> bool
        Set: Enabled(self: Buttons) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Buttons) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Buttons) -> str
        Set: Formula(self: Buttons) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Buttons) -> float
        Set: Height(self: Buttons) = value
        """
        ...

    @property
    def HelpButton(self) -> bool:
        """
        Get: HelpButton(self: Buttons) -> bool
        Set: HelpButton(self: Buttons) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: Buttons) -> object
        Set: HorizontalAlignment(self: Buttons) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Buttons) -> float
        Set: Left(self: Buttons) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Buttons) -> bool
        Set: Locked(self: Buttons) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Buttons) -> bool
        Set: LockedText(self: Buttons) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Buttons) -> str
        Set: OnAction(self: Buttons) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: Buttons) -> object
        Set: Orientation(self: Buttons) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Buttons) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: Buttons) -> object
        Set: PhoneticAccelerator(self: Buttons) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Buttons) -> object
        Set: Placement(self: Buttons) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Buttons) -> bool
        Set: PrintObject(self: Buttons) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Buttons) -> int
        Set: ReadingOrder(self: Buttons) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Buttons) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Buttons) -> str
        Set: Text(self: Buttons) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Buttons) -> float
        Set: Top(self: Buttons) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: Buttons) -> object
        Set: VerticalAlignment(self: Buttons) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Buttons) -> bool
        Set: Visible(self: Buttons) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Buttons) -> float
        Set: Width(self: Buttons) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Buttons) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Button:
        """ Add(self: Buttons, Left: float, Top: float, Width: float, Height: float) -> Button """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: Buttons) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Buttons, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Buttons) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Buttons, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Buttons) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Buttons) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Buttons) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: Buttons) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: Buttons, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Buttons, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Buttons) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: Buttons) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: Buttons) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: Buttons) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: Buttons) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class CalculatedFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CalculatedFields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CalculatedFields) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CalculatedFields) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CalculatedFields) -> object """
        ...


    def Add(self, Name:str, Formula:str, UseStandardFormula:object) -> PivotField:
        """ Add(self: CalculatedFields, Name: str, Formula: str, UseStandardFormula: object) -> PivotField """
        ...

    def Item(self, Index:object) -> PivotField:
        """ Item(self: CalculatedFields, Index: object) -> PivotField """
        ...

    def _Add(self, Name:str, Formula:str) -> PivotField:
        """ _Add(self: CalculatedFields, Name: str, Formula: str) -> PivotField """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CalculatedItems(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CalculatedItems) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CalculatedItems) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CalculatedItems) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CalculatedItems) -> object """
        ...


    def Add(self, Name:str, Formula:str, UseStandardFormula:object) -> PivotItem:
        """ Add(self: CalculatedItems, Name: str, Formula: str, UseStandardFormula: object) -> PivotItem """
        ...

    def Item(self, Index:object) -> PivotItem:
        """ Item(self: CalculatedItems, Index: object) -> PivotItem """
        ...

    def _Add(self, Name:str, Formula:str) -> PivotItem:
        """ _Add(self: CalculatedItems, Name: str, Formula: str) -> PivotItem """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CalculatedMember: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CalculatedMember) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CalculatedMember) -> XlCreator """
        ...

    @property
    def DisplayFolder(self) -> str:
        """ Get: DisplayFolder(self: CalculatedMember) -> str """
        ...

    @property
    def Dynamic(self) -> bool:
        """ Get: Dynamic(self: CalculatedMember) -> bool """
        ...

    @property
    def FlattenHierarchies(self) -> bool:
        """
        Get: FlattenHierarchies(self: CalculatedMember) -> bool
        Set: FlattenHierarchies(self: CalculatedMember) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """ Get: Formula(self: CalculatedMember) -> str """
        ...

    @property
    def HierarchizeDistinct(self) -> bool:
        """
        Get: HierarchizeDistinct(self: CalculatedMember) -> bool
        Set: HierarchizeDistinct(self: CalculatedMember) = value
        """
        ...

    @property
    def IsValid(self) -> bool:
        """ Get: IsValid(self: CalculatedMember) -> bool """
        ...

    @property
    def MeasureGroup(self) -> str:
        """ Get: MeasureGroup(self: CalculatedMember) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: CalculatedMember) -> str """
        ...

    @property
    def NumberFormat(self) -> XlCalcMemNumberFormatType:
        """ Get: NumberFormat(self: CalculatedMember) -> XlCalcMemNumberFormatType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CalculatedMember) -> object """
        ...

    @property
    def ParentHierarchy(self) -> str:
        """ Get: ParentHierarchy(self: CalculatedMember) -> str """
        ...

    @property
    def ParentMember(self) -> str:
        """ Get: ParentMember(self: CalculatedMember) -> str """
        ...

    @property
    def SolveOrder(self) -> int:
        """ Get: SolveOrder(self: CalculatedMember) -> int """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: CalculatedMember) -> str """
        ...

    @property
    def Type(self) -> XlCalculatedMemberType:
        """ Get: Type(self: CalculatedMember) -> XlCalculatedMemberType """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: CalculatedMember) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: CalculatedMember) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CalculatedMembers(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CalculatedMembers) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CalculatedMembers) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CalculatedMembers) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CalculatedMembers) -> object """
        ...


    def Add(self, Name:str, Formula:str, SolveOrder:object, Type:object) -> CalculatedMember:
        """ Add(self: CalculatedMembers, Name: str, Formula: str, SolveOrder: object, Type: object) -> CalculatedMember """
        ...

    def Add2(self, Name:str, Formula:object, SolveOrder:object, Type:object, Dynamic:object, DisplayFolder:object, HierarchizeDistinct:object) -> CalculatedMember:
        """ Add2(self: CalculatedMembers, Name: str, Formula: object, SolveOrder: object, Type: object, Dynamic: object, DisplayFolder: object, HierarchizeDistinct: object) -> CalculatedMember """
        ...

    def AddCalculatedMember(self, Name:str, Formula:object, SolveOrder:object, Type:object, DisplayFolder:object, MeasureGroup:object, ParentHierarchy:object, ParentMember:object, NumberFormat:object) -> CalculatedMember:
        """ AddCalculatedMember(self: CalculatedMembers, Name: str, Formula: object, SolveOrder: object, Type: object, DisplayFolder: object, MeasureGroup: object, ParentHierarchy: object, ParentMember: object, NumberFormat: object) -> CalculatedMember """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CalloutFormat(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accent(self): # -> MsoTriState
        """
        Get: Accent(self: CalloutFormat) -> MsoTriState
        Set: Accent(self: CalloutFormat) = value
        """
        ...

    @property
    def Angle(self): # -> MsoCalloutAngleType
        """
        Get: Angle(self: CalloutFormat) -> MsoCalloutAngleType
        Set: Angle(self: CalloutFormat) = value
        """
        ...

    @property
    def AutoAttach(self): # -> MsoTriState
        """
        Get: AutoAttach(self: CalloutFormat) -> MsoTriState
        Set: AutoAttach(self: CalloutFormat) = value
        """
        ...

    @property
    def AutoLength(self): # -> MsoTriState
        """ Get: AutoLength(self: CalloutFormat) -> MsoTriState """
        ...

    @property
    def Border(self): # -> MsoTriState
        """
        Get: Border(self: CalloutFormat) -> MsoTriState
        Set: Border(self: CalloutFormat) = value
        """
        ...

    @property
    def Drop(self) -> Single:
        """ Get: Drop(self: CalloutFormat) -> Single """
        ...

    @property
    def DropType(self): # -> MsoCalloutDropType
        """ Get: DropType(self: CalloutFormat) -> MsoCalloutDropType """
        ...

    @property
    def Gap(self) -> Single:
        """
        Get: Gap(self: CalloutFormat) -> Single
        Set: Gap(self: CalloutFormat) = value
        """
        ...

    @property
    def Length(self) -> Single:
        """ Get: Length(self: CalloutFormat) -> Single """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CalloutFormat) -> object """
        ...

    @property
    def Type(self): # -> MsoCalloutType
        """
        Get: Type(self: CalloutFormat) -> MsoCalloutType
        Set: Type(self: CalloutFormat) = value
        """
        ...


    def AutomaticLength(self): # -> 
        """ AutomaticLength(self: CalloutFormat) """
        ...

    def CustomDrop(self, Drop:Single): # -> 
        """ CustomDrop(self: CalloutFormat, Drop: Single) """
        ...

    def CustomLength(self, Length:Single): # -> 
        """ CustomLength(self: CalloutFormat, Length: Single) """
        ...

    def PresetDrop(self, DropType): # ->  # Not found arg types: {'DropType': 'MsoCalloutDropType'}
        """ PresetDrop(self: CalloutFormat, DropType: MsoCalloutDropType) """
        ...


class CategoryCollection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CategoryCollection) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CategoryCollection) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CategoryCollection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CategoryCollection) -> object """
        ...


    def Item(self, Index:object) -> ChartCategory:
        """ Item(self: CategoryCollection, Index: object) -> ChartCategory """
        ...

    def _Default(self, Index:object) -> ChartCategory:
        """ _Default(self: CategoryCollection, Index: object) -> ChartCategory """
        ...


class CellFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> object:
        """
        Get: AddIndent(self: CellFormat) -> object
        Set: AddIndent(self: CellFormat) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: CellFormat) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: CellFormat) -> Borders
        Set: Borders(self: CellFormat) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CellFormat) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: CellFormat) -> Font
        Set: Font(self: CellFormat) = value
        """
        ...

    @property
    def FormulaHidden(self) -> object:
        """
        Get: FormulaHidden(self: CellFormat) -> object
        Set: FormulaHidden(self: CellFormat) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: CellFormat) -> object
        Set: HorizontalAlignment(self: CellFormat) = value
        """
        ...

    @property
    def IndentLevel(self) -> object:
        """
        Get: IndentLevel(self: CellFormat) -> object
        Set: IndentLevel(self: CellFormat) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """
        Get: Interior(self: CellFormat) -> Interior
        Set: Interior(self: CellFormat) = value
        """
        ...

    @property
    def Locked(self) -> object:
        """
        Get: Locked(self: CellFormat) -> object
        Set: Locked(self: CellFormat) = value
        """
        ...

    @property
    def MergeCells(self) -> object:
        """
        Get: MergeCells(self: CellFormat) -> object
        Set: MergeCells(self: CellFormat) = value
        """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: CellFormat) -> object
        Set: NumberFormat(self: CellFormat) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: CellFormat) -> object
        Set: NumberFormatLocal(self: CellFormat) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: CellFormat) -> object
        Set: Orientation(self: CellFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CellFormat) -> object """
        ...

    @property
    def ShrinkToFit(self) -> object:
        """
        Get: ShrinkToFit(self: CellFormat) -> object
        Set: ShrinkToFit(self: CellFormat) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: CellFormat) -> object
        Set: VerticalAlignment(self: CellFormat) = value
        """
        ...

    @property
    def WrapText(self) -> object:
        """
        Get: WrapText(self: CellFormat) -> object
        Set: WrapText(self: CellFormat) = value
        """
        ...


    def Clear(self): # -> 
        """ Clear(self: CellFormat) """
        ...


class Characters: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Characters) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Characters) -> str
        Set: Caption(self: Characters) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Characters) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Characters) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Characters) -> Font """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Characters) -> object """
        ...

    @property
    def PhoneticCharacters(self) -> str:
        """
        Get: PhoneticCharacters(self: Characters) -> str
        Set: PhoneticCharacters(self: Characters) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Characters) -> str
        Set: Text(self: Characters) = value
        """
        ...


    def Delete(self) -> object:
        """ Delete(self: Characters) -> object """
        ...

    def Insert(self, String:str) -> object:
        """ Insert(self: Characters, String: str) -> object """
        ...


class ChartEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Activate(self): # -> 
        """ add_Activate(self: ChartEvents_Event, : ChartEvents_ActivateEventHandler) """
        ...

    def add_BeforeDoubleClick(self): # -> 
        """ add_BeforeDoubleClick(self: ChartEvents_Event, : ChartEvents_BeforeDoubleClickEventHandler) """
        ...

    def add_BeforeRightClick(self): # -> 
        """ add_BeforeRightClick(self: ChartEvents_Event, : ChartEvents_BeforeRightClickEventHandler) """
        ...

    def add_Calculate(self): # -> 
        """ add_Calculate(self: ChartEvents_Event, : ChartEvents_CalculateEventHandler) """
        ...

    def add_Deactivate(self): # -> 
        """ add_Deactivate(self: ChartEvents_Event, : ChartEvents_DeactivateEventHandler) """
        ...

    def add_DragOver(self): # -> 
        """ add_DragOver(self: ChartEvents_Event, : ChartEvents_DragOverEventHandler) """
        ...

    def add_DragPlot(self): # -> 
        """ add_DragPlot(self: ChartEvents_Event, : ChartEvents_DragPlotEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: ChartEvents_Event, : ChartEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: ChartEvents_Event, : ChartEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: ChartEvents_Event, : ChartEvents_MouseUpEventHandler) """
        ...

    def add_Resize(self): # -> 
        """ add_Resize(self: ChartEvents_Event, : ChartEvents_ResizeEventHandler) """
        ...

    def add_Select(self): # -> 
        """ add_Select(self: ChartEvents_Event, : ChartEvents_SelectEventHandler) """
        ...

    def add_SeriesChange(self): # -> 
        """ add_SeriesChange(self: ChartEvents_Event, : ChartEvents_SeriesChangeEventHandler) """
        ...

    def remove_Activate(self): # -> 
        """ remove_Activate(self: ChartEvents_Event, : ChartEvents_ActivateEventHandler) """
        ...

    def remove_BeforeDoubleClick(self): # -> 
        """ remove_BeforeDoubleClick(self: ChartEvents_Event, : ChartEvents_BeforeDoubleClickEventHandler) """
        ...

    def remove_BeforeRightClick(self): # -> 
        """ remove_BeforeRightClick(self: ChartEvents_Event, : ChartEvents_BeforeRightClickEventHandler) """
        ...

    def remove_Calculate(self): # -> 
        """ remove_Calculate(self: ChartEvents_Event, : ChartEvents_CalculateEventHandler) """
        ...

    def remove_Deactivate(self): # -> 
        """ remove_Deactivate(self: ChartEvents_Event, : ChartEvents_DeactivateEventHandler) """
        ...

    def remove_DragOver(self): # -> 
        """ remove_DragOver(self: ChartEvents_Event, : ChartEvents_DragOverEventHandler) """
        ...

    def remove_DragPlot(self): # -> 
        """ remove_DragPlot(self: ChartEvents_Event, : ChartEvents_DragPlotEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: ChartEvents_Event, : ChartEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: ChartEvents_Event, : ChartEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: ChartEvents_Event, : ChartEvents_MouseUpEventHandler) """
        ...

    def remove_Resize(self): # -> 
        """ remove_Resize(self: ChartEvents_Event, : ChartEvents_ResizeEventHandler) """
        ...

    def remove_Select(self): # -> 
        """ remove_Select(self: ChartEvents_Event, : ChartEvents_SelectEventHandler) """
        ...

    def remove_SeriesChange(self): # -> 
        """ remove_SeriesChange(self: ChartEvents_Event, : ChartEvents_SeriesChangeEventHandler) """
        ...

    Activate = ...
    BeforeDoubleClick = ...
    BeforeRightClick = ...
    Calculate = ...
    Deactivate = ...
    DragOver = ...
    DragPlot = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...
    Resize = ...
    Select = ...
    SeriesChange = ...


class _Chart: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Chart) -> Application """
        ...

    @property
    def Area3DGroup(self) -> ChartGroup:
        """ Get: Area3DGroup(self: _Chart) -> ChartGroup """
        ...

    @property
    def AutoScaling(self) -> bool:
        """
        Get: AutoScaling(self: _Chart) -> bool
        Set: AutoScaling(self: _Chart) = value
        """
        ...

    @property
    def BackWall(self) -> Walls:
        """ Get: BackWall(self: _Chart) -> Walls """
        ...

    @property
    def Bar3DGroup(self) -> ChartGroup:
        """ Get: Bar3DGroup(self: _Chart) -> ChartGroup """
        ...

    @property
    def BarShape(self) -> XlBarShape:
        """
        Get: BarShape(self: _Chart) -> XlBarShape
        Set: BarShape(self: _Chart) = value
        """
        ...

    @property
    def CategoryLabelLevel(self) -> XlCategoryLabelLevel:
        """
        Get: CategoryLabelLevel(self: _Chart) -> XlCategoryLabelLevel
        Set: CategoryLabelLevel(self: _Chart) = value
        """
        ...

    @property
    def ChartArea(self) -> ChartArea:
        """ Get: ChartArea(self: _Chart) -> ChartArea """
        ...

    @property
    def ChartColor(self) -> object:
        """
        Get: ChartColor(self: _Chart) -> object
        Set: ChartColor(self: _Chart) = value
        """
        ...

    @property
    def ChartStyle(self) -> object:
        """
        Get: ChartStyle(self: _Chart) -> object
        Set: ChartStyle(self: _Chart) = value
        """
        ...

    @property
    def ChartTitle(self) -> ChartTitle:
        """ Get: ChartTitle(self: _Chart) -> ChartTitle """
        ...

    @property
    def ChartType(self) -> XlChartType:
        """
        Get: ChartType(self: _Chart) -> XlChartType
        Set: ChartType(self: _Chart) = value
        """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: _Chart) -> str """
        ...

    @property
    def Column3DGroup(self) -> ChartGroup:
        """ Get: Column3DGroup(self: _Chart) -> ChartGroup """
        ...

    @property
    def Corners(self) -> Corners:
        """ Get: Corners(self: _Chart) -> Corners """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: _Chart) -> XlCreator """
        ...

    @property
    def DataTable(self) -> DataTable:
        """ Get: DataTable(self: _Chart) -> DataTable """
        ...

    @property
    def DepthPercent(self) -> int:
        """
        Get: DepthPercent(self: _Chart) -> int
        Set: DepthPercent(self: _Chart) = value
        """
        ...

    @property
    def DisplayBlanksAs(self) -> XlDisplayBlanksAs:
        """
        Get: DisplayBlanksAs(self: _Chart) -> XlDisplayBlanksAs
        Set: DisplayBlanksAs(self: _Chart) = value
        """
        ...

    @property
    def Dummy24(self) -> bool:
        """
        Get: Dummy24(self: _Chart) -> bool
        Set: Dummy24(self: _Chart) = value
        """
        ...

    @property
    def Dummy25(self) -> bool:
        """
        Get: Dummy25(self: _Chart) -> bool
        Set: Dummy25(self: _Chart) = value
        """
        ...

    @property
    def Elevation(self) -> int:
        """
        Get: Elevation(self: _Chart) -> int
        Set: Elevation(self: _Chart) = value
        """
        ...

    @property
    def Floor(self) -> Floor:
        """ Get: Floor(self: _Chart) -> Floor """
        ...

    @property
    def GapDepth(self) -> int:
        """
        Get: GapDepth(self: _Chart) -> int
        Set: GapDepth(self: _Chart) = value
        """
        ...

    @property
    def HasDataTable(self) -> bool:
        """
        Get: HasDataTable(self: _Chart) -> bool
        Set: HasDataTable(self: _Chart) = value
        """
        ...

    @property
    def HasHiddenContent(self) -> bool:
        """ Get: HasHiddenContent(self: _Chart) -> bool """
        ...

    @property
    def HasLegend(self) -> bool:
        """
        Get: HasLegend(self: _Chart) -> bool
        Set: HasLegend(self: _Chart) = value
        """
        ...

    @property
    def HasPivotFields(self) -> bool:
        """
        Get: HasPivotFields(self: _Chart) -> bool
        Set: HasPivotFields(self: _Chart) = value
        """
        ...

    @property
    def HasTitle(self) -> bool:
        """
        Get: HasTitle(self: _Chart) -> bool
        Set: HasTitle(self: _Chart) = value
        """
        ...

    @property
    def HeightPercent(self) -> int:
        """
        Get: HeightPercent(self: _Chart) -> int
        Set: HeightPercent(self: _Chart) = value
        """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: _Chart) -> Hyperlinks """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: _Chart) -> int """
        ...

    @property
    def Legend(self) -> Legend:
        """ Get: Legend(self: _Chart) -> Legend """
        ...

    @property
    def Line3DGroup(self) -> ChartGroup:
        """ Get: Line3DGroup(self: _Chart) -> ChartGroup """
        ...

    @property
    def MailEnvelope(self): # -> MsoEnvelope
        """ Get: MailEnvelope(self: _Chart) -> MsoEnvelope """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _Chart) -> str
        Set: Name(self: _Chart) = value
        """
        ...

    @property
    def Next(self) -> object:
        """ Get: Next(self: _Chart) -> object """
        ...

    @property
    def OnDoubleClick(self) -> str:
        """
        Get: OnDoubleClick(self: _Chart) -> str
        Set: OnDoubleClick(self: _Chart) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: _Chart) -> str
        Set: OnSheetActivate(self: _Chart) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: _Chart) -> str
        Set: OnSheetDeactivate(self: _Chart) = value
        """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """ Get: PageSetup(self: _Chart) -> PageSetup """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Chart) -> object """
        ...

    @property
    def Perspective(self) -> int:
        """
        Get: Perspective(self: _Chart) -> int
        Set: Perspective(self: _Chart) = value
        """
        ...

    @property
    def Pie3DGroup(self) -> ChartGroup:
        """ Get: Pie3DGroup(self: _Chart) -> ChartGroup """
        ...

    @property
    def PivotLayout(self) -> PivotLayout:
        """ Get: PivotLayout(self: _Chart) -> PivotLayout """
        ...

    @property
    def PlotArea(self) -> PlotArea:
        """ Get: PlotArea(self: _Chart) -> PlotArea """
        ...

    @property
    def PlotBy(self) -> XlRowCol:
        """
        Get: PlotBy(self: _Chart) -> XlRowCol
        Set: PlotBy(self: _Chart) = value
        """
        ...

    @property
    def PlotVisibleOnly(self) -> bool:
        """
        Get: PlotVisibleOnly(self: _Chart) -> bool
        Set: PlotVisibleOnly(self: _Chart) = value
        """
        ...

    @property
    def Previous(self) -> object:
        """ Get: Previous(self: _Chart) -> object """
        ...

    @property
    def PrintedCommentPages(self) -> int:
        """ Get: PrintedCommentPages(self: _Chart) -> int """
        ...

    @property
    def ProtectContents(self) -> bool:
        """ Get: ProtectContents(self: _Chart) -> bool """
        ...

    @property
    def ProtectData(self) -> bool:
        """
        Get: ProtectData(self: _Chart) -> bool
        Set: ProtectData(self: _Chart) = value
        """
        ...

    @property
    def ProtectDrawingObjects(self) -> bool:
        """ Get: ProtectDrawingObjects(self: _Chart) -> bool """
        ...

    @property
    def ProtectFormatting(self) -> bool:
        """
        Get: ProtectFormatting(self: _Chart) -> bool
        Set: ProtectFormatting(self: _Chart) = value
        """
        ...

    @property
    def ProtectGoalSeek(self) -> bool:
        """
        Get: ProtectGoalSeek(self: _Chart) -> bool
        Set: ProtectGoalSeek(self: _Chart) = value
        """
        ...

    @property
    def ProtectionMode(self) -> bool:
        """ Get: ProtectionMode(self: _Chart) -> bool """
        ...

    @property
    def ProtectSelection(self) -> bool:
        """
        Get: ProtectSelection(self: _Chart) -> bool
        Set: ProtectSelection(self: _Chart) = value
        """
        ...

    @property
    def RightAngleAxes(self) -> object:
        """
        Get: RightAngleAxes(self: _Chart) -> object
        Set: RightAngleAxes(self: _Chart) = value
        """
        ...

    @property
    def Rotation(self) -> object:
        """
        Get: Rotation(self: _Chart) -> object
        Set: Rotation(self: _Chart) = value
        """
        ...

    @property
    def Scripts(self): # -> Scripts
        """ Get: Scripts(self: _Chart) -> Scripts """
        ...

    @property
    def SeriesNameLevel(self) -> XlSeriesNameLevel:
        """
        Get: SeriesNameLevel(self: _Chart) -> XlSeriesNameLevel
        Set: SeriesNameLevel(self: _Chart) = value
        """
        ...

    @property
    def Shapes(self) -> Shapes:
        """ Get: Shapes(self: _Chart) -> Shapes """
        ...

    @property
    def ShowAllFieldButtons(self) -> bool:
        """
        Get: ShowAllFieldButtons(self: _Chart) -> bool
        Set: ShowAllFieldButtons(self: _Chart) = value
        """
        ...

    @property
    def ShowAxisFieldButtons(self) -> bool:
        """
        Get: ShowAxisFieldButtons(self: _Chart) -> bool
        Set: ShowAxisFieldButtons(self: _Chart) = value
        """
        ...

    @property
    def ShowDataLabelsOverMaximum(self) -> bool:
        """
        Get: ShowDataLabelsOverMaximum(self: _Chart) -> bool
        Set: ShowDataLabelsOverMaximum(self: _Chart) = value
        """
        ...

    @property
    def ShowLegendFieldButtons(self) -> bool:
        """
        Get: ShowLegendFieldButtons(self: _Chart) -> bool
        Set: ShowLegendFieldButtons(self: _Chart) = value
        """
        ...

    @property
    def ShowReportFilterFieldButtons(self) -> bool:
        """
        Get: ShowReportFilterFieldButtons(self: _Chart) -> bool
        Set: ShowReportFilterFieldButtons(self: _Chart) = value
        """
        ...

    @property
    def ShowValueFieldButtons(self) -> bool:
        """
        Get: ShowValueFieldButtons(self: _Chart) -> bool
        Set: ShowValueFieldButtons(self: _Chart) = value
        """
        ...

    @property
    def ShowWindow(self) -> bool:
        """
        Get: ShowWindow(self: _Chart) -> bool
        Set: ShowWindow(self: _Chart) = value
        """
        ...

    @property
    def SideWall(self) -> Walls:
        """ Get: SideWall(self: _Chart) -> Walls """
        ...

    @property
    def SizeWithWindow(self) -> bool:
        """
        Get: SizeWithWindow(self: _Chart) -> bool
        Set: SizeWithWindow(self: _Chart) = value
        """
        ...

    @property
    def SubType(self) -> int:
        """
        Get: SubType(self: _Chart) -> int
        Set: SubType(self: _Chart) = value
        """
        ...

    @property
    def SurfaceGroup(self) -> ChartGroup:
        """ Get: SurfaceGroup(self: _Chart) -> ChartGroup """
        ...

    @property
    def Tab(self) -> Tab:
        """ Get: Tab(self: _Chart) -> Tab """
        ...

    @property
    def Type(self) -> int:
        """
        Get: Type(self: _Chart) -> int
        Set: Type(self: _Chart) = value
        """
        ...

    @property
    def Visible(self) -> XlSheetVisibility:
        """
        Get: Visible(self: _Chart) -> XlSheetVisibility
        Set: Visible(self: _Chart) = value
        """
        ...

    @property
    def Walls(self) -> Walls:
        """ Get: Walls(self: _Chart) -> Walls """
        ...

    @property
    def WallsAndGridlines2D(self) -> bool:
        """
        Get: WallsAndGridlines2D(self: _Chart) -> bool
        Set: WallsAndGridlines2D(self: _Chart) = value
        """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: _Chart) -> str
        Set: _CodeName(self: _Chart) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: _Chart) """
        ...

    def ApplyChartTemplate(self, Filename:str): # -> 
        """ ApplyChartTemplate(self: _Chart, Filename: str) """
        ...

    def ApplyCustomType(self, ChartType:XlChartType, TypeName:object): # -> 
        """ ApplyCustomType(self: _Chart, ChartType: XlChartType, TypeName: object) """
        ...

    def ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object, ShowSeriesName:object, ShowCategoryName:object, ShowValue:object, ShowPercentage:object, ShowBubbleSize:object, Separator:object): # -> 
        """ ApplyDataLabels(self: _Chart, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) """
        ...

    def ApplyLayout(self, Layout:int, ChartType:object): # -> 
        """ ApplyLayout(self: _Chart, Layout: int, ChartType: object) """
        ...

    def Arcs(self, Index:object) -> object:
        """ Arcs(self: _Chart, Index: object) -> object """
        ...

    def AreaGroups(self, Index:object) -> object:
        """ AreaGroups(self: _Chart, Index: object) -> object """
        ...

    def AutoFormat(self, Gallery:int, Format:object): # -> 
        """ AutoFormat(self: _Chart, Gallery: int, Format: object) """
        ...

    def Axes(self, Type:object, AxisGroup:XlAxisGroup) -> object:
        """ Axes(self: _Chart, Type: object, AxisGroup: XlAxisGroup) -> object """
        ...

    def BarGroups(self, Index:object) -> object:
        """ BarGroups(self: _Chart, Index: object) -> object """
        ...

    def Buttons(self, Index:object) -> object:
        """ Buttons(self: _Chart, Index: object) -> object """
        ...

    def ChartGroups(self, Index:object) -> object:
        """ ChartGroups(self: _Chart, Index: object) -> object """
        ...

    def ChartObjects(self, Index:object) -> object:
        """ ChartObjects(self: _Chart, Index: object) -> object """
        ...

    def ChartWizard(self, Source:object, Gallery:object, Format:object, PlotBy:object, CategoryLabels:object, SeriesLabels:object, HasLegend:object, Title:object, CategoryTitle:object, ValueTitle:object, ExtraTitle:object): # -> 
        """ ChartWizard(self: _Chart, Source: object, Gallery: object, Format: object, PlotBy: object, CategoryLabels: object, SeriesLabels: object, HasLegend: object, Title: object, CategoryTitle: object, ValueTitle: object, ExtraTitle: object) """
        ...

    def CheckBoxes(self, Index:object) -> object:
        """ CheckBoxes(self: _Chart, Index: object) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object): # -> 
        """ CheckSpelling(self: _Chart, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        ...

    def ClearToMatchColorStyle(self): # -> 
        """ ClearToMatchColorStyle(self: _Chart) """
        ...

    def ClearToMatchStyle(self): # -> 
        """ ClearToMatchStyle(self: _Chart) """
        ...

    def ColumnGroups(self, Index:object) -> object:
        """ ColumnGroups(self: _Chart, Index: object) -> object """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: _Chart, Before: object, After: object) """
        ...

    def CopyChartBuild(self): # -> 
        """ CopyChartBuild(self: _Chart) """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat, Size:XlPictureAppearance): # -> 
        """ CopyPicture(self: _Chart, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat, Size: XlPictureAppearance) """
        ...

    def CreatePublisher(self, Edition:object, Appearance:XlPictureAppearance, Size:XlPictureAppearance, ContainsPICT:object, ContainsBIFF:object, ContainsRTF:object, ContainsVALU:object): # -> 
        """ CreatePublisher(self: _Chart, Edition: object, Appearance: XlPictureAppearance, Size: XlPictureAppearance, ContainsPICT: object, ContainsBIFF: object, ContainsRTF: object, ContainsVALU: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: _Chart) """
        ...

    def DeleteHiddenContent(self): # -> 
        """ DeleteHiddenContent(self: _Chart) """
        ...

    def Deselect(self): # -> 
        """ Deselect(self: _Chart) """
        ...

    def DoughnutGroups(self, Index:object) -> object:
        """ DoughnutGroups(self: _Chart, Index: object) -> object """
        ...

    def DrawingObjects(self, Index:object) -> object:
        """ DrawingObjects(self: _Chart, Index: object) -> object """
        ...

    def Drawings(self, Index:object) -> object:
        """ Drawings(self: _Chart, Index: object) -> object """
        ...

    def DropDowns(self, Index:object) -> object:
        """ DropDowns(self: _Chart, Index: object) -> object """
        ...

    def Evaluate(self, Name:object) -> object:
        """ Evaluate(self: _Chart, Name: object) -> object """
        ...

    def Export(self, Filename:str, FilterName:object, Interactive:object) -> bool:
        """ Export(self: _Chart, Filename: str, FilterName: object, Interactive: object) -> bool """
        ...

    def ExportAsFixedFormat(self, Type:XlFixedFormatType, Filename:object, Quality:object, IncludeDocProperties:object, IgnorePrintAreas:object, From:object, To:object, OpenAfterPublish:object, FixedFormatExtClassPtr:object): # -> 
        """ ExportAsFixedFormat(self: _Chart, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        ...

    def FullSeriesCollection(self, Index:object) -> object:
        """ FullSeriesCollection(self: _Chart, Index: object) -> object """
        ...

    def GetChartElement(self, x:int, y:int, ElementID:int, Arg1:int, Arg2:int) -> Tuple_[int, int, int]:
        """ GetChartElement(self: _Chart, x: int, y: int, ElementID: int, Arg1: int, Arg2: int) -> (int, int, int) """
        ...

    def GroupBoxes(self, Index:object) -> object:
        """ GroupBoxes(self: _Chart, Index: object) -> object """
        ...

    def GroupObjects(self, Index:object) -> object:
        """ GroupObjects(self: _Chart, Index: object) -> object """
        ...

    def Labels(self, Index:object) -> object:
        """ Labels(self: _Chart, Index: object) -> object """
        ...

    def LineGroups(self, Index:object) -> object:
        """ LineGroups(self: _Chart, Index: object) -> object """
        ...

    def Lines(self, Index:object) -> object:
        """ Lines(self: _Chart, Index: object) -> object """
        ...

    def ListBoxes(self, Index:object) -> object:
        """ ListBoxes(self: _Chart, Index: object) -> object """
        ...

    def Location(self, Where:XlChartLocation, Name:object) -> Chart:
        """ Location(self: _Chart, Where: XlChartLocation, Name: object) -> Chart """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: _Chart, Before: object, After: object) """
        ...

    def OLEObjects(self, Index:object) -> object:
        """ OLEObjects(self: _Chart, Index: object) -> object """
        ...

    def OptionButtons(self, Index:object) -> object:
        """ OptionButtons(self: _Chart, Index: object) -> object """
        ...

    def Ovals(self, Index:object) -> object:
        """ Ovals(self: _Chart, Index: object) -> object """
        ...

    def Paste(self, Type:object): # -> 
        """ Paste(self: _Chart, Type: object) """
        ...

    def Pictures(self, Index:object) -> object:
        """ Pictures(self: _Chart, Index: object) -> object """
        ...

    def PieGroups(self, Index:object) -> object:
        """ PieGroups(self: _Chart, Index: object) -> object """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: _Chart, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOutEx(self: _Chart, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: _Chart, EnableChanges: object) """
        ...

    def Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ Protect(self: _Chart, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def RadarGroups(self, Index:object) -> object:
        """ RadarGroups(self: _Chart, Index: object) -> object """
        ...

    def Rectangles(self, Index:object) -> object:
        """ Rectangles(self: _Chart, Index: object) -> object """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: _Chart) """
        ...

    def SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object, Local:object): # -> 
        """ SaveAs(self: _Chart, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        ...

    def SaveChartTemplate(self, Filename:str): # -> 
        """ SaveChartTemplate(self: _Chart, Filename: str) """
        ...

    def ScrollBars(self, Index:object) -> object:
        """ ScrollBars(self: _Chart, Index: object) -> object """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: _Chart, Replace: object) """
        ...

    def SeriesCollection(self, Index:object) -> object:
        """ SeriesCollection(self: _Chart, Index: object) -> object """
        ...

    def SetBackgroundPicture(self, Filename:str): # -> 
        """ SetBackgroundPicture(self: _Chart, Filename: str) """
        ...

    def SetDefaultChart(self, Name:object): # -> 
        """ SetDefaultChart(self: _Chart, Name: object) """
        ...

    def SetElement(self, Element): # ->  # Not found arg types: {'Element': 'MsoChartElementType'}
        """ SetElement(self: _Chart, Element: MsoChartElementType) """
        ...

    def SetSourceData(self, Source:Range, PlotBy:object): # -> 
        """ SetSourceData(self: _Chart, Source: Range, PlotBy: object) """
        ...

    def Spinners(self, Index:object) -> object:
        """ Spinners(self: _Chart, Index: object) -> object """
        ...

    def TextBoxes(self, Index:object) -> object:
        """ TextBoxes(self: _Chart, Index: object) -> object """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: _Chart, Password: object) """
        ...

    def XYGroups(self, Index:object) -> object:
        """ XYGroups(self: _Chart, Index: object) -> object """
        ...

    def _ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object): # -> 
        """ _ApplyDataLabels(self: _Chart, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) """
        ...

    def _Dummy23(self): # -> 
        """ _Dummy23(self: _Chart) """
        ...

    def _Evaluate(self, Name:object) -> object:
        """ _Evaluate(self: _Chart, Name: object) -> object """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: _Chart, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ _Protect(self: _Chart, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def _SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ _SaveAs(self: _Chart, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...


class Chart(ChartEvents_Event, _Chart): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ChartArea: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartArea) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: ChartArea) -> object
        Set: AutoScaleFont(self: ChartArea) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ChartArea) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartArea) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: ChartArea) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: ChartArea) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ChartArea) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ChartArea) -> float
        Set: Height(self: ChartArea) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ChartArea) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ChartArea) -> float
        Set: Left(self: ChartArea) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ChartArea) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartArea) -> object """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: ChartArea) -> bool
        Set: RoundedCorners(self: ChartArea) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: ChartArea) -> bool
        Set: Shadow(self: ChartArea) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ChartArea) -> float
        Set: Top(self: ChartArea) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ChartArea) -> float
        Set: Width(self: ChartArea) = value
        """
        ...


    def Clear(self) -> object:
        """ Clear(self: ChartArea) -> object """
        ...

    def ClearContents(self) -> object:
        """ ClearContents(self: ChartArea) -> object """
        ...

    def ClearFormats(self) -> object:
        """ ClearFormats(self: ChartArea) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ChartArea) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ChartArea) -> object """
        ...


class ChartCategory: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartCategory) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartCategory) -> XlCreator """
        ...

    @property
    def IsFiltered(self) -> bool:
        """
        Get: IsFiltered(self: ChartCategory) -> bool
        Set: IsFiltered(self: ChartCategory) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ChartCategory) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartCategory) -> object """
        ...



class ChartClass(__ComObject, Chart): # skipped bases: <type '_Chart'>, <type 'ChartEvents_Event'>, <type 'object'>
    """ ChartClass() """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartClass) -> Application """
        ...

    @property
    def Area3DGroup(self) -> ChartGroup:
        """ Get: Area3DGroup(self: ChartClass) -> ChartGroup """
        ...

    @property
    def AutoScaling(self) -> bool:
        """
        Get: AutoScaling(self: ChartClass) -> bool
        Set: AutoScaling(self: ChartClass) = value
        """
        ...

    @property
    def BackWall(self) -> Walls:
        """ Get: BackWall(self: ChartClass) -> Walls """
        ...

    @property
    def Bar3DGroup(self) -> ChartGroup:
        """ Get: Bar3DGroup(self: ChartClass) -> ChartGroup """
        ...

    @property
    def BarShape(self) -> XlBarShape:
        """
        Get: BarShape(self: ChartClass) -> XlBarShape
        Set: BarShape(self: ChartClass) = value
        """
        ...

    @property
    def CategoryLabelLevel(self) -> XlCategoryLabelLevel:
        """
        Get: CategoryLabelLevel(self: ChartClass) -> XlCategoryLabelLevel
        Set: CategoryLabelLevel(self: ChartClass) = value
        """
        ...

    @property
    def ChartArea(self) -> ChartArea:
        """ Get: ChartArea(self: ChartClass) -> ChartArea """
        ...

    @property
    def ChartColor(self) -> object:
        """
        Get: ChartColor(self: ChartClass) -> object
        Set: ChartColor(self: ChartClass) = value
        """
        ...

    @property
    def ChartStyle(self) -> object:
        """
        Get: ChartStyle(self: ChartClass) -> object
        Set: ChartStyle(self: ChartClass) = value
        """
        ...

    @property
    def ChartTitle(self) -> ChartTitle:
        """ Get: ChartTitle(self: ChartClass) -> ChartTitle """
        ...

    @property
    def ChartType(self) -> XlChartType:
        """
        Get: ChartType(self: ChartClass) -> XlChartType
        Set: ChartType(self: ChartClass) = value
        """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: ChartClass) -> str """
        ...

    @property
    def Column3DGroup(self) -> ChartGroup:
        """ Get: Column3DGroup(self: ChartClass) -> ChartGroup """
        ...

    @property
    def Corners(self) -> Corners:
        """ Get: Corners(self: ChartClass) -> Corners """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartClass) -> XlCreator """
        ...

    @property
    def DataTable(self) -> DataTable:
        """ Get: DataTable(self: ChartClass) -> DataTable """
        ...

    @property
    def DepthPercent(self) -> int:
        """
        Get: DepthPercent(self: ChartClass) -> int
        Set: DepthPercent(self: ChartClass) = value
        """
        ...

    @property
    def DisplayBlanksAs(self) -> XlDisplayBlanksAs:
        """
        Get: DisplayBlanksAs(self: ChartClass) -> XlDisplayBlanksAs
        Set: DisplayBlanksAs(self: ChartClass) = value
        """
        ...

    @property
    def Dummy24(self) -> bool:
        """
        Get: Dummy24(self: ChartClass) -> bool
        Set: Dummy24(self: ChartClass) = value
        """
        ...

    @property
    def Dummy25(self) -> bool:
        """
        Get: Dummy25(self: ChartClass) -> bool
        Set: Dummy25(self: ChartClass) = value
        """
        ...

    @property
    def Elevation(self) -> int:
        """
        Get: Elevation(self: ChartClass) -> int
        Set: Elevation(self: ChartClass) = value
        """
        ...

    @property
    def Floor(self) -> Floor:
        """ Get: Floor(self: ChartClass) -> Floor """
        ...

    @property
    def GapDepth(self) -> int:
        """
        Get: GapDepth(self: ChartClass) -> int
        Set: GapDepth(self: ChartClass) = value
        """
        ...

    @property
    def HasDataTable(self) -> bool:
        """
        Get: HasDataTable(self: ChartClass) -> bool
        Set: HasDataTable(self: ChartClass) = value
        """
        ...

    @property
    def HasHiddenContent(self) -> bool:
        """ Get: HasHiddenContent(self: ChartClass) -> bool """
        ...

    @property
    def HasLegend(self) -> bool:
        """
        Get: HasLegend(self: ChartClass) -> bool
        Set: HasLegend(self: ChartClass) = value
        """
        ...

    @property
    def HasPivotFields(self) -> bool:
        """
        Get: HasPivotFields(self: ChartClass) -> bool
        Set: HasPivotFields(self: ChartClass) = value
        """
        ...

    @property
    def HasTitle(self) -> bool:
        """
        Get: HasTitle(self: ChartClass) -> bool
        Set: HasTitle(self: ChartClass) = value
        """
        ...

    @property
    def HeightPercent(self) -> int:
        """
        Get: HeightPercent(self: ChartClass) -> int
        Set: HeightPercent(self: ChartClass) = value
        """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: ChartClass) -> Hyperlinks """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ChartClass) -> int """
        ...

    @property
    def Legend(self) -> Legend:
        """ Get: Legend(self: ChartClass) -> Legend """
        ...

    @property
    def Line3DGroup(self) -> ChartGroup:
        """ Get: Line3DGroup(self: ChartClass) -> ChartGroup """
        ...

    @property
    def MailEnvelope(self): # -> MsoEnvelope
        """ Get: MailEnvelope(self: ChartClass) -> MsoEnvelope """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ChartClass) -> str
        Set: Name(self: ChartClass) = value
        """
        ...

    @property
    def Next(self) -> object:
        """ Get: Next(self: ChartClass) -> object """
        ...

    @property
    def OnDoubleClick(self) -> str:
        """
        Get: OnDoubleClick(self: ChartClass) -> str
        Set: OnDoubleClick(self: ChartClass) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: ChartClass) -> str
        Set: OnSheetActivate(self: ChartClass) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: ChartClass) -> str
        Set: OnSheetDeactivate(self: ChartClass) = value
        """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """ Get: PageSetup(self: ChartClass) -> PageSetup """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartClass) -> object """
        ...

    @property
    def Perspective(self) -> int:
        """
        Get: Perspective(self: ChartClass) -> int
        Set: Perspective(self: ChartClass) = value
        """
        ...

    @property
    def Pie3DGroup(self) -> ChartGroup:
        """ Get: Pie3DGroup(self: ChartClass) -> ChartGroup """
        ...

    @property
    def PivotLayout(self) -> PivotLayout:
        """ Get: PivotLayout(self: ChartClass) -> PivotLayout """
        ...

    @property
    def PlotArea(self) -> PlotArea:
        """ Get: PlotArea(self: ChartClass) -> PlotArea """
        ...

    @property
    def PlotBy(self) -> XlRowCol:
        """
        Get: PlotBy(self: ChartClass) -> XlRowCol
        Set: PlotBy(self: ChartClass) = value
        """
        ...

    @property
    def PlotVisibleOnly(self) -> bool:
        """
        Get: PlotVisibleOnly(self: ChartClass) -> bool
        Set: PlotVisibleOnly(self: ChartClass) = value
        """
        ...

    @property
    def Previous(self) -> object:
        """ Get: Previous(self: ChartClass) -> object """
        ...

    @property
    def PrintedCommentPages(self) -> int:
        """ Get: PrintedCommentPages(self: ChartClass) -> int """
        ...

    @property
    def ProtectContents(self) -> bool:
        """ Get: ProtectContents(self: ChartClass) -> bool """
        ...

    @property
    def ProtectData(self) -> bool:
        """
        Get: ProtectData(self: ChartClass) -> bool
        Set: ProtectData(self: ChartClass) = value
        """
        ...

    @property
    def ProtectDrawingObjects(self) -> bool:
        """ Get: ProtectDrawingObjects(self: ChartClass) -> bool """
        ...

    @property
    def ProtectFormatting(self) -> bool:
        """
        Get: ProtectFormatting(self: ChartClass) -> bool
        Set: ProtectFormatting(self: ChartClass) = value
        """
        ...

    @property
    def ProtectGoalSeek(self) -> bool:
        """
        Get: ProtectGoalSeek(self: ChartClass) -> bool
        Set: ProtectGoalSeek(self: ChartClass) = value
        """
        ...

    @property
    def ProtectionMode(self) -> bool:
        """ Get: ProtectionMode(self: ChartClass) -> bool """
        ...

    @property
    def ProtectSelection(self) -> bool:
        """
        Get: ProtectSelection(self: ChartClass) -> bool
        Set: ProtectSelection(self: ChartClass) = value
        """
        ...

    @property
    def RightAngleAxes(self) -> object:
        """
        Get: RightAngleAxes(self: ChartClass) -> object
        Set: RightAngleAxes(self: ChartClass) = value
        """
        ...

    @property
    def Rotation(self) -> object:
        """
        Get: Rotation(self: ChartClass) -> object
        Set: Rotation(self: ChartClass) = value
        """
        ...

    @property
    def Scripts(self): # -> Scripts
        """ Get: Scripts(self: ChartClass) -> Scripts """
        ...

    @property
    def SeriesNameLevel(self) -> XlSeriesNameLevel:
        """
        Get: SeriesNameLevel(self: ChartClass) -> XlSeriesNameLevel
        Set: SeriesNameLevel(self: ChartClass) = value
        """
        ...

    @property
    def Shapes(self) -> Shapes:
        """ Get: Shapes(self: ChartClass) -> Shapes """
        ...

    @property
    def ShowAllFieldButtons(self) -> bool:
        """
        Get: ShowAllFieldButtons(self: ChartClass) -> bool
        Set: ShowAllFieldButtons(self: ChartClass) = value
        """
        ...

    @property
    def ShowAxisFieldButtons(self) -> bool:
        """
        Get: ShowAxisFieldButtons(self: ChartClass) -> bool
        Set: ShowAxisFieldButtons(self: ChartClass) = value
        """
        ...

    @property
    def ShowDataLabelsOverMaximum(self) -> bool:
        """
        Get: ShowDataLabelsOverMaximum(self: ChartClass) -> bool
        Set: ShowDataLabelsOverMaximum(self: ChartClass) = value
        """
        ...

    @property
    def ShowLegendFieldButtons(self) -> bool:
        """
        Get: ShowLegendFieldButtons(self: ChartClass) -> bool
        Set: ShowLegendFieldButtons(self: ChartClass) = value
        """
        ...

    @property
    def ShowReportFilterFieldButtons(self) -> bool:
        """
        Get: ShowReportFilterFieldButtons(self: ChartClass) -> bool
        Set: ShowReportFilterFieldButtons(self: ChartClass) = value
        """
        ...

    @property
    def ShowValueFieldButtons(self) -> bool:
        """
        Get: ShowValueFieldButtons(self: ChartClass) -> bool
        Set: ShowValueFieldButtons(self: ChartClass) = value
        """
        ...

    @property
    def ShowWindow(self) -> bool:
        """
        Get: ShowWindow(self: ChartClass) -> bool
        Set: ShowWindow(self: ChartClass) = value
        """
        ...

    @property
    def SideWall(self) -> Walls:
        """ Get: SideWall(self: ChartClass) -> Walls """
        ...

    @property
    def SizeWithWindow(self) -> bool:
        """
        Get: SizeWithWindow(self: ChartClass) -> bool
        Set: SizeWithWindow(self: ChartClass) = value
        """
        ...

    @property
    def SubType(self) -> int:
        """
        Get: SubType(self: ChartClass) -> int
        Set: SubType(self: ChartClass) = value
        """
        ...

    @property
    def SurfaceGroup(self) -> ChartGroup:
        """ Get: SurfaceGroup(self: ChartClass) -> ChartGroup """
        ...

    @property
    def Tab(self) -> Tab:
        """ Get: Tab(self: ChartClass) -> Tab """
        ...

    @property
    def Type(self) -> int:
        """
        Get: Type(self: ChartClass) -> int
        Set: Type(self: ChartClass) = value
        """
        ...

    @property
    def Visible(self) -> XlSheetVisibility:
        """
        Get: Visible(self: ChartClass) -> XlSheetVisibility
        Set: Visible(self: ChartClass) = value
        """
        ...

    @property
    def Walls(self) -> Walls:
        """ Get: Walls(self: ChartClass) -> Walls """
        ...

    @property
    def WallsAndGridlines2D(self) -> bool:
        """
        Get: WallsAndGridlines2D(self: ChartClass) -> bool
        Set: WallsAndGridlines2D(self: ChartClass) = value
        """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: ChartClass) -> str
        Set: _CodeName(self: ChartClass) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: ChartClass) """
        ...

    def add_Activate(self): # -> 
        """ add_Activate(self: ChartClass, : ChartEvents_ActivateEventHandler) """
        ...

    def add_BeforeDoubleClick(self): # -> 
        """ add_BeforeDoubleClick(self: ChartClass, : ChartEvents_BeforeDoubleClickEventHandler) """
        ...

    def add_BeforeRightClick(self): # -> 
        """ add_BeforeRightClick(self: ChartClass, : ChartEvents_BeforeRightClickEventHandler) """
        ...

    def add_Calculate(self): # -> 
        """ add_Calculate(self: ChartClass, : ChartEvents_CalculateEventHandler) """
        ...

    def add_Deactivate(self): # -> 
        """ add_Deactivate(self: ChartClass, : ChartEvents_DeactivateEventHandler) """
        ...

    def add_DragOver(self): # -> 
        """ add_DragOver(self: ChartClass, : ChartEvents_DragOverEventHandler) """
        ...

    def add_DragPlot(self): # -> 
        """ add_DragPlot(self: ChartClass, : ChartEvents_DragPlotEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: ChartClass, : ChartEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: ChartClass, : ChartEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: ChartClass, : ChartEvents_MouseUpEventHandler) """
        ...

    def add_Resize(self): # -> 
        """ add_Resize(self: ChartClass, : ChartEvents_ResizeEventHandler) """
        ...

    def add_Select(self): # -> 
        """ add_Select(self: ChartClass, : ChartEvents_SelectEventHandler) """
        ...

    def add_SeriesChange(self): # -> 
        """ add_SeriesChange(self: ChartClass, : ChartEvents_SeriesChangeEventHandler) """
        ...

    def ApplyChartTemplate(self, Filename:str): # -> 
        """ ApplyChartTemplate(self: ChartClass, Filename: str) """
        ...

    def ApplyCustomType(self, ChartType:XlChartType, TypeName:object): # -> 
        """ ApplyCustomType(self: ChartClass, ChartType: XlChartType, TypeName: object) """
        ...

    def ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object, ShowSeriesName:object, ShowCategoryName:object, ShowValue:object, ShowPercentage:object, ShowBubbleSize:object, Separator:object): # -> 
        """ ApplyDataLabels(self: ChartClass, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) """
        ...

    def ApplyLayout(self, Layout:int, ChartType:object): # -> 
        """ ApplyLayout(self: ChartClass, Layout: int, ChartType: object) """
        ...

    def Arcs(self, Index:object) -> object:
        """ Arcs(self: ChartClass, Index: object) -> object """
        ...

    def AreaGroups(self, Index:object) -> object:
        """ AreaGroups(self: ChartClass, Index: object) -> object """
        ...

    def AutoFormat(self, Gallery:int, Format:object): # -> 
        """ AutoFormat(self: ChartClass, Gallery: int, Format: object) """
        ...

    def Axes(self, Type:object, AxisGroup:XlAxisGroup) -> object:
        """ Axes(self: ChartClass, Type: object, AxisGroup: XlAxisGroup) -> object """
        ...

    def BarGroups(self, Index:object) -> object:
        """ BarGroups(self: ChartClass, Index: object) -> object """
        ...

    def Buttons(self, Index:object) -> object:
        """ Buttons(self: ChartClass, Index: object) -> object """
        ...

    def ChartGroups(self, Index:object) -> object:
        """ ChartGroups(self: ChartClass, Index: object) -> object """
        ...

    def ChartObjects(self, Index:object) -> object:
        """ ChartObjects(self: ChartClass, Index: object) -> object """
        ...

    def ChartWizard(self, Source:object, Gallery:object, Format:object, PlotBy:object, CategoryLabels:object, SeriesLabels:object, HasLegend:object, Title:object, CategoryTitle:object, ValueTitle:object, ExtraTitle:object): # -> 
        """ ChartWizard(self: ChartClass, Source: object, Gallery: object, Format: object, PlotBy: object, CategoryLabels: object, SeriesLabels: object, HasLegend: object, Title: object, CategoryTitle: object, ValueTitle: object, ExtraTitle: object) """
        ...

    def CheckBoxes(self, Index:object) -> object:
        """ CheckBoxes(self: ChartClass, Index: object) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object): # -> 
        """ CheckSpelling(self: ChartClass, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        ...

    def ClearToMatchColorStyle(self): # -> 
        """ ClearToMatchColorStyle(self: ChartClass) """
        ...

    def ClearToMatchStyle(self): # -> 
        """ ClearToMatchStyle(self: ChartClass) """
        ...

    def ColumnGroups(self, Index:object) -> object:
        """ ColumnGroups(self: ChartClass, Index: object) -> object """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: ChartClass, Before: object, After: object) """
        ...

    def CopyChartBuild(self): # -> 
        """ CopyChartBuild(self: ChartClass) """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat, Size:XlPictureAppearance): # -> 
        """ CopyPicture(self: ChartClass, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat, Size: XlPictureAppearance) """
        ...

    def CreatePublisher(self, Edition:object, Appearance:XlPictureAppearance, Size:XlPictureAppearance, ContainsPICT:object, ContainsBIFF:object, ContainsRTF:object, ContainsVALU:object): # -> 
        """ CreatePublisher(self: ChartClass, Edition: object, Appearance: XlPictureAppearance, Size: XlPictureAppearance, ContainsPICT: object, ContainsBIFF: object, ContainsRTF: object, ContainsVALU: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: ChartClass) """
        ...

    def DeleteHiddenContent(self): # -> 
        """ DeleteHiddenContent(self: ChartClass) """
        ...

    def Deselect(self): # -> 
        """ Deselect(self: ChartClass) """
        ...

    def DoughnutGroups(self, Index:object) -> object:
        """ DoughnutGroups(self: ChartClass, Index: object) -> object """
        ...

    def DrawingObjects(self, Index:object) -> object:
        """ DrawingObjects(self: ChartClass, Index: object) -> object """
        ...

    def Drawings(self, Index:object) -> object:
        """ Drawings(self: ChartClass, Index: object) -> object """
        ...

    def DropDowns(self, Index:object) -> object:
        """ DropDowns(self: ChartClass, Index: object) -> object """
        ...

    def Evaluate(self, Name:object) -> object:
        """ Evaluate(self: ChartClass, Name: object) -> object """
        ...

    def Export(self, Filename:str, FilterName:object, Interactive:object) -> bool:
        """ Export(self: ChartClass, Filename: str, FilterName: object, Interactive: object) -> bool """
        ...

    def ExportAsFixedFormat(self, Type:XlFixedFormatType, Filename:object, Quality:object, IncludeDocProperties:object, IgnorePrintAreas:object, From:object, To:object, OpenAfterPublish:object, FixedFormatExtClassPtr:object): # -> 
        """ ExportAsFixedFormat(self: ChartClass, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        ...

    def FullSeriesCollection(self, Index:object) -> object:
        """ FullSeriesCollection(self: ChartClass, Index: object) -> object """
        ...

    def GetChartElement(self, x:int, y:int, ElementID:int, Arg1:int, Arg2:int) -> Tuple_[int, int, int]:
        """ GetChartElement(self: ChartClass, x: int, y: int, ElementID: int, Arg1: int, Arg2: int) -> (int, int, int) """
        ...

    def GroupBoxes(self, Index:object) -> object:
        """ GroupBoxes(self: ChartClass, Index: object) -> object """
        ...

    def GroupObjects(self, Index:object) -> object:
        """ GroupObjects(self: ChartClass, Index: object) -> object """
        ...

    def Labels(self, Index:object) -> object:
        """ Labels(self: ChartClass, Index: object) -> object """
        ...

    def LineGroups(self, Index:object) -> object:
        """ LineGroups(self: ChartClass, Index: object) -> object """
        ...

    def Lines(self, Index:object) -> object:
        """ Lines(self: ChartClass, Index: object) -> object """
        ...

    def ListBoxes(self, Index:object) -> object:
        """ ListBoxes(self: ChartClass, Index: object) -> object """
        ...

    def Location(self, Where:XlChartLocation, Name:object) -> Chart:
        """ Location(self: ChartClass, Where: XlChartLocation, Name: object) -> Chart """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: ChartClass, Before: object, After: object) """
        ...

    def OLEObjects(self, Index:object) -> object:
        """ OLEObjects(self: ChartClass, Index: object) -> object """
        ...

    def OptionButtons(self, Index:object) -> object:
        """ OptionButtons(self: ChartClass, Index: object) -> object """
        ...

    def Ovals(self, Index:object) -> object:
        """ Ovals(self: ChartClass, Index: object) -> object """
        ...

    def Paste(self, Type:object): # -> 
        """ Paste(self: ChartClass, Type: object) """
        ...

    def Pictures(self, Index:object) -> object:
        """ Pictures(self: ChartClass, Index: object) -> object """
        ...

    def PieGroups(self, Index:object) -> object:
        """ PieGroups(self: ChartClass, Index: object) -> object """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: ChartClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOutEx(self: ChartClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: ChartClass, EnableChanges: object) """
        ...

    def Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ Protect(self: ChartClass, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def RadarGroups(self, Index:object) -> object:
        """ RadarGroups(self: ChartClass, Index: object) -> object """
        ...

    def Rectangles(self, Index:object) -> object:
        """ Rectangles(self: ChartClass, Index: object) -> object """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: ChartClass) """
        ...

    def remove_Activate(self): # -> 
        """ remove_Activate(self: ChartClass, : ChartEvents_ActivateEventHandler) """
        ...

    def remove_BeforeDoubleClick(self): # -> 
        """ remove_BeforeDoubleClick(self: ChartClass, : ChartEvents_BeforeDoubleClickEventHandler) """
        ...

    def remove_BeforeRightClick(self): # -> 
        """ remove_BeforeRightClick(self: ChartClass, : ChartEvents_BeforeRightClickEventHandler) """
        ...

    def remove_Calculate(self): # -> 
        """ remove_Calculate(self: ChartClass, : ChartEvents_CalculateEventHandler) """
        ...

    def remove_Deactivate(self): # -> 
        """ remove_Deactivate(self: ChartClass, : ChartEvents_DeactivateEventHandler) """
        ...

    def remove_DragOver(self): # -> 
        """ remove_DragOver(self: ChartClass, : ChartEvents_DragOverEventHandler) """
        ...

    def remove_DragPlot(self): # -> 
        """ remove_DragPlot(self: ChartClass, : ChartEvents_DragPlotEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: ChartClass, : ChartEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: ChartClass, : ChartEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: ChartClass, : ChartEvents_MouseUpEventHandler) """
        ...

    def remove_Resize(self): # -> 
        """ remove_Resize(self: ChartClass, : ChartEvents_ResizeEventHandler) """
        ...

    def remove_Select(self): # -> 
        """ remove_Select(self: ChartClass, : ChartEvents_SelectEventHandler) """
        ...

    def remove_SeriesChange(self): # -> 
        """ remove_SeriesChange(self: ChartClass, : ChartEvents_SeriesChangeEventHandler) """
        ...

    def SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object, Local:object): # -> 
        """ SaveAs(self: ChartClass, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        ...

    def SaveChartTemplate(self, Filename:str): # -> 
        """ SaveChartTemplate(self: ChartClass, Filename: str) """
        ...

    def ScrollBars(self, Index:object) -> object:
        """ ScrollBars(self: ChartClass, Index: object) -> object """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: ChartClass, Replace: object) """
        ...

    def SeriesCollection(self, Index:object) -> object:
        """ SeriesCollection(self: ChartClass, Index: object) -> object """
        ...

    def SetBackgroundPicture(self, Filename:str): # -> 
        """ SetBackgroundPicture(self: ChartClass, Filename: str) """
        ...

    def SetDefaultChart(self, Name:object): # -> 
        """ SetDefaultChart(self: ChartClass, Name: object) """
        ...

    def SetElement(self, Element): # ->  # Not found arg types: {'Element': 'MsoChartElementType'}
        """ SetElement(self: ChartClass, Element: MsoChartElementType) """
        ...

    def SetSourceData(self, Source:Range, PlotBy:object): # -> 
        """ SetSourceData(self: ChartClass, Source: Range, PlotBy: object) """
        ...

    def Spinners(self, Index:object) -> object:
        """ Spinners(self: ChartClass, Index: object) -> object """
        ...

    def TextBoxes(self, Index:object) -> object:
        """ TextBoxes(self: ChartClass, Index: object) -> object """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: ChartClass, Password: object) """
        ...

    def XYGroups(self, Index:object) -> object:
        """ XYGroups(self: ChartClass, Index: object) -> object """
        ...

    def _ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object): # -> 
        """ _ApplyDataLabels(self: ChartClass, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) """
        ...

    def _Dummy23(self): # -> 
        """ _Dummy23(self: ChartClass) """
        ...

    def _Evaluate(self, Name:object) -> object:
        """ _Evaluate(self: ChartClass, Name: object) -> object """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: ChartClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ _Protect(self: ChartClass, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def _SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ _SaveAs(self: ChartClass, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...

    BeforeDoubleClick = ...
    BeforeRightClick = ...
    Calculate = ...
    ChartEvents_Event_Activate = ...
    ChartEvents_Event_Select = ...
    Deactivate = ...
    DragOver = ...
    DragPlot = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...
    Resize = ...
    SeriesChange = ...


class ChartColorFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartColorFormat) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartColorFormat) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartColorFormat) -> object """
        ...

    @property
    def RGB(self) -> int:
        """ Get: RGB(self: ChartColorFormat) -> int """
        ...

    @property
    def SchemeColor(self) -> int:
        """
        Get: SchemeColor(self: ChartColorFormat) -> int
        Set: SchemeColor(self: ChartColorFormat) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: ChartColorFormat) -> int """
        ...

    @property
    def _Default(self) -> int:
        """ Get: _Default(self: ChartColorFormat) -> int """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ChartEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Activate(self): # -> 
        """ Activate(self: ChartEvents) """
        ...

    def BeforeDoubleClick(self, ElementID, Arg1, Arg2, Cancel) -> bool:
        """ BeforeDoubleClick(self: ChartEvents, ElementID: int, Arg1: int, Arg2: int) -> bool """
        ...

    def BeforeRightClick(self, Cancel) -> bool:
        """ BeforeRightClick(self: ChartEvents) -> bool """
        ...

    def Calculate(self): # -> 
        """ Calculate(self: ChartEvents) """
        ...

    def Deactivate(self): # -> 
        """ Deactivate(self: ChartEvents) """
        ...

    def DragOver(self): # -> 
        """ DragOver(self: ChartEvents) """
        ...

    def DragPlot(self): # -> 
        """ DragPlot(self: ChartEvents) """
        ...

    def MouseDown(self, Button:int, Shift:int, x:int, y:int): # -> 
        """ MouseDown(self: ChartEvents, Button: int, Shift: int, x: int, y: int) """
        ...

    def MouseMove(self, Button:int, Shift:int, x:int, y:int): # -> 
        """ MouseMove(self: ChartEvents, Button: int, Shift: int, x: int, y: int) """
        ...

    def MouseUp(self, Button:int, Shift:int, x:int, y:int): # -> 
        """ MouseUp(self: ChartEvents, Button: int, Shift: int, x: int, y: int) """
        ...

    def Resize(self): # -> 
        """ Resize(self: ChartEvents) """
        ...

    def Select(self, ElementID:int, Arg1:int, Arg2:int): # -> 
        """ Select(self: ChartEvents, ElementID: int, Arg1: int, Arg2: int) """
        ...

    def SeriesChange(self, SeriesIndex:int, PointIndex:int): # -> 
        """ SeriesChange(self: ChartEvents, SeriesIndex: int, PointIndex: int) """
        ...


class ChartEvents_ActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_ActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ChartEvents_ActivateEventHandler) """
        ...


class ChartEvents_BeforeDoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_BeforeDoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, ElementID, Arg1, Arg2, Cancel) -> bool:
        """ Invoke(self: ChartEvents_BeforeDoubleClickEventHandler, ElementID: int, Arg1: int, Arg2: int) -> bool """
        ...


class ChartEvents_BeforeRightClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_BeforeRightClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ChartEvents_BeforeRightClickEventHandler) -> bool """
        ...


class ChartEvents_CalculateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_CalculateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ChartEvents_CalculateEventHandler) """
        ...


class ChartEvents_DeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_DeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ChartEvents_DeactivateEventHandler) """
        ...


class ChartEvents_DragOverEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_DragOverEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ChartEvents_DragOverEventHandler) """
        ...


class ChartEvents_DragPlotEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_DragPlotEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ChartEvents_DragPlotEventHandler) """
        ...


class ChartEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:int, Shift:int, x:int, y:int): # -> 
        """ Invoke(self: ChartEvents_MouseDownEventHandler, Button: int, Shift: int, x: int, y: int) """
        ...


class ChartEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:int, Shift:int, x:int, y:int): # -> 
        """ Invoke(self: ChartEvents_MouseMoveEventHandler, Button: int, Shift: int, x: int, y: int) """
        ...


class ChartEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:int, Shift:int, x:int, y:int): # -> 
        """ Invoke(self: ChartEvents_MouseUpEventHandler, Button: int, Shift: int, x: int, y: int) """
        ...


class ChartEvents_ResizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_ResizeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ChartEvents_ResizeEventHandler) """
        ...


class ChartEvents_SelectEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_SelectEventHandler(: object, : UIntPtr) """
    def Invoke(self, ElementID:int, Arg1:int, Arg2:int): # -> 
        """ Invoke(self: ChartEvents_SelectEventHandler, ElementID: int, Arg1: int, Arg2: int) """
        ...


class ChartEvents_SeriesChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ChartEvents_SeriesChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, SeriesIndex:int, PointIndex:int): # -> 
        """ Invoke(self: ChartEvents_SeriesChangeEventHandler, SeriesIndex: int, PointIndex: int) """
        ...


class ChartEvents_SinkHelper(ChartEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_ActivateDelegate = ...
    m_BeforeDoubleClickDelegate = ...
    m_BeforeRightClickDelegate = ...
    m_CalculateDelegate = ...
    m_DeactivateDelegate = ...
    m_DragOverDelegate = ...
    m_DragPlotDelegate = ...
    m_dwCookie = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...
    m_ResizeDelegate = ...
    m_SelectDelegate = ...
    m_SeriesChangeDelegate = ...


class ChartFillFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartFillFormat) -> Application """
        ...

    @property
    def BackColor(self) -> ChartColorFormat:
        """ Get: BackColor(self: ChartFillFormat) -> ChartColorFormat """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartFillFormat) -> XlCreator """
        ...

    @property
    def ForeColor(self) -> ChartColorFormat:
        """ Get: ForeColor(self: ChartFillFormat) -> ChartColorFormat """
        ...

    @property
    def GradientColorType(self): # -> MsoGradientColorType
        """ Get: GradientColorType(self: ChartFillFormat) -> MsoGradientColorType """
        ...

    @property
    def GradientDegree(self) -> Single:
        """ Get: GradientDegree(self: ChartFillFormat) -> Single """
        ...

    @property
    def GradientStyle(self): # -> MsoGradientStyle
        """ Get: GradientStyle(self: ChartFillFormat) -> MsoGradientStyle """
        ...

    @property
    def GradientVariant(self) -> int:
        """ Get: GradientVariant(self: ChartFillFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartFillFormat) -> object """
        ...

    @property
    def Pattern(self): # -> MsoPatternType
        """ Get: Pattern(self: ChartFillFormat) -> MsoPatternType """
        ...

    @property
    def PresetGradientType(self): # -> MsoPresetGradientType
        """ Get: PresetGradientType(self: ChartFillFormat) -> MsoPresetGradientType """
        ...

    @property
    def PresetTexture(self): # -> MsoPresetTexture
        """ Get: PresetTexture(self: ChartFillFormat) -> MsoPresetTexture """
        ...

    @property
    def TextureName(self) -> str:
        """ Get: TextureName(self: ChartFillFormat) -> str """
        ...

    @property
    def TextureType(self): # -> MsoTextureType
        """ Get: TextureType(self: ChartFillFormat) -> MsoTextureType """
        ...

    @property
    def Type(self): # -> MsoFillType
        """ Get: Type(self: ChartFillFormat) -> MsoFillType """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: ChartFillFormat) -> MsoTriState
        Set: Visible(self: ChartFillFormat) = value
        """
        ...


    def OneColorGradient(self, Style, Variant:int, Degree:Single): # ->  # Not found arg types: {'Style': 'MsoGradientStyle'}
        """ OneColorGradient(self: ChartFillFormat, Style: MsoGradientStyle, Variant: int, Degree: Single) """
        ...

    def Patterned(self, Pattern): # ->  # Not found arg types: {'Pattern': 'MsoPatternType'}
        """ Patterned(self: ChartFillFormat, Pattern: MsoPatternType) """
        ...

    def PresetGradient(self, Style, Variant:int, PresetGradientType): # ->  # Not found arg types: {'Style': 'MsoGradientStyle', 'PresetGradientType': 'MsoPresetGradientType'}
        """ PresetGradient(self: ChartFillFormat, Style: MsoGradientStyle, Variant: int, PresetGradientType: MsoPresetGradientType) """
        ...

    def PresetTextured(self, PresetTexture): # ->  # Not found arg types: {'PresetTexture': 'MsoPresetTexture'}
        """ PresetTextured(self: ChartFillFormat, PresetTexture: MsoPresetTexture) """
        ...

    def Solid(self): # -> 
        """ Solid(self: ChartFillFormat) """
        ...

    def TwoColorGradient(self, Style, Variant:int): # ->  # Not found arg types: {'Style': 'MsoGradientStyle'}
        """ TwoColorGradient(self: ChartFillFormat, Style: MsoGradientStyle, Variant: int) """
        ...

    def UserPicture(self, PictureFile:object, PictureFormat:object, PictureStackUnit:object, PicturePlacement:object): # -> 
        """ UserPicture(self: ChartFillFormat, PictureFile: object, PictureFormat: object, PictureStackUnit: object, PicturePlacement: object) """
        ...

    def UserTextured(self, TextureFile:str): # -> 
        """ UserTextured(self: ChartFillFormat, TextureFile: str) """
        ...


class ChartFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Adjustments(self) -> Adjustments:
        """ Get: Adjustments(self: ChartFormat) -> Adjustments """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartFormat) -> Application """
        ...

    @property
    def AutoShapeType(self): # -> MsoAutoShapeType
        """
        Get: AutoShapeType(self: ChartFormat) -> MsoAutoShapeType
        Set: AutoShapeType(self: ChartFormat) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartFormat) -> XlCreator """
        ...

    @property
    def Fill(self) -> FillFormat:
        """ Get: Fill(self: ChartFormat) -> FillFormat """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """ Get: Glow(self: ChartFormat) -> GlowFormat """
        ...

    @property
    def Line(self) -> LineFormat:
        """ Get: Line(self: ChartFormat) -> LineFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartFormat) -> object """
        ...

    @property
    def PictureFormat(self) -> PictureFormat:
        """ Get: PictureFormat(self: ChartFormat) -> PictureFormat """
        ...

    @property
    def Shadow(self) -> ShadowFormat:
        """ Get: Shadow(self: ChartFormat) -> ShadowFormat """
        ...

    @property
    def SoftEdge(self) -> SoftEdgeFormat:
        """ Get: SoftEdge(self: ChartFormat) -> SoftEdgeFormat """
        ...

    @property
    def TextFrame2(self) -> TextFrame2:
        """ Get: TextFrame2(self: ChartFormat) -> TextFrame2 """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """ Get: ThreeD(self: ChartFormat) -> ThreeDFormat """
        ...



class ChartGroup: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartGroup) -> Application """
        ...

    @property
    def AxisGroup(self) -> XlAxisGroup:
        """
        Get: AxisGroup(self: ChartGroup) -> XlAxisGroup
        Set: AxisGroup(self: ChartGroup) = value
        """
        ...

    @property
    def BubbleScale(self) -> int:
        """
        Get: BubbleScale(self: ChartGroup) -> int
        Set: BubbleScale(self: ChartGroup) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartGroup) -> XlCreator """
        ...

    @property
    def DoughnutHoleSize(self) -> int:
        """
        Get: DoughnutHoleSize(self: ChartGroup) -> int
        Set: DoughnutHoleSize(self: ChartGroup) = value
        """
        ...

    @property
    def DownBars(self) -> DownBars:
        """ Get: DownBars(self: ChartGroup) -> DownBars """
        ...

    @property
    def DropLines(self) -> DropLines:
        """ Get: DropLines(self: ChartGroup) -> DropLines """
        ...

    @property
    def FirstSliceAngle(self) -> int:
        """
        Get: FirstSliceAngle(self: ChartGroup) -> int
        Set: FirstSliceAngle(self: ChartGroup) = value
        """
        ...

    @property
    def GapWidth(self) -> int:
        """
        Get: GapWidth(self: ChartGroup) -> int
        Set: GapWidth(self: ChartGroup) = value
        """
        ...

    @property
    def Has3DShading(self) -> bool:
        """
        Get: Has3DShading(self: ChartGroup) -> bool
        Set: Has3DShading(self: ChartGroup) = value
        """
        ...

    @property
    def HasDropLines(self) -> bool:
        """
        Get: HasDropLines(self: ChartGroup) -> bool
        Set: HasDropLines(self: ChartGroup) = value
        """
        ...

    @property
    def HasHiLoLines(self) -> bool:
        """
        Get: HasHiLoLines(self: ChartGroup) -> bool
        Set: HasHiLoLines(self: ChartGroup) = value
        """
        ...

    @property
    def HasRadarAxisLabels(self) -> bool:
        """
        Get: HasRadarAxisLabels(self: ChartGroup) -> bool
        Set: HasRadarAxisLabels(self: ChartGroup) = value
        """
        ...

    @property
    def HasSeriesLines(self) -> bool:
        """
        Get: HasSeriesLines(self: ChartGroup) -> bool
        Set: HasSeriesLines(self: ChartGroup) = value
        """
        ...

    @property
    def HasUpDownBars(self) -> bool:
        """
        Get: HasUpDownBars(self: ChartGroup) -> bool
        Set: HasUpDownBars(self: ChartGroup) = value
        """
        ...

    @property
    def HiLoLines(self) -> HiLoLines:
        """ Get: HiLoLines(self: ChartGroup) -> HiLoLines """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ChartGroup) -> int """
        ...

    @property
    def Overlap(self) -> int:
        """
        Get: Overlap(self: ChartGroup) -> int
        Set: Overlap(self: ChartGroup) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartGroup) -> object """
        ...

    @property
    def RadarAxisLabels(self) -> TickLabels:
        """ Get: RadarAxisLabels(self: ChartGroup) -> TickLabels """
        ...

    @property
    def SecondPlotSize(self) -> int:
        """
        Get: SecondPlotSize(self: ChartGroup) -> int
        Set: SecondPlotSize(self: ChartGroup) = value
        """
        ...

    @property
    def SeriesLines(self) -> SeriesLines:
        """ Get: SeriesLines(self: ChartGroup) -> SeriesLines """
        ...

    @property
    def ShowNegativeBubbles(self) -> bool:
        """
        Get: ShowNegativeBubbles(self: ChartGroup) -> bool
        Set: ShowNegativeBubbles(self: ChartGroup) = value
        """
        ...

    @property
    def SizeRepresents(self) -> XlSizeRepresents:
        """
        Get: SizeRepresents(self: ChartGroup) -> XlSizeRepresents
        Set: SizeRepresents(self: ChartGroup) = value
        """
        ...

    @property
    def SplitType(self) -> XlChartSplitType:
        """
        Get: SplitType(self: ChartGroup) -> XlChartSplitType
        Set: SplitType(self: ChartGroup) = value
        """
        ...

    @property
    def SplitValue(self) -> object:
        """
        Get: SplitValue(self: ChartGroup) -> object
        Set: SplitValue(self: ChartGroup) = value
        """
        ...

    @property
    def SubType(self) -> int:
        """
        Get: SubType(self: ChartGroup) -> int
        Set: SubType(self: ChartGroup) = value
        """
        ...

    @property
    def Type(self) -> int:
        """
        Get: Type(self: ChartGroup) -> int
        Set: Type(self: ChartGroup) = value
        """
        ...

    @property
    def UpBars(self) -> UpBars:
        """ Get: UpBars(self: ChartGroup) -> UpBars """
        ...

    @property
    def VaryByCategories(self) -> bool:
        """
        Get: VaryByCategories(self: ChartGroup) -> bool
        Set: VaryByCategories(self: ChartGroup) = value
        """
        ...


    def CategoryCollection(self, Index:object) -> object:
        """ CategoryCollection(self: ChartGroup, Index: object) -> object """
        ...

    def FullCategoryCollection(self, Index:object) -> object:
        """ FullCategoryCollection(self: ChartGroup, Index: object) -> object """
        ...

    def SeriesCollection(self, Index:object) -> object:
        """ SeriesCollection(self: ChartGroup, Index: object) -> object """
        ...


class ChartGroups(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartGroups) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ChartGroups) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartGroups) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartGroups) -> object """
        ...


    def Item(self, Index:object) -> ChartGroup:
        """ Item(self: ChartGroups, Index: object) -> ChartGroup """
        ...


class ChartObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartObject) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ChartObject) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: ChartObject) -> Range """
        ...

    @property
    def Chart(self) -> Chart:
        """ Get: Chart(self: ChartObject) -> Chart """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartObject) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ChartObject) -> bool
        Set: Enabled(self: ChartObject) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ChartObject) -> float
        Set: Height(self: ChartObject) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ChartObject) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ChartObject) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ChartObject) -> float
        Set: Left(self: ChartObject) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ChartObject) -> bool
        Set: Locked(self: ChartObject) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ChartObject) -> str
        Set: Name(self: ChartObject) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ChartObject) -> str
        Set: OnAction(self: ChartObject) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartObject) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ChartObject) -> object
        Set: Placement(self: ChartObject) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ChartObject) -> bool
        Set: PrintObject(self: ChartObject) = value
        """
        ...

    @property
    def ProtectChartObject(self) -> bool:
        """
        Get: ProtectChartObject(self: ChartObject) -> bool
        Set: ProtectChartObject(self: ChartObject) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: ChartObject) -> bool
        Set: RoundedCorners(self: ChartObject) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: ChartObject) -> bool
        Set: Shadow(self: ChartObject) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ChartObject) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ChartObject) -> float
        Set: Top(self: ChartObject) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: ChartObject) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ChartObject) -> bool
        Set: Visible(self: ChartObject) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ChartObject) -> float
        Set: Width(self: ChartObject) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ChartObject) -> int """
        ...


    def Activate(self) -> object:
        """ Activate(self: ChartObject) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: ChartObject) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ChartObject) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ChartObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ChartObject) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ChartObject) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ChartObject) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ChartObject, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ChartObject) -> object """
        ...

    def _Copy(self) -> object:
        """ _Copy(self: ChartObject) -> object """
        ...


class ChartObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartObjects) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ChartObjects) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ChartObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartObjects) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ChartObjects) -> bool
        Set: Enabled(self: ChartObjects) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ChartObjects) -> float
        Set: Height(self: ChartObjects) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ChartObjects) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ChartObjects) -> float
        Set: Left(self: ChartObjects) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ChartObjects) -> bool
        Set: Locked(self: ChartObjects) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ChartObjects) -> str
        Set: OnAction(self: ChartObjects) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartObjects) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ChartObjects) -> object
        Set: Placement(self: ChartObjects) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ChartObjects) -> bool
        Set: PrintObject(self: ChartObjects) = value
        """
        ...

    @property
    def ProtectChartObject(self) -> bool:
        """
        Get: ProtectChartObject(self: ChartObjects) -> bool
        Set: ProtectChartObject(self: ChartObjects) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: ChartObjects) -> bool
        Set: RoundedCorners(self: ChartObjects) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: ChartObjects) -> bool
        Set: Shadow(self: ChartObjects) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ChartObjects) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ChartObjects) -> float
        Set: Top(self: ChartObjects) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ChartObjects) -> bool
        Set: Visible(self: ChartObjects) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ChartObjects) -> float
        Set: Width(self: ChartObjects) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> ChartObject:
        """ Add(self: ChartObjects, Left: float, Top: float, Width: float, Height: float) -> ChartObject """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: ChartObjects) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ChartObjects) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ChartObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ChartObjects) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ChartObjects) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ChartObjects) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: ChartObjects) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: ChartObjects, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ChartObjects, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ChartObjects) -> object """
        ...

    def _Copy(self) -> object:
        """ _Copy(self: ChartObjects) -> object """
        ...

    def _Default(self, Index:object) -> object:
        """ _Default(self: ChartObjects, Index: object) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: ChartObjects) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: ChartObjects) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: ChartObjects) """
        ...

    def _Dummy25(self): # -> 
        """ _Dummy25(self: ChartObjects) """
        ...

    def _Dummy27(self): # -> 
        """ _Dummy27(self: ChartObjects) """
        ...

    def _Dummy28(self): # -> 
        """ _Dummy28(self: ChartObjects) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: ChartObjects) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class Charts(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Charts) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Charts) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Charts) -> XlCreator """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: Charts) -> HPageBreaks """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Charts) -> object """
        ...

    @property
    def Visible(self) -> object:
        """
        Get: Visible(self: Charts) -> object
        Set: Visible(self: Charts) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: Charts) -> VPageBreaks """
        ...


    def Add(self, Before:object, After:object, Count:object) -> Chart:
        """ Add(self: Charts, Before: object, After: object, Count: object) -> Chart """
        ...

    def Add2(self, Before:object, After:object, Count:object, NewLayout:object) -> Chart:
        """ Add2(self: Charts, Before: object, After: object, Count: object, NewLayout: object) -> Chart """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: Charts, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Charts) """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: Charts, Before: object, After: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: Charts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOut_2(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut_2(self: Charts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: Charts, EnableChanges: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: Charts, Replace: object) """
        ...

    def _Dummy7(self): # -> 
        """ _Dummy7(self: Charts) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: Charts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ChartTitle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartTitle) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: ChartTitle) -> object
        Set: AutoScaleFont(self: ChartTitle) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ChartTitle) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ChartTitle) -> str
        Set: Caption(self: ChartTitle) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartTitle) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: ChartTitle) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: ChartTitle) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ChartTitle) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: ChartTitle) -> str
        Set: Formula(self: ChartTitle) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: ChartTitle) -> str
        Set: FormulaLocal(self: ChartTitle) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: ChartTitle) -> str
        Set: FormulaR1C1(self: ChartTitle) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: ChartTitle) -> str
        Set: FormulaR1C1Local(self: ChartTitle) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: ChartTitle) -> float """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: ChartTitle) -> object
        Set: HorizontalAlignment(self: ChartTitle) = value
        """
        ...

    @property
    def IncludeInLayout(self) -> bool:
        """
        Get: IncludeInLayout(self: ChartTitle) -> bool
        Set: IncludeInLayout(self: ChartTitle) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ChartTitle) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ChartTitle) -> float
        Set: Left(self: ChartTitle) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ChartTitle) -> str """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: ChartTitle) -> object
        Set: Orientation(self: ChartTitle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartTitle) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: ChartTitle) -> XlChartElementPosition
        Set: Position(self: ChartTitle) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: ChartTitle) -> int
        Set: ReadingOrder(self: ChartTitle) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: ChartTitle) -> bool
        Set: Shadow(self: ChartTitle) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ChartTitle) -> str
        Set: Text(self: ChartTitle) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ChartTitle) -> float
        Set: Top(self: ChartTitle) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: ChartTitle) -> object
        Set: VerticalAlignment(self: ChartTitle) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: ChartTitle) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: ChartTitle) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ChartTitle) -> object """
        ...


class ChartView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ChartView) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ChartView) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartView) -> object """
        ...

    @property
    def Sheet(self) -> object:
        """ Get: Sheet(self: ChartView) -> object """
        ...



class CheckBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: CheckBox) -> object
        Set: Accelerator(self: CheckBox) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: CheckBox) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: CheckBox) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: CheckBox) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: CheckBox) -> str
        Set: Caption(self: CheckBox) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CheckBox) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: CheckBox) -> bool
        Set: Display3DShading(self: CheckBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: CheckBox) -> bool
        Set: Enabled(self: CheckBox) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: CheckBox) -> float
        Set: Height(self: CheckBox) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: CheckBox) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: CheckBox) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: CheckBox) -> float
        Set: Left(self: CheckBox) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: CheckBox) -> str
        Set: LinkedCell(self: CheckBox) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: CheckBox) -> bool
        Set: Locked(self: CheckBox) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: CheckBox) -> bool
        Set: LockedText(self: CheckBox) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: CheckBox) -> str
        Set: Name(self: CheckBox) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: CheckBox) -> str
        Set: OnAction(self: CheckBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CheckBox) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: CheckBox) -> object
        Set: PhoneticAccelerator(self: CheckBox) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: CheckBox) -> object
        Set: Placement(self: CheckBox) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: CheckBox) -> bool
        Set: PrintObject(self: CheckBox) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: CheckBox) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: CheckBox) -> str
        Set: Text(self: CheckBox) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: CheckBox) -> float
        Set: Top(self: CheckBox) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: CheckBox) -> Range """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: CheckBox) -> object
        Set: Value(self: CheckBox) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: CheckBox) -> bool
        Set: Visible(self: CheckBox) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: CheckBox) -> float
        Set: Width(self: CheckBox) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: CheckBox) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: CheckBox) -> int
        Set: _Default(self: CheckBox) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: CheckBox) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: CheckBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: CheckBox) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: CheckBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: CheckBox) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: CheckBox) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: CheckBox) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: CheckBox, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: CheckBox) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class CheckBoxes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: CheckBoxes) -> object
        Set: Accelerator(self: CheckBoxes) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: CheckBoxes) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: CheckBoxes) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: CheckBoxes) -> str
        Set: Caption(self: CheckBoxes) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CheckBoxes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CheckBoxes) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: CheckBoxes) -> bool
        Set: Display3DShading(self: CheckBoxes) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: CheckBoxes) -> bool
        Set: Enabled(self: CheckBoxes) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: CheckBoxes) -> float
        Set: Height(self: CheckBoxes) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: CheckBoxes) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: CheckBoxes) -> float
        Set: Left(self: CheckBoxes) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: CheckBoxes) -> str
        Set: LinkedCell(self: CheckBoxes) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: CheckBoxes) -> bool
        Set: Locked(self: CheckBoxes) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: CheckBoxes) -> bool
        Set: LockedText(self: CheckBoxes) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: CheckBoxes) -> str
        Set: OnAction(self: CheckBoxes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CheckBoxes) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: CheckBoxes) -> object
        Set: PhoneticAccelerator(self: CheckBoxes) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: CheckBoxes) -> object
        Set: Placement(self: CheckBoxes) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: CheckBoxes) -> bool
        Set: PrintObject(self: CheckBoxes) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: CheckBoxes) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: CheckBoxes) -> str
        Set: Text(self: CheckBoxes) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: CheckBoxes) -> float
        Set: Top(self: CheckBoxes) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: CheckBoxes) -> object
        Set: Value(self: CheckBoxes) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: CheckBoxes) -> bool
        Set: Visible(self: CheckBoxes) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: CheckBoxes) -> float
        Set: Width(self: CheckBoxes) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: CheckBoxes) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: CheckBoxes) -> int
        Set: _Default(self: CheckBoxes) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> CheckBox:
        """ Add(self: CheckBoxes, Left: float, Top: float, Width: float, Height: float) -> CheckBox """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: CheckBoxes) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: CheckBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: CheckBoxes) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: CheckBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: CheckBoxes) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: CheckBoxes) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: CheckBoxes) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: CheckBoxes) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: CheckBoxes, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: CheckBoxes, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: CheckBoxes) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: CheckBoxes) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: CheckBoxes) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: CheckBoxes) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: CheckBoxes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ColorFormat(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Brightness(self) -> Single:
        """
        Get: Brightness(self: ColorFormat) -> Single
        Set: Brightness(self: ColorFormat) = value
        """
        ...

    @property
    def ObjectThemeColor(self): # -> MsoThemeColorIndex
        """
        Get: ObjectThemeColor(self: ColorFormat) -> MsoThemeColorIndex
        Set: ObjectThemeColor(self: ColorFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ColorFormat) -> object """
        ...

    @property
    def RGB(self) -> int:
        """
        Get: RGB(self: ColorFormat) -> int
        Set: RGB(self: ColorFormat) = value
        """
        ...

    @property
    def SchemeColor(self) -> int:
        """
        Get: SchemeColor(self: ColorFormat) -> int
        Set: SchemeColor(self: ColorFormat) = value
        """
        ...

    @property
    def TintAndShade(self) -> Single:
        """
        Get: TintAndShade(self: ColorFormat) -> Single
        Set: TintAndShade(self: ColorFormat) = value
        """
        ...

    @property
    def Type(self): # -> MsoColorType
        """ Get: Type(self: ColorFormat) -> MsoColorType """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ColorScale: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ColorScale) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: ColorScale) -> Range """
        ...

    @property
    def ColorScaleCriteria(self) -> ColorScaleCriteria:
        """ Get: ColorScaleCriteria(self: ColorScale) -> ColorScaleCriteria """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ColorScale) -> XlCreator """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: ColorScale) -> str
        Set: Formula(self: ColorScale) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ColorScale) -> object """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: ColorScale) -> int
        Set: Priority(self: ColorScale) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: ColorScale) -> bool """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: ColorScale) -> XlPivotConditionScope
        Set: ScopeType(self: ColorScale) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """ Get: StopIfTrue(self: ColorScale) -> bool """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: ColorScale) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: ColorScale) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: ColorScale, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: ColorScale) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: ColorScale) """
        ...


class ColorScaleCriteria(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: ColorScaleCriteria) -> int """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ColorScaleCriterion: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def FormatColor(self) -> FormatColor:
        """ Get: FormatColor(self: ColorScaleCriterion) -> FormatColor """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ColorScaleCriterion) -> int """
        ...

    @property
    def Type(self) -> XlConditionValueTypes:
        """
        Get: Type(self: ColorScaleCriterion) -> XlConditionValueTypes
        Set: Type(self: ColorScaleCriterion) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: ColorScaleCriterion) -> object
        Set: Value(self: ColorScaleCriterion) = value
        """
        ...



class ColorStop: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ColorStop) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: ColorStop) -> object
        Set: Color(self: ColorStop) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ColorStop) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ColorStop) -> object """
        ...

    @property
    def Position(self) -> float:
        """
        Get: Position(self: ColorStop) -> float
        Set: Position(self: ColorStop) = value
        """
        ...

    @property
    def ThemeColor(self) -> int:
        """
        Get: ThemeColor(self: ColorStop) -> int
        Set: ThemeColor(self: ColorStop) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: ColorStop) -> object
        Set: TintAndShade(self: ColorStop) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: ColorStop) """
        ...


class ColorStops(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ColorStops) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ColorStops) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ColorStops) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ColorStops) -> object """
        ...


    def Add(self, Position:float) -> ColorStop:
        """ Add(self: ColorStops, Position: float) -> ColorStop """
        ...

    def Clear(self): # -> 
        """ Clear(self: ColorStops) """
        ...

    def Item(self, Index:object) -> ColorStop:
        """ Item(self: ColorStops, Index: object) -> ColorStop """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Comment: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Comment) -> Application """
        ...

    @property
    def Author(self) -> str:
        """ Get: Author(self: Comment) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Comment) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Comment) -> object """
        ...

    @property
    def Shape(self) -> Shape:
        """ Get: Shape(self: Comment) -> Shape """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Comment) -> bool
        Set: Visible(self: Comment) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: Comment) """
        ...

    def Next(self) -> Comment:
        """ Next(self: Comment) -> Comment """
        ...

    def Previous(self) -> Comment:
        """ Previous(self: Comment) -> Comment """
        ...

    def Text(self, Text:object, Start:object, Overwrite:object) -> str:
        """ Text(self: Comment, Text: object, Start: object, Overwrite: object) -> str """
        ...


class Comments(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Comments) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Comments) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Comments) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Comments) -> object """
        ...


    def Item(self, Index:int) -> Comment:
        """ Item(self: Comments, Index: int) -> Comment """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ConditionValue: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ConditionValue) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ConditionValue) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ConditionValue) -> object """
        ...

    @property
    def Type(self) -> XlConditionValueTypes:
        """ Get: Type(self: ConditionValue) -> XlConditionValueTypes """
        ...

    @property
    def Value(self) -> object:
        """ Get: Value(self: ConditionValue) -> object """
        ...


    def Modify(self, newtype:XlConditionValueTypes, newvalue:object): # -> 
        """ Modify(self: ConditionValue, newtype: XlConditionValueTypes, newvalue: object) """
        ...


class Connections(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Connections) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Connections) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Connections) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Connections) -> object """
        ...


    def Add(self, Name:str, Description:str, ConnectionString:object, CommandText:object, lCmdtype:object) -> WorkbookConnection:
        """ Add(self: Connections, Name: str, Description: str, ConnectionString: object, CommandText: object, lCmdtype: object) -> WorkbookConnection """
        ...

    def Add2(self, Name:str, Description:str, ConnectionString:object, CommandText:object, lCmdtype:object, CreateModelConnection:object, ImportRelationships:object) -> WorkbookConnection:
        """ Add2(self: Connections, Name: str, Description: str, ConnectionString: object, CommandText: object, lCmdtype: object, CreateModelConnection: object, ImportRelationships: object) -> WorkbookConnection """
        ...

    def AddFromFile(self, Filename:str) -> WorkbookConnection:
        """ AddFromFile(self: Connections, Filename: str) -> WorkbookConnection """
        ...

    def AddFromFile2(self, Filename:str, CreateModelConnection:object, ImportRelationships:object) -> WorkbookConnection:
        """ AddFromFile2(self: Connections, Filename: str, CreateModelConnection: object, ImportRelationships: object) -> WorkbookConnection """
        ...

    def Item(self, Index:object) -> WorkbookConnection:
        """ Item(self: Connections, Index: object) -> WorkbookConnection """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ConnectorFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ConnectorFormat) -> Application """
        ...

    @property
    def BeginConnected(self): # -> MsoTriState
        """ Get: BeginConnected(self: ConnectorFormat) -> MsoTriState """
        ...

    @property
    def BeginConnectedShape(self) -> Shape:
        """ Get: BeginConnectedShape(self: ConnectorFormat) -> Shape """
        ...

    @property
    def BeginConnectionSite(self) -> int:
        """ Get: BeginConnectionSite(self: ConnectorFormat) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ConnectorFormat) -> XlCreator """
        ...

    @property
    def EndConnected(self): # -> MsoTriState
        """ Get: EndConnected(self: ConnectorFormat) -> MsoTriState """
        ...

    @property
    def EndConnectedShape(self) -> Shape:
        """ Get: EndConnectedShape(self: ConnectorFormat) -> Shape """
        ...

    @property
    def EndConnectionSite(self) -> int:
        """ Get: EndConnectionSite(self: ConnectorFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ConnectorFormat) -> object """
        ...

    @property
    def Type(self): # -> MsoConnectorType
        """
        Get: Type(self: ConnectorFormat) -> MsoConnectorType
        Set: Type(self: ConnectorFormat) = value
        """
        ...


    def BeginConnect(self, ConnectedShape:Shape, ConnectionSite:int): # -> 
        """ BeginConnect(self: ConnectorFormat, ConnectedShape: Shape, ConnectionSite: int) """
        ...

    def BeginDisconnect(self): # -> 
        """ BeginDisconnect(self: ConnectorFormat) """
        ...

    def EndConnect(self, ConnectedShape:Shape, ConnectionSite:int): # -> 
        """ EndConnect(self: ConnectorFormat, ConnectedShape: Shape, ConnectionSite: int) """
        ...

    def EndDisconnect(self): # -> 
        """ EndDisconnect(self: ConnectorFormat) """
        ...


class Constants(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum Constants, values: xl3DBar (-4099), xl3DEffects1 (13), xl3DEffects2 (14), xl3DSurface (-4103), xlAbove (0), xlAccounting1 (4), xlAccounting2 (5), xlAccounting3 (6), xlAccounting4 (17), xlAdd (2), xlAll (-4104), xlAllExceptBorders (7), xlAutomatic (-4105), xlBar (2), xlBelow (1), xlBidi (-5000), xlBidiCalendar (3), xlBoth (1), xlBottom (-4107), xlCascade (7), xlCenter (-4108), xlCenterAcrossSelection (7), xlChart4 (2), xlChartSeries (17), xlChartShort (6), xlChartTitles (18), xlChecker (9), xlCircle (8), xlClassic1 (1), xlClassic2 (2), xlClassic3 (3), xlClosed (3), xlColor1 (7), xlColor2 (8), xlColor3 (9), xlColumn (3), xlCombination (-4111), xlComplete (4), xlConstants (2), xlContents (2), xlContext (-5002), xlCorner (2), xlCrissCross (16), xlCross (4), xlCustom (-4114), xlDebugCodePane (13), xlDefaultAutoFormat (-1), xlDesktop (9), xlDiamond (2), xlDirect (1), xlDistributed (-4117), xlDivide (5), xlDoubleAccounting (5), xlDoubleClosed (5), xlDoubleOpen (4), xlDoubleQuote (1), xlDrawingObject (14), xlEntireChart (20), xlExcelMenus (1), xlExtended (3), xlFill (5), xlFirst (0), xlFixedValue (1), xlFloating (5), xlFormats (-4122), xlFormula (5), xlFullScript (1), xlGeneral (1), xlGray16 (17), xlGray25 (-4124), xlGray50 (-4125), xlGray75 (-4126), xlGray8 (18), xlGregorian (2), xlGrid (15), xlGridline (22), xlHigh (-4127), xlHindiNumerals (3), xlIcons (1), xlImmediatePane (12), xlInside (2), xlInteger (2), xlJustify (-4130), xlLast (1), xlLastCell (11), xlLatin (-5001), xlLeft (-4131), xlLeftToRight (2), xlLightDown (13), xlLightHorizontal (11), xlLightUp (14), xlLightVertical (12), xlList1 (10), xlList2 (11), xlList3 (12), xlLocalFormat1 (15), xlLocalFormat2 (16), xlLogicalCursor (1), xlLong (3), xlLotusHelp (2), xlLow (-4134), xlLTR (-5003), xlMacrosheetCell (7), xlManual (-4135), xlMaximum (2), xlMinimum (4), xlMinusValues (3), xlMixed (2), xlMixedAuthorizedScript (4), xlMixedScript (3), xlModule (-4141), xlMultiply (4), xlNarrow (1), xlNextToAxis (4), xlNoDocuments (3), xlNone (-4142), xlNotes (-4144), xlOff (-4146), xlOn (1), xlOpaque (3), xlOpen (2), xlOutside (3), xlPartial (3), xlPartialScript (2), xlPercent (2), xlPlus (9), xlPlusValues (2), xlReference (4), xlRight (-4152), xlRTL (-5004), xlScale (3), xlSemiautomatic (2), xlSemiGray75 (10), xlShort (1), xlShowLabel (4), xlShowLabelAndPercent (5), xlShowPercent (3), xlShowValue (2), xlSimple (-4154), xlSingle (2), xlSingleAccounting (4), xlSingleQuote (2), xlSolid (1), xlSquare (1), xlStar (5), xlStError (4), xlStrict (2), xlSubtract (3), xlSystem (1), xlTextBox (16), xlTiled (1), xlTitleBar (8), xlToolbar (1), xlToolbarButton (2), xlTop (-4160), xlTopToBottom (1), xlTransparent (2), xlTriangle (3), xlVeryHidden (2), xlVisible (12), xlVisualCursor (2), xlWatchPane (11), xlWide (3), xlWorkbookTab (6), xlWorksheet4 (1), xlWorksheetCell (3), xlWorksheetShort (5) """
    value__ = ...
    xl3DBar: Constants = ...
    xl3DEffects1: Constants = ...
    xl3DEffects2: Constants = ...
    xl3DSurface: Constants = ...
    xlAbove: Constants = ...
    xlAccounting1: Constants = ...
    xlAccounting2: Constants = ...
    xlAccounting3: Constants = ...
    xlAccounting4: Constants = ...
    xlAdd: Constants = ...
    xlAll: Constants = ...
    xlAllExceptBorders: Constants = ...
    xlAutomatic: Constants = ...
    xlBar: Constants = ...
    xlBelow: Constants = ...
    xlBidi: Constants = ...
    xlBidiCalendar: Constants = ...
    xlBoth: Constants = ...
    xlBottom: Constants = ...
    xlCascade: Constants = ...
    xlCenter: Constants = ...
    xlCenterAcrossSelection: Constants = ...
    xlChart4: Constants = ...
    xlChartSeries: Constants = ...
    xlChartShort: Constants = ...
    xlChartTitles: Constants = ...
    xlChecker: Constants = ...
    xlCircle: Constants = ...
    xlClassic1: Constants = ...
    xlClassic2: Constants = ...
    xlClassic3: Constants = ...
    xlClosed: Constants = ...
    xlColor1: Constants = ...
    xlColor2: Constants = ...
    xlColor3: Constants = ...
    xlColumn: Constants = ...
    xlCombination: Constants = ...
    xlComplete: Constants = ...
    xlConstants: Constants = ...
    xlContents: Constants = ...
    xlContext: Constants = ...
    xlCorner: Constants = ...
    xlCrissCross: Constants = ...
    xlCross: Constants = ...
    xlCustom: Constants = ...
    xlDebugCodePane: Constants = ...
    xlDefaultAutoFormat: Constants = ...
    xlDesktop: Constants = ...
    xlDiamond: Constants = ...
    xlDirect: Constants = ...
    xlDistributed: Constants = ...
    xlDivide: Constants = ...
    xlDoubleAccounting: Constants = ...
    xlDoubleClosed: Constants = ...
    xlDoubleOpen: Constants = ...
    xlDoubleQuote: Constants = ...
    xlDrawingObject: Constants = ...
    xlEntireChart: Constants = ...
    xlExcelMenus: Constants = ...
    xlExtended: Constants = ...
    xlFill: Constants = ...
    xlFirst: Constants = ...
    xlFixedValue: Constants = ...
    xlFloating: Constants = ...
    xlFormats: Constants = ...
    xlFormula: Constants = ...
    xlFullScript: Constants = ...
    xlGeneral: Constants = ...
    xlGray16: Constants = ...
    xlGray25: Constants = ...
    xlGray50: Constants = ...
    xlGray75: Constants = ...
    xlGray8: Constants = ...
    xlGregorian: Constants = ...
    xlGrid: Constants = ...
    xlGridline: Constants = ...
    xlHigh: Constants = ...
    xlHindiNumerals: Constants = ...
    xlIcons: Constants = ...
    xlImmediatePane: Constants = ...
    xlInside: Constants = ...
    xlInteger: Constants = ...
    xlJustify: Constants = ...
    xlLast: Constants = ...
    xlLastCell: Constants = ...
    xlLatin: Constants = ...
    xlLeft: Constants = ...
    xlLeftToRight: Constants = ...
    xlLightDown: Constants = ...
    xlLightHorizontal: Constants = ...
    xlLightUp: Constants = ...
    xlLightVertical: Constants = ...
    xlList1: Constants = ...
    xlList2: Constants = ...
    xlList3: Constants = ...
    xlLocalFormat1: Constants = ...
    xlLocalFormat2: Constants = ...
    xlLogicalCursor: Constants = ...
    xlLong: Constants = ...
    xlLotusHelp: Constants = ...
    xlLow: Constants = ...
    xlLTR: Constants = ...
    xlMacrosheetCell: Constants = ...
    xlManual: Constants = ...
    xlMaximum: Constants = ...
    xlMinimum: Constants = ...
    xlMinusValues: Constants = ...
    xlMixed: Constants = ...
    xlMixedAuthorizedScript: Constants = ...
    xlMixedScript: Constants = ...
    xlModule: Constants = ...
    xlMultiply: Constants = ...
    xlNarrow: Constants = ...
    xlNextToAxis: Constants = ...
    xlNoDocuments: Constants = ...
    xlNone: Constants = ...
    xlNotes: Constants = ...
    xlOff: Constants = ...
    xlOn: Constants = ...
    xlOpaque: Constants = ...
    xlOpen: Constants = ...
    xlOutside: Constants = ...
    xlPartial: Constants = ...
    xlPartialScript: Constants = ...
    xlPercent: Constants = ...
    xlPlus: Constants = ...
    xlPlusValues: Constants = ...
    xlReference: Constants = ...
    xlRight: Constants = ...
    xlRTL: Constants = ...
    xlScale: Constants = ...
    xlSemiautomatic: Constants = ...
    xlSemiGray75: Constants = ...
    xlShort: Constants = ...
    xlShowLabel: Constants = ...
    xlShowLabelAndPercent: Constants = ...
    xlShowPercent: Constants = ...
    xlShowValue: Constants = ...
    xlSimple: Constants = ...
    xlSingle: Constants = ...
    xlSingleAccounting: Constants = ...
    xlSingleQuote: Constants = ...
    xlSolid: Constants = ...
    xlSquare: Constants = ...
    xlStar: Constants = ...
    xlStError: Constants = ...
    xlStrict: Constants = ...
    xlSubtract: Constants = ...
    xlSystem: Constants = ...
    xlTextBox: Constants = ...
    xlTiled: Constants = ...
    xlTitleBar: Constants = ...
    xlToolbar: Constants = ...
    xlToolbarButton: Constants = ...
    xlTop: Constants = ...
    xlTopToBottom: Constants = ...
    xlTransparent: Constants = ...
    xlTriangle: Constants = ...
    xlVeryHidden: Constants = ...
    xlVisible: Constants = ...
    xlVisualCursor: Constants = ...
    xlWatchPane: Constants = ...
    xlWide: Constants = ...
    xlWorkbookTab: Constants = ...
    xlWorksheet4: Constants = ...
    xlWorksheetCell: Constants = ...
    xlWorksheetShort: Constants = ...


class ControlFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ControlFormat) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ControlFormat) -> XlCreator """
        ...

    @property
    def DropDownLines(self) -> int:
        """
        Get: DropDownLines(self: ControlFormat) -> int
        Set: DropDownLines(self: ControlFormat) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ControlFormat) -> bool
        Set: Enabled(self: ControlFormat) = value
        """
        ...

    @property
    def LargeChange(self) -> int:
        """
        Get: LargeChange(self: ControlFormat) -> int
        Set: LargeChange(self: ControlFormat) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: ControlFormat) -> str
        Set: LinkedCell(self: ControlFormat) = value
        """
        ...

    @property
    def ListCount(self) -> int:
        """
        Get: ListCount(self: ControlFormat) -> int
        Set: ListCount(self: ControlFormat) = value
        """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: ControlFormat) -> str
        Set: ListFillRange(self: ControlFormat) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: ControlFormat) -> int
        Set: ListIndex(self: ControlFormat) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: ControlFormat) -> bool
        Set: LockedText(self: ControlFormat) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: ControlFormat) -> int
        Set: Max(self: ControlFormat) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: ControlFormat) -> int
        Set: Min(self: ControlFormat) = value
        """
        ...

    @property
    def MultiSelect(self) -> int:
        """
        Get: MultiSelect(self: ControlFormat) -> int
        Set: MultiSelect(self: ControlFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ControlFormat) -> object """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ControlFormat) -> bool
        Set: PrintObject(self: ControlFormat) = value
        """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: ControlFormat) -> int
        Set: SmallChange(self: ControlFormat) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: ControlFormat) -> int
        Set: Value(self: ControlFormat) = value
        """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: ControlFormat) -> int
        Set: _Default(self: ControlFormat) = value
        """
        ...


    def AddItem(self, Text:str, Index:object): # -> 
        """ AddItem(self: ControlFormat, Text: str, Index: object) """
        ...

    def RemoveAllItems(self): # -> 
        """ RemoveAllItems(self: ControlFormat) """
        ...

    def RemoveItem(self, Index:int, Count:object): # -> 
        """ RemoveItem(self: ControlFormat, Index: int, Count: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Corners: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Corners) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Corners) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Corners) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Corners) -> object """
        ...


    def Select(self) -> object:
        """ Select(self: Corners) -> object """
        ...


class CubeField: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllItemsVisible(self) -> bool:
        """ Get: AllItemsVisible(self: CubeField) -> bool """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: CubeField) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: CubeField) -> str
        Set: Caption(self: CubeField) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CubeField) -> XlCreator """
        ...

    @property
    def CubeFieldSubType(self) -> XlCubeFieldSubType:
        """ Get: CubeFieldSubType(self: CubeField) -> XlCubeFieldSubType """
        ...

    @property
    def CubeFieldType(self) -> XlCubeFieldType:
        """ Get: CubeFieldType(self: CubeField) -> XlCubeFieldType """
        ...

    @property
    def CurrentPageName(self) -> str:
        """
        Get: CurrentPageName(self: CubeField) -> str
        Set: CurrentPageName(self: CubeField) = value
        """
        ...

    @property
    def DragToColumn(self) -> bool:
        """
        Get: DragToColumn(self: CubeField) -> bool
        Set: DragToColumn(self: CubeField) = value
        """
        ...

    @property
    def DragToData(self) -> bool:
        """
        Get: DragToData(self: CubeField) -> bool
        Set: DragToData(self: CubeField) = value
        """
        ...

    @property
    def DragToHide(self) -> bool:
        """
        Get: DragToHide(self: CubeField) -> bool
        Set: DragToHide(self: CubeField) = value
        """
        ...

    @property
    def DragToPage(self) -> bool:
        """
        Get: DragToPage(self: CubeField) -> bool
        Set: DragToPage(self: CubeField) = value
        """
        ...

    @property
    def DragToRow(self) -> bool:
        """
        Get: DragToRow(self: CubeField) -> bool
        Set: DragToRow(self: CubeField) = value
        """
        ...

    @property
    def EnableMultiplePageItems(self) -> bool:
        """
        Get: EnableMultiplePageItems(self: CubeField) -> bool
        Set: EnableMultiplePageItems(self: CubeField) = value
        """
        ...

    @property
    def FlattenHierarchies(self) -> bool:
        """
        Get: FlattenHierarchies(self: CubeField) -> bool
        Set: FlattenHierarchies(self: CubeField) = value
        """
        ...

    @property
    def HasMemberProperties(self) -> bool:
        """ Get: HasMemberProperties(self: CubeField) -> bool """
        ...

    @property
    def HiddenLevels(self) -> int:
        """
        Get: HiddenLevels(self: CubeField) -> int
        Set: HiddenLevels(self: CubeField) = value
        """
        ...

    @property
    def HierarchizeDistinct(self) -> bool:
        """
        Get: HierarchizeDistinct(self: CubeField) -> bool
        Set: HierarchizeDistinct(self: CubeField) = value
        """
        ...

    @property
    def IncludeNewItemsInFilter(self) -> bool:
        """
        Get: IncludeNewItemsInFilter(self: CubeField) -> bool
        Set: IncludeNewItemsInFilter(self: CubeField) = value
        """
        ...

    @property
    def IsDate(self) -> bool:
        """ Get: IsDate(self: CubeField) -> bool """
        ...

    @property
    def LayoutForm(self) -> XlLayoutFormType:
        """
        Get: LayoutForm(self: CubeField) -> XlLayoutFormType
        Set: LayoutForm(self: CubeField) = value
        """
        ...

    @property
    def LayoutSubtotalLocation(self) -> XlSubtototalLocationType:
        """
        Get: LayoutSubtotalLocation(self: CubeField) -> XlSubtototalLocationType
        Set: LayoutSubtotalLocation(self: CubeField) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: CubeField) -> str """
        ...

    @property
    def Orientation(self) -> XlPivotFieldOrientation:
        """
        Get: Orientation(self: CubeField) -> XlPivotFieldOrientation
        Set: Orientation(self: CubeField) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CubeField) -> object """
        ...

    @property
    def PivotFields(self) -> PivotFields:
        """ Get: PivotFields(self: CubeField) -> PivotFields """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: CubeField) -> int
        Set: Position(self: CubeField) = value
        """
        ...

    @property
    def ShowInFieldList(self) -> bool:
        """
        Get: ShowInFieldList(self: CubeField) -> bool
        Set: ShowInFieldList(self: CubeField) = value
        """
        ...

    @property
    def TreeviewControl(self) -> TreeviewControl:
        """ Get: TreeviewControl(self: CubeField) -> TreeviewControl """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: CubeField) -> str """
        ...

    @property
    def _Caption(self) -> str:
        """ Get: _Caption(self: CubeField) -> str """
        ...


    def AddMemberPropertyField(self, Property:str, PropertyOrder:object): # -> 
        """ AddMemberPropertyField(self: CubeField, Property: str, PropertyOrder: object) """
        ...

    def AddMemberPropertyFieldEx(self, Property:str, PropertyOrder:object, PropertyDisplayedIn:object): # -> 
        """ AddMemberPropertyFieldEx(self: CubeField, Property: str, PropertyOrder: object, PropertyDisplayedIn: object) """
        ...

    def ClearManualFilter(self): # -> 
        """ ClearManualFilter(self: CubeField) """
        ...

    def CreatePivotFields(self): # -> 
        """ CreatePivotFields(self: CubeField) """
        ...

    def Delete(self): # -> 
        """ Delete(self: CubeField) """
        ...


class CubeFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CubeFields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CubeFields) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CubeFields) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CubeFields) -> object """
        ...


    def AddSet(self, Name:str, Caption:str) -> CubeField:
        """ AddSet(self: CubeFields, Name: str, Caption: str) -> CubeField """
        ...

    def GetMeasure(self, AttributeHierarchy:object, Function:XlConsolidationFunction, Caption:object) -> CubeField:
        """ GetMeasure(self: CubeFields, AttributeHierarchy: object, Function: XlConsolidationFunction, Caption: object) -> CubeField """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CustomProperties(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CustomProperties) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CustomProperties) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CustomProperties) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CustomProperties) -> object """
        ...


    def Add(self, Name:str, Value:object) -> CustomProperty:
        """ Add(self: CustomProperties, Name: str, Value: object) -> CustomProperty """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CustomProperty: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CustomProperty) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CustomProperty) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: CustomProperty) -> str
        Set: Name(self: CustomProperty) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CustomProperty) -> object """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: CustomProperty) -> object
        Set: Value(self: CustomProperty) = value
        """
        ...

    @property
    def _Default(self) -> object:
        """ Get: _Default(self: CustomProperty) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: CustomProperty) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CustomView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CustomView) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CustomView) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: CustomView) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CustomView) -> object """
        ...

    @property
    def PrintSettings(self) -> bool:
        """ Get: PrintSettings(self: CustomView) -> bool """
        ...

    @property
    def RowColSettings(self) -> bool:
        """ Get: RowColSettings(self: CustomView) -> bool """
        ...


    def Delete(self): # -> 
        """ Delete(self: CustomView) """
        ...

    def Show(self): # -> 
        """ Show(self: CustomView) """
        ...


class CustomViews(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CustomViews) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CustomViews) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: CustomViews) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CustomViews) -> object """
        ...


    def Add(self, ViewName:str, PrintSettings:object, RowColSettings:object) -> CustomView:
        """ Add(self: CustomViews, ViewName: str, PrintSettings: object, RowColSettings: object) -> CustomView """
        ...

    def Item(self, ViewName:object) -> CustomView:
        """ Item(self: CustomViews, ViewName: object) -> CustomView """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Databar: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Databar) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: Databar) -> Range """
        ...

    @property
    def AxisColor(self) -> object:
        """ Get: AxisColor(self: Databar) -> object """
        ...

    @property
    def AxisPosition(self) -> XlDataBarAxisPosition:
        """
        Get: AxisPosition(self: Databar) -> XlDataBarAxisPosition
        Set: AxisPosition(self: Databar) = value
        """
        ...

    @property
    def BarBorder(self) -> DataBarBorder:
        """ Get: BarBorder(self: Databar) -> DataBarBorder """
        ...

    @property
    def BarColor(self) -> object:
        """ Get: BarColor(self: Databar) -> object """
        ...

    @property
    def BarFillType(self) -> XlDataBarFillType:
        """
        Get: BarFillType(self: Databar) -> XlDataBarFillType
        Set: BarFillType(self: Databar) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Databar) -> XlCreator """
        ...

    @property
    def Direction(self) -> int:
        """
        Get: Direction(self: Databar) -> int
        Set: Direction(self: Databar) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Databar) -> str
        Set: Formula(self: Databar) = value
        """
        ...

    @property
    def MaxPoint(self) -> ConditionValue:
        """ Get: MaxPoint(self: Databar) -> ConditionValue """
        ...

    @property
    def MinPoint(self) -> ConditionValue:
        """ Get: MinPoint(self: Databar) -> ConditionValue """
        ...

    @property
    def NegativeBarFormat(self) -> NegativeBarFormat:
        """ Get: NegativeBarFormat(self: Databar) -> NegativeBarFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Databar) -> object """
        ...

    @property
    def PercentMax(self) -> int:
        """
        Get: PercentMax(self: Databar) -> int
        Set: PercentMax(self: Databar) = value
        """
        ...

    @property
    def PercentMin(self) -> int:
        """
        Get: PercentMin(self: Databar) -> int
        Set: PercentMin(self: Databar) = value
        """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: Databar) -> int
        Set: Priority(self: Databar) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: Databar) -> bool """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: Databar) -> XlPivotConditionScope
        Set: ScopeType(self: Databar) = value
        """
        ...

    @property
    def ShowValue(self) -> bool:
        """
        Get: ShowValue(self: Databar) -> bool
        Set: ShowValue(self: Databar) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """ Get: StopIfTrue(self: Databar) -> bool """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: Databar) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: Databar) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: Databar, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: Databar) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: Databar) """
        ...


class DataBarBorder: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DataBarBorder) -> Application """
        ...

    @property
    def Color(self) -> object:
        """ Get: Color(self: DataBarBorder) -> object """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DataBarBorder) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DataBarBorder) -> object """
        ...

    @property
    def Type(self) -> XlDataBarBorderType:
        """
        Get: Type(self: DataBarBorder) -> XlDataBarBorderType
        Set: Type(self: DataBarBorder) = value
        """
        ...



class DataFeedConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlwaysUseConnectionFile(self) -> bool:
        """
        Get: AlwaysUseConnectionFile(self: DataFeedConnection) -> bool
        Set: AlwaysUseConnectionFile(self: DataFeedConnection) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: DataFeedConnection) -> Application """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: DataFeedConnection) -> object
        Set: CommandText(self: DataFeedConnection) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: DataFeedConnection) -> XlCmdType
        Set: CommandType(self: DataFeedConnection) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: DataFeedConnection) -> object
        Set: Connection(self: DataFeedConnection) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DataFeedConnection) -> XlCreator """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: DataFeedConnection) -> bool
        Set: EnableRefresh(self: DataFeedConnection) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DataFeedConnection) -> object """
        ...

    @property
    def RefreshDate(self) -> DateTime:
        """ Get: RefreshDate(self: DataFeedConnection) -> DateTime """
        ...

    @property
    def Refreshing(self) -> bool:
        """ Get: Refreshing(self: DataFeedConnection) -> bool """
        ...

    @property
    def RefreshOnFileOpen(self) -> bool:
        """
        Get: RefreshOnFileOpen(self: DataFeedConnection) -> bool
        Set: RefreshOnFileOpen(self: DataFeedConnection) = value
        """
        ...

    @property
    def RefreshPeriod(self) -> int:
        """
        Get: RefreshPeriod(self: DataFeedConnection) -> int
        Set: RefreshPeriod(self: DataFeedConnection) = value
        """
        ...

    @property
    def SavePassword(self) -> bool:
        """
        Get: SavePassword(self: DataFeedConnection) -> bool
        Set: SavePassword(self: DataFeedConnection) = value
        """
        ...

    @property
    def ServerCredentialsMethod(self) -> XlCredentialsMethod:
        """
        Get: ServerCredentialsMethod(self: DataFeedConnection) -> XlCredentialsMethod
        Set: ServerCredentialsMethod(self: DataFeedConnection) = value
        """
        ...

    @property
    def SourceConnectionFile(self) -> str:
        """
        Get: SourceConnectionFile(self: DataFeedConnection) -> str
        Set: SourceConnectionFile(self: DataFeedConnection) = value
        """
        ...

    @property
    def SourceDataFile(self) -> str:
        """
        Get: SourceDataFile(self: DataFeedConnection) -> str
        Set: SourceDataFile(self: DataFeedConnection) = value
        """
        ...


    def CancelRefresh(self): # -> 
        """ CancelRefresh(self: DataFeedConnection) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: DataFeedConnection) """
        ...

    def SaveAsODC(self, ODCFileName:str, Description:object, Keywords:object): # -> 
        """ SaveAsODC(self: DataFeedConnection, ODCFileName: str, Description: object, Keywords: object) """
        ...


class DataLabel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DataLabel) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: DataLabel) -> object
        Set: AutoScaleFont(self: DataLabel) = value
        """
        ...

    @property
    def AutoText(self) -> bool:
        """
        Get: AutoText(self: DataLabel) -> bool
        Set: AutoText(self: DataLabel) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: DataLabel) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: DataLabel) -> str
        Set: Caption(self: DataLabel) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DataLabel) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: DataLabel) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: DataLabel) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DataLabel) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: DataLabel) -> str
        Set: Formula(self: DataLabel) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: DataLabel) -> str
        Set: FormulaLocal(self: DataLabel) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: DataLabel) -> str
        Set: FormulaR1C1(self: DataLabel) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: DataLabel) -> str
        Set: FormulaR1C1Local(self: DataLabel) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: DataLabel) -> float
        Set: Height(self: DataLabel) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: DataLabel) -> object
        Set: HorizontalAlignment(self: DataLabel) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: DataLabel) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: DataLabel) -> float
        Set: Left(self: DataLabel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DataLabel) -> str """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: DataLabel) -> str
        Set: NumberFormat(self: DataLabel) = value
        """
        ...

    @property
    def NumberFormatLinked(self) -> bool:
        """
        Get: NumberFormatLinked(self: DataLabel) -> bool
        Set: NumberFormatLinked(self: DataLabel) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: DataLabel) -> object
        Set: NumberFormatLocal(self: DataLabel) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: DataLabel) -> object
        Set: Orientation(self: DataLabel) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DataLabel) -> object """
        ...

    @property
    def Position(self) -> XlDataLabelPosition:
        """
        Get: Position(self: DataLabel) -> XlDataLabelPosition
        Set: Position(self: DataLabel) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: DataLabel) -> int
        Set: ReadingOrder(self: DataLabel) = value
        """
        ...

    @property
    def Separator(self) -> object:
        """
        Get: Separator(self: DataLabel) -> object
        Set: Separator(self: DataLabel) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: DataLabel) -> bool
        Set: Shadow(self: DataLabel) = value
        """
        ...

    @property
    def ShowBubbleSize(self) -> bool:
        """
        Get: ShowBubbleSize(self: DataLabel) -> bool
        Set: ShowBubbleSize(self: DataLabel) = value
        """
        ...

    @property
    def ShowCategoryName(self) -> bool:
        """
        Get: ShowCategoryName(self: DataLabel) -> bool
        Set: ShowCategoryName(self: DataLabel) = value
        """
        ...

    @property
    def ShowLegendKey(self) -> bool:
        """
        Get: ShowLegendKey(self: DataLabel) -> bool
        Set: ShowLegendKey(self: DataLabel) = value
        """
        ...

    @property
    def ShowPercentage(self) -> bool:
        """
        Get: ShowPercentage(self: DataLabel) -> bool
        Set: ShowPercentage(self: DataLabel) = value
        """
        ...

    @property
    def ShowRange(self) -> bool:
        """
        Get: ShowRange(self: DataLabel) -> bool
        Set: ShowRange(self: DataLabel) = value
        """
        ...

    @property
    def ShowSeriesName(self) -> bool:
        """
        Get: ShowSeriesName(self: DataLabel) -> bool
        Set: ShowSeriesName(self: DataLabel) = value
        """
        ...

    @property
    def ShowValue(self) -> bool:
        """
        Get: ShowValue(self: DataLabel) -> bool
        Set: ShowValue(self: DataLabel) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: DataLabel) -> str
        Set: Text(self: DataLabel) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: DataLabel) -> float
        Set: Top(self: DataLabel) = value
        """
        ...

    @property
    def Type(self) -> object:
        """
        Get: Type(self: DataLabel) -> object
        Set: Type(self: DataLabel) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: DataLabel) -> object
        Set: VerticalAlignment(self: DataLabel) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: DataLabel) -> float
        Set: Width(self: DataLabel) = value
        """
        ...

    @property
    def _Height(self) -> float:
        """ Get: _Height(self: DataLabel) -> float """
        ...

    @property
    def _Width(self) -> float:
        """ Get: _Width(self: DataLabel) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: DataLabel) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: DataLabel) -> object """
        ...


class DataLabels(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DataLabels) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: DataLabels) -> object
        Set: AutoScaleFont(self: DataLabels) = value
        """
        ...

    @property
    def AutoText(self) -> bool:
        """
        Get: AutoText(self: DataLabels) -> bool
        Set: AutoText(self: DataLabels) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: DataLabels) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: DataLabels) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DataLabels) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: DataLabels) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: DataLabels) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DataLabels) -> ChartFormat """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: DataLabels) -> object
        Set: HorizontalAlignment(self: DataLabels) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: DataLabels) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DataLabels) -> str """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: DataLabels) -> str
        Set: NumberFormat(self: DataLabels) = value
        """
        ...

    @property
    def NumberFormatLinked(self) -> bool:
        """
        Get: NumberFormatLinked(self: DataLabels) -> bool
        Set: NumberFormatLinked(self: DataLabels) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: DataLabels) -> object
        Set: NumberFormatLocal(self: DataLabels) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: DataLabels) -> object
        Set: Orientation(self: DataLabels) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DataLabels) -> object """
        ...

    @property
    def Position(self) -> XlDataLabelPosition:
        """
        Get: Position(self: DataLabels) -> XlDataLabelPosition
        Set: Position(self: DataLabels) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: DataLabels) -> int
        Set: ReadingOrder(self: DataLabels) = value
        """
        ...

    @property
    def Separator(self) -> object:
        """
        Get: Separator(self: DataLabels) -> object
        Set: Separator(self: DataLabels) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: DataLabels) -> bool
        Set: Shadow(self: DataLabels) = value
        """
        ...

    @property
    def ShowBubbleSize(self) -> bool:
        """
        Get: ShowBubbleSize(self: DataLabels) -> bool
        Set: ShowBubbleSize(self: DataLabels) = value
        """
        ...

    @property
    def ShowCategoryName(self) -> bool:
        """
        Get: ShowCategoryName(self: DataLabels) -> bool
        Set: ShowCategoryName(self: DataLabels) = value
        """
        ...

    @property
    def ShowLegendKey(self) -> bool:
        """
        Get: ShowLegendKey(self: DataLabels) -> bool
        Set: ShowLegendKey(self: DataLabels) = value
        """
        ...

    @property
    def ShowPercentage(self) -> bool:
        """
        Get: ShowPercentage(self: DataLabels) -> bool
        Set: ShowPercentage(self: DataLabels) = value
        """
        ...

    @property
    def ShowRange(self) -> bool:
        """
        Get: ShowRange(self: DataLabels) -> bool
        Set: ShowRange(self: DataLabels) = value
        """
        ...

    @property
    def ShowSeriesName(self) -> bool:
        """
        Get: ShowSeriesName(self: DataLabels) -> bool
        Set: ShowSeriesName(self: DataLabels) = value
        """
        ...

    @property
    def ShowValue(self) -> bool:
        """
        Get: ShowValue(self: DataLabels) -> bool
        Set: ShowValue(self: DataLabels) = value
        """
        ...

    @property
    def Type(self) -> object:
        """
        Get: Type(self: DataLabels) -> object
        Set: Type(self: DataLabels) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: DataLabels) -> object
        Set: VerticalAlignment(self: DataLabels) = value
        """
        ...


    def Delete(self) -> object:
        """ Delete(self: DataLabels) -> object """
        ...

    def Item(self, Index:object) -> DataLabel:
        """ Item(self: DataLabels, Index: object) -> DataLabel """
        ...

    def Propagate(self, Index:object): # -> 
        """ Propagate(self: DataLabels, Index: object) """
        ...

    def Select(self) -> object:
        """ Select(self: DataLabels) -> object """
        ...

    def _Default(self, Index:object) -> DataLabel:
        """ _Default(self: DataLabels, Index: object) -> DataLabel """
        ...

    def _Dummy10(self): # -> 
        """ _Dummy10(self: DataLabels) """
        ...

    def _Dummy13(self): # -> 
        """ _Dummy13(self: DataLabels) """
        ...

    def _Dummy16(self): # -> 
        """ _Dummy16(self: DataLabels) """
        ...

    def _Dummy17(self): # -> 
        """ _Dummy17(self: DataLabels) """
        ...

    def _Dummy9(self): # -> 
        """ _Dummy9(self: DataLabels) """
        ...


class DataTable: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DataTable) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: DataTable) -> object
        Set: AutoScaleFont(self: DataTable) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: DataTable) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DataTable) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: DataTable) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DataTable) -> ChartFormat """
        ...

    @property
    def HasBorderHorizontal(self) -> bool:
        """
        Get: HasBorderHorizontal(self: DataTable) -> bool
        Set: HasBorderHorizontal(self: DataTable) = value
        """
        ...

    @property
    def HasBorderOutline(self) -> bool:
        """
        Get: HasBorderOutline(self: DataTable) -> bool
        Set: HasBorderOutline(self: DataTable) = value
        """
        ...

    @property
    def HasBorderVertical(self) -> bool:
        """
        Get: HasBorderVertical(self: DataTable) -> bool
        Set: HasBorderVertical(self: DataTable) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DataTable) -> object """
        ...

    @property
    def ShowLegendKey(self) -> bool:
        """
        Get: ShowLegendKey(self: DataTable) -> bool
        Set: ShowLegendKey(self: DataTable) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: DataTable) """
        ...

    def Select(self): # -> 
        """ Select(self: DataTable) """
        ...


class DefaultWebOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowPNG(self) -> bool:
        """
        Get: AllowPNG(self: DefaultWebOptions) -> bool
        Set: AllowPNG(self: DefaultWebOptions) = value
        """
        ...

    @property
    def AlwaysSaveInDefaultEncoding(self) -> bool:
        """
        Get: AlwaysSaveInDefaultEncoding(self: DefaultWebOptions) -> bool
        Set: AlwaysSaveInDefaultEncoding(self: DefaultWebOptions) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: DefaultWebOptions) -> Application """
        ...

    @property
    def CheckIfOfficeIsHTMLEditor(self) -> bool:
        """
        Get: CheckIfOfficeIsHTMLEditor(self: DefaultWebOptions) -> bool
        Set: CheckIfOfficeIsHTMLEditor(self: DefaultWebOptions) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DefaultWebOptions) -> XlCreator """
        ...

    @property
    def DownloadComponents(self) -> bool:
        """
        Get: DownloadComponents(self: DefaultWebOptions) -> bool
        Set: DownloadComponents(self: DefaultWebOptions) = value
        """
        ...

    @property
    def Encoding(self): # -> MsoEncoding
        """
        Get: Encoding(self: DefaultWebOptions) -> MsoEncoding
        Set: Encoding(self: DefaultWebOptions) = value
        """
        ...

    @property
    def FolderSuffix(self) -> str:
        """ Get: FolderSuffix(self: DefaultWebOptions) -> str """
        ...

    @property
    def Fonts(self): # -> WebPageFonts
        """ Get: Fonts(self: DefaultWebOptions) -> WebPageFonts """
        ...

    @property
    def LoadPictures(self) -> bool:
        """
        Get: LoadPictures(self: DefaultWebOptions) -> bool
        Set: LoadPictures(self: DefaultWebOptions) = value
        """
        ...

    @property
    def LocationOfComponents(self) -> str:
        """
        Get: LocationOfComponents(self: DefaultWebOptions) -> str
        Set: LocationOfComponents(self: DefaultWebOptions) = value
        """
        ...

    @property
    def OrganizeInFolder(self) -> bool:
        """
        Get: OrganizeInFolder(self: DefaultWebOptions) -> bool
        Set: OrganizeInFolder(self: DefaultWebOptions) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DefaultWebOptions) -> object """
        ...

    @property
    def PixelsPerInch(self) -> int:
        """
        Get: PixelsPerInch(self: DefaultWebOptions) -> int
        Set: PixelsPerInch(self: DefaultWebOptions) = value
        """
        ...

    @property
    def RelyOnCSS(self) -> bool:
        """
        Get: RelyOnCSS(self: DefaultWebOptions) -> bool
        Set: RelyOnCSS(self: DefaultWebOptions) = value
        """
        ...

    @property
    def RelyOnVML(self) -> bool:
        """
        Get: RelyOnVML(self: DefaultWebOptions) -> bool
        Set: RelyOnVML(self: DefaultWebOptions) = value
        """
        ...

    @property
    def SaveHiddenData(self) -> bool:
        """
        Get: SaveHiddenData(self: DefaultWebOptions) -> bool
        Set: SaveHiddenData(self: DefaultWebOptions) = value
        """
        ...

    @property
    def SaveNewWebPagesAsWebArchives(self) -> bool:
        """
        Get: SaveNewWebPagesAsWebArchives(self: DefaultWebOptions) -> bool
        Set: SaveNewWebPagesAsWebArchives(self: DefaultWebOptions) = value
        """
        ...

    @property
    def ScreenSize(self): # -> MsoScreenSize
        """
        Get: ScreenSize(self: DefaultWebOptions) -> MsoScreenSize
        Set: ScreenSize(self: DefaultWebOptions) = value
        """
        ...

    @property
    def TargetBrowser(self): # -> MsoTargetBrowser
        """
        Get: TargetBrowser(self: DefaultWebOptions) -> MsoTargetBrowser
        Set: TargetBrowser(self: DefaultWebOptions) = value
        """
        ...

    @property
    def UpdateLinksOnSave(self) -> bool:
        """
        Get: UpdateLinksOnSave(self: DefaultWebOptions) -> bool
        Set: UpdateLinksOnSave(self: DefaultWebOptions) = value
        """
        ...

    @property
    def UseLongFileNames(self) -> bool:
        """
        Get: UseLongFileNames(self: DefaultWebOptions) -> bool
        Set: UseLongFileNames(self: DefaultWebOptions) = value
        """
        ...



class Diagram: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Diagram) -> Application """
        ...

    @property
    def AutoFormat(self): # -> MsoTriState
        """
        Get: AutoFormat(self: Diagram) -> MsoTriState
        Set: AutoFormat(self: Diagram) = value
        """
        ...

    @property
    def AutoLayout(self): # -> MsoTriState
        """
        Get: AutoLayout(self: Diagram) -> MsoTriState
        Set: AutoLayout(self: Diagram) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Diagram) -> XlCreator """
        ...

    @property
    def Nodes(self) -> DiagramNodes:
        """ Get: Nodes(self: Diagram) -> DiagramNodes """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Diagram) -> object """
        ...

    @property
    def Reverse(self): # -> MsoTriState
        """
        Get: Reverse(self: Diagram) -> MsoTriState
        Set: Reverse(self: Diagram) = value
        """
        ...

    @property
    def Type(self): # -> MsoDiagramType
        """ Get: Type(self: Diagram) -> MsoDiagramType """
        ...


    def Convert(self, Type): # ->  # Not found arg types: {'Type': 'MsoDiagramType'}
        """ Convert(self: Diagram, Type: MsoDiagramType) """
        ...

    def FitText(self): # -> 
        """ FitText(self: Diagram) """
        ...


class DiagramNode(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Children(self) -> DiagramNodeChildren:
        """ Get: Children(self: DiagramNode) -> DiagramNodeChildren """
        ...

    @property
    def Diagram(self): # -> IMsoDiagram
        """ Get: Diagram(self: DiagramNode) -> IMsoDiagram """
        ...

    @property
    def Layout(self): # -> MsoOrgChartLayoutType
        """
        Get: Layout(self: DiagramNode) -> MsoOrgChartLayoutType
        Set: Layout(self: DiagramNode) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DiagramNode) -> object """
        ...

    @property
    def Root(self) -> DiagramNode:
        """ Get: Root(self: DiagramNode) -> DiagramNode """
        ...

    @property
    def Shape(self) -> Shape:
        """ Get: Shape(self: DiagramNode) -> Shape """
        ...

    @property
    def TextShape(self) -> Shape:
        """ Get: TextShape(self: DiagramNode) -> Shape """
        ...


    def AddNode(self, pos, nodeType) -> DiagramNode: # Not found arg types: {'pos': 'MsoRelativeNodePosition', 'nodeType': 'MsoDiagramNodeType'}
        """ AddNode(self: DiagramNode, pos: MsoRelativeNodePosition, nodeType: MsoDiagramNodeType) -> DiagramNode """
        ...

    def CloneNode(self, copyChildren:bool, pTargetNode:DiagramNode, pos) -> DiagramNode: # Not found arg types: {'pos': 'MsoRelativeNodePosition'}
        """ CloneNode(self: DiagramNode, copyChildren: bool, pTargetNode: DiagramNode, pos: MsoRelativeNodePosition) -> DiagramNode """
        ...

    def Delete(self): # -> 
        """ Delete(self: DiagramNode) """
        ...

    def MoveNode(self, pTargetNode:DiagramNode, pos): # ->  # Not found arg types: {'pos': 'MsoRelativeNodePosition'}
        """ MoveNode(self: DiagramNode, pTargetNode: DiagramNode, pos: MsoRelativeNodePosition) """
        ...

    def NextNode(self) -> DiagramNode:
        """ NextNode(self: DiagramNode) -> DiagramNode """
        ...

    def PrevNode(self) -> DiagramNode:
        """ PrevNode(self: DiagramNode) -> DiagramNode """
        ...

    def ReplaceNode(self, pTargetNode:DiagramNode): # -> 
        """ ReplaceNode(self: DiagramNode, pTargetNode: DiagramNode) """
        ...

    def SwapNode(self, pTargetNode:DiagramNode, swapChildren:bool): # -> 
        """ SwapNode(self: DiagramNode, pTargetNode: DiagramNode, swapChildren: bool) """
        ...

    def TransferChildren(self, pReceivingNode:DiagramNode): # -> 
        """ TransferChildren(self: DiagramNode, pReceivingNode: DiagramNode) """
        ...


class DiagramNodeChildren(IEnumerable, _IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: DiagramNodeChildren) -> int """
        ...

    @property
    def FirstChild(self) -> DiagramNode:
        """ Get: FirstChild(self: DiagramNodeChildren) -> DiagramNode """
        ...

    @property
    def LastChild(self) -> DiagramNode:
        """ Get: LastChild(self: DiagramNodeChildren) -> DiagramNode """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DiagramNodeChildren) -> object """
        ...


    def AddNode(self, Index:object, nodeType) -> DiagramNode: # Not found arg types: {'nodeType': 'MsoDiagramNodeType'}
        """ AddNode(self: DiagramNodeChildren, Index: object, nodeType: MsoDiagramNodeType) -> DiagramNode """
        ...

    def Item(self, Index:object) -> DiagramNode:
        """ Item(self: DiagramNodeChildren, Index: object) -> DiagramNode """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: DiagramNodeChildren) """
        ...


class DiagramNodes(IEnumerable, _IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: DiagramNodes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DiagramNodes) -> object """
        ...


    def Item(self, Index:object) -> DiagramNode:
        """ Item(self: DiagramNodes, Index: object) -> DiagramNode """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: DiagramNodes) """
        ...


class Dialog: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Dialog) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Dialog) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Dialog) -> object """
        ...


    def Show(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> bool:
        """ Show(self: Dialog, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        ...


class DialogFrame: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DialogFrame) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: DialogFrame) -> str
        Set: Caption(self: DialogFrame) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DialogFrame) -> XlCreator """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: DialogFrame) -> float
        Set: Height(self: DialogFrame) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: DialogFrame) -> float
        Set: Left(self: DialogFrame) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: DialogFrame) -> bool
        Set: Locked(self: DialogFrame) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: DialogFrame) -> bool
        Set: LockedText(self: DialogFrame) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: DialogFrame) -> str
        Set: Name(self: DialogFrame) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: DialogFrame) -> str
        Set: OnAction(self: DialogFrame) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DialogFrame) -> object """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: DialogFrame) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: DialogFrame) -> str
        Set: Text(self: DialogFrame) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: DialogFrame) -> float
        Set: Top(self: DialogFrame) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: DialogFrame) -> float
        Set: Width(self: DialogFrame) = value
        """
        ...


    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: DialogFrame, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: DialogFrame, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: DialogFrame, Replace: object) -> object """
        ...

    def _Dummy10(self): # -> 
        """ _Dummy10(self: DialogFrame) """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: DialogFrame) """
        ...

    def _Dummy17(self): # -> 
        """ _Dummy17(self: DialogFrame) """
        ...

    def _Dummy18(self): # -> 
        """ _Dummy18(self: DialogFrame) """
        ...

    def _Dummy20(self): # -> 
        """ _Dummy20(self: DialogFrame) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: DialogFrame) """
        ...

    def _Dummy23(self): # -> 
        """ _Dummy23(self: DialogFrame) """
        ...

    def _Dummy25(self): # -> 
        """ _Dummy25(self: DialogFrame) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: DialogFrame) """
        ...

    def _Dummy4(self): # -> 
        """ _Dummy4(self: DialogFrame) """
        ...

    def _Dummy5(self): # -> 
        """ _Dummy5(self: DialogFrame) """
        ...

    def _Dummy7(self): # -> 
        """ _Dummy7(self: DialogFrame) """
        ...

    def _Dummy8(self): # -> 
        """ _Dummy8(self: DialogFrame) """
        ...

    def _Dummy9(self): # -> 
        """ _Dummy9(self: DialogFrame) """
        ...


class Dialogs(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Dialogs) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Dialogs) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Dialogs) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Dialogs) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class DialogSheet: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DialogSheet) -> Application """
        ...

    @property
    def AutoFilter(self) -> AutoFilter:
        """ Get: AutoFilter(self: DialogSheet) -> AutoFilter """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: DialogSheet) -> str """
        ...

    @property
    def Comments(self) -> Comments:
        """ Get: Comments(self: DialogSheet) -> Comments """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DialogSheet) -> XlCreator """
        ...

    @property
    def CustomProperties(self) -> CustomProperties:
        """ Get: CustomProperties(self: DialogSheet) -> CustomProperties """
        ...

    @property
    def DefaultButton(self) -> object:
        """
        Get: DefaultButton(self: DialogSheet) -> object
        Set: DefaultButton(self: DialogSheet) = value
        """
        ...

    @property
    def DialogFrame(self) -> DialogFrame:
        """ Get: DialogFrame(self: DialogSheet) -> DialogFrame """
        ...

    @property
    def DisplayAutomaticPageBreaks(self) -> bool:
        """
        Get: DisplayAutomaticPageBreaks(self: DialogSheet) -> bool
        Set: DisplayAutomaticPageBreaks(self: DialogSheet) = value
        """
        ...

    @property
    def DisplayPageBreaks(self) -> bool:
        """
        Get: DisplayPageBreaks(self: DialogSheet) -> bool
        Set: DisplayPageBreaks(self: DialogSheet) = value
        """
        ...

    @property
    def DisplayRightToLeft(self) -> bool:
        """
        Get: DisplayRightToLeft(self: DialogSheet) -> bool
        Set: DisplayRightToLeft(self: DialogSheet) = value
        """
        ...

    @property
    def EnableAutoFilter(self) -> bool:
        """
        Get: EnableAutoFilter(self: DialogSheet) -> bool
        Set: EnableAutoFilter(self: DialogSheet) = value
        """
        ...

    @property
    def EnableCalculation(self) -> bool:
        """
        Get: EnableCalculation(self: DialogSheet) -> bool
        Set: EnableCalculation(self: DialogSheet) = value
        """
        ...

    @property
    def EnableFormatConditionsCalculation(self) -> bool:
        """
        Get: EnableFormatConditionsCalculation(self: DialogSheet) -> bool
        Set: EnableFormatConditionsCalculation(self: DialogSheet) = value
        """
        ...

    @property
    def EnableOutlining(self) -> bool:
        """
        Get: EnableOutlining(self: DialogSheet) -> bool
        Set: EnableOutlining(self: DialogSheet) = value
        """
        ...

    @property
    def EnablePivotTable(self) -> bool:
        """
        Get: EnablePivotTable(self: DialogSheet) -> bool
        Set: EnablePivotTable(self: DialogSheet) = value
        """
        ...

    @property
    def EnableSelection(self) -> XlEnableSelection:
        """
        Get: EnableSelection(self: DialogSheet) -> XlEnableSelection
        Set: EnableSelection(self: DialogSheet) = value
        """
        ...

    @property
    def Focus(self) -> object:
        """
        Get: Focus(self: DialogSheet) -> object
        Set: Focus(self: DialogSheet) = value
        """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: DialogSheet) -> HPageBreaks """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: DialogSheet) -> Hyperlinks """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: DialogSheet) -> int """
        ...

    @property
    def MailEnvelope(self): # -> MsoEnvelope
        """ Get: MailEnvelope(self: DialogSheet) -> MsoEnvelope """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: DialogSheet) -> str
        Set: Name(self: DialogSheet) = value
        """
        ...

    @property
    def Names(self) -> Names:
        """ Get: Names(self: DialogSheet) -> Names """
        ...

    @property
    def Next(self) -> object:
        """ Get: Next(self: DialogSheet) -> object """
        ...

    @property
    def OnDoubleClick(self) -> str:
        """
        Get: OnDoubleClick(self: DialogSheet) -> str
        Set: OnDoubleClick(self: DialogSheet) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: DialogSheet) -> str
        Set: OnSheetActivate(self: DialogSheet) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: DialogSheet) -> str
        Set: OnSheetDeactivate(self: DialogSheet) = value
        """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """ Get: PageSetup(self: DialogSheet) -> PageSetup """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DialogSheet) -> object """
        ...

    @property
    def Previous(self) -> object:
        """ Get: Previous(self: DialogSheet) -> object """
        ...

    @property
    def PrintedCommentPages(self) -> int:
        """ Get: PrintedCommentPages(self: DialogSheet) -> int """
        ...

    @property
    def ProtectContents(self) -> bool:
        """ Get: ProtectContents(self: DialogSheet) -> bool """
        ...

    @property
    def ProtectDrawingObjects(self) -> bool:
        """ Get: ProtectDrawingObjects(self: DialogSheet) -> bool """
        ...

    @property
    def Protection(self) -> Protection:
        """ Get: Protection(self: DialogSheet) -> Protection """
        ...

    @property
    def ProtectionMode(self) -> bool:
        """ Get: ProtectionMode(self: DialogSheet) -> bool """
        ...

    @property
    def ProtectScenarios(self) -> bool:
        """ Get: ProtectScenarios(self: DialogSheet) -> bool """
        ...

    @property
    def QueryTables(self) -> QueryTables:
        """ Get: QueryTables(self: DialogSheet) -> QueryTables """
        ...

    @property
    def Scripts(self): # -> Scripts
        """ Get: Scripts(self: DialogSheet) -> Scripts """
        ...

    @property
    def ScrollArea(self) -> str:
        """
        Get: ScrollArea(self: DialogSheet) -> str
        Set: ScrollArea(self: DialogSheet) = value
        """
        ...

    @property
    def Shapes(self) -> Shapes:
        """ Get: Shapes(self: DialogSheet) -> Shapes """
        ...

    @property
    def SmartTags(self) -> SmartTags:
        """ Get: SmartTags(self: DialogSheet) -> SmartTags """
        ...

    @property
    def Sort(self) -> Sort:
        """ Get: Sort(self: DialogSheet) -> Sort """
        ...

    @property
    def Tab(self) -> Tab:
        """ Get: Tab(self: DialogSheet) -> Tab """
        ...

    @property
    def Visible(self) -> XlSheetVisibility:
        """
        Get: Visible(self: DialogSheet) -> XlSheetVisibility
        Set: Visible(self: DialogSheet) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: DialogSheet) -> VPageBreaks """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: DialogSheet) -> str
        Set: _CodeName(self: DialogSheet) = value
        """
        ...

    @property
    def _DisplayRightToLeft(self) -> int:
        """
        Get: _DisplayRightToLeft(self: DialogSheet) -> int
        Set: _DisplayRightToLeft(self: DialogSheet) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: DialogSheet) """
        ...

    def Arcs(self, Index:object) -> object:
        """ Arcs(self: DialogSheet, Index: object) -> object """
        ...

    def Buttons(self, Index:object) -> object:
        """ Buttons(self: DialogSheet, Index: object) -> object """
        ...

    def ChartObjects(self, Index:object) -> object:
        """ ChartObjects(self: DialogSheet, Index: object) -> object """
        ...

    def CheckBoxes(self, Index:object) -> object:
        """ CheckBoxes(self: DialogSheet, Index: object) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object): # -> 
        """ CheckSpelling(self: DialogSheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        ...

    def CircleInvalid(self): # -> 
        """ CircleInvalid(self: DialogSheet) """
        ...

    def ClearCircles(self): # -> 
        """ ClearCircles(self: DialogSheet) """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: DialogSheet, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: DialogSheet) """
        ...

    def DrawingObjects(self, Index:object) -> object:
        """ DrawingObjects(self: DialogSheet, Index: object) -> object """
        ...

    def Drawings(self, Index:object) -> object:
        """ Drawings(self: DialogSheet, Index: object) -> object """
        ...

    def DropDowns(self, Index:object) -> object:
        """ DropDowns(self: DialogSheet, Index: object) -> object """
        ...

    def EditBoxes(self, Index:object) -> object:
        """ EditBoxes(self: DialogSheet, Index: object) -> object """
        ...

    def Evaluate(self, Name:object) -> object:
        """ Evaluate(self: DialogSheet, Name: object) -> object """
        ...

    def ExportAsFixedFormat(self, Type:XlFixedFormatType, Filename:object, Quality:object, IncludeDocProperties:object, IgnorePrintAreas:object, From:object, To:object, OpenAfterPublish:object, FixedFormatExtClassPtr:object): # -> 
        """ ExportAsFixedFormat(self: DialogSheet, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        ...

    def GroupBoxes(self, Index:object) -> object:
        """ GroupBoxes(self: DialogSheet, Index: object) -> object """
        ...

    def GroupObjects(self, Index:object) -> object:
        """ GroupObjects(self: DialogSheet, Index: object) -> object """
        ...

    def Hide(self, Cancel:object) -> bool:
        """ Hide(self: DialogSheet, Cancel: object) -> bool """
        ...

    def Labels(self, Index:object) -> object:
        """ Labels(self: DialogSheet, Index: object) -> object """
        ...

    def Lines(self, Index:object) -> object:
        """ Lines(self: DialogSheet, Index: object) -> object """
        ...

    def ListBoxes(self, Index:object) -> object:
        """ ListBoxes(self: DialogSheet, Index: object) -> object """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: DialogSheet, Before: object, After: object) """
        ...

    def OLEObjects(self, Index:object) -> object:
        """ OLEObjects(self: DialogSheet, Index: object) -> object """
        ...

    def OptionButtons(self, Index:object) -> object:
        """ OptionButtons(self: DialogSheet, Index: object) -> object """
        ...

    def Ovals(self, Index:object) -> object:
        """ Ovals(self: DialogSheet, Index: object) -> object """
        ...

    def Paste(self, Destination:object, Link:object): # -> 
        """ Paste(self: DialogSheet, Destination: object, Link: object) """
        ...

    def PasteSpecial(self, Format:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object, NoHTMLFormatting:object): # -> 
        """ PasteSpecial(self: DialogSheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, NoHTMLFormatting: object) """
        ...

    def Pictures(self, Index:object) -> object:
        """ Pictures(self: DialogSheet, Index: object) -> object """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: DialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOutEx(self: DialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: DialogSheet, EnableChanges: object) """
        ...

    def Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object, AllowFormattingCells:object, AllowFormattingColumns:object, AllowFormattingRows:object, AllowInsertingColumns:object, AllowInsertingRows:object, AllowInsertingHyperlinks:object, AllowDeletingColumns:object, AllowDeletingRows:object, AllowSorting:object, AllowFiltering:object, AllowUsingPivotTables:object): # -> 
        """ Protect(self: DialogSheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object, AllowFormattingCells: object, AllowFormattingColumns: object, AllowFormattingRows: object, AllowInsertingColumns: object, AllowInsertingRows: object, AllowInsertingHyperlinks: object, AllowDeletingColumns: object, AllowDeletingRows: object, AllowSorting: object, AllowFiltering: object, AllowUsingPivotTables: object) """
        ...

    def Rectangles(self, Index:object) -> object:
        """ Rectangles(self: DialogSheet, Index: object) -> object """
        ...

    def ResetAllPageBreaks(self): # -> 
        """ ResetAllPageBreaks(self: DialogSheet) """
        ...

    def SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object, Local:object): # -> 
        """ SaveAs(self: DialogSheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        ...

    def ScrollBars(self, Index:object) -> object:
        """ ScrollBars(self: DialogSheet, Index: object) -> object """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: DialogSheet, Replace: object) """
        ...

    def Show(self) -> bool:
        """ Show(self: DialogSheet) -> bool """
        ...

    def Spinners(self, Index:object) -> object:
        """ Spinners(self: DialogSheet, Index: object) -> object """
        ...

    def TextBoxes(self, Index:object) -> object:
        """ TextBoxes(self: DialogSheet, Index: object) -> object """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: DialogSheet, Password: object) """
        ...

    def _CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object, IgnoreFinalYaa:object, SpellScript:object): # -> 
        """ _CheckSpelling(self: DialogSheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object, IgnoreFinalYaa: object, SpellScript: object) """
        ...

    def _Dummy113(self): # -> 
        """ _Dummy113(self: DialogSheet) """
        ...

    def _Dummy114(self): # -> 
        """ _Dummy114(self: DialogSheet) """
        ...

    def _Dummy115(self): # -> 
        """ _Dummy115(self: DialogSheet) """
        ...

    def _Dummy29(self): # -> 
        """ _Dummy29(self: DialogSheet) """
        ...

    def _Dummy31(self): # -> 
        """ _Dummy31(self: DialogSheet) """
        ...

    def _Dummy32(self): # -> 
        """ _Dummy32(self: DialogSheet) """
        ...

    def _Dummy34(self): # -> 
        """ _Dummy34(self: DialogSheet) """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: DialogSheet) """
        ...

    def _Dummy40(self): # -> 
        """ _Dummy40(self: DialogSheet) """
        ...

    def _Dummy41(self): # -> 
        """ _Dummy41(self: DialogSheet) """
        ...

    def _Dummy42(self): # -> 
        """ _Dummy42(self: DialogSheet) """
        ...

    def _Dummy43(self): # -> 
        """ _Dummy43(self: DialogSheet) """
        ...

    def _Dummy44(self): # -> 
        """ _Dummy44(self: DialogSheet) """
        ...

    def _Dummy45(self): # -> 
        """ _Dummy45(self: DialogSheet) """
        ...

    def _Dummy56(self): # -> 
        """ _Dummy56(self: DialogSheet) """
        ...

    def _Dummy65(self): # -> 
        """ _Dummy65(self: DialogSheet) """
        ...

    def _Dummy66(self): # -> 
        """ _Dummy66(self: DialogSheet) """
        ...

    def _Dummy67(self): # -> 
        """ _Dummy67(self: DialogSheet) """
        ...

    def _Dummy69(self): # -> 
        """ _Dummy69(self: DialogSheet) """
        ...

    def _Dummy74(self): # -> 
        """ _Dummy74(self: DialogSheet) """
        ...

    def _Dummy75(self): # -> 
        """ _Dummy75(self: DialogSheet) """
        ...

    def _Dummy76(self): # -> 
        """ _Dummy76(self: DialogSheet) """
        ...

    def _Dummy78(self): # -> 
        """ _Dummy78(self: DialogSheet) """
        ...

    def _Dummy79(self): # -> 
        """ _Dummy79(self: DialogSheet) """
        ...

    def _Dummy82(self): # -> 
        """ _Dummy82(self: DialogSheet) """
        ...

    def _Dummy83(self): # -> 
        """ _Dummy83(self: DialogSheet) """
        ...

    def _Dummy85(self): # -> 
        """ _Dummy85(self: DialogSheet) """
        ...

    def _Dummy86(self): # -> 
        """ _Dummy86(self: DialogSheet) """
        ...

    def _Dummy88(self): # -> 
        """ _Dummy88(self: DialogSheet) """
        ...

    def _Dummy89(self): # -> 
        """ _Dummy89(self: DialogSheet) """
        ...

    def _Dummy90(self): # -> 
        """ _Dummy90(self: DialogSheet) """
        ...

    def _Evaluate(self, Name:object) -> object:
        """ _Evaluate(self: DialogSheet, Name: object) -> object """
        ...

    def _PasteSpecial(self, Format:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object): # -> 
        """ _PasteSpecial(self: DialogSheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: DialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ _Protect(self: DialogSheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def _SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ _SaveAs(self: DialogSheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...


class DialogSheets(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DialogSheets) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: DialogSheets) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DialogSheets) -> XlCreator """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: DialogSheets) -> HPageBreaks """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DialogSheets) -> object """
        ...

    @property
    def Visible(self) -> object:
        """
        Get: Visible(self: DialogSheets) -> object
        Set: Visible(self: DialogSheets) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: DialogSheets) -> VPageBreaks """
        ...


    def Add(self, Before:object, After:object, Count:object) -> DialogSheet:
        """ Add(self: DialogSheets, Before: object, After: object, Count: object) -> DialogSheet """
        ...

    def Add2(self, Before:object, After:object, Count:object, NewLayout:object) -> object:
        """ Add2(self: DialogSheets, Before: object, After: object, Count: object, NewLayout: object) -> object """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: DialogSheets, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: DialogSheets) """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: DialogSheets, Before: object, After: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: DialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOutEx(self: DialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: DialogSheets, EnableChanges: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: DialogSheets, Replace: object) """
        ...

    def _Dummy7(self): # -> 
        """ _Dummy7(self: DialogSheets) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: DialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class DialogSheetView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DialogSheetView) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DialogSheetView) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DialogSheetView) -> object """
        ...

    @property
    def Sheet(self) -> object:
        """ Get: Sheet(self: DialogSheetView) -> object """
        ...



class DisplayFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> object:
        """ Get: AddIndent(self: DisplayFormat) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: DisplayFormat) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: DisplayFormat) -> Borders """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DisplayFormat) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: DisplayFormat) -> Font """
        ...

    @property
    def FormulaHidden(self) -> object:
        """ Get: FormulaHidden(self: DisplayFormat) -> object """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """ Get: HorizontalAlignment(self: DisplayFormat) -> object """
        ...

    @property
    def IndentLevel(self) -> object:
        """ Get: IndentLevel(self: DisplayFormat) -> object """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: DisplayFormat) -> Interior """
        ...

    @property
    def Locked(self) -> object:
        """ Get: Locked(self: DisplayFormat) -> object """
        ...

    @property
    def MergeCells(self) -> object:
        """ Get: MergeCells(self: DisplayFormat) -> object """
        ...

    @property
    def NumberFormat(self) -> object:
        """ Get: NumberFormat(self: DisplayFormat) -> object """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """ Get: NumberFormatLocal(self: DisplayFormat) -> object """
        ...

    @property
    def Orientation(self) -> object:
        """ Get: Orientation(self: DisplayFormat) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DisplayFormat) -> object """
        ...

    @property
    def ReadingOrder(self) -> int:
        """ Get: ReadingOrder(self: DisplayFormat) -> int """
        ...

    @property
    def ShrinkToFit(self) -> object:
        """ Get: ShrinkToFit(self: DisplayFormat) -> object """
        ...

    @property
    def Style(self) -> object:
        """ Get: Style(self: DisplayFormat) -> object """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """ Get: VerticalAlignment(self: DisplayFormat) -> object """
        ...

    @property
    def WrapText(self) -> object:
        """ Get: WrapText(self: DisplayFormat) -> object """
        ...



class DisplayUnitLabel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DisplayUnitLabel) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: DisplayUnitLabel) -> object
        Set: AutoScaleFont(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: DisplayUnitLabel) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: DisplayUnitLabel) -> str
        Set: Caption(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DisplayUnitLabel) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: DisplayUnitLabel) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: DisplayUnitLabel) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DisplayUnitLabel) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: DisplayUnitLabel) -> str
        Set: Formula(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: DisplayUnitLabel) -> str
        Set: FormulaLocal(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: DisplayUnitLabel) -> str
        Set: FormulaR1C1(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: DisplayUnitLabel) -> str
        Set: FormulaR1C1Local(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: DisplayUnitLabel) -> float """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: DisplayUnitLabel) -> object
        Set: HorizontalAlignment(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: DisplayUnitLabel) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: DisplayUnitLabel) -> float
        Set: Left(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DisplayUnitLabel) -> str """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: DisplayUnitLabel) -> object
        Set: Orientation(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DisplayUnitLabel) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: DisplayUnitLabel) -> XlChartElementPosition
        Set: Position(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: DisplayUnitLabel) -> int
        Set: ReadingOrder(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: DisplayUnitLabel) -> bool
        Set: Shadow(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: DisplayUnitLabel) -> str
        Set: Text(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: DisplayUnitLabel) -> float
        Set: Top(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: DisplayUnitLabel) -> object
        Set: VerticalAlignment(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: DisplayUnitLabel) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: DisplayUnitLabel) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: DisplayUnitLabel) -> object """
        ...

    def _Dummy21(self): # -> 
        """ _Dummy21(self: DisplayUnitLabel) """
        ...


class DocEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Activate(self): # -> 
        """ Activate(self: DocEvents) """
        ...

    def BeforeDelete(self): # -> 
        """ BeforeDelete(self: DocEvents) """
        ...

    def BeforeDoubleClick(self, Target, Cancel) -> bool:
        """ BeforeDoubleClick(self: DocEvents, Target: Range) -> bool """
        ...

    def BeforeRightClick(self, Target, Cancel) -> bool:
        """ BeforeRightClick(self: DocEvents, Target: Range) -> bool """
        ...

    def Calculate(self): # -> 
        """ Calculate(self: DocEvents) """
        ...

    def Change(self, Target:Range): # -> 
        """ Change(self: DocEvents, Target: Range) """
        ...

    def Deactivate(self): # -> 
        """ Deactivate(self: DocEvents) """
        ...

    def FollowHyperlink(self, Target:Hyperlink): # -> 
        """ FollowHyperlink(self: DocEvents, Target: Hyperlink) """
        ...

    def LensGalleryRenderComplete(self): # -> 
        """ LensGalleryRenderComplete(self: DocEvents) """
        ...

    def PivotTableAfterValueChange(self, TargetPivotTable:PivotTable, TargetRange:Range): # -> 
        """ PivotTableAfterValueChange(self: DocEvents, TargetPivotTable: PivotTable, TargetRange: Range) """
        ...

    def PivotTableBeforeAllocateChanges(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ PivotTableBeforeAllocateChanges(self: DocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def PivotTableBeforeCommitChanges(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ PivotTableBeforeCommitChanges(self: DocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def PivotTableBeforeDiscardChanges(self, TargetPivotTable:PivotTable, ValueChangeStart:int, ValueChangeEnd:int): # -> 
        """ PivotTableBeforeDiscardChanges(self: DocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        ...

    def PivotTableChangeSync(self, Target:PivotTable): # -> 
        """ PivotTableChangeSync(self: DocEvents, Target: PivotTable) """
        ...

    def PivotTableUpdate(self, Target:PivotTable): # -> 
        """ PivotTableUpdate(self: DocEvents, Target: PivotTable) """
        ...

    def SelectionChange(self, Target:Range): # -> 
        """ SelectionChange(self: DocEvents, Target: Range) """
        ...

    def TableUpdate(self, Target:TableObject): # -> 
        """ TableUpdate(self: DocEvents, Target: TableObject) """
        ...


class DocEvents_ActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_ActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: DocEvents_ActivateEventHandler) """
        ...


class DocEvents_BeforeDeleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_BeforeDeleteEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: DocEvents_BeforeDeleteEventHandler) """
        ...


class DocEvents_BeforeDoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_BeforeDoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Target, Cancel) -> bool:
        """ Invoke(self: DocEvents_BeforeDoubleClickEventHandler, Target: Range) -> bool """
        ...


class DocEvents_BeforeRightClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_BeforeRightClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Target, Cancel) -> bool:
        """ Invoke(self: DocEvents_BeforeRightClickEventHandler, Target: Range) -> bool """
        ...


class DocEvents_CalculateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_CalculateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: DocEvents_CalculateEventHandler) """
        ...


class DocEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Target:Range): # -> 
        """ Invoke(self: DocEvents_ChangeEventHandler, Target: Range) """
        ...


class DocEvents_DeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_DeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: DocEvents_DeactivateEventHandler) """
        ...


class DocEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Activate(self): # -> 
        """ add_Activate(self: DocEvents_Event, : DocEvents_ActivateEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: DocEvents_Event, : DocEvents_BeforeDeleteEventHandler) """
        ...

    def add_BeforeDoubleClick(self): # -> 
        """ add_BeforeDoubleClick(self: DocEvents_Event, : DocEvents_BeforeDoubleClickEventHandler) """
        ...

    def add_BeforeRightClick(self): # -> 
        """ add_BeforeRightClick(self: DocEvents_Event, : DocEvents_BeforeRightClickEventHandler) """
        ...

    def add_Calculate(self): # -> 
        """ add_Calculate(self: DocEvents_Event, : DocEvents_CalculateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: DocEvents_Event, : DocEvents_ChangeEventHandler) """
        ...

    def add_Deactivate(self): # -> 
        """ add_Deactivate(self: DocEvents_Event, : DocEvents_DeactivateEventHandler) """
        ...

    def add_FollowHyperlink(self): # -> 
        """ add_FollowHyperlink(self: DocEvents_Event, : DocEvents_FollowHyperlinkEventHandler) """
        ...

    def add_LensGalleryRenderComplete(self): # -> 
        """ add_LensGalleryRenderComplete(self: DocEvents_Event, : DocEvents_LensGalleryRenderCompleteEventHandler) """
        ...

    def add_PivotTableAfterValueChange(self): # -> 
        """ add_PivotTableAfterValueChange(self: DocEvents_Event, : DocEvents_PivotTableAfterValueChangeEventHandler) """
        ...

    def add_PivotTableBeforeAllocateChanges(self): # -> 
        """ add_PivotTableBeforeAllocateChanges(self: DocEvents_Event, : DocEvents_PivotTableBeforeAllocateChangesEventHandler) """
        ...

    def add_PivotTableBeforeCommitChanges(self): # -> 
        """ add_PivotTableBeforeCommitChanges(self: DocEvents_Event, : DocEvents_PivotTableBeforeCommitChangesEventHandler) """
        ...

    def add_PivotTableBeforeDiscardChanges(self): # -> 
        """ add_PivotTableBeforeDiscardChanges(self: DocEvents_Event, : DocEvents_PivotTableBeforeDiscardChangesEventHandler) """
        ...

    def add_PivotTableChangeSync(self): # -> 
        """ add_PivotTableChangeSync(self: DocEvents_Event, : DocEvents_PivotTableChangeSyncEventHandler) """
        ...

    def add_PivotTableUpdate(self): # -> 
        """ add_PivotTableUpdate(self: DocEvents_Event, : DocEvents_PivotTableUpdateEventHandler) """
        ...

    def add_SelectionChange(self): # -> 
        """ add_SelectionChange(self: DocEvents_Event, : DocEvents_SelectionChangeEventHandler) """
        ...

    def add_TableUpdate(self): # -> 
        """ add_TableUpdate(self: DocEvents_Event, : DocEvents_TableUpdateEventHandler) """
        ...

    def remove_Activate(self): # -> 
        """ remove_Activate(self: DocEvents_Event, : DocEvents_ActivateEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: DocEvents_Event, : DocEvents_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeDoubleClick(self): # -> 
        """ remove_BeforeDoubleClick(self: DocEvents_Event, : DocEvents_BeforeDoubleClickEventHandler) """
        ...

    def remove_BeforeRightClick(self): # -> 
        """ remove_BeforeRightClick(self: DocEvents_Event, : DocEvents_BeforeRightClickEventHandler) """
        ...

    def remove_Calculate(self): # -> 
        """ remove_Calculate(self: DocEvents_Event, : DocEvents_CalculateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: DocEvents_Event, : DocEvents_ChangeEventHandler) """
        ...

    def remove_Deactivate(self): # -> 
        """ remove_Deactivate(self: DocEvents_Event, : DocEvents_DeactivateEventHandler) """
        ...

    def remove_FollowHyperlink(self): # -> 
        """ remove_FollowHyperlink(self: DocEvents_Event, : DocEvents_FollowHyperlinkEventHandler) """
        ...

    def remove_LensGalleryRenderComplete(self): # -> 
        """ remove_LensGalleryRenderComplete(self: DocEvents_Event, : DocEvents_LensGalleryRenderCompleteEventHandler) """
        ...

    def remove_PivotTableAfterValueChange(self): # -> 
        """ remove_PivotTableAfterValueChange(self: DocEvents_Event, : DocEvents_PivotTableAfterValueChangeEventHandler) """
        ...

    def remove_PivotTableBeforeAllocateChanges(self): # -> 
        """ remove_PivotTableBeforeAllocateChanges(self: DocEvents_Event, : DocEvents_PivotTableBeforeAllocateChangesEventHandler) """
        ...

    def remove_PivotTableBeforeCommitChanges(self): # -> 
        """ remove_PivotTableBeforeCommitChanges(self: DocEvents_Event, : DocEvents_PivotTableBeforeCommitChangesEventHandler) """
        ...

    def remove_PivotTableBeforeDiscardChanges(self): # -> 
        """ remove_PivotTableBeforeDiscardChanges(self: DocEvents_Event, : DocEvents_PivotTableBeforeDiscardChangesEventHandler) """
        ...

    def remove_PivotTableChangeSync(self): # -> 
        """ remove_PivotTableChangeSync(self: DocEvents_Event, : DocEvents_PivotTableChangeSyncEventHandler) """
        ...

    def remove_PivotTableUpdate(self): # -> 
        """ remove_PivotTableUpdate(self: DocEvents_Event, : DocEvents_PivotTableUpdateEventHandler) """
        ...

    def remove_SelectionChange(self): # -> 
        """ remove_SelectionChange(self: DocEvents_Event, : DocEvents_SelectionChangeEventHandler) """
        ...

    def remove_TableUpdate(self): # -> 
        """ remove_TableUpdate(self: DocEvents_Event, : DocEvents_TableUpdateEventHandler) """
        ...

    Activate = ...
    BeforeDelete = ...
    BeforeDoubleClick = ...
    BeforeRightClick = ...
    Calculate = ...
    Change = ...
    Deactivate = ...
    FollowHyperlink = ...
    LensGalleryRenderComplete = ...
    PivotTableAfterValueChange = ...
    PivotTableBeforeAllocateChanges = ...
    PivotTableBeforeCommitChanges = ...
    PivotTableBeforeDiscardChanges = ...
    PivotTableChangeSync = ...
    PivotTableUpdate = ...
    SelectionChange = ...
    TableUpdate = ...


class DocEvents_FollowHyperlinkEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_FollowHyperlinkEventHandler(: object, : UIntPtr) """
    def Invoke(self, Target:Hyperlink): # -> 
        """ Invoke(self: DocEvents_FollowHyperlinkEventHandler, Target: Hyperlink) """
        ...


class DocEvents_LensGalleryRenderCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_LensGalleryRenderCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: DocEvents_LensGalleryRenderCompleteEventHandler) """
        ...


class DocEvents_PivotTableAfterValueChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_PivotTableAfterValueChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, TargetPivotTable:PivotTable, TargetRange:Range): # -> 
        """ Invoke(self: DocEvents_PivotTableAfterValueChangeEventHandler, TargetPivotTable: PivotTable, TargetRange: Range) """
        ...


class DocEvents_PivotTableBeforeAllocateChangesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_PivotTableBeforeAllocateChangesEventHandler(: object, : UIntPtr) """
    def Invoke(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ Invoke(self: DocEvents_PivotTableBeforeAllocateChangesEventHandler, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...


class DocEvents_PivotTableBeforeCommitChangesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_PivotTableBeforeCommitChangesEventHandler(: object, : UIntPtr) """
    def Invoke(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ Invoke(self: DocEvents_PivotTableBeforeCommitChangesEventHandler, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...


class DocEvents_PivotTableBeforeDiscardChangesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_PivotTableBeforeDiscardChangesEventHandler(: object, : UIntPtr) """
    def Invoke(self, TargetPivotTable:PivotTable, ValueChangeStart:int, ValueChangeEnd:int): # -> 
        """ Invoke(self: DocEvents_PivotTableBeforeDiscardChangesEventHandler, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        ...


class DocEvents_PivotTableChangeSyncEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_PivotTableChangeSyncEventHandler(: object, : UIntPtr) """
    def Invoke(self, Target:PivotTable): # -> 
        """ Invoke(self: DocEvents_PivotTableChangeSyncEventHandler, Target: PivotTable) """
        ...


class DocEvents_PivotTableUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_PivotTableUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Target:PivotTable): # -> 
        """ Invoke(self: DocEvents_PivotTableUpdateEventHandler, Target: PivotTable) """
        ...


class DocEvents_SelectionChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_SelectionChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Target:Range): # -> 
        """ Invoke(self: DocEvents_SelectionChangeEventHandler, Target: Range) """
        ...


class DocEvents_SinkHelper(DocEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_ActivateDelegate = ...
    m_BeforeDeleteDelegate = ...
    m_BeforeDoubleClickDelegate = ...
    m_BeforeRightClickDelegate = ...
    m_CalculateDelegate = ...
    m_ChangeDelegate = ...
    m_DeactivateDelegate = ...
    m_dwCookie = ...
    m_FollowHyperlinkDelegate = ...
    m_LensGalleryRenderCompleteDelegate = ...
    m_PivotTableAfterValueChangeDelegate = ...
    m_PivotTableBeforeAllocateChangesDelegate = ...
    m_PivotTableBeforeCommitChangesDelegate = ...
    m_PivotTableBeforeDiscardChangesDelegate = ...
    m_PivotTableChangeSyncDelegate = ...
    m_PivotTableUpdateDelegate = ...
    m_SelectionChangeDelegate = ...
    m_TableUpdateDelegate = ...


class DocEvents_TableUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocEvents_TableUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Target:TableObject): # -> 
        """ Invoke(self: DocEvents_TableUpdateEventHandler, Target: TableObject) """
        ...


class DownBars: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DownBars) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: DownBars) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DownBars) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: DownBars) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DownBars) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: DownBars) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DownBars) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DownBars) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: DownBars) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: DownBars) -> object """
        ...


class Drawing: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: Drawing) -> bool
        Set: AddIndent(self: Drawing) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Drawing) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Drawing) -> object
        Set: AutoScaleFont(self: Drawing) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Drawing) -> bool
        Set: AutoSize(self: Drawing) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Drawing) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: Drawing) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Drawing) -> str
        Set: Caption(self: Drawing) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Drawing) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Drawing) -> bool
        Set: Enabled(self: Drawing) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Drawing) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Drawing) -> str
        Set: Formula(self: Drawing) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Drawing) -> float
        Set: Height(self: Drawing) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: Drawing) -> object
        Set: HorizontalAlignment(self: Drawing) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Drawing) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Drawing) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Drawing) -> float
        Set: Left(self: Drawing) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Drawing) -> bool
        Set: Locked(self: Drawing) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Drawing) -> bool
        Set: LockedText(self: Drawing) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Drawing) -> str
        Set: Name(self: Drawing) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Drawing) -> str
        Set: OnAction(self: Drawing) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: Drawing) -> object
        Set: Orientation(self: Drawing) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Drawing) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Drawing) -> object
        Set: Placement(self: Drawing) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Drawing) -> bool
        Set: PrintObject(self: Drawing) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Drawing) -> int
        Set: ReadingOrder(self: Drawing) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Drawing) -> bool
        Set: Shadow(self: Drawing) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Drawing) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Drawing) -> str
        Set: Text(self: Drawing) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Drawing) -> float
        Set: Top(self: Drawing) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: Drawing) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: Drawing) -> object
        Set: VerticalAlignment(self: Drawing) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Drawing) -> bool
        Set: Visible(self: Drawing) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Drawing) -> float
        Set: Width(self: Drawing) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Drawing) -> int """
        ...


    def AddVertex(self, Left:float, Top:float) -> object:
        """ AddVertex(self: Drawing, Left: float, Top: float) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: Drawing) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Drawing, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Drawing) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Drawing, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Drawing) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Drawing) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Drawing) -> object """
        ...

    def Reshape(self, Vertex:int, Insert:bool, Left:object, Top:object) -> object:
        """ Reshape(self: Drawing, Vertex: int, Insert: bool, Left: object, Top: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Drawing, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Drawing) -> object """
        ...


class DrawingObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: DrawingObjects) -> object
        Set: Accelerator(self: DrawingObjects) = value
        """
        ...

    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: DrawingObjects) -> bool
        Set: AddIndent(self: DrawingObjects) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: DrawingObjects) -> Application """
        ...

    @property
    def ArrowHeadLength(self) -> object:
        """
        Get: ArrowHeadLength(self: DrawingObjects) -> object
        Set: ArrowHeadLength(self: DrawingObjects) = value
        """
        ...

    @property
    def ArrowHeadStyle(self) -> object:
        """
        Get: ArrowHeadStyle(self: DrawingObjects) -> object
        Set: ArrowHeadStyle(self: DrawingObjects) = value
        """
        ...

    @property
    def ArrowHeadWidth(self) -> object:
        """
        Get: ArrowHeadWidth(self: DrawingObjects) -> object
        Set: ArrowHeadWidth(self: DrawingObjects) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: DrawingObjects) -> bool
        Set: AutoSize(self: DrawingObjects) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: DrawingObjects) -> Border """
        ...

    @property
    def CancelButton(self) -> bool:
        """
        Get: CancelButton(self: DrawingObjects) -> bool
        Set: CancelButton(self: DrawingObjects) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: DrawingObjects) -> str
        Set: Caption(self: DrawingObjects) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: DrawingObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DrawingObjects) -> XlCreator """
        ...

    @property
    def DefaultButton(self) -> bool:
        """
        Get: DefaultButton(self: DrawingObjects) -> bool
        Set: DefaultButton(self: DrawingObjects) = value
        """
        ...

    @property
    def DismissButton(self) -> bool:
        """
        Get: DismissButton(self: DrawingObjects) -> bool
        Set: DismissButton(self: DrawingObjects) = value
        """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: DrawingObjects) -> bool
        Set: Display3DShading(self: DrawingObjects) = value
        """
        ...

    @property
    def DisplayVerticalScrollBar(self) -> bool:
        """
        Get: DisplayVerticalScrollBar(self: DrawingObjects) -> bool
        Set: DisplayVerticalScrollBar(self: DrawingObjects) = value
        """
        ...

    @property
    def DropDownLines(self) -> int:
        """
        Get: DropDownLines(self: DrawingObjects) -> int
        Set: DropDownLines(self: DrawingObjects) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: DrawingObjects) -> bool
        Set: Enabled(self: DrawingObjects) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: DrawingObjects) -> Font """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: DrawingObjects) -> float
        Set: Height(self: DrawingObjects) = value
        """
        ...

    @property
    def HelpButton(self) -> bool:
        """
        Get: HelpButton(self: DrawingObjects) -> bool
        Set: HelpButton(self: DrawingObjects) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: DrawingObjects) -> object
        Set: HorizontalAlignment(self: DrawingObjects) = value
        """
        ...

    @property
    def InputType(self) -> int:
        """
        Get: InputType(self: DrawingObjects) -> int
        Set: InputType(self: DrawingObjects) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: DrawingObjects) -> Interior """
        ...

    @property
    def LargeChange(self) -> int:
        """
        Get: LargeChange(self: DrawingObjects) -> int
        Set: LargeChange(self: DrawingObjects) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: DrawingObjects) -> float
        Set: Left(self: DrawingObjects) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: DrawingObjects) -> str
        Set: LinkedCell(self: DrawingObjects) = value
        """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: DrawingObjects) -> str
        Set: ListFillRange(self: DrawingObjects) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: DrawingObjects) -> int
        Set: ListIndex(self: DrawingObjects) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: DrawingObjects) -> bool
        Set: Locked(self: DrawingObjects) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: DrawingObjects) -> bool
        Set: LockedText(self: DrawingObjects) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: DrawingObjects) -> int
        Set: Max(self: DrawingObjects) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: DrawingObjects) -> int
        Set: Min(self: DrawingObjects) = value
        """
        ...

    @property
    def MultiLine(self) -> bool:
        """
        Get: MultiLine(self: DrawingObjects) -> bool
        Set: MultiLine(self: DrawingObjects) = value
        """
        ...

    @property
    def MultiSelect(self) -> bool:
        """
        Get: MultiSelect(self: DrawingObjects) -> bool
        Set: MultiSelect(self: DrawingObjects) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: DrawingObjects) -> str
        Set: OnAction(self: DrawingObjects) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: DrawingObjects) -> object
        Set: Orientation(self: DrawingObjects) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DrawingObjects) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: DrawingObjects) -> object
        Set: PhoneticAccelerator(self: DrawingObjects) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: DrawingObjects) -> object
        Set: Placement(self: DrawingObjects) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: DrawingObjects) -> bool
        Set: PrintObject(self: DrawingObjects) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: DrawingObjects) -> int
        Set: ReadingOrder(self: DrawingObjects) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: DrawingObjects) -> bool
        Set: RoundedCorners(self: DrawingObjects) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: DrawingObjects) -> bool
        Set: Shadow(self: DrawingObjects) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: DrawingObjects) -> ShapeRange """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: DrawingObjects) -> int
        Set: SmallChange(self: DrawingObjects) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: DrawingObjects) -> str
        Set: Text(self: DrawingObjects) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: DrawingObjects) -> float
        Set: Top(self: DrawingObjects) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: DrawingObjects) -> int
        Set: Value(self: DrawingObjects) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: DrawingObjects) -> object
        Set: VerticalAlignment(self: DrawingObjects) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: DrawingObjects) -> bool
        Set: Visible(self: DrawingObjects) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: DrawingObjects) -> float
        Set: Width(self: DrawingObjects) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: DrawingObjects) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: DrawingObjects) -> int
        Set: _Default(self: DrawingObjects) = value
        """
        ...


    def AddItem(self, Text:object, Index:object) -> object:
        """ AddItem(self: DrawingObjects, Text: object, Index: object) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: DrawingObjects) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: DrawingObjects, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: DrawingObjects) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: DrawingObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: DrawingObjects) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: DrawingObjects) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: DrawingObjects) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: DrawingObjects) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: DrawingObjects, Index: object) -> object """
        ...

    def LinkCombo(self, Link:object) -> object:
        """ LinkCombo(self: DrawingObjects, Link: object) -> object """
        ...

    def List(self, Index:object) -> object:
        """ List(self: DrawingObjects, Index: object) -> object """
        ...

    def RemoveAllItems(self) -> object:
        """ RemoveAllItems(self: DrawingObjects) -> object """
        ...

    def RemoveItem(self, Index:int, Count:object) -> object:
        """ RemoveItem(self: DrawingObjects, Index: int, Count: object) -> object """
        ...

    def Reshape(self, Vertex:int, Insert:object, Left:object, Top:object) -> object:
        """ Reshape(self: DrawingObjects, Vertex: int, Insert: object, Left: object, Top: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: DrawingObjects, Replace: object) -> object """
        ...

    def Selected(self, Index:object) -> object:
        """ Selected(self: DrawingObjects, Index: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: DrawingObjects) -> object """
        ...

    def Ungroup(self) -> object:
        """ Ungroup(self: DrawingObjects) -> object """
        ...

    def Vertices(self, Index1:object, Index2:object) -> object:
        """ Vertices(self: DrawingObjects, Index1: object, Index2: object) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: DrawingObjects) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: DrawingObjects) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: DrawingObjects) """
        ...

    def _Dummy28(self): # -> 
        """ _Dummy28(self: DrawingObjects) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: DrawingObjects) """
        ...

    def _Dummy47(self): # -> 
        """ _Dummy47(self: DrawingObjects) """
        ...

    def _Dummy54(self): # -> 
        """ _Dummy54(self: DrawingObjects) """
        ...

    def _Dummy56(self): # -> 
        """ _Dummy56(self: DrawingObjects) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Drawings(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: Drawings) -> bool
        Set: AddIndent(self: Drawings) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Drawings) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Drawings) -> object
        Set: AutoScaleFont(self: Drawings) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Drawings) -> bool
        Set: AutoSize(self: Drawings) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Drawings) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Drawings) -> str
        Set: Caption(self: Drawings) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Drawings) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Drawings) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Drawings) -> bool
        Set: Enabled(self: Drawings) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Drawings) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Drawings) -> str
        Set: Formula(self: Drawings) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Drawings) -> float
        Set: Height(self: Drawings) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: Drawings) -> object
        Set: HorizontalAlignment(self: Drawings) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Drawings) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Drawings) -> float
        Set: Left(self: Drawings) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Drawings) -> bool
        Set: Locked(self: Drawings) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Drawings) -> bool
        Set: LockedText(self: Drawings) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Drawings) -> str
        Set: OnAction(self: Drawings) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: Drawings) -> object
        Set: Orientation(self: Drawings) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Drawings) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Drawings) -> object
        Set: Placement(self: Drawings) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Drawings) -> bool
        Set: PrintObject(self: Drawings) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Drawings) -> int
        Set: ReadingOrder(self: Drawings) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Drawings) -> bool
        Set: Shadow(self: Drawings) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Drawings) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Drawings) -> str
        Set: Text(self: Drawings) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Drawings) -> float
        Set: Top(self: Drawings) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: Drawings) -> object
        Set: VerticalAlignment(self: Drawings) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Drawings) -> bool
        Set: Visible(self: Drawings) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Drawings) -> float
        Set: Width(self: Drawings) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Drawings) -> int """
        ...


    def Add(self, X1:float, Y1:float, X2:float, Y2:float, Closed:bool) -> Drawing:
        """ Add(self: Drawings, X1: float, Y1: float, X2: float, Y2: float, Closed: bool) -> Drawing """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: Drawings) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Drawings, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Drawings) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Drawings, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Drawings) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Drawings) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Drawings) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: Drawings) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: Drawings, Index: object) -> object """
        ...

    def Reshape(self, Vertex:int, Insert:bool, Left:object, Top:object) -> object:
        """ Reshape(self: Drawings, Vertex: int, Insert: bool, Left: object, Top: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Drawings, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Drawings) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: Drawings) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: Drawings) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: Drawings) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: Drawings) """
        ...

    def _Dummy44(self): # -> 
        """ _Dummy44(self: Drawings) """
        ...

    def _Dummy46(self): # -> 
        """ _Dummy46(self: Drawings) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class DropDown: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DropDown) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: DropDown) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: DropDown) -> str
        Set: Caption(self: DropDown) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DropDown) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: DropDown) -> bool
        Set: Display3DShading(self: DropDown) = value
        """
        ...

    @property
    def DropDownLines(self) -> int:
        """
        Get: DropDownLines(self: DropDown) -> int
        Set: DropDownLines(self: DropDown) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: DropDown) -> bool
        Set: Enabled(self: DropDown) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: DropDown) -> float
        Set: Height(self: DropDown) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: DropDown) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: DropDown) -> float
        Set: Left(self: DropDown) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: DropDown) -> str
        Set: LinkedCell(self: DropDown) = value
        """
        ...

    @property
    def LinkedObject(self) -> object:
        """ Get: LinkedObject(self: DropDown) -> object """
        ...

    @property
    def ListCount(self) -> int:
        """ Get: ListCount(self: DropDown) -> int """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: DropDown) -> str
        Set: ListFillRange(self: DropDown) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: DropDown) -> int
        Set: ListIndex(self: DropDown) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: DropDown) -> bool
        Set: Locked(self: DropDown) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: DropDown) -> str
        Set: Name(self: DropDown) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: DropDown) -> str
        Set: OnAction(self: DropDown) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DropDown) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: DropDown) -> object
        Set: Placement(self: DropDown) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: DropDown) -> bool
        Set: PrintObject(self: DropDown) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: DropDown) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: DropDown) -> str
        Set: Text(self: DropDown) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: DropDown) -> float
        Set: Top(self: DropDown) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: DropDown) -> Range """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: DropDown) -> int
        Set: Value(self: DropDown) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: DropDown) -> bool
        Set: Visible(self: DropDown) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: DropDown) -> float
        Set: Width(self: DropDown) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: DropDown) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: DropDown) -> int
        Set: _Default(self: DropDown) = value
        """
        ...


    def AddItem(self, Text:object, Index:object) -> object:
        """ AddItem(self: DropDown, Text: object, Index: object) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: DropDown) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: DropDown) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: DropDown, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: DropDown) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: DropDown) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: DropDown) -> object """
        ...

    def RemoveAllItems(self) -> object:
        """ RemoveAllItems(self: DropDown) -> object """
        ...

    def RemoveItem(self, Index:int, Count:object) -> object:
        """ RemoveItem(self: DropDown, Index: int, Count: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: DropDown, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: DropDown) -> object """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: DropDown) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class DropDowns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DropDowns) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: DropDowns) -> str
        Set: Caption(self: DropDowns) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: DropDowns) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DropDowns) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: DropDowns) -> bool
        Set: Display3DShading(self: DropDowns) = value
        """
        ...

    @property
    def DropDownLines(self) -> int:
        """
        Get: DropDownLines(self: DropDowns) -> int
        Set: DropDownLines(self: DropDowns) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: DropDowns) -> bool
        Set: Enabled(self: DropDowns) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: DropDowns) -> float
        Set: Height(self: DropDowns) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: DropDowns) -> float
        Set: Left(self: DropDowns) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: DropDowns) -> str
        Set: LinkedCell(self: DropDowns) = value
        """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: DropDowns) -> str
        Set: ListFillRange(self: DropDowns) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: DropDowns) -> int
        Set: ListIndex(self: DropDowns) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: DropDowns) -> bool
        Set: Locked(self: DropDowns) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: DropDowns) -> str
        Set: OnAction(self: DropDowns) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DropDowns) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: DropDowns) -> object
        Set: Placement(self: DropDowns) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: DropDowns) -> bool
        Set: PrintObject(self: DropDowns) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: DropDowns) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: DropDowns) -> str
        Set: Text(self: DropDowns) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: DropDowns) -> float
        Set: Top(self: DropDowns) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: DropDowns) -> int
        Set: Value(self: DropDowns) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: DropDowns) -> bool
        Set: Visible(self: DropDowns) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: DropDowns) -> float
        Set: Width(self: DropDowns) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: DropDowns) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: DropDowns) -> int
        Set: _Default(self: DropDowns) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float, Editable:object) -> DropDown:
        """ Add(self: DropDowns, Left: float, Top: float, Width: float, Height: float, Editable: object) -> DropDown """
        ...

    def AddItem(self, Text:object, Index:object) -> object:
        """ AddItem(self: DropDowns, Text: object, Index: object) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: DropDowns) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: DropDowns) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: DropDowns, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: DropDowns) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: DropDowns) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: DropDowns) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: DropDowns) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: DropDowns, Index: object) -> object """
        ...

    def RemoveAllItems(self) -> object:
        """ RemoveAllItems(self: DropDowns) -> object """
        ...

    def RemoveItem(self, Index:int, Count:object) -> object:
        """ RemoveItem(self: DropDowns, Index: int, Count: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: DropDowns, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: DropDowns) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: DropDowns) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: DropDowns) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: DropDowns) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: DropDowns) """
        ...

    def _Dummy31(self): # -> 
        """ _Dummy31(self: DropDowns) """
        ...

    def _Dummy33(self): # -> 
        """ _Dummy33(self: DropDowns) """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: DropDowns) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class DropLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DropLines) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: DropLines) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: DropLines) -> XlCreator """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DropLines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DropLines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DropLines) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: DropLines) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: DropLines) -> object """
        ...


class EditBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: EditBox) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: EditBox) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: EditBox) -> str
        Set: Caption(self: EditBox) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: EditBox) -> XlCreator """
        ...

    @property
    def DisplayVerticalScrollBar(self) -> bool:
        """
        Get: DisplayVerticalScrollBar(self: EditBox) -> bool
        Set: DisplayVerticalScrollBar(self: EditBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: EditBox) -> bool
        Set: Enabled(self: EditBox) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: EditBox) -> float
        Set: Height(self: EditBox) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: EditBox) -> int """
        ...

    @property
    def InputType(self) -> int:
        """
        Get: InputType(self: EditBox) -> int
        Set: InputType(self: EditBox) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: EditBox) -> float
        Set: Left(self: EditBox) = value
        """
        ...

    @property
    def LinkedObject(self) -> str:
        """ Get: LinkedObject(self: EditBox) -> str """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: EditBox) -> bool
        Set: Locked(self: EditBox) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: EditBox) -> bool
        Set: LockedText(self: EditBox) = value
        """
        ...

    @property
    def MultiLine(self) -> bool:
        """
        Get: MultiLine(self: EditBox) -> bool
        Set: MultiLine(self: EditBox) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: EditBox) -> str
        Set: Name(self: EditBox) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: EditBox) -> str
        Set: OnAction(self: EditBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: EditBox) -> object """
        ...

    @property
    def PasswordEdit(self) -> bool:
        """
        Get: PasswordEdit(self: EditBox) -> bool
        Set: PasswordEdit(self: EditBox) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: EditBox) -> object
        Set: Placement(self: EditBox) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: EditBox) -> bool
        Set: PrintObject(self: EditBox) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: EditBox) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: EditBox) -> str
        Set: Text(self: EditBox) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: EditBox) -> float
        Set: Top(self: EditBox) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: EditBox) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: EditBox) -> bool
        Set: Visible(self: EditBox) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: EditBox) -> float
        Set: Width(self: EditBox) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: EditBox) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: EditBox) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: EditBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: EditBox) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: EditBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: EditBox) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: EditBox) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: EditBox) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: EditBox, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: EditBox) -> object """
        ...


class EditBoxes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: EditBoxes) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: EditBoxes) -> str
        Set: Caption(self: EditBoxes) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: EditBoxes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: EditBoxes) -> XlCreator """
        ...

    @property
    def DisplayVerticalScrollBar(self) -> bool:
        """
        Get: DisplayVerticalScrollBar(self: EditBoxes) -> bool
        Set: DisplayVerticalScrollBar(self: EditBoxes) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: EditBoxes) -> bool
        Set: Enabled(self: EditBoxes) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: EditBoxes) -> float
        Set: Height(self: EditBoxes) = value
        """
        ...

    @property
    def InputType(self) -> int:
        """
        Get: InputType(self: EditBoxes) -> int
        Set: InputType(self: EditBoxes) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: EditBoxes) -> float
        Set: Left(self: EditBoxes) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: EditBoxes) -> bool
        Set: Locked(self: EditBoxes) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: EditBoxes) -> bool
        Set: LockedText(self: EditBoxes) = value
        """
        ...

    @property
    def MultiLine(self) -> bool:
        """
        Get: MultiLine(self: EditBoxes) -> bool
        Set: MultiLine(self: EditBoxes) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: EditBoxes) -> str
        Set: OnAction(self: EditBoxes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: EditBoxes) -> object """
        ...

    @property
    def PasswordEdit(self) -> bool:
        """
        Get: PasswordEdit(self: EditBoxes) -> bool
        Set: PasswordEdit(self: EditBoxes) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: EditBoxes) -> object
        Set: Placement(self: EditBoxes) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: EditBoxes) -> bool
        Set: PrintObject(self: EditBoxes) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: EditBoxes) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: EditBoxes) -> str
        Set: Text(self: EditBoxes) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: EditBoxes) -> float
        Set: Top(self: EditBoxes) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: EditBoxes) -> bool
        Set: Visible(self: EditBoxes) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: EditBoxes) -> float
        Set: Width(self: EditBoxes) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: EditBoxes) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> EditBox:
        """ Add(self: EditBoxes, Left: float, Top: float, Width: float, Height: float) -> EditBox """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: EditBoxes) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: EditBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: EditBoxes) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: EditBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: EditBoxes) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: EditBoxes) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: EditBoxes) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: EditBoxes) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: EditBoxes, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: EditBoxes, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: EditBoxes) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: EditBoxes) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: EditBoxes) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: EditBoxes) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: EditBoxes) """
        ...

    def _Dummy34(self): # -> 
        """ _Dummy34(self: EditBoxes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class Error: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Error) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Error) -> XlCreator """
        ...

    @property
    def Ignore(self) -> bool:
        """
        Get: Ignore(self: Error) -> bool
        Set: Ignore(self: Error) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Error) -> object """
        ...

    @property
    def Value(self) -> bool:
        """ Get: Value(self: Error) -> bool """
        ...



class ErrorBars: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ErrorBars) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ErrorBars) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ErrorBars) -> XlCreator """
        ...

    @property
    def EndStyle(self) -> XlEndStyleCap:
        """
        Get: EndStyle(self: ErrorBars) -> XlEndStyleCap
        Set: EndStyle(self: ErrorBars) = value
        """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ErrorBars) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ErrorBars) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ErrorBars) -> object """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: ErrorBars) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ErrorBars) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ErrorBars) -> object """
        ...


class ErrorCheckingOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ErrorCheckingOptions) -> Application """
        ...

    @property
    def BackgroundChecking(self) -> bool:
        """
        Get: BackgroundChecking(self: ErrorCheckingOptions) -> bool
        Set: BackgroundChecking(self: ErrorCheckingOptions) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ErrorCheckingOptions) -> XlCreator """
        ...

    @property
    def EmptyCellReferences(self) -> bool:
        """
        Get: EmptyCellReferences(self: ErrorCheckingOptions) -> bool
        Set: EmptyCellReferences(self: ErrorCheckingOptions) = value
        """
        ...

    @property
    def EvaluateToError(self) -> bool:
        """
        Get: EvaluateToError(self: ErrorCheckingOptions) -> bool
        Set: EvaluateToError(self: ErrorCheckingOptions) = value
        """
        ...

    @property
    def InconsistentFormula(self) -> bool:
        """
        Get: InconsistentFormula(self: ErrorCheckingOptions) -> bool
        Set: InconsistentFormula(self: ErrorCheckingOptions) = value
        """
        ...

    @property
    def InconsistentTableFormula(self) -> bool:
        """
        Get: InconsistentTableFormula(self: ErrorCheckingOptions) -> bool
        Set: InconsistentTableFormula(self: ErrorCheckingOptions) = value
        """
        ...

    @property
    def IndicatorColorIndex(self) -> XlColorIndex:
        """
        Get: IndicatorColorIndex(self: ErrorCheckingOptions) -> XlColorIndex
        Set: IndicatorColorIndex(self: ErrorCheckingOptions) = value
        """
        ...

    @property
    def ListDataValidation(self) -> bool:
        """
        Get: ListDataValidation(self: ErrorCheckingOptions) -> bool
        Set: ListDataValidation(self: ErrorCheckingOptions) = value
        """
        ...

    @property
    def NumberAsText(self) -> bool:
        """
        Get: NumberAsText(self: ErrorCheckingOptions) -> bool
        Set: NumberAsText(self: ErrorCheckingOptions) = value
        """
        ...

    @property
    def OmittedCells(self) -> bool:
        """
        Get: OmittedCells(self: ErrorCheckingOptions) -> bool
        Set: OmittedCells(self: ErrorCheckingOptions) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ErrorCheckingOptions) -> object """
        ...

    @property
    def TextDate(self) -> bool:
        """
        Get: TextDate(self: ErrorCheckingOptions) -> bool
        Set: TextDate(self: ErrorCheckingOptions) = value
        """
        ...

    @property
    def UnlockedFormulaCells(self) -> bool:
        """
        Get: UnlockedFormulaCells(self: ErrorCheckingOptions) -> bool
        Set: UnlockedFormulaCells(self: ErrorCheckingOptions) = value
        """
        ...



class Errors: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Errors) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Errors) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Errors) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class FileExportConverter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FileExportConverter) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: FileExportConverter) -> XlCreator """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description(self: FileExportConverter) -> str """
        ...

    @property
    def Extensions(self) -> str:
        """ Get: Extensions(self: FileExportConverter) -> str """
        ...

    @property
    def FileFormat(self) -> int:
        """ Get: FileFormat(self: FileExportConverter) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FileExportConverter) -> object """
        ...



class FileExportConverters(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FileExportConverters) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: FileExportConverters) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: FileExportConverters) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FileExportConverters) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class FillFormat(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def BackColor(self) -> ColorFormat:
        """
        Get: BackColor(self: FillFormat) -> ColorFormat
        Set: BackColor(self: FillFormat) = value
        """
        ...

    @property
    def ForeColor(self) -> ColorFormat:
        """
        Get: ForeColor(self: FillFormat) -> ColorFormat
        Set: ForeColor(self: FillFormat) = value
        """
        ...

    @property
    def GradientAngle(self) -> Single:
        """
        Get: GradientAngle(self: FillFormat) -> Single
        Set: GradientAngle(self: FillFormat) = value
        """
        ...

    @property
    def GradientColorType(self): # -> MsoGradientColorType
        """ Get: GradientColorType(self: FillFormat) -> MsoGradientColorType """
        ...

    @property
    def GradientDegree(self) -> Single:
        """ Get: GradientDegree(self: FillFormat) -> Single """
        ...

    @property
    def GradientStops(self): # -> GradientStops
        """ Get: GradientStops(self: FillFormat) -> GradientStops """
        ...

    @property
    def GradientStyle(self): # -> MsoGradientStyle
        """ Get: GradientStyle(self: FillFormat) -> MsoGradientStyle """
        ...

    @property
    def GradientVariant(self) -> int:
        """ Get: GradientVariant(self: FillFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FillFormat) -> object """
        ...

    @property
    def Pattern(self): # -> MsoPatternType
        """ Get: Pattern(self: FillFormat) -> MsoPatternType """
        ...

    @property
    def PictureEffects(self): # -> PictureEffects
        """ Get: PictureEffects(self: FillFormat) -> PictureEffects """
        ...

    @property
    def PresetGradientType(self): # -> MsoPresetGradientType
        """ Get: PresetGradientType(self: FillFormat) -> MsoPresetGradientType """
        ...

    @property
    def PresetTexture(self): # -> MsoPresetTexture
        """ Get: PresetTexture(self: FillFormat) -> MsoPresetTexture """
        ...

    @property
    def RotateWithObject(self): # -> MsoTriState
        """
        Get: RotateWithObject(self: FillFormat) -> MsoTriState
        Set: RotateWithObject(self: FillFormat) = value
        """
        ...

    @property
    def TextureAlignment(self): # -> MsoTextureAlignment
        """
        Get: TextureAlignment(self: FillFormat) -> MsoTextureAlignment
        Set: TextureAlignment(self: FillFormat) = value
        """
        ...

    @property
    def TextureHorizontalScale(self) -> Single:
        """
        Get: TextureHorizontalScale(self: FillFormat) -> Single
        Set: TextureHorizontalScale(self: FillFormat) = value
        """
        ...

    @property
    def TextureName(self) -> str:
        """ Get: TextureName(self: FillFormat) -> str """
        ...

    @property
    def TextureOffsetX(self) -> Single:
        """
        Get: TextureOffsetX(self: FillFormat) -> Single
        Set: TextureOffsetX(self: FillFormat) = value
        """
        ...

    @property
    def TextureOffsetY(self) -> Single:
        """
        Get: TextureOffsetY(self: FillFormat) -> Single
        Set: TextureOffsetY(self: FillFormat) = value
        """
        ...

    @property
    def TextureTile(self): # -> MsoTriState
        """
        Get: TextureTile(self: FillFormat) -> MsoTriState
        Set: TextureTile(self: FillFormat) = value
        """
        ...

    @property
    def TextureType(self): # -> MsoTextureType
        """ Get: TextureType(self: FillFormat) -> MsoTextureType """
        ...

    @property
    def TextureVerticalScale(self) -> Single:
        """
        Get: TextureVerticalScale(self: FillFormat) -> Single
        Set: TextureVerticalScale(self: FillFormat) = value
        """
        ...

    @property
    def Transparency(self) -> Single:
        """
        Get: Transparency(self: FillFormat) -> Single
        Set: Transparency(self: FillFormat) = value
        """
        ...

    @property
    def Type(self): # -> MsoFillType
        """ Get: Type(self: FillFormat) -> MsoFillType """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: FillFormat) -> MsoTriState
        Set: Visible(self: FillFormat) = value
        """
        ...


    def Background(self): # -> 
        """ Background(self: FillFormat) """
        ...

    def OneColorGradient(self, Style, Variant:int, Degree:Single): # ->  # Not found arg types: {'Style': 'MsoGradientStyle'}
        """ OneColorGradient(self: FillFormat, Style: MsoGradientStyle, Variant: int, Degree: Single) """
        ...

    def Patterned(self, Pattern): # ->  # Not found arg types: {'Pattern': 'MsoPatternType'}
        """ Patterned(self: FillFormat, Pattern: MsoPatternType) """
        ...

    def PresetGradient(self, Style, Variant:int, PresetGradientType): # ->  # Not found arg types: {'Style': 'MsoGradientStyle', 'PresetGradientType': 'MsoPresetGradientType'}
        """ PresetGradient(self: FillFormat, Style: MsoGradientStyle, Variant: int, PresetGradientType: MsoPresetGradientType) """
        ...

    def PresetTextured(self, PresetTexture): # ->  # Not found arg types: {'PresetTexture': 'MsoPresetTexture'}
        """ PresetTextured(self: FillFormat, PresetTexture: MsoPresetTexture) """
        ...

    def Solid(self): # -> 
        """ Solid(self: FillFormat) """
        ...

    def TwoColorGradient(self, Style, Variant:int): # ->  # Not found arg types: {'Style': 'MsoGradientStyle'}
        """ TwoColorGradient(self: FillFormat, Style: MsoGradientStyle, Variant: int) """
        ...

    def UserPicture(self, PictureFile:str): # -> 
        """ UserPicture(self: FillFormat, PictureFile: str) """
        ...

    def UserTextured(self, TextureFile:str): # -> 
        """ UserTextured(self: FillFormat, TextureFile: str) """
        ...


class Filter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Filter) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Filter) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Filter) -> XlCreator """
        ...

    @property
    def Criteria1(self) -> object:
        """ Get: Criteria1(self: Filter) -> object """
        ...

    @property
    def Criteria2(self) -> object:
        """ Get: Criteria2(self: Filter) -> object """
        ...

    @property
    def On(self) -> bool:
        """ Get: On(self: Filter) -> bool """
        ...

    @property
    def Operator(self) -> XlAutoFilterOperator:
        """
        Get: Operator(self: Filter) -> XlAutoFilterOperator
        Set: Operator(self: Filter) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Filter) -> object """
        ...

    @property
    def _Operator(self) -> XlAutoFilterOperator:
        """ Get: _Operator(self: Filter) -> XlAutoFilterOperator """
        ...



class Filters(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Filters) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Filters) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Filters) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Filters) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Floor: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Floor) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Floor) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Floor) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: Floor) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Floor) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Floor) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Floor) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Floor) -> object """
        ...

    @property
    def PictureType(self) -> object:
        """
        Get: PictureType(self: Floor) -> object
        Set: PictureType(self: Floor) = value
        """
        ...

    @property
    def Thickness(self) -> int:
        """
        Get: Thickness(self: Floor) -> int
        Set: Thickness(self: Floor) = value
        """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: Floor) -> object """
        ...

    def Paste(self): # -> 
        """ Paste(self: Floor) """
        ...

    def Select(self) -> object:
        """ Select(self: Floor) -> object """
        ...


class Font: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Font) -> Application """
        ...

    @property
    def Background(self) -> object:
        """
        Get: Background(self: Font) -> object
        Set: Background(self: Font) = value
        """
        ...

    @property
    def Bold(self) -> object:
        """
        Get: Bold(self: Font) -> object
        Set: Bold(self: Font) = value
        """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: Font) -> object
        Set: Color(self: Font) = value
        """
        ...

    @property
    def ColorIndex(self) -> object:
        """
        Get: ColorIndex(self: Font) -> object
        Set: ColorIndex(self: Font) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Font) -> XlCreator """
        ...

    @property
    def FontStyle(self) -> object:
        """
        Get: FontStyle(self: Font) -> object
        Set: FontStyle(self: Font) = value
        """
        ...

    @property
    def Italic(self) -> object:
        """
        Get: Italic(self: Font) -> object
        Set: Italic(self: Font) = value
        """
        ...

    @property
    def Name(self) -> object:
        """
        Get: Name(self: Font) -> object
        Set: Name(self: Font) = value
        """
        ...

    @property
    def OutlineFont(self) -> object:
        """
        Get: OutlineFont(self: Font) -> object
        Set: OutlineFont(self: Font) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Font) -> object """
        ...

    @property
    def Shadow(self) -> object:
        """
        Get: Shadow(self: Font) -> object
        Set: Shadow(self: Font) = value
        """
        ...

    @property
    def Size(self) -> object:
        """
        Get: Size(self: Font) -> object
        Set: Size(self: Font) = value
        """
        ...

    @property
    def Strikethrough(self) -> object:
        """
        Get: Strikethrough(self: Font) -> object
        Set: Strikethrough(self: Font) = value
        """
        ...

    @property
    def Subscript(self) -> object:
        """
        Get: Subscript(self: Font) -> object
        Set: Subscript(self: Font) = value
        """
        ...

    @property
    def Superscript(self) -> object:
        """
        Get: Superscript(self: Font) -> object
        Set: Superscript(self: Font) = value
        """
        ...

    @property
    def ThemeColor(self) -> object:
        """
        Get: ThemeColor(self: Font) -> object
        Set: ThemeColor(self: Font) = value
        """
        ...

    @property
    def ThemeFont(self) -> XlThemeFont:
        """
        Get: ThemeFont(self: Font) -> XlThemeFont
        Set: ThemeFont(self: Font) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: Font) -> object
        Set: TintAndShade(self: Font) = value
        """
        ...

    @property
    def Underline(self) -> object:
        """
        Get: Underline(self: Font) -> object
        Set: Underline(self: Font) = value
        """
        ...



class FormatColor: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FormatColor) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: FormatColor) -> object
        Set: Color(self: FormatColor) = value
        """
        ...

    @property
    def ColorIndex(self) -> XlColorIndex:
        """
        Get: ColorIndex(self: FormatColor) -> XlColorIndex
        Set: ColorIndex(self: FormatColor) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: FormatColor) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FormatColor) -> object """
        ...

    @property
    def ThemeColor(self) -> object:
        """
        Get: ThemeColor(self: FormatColor) -> object
        Set: ThemeColor(self: FormatColor) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: FormatColor) -> object
        Set: TintAndShade(self: FormatColor) = value
        """
        ...



class FormatCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FormatCondition) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: FormatCondition) -> Range """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: FormatCondition) -> Borders """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: FormatCondition) -> XlCreator """
        ...

    @property
    def DateOperator(self) -> XlTimePeriods:
        """
        Get: DateOperator(self: FormatCondition) -> XlTimePeriods
        Set: DateOperator(self: FormatCondition) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: FormatCondition) -> Font """
        ...

    @property
    def Formula1(self) -> str:
        """ Get: Formula1(self: FormatCondition) -> str """
        ...

    @property
    def Formula2(self) -> str:
        """ Get: Formula2(self: FormatCondition) -> str """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: FormatCondition) -> Interior """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: FormatCondition) -> object
        Set: NumberFormat(self: FormatCondition) = value
        """
        ...

    @property
    def Operator(self) -> int:
        """ Get: Operator(self: FormatCondition) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FormatCondition) -> object """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: FormatCondition) -> int
        Set: Priority(self: FormatCondition) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: FormatCondition) -> bool """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: FormatCondition) -> XlPivotConditionScope
        Set: ScopeType(self: FormatCondition) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """
        Get: StopIfTrue(self: FormatCondition) -> bool
        Set: StopIfTrue(self: FormatCondition) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: FormatCondition) -> str
        Set: Text(self: FormatCondition) = value
        """
        ...

    @property
    def TextOperator(self) -> XlContainsOperator:
        """
        Get: TextOperator(self: FormatCondition) -> XlContainsOperator
        Set: TextOperator(self: FormatCondition) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: FormatCondition) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: FormatCondition) """
        ...

    def Modify(self, Type:XlFormatConditionType, Operator:object, Formula1:object, Formula2:object): # -> 
        """ Modify(self: FormatCondition, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: FormatCondition, Range: Range) """
        ...

    def ModifyEx(self, Type:XlFormatConditionType, Operator:object, Formula1:object, Formula2:object, String:object, Operator2:object): # -> 
        """ ModifyEx(self: FormatCondition, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object, String: object, Operator2: object) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: FormatCondition) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: FormatCondition) """
        ...


class FormatConditions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FormatConditions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: FormatConditions) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: FormatConditions) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FormatConditions) -> object """
        ...


    def Add(self, Type:XlFormatConditionType, Operator:object, Formula1:object, Formula2:object, String:object, TextOperator:object, DateOperator:object, ScopeType:object) -> object:
        """ Add(self: FormatConditions, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object, String: object, TextOperator: object, DateOperator: object, ScopeType: object) -> object """
        ...

    def AddAboveAverage(self) -> object:
        """ AddAboveAverage(self: FormatConditions) -> object """
        ...

    def AddColorScale(self, ColorScaleType:int) -> object:
        """ AddColorScale(self: FormatConditions, ColorScaleType: int) -> object """
        ...

    def AddDatabar(self) -> object:
        """ AddDatabar(self: FormatConditions) -> object """
        ...

    def AddIconSetCondition(self) -> object:
        """ AddIconSetCondition(self: FormatConditions) -> object """
        ...

    def AddTop10(self) -> object:
        """ AddTop10(self: FormatConditions) -> object """
        ...

    def AddUniqueValues(self) -> object:
        """ AddUniqueValues(self: FormatConditions) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: FormatConditions) """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: FormatConditions, Index: object) -> object """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class FreeformBuilder: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FreeformBuilder) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: FreeformBuilder) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FreeformBuilder) -> object """
        ...


    def AddNodes(self, SegmentType, EditingType, X1:Single, Y1:Single, X2:object, Y2:object, X3:object, Y3:object): # ->  # Not found arg types: {'EditingType': 'MsoEditingType', 'SegmentType': 'MsoSegmentType'}
        """ AddNodes(self: FreeformBuilder, SegmentType: MsoSegmentType, EditingType: MsoEditingType, X1: Single, Y1: Single, X2: object, Y2: object, X3: object, Y3: object) """
        ...

    def ConvertToShape(self) -> Shape:
        """ ConvertToShape(self: FreeformBuilder) -> Shape """
        ...


class FullSeriesCollection(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FullSeriesCollection) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: FullSeriesCollection) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: FullSeriesCollection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FullSeriesCollection) -> object """
        ...


    def Item(self, Index:object) -> Series:
        """ Item(self: FullSeriesCollection, Index: object) -> Series """
        ...

    def _Default(self, Index:object) -> Series:
        """ _Default(self: FullSeriesCollection, Index: object) -> Series """
        ...


class _Global: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveCell(self) -> Range:
        """ Get: ActiveCell(self: _Global) -> Range """
        ...

    @property
    def ActiveChart(self) -> Chart:
        """ Get: ActiveChart(self: _Global) -> Chart """
        ...

    @property
    def ActiveDialog(self) -> DialogSheet:
        """ Get: ActiveDialog(self: _Global) -> DialogSheet """
        ...

    @property
    def ActiveMenuBar(self) -> MenuBar:
        """ Get: ActiveMenuBar(self: _Global) -> MenuBar """
        ...

    @property
    def ActivePrinter(self) -> str:
        """
        Get: ActivePrinter(self: _Global) -> str
        Set: ActivePrinter(self: _Global) = value
        """
        ...

    @property
    def ActiveSheet(self) -> object:
        """ Get: ActiveSheet(self: _Global) -> object """
        ...

    @property
    def ActiveWindow(self) -> Window:
        """ Get: ActiveWindow(self: _Global) -> Window """
        ...

    @property
    def ActiveWorkbook(self) -> Workbook:
        """ Get: ActiveWorkbook(self: _Global) -> Workbook """
        ...

    @property
    def AddIns(self) -> AddIns:
        """ Get: AddIns(self: _Global) -> AddIns """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Global) -> Application """
        ...

    @property
    def Assistant(self): # -> Assistant
        """ Get: Assistant(self: _Global) -> Assistant """
        ...

    @property
    def Cells(self) -> Range:
        """ Get: Cells(self: _Global) -> Range """
        ...

    @property
    def Charts(self) -> Sheets:
        """ Get: Charts(self: _Global) -> Sheets """
        ...

    @property
    def Columns(self) -> Range:
        """ Get: Columns(self: _Global) -> Range """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: _Global) -> CommandBars """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: _Global) -> XlCreator """
        ...

    @property
    def DDEAppReturnCode(self) -> int:
        """ Get: DDEAppReturnCode(self: _Global) -> int """
        ...

    @property
    def DialogSheets(self) -> Sheets:
        """ Get: DialogSheets(self: _Global) -> Sheets """
        ...

    @property
    def Excel4IntlMacroSheets(self) -> Sheets:
        """ Get: Excel4IntlMacroSheets(self: _Global) -> Sheets """
        ...

    @property
    def Excel4MacroSheets(self) -> Sheets:
        """ Get: Excel4MacroSheets(self: _Global) -> Sheets """
        ...

    @property
    def MenuBars(self) -> MenuBars:
        """ Get: MenuBars(self: _Global) -> MenuBars """
        ...

    @property
    def Modules(self) -> Modules:
        """ Get: Modules(self: _Global) -> Modules """
        ...

    @property
    def Names(self) -> Names:
        """ Get: Names(self: _Global) -> Names """
        ...

    @property
    def Parent(self) -> Application:
        """ Get: Parent(self: _Global) -> Application """
        ...

    @property
    def Rows(self) -> Range:
        """ Get: Rows(self: _Global) -> Range """
        ...

    @property
    def Selection(self) -> object:
        """ Get: Selection(self: _Global) -> object """
        ...

    @property
    def Sheets(self) -> Sheets:
        """ Get: Sheets(self: _Global) -> Sheets """
        ...

    @property
    def ThisWorkbook(self) -> Workbook:
        """ Get: ThisWorkbook(self: _Global) -> Workbook """
        ...

    @property
    def Toolbars(self) -> Toolbars:
        """ Get: Toolbars(self: _Global) -> Toolbars """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: _Global) -> Windows """
        ...

    @property
    def Workbooks(self) -> Workbooks:
        """ Get: Workbooks(self: _Global) -> Workbooks """
        ...

    @property
    def WorksheetFunction(self) -> WorksheetFunction:
        """ Get: WorksheetFunction(self: _Global) -> WorksheetFunction """
        ...

    @property
    def Worksheets(self) -> Sheets:
        """ Get: Worksheets(self: _Global) -> Sheets """
        ...


    def Calculate(self): # -> 
        """ Calculate(self: _Global) """
        ...

    def DDEExecute(self, Channel:int, String:str): # -> 
        """ DDEExecute(self: _Global, Channel: int, String: str) """
        ...

    def DDEInitiate(self, App:str, Topic:str) -> int:
        """ DDEInitiate(self: _Global, App: str, Topic: str) -> int """
        ...

    def DDEPoke(self, Channel:int, Item:object, Data:object): # -> 
        """ DDEPoke(self: _Global, Channel: int, Item: object, Data: object) """
        ...

    def DDERequest(self, Channel:int, Item:str) -> object:
        """ DDERequest(self: _Global, Channel: int, Item: str) -> object """
        ...

    def DDETerminate(self, Channel:int): # -> 
        """ DDETerminate(self: _Global, Channel: int) """
        ...

    def Evaluate(self, Name:object) -> object:
        """ Evaluate(self: _Global, Name: object) -> object """
        ...

    def ExecuteExcel4Macro(self, String:str) -> object:
        """ ExecuteExcel4Macro(self: _Global, String: str) -> object """
        ...

    def Intersect(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> Range:
        """ Intersect(self: _Global, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        ...

    def Run(self, Macro:object, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Run(self: _Global, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def SendKeys(self, Keys:object, Wait:object): # -> 
        """ SendKeys(self: _Global, Keys: object, Wait: object) """
        ...

    def Union(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> Range:
        """ Union(self: _Global, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        ...

    def _Evaluate(self, Name:object) -> object:
        """ _Evaluate(self: _Global, Name: object) -> object """
        ...

    def _Run2(self, Macro:object, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ _Run2(self: _Global, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...


class Global(_Global): # skipped bases: <type 'object'>
    """ no doc """
    pass

class GlobalClass(__ComObject, Global): # skipped bases: <type '_Global'>, <type 'object'>
    """ GlobalClass() """
    @property
    def ActiveCell(self) -> Range:
        """ Get: ActiveCell(self: GlobalClass) -> Range """
        ...

    @property
    def ActiveChart(self) -> Chart:
        """ Get: ActiveChart(self: GlobalClass) -> Chart """
        ...

    @property
    def ActiveDialog(self) -> DialogSheet:
        """ Get: ActiveDialog(self: GlobalClass) -> DialogSheet """
        ...

    @property
    def ActiveMenuBar(self) -> MenuBar:
        """ Get: ActiveMenuBar(self: GlobalClass) -> MenuBar """
        ...

    @property
    def ActivePrinter(self) -> str:
        """
        Get: ActivePrinter(self: GlobalClass) -> str
        Set: ActivePrinter(self: GlobalClass) = value
        """
        ...

    @property
    def ActiveSheet(self) -> object:
        """ Get: ActiveSheet(self: GlobalClass) -> object """
        ...

    @property
    def ActiveWindow(self) -> Window:
        """ Get: ActiveWindow(self: GlobalClass) -> Window """
        ...

    @property
    def ActiveWorkbook(self) -> Workbook:
        """ Get: ActiveWorkbook(self: GlobalClass) -> Workbook """
        ...

    @property
    def AddIns(self) -> AddIns:
        """ Get: AddIns(self: GlobalClass) -> AddIns """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: GlobalClass) -> Application """
        ...

    @property
    def Assistant(self): # -> Assistant
        """ Get: Assistant(self: GlobalClass) -> Assistant """
        ...

    @property
    def Cells(self) -> Range:
        """ Get: Cells(self: GlobalClass) -> Range """
        ...

    @property
    def Charts(self) -> Sheets:
        """ Get: Charts(self: GlobalClass) -> Sheets """
        ...

    @property
    def Columns(self) -> Range:
        """ Get: Columns(self: GlobalClass) -> Range """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: GlobalClass) -> CommandBars """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: GlobalClass) -> XlCreator """
        ...

    @property
    def DDEAppReturnCode(self) -> int:
        """ Get: DDEAppReturnCode(self: GlobalClass) -> int """
        ...

    @property
    def DialogSheets(self) -> Sheets:
        """ Get: DialogSheets(self: GlobalClass) -> Sheets """
        ...

    @property
    def Excel4IntlMacroSheets(self) -> Sheets:
        """ Get: Excel4IntlMacroSheets(self: GlobalClass) -> Sheets """
        ...

    @property
    def Excel4MacroSheets(self) -> Sheets:
        """ Get: Excel4MacroSheets(self: GlobalClass) -> Sheets """
        ...

    @property
    def MenuBars(self) -> MenuBars:
        """ Get: MenuBars(self: GlobalClass) -> MenuBars """
        ...

    @property
    def Modules(self) -> Modules:
        """ Get: Modules(self: GlobalClass) -> Modules """
        ...

    @property
    def Names(self) -> Names:
        """ Get: Names(self: GlobalClass) -> Names """
        ...

    @property
    def Parent(self) -> Application:
        """ Get: Parent(self: GlobalClass) -> Application """
        ...

    @property
    def Rows(self) -> Range:
        """ Get: Rows(self: GlobalClass) -> Range """
        ...

    @property
    def Selection(self) -> object:
        """ Get: Selection(self: GlobalClass) -> object """
        ...

    @property
    def Sheets(self) -> Sheets:
        """ Get: Sheets(self: GlobalClass) -> Sheets """
        ...

    @property
    def ThisWorkbook(self) -> Workbook:
        """ Get: ThisWorkbook(self: GlobalClass) -> Workbook """
        ...

    @property
    def Toolbars(self) -> Toolbars:
        """ Get: Toolbars(self: GlobalClass) -> Toolbars """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: GlobalClass) -> Windows """
        ...

    @property
    def Workbooks(self) -> Workbooks:
        """ Get: Workbooks(self: GlobalClass) -> Workbooks """
        ...

    @property
    def WorksheetFunction(self) -> WorksheetFunction:
        """ Get: WorksheetFunction(self: GlobalClass) -> WorksheetFunction """
        ...

    @property
    def Worksheets(self) -> Sheets:
        """ Get: Worksheets(self: GlobalClass) -> Sheets """
        ...


    def Calculate(self): # -> 
        """ Calculate(self: GlobalClass) """
        ...

    def DDEExecute(self, Channel:int, String:str): # -> 
        """ DDEExecute(self: GlobalClass, Channel: int, String: str) """
        ...

    def DDEInitiate(self, App:str, Topic:str) -> int:
        """ DDEInitiate(self: GlobalClass, App: str, Topic: str) -> int """
        ...

    def DDEPoke(self, Channel:int, Item:object, Data:object): # -> 
        """ DDEPoke(self: GlobalClass, Channel: int, Item: object, Data: object) """
        ...

    def DDERequest(self, Channel:int, Item:str) -> object:
        """ DDERequest(self: GlobalClass, Channel: int, Item: str) -> object """
        ...

    def DDETerminate(self, Channel:int): # -> 
        """ DDETerminate(self: GlobalClass, Channel: int) """
        ...

    def Evaluate(self, Name:object) -> object:
        """ Evaluate(self: GlobalClass, Name: object) -> object """
        ...

    def ExecuteExcel4Macro(self, String:str) -> object:
        """ ExecuteExcel4Macro(self: GlobalClass, String: str) -> object """
        ...

    def Intersect(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> Range:
        """ Intersect(self: GlobalClass, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        ...

    def Run(self, Macro:object, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Run(self: GlobalClass, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def SendKeys(self, Keys:object, Wait:object): # -> 
        """ SendKeys(self: GlobalClass, Keys: object, Wait: object) """
        ...

    def Union(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> Range:
        """ Union(self: GlobalClass, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> Range """
        ...

    def _Evaluate(self, Name:object) -> object:
        """ _Evaluate(self: GlobalClass, Name: object) -> object """
        ...

    def _Run2(self, Macro:object, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ _Run2(self: GlobalClass, Macro: object, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...


class Graphic: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Graphic) -> Application """
        ...

    @property
    def Brightness(self) -> Single:
        """
        Get: Brightness(self: Graphic) -> Single
        Set: Brightness(self: Graphic) = value
        """
        ...

    @property
    def ColorType(self): # -> MsoPictureColorType
        """
        Get: ColorType(self: Graphic) -> MsoPictureColorType
        Set: ColorType(self: Graphic) = value
        """
        ...

    @property
    def Contrast(self) -> Single:
        """
        Get: Contrast(self: Graphic) -> Single
        Set: Contrast(self: Graphic) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Graphic) -> XlCreator """
        ...

    @property
    def CropBottom(self) -> Single:
        """
        Get: CropBottom(self: Graphic) -> Single
        Set: CropBottom(self: Graphic) = value
        """
        ...

    @property
    def CropLeft(self) -> Single:
        """
        Get: CropLeft(self: Graphic) -> Single
        Set: CropLeft(self: Graphic) = value
        """
        ...

    @property
    def CropRight(self) -> Single:
        """
        Get: CropRight(self: Graphic) -> Single
        Set: CropRight(self: Graphic) = value
        """
        ...

    @property
    def CropTop(self) -> Single:
        """
        Get: CropTop(self: Graphic) -> Single
        Set: CropTop(self: Graphic) = value
        """
        ...

    @property
    def Filename(self) -> str:
        """
        Get: Filename(self: Graphic) -> str
        Set: Filename(self: Graphic) = value
        """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: Graphic) -> Single
        Set: Height(self: Graphic) = value
        """
        ...

    @property
    def LockAspectRatio(self): # -> MsoTriState
        """
        Get: LockAspectRatio(self: Graphic) -> MsoTriState
        Set: LockAspectRatio(self: Graphic) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Graphic) -> object """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: Graphic) -> Single
        Set: Width(self: Graphic) = value
        """
        ...



class Gridlines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Gridlines) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Gridlines) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Gridlines) -> XlCreator """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Gridlines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Gridlines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Gridlines) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: Gridlines) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: Gridlines) -> object """
        ...


class GroupBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: GroupBox) -> object
        Set: Accelerator(self: GroupBox) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: GroupBox) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: GroupBox) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: GroupBox) -> str
        Set: Caption(self: GroupBox) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: GroupBox) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: GroupBox) -> bool
        Set: Display3DShading(self: GroupBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: GroupBox) -> bool
        Set: Enabled(self: GroupBox) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: GroupBox) -> float
        Set: Height(self: GroupBox) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: GroupBox) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: GroupBox) -> float
        Set: Left(self: GroupBox) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: GroupBox) -> bool
        Set: Locked(self: GroupBox) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: GroupBox) -> bool
        Set: LockedText(self: GroupBox) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: GroupBox) -> str
        Set: Name(self: GroupBox) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: GroupBox) -> str
        Set: OnAction(self: GroupBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: GroupBox) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: GroupBox) -> object
        Set: PhoneticAccelerator(self: GroupBox) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: GroupBox) -> object
        Set: Placement(self: GroupBox) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: GroupBox) -> bool
        Set: PrintObject(self: GroupBox) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: GroupBox) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: GroupBox) -> str
        Set: Text(self: GroupBox) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: GroupBox) -> float
        Set: Top(self: GroupBox) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: GroupBox) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: GroupBox) -> bool
        Set: Visible(self: GroupBox) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: GroupBox) -> float
        Set: Width(self: GroupBox) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: GroupBox) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: GroupBox) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: GroupBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: GroupBox) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: GroupBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: GroupBox) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: GroupBox) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: GroupBox) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: GroupBox, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: GroupBox) -> object """
        ...


class GroupBoxes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: GroupBoxes) -> object
        Set: Accelerator(self: GroupBoxes) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: GroupBoxes) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: GroupBoxes) -> str
        Set: Caption(self: GroupBoxes) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: GroupBoxes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: GroupBoxes) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: GroupBoxes) -> bool
        Set: Display3DShading(self: GroupBoxes) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: GroupBoxes) -> bool
        Set: Enabled(self: GroupBoxes) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: GroupBoxes) -> float
        Set: Height(self: GroupBoxes) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: GroupBoxes) -> float
        Set: Left(self: GroupBoxes) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: GroupBoxes) -> bool
        Set: Locked(self: GroupBoxes) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: GroupBoxes) -> bool
        Set: LockedText(self: GroupBoxes) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: GroupBoxes) -> str
        Set: OnAction(self: GroupBoxes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: GroupBoxes) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: GroupBoxes) -> object
        Set: PhoneticAccelerator(self: GroupBoxes) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: GroupBoxes) -> object
        Set: Placement(self: GroupBoxes) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: GroupBoxes) -> bool
        Set: PrintObject(self: GroupBoxes) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: GroupBoxes) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: GroupBoxes) -> str
        Set: Text(self: GroupBoxes) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: GroupBoxes) -> float
        Set: Top(self: GroupBoxes) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: GroupBoxes) -> bool
        Set: Visible(self: GroupBoxes) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: GroupBoxes) -> float
        Set: Width(self: GroupBoxes) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: GroupBoxes) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> GroupBox:
        """ Add(self: GroupBoxes, Left: float, Top: float, Width: float, Height: float) -> GroupBox """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: GroupBoxes) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: GroupBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: GroupBoxes) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: GroupBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: GroupBoxes) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: GroupBoxes) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: GroupBoxes) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: GroupBoxes) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: GroupBoxes, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: GroupBoxes, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: GroupBoxes) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: GroupBoxes) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: GroupBoxes) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: GroupBoxes) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: GroupBoxes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class GroupObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: GroupObject) -> bool
        Set: AddIndent(self: GroupObject) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: GroupObject) -> Application """
        ...

    @property
    def ArrowHeadLength(self) -> object:
        """
        Get: ArrowHeadLength(self: GroupObject) -> object
        Set: ArrowHeadLength(self: GroupObject) = value
        """
        ...

    @property
    def ArrowHeadStyle(self) -> object:
        """
        Get: ArrowHeadStyle(self: GroupObject) -> object
        Set: ArrowHeadStyle(self: GroupObject) = value
        """
        ...

    @property
    def ArrowHeadWidth(self) -> object:
        """
        Get: ArrowHeadWidth(self: GroupObject) -> object
        Set: ArrowHeadWidth(self: GroupObject) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: GroupObject) -> bool
        Set: AutoSize(self: GroupObject) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: GroupObject) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: GroupObject) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: GroupObject) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: GroupObject) -> bool
        Set: Enabled(self: GroupObject) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: GroupObject) -> Font """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: GroupObject) -> float
        Set: Height(self: GroupObject) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: GroupObject) -> object
        Set: HorizontalAlignment(self: GroupObject) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: GroupObject) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: GroupObject) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: GroupObject) -> float
        Set: Left(self: GroupObject) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: GroupObject) -> bool
        Set: Locked(self: GroupObject) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: GroupObject) -> str
        Set: Name(self: GroupObject) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: GroupObject) -> str
        Set: OnAction(self: GroupObject) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: GroupObject) -> object
        Set: Orientation(self: GroupObject) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: GroupObject) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: GroupObject) -> object
        Set: Placement(self: GroupObject) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: GroupObject) -> bool
        Set: PrintObject(self: GroupObject) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: GroupObject) -> int
        Set: ReadingOrder(self: GroupObject) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: GroupObject) -> bool
        Set: RoundedCorners(self: GroupObject) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: GroupObject) -> bool
        Set: Shadow(self: GroupObject) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: GroupObject) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: GroupObject) -> float
        Set: Top(self: GroupObject) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: GroupObject) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: GroupObject) -> object
        Set: VerticalAlignment(self: GroupObject) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: GroupObject) -> bool
        Set: Visible(self: GroupObject) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: GroupObject) -> float
        Set: Width(self: GroupObject) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: GroupObject) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: GroupObject) -> int
        Set: _Default(self: GroupObject) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: GroupObject) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: GroupObject, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: GroupObject) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: GroupObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: GroupObject) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: GroupObject) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: GroupObject) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: GroupObject, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: GroupObject) -> object """
        ...

    def Ungroup(self) -> object:
        """ Ungroup(self: GroupObject) -> object """
        ...

    def _Dummy27(self): # -> 
        """ _Dummy27(self: GroupObject) """
        ...

    def _Dummy28(self): # -> 
        """ _Dummy28(self: GroupObject) """
        ...

    def _Dummy30(self): # -> 
        """ _Dummy30(self: GroupObject) """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: GroupObject) """
        ...

    def _Dummy37(self): # -> 
        """ _Dummy37(self: GroupObject) """
        ...

    def _Dummy38(self): # -> 
        """ _Dummy38(self: GroupObject) """
        ...

    def _Dummy41(self): # -> 
        """ _Dummy41(self: GroupObject) """
        ...

    def _Dummy42(self): # -> 
        """ _Dummy42(self: GroupObject) """
        ...

    def _Dummy43(self): # -> 
        """ _Dummy43(self: GroupObject) """
        ...

    def _Dummy44(self): # -> 
        """ _Dummy44(self: GroupObject) """
        ...

    def _Dummy45(self): # -> 
        """ _Dummy45(self: GroupObject) """
        ...

    def _Dummy47(self): # -> 
        """ _Dummy47(self: GroupObject) """
        ...

    def _Dummy48(self): # -> 
        """ _Dummy48(self: GroupObject) """
        ...

    def _Dummy50(self): # -> 
        """ _Dummy50(self: GroupObject) """
        ...

    def _Dummy52(self): # -> 
        """ _Dummy52(self: GroupObject) """
        ...

    def _Dummy53(self): # -> 
        """ _Dummy53(self: GroupObject) """
        ...

    def _Dummy54(self): # -> 
        """ _Dummy54(self: GroupObject) """
        ...

    def _Dummy55(self): # -> 
        """ _Dummy55(self: GroupObject) """
        ...

    def _Dummy56(self): # -> 
        """ _Dummy56(self: GroupObject) """
        ...

    def _Dummy57(self): # -> 
        """ _Dummy57(self: GroupObject) """
        ...

    def _Dummy58(self): # -> 
        """ _Dummy58(self: GroupObject) """
        ...

    def _Dummy59(self): # -> 
        """ _Dummy59(self: GroupObject) """
        ...

    def _Dummy60(self): # -> 
        """ _Dummy60(self: GroupObject) """
        ...

    def _Dummy61(self): # -> 
        """ _Dummy61(self: GroupObject) """
        ...

    def _Dummy62(self): # -> 
        """ _Dummy62(self: GroupObject) """
        ...

    def _Dummy63(self): # -> 
        """ _Dummy63(self: GroupObject) """
        ...

    def _Dummy65(self): # -> 
        """ _Dummy65(self: GroupObject) """
        ...

    def _Dummy66(self): # -> 
        """ _Dummy66(self: GroupObject) """
        ...

    def _Dummy67(self): # -> 
        """ _Dummy67(self: GroupObject) """
        ...

    def _Dummy68(self): # -> 
        """ _Dummy68(self: GroupObject) """
        ...

    def _Dummy70(self): # -> 
        """ _Dummy70(self: GroupObject) """
        ...

    def _Dummy72(self): # -> 
        """ _Dummy72(self: GroupObject) """
        ...

    def _Dummy73(self): # -> 
        """ _Dummy73(self: GroupObject) """
        ...

    def _Dummy75(self): # -> 
        """ _Dummy75(self: GroupObject) """
        ...

    def _Dummy77(self): # -> 
        """ _Dummy77(self: GroupObject) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class GroupObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: GroupObjects) -> bool
        Set: AddIndent(self: GroupObjects) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: GroupObjects) -> Application """
        ...

    @property
    def ArrowHeadLength(self) -> object:
        """
        Get: ArrowHeadLength(self: GroupObjects) -> object
        Set: ArrowHeadLength(self: GroupObjects) = value
        """
        ...

    @property
    def ArrowHeadStyle(self) -> object:
        """
        Get: ArrowHeadStyle(self: GroupObjects) -> object
        Set: ArrowHeadStyle(self: GroupObjects) = value
        """
        ...

    @property
    def ArrowHeadWidth(self) -> object:
        """
        Get: ArrowHeadWidth(self: GroupObjects) -> object
        Set: ArrowHeadWidth(self: GroupObjects) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: GroupObjects) -> bool
        Set: AutoSize(self: GroupObjects) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: GroupObjects) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: GroupObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: GroupObjects) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: GroupObjects) -> bool
        Set: Enabled(self: GroupObjects) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: GroupObjects) -> Font """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: GroupObjects) -> float
        Set: Height(self: GroupObjects) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: GroupObjects) -> object
        Set: HorizontalAlignment(self: GroupObjects) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: GroupObjects) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: GroupObjects) -> float
        Set: Left(self: GroupObjects) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: GroupObjects) -> bool
        Set: Locked(self: GroupObjects) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: GroupObjects) -> str
        Set: OnAction(self: GroupObjects) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: GroupObjects) -> object
        Set: Orientation(self: GroupObjects) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: GroupObjects) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: GroupObjects) -> object
        Set: Placement(self: GroupObjects) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: GroupObjects) -> bool
        Set: PrintObject(self: GroupObjects) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: GroupObjects) -> int
        Set: ReadingOrder(self: GroupObjects) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: GroupObjects) -> bool
        Set: RoundedCorners(self: GroupObjects) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: GroupObjects) -> bool
        Set: Shadow(self: GroupObjects) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: GroupObjects) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: GroupObjects) -> float
        Set: Top(self: GroupObjects) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: GroupObjects) -> object
        Set: VerticalAlignment(self: GroupObjects) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: GroupObjects) -> bool
        Set: Visible(self: GroupObjects) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: GroupObjects) -> float
        Set: Width(self: GroupObjects) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: GroupObjects) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: GroupObjects) -> int
        Set: _Default(self: GroupObjects) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: GroupObjects) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: GroupObjects, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: GroupObjects) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: GroupObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: GroupObjects) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: GroupObjects) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: GroupObjects) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: GroupObjects) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: GroupObjects, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: GroupObjects, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: GroupObjects) -> object """
        ...

    def Ungroup(self) -> object:
        """ Ungroup(self: GroupObjects) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: GroupObjects) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: GroupObjects) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: GroupObjects) """
        ...

    def _Dummy27(self): # -> 
        """ _Dummy27(self: GroupObjects) """
        ...

    def _Dummy28(self): # -> 
        """ _Dummy28(self: GroupObjects) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: GroupObjects) """
        ...

    def _Dummy30(self): # -> 
        """ _Dummy30(self: GroupObjects) """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: GroupObjects) """
        ...

    def _Dummy37(self): # -> 
        """ _Dummy37(self: GroupObjects) """
        ...

    def _Dummy38(self): # -> 
        """ _Dummy38(self: GroupObjects) """
        ...

    def _Dummy41(self): # -> 
        """ _Dummy41(self: GroupObjects) """
        ...

    def _Dummy42(self): # -> 
        """ _Dummy42(self: GroupObjects) """
        ...

    def _Dummy43(self): # -> 
        """ _Dummy43(self: GroupObjects) """
        ...

    def _Dummy44(self): # -> 
        """ _Dummy44(self: GroupObjects) """
        ...

    def _Dummy45(self): # -> 
        """ _Dummy45(self: GroupObjects) """
        ...

    def _Dummy47(self): # -> 
        """ _Dummy47(self: GroupObjects) """
        ...

    def _Dummy48(self): # -> 
        """ _Dummy48(self: GroupObjects) """
        ...

    def _Dummy50(self): # -> 
        """ _Dummy50(self: GroupObjects) """
        ...

    def _Dummy52(self): # -> 
        """ _Dummy52(self: GroupObjects) """
        ...

    def _Dummy53(self): # -> 
        """ _Dummy53(self: GroupObjects) """
        ...

    def _Dummy54(self): # -> 
        """ _Dummy54(self: GroupObjects) """
        ...

    def _Dummy55(self): # -> 
        """ _Dummy55(self: GroupObjects) """
        ...

    def _Dummy56(self): # -> 
        """ _Dummy56(self: GroupObjects) """
        ...

    def _Dummy57(self): # -> 
        """ _Dummy57(self: GroupObjects) """
        ...

    def _Dummy58(self): # -> 
        """ _Dummy58(self: GroupObjects) """
        ...

    def _Dummy59(self): # -> 
        """ _Dummy59(self: GroupObjects) """
        ...

    def _Dummy60(self): # -> 
        """ _Dummy60(self: GroupObjects) """
        ...

    def _Dummy61(self): # -> 
        """ _Dummy61(self: GroupObjects) """
        ...

    def _Dummy62(self): # -> 
        """ _Dummy62(self: GroupObjects) """
        ...

    def _Dummy63(self): # -> 
        """ _Dummy63(self: GroupObjects) """
        ...

    def _Dummy65(self): # -> 
        """ _Dummy65(self: GroupObjects) """
        ...

    def _Dummy66(self): # -> 
        """ _Dummy66(self: GroupObjects) """
        ...

    def _Dummy67(self): # -> 
        """ _Dummy67(self: GroupObjects) """
        ...

    def _Dummy68(self): # -> 
        """ _Dummy68(self: GroupObjects) """
        ...

    def _Dummy70(self): # -> 
        """ _Dummy70(self: GroupObjects) """
        ...

    def _Dummy72(self): # -> 
        """ _Dummy72(self: GroupObjects) """
        ...

    def _Dummy73(self): # -> 
        """ _Dummy73(self: GroupObjects) """
        ...

    def _Dummy75(self): # -> 
        """ _Dummy75(self: GroupObjects) """
        ...

    def _Dummy77(self): # -> 
        """ _Dummy77(self: GroupObjects) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class GroupShapes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: GroupShapes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: GroupShapes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: GroupShapes) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: GroupShapes) -> object """
        ...


    def Item(self, Index:object) -> Shape:
        """ Item(self: GroupShapes, Index: object) -> Shape """
        ...

    def _Default(self, Index:object) -> Shape:
        """ _Default(self: GroupShapes, Index: object) -> Shape """
        ...


class HeaderFooter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Picture(self) -> Graphic:
        """ Get: Picture(self: HeaderFooter) -> Graphic """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: HeaderFooter) -> str
        Set: Text(self: HeaderFooter) = value
        """
        ...



class HiLoLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: HiLoLines) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: HiLoLines) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: HiLoLines) -> XlCreator """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: HiLoLines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: HiLoLines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HiLoLines) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: HiLoLines) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: HiLoLines) -> object """
        ...


class HPageBreak: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: HPageBreak) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: HPageBreak) -> XlCreator """
        ...

    @property
    def Extent(self) -> XlPageBreakExtent:
        """ Get: Extent(self: HPageBreak) -> XlPageBreakExtent """
        ...

    @property
    def Location(self) -> Range:
        """
        Get: Location(self: HPageBreak) -> Range
        Set: Location(self: HPageBreak) = value
        """
        ...

    @property
    def Parent(self) -> Worksheet:
        """ Get: Parent(self: HPageBreak) -> Worksheet """
        ...

    @property
    def Type(self) -> XlPageBreak:
        """
        Get: Type(self: HPageBreak) -> XlPageBreak
        Set: Type(self: HPageBreak) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: HPageBreak) """
        ...

    def DragOff(self, Direction:XlDirection, RegionIndex:int): # -> 
        """ DragOff(self: HPageBreak, Direction: XlDirection, RegionIndex: int) """
        ...


class HPageBreaks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: HPageBreaks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: HPageBreaks) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: HPageBreaks) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HPageBreaks) -> object """
        ...


    def Add(self, Before:object) -> HPageBreak:
        """ Add(self: HPageBreaks, Before: object) -> HPageBreak """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Hyperlink: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Address(self) -> str:
        """
        Get: Address(self: Hyperlink) -> str
        Set: Address(self: Hyperlink) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Hyperlink) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Hyperlink) -> XlCreator """
        ...

    @property
    def EmailSubject(self) -> str:
        """
        Get: EmailSubject(self: Hyperlink) -> str
        Set: EmailSubject(self: Hyperlink) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Hyperlink) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Hyperlink) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Hyperlink) -> Range """
        ...

    @property
    def ScreenTip(self) -> str:
        """
        Get: ScreenTip(self: Hyperlink) -> str
        Set: ScreenTip(self: Hyperlink) = value
        """
        ...

    @property
    def Shape(self) -> Shape:
        """ Get: Shape(self: Hyperlink) -> Shape """
        ...

    @property
    def SubAddress(self) -> str:
        """
        Get: SubAddress(self: Hyperlink) -> str
        Set: SubAddress(self: Hyperlink) = value
        """
        ...

    @property
    def TextToDisplay(self) -> str:
        """
        Get: TextToDisplay(self: Hyperlink) -> str
        Set: TextToDisplay(self: Hyperlink) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: Hyperlink) -> int """
        ...


    def AddToFavorites(self): # -> 
        """ AddToFavorites(self: Hyperlink) """
        ...

    def CreateNewDocument(self, Filename:str, EditNow:bool, Overwrite:bool): # -> 
        """ CreateNewDocument(self: Hyperlink, Filename: str, EditNow: bool, Overwrite: bool) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Hyperlink) """
        ...

    def Follow(self, NewWindow:object, AddHistory:object, ExtraInfo:object, Method:object, HeaderInfo:object): # -> 
        """ Follow(self: Hyperlink, NewWindow: object, AddHistory: object, ExtraInfo: object, Method: object, HeaderInfo: object) """
        ...


class Hyperlinks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Hyperlinks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Hyperlinks) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Hyperlinks) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Hyperlinks) -> object """
        ...


    def Add(self, Anchor:object, Address:str, SubAddress:object, ScreenTip:object, TextToDisplay:object) -> object:
        """ Add(self: Hyperlinks, Anchor: object, Address: str, SubAddress: object, ScreenTip: object, TextToDisplay: object) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: Hyperlinks) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IAboveAverage: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AboveBelow(self) -> XlAboveBelow:
        """
        Get: AboveBelow(self: IAboveAverage) -> XlAboveBelow
        Set: AboveBelow(self: IAboveAverage) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAboveAverage) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: IAboveAverage) -> Range """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: IAboveAverage) -> Borders """
        ...

    @property
    def CalcFor(self) -> XlCalcFor:
        """
        Get: CalcFor(self: IAboveAverage) -> XlCalcFor
        Set: CalcFor(self: IAboveAverage) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAboveAverage) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IAboveAverage) -> Font """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IAboveAverage) -> Interior """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: IAboveAverage) -> object
        Set: NumberFormat(self: IAboveAverage) = value
        """
        ...

    @property
    def NumStdDev(self) -> int:
        """
        Get: NumStdDev(self: IAboveAverage) -> int
        Set: NumStdDev(self: IAboveAverage) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAboveAverage) -> object """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: IAboveAverage) -> int
        Set: Priority(self: IAboveAverage) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: IAboveAverage) -> bool """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: IAboveAverage) -> XlPivotConditionScope
        Set: ScopeType(self: IAboveAverage) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """
        Get: StopIfTrue(self: IAboveAverage) -> bool
        Set: StopIfTrue(self: IAboveAverage) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: IAboveAverage) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: IAboveAverage) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: IAboveAverage, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: IAboveAverage) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: IAboveAverage) """
        ...


class IAction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAction) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """ Get: Caption(self: IAction) -> str """
        ...

    @property
    def Content(self) -> str:
        """ Get: Content(self: IAction) -> str """
        ...

    @property
    def Coordinate(self) -> str:
        """ Get: Coordinate(self: IAction) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAction) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IAction) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAction) -> object """
        ...

    @property
    def Type(self) -> XlActionType:
        """ Get: Type(self: IAction) -> XlActionType """
        ...


    def Execute(self): # -> 
        """ Execute(self: IAction) """
        ...


class IActions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IActions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IActions) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IActions) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IActions) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IAddIn: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAddIn) -> Application """
        ...

    @property
    def Author(self) -> str:
        """ Get: Author(self: IAddIn) -> str """
        ...

    @property
    def CLSID(self) -> str:
        """ Get: CLSID(self: IAddIn) -> str """
        ...

    @property
    def Comments(self) -> str:
        """ Get: Comments(self: IAddIn) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAddIn) -> XlCreator """
        ...

    @property
    def FullName(self) -> str:
        """ Get: FullName(self: IAddIn) -> str """
        ...

    @property
    def Installed(self) -> bool:
        """
        Get: Installed(self: IAddIn) -> bool
        Set: Installed(self: IAddIn) = value
        """
        ...

    @property
    def IsOpen(self) -> bool:
        """ Get: IsOpen(self: IAddIn) -> bool """
        ...

    @property
    def Keywords(self) -> str:
        """ Get: Keywords(self: IAddIn) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IAddIn) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAddIn) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: IAddIn) -> str """
        ...

    @property
    def progID(self) -> str:
        """ Get: progID(self: IAddIn) -> str """
        ...

    @property
    def Subject(self) -> str:
        """ Get: Subject(self: IAddIn) -> str """
        ...

    @property
    def Title(self) -> str:
        """ Get: Title(self: IAddIn) -> str """
        ...



class IAddIns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAddIns) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IAddIns) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAddIns) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAddIns) -> object """
        ...


    def Add(self, Filename:str, CopyFile:object) -> AddIn:
        """ Add(self: IAddIns, Filename: str, CopyFile: object) -> AddIn """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IAddIns2(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAddIns2) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IAddIns2) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAddIns2) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAddIns2) -> object """
        ...


    def Add(self, Filename:str, CopyFile:object) -> AddIn:
        """ Add(self: IAddIns2, Filename: str, CopyFile: object) -> AddIn """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IAllowEditRange: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Range(self) -> Range:
        """
        Get: Range(self: IAllowEditRange) -> Range
        Set: Range(self: IAllowEditRange) = value
        """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: IAllowEditRange) -> str
        Set: Title(self: IAllowEditRange) = value
        """
        ...

    @property
    def Users(self) -> UserAccessList:
        """ Get: Users(self: IAllowEditRange) -> UserAccessList """
        ...


    def ChangePassword(self, Password:str): # -> 
        """ ChangePassword(self: IAllowEditRange, Password: str) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IAllowEditRange) """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: IAllowEditRange, Password: object) """
        ...


class IAllowEditRanges(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: IAllowEditRanges) -> int """
        ...


    def Add(self, Title:str, Range:Range, Password:object) -> AllowEditRange:
        """ Add(self: IAllowEditRanges, Title: str, Range: Range, Password: object) -> AllowEditRange """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IAppEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterCalculate(self): # -> 
        """ AfterCalculate(self: IAppEvents) """
        ...

    def NewWorkbook(self, Wb:Workbook): # -> 
        """ NewWorkbook(self: IAppEvents, Wb: Workbook) """
        ...

    def ProtectedViewWindowActivate(self, Pvw:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowActivate(self: IAppEvents, Pvw: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowBeforeClose(self, Pvw, Reason, Cancel) -> bool:
        """ ProtectedViewWindowBeforeClose(self: IAppEvents, Pvw: ProtectedViewWindow, Reason: XlProtectedViewCloseReason) -> bool """
        ...

    def ProtectedViewWindowBeforeEdit(self, Pvw, Cancel) -> bool:
        """ ProtectedViewWindowBeforeEdit(self: IAppEvents, Pvw: ProtectedViewWindow) -> bool """
        ...

    def ProtectedViewWindowDeactivate(self, Pvw:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowDeactivate(self: IAppEvents, Pvw: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowOpen(self, Pvw:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowOpen(self: IAppEvents, Pvw: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowResize(self, Pvw:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowResize(self: IAppEvents, Pvw: ProtectedViewWindow) """
        ...

    def SheetActivate(self, Sh:object): # -> 
        """ SheetActivate(self: IAppEvents, Sh: object) """
        ...

    def SheetBeforeDelete(self, Sh:object): # -> 
        """ SheetBeforeDelete(self: IAppEvents, Sh: object) """
        ...

    def SheetBeforeDoubleClick(self, Sh, Target, Cancel) -> bool:
        """ SheetBeforeDoubleClick(self: IAppEvents, Sh: object, Target: Range) -> bool """
        ...

    def SheetBeforeRightClick(self, Sh, Target, Cancel) -> bool:
        """ SheetBeforeRightClick(self: IAppEvents, Sh: object, Target: Range) -> bool """
        ...

    def SheetCalculate(self, Sh:object): # -> 
        """ SheetCalculate(self: IAppEvents, Sh: object) """
        ...

    def SheetChange(self, Sh:object, Target:Range): # -> 
        """ SheetChange(self: IAppEvents, Sh: object, Target: Range) """
        ...

    def SheetDeactivate(self, Sh:object): # -> 
        """ SheetDeactivate(self: IAppEvents, Sh: object) """
        ...

    def SheetFollowHyperlink(self, Sh:object, Target:Hyperlink): # -> 
        """ SheetFollowHyperlink(self: IAppEvents, Sh: object, Target: Hyperlink) """
        ...

    def SheetLensGalleryRenderComplete(self, Sh:object): # -> 
        """ SheetLensGalleryRenderComplete(self: IAppEvents, Sh: object) """
        ...

    def SheetPivotTableAfterValueChange(self, Sh:object, TargetPivotTable:PivotTable, TargetRange:Range): # -> 
        """ SheetPivotTableAfterValueChange(self: IAppEvents, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        ...

    def SheetPivotTableBeforeAllocateChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ SheetPivotTableBeforeAllocateChanges(self: IAppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def SheetPivotTableBeforeCommitChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ SheetPivotTableBeforeCommitChanges(self: IAppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def SheetPivotTableBeforeDiscardChanges(self, Sh:object, TargetPivotTable:PivotTable, ValueChangeStart:int, ValueChangeEnd:int): # -> 
        """ SheetPivotTableBeforeDiscardChanges(self: IAppEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        ...

    def SheetPivotTableUpdate(self, Sh:object, Target:PivotTable): # -> 
        """ SheetPivotTableUpdate(self: IAppEvents, Sh: object, Target: PivotTable) """
        ...

    def SheetSelectionChange(self, Sh:object, Target:Range): # -> 
        """ SheetSelectionChange(self: IAppEvents, Sh: object, Target: Range) """
        ...

    def SheetTableUpdate(self, Sh:object, Target:TableObject): # -> 
        """ SheetTableUpdate(self: IAppEvents, Sh: object, Target: TableObject) """
        ...

    def WindowActivate(self, Wb:Workbook, Wn:Window): # -> 
        """ WindowActivate(self: IAppEvents, Wb: Workbook, Wn: Window) """
        ...

    def WindowDeactivate(self, Wb:Workbook, Wn:Window): # -> 
        """ WindowDeactivate(self: IAppEvents, Wb: Workbook, Wn: Window) """
        ...

    def WindowResize(self, Wb:Workbook, Wn:Window): # -> 
        """ WindowResize(self: IAppEvents, Wb: Workbook, Wn: Window) """
        ...

    def WorkbookActivate(self, Wb:Workbook): # -> 
        """ WorkbookActivate(self: IAppEvents, Wb: Workbook) """
        ...

    def WorkbookAddinInstall(self, Wb:Workbook): # -> 
        """ WorkbookAddinInstall(self: IAppEvents, Wb: Workbook) """
        ...

    def WorkbookAddinUninstall(self, Wb:Workbook): # -> 
        """ WorkbookAddinUninstall(self: IAppEvents, Wb: Workbook) """
        ...

    def WorkbookAfterSave(self, Wb:Workbook, Success:bool): # -> 
        """ WorkbookAfterSave(self: IAppEvents, Wb: Workbook, Success: bool) """
        ...

    def WorkbookAfterXmlExport(self, Wb:Workbook, Map:XmlMap, Url:str, Result:XlXmlExportResult): # -> 
        """ WorkbookAfterXmlExport(self: IAppEvents, Wb: Workbook, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        ...

    def WorkbookAfterXmlImport(self, Wb:Workbook, Map:XmlMap, IsRefresh:bool, Result:XlXmlImportResult): # -> 
        """ WorkbookAfterXmlImport(self: IAppEvents, Wb: Workbook, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        ...

    def WorkbookBeforeClose(self, Wb, Cancel) -> bool:
        """ WorkbookBeforeClose(self: IAppEvents, Wb: Workbook) -> bool """
        ...

    def WorkbookBeforePrint(self, Wb, Cancel) -> bool:
        """ WorkbookBeforePrint(self: IAppEvents, Wb: Workbook) -> bool """
        ...

    def WorkbookBeforeSave(self, Wb, SaveAsUI, Cancel) -> bool:
        """ WorkbookBeforeSave(self: IAppEvents, Wb: Workbook, SaveAsUI: bool) -> bool """
        ...

    def WorkbookBeforeXmlExport(self, Wb, Map, Url, Cancel) -> bool:
        """ WorkbookBeforeXmlExport(self: IAppEvents, Wb: Workbook, Map: XmlMap, Url: str) -> bool """
        ...

    def WorkbookBeforeXmlImport(self, Wb, Map, Url, IsRefresh, Cancel) -> bool:
        """ WorkbookBeforeXmlImport(self: IAppEvents, Wb: Workbook, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        ...

    def WorkbookDeactivate(self, Wb:Workbook): # -> 
        """ WorkbookDeactivate(self: IAppEvents, Wb: Workbook) """
        ...

    def WorkbookModelChange(self, Wb:Workbook, Changes:ModelChanges): # -> 
        """ WorkbookModelChange(self: IAppEvents, Wb: Workbook, Changes: ModelChanges) """
        ...

    def WorkbookNewChart(self, Wb:Workbook, Ch:Chart): # -> 
        """ WorkbookNewChart(self: IAppEvents, Wb: Workbook, Ch: Chart) """
        ...

    def WorkbookNewSheet(self, Wb:Workbook, Sh:object): # -> 
        """ WorkbookNewSheet(self: IAppEvents, Wb: Workbook, Sh: object) """
        ...

    def WorkbookOpen(self, Wb:Workbook): # -> 
        """ WorkbookOpen(self: IAppEvents, Wb: Workbook) """
        ...

    def WorkbookPivotTableCloseConnection(self, Wb:Workbook, Target:PivotTable): # -> 
        """ WorkbookPivotTableCloseConnection(self: IAppEvents, Wb: Workbook, Target: PivotTable) """
        ...

    def WorkbookPivotTableOpenConnection(self, Wb:Workbook, Target:PivotTable): # -> 
        """ WorkbookPivotTableOpenConnection(self: IAppEvents, Wb: Workbook, Target: PivotTable) """
        ...

    def WorkbookRowsetComplete(self, Wb:Workbook, Description:str, Sheet:str, Success:bool): # -> 
        """ WorkbookRowsetComplete(self: IAppEvents, Wb: Workbook, Description: str, Sheet: str, Success: bool) """
        ...

    def WorkbookSync(self, Wb:Workbook, SyncEventType): # ->  # Not found arg types: {'SyncEventType': 'MsoSyncEventType'}
        """ WorkbookSync(self: IAppEvents, Wb: Workbook, SyncEventType: MsoSyncEventType) """
        ...


class IArc: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IArc) -> bool
        Set: AddIndent(self: IArc) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IArc) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IArc) -> object
        Set: AutoScaleFont(self: IArc) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IArc) -> bool
        Set: AutoSize(self: IArc) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IArc) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IArc) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IArc) -> str
        Set: Caption(self: IArc) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IArc) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IArc) -> bool
        Set: Enabled(self: IArc) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IArc) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IArc) -> str
        Set: Formula(self: IArc) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IArc) -> float
        Set: Height(self: IArc) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IArc) -> object
        Set: HorizontalAlignment(self: IArc) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IArc) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IArc) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IArc) -> float
        Set: Left(self: IArc) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IArc) -> bool
        Set: Locked(self: IArc) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IArc) -> bool
        Set: LockedText(self: IArc) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IArc) -> str
        Set: Name(self: IArc) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IArc) -> str
        Set: OnAction(self: IArc) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IArc) -> object
        Set: Orientation(self: IArc) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IArc) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IArc) -> object
        Set: Placement(self: IArc) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IArc) -> bool
        Set: PrintObject(self: IArc) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IArc) -> int
        Set: ReadingOrder(self: IArc) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IArc) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IArc) -> str
        Set: Text(self: IArc) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IArc) -> float
        Set: Top(self: IArc) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IArc) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IArc) -> object
        Set: VerticalAlignment(self: IArc) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IArc) -> bool
        Set: Visible(self: IArc) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IArc) -> float
        Set: Width(self: IArc) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IArc) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: IArc) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IArc, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IArc) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IArc, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IArc) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IArc) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IArc) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IArc, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IArc) -> object """
        ...

    def _Dummy43(self): # -> 
        """ _Dummy43(self: IArc) """
        ...


class IArcs(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IArcs) -> bool
        Set: AddIndent(self: IArcs) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IArcs) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IArcs) -> object
        Set: AutoScaleFont(self: IArcs) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IArcs) -> bool
        Set: AutoSize(self: IArcs) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IArcs) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IArcs) -> str
        Set: Caption(self: IArcs) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IArcs) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IArcs) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IArcs) -> bool
        Set: Enabled(self: IArcs) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IArcs) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IArcs) -> str
        Set: Formula(self: IArcs) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IArcs) -> float
        Set: Height(self: IArcs) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IArcs) -> object
        Set: HorizontalAlignment(self: IArcs) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IArcs) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IArcs) -> float
        Set: Left(self: IArcs) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IArcs) -> bool
        Set: Locked(self: IArcs) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IArcs) -> bool
        Set: LockedText(self: IArcs) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IArcs) -> str
        Set: OnAction(self: IArcs) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IArcs) -> object
        Set: Orientation(self: IArcs) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IArcs) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IArcs) -> object
        Set: Placement(self: IArcs) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IArcs) -> bool
        Set: PrintObject(self: IArcs) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IArcs) -> int
        Set: ReadingOrder(self: IArcs) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IArcs) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IArcs) -> str
        Set: Text(self: IArcs) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IArcs) -> float
        Set: Top(self: IArcs) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IArcs) -> object
        Set: VerticalAlignment(self: IArcs) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IArcs) -> bool
        Set: Visible(self: IArcs) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IArcs) -> float
        Set: Width(self: IArcs) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IArcs) -> int """
        ...


    def Add(self, X1:float, Y1:float, X2:float, Y2:float) -> Arc:
        """ Add(self: IArcs, X1: float, Y1: float, X2: float, Y2: float) -> Arc """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IArcs) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IArcs, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IArcs) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IArcs, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IArcs) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IArcs) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IArcs) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IArcs) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IArcs, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IArcs, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IArcs) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IArcs) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IArcs) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IArcs) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IArcs) """
        ...

    def _Dummy43(self): # -> 
        """ _Dummy43(self: IArcs) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IAreas(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAreas) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IAreas) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAreas) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAreas) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IAutoCorrect: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAutoCorrect) -> Application """
        ...

    @property
    def AutoExpandListRange(self) -> bool:
        """
        Get: AutoExpandListRange(self: IAutoCorrect) -> bool
        Set: AutoExpandListRange(self: IAutoCorrect) = value
        """
        ...

    @property
    def AutoFillFormulasInLists(self) -> bool:
        """
        Get: AutoFillFormulasInLists(self: IAutoCorrect) -> bool
        Set: AutoFillFormulasInLists(self: IAutoCorrect) = value
        """
        ...

    @property
    def CapitalizeNamesOfDays(self) -> bool:
        """
        Get: CapitalizeNamesOfDays(self: IAutoCorrect) -> bool
        Set: CapitalizeNamesOfDays(self: IAutoCorrect) = value
        """
        ...

    @property
    def CorrectCapsLock(self) -> bool:
        """
        Get: CorrectCapsLock(self: IAutoCorrect) -> bool
        Set: CorrectCapsLock(self: IAutoCorrect) = value
        """
        ...

    @property
    def CorrectSentenceCap(self) -> bool:
        """
        Get: CorrectSentenceCap(self: IAutoCorrect) -> bool
        Set: CorrectSentenceCap(self: IAutoCorrect) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAutoCorrect) -> XlCreator """
        ...

    @property
    def DisplayAutoCorrectOptions(self) -> bool:
        """
        Get: DisplayAutoCorrectOptions(self: IAutoCorrect) -> bool
        Set: DisplayAutoCorrectOptions(self: IAutoCorrect) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAutoCorrect) -> object """
        ...

    @property
    def ReplaceText(self) -> bool:
        """
        Get: ReplaceText(self: IAutoCorrect) -> bool
        Set: ReplaceText(self: IAutoCorrect) = value
        """
        ...

    @property
    def TwoInitialCapitals(self) -> bool:
        """
        Get: TwoInitialCapitals(self: IAutoCorrect) -> bool
        Set: TwoInitialCapitals(self: IAutoCorrect) = value
        """
        ...


    def AddReplacement(self, What:str, Replacement:str) -> object:
        """ AddReplacement(self: IAutoCorrect, What: str, Replacement: str) -> object """
        ...

    def DeleteReplacement(self, What:str) -> object:
        """ DeleteReplacement(self: IAutoCorrect, What: str) -> object """
        ...


class IAutoFilter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAutoFilter) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAutoFilter) -> XlCreator """
        ...

    @property
    def FilterMode(self) -> bool:
        """ Get: FilterMode(self: IAutoFilter) -> bool """
        ...

    @property
    def Filters(self) -> Filters:
        """ Get: Filters(self: IAutoFilter) -> Filters """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAutoFilter) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: IAutoFilter) -> Range """
        ...

    @property
    def Sort(self) -> Sort:
        """ Get: Sort(self: IAutoFilter) -> Sort """
        ...


    def ApplyFilter(self): # -> 
        """ ApplyFilter(self: IAutoFilter) """
        ...

    def ShowAllData(self): # -> 
        """ ShowAllData(self: IAutoFilter) """
        ...


class IAutoRecover: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAutoRecover) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAutoRecover) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IAutoRecover) -> bool
        Set: Enabled(self: IAutoRecover) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAutoRecover) -> object """
        ...

    @property
    def Path(self) -> str:
        """
        Get: Path(self: IAutoRecover) -> str
        Set: Path(self: IAutoRecover) = value
        """
        ...

    @property
    def Time(self) -> int:
        """
        Get: Time(self: IAutoRecover) -> int
        Set: Time(self: IAutoRecover) = value
        """
        ...



class IAxes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAxes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IAxes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAxes) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAxes) -> object """
        ...


    def Item(self, Type:XlAxisType, AxisGroup:XlAxisGroup) -> Axis:
        """ Item(self: IAxes, Type: XlAxisType, AxisGroup: XlAxisGroup) -> Axis """
        ...

    def _Default(self, Type:XlAxisType, AxisGroup:XlAxisGroup) -> Axis:
        """ _Default(self: IAxes, Type: XlAxisType, AxisGroup: XlAxisGroup) -> Axis """
        ...


class IAxis: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAxis) -> Application """
        ...

    @property
    def AxisBetweenCategories(self) -> bool:
        """
        Get: AxisBetweenCategories(self: IAxis) -> bool
        Set: AxisBetweenCategories(self: IAxis) = value
        """
        ...

    @property
    def AxisGroup(self) -> XlAxisGroup:
        """ Get: AxisGroup(self: IAxis) -> XlAxisGroup """
        ...

    @property
    def AxisTitle(self) -> AxisTitle:
        """ Get: AxisTitle(self: IAxis) -> AxisTitle """
        ...

    @property
    def BaseUnit(self) -> XlTimeUnit:
        """
        Get: BaseUnit(self: IAxis) -> XlTimeUnit
        Set: BaseUnit(self: IAxis) = value
        """
        ...

    @property
    def BaseUnitIsAuto(self) -> bool:
        """
        Get: BaseUnitIsAuto(self: IAxis) -> bool
        Set: BaseUnitIsAuto(self: IAxis) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IAxis) -> Border """
        ...

    @property
    def CategoryNames(self) -> object:
        """
        Get: CategoryNames(self: IAxis) -> object
        Set: CategoryNames(self: IAxis) = value
        """
        ...

    @property
    def CategoryType(self) -> XlCategoryType:
        """
        Get: CategoryType(self: IAxis) -> XlCategoryType
        Set: CategoryType(self: IAxis) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAxis) -> XlCreator """
        ...

    @property
    def Crosses(self) -> XlAxisCrosses:
        """
        Get: Crosses(self: IAxis) -> XlAxisCrosses
        Set: Crosses(self: IAxis) = value
        """
        ...

    @property
    def CrossesAt(self) -> float:
        """
        Get: CrossesAt(self: IAxis) -> float
        Set: CrossesAt(self: IAxis) = value
        """
        ...

    @property
    def DisplayUnit(self) -> XlDisplayUnit:
        """
        Get: DisplayUnit(self: IAxis) -> XlDisplayUnit
        Set: DisplayUnit(self: IAxis) = value
        """
        ...

    @property
    def DisplayUnitCustom(self) -> float:
        """
        Get: DisplayUnitCustom(self: IAxis) -> float
        Set: DisplayUnitCustom(self: IAxis) = value
        """
        ...

    @property
    def DisplayUnitLabel(self) -> DisplayUnitLabel:
        """ Get: DisplayUnitLabel(self: IAxis) -> DisplayUnitLabel """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IAxis) -> ChartFormat """
        ...

    @property
    def HasDisplayUnitLabel(self) -> bool:
        """
        Get: HasDisplayUnitLabel(self: IAxis) -> bool
        Set: HasDisplayUnitLabel(self: IAxis) = value
        """
        ...

    @property
    def HasMajorGridlines(self) -> bool:
        """
        Get: HasMajorGridlines(self: IAxis) -> bool
        Set: HasMajorGridlines(self: IAxis) = value
        """
        ...

    @property
    def HasMinorGridlines(self) -> bool:
        """
        Get: HasMinorGridlines(self: IAxis) -> bool
        Set: HasMinorGridlines(self: IAxis) = value
        """
        ...

    @property
    def HasTitle(self) -> bool:
        """
        Get: HasTitle(self: IAxis) -> bool
        Set: HasTitle(self: IAxis) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: IAxis) -> float """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: IAxis) -> float """
        ...

    @property
    def LogBase(self) -> float:
        """
        Get: LogBase(self: IAxis) -> float
        Set: LogBase(self: IAxis) = value
        """
        ...

    @property
    def MajorGridlines(self) -> Gridlines:
        """ Get: MajorGridlines(self: IAxis) -> Gridlines """
        ...

    @property
    def MajorTickMark(self) -> XlTickMark:
        """
        Get: MajorTickMark(self: IAxis) -> XlTickMark
        Set: MajorTickMark(self: IAxis) = value
        """
        ...

    @property
    def MajorUnit(self) -> float:
        """
        Get: MajorUnit(self: IAxis) -> float
        Set: MajorUnit(self: IAxis) = value
        """
        ...

    @property
    def MajorUnitIsAuto(self) -> bool:
        """
        Get: MajorUnitIsAuto(self: IAxis) -> bool
        Set: MajorUnitIsAuto(self: IAxis) = value
        """
        ...

    @property
    def MajorUnitScale(self) -> XlTimeUnit:
        """
        Get: MajorUnitScale(self: IAxis) -> XlTimeUnit
        Set: MajorUnitScale(self: IAxis) = value
        """
        ...

    @property
    def MaximumScale(self) -> float:
        """
        Get: MaximumScale(self: IAxis) -> float
        Set: MaximumScale(self: IAxis) = value
        """
        ...

    @property
    def MaximumScaleIsAuto(self) -> bool:
        """
        Get: MaximumScaleIsAuto(self: IAxis) -> bool
        Set: MaximumScaleIsAuto(self: IAxis) = value
        """
        ...

    @property
    def MinimumScale(self) -> float:
        """
        Get: MinimumScale(self: IAxis) -> float
        Set: MinimumScale(self: IAxis) = value
        """
        ...

    @property
    def MinimumScaleIsAuto(self) -> bool:
        """
        Get: MinimumScaleIsAuto(self: IAxis) -> bool
        Set: MinimumScaleIsAuto(self: IAxis) = value
        """
        ...

    @property
    def MinorGridlines(self) -> Gridlines:
        """ Get: MinorGridlines(self: IAxis) -> Gridlines """
        ...

    @property
    def MinorTickMark(self) -> XlTickMark:
        """
        Get: MinorTickMark(self: IAxis) -> XlTickMark
        Set: MinorTickMark(self: IAxis) = value
        """
        ...

    @property
    def MinorUnit(self) -> float:
        """
        Get: MinorUnit(self: IAxis) -> float
        Set: MinorUnit(self: IAxis) = value
        """
        ...

    @property
    def MinorUnitIsAuto(self) -> bool:
        """
        Get: MinorUnitIsAuto(self: IAxis) -> bool
        Set: MinorUnitIsAuto(self: IAxis) = value
        """
        ...

    @property
    def MinorUnitScale(self) -> XlTimeUnit:
        """
        Get: MinorUnitScale(self: IAxis) -> XlTimeUnit
        Set: MinorUnitScale(self: IAxis) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAxis) -> object """
        ...

    @property
    def ReversePlotOrder(self) -> bool:
        """
        Get: ReversePlotOrder(self: IAxis) -> bool
        Set: ReversePlotOrder(self: IAxis) = value
        """
        ...

    @property
    def ScaleType(self) -> XlScaleType:
        """
        Get: ScaleType(self: IAxis) -> XlScaleType
        Set: ScaleType(self: IAxis) = value
        """
        ...

    @property
    def TickLabelPosition(self) -> XlTickLabelPosition:
        """
        Get: TickLabelPosition(self: IAxis) -> XlTickLabelPosition
        Set: TickLabelPosition(self: IAxis) = value
        """
        ...

    @property
    def TickLabels(self) -> TickLabels:
        """ Get: TickLabels(self: IAxis) -> TickLabels """
        ...

    @property
    def TickLabelSpacing(self) -> int:
        """
        Get: TickLabelSpacing(self: IAxis) -> int
        Set: TickLabelSpacing(self: IAxis) = value
        """
        ...

    @property
    def TickLabelSpacingIsAuto(self) -> bool:
        """
        Get: TickLabelSpacingIsAuto(self: IAxis) -> bool
        Set: TickLabelSpacingIsAuto(self: IAxis) = value
        """
        ...

    @property
    def TickMarkSpacing(self) -> int:
        """
        Get: TickMarkSpacing(self: IAxis) -> int
        Set: TickMarkSpacing(self: IAxis) = value
        """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: IAxis) -> float """
        ...

    @property
    def Type(self) -> XlAxisType:
        """
        Get: Type(self: IAxis) -> XlAxisType
        Set: Type(self: IAxis) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: IAxis) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: IAxis) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IAxis) -> object """
        ...


class IAxisTitle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IAxisTitle) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IAxisTitle) -> object
        Set: AutoScaleFont(self: IAxisTitle) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IAxisTitle) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IAxisTitle) -> str
        Set: Caption(self: IAxisTitle) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IAxisTitle) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IAxisTitle) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IAxisTitle) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IAxisTitle) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IAxisTitle) -> str
        Set: Formula(self: IAxisTitle) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: IAxisTitle) -> str
        Set: FormulaLocal(self: IAxisTitle) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: IAxisTitle) -> str
        Set: FormulaR1C1(self: IAxisTitle) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: IAxisTitle) -> str
        Set: FormulaR1C1Local(self: IAxisTitle) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: IAxisTitle) -> float """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IAxisTitle) -> object
        Set: HorizontalAlignment(self: IAxisTitle) = value
        """
        ...

    @property
    def IncludeInLayout(self) -> bool:
        """
        Get: IncludeInLayout(self: IAxisTitle) -> bool
        Set: IncludeInLayout(self: IAxisTitle) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IAxisTitle) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IAxisTitle) -> float
        Set: Left(self: IAxisTitle) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IAxisTitle) -> str """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IAxisTitle) -> object
        Set: Orientation(self: IAxisTitle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IAxisTitle) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: IAxisTitle) -> XlChartElementPosition
        Set: Position(self: IAxisTitle) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IAxisTitle) -> int
        Set: ReadingOrder(self: IAxisTitle) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IAxisTitle) -> bool
        Set: Shadow(self: IAxisTitle) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IAxisTitle) -> str
        Set: Text(self: IAxisTitle) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IAxisTitle) -> float
        Set: Top(self: IAxisTitle) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IAxisTitle) -> object
        Set: VerticalAlignment(self: IAxisTitle) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: IAxisTitle) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: IAxisTitle) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IAxisTitle) -> object """
        ...


class IBorder: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IBorder) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: IBorder) -> object
        Set: Color(self: IBorder) = value
        """
        ...

    @property
    def ColorIndex(self) -> object:
        """
        Get: ColorIndex(self: IBorder) -> object
        Set: ColorIndex(self: IBorder) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IBorder) -> XlCreator """
        ...

    @property
    def LineStyle(self) -> object:
        """
        Get: LineStyle(self: IBorder) -> object
        Set: LineStyle(self: IBorder) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IBorder) -> object """
        ...

    @property
    def ThemeColor(self) -> object:
        """
        Get: ThemeColor(self: IBorder) -> object
        Set: ThemeColor(self: IBorder) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: IBorder) -> object
        Set: TintAndShade(self: IBorder) = value
        """
        ...

    @property
    def Weight(self) -> object:
        """
        Get: Weight(self: IBorder) -> object
        Set: Weight(self: IBorder) = value
        """
        ...



class IBorders(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IBorders) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: IBorders) -> object
        Set: Color(self: IBorders) = value
        """
        ...

    @property
    def ColorIndex(self) -> object:
        """
        Get: ColorIndex(self: IBorders) -> object
        Set: ColorIndex(self: IBorders) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IBorders) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IBorders) -> XlCreator """
        ...

    @property
    def LineStyle(self) -> object:
        """
        Get: LineStyle(self: IBorders) -> object
        Set: LineStyle(self: IBorders) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IBorders) -> object """
        ...

    @property
    def ThemeColor(self) -> object:
        """
        Get: ThemeColor(self: IBorders) -> object
        Set: ThemeColor(self: IBorders) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: IBorders) -> object
        Set: TintAndShade(self: IBorders) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: IBorders) -> object
        Set: Value(self: IBorders) = value
        """
        ...

    @property
    def Weight(self) -> object:
        """
        Get: Weight(self: IBorders) -> object
        Set: Weight(self: IBorders) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IButton: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: IButton) -> object
        Set: Accelerator(self: IButton) = value
        """
        ...

    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IButton) -> bool
        Set: AddIndent(self: IButton) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IButton) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IButton) -> object
        Set: AutoScaleFont(self: IButton) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IButton) -> bool
        Set: AutoSize(self: IButton) = value
        """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IButton) -> Range """
        ...

    @property
    def CancelButton(self) -> bool:
        """
        Get: CancelButton(self: IButton) -> bool
        Set: CancelButton(self: IButton) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IButton) -> str
        Set: Caption(self: IButton) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IButton) -> XlCreator """
        ...

    @property
    def DefaultButton(self) -> bool:
        """
        Get: DefaultButton(self: IButton) -> bool
        Set: DefaultButton(self: IButton) = value
        """
        ...

    @property
    def DismissButton(self) -> bool:
        """
        Get: DismissButton(self: IButton) -> bool
        Set: DismissButton(self: IButton) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IButton) -> bool
        Set: Enabled(self: IButton) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IButton) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IButton) -> str
        Set: Formula(self: IButton) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IButton) -> float
        Set: Height(self: IButton) = value
        """
        ...

    @property
    def HelpButton(self) -> bool:
        """
        Get: HelpButton(self: IButton) -> bool
        Set: HelpButton(self: IButton) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IButton) -> object
        Set: HorizontalAlignment(self: IButton) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IButton) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IButton) -> float
        Set: Left(self: IButton) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IButton) -> bool
        Set: Locked(self: IButton) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IButton) -> bool
        Set: LockedText(self: IButton) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IButton) -> str
        Set: Name(self: IButton) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IButton) -> str
        Set: OnAction(self: IButton) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IButton) -> object
        Set: Orientation(self: IButton) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IButton) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: IButton) -> object
        Set: PhoneticAccelerator(self: IButton) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IButton) -> object
        Set: Placement(self: IButton) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IButton) -> bool
        Set: PrintObject(self: IButton) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IButton) -> int
        Set: ReadingOrder(self: IButton) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IButton) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IButton) -> str
        Set: Text(self: IButton) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IButton) -> float
        Set: Top(self: IButton) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IButton) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IButton) -> object
        Set: VerticalAlignment(self: IButton) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IButton) -> bool
        Set: Visible(self: IButton) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IButton) -> float
        Set: Width(self: IButton) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IButton) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: IButton) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IButton, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IButton) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IButton, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IButton) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IButton) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IButton) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IButton, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IButton) -> object """
        ...


class IButtons(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: IButtons) -> object
        Set: Accelerator(self: IButtons) = value
        """
        ...

    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IButtons) -> bool
        Set: AddIndent(self: IButtons) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IButtons) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IButtons) -> object
        Set: AutoScaleFont(self: IButtons) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IButtons) -> bool
        Set: AutoSize(self: IButtons) = value
        """
        ...

    @property
    def CancelButton(self) -> bool:
        """
        Get: CancelButton(self: IButtons) -> bool
        Set: CancelButton(self: IButtons) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IButtons) -> str
        Set: Caption(self: IButtons) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IButtons) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IButtons) -> XlCreator """
        ...

    @property
    def DefaultButton(self) -> bool:
        """
        Get: DefaultButton(self: IButtons) -> bool
        Set: DefaultButton(self: IButtons) = value
        """
        ...

    @property
    def DismissButton(self) -> bool:
        """
        Get: DismissButton(self: IButtons) -> bool
        Set: DismissButton(self: IButtons) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IButtons) -> bool
        Set: Enabled(self: IButtons) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IButtons) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IButtons) -> str
        Set: Formula(self: IButtons) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IButtons) -> float
        Set: Height(self: IButtons) = value
        """
        ...

    @property
    def HelpButton(self) -> bool:
        """
        Get: HelpButton(self: IButtons) -> bool
        Set: HelpButton(self: IButtons) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IButtons) -> object
        Set: HorizontalAlignment(self: IButtons) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IButtons) -> float
        Set: Left(self: IButtons) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IButtons) -> bool
        Set: Locked(self: IButtons) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IButtons) -> bool
        Set: LockedText(self: IButtons) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IButtons) -> str
        Set: OnAction(self: IButtons) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IButtons) -> object
        Set: Orientation(self: IButtons) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IButtons) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: IButtons) -> object
        Set: PhoneticAccelerator(self: IButtons) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IButtons) -> object
        Set: Placement(self: IButtons) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IButtons) -> bool
        Set: PrintObject(self: IButtons) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IButtons) -> int
        Set: ReadingOrder(self: IButtons) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IButtons) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IButtons) -> str
        Set: Text(self: IButtons) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IButtons) -> float
        Set: Top(self: IButtons) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IButtons) -> object
        Set: VerticalAlignment(self: IButtons) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IButtons) -> bool
        Set: Visible(self: IButtons) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IButtons) -> float
        Set: Width(self: IButtons) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IButtons) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Button:
        """ Add(self: IButtons, Left: float, Top: float, Width: float, Height: float) -> Button """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IButtons) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IButtons, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IButtons) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IButtons, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IButtons) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IButtons) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IButtons) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IButtons) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IButtons, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IButtons, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IButtons) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IButtons) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IButtons) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IButtons) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IButtons) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class ICalculatedFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICalculatedFields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ICalculatedFields) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICalculatedFields) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICalculatedFields) -> object """
        ...


    def Add(self, Name:str, Formula:str, UseStandardFormula:object) -> PivotField:
        """ Add(self: ICalculatedFields, Name: str, Formula: str, UseStandardFormula: object) -> PivotField """
        ...

    def Item(self, Index:object) -> PivotField:
        """ Item(self: ICalculatedFields, Index: object) -> PivotField """
        ...

    def _Add(self, Name:str, Formula:str) -> PivotField:
        """ _Add(self: ICalculatedFields, Name: str, Formula: str) -> PivotField """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ICalculatedItems(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICalculatedItems) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ICalculatedItems) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICalculatedItems) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICalculatedItems) -> object """
        ...


    def Add(self, Name:str, Formula:str, UseStandardFormula:object) -> PivotItem:
        """ Add(self: ICalculatedItems, Name: str, Formula: str, UseStandardFormula: object) -> PivotItem """
        ...

    def Item(self, Index:object) -> PivotItem:
        """ Item(self: ICalculatedItems, Index: object) -> PivotItem """
        ...

    def _Add(self, Name:str, Formula:str) -> PivotItem:
        """ _Add(self: ICalculatedItems, Name: str, Formula: str) -> PivotItem """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ICalculatedMember: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICalculatedMember) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICalculatedMember) -> XlCreator """
        ...

    @property
    def DisplayFolder(self) -> str:
        """ Get: DisplayFolder(self: ICalculatedMember) -> str """
        ...

    @property
    def Dynamic(self) -> bool:
        """ Get: Dynamic(self: ICalculatedMember) -> bool """
        ...

    @property
    def FlattenHierarchies(self) -> bool:
        """
        Get: FlattenHierarchies(self: ICalculatedMember) -> bool
        Set: FlattenHierarchies(self: ICalculatedMember) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """ Get: Formula(self: ICalculatedMember) -> str """
        ...

    @property
    def HierarchizeDistinct(self) -> bool:
        """
        Get: HierarchizeDistinct(self: ICalculatedMember) -> bool
        Set: HierarchizeDistinct(self: ICalculatedMember) = value
        """
        ...

    @property
    def IsValid(self) -> bool:
        """ Get: IsValid(self: ICalculatedMember) -> bool """
        ...

    @property
    def MeasureGroup(self) -> str:
        """ Get: MeasureGroup(self: ICalculatedMember) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ICalculatedMember) -> str """
        ...

    @property
    def NumberFormat(self) -> XlCalcMemNumberFormatType:
        """ Get: NumberFormat(self: ICalculatedMember) -> XlCalcMemNumberFormatType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICalculatedMember) -> object """
        ...

    @property
    def ParentHierarchy(self) -> str:
        """ Get: ParentHierarchy(self: ICalculatedMember) -> str """
        ...

    @property
    def ParentMember(self) -> str:
        """ Get: ParentMember(self: ICalculatedMember) -> str """
        ...

    @property
    def SolveOrder(self) -> int:
        """ Get: SolveOrder(self: ICalculatedMember) -> int """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: ICalculatedMember) -> str """
        ...

    @property
    def Type(self) -> XlCalculatedMemberType:
        """ Get: Type(self: ICalculatedMember) -> XlCalculatedMemberType """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: ICalculatedMember) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: ICalculatedMember) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ICalculatedMembers(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICalculatedMembers) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ICalculatedMembers) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICalculatedMembers) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICalculatedMembers) -> object """
        ...


    def Add(self, Name:str, Formula:str, SolveOrder:object, Type:object) -> CalculatedMember:
        """ Add(self: ICalculatedMembers, Name: str, Formula: str, SolveOrder: object, Type: object) -> CalculatedMember """
        ...

    def Add2(self, Name:str, Formula:object, SolveOrder:object, Type:object, Dynamic:object, DisplayFolder:object, HierarchizeDistinct:object) -> CalculatedMember:
        """ Add2(self: ICalculatedMembers, Name: str, Formula: object, SolveOrder: object, Type: object, Dynamic: object, DisplayFolder: object, HierarchizeDistinct: object) -> CalculatedMember """
        ...

    def AddCalculatedMember(self, Name:str, Formula:object, SolveOrder:object, Type:object, DisplayFolder:object, MeasureGroup:object, ParentHierarchy:object, ParentMember:object, NumberFormat:object) -> CalculatedMember:
        """ AddCalculatedMember(self: ICalculatedMembers, Name: str, Formula: object, SolveOrder: object, Type: object, DisplayFolder: object, MeasureGroup: object, ParentHierarchy: object, ParentMember: object, NumberFormat: object) -> CalculatedMember """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ICanvasShapes: # skipped bases: <type 'object'>
    """ no doc """
    pass

class ICategoryCollection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICategoryCollection) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ICategoryCollection) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICategoryCollection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICategoryCollection) -> object """
        ...


    def Item(self, Index:object) -> ChartCategory:
        """ Item(self: ICategoryCollection, Index: object) -> ChartCategory """
        ...

    def _Default(self, Index:object) -> ChartCategory:
        """ _Default(self: ICategoryCollection, Index: object) -> ChartCategory """
        ...


class ICellFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> object:
        """
        Get: AddIndent(self: ICellFormat) -> object
        Set: AddIndent(self: ICellFormat) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICellFormat) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: ICellFormat) -> Borders
        Set: Borders(self: ICellFormat) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICellFormat) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: ICellFormat) -> Font
        Set: Font(self: ICellFormat) = value
        """
        ...

    @property
    def FormulaHidden(self) -> object:
        """
        Get: FormulaHidden(self: ICellFormat) -> object
        Set: FormulaHidden(self: ICellFormat) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: ICellFormat) -> object
        Set: HorizontalAlignment(self: ICellFormat) = value
        """
        ...

    @property
    def IndentLevel(self) -> object:
        """
        Get: IndentLevel(self: ICellFormat) -> object
        Set: IndentLevel(self: ICellFormat) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """
        Get: Interior(self: ICellFormat) -> Interior
        Set: Interior(self: ICellFormat) = value
        """
        ...

    @property
    def Locked(self) -> object:
        """
        Get: Locked(self: ICellFormat) -> object
        Set: Locked(self: ICellFormat) = value
        """
        ...

    @property
    def MergeCells(self) -> object:
        """
        Get: MergeCells(self: ICellFormat) -> object
        Set: MergeCells(self: ICellFormat) = value
        """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: ICellFormat) -> object
        Set: NumberFormat(self: ICellFormat) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: ICellFormat) -> object
        Set: NumberFormatLocal(self: ICellFormat) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: ICellFormat) -> object
        Set: Orientation(self: ICellFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICellFormat) -> object """
        ...

    @property
    def ShrinkToFit(self) -> object:
        """
        Get: ShrinkToFit(self: ICellFormat) -> object
        Set: ShrinkToFit(self: ICellFormat) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: ICellFormat) -> object
        Set: VerticalAlignment(self: ICellFormat) = value
        """
        ...

    @property
    def WrapText(self) -> object:
        """
        Get: WrapText(self: ICellFormat) -> object
        Set: WrapText(self: ICellFormat) = value
        """
        ...


    def Clear(self): # -> 
        """ Clear(self: ICellFormat) """
        ...


class ICharacters: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICharacters) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ICharacters) -> str
        Set: Caption(self: ICharacters) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ICharacters) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICharacters) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: ICharacters) -> Font """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICharacters) -> object """
        ...

    @property
    def PhoneticCharacters(self) -> str:
        """
        Get: PhoneticCharacters(self: ICharacters) -> str
        Set: PhoneticCharacters(self: ICharacters) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ICharacters) -> str
        Set: Text(self: ICharacters) = value
        """
        ...


    def Delete(self) -> object:
        """ Delete(self: ICharacters) -> object """
        ...

    def Insert(self, String:str) -> object:
        """ Insert(self: ICharacters, String: str) -> object """
        ...


class IChartArea: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IChartArea) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IChartArea) -> object
        Set: AutoScaleFont(self: IChartArea) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IChartArea) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IChartArea) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IChartArea) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IChartArea) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IChartArea) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IChartArea) -> float
        Set: Height(self: IChartArea) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IChartArea) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IChartArea) -> float
        Set: Left(self: IChartArea) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IChartArea) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IChartArea) -> object """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: IChartArea) -> bool
        Set: RoundedCorners(self: IChartArea) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IChartArea) -> bool
        Set: Shadow(self: IChartArea) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IChartArea) -> float
        Set: Top(self: IChartArea) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IChartArea) -> float
        Set: Width(self: IChartArea) = value
        """
        ...


    def Clear(self) -> object:
        """ Clear(self: IChartArea) -> object """
        ...

    def ClearContents(self) -> object:
        """ ClearContents(self: IChartArea) -> object """
        ...

    def ClearFormats(self) -> object:
        """ ClearFormats(self: IChartArea) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IChartArea) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IChartArea) -> object """
        ...


class IChartCategory: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IChartCategory) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IChartCategory) -> XlCreator """
        ...

    @property
    def IsFiltered(self) -> bool:
        """
        Get: IsFiltered(self: IChartCategory) -> bool
        Set: IsFiltered(self: IChartCategory) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IChartCategory) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IChartCategory) -> object """
        ...



class IChartColorFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IChartColorFormat) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IChartColorFormat) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IChartColorFormat) -> object """
        ...

    @property
    def RGB(self) -> int:
        """ Get: RGB(self: IChartColorFormat) -> int """
        ...

    @property
    def SchemeColor(self) -> int:
        """
        Get: SchemeColor(self: IChartColorFormat) -> int
        Set: SchemeColor(self: IChartColorFormat) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: IChartColorFormat) -> int """
        ...

    @property
    def _Default(self) -> int:
        """ Get: _Default(self: IChartColorFormat) -> int """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IChartEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Activate(self): # -> 
        """ Activate(self: IChartEvents) """
        ...

    def BeforeDoubleClick(self, ElementID, Arg1, Arg2, Cancel) -> bool:
        """ BeforeDoubleClick(self: IChartEvents, ElementID: int, Arg1: int, Arg2: int) -> bool """
        ...

    def BeforeRightClick(self, Cancel) -> bool:
        """ BeforeRightClick(self: IChartEvents) -> bool """
        ...

    def Calculate(self): # -> 
        """ Calculate(self: IChartEvents) """
        ...

    def Deactivate(self): # -> 
        """ Deactivate(self: IChartEvents) """
        ...

    def DragOver(self): # -> 
        """ DragOver(self: IChartEvents) """
        ...

    def DragPlot(self): # -> 
        """ DragPlot(self: IChartEvents) """
        ...

    def MouseDown(self, Button:int, Shift:int, x:int, y:int): # -> 
        """ MouseDown(self: IChartEvents, Button: int, Shift: int, x: int, y: int) """
        ...

    def MouseMove(self, Button:int, Shift:int, x:int, y:int): # -> 
        """ MouseMove(self: IChartEvents, Button: int, Shift: int, x: int, y: int) """
        ...

    def MouseUp(self, Button:int, Shift:int, x:int, y:int): # -> 
        """ MouseUp(self: IChartEvents, Button: int, Shift: int, x: int, y: int) """
        ...

    def Resize(self): # -> 
        """ Resize(self: IChartEvents) """
        ...

    def Select(self, ElementID:int, Arg1:int, Arg2:int): # -> 
        """ Select(self: IChartEvents, ElementID: int, Arg1: int, Arg2: int) """
        ...

    def SeriesChange(self, SeriesIndex:int, PointIndex:int): # -> 
        """ SeriesChange(self: IChartEvents, SeriesIndex: int, PointIndex: int) """
        ...


class IChartFillFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IChartFillFormat) -> Application """
        ...

    @property
    def BackColor(self) -> ChartColorFormat:
        """ Get: BackColor(self: IChartFillFormat) -> ChartColorFormat """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IChartFillFormat) -> XlCreator """
        ...

    @property
    def ForeColor(self) -> ChartColorFormat:
        """ Get: ForeColor(self: IChartFillFormat) -> ChartColorFormat """
        ...

    @property
    def GradientColorType(self): # -> MsoGradientColorType
        """ Get: GradientColorType(self: IChartFillFormat) -> MsoGradientColorType """
        ...

    @property
    def GradientDegree(self) -> Single:
        """ Get: GradientDegree(self: IChartFillFormat) -> Single """
        ...

    @property
    def GradientStyle(self): # -> MsoGradientStyle
        """ Get: GradientStyle(self: IChartFillFormat) -> MsoGradientStyle """
        ...

    @property
    def GradientVariant(self) -> int:
        """ Get: GradientVariant(self: IChartFillFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IChartFillFormat) -> object """
        ...

    @property
    def Pattern(self): # -> MsoPatternType
        """ Get: Pattern(self: IChartFillFormat) -> MsoPatternType """
        ...

    @property
    def PresetGradientType(self): # -> MsoPresetGradientType
        """ Get: PresetGradientType(self: IChartFillFormat) -> MsoPresetGradientType """
        ...

    @property
    def PresetTexture(self): # -> MsoPresetTexture
        """ Get: PresetTexture(self: IChartFillFormat) -> MsoPresetTexture """
        ...

    @property
    def TextureName(self) -> str:
        """ Get: TextureName(self: IChartFillFormat) -> str """
        ...

    @property
    def TextureType(self): # -> MsoTextureType
        """ Get: TextureType(self: IChartFillFormat) -> MsoTextureType """
        ...

    @property
    def Type(self): # -> MsoFillType
        """ Get: Type(self: IChartFillFormat) -> MsoFillType """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: IChartFillFormat) -> MsoTriState
        Set: Visible(self: IChartFillFormat) = value
        """
        ...


    def OneColorGradient(self, Style, Variant:int, Degree:Single): # ->  # Not found arg types: {'Style': 'MsoGradientStyle'}
        """ OneColorGradient(self: IChartFillFormat, Style: MsoGradientStyle, Variant: int, Degree: Single) """
        ...

    def Patterned(self, Pattern): # ->  # Not found arg types: {'Pattern': 'MsoPatternType'}
        """ Patterned(self: IChartFillFormat, Pattern: MsoPatternType) """
        ...

    def PresetGradient(self, Style, Variant:int, PresetGradientType): # ->  # Not found arg types: {'Style': 'MsoGradientStyle', 'PresetGradientType': 'MsoPresetGradientType'}
        """ PresetGradient(self: IChartFillFormat, Style: MsoGradientStyle, Variant: int, PresetGradientType: MsoPresetGradientType) """
        ...

    def PresetTextured(self, PresetTexture): # ->  # Not found arg types: {'PresetTexture': 'MsoPresetTexture'}
        """ PresetTextured(self: IChartFillFormat, PresetTexture: MsoPresetTexture) """
        ...

    def Solid(self): # -> 
        """ Solid(self: IChartFillFormat) """
        ...

    def TwoColorGradient(self, Style, Variant:int): # ->  # Not found arg types: {'Style': 'MsoGradientStyle'}
        """ TwoColorGradient(self: IChartFillFormat, Style: MsoGradientStyle, Variant: int) """
        ...

    def UserPicture(self, PictureFile:object, PictureFormat:object, PictureStackUnit:object, PicturePlacement:object): # -> 
        """ UserPicture(self: IChartFillFormat, PictureFile: object, PictureFormat: object, PictureStackUnit: object, PicturePlacement: object) """
        ...

    def UserTextured(self, TextureFile:str): # -> 
        """ UserTextured(self: IChartFillFormat, TextureFile: str) """
        ...


class IChartFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Adjustments(self) -> Adjustments:
        """ Get: Adjustments(self: IChartFormat) -> Adjustments """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IChartFormat) -> Application """
        ...

    @property
    def AutoShapeType(self): # -> MsoAutoShapeType
        """
        Get: AutoShapeType(self: IChartFormat) -> MsoAutoShapeType
        Set: AutoShapeType(self: IChartFormat) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IChartFormat) -> XlCreator """
        ...

    @property
    def Fill(self) -> FillFormat:
        """ Get: Fill(self: IChartFormat) -> FillFormat """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """ Get: Glow(self: IChartFormat) -> GlowFormat """
        ...

    @property
    def Line(self) -> LineFormat:
        """ Get: Line(self: IChartFormat) -> LineFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IChartFormat) -> object """
        ...

    @property
    def PictureFormat(self) -> PictureFormat:
        """ Get: PictureFormat(self: IChartFormat) -> PictureFormat """
        ...

    @property
    def Shadow(self) -> ShadowFormat:
        """ Get: Shadow(self: IChartFormat) -> ShadowFormat """
        ...

    @property
    def SoftEdge(self) -> SoftEdgeFormat:
        """ Get: SoftEdge(self: IChartFormat) -> SoftEdgeFormat """
        ...

    @property
    def TextFrame2(self) -> TextFrame2:
        """ Get: TextFrame2(self: IChartFormat) -> TextFrame2 """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """ Get: ThreeD(self: IChartFormat) -> ThreeDFormat """
        ...



class IChartGroup: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IChartGroup) -> Application """
        ...

    @property
    def AxisGroup(self) -> XlAxisGroup:
        """
        Get: AxisGroup(self: IChartGroup) -> XlAxisGroup
        Set: AxisGroup(self: IChartGroup) = value
        """
        ...

    @property
    def BubbleScale(self) -> int:
        """
        Get: BubbleScale(self: IChartGroup) -> int
        Set: BubbleScale(self: IChartGroup) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IChartGroup) -> XlCreator """
        ...

    @property
    def DoughnutHoleSize(self) -> int:
        """
        Get: DoughnutHoleSize(self: IChartGroup) -> int
        Set: DoughnutHoleSize(self: IChartGroup) = value
        """
        ...

    @property
    def DownBars(self) -> DownBars:
        """ Get: DownBars(self: IChartGroup) -> DownBars """
        ...

    @property
    def DropLines(self) -> DropLines:
        """ Get: DropLines(self: IChartGroup) -> DropLines """
        ...

    @property
    def FirstSliceAngle(self) -> int:
        """
        Get: FirstSliceAngle(self: IChartGroup) -> int
        Set: FirstSliceAngle(self: IChartGroup) = value
        """
        ...

    @property
    def GapWidth(self) -> int:
        """
        Get: GapWidth(self: IChartGroup) -> int
        Set: GapWidth(self: IChartGroup) = value
        """
        ...

    @property
    def Has3DShading(self) -> bool:
        """
        Get: Has3DShading(self: IChartGroup) -> bool
        Set: Has3DShading(self: IChartGroup) = value
        """
        ...

    @property
    def HasDropLines(self) -> bool:
        """
        Get: HasDropLines(self: IChartGroup) -> bool
        Set: HasDropLines(self: IChartGroup) = value
        """
        ...

    @property
    def HasHiLoLines(self) -> bool:
        """
        Get: HasHiLoLines(self: IChartGroup) -> bool
        Set: HasHiLoLines(self: IChartGroup) = value
        """
        ...

    @property
    def HasRadarAxisLabels(self) -> bool:
        """
        Get: HasRadarAxisLabels(self: IChartGroup) -> bool
        Set: HasRadarAxisLabels(self: IChartGroup) = value
        """
        ...

    @property
    def HasSeriesLines(self) -> bool:
        """
        Get: HasSeriesLines(self: IChartGroup) -> bool
        Set: HasSeriesLines(self: IChartGroup) = value
        """
        ...

    @property
    def HasUpDownBars(self) -> bool:
        """
        Get: HasUpDownBars(self: IChartGroup) -> bool
        Set: HasUpDownBars(self: IChartGroup) = value
        """
        ...

    @property
    def HiLoLines(self) -> HiLoLines:
        """ Get: HiLoLines(self: IChartGroup) -> HiLoLines """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IChartGroup) -> int """
        ...

    @property
    def Overlap(self) -> int:
        """
        Get: Overlap(self: IChartGroup) -> int
        Set: Overlap(self: IChartGroup) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IChartGroup) -> object """
        ...

    @property
    def RadarAxisLabels(self) -> TickLabels:
        """ Get: RadarAxisLabels(self: IChartGroup) -> TickLabels """
        ...

    @property
    def SecondPlotSize(self) -> int:
        """
        Get: SecondPlotSize(self: IChartGroup) -> int
        Set: SecondPlotSize(self: IChartGroup) = value
        """
        ...

    @property
    def SeriesLines(self) -> SeriesLines:
        """ Get: SeriesLines(self: IChartGroup) -> SeriesLines """
        ...

    @property
    def ShowNegativeBubbles(self) -> bool:
        """
        Get: ShowNegativeBubbles(self: IChartGroup) -> bool
        Set: ShowNegativeBubbles(self: IChartGroup) = value
        """
        ...

    @property
    def SizeRepresents(self) -> XlSizeRepresents:
        """
        Get: SizeRepresents(self: IChartGroup) -> XlSizeRepresents
        Set: SizeRepresents(self: IChartGroup) = value
        """
        ...

    @property
    def SplitType(self) -> XlChartSplitType:
        """
        Get: SplitType(self: IChartGroup) -> XlChartSplitType
        Set: SplitType(self: IChartGroup) = value
        """
        ...

    @property
    def SplitValue(self) -> object:
        """
        Get: SplitValue(self: IChartGroup) -> object
        Set: SplitValue(self: IChartGroup) = value
        """
        ...

    @property
    def SubType(self) -> int:
        """
        Get: SubType(self: IChartGroup) -> int
        Set: SubType(self: IChartGroup) = value
        """
        ...

    @property
    def Type(self) -> int:
        """
        Get: Type(self: IChartGroup) -> int
        Set: Type(self: IChartGroup) = value
        """
        ...

    @property
    def UpBars(self) -> UpBars:
        """ Get: UpBars(self: IChartGroup) -> UpBars """
        ...

    @property
    def VaryByCategories(self) -> bool:
        """
        Get: VaryByCategories(self: IChartGroup) -> bool
        Set: VaryByCategories(self: IChartGroup) = value
        """
        ...


    def CategoryCollection(self, Index:object) -> object:
        """ CategoryCollection(self: IChartGroup, Index: object) -> object """
        ...

    def FullCategoryCollection(self, Index:object) -> object:
        """ FullCategoryCollection(self: IChartGroup, Index: object) -> object """
        ...

    def SeriesCollection(self, Index:object) -> object:
        """ SeriesCollection(self: IChartGroup, Index: object) -> object """
        ...


class IChartGroups(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IChartGroups) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IChartGroups) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IChartGroups) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IChartGroups) -> object """
        ...


    def Item(self, Index:object) -> ChartGroup:
        """ Item(self: IChartGroups, Index: object) -> ChartGroup """
        ...


class IChartObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IChartObject) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IChartObject) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IChartObject) -> Range """
        ...

    @property
    def Chart(self) -> Chart:
        """ Get: Chart(self: IChartObject) -> Chart """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IChartObject) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IChartObject) -> bool
        Set: Enabled(self: IChartObject) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IChartObject) -> float
        Set: Height(self: IChartObject) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IChartObject) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IChartObject) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IChartObject) -> float
        Set: Left(self: IChartObject) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IChartObject) -> bool
        Set: Locked(self: IChartObject) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IChartObject) -> str
        Set: Name(self: IChartObject) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IChartObject) -> str
        Set: OnAction(self: IChartObject) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IChartObject) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IChartObject) -> object
        Set: Placement(self: IChartObject) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IChartObject) -> bool
        Set: PrintObject(self: IChartObject) = value
        """
        ...

    @property
    def ProtectChartObject(self) -> bool:
        """
        Get: ProtectChartObject(self: IChartObject) -> bool
        Set: ProtectChartObject(self: IChartObject) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: IChartObject) -> bool
        Set: RoundedCorners(self: IChartObject) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IChartObject) -> bool
        Set: Shadow(self: IChartObject) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IChartObject) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IChartObject) -> float
        Set: Top(self: IChartObject) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IChartObject) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IChartObject) -> bool
        Set: Visible(self: IChartObject) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IChartObject) -> float
        Set: Width(self: IChartObject) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IChartObject) -> int """
        ...


    def Activate(self) -> object:
        """ Activate(self: IChartObject) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IChartObject) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IChartObject) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IChartObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IChartObject) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IChartObject) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IChartObject) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IChartObject, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IChartObject) -> object """
        ...

    def _Copy(self) -> object:
        """ _Copy(self: IChartObject) -> object """
        ...


class IChartObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IChartObjects) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IChartObjects) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IChartObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IChartObjects) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IChartObjects) -> bool
        Set: Enabled(self: IChartObjects) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IChartObjects) -> float
        Set: Height(self: IChartObjects) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IChartObjects) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IChartObjects) -> float
        Set: Left(self: IChartObjects) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IChartObjects) -> bool
        Set: Locked(self: IChartObjects) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IChartObjects) -> str
        Set: OnAction(self: IChartObjects) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IChartObjects) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IChartObjects) -> object
        Set: Placement(self: IChartObjects) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IChartObjects) -> bool
        Set: PrintObject(self: IChartObjects) = value
        """
        ...

    @property
    def ProtectChartObject(self) -> bool:
        """
        Get: ProtectChartObject(self: IChartObjects) -> bool
        Set: ProtectChartObject(self: IChartObjects) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: IChartObjects) -> bool
        Set: RoundedCorners(self: IChartObjects) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IChartObjects) -> bool
        Set: Shadow(self: IChartObjects) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IChartObjects) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IChartObjects) -> float
        Set: Top(self: IChartObjects) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IChartObjects) -> bool
        Set: Visible(self: IChartObjects) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IChartObjects) -> float
        Set: Width(self: IChartObjects) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> ChartObject:
        """ Add(self: IChartObjects, Left: float, Top: float, Width: float, Height: float) -> ChartObject """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IChartObjects) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IChartObjects) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IChartObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IChartObjects) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IChartObjects) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IChartObjects) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IChartObjects) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IChartObjects, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IChartObjects, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IChartObjects) -> object """
        ...

    def _Copy(self) -> object:
        """ _Copy(self: IChartObjects) -> object """
        ...

    def _Default(self, Index:object) -> object:
        """ _Default(self: IChartObjects, Index: object) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IChartObjects) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IChartObjects) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IChartObjects) """
        ...

    def _Dummy25(self): # -> 
        """ _Dummy25(self: IChartObjects) """
        ...

    def _Dummy27(self): # -> 
        """ _Dummy27(self: IChartObjects) """
        ...

    def _Dummy28(self): # -> 
        """ _Dummy28(self: IChartObjects) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IChartObjects) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class ICharts(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICharts) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ICharts) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICharts) -> XlCreator """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: ICharts) -> HPageBreaks """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICharts) -> object """
        ...

    @property
    def Visible(self) -> object:
        """
        Get: Visible(self: ICharts) -> object
        Set: Visible(self: ICharts) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: ICharts) -> VPageBreaks """
        ...


    def Add(self, Before:object, After:object, Count:object) -> Chart:
        """ Add(self: ICharts, Before: object, After: object, Count: object) -> Chart """
        ...

    def Add2(self, Before:object, After:object, Count:object, NewLayout:object) -> Chart:
        """ Add2(self: ICharts, Before: object, After: object, Count: object, NewLayout: object) -> Chart """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: ICharts, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: ICharts) """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: ICharts, Before: object, After: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: ICharts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOut_2(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut_2(self: ICharts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: ICharts, EnableChanges: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: ICharts, Replace: object) """
        ...

    def _Dummy7(self): # -> 
        """ _Dummy7(self: ICharts) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: ICharts, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IChartTitle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IChartTitle) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IChartTitle) -> object
        Set: AutoScaleFont(self: IChartTitle) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IChartTitle) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IChartTitle) -> str
        Set: Caption(self: IChartTitle) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IChartTitle) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IChartTitle) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IChartTitle) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IChartTitle) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IChartTitle) -> str
        Set: Formula(self: IChartTitle) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: IChartTitle) -> str
        Set: FormulaLocal(self: IChartTitle) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: IChartTitle) -> str
        Set: FormulaR1C1(self: IChartTitle) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: IChartTitle) -> str
        Set: FormulaR1C1Local(self: IChartTitle) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: IChartTitle) -> float """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IChartTitle) -> object
        Set: HorizontalAlignment(self: IChartTitle) = value
        """
        ...

    @property
    def IncludeInLayout(self) -> bool:
        """
        Get: IncludeInLayout(self: IChartTitle) -> bool
        Set: IncludeInLayout(self: IChartTitle) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IChartTitle) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IChartTitle) -> float
        Set: Left(self: IChartTitle) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IChartTitle) -> str """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IChartTitle) -> object
        Set: Orientation(self: IChartTitle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IChartTitle) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: IChartTitle) -> XlChartElementPosition
        Set: Position(self: IChartTitle) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IChartTitle) -> int
        Set: ReadingOrder(self: IChartTitle) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IChartTitle) -> bool
        Set: Shadow(self: IChartTitle) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IChartTitle) -> str
        Set: Text(self: IChartTitle) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IChartTitle) -> float
        Set: Top(self: IChartTitle) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IChartTitle) -> object
        Set: VerticalAlignment(self: IChartTitle) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: IChartTitle) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: IChartTitle) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IChartTitle) -> object """
        ...


class IChartView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IChartView) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IChartView) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IChartView) -> object """
        ...

    @property
    def Sheet(self) -> object:
        """ Get: Sheet(self: IChartView) -> object """
        ...



class ICheckBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: ICheckBox) -> object
        Set: Accelerator(self: ICheckBox) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICheckBox) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ICheckBox) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: ICheckBox) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ICheckBox) -> str
        Set: Caption(self: ICheckBox) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICheckBox) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: ICheckBox) -> bool
        Set: Display3DShading(self: ICheckBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ICheckBox) -> bool
        Set: Enabled(self: ICheckBox) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ICheckBox) -> float
        Set: Height(self: ICheckBox) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ICheckBox) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ICheckBox) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ICheckBox) -> float
        Set: Left(self: ICheckBox) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: ICheckBox) -> str
        Set: LinkedCell(self: ICheckBox) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ICheckBox) -> bool
        Set: Locked(self: ICheckBox) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: ICheckBox) -> bool
        Set: LockedText(self: ICheckBox) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ICheckBox) -> str
        Set: Name(self: ICheckBox) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ICheckBox) -> str
        Set: OnAction(self: ICheckBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICheckBox) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: ICheckBox) -> object
        Set: PhoneticAccelerator(self: ICheckBox) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ICheckBox) -> object
        Set: Placement(self: ICheckBox) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ICheckBox) -> bool
        Set: PrintObject(self: ICheckBox) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ICheckBox) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ICheckBox) -> str
        Set: Text(self: ICheckBox) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ICheckBox) -> float
        Set: Top(self: ICheckBox) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: ICheckBox) -> Range """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: ICheckBox) -> object
        Set: Value(self: ICheckBox) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ICheckBox) -> bool
        Set: Visible(self: ICheckBox) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ICheckBox) -> float
        Set: Width(self: ICheckBox) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ICheckBox) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: ICheckBox) -> int
        Set: _Default(self: ICheckBox) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: ICheckBox) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: ICheckBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ICheckBox) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ICheckBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ICheckBox) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ICheckBox) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ICheckBox) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ICheckBox, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ICheckBox) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ICheckBoxes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: ICheckBoxes) -> object
        Set: Accelerator(self: ICheckBoxes) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICheckBoxes) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ICheckBoxes) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ICheckBoxes) -> str
        Set: Caption(self: ICheckBoxes) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ICheckBoxes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICheckBoxes) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: ICheckBoxes) -> bool
        Set: Display3DShading(self: ICheckBoxes) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ICheckBoxes) -> bool
        Set: Enabled(self: ICheckBoxes) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ICheckBoxes) -> float
        Set: Height(self: ICheckBoxes) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ICheckBoxes) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ICheckBoxes) -> float
        Set: Left(self: ICheckBoxes) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: ICheckBoxes) -> str
        Set: LinkedCell(self: ICheckBoxes) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ICheckBoxes) -> bool
        Set: Locked(self: ICheckBoxes) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: ICheckBoxes) -> bool
        Set: LockedText(self: ICheckBoxes) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ICheckBoxes) -> str
        Set: OnAction(self: ICheckBoxes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICheckBoxes) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: ICheckBoxes) -> object
        Set: PhoneticAccelerator(self: ICheckBoxes) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ICheckBoxes) -> object
        Set: Placement(self: ICheckBoxes) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ICheckBoxes) -> bool
        Set: PrintObject(self: ICheckBoxes) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ICheckBoxes) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ICheckBoxes) -> str
        Set: Text(self: ICheckBoxes) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ICheckBoxes) -> float
        Set: Top(self: ICheckBoxes) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: ICheckBoxes) -> object
        Set: Value(self: ICheckBoxes) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ICheckBoxes) -> bool
        Set: Visible(self: ICheckBoxes) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ICheckBoxes) -> float
        Set: Width(self: ICheckBoxes) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ICheckBoxes) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: ICheckBoxes) -> int
        Set: _Default(self: ICheckBoxes) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> CheckBox:
        """ Add(self: ICheckBoxes, Left: float, Top: float, Width: float, Height: float) -> CheckBox """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: ICheckBoxes) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: ICheckBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ICheckBoxes) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ICheckBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ICheckBoxes) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ICheckBoxes) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ICheckBoxes) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: ICheckBoxes) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: ICheckBoxes, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ICheckBoxes, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ICheckBoxes) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: ICheckBoxes) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: ICheckBoxes) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: ICheckBoxes) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: ICheckBoxes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IColorScale: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IColorScale) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: IColorScale) -> Range """
        ...

    @property
    def ColorScaleCriteria(self) -> ColorScaleCriteria:
        """ Get: ColorScaleCriteria(self: IColorScale) -> ColorScaleCriteria """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IColorScale) -> XlCreator """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IColorScale) -> str
        Set: Formula(self: IColorScale) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IColorScale) -> object """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: IColorScale) -> int
        Set: Priority(self: IColorScale) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: IColorScale) -> bool """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: IColorScale) -> XlPivotConditionScope
        Set: ScopeType(self: IColorScale) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """ Get: StopIfTrue(self: IColorScale) -> bool """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: IColorScale) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: IColorScale) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: IColorScale, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: IColorScale) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: IColorScale) """
        ...


class IColorScaleCriteria(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: IColorScaleCriteria) -> int """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IColorScaleCriterion: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def FormatColor(self) -> FormatColor:
        """ Get: FormatColor(self: IColorScaleCriterion) -> FormatColor """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IColorScaleCriterion) -> int """
        ...

    @property
    def Type(self) -> XlConditionValueTypes:
        """
        Get: Type(self: IColorScaleCriterion) -> XlConditionValueTypes
        Set: Type(self: IColorScaleCriterion) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: IColorScaleCriterion) -> object
        Set: Value(self: IColorScaleCriterion) = value
        """
        ...



class IColorStop: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IColorStop) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: IColorStop) -> object
        Set: Color(self: IColorStop) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IColorStop) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IColorStop) -> object """
        ...

    @property
    def Position(self) -> float:
        """
        Get: Position(self: IColorStop) -> float
        Set: Position(self: IColorStop) = value
        """
        ...

    @property
    def ThemeColor(self) -> int:
        """
        Get: ThemeColor(self: IColorStop) -> int
        Set: ThemeColor(self: IColorStop) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: IColorStop) -> object
        Set: TintAndShade(self: IColorStop) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: IColorStop) """
        ...


class IColorStops(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IColorStops) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IColorStops) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IColorStops) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IColorStops) -> object """
        ...


    def Add(self, Position:float) -> ColorStop:
        """ Add(self: IColorStops, Position: float) -> ColorStop """
        ...

    def Clear(self): # -> 
        """ Clear(self: IColorStops) """
        ...

    def Item(self, Index:object) -> ColorStop:
        """ Item(self: IColorStops, Index: object) -> ColorStop """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IComment: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IComment) -> Application """
        ...

    @property
    def Author(self) -> str:
        """ Get: Author(self: IComment) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IComment) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IComment) -> object """
        ...

    @property
    def Shape(self) -> Shape:
        """ Get: Shape(self: IComment) -> Shape """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IComment) -> bool
        Set: Visible(self: IComment) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: IComment) """
        ...

    def Next(self) -> Comment:
        """ Next(self: IComment) -> Comment """
        ...

    def Previous(self) -> Comment:
        """ Previous(self: IComment) -> Comment """
        ...

    def Text(self, Text:object, Start:object, Overwrite:object) -> str:
        """ Text(self: IComment, Text: object, Start: object, Overwrite: object) -> str """
        ...


class IComments(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IComments) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IComments) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IComments) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IComments) -> object """
        ...


    def Item(self, Index:int) -> Comment:
        """ Item(self: IComments, Index: int) -> Comment """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Icon: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Icon) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Icon) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Icon) -> int """
        ...

    @property
    def Parent(self) -> IconSet:
        """ Get: Parent(self: Icon) -> IconSet """
        ...



class IconCriteria(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: IconCriteria) -> int """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IconCriterion: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Icon(self) -> XlIcon:
        """
        Get: Icon(self: IconCriterion) -> XlIcon
        Set: Icon(self: IconCriterion) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IconCriterion) -> int """
        ...

    @property
    def Operator(self) -> int:
        """
        Get: Operator(self: IconCriterion) -> int
        Set: Operator(self: IconCriterion) = value
        """
        ...

    @property
    def Type(self) -> XlConditionValueTypes:
        """
        Get: Type(self: IconCriterion) -> XlConditionValueTypes
        Set: Type(self: IconCriterion) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: IconCriterion) -> object
        Set: Value(self: IconCriterion) = value
        """
        ...



class IConditionValue: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IConditionValue) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IConditionValue) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IConditionValue) -> object """
        ...

    @property
    def Type(self) -> XlConditionValueTypes:
        """ Get: Type(self: IConditionValue) -> XlConditionValueTypes """
        ...

    @property
    def Value(self) -> object:
        """ Get: Value(self: IConditionValue) -> object """
        ...


    def Modify(self, newtype:XlConditionValueTypes, newvalue:object): # -> 
        """ Modify(self: IConditionValue, newtype: XlConditionValueTypes, newvalue: object) """
        ...


class IConnections(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IConnections) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IConnections) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IConnections) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IConnections) -> object """
        ...


    def Add(self, Name:str, Description:str, ConnectionString:object, CommandText:object, lCmdtype:object) -> WorkbookConnection:
        """ Add(self: IConnections, Name: str, Description: str, ConnectionString: object, CommandText: object, lCmdtype: object) -> WorkbookConnection """
        ...

    def Add2(self, Name:str, Description:str, ConnectionString:object, CommandText:object, lCmdtype:object, CreateModelConnection:object, ImportRelationships:object) -> WorkbookConnection:
        """ Add2(self: IConnections, Name: str, Description: str, ConnectionString: object, CommandText: object, lCmdtype: object, CreateModelConnection: object, ImportRelationships: object) -> WorkbookConnection """
        ...

    def AddFromFile(self, Filename:str) -> WorkbookConnection:
        """ AddFromFile(self: IConnections, Filename: str) -> WorkbookConnection """
        ...

    def AddFromFile2(self, Filename:str, CreateModelConnection:object, ImportRelationships:object) -> WorkbookConnection:
        """ AddFromFile2(self: IConnections, Filename: str, CreateModelConnection: object, ImportRelationships: object) -> WorkbookConnection """
        ...

    def Item(self, Index:object) -> WorkbookConnection:
        """ Item(self: IConnections, Index: object) -> WorkbookConnection """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IConnectorFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IConnectorFormat) -> Application """
        ...

    @property
    def BeginConnected(self): # -> MsoTriState
        """ Get: BeginConnected(self: IConnectorFormat) -> MsoTriState """
        ...

    @property
    def BeginConnectedShape(self) -> Shape:
        """ Get: BeginConnectedShape(self: IConnectorFormat) -> Shape """
        ...

    @property
    def BeginConnectionSite(self) -> int:
        """ Get: BeginConnectionSite(self: IConnectorFormat) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IConnectorFormat) -> XlCreator """
        ...

    @property
    def EndConnected(self): # -> MsoTriState
        """ Get: EndConnected(self: IConnectorFormat) -> MsoTriState """
        ...

    @property
    def EndConnectedShape(self) -> Shape:
        """ Get: EndConnectedShape(self: IConnectorFormat) -> Shape """
        ...

    @property
    def EndConnectionSite(self) -> int:
        """ Get: EndConnectionSite(self: IConnectorFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IConnectorFormat) -> object """
        ...

    @property
    def Type(self): # -> MsoConnectorType
        """
        Get: Type(self: IConnectorFormat) -> MsoConnectorType
        Set: Type(self: IConnectorFormat) = value
        """
        ...


    def BeginConnect(self, ConnectedShape:Shape, ConnectionSite:int): # -> 
        """ BeginConnect(self: IConnectorFormat, ConnectedShape: Shape, ConnectionSite: int) """
        ...

    def BeginDisconnect(self): # -> 
        """ BeginDisconnect(self: IConnectorFormat) """
        ...

    def EndConnect(self, ConnectedShape:Shape, ConnectionSite:int): # -> 
        """ EndConnect(self: IConnectorFormat, ConnectedShape: Shape, ConnectionSite: int) """
        ...

    def EndDisconnect(self): # -> 
        """ EndDisconnect(self: IConnectorFormat) """
        ...


class IconSet(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IconSet) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IconSet) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IconSet) -> XlCreator """
        ...

    @property
    def ID(self) -> XlIconSet:
        """ Get: ID(self: IconSet) -> XlIconSet """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IconSet) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IconSetCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IconSetCondition) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: IconSetCondition) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IconSetCondition) -> XlCreator """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IconSetCondition) -> str
        Set: Formula(self: IconSetCondition) = value
        """
        ...

    @property
    def IconCriteria(self) -> IconCriteria:
        """ Get: IconCriteria(self: IconSetCondition) -> IconCriteria """
        ...

    @property
    def IconSet(self) -> object:
        """
        Get: IconSet(self: IconSetCondition) -> object
        Set: IconSet(self: IconSetCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IconSetCondition) -> object """
        ...

    @property
    def PercentileValues(self) -> bool:
        """
        Get: PercentileValues(self: IconSetCondition) -> bool
        Set: PercentileValues(self: IconSetCondition) = value
        """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: IconSetCondition) -> int
        Set: Priority(self: IconSetCondition) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: IconSetCondition) -> bool """
        ...

    @property
    def ReverseOrder(self) -> bool:
        """
        Get: ReverseOrder(self: IconSetCondition) -> bool
        Set: ReverseOrder(self: IconSetCondition) = value
        """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: IconSetCondition) -> XlPivotConditionScope
        Set: ScopeType(self: IconSetCondition) = value
        """
        ...

    @property
    def ShowIconOnly(self) -> bool:
        """
        Get: ShowIconOnly(self: IconSetCondition) -> bool
        Set: ShowIconOnly(self: IconSetCondition) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """ Get: StopIfTrue(self: IconSetCondition) -> bool """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: IconSetCondition) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: IconSetCondition) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: IconSetCondition, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: IconSetCondition) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: IconSetCondition) """
        ...


class IconSets(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IconSets) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IconSets) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IconSets) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IconSets) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IControlFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IControlFormat) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IControlFormat) -> XlCreator """
        ...

    @property
    def DropDownLines(self) -> int:
        """
        Get: DropDownLines(self: IControlFormat) -> int
        Set: DropDownLines(self: IControlFormat) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IControlFormat) -> bool
        Set: Enabled(self: IControlFormat) = value
        """
        ...

    @property
    def LargeChange(self) -> int:
        """
        Get: LargeChange(self: IControlFormat) -> int
        Set: LargeChange(self: IControlFormat) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: IControlFormat) -> str
        Set: LinkedCell(self: IControlFormat) = value
        """
        ...

    @property
    def ListCount(self) -> int:
        """
        Get: ListCount(self: IControlFormat) -> int
        Set: ListCount(self: IControlFormat) = value
        """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: IControlFormat) -> str
        Set: ListFillRange(self: IControlFormat) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: IControlFormat) -> int
        Set: ListIndex(self: IControlFormat) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IControlFormat) -> bool
        Set: LockedText(self: IControlFormat) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: IControlFormat) -> int
        Set: Max(self: IControlFormat) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: IControlFormat) -> int
        Set: Min(self: IControlFormat) = value
        """
        ...

    @property
    def MultiSelect(self) -> int:
        """
        Get: MultiSelect(self: IControlFormat) -> int
        Set: MultiSelect(self: IControlFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IControlFormat) -> object """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IControlFormat) -> bool
        Set: PrintObject(self: IControlFormat) = value
        """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: IControlFormat) -> int
        Set: SmallChange(self: IControlFormat) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: IControlFormat) -> int
        Set: Value(self: IControlFormat) = value
        """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IControlFormat) -> int
        Set: _Default(self: IControlFormat) = value
        """
        ...


    def AddItem(self, Text:str, Index:object): # -> 
        """ AddItem(self: IControlFormat, Text: str, Index: object) """
        ...

    def RemoveAllItems(self): # -> 
        """ RemoveAllItems(self: IControlFormat) """
        ...

    def RemoveItem(self, Index:int, Count:object): # -> 
        """ RemoveItem(self: IControlFormat, Index: int, Count: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ICorners: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICorners) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICorners) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ICorners) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICorners) -> object """
        ...


    def Select(self) -> object:
        """ Select(self: ICorners) -> object """
        ...


class ICustomProperties(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICustomProperties) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ICustomProperties) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICustomProperties) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICustomProperties) -> object """
        ...


    def Add(self, Name:str, Value:object) -> CustomProperty:
        """ Add(self: ICustomProperties, Name: str, Value: object) -> CustomProperty """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ICustomProperty: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICustomProperty) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICustomProperty) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ICustomProperty) -> str
        Set: Name(self: ICustomProperty) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICustomProperty) -> object """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: ICustomProperty) -> object
        Set: Value(self: ICustomProperty) = value
        """
        ...

    @property
    def _Default(self) -> object:
        """ Get: _Default(self: ICustomProperty) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: ICustomProperty) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ICustomView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICustomView) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICustomView) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ICustomView) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICustomView) -> object """
        ...

    @property
    def PrintSettings(self) -> bool:
        """ Get: PrintSettings(self: ICustomView) -> bool """
        ...

    @property
    def RowColSettings(self) -> bool:
        """ Get: RowColSettings(self: ICustomView) -> bool """
        ...


    def Delete(self): # -> 
        """ Delete(self: ICustomView) """
        ...

    def Show(self): # -> 
        """ Show(self: ICustomView) """
        ...


class ICustomViews(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ICustomViews) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ICustomViews) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ICustomViews) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ICustomViews) -> object """
        ...


    def Add(self, ViewName:str, PrintSettings:object, RowColSettings:object) -> CustomView:
        """ Add(self: ICustomViews, ViewName: str, PrintSettings: object, RowColSettings: object) -> CustomView """
        ...

    def Item(self, ViewName:object) -> CustomView:
        """ Item(self: ICustomViews, ViewName: object) -> CustomView """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IDatabar: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDatabar) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: IDatabar) -> Range """
        ...

    @property
    def AxisColor(self) -> object:
        """ Get: AxisColor(self: IDatabar) -> object """
        ...

    @property
    def AxisPosition(self) -> XlDataBarAxisPosition:
        """
        Get: AxisPosition(self: IDatabar) -> XlDataBarAxisPosition
        Set: AxisPosition(self: IDatabar) = value
        """
        ...

    @property
    def BarBorder(self) -> DataBarBorder:
        """ Get: BarBorder(self: IDatabar) -> DataBarBorder """
        ...

    @property
    def BarColor(self) -> object:
        """ Get: BarColor(self: IDatabar) -> object """
        ...

    @property
    def BarFillType(self) -> XlDataBarFillType:
        """
        Get: BarFillType(self: IDatabar) -> XlDataBarFillType
        Set: BarFillType(self: IDatabar) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDatabar) -> XlCreator """
        ...

    @property
    def Direction(self) -> int:
        """
        Get: Direction(self: IDatabar) -> int
        Set: Direction(self: IDatabar) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IDatabar) -> str
        Set: Formula(self: IDatabar) = value
        """
        ...

    @property
    def MaxPoint(self) -> ConditionValue:
        """ Get: MaxPoint(self: IDatabar) -> ConditionValue """
        ...

    @property
    def MinPoint(self) -> ConditionValue:
        """ Get: MinPoint(self: IDatabar) -> ConditionValue """
        ...

    @property
    def NegativeBarFormat(self) -> NegativeBarFormat:
        """ Get: NegativeBarFormat(self: IDatabar) -> NegativeBarFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDatabar) -> object """
        ...

    @property
    def PercentMax(self) -> int:
        """
        Get: PercentMax(self: IDatabar) -> int
        Set: PercentMax(self: IDatabar) = value
        """
        ...

    @property
    def PercentMin(self) -> int:
        """
        Get: PercentMin(self: IDatabar) -> int
        Set: PercentMin(self: IDatabar) = value
        """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: IDatabar) -> int
        Set: Priority(self: IDatabar) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: IDatabar) -> bool """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: IDatabar) -> XlPivotConditionScope
        Set: ScopeType(self: IDatabar) = value
        """
        ...

    @property
    def ShowValue(self) -> bool:
        """
        Get: ShowValue(self: IDatabar) -> bool
        Set: ShowValue(self: IDatabar) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """ Get: StopIfTrue(self: IDatabar) -> bool """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: IDatabar) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: IDatabar) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: IDatabar, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: IDatabar) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: IDatabar) """
        ...


class IDataBarBorder: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDataBarBorder) -> Application """
        ...

    @property
    def Color(self) -> object:
        """ Get: Color(self: IDataBarBorder) -> object """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDataBarBorder) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDataBarBorder) -> object """
        ...

    @property
    def Type(self) -> XlDataBarBorderType:
        """
        Get: Type(self: IDataBarBorder) -> XlDataBarBorderType
        Set: Type(self: IDataBarBorder) = value
        """
        ...



class IDataFeedConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlwaysUseConnectionFile(self) -> bool:
        """
        Get: AlwaysUseConnectionFile(self: IDataFeedConnection) -> bool
        Set: AlwaysUseConnectionFile(self: IDataFeedConnection) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDataFeedConnection) -> Application """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: IDataFeedConnection) -> object
        Set: CommandText(self: IDataFeedConnection) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: IDataFeedConnection) -> XlCmdType
        Set: CommandType(self: IDataFeedConnection) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: IDataFeedConnection) -> object
        Set: Connection(self: IDataFeedConnection) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDataFeedConnection) -> XlCreator """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: IDataFeedConnection) -> bool
        Set: EnableRefresh(self: IDataFeedConnection) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDataFeedConnection) -> object """
        ...

    @property
    def RefreshDate(self) -> DateTime:
        """ Get: RefreshDate(self: IDataFeedConnection) -> DateTime """
        ...

    @property
    def Refreshing(self) -> bool:
        """ Get: Refreshing(self: IDataFeedConnection) -> bool """
        ...

    @property
    def RefreshOnFileOpen(self) -> bool:
        """
        Get: RefreshOnFileOpen(self: IDataFeedConnection) -> bool
        Set: RefreshOnFileOpen(self: IDataFeedConnection) = value
        """
        ...

    @property
    def RefreshPeriod(self) -> int:
        """
        Get: RefreshPeriod(self: IDataFeedConnection) -> int
        Set: RefreshPeriod(self: IDataFeedConnection) = value
        """
        ...

    @property
    def SavePassword(self) -> bool:
        """
        Get: SavePassword(self: IDataFeedConnection) -> bool
        Set: SavePassword(self: IDataFeedConnection) = value
        """
        ...

    @property
    def ServerCredentialsMethod(self) -> XlCredentialsMethod:
        """
        Get: ServerCredentialsMethod(self: IDataFeedConnection) -> XlCredentialsMethod
        Set: ServerCredentialsMethod(self: IDataFeedConnection) = value
        """
        ...

    @property
    def SourceConnectionFile(self) -> str:
        """
        Get: SourceConnectionFile(self: IDataFeedConnection) -> str
        Set: SourceConnectionFile(self: IDataFeedConnection) = value
        """
        ...

    @property
    def SourceDataFile(self) -> str:
        """
        Get: SourceDataFile(self: IDataFeedConnection) -> str
        Set: SourceDataFile(self: IDataFeedConnection) = value
        """
        ...


    def CancelRefresh(self): # -> 
        """ CancelRefresh(self: IDataFeedConnection) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: IDataFeedConnection) """
        ...

    def SaveAsODC(self, ODCFileName:str, Description:object, Keywords:object): # -> 
        """ SaveAsODC(self: IDataFeedConnection, ODCFileName: str, Description: object, Keywords: object) """
        ...


class IDataLabel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDataLabel) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IDataLabel) -> object
        Set: AutoScaleFont(self: IDataLabel) = value
        """
        ...

    @property
    def AutoText(self) -> bool:
        """
        Get: AutoText(self: IDataLabel) -> bool
        Set: AutoText(self: IDataLabel) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IDataLabel) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IDataLabel) -> str
        Set: Caption(self: IDataLabel) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDataLabel) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IDataLabel) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IDataLabel) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IDataLabel) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IDataLabel) -> str
        Set: Formula(self: IDataLabel) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: IDataLabel) -> str
        Set: FormulaLocal(self: IDataLabel) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: IDataLabel) -> str
        Set: FormulaR1C1(self: IDataLabel) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: IDataLabel) -> str
        Set: FormulaR1C1Local(self: IDataLabel) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IDataLabel) -> float
        Set: Height(self: IDataLabel) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IDataLabel) -> object
        Set: HorizontalAlignment(self: IDataLabel) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IDataLabel) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IDataLabel) -> float
        Set: Left(self: IDataLabel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IDataLabel) -> str """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: IDataLabel) -> str
        Set: NumberFormat(self: IDataLabel) = value
        """
        ...

    @property
    def NumberFormatLinked(self) -> bool:
        """
        Get: NumberFormatLinked(self: IDataLabel) -> bool
        Set: NumberFormatLinked(self: IDataLabel) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: IDataLabel) -> object
        Set: NumberFormatLocal(self: IDataLabel) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IDataLabel) -> object
        Set: Orientation(self: IDataLabel) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDataLabel) -> object """
        ...

    @property
    def Position(self) -> XlDataLabelPosition:
        """
        Get: Position(self: IDataLabel) -> XlDataLabelPosition
        Set: Position(self: IDataLabel) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IDataLabel) -> int
        Set: ReadingOrder(self: IDataLabel) = value
        """
        ...

    @property
    def Separator(self) -> object:
        """
        Get: Separator(self: IDataLabel) -> object
        Set: Separator(self: IDataLabel) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IDataLabel) -> bool
        Set: Shadow(self: IDataLabel) = value
        """
        ...

    @property
    def ShowBubbleSize(self) -> bool:
        """
        Get: ShowBubbleSize(self: IDataLabel) -> bool
        Set: ShowBubbleSize(self: IDataLabel) = value
        """
        ...

    @property
    def ShowCategoryName(self) -> bool:
        """
        Get: ShowCategoryName(self: IDataLabel) -> bool
        Set: ShowCategoryName(self: IDataLabel) = value
        """
        ...

    @property
    def ShowLegendKey(self) -> bool:
        """
        Get: ShowLegendKey(self: IDataLabel) -> bool
        Set: ShowLegendKey(self: IDataLabel) = value
        """
        ...

    @property
    def ShowPercentage(self) -> bool:
        """
        Get: ShowPercentage(self: IDataLabel) -> bool
        Set: ShowPercentage(self: IDataLabel) = value
        """
        ...

    @property
    def ShowRange(self) -> bool:
        """
        Get: ShowRange(self: IDataLabel) -> bool
        Set: ShowRange(self: IDataLabel) = value
        """
        ...

    @property
    def ShowSeriesName(self) -> bool:
        """
        Get: ShowSeriesName(self: IDataLabel) -> bool
        Set: ShowSeriesName(self: IDataLabel) = value
        """
        ...

    @property
    def ShowValue(self) -> bool:
        """
        Get: ShowValue(self: IDataLabel) -> bool
        Set: ShowValue(self: IDataLabel) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IDataLabel) -> str
        Set: Text(self: IDataLabel) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IDataLabel) -> float
        Set: Top(self: IDataLabel) = value
        """
        ...

    @property
    def Type(self) -> object:
        """
        Get: Type(self: IDataLabel) -> object
        Set: Type(self: IDataLabel) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IDataLabel) -> object
        Set: VerticalAlignment(self: IDataLabel) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IDataLabel) -> float
        Set: Width(self: IDataLabel) = value
        """
        ...

    @property
    def _Height(self) -> float:
        """ Get: _Height(self: IDataLabel) -> float """
        ...

    @property
    def _Width(self) -> float:
        """ Get: _Width(self: IDataLabel) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: IDataLabel) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IDataLabel) -> object """
        ...


class IDataLabels(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDataLabels) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IDataLabels) -> object
        Set: AutoScaleFont(self: IDataLabels) = value
        """
        ...

    @property
    def AutoText(self) -> bool:
        """
        Get: AutoText(self: IDataLabels) -> bool
        Set: AutoText(self: IDataLabels) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IDataLabels) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IDataLabels) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDataLabels) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IDataLabels) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IDataLabels) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IDataLabels) -> ChartFormat """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IDataLabels) -> object
        Set: HorizontalAlignment(self: IDataLabels) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IDataLabels) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IDataLabels) -> str """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: IDataLabels) -> str
        Set: NumberFormat(self: IDataLabels) = value
        """
        ...

    @property
    def NumberFormatLinked(self) -> bool:
        """
        Get: NumberFormatLinked(self: IDataLabels) -> bool
        Set: NumberFormatLinked(self: IDataLabels) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: IDataLabels) -> object
        Set: NumberFormatLocal(self: IDataLabels) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IDataLabels) -> object
        Set: Orientation(self: IDataLabels) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDataLabels) -> object """
        ...

    @property
    def Position(self) -> XlDataLabelPosition:
        """
        Get: Position(self: IDataLabels) -> XlDataLabelPosition
        Set: Position(self: IDataLabels) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IDataLabels) -> int
        Set: ReadingOrder(self: IDataLabels) = value
        """
        ...

    @property
    def Separator(self) -> object:
        """
        Get: Separator(self: IDataLabels) -> object
        Set: Separator(self: IDataLabels) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IDataLabels) -> bool
        Set: Shadow(self: IDataLabels) = value
        """
        ...

    @property
    def ShowBubbleSize(self) -> bool:
        """
        Get: ShowBubbleSize(self: IDataLabels) -> bool
        Set: ShowBubbleSize(self: IDataLabels) = value
        """
        ...

    @property
    def ShowCategoryName(self) -> bool:
        """
        Get: ShowCategoryName(self: IDataLabels) -> bool
        Set: ShowCategoryName(self: IDataLabels) = value
        """
        ...

    @property
    def ShowLegendKey(self) -> bool:
        """
        Get: ShowLegendKey(self: IDataLabels) -> bool
        Set: ShowLegendKey(self: IDataLabels) = value
        """
        ...

    @property
    def ShowPercentage(self) -> bool:
        """
        Get: ShowPercentage(self: IDataLabels) -> bool
        Set: ShowPercentage(self: IDataLabels) = value
        """
        ...

    @property
    def ShowRange(self) -> bool:
        """
        Get: ShowRange(self: IDataLabels) -> bool
        Set: ShowRange(self: IDataLabels) = value
        """
        ...

    @property
    def ShowSeriesName(self) -> bool:
        """
        Get: ShowSeriesName(self: IDataLabels) -> bool
        Set: ShowSeriesName(self: IDataLabels) = value
        """
        ...

    @property
    def ShowValue(self) -> bool:
        """
        Get: ShowValue(self: IDataLabels) -> bool
        Set: ShowValue(self: IDataLabels) = value
        """
        ...

    @property
    def Type(self) -> object:
        """
        Get: Type(self: IDataLabels) -> object
        Set: Type(self: IDataLabels) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IDataLabels) -> object
        Set: VerticalAlignment(self: IDataLabels) = value
        """
        ...


    def Delete(self) -> object:
        """ Delete(self: IDataLabels) -> object """
        ...

    def Item(self, Index:object) -> DataLabel:
        """ Item(self: IDataLabels, Index: object) -> DataLabel """
        ...

    def Propagate(self, Index:object): # -> 
        """ Propagate(self: IDataLabels, Index: object) """
        ...

    def Select(self) -> object:
        """ Select(self: IDataLabels) -> object """
        ...

    def _Default(self, Index:object) -> DataLabel:
        """ _Default(self: IDataLabels, Index: object) -> DataLabel """
        ...

    def _Dummy10(self): # -> 
        """ _Dummy10(self: IDataLabels) """
        ...

    def _Dummy13(self): # -> 
        """ _Dummy13(self: IDataLabels) """
        ...

    def _Dummy16(self): # -> 
        """ _Dummy16(self: IDataLabels) """
        ...

    def _Dummy17(self): # -> 
        """ _Dummy17(self: IDataLabels) """
        ...

    def _Dummy9(self): # -> 
        """ _Dummy9(self: IDataLabels) """
        ...


class IDataTable: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDataTable) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IDataTable) -> object
        Set: AutoScaleFont(self: IDataTable) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IDataTable) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDataTable) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IDataTable) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IDataTable) -> ChartFormat """
        ...

    @property
    def HasBorderHorizontal(self) -> bool:
        """
        Get: HasBorderHorizontal(self: IDataTable) -> bool
        Set: HasBorderHorizontal(self: IDataTable) = value
        """
        ...

    @property
    def HasBorderOutline(self) -> bool:
        """
        Get: HasBorderOutline(self: IDataTable) -> bool
        Set: HasBorderOutline(self: IDataTable) = value
        """
        ...

    @property
    def HasBorderVertical(self) -> bool:
        """
        Get: HasBorderVertical(self: IDataTable) -> bool
        Set: HasBorderVertical(self: IDataTable) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDataTable) -> object """
        ...

    @property
    def ShowLegendKey(self) -> bool:
        """
        Get: ShowLegendKey(self: IDataTable) -> bool
        Set: ShowLegendKey(self: IDataTable) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: IDataTable) """
        ...

    def Select(self): # -> 
        """ Select(self: IDataTable) """
        ...


class IDiagram: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDiagram) -> Application """
        ...

    @property
    def AutoFormat(self): # -> MsoTriState
        """
        Get: AutoFormat(self: IDiagram) -> MsoTriState
        Set: AutoFormat(self: IDiagram) = value
        """
        ...

    @property
    def AutoLayout(self): # -> MsoTriState
        """
        Get: AutoLayout(self: IDiagram) -> MsoTriState
        Set: AutoLayout(self: IDiagram) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDiagram) -> XlCreator """
        ...

    @property
    def Nodes(self) -> DiagramNodes:
        """ Get: Nodes(self: IDiagram) -> DiagramNodes """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDiagram) -> object """
        ...

    @property
    def Reverse(self): # -> MsoTriState
        """
        Get: Reverse(self: IDiagram) -> MsoTriState
        Set: Reverse(self: IDiagram) = value
        """
        ...

    @property
    def Type(self): # -> MsoDiagramType
        """ Get: Type(self: IDiagram) -> MsoDiagramType """
        ...


    def Convert(self, Type): # ->  # Not found arg types: {'Type': 'MsoDiagramType'}
        """ Convert(self: IDiagram, Type: MsoDiagramType) """
        ...

    def FitText(self): # -> 
        """ FitText(self: IDiagram) """
        ...


class IDialog: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDialog) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDialog) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDialog) -> object """
        ...


    def Show(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> bool:
        """ Show(self: IDialog, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        ...


class IDialogFrame: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDialogFrame) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IDialogFrame) -> str
        Set: Caption(self: IDialogFrame) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDialogFrame) -> XlCreator """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IDialogFrame) -> float
        Set: Height(self: IDialogFrame) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IDialogFrame) -> float
        Set: Left(self: IDialogFrame) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IDialogFrame) -> bool
        Set: Locked(self: IDialogFrame) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IDialogFrame) -> bool
        Set: LockedText(self: IDialogFrame) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IDialogFrame) -> str
        Set: Name(self: IDialogFrame) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IDialogFrame) -> str
        Set: OnAction(self: IDialogFrame) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDialogFrame) -> object """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IDialogFrame) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IDialogFrame) -> str
        Set: Text(self: IDialogFrame) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IDialogFrame) -> float
        Set: Top(self: IDialogFrame) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IDialogFrame) -> float
        Set: Width(self: IDialogFrame) = value
        """
        ...


    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IDialogFrame, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IDialogFrame, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IDialogFrame, Replace: object) -> object """
        ...

    def _Dummy10(self): # -> 
        """ _Dummy10(self: IDialogFrame) """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IDialogFrame) """
        ...

    def _Dummy17(self): # -> 
        """ _Dummy17(self: IDialogFrame) """
        ...

    def _Dummy18(self): # -> 
        """ _Dummy18(self: IDialogFrame) """
        ...

    def _Dummy20(self): # -> 
        """ _Dummy20(self: IDialogFrame) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IDialogFrame) """
        ...

    def _Dummy23(self): # -> 
        """ _Dummy23(self: IDialogFrame) """
        ...

    def _Dummy25(self): # -> 
        """ _Dummy25(self: IDialogFrame) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IDialogFrame) """
        ...

    def _Dummy4(self): # -> 
        """ _Dummy4(self: IDialogFrame) """
        ...

    def _Dummy5(self): # -> 
        """ _Dummy5(self: IDialogFrame) """
        ...

    def _Dummy7(self): # -> 
        """ _Dummy7(self: IDialogFrame) """
        ...

    def _Dummy8(self): # -> 
        """ _Dummy8(self: IDialogFrame) """
        ...

    def _Dummy9(self): # -> 
        """ _Dummy9(self: IDialogFrame) """
        ...


class IDialogs(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDialogs) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IDialogs) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDialogs) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDialogs) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IDialogSheet: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDialogSheet) -> Application """
        ...

    @property
    def AutoFilter(self) -> AutoFilter:
        """ Get: AutoFilter(self: IDialogSheet) -> AutoFilter """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: IDialogSheet) -> str """
        ...

    @property
    def Comments(self) -> Comments:
        """ Get: Comments(self: IDialogSheet) -> Comments """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDialogSheet) -> XlCreator """
        ...

    @property
    def CustomProperties(self) -> CustomProperties:
        """ Get: CustomProperties(self: IDialogSheet) -> CustomProperties """
        ...

    @property
    def DefaultButton(self) -> object:
        """
        Get: DefaultButton(self: IDialogSheet) -> object
        Set: DefaultButton(self: IDialogSheet) = value
        """
        ...

    @property
    def DialogFrame(self) -> DialogFrame:
        """ Get: DialogFrame(self: IDialogSheet) -> DialogFrame """
        ...

    @property
    def DisplayAutomaticPageBreaks(self) -> bool:
        """
        Get: DisplayAutomaticPageBreaks(self: IDialogSheet) -> bool
        Set: DisplayAutomaticPageBreaks(self: IDialogSheet) = value
        """
        ...

    @property
    def DisplayPageBreaks(self) -> bool:
        """
        Get: DisplayPageBreaks(self: IDialogSheet) -> bool
        Set: DisplayPageBreaks(self: IDialogSheet) = value
        """
        ...

    @property
    def DisplayRightToLeft(self) -> bool:
        """
        Get: DisplayRightToLeft(self: IDialogSheet) -> bool
        Set: DisplayRightToLeft(self: IDialogSheet) = value
        """
        ...

    @property
    def EnableAutoFilter(self) -> bool:
        """
        Get: EnableAutoFilter(self: IDialogSheet) -> bool
        Set: EnableAutoFilter(self: IDialogSheet) = value
        """
        ...

    @property
    def EnableCalculation(self) -> bool:
        """
        Get: EnableCalculation(self: IDialogSheet) -> bool
        Set: EnableCalculation(self: IDialogSheet) = value
        """
        ...

    @property
    def EnableFormatConditionsCalculation(self) -> bool:
        """
        Get: EnableFormatConditionsCalculation(self: IDialogSheet) -> bool
        Set: EnableFormatConditionsCalculation(self: IDialogSheet) = value
        """
        ...

    @property
    def EnableOutlining(self) -> bool:
        """
        Get: EnableOutlining(self: IDialogSheet) -> bool
        Set: EnableOutlining(self: IDialogSheet) = value
        """
        ...

    @property
    def EnablePivotTable(self) -> bool:
        """
        Get: EnablePivotTable(self: IDialogSheet) -> bool
        Set: EnablePivotTable(self: IDialogSheet) = value
        """
        ...

    @property
    def EnableSelection(self) -> XlEnableSelection:
        """
        Get: EnableSelection(self: IDialogSheet) -> XlEnableSelection
        Set: EnableSelection(self: IDialogSheet) = value
        """
        ...

    @property
    def Focus(self) -> object:
        """
        Get: Focus(self: IDialogSheet) -> object
        Set: Focus(self: IDialogSheet) = value
        """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: IDialogSheet) -> HPageBreaks """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: IDialogSheet) -> Hyperlinks """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IDialogSheet) -> int """
        ...

    @property
    def MailEnvelope(self): # -> MsoEnvelope
        """ Get: MailEnvelope(self: IDialogSheet) -> MsoEnvelope """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IDialogSheet) -> str
        Set: Name(self: IDialogSheet) = value
        """
        ...

    @property
    def Names(self) -> Names:
        """ Get: Names(self: IDialogSheet) -> Names """
        ...

    @property
    def Next(self) -> object:
        """ Get: Next(self: IDialogSheet) -> object """
        ...

    @property
    def OnDoubleClick(self) -> str:
        """
        Get: OnDoubleClick(self: IDialogSheet) -> str
        Set: OnDoubleClick(self: IDialogSheet) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: IDialogSheet) -> str
        Set: OnSheetActivate(self: IDialogSheet) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: IDialogSheet) -> str
        Set: OnSheetDeactivate(self: IDialogSheet) = value
        """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """ Get: PageSetup(self: IDialogSheet) -> PageSetup """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDialogSheet) -> object """
        ...

    @property
    def Previous(self) -> object:
        """ Get: Previous(self: IDialogSheet) -> object """
        ...

    @property
    def PrintedCommentPages(self) -> int:
        """ Get: PrintedCommentPages(self: IDialogSheet) -> int """
        ...

    @property
    def ProtectContents(self) -> bool:
        """ Get: ProtectContents(self: IDialogSheet) -> bool """
        ...

    @property
    def ProtectDrawingObjects(self) -> bool:
        """ Get: ProtectDrawingObjects(self: IDialogSheet) -> bool """
        ...

    @property
    def Protection(self) -> Protection:
        """ Get: Protection(self: IDialogSheet) -> Protection """
        ...

    @property
    def ProtectionMode(self) -> bool:
        """ Get: ProtectionMode(self: IDialogSheet) -> bool """
        ...

    @property
    def ProtectScenarios(self) -> bool:
        """ Get: ProtectScenarios(self: IDialogSheet) -> bool """
        ...

    @property
    def QueryTables(self) -> QueryTables:
        """ Get: QueryTables(self: IDialogSheet) -> QueryTables """
        ...

    @property
    def Scripts(self): # -> Scripts
        """ Get: Scripts(self: IDialogSheet) -> Scripts """
        ...

    @property
    def ScrollArea(self) -> str:
        """
        Get: ScrollArea(self: IDialogSheet) -> str
        Set: ScrollArea(self: IDialogSheet) = value
        """
        ...

    @property
    def Shapes(self) -> Shapes:
        """ Get: Shapes(self: IDialogSheet) -> Shapes """
        ...

    @property
    def SmartTags(self) -> SmartTags:
        """ Get: SmartTags(self: IDialogSheet) -> SmartTags """
        ...

    @property
    def Sort(self) -> Sort:
        """ Get: Sort(self: IDialogSheet) -> Sort """
        ...

    @property
    def Tab(self) -> Tab:
        """ Get: Tab(self: IDialogSheet) -> Tab """
        ...

    @property
    def Visible(self) -> XlSheetVisibility:
        """
        Get: Visible(self: IDialogSheet) -> XlSheetVisibility
        Set: Visible(self: IDialogSheet) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: IDialogSheet) -> VPageBreaks """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: IDialogSheet) -> str
        Set: _CodeName(self: IDialogSheet) = value
        """
        ...

    @property
    def _DisplayRightToLeft(self) -> int:
        """
        Get: _DisplayRightToLeft(self: IDialogSheet) -> int
        Set: _DisplayRightToLeft(self: IDialogSheet) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: IDialogSheet) """
        ...

    def Arcs(self, Index:object) -> object:
        """ Arcs(self: IDialogSheet, Index: object) -> object """
        ...

    def Buttons(self, Index:object) -> object:
        """ Buttons(self: IDialogSheet, Index: object) -> object """
        ...

    def ChartObjects(self, Index:object) -> object:
        """ ChartObjects(self: IDialogSheet, Index: object) -> object """
        ...

    def CheckBoxes(self, Index:object) -> object:
        """ CheckBoxes(self: IDialogSheet, Index: object) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object): # -> 
        """ CheckSpelling(self: IDialogSheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        ...

    def CircleInvalid(self): # -> 
        """ CircleInvalid(self: IDialogSheet) """
        ...

    def ClearCircles(self): # -> 
        """ ClearCircles(self: IDialogSheet) """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: IDialogSheet, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IDialogSheet) """
        ...

    def DrawingObjects(self, Index:object) -> object:
        """ DrawingObjects(self: IDialogSheet, Index: object) -> object """
        ...

    def Drawings(self, Index:object) -> object:
        """ Drawings(self: IDialogSheet, Index: object) -> object """
        ...

    def DropDowns(self, Index:object) -> object:
        """ DropDowns(self: IDialogSheet, Index: object) -> object """
        ...

    def EditBoxes(self, Index:object) -> object:
        """ EditBoxes(self: IDialogSheet, Index: object) -> object """
        ...

    def Evaluate(self, Name:object) -> object:
        """ Evaluate(self: IDialogSheet, Name: object) -> object """
        ...

    def ExportAsFixedFormat(self, Type:XlFixedFormatType, Filename:object, Quality:object, IncludeDocProperties:object, IgnorePrintAreas:object, From:object, To:object, OpenAfterPublish:object, FixedFormatExtClassPtr:object): # -> 
        """ ExportAsFixedFormat(self: IDialogSheet, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        ...

    def GroupBoxes(self, Index:object) -> object:
        """ GroupBoxes(self: IDialogSheet, Index: object) -> object """
        ...

    def GroupObjects(self, Index:object) -> object:
        """ GroupObjects(self: IDialogSheet, Index: object) -> object """
        ...

    def Hide(self, Cancel:object) -> bool:
        """ Hide(self: IDialogSheet, Cancel: object) -> bool """
        ...

    def Labels(self, Index:object) -> object:
        """ Labels(self: IDialogSheet, Index: object) -> object """
        ...

    def Lines(self, Index:object) -> object:
        """ Lines(self: IDialogSheet, Index: object) -> object """
        ...

    def ListBoxes(self, Index:object) -> object:
        """ ListBoxes(self: IDialogSheet, Index: object) -> object """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: IDialogSheet, Before: object, After: object) """
        ...

    def OLEObjects(self, Index:object) -> object:
        """ OLEObjects(self: IDialogSheet, Index: object) -> object """
        ...

    def OptionButtons(self, Index:object) -> object:
        """ OptionButtons(self: IDialogSheet, Index: object) -> object """
        ...

    def Ovals(self, Index:object) -> object:
        """ Ovals(self: IDialogSheet, Index: object) -> object """
        ...

    def Paste(self, Destination:object, Link:object): # -> 
        """ Paste(self: IDialogSheet, Destination: object, Link: object) """
        ...

    def PasteSpecial(self, Format:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object, NoHTMLFormatting:object): # -> 
        """ PasteSpecial(self: IDialogSheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, NoHTMLFormatting: object) """
        ...

    def Pictures(self, Index:object) -> object:
        """ Pictures(self: IDialogSheet, Index: object) -> object """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: IDialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOutEx(self: IDialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: IDialogSheet, EnableChanges: object) """
        ...

    def Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object, AllowFormattingCells:object, AllowFormattingColumns:object, AllowFormattingRows:object, AllowInsertingColumns:object, AllowInsertingRows:object, AllowInsertingHyperlinks:object, AllowDeletingColumns:object, AllowDeletingRows:object, AllowSorting:object, AllowFiltering:object, AllowUsingPivotTables:object): # -> 
        """ Protect(self: IDialogSheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object, AllowFormattingCells: object, AllowFormattingColumns: object, AllowFormattingRows: object, AllowInsertingColumns: object, AllowInsertingRows: object, AllowInsertingHyperlinks: object, AllowDeletingColumns: object, AllowDeletingRows: object, AllowSorting: object, AllowFiltering: object, AllowUsingPivotTables: object) """
        ...

    def Rectangles(self, Index:object) -> object:
        """ Rectangles(self: IDialogSheet, Index: object) -> object """
        ...

    def ResetAllPageBreaks(self): # -> 
        """ ResetAllPageBreaks(self: IDialogSheet) """
        ...

    def SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object, Local:object): # -> 
        """ SaveAs(self: IDialogSheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        ...

    def ScrollBars(self, Index:object) -> object:
        """ ScrollBars(self: IDialogSheet, Index: object) -> object """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: IDialogSheet, Replace: object) """
        ...

    def Show(self) -> bool:
        """ Show(self: IDialogSheet) -> bool """
        ...

    def Spinners(self, Index:object) -> object:
        """ Spinners(self: IDialogSheet, Index: object) -> object """
        ...

    def TextBoxes(self, Index:object) -> object:
        """ TextBoxes(self: IDialogSheet, Index: object) -> object """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: IDialogSheet, Password: object) """
        ...

    def _CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object, IgnoreFinalYaa:object, SpellScript:object): # -> 
        """ _CheckSpelling(self: IDialogSheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object, IgnoreFinalYaa: object, SpellScript: object) """
        ...

    def _Dummy113(self): # -> 
        """ _Dummy113(self: IDialogSheet) """
        ...

    def _Dummy114(self): # -> 
        """ _Dummy114(self: IDialogSheet) """
        ...

    def _Dummy115(self): # -> 
        """ _Dummy115(self: IDialogSheet) """
        ...

    def _Dummy29(self): # -> 
        """ _Dummy29(self: IDialogSheet) """
        ...

    def _Dummy31(self): # -> 
        """ _Dummy31(self: IDialogSheet) """
        ...

    def _Dummy32(self): # -> 
        """ _Dummy32(self: IDialogSheet) """
        ...

    def _Dummy34(self): # -> 
        """ _Dummy34(self: IDialogSheet) """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: IDialogSheet) """
        ...

    def _Dummy40(self): # -> 
        """ _Dummy40(self: IDialogSheet) """
        ...

    def _Dummy41(self): # -> 
        """ _Dummy41(self: IDialogSheet) """
        ...

    def _Dummy42(self): # -> 
        """ _Dummy42(self: IDialogSheet) """
        ...

    def _Dummy43(self): # -> 
        """ _Dummy43(self: IDialogSheet) """
        ...

    def _Dummy44(self): # -> 
        """ _Dummy44(self: IDialogSheet) """
        ...

    def _Dummy45(self): # -> 
        """ _Dummy45(self: IDialogSheet) """
        ...

    def _Dummy56(self): # -> 
        """ _Dummy56(self: IDialogSheet) """
        ...

    def _Dummy65(self): # -> 
        """ _Dummy65(self: IDialogSheet) """
        ...

    def _Dummy66(self): # -> 
        """ _Dummy66(self: IDialogSheet) """
        ...

    def _Dummy67(self): # -> 
        """ _Dummy67(self: IDialogSheet) """
        ...

    def _Dummy69(self): # -> 
        """ _Dummy69(self: IDialogSheet) """
        ...

    def _Dummy74(self): # -> 
        """ _Dummy74(self: IDialogSheet) """
        ...

    def _Dummy75(self): # -> 
        """ _Dummy75(self: IDialogSheet) """
        ...

    def _Dummy76(self): # -> 
        """ _Dummy76(self: IDialogSheet) """
        ...

    def _Dummy78(self): # -> 
        """ _Dummy78(self: IDialogSheet) """
        ...

    def _Dummy79(self): # -> 
        """ _Dummy79(self: IDialogSheet) """
        ...

    def _Dummy82(self): # -> 
        """ _Dummy82(self: IDialogSheet) """
        ...

    def _Dummy83(self): # -> 
        """ _Dummy83(self: IDialogSheet) """
        ...

    def _Dummy85(self): # -> 
        """ _Dummy85(self: IDialogSheet) """
        ...

    def _Dummy86(self): # -> 
        """ _Dummy86(self: IDialogSheet) """
        ...

    def _Dummy88(self): # -> 
        """ _Dummy88(self: IDialogSheet) """
        ...

    def _Dummy89(self): # -> 
        """ _Dummy89(self: IDialogSheet) """
        ...

    def _Dummy90(self): # -> 
        """ _Dummy90(self: IDialogSheet) """
        ...

    def _Evaluate(self, Name:object) -> object:
        """ _Evaluate(self: IDialogSheet, Name: object) -> object """
        ...

    def _PasteSpecial(self, Format:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object): # -> 
        """ _PasteSpecial(self: IDialogSheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: IDialogSheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ _Protect(self: IDialogSheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def _SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ _SaveAs(self: IDialogSheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...


class IDialogSheets(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDialogSheets) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IDialogSheets) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDialogSheets) -> XlCreator """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: IDialogSheets) -> HPageBreaks """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDialogSheets) -> object """
        ...

    @property
    def Visible(self) -> object:
        """
        Get: Visible(self: IDialogSheets) -> object
        Set: Visible(self: IDialogSheets) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: IDialogSheets) -> VPageBreaks """
        ...


    def Add(self, Before:object, After:object, Count:object) -> DialogSheet:
        """ Add(self: IDialogSheets, Before: object, After: object, Count: object) -> DialogSheet """
        ...

    def Add2(self, Before:object, After:object, Count:object, NewLayout:object) -> object:
        """ Add2(self: IDialogSheets, Before: object, After: object, Count: object, NewLayout: object) -> object """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: IDialogSheets, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IDialogSheets) """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: IDialogSheets, Before: object, After: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: IDialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOutEx(self: IDialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: IDialogSheets, EnableChanges: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: IDialogSheets, Replace: object) """
        ...

    def _Dummy7(self): # -> 
        """ _Dummy7(self: IDialogSheets) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: IDialogSheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IDialogSheetView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDialogSheetView) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDialogSheetView) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDialogSheetView) -> object """
        ...

    @property
    def Sheet(self) -> object:
        """ Get: Sheet(self: IDialogSheetView) -> object """
        ...



class IDisplayFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> object:
        """ Get: AddIndent(self: IDisplayFormat) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDisplayFormat) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: IDisplayFormat) -> Borders """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDisplayFormat) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IDisplayFormat) -> Font """
        ...

    @property
    def FormulaHidden(self) -> object:
        """ Get: FormulaHidden(self: IDisplayFormat) -> object """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """ Get: HorizontalAlignment(self: IDisplayFormat) -> object """
        ...

    @property
    def IndentLevel(self) -> object:
        """ Get: IndentLevel(self: IDisplayFormat) -> object """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IDisplayFormat) -> Interior """
        ...

    @property
    def Locked(self) -> object:
        """ Get: Locked(self: IDisplayFormat) -> object """
        ...

    @property
    def MergeCells(self) -> object:
        """ Get: MergeCells(self: IDisplayFormat) -> object """
        ...

    @property
    def NumberFormat(self) -> object:
        """ Get: NumberFormat(self: IDisplayFormat) -> object """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """ Get: NumberFormatLocal(self: IDisplayFormat) -> object """
        ...

    @property
    def Orientation(self) -> object:
        """ Get: Orientation(self: IDisplayFormat) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDisplayFormat) -> object """
        ...

    @property
    def ReadingOrder(self) -> int:
        """ Get: ReadingOrder(self: IDisplayFormat) -> int """
        ...

    @property
    def ShrinkToFit(self) -> object:
        """ Get: ShrinkToFit(self: IDisplayFormat) -> object """
        ...

    @property
    def Style(self) -> object:
        """ Get: Style(self: IDisplayFormat) -> object """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """ Get: VerticalAlignment(self: IDisplayFormat) -> object """
        ...

    @property
    def WrapText(self) -> object:
        """ Get: WrapText(self: IDisplayFormat) -> object """
        ...



class IDisplayUnitLabel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDisplayUnitLabel) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IDisplayUnitLabel) -> object
        Set: AutoScaleFont(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IDisplayUnitLabel) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IDisplayUnitLabel) -> str
        Set: Caption(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDisplayUnitLabel) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IDisplayUnitLabel) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IDisplayUnitLabel) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IDisplayUnitLabel) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IDisplayUnitLabel) -> str
        Set: Formula(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: IDisplayUnitLabel) -> str
        Set: FormulaLocal(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: IDisplayUnitLabel) -> str
        Set: FormulaR1C1(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: IDisplayUnitLabel) -> str
        Set: FormulaR1C1Local(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: IDisplayUnitLabel) -> float """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IDisplayUnitLabel) -> object
        Set: HorizontalAlignment(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IDisplayUnitLabel) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IDisplayUnitLabel) -> float
        Set: Left(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IDisplayUnitLabel) -> str """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IDisplayUnitLabel) -> object
        Set: Orientation(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDisplayUnitLabel) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: IDisplayUnitLabel) -> XlChartElementPosition
        Set: Position(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IDisplayUnitLabel) -> int
        Set: ReadingOrder(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IDisplayUnitLabel) -> bool
        Set: Shadow(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IDisplayUnitLabel) -> str
        Set: Text(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IDisplayUnitLabel) -> float
        Set: Top(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IDisplayUnitLabel) -> object
        Set: VerticalAlignment(self: IDisplayUnitLabel) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: IDisplayUnitLabel) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: IDisplayUnitLabel) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IDisplayUnitLabel) -> object """
        ...

    def _Dummy21(self): # -> 
        """ _Dummy21(self: IDisplayUnitLabel) """
        ...


class IDocEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Activate(self): # -> 
        """ Activate(self: IDocEvents) """
        ...

    def BeforeDelete(self): # -> 
        """ BeforeDelete(self: IDocEvents) """
        ...

    def BeforeDoubleClick(self, Target, Cancel) -> bool:
        """ BeforeDoubleClick(self: IDocEvents, Target: Range) -> bool """
        ...

    def BeforeRightClick(self, Target, Cancel) -> bool:
        """ BeforeRightClick(self: IDocEvents, Target: Range) -> bool """
        ...

    def Calculate(self): # -> 
        """ Calculate(self: IDocEvents) """
        ...

    def Change(self, Target:Range): # -> 
        """ Change(self: IDocEvents, Target: Range) """
        ...

    def Deactivate(self): # -> 
        """ Deactivate(self: IDocEvents) """
        ...

    def FollowHyperlink(self, Target:Hyperlink): # -> 
        """ FollowHyperlink(self: IDocEvents, Target: Hyperlink) """
        ...

    def LensGalleryRenderComplete(self): # -> 
        """ LensGalleryRenderComplete(self: IDocEvents) """
        ...

    def PivotTableAfterValueChange(self, TargetPivotTable:PivotTable, TargetRange:Range): # -> 
        """ PivotTableAfterValueChange(self: IDocEvents, TargetPivotTable: PivotTable, TargetRange: Range) """
        ...

    def PivotTableBeforeAllocateChanges(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ PivotTableBeforeAllocateChanges(self: IDocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def PivotTableBeforeCommitChanges(self, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ PivotTableBeforeCommitChanges(self: IDocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def PivotTableBeforeDiscardChanges(self, TargetPivotTable:PivotTable, ValueChangeStart:int, ValueChangeEnd:int): # -> 
        """ PivotTableBeforeDiscardChanges(self: IDocEvents, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        ...

    def PivotTableChangeSync(self, Target:PivotTable): # -> 
        """ PivotTableChangeSync(self: IDocEvents, Target: PivotTable) """
        ...

    def PivotTableUpdate(self, Target:PivotTable): # -> 
        """ PivotTableUpdate(self: IDocEvents, Target: PivotTable) """
        ...

    def SelectionChange(self, Target:Range): # -> 
        """ SelectionChange(self: IDocEvents, Target: Range) """
        ...

    def TableUpdate(self, Target:TableObject): # -> 
        """ TableUpdate(self: IDocEvents, Target: TableObject) """
        ...


class IDownBars: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDownBars) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IDownBars) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDownBars) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IDownBars) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IDownBars) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IDownBars) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IDownBars) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDownBars) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: IDownBars) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IDownBars) -> object """
        ...


class IDrawing: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IDrawing) -> bool
        Set: AddIndent(self: IDrawing) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDrawing) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IDrawing) -> object
        Set: AutoScaleFont(self: IDrawing) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IDrawing) -> bool
        Set: AutoSize(self: IDrawing) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IDrawing) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IDrawing) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IDrawing) -> str
        Set: Caption(self: IDrawing) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDrawing) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IDrawing) -> bool
        Set: Enabled(self: IDrawing) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IDrawing) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IDrawing) -> str
        Set: Formula(self: IDrawing) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IDrawing) -> float
        Set: Height(self: IDrawing) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IDrawing) -> object
        Set: HorizontalAlignment(self: IDrawing) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IDrawing) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IDrawing) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IDrawing) -> float
        Set: Left(self: IDrawing) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IDrawing) -> bool
        Set: Locked(self: IDrawing) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IDrawing) -> bool
        Set: LockedText(self: IDrawing) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IDrawing) -> str
        Set: Name(self: IDrawing) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IDrawing) -> str
        Set: OnAction(self: IDrawing) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IDrawing) -> object
        Set: Orientation(self: IDrawing) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDrawing) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IDrawing) -> object
        Set: Placement(self: IDrawing) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IDrawing) -> bool
        Set: PrintObject(self: IDrawing) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IDrawing) -> int
        Set: ReadingOrder(self: IDrawing) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IDrawing) -> bool
        Set: Shadow(self: IDrawing) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IDrawing) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IDrawing) -> str
        Set: Text(self: IDrawing) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IDrawing) -> float
        Set: Top(self: IDrawing) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IDrawing) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IDrawing) -> object
        Set: VerticalAlignment(self: IDrawing) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IDrawing) -> bool
        Set: Visible(self: IDrawing) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IDrawing) -> float
        Set: Width(self: IDrawing) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IDrawing) -> int """
        ...


    def AddVertex(self, Left:float, Top:float) -> object:
        """ AddVertex(self: IDrawing, Left: float, Top: float) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IDrawing) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IDrawing, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IDrawing) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IDrawing, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IDrawing) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IDrawing) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IDrawing) -> object """
        ...

    def Reshape(self, Vertex:int, Insert:bool, Left:object, Top:object) -> object:
        """ Reshape(self: IDrawing, Vertex: int, Insert: bool, Left: object, Top: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IDrawing, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IDrawing) -> object """
        ...


class IDrawingObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: IDrawingObjects) -> object
        Set: Accelerator(self: IDrawingObjects) = value
        """
        ...

    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IDrawingObjects) -> bool
        Set: AddIndent(self: IDrawingObjects) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDrawingObjects) -> Application """
        ...

    @property
    def ArrowHeadLength(self) -> object:
        """
        Get: ArrowHeadLength(self: IDrawingObjects) -> object
        Set: ArrowHeadLength(self: IDrawingObjects) = value
        """
        ...

    @property
    def ArrowHeadStyle(self) -> object:
        """
        Get: ArrowHeadStyle(self: IDrawingObjects) -> object
        Set: ArrowHeadStyle(self: IDrawingObjects) = value
        """
        ...

    @property
    def ArrowHeadWidth(self) -> object:
        """
        Get: ArrowHeadWidth(self: IDrawingObjects) -> object
        Set: ArrowHeadWidth(self: IDrawingObjects) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IDrawingObjects) -> bool
        Set: AutoSize(self: IDrawingObjects) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IDrawingObjects) -> Border """
        ...

    @property
    def CancelButton(self) -> bool:
        """
        Get: CancelButton(self: IDrawingObjects) -> bool
        Set: CancelButton(self: IDrawingObjects) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IDrawingObjects) -> str
        Set: Caption(self: IDrawingObjects) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IDrawingObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDrawingObjects) -> XlCreator """
        ...

    @property
    def DefaultButton(self) -> bool:
        """
        Get: DefaultButton(self: IDrawingObjects) -> bool
        Set: DefaultButton(self: IDrawingObjects) = value
        """
        ...

    @property
    def DismissButton(self) -> bool:
        """
        Get: DismissButton(self: IDrawingObjects) -> bool
        Set: DismissButton(self: IDrawingObjects) = value
        """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: IDrawingObjects) -> bool
        Set: Display3DShading(self: IDrawingObjects) = value
        """
        ...

    @property
    def DisplayVerticalScrollBar(self) -> bool:
        """
        Get: DisplayVerticalScrollBar(self: IDrawingObjects) -> bool
        Set: DisplayVerticalScrollBar(self: IDrawingObjects) = value
        """
        ...

    @property
    def DropDownLines(self) -> int:
        """
        Get: DropDownLines(self: IDrawingObjects) -> int
        Set: DropDownLines(self: IDrawingObjects) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IDrawingObjects) -> bool
        Set: Enabled(self: IDrawingObjects) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IDrawingObjects) -> Font """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IDrawingObjects) -> float
        Set: Height(self: IDrawingObjects) = value
        """
        ...

    @property
    def HelpButton(self) -> bool:
        """
        Get: HelpButton(self: IDrawingObjects) -> bool
        Set: HelpButton(self: IDrawingObjects) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IDrawingObjects) -> object
        Set: HorizontalAlignment(self: IDrawingObjects) = value
        """
        ...

    @property
    def InputType(self) -> int:
        """
        Get: InputType(self: IDrawingObjects) -> int
        Set: InputType(self: IDrawingObjects) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IDrawingObjects) -> Interior """
        ...

    @property
    def LargeChange(self) -> int:
        """
        Get: LargeChange(self: IDrawingObjects) -> int
        Set: LargeChange(self: IDrawingObjects) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IDrawingObjects) -> float
        Set: Left(self: IDrawingObjects) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: IDrawingObjects) -> str
        Set: LinkedCell(self: IDrawingObjects) = value
        """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: IDrawingObjects) -> str
        Set: ListFillRange(self: IDrawingObjects) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: IDrawingObjects) -> int
        Set: ListIndex(self: IDrawingObjects) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IDrawingObjects) -> bool
        Set: Locked(self: IDrawingObjects) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IDrawingObjects) -> bool
        Set: LockedText(self: IDrawingObjects) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: IDrawingObjects) -> int
        Set: Max(self: IDrawingObjects) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: IDrawingObjects) -> int
        Set: Min(self: IDrawingObjects) = value
        """
        ...

    @property
    def MultiLine(self) -> bool:
        """
        Get: MultiLine(self: IDrawingObjects) -> bool
        Set: MultiLine(self: IDrawingObjects) = value
        """
        ...

    @property
    def MultiSelect(self) -> bool:
        """
        Get: MultiSelect(self: IDrawingObjects) -> bool
        Set: MultiSelect(self: IDrawingObjects) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IDrawingObjects) -> str
        Set: OnAction(self: IDrawingObjects) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IDrawingObjects) -> object
        Set: Orientation(self: IDrawingObjects) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDrawingObjects) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: IDrawingObjects) -> object
        Set: PhoneticAccelerator(self: IDrawingObjects) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IDrawingObjects) -> object
        Set: Placement(self: IDrawingObjects) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IDrawingObjects) -> bool
        Set: PrintObject(self: IDrawingObjects) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IDrawingObjects) -> int
        Set: ReadingOrder(self: IDrawingObjects) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: IDrawingObjects) -> bool
        Set: RoundedCorners(self: IDrawingObjects) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IDrawingObjects) -> bool
        Set: Shadow(self: IDrawingObjects) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IDrawingObjects) -> ShapeRange """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: IDrawingObjects) -> int
        Set: SmallChange(self: IDrawingObjects) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IDrawingObjects) -> str
        Set: Text(self: IDrawingObjects) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IDrawingObjects) -> float
        Set: Top(self: IDrawingObjects) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: IDrawingObjects) -> int
        Set: Value(self: IDrawingObjects) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IDrawingObjects) -> object
        Set: VerticalAlignment(self: IDrawingObjects) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IDrawingObjects) -> bool
        Set: Visible(self: IDrawingObjects) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IDrawingObjects) -> float
        Set: Width(self: IDrawingObjects) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IDrawingObjects) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IDrawingObjects) -> int
        Set: _Default(self: IDrawingObjects) = value
        """
        ...


    def AddItem(self, Text:object, Index:object) -> object:
        """ AddItem(self: IDrawingObjects, Text: object, Index: object) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IDrawingObjects) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IDrawingObjects, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IDrawingObjects) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IDrawingObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IDrawingObjects) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IDrawingObjects) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IDrawingObjects) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IDrawingObjects) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IDrawingObjects, Index: object) -> object """
        ...

    def LinkCombo(self, Link:object) -> object:
        """ LinkCombo(self: IDrawingObjects, Link: object) -> object """
        ...

    def List(self, Index:object) -> object:
        """ List(self: IDrawingObjects, Index: object) -> object """
        ...

    def RemoveAllItems(self) -> object:
        """ RemoveAllItems(self: IDrawingObjects) -> object """
        ...

    def RemoveItem(self, Index:int, Count:object) -> object:
        """ RemoveItem(self: IDrawingObjects, Index: int, Count: object) -> object """
        ...

    def Reshape(self, Vertex:int, Insert:object, Left:object, Top:object) -> object:
        """ Reshape(self: IDrawingObjects, Vertex: int, Insert: object, Left: object, Top: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IDrawingObjects, Replace: object) -> object """
        ...

    def Selected(self, Index:object) -> object:
        """ Selected(self: IDrawingObjects, Index: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IDrawingObjects) -> object """
        ...

    def Ungroup(self) -> object:
        """ Ungroup(self: IDrawingObjects) -> object """
        ...

    def Vertices(self, Index1:object, Index2:object) -> object:
        """ Vertices(self: IDrawingObjects, Index1: object, Index2: object) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IDrawingObjects) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IDrawingObjects) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IDrawingObjects) """
        ...

    def _Dummy28(self): # -> 
        """ _Dummy28(self: IDrawingObjects) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IDrawingObjects) """
        ...

    def _Dummy47(self): # -> 
        """ _Dummy47(self: IDrawingObjects) """
        ...

    def _Dummy54(self): # -> 
        """ _Dummy54(self: IDrawingObjects) """
        ...

    def _Dummy56(self): # -> 
        """ _Dummy56(self: IDrawingObjects) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IDrawings(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IDrawings) -> bool
        Set: AddIndent(self: IDrawings) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDrawings) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IDrawings) -> object
        Set: AutoScaleFont(self: IDrawings) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IDrawings) -> bool
        Set: AutoSize(self: IDrawings) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IDrawings) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IDrawings) -> str
        Set: Caption(self: IDrawings) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IDrawings) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDrawings) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IDrawings) -> bool
        Set: Enabled(self: IDrawings) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IDrawings) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IDrawings) -> str
        Set: Formula(self: IDrawings) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IDrawings) -> float
        Set: Height(self: IDrawings) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IDrawings) -> object
        Set: HorizontalAlignment(self: IDrawings) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IDrawings) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IDrawings) -> float
        Set: Left(self: IDrawings) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IDrawings) -> bool
        Set: Locked(self: IDrawings) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IDrawings) -> bool
        Set: LockedText(self: IDrawings) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IDrawings) -> str
        Set: OnAction(self: IDrawings) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IDrawings) -> object
        Set: Orientation(self: IDrawings) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDrawings) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IDrawings) -> object
        Set: Placement(self: IDrawings) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IDrawings) -> bool
        Set: PrintObject(self: IDrawings) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IDrawings) -> int
        Set: ReadingOrder(self: IDrawings) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IDrawings) -> bool
        Set: Shadow(self: IDrawings) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IDrawings) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IDrawings) -> str
        Set: Text(self: IDrawings) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IDrawings) -> float
        Set: Top(self: IDrawings) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IDrawings) -> object
        Set: VerticalAlignment(self: IDrawings) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IDrawings) -> bool
        Set: Visible(self: IDrawings) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IDrawings) -> float
        Set: Width(self: IDrawings) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IDrawings) -> int """
        ...


    def Add(self, X1:float, Y1:float, X2:float, Y2:float, Closed:bool) -> Drawing:
        """ Add(self: IDrawings, X1: float, Y1: float, X2: float, Y2: float, Closed: bool) -> Drawing """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IDrawings) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IDrawings, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IDrawings) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IDrawings, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IDrawings) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IDrawings) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IDrawings) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IDrawings) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IDrawings, Index: object) -> object """
        ...

    def Reshape(self, Vertex:int, Insert:bool, Left:object, Top:object) -> object:
        """ Reshape(self: IDrawings, Vertex: int, Insert: bool, Left: object, Top: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IDrawings, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IDrawings) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IDrawings) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IDrawings) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IDrawings) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IDrawings) """
        ...

    def _Dummy44(self): # -> 
        """ _Dummy44(self: IDrawings) """
        ...

    def _Dummy46(self): # -> 
        """ _Dummy46(self: IDrawings) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IDropDown: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDropDown) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IDropDown) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IDropDown) -> str
        Set: Caption(self: IDropDown) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDropDown) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: IDropDown) -> bool
        Set: Display3DShading(self: IDropDown) = value
        """
        ...

    @property
    def DropDownLines(self) -> int:
        """
        Get: DropDownLines(self: IDropDown) -> int
        Set: DropDownLines(self: IDropDown) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IDropDown) -> bool
        Set: Enabled(self: IDropDown) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IDropDown) -> float
        Set: Height(self: IDropDown) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IDropDown) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IDropDown) -> float
        Set: Left(self: IDropDown) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: IDropDown) -> str
        Set: LinkedCell(self: IDropDown) = value
        """
        ...

    @property
    def LinkedObject(self) -> object:
        """ Get: LinkedObject(self: IDropDown) -> object """
        ...

    @property
    def ListCount(self) -> int:
        """ Get: ListCount(self: IDropDown) -> int """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: IDropDown) -> str
        Set: ListFillRange(self: IDropDown) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: IDropDown) -> int
        Set: ListIndex(self: IDropDown) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IDropDown) -> bool
        Set: Locked(self: IDropDown) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IDropDown) -> str
        Set: Name(self: IDropDown) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IDropDown) -> str
        Set: OnAction(self: IDropDown) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDropDown) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IDropDown) -> object
        Set: Placement(self: IDropDown) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IDropDown) -> bool
        Set: PrintObject(self: IDropDown) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IDropDown) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IDropDown) -> str
        Set: Text(self: IDropDown) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IDropDown) -> float
        Set: Top(self: IDropDown) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IDropDown) -> Range """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: IDropDown) -> int
        Set: Value(self: IDropDown) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IDropDown) -> bool
        Set: Visible(self: IDropDown) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IDropDown) -> float
        Set: Width(self: IDropDown) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IDropDown) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IDropDown) -> int
        Set: _Default(self: IDropDown) = value
        """
        ...


    def AddItem(self, Text:object, Index:object) -> object:
        """ AddItem(self: IDropDown, Text: object, Index: object) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IDropDown) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IDropDown) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IDropDown, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IDropDown) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IDropDown) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IDropDown) -> object """
        ...

    def RemoveAllItems(self) -> object:
        """ RemoveAllItems(self: IDropDown) -> object """
        ...

    def RemoveItem(self, Index:int, Count:object) -> object:
        """ RemoveItem(self: IDropDown, Index: int, Count: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IDropDown, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IDropDown) -> object """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: IDropDown) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IDropDowns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDropDowns) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IDropDowns) -> str
        Set: Caption(self: IDropDowns) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IDropDowns) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDropDowns) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: IDropDowns) -> bool
        Set: Display3DShading(self: IDropDowns) = value
        """
        ...

    @property
    def DropDownLines(self) -> int:
        """
        Get: DropDownLines(self: IDropDowns) -> int
        Set: DropDownLines(self: IDropDowns) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IDropDowns) -> bool
        Set: Enabled(self: IDropDowns) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IDropDowns) -> float
        Set: Height(self: IDropDowns) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IDropDowns) -> float
        Set: Left(self: IDropDowns) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: IDropDowns) -> str
        Set: LinkedCell(self: IDropDowns) = value
        """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: IDropDowns) -> str
        Set: ListFillRange(self: IDropDowns) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: IDropDowns) -> int
        Set: ListIndex(self: IDropDowns) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IDropDowns) -> bool
        Set: Locked(self: IDropDowns) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IDropDowns) -> str
        Set: OnAction(self: IDropDowns) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDropDowns) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IDropDowns) -> object
        Set: Placement(self: IDropDowns) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IDropDowns) -> bool
        Set: PrintObject(self: IDropDowns) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IDropDowns) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IDropDowns) -> str
        Set: Text(self: IDropDowns) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IDropDowns) -> float
        Set: Top(self: IDropDowns) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: IDropDowns) -> int
        Set: Value(self: IDropDowns) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IDropDowns) -> bool
        Set: Visible(self: IDropDowns) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IDropDowns) -> float
        Set: Width(self: IDropDowns) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IDropDowns) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IDropDowns) -> int
        Set: _Default(self: IDropDowns) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float, Editable:object) -> DropDown:
        """ Add(self: IDropDowns, Left: float, Top: float, Width: float, Height: float, Editable: object) -> DropDown """
        ...

    def AddItem(self, Text:object, Index:object) -> object:
        """ AddItem(self: IDropDowns, Text: object, Index: object) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IDropDowns) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IDropDowns) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IDropDowns, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IDropDowns) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IDropDowns) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IDropDowns) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IDropDowns) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IDropDowns, Index: object) -> object """
        ...

    def RemoveAllItems(self) -> object:
        """ RemoveAllItems(self: IDropDowns) -> object """
        ...

    def RemoveItem(self, Index:int, Count:object) -> object:
        """ RemoveItem(self: IDropDowns, Index: int, Count: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IDropDowns, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IDropDowns) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IDropDowns) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IDropDowns) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IDropDowns) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IDropDowns) """
        ...

    def _Dummy31(self): # -> 
        """ _Dummy31(self: IDropDowns) """
        ...

    def _Dummy33(self): # -> 
        """ _Dummy33(self: IDropDowns) """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: IDropDowns) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IDropLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IDropLines) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IDropLines) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IDropLines) -> XlCreator """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IDropLines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IDropLines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IDropLines) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: IDropLines) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IDropLines) -> object """
        ...


class IDummy: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ShowSignaturesPane(self) -> bool:
        """
        Get: ShowSignaturesPane(self: IDummy) -> bool
        Set: ShowSignaturesPane(self: IDummy) = value
        """
        ...


    def AddNonVisibleSignature(self, SigProv:object) -> Signature:
        """ AddNonVisibleSignature(self: IDummy, SigProv: object) -> Signature """
        ...

    def AddSignatureLine(self, SigProv:object) -> Signature:
        """ AddSignatureLine(self: IDummy, SigProv: object) -> Signature """
        ...

    def ChDir(self): # -> 
        """ ChDir(self: IDummy) """
        ...

    def DirectObject(self): # -> 
        """ DirectObject(self: IDummy) """
        ...

    def DoScript(self): # -> 
        """ DoScript(self: IDummy) """
        ...

    def Load(self): # -> 
        """ Load(self: IDummy) """
        ...

    def RefreshDocument(self): # -> 
        """ RefreshDocument(self: IDummy) """
        ...

    def RGB(self): # -> 
        """ RGB(self: IDummy) """
        ...

    def ThemeColorScheme(self): # -> 
        """ ThemeColorScheme(self: IDummy) """
        ...

    def ThemeEffectScheme(self): # -> 
        """ ThemeEffectScheme(self: IDummy) """
        ...

    def ThemeFontScheme(self): # -> 
        """ ThemeFontScheme(self: IDummy) """
        ...

    def _ActiveSheetOrChart(self): # -> 
        """ _ActiveSheetOrChart(self: IDummy) """
        ...


class IEditBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IEditBox) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IEditBox) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IEditBox) -> str
        Set: Caption(self: IEditBox) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IEditBox) -> XlCreator """
        ...

    @property
    def DisplayVerticalScrollBar(self) -> bool:
        """
        Get: DisplayVerticalScrollBar(self: IEditBox) -> bool
        Set: DisplayVerticalScrollBar(self: IEditBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IEditBox) -> bool
        Set: Enabled(self: IEditBox) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IEditBox) -> float
        Set: Height(self: IEditBox) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IEditBox) -> int """
        ...

    @property
    def InputType(self) -> int:
        """
        Get: InputType(self: IEditBox) -> int
        Set: InputType(self: IEditBox) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IEditBox) -> float
        Set: Left(self: IEditBox) = value
        """
        ...

    @property
    def LinkedObject(self) -> str:
        """ Get: LinkedObject(self: IEditBox) -> str """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IEditBox) -> bool
        Set: Locked(self: IEditBox) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IEditBox) -> bool
        Set: LockedText(self: IEditBox) = value
        """
        ...

    @property
    def MultiLine(self) -> bool:
        """
        Get: MultiLine(self: IEditBox) -> bool
        Set: MultiLine(self: IEditBox) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IEditBox) -> str
        Set: Name(self: IEditBox) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IEditBox) -> str
        Set: OnAction(self: IEditBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IEditBox) -> object """
        ...

    @property
    def PasswordEdit(self) -> bool:
        """
        Get: PasswordEdit(self: IEditBox) -> bool
        Set: PasswordEdit(self: IEditBox) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IEditBox) -> object
        Set: Placement(self: IEditBox) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IEditBox) -> bool
        Set: PrintObject(self: IEditBox) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IEditBox) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IEditBox) -> str
        Set: Text(self: IEditBox) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IEditBox) -> float
        Set: Top(self: IEditBox) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IEditBox) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IEditBox) -> bool
        Set: Visible(self: IEditBox) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IEditBox) -> float
        Set: Width(self: IEditBox) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IEditBox) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: IEditBox) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IEditBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IEditBox) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IEditBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IEditBox) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IEditBox) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IEditBox) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IEditBox, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IEditBox) -> object """
        ...


class IEditBoxes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IEditBoxes) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IEditBoxes) -> str
        Set: Caption(self: IEditBoxes) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IEditBoxes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IEditBoxes) -> XlCreator """
        ...

    @property
    def DisplayVerticalScrollBar(self) -> bool:
        """
        Get: DisplayVerticalScrollBar(self: IEditBoxes) -> bool
        Set: DisplayVerticalScrollBar(self: IEditBoxes) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IEditBoxes) -> bool
        Set: Enabled(self: IEditBoxes) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IEditBoxes) -> float
        Set: Height(self: IEditBoxes) = value
        """
        ...

    @property
    def InputType(self) -> int:
        """
        Get: InputType(self: IEditBoxes) -> int
        Set: InputType(self: IEditBoxes) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IEditBoxes) -> float
        Set: Left(self: IEditBoxes) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IEditBoxes) -> bool
        Set: Locked(self: IEditBoxes) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IEditBoxes) -> bool
        Set: LockedText(self: IEditBoxes) = value
        """
        ...

    @property
    def MultiLine(self) -> bool:
        """
        Get: MultiLine(self: IEditBoxes) -> bool
        Set: MultiLine(self: IEditBoxes) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IEditBoxes) -> str
        Set: OnAction(self: IEditBoxes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IEditBoxes) -> object """
        ...

    @property
    def PasswordEdit(self) -> bool:
        """
        Get: PasswordEdit(self: IEditBoxes) -> bool
        Set: PasswordEdit(self: IEditBoxes) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IEditBoxes) -> object
        Set: Placement(self: IEditBoxes) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IEditBoxes) -> bool
        Set: PrintObject(self: IEditBoxes) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IEditBoxes) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IEditBoxes) -> str
        Set: Text(self: IEditBoxes) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IEditBoxes) -> float
        Set: Top(self: IEditBoxes) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IEditBoxes) -> bool
        Set: Visible(self: IEditBoxes) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IEditBoxes) -> float
        Set: Width(self: IEditBoxes) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IEditBoxes) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> EditBox:
        """ Add(self: IEditBoxes, Left: float, Top: float, Width: float, Height: float) -> EditBox """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IEditBoxes) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IEditBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IEditBoxes) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IEditBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IEditBoxes) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IEditBoxes) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IEditBoxes) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IEditBoxes) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IEditBoxes, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IEditBoxes, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IEditBoxes) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IEditBoxes) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IEditBoxes) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IEditBoxes) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IEditBoxes) """
        ...

    def _Dummy34(self): # -> 
        """ _Dummy34(self: IEditBoxes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IError: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IError) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IError) -> XlCreator """
        ...

    @property
    def Ignore(self) -> bool:
        """
        Get: Ignore(self: IError) -> bool
        Set: Ignore(self: IError) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IError) -> object """
        ...

    @property
    def Value(self) -> bool:
        """ Get: Value(self: IError) -> bool """
        ...



class IErrorBars: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IErrorBars) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IErrorBars) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IErrorBars) -> XlCreator """
        ...

    @property
    def EndStyle(self) -> XlEndStyleCap:
        """
        Get: EndStyle(self: IErrorBars) -> XlEndStyleCap
        Set: EndStyle(self: IErrorBars) = value
        """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IErrorBars) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IErrorBars) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IErrorBars) -> object """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: IErrorBars) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IErrorBars) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IErrorBars) -> object """
        ...


class IErrorCheckingOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IErrorCheckingOptions) -> Application """
        ...

    @property
    def BackgroundChecking(self) -> bool:
        """
        Get: BackgroundChecking(self: IErrorCheckingOptions) -> bool
        Set: BackgroundChecking(self: IErrorCheckingOptions) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IErrorCheckingOptions) -> XlCreator """
        ...

    @property
    def EmptyCellReferences(self) -> bool:
        """
        Get: EmptyCellReferences(self: IErrorCheckingOptions) -> bool
        Set: EmptyCellReferences(self: IErrorCheckingOptions) = value
        """
        ...

    @property
    def EvaluateToError(self) -> bool:
        """
        Get: EvaluateToError(self: IErrorCheckingOptions) -> bool
        Set: EvaluateToError(self: IErrorCheckingOptions) = value
        """
        ...

    @property
    def InconsistentFormula(self) -> bool:
        """
        Get: InconsistentFormula(self: IErrorCheckingOptions) -> bool
        Set: InconsistentFormula(self: IErrorCheckingOptions) = value
        """
        ...

    @property
    def InconsistentTableFormula(self) -> bool:
        """
        Get: InconsistentTableFormula(self: IErrorCheckingOptions) -> bool
        Set: InconsistentTableFormula(self: IErrorCheckingOptions) = value
        """
        ...

    @property
    def IndicatorColorIndex(self) -> XlColorIndex:
        """
        Get: IndicatorColorIndex(self: IErrorCheckingOptions) -> XlColorIndex
        Set: IndicatorColorIndex(self: IErrorCheckingOptions) = value
        """
        ...

    @property
    def ListDataValidation(self) -> bool:
        """
        Get: ListDataValidation(self: IErrorCheckingOptions) -> bool
        Set: ListDataValidation(self: IErrorCheckingOptions) = value
        """
        ...

    @property
    def NumberAsText(self) -> bool:
        """
        Get: NumberAsText(self: IErrorCheckingOptions) -> bool
        Set: NumberAsText(self: IErrorCheckingOptions) = value
        """
        ...

    @property
    def OmittedCells(self) -> bool:
        """
        Get: OmittedCells(self: IErrorCheckingOptions) -> bool
        Set: OmittedCells(self: IErrorCheckingOptions) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IErrorCheckingOptions) -> object """
        ...

    @property
    def TextDate(self) -> bool:
        """
        Get: TextDate(self: IErrorCheckingOptions) -> bool
        Set: TextDate(self: IErrorCheckingOptions) = value
        """
        ...

    @property
    def UnlockedFormulaCells(self) -> bool:
        """
        Get: UnlockedFormulaCells(self: IErrorCheckingOptions) -> bool
        Set: UnlockedFormulaCells(self: IErrorCheckingOptions) = value
        """
        ...



class IErrors: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IErrors) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IErrors) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IErrors) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IFileExportConverter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IFileExportConverter) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IFileExportConverter) -> XlCreator """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description(self: IFileExportConverter) -> str """
        ...

    @property
    def Extensions(self) -> str:
        """ Get: Extensions(self: IFileExportConverter) -> str """
        ...

    @property
    def FileFormat(self) -> int:
        """ Get: FileFormat(self: IFileExportConverter) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IFileExportConverter) -> object """
        ...



class IFileExportConverters(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IFileExportConverters) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IFileExportConverters) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IFileExportConverters) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IFileExportConverters) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IFilter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IFilter) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IFilter) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IFilter) -> XlCreator """
        ...

    @property
    def Criteria1(self) -> object:
        """ Get: Criteria1(self: IFilter) -> object """
        ...

    @property
    def Criteria2(self) -> object:
        """ Get: Criteria2(self: IFilter) -> object """
        ...

    @property
    def On(self) -> bool:
        """ Get: On(self: IFilter) -> bool """
        ...

    @property
    def Operator(self) -> XlAutoFilterOperator:
        """
        Get: Operator(self: IFilter) -> XlAutoFilterOperator
        Set: Operator(self: IFilter) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IFilter) -> object """
        ...

    @property
    def _Operator(self) -> XlAutoFilterOperator:
        """ Get: _Operator(self: IFilter) -> XlAutoFilterOperator """
        ...



class IFilters(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IFilters) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IFilters) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IFilters) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IFilters) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IFloor: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IFloor) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IFloor) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IFloor) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IFloor) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IFloor) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IFloor) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IFloor) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IFloor) -> object """
        ...

    @property
    def PictureType(self) -> object:
        """
        Get: PictureType(self: IFloor) -> object
        Set: PictureType(self: IFloor) = value
        """
        ...

    @property
    def Thickness(self) -> int:
        """
        Get: Thickness(self: IFloor) -> int
        Set: Thickness(self: IFloor) = value
        """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: IFloor) -> object """
        ...

    def Paste(self): # -> 
        """ Paste(self: IFloor) """
        ...

    def Select(self) -> object:
        """ Select(self: IFloor) -> object """
        ...


class IFont: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IFont) -> Application """
        ...

    @property
    def Background(self) -> object:
        """
        Get: Background(self: IFont) -> object
        Set: Background(self: IFont) = value
        """
        ...

    @property
    def Bold(self) -> object:
        """
        Get: Bold(self: IFont) -> object
        Set: Bold(self: IFont) = value
        """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: IFont) -> object
        Set: Color(self: IFont) = value
        """
        ...

    @property
    def ColorIndex(self) -> object:
        """
        Get: ColorIndex(self: IFont) -> object
        Set: ColorIndex(self: IFont) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IFont) -> XlCreator """
        ...

    @property
    def FontStyle(self) -> object:
        """
        Get: FontStyle(self: IFont) -> object
        Set: FontStyle(self: IFont) = value
        """
        ...

    @property
    def Italic(self) -> object:
        """
        Get: Italic(self: IFont) -> object
        Set: Italic(self: IFont) = value
        """
        ...

    @property
    def Name(self) -> object:
        """
        Get: Name(self: IFont) -> object
        Set: Name(self: IFont) = value
        """
        ...

    @property
    def OutlineFont(self) -> object:
        """
        Get: OutlineFont(self: IFont) -> object
        Set: OutlineFont(self: IFont) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IFont) -> object """
        ...

    @property
    def Shadow(self) -> object:
        """
        Get: Shadow(self: IFont) -> object
        Set: Shadow(self: IFont) = value
        """
        ...

    @property
    def Size(self) -> object:
        """
        Get: Size(self: IFont) -> object
        Set: Size(self: IFont) = value
        """
        ...

    @property
    def Strikethrough(self) -> object:
        """
        Get: Strikethrough(self: IFont) -> object
        Set: Strikethrough(self: IFont) = value
        """
        ...

    @property
    def Subscript(self) -> object:
        """
        Get: Subscript(self: IFont) -> object
        Set: Subscript(self: IFont) = value
        """
        ...

    @property
    def Superscript(self) -> object:
        """
        Get: Superscript(self: IFont) -> object
        Set: Superscript(self: IFont) = value
        """
        ...

    @property
    def ThemeColor(self) -> object:
        """
        Get: ThemeColor(self: IFont) -> object
        Set: ThemeColor(self: IFont) = value
        """
        ...

    @property
    def ThemeFont(self) -> XlThemeFont:
        """
        Get: ThemeFont(self: IFont) -> XlThemeFont
        Set: ThemeFont(self: IFont) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: IFont) -> object
        Set: TintAndShade(self: IFont) = value
        """
        ...

    @property
    def Underline(self) -> object:
        """
        Get: Underline(self: IFont) -> object
        Set: Underline(self: IFont) = value
        """
        ...



class IFormatColor: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IFormatColor) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: IFormatColor) -> object
        Set: Color(self: IFormatColor) = value
        """
        ...

    @property
    def ColorIndex(self) -> XlColorIndex:
        """
        Get: ColorIndex(self: IFormatColor) -> XlColorIndex
        Set: ColorIndex(self: IFormatColor) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IFormatColor) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IFormatColor) -> object """
        ...

    @property
    def ThemeColor(self) -> object:
        """
        Get: ThemeColor(self: IFormatColor) -> object
        Set: ThemeColor(self: IFormatColor) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: IFormatColor) -> object
        Set: TintAndShade(self: IFormatColor) = value
        """
        ...



class IFormatCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IFormatCondition) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: IFormatCondition) -> Range """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: IFormatCondition) -> Borders """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IFormatCondition) -> XlCreator """
        ...

    @property
    def DateOperator(self) -> XlTimePeriods:
        """
        Get: DateOperator(self: IFormatCondition) -> XlTimePeriods
        Set: DateOperator(self: IFormatCondition) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IFormatCondition) -> Font """
        ...

    @property
    def Formula1(self) -> str:
        """ Get: Formula1(self: IFormatCondition) -> str """
        ...

    @property
    def Formula2(self) -> str:
        """ Get: Formula2(self: IFormatCondition) -> str """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IFormatCondition) -> Interior """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: IFormatCondition) -> object
        Set: NumberFormat(self: IFormatCondition) = value
        """
        ...

    @property
    def Operator(self) -> int:
        """ Get: Operator(self: IFormatCondition) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IFormatCondition) -> object """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: IFormatCondition) -> int
        Set: Priority(self: IFormatCondition) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: IFormatCondition) -> bool """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: IFormatCondition) -> XlPivotConditionScope
        Set: ScopeType(self: IFormatCondition) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """
        Get: StopIfTrue(self: IFormatCondition) -> bool
        Set: StopIfTrue(self: IFormatCondition) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IFormatCondition) -> str
        Set: Text(self: IFormatCondition) = value
        """
        ...

    @property
    def TextOperator(self) -> XlContainsOperator:
        """
        Get: TextOperator(self: IFormatCondition) -> XlContainsOperator
        Set: TextOperator(self: IFormatCondition) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: IFormatCondition) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: IFormatCondition) """
        ...

    def Modify(self, Type:XlFormatConditionType, Operator:object, Formula1:object, Formula2:object): # -> 
        """ Modify(self: IFormatCondition, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: IFormatCondition, Range: Range) """
        ...

    def ModifyEx(self, Type:XlFormatConditionType, Operator:object, Formula1:object, Formula2:object, String:object, Operator2:object): # -> 
        """ ModifyEx(self: IFormatCondition, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object, String: object, Operator2: object) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: IFormatCondition) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: IFormatCondition) """
        ...


class IFormatConditions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IFormatConditions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IFormatConditions) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IFormatConditions) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IFormatConditions) -> object """
        ...


    def Add(self, Type:XlFormatConditionType, Operator:object, Formula1:object, Formula2:object, String:object, TextOperator:object, DateOperator:object, ScopeType:object) -> object:
        """ Add(self: IFormatConditions, Type: XlFormatConditionType, Operator: object, Formula1: object, Formula2: object, String: object, TextOperator: object, DateOperator: object, ScopeType: object) -> object """
        ...

    def AddAboveAverage(self) -> object:
        """ AddAboveAverage(self: IFormatConditions) -> object """
        ...

    def AddColorScale(self, ColorScaleType:int) -> object:
        """ AddColorScale(self: IFormatConditions, ColorScaleType: int) -> object """
        ...

    def AddDatabar(self) -> object:
        """ AddDatabar(self: IFormatConditions) -> object """
        ...

    def AddIconSetCondition(self) -> object:
        """ AddIconSetCondition(self: IFormatConditions) -> object """
        ...

    def AddTop10(self) -> object:
        """ AddTop10(self: IFormatConditions) -> object """
        ...

    def AddUniqueValues(self) -> object:
        """ AddUniqueValues(self: IFormatConditions) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: IFormatConditions) """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IFormatConditions, Index: object) -> object """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IFreeformBuilder: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IFreeformBuilder) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IFreeformBuilder) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IFreeformBuilder) -> object """
        ...


    def AddNodes(self, SegmentType, EditingType, X1:Single, Y1:Single, X2:object, Y2:object, X3:object, Y3:object): # ->  # Not found arg types: {'EditingType': 'MsoEditingType', 'SegmentType': 'MsoSegmentType'}
        """ AddNodes(self: IFreeformBuilder, SegmentType: MsoSegmentType, EditingType: MsoEditingType, X1: Single, Y1: Single, X2: object, Y2: object, X3: object, Y3: object) """
        ...

    def ConvertToShape(self) -> Shape:
        """ ConvertToShape(self: IFreeformBuilder) -> Shape """
        ...


class IFullSeriesCollection(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IFullSeriesCollection) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IFullSeriesCollection) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IFullSeriesCollection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IFullSeriesCollection) -> object """
        ...


    def Item(self, Index:object) -> Series:
        """ Item(self: IFullSeriesCollection, Index: object) -> Series """
        ...

    def _Default(self, Index:object) -> Series:
        """ _Default(self: IFullSeriesCollection, Index: object) -> Series """
        ...


class IGraphic: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IGraphic) -> Application """
        ...

    @property
    def Brightness(self) -> Single:
        """
        Get: Brightness(self: IGraphic) -> Single
        Set: Brightness(self: IGraphic) = value
        """
        ...

    @property
    def ColorType(self): # -> MsoPictureColorType
        """
        Get: ColorType(self: IGraphic) -> MsoPictureColorType
        Set: ColorType(self: IGraphic) = value
        """
        ...

    @property
    def Contrast(self) -> Single:
        """
        Get: Contrast(self: IGraphic) -> Single
        Set: Contrast(self: IGraphic) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IGraphic) -> XlCreator """
        ...

    @property
    def CropBottom(self) -> Single:
        """
        Get: CropBottom(self: IGraphic) -> Single
        Set: CropBottom(self: IGraphic) = value
        """
        ...

    @property
    def CropLeft(self) -> Single:
        """
        Get: CropLeft(self: IGraphic) -> Single
        Set: CropLeft(self: IGraphic) = value
        """
        ...

    @property
    def CropRight(self) -> Single:
        """
        Get: CropRight(self: IGraphic) -> Single
        Set: CropRight(self: IGraphic) = value
        """
        ...

    @property
    def CropTop(self) -> Single:
        """
        Get: CropTop(self: IGraphic) -> Single
        Set: CropTop(self: IGraphic) = value
        """
        ...

    @property
    def Filename(self) -> str:
        """
        Get: Filename(self: IGraphic) -> str
        Set: Filename(self: IGraphic) = value
        """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: IGraphic) -> Single
        Set: Height(self: IGraphic) = value
        """
        ...

    @property
    def LockAspectRatio(self): # -> MsoTriState
        """
        Get: LockAspectRatio(self: IGraphic) -> MsoTriState
        Set: LockAspectRatio(self: IGraphic) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IGraphic) -> object """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: IGraphic) -> Single
        Set: Width(self: IGraphic) = value
        """
        ...



class IGridlines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IGridlines) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IGridlines) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IGridlines) -> XlCreator """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IGridlines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IGridlines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IGridlines) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: IGridlines) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IGridlines) -> object """
        ...


class IGroupBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: IGroupBox) -> object
        Set: Accelerator(self: IGroupBox) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IGroupBox) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IGroupBox) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IGroupBox) -> str
        Set: Caption(self: IGroupBox) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IGroupBox) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: IGroupBox) -> bool
        Set: Display3DShading(self: IGroupBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IGroupBox) -> bool
        Set: Enabled(self: IGroupBox) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IGroupBox) -> float
        Set: Height(self: IGroupBox) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IGroupBox) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IGroupBox) -> float
        Set: Left(self: IGroupBox) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IGroupBox) -> bool
        Set: Locked(self: IGroupBox) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IGroupBox) -> bool
        Set: LockedText(self: IGroupBox) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IGroupBox) -> str
        Set: Name(self: IGroupBox) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IGroupBox) -> str
        Set: OnAction(self: IGroupBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IGroupBox) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: IGroupBox) -> object
        Set: PhoneticAccelerator(self: IGroupBox) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IGroupBox) -> object
        Set: Placement(self: IGroupBox) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IGroupBox) -> bool
        Set: PrintObject(self: IGroupBox) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IGroupBox) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IGroupBox) -> str
        Set: Text(self: IGroupBox) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IGroupBox) -> float
        Set: Top(self: IGroupBox) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IGroupBox) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IGroupBox) -> bool
        Set: Visible(self: IGroupBox) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IGroupBox) -> float
        Set: Width(self: IGroupBox) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IGroupBox) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: IGroupBox) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IGroupBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IGroupBox) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IGroupBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IGroupBox) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IGroupBox) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IGroupBox) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IGroupBox, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IGroupBox) -> object """
        ...


class IGroupBoxes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: IGroupBoxes) -> object
        Set: Accelerator(self: IGroupBoxes) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IGroupBoxes) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IGroupBoxes) -> str
        Set: Caption(self: IGroupBoxes) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IGroupBoxes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IGroupBoxes) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: IGroupBoxes) -> bool
        Set: Display3DShading(self: IGroupBoxes) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IGroupBoxes) -> bool
        Set: Enabled(self: IGroupBoxes) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IGroupBoxes) -> float
        Set: Height(self: IGroupBoxes) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IGroupBoxes) -> float
        Set: Left(self: IGroupBoxes) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IGroupBoxes) -> bool
        Set: Locked(self: IGroupBoxes) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IGroupBoxes) -> bool
        Set: LockedText(self: IGroupBoxes) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IGroupBoxes) -> str
        Set: OnAction(self: IGroupBoxes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IGroupBoxes) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: IGroupBoxes) -> object
        Set: PhoneticAccelerator(self: IGroupBoxes) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IGroupBoxes) -> object
        Set: Placement(self: IGroupBoxes) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IGroupBoxes) -> bool
        Set: PrintObject(self: IGroupBoxes) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IGroupBoxes) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IGroupBoxes) -> str
        Set: Text(self: IGroupBoxes) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IGroupBoxes) -> float
        Set: Top(self: IGroupBoxes) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IGroupBoxes) -> bool
        Set: Visible(self: IGroupBoxes) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IGroupBoxes) -> float
        Set: Width(self: IGroupBoxes) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IGroupBoxes) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> GroupBox:
        """ Add(self: IGroupBoxes, Left: float, Top: float, Width: float, Height: float) -> GroupBox """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IGroupBoxes) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IGroupBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IGroupBoxes) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IGroupBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IGroupBoxes) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IGroupBoxes) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IGroupBoxes) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IGroupBoxes) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IGroupBoxes, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IGroupBoxes, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IGroupBoxes) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IGroupBoxes) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IGroupBoxes) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IGroupBoxes) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IGroupBoxes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IGroupObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IGroupObject) -> bool
        Set: AddIndent(self: IGroupObject) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IGroupObject) -> Application """
        ...

    @property
    def ArrowHeadLength(self) -> object:
        """
        Get: ArrowHeadLength(self: IGroupObject) -> object
        Set: ArrowHeadLength(self: IGroupObject) = value
        """
        ...

    @property
    def ArrowHeadStyle(self) -> object:
        """
        Get: ArrowHeadStyle(self: IGroupObject) -> object
        Set: ArrowHeadStyle(self: IGroupObject) = value
        """
        ...

    @property
    def ArrowHeadWidth(self) -> object:
        """
        Get: ArrowHeadWidth(self: IGroupObject) -> object
        Set: ArrowHeadWidth(self: IGroupObject) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IGroupObject) -> bool
        Set: AutoSize(self: IGroupObject) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IGroupObject) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IGroupObject) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IGroupObject) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IGroupObject) -> bool
        Set: Enabled(self: IGroupObject) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IGroupObject) -> Font """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IGroupObject) -> float
        Set: Height(self: IGroupObject) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IGroupObject) -> object
        Set: HorizontalAlignment(self: IGroupObject) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IGroupObject) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IGroupObject) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IGroupObject) -> float
        Set: Left(self: IGroupObject) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IGroupObject) -> bool
        Set: Locked(self: IGroupObject) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IGroupObject) -> str
        Set: Name(self: IGroupObject) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IGroupObject) -> str
        Set: OnAction(self: IGroupObject) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IGroupObject) -> object
        Set: Orientation(self: IGroupObject) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IGroupObject) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IGroupObject) -> object
        Set: Placement(self: IGroupObject) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IGroupObject) -> bool
        Set: PrintObject(self: IGroupObject) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IGroupObject) -> int
        Set: ReadingOrder(self: IGroupObject) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: IGroupObject) -> bool
        Set: RoundedCorners(self: IGroupObject) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IGroupObject) -> bool
        Set: Shadow(self: IGroupObject) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IGroupObject) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IGroupObject) -> float
        Set: Top(self: IGroupObject) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IGroupObject) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IGroupObject) -> object
        Set: VerticalAlignment(self: IGroupObject) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IGroupObject) -> bool
        Set: Visible(self: IGroupObject) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IGroupObject) -> float
        Set: Width(self: IGroupObject) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IGroupObject) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IGroupObject) -> int
        Set: _Default(self: IGroupObject) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: IGroupObject) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IGroupObject, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IGroupObject) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IGroupObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IGroupObject) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IGroupObject) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IGroupObject) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IGroupObject, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IGroupObject) -> object """
        ...

    def Ungroup(self) -> object:
        """ Ungroup(self: IGroupObject) -> object """
        ...

    def _Dummy27(self): # -> 
        """ _Dummy27(self: IGroupObject) """
        ...

    def _Dummy28(self): # -> 
        """ _Dummy28(self: IGroupObject) """
        ...

    def _Dummy30(self): # -> 
        """ _Dummy30(self: IGroupObject) """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: IGroupObject) """
        ...

    def _Dummy37(self): # -> 
        """ _Dummy37(self: IGroupObject) """
        ...

    def _Dummy38(self): # -> 
        """ _Dummy38(self: IGroupObject) """
        ...

    def _Dummy41(self): # -> 
        """ _Dummy41(self: IGroupObject) """
        ...

    def _Dummy42(self): # -> 
        """ _Dummy42(self: IGroupObject) """
        ...

    def _Dummy43(self): # -> 
        """ _Dummy43(self: IGroupObject) """
        ...

    def _Dummy44(self): # -> 
        """ _Dummy44(self: IGroupObject) """
        ...

    def _Dummy45(self): # -> 
        """ _Dummy45(self: IGroupObject) """
        ...

    def _Dummy47(self): # -> 
        """ _Dummy47(self: IGroupObject) """
        ...

    def _Dummy48(self): # -> 
        """ _Dummy48(self: IGroupObject) """
        ...

    def _Dummy50(self): # -> 
        """ _Dummy50(self: IGroupObject) """
        ...

    def _Dummy52(self): # -> 
        """ _Dummy52(self: IGroupObject) """
        ...

    def _Dummy53(self): # -> 
        """ _Dummy53(self: IGroupObject) """
        ...

    def _Dummy54(self): # -> 
        """ _Dummy54(self: IGroupObject) """
        ...

    def _Dummy55(self): # -> 
        """ _Dummy55(self: IGroupObject) """
        ...

    def _Dummy56(self): # -> 
        """ _Dummy56(self: IGroupObject) """
        ...

    def _Dummy57(self): # -> 
        """ _Dummy57(self: IGroupObject) """
        ...

    def _Dummy58(self): # -> 
        """ _Dummy58(self: IGroupObject) """
        ...

    def _Dummy59(self): # -> 
        """ _Dummy59(self: IGroupObject) """
        ...

    def _Dummy60(self): # -> 
        """ _Dummy60(self: IGroupObject) """
        ...

    def _Dummy61(self): # -> 
        """ _Dummy61(self: IGroupObject) """
        ...

    def _Dummy62(self): # -> 
        """ _Dummy62(self: IGroupObject) """
        ...

    def _Dummy63(self): # -> 
        """ _Dummy63(self: IGroupObject) """
        ...

    def _Dummy65(self): # -> 
        """ _Dummy65(self: IGroupObject) """
        ...

    def _Dummy66(self): # -> 
        """ _Dummy66(self: IGroupObject) """
        ...

    def _Dummy67(self): # -> 
        """ _Dummy67(self: IGroupObject) """
        ...

    def _Dummy68(self): # -> 
        """ _Dummy68(self: IGroupObject) """
        ...

    def _Dummy70(self): # -> 
        """ _Dummy70(self: IGroupObject) """
        ...

    def _Dummy72(self): # -> 
        """ _Dummy72(self: IGroupObject) """
        ...

    def _Dummy73(self): # -> 
        """ _Dummy73(self: IGroupObject) """
        ...

    def _Dummy75(self): # -> 
        """ _Dummy75(self: IGroupObject) """
        ...

    def _Dummy77(self): # -> 
        """ _Dummy77(self: IGroupObject) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IGroupObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IGroupObjects) -> bool
        Set: AddIndent(self: IGroupObjects) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IGroupObjects) -> Application """
        ...

    @property
    def ArrowHeadLength(self) -> object:
        """
        Get: ArrowHeadLength(self: IGroupObjects) -> object
        Set: ArrowHeadLength(self: IGroupObjects) = value
        """
        ...

    @property
    def ArrowHeadStyle(self) -> object:
        """
        Get: ArrowHeadStyle(self: IGroupObjects) -> object
        Set: ArrowHeadStyle(self: IGroupObjects) = value
        """
        ...

    @property
    def ArrowHeadWidth(self) -> object:
        """
        Get: ArrowHeadWidth(self: IGroupObjects) -> object
        Set: ArrowHeadWidth(self: IGroupObjects) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IGroupObjects) -> bool
        Set: AutoSize(self: IGroupObjects) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IGroupObjects) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IGroupObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IGroupObjects) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IGroupObjects) -> bool
        Set: Enabled(self: IGroupObjects) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IGroupObjects) -> Font """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IGroupObjects) -> float
        Set: Height(self: IGroupObjects) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IGroupObjects) -> object
        Set: HorizontalAlignment(self: IGroupObjects) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IGroupObjects) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IGroupObjects) -> float
        Set: Left(self: IGroupObjects) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IGroupObjects) -> bool
        Set: Locked(self: IGroupObjects) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IGroupObjects) -> str
        Set: OnAction(self: IGroupObjects) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IGroupObjects) -> object
        Set: Orientation(self: IGroupObjects) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IGroupObjects) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IGroupObjects) -> object
        Set: Placement(self: IGroupObjects) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IGroupObjects) -> bool
        Set: PrintObject(self: IGroupObjects) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IGroupObjects) -> int
        Set: ReadingOrder(self: IGroupObjects) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: IGroupObjects) -> bool
        Set: RoundedCorners(self: IGroupObjects) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IGroupObjects) -> bool
        Set: Shadow(self: IGroupObjects) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IGroupObjects) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IGroupObjects) -> float
        Set: Top(self: IGroupObjects) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IGroupObjects) -> object
        Set: VerticalAlignment(self: IGroupObjects) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IGroupObjects) -> bool
        Set: Visible(self: IGroupObjects) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IGroupObjects) -> float
        Set: Width(self: IGroupObjects) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IGroupObjects) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IGroupObjects) -> int
        Set: _Default(self: IGroupObjects) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: IGroupObjects) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IGroupObjects, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IGroupObjects) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IGroupObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IGroupObjects) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IGroupObjects) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IGroupObjects) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IGroupObjects) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IGroupObjects, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IGroupObjects, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IGroupObjects) -> object """
        ...

    def Ungroup(self) -> object:
        """ Ungroup(self: IGroupObjects) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IGroupObjects) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IGroupObjects) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IGroupObjects) """
        ...

    def _Dummy27(self): # -> 
        """ _Dummy27(self: IGroupObjects) """
        ...

    def _Dummy28(self): # -> 
        """ _Dummy28(self: IGroupObjects) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IGroupObjects) """
        ...

    def _Dummy30(self): # -> 
        """ _Dummy30(self: IGroupObjects) """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: IGroupObjects) """
        ...

    def _Dummy37(self): # -> 
        """ _Dummy37(self: IGroupObjects) """
        ...

    def _Dummy38(self): # -> 
        """ _Dummy38(self: IGroupObjects) """
        ...

    def _Dummy41(self): # -> 
        """ _Dummy41(self: IGroupObjects) """
        ...

    def _Dummy42(self): # -> 
        """ _Dummy42(self: IGroupObjects) """
        ...

    def _Dummy43(self): # -> 
        """ _Dummy43(self: IGroupObjects) """
        ...

    def _Dummy44(self): # -> 
        """ _Dummy44(self: IGroupObjects) """
        ...

    def _Dummy45(self): # -> 
        """ _Dummy45(self: IGroupObjects) """
        ...

    def _Dummy47(self): # -> 
        """ _Dummy47(self: IGroupObjects) """
        ...

    def _Dummy48(self): # -> 
        """ _Dummy48(self: IGroupObjects) """
        ...

    def _Dummy50(self): # -> 
        """ _Dummy50(self: IGroupObjects) """
        ...

    def _Dummy52(self): # -> 
        """ _Dummy52(self: IGroupObjects) """
        ...

    def _Dummy53(self): # -> 
        """ _Dummy53(self: IGroupObjects) """
        ...

    def _Dummy54(self): # -> 
        """ _Dummy54(self: IGroupObjects) """
        ...

    def _Dummy55(self): # -> 
        """ _Dummy55(self: IGroupObjects) """
        ...

    def _Dummy56(self): # -> 
        """ _Dummy56(self: IGroupObjects) """
        ...

    def _Dummy57(self): # -> 
        """ _Dummy57(self: IGroupObjects) """
        ...

    def _Dummy58(self): # -> 
        """ _Dummy58(self: IGroupObjects) """
        ...

    def _Dummy59(self): # -> 
        """ _Dummy59(self: IGroupObjects) """
        ...

    def _Dummy60(self): # -> 
        """ _Dummy60(self: IGroupObjects) """
        ...

    def _Dummy61(self): # -> 
        """ _Dummy61(self: IGroupObjects) """
        ...

    def _Dummy62(self): # -> 
        """ _Dummy62(self: IGroupObjects) """
        ...

    def _Dummy63(self): # -> 
        """ _Dummy63(self: IGroupObjects) """
        ...

    def _Dummy65(self): # -> 
        """ _Dummy65(self: IGroupObjects) """
        ...

    def _Dummy66(self): # -> 
        """ _Dummy66(self: IGroupObjects) """
        ...

    def _Dummy67(self): # -> 
        """ _Dummy67(self: IGroupObjects) """
        ...

    def _Dummy68(self): # -> 
        """ _Dummy68(self: IGroupObjects) """
        ...

    def _Dummy70(self): # -> 
        """ _Dummy70(self: IGroupObjects) """
        ...

    def _Dummy72(self): # -> 
        """ _Dummy72(self: IGroupObjects) """
        ...

    def _Dummy73(self): # -> 
        """ _Dummy73(self: IGroupObjects) """
        ...

    def _Dummy75(self): # -> 
        """ _Dummy75(self: IGroupObjects) """
        ...

    def _Dummy77(self): # -> 
        """ _Dummy77(self: IGroupObjects) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IGroupShapes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IGroupShapes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IGroupShapes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IGroupShapes) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IGroupShapes) -> object """
        ...


    def Item(self, Index:object) -> Shape:
        """ Item(self: IGroupShapes, Index: object) -> Shape """
        ...

    def _Default(self, Index:object) -> Shape:
        """ _Default(self: IGroupShapes, Index: object) -> Shape """
        ...


class IHeaderFooter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Picture(self) -> Graphic:
        """ Get: Picture(self: IHeaderFooter) -> Graphic """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IHeaderFooter) -> str
        Set: Text(self: IHeaderFooter) = value
        """
        ...



class IHiLoLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IHiLoLines) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IHiLoLines) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IHiLoLines) -> XlCreator """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IHiLoLines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IHiLoLines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IHiLoLines) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: IHiLoLines) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IHiLoLines) -> object """
        ...


class IHPageBreak: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IHPageBreak) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IHPageBreak) -> XlCreator """
        ...

    @property
    def Extent(self) -> XlPageBreakExtent:
        """ Get: Extent(self: IHPageBreak) -> XlPageBreakExtent """
        ...

    @property
    def Location(self) -> Range:
        """
        Get: Location(self: IHPageBreak) -> Range
        Set: Location(self: IHPageBreak) = value
        """
        ...

    @property
    def Parent(self) -> Worksheet:
        """ Get: Parent(self: IHPageBreak) -> Worksheet """
        ...

    @property
    def Type(self) -> XlPageBreak:
        """
        Get: Type(self: IHPageBreak) -> XlPageBreak
        Set: Type(self: IHPageBreak) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: IHPageBreak) """
        ...

    def DragOff(self, Direction:XlDirection, RegionIndex:int): # -> 
        """ DragOff(self: IHPageBreak, Direction: XlDirection, RegionIndex: int) """
        ...


class IHPageBreaks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IHPageBreaks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IHPageBreaks) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IHPageBreaks) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IHPageBreaks) -> object """
        ...


    def Add(self, Before:object) -> HPageBreak:
        """ Add(self: IHPageBreaks, Before: object) -> HPageBreak """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IHyperlink: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Address(self) -> str:
        """
        Get: Address(self: IHyperlink) -> str
        Set: Address(self: IHyperlink) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IHyperlink) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IHyperlink) -> XlCreator """
        ...

    @property
    def EmailSubject(self) -> str:
        """
        Get: EmailSubject(self: IHyperlink) -> str
        Set: EmailSubject(self: IHyperlink) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IHyperlink) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IHyperlink) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: IHyperlink) -> Range """
        ...

    @property
    def ScreenTip(self) -> str:
        """
        Get: ScreenTip(self: IHyperlink) -> str
        Set: ScreenTip(self: IHyperlink) = value
        """
        ...

    @property
    def Shape(self) -> Shape:
        """ Get: Shape(self: IHyperlink) -> Shape """
        ...

    @property
    def SubAddress(self) -> str:
        """
        Get: SubAddress(self: IHyperlink) -> str
        Set: SubAddress(self: IHyperlink) = value
        """
        ...

    @property
    def TextToDisplay(self) -> str:
        """
        Get: TextToDisplay(self: IHyperlink) -> str
        Set: TextToDisplay(self: IHyperlink) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: IHyperlink) -> int """
        ...


    def AddToFavorites(self): # -> 
        """ AddToFavorites(self: IHyperlink) """
        ...

    def CreateNewDocument(self, Filename:str, EditNow:bool, Overwrite:bool): # -> 
        """ CreateNewDocument(self: IHyperlink, Filename: str, EditNow: bool, Overwrite: bool) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IHyperlink) """
        ...

    def Follow(self, NewWindow:object, AddHistory:object, ExtraInfo:object, Method:object, HeaderInfo:object): # -> 
        """ Follow(self: IHyperlink, NewWindow: object, AddHistory: object, ExtraInfo: object, Method: object, HeaderInfo: object) """
        ...


class IHyperlinks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IHyperlinks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IHyperlinks) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IHyperlinks) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IHyperlinks) -> object """
        ...


    def Add(self, Anchor:object, Address:str, SubAddress:object, ScreenTip:object, TextToDisplay:object) -> object:
        """ Add(self: IHyperlinks, Anchor: object, Address: str, SubAddress: object, ScreenTip: object, TextToDisplay: object) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: IHyperlinks) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IIcon: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IIcon) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IIcon) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IIcon) -> int """
        ...

    @property
    def Parent(self) -> IconSet:
        """ Get: Parent(self: IIcon) -> IconSet """
        ...



class IIconCriteria(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: IIconCriteria) -> int """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IIconCriterion: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Icon(self) -> XlIcon:
        """
        Get: Icon(self: IIconCriterion) -> XlIcon
        Set: Icon(self: IIconCriterion) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IIconCriterion) -> int """
        ...

    @property
    def Operator(self) -> int:
        """
        Get: Operator(self: IIconCriterion) -> int
        Set: Operator(self: IIconCriterion) = value
        """
        ...

    @property
    def Type(self) -> XlConditionValueTypes:
        """
        Get: Type(self: IIconCriterion) -> XlConditionValueTypes
        Set: Type(self: IIconCriterion) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: IIconCriterion) -> object
        Set: Value(self: IIconCriterion) = value
        """
        ...



class IIconSet(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IIconSet) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IIconSet) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IIconSet) -> XlCreator """
        ...

    @property
    def ID(self) -> XlIconSet:
        """ Get: ID(self: IIconSet) -> XlIconSet """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IIconSet) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IIconSetCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IIconSetCondition) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: IIconSetCondition) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IIconSetCondition) -> XlCreator """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IIconSetCondition) -> str
        Set: Formula(self: IIconSetCondition) = value
        """
        ...

    @property
    def IconCriteria(self) -> IconCriteria:
        """ Get: IconCriteria(self: IIconSetCondition) -> IconCriteria """
        ...

    @property
    def IconSet(self) -> object:
        """
        Get: IconSet(self: IIconSetCondition) -> object
        Set: IconSet(self: IIconSetCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IIconSetCondition) -> object """
        ...

    @property
    def PercentileValues(self) -> bool:
        """
        Get: PercentileValues(self: IIconSetCondition) -> bool
        Set: PercentileValues(self: IIconSetCondition) = value
        """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: IIconSetCondition) -> int
        Set: Priority(self: IIconSetCondition) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: IIconSetCondition) -> bool """
        ...

    @property
    def ReverseOrder(self) -> bool:
        """
        Get: ReverseOrder(self: IIconSetCondition) -> bool
        Set: ReverseOrder(self: IIconSetCondition) = value
        """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: IIconSetCondition) -> XlPivotConditionScope
        Set: ScopeType(self: IIconSetCondition) = value
        """
        ...

    @property
    def ShowIconOnly(self) -> bool:
        """
        Get: ShowIconOnly(self: IIconSetCondition) -> bool
        Set: ShowIconOnly(self: IIconSetCondition) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """ Get: StopIfTrue(self: IIconSetCondition) -> bool """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: IIconSetCondition) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: IIconSetCondition) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: IIconSetCondition, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: IIconSetCondition) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: IIconSetCondition) """
        ...


class IIconSets(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IIconSets) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IIconSets) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IIconSets) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IIconSets) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IInterior: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IInterior) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: IInterior) -> object
        Set: Color(self: IInterior) = value
        """
        ...

    @property
    def ColorIndex(self) -> object:
        """
        Get: ColorIndex(self: IInterior) -> object
        Set: ColorIndex(self: IInterior) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IInterior) -> XlCreator """
        ...

    @property
    def Gradient(self) -> object:
        """ Get: Gradient(self: IInterior) -> object """
        ...

    @property
    def InvertIfNegative(self) -> object:
        """
        Get: InvertIfNegative(self: IInterior) -> object
        Set: InvertIfNegative(self: IInterior) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IInterior) -> object """
        ...

    @property
    def Pattern(self) -> object:
        """
        Get: Pattern(self: IInterior) -> object
        Set: Pattern(self: IInterior) = value
        """
        ...

    @property
    def PatternColor(self) -> object:
        """
        Get: PatternColor(self: IInterior) -> object
        Set: PatternColor(self: IInterior) = value
        """
        ...

    @property
    def PatternColorIndex(self) -> object:
        """
        Get: PatternColorIndex(self: IInterior) -> object
        Set: PatternColorIndex(self: IInterior) = value
        """
        ...

    @property
    def PatternThemeColor(self) -> object:
        """
        Get: PatternThemeColor(self: IInterior) -> object
        Set: PatternThemeColor(self: IInterior) = value
        """
        ...

    @property
    def PatternTintAndShade(self) -> object:
        """
        Get: PatternTintAndShade(self: IInterior) -> object
        Set: PatternTintAndShade(self: IInterior) = value
        """
        ...

    @property
    def ThemeColor(self) -> object:
        """
        Get: ThemeColor(self: IInterior) -> object
        Set: ThemeColor(self: IInterior) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: IInterior) -> object
        Set: TintAndShade(self: IInterior) = value
        """
        ...



class ILabel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: ILabel) -> object
        Set: Accelerator(self: ILabel) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ILabel) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: ILabel) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ILabel) -> str
        Set: Caption(self: ILabel) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ILabel) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ILabel) -> bool
        Set: Enabled(self: ILabel) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ILabel) -> float
        Set: Height(self: ILabel) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ILabel) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ILabel) -> float
        Set: Left(self: ILabel) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ILabel) -> bool
        Set: Locked(self: ILabel) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: ILabel) -> bool
        Set: LockedText(self: ILabel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ILabel) -> str
        Set: Name(self: ILabel) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ILabel) -> str
        Set: OnAction(self: ILabel) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ILabel) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: ILabel) -> object
        Set: PhoneticAccelerator(self: ILabel) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ILabel) -> object
        Set: Placement(self: ILabel) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ILabel) -> bool
        Set: PrintObject(self: ILabel) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ILabel) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ILabel) -> str
        Set: Text(self: ILabel) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ILabel) -> float
        Set: Top(self: ILabel) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: ILabel) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ILabel) -> bool
        Set: Visible(self: ILabel) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ILabel) -> float
        Set: Width(self: ILabel) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ILabel) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: ILabel) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: ILabel, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ILabel) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ILabel, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ILabel) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ILabel) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ILabel) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ILabel, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ILabel) -> object """
        ...

    def _Dummy33(self): # -> 
        """ _Dummy33(self: ILabel) """
        ...


class ILabels(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: ILabels) -> object
        Set: Accelerator(self: ILabels) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ILabels) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ILabels) -> str
        Set: Caption(self: ILabels) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ILabels) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ILabels) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ILabels) -> bool
        Set: Enabled(self: ILabels) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ILabels) -> float
        Set: Height(self: ILabels) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ILabels) -> float
        Set: Left(self: ILabels) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ILabels) -> bool
        Set: Locked(self: ILabels) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: ILabels) -> bool
        Set: LockedText(self: ILabels) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ILabels) -> str
        Set: OnAction(self: ILabels) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ILabels) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: ILabels) -> object
        Set: PhoneticAccelerator(self: ILabels) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ILabels) -> object
        Set: Placement(self: ILabels) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ILabels) -> bool
        Set: PrintObject(self: ILabels) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ILabels) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ILabels) -> str
        Set: Text(self: ILabels) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ILabels) -> float
        Set: Top(self: ILabels) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ILabels) -> bool
        Set: Visible(self: ILabels) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ILabels) -> float
        Set: Width(self: ILabels) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ILabels) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Label:
        """ Add(self: ILabels, Left: float, Top: float, Width: float, Height: float) -> Label """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: ILabels) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: ILabels, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ILabels) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ILabels, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ILabels) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ILabels) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ILabels) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: ILabels) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: ILabels, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ILabels, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ILabels) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: ILabels) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: ILabels) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: ILabels) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: ILabels) """
        ...

    def _Dummy33(self): # -> 
        """ _Dummy33(self: ILabels) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class ILeaderLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ILeaderLines) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ILeaderLines) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ILeaderLines) -> XlCreator """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ILeaderLines) -> ChartFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ILeaderLines) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: ILeaderLines) """
        ...

    def Select(self): # -> 
        """ Select(self: ILeaderLines) """
        ...


class ILegend: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ILegend) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: ILegend) -> object
        Set: AutoScaleFont(self: ILegend) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ILegend) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ILegend) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: ILegend) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: ILegend) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ILegend) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ILegend) -> float
        Set: Height(self: ILegend) = value
        """
        ...

    @property
    def IncludeInLayout(self) -> bool:
        """
        Get: IncludeInLayout(self: ILegend) -> bool
        Set: IncludeInLayout(self: ILegend) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ILegend) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ILegend) -> float
        Set: Left(self: ILegend) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ILegend) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ILegend) -> object """
        ...

    @property
    def Position(self) -> XlLegendPosition:
        """
        Get: Position(self: ILegend) -> XlLegendPosition
        Set: Position(self: ILegend) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: ILegend) -> bool
        Set: Shadow(self: ILegend) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ILegend) -> float
        Set: Top(self: ILegend) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ILegend) -> float
        Set: Width(self: ILegend) = value
        """
        ...


    def Clear(self) -> object:
        """ Clear(self: ILegend) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ILegend) -> object """
        ...

    def LegendEntries(self, Index:object) -> object:
        """ LegendEntries(self: ILegend, Index: object) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ILegend) -> object """
        ...


class ILegendEntries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ILegendEntries) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ILegendEntries) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ILegendEntries) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ILegendEntries) -> object """
        ...


    def Item(self, Index:object) -> LegendEntry:
        """ Item(self: ILegendEntries, Index: object) -> LegendEntry """
        ...

    def _Default(self, Index:object) -> LegendEntry:
        """ _Default(self: ILegendEntries, Index: object) -> LegendEntry """
        ...


class ILegendEntry: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ILegendEntry) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: ILegendEntry) -> object
        Set: AutoScaleFont(self: ILegendEntry) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ILegendEntry) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: ILegendEntry) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ILegendEntry) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: ILegendEntry) -> float """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ILegendEntry) -> int """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: ILegendEntry) -> float """
        ...

    @property
    def LegendKey(self) -> LegendKey:
        """ Get: LegendKey(self: ILegendEntry) -> LegendKey """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ILegendEntry) -> object """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: ILegendEntry) -> float """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: ILegendEntry) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: ILegendEntry) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ILegendEntry) -> object """
        ...


class ILegendKey: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ILegendKey) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ILegendKey) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ILegendKey) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: ILegendKey) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ILegendKey) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: ILegendKey) -> float """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ILegendKey) -> Interior """
        ...

    @property
    def InvertIfNegative(self) -> bool:
        """
        Get: InvertIfNegative(self: ILegendKey) -> bool
        Set: InvertIfNegative(self: ILegendKey) = value
        """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: ILegendKey) -> float """
        ...

    @property
    def MarkerBackgroundColor(self) -> int:
        """
        Get: MarkerBackgroundColor(self: ILegendKey) -> int
        Set: MarkerBackgroundColor(self: ILegendKey) = value
        """
        ...

    @property
    def MarkerBackgroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerBackgroundColorIndex(self: ILegendKey) -> XlColorIndex
        Set: MarkerBackgroundColorIndex(self: ILegendKey) = value
        """
        ...

    @property
    def MarkerForegroundColor(self) -> int:
        """
        Get: MarkerForegroundColor(self: ILegendKey) -> int
        Set: MarkerForegroundColor(self: ILegendKey) = value
        """
        ...

    @property
    def MarkerForegroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerForegroundColorIndex(self: ILegendKey) -> XlColorIndex
        Set: MarkerForegroundColorIndex(self: ILegendKey) = value
        """
        ...

    @property
    def MarkerSize(self) -> int:
        """
        Get: MarkerSize(self: ILegendKey) -> int
        Set: MarkerSize(self: ILegendKey) = value
        """
        ...

    @property
    def MarkerStyle(self) -> XlMarkerStyle:
        """
        Get: MarkerStyle(self: ILegendKey) -> XlMarkerStyle
        Set: MarkerStyle(self: ILegendKey) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ILegendKey) -> object """
        ...

    @property
    def PictureType(self) -> int:
        """
        Get: PictureType(self: ILegendKey) -> int
        Set: PictureType(self: ILegendKey) = value
        """
        ...

    @property
    def PictureUnit(self) -> int:
        """
        Get: PictureUnit(self: ILegendKey) -> int
        Set: PictureUnit(self: ILegendKey) = value
        """
        ...

    @property
    def PictureUnit2(self) -> float:
        """
        Get: PictureUnit2(self: ILegendKey) -> float
        Set: PictureUnit2(self: ILegendKey) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: ILegendKey) -> bool
        Set: Shadow(self: ILegendKey) = value
        """
        ...

    @property
    def Smooth(self) -> bool:
        """
        Get: Smooth(self: ILegendKey) -> bool
        Set: Smooth(self: ILegendKey) = value
        """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: ILegendKey) -> float """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: ILegendKey) -> float """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: ILegendKey) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ILegendKey) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ILegendKey) -> object """
        ...


class ILine: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ILine) -> Application """
        ...

    @property
    def ArrowHeadLength(self) -> object:
        """
        Get: ArrowHeadLength(self: ILine) -> object
        Set: ArrowHeadLength(self: ILine) = value
        """
        ...

    @property
    def ArrowHeadStyle(self) -> object:
        """
        Get: ArrowHeadStyle(self: ILine) -> object
        Set: ArrowHeadStyle(self: ILine) = value
        """
        ...

    @property
    def ArrowHeadWidth(self) -> object:
        """
        Get: ArrowHeadWidth(self: ILine) -> object
        Set: ArrowHeadWidth(self: ILine) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ILine) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: ILine) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ILine) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ILine) -> bool
        Set: Enabled(self: ILine) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ILine) -> float
        Set: Height(self: ILine) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ILine) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ILine) -> float
        Set: Left(self: ILine) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ILine) -> bool
        Set: Locked(self: ILine) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ILine) -> str
        Set: Name(self: ILine) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ILine) -> str
        Set: OnAction(self: ILine) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ILine) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ILine) -> object
        Set: Placement(self: ILine) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ILine) -> bool
        Set: PrintObject(self: ILine) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ILine) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ILine) -> float
        Set: Top(self: ILine) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: ILine) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ILine) -> bool
        Set: Visible(self: ILine) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ILine) -> float
        Set: Width(self: ILine) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ILine) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: ILine) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ILine) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ILine, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ILine) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ILine) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ILine) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ILine, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ILine) -> object """
        ...


class ILinearGradient: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ILinearGradient) -> Application """
        ...

    @property
    def ColorStops(self) -> ColorStops:
        """ Get: ColorStops(self: ILinearGradient) -> ColorStops """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ILinearGradient) -> XlCreator """
        ...

    @property
    def Degree(self) -> float:
        """
        Get: Degree(self: ILinearGradient) -> float
        Set: Degree(self: ILinearGradient) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ILinearGradient) -> object """
        ...



class ILines(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ILines) -> Application """
        ...

    @property
    def ArrowHeadLength(self) -> object:
        """
        Get: ArrowHeadLength(self: ILines) -> object
        Set: ArrowHeadLength(self: ILines) = value
        """
        ...

    @property
    def ArrowHeadStyle(self) -> object:
        """
        Get: ArrowHeadStyle(self: ILines) -> object
        Set: ArrowHeadStyle(self: ILines) = value
        """
        ...

    @property
    def ArrowHeadWidth(self) -> object:
        """
        Get: ArrowHeadWidth(self: ILines) -> object
        Set: ArrowHeadWidth(self: ILines) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ILines) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ILines) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ILines) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ILines) -> bool
        Set: Enabled(self: ILines) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ILines) -> float
        Set: Height(self: ILines) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ILines) -> float
        Set: Left(self: ILines) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ILines) -> bool
        Set: Locked(self: ILines) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ILines) -> str
        Set: OnAction(self: ILines) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ILines) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ILines) -> object
        Set: Placement(self: ILines) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ILines) -> bool
        Set: PrintObject(self: ILines) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ILines) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ILines) -> float
        Set: Top(self: ILines) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ILines) -> bool
        Set: Visible(self: ILines) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ILines) -> float
        Set: Width(self: ILines) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ILines) -> int """
        ...


    def Add(self, X1:float, Y1:float, X2:float, Y2:float) -> Line:
        """ Add(self: ILines, X1: float, Y1: float, X2: float, Y2: float) -> Line """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: ILines) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ILines) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ILines, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ILines) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ILines) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ILines) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: ILines) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: ILines, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ILines, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ILines) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: ILines) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: ILines) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: ILines) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: ILines) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class ILinkFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ILinkFormat) -> Application """
        ...

    @property
    def AutoUpdate(self) -> bool:
        """
        Get: AutoUpdate(self: ILinkFormat) -> bool
        Set: AutoUpdate(self: ILinkFormat) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ILinkFormat) -> XlCreator """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ILinkFormat) -> bool
        Set: Locked(self: ILinkFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ILinkFormat) -> object """
        ...


    def Update(self): # -> 
        """ Update(self: ILinkFormat) """
        ...


class IListBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IListBox) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IListBox) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IListBox) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: IListBox) -> bool
        Set: Display3DShading(self: IListBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IListBox) -> bool
        Set: Enabled(self: IListBox) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IListBox) -> float
        Set: Height(self: IListBox) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IListBox) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IListBox) -> float
        Set: Left(self: IListBox) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: IListBox) -> str
        Set: LinkedCell(self: IListBox) = value
        """
        ...

    @property
    def LinkedObject(self) -> object:
        """ Get: LinkedObject(self: IListBox) -> object """
        ...

    @property
    def ListCount(self) -> int:
        """ Get: ListCount(self: IListBox) -> int """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: IListBox) -> str
        Set: ListFillRange(self: IListBox) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: IListBox) -> int
        Set: ListIndex(self: IListBox) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IListBox) -> bool
        Set: Locked(self: IListBox) = value
        """
        ...

    @property
    def MultiSelect(self) -> int:
        """
        Get: MultiSelect(self: IListBox) -> int
        Set: MultiSelect(self: IListBox) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IListBox) -> str
        Set: Name(self: IListBox) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IListBox) -> str
        Set: OnAction(self: IListBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IListBox) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IListBox) -> object
        Set: Placement(self: IListBox) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IListBox) -> bool
        Set: PrintObject(self: IListBox) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IListBox) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IListBox) -> float
        Set: Top(self: IListBox) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IListBox) -> Range """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: IListBox) -> int
        Set: Value(self: IListBox) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IListBox) -> bool
        Set: Visible(self: IListBox) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IListBox) -> float
        Set: Width(self: IListBox) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IListBox) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IListBox) -> int
        Set: _Default(self: IListBox) = value
        """
        ...


    def AddItem(self, Text:object, Index:object) -> object:
        """ AddItem(self: IListBox, Text: object, Index: object) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IListBox) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IListBox) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IListBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IListBox) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IListBox) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IListBox) -> object """
        ...

    def RemoveAllItems(self) -> object:
        """ RemoveAllItems(self: IListBox) -> object """
        ...

    def RemoveItem(self, Index:int, Count:object) -> object:
        """ RemoveItem(self: IListBox, Index: int, Count: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IListBox, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IListBox) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IListBoxes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IListBoxes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IListBoxes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IListBoxes) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: IListBoxes) -> bool
        Set: Display3DShading(self: IListBoxes) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IListBoxes) -> bool
        Set: Enabled(self: IListBoxes) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IListBoxes) -> float
        Set: Height(self: IListBoxes) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IListBoxes) -> float
        Set: Left(self: IListBoxes) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: IListBoxes) -> str
        Set: LinkedCell(self: IListBoxes) = value
        """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: IListBoxes) -> str
        Set: ListFillRange(self: IListBoxes) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: IListBoxes) -> int
        Set: ListIndex(self: IListBoxes) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IListBoxes) -> bool
        Set: Locked(self: IListBoxes) = value
        """
        ...

    @property
    def MultiSelect(self) -> int:
        """
        Get: MultiSelect(self: IListBoxes) -> int
        Set: MultiSelect(self: IListBoxes) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IListBoxes) -> str
        Set: OnAction(self: IListBoxes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IListBoxes) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IListBoxes) -> object
        Set: Placement(self: IListBoxes) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IListBoxes) -> bool
        Set: PrintObject(self: IListBoxes) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IListBoxes) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IListBoxes) -> float
        Set: Top(self: IListBoxes) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: IListBoxes) -> int
        Set: Value(self: IListBoxes) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IListBoxes) -> bool
        Set: Visible(self: IListBoxes) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IListBoxes) -> float
        Set: Width(self: IListBoxes) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IListBoxes) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IListBoxes) -> int
        Set: _Default(self: IListBoxes) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> ListBox:
        """ Add(self: IListBoxes, Left: float, Top: float, Width: float, Height: float) -> ListBox """
        ...

    def AddItem(self, Text:object, Index:object) -> object:
        """ AddItem(self: IListBoxes, Text: object, Index: object) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IListBoxes) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IListBoxes) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IListBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IListBoxes) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IListBoxes) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IListBoxes) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IListBoxes) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IListBoxes, Index: object) -> object """
        ...

    def RemoveAllItems(self) -> object:
        """ RemoveAllItems(self: IListBoxes) -> object """
        ...

    def RemoveItem(self, Index:int, Count:object) -> object:
        """ RemoveItem(self: IListBoxes, Index: int, Count: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IListBoxes, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IListBoxes) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IListBoxes) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IListBoxes) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IListBoxes) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IListBoxes) """
        ...

    def _Dummy31(self): # -> 
        """ _Dummy31(self: IListBoxes) """
        ...

    def _Dummy33(self): # -> 
        """ _Dummy33(self: IListBoxes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IListColumn: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IListColumn) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IListColumn) -> XlCreator """
        ...

    @property
    def DataBodyRange(self) -> Range:
        """ Get: DataBodyRange(self: IListColumn) -> Range """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IListColumn) -> int """
        ...

    @property
    def ListDataFormat(self) -> ListDataFormat:
        """ Get: ListDataFormat(self: IListColumn) -> ListDataFormat """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IListColumn) -> str
        Set: Name(self: IListColumn) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IListColumn) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: IListColumn) -> Range """
        ...

    @property
    def SharePointFormula(self) -> str:
        """ Get: SharePointFormula(self: IListColumn) -> str """
        ...

    @property
    def Total(self) -> Range:
        """ Get: Total(self: IListColumn) -> Range """
        ...

    @property
    def TotalsCalculation(self) -> XlTotalsCalculation:
        """
        Get: TotalsCalculation(self: IListColumn) -> XlTotalsCalculation
        Set: TotalsCalculation(self: IListColumn) = value
        """
        ...

    @property
    def XPath(self) -> XPath:
        """ Get: XPath(self: IListColumn) -> XPath """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: IListColumn) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: IListColumn) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IListColumns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IListColumns) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IListColumns) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IListColumns) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IListColumns) -> object """
        ...


    def Add(self, Position:object) -> ListColumn:
        """ Add(self: IListColumns, Position: object) -> ListColumn """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IListDataFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowFillIn(self) -> bool:
        """ Get: AllowFillIn(self: IListDataFormat) -> bool """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IListDataFormat) -> Application """
        ...

    @property
    def Choices(self) -> object:
        """ Get: Choices(self: IListDataFormat) -> object """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IListDataFormat) -> XlCreator """
        ...

    @property
    def DecimalPlaces(self) -> int:
        """ Get: DecimalPlaces(self: IListDataFormat) -> int """
        ...

    @property
    def DefaultValue(self) -> object:
        """ Get: DefaultValue(self: IListDataFormat) -> object """
        ...

    @property
    def IsPercent(self) -> bool:
        """ Get: IsPercent(self: IListDataFormat) -> bool """
        ...

    @property
    def lcid(self) -> int:
        """ Get: lcid(self: IListDataFormat) -> int """
        ...

    @property
    def MaxCharacters(self) -> int:
        """ Get: MaxCharacters(self: IListDataFormat) -> int """
        ...

    @property
    def MaxNumber(self) -> object:
        """ Get: MaxNumber(self: IListDataFormat) -> object """
        ...

    @property
    def MinNumber(self) -> object:
        """ Get: MinNumber(self: IListDataFormat) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IListDataFormat) -> object """
        ...

    @property
    def ReadOnly(self) -> bool:
        """ Get: ReadOnly(self: IListDataFormat) -> bool """
        ...

    @property
    def Required(self) -> bool:
        """ Get: Required(self: IListDataFormat) -> bool """
        ...

    @property
    def Type(self) -> XlListDataType:
        """ Get: Type(self: IListDataFormat) -> XlListDataType """
        ...

    @property
    def _Default(self) -> XlListDataType:
        """ Get: _Default(self: IListDataFormat) -> XlListDataType """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IListObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Active(self) -> bool:
        """ Get: Active(self: IListObject) -> bool """
        ...

    @property
    def AlternativeText(self) -> str:
        """
        Get: AlternativeText(self: IListObject) -> str
        Set: AlternativeText(self: IListObject) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IListObject) -> Application """
        ...

    @property
    def AutoFilter(self) -> AutoFilter:
        """ Get: AutoFilter(self: IListObject) -> AutoFilter """
        ...

    @property
    def Comment(self) -> str:
        """
        Get: Comment(self: IListObject) -> str
        Set: Comment(self: IListObject) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IListObject) -> XlCreator """
        ...

    @property
    def DataBodyRange(self) -> Range:
        """ Get: DataBodyRange(self: IListObject) -> Range """
        ...

    @property
    def DisplayName(self) -> str:
        """
        Get: DisplayName(self: IListObject) -> str
        Set: DisplayName(self: IListObject) = value
        """
        ...

    @property
    def DisplayRightToLeft(self) -> bool:
        """ Get: DisplayRightToLeft(self: IListObject) -> bool """
        ...

    @property
    def HeaderRowRange(self) -> Range:
        """ Get: HeaderRowRange(self: IListObject) -> Range """
        ...

    @property
    def InsertRowRange(self) -> Range:
        """ Get: InsertRowRange(self: IListObject) -> Range """
        ...

    @property
    def ListColumns(self) -> ListColumns:
        """ Get: ListColumns(self: IListObject) -> ListColumns """
        ...

    @property
    def ListRows(self) -> ListRows:
        """ Get: ListRows(self: IListObject) -> ListRows """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IListObject) -> str
        Set: Name(self: IListObject) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IListObject) -> object """
        ...

    @property
    def QueryTable(self) -> QueryTable:
        """ Get: QueryTable(self: IListObject) -> QueryTable """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: IListObject) -> Range """
        ...

    @property
    def SharePointURL(self) -> str:
        """ Get: SharePointURL(self: IListObject) -> str """
        ...

    @property
    def ShowAutoFilter(self) -> bool:
        """
        Get: ShowAutoFilter(self: IListObject) -> bool
        Set: ShowAutoFilter(self: IListObject) = value
        """
        ...

    @property
    def ShowAutoFilterDropDown(self) -> bool:
        """
        Get: ShowAutoFilterDropDown(self: IListObject) -> bool
        Set: ShowAutoFilterDropDown(self: IListObject) = value
        """
        ...

    @property
    def ShowHeaders(self) -> bool:
        """
        Get: ShowHeaders(self: IListObject) -> bool
        Set: ShowHeaders(self: IListObject) = value
        """
        ...

    @property
    def ShowTableStyleColumnStripes(self) -> bool:
        """
        Get: ShowTableStyleColumnStripes(self: IListObject) -> bool
        Set: ShowTableStyleColumnStripes(self: IListObject) = value
        """
        ...

    @property
    def ShowTableStyleFirstColumn(self) -> bool:
        """
        Get: ShowTableStyleFirstColumn(self: IListObject) -> bool
        Set: ShowTableStyleFirstColumn(self: IListObject) = value
        """
        ...

    @property
    def ShowTableStyleLastColumn(self) -> bool:
        """
        Get: ShowTableStyleLastColumn(self: IListObject) -> bool
        Set: ShowTableStyleLastColumn(self: IListObject) = value
        """
        ...

    @property
    def ShowTableStyleRowStripes(self) -> bool:
        """
        Get: ShowTableStyleRowStripes(self: IListObject) -> bool
        Set: ShowTableStyleRowStripes(self: IListObject) = value
        """
        ...

    @property
    def ShowTotals(self) -> bool:
        """
        Get: ShowTotals(self: IListObject) -> bool
        Set: ShowTotals(self: IListObject) = value
        """
        ...

    @property
    def Slicers(self) -> Slicers:
        """ Get: Slicers(self: IListObject) -> Slicers """
        ...

    @property
    def Sort(self) -> Sort:
        """ Get: Sort(self: IListObject) -> Sort """
        ...

    @property
    def SourceType(self) -> XlListObjectSourceType:
        """ Get: SourceType(self: IListObject) -> XlListObjectSourceType """
        ...

    @property
    def Summary(self) -> str:
        """
        Get: Summary(self: IListObject) -> str
        Set: Summary(self: IListObject) = value
        """
        ...

    @property
    def TableObject(self) -> TableObject:
        """ Get: TableObject(self: IListObject) -> TableObject """
        ...

    @property
    def TableStyle(self) -> object:
        """
        Get: TableStyle(self: IListObject) -> object
        Set: TableStyle(self: IListObject) = value
        """
        ...

    @property
    def TotalsRowRange(self) -> Range:
        """ Get: TotalsRowRange(self: IListObject) -> Range """
        ...

    @property
    def XmlMap(self) -> XmlMap:
        """ Get: XmlMap(self: IListObject) -> XmlMap """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: IListObject) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: IListObject) """
        ...

    def ExportToVisio(self): # -> 
        """ ExportToVisio(self: IListObject) """
        ...

    def Publish(self, Target:object, LinkSource:bool) -> str:
        """ Publish(self: IListObject, Target: object, LinkSource: bool) -> str """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: IListObject) """
        ...

    def Resize(self, Range:Range): # -> 
        """ Resize(self: IListObject, Range: Range) """
        ...

    def Unlink(self): # -> 
        """ Unlink(self: IListObject) """
        ...

    def Unlist(self): # -> 
        """ Unlist(self: IListObject) """
        ...

    def UpdateChanges(self, iConflictType:XlListConflict): # -> 
        """ UpdateChanges(self: IListObject, iConflictType: XlListConflict) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IListObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IListObjects) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IListObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IListObjects) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IListObjects) -> object """
        ...


    def Add(self, SourceType:XlListObjectSourceType, Source:object, LinkSource:object, XlListObjectHasHeaders:XlYesNoGuess, Destination:object) -> ListObject:
        """ Add(self: IListObjects, SourceType: XlListObjectSourceType, Source: object, LinkSource: object, XlListObjectHasHeaders: XlYesNoGuess, Destination: object) -> ListObject """
        ...

    def AddEx(self, SourceType:XlListObjectSourceType, Source:object, LinkSource:object, XlListObjectHasHeaders:XlYesNoGuess, Destination:object, TableStyleName:object) -> ListObject:
        """ AddEx(self: IListObjects, SourceType: XlListObjectSourceType, Source: object, LinkSource: object, XlListObjectHasHeaders: XlYesNoGuess, Destination: object, TableStyleName: object) -> ListObject """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IListRow: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IListRow) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IListRow) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IListRow) -> int """
        ...

    @property
    def InvalidData(self) -> bool:
        """ Get: InvalidData(self: IListRow) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IListRow) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: IListRow) -> Range """
        ...


    def Delete(self): # -> 
        """ Delete(self: IListRow) """
        ...


class IListRows(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IListRows) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IListRows) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IListRows) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IListRows) -> object """
        ...


    def Add(self, Position:object) -> ListRow:
        """ Add(self: IListRows, Position: object) -> ListRow """
        ...

    def AddEx(self, Position:object, AlwaysInsert:object) -> ListRow:
        """ AddEx(self: IListRows, Position: object, AlwaysInsert: object) -> ListRow """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IMailer: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IMailer) -> Application """
        ...

    @property
    def BCCRecipients(self) -> object:
        """
        Get: BCCRecipients(self: IMailer) -> object
        Set: BCCRecipients(self: IMailer) = value
        """
        ...

    @property
    def CCRecipients(self) -> object:
        """
        Get: CCRecipients(self: IMailer) -> object
        Set: CCRecipients(self: IMailer) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IMailer) -> XlCreator """
        ...

    @property
    def Enclosures(self) -> object:
        """
        Get: Enclosures(self: IMailer) -> object
        Set: Enclosures(self: IMailer) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IMailer) -> object """
        ...

    @property
    def Received(self) -> bool:
        """ Get: Received(self: IMailer) -> bool """
        ...

    @property
    def SendDateTime(self) -> DateTime:
        """ Get: SendDateTime(self: IMailer) -> DateTime """
        ...

    @property
    def Sender(self) -> str:
        """ Get: Sender(self: IMailer) -> str """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: IMailer) -> str
        Set: Subject(self: IMailer) = value
        """
        ...

    @property
    def ToRecipients(self) -> object:
        """
        Get: ToRecipients(self: IMailer) -> object
        Set: ToRecipients(self: IMailer) = value
        """
        ...

    @property
    def WhichAddress(self) -> object:
        """
        Get: WhichAddress(self: IMailer) -> object
        Set: WhichAddress(self: IMailer) = value
        """
        ...



class IMenu: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IMenu) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IMenu) -> str
        Set: Caption(self: IMenu) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IMenu) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IMenu) -> bool
        Set: Enabled(self: IMenu) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IMenu) -> int """
        ...

    @property
    def MenuItems(self) -> MenuItems:
        """ Get: MenuItems(self: IMenu) -> MenuItems """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IMenu) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: IMenu) """
        ...


class IMenuBar: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IMenuBar) -> Application """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: IMenuBar) -> bool """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IMenuBar) -> str
        Set: Caption(self: IMenuBar) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IMenuBar) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IMenuBar) -> int """
        ...

    @property
    def Menus(self) -> Menus:
        """ Get: Menus(self: IMenuBar) -> Menus """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IMenuBar) -> object """
        ...


    def Activate(self): # -> 
        """ Activate(self: IMenuBar) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IMenuBar) """
        ...

    def Reset(self): # -> 
        """ Reset(self: IMenuBar) """
        ...


class IMenuBars(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IMenuBars) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IMenuBars) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IMenuBars) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IMenuBars) -> object """
        ...


    def Add(self, Name:object) -> MenuBar:
        """ Add(self: IMenuBars, Name: object) -> MenuBar """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IMenuItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IMenuItem) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IMenuItem) -> str
        Set: Caption(self: IMenuItem) = value
        """
        ...

    @property
    def Checked(self) -> bool:
        """
        Get: Checked(self: IMenuItem) -> bool
        Set: Checked(self: IMenuItem) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IMenuItem) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IMenuItem) -> bool
        Set: Enabled(self: IMenuItem) = value
        """
        ...

    @property
    def HelpContextID(self) -> int:
        """
        Get: HelpContextID(self: IMenuItem) -> int
        Set: HelpContextID(self: IMenuItem) = value
        """
        ...

    @property
    def HelpFile(self) -> str:
        """
        Get: HelpFile(self: IMenuItem) -> str
        Set: HelpFile(self: IMenuItem) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IMenuItem) -> int """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IMenuItem) -> str
        Set: OnAction(self: IMenuItem) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IMenuItem) -> object """
        ...

    @property
    def StatusBar(self) -> str:
        """
        Get: StatusBar(self: IMenuItem) -> str
        Set: StatusBar(self: IMenuItem) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: IMenuItem) """
        ...


class IMenuItems(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IMenuItems) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IMenuItems) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IMenuItems) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IMenuItems) -> object """
        ...


    def Add(self, Caption:str, OnAction:object, ShortcutKey:object, Before:object, Restore:object, StatusBar:object, HelpFile:object, HelpContextID:object) -> MenuItem:
        """ Add(self: IMenuItems, Caption: str, OnAction: object, ShortcutKey: object, Before: object, Restore: object, StatusBar: object, HelpFile: object, HelpContextID: object) -> MenuItem """
        ...

    def AddMenu(self, Caption:str, Before:object, Restore:object) -> Menu:
        """ AddMenu(self: IMenuItems, Caption: str, Before: object, Restore: object) -> Menu """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IMenus(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IMenus) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IMenus) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IMenus) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IMenus) -> object """
        ...


    def Add(self, Caption:str, Before:object, Restore:object) -> Menu:
        """ Add(self: IMenus, Caption: str, Before: object, Restore: object) -> Menu """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IModel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModel) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModel) -> XlCreator """
        ...

    @property
    def DataModelConnection(self) -> WorkbookConnection:
        """ Get: DataModelConnection(self: IModel) -> WorkbookConnection """
        ...

    @property
    def ModelRelationships(self) -> ModelRelationships:
        """ Get: ModelRelationships(self: IModel) -> ModelRelationships """
        ...

    @property
    def ModelTables(self) -> ModelTables:
        """ Get: ModelTables(self: IModel) -> ModelTables """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IModel) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModel) -> object """
        ...


    def AddConnection(self, ConnectionToDataSource:WorkbookConnection) -> WorkbookConnection:
        """ AddConnection(self: IModel, ConnectionToDataSource: WorkbookConnection) -> WorkbookConnection """
        ...

    def CreateModelWorkbookConnection(self, ModelTable:object) -> WorkbookConnection:
        """ CreateModelWorkbookConnection(self: IModel, ModelTable: object) -> WorkbookConnection """
        ...

    def Initialize(self): # -> 
        """ Initialize(self: IModel) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: IModel) """
        ...


class IModelChanges: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelChanges) -> Application """
        ...

    @property
    def ColumnsAdded(self) -> ModelColumnNames:
        """ Get: ColumnsAdded(self: IModelChanges) -> ModelColumnNames """
        ...

    @property
    def ColumnsChanged(self) -> ModelColumnChanges:
        """ Get: ColumnsChanged(self: IModelChanges) -> ModelColumnChanges """
        ...

    @property
    def ColumnsDeleted(self) -> ModelColumnNames:
        """ Get: ColumnsDeleted(self: IModelChanges) -> ModelColumnNames """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelChanges) -> XlCreator """
        ...

    @property
    def MeasuresAdded(self) -> ModelMeasureNames:
        """ Get: MeasuresAdded(self: IModelChanges) -> ModelMeasureNames """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelChanges) -> object """
        ...

    @property
    def RelationshipChange(self) -> bool:
        """ Get: RelationshipChange(self: IModelChanges) -> bool """
        ...

    @property
    def Source(self) -> XlModelChangeSource:
        """ Get: Source(self: IModelChanges) -> XlModelChangeSource """
        ...

    @property
    def TableNamesChanged(self) -> ModelTableNameChanges:
        """ Get: TableNamesChanged(self: IModelChanges) -> ModelTableNameChanges """
        ...

    @property
    def TablesAdded(self) -> ModelTableNames:
        """ Get: TablesAdded(self: IModelChanges) -> ModelTableNames """
        ...

    @property
    def TablesDeleted(self) -> ModelTableNames:
        """ Get: TablesDeleted(self: IModelChanges) -> ModelTableNames """
        ...

    @property
    def TablesModified(self) -> ModelTableNames:
        """ Get: TablesModified(self: IModelChanges) -> ModelTableNames """
        ...

    @property
    def UnknownChange(self) -> bool:
        """ Get: UnknownChange(self: IModelChanges) -> bool """
        ...



class IModelColumnChange: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelColumnChange) -> Application """
        ...

    @property
    def ColumnName(self) -> str:
        """ Get: ColumnName(self: IModelColumnChange) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelColumnChange) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelColumnChange) -> object """
        ...

    @property
    def TableName(self) -> str:
        """ Get: TableName(self: IModelColumnChange) -> str """
        ...



class IModelColumnChanges(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelColumnChanges) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IModelColumnChanges) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelColumnChanges) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelColumnChanges) -> object """
        ...


    def Item(self, Index:object) -> ModelColumnChange:
        """ Item(self: IModelColumnChanges, Index: object) -> ModelColumnChange """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IModelColumnName: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelColumnName) -> Application """
        ...

    @property
    def ColumnName(self) -> str:
        """ Get: ColumnName(self: IModelColumnName) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelColumnName) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelColumnName) -> object """
        ...

    @property
    def TableName(self) -> str:
        """ Get: TableName(self: IModelColumnName) -> str """
        ...



class IModelColumnNames(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelColumnNames) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IModelColumnNames) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelColumnNames) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelColumnNames) -> object """
        ...


    def Item(self, Index:object) -> ModelColumnName:
        """ Item(self: IModelColumnNames, Index: object) -> ModelColumnName """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IModelConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ADOConnection(self) -> object:
        """ Get: ADOConnection(self: IModelConnection) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelConnection) -> Application """
        ...

    @property
    def CalculatedMembers(self) -> CalculatedMembers:
        """ Get: CalculatedMembers(self: IModelConnection) -> CalculatedMembers """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: IModelConnection) -> object
        Set: CommandText(self: IModelConnection) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: IModelConnection) -> XlCmdType
        Set: CommandType(self: IModelConnection) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelConnection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelConnection) -> object """
        ...



class IModelMeasureName: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelMeasureName) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelMeasureName) -> XlCreator """
        ...

    @property
    def MeasureName(self) -> str:
        """ Get: MeasureName(self: IModelMeasureName) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelMeasureName) -> object """
        ...

    @property
    def TableName(self) -> str:
        """ Get: TableName(self: IModelMeasureName) -> str """
        ...



class IModelMeasureNames(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelMeasureNames) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IModelMeasureNames) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelMeasureNames) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelMeasureNames) -> object """
        ...


    def Item(self, Index:object) -> ModelMeasureName:
        """ Item(self: IModelMeasureNames, Index: object) -> ModelMeasureName """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IModelRelationship: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Active(self) -> bool:
        """
        Get: Active(self: IModelRelationship) -> bool
        Set: Active(self: IModelRelationship) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelRelationship) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelRelationship) -> XlCreator """
        ...

    @property
    def ForeignKeyColumn(self) -> ModelTableColumn:
        """ Get: ForeignKeyColumn(self: IModelRelationship) -> ModelTableColumn """
        ...

    @property
    def ForeignKeyTable(self) -> ModelTable:
        """ Get: ForeignKeyTable(self: IModelRelationship) -> ModelTable """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelRelationship) -> object """
        ...

    @property
    def PrimaryKeyColumn(self) -> ModelTableColumn:
        """ Get: PrimaryKeyColumn(self: IModelRelationship) -> ModelTableColumn """
        ...

    @property
    def PrimaryKeyTable(self) -> ModelTable:
        """ Get: PrimaryKeyTable(self: IModelRelationship) -> ModelTable """
        ...


    def Delete(self): # -> 
        """ Delete(self: IModelRelationship) """
        ...


class IModelRelationships(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelRelationships) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IModelRelationships) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelRelationships) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelRelationships) -> object """
        ...


    def Add(self, ForeignKeyColumn:ModelTableColumn, PrimaryKeyColumn:ModelTableColumn) -> ModelRelationship:
        """ Add(self: IModelRelationships, ForeignKeyColumn: ModelTableColumn, PrimaryKeyColumn: ModelTableColumn) -> ModelRelationship """
        ...

    def Item(self, Index:object) -> ModelRelationship:
        """ Item(self: IModelRelationships, Index: object) -> ModelRelationship """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IModelTable: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelTable) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelTable) -> XlCreator """
        ...

    @property
    def ModelTableColumns(self) -> ModelTableColumns:
        """ Get: ModelTableColumns(self: IModelTable) -> ModelTableColumns """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IModelTable) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelTable) -> object """
        ...

    @property
    def RecordCount(self) -> int:
        """ Get: RecordCount(self: IModelTable) -> int """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: IModelTable) -> str """
        ...

    @property
    def SourceWorkbookConnection(self) -> WorkbookConnection:
        """ Get: SourceWorkbookConnection(self: IModelTable) -> WorkbookConnection """
        ...


    def Refresh(self): # -> 
        """ Refresh(self: IModelTable) """
        ...

    def _Dummy7(self): # -> 
        """ _Dummy7(self: IModelTable) """
        ...


class IModelTableColumn: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelTableColumn) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelTableColumn) -> XlCreator """
        ...

    @property
    def DataType(self) -> int:
        """ Get: DataType(self: IModelTableColumn) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IModelTableColumn) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelTableColumn) -> object """
        ...



class IModelTableColumns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelTableColumns) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IModelTableColumns) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelTableColumns) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelTableColumns) -> object """
        ...


    def Item(self, Index:object) -> ModelTableColumn:
        """ Item(self: IModelTableColumns, Index: object) -> ModelTableColumn """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IModelTableNameChange: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelTableNameChange) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelTableNameChange) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelTableNameChange) -> object """
        ...

    @property
    def TableNameNew(self) -> str:
        """ Get: TableNameNew(self: IModelTableNameChange) -> str """
        ...

    @property
    def TableNameOld(self) -> str:
        """ Get: TableNameOld(self: IModelTableNameChange) -> str """
        ...



class IModelTableNameChanges(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelTableNameChanges) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IModelTableNameChanges) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelTableNameChanges) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelTableNameChanges) -> object """
        ...


    def Item(self, Index:object) -> ModelTableNameChange:
        """ Item(self: IModelTableNameChanges, Index: object) -> ModelTableNameChange """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IModelTableNames: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelTableNames) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IModelTableNames) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelTableNames) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelTableNames) -> object """
        ...


    def Item(self, Index:object) -> str:
        """ Item(self: IModelTableNames, Index: object) -> str """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IModelTables(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModelTables) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IModelTables) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModelTables) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModelTables) -> object """
        ...


    def Item(self, Index:object) -> ModelTable:
        """ Item(self: IModelTables, Index: object) -> ModelTable """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IModule: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModule) -> Application """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: IModule) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModule) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IModule) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IModule) -> str
        Set: Name(self: IModule) = value
        """
        ...

    @property
    def Next(self) -> object:
        """ Get: Next(self: IModule) -> object """
        ...

    @property
    def OnDoubleClick(self) -> str:
        """
        Get: OnDoubleClick(self: IModule) -> str
        Set: OnDoubleClick(self: IModule) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: IModule) -> str
        Set: OnSheetActivate(self: IModule) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: IModule) -> str
        Set: OnSheetDeactivate(self: IModule) = value
        """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """ Get: PageSetup(self: IModule) -> PageSetup """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModule) -> object """
        ...

    @property
    def Previous(self) -> object:
        """ Get: Previous(self: IModule) -> object """
        ...

    @property
    def ProtectContents(self) -> bool:
        """ Get: ProtectContents(self: IModule) -> bool """
        ...

    @property
    def ProtectionMode(self) -> bool:
        """ Get: ProtectionMode(self: IModule) -> bool """
        ...

    @property
    def Shapes(self) -> Shapes:
        """ Get: Shapes(self: IModule) -> Shapes """
        ...

    @property
    def Visible(self) -> XlSheetVisibility:
        """
        Get: Visible(self: IModule) -> XlSheetVisibility
        Set: Visible(self: IModule) = value
        """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: IModule) -> str
        Set: _CodeName(self: IModule) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: IModule) """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: IModule, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IModule) """
        ...

    def InsertFile(self, Filename:object, Merge:object) -> object:
        """ InsertFile(self: IModule, Filename: object, Merge: object) -> object """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: IModule, Before: object, After: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ PrintOut(self: IModule, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ Protect(self: IModule, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ SaveAs(self: IModule, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: IModule, Replace: object) """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: IModule, Password: object) """
        ...

    def _Dummy18(self): # -> 
        """ _Dummy18(self: IModule) """
        ...

    def _Dummy21(self): # -> 
        """ _Dummy21(self: IModule) """
        ...

    def _Dummy23(self): # -> 
        """ _Dummy23(self: IModule) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: IModule, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _PrintOut_2(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut_2(self: IModule, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ _Protect(self: IModule, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def _SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ _SaveAs(self: IModule, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...


class IModules(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModules) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IModules) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModules) -> XlCreator """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: IModules) -> HPageBreaks """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModules) -> object """
        ...

    @property
    def Visible(self) -> object:
        """
        Get: Visible(self: IModules) -> object
        Set: Visible(self: IModules) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: IModules) -> VPageBreaks """
        ...


    def Add(self, Before:object, After:object, Count:object) -> Module:
        """ Add(self: IModules, Before: object, After: object, Count: object) -> Module """
        ...

    def Add2(self, Before:object, After:object, Count:object, NewLayout:object) -> object:
        """ Add2(self: IModules, Before: object, After: object, Count: object, NewLayout: object) -> object """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: IModules, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IModules) """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: IModules, Before: object, After: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: IModules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object, IgnorePrintAreas:object): # -> 
        """ PrintOutEx(self: IModules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: IModules, Replace: object) """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IModules) """
        ...

    def _Dummy7(self): # -> 
        """ _Dummy7(self: IModules) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: IModules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IModuleView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IModuleView) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IModuleView) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IModuleView) -> object """
        ...

    @property
    def Sheet(self) -> object:
        """ Get: Sheet(self: IModuleView) -> object """
        ...



class IMultiThreadedCalculation: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IMultiThreadedCalculation) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IMultiThreadedCalculation) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IMultiThreadedCalculation) -> bool
        Set: Enabled(self: IMultiThreadedCalculation) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IMultiThreadedCalculation) -> object """
        ...

    @property
    def ThreadCount(self) -> int:
        """
        Get: ThreadCount(self: IMultiThreadedCalculation) -> int
        Set: ThreadCount(self: IMultiThreadedCalculation) = value
        """
        ...

    @property
    def ThreadMode(self) -> XlThreadMode:
        """
        Get: ThreadMode(self: IMultiThreadedCalculation) -> XlThreadMode
        Set: ThreadMode(self: IMultiThreadedCalculation) = value
        """
        ...



class IName: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IName) -> Application """
        ...

    @property
    def Category(self) -> str:
        """
        Get: Category(self: IName) -> str
        Set: Category(self: IName) = value
        """
        ...

    @property
    def CategoryLocal(self) -> str:
        """
        Get: CategoryLocal(self: IName) -> str
        Set: CategoryLocal(self: IName) = value
        """
        ...

    @property
    def Comment(self) -> str:
        """
        Get: Comment(self: IName) -> str
        Set: Comment(self: IName) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IName) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IName) -> int """
        ...

    @property
    def MacroType(self) -> XlXLMMacroType:
        """
        Get: MacroType(self: IName) -> XlXLMMacroType
        Set: MacroType(self: IName) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IName) -> str
        Set: Name(self: IName) = value
        """
        ...

    @property
    def NameLocal(self) -> str:
        """
        Get: NameLocal(self: IName) -> str
        Set: NameLocal(self: IName) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IName) -> object """
        ...

    @property
    def RefersTo(self) -> object:
        """
        Get: RefersTo(self: IName) -> object
        Set: RefersTo(self: IName) = value
        """
        ...

    @property
    def RefersToLocal(self) -> object:
        """
        Get: RefersToLocal(self: IName) -> object
        Set: RefersToLocal(self: IName) = value
        """
        ...

    @property
    def RefersToR1C1(self) -> object:
        """
        Get: RefersToR1C1(self: IName) -> object
        Set: RefersToR1C1(self: IName) = value
        """
        ...

    @property
    def RefersToR1C1Local(self) -> object:
        """
        Get: RefersToR1C1Local(self: IName) -> object
        Set: RefersToR1C1Local(self: IName) = value
        """
        ...

    @property
    def RefersToRange(self) -> Range:
        """ Get: RefersToRange(self: IName) -> Range """
        ...

    @property
    def ShortcutKey(self) -> str:
        """
        Get: ShortcutKey(self: IName) -> str
        Set: ShortcutKey(self: IName) = value
        """
        ...

    @property
    def ValidWorkbookParameter(self) -> bool:
        """ Get: ValidWorkbookParameter(self: IName) -> bool """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: IName) -> str
        Set: Value(self: IName) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IName) -> bool
        Set: Visible(self: IName) = value
        """
        ...

    @property
    def WorkbookParameter(self) -> bool:
        """
        Get: WorkbookParameter(self: IName) -> bool
        Set: WorkbookParameter(self: IName) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: IName) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: IName) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class INames(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: INames) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: INames) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: INames) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: INames) -> object """
        ...


    def Add(self, Name:object, RefersTo:object, Visible:object, MacroType:object, ShortcutKey:object, Category:object, NameLocal:object, RefersToLocal:object, CategoryLocal:object, RefersToR1C1:object, RefersToR1C1Local:object) -> Name:
        """ Add(self: INames, Name: object, RefersTo: object, Visible: object, MacroType: object, ShortcutKey: object, Category: object, NameLocal: object, RefersToLocal: object, CategoryLocal: object, RefersToR1C1: object, RefersToR1C1Local: object) -> Name """
        ...

    def Item(self, Index:object, IndexLocal:object, RefersTo:object) -> Name:
        """ Item(self: INames, Index: object, IndexLocal: object, RefersTo: object) -> Name """
        ...

    def _Default(self, Index:object, IndexLocal:object, RefersTo:object) -> Name:
        """ _Default(self: INames, Index: object, IndexLocal: object, RefersTo: object) -> Name """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class INegativeBarFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: INegativeBarFormat) -> Application """
        ...

    @property
    def BorderColor(self) -> object:
        """ Get: BorderColor(self: INegativeBarFormat) -> object """
        ...

    @property
    def BorderColorType(self) -> XlDataBarNegativeColorType:
        """
        Get: BorderColorType(self: INegativeBarFormat) -> XlDataBarNegativeColorType
        Set: BorderColorType(self: INegativeBarFormat) = value
        """
        ...

    @property
    def Color(self) -> object:
        """ Get: Color(self: INegativeBarFormat) -> object """
        ...

    @property
    def ColorType(self) -> XlDataBarNegativeColorType:
        """
        Get: ColorType(self: INegativeBarFormat) -> XlDataBarNegativeColorType
        Set: ColorType(self: INegativeBarFormat) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: INegativeBarFormat) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: INegativeBarFormat) -> object """
        ...



class Interior: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Interior) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: Interior) -> object
        Set: Color(self: Interior) = value
        """
        ...

    @property
    def ColorIndex(self) -> object:
        """
        Get: ColorIndex(self: Interior) -> object
        Set: ColorIndex(self: Interior) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Interior) -> XlCreator """
        ...

    @property
    def Gradient(self) -> object:
        """ Get: Gradient(self: Interior) -> object """
        ...

    @property
    def InvertIfNegative(self) -> object:
        """
        Get: InvertIfNegative(self: Interior) -> object
        Set: InvertIfNegative(self: Interior) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Interior) -> object """
        ...

    @property
    def Pattern(self) -> object:
        """
        Get: Pattern(self: Interior) -> object
        Set: Pattern(self: Interior) = value
        """
        ...

    @property
    def PatternColor(self) -> object:
        """
        Get: PatternColor(self: Interior) -> object
        Set: PatternColor(self: Interior) = value
        """
        ...

    @property
    def PatternColorIndex(self) -> object:
        """
        Get: PatternColorIndex(self: Interior) -> object
        Set: PatternColorIndex(self: Interior) = value
        """
        ...

    @property
    def PatternThemeColor(self) -> object:
        """
        Get: PatternThemeColor(self: Interior) -> object
        Set: PatternThemeColor(self: Interior) = value
        """
        ...

    @property
    def PatternTintAndShade(self) -> object:
        """
        Get: PatternTintAndShade(self: Interior) -> object
        Set: PatternTintAndShade(self: Interior) = value
        """
        ...

    @property
    def ThemeColor(self) -> object:
        """
        Get: ThemeColor(self: Interior) -> object
        Set: ThemeColor(self: Interior) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: Interior) -> object
        Set: TintAndShade(self: Interior) = value
        """
        ...



class IODBCConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlwaysUseConnectionFile(self) -> bool:
        """
        Get: AlwaysUseConnectionFile(self: IODBCConnection) -> bool
        Set: AlwaysUseConnectionFile(self: IODBCConnection) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IODBCConnection) -> Application """
        ...

    @property
    def BackgroundQuery(self) -> bool:
        """
        Get: BackgroundQuery(self: IODBCConnection) -> bool
        Set: BackgroundQuery(self: IODBCConnection) = value
        """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: IODBCConnection) -> object
        Set: CommandText(self: IODBCConnection) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: IODBCConnection) -> XlCmdType
        Set: CommandType(self: IODBCConnection) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: IODBCConnection) -> object
        Set: Connection(self: IODBCConnection) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IODBCConnection) -> XlCreator """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: IODBCConnection) -> bool
        Set: EnableRefresh(self: IODBCConnection) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IODBCConnection) -> object """
        ...

    @property
    def RefreshDate(self) -> DateTime:
        """ Get: RefreshDate(self: IODBCConnection) -> DateTime """
        ...

    @property
    def Refreshing(self) -> bool:
        """ Get: Refreshing(self: IODBCConnection) -> bool """
        ...

    @property
    def RefreshOnFileOpen(self) -> bool:
        """
        Get: RefreshOnFileOpen(self: IODBCConnection) -> bool
        Set: RefreshOnFileOpen(self: IODBCConnection) = value
        """
        ...

    @property
    def RefreshPeriod(self) -> int:
        """
        Get: RefreshPeriod(self: IODBCConnection) -> int
        Set: RefreshPeriod(self: IODBCConnection) = value
        """
        ...

    @property
    def RobustConnect(self) -> XlRobustConnect:
        """
        Get: RobustConnect(self: IODBCConnection) -> XlRobustConnect
        Set: RobustConnect(self: IODBCConnection) = value
        """
        ...

    @property
    def SavePassword(self) -> bool:
        """
        Get: SavePassword(self: IODBCConnection) -> bool
        Set: SavePassword(self: IODBCConnection) = value
        """
        ...

    @property
    def ServerCredentialsMethod(self) -> XlCredentialsMethod:
        """
        Get: ServerCredentialsMethod(self: IODBCConnection) -> XlCredentialsMethod
        Set: ServerCredentialsMethod(self: IODBCConnection) = value
        """
        ...

    @property
    def ServerSSOApplicationID(self) -> str:
        """
        Get: ServerSSOApplicationID(self: IODBCConnection) -> str
        Set: ServerSSOApplicationID(self: IODBCConnection) = value
        """
        ...

    @property
    def SourceConnectionFile(self) -> str:
        """
        Get: SourceConnectionFile(self: IODBCConnection) -> str
        Set: SourceConnectionFile(self: IODBCConnection) = value
        """
        ...

    @property
    def SourceData(self) -> object:
        """
        Get: SourceData(self: IODBCConnection) -> object
        Set: SourceData(self: IODBCConnection) = value
        """
        ...

    @property
    def SourceDataFile(self) -> str:
        """
        Get: SourceDataFile(self: IODBCConnection) -> str
        Set: SourceDataFile(self: IODBCConnection) = value
        """
        ...


    def CancelRefresh(self): # -> 
        """ CancelRefresh(self: IODBCConnection) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: IODBCConnection) """
        ...

    def SaveAsODC(self, ODCFileName:str, Description:object, Keywords:object): # -> 
        """ SaveAsODC(self: IODBCConnection, ODCFileName: str, Description: object, Keywords: object) """
        ...


class IODBCError: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IODBCError) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IODBCError) -> XlCreator """
        ...

    @property
    def ErrorString(self) -> str:
        """ Get: ErrorString(self: IODBCError) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IODBCError) -> object """
        ...

    @property
    def SqlState(self) -> str:
        """ Get: SqlState(self: IODBCError) -> str """
        ...



class IODBCErrors(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IODBCErrors) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IODBCErrors) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IODBCErrors) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IODBCErrors) -> object """
        ...


    def Item(self, Index:int) -> ODBCError:
        """ Item(self: IODBCErrors, Index: int) -> ODBCError """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IOLEDBConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ADOConnection(self) -> object:
        """ Get: ADOConnection(self: IOLEDBConnection) -> object """
        ...

    @property
    def AlwaysUseConnectionFile(self) -> bool:
        """
        Get: AlwaysUseConnectionFile(self: IOLEDBConnection) -> bool
        Set: AlwaysUseConnectionFile(self: IOLEDBConnection) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IOLEDBConnection) -> Application """
        ...

    @property
    def BackgroundQuery(self) -> bool:
        """
        Get: BackgroundQuery(self: IOLEDBConnection) -> bool
        Set: BackgroundQuery(self: IOLEDBConnection) = value
        """
        ...

    @property
    def CalculatedMembers(self) -> CalculatedMembers:
        """ Get: CalculatedMembers(self: IOLEDBConnection) -> CalculatedMembers """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: IOLEDBConnection) -> object
        Set: CommandText(self: IOLEDBConnection) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: IOLEDBConnection) -> XlCmdType
        Set: CommandType(self: IOLEDBConnection) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: IOLEDBConnection) -> object
        Set: Connection(self: IOLEDBConnection) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IOLEDBConnection) -> XlCreator """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: IOLEDBConnection) -> bool
        Set: EnableRefresh(self: IOLEDBConnection) = value
        """
        ...

    @property
    def IsConnected(self) -> bool:
        """ Get: IsConnected(self: IOLEDBConnection) -> bool """
        ...

    @property
    def LocalConnection(self) -> object:
        """
        Get: LocalConnection(self: IOLEDBConnection) -> object
        Set: LocalConnection(self: IOLEDBConnection) = value
        """
        ...

    @property
    def LocaleID(self) -> int:
        """
        Get: LocaleID(self: IOLEDBConnection) -> int
        Set: LocaleID(self: IOLEDBConnection) = value
        """
        ...

    @property
    def MaintainConnection(self) -> bool:
        """
        Get: MaintainConnection(self: IOLEDBConnection) -> bool
        Set: MaintainConnection(self: IOLEDBConnection) = value
        """
        ...

    @property
    def MaxDrillthroughRecords(self) -> int:
        """
        Get: MaxDrillthroughRecords(self: IOLEDBConnection) -> int
        Set: MaxDrillthroughRecords(self: IOLEDBConnection) = value
        """
        ...

    @property
    def OLAP(self) -> bool:
        """ Get: OLAP(self: IOLEDBConnection) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IOLEDBConnection) -> object """
        ...

    @property
    def RefreshDate(self) -> DateTime:
        """ Get: RefreshDate(self: IOLEDBConnection) -> DateTime """
        ...

    @property
    def Refreshing(self) -> bool:
        """ Get: Refreshing(self: IOLEDBConnection) -> bool """
        ...

    @property
    def RefreshOnFileOpen(self) -> bool:
        """
        Get: RefreshOnFileOpen(self: IOLEDBConnection) -> bool
        Set: RefreshOnFileOpen(self: IOLEDBConnection) = value
        """
        ...

    @property
    def RefreshPeriod(self) -> int:
        """
        Get: RefreshPeriod(self: IOLEDBConnection) -> int
        Set: RefreshPeriod(self: IOLEDBConnection) = value
        """
        ...

    @property
    def RetrieveInOfficeUILang(self) -> bool:
        """
        Get: RetrieveInOfficeUILang(self: IOLEDBConnection) -> bool
        Set: RetrieveInOfficeUILang(self: IOLEDBConnection) = value
        """
        ...

    @property
    def RobustConnect(self) -> XlRobustConnect:
        """
        Get: RobustConnect(self: IOLEDBConnection) -> XlRobustConnect
        Set: RobustConnect(self: IOLEDBConnection) = value
        """
        ...

    @property
    def SavePassword(self) -> bool:
        """
        Get: SavePassword(self: IOLEDBConnection) -> bool
        Set: SavePassword(self: IOLEDBConnection) = value
        """
        ...

    @property
    def ServerCredentialsMethod(self) -> XlCredentialsMethod:
        """
        Get: ServerCredentialsMethod(self: IOLEDBConnection) -> XlCredentialsMethod
        Set: ServerCredentialsMethod(self: IOLEDBConnection) = value
        """
        ...

    @property
    def ServerFillColor(self) -> bool:
        """
        Get: ServerFillColor(self: IOLEDBConnection) -> bool
        Set: ServerFillColor(self: IOLEDBConnection) = value
        """
        ...

    @property
    def ServerFontStyle(self) -> bool:
        """
        Get: ServerFontStyle(self: IOLEDBConnection) -> bool
        Set: ServerFontStyle(self: IOLEDBConnection) = value
        """
        ...

    @property
    def ServerNumberFormat(self) -> bool:
        """
        Get: ServerNumberFormat(self: IOLEDBConnection) -> bool
        Set: ServerNumberFormat(self: IOLEDBConnection) = value
        """
        ...

    @property
    def ServerSSOApplicationID(self) -> str:
        """
        Get: ServerSSOApplicationID(self: IOLEDBConnection) -> str
        Set: ServerSSOApplicationID(self: IOLEDBConnection) = value
        """
        ...

    @property
    def ServerTextColor(self) -> bool:
        """
        Get: ServerTextColor(self: IOLEDBConnection) -> bool
        Set: ServerTextColor(self: IOLEDBConnection) = value
        """
        ...

    @property
    def SourceConnectionFile(self) -> str:
        """
        Get: SourceConnectionFile(self: IOLEDBConnection) -> str
        Set: SourceConnectionFile(self: IOLEDBConnection) = value
        """
        ...

    @property
    def SourceDataFile(self) -> str:
        """
        Get: SourceDataFile(self: IOLEDBConnection) -> str
        Set: SourceDataFile(self: IOLEDBConnection) = value
        """
        ...

    @property
    def UseLocalConnection(self) -> bool:
        """
        Get: UseLocalConnection(self: IOLEDBConnection) -> bool
        Set: UseLocalConnection(self: IOLEDBConnection) = value
        """
        ...


    def CancelRefresh(self): # -> 
        """ CancelRefresh(self: IOLEDBConnection) """
        ...

    def MakeConnection(self): # -> 
        """ MakeConnection(self: IOLEDBConnection) """
        ...

    def Reconnect(self): # -> 
        """ Reconnect(self: IOLEDBConnection) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: IOLEDBConnection) """
        ...

    def SaveAsODC(self, ODCFileName:str, Description:object, Keywords:object): # -> 
        """ SaveAsODC(self: IOLEDBConnection, ODCFileName: str, Description: object, Keywords: object) """
        ...


class IOLEDBError: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IOLEDBError) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IOLEDBError) -> XlCreator """
        ...

    @property
    def ErrorString(self) -> str:
        """ Get: ErrorString(self: IOLEDBError) -> str """
        ...

    @property
    def Native(self) -> int:
        """ Get: Native(self: IOLEDBError) -> int """
        ...

    @property
    def Number(self) -> int:
        """ Get: Number(self: IOLEDBError) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IOLEDBError) -> object """
        ...

    @property
    def SqlState(self) -> str:
        """ Get: SqlState(self: IOLEDBError) -> str """
        ...

    @property
    def Stage(self) -> int:
        """ Get: Stage(self: IOLEDBError) -> int """
        ...



class IOLEDBErrors(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IOLEDBErrors) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IOLEDBErrors) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IOLEDBErrors) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IOLEDBErrors) -> object """
        ...


    def Item(self, Index:int) -> OLEDBError:
        """ Item(self: IOLEDBErrors, Index: int) -> OLEDBError """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IOLEFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IOLEFormat) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IOLEFormat) -> XlCreator """
        ...

    @property
    def Object(self) -> object:
        """ Get: Object(self: IOLEFormat) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IOLEFormat) -> object """
        ...

    @property
    def progID(self) -> str:
        """ Get: progID(self: IOLEFormat) -> str """
        ...


    def Activate(self): # -> 
        """ Activate(self: IOLEFormat) """
        ...

    def Verb(self, Verb:object): # -> 
        """ Verb(self: IOLEFormat, Verb: object) """
        ...


class IOLEObjectEvents: # skipped bases: <type 'object'>
    """ no doc """
    def GotFocus(self): # -> 
        """ GotFocus(self: IOLEObjectEvents) """
        ...

    def LostFocus(self): # -> 
        """ LostFocus(self: IOLEObjectEvents) """
        ...


class IOLEObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IOLEObjects) -> Application """
        ...

    @property
    def AutoLoad(self) -> bool:
        """
        Get: AutoLoad(self: IOLEObjects) -> bool
        Set: AutoLoad(self: IOLEObjects) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IOLEObjects) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IOLEObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IOLEObjects) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IOLEObjects) -> bool
        Set: Enabled(self: IOLEObjects) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IOLEObjects) -> float
        Set: Height(self: IOLEObjects) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IOLEObjects) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IOLEObjects) -> float
        Set: Left(self: IOLEObjects) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IOLEObjects) -> bool
        Set: Locked(self: IOLEObjects) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IOLEObjects) -> str
        Set: OnAction(self: IOLEObjects) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IOLEObjects) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IOLEObjects) -> object
        Set: Placement(self: IOLEObjects) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IOLEObjects) -> bool
        Set: PrintObject(self: IOLEObjects) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IOLEObjects) -> bool
        Set: Shadow(self: IOLEObjects) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IOLEObjects) -> ShapeRange """
        ...

    @property
    def SourceName(self) -> str:
        """
        Get: SourceName(self: IOLEObjects) -> str
        Set: SourceName(self: IOLEObjects) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IOLEObjects) -> float
        Set: Top(self: IOLEObjects) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IOLEObjects) -> bool
        Set: Visible(self: IOLEObjects) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IOLEObjects) -> float
        Set: Width(self: IOLEObjects) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IOLEObjects) -> int """
        ...


    def Add(self, ClassType:object, Filename:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object, Left:object, Top:object, Width:object, Height:object) -> OLEObject:
        """ Add(self: IOLEObjects, ClassType: object, Filename: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, Left: object, Top: object, Width: object, Height: object) -> OLEObject """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IOLEObjects) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IOLEObjects) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IOLEObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IOLEObjects) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IOLEObjects) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IOLEObjects) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IOLEObjects) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IOLEObjects, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IOLEObjects, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IOLEObjects) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IOLEObjects) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IOLEObjects) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IOLEObjects) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IOLEObjects) """
        ...

    def _Dummy30(self): # -> 
        """ _Dummy30(self: IOLEObjects) """
        ...

    def _Dummy32(self): # -> 
        """ _Dummy32(self: IOLEObjects) """
        ...

    def _Dummy33(self): # -> 
        """ _Dummy33(self: IOLEObjects) """
        ...

    def _Dummy34(self): # -> 
        """ _Dummy34(self: IOLEObjects) """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: IOLEObjects) """
        ...

    def _Dummy37(self): # -> 
        """ _Dummy37(self: IOLEObjects) """
        ...

    def _Dummy38(self): # -> 
        """ _Dummy38(self: IOLEObjects) """
        ...

    def _Dummy39(self): # -> 
        """ _Dummy39(self: IOLEObjects) """
        ...

    def _Dummy40(self): # -> 
        """ _Dummy40(self: IOLEObjects) """
        ...

    def _Dummy41(self): # -> 
        """ _Dummy41(self: IOLEObjects) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IOptionButton: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: IOptionButton) -> object
        Set: Accelerator(self: IOptionButton) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IOptionButton) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IOptionButton) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IOptionButton) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IOptionButton) -> str
        Set: Caption(self: IOptionButton) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IOptionButton) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: IOptionButton) -> bool
        Set: Display3DShading(self: IOptionButton) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IOptionButton) -> bool
        Set: Enabled(self: IOptionButton) = value
        """
        ...

    @property
    def GroupBox(self) -> GroupBox:
        """ Get: GroupBox(self: IOptionButton) -> GroupBox """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IOptionButton) -> float
        Set: Height(self: IOptionButton) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IOptionButton) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IOptionButton) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IOptionButton) -> float
        Set: Left(self: IOptionButton) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: IOptionButton) -> str
        Set: LinkedCell(self: IOptionButton) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IOptionButton) -> bool
        Set: Locked(self: IOptionButton) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IOptionButton) -> bool
        Set: LockedText(self: IOptionButton) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IOptionButton) -> str
        Set: Name(self: IOptionButton) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IOptionButton) -> str
        Set: OnAction(self: IOptionButton) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IOptionButton) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: IOptionButton) -> object
        Set: PhoneticAccelerator(self: IOptionButton) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IOptionButton) -> object
        Set: Placement(self: IOptionButton) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IOptionButton) -> bool
        Set: PrintObject(self: IOptionButton) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IOptionButton) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IOptionButton) -> str
        Set: Text(self: IOptionButton) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IOptionButton) -> float
        Set: Top(self: IOptionButton) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IOptionButton) -> Range """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: IOptionButton) -> object
        Set: Value(self: IOptionButton) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IOptionButton) -> bool
        Set: Visible(self: IOptionButton) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IOptionButton) -> float
        Set: Width(self: IOptionButton) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IOptionButton) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IOptionButton) -> int
        Set: _Default(self: IOptionButton) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: IOptionButton) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IOptionButton, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IOptionButton) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IOptionButton, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IOptionButton) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IOptionButton) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IOptionButton) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IOptionButton, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IOptionButton) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IOptionButtons(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: IOptionButtons) -> object
        Set: Accelerator(self: IOptionButtons) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IOptionButtons) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IOptionButtons) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IOptionButtons) -> str
        Set: Caption(self: IOptionButtons) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IOptionButtons) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IOptionButtons) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: IOptionButtons) -> bool
        Set: Display3DShading(self: IOptionButtons) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IOptionButtons) -> bool
        Set: Enabled(self: IOptionButtons) = value
        """
        ...

    @property
    def GroupBox(self) -> GroupBox:
        """ Get: GroupBox(self: IOptionButtons) -> GroupBox """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IOptionButtons) -> float
        Set: Height(self: IOptionButtons) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IOptionButtons) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IOptionButtons) -> float
        Set: Left(self: IOptionButtons) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: IOptionButtons) -> str
        Set: LinkedCell(self: IOptionButtons) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IOptionButtons) -> bool
        Set: Locked(self: IOptionButtons) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IOptionButtons) -> bool
        Set: LockedText(self: IOptionButtons) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IOptionButtons) -> str
        Set: OnAction(self: IOptionButtons) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IOptionButtons) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: IOptionButtons) -> object
        Set: PhoneticAccelerator(self: IOptionButtons) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IOptionButtons) -> object
        Set: Placement(self: IOptionButtons) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IOptionButtons) -> bool
        Set: PrintObject(self: IOptionButtons) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IOptionButtons) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IOptionButtons) -> str
        Set: Text(self: IOptionButtons) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IOptionButtons) -> float
        Set: Top(self: IOptionButtons) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: IOptionButtons) -> object
        Set: Value(self: IOptionButtons) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IOptionButtons) -> bool
        Set: Visible(self: IOptionButtons) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IOptionButtons) -> float
        Set: Width(self: IOptionButtons) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IOptionButtons) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IOptionButtons) -> int
        Set: _Default(self: IOptionButtons) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> OptionButton:
        """ Add(self: IOptionButtons, Left: float, Top: float, Width: float, Height: float) -> OptionButton """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IOptionButtons) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IOptionButtons, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IOptionButtons) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IOptionButtons, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IOptionButtons) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IOptionButtons) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IOptionButtons) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IOptionButtons) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IOptionButtons, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IOptionButtons, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IOptionButtons) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IOptionButtons) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IOptionButtons) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IOptionButtons) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IOptionButtons) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IOutline: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IOutline) -> Application """
        ...

    @property
    def AutomaticStyles(self) -> bool:
        """
        Get: AutomaticStyles(self: IOutline) -> bool
        Set: AutomaticStyles(self: IOutline) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IOutline) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IOutline) -> object """
        ...

    @property
    def SummaryColumn(self) -> XlSummaryColumn:
        """
        Get: SummaryColumn(self: IOutline) -> XlSummaryColumn
        Set: SummaryColumn(self: IOutline) = value
        """
        ...

    @property
    def SummaryRow(self) -> XlSummaryRow:
        """
        Get: SummaryRow(self: IOutline) -> XlSummaryRow
        Set: SummaryRow(self: IOutline) = value
        """
        ...


    def ShowLevels(self, RowLevels:object, ColumnLevels:object) -> object:
        """ ShowLevels(self: IOutline, RowLevels: object, ColumnLevels: object) -> object """
        ...


class IOval: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IOval) -> bool
        Set: AddIndent(self: IOval) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IOval) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IOval) -> object
        Set: AutoScaleFont(self: IOval) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IOval) -> bool
        Set: AutoSize(self: IOval) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IOval) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IOval) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IOval) -> str
        Set: Caption(self: IOval) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IOval) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IOval) -> bool
        Set: Enabled(self: IOval) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IOval) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IOval) -> str
        Set: Formula(self: IOval) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IOval) -> float
        Set: Height(self: IOval) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IOval) -> object
        Set: HorizontalAlignment(self: IOval) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IOval) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IOval) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IOval) -> float
        Set: Left(self: IOval) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IOval) -> bool
        Set: Locked(self: IOval) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IOval) -> bool
        Set: LockedText(self: IOval) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IOval) -> str
        Set: Name(self: IOval) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IOval) -> str
        Set: OnAction(self: IOval) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IOval) -> object
        Set: Orientation(self: IOval) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IOval) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IOval) -> object
        Set: Placement(self: IOval) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IOval) -> bool
        Set: PrintObject(self: IOval) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IOval) -> int
        Set: ReadingOrder(self: IOval) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IOval) -> bool
        Set: Shadow(self: IOval) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IOval) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IOval) -> str
        Set: Text(self: IOval) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IOval) -> float
        Set: Top(self: IOval) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IOval) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IOval) -> object
        Set: VerticalAlignment(self: IOval) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IOval) -> bool
        Set: Visible(self: IOval) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IOval) -> float
        Set: Width(self: IOval) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IOval) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: IOval) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IOval, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IOval) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IOval, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IOval) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IOval) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IOval) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IOval, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IOval) -> object """
        ...


class IOvals(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IOvals) -> bool
        Set: AddIndent(self: IOvals) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IOvals) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IOvals) -> object
        Set: AutoScaleFont(self: IOvals) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IOvals) -> bool
        Set: AutoSize(self: IOvals) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IOvals) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IOvals) -> str
        Set: Caption(self: IOvals) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IOvals) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IOvals) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IOvals) -> bool
        Set: Enabled(self: IOvals) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IOvals) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IOvals) -> str
        Set: Formula(self: IOvals) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IOvals) -> float
        Set: Height(self: IOvals) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IOvals) -> object
        Set: HorizontalAlignment(self: IOvals) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IOvals) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IOvals) -> float
        Set: Left(self: IOvals) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IOvals) -> bool
        Set: Locked(self: IOvals) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IOvals) -> bool
        Set: LockedText(self: IOvals) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IOvals) -> str
        Set: OnAction(self: IOvals) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IOvals) -> object
        Set: Orientation(self: IOvals) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IOvals) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IOvals) -> object
        Set: Placement(self: IOvals) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IOvals) -> bool
        Set: PrintObject(self: IOvals) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IOvals) -> int
        Set: ReadingOrder(self: IOvals) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IOvals) -> bool
        Set: Shadow(self: IOvals) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IOvals) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IOvals) -> str
        Set: Text(self: IOvals) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IOvals) -> float
        Set: Top(self: IOvals) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IOvals) -> object
        Set: VerticalAlignment(self: IOvals) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IOvals) -> bool
        Set: Visible(self: IOvals) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IOvals) -> float
        Set: Width(self: IOvals) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IOvals) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Oval:
        """ Add(self: IOvals, Left: float, Top: float, Width: float, Height: float) -> Oval """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IOvals) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IOvals, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IOvals) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IOvals, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IOvals) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IOvals) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IOvals) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IOvals) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IOvals, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IOvals, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IOvals) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IOvals) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IOvals) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IOvals) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IOvals) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IPage: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def CenterFooter(self) -> HeaderFooter:
        """ Get: CenterFooter(self: IPage) -> HeaderFooter """
        ...

    @property
    def CenterHeader(self) -> HeaderFooter:
        """ Get: CenterHeader(self: IPage) -> HeaderFooter """
        ...

    @property
    def LeftFooter(self) -> HeaderFooter:
        """ Get: LeftFooter(self: IPage) -> HeaderFooter """
        ...

    @property
    def LeftHeader(self) -> HeaderFooter:
        """ Get: LeftHeader(self: IPage) -> HeaderFooter """
        ...

    @property
    def RightFooter(self) -> HeaderFooter:
        """ Get: RightFooter(self: IPage) -> HeaderFooter """
        ...

    @property
    def RightHeader(self) -> HeaderFooter:
        """ Get: RightHeader(self: IPage) -> HeaderFooter """
        ...



class IPages(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: IPages) -> int """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IPageSetup: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlignMarginsHeaderFooter(self) -> bool:
        """
        Get: AlignMarginsHeaderFooter(self: IPageSetup) -> bool
        Set: AlignMarginsHeaderFooter(self: IPageSetup) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPageSetup) -> Application """
        ...

    @property
    def BlackAndWhite(self) -> bool:
        """
        Get: BlackAndWhite(self: IPageSetup) -> bool
        Set: BlackAndWhite(self: IPageSetup) = value
        """
        ...

    @property
    def BottomMargin(self) -> float:
        """
        Get: BottomMargin(self: IPageSetup) -> float
        Set: BottomMargin(self: IPageSetup) = value
        """
        ...

    @property
    def CenterFooter(self) -> str:
        """
        Get: CenterFooter(self: IPageSetup) -> str
        Set: CenterFooter(self: IPageSetup) = value
        """
        ...

    @property
    def CenterFooterPicture(self) -> Graphic:
        """ Get: CenterFooterPicture(self: IPageSetup) -> Graphic """
        ...

    @property
    def CenterHeader(self) -> str:
        """
        Get: CenterHeader(self: IPageSetup) -> str
        Set: CenterHeader(self: IPageSetup) = value
        """
        ...

    @property
    def CenterHeaderPicture(self) -> Graphic:
        """ Get: CenterHeaderPicture(self: IPageSetup) -> Graphic """
        ...

    @property
    def CenterHorizontally(self) -> bool:
        """
        Get: CenterHorizontally(self: IPageSetup) -> bool
        Set: CenterHorizontally(self: IPageSetup) = value
        """
        ...

    @property
    def CenterVertically(self) -> bool:
        """
        Get: CenterVertically(self: IPageSetup) -> bool
        Set: CenterVertically(self: IPageSetup) = value
        """
        ...

    @property
    def ChartSize(self) -> XlObjectSize:
        """
        Get: ChartSize(self: IPageSetup) -> XlObjectSize
        Set: ChartSize(self: IPageSetup) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPageSetup) -> XlCreator """
        ...

    @property
    def DifferentFirstPageHeaderFooter(self) -> bool:
        """
        Get: DifferentFirstPageHeaderFooter(self: IPageSetup) -> bool
        Set: DifferentFirstPageHeaderFooter(self: IPageSetup) = value
        """
        ...

    @property
    def Draft(self) -> bool:
        """
        Get: Draft(self: IPageSetup) -> bool
        Set: Draft(self: IPageSetup) = value
        """
        ...

    @property
    def EvenPage(self) -> Page:
        """ Get: EvenPage(self: IPageSetup) -> Page """
        ...

    @property
    def FirstPage(self) -> Page:
        """ Get: FirstPage(self: IPageSetup) -> Page """
        ...

    @property
    def FirstPageNumber(self) -> int:
        """
        Get: FirstPageNumber(self: IPageSetup) -> int
        Set: FirstPageNumber(self: IPageSetup) = value
        """
        ...

    @property
    def FitToPagesTall(self) -> object:
        """
        Get: FitToPagesTall(self: IPageSetup) -> object
        Set: FitToPagesTall(self: IPageSetup) = value
        """
        ...

    @property
    def FitToPagesWide(self) -> object:
        """
        Get: FitToPagesWide(self: IPageSetup) -> object
        Set: FitToPagesWide(self: IPageSetup) = value
        """
        ...

    @property
    def FooterMargin(self) -> float:
        """
        Get: FooterMargin(self: IPageSetup) -> float
        Set: FooterMargin(self: IPageSetup) = value
        """
        ...

    @property
    def HeaderMargin(self) -> float:
        """
        Get: HeaderMargin(self: IPageSetup) -> float
        Set: HeaderMargin(self: IPageSetup) = value
        """
        ...

    @property
    def LeftFooter(self) -> str:
        """
        Get: LeftFooter(self: IPageSetup) -> str
        Set: LeftFooter(self: IPageSetup) = value
        """
        ...

    @property
    def LeftFooterPicture(self) -> Graphic:
        """ Get: LeftFooterPicture(self: IPageSetup) -> Graphic """
        ...

    @property
    def LeftHeader(self) -> str:
        """
        Get: LeftHeader(self: IPageSetup) -> str
        Set: LeftHeader(self: IPageSetup) = value
        """
        ...

    @property
    def LeftHeaderPicture(self) -> Graphic:
        """ Get: LeftHeaderPicture(self: IPageSetup) -> Graphic """
        ...

    @property
    def LeftMargin(self) -> float:
        """
        Get: LeftMargin(self: IPageSetup) -> float
        Set: LeftMargin(self: IPageSetup) = value
        """
        ...

    @property
    def OddAndEvenPagesHeaderFooter(self) -> bool:
        """
        Get: OddAndEvenPagesHeaderFooter(self: IPageSetup) -> bool
        Set: OddAndEvenPagesHeaderFooter(self: IPageSetup) = value
        """
        ...

    @property
    def Order(self) -> XlOrder:
        """
        Get: Order(self: IPageSetup) -> XlOrder
        Set: Order(self: IPageSetup) = value
        """
        ...

    @property
    def Orientation(self) -> XlPageOrientation:
        """
        Get: Orientation(self: IPageSetup) -> XlPageOrientation
        Set: Orientation(self: IPageSetup) = value
        """
        ...

    @property
    def Pages(self) -> Pages:
        """ Get: Pages(self: IPageSetup) -> Pages """
        ...

    @property
    def PaperSize(self) -> XlPaperSize:
        """
        Get: PaperSize(self: IPageSetup) -> XlPaperSize
        Set: PaperSize(self: IPageSetup) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPageSetup) -> object """
        ...

    @property
    def PrintArea(self) -> str:
        """
        Get: PrintArea(self: IPageSetup) -> str
        Set: PrintArea(self: IPageSetup) = value
        """
        ...

    @property
    def PrintComments(self) -> XlPrintLocation:
        """
        Get: PrintComments(self: IPageSetup) -> XlPrintLocation
        Set: PrintComments(self: IPageSetup) = value
        """
        ...

    @property
    def PrintErrors(self) -> XlPrintErrors:
        """
        Get: PrintErrors(self: IPageSetup) -> XlPrintErrors
        Set: PrintErrors(self: IPageSetup) = value
        """
        ...

    @property
    def PrintGridlines(self) -> bool:
        """
        Get: PrintGridlines(self: IPageSetup) -> bool
        Set: PrintGridlines(self: IPageSetup) = value
        """
        ...

    @property
    def PrintHeadings(self) -> bool:
        """
        Get: PrintHeadings(self: IPageSetup) -> bool
        Set: PrintHeadings(self: IPageSetup) = value
        """
        ...

    @property
    def PrintNotes(self) -> bool:
        """
        Get: PrintNotes(self: IPageSetup) -> bool
        Set: PrintNotes(self: IPageSetup) = value
        """
        ...

    @property
    def PrintTitleColumns(self) -> str:
        """
        Get: PrintTitleColumns(self: IPageSetup) -> str
        Set: PrintTitleColumns(self: IPageSetup) = value
        """
        ...

    @property
    def PrintTitleRows(self) -> str:
        """
        Get: PrintTitleRows(self: IPageSetup) -> str
        Set: PrintTitleRows(self: IPageSetup) = value
        """
        ...

    @property
    def RightFooter(self) -> str:
        """
        Get: RightFooter(self: IPageSetup) -> str
        Set: RightFooter(self: IPageSetup) = value
        """
        ...

    @property
    def RightFooterPicture(self) -> Graphic:
        """ Get: RightFooterPicture(self: IPageSetup) -> Graphic """
        ...

    @property
    def RightHeader(self) -> str:
        """
        Get: RightHeader(self: IPageSetup) -> str
        Set: RightHeader(self: IPageSetup) = value
        """
        ...

    @property
    def RightHeaderPicture(self) -> Graphic:
        """ Get: RightHeaderPicture(self: IPageSetup) -> Graphic """
        ...

    @property
    def RightMargin(self) -> float:
        """
        Get: RightMargin(self: IPageSetup) -> float
        Set: RightMargin(self: IPageSetup) = value
        """
        ...

    @property
    def ScaleWithDocHeaderFooter(self) -> bool:
        """
        Get: ScaleWithDocHeaderFooter(self: IPageSetup) -> bool
        Set: ScaleWithDocHeaderFooter(self: IPageSetup) = value
        """
        ...

    @property
    def TopMargin(self) -> float:
        """
        Get: TopMargin(self: IPageSetup) -> float
        Set: TopMargin(self: IPageSetup) = value
        """
        ...

    @property
    def Zoom(self) -> object:
        """
        Get: Zoom(self: IPageSetup) -> object
        Set: Zoom(self: IPageSetup) = value
        """
        ...



class IPane: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPane) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPane) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IPane) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPane) -> object """
        ...

    @property
    def ScrollColumn(self) -> int:
        """
        Get: ScrollColumn(self: IPane) -> int
        Set: ScrollColumn(self: IPane) = value
        """
        ...

    @property
    def ScrollRow(self) -> int:
        """
        Get: ScrollRow(self: IPane) -> int
        Set: ScrollRow(self: IPane) = value
        """
        ...

    @property
    def VisibleRange(self) -> Range:
        """ Get: VisibleRange(self: IPane) -> Range """
        ...


    def Activate(self) -> bool:
        """ Activate(self: IPane) -> bool """
        ...

    def LargeScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> object:
        """ LargeScroll(self: IPane, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        ...

    def PointsToScreenPixelsX(self, Points:int) -> int:
        """ PointsToScreenPixelsX(self: IPane, Points: int) -> int """
        ...

    def PointsToScreenPixelsY(self, Points:int) -> int:
        """ PointsToScreenPixelsY(self: IPane, Points: int) -> int """
        ...

    def ScrollIntoView(self, Left:int, Top:int, Width:int, Height:int, Start:object): # -> 
        """ ScrollIntoView(self: IPane, Left: int, Top: int, Width: int, Height: int, Start: object) """
        ...

    def SmallScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> object:
        """ SmallScroll(self: IPane, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        ...


class IPanes: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPanes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPanes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPanes) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPanes) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IParameter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IParameter) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IParameter) -> XlCreator """
        ...

    @property
    def DataType(self) -> XlParameterDataType:
        """
        Get: DataType(self: IParameter) -> XlParameterDataType
        Set: DataType(self: IParameter) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IParameter) -> str
        Set: Name(self: IParameter) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IParameter) -> object """
        ...

    @property
    def PromptString(self) -> str:
        """ Get: PromptString(self: IParameter) -> str """
        ...

    @property
    def RefreshOnChange(self) -> bool:
        """
        Get: RefreshOnChange(self: IParameter) -> bool
        Set: RefreshOnChange(self: IParameter) = value
        """
        ...

    @property
    def SourceRange(self) -> Range:
        """ Get: SourceRange(self: IParameter) -> Range """
        ...

    @property
    def Type(self) -> XlParameterType:
        """ Get: Type(self: IParameter) -> XlParameterType """
        ...

    @property
    def Value(self) -> object:
        """ Get: Value(self: IParameter) -> object """
        ...


    def SetParam(self, Type:XlParameterType, Value:object): # -> 
        """ SetParam(self: IParameter, Type: XlParameterType, Value: object) """
        ...


class IParameters(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IParameters) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IParameters) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IParameters) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IParameters) -> object """
        ...


    def Add(self, Name:str, iDataType:object) -> Parameter:
        """ Add(self: IParameters, Name: str, iDataType: object) -> Parameter """
        ...

    def Delete(self): # -> 
        """ Delete(self: IParameters) """
        ...

    def Item(self, Index:object) -> Parameter:
        """ Item(self: IParameters, Index: object) -> Parameter """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IPhonetic: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> int:
        """
        Get: Alignment(self: IPhonetic) -> int
        Set: Alignment(self: IPhonetic) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPhonetic) -> Application """
        ...

    @property
    def CharacterType(self) -> int:
        """
        Get: CharacterType(self: IPhonetic) -> int
        Set: CharacterType(self: IPhonetic) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPhonetic) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IPhonetic) -> Font """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPhonetic) -> object """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IPhonetic) -> str
        Set: Text(self: IPhonetic) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IPhonetic) -> bool
        Set: Visible(self: IPhonetic) = value
        """
        ...



class IPhonetics(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> int:
        """
        Get: Alignment(self: IPhonetics) -> int
        Set: Alignment(self: IPhonetics) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPhonetics) -> Application """
        ...

    @property
    def CharacterType(self) -> int:
        """
        Get: CharacterType(self: IPhonetics) -> int
        Set: CharacterType(self: IPhonetics) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPhonetics) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPhonetics) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IPhonetics) -> Font """
        ...

    @property
    def Length(self) -> int:
        """ Get: Length(self: IPhonetics) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPhonetics) -> object """
        ...

    @property
    def Start(self) -> int:
        """ Get: Start(self: IPhonetics) -> int """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IPhonetics) -> str
        Set: Text(self: IPhonetics) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IPhonetics) -> bool
        Set: Visible(self: IPhonetics) = value
        """
        ...


    def Add(self, Start:int, Length:int, Text:str): # -> 
        """ Add(self: IPhonetics, Start: int, Length: int, Text: str) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IPhonetics) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IPicture: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPicture) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IPicture) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IPicture) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPicture) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IPicture) -> bool
        Set: Enabled(self: IPicture) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IPicture) -> str
        Set: Formula(self: IPicture) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IPicture) -> float
        Set: Height(self: IPicture) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IPicture) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IPicture) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IPicture) -> float
        Set: Left(self: IPicture) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IPicture) -> bool
        Set: Locked(self: IPicture) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IPicture) -> str
        Set: Name(self: IPicture) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IPicture) -> str
        Set: OnAction(self: IPicture) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPicture) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IPicture) -> object
        Set: Placement(self: IPicture) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IPicture) -> bool
        Set: PrintObject(self: IPicture) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IPicture) -> bool
        Set: Shadow(self: IPicture) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IPicture) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IPicture) -> float
        Set: Top(self: IPicture) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IPicture) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IPicture) -> bool
        Set: Visible(self: IPicture) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IPicture) -> float
        Set: Width(self: IPicture) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IPicture) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: IPicture) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IPicture) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IPicture, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IPicture) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IPicture) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IPicture) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IPicture, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IPicture) -> object """
        ...


class IPictures(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPictures) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IPictures) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPictures) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPictures) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IPictures) -> bool
        Set: Enabled(self: IPictures) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IPictures) -> str
        Set: Formula(self: IPictures) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IPictures) -> float
        Set: Height(self: IPictures) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IPictures) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IPictures) -> float
        Set: Left(self: IPictures) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IPictures) -> bool
        Set: Locked(self: IPictures) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IPictures) -> str
        Set: OnAction(self: IPictures) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPictures) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IPictures) -> object
        Set: Placement(self: IPictures) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IPictures) -> bool
        Set: PrintObject(self: IPictures) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IPictures) -> bool
        Set: Shadow(self: IPictures) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IPictures) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IPictures) -> float
        Set: Top(self: IPictures) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IPictures) -> bool
        Set: Visible(self: IPictures) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IPictures) -> float
        Set: Width(self: IPictures) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IPictures) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Picture:
        """ Add(self: IPictures, Left: float, Top: float, Width: float, Height: float) -> Picture """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IPictures) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IPictures) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IPictures, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IPictures) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IPictures) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IPictures) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IPictures) -> GroupObject """
        ...

    def Insert(self, Filename:str, Converter:object) -> Picture:
        """ Insert(self: IPictures, Filename: str, Converter: object) -> Picture """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IPictures, Index: object) -> object """
        ...

    def Paste(self, Link:object) -> Picture:
        """ Paste(self: IPictures, Link: object) -> Picture """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IPictures, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IPictures) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IPictures) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IPictures) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IPictures) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IPictures) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IPivotAxis: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotAxis) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotAxis) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotAxis) -> object """
        ...

    @property
    def PivotLines(self) -> PivotLines:
        """ Get: PivotLines(self: IPivotAxis) -> PivotLines """
        ...



class IPivotCache: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ADOConnection(self) -> object:
        """ Get: ADOConnection(self: IPivotCache) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotCache) -> Application """
        ...

    @property
    def BackgroundQuery(self) -> bool:
        """
        Get: BackgroundQuery(self: IPivotCache) -> bool
        Set: BackgroundQuery(self: IPivotCache) = value
        """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: IPivotCache) -> object
        Set: CommandText(self: IPivotCache) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: IPivotCache) -> XlCmdType
        Set: CommandType(self: IPivotCache) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: IPivotCache) -> object
        Set: Connection(self: IPivotCache) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotCache) -> XlCreator """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: IPivotCache) -> bool
        Set: EnableRefresh(self: IPivotCache) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IPivotCache) -> int """
        ...

    @property
    def IsConnected(self) -> bool:
        """ Get: IsConnected(self: IPivotCache) -> bool """
        ...

    @property
    def LocalConnection(self) -> object:
        """
        Get: LocalConnection(self: IPivotCache) -> object
        Set: LocalConnection(self: IPivotCache) = value
        """
        ...

    @property
    def MaintainConnection(self) -> bool:
        """
        Get: MaintainConnection(self: IPivotCache) -> bool
        Set: MaintainConnection(self: IPivotCache) = value
        """
        ...

    @property
    def MemoryUsed(self) -> int:
        """ Get: MemoryUsed(self: IPivotCache) -> int """
        ...

    @property
    def MissingItemsLimit(self) -> XlPivotTableMissingItems:
        """
        Get: MissingItemsLimit(self: IPivotCache) -> XlPivotTableMissingItems
        Set: MissingItemsLimit(self: IPivotCache) = value
        """
        ...

    @property
    def OLAP(self) -> bool:
        """ Get: OLAP(self: IPivotCache) -> bool """
        ...

    @property
    def OptimizeCache(self) -> bool:
        """
        Get: OptimizeCache(self: IPivotCache) -> bool
        Set: OptimizeCache(self: IPivotCache) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotCache) -> object """
        ...

    @property
    def QueryType(self) -> XlQueryType:
        """ Get: QueryType(self: IPivotCache) -> XlQueryType """
        ...

    @property
    def RecordCount(self) -> int:
        """ Get: RecordCount(self: IPivotCache) -> int """
        ...

    @property
    def Recordset(self) -> object:
        """
        Get: Recordset(self: IPivotCache) -> object
        Set: Recordset(self: IPivotCache) = value
        """
        ...

    @property
    def RefreshDate(self) -> DateTime:
        """ Get: RefreshDate(self: IPivotCache) -> DateTime """
        ...

    @property
    def RefreshName(self) -> str:
        """ Get: RefreshName(self: IPivotCache) -> str """
        ...

    @property
    def RefreshOnFileOpen(self) -> bool:
        """
        Get: RefreshOnFileOpen(self: IPivotCache) -> bool
        Set: RefreshOnFileOpen(self: IPivotCache) = value
        """
        ...

    @property
    def RefreshPeriod(self) -> int:
        """
        Get: RefreshPeriod(self: IPivotCache) -> int
        Set: RefreshPeriod(self: IPivotCache) = value
        """
        ...

    @property
    def RobustConnect(self) -> XlRobustConnect:
        """
        Get: RobustConnect(self: IPivotCache) -> XlRobustConnect
        Set: RobustConnect(self: IPivotCache) = value
        """
        ...

    @property
    def SavePassword(self) -> bool:
        """
        Get: SavePassword(self: IPivotCache) -> bool
        Set: SavePassword(self: IPivotCache) = value
        """
        ...

    @property
    def SourceConnectionFile(self) -> str:
        """
        Get: SourceConnectionFile(self: IPivotCache) -> str
        Set: SourceConnectionFile(self: IPivotCache) = value
        """
        ...

    @property
    def SourceData(self) -> object:
        """
        Get: SourceData(self: IPivotCache) -> object
        Set: SourceData(self: IPivotCache) = value
        """
        ...

    @property
    def SourceDataFile(self) -> str:
        """ Get: SourceDataFile(self: IPivotCache) -> str """
        ...

    @property
    def SourceType(self) -> XlPivotTableSourceType:
        """ Get: SourceType(self: IPivotCache) -> XlPivotTableSourceType """
        ...

    @property
    def Sql(self) -> object:
        """
        Get: Sql(self: IPivotCache) -> object
        Set: Sql(self: IPivotCache) = value
        """
        ...

    @property
    def UpgradeOnRefresh(self) -> bool:
        """
        Get: UpgradeOnRefresh(self: IPivotCache) -> bool
        Set: UpgradeOnRefresh(self: IPivotCache) = value
        """
        ...

    @property
    def UseLocalConnection(self) -> bool:
        """
        Get: UseLocalConnection(self: IPivotCache) -> bool
        Set: UseLocalConnection(self: IPivotCache) = value
        """
        ...

    @property
    def Version(self) -> XlPivotTableVersionList:
        """ Get: Version(self: IPivotCache) -> XlPivotTableVersionList """
        ...

    @property
    def WorkbookConnection(self) -> WorkbookConnection:
        """ Get: WorkbookConnection(self: IPivotCache) -> WorkbookConnection """
        ...


    def CreatePivotChart(self, ChartDestination:object, XlChartType:object, Left:object, Top:object, Width:object, Height:object) -> Shape:
        """ CreatePivotChart(self: IPivotCache, ChartDestination: object, XlChartType: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        ...

    def CreatePivotTable(self, TableDestination:object, TableName:object, ReadData:object, DefaultVersion:object) -> PivotTable:
        """ CreatePivotTable(self: IPivotCache, TableDestination: object, TableName: object, ReadData: object, DefaultVersion: object) -> PivotTable """
        ...

    def MakeConnection(self): # -> 
        """ MakeConnection(self: IPivotCache) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: IPivotCache) """
        ...

    def ResetTimer(self): # -> 
        """ ResetTimer(self: IPivotCache) """
        ...

    def SaveAsODC(self, ODCFileName:str, Description:object, Keywords:object): # -> 
        """ SaveAsODC(self: IPivotCache, ODCFileName: str, Description: object, Keywords: object) """
        ...


class IPivotCaches(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotCaches) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPivotCaches) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotCaches) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotCaches) -> object """
        ...


    def Add(self, SourceType:XlPivotTableSourceType, SourceData:object) -> PivotCache:
        """ Add(self: IPivotCaches, SourceType: XlPivotTableSourceType, SourceData: object) -> PivotCache """
        ...

    def Create(self, SourceType:XlPivotTableSourceType, SourceData:object, Version:object) -> PivotCache:
        """ Create(self: IPivotCaches, SourceType: XlPivotTableSourceType, SourceData: object, Version: object) -> PivotCache """
        ...

    def Item(self, Index:object) -> PivotCache:
        """ Item(self: IPivotCaches, Index: object) -> PivotCache """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IPivotCell: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotCell) -> Application """
        ...

    @property
    def CellChanged(self) -> XlCellChangedState:
        """ Get: CellChanged(self: IPivotCell) -> XlCellChangedState """
        ...

    @property
    def ColumnItems(self) -> PivotItemList:
        """ Get: ColumnItems(self: IPivotCell) -> PivotItemList """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotCell) -> XlCreator """
        ...

    @property
    def CustomSubtotalFunction(self) -> XlConsolidationFunction:
        """ Get: CustomSubtotalFunction(self: IPivotCell) -> XlConsolidationFunction """
        ...

    @property
    def DataField(self) -> PivotField:
        """ Get: DataField(self: IPivotCell) -> PivotField """
        ...

    @property
    def DataSourceValue(self) -> object:
        """ Get: DataSourceValue(self: IPivotCell) -> object """
        ...

    @property
    def Dummy18(self) -> str:
        """ Get: Dummy18(self: IPivotCell) -> str """
        ...

    @property
    def MDX(self) -> str:
        """ Get: MDX(self: IPivotCell) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotCell) -> object """
        ...

    @property
    def PivotCellType(self) -> XlPivotCellType:
        """ Get: PivotCellType(self: IPivotCell) -> XlPivotCellType """
        ...

    @property
    def PivotColumnLine(self) -> PivotLine:
        """ Get: PivotColumnLine(self: IPivotCell) -> PivotLine """
        ...

    @property
    def PivotField(self) -> PivotField:
        """ Get: PivotField(self: IPivotCell) -> PivotField """
        ...

    @property
    def PivotItem(self) -> PivotItem:
        """ Get: PivotItem(self: IPivotCell) -> PivotItem """
        ...

    @property
    def PivotRowLine(self) -> PivotLine:
        """ Get: PivotRowLine(self: IPivotCell) -> PivotLine """
        ...

    @property
    def PivotTable(self) -> PivotTable:
        """ Get: PivotTable(self: IPivotCell) -> PivotTable """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: IPivotCell) -> Range """
        ...

    @property
    def RowItems(self) -> PivotItemList:
        """ Get: RowItems(self: IPivotCell) -> PivotItemList """
        ...

    @property
    def ServerActions(self) -> Actions:
        """ Get: ServerActions(self: IPivotCell) -> Actions """
        ...


    def AllocateChange(self): # -> 
        """ AllocateChange(self: IPivotCell) """
        ...

    def DiscardChange(self): # -> 
        """ DiscardChange(self: IPivotCell) """
        ...


class IPivotField: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllItemsVisible(self) -> bool:
        """ Get: AllItemsVisible(self: IPivotField) -> bool """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotField) -> Application """
        ...

    @property
    def AutoShowCount(self) -> int:
        """ Get: AutoShowCount(self: IPivotField) -> int """
        ...

    @property
    def AutoShowField(self) -> str:
        """ Get: AutoShowField(self: IPivotField) -> str """
        ...

    @property
    def AutoShowRange(self) -> int:
        """ Get: AutoShowRange(self: IPivotField) -> int """
        ...

    @property
    def AutoShowType(self) -> int:
        """ Get: AutoShowType(self: IPivotField) -> int """
        ...

    @property
    def AutoSortCustomSubtotal(self) -> int:
        """ Get: AutoSortCustomSubtotal(self: IPivotField) -> int """
        ...

    @property
    def AutoSortField(self) -> str:
        """ Get: AutoSortField(self: IPivotField) -> str """
        ...

    @property
    def AutoSortOrder(self) -> int:
        """ Get: AutoSortOrder(self: IPivotField) -> int """
        ...

    @property
    def AutoSortPivotLine(self) -> PivotLine:
        """ Get: AutoSortPivotLine(self: IPivotField) -> PivotLine """
        ...

    @property
    def BaseField(self) -> object:
        """
        Get: BaseField(self: IPivotField) -> object
        Set: BaseField(self: IPivotField) = value
        """
        ...

    @property
    def BaseItem(self) -> object:
        """
        Get: BaseItem(self: IPivotField) -> object
        Set: BaseItem(self: IPivotField) = value
        """
        ...

    @property
    def Calculation(self) -> XlPivotFieldCalculation:
        """
        Get: Calculation(self: IPivotField) -> XlPivotFieldCalculation
        Set: Calculation(self: IPivotField) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IPivotField) -> str
        Set: Caption(self: IPivotField) = value
        """
        ...

    @property
    def ChildField(self) -> PivotField:
        """ Get: ChildField(self: IPivotField) -> PivotField """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotField) -> XlCreator """
        ...

    @property
    def CubeField(self) -> CubeField:
        """ Get: CubeField(self: IPivotField) -> CubeField """
        ...

    @property
    def CurrentPage(self) -> object:
        """
        Get: CurrentPage(self: IPivotField) -> object
        Set: CurrentPage(self: IPivotField) = value
        """
        ...

    @property
    def CurrentPageList(self) -> object:
        """
        Get: CurrentPageList(self: IPivotField) -> object
        Set: CurrentPageList(self: IPivotField) = value
        """
        ...

    @property
    def CurrentPageName(self) -> str:
        """
        Get: CurrentPageName(self: IPivotField) -> str
        Set: CurrentPageName(self: IPivotField) = value
        """
        ...

    @property
    def DatabaseSort(self) -> bool:
        """
        Get: DatabaseSort(self: IPivotField) -> bool
        Set: DatabaseSort(self: IPivotField) = value
        """
        ...

    @property
    def DataRange(self) -> Range:
        """ Get: DataRange(self: IPivotField) -> Range """
        ...

    @property
    def DataType(self) -> XlPivotFieldDataType:
        """ Get: DataType(self: IPivotField) -> XlPivotFieldDataType """
        ...

    @property
    def DisplayAsCaption(self) -> bool:
        """ Get: DisplayAsCaption(self: IPivotField) -> bool """
        ...

    @property
    def DisplayAsTooltip(self) -> bool:
        """
        Get: DisplayAsTooltip(self: IPivotField) -> bool
        Set: DisplayAsTooltip(self: IPivotField) = value
        """
        ...

    @property
    def DisplayInReport(self) -> bool:
        """
        Get: DisplayInReport(self: IPivotField) -> bool
        Set: DisplayInReport(self: IPivotField) = value
        """
        ...

    @property
    def DragToColumn(self) -> bool:
        """
        Get: DragToColumn(self: IPivotField) -> bool
        Set: DragToColumn(self: IPivotField) = value
        """
        ...

    @property
    def DragToData(self) -> bool:
        """
        Get: DragToData(self: IPivotField) -> bool
        Set: DragToData(self: IPivotField) = value
        """
        ...

    @property
    def DragToHide(self) -> bool:
        """
        Get: DragToHide(self: IPivotField) -> bool
        Set: DragToHide(self: IPivotField) = value
        """
        ...

    @property
    def DragToPage(self) -> bool:
        """
        Get: DragToPage(self: IPivotField) -> bool
        Set: DragToPage(self: IPivotField) = value
        """
        ...

    @property
    def DragToRow(self) -> bool:
        """
        Get: DragToRow(self: IPivotField) -> bool
        Set: DragToRow(self: IPivotField) = value
        """
        ...

    @property
    def DrilledDown(self) -> bool:
        """
        Get: DrilledDown(self: IPivotField) -> bool
        Set: DrilledDown(self: IPivotField) = value
        """
        ...

    @property
    def EnableItemSelection(self) -> bool:
        """
        Get: EnableItemSelection(self: IPivotField) -> bool
        Set: EnableItemSelection(self: IPivotField) = value
        """
        ...

    @property
    def EnableMultiplePageItems(self) -> bool:
        """
        Get: EnableMultiplePageItems(self: IPivotField) -> bool
        Set: EnableMultiplePageItems(self: IPivotField) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IPivotField) -> str
        Set: Formula(self: IPivotField) = value
        """
        ...

    @property
    def Function(self) -> XlConsolidationFunction:
        """
        Get: Function(self: IPivotField) -> XlConsolidationFunction
        Set: Function(self: IPivotField) = value
        """
        ...

    @property
    def GroupLevel(self) -> object:
        """ Get: GroupLevel(self: IPivotField) -> object """
        ...

    @property
    def Hidden(self) -> bool:
        """
        Get: Hidden(self: IPivotField) -> bool
        Set: Hidden(self: IPivotField) = value
        """
        ...

    @property
    def HiddenItemsList(self) -> object:
        """
        Get: HiddenItemsList(self: IPivotField) -> object
        Set: HiddenItemsList(self: IPivotField) = value
        """
        ...

    @property
    def IncludeNewItemsInFilter(self) -> bool:
        """
        Get: IncludeNewItemsInFilter(self: IPivotField) -> bool
        Set: IncludeNewItemsInFilter(self: IPivotField) = value
        """
        ...

    @property
    def IsCalculated(self) -> bool:
        """ Get: IsCalculated(self: IPivotField) -> bool """
        ...

    @property
    def IsMemberProperty(self) -> bool:
        """ Get: IsMemberProperty(self: IPivotField) -> bool """
        ...

    @property
    def LabelRange(self) -> Range:
        """ Get: LabelRange(self: IPivotField) -> Range """
        ...

    @property
    def LayoutBlankLine(self) -> bool:
        """
        Get: LayoutBlankLine(self: IPivotField) -> bool
        Set: LayoutBlankLine(self: IPivotField) = value
        """
        ...

    @property
    def LayoutCompactRow(self) -> bool:
        """
        Get: LayoutCompactRow(self: IPivotField) -> bool
        Set: LayoutCompactRow(self: IPivotField) = value
        """
        ...

    @property
    def LayoutForm(self) -> XlLayoutFormType:
        """
        Get: LayoutForm(self: IPivotField) -> XlLayoutFormType
        Set: LayoutForm(self: IPivotField) = value
        """
        ...

    @property
    def LayoutPageBreak(self) -> bool:
        """
        Get: LayoutPageBreak(self: IPivotField) -> bool
        Set: LayoutPageBreak(self: IPivotField) = value
        """
        ...

    @property
    def LayoutSubtotalLocation(self) -> XlSubtototalLocationType:
        """
        Get: LayoutSubtotalLocation(self: IPivotField) -> XlSubtototalLocationType
        Set: LayoutSubtotalLocation(self: IPivotField) = value
        """
        ...

    @property
    def MemberPropertyCaption(self) -> str:
        """
        Get: MemberPropertyCaption(self: IPivotField) -> str
        Set: MemberPropertyCaption(self: IPivotField) = value
        """
        ...

    @property
    def MemoryUsed(self) -> int:
        """ Get: MemoryUsed(self: IPivotField) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IPivotField) -> str
        Set: Name(self: IPivotField) = value
        """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: IPivotField) -> str
        Set: NumberFormat(self: IPivotField) = value
        """
        ...

    @property
    def Orientation(self) -> XlPivotFieldOrientation:
        """
        Get: Orientation(self: IPivotField) -> XlPivotFieldOrientation
        Set: Orientation(self: IPivotField) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotField) -> object """
        ...

    @property
    def ParentField(self) -> PivotField:
        """ Get: ParentField(self: IPivotField) -> PivotField """
        ...

    @property
    def PivotFilters(self) -> PivotFilters:
        """ Get: PivotFilters(self: IPivotField) -> PivotFilters """
        ...

    @property
    def Position(self) -> object:
        """
        Get: Position(self: IPivotField) -> object
        Set: Position(self: IPivotField) = value
        """
        ...

    @property
    def PropertyOrder(self) -> int:
        """
        Get: PropertyOrder(self: IPivotField) -> int
        Set: PropertyOrder(self: IPivotField) = value
        """
        ...

    @property
    def PropertyParentField(self) -> PivotField:
        """ Get: PropertyParentField(self: IPivotField) -> PivotField """
        ...

    @property
    def RepeatLabels(self) -> bool:
        """
        Get: RepeatLabels(self: IPivotField) -> bool
        Set: RepeatLabels(self: IPivotField) = value
        """
        ...

    @property
    def ServerBased(self) -> bool:
        """
        Get: ServerBased(self: IPivotField) -> bool
        Set: ServerBased(self: IPivotField) = value
        """
        ...

    @property
    def ShowAllItems(self) -> bool:
        """
        Get: ShowAllItems(self: IPivotField) -> bool
        Set: ShowAllItems(self: IPivotField) = value
        """
        ...

    @property
    def ShowDetail(self) -> bool:
        """
        Get: ShowDetail(self: IPivotField) -> bool
        Set: ShowDetail(self: IPivotField) = value
        """
        ...

    @property
    def ShowingInAxis(self) -> bool:
        """ Get: ShowingInAxis(self: IPivotField) -> bool """
        ...

    @property
    def SourceCaption(self) -> str:
        """ Get: SourceCaption(self: IPivotField) -> str """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: IPivotField) -> str """
        ...

    @property
    def StandardFormula(self) -> str:
        """
        Get: StandardFormula(self: IPivotField) -> str
        Set: StandardFormula(self: IPivotField) = value
        """
        ...

    @property
    def SubtotalName(self) -> str:
        """
        Get: SubtotalName(self: IPivotField) -> str
        Set: SubtotalName(self: IPivotField) = value
        """
        ...

    @property
    def TotalLevels(self) -> object:
        """ Get: TotalLevels(self: IPivotField) -> object """
        ...

    @property
    def UseMemberPropertyAsCaption(self) -> bool:
        """
        Get: UseMemberPropertyAsCaption(self: IPivotField) -> bool
        Set: UseMemberPropertyAsCaption(self: IPivotField) = value
        """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: IPivotField) -> str
        Set: Value(self: IPivotField) = value
        """
        ...

    @property
    def VisibleItemsList(self) -> object:
        """
        Get: VisibleItemsList(self: IPivotField) -> object
        Set: VisibleItemsList(self: IPivotField) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """
        Get: _Default(self: IPivotField) -> str
        Set: _Default(self: IPivotField) = value
        """
        ...


    def AddPageItem(self, Item:str, ClearList:object): # -> 
        """ AddPageItem(self: IPivotField, Item: str, ClearList: object) """
        ...

    def AutoShow(self, Type:int, Range:int, Count:int, Field:str): # -> 
        """ AutoShow(self: IPivotField, Type: int, Range: int, Count: int, Field: str) """
        ...

    def AutoSort(self, Order:int, Field:str): # -> 
        """ AutoSort(self: IPivotField, Order: int, Field: str) """
        ...

    def AutoSortEx(self, Order:int, Field:str, PivotLine:object, CustomSubtotal:object): # -> 
        """ AutoSortEx(self: IPivotField, Order: int, Field: str, PivotLine: object, CustomSubtotal: object) """
        ...

    def CalculatedItems(self) -> CalculatedItems:
        """ CalculatedItems(self: IPivotField) -> CalculatedItems """
        ...

    def ClearAllFilters(self): # -> 
        """ ClearAllFilters(self: IPivotField) """
        ...

    def ClearLabelFilters(self): # -> 
        """ ClearLabelFilters(self: IPivotField) """
        ...

    def ClearManualFilter(self): # -> 
        """ ClearManualFilter(self: IPivotField) """
        ...

    def ClearValueFilters(self): # -> 
        """ ClearValueFilters(self: IPivotField) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IPivotField) """
        ...

    def DrillTo(self, Field:str): # -> 
        """ DrillTo(self: IPivotField, Field: str) """
        ...

    def PivotItems(self, Index:object) -> object:
        """ PivotItems(self: IPivotField, Index: object) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IPivotFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotFields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPivotFields) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotFields) -> XlCreator """
        ...

    @property
    def Parent(self) -> PivotTable:
        """ Get: Parent(self: IPivotFields) -> PivotTable """
        ...


    def Item(self, Index:object) -> object:
        """ Item(self: IPivotFields, Index: object) -> object """
        ...


class IPivotFilter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Active(self) -> bool:
        """ Get: Active(self: IPivotFilter) -> bool """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotFilter) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotFilter) -> XlCreator """
        ...

    @property
    def DataCubeField(self) -> CubeField:
        """ Get: DataCubeField(self: IPivotFilter) -> CubeField """
        ...

    @property
    def DataField(self) -> PivotField:
        """ Get: DataField(self: IPivotFilter) -> PivotField """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description(self: IPivotFilter) -> str """
        ...

    @property
    def FilterType(self) -> XlPivotFilterType:
        """ Get: FilterType(self: IPivotFilter) -> XlPivotFilterType """
        ...

    @property
    def IsMemberPropertyFilter(self) -> bool:
        """ Get: IsMemberPropertyFilter(self: IPivotFilter) -> bool """
        ...

    @property
    def MemberPropertyField(self) -> PivotField:
        """ Get: MemberPropertyField(self: IPivotFilter) -> PivotField """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IPivotFilter) -> str """
        ...

    @property
    def Order(self) -> int:
        """
        Get: Order(self: IPivotFilter) -> int
        Set: Order(self: IPivotFilter) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotFilter) -> object """
        ...

    @property
    def PivotField(self) -> PivotField:
        """ Get: PivotField(self: IPivotFilter) -> PivotField """
        ...

    @property
    def Value1(self) -> object:
        """ Get: Value1(self: IPivotFilter) -> object """
        ...

    @property
    def Value2(self) -> object:
        """ Get: Value2(self: IPivotFilter) -> object """
        ...

    @property
    def WholeDayFilter(self) -> bool:
        """
        Get: WholeDayFilter(self: IPivotFilter) -> bool
        Set: WholeDayFilter(self: IPivotFilter) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: IPivotFilter) """
        ...


class IPivotFilters(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotFilters) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPivotFilters) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotFilters) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotFilters) -> object """
        ...


    def Add(self, Type:XlPivotFilterType, DataField:object, Value1:object, Value2:object, Order:object, Name:object, Description:object, MemberPropertyField:object) -> PivotFilter:
        """ Add(self: IPivotFilters, Type: XlPivotFilterType, DataField: object, Value1: object, Value2: object, Order: object, Name: object, Description: object, MemberPropertyField: object) -> PivotFilter """
        ...

    def Add2(self, Type:XlPivotFilterType, DataField:object, Value1:object, Value2:object, Order:object, Name:object, Description:object, MemberPropertyField:object, WholeDayFilter:object) -> PivotFilter:
        """ Add2(self: IPivotFilters, Type: XlPivotFilterType, DataField: object, Value1: object, Value2: object, Order: object, Name: object, Description: object, MemberPropertyField: object, WholeDayFilter: object) -> PivotFilter """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IPivotFormula: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotFormula) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotFormula) -> XlCreator """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IPivotFormula) -> str
        Set: Formula(self: IPivotFormula) = value
        """
        ...

    @property
    def Index(self) -> int:
        """
        Get: Index(self: IPivotFormula) -> int
        Set: Index(self: IPivotFormula) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotFormula) -> object """
        ...

    @property
    def StandardFormula(self) -> str:
        """
        Get: StandardFormula(self: IPivotFormula) -> str
        Set: StandardFormula(self: IPivotFormula) = value
        """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: IPivotFormula) -> str
        Set: Value(self: IPivotFormula) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """
        Get: _Default(self: IPivotFormula) -> str
        Set: _Default(self: IPivotFormula) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: IPivotFormula) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IPivotFormulas(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotFormulas) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPivotFormulas) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotFormulas) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotFormulas) -> object """
        ...


    def Add(self, Formula:str, UseStandardFormula:object) -> PivotFormula:
        """ Add(self: IPivotFormulas, Formula: str, UseStandardFormula: object) -> PivotFormula """
        ...

    def Item(self, Index:object) -> PivotFormula:
        """ Item(self: IPivotFormulas, Index: object) -> PivotFormula """
        ...

    def _Add(self, Formula:str) -> PivotFormula:
        """ _Add(self: IPivotFormulas, Formula: str) -> PivotFormula """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IPivotItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotItem) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IPivotItem) -> str
        Set: Caption(self: IPivotItem) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotItem) -> XlCreator """
        ...

    @property
    def DataRange(self) -> Range:
        """ Get: DataRange(self: IPivotItem) -> Range """
        ...

    @property
    def DrilledDown(self) -> bool:
        """
        Get: DrilledDown(self: IPivotItem) -> bool
        Set: DrilledDown(self: IPivotItem) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IPivotItem) -> str
        Set: Formula(self: IPivotItem) = value
        """
        ...

    @property
    def IsCalculated(self) -> bool:
        """ Get: IsCalculated(self: IPivotItem) -> bool """
        ...

    @property
    def LabelRange(self) -> Range:
        """ Get: LabelRange(self: IPivotItem) -> Range """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IPivotItem) -> str
        Set: Name(self: IPivotItem) = value
        """
        ...

    @property
    def Parent(self) -> PivotField:
        """ Get: Parent(self: IPivotItem) -> PivotField """
        ...

    @property
    def ParentItem(self) -> PivotItem:
        """ Get: ParentItem(self: IPivotItem) -> PivotItem """
        ...

    @property
    def ParentShowDetail(self) -> bool:
        """ Get: ParentShowDetail(self: IPivotItem) -> bool """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: IPivotItem) -> int
        Set: Position(self: IPivotItem) = value
        """
        ...

    @property
    def RecordCount(self) -> int:
        """ Get: RecordCount(self: IPivotItem) -> int """
        ...

    @property
    def ShowDetail(self) -> bool:
        """
        Get: ShowDetail(self: IPivotItem) -> bool
        Set: ShowDetail(self: IPivotItem) = value
        """
        ...

    @property
    def SourceName(self) -> object:
        """ Get: SourceName(self: IPivotItem) -> object """
        ...

    @property
    def SourceNameStandard(self) -> str:
        """ Get: SourceNameStandard(self: IPivotItem) -> str """
        ...

    @property
    def StandardFormula(self) -> str:
        """
        Get: StandardFormula(self: IPivotItem) -> str
        Set: StandardFormula(self: IPivotItem) = value
        """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: IPivotItem) -> str
        Set: Value(self: IPivotItem) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IPivotItem) -> bool
        Set: Visible(self: IPivotItem) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """
        Get: _Default(self: IPivotItem) -> str
        Set: _Default(self: IPivotItem) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: IPivotItem) """
        ...

    def DrillTo(self, Field:str): # -> 
        """ DrillTo(self: IPivotItem, Field: str) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IPivotItemList(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotItemList) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPivotItemList) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotItemList) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotItemList) -> object """
        ...


    def Item(self, Index:object) -> PivotItem:
        """ Item(self: IPivotItemList, Index: object) -> PivotItem """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IPivotItems(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotItems) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPivotItems) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotItems) -> XlCreator """
        ...

    @property
    def Parent(self) -> PivotField:
        """ Get: Parent(self: IPivotItems) -> PivotField """
        ...


    def Add(self, Name:str): # -> 
        """ Add(self: IPivotItems, Name: str) """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IPivotItems, Index: object) -> object """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IPivotLayout: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotLayout) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotLayout) -> XlCreator """
        ...

    @property
    def CubeFields(self) -> CubeFields:
        """ Get: CubeFields(self: IPivotLayout) -> CubeFields """
        ...

    @property
    def InnerDetail(self) -> str:
        """
        Get: InnerDetail(self: IPivotLayout) -> str
        Set: InnerDetail(self: IPivotLayout) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotLayout) -> object """
        ...

    @property
    def PivotCache(self) -> PivotCache:
        """ Get: PivotCache(self: IPivotLayout) -> PivotCache """
        ...

    @property
    def PivotTable(self) -> PivotTable:
        """ Get: PivotTable(self: IPivotLayout) -> PivotTable """
        ...


    def AddFields(self, RowFields:object, ColumnFields:object, PageFields:object, AppendField:object): # -> 
        """ AddFields(self: IPivotLayout, RowFields: object, ColumnFields: object, PageFields: object, AppendField: object) """
        ...


class IPivotLine: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotLine) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotLine) -> XlCreator """
        ...

    @property
    def LineType(self) -> XlPivotLineType:
        """ Get: LineType(self: IPivotLine) -> XlPivotLineType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotLine) -> object """
        ...

    @property
    def PivotLineCells(self) -> PivotLineCells:
        """ Get: PivotLineCells(self: IPivotLine) -> PivotLineCells """
        ...

    @property
    def PivotLineCellsFull(self) -> PivotLineCells:
        """ Get: PivotLineCellsFull(self: IPivotLine) -> PivotLineCells """
        ...

    @property
    def Position(self) -> int:
        """ Get: Position(self: IPivotLine) -> int """
        ...



class IPivotLineCells(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotLineCells) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPivotLineCells) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotLineCells) -> XlCreator """
        ...

    @property
    def Full(self) -> bool:
        """ Get: Full(self: IPivotLineCells) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotLineCells) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IPivotLines(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotLines) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPivotLines) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotLines) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotLines) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IPivotTable: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveFilters(self) -> PivotFilters:
        """ Get: ActiveFilters(self: IPivotTable) -> PivotFilters """
        ...

    @property
    def Allocation(self) -> XlAllocation:
        """
        Get: Allocation(self: IPivotTable) -> XlAllocation
        Set: Allocation(self: IPivotTable) = value
        """
        ...

    @property
    def AllocationMethod(self) -> XlAllocationMethod:
        """
        Get: AllocationMethod(self: IPivotTable) -> XlAllocationMethod
        Set: AllocationMethod(self: IPivotTable) = value
        """
        ...

    @property
    def AllocationValue(self) -> XlAllocationValue:
        """
        Get: AllocationValue(self: IPivotTable) -> XlAllocationValue
        Set: AllocationValue(self: IPivotTable) = value
        """
        ...

    @property
    def AllocationWeightExpression(self) -> str:
        """
        Get: AllocationWeightExpression(self: IPivotTable) -> str
        Set: AllocationWeightExpression(self: IPivotTable) = value
        """
        ...

    @property
    def AllowMultipleFilters(self) -> bool:
        """
        Get: AllowMultipleFilters(self: IPivotTable) -> bool
        Set: AllowMultipleFilters(self: IPivotTable) = value
        """
        ...

    @property
    def AlternativeText(self) -> str:
        """
        Get: AlternativeText(self: IPivotTable) -> str
        Set: AlternativeText(self: IPivotTable) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotTable) -> Application """
        ...

    @property
    def CacheIndex(self) -> int:
        """
        Get: CacheIndex(self: IPivotTable) -> int
        Set: CacheIndex(self: IPivotTable) = value
        """
        ...

    @property
    def CalculatedMembers(self) -> CalculatedMembers:
        """ Get: CalculatedMembers(self: IPivotTable) -> CalculatedMembers """
        ...

    @property
    def CalculatedMembersInFilters(self) -> bool:
        """
        Get: CalculatedMembersInFilters(self: IPivotTable) -> bool
        Set: CalculatedMembersInFilters(self: IPivotTable) = value
        """
        ...

    @property
    def ChangeList(self) -> PivotTableChangeList:
        """ Get: ChangeList(self: IPivotTable) -> PivotTableChangeList """
        ...

    @property
    def ColumnGrand(self) -> bool:
        """
        Get: ColumnGrand(self: IPivotTable) -> bool
        Set: ColumnGrand(self: IPivotTable) = value
        """
        ...

    @property
    def ColumnRange(self) -> Range:
        """ Get: ColumnRange(self: IPivotTable) -> Range """
        ...

    @property
    def CompactLayoutColumnHeader(self) -> str:
        """
        Get: CompactLayoutColumnHeader(self: IPivotTable) -> str
        Set: CompactLayoutColumnHeader(self: IPivotTable) = value
        """
        ...

    @property
    def CompactLayoutRowHeader(self) -> str:
        """
        Get: CompactLayoutRowHeader(self: IPivotTable) -> str
        Set: CompactLayoutRowHeader(self: IPivotTable) = value
        """
        ...

    @property
    def CompactRowIndent(self) -> int:
        """
        Get: CompactRowIndent(self: IPivotTable) -> int
        Set: CompactRowIndent(self: IPivotTable) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotTable) -> XlCreator """
        ...

    @property
    def CubeFields(self) -> CubeFields:
        """ Get: CubeFields(self: IPivotTable) -> CubeFields """
        ...

    @property
    def DataBodyRange(self) -> Range:
        """ Get: DataBodyRange(self: IPivotTable) -> Range """
        ...

    @property
    def DataLabelRange(self) -> Range:
        """ Get: DataLabelRange(self: IPivotTable) -> Range """
        ...

    @property
    def DataPivotField(self) -> PivotField:
        """ Get: DataPivotField(self: IPivotTable) -> PivotField """
        ...

    @property
    def DisplayContextTooltips(self) -> bool:
        """
        Get: DisplayContextTooltips(self: IPivotTable) -> bool
        Set: DisplayContextTooltips(self: IPivotTable) = value
        """
        ...

    @property
    def DisplayEmptyColumn(self) -> bool:
        """
        Get: DisplayEmptyColumn(self: IPivotTable) -> bool
        Set: DisplayEmptyColumn(self: IPivotTable) = value
        """
        ...

    @property
    def DisplayEmptyRow(self) -> bool:
        """
        Get: DisplayEmptyRow(self: IPivotTable) -> bool
        Set: DisplayEmptyRow(self: IPivotTable) = value
        """
        ...

    @property
    def DisplayErrorString(self) -> bool:
        """
        Get: DisplayErrorString(self: IPivotTable) -> bool
        Set: DisplayErrorString(self: IPivotTable) = value
        """
        ...

    @property
    def DisplayFieldCaptions(self) -> bool:
        """
        Get: DisplayFieldCaptions(self: IPivotTable) -> bool
        Set: DisplayFieldCaptions(self: IPivotTable) = value
        """
        ...

    @property
    def DisplayImmediateItems(self) -> bool:
        """
        Get: DisplayImmediateItems(self: IPivotTable) -> bool
        Set: DisplayImmediateItems(self: IPivotTable) = value
        """
        ...

    @property
    def DisplayMemberPropertyTooltips(self) -> bool:
        """
        Get: DisplayMemberPropertyTooltips(self: IPivotTable) -> bool
        Set: DisplayMemberPropertyTooltips(self: IPivotTable) = value
        """
        ...

    @property
    def DisplayNullString(self) -> bool:
        """
        Get: DisplayNullString(self: IPivotTable) -> bool
        Set: DisplayNullString(self: IPivotTable) = value
        """
        ...

    @property
    def EnableDataValueEditing(self) -> bool:
        """
        Get: EnableDataValueEditing(self: IPivotTable) -> bool
        Set: EnableDataValueEditing(self: IPivotTable) = value
        """
        ...

    @property
    def EnableDrilldown(self) -> bool:
        """
        Get: EnableDrilldown(self: IPivotTable) -> bool
        Set: EnableDrilldown(self: IPivotTable) = value
        """
        ...

    @property
    def EnableFieldDialog(self) -> bool:
        """
        Get: EnableFieldDialog(self: IPivotTable) -> bool
        Set: EnableFieldDialog(self: IPivotTable) = value
        """
        ...

    @property
    def EnableFieldList(self) -> bool:
        """
        Get: EnableFieldList(self: IPivotTable) -> bool
        Set: EnableFieldList(self: IPivotTable) = value
        """
        ...

    @property
    def EnableWizard(self) -> bool:
        """
        Get: EnableWizard(self: IPivotTable) -> bool
        Set: EnableWizard(self: IPivotTable) = value
        """
        ...

    @property
    def EnableWriteback(self) -> bool:
        """
        Get: EnableWriteback(self: IPivotTable) -> bool
        Set: EnableWriteback(self: IPivotTable) = value
        """
        ...

    @property
    def ErrorString(self) -> str:
        """
        Get: ErrorString(self: IPivotTable) -> str
        Set: ErrorString(self: IPivotTable) = value
        """
        ...

    @property
    def FieldListSortAscending(self) -> bool:
        """
        Get: FieldListSortAscending(self: IPivotTable) -> bool
        Set: FieldListSortAscending(self: IPivotTable) = value
        """
        ...

    @property
    def GrandTotalName(self) -> str:
        """
        Get: GrandTotalName(self: IPivotTable) -> str
        Set: GrandTotalName(self: IPivotTable) = value
        """
        ...

    @property
    def HasAutoFormat(self) -> bool:
        """
        Get: HasAutoFormat(self: IPivotTable) -> bool
        Set: HasAutoFormat(self: IPivotTable) = value
        """
        ...

    @property
    def Hidden(self) -> bool:
        """ Get: Hidden(self: IPivotTable) -> bool """
        ...

    @property
    def InGridDropZones(self) -> bool:
        """
        Get: InGridDropZones(self: IPivotTable) -> bool
        Set: InGridDropZones(self: IPivotTable) = value
        """
        ...

    @property
    def InnerDetail(self) -> str:
        """
        Get: InnerDetail(self: IPivotTable) -> str
        Set: InnerDetail(self: IPivotTable) = value
        """
        ...

    @property
    def LayoutRowDefault(self) -> XlLayoutRowType:
        """
        Get: LayoutRowDefault(self: IPivotTable) -> XlLayoutRowType
        Set: LayoutRowDefault(self: IPivotTable) = value
        """
        ...

    @property
    def Location(self) -> str:
        """
        Get: Location(self: IPivotTable) -> str
        Set: Location(self: IPivotTable) = value
        """
        ...

    @property
    def ManualUpdate(self) -> bool:
        """
        Get: ManualUpdate(self: IPivotTable) -> bool
        Set: ManualUpdate(self: IPivotTable) = value
        """
        ...

    @property
    def MDX(self) -> str:
        """ Get: MDX(self: IPivotTable) -> str """
        ...

    @property
    def MergeLabels(self) -> bool:
        """
        Get: MergeLabels(self: IPivotTable) -> bool
        Set: MergeLabels(self: IPivotTable) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IPivotTable) -> str
        Set: Name(self: IPivotTable) = value
        """
        ...

    @property
    def NullString(self) -> str:
        """
        Get: NullString(self: IPivotTable) -> str
        Set: NullString(self: IPivotTable) = value
        """
        ...

    @property
    def PageFieldOrder(self) -> int:
        """
        Get: PageFieldOrder(self: IPivotTable) -> int
        Set: PageFieldOrder(self: IPivotTable) = value
        """
        ...

    @property
    def PageFieldStyle(self) -> str:
        """
        Get: PageFieldStyle(self: IPivotTable) -> str
        Set: PageFieldStyle(self: IPivotTable) = value
        """
        ...

    @property
    def PageFieldWrapCount(self) -> int:
        """
        Get: PageFieldWrapCount(self: IPivotTable) -> int
        Set: PageFieldWrapCount(self: IPivotTable) = value
        """
        ...

    @property
    def PageRange(self) -> Range:
        """ Get: PageRange(self: IPivotTable) -> Range """
        ...

    @property
    def PageRangeCells(self) -> Range:
        """ Get: PageRangeCells(self: IPivotTable) -> Range """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotTable) -> object """
        ...

    @property
    def PivotChart(self) -> Shape:
        """ Get: PivotChart(self: IPivotTable) -> Shape """
        ...

    @property
    def PivotColumnAxis(self) -> PivotAxis:
        """ Get: PivotColumnAxis(self: IPivotTable) -> PivotAxis """
        ...

    @property
    def PivotFormulas(self) -> PivotFormulas:
        """ Get: PivotFormulas(self: IPivotTable) -> PivotFormulas """
        ...

    @property
    def PivotRowAxis(self) -> PivotAxis:
        """ Get: PivotRowAxis(self: IPivotTable) -> PivotAxis """
        ...

    @property
    def PivotSelection(self) -> str:
        """
        Get: PivotSelection(self: IPivotTable) -> str
        Set: PivotSelection(self: IPivotTable) = value
        """
        ...

    @property
    def PivotSelectionStandard(self) -> str:
        """
        Get: PivotSelectionStandard(self: IPivotTable) -> str
        Set: PivotSelectionStandard(self: IPivotTable) = value
        """
        ...

    @property
    def PreserveFormatting(self) -> bool:
        """
        Get: PreserveFormatting(self: IPivotTable) -> bool
        Set: PreserveFormatting(self: IPivotTable) = value
        """
        ...

    @property
    def PrintDrillIndicators(self) -> bool:
        """
        Get: PrintDrillIndicators(self: IPivotTable) -> bool
        Set: PrintDrillIndicators(self: IPivotTable) = value
        """
        ...

    @property
    def PrintTitles(self) -> bool:
        """
        Get: PrintTitles(self: IPivotTable) -> bool
        Set: PrintTitles(self: IPivotTable) = value
        """
        ...

    @property
    def RefreshDate(self) -> DateTime:
        """ Get: RefreshDate(self: IPivotTable) -> DateTime """
        ...

    @property
    def RefreshName(self) -> str:
        """ Get: RefreshName(self: IPivotTable) -> str """
        ...

    @property
    def RepeatItemsOnEachPrintedPage(self) -> bool:
        """
        Get: RepeatItemsOnEachPrintedPage(self: IPivotTable) -> bool
        Set: RepeatItemsOnEachPrintedPage(self: IPivotTable) = value
        """
        ...

    @property
    def RowGrand(self) -> bool:
        """
        Get: RowGrand(self: IPivotTable) -> bool
        Set: RowGrand(self: IPivotTable) = value
        """
        ...

    @property
    def RowRange(self) -> Range:
        """ Get: RowRange(self: IPivotTable) -> Range """
        ...

    @property
    def SaveData(self) -> bool:
        """
        Get: SaveData(self: IPivotTable) -> bool
        Set: SaveData(self: IPivotTable) = value
        """
        ...

    @property
    def SelectionMode(self) -> XlPTSelectionMode:
        """
        Get: SelectionMode(self: IPivotTable) -> XlPTSelectionMode
        Set: SelectionMode(self: IPivotTable) = value
        """
        ...

    @property
    def ShowCellBackgroundFromOLAP(self) -> bool:
        """
        Get: ShowCellBackgroundFromOLAP(self: IPivotTable) -> bool
        Set: ShowCellBackgroundFromOLAP(self: IPivotTable) = value
        """
        ...

    @property
    def ShowDrillIndicators(self) -> bool:
        """
        Get: ShowDrillIndicators(self: IPivotTable) -> bool
        Set: ShowDrillIndicators(self: IPivotTable) = value
        """
        ...

    @property
    def ShowPageMultipleItemLabel(self) -> bool:
        """
        Get: ShowPageMultipleItemLabel(self: IPivotTable) -> bool
        Set: ShowPageMultipleItemLabel(self: IPivotTable) = value
        """
        ...

    @property
    def ShowTableStyleColumnHeaders(self) -> bool:
        """
        Get: ShowTableStyleColumnHeaders(self: IPivotTable) -> bool
        Set: ShowTableStyleColumnHeaders(self: IPivotTable) = value
        """
        ...

    @property
    def ShowTableStyleColumnStripes(self) -> bool:
        """
        Get: ShowTableStyleColumnStripes(self: IPivotTable) -> bool
        Set: ShowTableStyleColumnStripes(self: IPivotTable) = value
        """
        ...

    @property
    def ShowTableStyleLastColumn(self) -> bool:
        """
        Get: ShowTableStyleLastColumn(self: IPivotTable) -> bool
        Set: ShowTableStyleLastColumn(self: IPivotTable) = value
        """
        ...

    @property
    def ShowTableStyleRowHeaders(self) -> bool:
        """
        Get: ShowTableStyleRowHeaders(self: IPivotTable) -> bool
        Set: ShowTableStyleRowHeaders(self: IPivotTable) = value
        """
        ...

    @property
    def ShowTableStyleRowStripes(self) -> bool:
        """
        Get: ShowTableStyleRowStripes(self: IPivotTable) -> bool
        Set: ShowTableStyleRowStripes(self: IPivotTable) = value
        """
        ...

    @property
    def ShowValuesRow(self) -> bool:
        """
        Get: ShowValuesRow(self: IPivotTable) -> bool
        Set: ShowValuesRow(self: IPivotTable) = value
        """
        ...

    @property
    def Slicers(self) -> Slicers:
        """ Get: Slicers(self: IPivotTable) -> Slicers """
        ...

    @property
    def SmallGrid(self) -> bool:
        """
        Get: SmallGrid(self: IPivotTable) -> bool
        Set: SmallGrid(self: IPivotTable) = value
        """
        ...

    @property
    def SortUsingCustomLists(self) -> bool:
        """
        Get: SortUsingCustomLists(self: IPivotTable) -> bool
        Set: SortUsingCustomLists(self: IPivotTable) = value
        """
        ...

    @property
    def SourceData(self) -> object:
        """
        Get: SourceData(self: IPivotTable) -> object
        Set: SourceData(self: IPivotTable) = value
        """
        ...

    @property
    def SubtotalHiddenPageItems(self) -> bool:
        """
        Get: SubtotalHiddenPageItems(self: IPivotTable) -> bool
        Set: SubtotalHiddenPageItems(self: IPivotTable) = value
        """
        ...

    @property
    def Summary(self) -> str:
        """
        Get: Summary(self: IPivotTable) -> str
        Set: Summary(self: IPivotTable) = value
        """
        ...

    @property
    def TableRange1(self) -> Range:
        """ Get: TableRange1(self: IPivotTable) -> Range """
        ...

    @property
    def TableRange2(self) -> Range:
        """ Get: TableRange2(self: IPivotTable) -> Range """
        ...

    @property
    def TableStyle(self) -> str:
        """
        Get: TableStyle(self: IPivotTable) -> str
        Set: TableStyle(self: IPivotTable) = value
        """
        ...

    @property
    def TableStyle2(self) -> object:
        """
        Get: TableStyle2(self: IPivotTable) -> object
        Set: TableStyle2(self: IPivotTable) = value
        """
        ...

    @property
    def Tag(self) -> str:
        """
        Get: Tag(self: IPivotTable) -> str
        Set: Tag(self: IPivotTable) = value
        """
        ...

    @property
    def TotalsAnnotation(self) -> bool:
        """
        Get: TotalsAnnotation(self: IPivotTable) -> bool
        Set: TotalsAnnotation(self: IPivotTable) = value
        """
        ...

    @property
    def VacatedStyle(self) -> str:
        """
        Get: VacatedStyle(self: IPivotTable) -> str
        Set: VacatedStyle(self: IPivotTable) = value
        """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: IPivotTable) -> str
        Set: Value(self: IPivotTable) = value
        """
        ...

    @property
    def Version(self) -> XlPivotTableVersionList:
        """ Get: Version(self: IPivotTable) -> XlPivotTableVersionList """
        ...

    @property
    def ViewCalculatedMembers(self) -> bool:
        """
        Get: ViewCalculatedMembers(self: IPivotTable) -> bool
        Set: ViewCalculatedMembers(self: IPivotTable) = value
        """
        ...

    @property
    def VisualTotals(self) -> bool:
        """
        Get: VisualTotals(self: IPivotTable) -> bool
        Set: VisualTotals(self: IPivotTable) = value
        """
        ...

    @property
    def VisualTotalsForSets(self) -> bool:
        """
        Get: VisualTotalsForSets(self: IPivotTable) -> bool
        Set: VisualTotalsForSets(self: IPivotTable) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """
        Get: _Default(self: IPivotTable) -> str
        Set: _Default(self: IPivotTable) = value
        """
        ...


    def AddDataField(self, Field:object, Caption:object, Function:object) -> PivotField:
        """ AddDataField(self: IPivotTable, Field: object, Caption: object, Function: object) -> PivotField """
        ...

    def AddFields(self, RowFields:object, ColumnFields:object, PageFields:object, AddToTable:object) -> object:
        """ AddFields(self: IPivotTable, RowFields: object, ColumnFields: object, PageFields: object, AddToTable: object) -> object """
        ...

    def AllocateChanges(self): # -> 
        """ AllocateChanges(self: IPivotTable) """
        ...

    def CalculatedFields(self) -> CalculatedFields:
        """ CalculatedFields(self: IPivotTable) -> CalculatedFields """
        ...

    def ChangeConnection(self, conn:WorkbookConnection): # -> 
        """ ChangeConnection(self: IPivotTable, conn: WorkbookConnection) """
        ...

    def ChangePivotCache(self, PivotCache:object): # -> 
        """ ChangePivotCache(self: IPivotTable, PivotCache: object) """
        ...

    def ClearAllFilters(self): # -> 
        """ ClearAllFilters(self: IPivotTable) """
        ...

    def ClearTable(self): # -> 
        """ ClearTable(self: IPivotTable) """
        ...

    def CommitChanges(self): # -> 
        """ CommitChanges(self: IPivotTable) """
        ...

    def ConvertToFormulas(self, ConvertFilters:bool): # -> 
        """ ConvertToFormulas(self: IPivotTable, ConvertFilters: bool) """
        ...

    def CreateCubeFile(self, File:str, Measures:object, Levels:object, Members:object, Properties:object) -> str:
        """ CreateCubeFile(self: IPivotTable, File: str, Measures: object, Levels: object, Members: object, Properties: object) -> str """
        ...

    def DiscardChanges(self): # -> 
        """ DiscardChanges(self: IPivotTable) """
        ...

    def DrillDown(self, PivotItem:PivotItem, PivotLine:object): # -> 
        """ DrillDown(self: IPivotTable, PivotItem: PivotItem, PivotLine: object) """
        ...

    def DrillTo(self, PivotItem:PivotItem, CubeField:CubeField, PivotLine:object): # -> 
        """ DrillTo(self: IPivotTable, PivotItem: PivotItem, CubeField: CubeField, PivotLine: object) """
        ...

    def DrillUp(self, PivotItem:PivotItem, PivotLine:object, LevelUniqueName:object): # -> 
        """ DrillUp(self: IPivotTable, PivotItem: PivotItem, PivotLine: object, LevelUniqueName: object) """
        ...

    def Dummy15(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Dummy15(self: IPivotTable, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Dummy2(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ Dummy2(self: IPivotTable, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def Format(self, Format:XlPivotFormatType): # -> 
        """ Format(self: IPivotTable, Format: XlPivotFormatType) """
        ...

    def GetData(self, Name:str) -> float:
        """ GetData(self: IPivotTable, Name: str) -> float """
        ...

    def GetPivotData(self, DataField:object, Field1:object, Item1:object, Field2:object, Item2:object, Field3:object, Item3:object, Field4:object, Item4:object, Field5:object, Item5:object, Field6:object, Item6:object, Field7:object, Item7:object, Field8:object, Item8:object, Field9:object, Item9:object, Field10:object, Item10:object, Field11:object, Item11:object, Field12:object, Item12:object, Field13:object, Item13:object, Field14:object, Item14:object) -> Range:
        """ GetPivotData(self: IPivotTable, DataField: object, Field1: object, Item1: object, Field2: object, Item2: object, Field3: object, Item3: object, Field4: object, Item4: object, Field5: object, Item5: object, Field6: object, Item6: object, Field7: object, Item7: object, Field8: object, Item8: object, Field9: object, Item9: object, Field10: object, Item10: object, Field11: object, Item11: object, Field12: object, Item12: object, Field13: object, Item13: object, Field14: object, Item14: object) -> Range """
        ...

    def ListFormulas(self): # -> 
        """ ListFormulas(self: IPivotTable) """
        ...

    def PivotCache(self) -> PivotCache:
        """ PivotCache(self: IPivotTable) -> PivotCache """
        ...

    def PivotFields(self, Index:object) -> object:
        """ PivotFields(self: IPivotTable, Index: object) -> object """
        ...

    def PivotSelect(self, Name:str, Mode:XlPTSelectionMode, UseStandardName:object): # -> 
        """ PivotSelect(self: IPivotTable, Name: str, Mode: XlPTSelectionMode, UseStandardName: object) """
        ...

    def PivotTableWizard(self, SourceType:object, SourceData:object, TableDestination:object, TableName:object, RowGrand:object, ColumnGrand:object, SaveData:object, HasAutoFormat:object, AutoPage:object, Reserved:object, BackgroundQuery:object, OptimizeCache:object, PageFieldOrder:object, PageFieldWrapCount:object, ReadData:object, Connection:object): # -> 
        """ PivotTableWizard(self: IPivotTable, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) """
        ...

    def PivotValueCell(self, rowline:object, columnline:object) -> PivotValueCell:
        """ PivotValueCell(self: IPivotTable, rowline: object, columnline: object) -> PivotValueCell """
        ...

    def RefreshDataSourceValues(self): # -> 
        """ RefreshDataSourceValues(self: IPivotTable) """
        ...

    def RefreshTable(self) -> bool:
        """ RefreshTable(self: IPivotTable) -> bool """
        ...

    def RepeatAllLabels(self, Repeat:XlPivotFieldRepeatLabels): # -> 
        """ RepeatAllLabels(self: IPivotTable, Repeat: XlPivotFieldRepeatLabels) """
        ...

    def RowAxisLayout(self, RowLayout:XlLayoutRowType): # -> 
        """ RowAxisLayout(self: IPivotTable, RowLayout: XlLayoutRowType) """
        ...

    def ShowPages(self, PageField:object) -> object:
        """ ShowPages(self: IPivotTable, PageField: object) -> object """
        ...

    def SubtotalLocation(self, Location:XlSubtototalLocationType): # -> 
        """ SubtotalLocation(self: IPivotTable, Location: XlSubtototalLocationType) """
        ...

    def Update(self): # -> 
        """ Update(self: IPivotTable) """
        ...

    def _PivotSelect(self, Name:str, Mode:XlPTSelectionMode): # -> 
        """ _PivotSelect(self: IPivotTable, Name: str, Mode: XlPTSelectionMode) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IPivotTableChangeList(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotTableChangeList) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPivotTableChangeList) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotTableChangeList) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotTableChangeList) -> object """
        ...


    def Add(self, Tuple:str, Value:float, AllocationValue:object, AllocationMethod:object, AllocationWeightExpression:object) -> ValueChange:
        """ Add(self: IPivotTableChangeList, Tuple: str, Value: float, AllocationValue: object, AllocationMethod: object, AllocationWeightExpression: object) -> ValueChange """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IPivotTables(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotTables) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPivotTables) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotTables) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotTables) -> object """
        ...


    def Add(self, PivotCache:PivotCache, TableDestination:object, TableName:object, ReadData:object, DefaultVersion:object) -> PivotTable:
        """ Add(self: IPivotTables, PivotCache: PivotCache, TableDestination: object, TableName: object, ReadData: object, DefaultVersion: object) -> PivotTable """
        ...

    def Item(self, Index:object) -> PivotTable:
        """ Item(self: IPivotTables, Index: object) -> PivotTable """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IPivotValueCell: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPivotValueCell) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPivotValueCell) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPivotValueCell) -> object """
        ...

    @property
    def PivotCell(self) -> PivotCell:
        """ Get: PivotCell(self: IPivotValueCell) -> PivotCell """
        ...

    @property
    def ServerActions(self) -> Actions:
        """ Get: ServerActions(self: IPivotValueCell) -> Actions """
        ...

    @property
    def Value(self) -> object:
        """ Get: Value(self: IPivotValueCell) -> object """
        ...


    def ShowDetail(self): # -> 
        """ ShowDetail(self: IPivotValueCell) """
        ...


class IPlotArea: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPlotArea) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IPlotArea) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPlotArea) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IPlotArea) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IPlotArea) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IPlotArea) -> float
        Set: Height(self: IPlotArea) = value
        """
        ...

    @property
    def InsideHeight(self) -> float:
        """
        Get: InsideHeight(self: IPlotArea) -> float
        Set: InsideHeight(self: IPlotArea) = value
        """
        ...

    @property
    def InsideLeft(self) -> float:
        """
        Get: InsideLeft(self: IPlotArea) -> float
        Set: InsideLeft(self: IPlotArea) = value
        """
        ...

    @property
    def InsideTop(self) -> float:
        """
        Get: InsideTop(self: IPlotArea) -> float
        Set: InsideTop(self: IPlotArea) = value
        """
        ...

    @property
    def InsideWidth(self) -> float:
        """
        Get: InsideWidth(self: IPlotArea) -> float
        Set: InsideWidth(self: IPlotArea) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IPlotArea) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IPlotArea) -> float
        Set: Left(self: IPlotArea) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IPlotArea) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPlotArea) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: IPlotArea) -> XlChartElementPosition
        Set: Position(self: IPlotArea) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IPlotArea) -> float
        Set: Top(self: IPlotArea) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IPlotArea) -> float
        Set: Width(self: IPlotArea) = value
        """
        ...

    @property
    def _InsideHeight(self) -> float:
        """ Get: _InsideHeight(self: IPlotArea) -> float """
        ...

    @property
    def _InsideLeft(self) -> float:
        """ Get: _InsideLeft(self: IPlotArea) -> float """
        ...

    @property
    def _InsideTop(self) -> float:
        """ Get: _InsideTop(self: IPlotArea) -> float """
        ...

    @property
    def _InsideWidth(self) -> float:
        """ Get: _InsideWidth(self: IPlotArea) -> float """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: IPlotArea) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IPlotArea) -> object """
        ...


class IPoint: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPoint) -> Application """
        ...

    @property
    def ApplyPictToEnd(self) -> bool:
        """
        Get: ApplyPictToEnd(self: IPoint) -> bool
        Set: ApplyPictToEnd(self: IPoint) = value
        """
        ...

    @property
    def ApplyPictToFront(self) -> bool:
        """
        Get: ApplyPictToFront(self: IPoint) -> bool
        Set: ApplyPictToFront(self: IPoint) = value
        """
        ...

    @property
    def ApplyPictToSides(self) -> bool:
        """
        Get: ApplyPictToSides(self: IPoint) -> bool
        Set: ApplyPictToSides(self: IPoint) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IPoint) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPoint) -> XlCreator """
        ...

    @property
    def DataLabel(self) -> DataLabel:
        """ Get: DataLabel(self: IPoint) -> DataLabel """
        ...

    @property
    def Explosion(self) -> int:
        """
        Get: Explosion(self: IPoint) -> int
        Set: Explosion(self: IPoint) = value
        """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IPoint) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IPoint) -> ChartFormat """
        ...

    @property
    def Has3DEffect(self) -> bool:
        """
        Get: Has3DEffect(self: IPoint) -> bool
        Set: Has3DEffect(self: IPoint) = value
        """
        ...

    @property
    def HasDataLabel(self) -> bool:
        """
        Get: HasDataLabel(self: IPoint) -> bool
        Set: HasDataLabel(self: IPoint) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: IPoint) -> float """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IPoint) -> Interior """
        ...

    @property
    def InvertIfNegative(self) -> bool:
        """
        Get: InvertIfNegative(self: IPoint) -> bool
        Set: InvertIfNegative(self: IPoint) = value
        """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: IPoint) -> float """
        ...

    @property
    def MarkerBackgroundColor(self) -> int:
        """
        Get: MarkerBackgroundColor(self: IPoint) -> int
        Set: MarkerBackgroundColor(self: IPoint) = value
        """
        ...

    @property
    def MarkerBackgroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerBackgroundColorIndex(self: IPoint) -> XlColorIndex
        Set: MarkerBackgroundColorIndex(self: IPoint) = value
        """
        ...

    @property
    def MarkerForegroundColor(self) -> int:
        """
        Get: MarkerForegroundColor(self: IPoint) -> int
        Set: MarkerForegroundColor(self: IPoint) = value
        """
        ...

    @property
    def MarkerForegroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerForegroundColorIndex(self: IPoint) -> XlColorIndex
        Set: MarkerForegroundColorIndex(self: IPoint) = value
        """
        ...

    @property
    def MarkerSize(self) -> int:
        """
        Get: MarkerSize(self: IPoint) -> int
        Set: MarkerSize(self: IPoint) = value
        """
        ...

    @property
    def MarkerStyle(self) -> XlMarkerStyle:
        """
        Get: MarkerStyle(self: IPoint) -> XlMarkerStyle
        Set: MarkerStyle(self: IPoint) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IPoint) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPoint) -> object """
        ...

    @property
    def PictureType(self) -> XlChartPictureType:
        """
        Get: PictureType(self: IPoint) -> XlChartPictureType
        Set: PictureType(self: IPoint) = value
        """
        ...

    @property
    def PictureUnit(self) -> int:
        """
        Get: PictureUnit(self: IPoint) -> int
        Set: PictureUnit(self: IPoint) = value
        """
        ...

    @property
    def PictureUnit2(self) -> float:
        """
        Get: PictureUnit2(self: IPoint) -> float
        Set: PictureUnit2(self: IPoint) = value
        """
        ...

    @property
    def SecondaryPlot(self) -> bool:
        """
        Get: SecondaryPlot(self: IPoint) -> bool
        Set: SecondaryPlot(self: IPoint) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IPoint) -> bool
        Set: Shadow(self: IPoint) = value
        """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: IPoint) -> float """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: IPoint) -> float """
        ...


    def ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object, ShowSeriesName:object, ShowCategoryName:object, ShowValue:object, ShowPercentage:object, ShowBubbleSize:object, Separator:object) -> object:
        """ ApplyDataLabels(self: IPoint, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) -> object """
        ...

    def ClearFormats(self) -> object:
        """ ClearFormats(self: IPoint) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IPoint) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IPoint) -> object """
        ...

    def Paste(self) -> object:
        """ Paste(self: IPoint) -> object """
        ...

    def PieSliceLocation(self, loc:XlPieSliceLocation, Index:XlPieSliceIndex) -> float:
        """ PieSliceLocation(self: IPoint, loc: XlPieSliceLocation, Index: XlPieSliceIndex) -> float """
        ...

    def Select(self) -> object:
        """ Select(self: IPoint) -> object """
        ...

    def _ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object) -> object:
        """ _ApplyDataLabels(self: IPoint, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) -> object """
        ...


class IPoints(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPoints) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPoints) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPoints) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPoints) -> object """
        ...


    def Item(self, Index:int) -> Point:
        """ Item(self: IPoints, Index: int) -> Point """
        ...

    def _Default(self, Index:int) -> Point:
        """ _Default(self: IPoints, Index: int) -> Point """
        ...


class IProtectedViewWindow: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IProtectedViewWindow) -> str
        Set: Caption(self: IProtectedViewWindow) = value
        """
        ...

    @property
    def EnableResize(self) -> bool:
        """
        Get: EnableResize(self: IProtectedViewWindow) -> bool
        Set: EnableResize(self: IProtectedViewWindow) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IProtectedViewWindow) -> float
        Set: Height(self: IProtectedViewWindow) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IProtectedViewWindow) -> float
        Set: Left(self: IProtectedViewWindow) = value
        """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: IProtectedViewWindow) -> str """
        ...

    @property
    def SourcePath(self) -> str:
        """ Get: SourcePath(self: IProtectedViewWindow) -> str """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IProtectedViewWindow) -> float
        Set: Top(self: IProtectedViewWindow) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IProtectedViewWindow) -> bool
        Set: Visible(self: IProtectedViewWindow) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IProtectedViewWindow) -> float
        Set: Width(self: IProtectedViewWindow) = value
        """
        ...

    @property
    def WindowState(self) -> XlProtectedViewWindowState:
        """
        Get: WindowState(self: IProtectedViewWindow) -> XlProtectedViewWindowState
        Set: WindowState(self: IProtectedViewWindow) = value
        """
        ...

    @property
    def Workbook(self) -> Workbook:
        """ Get: Workbook(self: IProtectedViewWindow) -> Workbook """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: IProtectedViewWindow) -> str """
        ...


    def Activate(self): # -> 
        """ Activate(self: IProtectedViewWindow) """
        ...

    def Close(self) -> bool:
        """ Close(self: IProtectedViewWindow) -> bool """
        ...

    def Edit(self, WriteResPassword:object, UpdateLinks:object) -> Workbook:
        """ Edit(self: IProtectedViewWindow, WriteResPassword: object, UpdateLinks: object) -> Workbook """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IProtectedViewWindows(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IProtectedViewWindows) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IProtectedViewWindows) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IProtectedViewWindows) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IProtectedViewWindows) -> object """
        ...


    def Open(self, Filename:str, Password:object, AddToMru:object, RepairMode:object) -> ProtectedViewWindow:
        """ Open(self: IProtectedViewWindows, Filename: str, Password: object, AddToMru: object, RepairMode: object) -> ProtectedViewWindow """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IProtection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowDeletingColumns(self) -> bool:
        """ Get: AllowDeletingColumns(self: IProtection) -> bool """
        ...

    @property
    def AllowDeletingRows(self) -> bool:
        """ Get: AllowDeletingRows(self: IProtection) -> bool """
        ...

    @property
    def AllowEditRanges(self) -> AllowEditRanges:
        """ Get: AllowEditRanges(self: IProtection) -> AllowEditRanges """
        ...

    @property
    def AllowFiltering(self) -> bool:
        """ Get: AllowFiltering(self: IProtection) -> bool """
        ...

    @property
    def AllowFormattingCells(self) -> bool:
        """ Get: AllowFormattingCells(self: IProtection) -> bool """
        ...

    @property
    def AllowFormattingColumns(self) -> bool:
        """ Get: AllowFormattingColumns(self: IProtection) -> bool """
        ...

    @property
    def AllowFormattingRows(self) -> bool:
        """ Get: AllowFormattingRows(self: IProtection) -> bool """
        ...

    @property
    def AllowInsertingColumns(self) -> bool:
        """ Get: AllowInsertingColumns(self: IProtection) -> bool """
        ...

    @property
    def AllowInsertingHyperlinks(self) -> bool:
        """ Get: AllowInsertingHyperlinks(self: IProtection) -> bool """
        ...

    @property
    def AllowInsertingRows(self) -> bool:
        """ Get: AllowInsertingRows(self: IProtection) -> bool """
        ...

    @property
    def AllowSorting(self) -> bool:
        """ Get: AllowSorting(self: IProtection) -> bool """
        ...

    @property
    def AllowUsingPivotTables(self) -> bool:
        """ Get: AllowUsingPivotTables(self: IProtection) -> bool """
        ...



class IPublishObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IPublishObjects) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IPublishObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IPublishObjects) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IPublishObjects) -> object """
        ...


    def Add(self, SourceType:XlSourceType, Filename:str, Sheet:object, Source:object, HtmlType:object, DivID:object, Title:object) -> PublishObject:
        """ Add(self: IPublishObjects, SourceType: XlSourceType, Filename: str, Sheet: object, Source: object, HtmlType: object, DivID: object, Title: object) -> PublishObject """
        ...

    def Delete(self): # -> 
        """ Delete(self: IPublishObjects) """
        ...

    def Publish(self): # -> 
        """ Publish(self: IPublishObjects) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IQueryTables(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IQueryTables) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IQueryTables) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IQueryTables) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IQueryTables) -> object """
        ...


    def Add(self, Connection:object, Destination:Range, Sql:object) -> QueryTable:
        """ Add(self: IQueryTables, Connection: object, Destination: Range, Sql: object) -> QueryTable """
        ...

    def Item(self, Index:object) -> QueryTable:
        """ Item(self: IQueryTables, Index: object) -> QueryTable """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IQuickAnalysis: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IQuickAnalysis) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IQuickAnalysis) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IQuickAnalysis) -> object """
        ...


    def Hide(self, XlQuickAnalysisMode:XlQuickAnalysisMode): # -> 
        """ Hide(self: IQuickAnalysis, XlQuickAnalysisMode: XlQuickAnalysisMode) """
        ...

    def Show(self, XlQuickAnalysisMode:XlQuickAnalysisMode): # -> 
        """ Show(self: IQuickAnalysis, XlQuickAnalysisMode: XlQuickAnalysisMode) """
        ...


class IRange(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> object:
        """
        Get: AddIndent(self: IRange) -> object
        Set: AddIndent(self: IRange) = value
        """
        ...

    @property
    def AllowEdit(self) -> bool:
        """ Get: AllowEdit(self: IRange) -> bool """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IRange) -> Application """
        ...

    @property
    def Areas(self) -> Areas:
        """ Get: Areas(self: IRange) -> Areas """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: IRange) -> Borders """
        ...

    @property
    def Cells(self) -> Range:
        """ Get: Cells(self: IRange) -> Range """
        ...

    @property
    def Column(self) -> int:
        """ Get: Column(self: IRange) -> int """
        ...

    @property
    def Columns(self) -> Range:
        """ Get: Columns(self: IRange) -> Range """
        ...

    @property
    def ColumnWidth(self) -> object:
        """
        Get: ColumnWidth(self: IRange) -> object
        Set: ColumnWidth(self: IRange) = value
        """
        ...

    @property
    def Comment(self) -> Comment:
        """ Get: Comment(self: IRange) -> Comment """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IRange) -> int """
        ...

    @property
    def CountLarge(self) -> object:
        """ Get: CountLarge(self: IRange) -> object """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IRange) -> XlCreator """
        ...

    @property
    def CurrentArray(self) -> Range:
        """ Get: CurrentArray(self: IRange) -> Range """
        ...

    @property
    def CurrentRegion(self) -> Range:
        """ Get: CurrentRegion(self: IRange) -> Range """
        ...

    @property
    def Dependents(self) -> Range:
        """ Get: Dependents(self: IRange) -> Range """
        ...

    @property
    def DirectDependents(self) -> Range:
        """ Get: DirectDependents(self: IRange) -> Range """
        ...

    @property
    def DirectPrecedents(self) -> Range:
        """ Get: DirectPrecedents(self: IRange) -> Range """
        ...

    @property
    def DisplayFormat(self) -> DisplayFormat:
        """ Get: DisplayFormat(self: IRange) -> DisplayFormat """
        ...

    @property
    def EntireColumn(self) -> Range:
        """ Get: EntireColumn(self: IRange) -> Range """
        ...

    @property
    def EntireRow(self) -> Range:
        """ Get: EntireRow(self: IRange) -> Range """
        ...

    @property
    def Errors(self) -> Errors:
        """ Get: Errors(self: IRange) -> Errors """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IRange) -> Font """
        ...

    @property
    def FormatConditions(self) -> FormatConditions:
        """ Get: FormatConditions(self: IRange) -> FormatConditions """
        ...

    @property
    def Formula(self) -> object:
        """
        Get: Formula(self: IRange) -> object
        Set: Formula(self: IRange) = value
        """
        ...

    @property
    def FormulaArray(self) -> object:
        """
        Get: FormulaArray(self: IRange) -> object
        Set: FormulaArray(self: IRange) = value
        """
        ...

    @property
    def FormulaHidden(self) -> object:
        """
        Get: FormulaHidden(self: IRange) -> object
        Set: FormulaHidden(self: IRange) = value
        """
        ...

    @property
    def FormulaLabel(self) -> XlFormulaLabel:
        """
        Get: FormulaLabel(self: IRange) -> XlFormulaLabel
        Set: FormulaLabel(self: IRange) = value
        """
        ...

    @property
    def FormulaLocal(self) -> object:
        """
        Get: FormulaLocal(self: IRange) -> object
        Set: FormulaLocal(self: IRange) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> object:
        """
        Get: FormulaR1C1(self: IRange) -> object
        Set: FormulaR1C1(self: IRange) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> object:
        """
        Get: FormulaR1C1Local(self: IRange) -> object
        Set: FormulaR1C1Local(self: IRange) = value
        """
        ...

    @property
    def HasArray(self) -> object:
        """ Get: HasArray(self: IRange) -> object """
        ...

    @property
    def HasFormula(self) -> object:
        """ Get: HasFormula(self: IRange) -> object """
        ...

    @property
    def Height(self) -> object:
        """ Get: Height(self: IRange) -> object """
        ...

    @property
    def Hidden(self) -> object:
        """
        Get: Hidden(self: IRange) -> object
        Set: Hidden(self: IRange) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IRange) -> object
        Set: HorizontalAlignment(self: IRange) = value
        """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: IRange) -> Hyperlinks """
        ...

    @property
    def ID(self) -> str:
        """
        Get: ID(self: IRange) -> str
        Set: ID(self: IRange) = value
        """
        ...

    @property
    def IndentLevel(self) -> object:
        """
        Get: IndentLevel(self: IRange) -> object
        Set: IndentLevel(self: IRange) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IRange) -> Interior """
        ...

    @property
    def Left(self) -> object:
        """ Get: Left(self: IRange) -> object """
        ...

    @property
    def ListHeaderRows(self) -> int:
        """ Get: ListHeaderRows(self: IRange) -> int """
        ...

    @property
    def ListObject(self) -> ListObject:
        """ Get: ListObject(self: IRange) -> ListObject """
        ...

    @property
    def LocationInTable(self) -> XlLocationInTable:
        """ Get: LocationInTable(self: IRange) -> XlLocationInTable """
        ...

    @property
    def Locked(self) -> object:
        """
        Get: Locked(self: IRange) -> object
        Set: Locked(self: IRange) = value
        """
        ...

    @property
    def MDX(self) -> str:
        """ Get: MDX(self: IRange) -> str """
        ...

    @property
    def MergeArea(self) -> Range:
        """ Get: MergeArea(self: IRange) -> Range """
        ...

    @property
    def MergeCells(self) -> object:
        """
        Get: MergeCells(self: IRange) -> object
        Set: MergeCells(self: IRange) = value
        """
        ...

    @property
    def Name(self) -> object:
        """
        Get: Name(self: IRange) -> object
        Set: Name(self: IRange) = value
        """
        ...

    @property
    def Next(self) -> Range:
        """ Get: Next(self: IRange) -> Range """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: IRange) -> object
        Set: NumberFormat(self: IRange) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: IRange) -> object
        Set: NumberFormatLocal(self: IRange) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IRange) -> object
        Set: Orientation(self: IRange) = value
        """
        ...

    @property
    def OutlineLevel(self) -> object:
        """
        Get: OutlineLevel(self: IRange) -> object
        Set: OutlineLevel(self: IRange) = value
        """
        ...

    @property
    def PageBreak(self) -> int:
        """
        Get: PageBreak(self: IRange) -> int
        Set: PageBreak(self: IRange) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IRange) -> object """
        ...

    @property
    def Phonetic(self) -> Phonetic:
        """ Get: Phonetic(self: IRange) -> Phonetic """
        ...

    @property
    def Phonetics(self) -> Phonetics:
        """ Get: Phonetics(self: IRange) -> Phonetics """
        ...

    @property
    def PivotCell(self) -> PivotCell:
        """ Get: PivotCell(self: IRange) -> PivotCell """
        ...

    @property
    def PivotField(self) -> PivotField:
        """ Get: PivotField(self: IRange) -> PivotField """
        ...

    @property
    def PivotItem(self) -> PivotItem:
        """ Get: PivotItem(self: IRange) -> PivotItem """
        ...

    @property
    def PivotTable(self) -> PivotTable:
        """ Get: PivotTable(self: IRange) -> PivotTable """
        ...

    @property
    def Precedents(self) -> Range:
        """ Get: Precedents(self: IRange) -> Range """
        ...

    @property
    def PrefixCharacter(self) -> object:
        """ Get: PrefixCharacter(self: IRange) -> object """
        ...

    @property
    def Previous(self) -> Range:
        """ Get: Previous(self: IRange) -> Range """
        ...

    @property
    def QueryTable(self) -> QueryTable:
        """ Get: QueryTable(self: IRange) -> QueryTable """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IRange) -> int
        Set: ReadingOrder(self: IRange) = value
        """
        ...

    @property
    def Row(self) -> int:
        """ Get: Row(self: IRange) -> int """
        ...

    @property
    def RowHeight(self) -> object:
        """
        Get: RowHeight(self: IRange) -> object
        Set: RowHeight(self: IRange) = value
        """
        ...

    @property
    def Rows(self) -> Range:
        """ Get: Rows(self: IRange) -> Range """
        ...

    @property
    def ServerActions(self) -> Actions:
        """ Get: ServerActions(self: IRange) -> Actions """
        ...

    @property
    def ShowDetail(self) -> object:
        """
        Get: ShowDetail(self: IRange) -> object
        Set: ShowDetail(self: IRange) = value
        """
        ...

    @property
    def ShrinkToFit(self) -> object:
        """
        Get: ShrinkToFit(self: IRange) -> object
        Set: ShrinkToFit(self: IRange) = value
        """
        ...

    @property
    def SmartTags(self) -> SmartTags:
        """ Get: SmartTags(self: IRange) -> SmartTags """
        ...

    @property
    def SoundNote(self) -> SoundNote:
        """ Get: SoundNote(self: IRange) -> SoundNote """
        ...

    @property
    def SparklineGroups(self) -> SparklineGroups:
        """ Get: SparklineGroups(self: IRange) -> SparklineGroups """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: IRange) -> object
        Set: Style(self: IRange) = value
        """
        ...

    @property
    def Summary(self) -> object:
        """ Get: Summary(self: IRange) -> object """
        ...

    @property
    def Text(self) -> object:
        """ Get: Text(self: IRange) -> object """
        ...

    @property
    def Top(self) -> object:
        """ Get: Top(self: IRange) -> object """
        ...

    @property
    def UseStandardHeight(self) -> object:
        """
        Get: UseStandardHeight(self: IRange) -> object
        Set: UseStandardHeight(self: IRange) = value
        """
        ...

    @property
    def UseStandardWidth(self) -> object:
        """
        Get: UseStandardWidth(self: IRange) -> object
        Set: UseStandardWidth(self: IRange) = value
        """
        ...

    @property
    def Validation(self) -> Validation:
        """ Get: Validation(self: IRange) -> Validation """
        ...

    @property
    def Value2(self) -> object:
        """
        Get: Value2(self: IRange) -> object
        Set: Value2(self: IRange) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IRange) -> object
        Set: VerticalAlignment(self: IRange) = value
        """
        ...

    @property
    def Width(self) -> object:
        """ Get: Width(self: IRange) -> object """
        ...

    @property
    def Worksheet(self) -> Worksheet:
        """ Get: Worksheet(self: IRange) -> Worksheet """
        ...

    @property
    def WrapText(self) -> object:
        """
        Get: WrapText(self: IRange) -> object
        Set: WrapText(self: IRange) = value
        """
        ...

    @property
    def XPath(self) -> XPath:
        """ Get: XPath(self: IRange) -> XPath """
        ...


    def Activate(self) -> object:
        """ Activate(self: IRange) -> object """
        ...

    def AddComment(self, Text:object) -> Comment:
        """ AddComment(self: IRange, Text: object) -> Comment """
        ...

    def AdvancedFilter(self, Action:XlFilterAction, CriteriaRange:object, CopyToRange:object, Unique:object) -> object:
        """ AdvancedFilter(self: IRange, Action: XlFilterAction, CriteriaRange: object, CopyToRange: object, Unique: object) -> object """
        ...

    def AllocateChanges(self): # -> 
        """ AllocateChanges(self: IRange) """
        ...

    def ApplyNames(self, Names:object, IgnoreRelativeAbsolute:object, UseRowColumnNames:object, OmitColumn:object, OmitRow:object, Order:XlApplyNamesOrder, AppendLast:object) -> object:
        """ ApplyNames(self: IRange, Names: object, IgnoreRelativeAbsolute: object, UseRowColumnNames: object, OmitColumn: object, OmitRow: object, Order: XlApplyNamesOrder, AppendLast: object) -> object """
        ...

    def ApplyOutlineStyles(self) -> object:
        """ ApplyOutlineStyles(self: IRange) -> object """
        ...

    def AutoComplete(self, String:str) -> str:
        """ AutoComplete(self: IRange, String: str) -> str """
        ...

    def AutoFill(self, Destination:Range, Type:XlAutoFillType) -> object:
        """ AutoFill(self: IRange, Destination: Range, Type: XlAutoFillType) -> object """
        ...

    def AutoFilter(self, Field:object, Criteria1:object, Operator:XlAutoFilterOperator, Criteria2:object, VisibleDropDown:object) -> object:
        """ AutoFilter(self: IRange, Field: object, Criteria1: object, Operator: XlAutoFilterOperator, Criteria2: object, VisibleDropDown: object) -> object """
        ...

    def AutoFit(self) -> object:
        """ AutoFit(self: IRange) -> object """
        ...

    def AutoFormat(self, Format:XlRangeAutoFormat, Number:object, Font:object, Alignment:object, Border:object, Pattern:object, Width:object) -> object:
        """ AutoFormat(self: IRange, Format: XlRangeAutoFormat, Number: object, Font: object, Alignment: object, Border: object, Pattern: object, Width: object) -> object """
        ...

    def AutoOutline(self) -> object:
        """ AutoOutline(self: IRange) -> object """
        ...

    def BorderAround(self, LineStyle:object, Weight:XlBorderWeight, ColorIndex:XlColorIndex, Color:object) -> object:
        """ BorderAround(self: IRange, LineStyle: object, Weight: XlBorderWeight, ColorIndex: XlColorIndex, Color: object) -> object """
        ...

    def BorderAround2(self, LineStyle:object, Weight:XlBorderWeight, ColorIndex:XlColorIndex, Color:object, ThemeColor:object) -> object:
        """ BorderAround2(self: IRange, LineStyle: object, Weight: XlBorderWeight, ColorIndex: XlColorIndex, Color: object, ThemeColor: object) -> object """
        ...

    def Calculate(self) -> object:
        """ Calculate(self: IRange) -> object """
        ...

    def CalculateRowMajorOrder(self) -> object:
        """ CalculateRowMajorOrder(self: IRange) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IRange, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Clear(self) -> object:
        """ Clear(self: IRange) -> object """
        ...

    def ClearComments(self): # -> 
        """ ClearComments(self: IRange) """
        ...

    def ClearContents(self) -> object:
        """ ClearContents(self: IRange) -> object """
        ...

    def ClearFormats(self) -> object:
        """ ClearFormats(self: IRange) -> object """
        ...

    def ClearHyperlinks(self): # -> 
        """ ClearHyperlinks(self: IRange) """
        ...

    def ClearNotes(self) -> object:
        """ ClearNotes(self: IRange) -> object """
        ...

    def ClearOutline(self) -> object:
        """ ClearOutline(self: IRange) -> object """
        ...

    def ColumnDifferences(self, Comparison:object) -> Range:
        """ ColumnDifferences(self: IRange, Comparison: object) -> Range """
        ...

    def Consolidate(self, Sources:object, Function:object, TopRow:object, LeftColumn:object, CreateLinks:object) -> object:
        """ Consolidate(self: IRange, Sources: object, Function: object, TopRow: object, LeftColumn: object, CreateLinks: object) -> object """
        ...

    def Copy(self, Destination:object) -> object:
        """ Copy(self: IRange, Destination: object) -> object """
        ...

    def CopyFromRecordset(self, Data:object, MaxRows:object, MaxColumns:object) -> int:
        """ CopyFromRecordset(self: IRange, Data: object, MaxRows: object, MaxColumns: object) -> int """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IRange, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def CreateNames(self, Top:object, Left:object, Bottom:object, Right:object) -> object:
        """ CreateNames(self: IRange, Top: object, Left: object, Bottom: object, Right: object) -> object """
        ...

    def CreatePublisher(self, Edition:object, Appearance:XlPictureAppearance, ContainsPICT:object, ContainsBIFF:object, ContainsRTF:object, ContainsVALU:object) -> object:
        """ CreatePublisher(self: IRange, Edition: object, Appearance: XlPictureAppearance, ContainsPICT: object, ContainsBIFF: object, ContainsRTF: object, ContainsVALU: object) -> object """
        ...

    def Cut(self, Destination:object) -> object:
        """ Cut(self: IRange, Destination: object) -> object """
        ...

    def DataSeries(self, Rowcol:object, Type:XlDataSeriesType, Date:XlDataSeriesDate, Step:object, Stop:object, Trend:object) -> object:
        """ DataSeries(self: IRange, Rowcol: object, Type: XlDataSeriesType, Date: XlDataSeriesDate, Step: object, Stop: object, Trend: object) -> object """
        ...

    def Delete(self, Shift:object) -> object:
        """ Delete(self: IRange, Shift: object) -> object """
        ...

    def DialogBox(self) -> object:
        """ DialogBox(self: IRange) -> object """
        ...

    def Dirty(self): # -> 
        """ Dirty(self: IRange) """
        ...

    def DiscardChanges(self): # -> 
        """ DiscardChanges(self: IRange) """
        ...

    def EditionOptions(self, Type:XlEditionType, Option:XlEditionOptionsOption, Name:object, Reference:object, Appearance:XlPictureAppearance, ChartSize:XlPictureAppearance, Format:object) -> object:
        """ EditionOptions(self: IRange, Type: XlEditionType, Option: XlEditionOptionsOption, Name: object, Reference: object, Appearance: XlPictureAppearance, ChartSize: XlPictureAppearance, Format: object) -> object """
        ...

    def ExportAsFixedFormat(self, Type:XlFixedFormatType, Filename:object, Quality:object, IncludeDocProperties:object, IgnorePrintAreas:object, From:object, To:object, OpenAfterPublish:object, FixedFormatExtClassPtr:object): # -> 
        """ ExportAsFixedFormat(self: IRange, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        ...

    def FillDown(self) -> object:
        """ FillDown(self: IRange) -> object """
        ...

    def FillLeft(self) -> object:
        """ FillLeft(self: IRange) -> object """
        ...

    def FillRight(self) -> object:
        """ FillRight(self: IRange) -> object """
        ...

    def FillUp(self) -> object:
        """ FillUp(self: IRange) -> object """
        ...

    def Find(self, What:object, After:object, LookIn:object, LookAt:object, SearchOrder:object, SearchDirection:XlSearchDirection, MatchCase:object, MatchByte:object, SearchFormat:object) -> Range:
        """ Find(self: IRange, What: object, After: object, LookIn: object, LookAt: object, SearchOrder: object, SearchDirection: XlSearchDirection, MatchCase: object, MatchByte: object, SearchFormat: object) -> Range """
        ...

    def FindNext(self, After:object) -> Range:
        """ FindNext(self: IRange, After: object) -> Range """
        ...

    def FindPrevious(self, After:object) -> Range:
        """ FindPrevious(self: IRange, After: object) -> Range """
        ...

    def FlashFill(self): # -> 
        """ FlashFill(self: IRange) """
        ...

    def FunctionWizard(self) -> object:
        """ FunctionWizard(self: IRange) -> object """
        ...

    def GoalSeek(self, Goal:object, ChangingCell:Range) -> bool:
        """ GoalSeek(self: IRange, Goal: object, ChangingCell: Range) -> bool """
        ...

    def Group(self, Start:object, End:object, By:object, Periods:object) -> object:
        """ Group(self: IRange, Start: object, End: object, By: object, Periods: object) -> object """
        ...

    def Insert(self, Shift:object, CopyOrigin:object) -> object:
        """ Insert(self: IRange, Shift: object, CopyOrigin: object) -> object """
        ...

    def InsertIndent(self, InsertAmount:int): # -> 
        """ InsertIndent(self: IRange, InsertAmount: int) """
        ...

    def Justify(self) -> object:
        """ Justify(self: IRange) -> object """
        ...

    def ListNames(self) -> object:
        """ ListNames(self: IRange) -> object """
        ...

    def Merge(self, Across:object): # -> 
        """ Merge(self: IRange, Across: object) """
        ...

    def NavigateArrow(self, TowardPrecedent:object, ArrowNumber:object, LinkNumber:object) -> object:
        """ NavigateArrow(self: IRange, TowardPrecedent: object, ArrowNumber: object, LinkNumber: object) -> object """
        ...

    def NoteText(self, Text:object, Start:object, Length:object) -> str:
        """ NoteText(self: IRange, Text: object, Start: object, Length: object) -> str """
        ...

    def Parse(self, ParseLine:object, Destination:object) -> object:
        """ Parse(self: IRange, ParseLine: object, Destination: object) -> object """
        ...

    def PasteSpecial(self, Paste:XlPasteType, Operation:XlPasteSpecialOperation, SkipBlanks:object, Transpose:object) -> object:
        """ PasteSpecial(self: IRange, Paste: XlPasteType, Operation: XlPasteSpecialOperation, SkipBlanks: object, Transpose: object) -> object """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object) -> object:
        """ PrintOut(self: IRange, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object) -> object:
        """ PrintOutEx(self: IRange, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        ...

    def PrintPreview(self, EnableChanges:object) -> object:
        """ PrintPreview(self: IRange, EnableChanges: object) -> object """
        ...

    def RemoveDuplicates(self, Columns:object, Header:XlYesNoGuess): # -> 
        """ RemoveDuplicates(self: IRange, Columns: object, Header: XlYesNoGuess) """
        ...

    def RemoveSubtotal(self) -> object:
        """ RemoveSubtotal(self: IRange) -> object """
        ...

    def Replace(self, What:object, Replacement:object, LookAt:object, SearchOrder:object, MatchCase:object, MatchByte:object, SearchFormat:object, ReplaceFormat:object) -> bool:
        """ Replace(self: IRange, What: object, Replacement: object, LookAt: object, SearchOrder: object, MatchCase: object, MatchByte: object, SearchFormat: object, ReplaceFormat: object) -> bool """
        ...

    def RowDifferences(self, Comparison:object) -> Range:
        """ RowDifferences(self: IRange, Comparison: object) -> Range """
        ...

    def Run(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Run(self: IRange, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IRange) -> object """
        ...

    def SetPhonetic(self): # -> 
        """ SetPhonetic(self: IRange) """
        ...

    def Show(self) -> object:
        """ Show(self: IRange) -> object """
        ...

    def ShowDependents(self, Remove:object) -> object:
        """ ShowDependents(self: IRange, Remove: object) -> object """
        ...

    def ShowErrors(self) -> object:
        """ ShowErrors(self: IRange) -> object """
        ...

    def ShowPrecedents(self, Remove:object) -> object:
        """ ShowPrecedents(self: IRange, Remove: object) -> object """
        ...

    def Sort(self, Key1:object, Order1:XlSortOrder, Key2:object, Type:object, Order2:XlSortOrder, Key3:object, Order3:XlSortOrder, Header:XlYesNoGuess, OrderCustom:object, MatchCase:object, Orientation:XlSortOrientation, SortMethod:XlSortMethod, DataOption1:XlSortDataOption, DataOption2:XlSortDataOption, DataOption3:XlSortDataOption) -> object:
        """ Sort(self: IRange, Key1: object, Order1: XlSortOrder, Key2: object, Type: object, Order2: XlSortOrder, Key3: object, Order3: XlSortOrder, Header: XlYesNoGuess, OrderCustom: object, MatchCase: object, Orientation: XlSortOrientation, SortMethod: XlSortMethod, DataOption1: XlSortDataOption, DataOption2: XlSortDataOption, DataOption3: XlSortDataOption) -> object """
        ...

    def SortSpecial(self, SortMethod:XlSortMethod, Key1:object, Order1:XlSortOrder, Type:object, Key2:object, Order2:XlSortOrder, Key3:object, Order3:XlSortOrder, Header:XlYesNoGuess, OrderCustom:object, MatchCase:object, Orientation:XlSortOrientation, DataOption1:XlSortDataOption, DataOption2:XlSortDataOption, DataOption3:XlSortDataOption) -> object:
        """ SortSpecial(self: IRange, SortMethod: XlSortMethod, Key1: object, Order1: XlSortOrder, Type: object, Key2: object, Order2: XlSortOrder, Key3: object, Order3: XlSortOrder, Header: XlYesNoGuess, OrderCustom: object, MatchCase: object, Orientation: XlSortOrientation, DataOption1: XlSortDataOption, DataOption2: XlSortDataOption, DataOption3: XlSortDataOption) -> object """
        ...

    def Speak(self, SpeakDirection:object, SpeakFormulas:object): # -> 
        """ Speak(self: IRange, SpeakDirection: object, SpeakFormulas: object) """
        ...

    def SpecialCells(self, Type:XlCellType, Value:object) -> Range:
        """ SpecialCells(self: IRange, Type: XlCellType, Value: object) -> Range """
        ...

    def SubscribeTo(self, Edition:str, Format:XlSubscribeToFormat) -> object:
        """ SubscribeTo(self: IRange, Edition: str, Format: XlSubscribeToFormat) -> object """
        ...

    def Subtotal(self, GroupBy:int, Function:XlConsolidationFunction, TotalList:object, Replace:object, PageBreaks:object, SummaryBelowData:XlSummaryRow) -> object:
        """ Subtotal(self: IRange, GroupBy: int, Function: XlConsolidationFunction, TotalList: object, Replace: object, PageBreaks: object, SummaryBelowData: XlSummaryRow) -> object """
        ...

    def Table(self, RowInput:object, ColumnInput:object) -> object:
        """ Table(self: IRange, RowInput: object, ColumnInput: object) -> object """
        ...

    def TextToColumns(self, Destination:object, DataType:XlTextParsingType, TextQualifier:XlTextQualifier, ConsecutiveDelimiter:object, Tab:object, Semicolon:object, Comma:object, Space:object, Other:object, OtherChar:object, FieldInfo:object, DecimalSeparator:object, ThousandsSeparator:object, TrailingMinusNumbers:object) -> object:
        """ TextToColumns(self: IRange, Destination: object, DataType: XlTextParsingType, TextQualifier: XlTextQualifier, ConsecutiveDelimiter: object, Tab: object, Semicolon: object, Comma: object, Space: object, Other: object, OtherChar: object, FieldInfo: object, DecimalSeparator: object, ThousandsSeparator: object, TrailingMinusNumbers: object) -> object """
        ...

    def Ungroup(self) -> object:
        """ Ungroup(self: IRange) -> object """
        ...

    def UnMerge(self): # -> 
        """ UnMerge(self: IRange) """
        ...

    def _PasteSpecial(self, Paste:XlPasteType, Operation:XlPasteSpecialOperation, SkipBlanks:object, Transpose:object) -> object:
        """ _PasteSpecial(self: IRange, Paste: XlPasteType, Operation: XlPasteSpecialOperation, SkipBlanks: object, Transpose: object) -> object """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object) -> object:
        """ _PrintOut(self: IRange, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IRanges(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IRanges) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IRanges) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IRanges) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IRanges) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IRecentFile: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IRecentFile) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IRecentFile) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IRecentFile) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IRecentFile) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IRecentFile) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: IRecentFile) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: IRecentFile) """
        ...

    def Open(self) -> Workbook:
        """ Open(self: IRecentFile) -> Workbook """
        ...


class IRecentFiles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IRecentFiles) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IRecentFiles) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IRecentFiles) -> XlCreator """
        ...

    @property
    def Maximum(self) -> int:
        """
        Get: Maximum(self: IRecentFiles) -> int
        Set: Maximum(self: IRecentFiles) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IRecentFiles) -> object """
        ...


    def Add(self, Name:str) -> RecentFile:
        """ Add(self: IRecentFiles, Name: str) -> RecentFile """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IRectangle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IRectangle) -> bool
        Set: AddIndent(self: IRectangle) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IRectangle) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IRectangle) -> object
        Set: AutoScaleFont(self: IRectangle) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IRectangle) -> bool
        Set: AutoSize(self: IRectangle) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IRectangle) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IRectangle) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IRectangle) -> str
        Set: Caption(self: IRectangle) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IRectangle) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IRectangle) -> bool
        Set: Enabled(self: IRectangle) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IRectangle) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IRectangle) -> str
        Set: Formula(self: IRectangle) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IRectangle) -> float
        Set: Height(self: IRectangle) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IRectangle) -> object
        Set: HorizontalAlignment(self: IRectangle) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IRectangle) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IRectangle) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IRectangle) -> float
        Set: Left(self: IRectangle) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IRectangle) -> bool
        Set: Locked(self: IRectangle) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IRectangle) -> bool
        Set: LockedText(self: IRectangle) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IRectangle) -> str
        Set: Name(self: IRectangle) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IRectangle) -> str
        Set: OnAction(self: IRectangle) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IRectangle) -> object
        Set: Orientation(self: IRectangle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IRectangle) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IRectangle) -> object
        Set: Placement(self: IRectangle) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IRectangle) -> bool
        Set: PrintObject(self: IRectangle) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IRectangle) -> int
        Set: ReadingOrder(self: IRectangle) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: IRectangle) -> bool
        Set: RoundedCorners(self: IRectangle) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IRectangle) -> bool
        Set: Shadow(self: IRectangle) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IRectangle) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IRectangle) -> str
        Set: Text(self: IRectangle) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IRectangle) -> float
        Set: Top(self: IRectangle) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IRectangle) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IRectangle) -> object
        Set: VerticalAlignment(self: IRectangle) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IRectangle) -> bool
        Set: Visible(self: IRectangle) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IRectangle) -> float
        Set: Width(self: IRectangle) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IRectangle) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: IRectangle) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IRectangle, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IRectangle) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IRectangle, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IRectangle) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IRectangle) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IRectangle) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IRectangle, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IRectangle) -> object """
        ...


class IRectangles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IRectangles) -> bool
        Set: AddIndent(self: IRectangles) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IRectangles) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: IRectangles) -> object
        Set: AutoScaleFont(self: IRectangles) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: IRectangles) -> bool
        Set: AutoSize(self: IRectangles) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IRectangles) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: IRectangles) -> str
        Set: Caption(self: IRectangles) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IRectangles) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IRectangles) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IRectangles) -> bool
        Set: Enabled(self: IRectangles) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IRectangles) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: IRectangles) -> str
        Set: Formula(self: IRectangles) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IRectangles) -> float
        Set: Height(self: IRectangles) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: IRectangles) -> object
        Set: HorizontalAlignment(self: IRectangles) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IRectangles) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IRectangles) -> float
        Set: Left(self: IRectangles) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IRectangles) -> bool
        Set: Locked(self: IRectangles) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: IRectangles) -> bool
        Set: LockedText(self: IRectangles) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IRectangles) -> str
        Set: OnAction(self: IRectangles) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: IRectangles) -> object
        Set: Orientation(self: IRectangles) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IRectangles) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IRectangles) -> object
        Set: Placement(self: IRectangles) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IRectangles) -> bool
        Set: PrintObject(self: IRectangles) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IRectangles) -> int
        Set: ReadingOrder(self: IRectangles) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: IRectangles) -> bool
        Set: RoundedCorners(self: IRectangles) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: IRectangles) -> bool
        Set: Shadow(self: IRectangles) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IRectangles) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: IRectangles) -> str
        Set: Text(self: IRectangles) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IRectangles) -> float
        Set: Top(self: IRectangles) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: IRectangles) -> object
        Set: VerticalAlignment(self: IRectangles) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IRectangles) -> bool
        Set: Visible(self: IRectangles) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IRectangles) -> float
        Set: Width(self: IRectangles) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IRectangles) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Rectangle:
        """ Add(self: IRectangles, Left: float, Top: float, Width: float, Height: float) -> Rectangle """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IRectangles) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: IRectangles, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IRectangles) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IRectangles, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IRectangles) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IRectangles) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IRectangles) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IRectangles) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IRectangles, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IRectangles, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IRectangles) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IRectangles) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IRectangles) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IRectangles) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IRectangles) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IRectangularGradient: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IRectangularGradient) -> Application """
        ...

    @property
    def ColorStops(self) -> ColorStops:
        """ Get: ColorStops(self: IRectangularGradient) -> ColorStops """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IRectangularGradient) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IRectangularGradient) -> object """
        ...

    @property
    def RectangleBottom(self) -> float:
        """
        Get: RectangleBottom(self: IRectangularGradient) -> float
        Set: RectangleBottom(self: IRectangularGradient) = value
        """
        ...

    @property
    def RectangleLeft(self) -> float:
        """
        Get: RectangleLeft(self: IRectangularGradient) -> float
        Set: RectangleLeft(self: IRectangularGradient) = value
        """
        ...

    @property
    def RectangleRight(self) -> float:
        """
        Get: RectangleRight(self: IRectangularGradient) -> float
        Set: RectangleRight(self: IRectangularGradient) = value
        """
        ...

    @property
    def RectangleTop(self) -> float:
        """
        Get: RectangleTop(self: IRectangularGradient) -> float
        Set: RectangleTop(self: IRectangularGradient) = value
        """
        ...



class IRefreshEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterRefresh(self, Success:bool): # -> 
        """ AfterRefresh(self: IRefreshEvents, Success: bool) """
        ...

    def BeforeRefresh(self, Cancel) -> bool:
        """ BeforeRefresh(self: IRefreshEvents) -> bool """
        ...


class IResearch: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IResearch) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IResearch) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IResearch) -> object """
        ...


    def IsResearchService(self, ServiceID:str) -> bool:
        """ IsResearchService(self: IResearch, ServiceID: str) -> bool """
        ...

    def Query(self, ServiceID:str, QueryString:object, QueryLanguage:object, UseSelection:object, LaunchQuery:object) -> object:
        """ Query(self: IResearch, ServiceID: str, QueryString: object, QueryLanguage: object, UseSelection: object, LaunchQuery: object) -> object """
        ...

    def SetLanguagePair(self, LanguageFrom:int, LanguageTo:int) -> object:
        """ SetLanguagePair(self: IResearch, LanguageFrom: int, LanguageTo: int) -> object """
        ...


class IRoutingSlip: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IRoutingSlip) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IRoutingSlip) -> XlCreator """
        ...

    @property
    def Delivery(self) -> XlRoutingSlipDelivery:
        """
        Get: Delivery(self: IRoutingSlip) -> XlRoutingSlipDelivery
        Set: Delivery(self: IRoutingSlip) = value
        """
        ...

    @property
    def Message(self) -> object:
        """
        Get: Message(self: IRoutingSlip) -> object
        Set: Message(self: IRoutingSlip) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IRoutingSlip) -> object """
        ...

    @property
    def ReturnWhenDone(self) -> bool:
        """
        Get: ReturnWhenDone(self: IRoutingSlip) -> bool
        Set: ReturnWhenDone(self: IRoutingSlip) = value
        """
        ...

    @property
    def Status(self) -> XlRoutingSlipStatus:
        """ Get: Status(self: IRoutingSlip) -> XlRoutingSlipStatus """
        ...

    @property
    def Subject(self) -> object:
        """
        Get: Subject(self: IRoutingSlip) -> object
        Set: Subject(self: IRoutingSlip) = value
        """
        ...

    @property
    def TrackStatus(self) -> bool:
        """
        Get: TrackStatus(self: IRoutingSlip) -> bool
        Set: TrackStatus(self: IRoutingSlip) = value
        """
        ...


    def Reset(self) -> object:
        """ Reset(self: IRoutingSlip) -> object """
        ...


class IRTD: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ThrottleInterval(self) -> int:
        """
        Get: ThrottleInterval(self: IRTD) -> int
        Set: ThrottleInterval(self: IRTD) = value
        """
        ...


    def RefreshData(self): # -> 
        """ RefreshData(self: IRTD) """
        ...

    def RestartServers(self): # -> 
        """ RestartServers(self: IRTD) """
        ...


class IRtdServer: # skipped bases: <type 'object'>
    """ no doc """
    def ConnectData(self, TopicID, Strings, GetNewValues) -> Tuple_[object, Array, bool]:
        """ ConnectData(self: IRtdServer, TopicID: int, Strings: Array) -> (object, Array, bool) """
        ...

    def DisconnectData(self, TopicID:int): # -> 
        """ DisconnectData(self: IRtdServer, TopicID: int) """
        ...

    def Heartbeat(self) -> int:
        """ Heartbeat(self: IRtdServer) -> int """
        ...

    def RefreshData(self, TopicCount) -> Tuple_[Array, int]:
        """ RefreshData(self: IRtdServer) -> (Array, int) """
        ...

    def ServerStart(self, CallbackObject:IRTDUpdateEvent) -> int:
        """ ServerStart(self: IRtdServer, CallbackObject: IRTDUpdateEvent) -> int """
        ...

    def ServerTerminate(self): # -> 
        """ ServerTerminate(self: IRtdServer) """
        ...


class IRTDUpdateEvent: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def HeartbeatInterval(self) -> int:
        """
        Get: HeartbeatInterval(self: IRTDUpdateEvent) -> int
        Set: HeartbeatInterval(self: IRTDUpdateEvent) = value
        """
        ...


    def Disconnect(self): # -> 
        """ Disconnect(self: IRTDUpdateEvent) """
        ...

    def UpdateNotify(self): # -> 
        """ UpdateNotify(self: IRTDUpdateEvent) """
        ...


class IScenario: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IScenario) -> Application """
        ...

    @property
    def ChangingCells(self) -> Range:
        """ Get: ChangingCells(self: IScenario) -> Range """
        ...

    @property
    def Comment(self) -> str:
        """
        Get: Comment(self: IScenario) -> str
        Set: Comment(self: IScenario) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IScenario) -> XlCreator """
        ...

    @property
    def Hidden(self) -> bool:
        """
        Get: Hidden(self: IScenario) -> bool
        Set: Hidden(self: IScenario) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IScenario) -> int """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IScenario) -> bool
        Set: Locked(self: IScenario) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IScenario) -> str
        Set: Name(self: IScenario) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IScenario) -> object """
        ...


    def ChangeScenario(self, ChangingCells:object, Values:object) -> object:
        """ ChangeScenario(self: IScenario, ChangingCells: object, Values: object) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IScenario) -> object """
        ...

    def Show(self) -> object:
        """ Show(self: IScenario) -> object """
        ...


class IScenarios(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IScenarios) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IScenarios) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IScenarios) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IScenarios) -> object """
        ...


    def Add(self, Name:str, ChangingCells:object, Values:object, Comment:object, Locked:object, Hidden:object) -> Scenario:
        """ Add(self: IScenarios, Name: str, ChangingCells: object, Values: object, Comment: object, Locked: object, Hidden: object) -> Scenario """
        ...

    def CreateSummary(self, ReportType:XlSummaryReportType, ResultCells:object) -> object:
        """ CreateSummary(self: IScenarios, ReportType: XlSummaryReportType, ResultCells: object) -> object """
        ...

    def Item(self, Index:object) -> Scenario:
        """ Item(self: IScenarios, Index: object) -> Scenario """
        ...

    def Merge(self, Source:object) -> object:
        """ Merge(self: IScenarios, Source: object) -> object """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IScrollBar: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IScrollBar) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IScrollBar) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IScrollBar) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: IScrollBar) -> bool
        Set: Display3DShading(self: IScrollBar) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IScrollBar) -> bool
        Set: Enabled(self: IScrollBar) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IScrollBar) -> float
        Set: Height(self: IScrollBar) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IScrollBar) -> int """
        ...

    @property
    def LargeChange(self) -> int:
        """
        Get: LargeChange(self: IScrollBar) -> int
        Set: LargeChange(self: IScrollBar) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IScrollBar) -> float
        Set: Left(self: IScrollBar) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: IScrollBar) -> str
        Set: LinkedCell(self: IScrollBar) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IScrollBar) -> bool
        Set: Locked(self: IScrollBar) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: IScrollBar) -> int
        Set: Max(self: IScrollBar) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: IScrollBar) -> int
        Set: Min(self: IScrollBar) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IScrollBar) -> str
        Set: Name(self: IScrollBar) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IScrollBar) -> str
        Set: OnAction(self: IScrollBar) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IScrollBar) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IScrollBar) -> object
        Set: Placement(self: IScrollBar) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IScrollBar) -> bool
        Set: PrintObject(self: IScrollBar) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IScrollBar) -> ShapeRange """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: IScrollBar) -> int
        Set: SmallChange(self: IScrollBar) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IScrollBar) -> float
        Set: Top(self: IScrollBar) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IScrollBar) -> Range """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: IScrollBar) -> int
        Set: Value(self: IScrollBar) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IScrollBar) -> bool
        Set: Visible(self: IScrollBar) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IScrollBar) -> float
        Set: Width(self: IScrollBar) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IScrollBar) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IScrollBar) -> int
        Set: _Default(self: IScrollBar) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: IScrollBar) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IScrollBar) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IScrollBar, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IScrollBar) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IScrollBar) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IScrollBar) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IScrollBar, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IScrollBar) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IScrollBars(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IScrollBars) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IScrollBars) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IScrollBars) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: IScrollBars) -> bool
        Set: Display3DShading(self: IScrollBars) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IScrollBars) -> bool
        Set: Enabled(self: IScrollBars) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IScrollBars) -> float
        Set: Height(self: IScrollBars) = value
        """
        ...

    @property
    def LargeChange(self) -> int:
        """
        Get: LargeChange(self: IScrollBars) -> int
        Set: LargeChange(self: IScrollBars) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IScrollBars) -> float
        Set: Left(self: IScrollBars) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: IScrollBars) -> str
        Set: LinkedCell(self: IScrollBars) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IScrollBars) -> bool
        Set: Locked(self: IScrollBars) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: IScrollBars) -> int
        Set: Max(self: IScrollBars) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: IScrollBars) -> int
        Set: Min(self: IScrollBars) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IScrollBars) -> str
        Set: OnAction(self: IScrollBars) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IScrollBars) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: IScrollBars) -> object
        Set: Placement(self: IScrollBars) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: IScrollBars) -> bool
        Set: PrintObject(self: IScrollBars) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: IScrollBars) -> ShapeRange """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: IScrollBars) -> int
        Set: SmallChange(self: IScrollBars) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IScrollBars) -> float
        Set: Top(self: IScrollBars) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: IScrollBars) -> int
        Set: Value(self: IScrollBars) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IScrollBars) -> bool
        Set: Visible(self: IScrollBars) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IScrollBars) -> float
        Set: Width(self: IScrollBars) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: IScrollBars) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: IScrollBars) -> int
        Set: _Default(self: IScrollBars) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> ScrollBar:
        """ Add(self: IScrollBars, Left: float, Top: float, Width: float, Height: float) -> ScrollBar """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: IScrollBars) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: IScrollBars) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: IScrollBars, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: IScrollBars) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: IScrollBars) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: IScrollBars) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: IScrollBars) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IScrollBars, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: IScrollBars, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: IScrollBars) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: IScrollBars) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: IScrollBars) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: IScrollBars) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: IScrollBars) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ISeries: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISeries) -> Application """
        ...

    @property
    def ApplyPictToEnd(self) -> bool:
        """
        Get: ApplyPictToEnd(self: ISeries) -> bool
        Set: ApplyPictToEnd(self: ISeries) = value
        """
        ...

    @property
    def ApplyPictToFront(self) -> bool:
        """
        Get: ApplyPictToFront(self: ISeries) -> bool
        Set: ApplyPictToFront(self: ISeries) = value
        """
        ...

    @property
    def ApplyPictToSides(self) -> bool:
        """
        Get: ApplyPictToSides(self: ISeries) -> bool
        Set: ApplyPictToSides(self: ISeries) = value
        """
        ...

    @property
    def AxisGroup(self) -> XlAxisGroup:
        """
        Get: AxisGroup(self: ISeries) -> XlAxisGroup
        Set: AxisGroup(self: ISeries) = value
        """
        ...

    @property
    def BarShape(self) -> XlBarShape:
        """
        Get: BarShape(self: ISeries) -> XlBarShape
        Set: BarShape(self: ISeries) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ISeries) -> Border """
        ...

    @property
    def BubbleSizes(self) -> object:
        """
        Get: BubbleSizes(self: ISeries) -> object
        Set: BubbleSizes(self: ISeries) = value
        """
        ...

    @property
    def ChartType(self) -> XlChartType:
        """
        Get: ChartType(self: ISeries) -> XlChartType
        Set: ChartType(self: ISeries) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISeries) -> XlCreator """
        ...

    @property
    def ErrorBars(self) -> ErrorBars:
        """ Get: ErrorBars(self: ISeries) -> ErrorBars """
        ...

    @property
    def Explosion(self) -> int:
        """
        Get: Explosion(self: ISeries) -> int
        Set: Explosion(self: ISeries) = value
        """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: ISeries) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ISeries) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: ISeries) -> str
        Set: Formula(self: ISeries) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: ISeries) -> str
        Set: FormulaLocal(self: ISeries) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: ISeries) -> str
        Set: FormulaR1C1(self: ISeries) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: ISeries) -> str
        Set: FormulaR1C1Local(self: ISeries) = value
        """
        ...

    @property
    def Has3DEffect(self) -> bool:
        """
        Get: Has3DEffect(self: ISeries) -> bool
        Set: Has3DEffect(self: ISeries) = value
        """
        ...

    @property
    def HasDataLabels(self) -> bool:
        """
        Get: HasDataLabels(self: ISeries) -> bool
        Set: HasDataLabels(self: ISeries) = value
        """
        ...

    @property
    def HasErrorBars(self) -> bool:
        """
        Get: HasErrorBars(self: ISeries) -> bool
        Set: HasErrorBars(self: ISeries) = value
        """
        ...

    @property
    def HasLeaderLines(self) -> bool:
        """
        Get: HasLeaderLines(self: ISeries) -> bool
        Set: HasLeaderLines(self: ISeries) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ISeries) -> Interior """
        ...

    @property
    def InvertColor(self) -> int:
        """
        Get: InvertColor(self: ISeries) -> int
        Set: InvertColor(self: ISeries) = value
        """
        ...

    @property
    def InvertColorIndex(self) -> int:
        """
        Get: InvertColorIndex(self: ISeries) -> int
        Set: InvertColorIndex(self: ISeries) = value
        """
        ...

    @property
    def InvertIfNegative(self) -> bool:
        """
        Get: InvertIfNegative(self: ISeries) -> bool
        Set: InvertIfNegative(self: ISeries) = value
        """
        ...

    @property
    def IsFiltered(self) -> bool:
        """
        Get: IsFiltered(self: ISeries) -> bool
        Set: IsFiltered(self: ISeries) = value
        """
        ...

    @property
    def LeaderLines(self) -> LeaderLines:
        """ Get: LeaderLines(self: ISeries) -> LeaderLines """
        ...

    @property
    def MarkerBackgroundColor(self) -> int:
        """
        Get: MarkerBackgroundColor(self: ISeries) -> int
        Set: MarkerBackgroundColor(self: ISeries) = value
        """
        ...

    @property
    def MarkerBackgroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerBackgroundColorIndex(self: ISeries) -> XlColorIndex
        Set: MarkerBackgroundColorIndex(self: ISeries) = value
        """
        ...

    @property
    def MarkerForegroundColor(self) -> int:
        """
        Get: MarkerForegroundColor(self: ISeries) -> int
        Set: MarkerForegroundColor(self: ISeries) = value
        """
        ...

    @property
    def MarkerForegroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerForegroundColorIndex(self: ISeries) -> XlColorIndex
        Set: MarkerForegroundColorIndex(self: ISeries) = value
        """
        ...

    @property
    def MarkerSize(self) -> int:
        """
        Get: MarkerSize(self: ISeries) -> int
        Set: MarkerSize(self: ISeries) = value
        """
        ...

    @property
    def MarkerStyle(self) -> XlMarkerStyle:
        """
        Get: MarkerStyle(self: ISeries) -> XlMarkerStyle
        Set: MarkerStyle(self: ISeries) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ISeries) -> str
        Set: Name(self: ISeries) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISeries) -> object """
        ...

    @property
    def PictureType(self) -> XlChartPictureType:
        """
        Get: PictureType(self: ISeries) -> XlChartPictureType
        Set: PictureType(self: ISeries) = value
        """
        ...

    @property
    def PictureUnit(self) -> int:
        """
        Get: PictureUnit(self: ISeries) -> int
        Set: PictureUnit(self: ISeries) = value
        """
        ...

    @property
    def PictureUnit2(self) -> float:
        """
        Get: PictureUnit2(self: ISeries) -> float
        Set: PictureUnit2(self: ISeries) = value
        """
        ...

    @property
    def PlotColorIndex(self) -> int:
        """ Get: PlotColorIndex(self: ISeries) -> int """
        ...

    @property
    def PlotOrder(self) -> int:
        """
        Get: PlotOrder(self: ISeries) -> int
        Set: PlotOrder(self: ISeries) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: ISeries) -> bool
        Set: Shadow(self: ISeries) = value
        """
        ...

    @property
    def Smooth(self) -> bool:
        """
        Get: Smooth(self: ISeries) -> bool
        Set: Smooth(self: ISeries) = value
        """
        ...

    @property
    def Type(self) -> int:
        """
        Get: Type(self: ISeries) -> int
        Set: Type(self: ISeries) = value
        """
        ...

    @property
    def Values(self) -> object:
        """
        Get: Values(self: ISeries) -> object
        Set: Values(self: ISeries) = value
        """
        ...

    @property
    def XValues(self) -> object:
        """
        Get: XValues(self: ISeries) -> object
        Set: XValues(self: ISeries) = value
        """
        ...


    def ApplyCustomType(self, ChartType:XlChartType): # -> 
        """ ApplyCustomType(self: ISeries, ChartType: XlChartType) """
        ...

    def ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object, ShowSeriesName:object, ShowCategoryName:object, ShowValue:object, ShowPercentage:object, ShowBubbleSize:object, Separator:object) -> object:
        """ ApplyDataLabels(self: ISeries, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) -> object """
        ...

    def ClearFormats(self) -> object:
        """ ClearFormats(self: ISeries) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ISeries) -> object """
        ...

    def DataLabels(self, Index:object) -> object:
        """ DataLabels(self: ISeries, Index: object) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ISeries) -> object """
        ...

    def ErrorBar(self, Direction:XlErrorBarDirection, Include:XlErrorBarInclude, Type:XlErrorBarType, Amount:object, MinusValues:object) -> object:
        """ ErrorBar(self: ISeries, Direction: XlErrorBarDirection, Include: XlErrorBarInclude, Type: XlErrorBarType, Amount: object, MinusValues: object) -> object """
        ...

    def Paste(self) -> object:
        """ Paste(self: ISeries) -> object """
        ...

    def Points(self, Index:object) -> object:
        """ Points(self: ISeries, Index: object) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ISeries) -> object """
        ...

    def Trendlines(self, Index:object) -> object:
        """ Trendlines(self: ISeries, Index: object) -> object """
        ...

    def _ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object) -> object:
        """ _ApplyDataLabels(self: ISeries, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) -> object """
        ...


class ISeriesCollection(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISeriesCollection) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISeriesCollection) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISeriesCollection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISeriesCollection) -> object """
        ...


    def Add(self, Source:object, Rowcol:XlRowCol, SeriesLabels:object, CategoryLabels:object, Replace:object) -> Series:
        """ Add(self: ISeriesCollection, Source: object, Rowcol: XlRowCol, SeriesLabels: object, CategoryLabels: object, Replace: object) -> Series """
        ...

    def Extend(self, Source:object, Rowcol:object, CategoryLabels:object) -> object:
        """ Extend(self: ISeriesCollection, Source: object, Rowcol: object, CategoryLabels: object) -> object """
        ...

    def Item(self, Index:object) -> Series:
        """ Item(self: ISeriesCollection, Index: object) -> Series """
        ...

    def NewSeries(self) -> Series:
        """ NewSeries(self: ISeriesCollection) -> Series """
        ...

    def Paste(self, Rowcol:XlRowCol, SeriesLabels:object, CategoryLabels:object, Replace:object, NewSeries:object) -> object:
        """ Paste(self: ISeriesCollection, Rowcol: XlRowCol, SeriesLabels: object, CategoryLabels: object, Replace: object, NewSeries: object) -> object """
        ...

    def _Default(self, Index:object) -> Series:
        """ _Default(self: ISeriesCollection, Index: object) -> Series """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class ISeriesLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISeriesLines) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ISeriesLines) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISeriesLines) -> XlCreator """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ISeriesLines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ISeriesLines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISeriesLines) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: ISeriesLines) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ISeriesLines) -> object """
        ...


class IServerViewableItems(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IServerViewableItems) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IServerViewableItems) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IServerViewableItems) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IServerViewableItems) -> object """
        ...


    def Add(self, Obj:object) -> object:
        """ Add(self: IServerViewableItems, Obj: object) -> object """
        ...

    def Delete(self, Index:object): # -> 
        """ Delete(self: IServerViewableItems, Index: object) """
        ...

    def DeleteAll(self): # -> 
        """ DeleteAll(self: IServerViewableItems) """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: IServerViewableItems, Index: object) -> object """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IShape: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Adjustments(self) -> Adjustments:
        """ Get: Adjustments(self: IShape) -> Adjustments """
        ...

    @property
    def AlternativeText(self) -> str:
        """
        Get: AlternativeText(self: IShape) -> str
        Set: AlternativeText(self: IShape) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IShape) -> Application """
        ...

    @property
    def AutoShapeType(self): # -> MsoAutoShapeType
        """
        Get: AutoShapeType(self: IShape) -> MsoAutoShapeType
        Set: AutoShapeType(self: IShape) = value
        """
        ...

    @property
    def BackgroundStyle(self): # -> MsoBackgroundStyleIndex
        """
        Get: BackgroundStyle(self: IShape) -> MsoBackgroundStyleIndex
        Set: BackgroundStyle(self: IShape) = value
        """
        ...

    @property
    def BlackWhiteMode(self): # -> MsoBlackWhiteMode
        """
        Get: BlackWhiteMode(self: IShape) -> MsoBlackWhiteMode
        Set: BlackWhiteMode(self: IShape) = value
        """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: IShape) -> Range """
        ...

    @property
    def Callout(self) -> CalloutFormat:
        """ Get: Callout(self: IShape) -> CalloutFormat """
        ...

    @property
    def CanvasItems(self) -> CanvasShapes:
        """ Get: CanvasItems(self: IShape) -> CanvasShapes """
        ...

    @property
    def Chart(self) -> Chart:
        """ Get: Chart(self: IShape) -> Chart """
        ...

    @property
    def Child(self): # -> MsoTriState
        """ Get: Child(self: IShape) -> MsoTriState """
        ...

    @property
    def ConnectionSiteCount(self) -> int:
        """ Get: ConnectionSiteCount(self: IShape) -> int """
        ...

    @property
    def Connector(self): # -> MsoTriState
        """ Get: Connector(self: IShape) -> MsoTriState """
        ...

    @property
    def ConnectorFormat(self) -> ConnectorFormat:
        """ Get: ConnectorFormat(self: IShape) -> ConnectorFormat """
        ...

    @property
    def ControlFormat(self) -> ControlFormat:
        """ Get: ControlFormat(self: IShape) -> ControlFormat """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IShape) -> XlCreator """
        ...

    @property
    def Diagram(self) -> Diagram:
        """ Get: Diagram(self: IShape) -> Diagram """
        ...

    @property
    def DiagramNode(self) -> DiagramNode:
        """ Get: DiagramNode(self: IShape) -> DiagramNode """
        ...

    @property
    def DrawingObject(self) -> object:
        """ Get: DrawingObject(self: IShape) -> object """
        ...

    @property
    def Fill(self) -> FillFormat:
        """ Get: Fill(self: IShape) -> FillFormat """
        ...

    @property
    def FormControlType(self) -> XlFormControl:
        """ Get: FormControlType(self: IShape) -> XlFormControl """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """ Get: Glow(self: IShape) -> GlowFormat """
        ...

    @property
    def GroupItems(self) -> GroupShapes:
        """ Get: GroupItems(self: IShape) -> GroupShapes """
        ...

    @property
    def HasChart(self): # -> MsoTriState
        """ Get: HasChart(self: IShape) -> MsoTriState """
        ...

    @property
    def HasDiagram(self): # -> MsoTriState
        """ Get: HasDiagram(self: IShape) -> MsoTriState """
        ...

    @property
    def HasDiagramNode(self): # -> MsoTriState
        """ Get: HasDiagramNode(self: IShape) -> MsoTriState """
        ...

    @property
    def HasSmartArt(self): # -> MsoTriState
        """ Get: HasSmartArt(self: IShape) -> MsoTriState """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: IShape) -> Single
        Set: Height(self: IShape) = value
        """
        ...

    @property
    def HorizontalFlip(self): # -> MsoTriState
        """ Get: HorizontalFlip(self: IShape) -> MsoTriState """
        ...

    @property
    def Hyperlink(self) -> Hyperlink:
        """ Get: Hyperlink(self: IShape) -> Hyperlink """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: IShape) -> int """
        ...

    @property
    def Left(self) -> Single:
        """
        Get: Left(self: IShape) -> Single
        Set: Left(self: IShape) = value
        """
        ...

    @property
    def Line(self) -> LineFormat:
        """ Get: Line(self: IShape) -> LineFormat """
        ...

    @property
    def LinkFormat(self) -> LinkFormat:
        """ Get: LinkFormat(self: IShape) -> LinkFormat """
        ...

    @property
    def LockAspectRatio(self): # -> MsoTriState
        """
        Get: LockAspectRatio(self: IShape) -> MsoTriState
        Set: LockAspectRatio(self: IShape) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IShape) -> bool
        Set: Locked(self: IShape) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IShape) -> str
        Set: Name(self: IShape) = value
        """
        ...

    @property
    def Nodes(self) -> ShapeNodes:
        """ Get: Nodes(self: IShape) -> ShapeNodes """
        ...

    @property
    def OLEFormat(self) -> OLEFormat:
        """ Get: OLEFormat(self: IShape) -> OLEFormat """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IShape) -> str
        Set: OnAction(self: IShape) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IShape) -> object """
        ...

    @property
    def ParentGroup(self) -> Shape:
        """ Get: ParentGroup(self: IShape) -> Shape """
        ...

    @property
    def PictureFormat(self) -> PictureFormat:
        """ Get: PictureFormat(self: IShape) -> PictureFormat """
        ...

    @property
    def Placement(self) -> XlPlacement:
        """
        Get: Placement(self: IShape) -> XlPlacement
        Set: Placement(self: IShape) = value
        """
        ...

    @property
    def Reflection(self) -> ReflectionFormat:
        """ Get: Reflection(self: IShape) -> ReflectionFormat """
        ...

    @property
    def Rotation(self) -> Single:
        """
        Get: Rotation(self: IShape) -> Single
        Set: Rotation(self: IShape) = value
        """
        ...

    @property
    def Script(self): # -> Script
        """ Get: Script(self: IShape) -> Script """
        ...

    @property
    def Shadow(self) -> ShadowFormat:
        """ Get: Shadow(self: IShape) -> ShadowFormat """
        ...

    @property
    def ShapeStyle(self): # -> MsoShapeStyleIndex
        """
        Get: ShapeStyle(self: IShape) -> MsoShapeStyleIndex
        Set: ShapeStyle(self: IShape) = value
        """
        ...

    @property
    def SmartArt(self): # -> SmartArt
        """ Get: SmartArt(self: IShape) -> SmartArt """
        ...

    @property
    def SoftEdge(self) -> SoftEdgeFormat:
        """ Get: SoftEdge(self: IShape) -> SoftEdgeFormat """
        ...

    @property
    def TextEffect(self) -> TextEffectFormat:
        """ Get: TextEffect(self: IShape) -> TextEffectFormat """
        ...

    @property
    def TextFrame(self) -> TextFrame:
        """ Get: TextFrame(self: IShape) -> TextFrame """
        ...

    @property
    def TextFrame2(self) -> TextFrame2:
        """ Get: TextFrame2(self: IShape) -> TextFrame2 """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """ Get: ThreeD(self: IShape) -> ThreeDFormat """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: IShape) -> str
        Set: Title(self: IShape) = value
        """
        ...

    @property
    def Top(self) -> Single:
        """
        Get: Top(self: IShape) -> Single
        Set: Top(self: IShape) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: IShape) -> Range """
        ...

    @property
    def Type(self): # -> MsoShapeType
        """ Get: Type(self: IShape) -> MsoShapeType """
        ...

    @property
    def VerticalFlip(self): # -> MsoTriState
        """ Get: VerticalFlip(self: IShape) -> MsoTriState """
        ...

    @property
    def Vertices(self) -> object:
        """ Get: Vertices(self: IShape) -> object """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: IShape) -> MsoTriState
        Set: Visible(self: IShape) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: IShape) -> Single
        Set: Width(self: IShape) = value
        """
        ...

    @property
    def ZOrderPosition(self) -> int:
        """ Get: ZOrderPosition(self: IShape) -> int """
        ...


    def Apply(self): # -> 
        """ Apply(self: IShape) """
        ...

    def CanvasCropBottom(self, Increment:Single): # -> 
        """ CanvasCropBottom(self: IShape, Increment: Single) """
        ...

    def CanvasCropLeft(self, Increment:Single): # -> 
        """ CanvasCropLeft(self: IShape, Increment: Single) """
        ...

    def CanvasCropRight(self, Increment:Single): # -> 
        """ CanvasCropRight(self: IShape, Increment: Single) """
        ...

    def CanvasCropTop(self, Increment:Single): # -> 
        """ CanvasCropTop(self: IShape, Increment: Single) """
        ...

    def Copy(self): # -> 
        """ Copy(self: IShape) """
        ...

    def CopyPicture(self, Appearance:object, Format:object): # -> 
        """ CopyPicture(self: IShape, Appearance: object, Format: object) """
        ...

    def Cut(self): # -> 
        """ Cut(self: IShape) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IShape) """
        ...

    def Duplicate(self) -> Shape:
        """ Duplicate(self: IShape) -> Shape """
        ...

    def Flip(self, FlipCmd): # ->  # Not found arg types: {'FlipCmd': 'MsoFlipCmd'}
        """ Flip(self: IShape, FlipCmd: MsoFlipCmd) """
        ...

    def IncrementLeft(self, Increment:Single): # -> 
        """ IncrementLeft(self: IShape, Increment: Single) """
        ...

    def IncrementRotation(self, Increment:Single): # -> 
        """ IncrementRotation(self: IShape, Increment: Single) """
        ...

    def IncrementTop(self, Increment:Single): # -> 
        """ IncrementTop(self: IShape, Increment: Single) """
        ...

    def PickUp(self): # -> 
        """ PickUp(self: IShape) """
        ...

    def RerouteConnections(self): # -> 
        """ RerouteConnections(self: IShape) """
        ...

    def ScaleHeight(self, Factor:Single, RelativeToOriginalSize, Scale:object): # ->  # Not found arg types: {'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleHeight(self: IShape, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        ...

    def ScaleWidth(self, Factor:Single, RelativeToOriginalSize, Scale:object): # ->  # Not found arg types: {'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleWidth(self: IShape, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: IShape, Replace: object) """
        ...

    def SetShapesDefaultProperties(self): # -> 
        """ SetShapesDefaultProperties(self: IShape) """
        ...

    def Ungroup(self) -> ShapeRange:
        """ Ungroup(self: IShape) -> ShapeRange """
        ...

    def ZOrder(self, ZOrderCmd): # ->  # Not found arg types: {'ZOrderCmd': 'MsoZOrderCmd'}
        """ ZOrder(self: IShape, ZOrderCmd: MsoZOrderCmd) """
        ...


class IShapeRange(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Adjustments(self) -> Adjustments:
        """ Get: Adjustments(self: IShapeRange) -> Adjustments """
        ...

    @property
    def AlternativeText(self) -> str:
        """
        Get: AlternativeText(self: IShapeRange) -> str
        Set: AlternativeText(self: IShapeRange) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IShapeRange) -> Application """
        ...

    @property
    def AutoShapeType(self): # -> MsoAutoShapeType
        """
        Get: AutoShapeType(self: IShapeRange) -> MsoAutoShapeType
        Set: AutoShapeType(self: IShapeRange) = value
        """
        ...

    @property
    def BackgroundStyle(self): # -> MsoBackgroundStyleIndex
        """
        Get: BackgroundStyle(self: IShapeRange) -> MsoBackgroundStyleIndex
        Set: BackgroundStyle(self: IShapeRange) = value
        """
        ...

    @property
    def BlackWhiteMode(self): # -> MsoBlackWhiteMode
        """
        Get: BlackWhiteMode(self: IShapeRange) -> MsoBlackWhiteMode
        Set: BlackWhiteMode(self: IShapeRange) = value
        """
        ...

    @property
    def Callout(self) -> CalloutFormat:
        """ Get: Callout(self: IShapeRange) -> CalloutFormat """
        ...

    @property
    def CanvasItems(self) -> CanvasShapes:
        """ Get: CanvasItems(self: IShapeRange) -> CanvasShapes """
        ...

    @property
    def Chart(self) -> Chart:
        """ Get: Chart(self: IShapeRange) -> Chart """
        ...

    @property
    def Child(self): # -> MsoTriState
        """ Get: Child(self: IShapeRange) -> MsoTriState """
        ...

    @property
    def ConnectionSiteCount(self) -> int:
        """ Get: ConnectionSiteCount(self: IShapeRange) -> int """
        ...

    @property
    def Connector(self): # -> MsoTriState
        """ Get: Connector(self: IShapeRange) -> MsoTriState """
        ...

    @property
    def ConnectorFormat(self) -> ConnectorFormat:
        """ Get: ConnectorFormat(self: IShapeRange) -> ConnectorFormat """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IShapeRange) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IShapeRange) -> XlCreator """
        ...

    @property
    def Diagram(self) -> Diagram:
        """ Get: Diagram(self: IShapeRange) -> Diagram """
        ...

    @property
    def DiagramNode(self) -> DiagramNode:
        """ Get: DiagramNode(self: IShapeRange) -> DiagramNode """
        ...

    @property
    def Fill(self) -> FillFormat:
        """ Get: Fill(self: IShapeRange) -> FillFormat """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """ Get: Glow(self: IShapeRange) -> GlowFormat """
        ...

    @property
    def GroupItems(self) -> GroupShapes:
        """ Get: GroupItems(self: IShapeRange) -> GroupShapes """
        ...

    @property
    def HasChart(self): # -> MsoTriState
        """ Get: HasChart(self: IShapeRange) -> MsoTriState """
        ...

    @property
    def HasDiagram(self): # -> MsoTriState
        """ Get: HasDiagram(self: IShapeRange) -> MsoTriState """
        ...

    @property
    def HasDiagramNode(self): # -> MsoTriState
        """ Get: HasDiagramNode(self: IShapeRange) -> MsoTriState """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: IShapeRange) -> Single
        Set: Height(self: IShapeRange) = value
        """
        ...

    @property
    def HorizontalFlip(self): # -> MsoTriState
        """ Get: HorizontalFlip(self: IShapeRange) -> MsoTriState """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: IShapeRange) -> int """
        ...

    @property
    def Left(self) -> Single:
        """
        Get: Left(self: IShapeRange) -> Single
        Set: Left(self: IShapeRange) = value
        """
        ...

    @property
    def Line(self) -> LineFormat:
        """ Get: Line(self: IShapeRange) -> LineFormat """
        ...

    @property
    def LockAspectRatio(self): # -> MsoTriState
        """
        Get: LockAspectRatio(self: IShapeRange) -> MsoTriState
        Set: LockAspectRatio(self: IShapeRange) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IShapeRange) -> str
        Set: Name(self: IShapeRange) = value
        """
        ...

    @property
    def Nodes(self) -> ShapeNodes:
        """ Get: Nodes(self: IShapeRange) -> ShapeNodes """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IShapeRange) -> object """
        ...

    @property
    def ParentGroup(self) -> Shape:
        """ Get: ParentGroup(self: IShapeRange) -> Shape """
        ...

    @property
    def PictureFormat(self) -> PictureFormat:
        """ Get: PictureFormat(self: IShapeRange) -> PictureFormat """
        ...

    @property
    def Reflection(self) -> ReflectionFormat:
        """ Get: Reflection(self: IShapeRange) -> ReflectionFormat """
        ...

    @property
    def Rotation(self) -> Single:
        """
        Get: Rotation(self: IShapeRange) -> Single
        Set: Rotation(self: IShapeRange) = value
        """
        ...

    @property
    def Shadow(self) -> ShadowFormat:
        """ Get: Shadow(self: IShapeRange) -> ShadowFormat """
        ...

    @property
    def ShapeStyle(self): # -> MsoShapeStyleIndex
        """
        Get: ShapeStyle(self: IShapeRange) -> MsoShapeStyleIndex
        Set: ShapeStyle(self: IShapeRange) = value
        """
        ...

    @property
    def SoftEdge(self) -> SoftEdgeFormat:
        """ Get: SoftEdge(self: IShapeRange) -> SoftEdgeFormat """
        ...

    @property
    def TextEffect(self) -> TextEffectFormat:
        """ Get: TextEffect(self: IShapeRange) -> TextEffectFormat """
        ...

    @property
    def TextFrame(self) -> TextFrame:
        """ Get: TextFrame(self: IShapeRange) -> TextFrame """
        ...

    @property
    def TextFrame2(self) -> TextFrame2:
        """ Get: TextFrame2(self: IShapeRange) -> TextFrame2 """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """ Get: ThreeD(self: IShapeRange) -> ThreeDFormat """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: IShapeRange) -> str
        Set: Title(self: IShapeRange) = value
        """
        ...

    @property
    def Top(self) -> Single:
        """
        Get: Top(self: IShapeRange) -> Single
        Set: Top(self: IShapeRange) = value
        """
        ...

    @property
    def Type(self): # -> MsoShapeType
        """ Get: Type(self: IShapeRange) -> MsoShapeType """
        ...

    @property
    def VerticalFlip(self): # -> MsoTriState
        """ Get: VerticalFlip(self: IShapeRange) -> MsoTriState """
        ...

    @property
    def Vertices(self) -> object:
        """ Get: Vertices(self: IShapeRange) -> object """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: IShapeRange) -> MsoTriState
        Set: Visible(self: IShapeRange) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: IShapeRange) -> Single
        Set: Width(self: IShapeRange) = value
        """
        ...

    @property
    def ZOrderPosition(self) -> int:
        """ Get: ZOrderPosition(self: IShapeRange) -> int """
        ...


    def Align(self, AlignCmd, RelativeTo): # ->  # Not found arg types: {'RelativeTo': 'MsoTriState', 'AlignCmd': 'MsoAlignCmd'}
        """ Align(self: IShapeRange, AlignCmd: MsoAlignCmd, RelativeTo: MsoTriState) """
        ...

    def Apply(self): # -> 
        """ Apply(self: IShapeRange) """
        ...

    def CanvasCropBottom(self, Increment:Single): # -> 
        """ CanvasCropBottom(self: IShapeRange, Increment: Single) """
        ...

    def CanvasCropLeft(self, Increment:Single): # -> 
        """ CanvasCropLeft(self: IShapeRange, Increment: Single) """
        ...

    def CanvasCropRight(self, Increment:Single): # -> 
        """ CanvasCropRight(self: IShapeRange, Increment: Single) """
        ...

    def CanvasCropTop(self, Increment:Single): # -> 
        """ CanvasCropTop(self: IShapeRange, Increment: Single) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IShapeRange) """
        ...

    def Distribute(self, DistributeCmd, RelativeTo): # ->  # Not found arg types: {'DistributeCmd': 'MsoDistributeCmd', 'RelativeTo': 'MsoTriState'}
        """ Distribute(self: IShapeRange, DistributeCmd: MsoDistributeCmd, RelativeTo: MsoTriState) """
        ...

    def Duplicate(self) -> ShapeRange:
        """ Duplicate(self: IShapeRange) -> ShapeRange """
        ...

    def Flip(self, FlipCmd): # ->  # Not found arg types: {'FlipCmd': 'MsoFlipCmd'}
        """ Flip(self: IShapeRange, FlipCmd: MsoFlipCmd) """
        ...

    def Group(self) -> Shape:
        """ Group(self: IShapeRange) -> Shape """
        ...

    def IncrementLeft(self, Increment:Single): # -> 
        """ IncrementLeft(self: IShapeRange, Increment: Single) """
        ...

    def IncrementRotation(self, Increment:Single): # -> 
        """ IncrementRotation(self: IShapeRange, Increment: Single) """
        ...

    def IncrementTop(self, Increment:Single): # -> 
        """ IncrementTop(self: IShapeRange, Increment: Single) """
        ...

    def Item(self, Index:object) -> Shape:
        """ Item(self: IShapeRange, Index: object) -> Shape """
        ...

    def PickUp(self): # -> 
        """ PickUp(self: IShapeRange) """
        ...

    def Regroup(self) -> Shape:
        """ Regroup(self: IShapeRange) -> Shape """
        ...

    def RerouteConnections(self): # -> 
        """ RerouteConnections(self: IShapeRange) """
        ...

    def ScaleHeight(self, Factor:Single, RelativeToOriginalSize, Scale:object): # ->  # Not found arg types: {'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleHeight(self: IShapeRange, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        ...

    def ScaleWidth(self, Factor:Single, RelativeToOriginalSize, Scale:object): # ->  # Not found arg types: {'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleWidth(self: IShapeRange, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: IShapeRange, Replace: object) """
        ...

    def SetShapesDefaultProperties(self): # -> 
        """ SetShapesDefaultProperties(self: IShapeRange) """
        ...

    def Ungroup(self) -> ShapeRange:
        """ Ungroup(self: IShapeRange) -> ShapeRange """
        ...

    def ZOrder(self, ZOrderCmd): # ->  # Not found arg types: {'ZOrderCmd': 'MsoZOrderCmd'}
        """ ZOrder(self: IShapeRange, ZOrderCmd: MsoZOrderCmd) """
        ...

    def _Default(self, Index:object) -> Shape:
        """ _Default(self: IShapeRange, Index: object) -> Shape """
        ...


class IShapes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IShapes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IShapes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IShapes) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IShapes) -> object """
        ...


    def AddCallout(self, Type, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Type': 'MsoCalloutType'}
        """ AddCallout(self: IShapes, Type: MsoCalloutType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddCanvas(self, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape:
        """ AddCanvas(self: IShapes, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddChart(self, XlChartType:object, Left:object, Top:object, Width:object, Height:object) -> Shape:
        """ AddChart(self: IShapes, XlChartType: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        ...

    def AddChart2(self, Style:object, XlChartType:object, Left:object, Top:object, Width:object, Height:object, NewLayout:object) -> Shape:
        """ AddChart2(self: IShapes, Style: object, XlChartType: object, Left: object, Top: object, Width: object, Height: object, NewLayout: object) -> Shape """
        ...

    def AddConnector(self, Type, BeginX:Single, BeginY:Single, EndX:Single, EndY:Single) -> Shape: # Not found arg types: {'Type': 'MsoConnectorType'}
        """ AddConnector(self: IShapes, Type: MsoConnectorType, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single) -> Shape """
        ...

    def AddCurve(self, SafeArrayOfPoints:object) -> Shape:
        """ AddCurve(self: IShapes, SafeArrayOfPoints: object) -> Shape """
        ...

    def AddDiagram(self, Type, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Type': 'MsoDiagramType'}
        """ AddDiagram(self: IShapes, Type: MsoDiagramType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddFormControl(self, Type:XlFormControl, Left:int, Top:int, Width:int, Height:int) -> Shape:
        """ AddFormControl(self: IShapes, Type: XlFormControl, Left: int, Top: int, Width: int, Height: int) -> Shape """
        ...

    def AddLabel(self, Orientation, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Orientation': 'MsoTextOrientation'}
        """ AddLabel(self: IShapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddLine(self, BeginX:Single, BeginY:Single, EndX:Single, EndY:Single) -> Shape:
        """ AddLine(self: IShapes, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single) -> Shape """
        ...

    def AddOLEObject(self, ClassType:object, Filename:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object, Left:object, Top:object, Width:object, Height:object) -> Shape:
        """ AddOLEObject(self: IShapes, ClassType: object, Filename: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        ...

    def AddPicture(self, Filename:str, LinkToFile, SaveWithDocument, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'LinkToFile': 'MsoTriState', 'SaveWithDocument': 'MsoTriState'}
        """ AddPicture(self: IShapes, Filename: str, LinkToFile: MsoTriState, SaveWithDocument: MsoTriState, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddPicture2(self, Filename:str, LinkToFile, SaveWithDocument, Left:Single, Top:Single, Width:Single, Height:Single, Compress) -> Shape: # Not found arg types: {'LinkToFile': 'MsoTriState', 'Compress': 'MsoPictureCompress', 'SaveWithDocument': 'MsoTriState'}
        """ AddPicture2(self: IShapes, Filename: str, LinkToFile: MsoTriState, SaveWithDocument: MsoTriState, Left: Single, Top: Single, Width: Single, Height: Single, Compress: MsoPictureCompress) -> Shape """
        ...

    def AddPolyline(self, SafeArrayOfPoints:object) -> Shape:
        """ AddPolyline(self: IShapes, SafeArrayOfPoints: object) -> Shape """
        ...

    def AddShape(self, Type, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Type': 'MsoAutoShapeType'}
        """ AddShape(self: IShapes, Type: MsoAutoShapeType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddSmartArt(self, Layout, Left:object, Top:object, Width:object, Height:object) -> Shape: # Not found arg types: {'Layout': 'SmartArtLayout'}
        """ AddSmartArt(self: IShapes, Layout: SmartArtLayout, Left: object, Top: object, Width: object, Height: object) -> Shape """
        ...

    def AddTextbox(self, Orientation, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Orientation': 'MsoTextOrientation'}
        """ AddTextbox(self: IShapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddTextEffect(self, PresetTextEffect, Text:str, FontName:str, FontSize:Single, FontBold, FontItalic, Left:Single, Top:Single) -> Shape: # Not found arg types: {'FontItalic': 'MsoTriState', 'FontBold': 'MsoTriState', 'PresetTextEffect': 'MsoPresetTextEffect'}
        """ AddTextEffect(self: IShapes, PresetTextEffect: MsoPresetTextEffect, Text: str, FontName: str, FontSize: Single, FontBold: MsoTriState, FontItalic: MsoTriState, Left: Single, Top: Single) -> Shape """
        ...

    def BuildFreeform(self, EditingType, X1:Single, Y1:Single) -> FreeformBuilder: # Not found arg types: {'EditingType': 'MsoEditingType'}
        """ BuildFreeform(self: IShapes, EditingType: MsoEditingType, X1: Single, Y1: Single) -> FreeformBuilder """
        ...

    def Item(self, Index:object) -> Shape:
        """ Item(self: IShapes, Index: object) -> Shape """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: IShapes) """
        ...

    def _Default(self, Index:object) -> Shape:
        """ _Default(self: IShapes, Index: object) -> Shape """
        ...


class ISheetViews(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISheetViews) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISheetViews) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISheetViews) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISheetViews) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISlicer: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveItem(self) -> SlicerItem:
        """ Get: ActiveItem(self: ISlicer) -> SlicerItem """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISlicer) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ISlicer) -> str
        Set: Caption(self: ISlicer) = value
        """
        ...

    @property
    def ColumnWidth(self) -> float:
        """
        Get: ColumnWidth(self: ISlicer) -> float
        Set: ColumnWidth(self: ISlicer) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISlicer) -> XlCreator """
        ...

    @property
    def DisableMoveResizeUI(self) -> bool:
        """
        Get: DisableMoveResizeUI(self: ISlicer) -> bool
        Set: DisableMoveResizeUI(self: ISlicer) = value
        """
        ...

    @property
    def DisplayHeader(self) -> bool:
        """
        Get: DisplayHeader(self: ISlicer) -> bool
        Set: DisplayHeader(self: ISlicer) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ISlicer) -> float
        Set: Height(self: ISlicer) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ISlicer) -> float
        Set: Left(self: ISlicer) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ISlicer) -> bool
        Set: Locked(self: ISlicer) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ISlicer) -> str
        Set: Name(self: ISlicer) = value
        """
        ...

    @property
    def NumberOfColumns(self) -> int:
        """
        Get: NumberOfColumns(self: ISlicer) -> int
        Set: NumberOfColumns(self: ISlicer) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISlicer) -> object """
        ...

    @property
    def RowHeight(self) -> float:
        """
        Get: RowHeight(self: ISlicer) -> float
        Set: RowHeight(self: ISlicer) = value
        """
        ...

    @property
    def Shape(self) -> Shape:
        """ Get: Shape(self: ISlicer) -> Shape """
        ...

    @property
    def SlicerCache(self) -> SlicerCache:
        """ Get: SlicerCache(self: ISlicer) -> SlicerCache """
        ...

    @property
    def SlicerCacheLevel(self) -> SlicerCacheLevel:
        """ Get: SlicerCacheLevel(self: ISlicer) -> SlicerCacheLevel """
        ...

    @property
    def SlicerCacheType(self) -> XlSlicerCacheType:
        """ Get: SlicerCacheType(self: ISlicer) -> XlSlicerCacheType """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: ISlicer) -> object
        Set: Style(self: ISlicer) = value
        """
        ...

    @property
    def TimelineViewState(self) -> TimelineViewState:
        """ Get: TimelineViewState(self: ISlicer) -> TimelineViewState """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ISlicer) -> float
        Set: Top(self: ISlicer) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ISlicer) -> float
        Set: Width(self: ISlicer) = value
        """
        ...


    def Copy(self): # -> 
        """ Copy(self: ISlicer) """
        ...

    def Cut(self): # -> 
        """ Cut(self: ISlicer) """
        ...

    def Delete(self): # -> 
        """ Delete(self: ISlicer) """
        ...


class ISlicerCache: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISlicerCache) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISlicerCache) -> XlCreator """
        ...

    @property
    def CrossFilterType(self) -> XlSlicerCrossFilterType:
        """
        Get: CrossFilterType(self: ISlicerCache) -> XlSlicerCrossFilterType
        Set: CrossFilterType(self: ISlicerCache) = value
        """
        ...

    @property
    def FilterCleared(self) -> bool:
        """ Get: FilterCleared(self: ISlicerCache) -> bool """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ISlicerCache) -> int """
        ...

    @property
    def List(self) -> bool:
        """ Get: List(self: ISlicerCache) -> bool """
        ...

    @property
    def ListObject(self) -> ListObject:
        """ Get: ListObject(self: ISlicerCache) -> ListObject """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ISlicerCache) -> str
        Set: Name(self: ISlicerCache) = value
        """
        ...

    @property
    def OLAP(self) -> bool:
        """ Get: OLAP(self: ISlicerCache) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISlicerCache) -> object """
        ...

    @property
    def PivotTables(self) -> SlicerPivotTables:
        """ Get: PivotTables(self: ISlicerCache) -> SlicerPivotTables """
        ...

    @property
    def RequireManualUpdate(self) -> bool:
        """
        Get: RequireManualUpdate(self: ISlicerCache) -> bool
        Set: RequireManualUpdate(self: ISlicerCache) = value
        """
        ...

    @property
    def ShowAllItems(self) -> bool:
        """
        Get: ShowAllItems(self: ISlicerCache) -> bool
        Set: ShowAllItems(self: ISlicerCache) = value
        """
        ...

    @property
    def SlicerCacheLevels(self) -> SlicerCacheLevels:
        """ Get: SlicerCacheLevels(self: ISlicerCache) -> SlicerCacheLevels """
        ...

    @property
    def SlicerCacheType(self) -> XlSlicerCacheType:
        """ Get: SlicerCacheType(self: ISlicerCache) -> XlSlicerCacheType """
        ...

    @property
    def SlicerItems(self) -> SlicerItems:
        """ Get: SlicerItems(self: ISlicerCache) -> SlicerItems """
        ...

    @property
    def Slicers(self) -> Slicers:
        """ Get: Slicers(self: ISlicerCache) -> Slicers """
        ...

    @property
    def SortItems(self) -> XlSlicerSort:
        """
        Get: SortItems(self: ISlicerCache) -> XlSlicerSort
        Set: SortItems(self: ISlicerCache) = value
        """
        ...

    @property
    def SortUsingCustomLists(self) -> bool:
        """
        Get: SortUsingCustomLists(self: ISlicerCache) -> bool
        Set: SortUsingCustomLists(self: ISlicerCache) = value
        """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: ISlicerCache) -> str """
        ...

    @property
    def SourceType(self) -> XlPivotTableSourceType:
        """ Get: SourceType(self: ISlicerCache) -> XlPivotTableSourceType """
        ...

    @property
    def TimelineState(self) -> TimelineState:
        """ Get: TimelineState(self: ISlicerCache) -> TimelineState """
        ...

    @property
    def VisibleSlicerItems(self) -> SlicerItems:
        """ Get: VisibleSlicerItems(self: ISlicerCache) -> SlicerItems """
        ...

    @property
    def VisibleSlicerItemsList(self) -> object:
        """
        Get: VisibleSlicerItemsList(self: ISlicerCache) -> object
        Set: VisibleSlicerItemsList(self: ISlicerCache) = value
        """
        ...

    @property
    def WorkbookConnection(self) -> WorkbookConnection:
        """ Get: WorkbookConnection(self: ISlicerCache) -> WorkbookConnection """
        ...


    def ClearAllFilters(self): # -> 
        """ ClearAllFilters(self: ISlicerCache) """
        ...

    def ClearDateFilter(self): # -> 
        """ ClearDateFilter(self: ISlicerCache) """
        ...

    def ClearManualFilter(self): # -> 
        """ ClearManualFilter(self: ISlicerCache) """
        ...

    def Delete(self): # -> 
        """ Delete(self: ISlicerCache) """
        ...


class ISlicerCacheLevel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISlicerCacheLevel) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISlicerCacheLevel) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISlicerCacheLevel) -> XlCreator """
        ...

    @property
    def CrossFilterType(self) -> XlSlicerCrossFilterType:
        """
        Get: CrossFilterType(self: ISlicerCacheLevel) -> XlSlicerCrossFilterType
        Set: CrossFilterType(self: ISlicerCacheLevel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ISlicerCacheLevel) -> str """
        ...

    @property
    def Ordinal(self) -> int:
        """ Get: Ordinal(self: ISlicerCacheLevel) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISlicerCacheLevel) -> object """
        ...

    @property
    def SlicerItems(self) -> SlicerItems:
        """ Get: SlicerItems(self: ISlicerCacheLevel) -> SlicerItems """
        ...

    @property
    def SortItems(self) -> XlSlicerSort:
        """
        Get: SortItems(self: ISlicerCacheLevel) -> XlSlicerSort
        Set: SortItems(self: ISlicerCacheLevel) = value
        """
        ...

    @property
    def VisibleSlicerItemsList(self) -> object:
        """ Get: VisibleSlicerItemsList(self: ISlicerCacheLevel) -> object """
        ...



class ISlicerCacheLevels(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISlicerCacheLevels) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISlicerCacheLevels) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISlicerCacheLevels) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISlicerCacheLevels) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISlicerCaches(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISlicerCaches) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISlicerCaches) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISlicerCaches) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISlicerCaches) -> object """
        ...


    def Add(self, Source:object, SourceField:object, Name:object) -> SlicerCache:
        """ Add(self: ISlicerCaches, Source: object, SourceField: object, Name: object) -> SlicerCache """
        ...

    def Add2(self, Source:object, SourceField:object, Name:object, SlicerCacheType:object) -> SlicerCache:
        """ Add2(self: ISlicerCaches, Source: object, SourceField: object, Name: object, SlicerCacheType: object) -> SlicerCache """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISlicerItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISlicerItem) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """ Get: Caption(self: ISlicerItem) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISlicerItem) -> XlCreator """
        ...

    @property
    def HasData(self) -> bool:
        """ Get: HasData(self: ISlicerItem) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ISlicerItem) -> str """
        ...

    @property
    def Parent(self) -> SlicerCache:
        """ Get: Parent(self: ISlicerItem) -> SlicerCache """
        ...

    @property
    def Selected(self) -> bool:
        """
        Get: Selected(self: ISlicerItem) -> bool
        Set: Selected(self: ISlicerItem) = value
        """
        ...

    @property
    def SourceName(self) -> object:
        """ Get: SourceName(self: ISlicerItem) -> object """
        ...

    @property
    def SourceNameStandard(self) -> str:
        """ Get: SourceNameStandard(self: ISlicerItem) -> str """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: ISlicerItem) -> str """
        ...



class ISlicerItems(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISlicerItems) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISlicerItems) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISlicerItems) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISlicerItems) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISlicerPivotTables(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISlicerPivotTables) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISlicerPivotTables) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISlicerPivotTables) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISlicerPivotTables) -> object """
        ...


    def AddPivotTable(self, PivotTable:PivotTable): # -> 
        """ AddPivotTable(self: ISlicerPivotTables, PivotTable: PivotTable) """
        ...

    def RemovePivotTable(self, PivotTable:object): # -> 
        """ RemovePivotTable(self: ISlicerPivotTables, PivotTable: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISlicers(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISlicers) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISlicers) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISlicers) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISlicers) -> object """
        ...


    def Add(self, SlicerDestination:object, Level:object, Name:object, Caption:object, Top:object, Left:object, Width:object, Height:object) -> Slicer:
        """ Add(self: ISlicers, SlicerDestination: object, Level: object, Name: object, Caption: object, Top: object, Left: object, Width: object, Height: object) -> Slicer """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISmartTag: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISmartTag) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISmartTag) -> XlCreator """
        ...

    @property
    def DownloadURL(self) -> str:
        """ Get: DownloadURL(self: ISmartTag) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ISmartTag) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISmartTag) -> object """
        ...

    @property
    def Properties(self) -> CustomProperties:
        """ Get: Properties(self: ISmartTag) -> CustomProperties """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: ISmartTag) -> Range """
        ...

    @property
    def SmartTagActions(self) -> SmartTagActions:
        """ Get: SmartTagActions(self: ISmartTag) -> SmartTagActions """
        ...

    @property
    def XML(self) -> str:
        """ Get: XML(self: ISmartTag) -> str """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: ISmartTag) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: ISmartTag) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISmartTagAction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveXControl(self) -> object:
        """ Get: ActiveXControl(self: ISmartTagAction) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISmartTagAction) -> Application """
        ...

    @property
    def CheckboxState(self) -> bool:
        """
        Get: CheckboxState(self: ISmartTagAction) -> bool
        Set: CheckboxState(self: ISmartTagAction) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISmartTagAction) -> XlCreator """
        ...

    @property
    def ExpandHelp(self) -> bool:
        """
        Get: ExpandHelp(self: ISmartTagAction) -> bool
        Set: ExpandHelp(self: ISmartTagAction) = value
        """
        ...

    @property
    def ListSelection(self) -> int:
        """
        Get: ListSelection(self: ISmartTagAction) -> int
        Set: ListSelection(self: ISmartTagAction) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ISmartTagAction) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISmartTagAction) -> object """
        ...

    @property
    def PresentInPane(self) -> bool:
        """ Get: PresentInPane(self: ISmartTagAction) -> bool """
        ...

    @property
    def RadioGroupSelection(self) -> int:
        """
        Get: RadioGroupSelection(self: ISmartTagAction) -> int
        Set: RadioGroupSelection(self: ISmartTagAction) = value
        """
        ...

    @property
    def TextboxText(self) -> str:
        """
        Get: TextboxText(self: ISmartTagAction) -> str
        Set: TextboxText(self: ISmartTagAction) = value
        """
        ...

    @property
    def Type(self) -> XlSmartTagControlType:
        """ Get: Type(self: ISmartTagAction) -> XlSmartTagControlType """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: ISmartTagAction) -> str """
        ...


    def Execute(self): # -> 
        """ Execute(self: ISmartTagAction) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISmartTagActions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISmartTagActions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISmartTagActions) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISmartTagActions) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISmartTagActions) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISmartTagOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISmartTagOptions) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISmartTagOptions) -> XlCreator """
        ...

    @property
    def DisplaySmartTags(self) -> XlSmartTagDisplayMode:
        """
        Get: DisplaySmartTags(self: ISmartTagOptions) -> XlSmartTagDisplayMode
        Set: DisplaySmartTags(self: ISmartTagOptions) = value
        """
        ...

    @property
    def EmbedSmartTags(self) -> bool:
        """
        Get: EmbedSmartTags(self: ISmartTagOptions) -> bool
        Set: EmbedSmartTags(self: ISmartTagOptions) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISmartTagOptions) -> object """
        ...



class ISmartTagRecognizer: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISmartTagRecognizer) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISmartTagRecognizer) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ISmartTagRecognizer) -> bool
        Set: Enabled(self: ISmartTagRecognizer) = value
        """
        ...

    @property
    def FullName(self) -> str:
        """ Get: FullName(self: ISmartTagRecognizer) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISmartTagRecognizer) -> object """
        ...

    @property
    def progID(self) -> str:
        """ Get: progID(self: ISmartTagRecognizer) -> str """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: ISmartTagRecognizer) -> str """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISmartTagRecognizers(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISmartTagRecognizers) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISmartTagRecognizers) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISmartTagRecognizers) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISmartTagRecognizers) -> object """
        ...

    @property
    def Recognize(self) -> bool:
        """
        Get: Recognize(self: ISmartTagRecognizers) -> bool
        Set: Recognize(self: ISmartTagRecognizers) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISmartTags(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISmartTags) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISmartTags) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISmartTags) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISmartTags) -> object """
        ...


    def Add(self, SmartTagType:str) -> SmartTag:
        """ Add(self: ISmartTags, SmartTagType: str) -> SmartTag """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISort: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISort) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISort) -> XlCreator """
        ...

    @property
    def Header(self) -> XlYesNoGuess:
        """
        Get: Header(self: ISort) -> XlYesNoGuess
        Set: Header(self: ISort) = value
        """
        ...

    @property
    def MatchCase(self) -> bool:
        """
        Get: MatchCase(self: ISort) -> bool
        Set: MatchCase(self: ISort) = value
        """
        ...

    @property
    def Orientation(self) -> XlSortOrientation:
        """
        Get: Orientation(self: ISort) -> XlSortOrientation
        Set: Orientation(self: ISort) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISort) -> object """
        ...

    @property
    def Rng(self) -> Range:
        """ Get: Rng(self: ISort) -> Range """
        ...

    @property
    def SortFields(self) -> SortFields:
        """ Get: SortFields(self: ISort) -> SortFields """
        ...

    @property
    def SortMethod(self) -> XlSortMethod:
        """
        Get: SortMethod(self: ISort) -> XlSortMethod
        Set: SortMethod(self: ISort) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: ISort) """
        ...

    def SetRange(self, Rng:Range): # -> 
        """ SetRange(self: ISort, Rng: Range) """
        ...


class ISortField: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISortField) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISortField) -> XlCreator """
        ...

    @property
    def CustomOrder(self) -> object:
        """
        Get: CustomOrder(self: ISortField) -> object
        Set: CustomOrder(self: ISortField) = value
        """
        ...

    @property
    def DataOption(self) -> XlSortDataOption:
        """
        Get: DataOption(self: ISortField) -> XlSortDataOption
        Set: DataOption(self: ISortField) = value
        """
        ...

    @property
    def Key(self) -> Range:
        """ Get: Key(self: ISortField) -> Range """
        ...

    @property
    def Order(self) -> XlSortOrder:
        """
        Get: Order(self: ISortField) -> XlSortOrder
        Set: Order(self: ISortField) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISortField) -> object """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: ISortField) -> int
        Set: Priority(self: ISortField) = value
        """
        ...

    @property
    def SortOn(self) -> XlSortOn:
        """
        Get: SortOn(self: ISortField) -> XlSortOn
        Set: SortOn(self: ISortField) = value
        """
        ...

    @property
    def SortOnValue(self) -> object:
        """ Get: SortOnValue(self: ISortField) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: ISortField) """
        ...

    def ModifyKey(self, Key:Range): # -> 
        """ ModifyKey(self: ISortField, Key: Range) """
        ...

    def SetIcon(self, Icon:Icon): # -> 
        """ SetIcon(self: ISortField, Icon: Icon) """
        ...


class ISortFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISortFields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISortFields) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISortFields) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISortFields) -> object """
        ...


    def Add(self, Key:Range, SortOn:object, Order:object, CustomOrder:object, DataOption:object) -> SortField:
        """ Add(self: ISortFields, Key: Range, SortOn: object, Order: object, CustomOrder: object, DataOption: object) -> SortField """
        ...

    def Clear(self): # -> 
        """ Clear(self: ISortFields) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISoundNote: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISoundNote) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISoundNote) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISoundNote) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: ISoundNote) -> object """
        ...

    def Import(self, Filename:str) -> object:
        """ Import(self: ISoundNote, Filename: str) -> object """
        ...

    def Play(self) -> object:
        """ Play(self: ISoundNote) -> object """
        ...

    def Record(self) -> object:
        """ Record(self: ISoundNote) -> object """
        ...


class ISparkAxes: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISparkAxes) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISparkAxes) -> XlCreator """
        ...

    @property
    def Horizontal(self) -> SparkHorizontalAxis:
        """ Get: Horizontal(self: ISparkAxes) -> SparkHorizontalAxis """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISparkAxes) -> object """
        ...

    @property
    def Vertical(self) -> SparkVerticalAxis:
        """ Get: Vertical(self: ISparkAxes) -> SparkVerticalAxis """
        ...



class ISparkColor: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISparkColor) -> Application """
        ...

    @property
    def Color(self) -> FormatColor:
        """ Get: Color(self: ISparkColor) -> FormatColor """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISparkColor) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISparkColor) -> object """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ISparkColor) -> bool
        Set: Visible(self: ISparkColor) = value
        """
        ...



class ISparkHorizontalAxis: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISparkHorizontalAxis) -> Application """
        ...

    @property
    def Axis(self) -> SparkColor:
        """ Get: Axis(self: ISparkHorizontalAxis) -> SparkColor """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISparkHorizontalAxis) -> XlCreator """
        ...

    @property
    def IsDateAxis(self) -> bool:
        """ Get: IsDateAxis(self: ISparkHorizontalAxis) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISparkHorizontalAxis) -> object """
        ...

    @property
    def RightToLeftPlotOrder(self) -> bool:
        """
        Get: RightToLeftPlotOrder(self: ISparkHorizontalAxis) -> bool
        Set: RightToLeftPlotOrder(self: ISparkHorizontalAxis) = value
        """
        ...



class ISparkline: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISparkline) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISparkline) -> XlCreator """
        ...

    @property
    def Location(self) -> Range:
        """
        Get: Location(self: ISparkline) -> Range
        Set: Location(self: ISparkline) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISparkline) -> object """
        ...

    @property
    def SourceData(self) -> str:
        """
        Get: SourceData(self: ISparkline) -> str
        Set: SourceData(self: ISparkline) = value
        """
        ...


    def ModifyLocation(self, Range:Range): # -> 
        """ ModifyLocation(self: ISparkline, Range: Range) """
        ...

    def ModifySourceData(self, Formula:str): # -> 
        """ ModifySourceData(self: ISparkline, Formula: str) """
        ...


class ISparklineGroup(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISparklineGroup) -> Application """
        ...

    @property
    def Axes(self) -> SparkAxes:
        """ Get: Axes(self: ISparklineGroup) -> SparkAxes """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISparklineGroup) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISparklineGroup) -> XlCreator """
        ...

    @property
    def DateRange(self) -> str:
        """
        Get: DateRange(self: ISparklineGroup) -> str
        Set: DateRange(self: ISparklineGroup) = value
        """
        ...

    @property
    def DisplayBlanksAs(self) -> XlDisplayBlanksAs:
        """
        Get: DisplayBlanksAs(self: ISparklineGroup) -> XlDisplayBlanksAs
        Set: DisplayBlanksAs(self: ISparklineGroup) = value
        """
        ...

    @property
    def DisplayHidden(self) -> bool:
        """
        Get: DisplayHidden(self: ISparklineGroup) -> bool
        Set: DisplayHidden(self: ISparklineGroup) = value
        """
        ...

    @property
    def LineWeight(self) -> object:
        """
        Get: LineWeight(self: ISparklineGroup) -> object
        Set: LineWeight(self: ISparklineGroup) = value
        """
        ...

    @property
    def Location(self) -> Range:
        """
        Get: Location(self: ISparklineGroup) -> Range
        Set: Location(self: ISparklineGroup) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISparklineGroup) -> object """
        ...

    @property
    def PlotBy(self) -> XlSparklineRowCol:
        """
        Get: PlotBy(self: ISparklineGroup) -> XlSparklineRowCol
        Set: PlotBy(self: ISparklineGroup) = value
        """
        ...

    @property
    def Points(self) -> SparkPoints:
        """ Get: Points(self: ISparklineGroup) -> SparkPoints """
        ...

    @property
    def SeriesColor(self) -> FormatColor:
        """ Get: SeriesColor(self: ISparklineGroup) -> FormatColor """
        ...

    @property
    def SourceData(self) -> str:
        """
        Get: SourceData(self: ISparklineGroup) -> str
        Set: SourceData(self: ISparklineGroup) = value
        """
        ...

    @property
    def Type(self) -> XlSparkType:
        """
        Get: Type(self: ISparklineGroup) -> XlSparkType
        Set: Type(self: ISparklineGroup) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: ISparklineGroup) """
        ...

    def Modify(self, Location:Range, SourceData:str): # -> 
        """ Modify(self: ISparklineGroup, Location: Range, SourceData: str) """
        ...

    def ModifyDateRange(self, DateRange:str): # -> 
        """ ModifyDateRange(self: ISparklineGroup, DateRange: str) """
        ...

    def ModifyLocation(self, Location:Range): # -> 
        """ ModifyLocation(self: ISparklineGroup, Location: Range) """
        ...

    def ModifySourceData(self, SourceData:str): # -> 
        """ ModifySourceData(self: ISparklineGroup, SourceData: str) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISparklineGroups(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISparklineGroups) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISparklineGroups) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISparklineGroups) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISparklineGroups) -> object """
        ...


    def Add(self, Type:XlSparkType, SourceData:str) -> SparklineGroup:
        """ Add(self: ISparklineGroups, Type: XlSparkType, SourceData: str) -> SparklineGroup """
        ...

    def Clear(self): # -> 
        """ Clear(self: ISparklineGroups) """
        ...

    def ClearGroups(self): # -> 
        """ ClearGroups(self: ISparklineGroups) """
        ...

    def Group(self, Location:Range): # -> 
        """ Group(self: ISparklineGroups, Location: Range) """
        ...

    def Ungroup(self): # -> 
        """ Ungroup(self: ISparklineGroups) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ISparkPoints: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISparkPoints) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISparkPoints) -> XlCreator """
        ...

    @property
    def Firstpoint(self) -> SparkColor:
        """ Get: Firstpoint(self: ISparkPoints) -> SparkColor """
        ...

    @property
    def Highpoint(self) -> SparkColor:
        """ Get: Highpoint(self: ISparkPoints) -> SparkColor """
        ...

    @property
    def Lastpoint(self) -> SparkColor:
        """ Get: Lastpoint(self: ISparkPoints) -> SparkColor """
        ...

    @property
    def Lowpoint(self) -> SparkColor:
        """ Get: Lowpoint(self: ISparkPoints) -> SparkColor """
        ...

    @property
    def Markers(self) -> SparkColor:
        """ Get: Markers(self: ISparkPoints) -> SparkColor """
        ...

    @property
    def Negative(self) -> SparkColor:
        """ Get: Negative(self: ISparkPoints) -> SparkColor """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISparkPoints) -> object """
        ...



class ISparkVerticalAxis: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISparkVerticalAxis) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISparkVerticalAxis) -> XlCreator """
        ...

    @property
    def CustomMaxScaleValue(self) -> object:
        """
        Get: CustomMaxScaleValue(self: ISparkVerticalAxis) -> object
        Set: CustomMaxScaleValue(self: ISparkVerticalAxis) = value
        """
        ...

    @property
    def CustomMinScaleValue(self) -> object:
        """
        Get: CustomMinScaleValue(self: ISparkVerticalAxis) -> object
        Set: CustomMinScaleValue(self: ISparkVerticalAxis) = value
        """
        ...

    @property
    def MaxScaleType(self) -> XlSparkScale:
        """
        Get: MaxScaleType(self: ISparkVerticalAxis) -> XlSparkScale
        Set: MaxScaleType(self: ISparkVerticalAxis) = value
        """
        ...

    @property
    def MinScaleType(self) -> XlSparkScale:
        """
        Get: MinScaleType(self: ISparkVerticalAxis) -> XlSparkScale
        Set: MinScaleType(self: ISparkVerticalAxis) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISparkVerticalAxis) -> object """
        ...



class ISpeech: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Direction(self) -> XlSpeakDirection:
        """
        Get: Direction(self: ISpeech) -> XlSpeakDirection
        Set: Direction(self: ISpeech) = value
        """
        ...

    @property
    def SpeakCellOnEnter(self) -> bool:
        """
        Get: SpeakCellOnEnter(self: ISpeech) -> bool
        Set: SpeakCellOnEnter(self: ISpeech) = value
        """
        ...


    def Speak(self, Text:str, SpeakAsync:object, SpeakXML:object, Purge:object): # -> 
        """ Speak(self: ISpeech, Text: str, SpeakAsync: object, SpeakXML: object, Purge: object) """
        ...


class ISpellingOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ArabicModes(self) -> XlArabicModes:
        """
        Get: ArabicModes(self: ISpellingOptions) -> XlArabicModes
        Set: ArabicModes(self: ISpellingOptions) = value
        """
        ...

    @property
    def ArabicStrictAlefHamza(self) -> bool:
        """
        Get: ArabicStrictAlefHamza(self: ISpellingOptions) -> bool
        Set: ArabicStrictAlefHamza(self: ISpellingOptions) = value
        """
        ...

    @property
    def ArabicStrictFinalYaa(self) -> bool:
        """
        Get: ArabicStrictFinalYaa(self: ISpellingOptions) -> bool
        Set: ArabicStrictFinalYaa(self: ISpellingOptions) = value
        """
        ...

    @property
    def ArabicStrictTaaMarboota(self) -> bool:
        """
        Get: ArabicStrictTaaMarboota(self: ISpellingOptions) -> bool
        Set: ArabicStrictTaaMarboota(self: ISpellingOptions) = value
        """
        ...

    @property
    def BrazilReform(self) -> XlPortugueseReform:
        """
        Get: BrazilReform(self: ISpellingOptions) -> XlPortugueseReform
        Set: BrazilReform(self: ISpellingOptions) = value
        """
        ...

    @property
    def DictLang(self) -> int:
        """
        Get: DictLang(self: ISpellingOptions) -> int
        Set: DictLang(self: ISpellingOptions) = value
        """
        ...

    @property
    def GermanPostReform(self) -> bool:
        """
        Get: GermanPostReform(self: ISpellingOptions) -> bool
        Set: GermanPostReform(self: ISpellingOptions) = value
        """
        ...

    @property
    def HebrewModes(self) -> XlHebrewModes:
        """
        Get: HebrewModes(self: ISpellingOptions) -> XlHebrewModes
        Set: HebrewModes(self: ISpellingOptions) = value
        """
        ...

    @property
    def IgnoreCaps(self) -> bool:
        """
        Get: IgnoreCaps(self: ISpellingOptions) -> bool
        Set: IgnoreCaps(self: ISpellingOptions) = value
        """
        ...

    @property
    def IgnoreFileNames(self) -> bool:
        """
        Get: IgnoreFileNames(self: ISpellingOptions) -> bool
        Set: IgnoreFileNames(self: ISpellingOptions) = value
        """
        ...

    @property
    def IgnoreMixedDigits(self) -> bool:
        """
        Get: IgnoreMixedDigits(self: ISpellingOptions) -> bool
        Set: IgnoreMixedDigits(self: ISpellingOptions) = value
        """
        ...

    @property
    def KoreanCombineAux(self) -> bool:
        """
        Get: KoreanCombineAux(self: ISpellingOptions) -> bool
        Set: KoreanCombineAux(self: ISpellingOptions) = value
        """
        ...

    @property
    def KoreanProcessCompound(self) -> bool:
        """
        Get: KoreanProcessCompound(self: ISpellingOptions) -> bool
        Set: KoreanProcessCompound(self: ISpellingOptions) = value
        """
        ...

    @property
    def KoreanUseAutoChangeList(self) -> bool:
        """
        Get: KoreanUseAutoChangeList(self: ISpellingOptions) -> bool
        Set: KoreanUseAutoChangeList(self: ISpellingOptions) = value
        """
        ...

    @property
    def PortugalReform(self) -> XlPortugueseReform:
        """
        Get: PortugalReform(self: ISpellingOptions) -> XlPortugueseReform
        Set: PortugalReform(self: ISpellingOptions) = value
        """
        ...

    @property
    def RussianStrictE(self) -> bool:
        """
        Get: RussianStrictE(self: ISpellingOptions) -> bool
        Set: RussianStrictE(self: ISpellingOptions) = value
        """
        ...

    @property
    def SpanishModes(self) -> XlSpanishModes:
        """
        Get: SpanishModes(self: ISpellingOptions) -> XlSpanishModes
        Set: SpanishModes(self: ISpellingOptions) = value
        """
        ...

    @property
    def SuggestMainOnly(self) -> bool:
        """
        Get: SuggestMainOnly(self: ISpellingOptions) -> bool
        Set: SuggestMainOnly(self: ISpellingOptions) = value
        """
        ...

    @property
    def UserDict(self) -> str:
        """
        Get: UserDict(self: ISpellingOptions) -> str
        Set: UserDict(self: ISpellingOptions) = value
        """
        ...



class ISpinner: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISpinner) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: ISpinner) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISpinner) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: ISpinner) -> bool
        Set: Display3DShading(self: ISpinner) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ISpinner) -> bool
        Set: Enabled(self: ISpinner) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ISpinner) -> float
        Set: Height(self: ISpinner) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ISpinner) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ISpinner) -> float
        Set: Left(self: ISpinner) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: ISpinner) -> str
        Set: LinkedCell(self: ISpinner) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ISpinner) -> bool
        Set: Locked(self: ISpinner) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: ISpinner) -> int
        Set: Max(self: ISpinner) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: ISpinner) -> int
        Set: Min(self: ISpinner) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ISpinner) -> str
        Set: Name(self: ISpinner) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ISpinner) -> str
        Set: OnAction(self: ISpinner) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISpinner) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ISpinner) -> object
        Set: Placement(self: ISpinner) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ISpinner) -> bool
        Set: PrintObject(self: ISpinner) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ISpinner) -> ShapeRange """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: ISpinner) -> int
        Set: SmallChange(self: ISpinner) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ISpinner) -> float
        Set: Top(self: ISpinner) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: ISpinner) -> Range """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: ISpinner) -> int
        Set: Value(self: ISpinner) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ISpinner) -> bool
        Set: Visible(self: ISpinner) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ISpinner) -> float
        Set: Width(self: ISpinner) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ISpinner) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: ISpinner) -> int
        Set: _Default(self: ISpinner) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: ISpinner) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ISpinner) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ISpinner, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ISpinner) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ISpinner) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ISpinner) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ISpinner, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ISpinner) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ISpinners(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ISpinners) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ISpinners) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ISpinners) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: ISpinners) -> bool
        Set: Display3DShading(self: ISpinners) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ISpinners) -> bool
        Set: Enabled(self: ISpinners) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ISpinners) -> float
        Set: Height(self: ISpinners) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ISpinners) -> float
        Set: Left(self: ISpinners) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: ISpinners) -> str
        Set: LinkedCell(self: ISpinners) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ISpinners) -> bool
        Set: Locked(self: ISpinners) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: ISpinners) -> int
        Set: Max(self: ISpinners) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: ISpinners) -> int
        Set: Min(self: ISpinners) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ISpinners) -> str
        Set: OnAction(self: ISpinners) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ISpinners) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ISpinners) -> object
        Set: Placement(self: ISpinners) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ISpinners) -> bool
        Set: PrintObject(self: ISpinners) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ISpinners) -> ShapeRange """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: ISpinners) -> int
        Set: SmallChange(self: ISpinners) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ISpinners) -> float
        Set: Top(self: ISpinners) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: ISpinners) -> int
        Set: Value(self: ISpinners) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ISpinners) -> bool
        Set: Visible(self: ISpinners) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ISpinners) -> float
        Set: Width(self: ISpinners) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ISpinners) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: ISpinners) -> int
        Set: _Default(self: ISpinners) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Spinner:
        """ Add(self: ISpinners, Left: float, Top: float, Width: float, Height: float) -> Spinner """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: ISpinners) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ISpinners) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ISpinners, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ISpinners) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ISpinners) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ISpinners) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: ISpinners) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: ISpinners, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ISpinners, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ISpinners) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: ISpinners) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: ISpinners) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: ISpinners) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: ISpinners) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IStyle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: IStyle) -> bool
        Set: AddIndent(self: IStyle) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IStyle) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: IStyle) -> Borders """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: IStyle) -> bool """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IStyle) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IStyle) -> Font """
        ...

    @property
    def FormulaHidden(self) -> bool:
        """
        Get: FormulaHidden(self: IStyle) -> bool
        Set: FormulaHidden(self: IStyle) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> XlHAlign:
        """
        Get: HorizontalAlignment(self: IStyle) -> XlHAlign
        Set: HorizontalAlignment(self: IStyle) = value
        """
        ...

    @property
    def IncludeAlignment(self) -> bool:
        """
        Get: IncludeAlignment(self: IStyle) -> bool
        Set: IncludeAlignment(self: IStyle) = value
        """
        ...

    @property
    def IncludeBorder(self) -> bool:
        """
        Get: IncludeBorder(self: IStyle) -> bool
        Set: IncludeBorder(self: IStyle) = value
        """
        ...

    @property
    def IncludeFont(self) -> bool:
        """
        Get: IncludeFont(self: IStyle) -> bool
        Set: IncludeFont(self: IStyle) = value
        """
        ...

    @property
    def IncludeNumber(self) -> bool:
        """
        Get: IncludeNumber(self: IStyle) -> bool
        Set: IncludeNumber(self: IStyle) = value
        """
        ...

    @property
    def IncludePatterns(self) -> bool:
        """
        Get: IncludePatterns(self: IStyle) -> bool
        Set: IncludePatterns(self: IStyle) = value
        """
        ...

    @property
    def IncludeProtection(self) -> bool:
        """
        Get: IncludeProtection(self: IStyle) -> bool
        Set: IncludeProtection(self: IStyle) = value
        """
        ...

    @property
    def IndentLevel(self) -> int:
        """
        Get: IndentLevel(self: IStyle) -> int
        Set: IndentLevel(self: IStyle) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IStyle) -> Interior """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: IStyle) -> bool
        Set: Locked(self: IStyle) = value
        """
        ...

    @property
    def MergeCells(self) -> object:
        """
        Get: MergeCells(self: IStyle) -> object
        Set: MergeCells(self: IStyle) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IStyle) -> str """
        ...

    @property
    def NameLocal(self) -> str:
        """ Get: NameLocal(self: IStyle) -> str """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: IStyle) -> str
        Set: NumberFormat(self: IStyle) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> str:
        """
        Get: NumberFormatLocal(self: IStyle) -> str
        Set: NumberFormatLocal(self: IStyle) = value
        """
        ...

    @property
    def Orientation(self) -> XlOrientation:
        """
        Get: Orientation(self: IStyle) -> XlOrientation
        Set: Orientation(self: IStyle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IStyle) -> object """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: IStyle) -> int
        Set: ReadingOrder(self: IStyle) = value
        """
        ...

    @property
    def ShrinkToFit(self) -> bool:
        """
        Get: ShrinkToFit(self: IStyle) -> bool
        Set: ShrinkToFit(self: IStyle) = value
        """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: IStyle) -> str """
        ...

    @property
    def VerticalAlignment(self) -> XlVAlign:
        """
        Get: VerticalAlignment(self: IStyle) -> XlVAlign
        Set: VerticalAlignment(self: IStyle) = value
        """
        ...

    @property
    def WrapText(self) -> bool:
        """
        Get: WrapText(self: IStyle) -> bool
        Set: WrapText(self: IStyle) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: IStyle) -> str """
        ...


    def Delete(self) -> object:
        """ Delete(self: IStyle) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IStyles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IStyles) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IStyles) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IStyles) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IStyles) -> object """
        ...


    def Add(self, Name:str, BasedOn:object) -> Style:
        """ Add(self: IStyles, Name: str, BasedOn: object) -> Style """
        ...

    def Merge(self, Workbook:object) -> object:
        """ Merge(self: IStyles, Workbook: object) -> object """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ITab: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITab) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: ITab) -> object
        Set: Color(self: ITab) = value
        """
        ...

    @property
    def ColorIndex(self) -> XlColorIndex:
        """
        Get: ColorIndex(self: ITab) -> XlColorIndex
        Set: ColorIndex(self: ITab) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITab) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITab) -> object """
        ...

    @property
    def ThemeColor(self) -> XlThemeColor:
        """
        Get: ThemeColor(self: ITab) -> XlThemeColor
        Set: ThemeColor(self: ITab) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: ITab) -> object
        Set: TintAndShade(self: ITab) = value
        """
        ...



class ITableObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AdjustColumnWidth(self) -> bool:
        """
        Get: AdjustColumnWidth(self: ITableObject) -> bool
        Set: AdjustColumnWidth(self: ITableObject) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITableObject) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITableObject) -> XlCreator """
        ...

    @property
    def Destination(self) -> Range:
        """ Get: Destination(self: ITableObject) -> Range """
        ...

    @property
    def EnableEditing(self) -> bool:
        """
        Get: EnableEditing(self: ITableObject) -> bool
        Set: EnableEditing(self: ITableObject) = value
        """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: ITableObject) -> bool
        Set: EnableRefresh(self: ITableObject) = value
        """
        ...

    @property
    def FetchedRowOverflow(self) -> bool:
        """ Get: FetchedRowOverflow(self: ITableObject) -> bool """
        ...

    @property
    def ListObject(self) -> ListObject:
        """ Get: ListObject(self: ITableObject) -> ListObject """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITableObject) -> object """
        ...

    @property
    def PreserveColumnInfo(self) -> bool:
        """
        Get: PreserveColumnInfo(self: ITableObject) -> bool
        Set: PreserveColumnInfo(self: ITableObject) = value
        """
        ...

    @property
    def PreserveFormatting(self) -> bool:
        """
        Get: PreserveFormatting(self: ITableObject) -> bool
        Set: PreserveFormatting(self: ITableObject) = value
        """
        ...

    @property
    def RefreshStyle(self) -> XlCellInsertionMode:
        """
        Get: RefreshStyle(self: ITableObject) -> XlCellInsertionMode
        Set: RefreshStyle(self: ITableObject) = value
        """
        ...

    @property
    def ResultRange(self) -> Range:
        """ Get: ResultRange(self: ITableObject) -> Range """
        ...

    @property
    def RowNumbers(self) -> bool:
        """
        Get: RowNumbers(self: ITableObject) -> bool
        Set: RowNumbers(self: ITableObject) = value
        """
        ...

    @property
    def WorkbookConnection(self) -> WorkbookConnection:
        """ Get: WorkbookConnection(self: ITableObject) -> WorkbookConnection """
        ...


    def Delete(self): # -> 
        """ Delete(self: ITableObject) """
        ...

    def Refresh(self) -> bool:
        """ Refresh(self: ITableObject) -> bool """
        ...


class ITableStyle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITableStyle) -> Application """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: ITableStyle) -> bool """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITableStyle) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ITableStyle) -> str """
        ...

    @property
    def NameLocal(self) -> str:
        """ Get: NameLocal(self: ITableStyle) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITableStyle) -> object """
        ...

    @property
    def ShowAsAvailablePivotTableStyle(self) -> bool:
        """
        Get: ShowAsAvailablePivotTableStyle(self: ITableStyle) -> bool
        Set: ShowAsAvailablePivotTableStyle(self: ITableStyle) = value
        """
        ...

    @property
    def ShowAsAvailableSlicerStyle(self) -> bool:
        """
        Get: ShowAsAvailableSlicerStyle(self: ITableStyle) -> bool
        Set: ShowAsAvailableSlicerStyle(self: ITableStyle) = value
        """
        ...

    @property
    def ShowAsAvailableTableStyle(self) -> bool:
        """
        Get: ShowAsAvailableTableStyle(self: ITableStyle) -> bool
        Set: ShowAsAvailableTableStyle(self: ITableStyle) = value
        """
        ...

    @property
    def ShowAsAvailableTimelineStyle(self) -> bool:
        """
        Get: ShowAsAvailableTimelineStyle(self: ITableStyle) -> bool
        Set: ShowAsAvailableTimelineStyle(self: ITableStyle) = value
        """
        ...

    @property
    def TableStyleElements(self) -> TableStyleElements:
        """ Get: TableStyleElements(self: ITableStyle) -> TableStyleElements """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: ITableStyle) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: ITableStyle) """
        ...

    def Duplicate(self, NewTableStyleName:object) -> TableStyle:
        """ Duplicate(self: ITableStyle, NewTableStyleName: object) -> TableStyle """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ITableStyleElement: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITableStyleElement) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: ITableStyleElement) -> Borders """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITableStyleElement) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: ITableStyleElement) -> Font """
        ...

    @property
    def HasFormat(self) -> bool:
        """ Get: HasFormat(self: ITableStyleElement) -> bool """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ITableStyleElement) -> Interior """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITableStyleElement) -> object """
        ...

    @property
    def StripeSize(self) -> int:
        """
        Get: StripeSize(self: ITableStyleElement) -> int
        Set: StripeSize(self: ITableStyleElement) = value
        """
        ...


    def Clear(self): # -> 
        """ Clear(self: ITableStyleElement) """
        ...


class ITableStyleElements(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITableStyleElements) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ITableStyleElements) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITableStyleElements) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITableStyleElements) -> object """
        ...


    def Item(self, Index:XlTableStyleElementType) -> TableStyleElement:
        """ Item(self: ITableStyleElements, Index: XlTableStyleElementType) -> TableStyleElement """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ITableStyles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITableStyles) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ITableStyles) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITableStyles) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITableStyles) -> object """
        ...


    def Add(self, TableStyleName:str) -> TableStyle:
        """ Add(self: ITableStyles, TableStyleName: str) -> TableStyle """
        ...

    def Item(self, Index:object) -> TableStyle:
        """ Item(self: ITableStyles, Index: object) -> TableStyle """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ITextBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: ITextBox) -> bool
        Set: AddIndent(self: ITextBox) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITextBox) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: ITextBox) -> object
        Set: AutoScaleFont(self: ITextBox) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: ITextBox) -> bool
        Set: AutoSize(self: ITextBox) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ITextBox) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: ITextBox) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ITextBox) -> str
        Set: Caption(self: ITextBox) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITextBox) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ITextBox) -> bool
        Set: Enabled(self: ITextBox) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: ITextBox) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: ITextBox) -> str
        Set: Formula(self: ITextBox) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ITextBox) -> float
        Set: Height(self: ITextBox) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: ITextBox) -> object
        Set: HorizontalAlignment(self: ITextBox) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ITextBox) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ITextBox) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ITextBox) -> float
        Set: Left(self: ITextBox) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ITextBox) -> bool
        Set: Locked(self: ITextBox) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: ITextBox) -> bool
        Set: LockedText(self: ITextBox) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ITextBox) -> str
        Set: Name(self: ITextBox) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ITextBox) -> str
        Set: OnAction(self: ITextBox) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: ITextBox) -> object
        Set: Orientation(self: ITextBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITextBox) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ITextBox) -> object
        Set: Placement(self: ITextBox) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ITextBox) -> bool
        Set: PrintObject(self: ITextBox) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: ITextBox) -> int
        Set: ReadingOrder(self: ITextBox) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: ITextBox) -> bool
        Set: RoundedCorners(self: ITextBox) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: ITextBox) -> bool
        Set: Shadow(self: ITextBox) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ITextBox) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ITextBox) -> str
        Set: Text(self: ITextBox) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ITextBox) -> float
        Set: Top(self: ITextBox) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: ITextBox) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: ITextBox) -> object
        Set: VerticalAlignment(self: ITextBox) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ITextBox) -> bool
        Set: Visible(self: ITextBox) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ITextBox) -> float
        Set: Width(self: ITextBox) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ITextBox) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: ITextBox) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: ITextBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ITextBox) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ITextBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ITextBox) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ITextBox) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ITextBox) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ITextBox, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ITextBox) -> object """
        ...


class ITextBoxes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: ITextBoxes) -> bool
        Set: AddIndent(self: ITextBoxes) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITextBoxes) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: ITextBoxes) -> object
        Set: AutoScaleFont(self: ITextBoxes) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: ITextBoxes) -> bool
        Set: AutoSize(self: ITextBoxes) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ITextBoxes) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ITextBoxes) -> str
        Set: Caption(self: ITextBoxes) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ITextBoxes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITextBoxes) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ITextBoxes) -> bool
        Set: Enabled(self: ITextBoxes) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: ITextBoxes) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: ITextBoxes) -> str
        Set: Formula(self: ITextBoxes) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ITextBoxes) -> float
        Set: Height(self: ITextBoxes) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: ITextBoxes) -> object
        Set: HorizontalAlignment(self: ITextBoxes) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ITextBoxes) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ITextBoxes) -> float
        Set: Left(self: ITextBoxes) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ITextBoxes) -> bool
        Set: Locked(self: ITextBoxes) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: ITextBoxes) -> bool
        Set: LockedText(self: ITextBoxes) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ITextBoxes) -> str
        Set: OnAction(self: ITextBoxes) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: ITextBoxes) -> object
        Set: Orientation(self: ITextBoxes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITextBoxes) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ITextBoxes) -> object
        Set: Placement(self: ITextBoxes) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ITextBoxes) -> bool
        Set: PrintObject(self: ITextBoxes) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: ITextBoxes) -> int
        Set: ReadingOrder(self: ITextBoxes) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: ITextBoxes) -> bool
        Set: RoundedCorners(self: ITextBoxes) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: ITextBoxes) -> bool
        Set: Shadow(self: ITextBoxes) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ITextBoxes) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ITextBoxes) -> str
        Set: Text(self: ITextBoxes) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ITextBoxes) -> float
        Set: Top(self: ITextBoxes) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: ITextBoxes) -> object
        Set: VerticalAlignment(self: ITextBoxes) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ITextBoxes) -> bool
        Set: Visible(self: ITextBoxes) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ITextBoxes) -> float
        Set: Width(self: ITextBoxes) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ITextBoxes) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> TextBox:
        """ Add(self: ITextBoxes, Left: float, Top: float, Width: float, Height: float) -> TextBox """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: ITextBoxes) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: ITextBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ITextBoxes) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ITextBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ITextBoxes) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ITextBoxes) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ITextBoxes) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: ITextBoxes) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: ITextBoxes, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ITextBoxes, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ITextBoxes) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: ITextBoxes) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: ITextBoxes) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: ITextBoxes) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: ITextBoxes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class ITextConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITextConnection) -> Application """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: ITextConnection) -> object
        Set: Connection(self: ITextConnection) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITextConnection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITextConnection) -> object """
        ...

    @property
    def TextFileColumnDataTypes(self) -> object:
        """
        Get: TextFileColumnDataTypes(self: ITextConnection) -> object
        Set: TextFileColumnDataTypes(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileCommaDelimiter(self) -> bool:
        """
        Get: TextFileCommaDelimiter(self: ITextConnection) -> bool
        Set: TextFileCommaDelimiter(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileConsecutiveDelimiter(self) -> bool:
        """
        Get: TextFileConsecutiveDelimiter(self: ITextConnection) -> bool
        Set: TextFileConsecutiveDelimiter(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileDecimalSeparator(self) -> str:
        """
        Get: TextFileDecimalSeparator(self: ITextConnection) -> str
        Set: TextFileDecimalSeparator(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileFixedColumnWidths(self) -> object:
        """
        Get: TextFileFixedColumnWidths(self: ITextConnection) -> object
        Set: TextFileFixedColumnWidths(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileHeaderRow(self) -> bool:
        """
        Get: TextFileHeaderRow(self: ITextConnection) -> bool
        Set: TextFileHeaderRow(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileOtherDelimiter(self) -> str:
        """
        Get: TextFileOtherDelimiter(self: ITextConnection) -> str
        Set: TextFileOtherDelimiter(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileParseType(self) -> XlTextParsingType:
        """
        Get: TextFileParseType(self: ITextConnection) -> XlTextParsingType
        Set: TextFileParseType(self: ITextConnection) = value
        """
        ...

    @property
    def TextFilePlatform(self) -> XlPlatform:
        """
        Get: TextFilePlatform(self: ITextConnection) -> XlPlatform
        Set: TextFilePlatform(self: ITextConnection) = value
        """
        ...

    @property
    def TextFilePromptOnRefresh(self) -> bool:
        """
        Get: TextFilePromptOnRefresh(self: ITextConnection) -> bool
        Set: TextFilePromptOnRefresh(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileSemicolonDelimiter(self) -> bool:
        """
        Get: TextFileSemicolonDelimiter(self: ITextConnection) -> bool
        Set: TextFileSemicolonDelimiter(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileSpaceDelimiter(self) -> bool:
        """
        Get: TextFileSpaceDelimiter(self: ITextConnection) -> bool
        Set: TextFileSpaceDelimiter(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileStartRow(self) -> int:
        """
        Get: TextFileStartRow(self: ITextConnection) -> int
        Set: TextFileStartRow(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileTabDelimiter(self) -> bool:
        """
        Get: TextFileTabDelimiter(self: ITextConnection) -> bool
        Set: TextFileTabDelimiter(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileTextQualifier(self) -> XlTextQualifier:
        """
        Get: TextFileTextQualifier(self: ITextConnection) -> XlTextQualifier
        Set: TextFileTextQualifier(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileThousandsSeparator(self) -> str:
        """
        Get: TextFileThousandsSeparator(self: ITextConnection) -> str
        Set: TextFileThousandsSeparator(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileTrailingMinusNumbers(self) -> bool:
        """
        Get: TextFileTrailingMinusNumbers(self: ITextConnection) -> bool
        Set: TextFileTrailingMinusNumbers(self: ITextConnection) = value
        """
        ...

    @property
    def TextFileVisualLayout(self) -> XlTextVisualLayoutType:
        """
        Get: TextFileVisualLayout(self: ITextConnection) -> XlTextVisualLayoutType
        Set: TextFileVisualLayout(self: ITextConnection) = value
        """
        ...



class ITextFrame: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITextFrame) -> Application """
        ...

    @property
    def AutoMargins(self) -> bool:
        """
        Get: AutoMargins(self: ITextFrame) -> bool
        Set: AutoMargins(self: ITextFrame) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: ITextFrame) -> bool
        Set: AutoSize(self: ITextFrame) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITextFrame) -> XlCreator """
        ...

    @property
    def HorizontalAlignment(self) -> XlHAlign:
        """
        Get: HorizontalAlignment(self: ITextFrame) -> XlHAlign
        Set: HorizontalAlignment(self: ITextFrame) = value
        """
        ...

    @property
    def HorizontalOverflow(self) -> XlOartHorizontalOverflow:
        """
        Get: HorizontalOverflow(self: ITextFrame) -> XlOartHorizontalOverflow
        Set: HorizontalOverflow(self: ITextFrame) = value
        """
        ...

    @property
    def MarginBottom(self) -> Single:
        """
        Get: MarginBottom(self: ITextFrame) -> Single
        Set: MarginBottom(self: ITextFrame) = value
        """
        ...

    @property
    def MarginLeft(self) -> Single:
        """
        Get: MarginLeft(self: ITextFrame) -> Single
        Set: MarginLeft(self: ITextFrame) = value
        """
        ...

    @property
    def MarginRight(self) -> Single:
        """
        Get: MarginRight(self: ITextFrame) -> Single
        Set: MarginRight(self: ITextFrame) = value
        """
        ...

    @property
    def MarginTop(self) -> Single:
        """
        Get: MarginTop(self: ITextFrame) -> Single
        Set: MarginTop(self: ITextFrame) = value
        """
        ...

    @property
    def Orientation(self): # -> MsoTextOrientation
        """
        Get: Orientation(self: ITextFrame) -> MsoTextOrientation
        Set: Orientation(self: ITextFrame) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITextFrame) -> object """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: ITextFrame) -> int
        Set: ReadingOrder(self: ITextFrame) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> XlVAlign:
        """
        Get: VerticalAlignment(self: ITextFrame) -> XlVAlign
        Set: VerticalAlignment(self: ITextFrame) = value
        """
        ...

    @property
    def VerticalOverflow(self) -> XlOartVerticalOverflow:
        """
        Get: VerticalOverflow(self: ITextFrame) -> XlOartVerticalOverflow
        Set: VerticalOverflow(self: ITextFrame) = value
        """
        ...


    def Characters(self, Start:object, Length:object) -> Characters:
        """ Characters(self: ITextFrame, Start: object, Length: object) -> Characters """
        ...


class ITickLabels: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> int:
        """
        Get: Alignment(self: ITickLabels) -> int
        Set: Alignment(self: ITickLabels) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITickLabels) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: ITickLabels) -> object
        Set: AutoScaleFont(self: ITickLabels) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITickLabels) -> XlCreator """
        ...

    @property
    def Depth(self) -> int:
        """ Get: Depth(self: ITickLabels) -> int """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: ITickLabels) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ITickLabels) -> ChartFormat """
        ...

    @property
    def MultiLevel(self) -> bool:
        """
        Get: MultiLevel(self: ITickLabels) -> bool
        Set: MultiLevel(self: ITickLabels) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ITickLabels) -> str """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: ITickLabels) -> str
        Set: NumberFormat(self: ITickLabels) = value
        """
        ...

    @property
    def NumberFormatLinked(self) -> bool:
        """
        Get: NumberFormatLinked(self: ITickLabels) -> bool
        Set: NumberFormatLinked(self: ITickLabels) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: ITickLabels) -> object
        Set: NumberFormatLocal(self: ITickLabels) = value
        """
        ...

    @property
    def Offset(self) -> int:
        """
        Get: Offset(self: ITickLabels) -> int
        Set: Offset(self: ITickLabels) = value
        """
        ...

    @property
    def Orientation(self) -> XlTickLabelOrientation:
        """
        Get: Orientation(self: ITickLabels) -> XlTickLabelOrientation
        Set: Orientation(self: ITickLabels) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITickLabels) -> object """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: ITickLabels) -> int
        Set: ReadingOrder(self: ITickLabels) = value
        """
        ...


    def Delete(self) -> object:
        """ Delete(self: ITickLabels) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ITickLabels) -> object """
        ...


class ITimelineState: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITimelineState) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITimelineState) -> XlCreator """
        ...

    @property
    def EndDate(self) -> object:
        """ Get: EndDate(self: ITimelineState) -> object """
        ...

    @property
    def FilterType(self) -> XlPivotFilterType:
        """ Get: FilterType(self: ITimelineState) -> XlPivotFilterType """
        ...

    @property
    def FilterValue1(self) -> object:
        """ Get: FilterValue1(self: ITimelineState) -> object """
        ...

    @property
    def FilterValue2(self) -> object:
        """ Get: FilterValue2(self: ITimelineState) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITimelineState) -> object """
        ...

    @property
    def SingleRangeFilterState(self) -> bool:
        """ Get: SingleRangeFilterState(self: ITimelineState) -> bool """
        ...

    @property
    def StartDate(self) -> object:
        """ Get: StartDate(self: ITimelineState) -> object """
        ...


    def SetFilterDateRange(self, StartDate:object, EndDate:object) -> XlFilterStatus:
        """ SetFilterDateRange(self: ITimelineState, StartDate: object, EndDate: object) -> XlFilterStatus """
        ...


class ITimelineViewState: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITimelineViewState) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITimelineViewState) -> XlCreator """
        ...

    @property
    def Level(self) -> XlTimelineLevel:
        """
        Get: Level(self: ITimelineViewState) -> XlTimelineLevel
        Set: Level(self: ITimelineViewState) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITimelineViewState) -> object """
        ...

    @property
    def ShowHeader(self) -> bool:
        """
        Get: ShowHeader(self: ITimelineViewState) -> bool
        Set: ShowHeader(self: ITimelineViewState) = value
        """
        ...

    @property
    def ShowHorizontalScrollbar(self) -> bool:
        """
        Get: ShowHorizontalScrollbar(self: ITimelineViewState) -> bool
        Set: ShowHorizontalScrollbar(self: ITimelineViewState) = value
        """
        ...

    @property
    def ShowSelectionLabel(self) -> bool:
        """
        Get: ShowSelectionLabel(self: ITimelineViewState) -> bool
        Set: ShowSelectionLabel(self: ITimelineViewState) = value
        """
        ...

    @property
    def ShowTimeLevel(self) -> bool:
        """
        Get: ShowTimeLevel(self: ITimelineViewState) -> bool
        Set: ShowTimeLevel(self: ITimelineViewState) = value
        """
        ...



class IToolbar: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IToolbar) -> Application """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: IToolbar) -> bool """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IToolbar) -> XlCreator """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: IToolbar) -> int
        Set: Height(self: IToolbar) = value
        """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: IToolbar) -> int
        Set: Left(self: IToolbar) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IToolbar) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IToolbar) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: IToolbar) -> int
        Set: Position(self: IToolbar) = value
        """
        ...

    @property
    def Protection(self) -> XlToolbarProtection:
        """
        Get: Protection(self: IToolbar) -> XlToolbarProtection
        Set: Protection(self: IToolbar) = value
        """
        ...

    @property
    def ToolbarButtons(self) -> ToolbarButtons:
        """ Get: ToolbarButtons(self: IToolbar) -> ToolbarButtons """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: IToolbar) -> int
        Set: Top(self: IToolbar) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IToolbar) -> bool
        Set: Visible(self: IToolbar) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: IToolbar) -> int
        Set: Width(self: IToolbar) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: IToolbar) """
        ...

    def Reset(self): # -> 
        """ Reset(self: IToolbar) """
        ...


class IToolbarButton: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IToolbarButton) -> Application """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: IToolbarButton) -> bool """
        ...

    @property
    def BuiltInFace(self) -> bool:
        """
        Get: BuiltInFace(self: IToolbarButton) -> bool
        Set: BuiltInFace(self: IToolbarButton) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IToolbarButton) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: IToolbarButton) -> bool
        Set: Enabled(self: IToolbarButton) = value
        """
        ...

    @property
    def HelpContextID(self) -> int:
        """
        Get: HelpContextID(self: IToolbarButton) -> int
        Set: HelpContextID(self: IToolbarButton) = value
        """
        ...

    @property
    def HelpFile(self) -> str:
        """
        Get: HelpFile(self: IToolbarButton) -> str
        Set: HelpFile(self: IToolbarButton) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: IToolbarButton) -> int """
        ...

    @property
    def IsGap(self) -> bool:
        """ Get: IsGap(self: IToolbarButton) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IToolbarButton) -> str
        Set: Name(self: IToolbarButton) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: IToolbarButton) -> str
        Set: OnAction(self: IToolbarButton) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IToolbarButton) -> object """
        ...

    @property
    def Pushed(self) -> bool:
        """
        Get: Pushed(self: IToolbarButton) -> bool
        Set: Pushed(self: IToolbarButton) = value
        """
        ...

    @property
    def StatusBar(self) -> str:
        """
        Get: StatusBar(self: IToolbarButton) -> str
        Set: StatusBar(self: IToolbarButton) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: IToolbarButton) -> int
        Set: Width(self: IToolbarButton) = value
        """
        ...


    def Copy(self, Toolbar:Toolbar, Before:int): # -> 
        """ Copy(self: IToolbarButton, Toolbar: Toolbar, Before: int) """
        ...

    def CopyFace(self): # -> 
        """ CopyFace(self: IToolbarButton) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IToolbarButton) """
        ...

    def Edit(self): # -> 
        """ Edit(self: IToolbarButton) """
        ...

    def Move(self, Toolbar:Toolbar, Before:int): # -> 
        """ Move(self: IToolbarButton, Toolbar: Toolbar, Before: int) """
        ...

    def PasteFace(self): # -> 
        """ PasteFace(self: IToolbarButton) """
        ...

    def Reset(self): # -> 
        """ Reset(self: IToolbarButton) """
        ...


class IToolbarButtons(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IToolbarButtons) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IToolbarButtons) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IToolbarButtons) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IToolbarButtons) -> object """
        ...


    def Add(self, Button:object, Before:object, OnAction:object, Pushed:object, Enabled:object, StatusBar:object, HelpFile:object, HelpContextID:object) -> ToolbarButton:
        """ Add(self: IToolbarButtons, Button: object, Before: object, OnAction: object, Pushed: object, Enabled: object, StatusBar: object, HelpFile: object, HelpContextID: object) -> ToolbarButton """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IToolbars(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IToolbars) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IToolbars) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IToolbars) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IToolbars) -> object """
        ...


    def Add(self, Name:object) -> Toolbar:
        """ Add(self: IToolbars, Name: object) -> Toolbar """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ITop10: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITop10) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: ITop10) -> Range """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: ITop10) -> Borders """
        ...

    @property
    def CalcFor(self) -> XlCalcFor:
        """
        Get: CalcFor(self: ITop10) -> XlCalcFor
        Set: CalcFor(self: ITop10) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITop10) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: ITop10) -> Font """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ITop10) -> Interior """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: ITop10) -> object
        Set: NumberFormat(self: ITop10) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITop10) -> object """
        ...

    @property
    def Percent(self) -> bool:
        """
        Get: Percent(self: ITop10) -> bool
        Set: Percent(self: ITop10) = value
        """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: ITop10) -> int
        Set: Priority(self: ITop10) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: ITop10) -> bool """
        ...

    @property
    def Rank(self) -> int:
        """
        Get: Rank(self: ITop10) -> int
        Set: Rank(self: ITop10) = value
        """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: ITop10) -> XlPivotConditionScope
        Set: ScopeType(self: ITop10) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """
        Get: StopIfTrue(self: ITop10) -> bool
        Set: StopIfTrue(self: ITop10) = value
        """
        ...

    @property
    def TopBottom(self) -> XlTopBottom:
        """
        Get: TopBottom(self: ITop10) -> XlTopBottom
        Set: TopBottom(self: ITop10) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: ITop10) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: ITop10) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: ITop10, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: ITop10) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: ITop10) """
        ...


class ITrendline: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITrendline) -> Application """
        ...

    @property
    def Backward(self) -> int:
        """
        Get: Backward(self: ITrendline) -> int
        Set: Backward(self: ITrendline) = value
        """
        ...

    @property
    def Backward2(self) -> float:
        """
        Get: Backward2(self: ITrendline) -> float
        Set: Backward2(self: ITrendline) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: ITrendline) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITrendline) -> XlCreator """
        ...

    @property
    def DataLabel(self) -> DataLabel:
        """ Get: DataLabel(self: ITrendline) -> DataLabel """
        ...

    @property
    def DisplayEquation(self) -> bool:
        """
        Get: DisplayEquation(self: ITrendline) -> bool
        Set: DisplayEquation(self: ITrendline) = value
        """
        ...

    @property
    def DisplayRSquared(self) -> bool:
        """
        Get: DisplayRSquared(self: ITrendline) -> bool
        Set: DisplayRSquared(self: ITrendline) = value
        """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ITrendline) -> ChartFormat """
        ...

    @property
    def Forward(self) -> int:
        """
        Get: Forward(self: ITrendline) -> int
        Set: Forward(self: ITrendline) = value
        """
        ...

    @property
    def Forward2(self) -> float:
        """
        Get: Forward2(self: ITrendline) -> float
        Set: Forward2(self: ITrendline) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ITrendline) -> int """
        ...

    @property
    def Intercept(self) -> float:
        """
        Get: Intercept(self: ITrendline) -> float
        Set: Intercept(self: ITrendline) = value
        """
        ...

    @property
    def InterceptIsAuto(self) -> bool:
        """
        Get: InterceptIsAuto(self: ITrendline) -> bool
        Set: InterceptIsAuto(self: ITrendline) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ITrendline) -> str
        Set: Name(self: ITrendline) = value
        """
        ...

    @property
    def NameIsAuto(self) -> bool:
        """
        Get: NameIsAuto(self: ITrendline) -> bool
        Set: NameIsAuto(self: ITrendline) = value
        """
        ...

    @property
    def Order(self) -> int:
        """
        Get: Order(self: ITrendline) -> int
        Set: Order(self: ITrendline) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITrendline) -> object """
        ...

    @property
    def Period(self) -> int:
        """
        Get: Period(self: ITrendline) -> int
        Set: Period(self: ITrendline) = value
        """
        ...

    @property
    def Type(self) -> XlTrendlineType:
        """
        Get: Type(self: ITrendline) -> XlTrendlineType
        Set: Type(self: ITrendline) = value
        """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: ITrendline) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ITrendline) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ITrendline) -> object """
        ...


class ITrendlines(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ITrendlines) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ITrendlines) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ITrendlines) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ITrendlines) -> object """
        ...


    def Add(self, Type:XlTrendlineType, Order:object, Period:object, Forward:object, Backward:object, Intercept:object, DisplayEquation:object, DisplayRSquared:object, Name:object) -> Trendline:
        """ Add(self: ITrendlines, Type: XlTrendlineType, Order: object, Period: object, Forward: object, Backward: object, Intercept: object, DisplayEquation: object, DisplayRSquared: object, Name: object) -> Trendline """
        ...

    def Item(self, Index:object) -> Trendline:
        """ Item(self: ITrendlines, Index: object) -> Trendline """
        ...

    def _Default(self, Index:object) -> Trendline:
        """ _Default(self: ITrendlines, Index: object) -> Trendline """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IUniqueValues: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IUniqueValues) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: IUniqueValues) -> Range """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: IUniqueValues) -> Borders """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IUniqueValues) -> XlCreator """
        ...

    @property
    def DupeUnique(self) -> XlDupeUnique:
        """
        Get: DupeUnique(self: IUniqueValues) -> XlDupeUnique
        Set: DupeUnique(self: IUniqueValues) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: IUniqueValues) -> Font """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IUniqueValues) -> Interior """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: IUniqueValues) -> object
        Set: NumberFormat(self: IUniqueValues) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IUniqueValues) -> object """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: IUniqueValues) -> int
        Set: Priority(self: IUniqueValues) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: IUniqueValues) -> bool """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: IUniqueValues) -> XlPivotConditionScope
        Set: ScopeType(self: IUniqueValues) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """
        Get: StopIfTrue(self: IUniqueValues) -> bool
        Set: StopIfTrue(self: IUniqueValues) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: IUniqueValues) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: IUniqueValues) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: IUniqueValues, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: IUniqueValues) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: IUniqueValues) """
        ...


class IUpBars: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IUpBars) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IUpBars) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IUpBars) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IUpBars) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IUpBars) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IUpBars) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IUpBars) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IUpBars) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: IUpBars) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: IUpBars) -> object """
        ...


class IUsedObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IUsedObjects) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IUsedObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IUsedObjects) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IUsedObjects) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IUserAccess: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowEdit(self) -> bool:
        """
        Get: AllowEdit(self: IUserAccess) -> bool
        Set: AllowEdit(self: IUserAccess) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IUserAccess) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: IUserAccess) """
        ...


class IUserAccessList(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: IUserAccessList) -> int """
        ...


    def Add(self, Name:str, AllowEdit:bool) -> UserAccess:
        """ Add(self: IUserAccessList, Name: str, AllowEdit: bool) -> UserAccess """
        ...

    def DeleteAll(self): # -> 
        """ DeleteAll(self: IUserAccessList) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IValidation: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlertStyle(self) -> int:
        """ Get: AlertStyle(self: IValidation) -> int """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IValidation) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IValidation) -> XlCreator """
        ...

    @property
    def ErrorMessage(self) -> str:
        """
        Get: ErrorMessage(self: IValidation) -> str
        Set: ErrorMessage(self: IValidation) = value
        """
        ...

    @property
    def ErrorTitle(self) -> str:
        """
        Get: ErrorTitle(self: IValidation) -> str
        Set: ErrorTitle(self: IValidation) = value
        """
        ...

    @property
    def Formula1(self) -> str:
        """ Get: Formula1(self: IValidation) -> str """
        ...

    @property
    def Formula2(self) -> str:
        """ Get: Formula2(self: IValidation) -> str """
        ...

    @property
    def IgnoreBlank(self) -> bool:
        """
        Get: IgnoreBlank(self: IValidation) -> bool
        Set: IgnoreBlank(self: IValidation) = value
        """
        ...

    @property
    def IMEMode(self) -> int:
        """
        Get: IMEMode(self: IValidation) -> int
        Set: IMEMode(self: IValidation) = value
        """
        ...

    @property
    def InCellDropdown(self) -> bool:
        """
        Get: InCellDropdown(self: IValidation) -> bool
        Set: InCellDropdown(self: IValidation) = value
        """
        ...

    @property
    def InputMessage(self) -> str:
        """
        Get: InputMessage(self: IValidation) -> str
        Set: InputMessage(self: IValidation) = value
        """
        ...

    @property
    def InputTitle(self) -> str:
        """
        Get: InputTitle(self: IValidation) -> str
        Set: InputTitle(self: IValidation) = value
        """
        ...

    @property
    def Operator(self) -> int:
        """ Get: Operator(self: IValidation) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IValidation) -> object """
        ...

    @property
    def ShowError(self) -> bool:
        """
        Get: ShowError(self: IValidation) -> bool
        Set: ShowError(self: IValidation) = value
        """
        ...

    @property
    def ShowInput(self) -> bool:
        """
        Get: ShowInput(self: IValidation) -> bool
        Set: ShowInput(self: IValidation) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: IValidation) -> int """
        ...

    @property
    def Value(self) -> bool:
        """ Get: Value(self: IValidation) -> bool """
        ...


    def Add(self, Type:XlDVType, AlertStyle:object, Operator:object, Formula1:object, Formula2:object): # -> 
        """ Add(self: IValidation, Type: XlDVType, AlertStyle: object, Operator: object, Formula1: object, Formula2: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IValidation) """
        ...

    def Modify(self, Type:object, AlertStyle:object, Operator:object, Formula1:object, Formula2:object): # -> 
        """ Modify(self: IValidation, Type: object, AlertStyle: object, Operator: object, Formula1: object, Formula2: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class IValueChange: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllocationMethod(self) -> XlAllocationMethod:
        """ Get: AllocationMethod(self: IValueChange) -> XlAllocationMethod """
        ...

    @property
    def AllocationValue(self) -> XlAllocationValue:
        """ Get: AllocationValue(self: IValueChange) -> XlAllocationValue """
        ...

    @property
    def AllocationWeightExpression(self) -> str:
        """ Get: AllocationWeightExpression(self: IValueChange) -> str """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IValueChange) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IValueChange) -> XlCreator """
        ...

    @property
    def Order(self) -> int:
        """ Get: Order(self: IValueChange) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IValueChange) -> object """
        ...

    @property
    def PivotCell(self) -> PivotCell:
        """ Get: PivotCell(self: IValueChange) -> PivotCell """
        ...

    @property
    def Tuple(self) -> str:
        """ Get: Tuple(self: IValueChange) -> str """
        ...

    @property
    def Value(self) -> float:
        """ Get: Value(self: IValueChange) -> float """
        ...

    @property
    def VisibleInPivotTable(self) -> bool:
        """ Get: VisibleInPivotTable(self: IValueChange) -> bool """
        ...


    def Delete(self): # -> 
        """ Delete(self: IValueChange) """
        ...


class IVPageBreak: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IVPageBreak) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IVPageBreak) -> XlCreator """
        ...

    @property
    def Extent(self) -> XlPageBreakExtent:
        """ Get: Extent(self: IVPageBreak) -> XlPageBreakExtent """
        ...

    @property
    def Location(self) -> Range:
        """
        Get: Location(self: IVPageBreak) -> Range
        Set: Location(self: IVPageBreak) = value
        """
        ...

    @property
    def Parent(self) -> Worksheet:
        """ Get: Parent(self: IVPageBreak) -> Worksheet """
        ...

    @property
    def Type(self) -> XlPageBreak:
        """
        Get: Type(self: IVPageBreak) -> XlPageBreak
        Set: Type(self: IVPageBreak) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: IVPageBreak) """
        ...

    def DragOff(self, Direction:XlDirection, RegionIndex:int): # -> 
        """ DragOff(self: IVPageBreak, Direction: XlDirection, RegionIndex: int) """
        ...


class IVPageBreaks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IVPageBreaks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IVPageBreaks) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IVPageBreaks) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IVPageBreaks) -> object """
        ...


    def Add(self, Before:object) -> VPageBreak:
        """ Add(self: IVPageBreaks, Before: object) -> VPageBreak """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IWalls: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IWalls) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: IWalls) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IWalls) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: IWalls) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: IWalls) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: IWalls) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IWalls) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IWalls) -> object """
        ...

    @property
    def PictureType(self) -> object:
        """
        Get: PictureType(self: IWalls) -> object
        Set: PictureType(self: IWalls) = value
        """
        ...

    @property
    def PictureUnit(self) -> object:
        """
        Get: PictureUnit(self: IWalls) -> object
        Set: PictureUnit(self: IWalls) = value
        """
        ...

    @property
    def Thickness(self) -> int:
        """
        Get: Thickness(self: IWalls) -> int
        Set: Thickness(self: IWalls) = value
        """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: IWalls) -> object """
        ...

    def Paste(self): # -> 
        """ Paste(self: IWalls) """
        ...

    def Select(self) -> object:
        """ Select(self: IWalls) -> object """
        ...


class IWatch: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IWatch) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IWatch) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IWatch) -> object """
        ...

    @property
    def Source(self) -> object:
        """ Get: Source(self: IWatch) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: IWatch) """
        ...


class IWatches(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IWatches) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IWatches) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IWatches) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IWatches) -> object """
        ...


    def Add(self, Source:object) -> Watch:
        """ Add(self: IWatches, Source: object) -> Watch """
        ...

    def Delete(self): # -> 
        """ Delete(self: IWatches) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IWindow: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveCell(self) -> Range:
        """ Get: ActiveCell(self: IWindow) -> Range """
        ...

    @property
    def ActiveChart(self) -> Chart:
        """ Get: ActiveChart(self: IWindow) -> Chart """
        ...

    @property
    def ActivePane(self) -> Pane:
        """ Get: ActivePane(self: IWindow) -> Pane """
        ...

    @property
    def ActiveSheet(self) -> object:
        """ Get: ActiveSheet(self: IWindow) -> object """
        ...

    @property
    def ActiveSheetView(self) -> object:
        """ Get: ActiveSheetView(self: IWindow) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IWindow) -> Application """
        ...

    @property
    def AutoFilterDateGrouping(self) -> bool:
        """
        Get: AutoFilterDateGrouping(self: IWindow) -> bool
        Set: AutoFilterDateGrouping(self: IWindow) = value
        """
        ...

    @property
    def Caption(self) -> object:
        """
        Get: Caption(self: IWindow) -> object
        Set: Caption(self: IWindow) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IWindow) -> XlCreator """
        ...

    @property
    def DisplayFormulas(self) -> bool:
        """
        Get: DisplayFormulas(self: IWindow) -> bool
        Set: DisplayFormulas(self: IWindow) = value
        """
        ...

    @property
    def DisplayGridlines(self) -> bool:
        """
        Get: DisplayGridlines(self: IWindow) -> bool
        Set: DisplayGridlines(self: IWindow) = value
        """
        ...

    @property
    def DisplayHeadings(self) -> bool:
        """
        Get: DisplayHeadings(self: IWindow) -> bool
        Set: DisplayHeadings(self: IWindow) = value
        """
        ...

    @property
    def DisplayHorizontalScrollBar(self) -> bool:
        """
        Get: DisplayHorizontalScrollBar(self: IWindow) -> bool
        Set: DisplayHorizontalScrollBar(self: IWindow) = value
        """
        ...

    @property
    def DisplayOutline(self) -> bool:
        """
        Get: DisplayOutline(self: IWindow) -> bool
        Set: DisplayOutline(self: IWindow) = value
        """
        ...

    @property
    def DisplayRightToLeft(self) -> bool:
        """
        Get: DisplayRightToLeft(self: IWindow) -> bool
        Set: DisplayRightToLeft(self: IWindow) = value
        """
        ...

    @property
    def DisplayRuler(self) -> bool:
        """
        Get: DisplayRuler(self: IWindow) -> bool
        Set: DisplayRuler(self: IWindow) = value
        """
        ...

    @property
    def DisplayVerticalScrollBar(self) -> bool:
        """
        Get: DisplayVerticalScrollBar(self: IWindow) -> bool
        Set: DisplayVerticalScrollBar(self: IWindow) = value
        """
        ...

    @property
    def DisplayWhitespace(self) -> bool:
        """
        Get: DisplayWhitespace(self: IWindow) -> bool
        Set: DisplayWhitespace(self: IWindow) = value
        """
        ...

    @property
    def DisplayWorkbookTabs(self) -> bool:
        """
        Get: DisplayWorkbookTabs(self: IWindow) -> bool
        Set: DisplayWorkbookTabs(self: IWindow) = value
        """
        ...

    @property
    def DisplayZeros(self) -> bool:
        """
        Get: DisplayZeros(self: IWindow) -> bool
        Set: DisplayZeros(self: IWindow) = value
        """
        ...

    @property
    def EnableResize(self) -> bool:
        """
        Get: EnableResize(self: IWindow) -> bool
        Set: EnableResize(self: IWindow) = value
        """
        ...

    @property
    def FreezePanes(self) -> bool:
        """
        Get: FreezePanes(self: IWindow) -> bool
        Set: FreezePanes(self: IWindow) = value
        """
        ...

    @property
    def GridlineColor(self) -> int:
        """
        Get: GridlineColor(self: IWindow) -> int
        Set: GridlineColor(self: IWindow) = value
        """
        ...

    @property
    def GridlineColorIndex(self) -> XlColorIndex:
        """
        Get: GridlineColorIndex(self: IWindow) -> XlColorIndex
        Set: GridlineColorIndex(self: IWindow) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: IWindow) -> float
        Set: Height(self: IWindow) = value
        """
        ...

    @property
    def Hwnd(self) -> int:
        """ Get: Hwnd(self: IWindow) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: IWindow) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: IWindow) -> float
        Set: Left(self: IWindow) = value
        """
        ...

    @property
    def OnWindow(self) -> str:
        """
        Get: OnWindow(self: IWindow) -> str
        Set: OnWindow(self: IWindow) = value
        """
        ...

    @property
    def Panes(self) -> Panes:
        """ Get: Panes(self: IWindow) -> Panes """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IWindow) -> object """
        ...

    @property
    def RangeSelection(self) -> Range:
        """ Get: RangeSelection(self: IWindow) -> Range """
        ...

    @property
    def ScrollColumn(self) -> int:
        """
        Get: ScrollColumn(self: IWindow) -> int
        Set: ScrollColumn(self: IWindow) = value
        """
        ...

    @property
    def ScrollRow(self) -> int:
        """
        Get: ScrollRow(self: IWindow) -> int
        Set: ScrollRow(self: IWindow) = value
        """
        ...

    @property
    def SelectedSheets(self) -> Sheets:
        """ Get: SelectedSheets(self: IWindow) -> Sheets """
        ...

    @property
    def Selection(self) -> object:
        """ Get: Selection(self: IWindow) -> object """
        ...

    @property
    def SheetViews(self) -> SheetViews:
        """ Get: SheetViews(self: IWindow) -> SheetViews """
        ...

    @property
    def Split(self) -> bool:
        """
        Get: Split(self: IWindow) -> bool
        Set: Split(self: IWindow) = value
        """
        ...

    @property
    def SplitColumn(self) -> int:
        """
        Get: SplitColumn(self: IWindow) -> int
        Set: SplitColumn(self: IWindow) = value
        """
        ...

    @property
    def SplitHorizontal(self) -> float:
        """
        Get: SplitHorizontal(self: IWindow) -> float
        Set: SplitHorizontal(self: IWindow) = value
        """
        ...

    @property
    def SplitRow(self) -> int:
        """
        Get: SplitRow(self: IWindow) -> int
        Set: SplitRow(self: IWindow) = value
        """
        ...

    @property
    def SplitVertical(self) -> float:
        """
        Get: SplitVertical(self: IWindow) -> float
        Set: SplitVertical(self: IWindow) = value
        """
        ...

    @property
    def TabRatio(self) -> float:
        """
        Get: TabRatio(self: IWindow) -> float
        Set: TabRatio(self: IWindow) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: IWindow) -> float
        Set: Top(self: IWindow) = value
        """
        ...

    @property
    def Type(self) -> XlWindowType:
        """ Get: Type(self: IWindow) -> XlWindowType """
        ...

    @property
    def UsableHeight(self) -> float:
        """ Get: UsableHeight(self: IWindow) -> float """
        ...

    @property
    def UsableWidth(self) -> float:
        """ Get: UsableWidth(self: IWindow) -> float """
        ...

    @property
    def View(self) -> XlWindowView:
        """
        Get: View(self: IWindow) -> XlWindowView
        Set: View(self: IWindow) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: IWindow) -> bool
        Set: Visible(self: IWindow) = value
        """
        ...

    @property
    def VisibleRange(self) -> Range:
        """ Get: VisibleRange(self: IWindow) -> Range """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: IWindow) -> float
        Set: Width(self: IWindow) = value
        """
        ...

    @property
    def WindowNumber(self) -> int:
        """ Get: WindowNumber(self: IWindow) -> int """
        ...

    @property
    def WindowState(self) -> XlWindowState:
        """
        Get: WindowState(self: IWindow) -> XlWindowState
        Set: WindowState(self: IWindow) = value
        """
        ...

    @property
    def Zoom(self) -> object:
        """
        Get: Zoom(self: IWindow) -> object
        Set: Zoom(self: IWindow) = value
        """
        ...

    @property
    def _DisplayRightToLeft(self) -> bool:
        """
        Get: _DisplayRightToLeft(self: IWindow) -> bool
        Set: _DisplayRightToLeft(self: IWindow) = value
        """
        ...


    def Activate(self) -> object:
        """ Activate(self: IWindow) -> object """
        ...

    def ActivateNext(self) -> object:
        """ ActivateNext(self: IWindow) -> object """
        ...

    def ActivatePrevious(self) -> object:
        """ ActivatePrevious(self: IWindow) -> object """
        ...

    def Close(self, SaveChanges:object, Filename:object, RouteWorkbook:object) -> bool:
        """ Close(self: IWindow, SaveChanges: object, Filename: object, RouteWorkbook: object) -> bool """
        ...

    def LargeScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> object:
        """ LargeScroll(self: IWindow, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        ...

    def NewWindow(self) -> Window:
        """ NewWindow(self: IWindow) -> Window """
        ...

    def PointsToScreenPixelsX(self, Points:int) -> int:
        """ PointsToScreenPixelsX(self: IWindow, Points: int) -> int """
        ...

    def PointsToScreenPixelsY(self, Points:int) -> int:
        """ PointsToScreenPixelsY(self: IWindow, Points: int) -> int """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object) -> object:
        """ PrintOut(self: IWindow, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        ...

    def PrintPreview(self, EnableChanges:object) -> object:
        """ PrintPreview(self: IWindow, EnableChanges: object) -> object """
        ...

    def RangeFromPoint(self, x:int, y:int) -> object:
        """ RangeFromPoint(self: IWindow, x: int, y: int) -> object """
        ...

    def ScrollIntoView(self, Left:int, Top:int, Width:int, Height:int, Start:object): # -> 
        """ ScrollIntoView(self: IWindow, Left: int, Top: int, Width: int, Height: int, Start: object) """
        ...

    def ScrollWorkbookTabs(self, Sheets:object, Position:object) -> object:
        """ ScrollWorkbookTabs(self: IWindow, Sheets: object, Position: object) -> object """
        ...

    def SmallScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> object:
        """ SmallScroll(self: IWindow, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object) -> object:
        """ _PrintOut(self: IWindow, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        ...


class IWindows(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IWindows) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IWindows) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IWindows) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IWindows) -> object """
        ...

    @property
    def SyncScrollingSideBySide(self) -> bool:
        """
        Get: SyncScrollingSideBySide(self: IWindows) -> bool
        Set: SyncScrollingSideBySide(self: IWindows) = value
        """
        ...


    def Arrange(self, ArrangeStyle:XlArrangeStyle, ActiveWorkbook:object, SyncHorizontal:object, SyncVertical:object) -> object:
        """ Arrange(self: IWindows, ArrangeStyle: XlArrangeStyle, ActiveWorkbook: object, SyncHorizontal: object, SyncVertical: object) -> object """
        ...

    def BreakSideBySide(self) -> bool:
        """ BreakSideBySide(self: IWindows) -> bool """
        ...

    def CompareSideBySideWith(self, WindowName:object) -> bool:
        """ CompareSideBySideWith(self: IWindows, WindowName: object) -> bool """
        ...

    def ResetPositionsSideBySide(self): # -> 
        """ ResetPositionsSideBySide(self: IWindows) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IWorkbookConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IWorkbookConnection) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IWorkbookConnection) -> XlCreator """
        ...

    @property
    def DataFeedConnection(self) -> DataFeedConnection:
        """ Get: DataFeedConnection(self: IWorkbookConnection) -> DataFeedConnection """
        ...

    @property
    def Description(self) -> str:
        """
        Get: Description(self: IWorkbookConnection) -> str
        Set: Description(self: IWorkbookConnection) = value
        """
        ...

    @property
    def InModel(self) -> bool:
        """ Get: InModel(self: IWorkbookConnection) -> bool """
        ...

    @property
    def ModelConnection(self) -> ModelConnection:
        """ Get: ModelConnection(self: IWorkbookConnection) -> ModelConnection """
        ...

    @property
    def ModelTables(self) -> ModelTables:
        """ Get: ModelTables(self: IWorkbookConnection) -> ModelTables """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IWorkbookConnection) -> str
        Set: Name(self: IWorkbookConnection) = value
        """
        ...

    @property
    def ODBCConnection(self) -> ODBCConnection:
        """ Get: ODBCConnection(self: IWorkbookConnection) -> ODBCConnection """
        ...

    @property
    def OLEDBConnection(self) -> OLEDBConnection:
        """ Get: OLEDBConnection(self: IWorkbookConnection) -> OLEDBConnection """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IWorkbookConnection) -> object """
        ...

    @property
    def Ranges(self) -> Ranges:
        """ Get: Ranges(self: IWorkbookConnection) -> Ranges """
        ...

    @property
    def RefreshWithRefreshAll(self) -> bool:
        """
        Get: RefreshWithRefreshAll(self: IWorkbookConnection) -> bool
        Set: RefreshWithRefreshAll(self: IWorkbookConnection) = value
        """
        ...

    @property
    def TextConnection(self) -> TextConnection:
        """ Get: TextConnection(self: IWorkbookConnection) -> TextConnection """
        ...

    @property
    def Type(self) -> XlConnectionType:
        """ Get: Type(self: IWorkbookConnection) -> XlConnectionType """
        ...

    @property
    def WorksheetDataConnection(self) -> WorksheetDataConnection:
        """ Get: WorksheetDataConnection(self: IWorkbookConnection) -> WorksheetDataConnection """
        ...

    @property
    def _Default(self) -> str:
        """
        Get: _Default(self: IWorkbookConnection) -> str
        Set: _Default(self: IWorkbookConnection) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: IWorkbookConnection) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: IWorkbookConnection) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IWorkbookEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Activate(self): # -> 
        """ Activate(self: IWorkbookEvents) """
        ...

    def AddinInstall(self): # -> 
        """ AddinInstall(self: IWorkbookEvents) """
        ...

    def AddinUninstall(self): # -> 
        """ AddinUninstall(self: IWorkbookEvents) """
        ...

    def AfterSave(self, Success:bool): # -> 
        """ AfterSave(self: IWorkbookEvents, Success: bool) """
        ...

    def AfterXmlExport(self, Map:XmlMap, Url:str, Result:XlXmlExportResult): # -> 
        """ AfterXmlExport(self: IWorkbookEvents, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        ...

    def AfterXmlImport(self, Map:XmlMap, IsRefresh:bool, Result:XlXmlImportResult): # -> 
        """ AfterXmlImport(self: IWorkbookEvents, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        ...

    def BeforeClose(self, Cancel) -> bool:
        """ BeforeClose(self: IWorkbookEvents) -> bool """
        ...

    def BeforePrint(self, Cancel) -> bool:
        """ BeforePrint(self: IWorkbookEvents) -> bool """
        ...

    def BeforeSave(self, SaveAsUI, Cancel) -> bool:
        """ BeforeSave(self: IWorkbookEvents, SaveAsUI: bool) -> bool """
        ...

    def BeforeXmlExport(self, Map, Url, Cancel) -> bool:
        """ BeforeXmlExport(self: IWorkbookEvents, Map: XmlMap, Url: str) -> bool """
        ...

    def BeforeXmlImport(self, Map, Url, IsRefresh, Cancel) -> bool:
        """ BeforeXmlImport(self: IWorkbookEvents, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        ...

    def Deactivate(self): # -> 
        """ Deactivate(self: IWorkbookEvents) """
        ...

    def ModelChange(self, Changes:ModelChanges): # -> 
        """ ModelChange(self: IWorkbookEvents, Changes: ModelChanges) """
        ...

    def NewChart(self, Ch:Chart): # -> 
        """ NewChart(self: IWorkbookEvents, Ch: Chart) """
        ...

    def NewSheet(self, Sh:object): # -> 
        """ NewSheet(self: IWorkbookEvents, Sh: object) """
        ...

    def Open(self): # -> 
        """ Open(self: IWorkbookEvents) """
        ...

    def PivotTableCloseConnection(self, Target:PivotTable): # -> 
        """ PivotTableCloseConnection(self: IWorkbookEvents, Target: PivotTable) """
        ...

    def PivotTableOpenConnection(self, Target:PivotTable): # -> 
        """ PivotTableOpenConnection(self: IWorkbookEvents, Target: PivotTable) """
        ...

    def RowsetComplete(self, Description:str, Sheet:str, Success:bool): # -> 
        """ RowsetComplete(self: IWorkbookEvents, Description: str, Sheet: str, Success: bool) """
        ...

    def SheetActivate(self, Sh:object): # -> 
        """ SheetActivate(self: IWorkbookEvents, Sh: object) """
        ...

    def SheetBeforeDelete(self, Sh:object): # -> 
        """ SheetBeforeDelete(self: IWorkbookEvents, Sh: object) """
        ...

    def SheetBeforeDoubleClick(self, Sh, Target, Cancel) -> bool:
        """ SheetBeforeDoubleClick(self: IWorkbookEvents, Sh: object, Target: Range) -> bool """
        ...

    def SheetBeforeRightClick(self, Sh, Target, Cancel) -> bool:
        """ SheetBeforeRightClick(self: IWorkbookEvents, Sh: object, Target: Range) -> bool """
        ...

    def SheetCalculate(self, Sh:object): # -> 
        """ SheetCalculate(self: IWorkbookEvents, Sh: object) """
        ...

    def SheetChange(self, Sh:object, Target:Range): # -> 
        """ SheetChange(self: IWorkbookEvents, Sh: object, Target: Range) """
        ...

    def SheetDeactivate(self, Sh:object): # -> 
        """ SheetDeactivate(self: IWorkbookEvents, Sh: object) """
        ...

    def SheetFollowHyperlink(self, Sh:object, Target:Hyperlink): # -> 
        """ SheetFollowHyperlink(self: IWorkbookEvents, Sh: object, Target: Hyperlink) """
        ...

    def SheetLensGalleryRenderComplete(self, Sh:object): # -> 
        """ SheetLensGalleryRenderComplete(self: IWorkbookEvents, Sh: object) """
        ...

    def SheetPivotTableAfterValueChange(self, Sh:object, TargetPivotTable:PivotTable, TargetRange:Range): # -> 
        """ SheetPivotTableAfterValueChange(self: IWorkbookEvents, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        ...

    def SheetPivotTableBeforeAllocateChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ SheetPivotTableBeforeAllocateChanges(self: IWorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def SheetPivotTableBeforeCommitChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ SheetPivotTableBeforeCommitChanges(self: IWorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def SheetPivotTableBeforeDiscardChanges(self, Sh:object, TargetPivotTable:PivotTable, ValueChangeStart:int, ValueChangeEnd:int): # -> 
        """ SheetPivotTableBeforeDiscardChanges(self: IWorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        ...

    def SheetPivotTableChangeSync(self, Sh:object, Target:PivotTable): # -> 
        """ SheetPivotTableChangeSync(self: IWorkbookEvents, Sh: object, Target: PivotTable) """
        ...

    def SheetPivotTableUpdate(self, Sh:object, Target:PivotTable): # -> 
        """ SheetPivotTableUpdate(self: IWorkbookEvents, Sh: object, Target: PivotTable) """
        ...

    def SheetSelectionChange(self, Sh:object, Target:Range): # -> 
        """ SheetSelectionChange(self: IWorkbookEvents, Sh: object, Target: Range) """
        ...

    def SheetTableUpdate(self, Sh:object, Target:TableObject): # -> 
        """ SheetTableUpdate(self: IWorkbookEvents, Sh: object, Target: TableObject) """
        ...

    def Sync(self, SyncEventType): # ->  # Not found arg types: {'SyncEventType': 'MsoSyncEventType'}
        """ Sync(self: IWorkbookEvents, SyncEventType: MsoSyncEventType) """
        ...

    def WindowActivate(self, Wn:Window): # -> 
        """ WindowActivate(self: IWorkbookEvents, Wn: Window) """
        ...

    def WindowDeactivate(self, Wn:Window): # -> 
        """ WindowDeactivate(self: IWorkbookEvents, Wn: Window) """
        ...

    def WindowResize(self, Wn:Window): # -> 
        """ WindowResize(self: IWorkbookEvents, Wn: Window) """
        ...


class IWorksheetDataConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IWorksheetDataConnection) -> Application """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: IWorksheetDataConnection) -> object
        Set: CommandText(self: IWorksheetDataConnection) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: IWorksheetDataConnection) -> XlCmdType
        Set: CommandType(self: IWorksheetDataConnection) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """ Get: Connection(self: IWorksheetDataConnection) -> object """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IWorksheetDataConnection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IWorksheetDataConnection) -> object """
        ...



class IWorksheetFunction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IWorksheetFunction) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IWorksheetFunction) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IWorksheetFunction) -> object """
        ...


    def AccrInt(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object) -> float:
        """ AccrInt(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        ...

    def AccrIntM(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ AccrIntM(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def Acos(self, Arg1:float) -> float:
        """ Acos(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Acosh(self, Arg1:float) -> float:
        """ Acosh(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Acot(self, Arg1:float) -> float:
        """ Acot(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Acoth(self, Arg1:float) -> float:
        """ Acoth(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Aggregate(self, Arg1:float, Arg2:float, Arg3:Range, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Aggregate(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: Range, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def AmorDegrc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object) -> float:
        """ AmorDegrc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        ...

    def AmorLinc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object) -> float:
        """ AmorLinc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        ...

    def And(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> bool:
        """ And(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        ...

    def Arabic(self, Arg1:str) -> float:
        """ Arabic(self: IWorksheetFunction, Arg1: str) -> float """
        ...

    def Asc(self, Arg1:str) -> str:
        """ Asc(self: IWorksheetFunction, Arg1: str) -> str """
        ...

    def Asin(self, Arg1:float) -> float:
        """ Asin(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Asinh(self, Arg1:float) -> float:
        """ Asinh(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Atan2(self, Arg1:float, Arg2:float) -> float:
        """ Atan2(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Atanh(self, Arg1:float) -> float:
        """ Atanh(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def AveDev(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ AveDev(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Average(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Average(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def AverageIf(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ AverageIf(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def AverageIfs(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object) -> float:
        """ AverageIfs(self: IWorksheetFunction, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object) -> float """
        ...

    def BahtText(self, Arg1:float) -> str:
        """ BahtText(self: IWorksheetFunction, Arg1: float) -> str """
        ...

    def Base(self, Arg1:float, Arg2:float, Arg3:object) -> str:
        """ Base(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: object) -> str """
        ...

    def BesselI(self, Arg1:object, Arg2:object) -> float:
        """ BesselI(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def BesselJ(self, Arg1:object, Arg2:object) -> float:
        """ BesselJ(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def BesselK(self, Arg1:object, Arg2:object) -> float:
        """ BesselK(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def BesselY(self, Arg1:object, Arg2:object) -> float:
        """ BesselY(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def BetaDist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ BetaDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def BetaInv(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ BetaInv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def Beta_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool, Arg5:object, Arg6:object) -> float:
        """ Beta_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool, Arg5: object, Arg6: object) -> float """
        ...

    def Beta_Inv(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ Beta_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def Bin2Dec(self, Arg1:object) -> str:
        """ Bin2Dec(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def Bin2Hex(self, Arg1:object, Arg2:object) -> str:
        """ Bin2Hex(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Bin2Oct(self, Arg1:object, Arg2:object) -> str:
        """ Bin2Oct(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def BinomDist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ BinomDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def Binom_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ Binom_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def Binom_Dist_Range(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object) -> float:
        """ Binom_Dist_Range(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object) -> float """
        ...

    def Binom_Inv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Binom_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Bitand(self, Arg1:float, Arg2:float) -> float:
        """ Bitand(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Bitlshift(self, Arg1:float, Arg2:float) -> float:
        """ Bitlshift(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Bitor(self, Arg1:float, Arg2:float) -> float:
        """ Bitor(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Bitrshift(self, Arg1:float, Arg2:float) -> float:
        """ Bitrshift(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Bitxor(self, Arg1:float, Arg2:float) -> float:
        """ Bitxor(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Ceiling(self, Arg1:float, Arg2:float) -> float:
        """ Ceiling(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Ceiling_Math(self, Arg1:float, Arg2:object, Arg3:object) -> float:
        """ Ceiling_Math(self: IWorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        ...

    def Ceiling_Precise(self, Arg1:float, Arg2:object) -> float:
        """ Ceiling_Precise(self: IWorksheetFunction, Arg1: float, Arg2: object) -> float """
        ...

    def ChiDist(self, Arg1:float, Arg2:float) -> float:
        """ ChiDist(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def ChiInv(self, Arg1:float, Arg2:float) -> float:
        """ ChiInv(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def ChiSq_Dist(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ ChiSq_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def ChiSq_Dist_RT(self, Arg1:float, Arg2:float) -> float:
        """ ChiSq_Dist_RT(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def ChiSq_Inv(self, Arg1:float, Arg2:float) -> float:
        """ ChiSq_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def ChiSq_Inv_RT(self, Arg1:float, Arg2:float) -> float:
        """ ChiSq_Inv_RT(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def ChiSq_Test(self, Arg1:object, Arg2:object) -> float:
        """ ChiSq_Test(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def ChiTest(self, Arg1:object, Arg2:object) -> float:
        """ ChiTest(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Choose(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Choose(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Clean(self, Arg1:str) -> str:
        """ Clean(self: IWorksheetFunction, Arg1: str) -> str """
        ...

    def Combin(self, Arg1:float, Arg2:float) -> float:
        """ Combin(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Combina(self, Arg1:float, Arg2:float) -> float:
        """ Combina(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Complex(self, Arg1:object, Arg2:object, Arg3:object) -> str:
        """ Complex(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> str """
        ...

    def Confidence(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Confidence(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Confidence_Norm(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Confidence_Norm(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Confidence_T(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Confidence_T(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Convert(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ Convert(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def Correl(self, Arg1:object, Arg2:object) -> float:
        """ Correl(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Cosh(self, Arg1:float) -> float:
        """ Cosh(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Cot(self, Arg1:float) -> float:
        """ Cot(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Coth(self, Arg1:float) -> float:
        """ Coth(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Count(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Count(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def CountA(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ CountA(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def CountBlank(self, Arg1:Range) -> float:
        """ CountBlank(self: IWorksheetFunction, Arg1: Range) -> float """
        ...

    def CountIf(self, Arg1:Range, Arg2:object) -> float:
        """ CountIf(self: IWorksheetFunction, Arg1: Range, Arg2: object) -> float """
        ...

    def CountIfs(self, Arg1:Range, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ CountIfs(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def CoupDayBs(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupDayBs(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def CoupDays(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupDays(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def CoupDaysNc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupDaysNc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def CoupNcd(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupNcd(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def CoupNum(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupNum(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def CoupPcd(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupPcd(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def Covar(self, Arg1:object, Arg2:object) -> float:
        """ Covar(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Covariance_P(self, Arg1:object, Arg2:object) -> float:
        """ Covariance_P(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Covariance_S(self, Arg1:object, Arg2:object) -> float:
        """ Covariance_S(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def CritBinom(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ CritBinom(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Csc(self, Arg1:float) -> float:
        """ Csc(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Csch(self, Arg1:float) -> float:
        """ Csch(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def CumIPmt(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ CumIPmt(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def CumPrinc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ CumPrinc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def DAverage(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DAverage(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def Days(self, Arg1:object, Arg2:object) -> float:
        """ Days(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Days360(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ Days360(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def Db(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:object) -> float:
        """ Db(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object) -> float """
        ...

    def Dbcs(self, Arg1:str) -> str:
        """ Dbcs(self: IWorksheetFunction, Arg1: str) -> str """
        ...

    def DCount(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DCount(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DCountA(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DCountA(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def Ddb(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:object) -> float:
        """ Ddb(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object) -> float """
        ...

    def Dec2Bin(self, Arg1:object, Arg2:object) -> str:
        """ Dec2Bin(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Dec2Hex(self, Arg1:object, Arg2:object) -> str:
        """ Dec2Hex(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Dec2Oct(self, Arg1:object, Arg2:object) -> str:
        """ Dec2Oct(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Decimal(self, Arg1:str, Arg2:float) -> float:
        """ Decimal(self: IWorksheetFunction, Arg1: str, Arg2: float) -> float """
        ...

    def Degrees(self, Arg1:float) -> float:
        """ Degrees(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Delta(self, Arg1:object, Arg2:object) -> float:
        """ Delta(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def DevSq(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ DevSq(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def DGet(self, Arg1:Range, Arg2:object, Arg3:object) -> object:
        """ DGet(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> object """
        ...

    def Disc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ Disc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def DMax(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DMax(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DMin(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DMin(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def Dollar(self, Arg1:float, Arg2:object) -> str:
        """ Dollar(self: IWorksheetFunction, Arg1: float, Arg2: object) -> str """
        ...

    def DollarDe(self, Arg1:object, Arg2:object) -> float:
        """ DollarDe(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def DollarFr(self, Arg1:object, Arg2:object) -> float:
        """ DollarFr(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def DProduct(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DProduct(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DStDev(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DStDev(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DStDevP(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DStDevP(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DSum(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DSum(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def Dummy19(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Dummy19(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Dummy21(self, Arg1:float, Arg2:float) -> float:
        """ Dummy21(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Duration(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ Duration(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def DVar(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DVar(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DVarP(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DVarP(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def EDate(self, Arg1:object, Arg2:object) -> float:
        """ EDate(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Effect(self, Arg1:object, Arg2:object) -> float:
        """ Effect(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def EncodeURL(self, Arg1:str) -> object:
        """ EncodeURL(self: IWorksheetFunction, Arg1: str) -> object """
        ...

    def EoMonth(self, Arg1:object, Arg2:object) -> float:
        """ EoMonth(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Erf(self, Arg1:object, Arg2:object) -> float:
        """ Erf(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def ErfC(self, Arg1:object) -> float:
        """ ErfC(self: IWorksheetFunction, Arg1: object) -> float """
        ...

    def ErfC_Precise(self, Arg1:object) -> float:
        """ ErfC_Precise(self: IWorksheetFunction, Arg1: object) -> float """
        ...

    def Erf_Precise(self, Arg1:object) -> float:
        """ Erf_Precise(self: IWorksheetFunction, Arg1: object) -> float """
        ...

    def Even(self, Arg1:float) -> float:
        """ Even(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def ExponDist(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ ExponDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def Expon_Dist(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ Expon_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def Fact(self, Arg1:float) -> float:
        """ Fact(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def FactDouble(self, Arg1:object) -> float:
        """ FactDouble(self: IWorksheetFunction, Arg1: object) -> float """
        ...

    def FDist(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ FDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def FilterXML(self, Arg1:str, Arg2:str) -> object:
        """ FilterXML(self: IWorksheetFunction, Arg1: str, Arg2: str) -> object """
        ...

    def Find(self, Arg1:str, Arg2:str, Arg3:object) -> float:
        """ Find(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        ...

    def FindB(self, Arg1:str, Arg2:str, Arg3:object) -> float:
        """ FindB(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        ...

    def FInv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ FInv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Fisher(self, Arg1:float) -> float:
        """ Fisher(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def FisherInv(self, Arg1:float) -> float:
        """ FisherInv(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Fixed(self, Arg1:float, Arg2:object, Arg3:object) -> str:
        """ Fixed(self: IWorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> str """
        ...

    def Floor(self, Arg1:float, Arg2:float) -> float:
        """ Floor(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Floor_Math(self, Arg1:float, Arg2:object, Arg3:object) -> float:
        """ Floor_Math(self: IWorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        ...

    def Floor_Precise(self, Arg1:float, Arg2:object) -> float:
        """ Floor_Precise(self: IWorksheetFunction, Arg1: float, Arg2: object) -> float """
        ...

    def Forecast(self, Arg1:float, Arg2:object, Arg3:object) -> float:
        """ Forecast(self: IWorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        ...

    def Frequency(self, Arg1:object, Arg2:object) -> object:
        """ Frequency(self: IWorksheetFunction, Arg1: object, Arg2: object) -> object """
        ...

    def FTest(self, Arg1:object, Arg2:object) -> float:
        """ FTest(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Fv(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ Fv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def FVSchedule(self, Arg1:object, Arg2:object) -> float:
        """ FVSchedule(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def F_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ F_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def F_Dist_RT(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ F_Dist_RT(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def F_Inv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ F_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def F_Inv_RT(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ F_Inv_RT(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def F_Test(self, Arg1:object, Arg2:object) -> float:
        """ F_Test(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Gamma(self, Arg1:float) -> float:
        """ Gamma(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def GammaDist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ GammaDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def GammaInv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ GammaInv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def GammaLn(self, Arg1:float) -> float:
        """ GammaLn(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def GammaLn_Precise(self, Arg1:float) -> float:
        """ GammaLn_Precise(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Gamma_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ Gamma_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def Gamma_Inv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Gamma_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Gauss(self, Arg1:float) -> float:
        """ Gauss(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Gcd(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Gcd(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def GeoMean(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ GeoMean(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def GeStep(self, Arg1:object, Arg2:object) -> float:
        """ GeStep(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Growth(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ Growth(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def HarMean(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ HarMean(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Hex2Bin(self, Arg1:object, Arg2:object) -> str:
        """ Hex2Bin(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Hex2Dec(self, Arg1:object) -> str:
        """ Hex2Dec(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def Hex2Oct(self, Arg1:object, Arg2:object) -> str:
        """ Hex2Oct(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def HLookup(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ HLookup(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def HypGeomDist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float) -> float:
        """ HypGeomDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        ...

    def HypGeom_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:bool) -> float:
        """ HypGeom_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: bool) -> float """
        ...

    def IfError(self, Arg1:object, Arg2:object) -> object:
        """ IfError(self: IWorksheetFunction, Arg1: object, Arg2: object) -> object """
        ...

    def IfNa(self, Arg1:object, Arg2:object) -> object:
        """ IfNa(self: IWorksheetFunction, Arg1: object, Arg2: object) -> object """
        ...

    def ImAbs(self, Arg1:object) -> str:
        """ ImAbs(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def Imaginary(self, Arg1:object) -> float:
        """ Imaginary(self: IWorksheetFunction, Arg1: object) -> float """
        ...

    def ImArgument(self, Arg1:object) -> str:
        """ ImArgument(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImConjugate(self, Arg1:object) -> str:
        """ ImConjugate(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImCos(self, Arg1:object) -> str:
        """ ImCos(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImCosh(self, Arg1:object) -> str:
        """ ImCosh(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImCot(self, Arg1:object) -> str:
        """ ImCot(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImCsc(self, Arg1:object) -> str:
        """ ImCsc(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImCsch(self, Arg1:object) -> str:
        """ ImCsch(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImDiv(self, Arg1:object, Arg2:object) -> str:
        """ ImDiv(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def ImExp(self, Arg1:object) -> str:
        """ ImExp(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImLn(self, Arg1:object) -> str:
        """ ImLn(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImLog10(self, Arg1:object) -> str:
        """ ImLog10(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImLog2(self, Arg1:object) -> str:
        """ ImLog2(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImPower(self, Arg1:object, Arg2:object) -> str:
        """ ImPower(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def ImProduct(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> str:
        """ ImProduct(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> str """
        ...

    def ImReal(self, Arg1:object) -> float:
        """ ImReal(self: IWorksheetFunction, Arg1: object) -> float """
        ...

    def ImSec(self, Arg1:object) -> str:
        """ ImSec(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImSech(self, Arg1:object) -> str:
        """ ImSech(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImSin(self, Arg1:object) -> str:
        """ ImSin(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImSinh(self, Arg1:object) -> str:
        """ ImSinh(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImSqrt(self, Arg1:object) -> str:
        """ ImSqrt(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def ImSub(self, Arg1:object, Arg2:object) -> str:
        """ ImSub(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def ImSum(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> str:
        """ ImSum(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> str """
        ...

    def ImTan(self, Arg1:object) -> str:
        """ ImTan(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def Index(self, Arg1:object, Arg2:float, Arg3:object, Arg4:object) -> object:
        """ Index(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object, Arg4: object) -> object """
        ...

    def Intercept(self, Arg1:object, Arg2:object) -> float:
        """ Intercept(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def IntRate(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ IntRate(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def Ipmt(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:object, Arg6:object) -> float:
        """ Ipmt(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object, Arg6: object) -> float """
        ...

    def Irr(self, Arg1:object, Arg2:object) -> float:
        """ Irr(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def IsErr(self, Arg1:object) -> bool:
        """ IsErr(self: IWorksheetFunction, Arg1: object) -> bool """
        ...

    def IsError(self, Arg1:object) -> bool:
        """ IsError(self: IWorksheetFunction, Arg1: object) -> bool """
        ...

    def IsEven(self, Arg1:object) -> bool:
        """ IsEven(self: IWorksheetFunction, Arg1: object) -> bool """
        ...

    def IsFormula(self, Arg1:Range) -> bool:
        """ IsFormula(self: IWorksheetFunction, Arg1: Range) -> bool """
        ...

    def IsLogical(self, Arg1:object) -> bool:
        """ IsLogical(self: IWorksheetFunction, Arg1: object) -> bool """
        ...

    def IsNA(self, Arg1:object) -> bool:
        """ IsNA(self: IWorksheetFunction, Arg1: object) -> bool """
        ...

    def IsNonText(self, Arg1:object) -> bool:
        """ IsNonText(self: IWorksheetFunction, Arg1: object) -> bool """
        ...

    def IsNumber(self, Arg1:object) -> bool:
        """ IsNumber(self: IWorksheetFunction, Arg1: object) -> bool """
        ...

    def IsOdd(self, Arg1:object) -> bool:
        """ IsOdd(self: IWorksheetFunction, Arg1: object) -> bool """
        ...

    def IsoWeekNum(self, Arg1:float, Arg2:object) -> float:
        """ IsoWeekNum(self: IWorksheetFunction, Arg1: float, Arg2: object) -> float """
        ...

    def ISO_Ceiling(self, Arg1:float, Arg2:object) -> float:
        """ ISO_Ceiling(self: IWorksheetFunction, Arg1: float, Arg2: object) -> float """
        ...

    def Ispmt(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float) -> float:
        """ Ispmt(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        ...

    def IsText(self, Arg1:object) -> bool:
        """ IsText(self: IWorksheetFunction, Arg1: object) -> bool """
        ...

    def IsThaiDigit(self, Arg1:str) -> bool:
        """ IsThaiDigit(self: IWorksheetFunction, Arg1: str) -> bool """
        ...

    def Kurt(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Kurt(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Large(self, Arg1:object, Arg2:float) -> float:
        """ Large(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Lcm(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Lcm(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def LinEst(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ LinEst(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def Ln(self, Arg1:float) -> float:
        """ Ln(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Log(self, Arg1:float, Arg2:object) -> float:
        """ Log(self: IWorksheetFunction, Arg1: float, Arg2: object) -> float """
        ...

    def Log10(self, Arg1:float) -> float:
        """ Log10(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def LogEst(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ LogEst(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def LogInv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ LogInv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def LogNormDist(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ LogNormDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def LogNorm_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ LogNorm_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def LogNorm_Inv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ LogNorm_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Lookup(self, Arg1:object, Arg2:object, Arg3:object) -> object:
        """ Lookup(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> object """
        ...

    def Match(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ Match(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def Max(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Max(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def MDeterm(self, Arg1:object) -> float:
        """ MDeterm(self: IWorksheetFunction, Arg1: object) -> float """
        ...

    def MDuration(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ MDuration(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def Median(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Median(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Min(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Min(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def MInverse(self, Arg1:object) -> object:
        """ MInverse(self: IWorksheetFunction, Arg1: object) -> object """
        ...

    def MIrr(self, Arg1:object, Arg2:float, Arg3:float) -> float:
        """ MIrr(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: float) -> float """
        ...

    def MMult(self, Arg1:object, Arg2:object) -> object:
        """ MMult(self: IWorksheetFunction, Arg1: object, Arg2: object) -> object """
        ...

    def Mode(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Mode(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Mode_Mult(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Mode_Mult(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Mode_Sngl(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Mode_Sngl(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def MRound(self, Arg1:object, Arg2:object) -> float:
        """ MRound(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def MultiNomial(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ MultiNomial(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Munit(self, Arg1:float) -> object:
        """ Munit(self: IWorksheetFunction, Arg1: float) -> object """
        ...

    def NegBinomDist(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ NegBinomDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def NegBinom_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ NegBinom_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def NetworkDays(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ NetworkDays(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def NetworkDays_Intl(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ NetworkDays_Intl(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def Nominal(self, Arg1:object, Arg2:object) -> float:
        """ Nominal(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def NormDist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ NormDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def NormInv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ NormInv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def NormSDist(self, Arg1:float) -> float:
        """ NormSDist(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def NormSInv(self, Arg1:float) -> float:
        """ NormSInv(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Norm_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ Norm_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def Norm_Inv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Norm_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Norm_S_Dist(self, Arg1:float, Arg2:bool) -> float:
        """ Norm_S_Dist(self: IWorksheetFunction, Arg1: float, Arg2: bool) -> float """
        ...

    def Norm_S_Inv(self, Arg1:float) -> float:
        """ Norm_S_Inv(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def NPer(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ NPer(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def Npv(self, Arg1:float, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Npv(self: IWorksheetFunction, Arg1: float, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def NumberValue(self, Arg1:str, Arg2:str, Arg3:str) -> float:
        """ NumberValue(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: str) -> float """
        ...

    def Oct2Bin(self, Arg1:object, Arg2:object) -> str:
        """ Oct2Bin(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Oct2Dec(self, Arg1:object) -> str:
        """ Oct2Dec(self: IWorksheetFunction, Arg1: object) -> str """
        ...

    def Oct2Hex(self, Arg1:object, Arg2:object) -> str:
        """ Oct2Hex(self: IWorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Odd(self, Arg1:float) -> float:
        """ Odd(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def OddFPrice(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object) -> float:
        """ OddFPrice(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object) -> float """
        ...

    def OddFYield(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object) -> float:
        """ OddFYield(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object) -> float """
        ...

    def OddLPrice(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object) -> float:
        """ OddLPrice(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> float """
        ...

    def OddLYield(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object) -> float:
        """ OddLYield(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> float """
        ...

    def Or(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> bool:
        """ Or(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        ...

    def PDuration(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ PDuration(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Pearson(self, Arg1:object, Arg2:object) -> float:
        """ Pearson(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Percentile(self, Arg1:object, Arg2:float) -> float:
        """ Percentile(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Percentile_Exc(self, Arg1:object, Arg2:float) -> float:
        """ Percentile_Exc(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Percentile_Inc(self, Arg1:object, Arg2:float) -> float:
        """ Percentile_Inc(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def PercentRank(self, Arg1:object, Arg2:float, Arg3:object) -> float:
        """ PercentRank(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        ...

    def PercentRank_Exc(self, Arg1:object, Arg2:float, Arg3:object) -> float:
        """ PercentRank_Exc(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        ...

    def PercentRank_Inc(self, Arg1:object, Arg2:float, Arg3:object) -> float:
        """ PercentRank_Inc(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        ...

    def Permut(self, Arg1:float, Arg2:float) -> float:
        """ Permut(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Permutationa(self, Arg1:float, Arg2:float) -> float:
        """ Permutationa(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Phi(self, Arg1:float) -> float:
        """ Phi(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Phonetic(self, Arg1:Range) -> str:
        """ Phonetic(self: IWorksheetFunction, Arg1: Range) -> str """
        ...

    def Pi(self) -> float:
        """ Pi(self: IWorksheetFunction) -> float """
        ...

    def Pmt(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ Pmt(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def Poisson(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ Poisson(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def Poisson_Dist(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ Poisson_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def Power(self, Arg1:float, Arg2:float) -> float:
        """ Power(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Ppmt(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:object, Arg6:object) -> float:
        """ Ppmt(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object, Arg6: object) -> float """
        ...

    def Price(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object) -> float:
        """ Price(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        ...

    def PriceDisc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ PriceDisc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def PriceMat(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ PriceMat(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def Prob(self, Arg1:object, Arg2:object, Arg3:float, Arg4:object) -> float:
        """ Prob(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: object) -> float """
        ...

    def Product(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Product(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Proper(self, Arg1:str) -> str:
        """ Proper(self: IWorksheetFunction, Arg1: str) -> str """
        ...

    def Pv(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ Pv(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def Quartile(self, Arg1:object, Arg2:float) -> float:
        """ Quartile(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Quartile_Exc(self, Arg1:object, Arg2:float) -> float:
        """ Quartile_Exc(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Quartile_Inc(self, Arg1:object, Arg2:float) -> float:
        """ Quartile_Inc(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Quotient(self, Arg1:object, Arg2:object) -> float:
        """ Quotient(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Radians(self, Arg1:float) -> float:
        """ Radians(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def RandBetween(self, Arg1:object, Arg2:object) -> float:
        """ RandBetween(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Rank(self, Arg1:float, Arg2:Range, Arg3:object) -> float:
        """ Rank(self: IWorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        ...

    def Rank_Avg(self, Arg1:float, Arg2:Range, Arg3:object) -> float:
        """ Rank_Avg(self: IWorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        ...

    def Rank_Eq(self, Arg1:float, Arg2:Range, Arg3:object) -> float:
        """ Rank_Eq(self: IWorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        ...

    def Rate(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ Rate(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def Received(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ Received(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def Replace(self, Arg1:str, Arg2:float, Arg3:float, Arg4:str) -> str:
        """ Replace(self: IWorksheetFunction, Arg1: str, Arg2: float, Arg3: float, Arg4: str) -> str """
        ...

    def ReplaceB(self, Arg1:str, Arg2:float, Arg3:float, Arg4:str) -> str:
        """ ReplaceB(self: IWorksheetFunction, Arg1: str, Arg2: float, Arg3: float, Arg4: str) -> str """
        ...

    def Rept(self, Arg1:str, Arg2:float) -> str:
        """ Rept(self: IWorksheetFunction, Arg1: str, Arg2: float) -> str """
        ...

    def Roman(self, Arg1:float, Arg2:object) -> str:
        """ Roman(self: IWorksheetFunction, Arg1: float, Arg2: object) -> str """
        ...

    def Round(self, Arg1:float, Arg2:float) -> float:
        """ Round(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def RoundBahtDown(self, Arg1:float) -> float:
        """ RoundBahtDown(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def RoundBahtUp(self, Arg1:float) -> float:
        """ RoundBahtUp(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def RoundDown(self, Arg1:float, Arg2:float) -> float:
        """ RoundDown(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def RoundUp(self, Arg1:float, Arg2:float) -> float:
        """ RoundUp(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Rri(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Rri(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def RSq(self, Arg1:object, Arg2:object) -> float:
        """ RSq(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def RTD(self, progID:object, server:object, topic1:object, topic2:object, topic3:object, topic4:object, topic5:object, topic6:object, topic7:object, topic8:object, topic9:object, topic10:object, topic11:object, topic12:object, topic13:object, topic14:object, topic15:object, topic16:object, topic17:object, topic18:object, topic19:object, topic20:object, topic21:object, topic22:object, topic23:object, topic24:object, topic25:object, topic26:object, topic27:object, topic28:object) -> object:
        """ RTD(self: IWorksheetFunction, progID: object, server: object, topic1: object, topic2: object, topic3: object, topic4: object, topic5: object, topic6: object, topic7: object, topic8: object, topic9: object, topic10: object, topic11: object, topic12: object, topic13: object, topic14: object, topic15: object, topic16: object, topic17: object, topic18: object, topic19: object, topic20: object, topic21: object, topic22: object, topic23: object, topic24: object, topic25: object, topic26: object, topic27: object, topic28: object) -> object """
        ...

    def Search(self, Arg1:str, Arg2:str, Arg3:object) -> float:
        """ Search(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        ...

    def SearchB(self, Arg1:str, Arg2:str, Arg3:object) -> float:
        """ SearchB(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        ...

    def Sec(self, Arg1:float) -> float:
        """ Sec(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Sech(self, Arg1:float) -> float:
        """ Sech(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def SeriesSum(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ SeriesSum(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def Sinh(self, Arg1:float) -> float:
        """ Sinh(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def Skew(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Skew(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Skew_p(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Skew_p(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Sln(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Sln(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Slope(self, Arg1:object, Arg2:object) -> float:
        """ Slope(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Small(self, Arg1:object, Arg2:float) -> float:
        """ Small(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def SqrtPi(self, Arg1:object) -> float:
        """ SqrtPi(self: IWorksheetFunction, Arg1: object) -> float """
        ...

    def Standardize(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Standardize(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def StDev(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ StDev(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def StDevP(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ StDevP(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def StDev_P(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ StDev_P(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def StDev_S(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ StDev_S(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def StEyx(self, Arg1:object, Arg2:object) -> float:
        """ StEyx(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Substitute(self, Arg1:str, Arg2:str, Arg3:str, Arg4:object) -> str:
        """ Substitute(self: IWorksheetFunction, Arg1: str, Arg2: str, Arg3: str, Arg4: object) -> str """
        ...

    def Subtotal(self, Arg1:float, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Subtotal(self: IWorksheetFunction, Arg1: float, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Sum(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Sum(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def SumIf(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ SumIf(self: IWorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def SumIfs(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object) -> float:
        """ SumIfs(self: IWorksheetFunction, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object) -> float """
        ...

    def SumProduct(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ SumProduct(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def SumSq(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ SumSq(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def SumX2MY2(self, Arg1:object, Arg2:object) -> float:
        """ SumX2MY2(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def SumX2PY2(self, Arg1:object, Arg2:object) -> float:
        """ SumX2PY2(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def SumXMY2(self, Arg1:object, Arg2:object) -> float:
        """ SumXMY2(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Syd(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float) -> float:
        """ Syd(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        ...

    def Tanh(self, Arg1:float) -> float:
        """ Tanh(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def TBillEq(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ TBillEq(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def TBillPrice(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ TBillPrice(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def TBillYield(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ TBillYield(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def TDist(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ TDist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Text(self, Arg1:object, Arg2:str) -> str:
        """ Text(self: IWorksheetFunction, Arg1: object, Arg2: str) -> str """
        ...

    def ThaiDayOfWeek(self, Arg1:float) -> str:
        """ ThaiDayOfWeek(self: IWorksheetFunction, Arg1: float) -> str """
        ...

    def ThaiDigit(self, Arg1:str) -> str:
        """ ThaiDigit(self: IWorksheetFunction, Arg1: str) -> str """
        ...

    def ThaiMonthOfYear(self, Arg1:float) -> str:
        """ ThaiMonthOfYear(self: IWorksheetFunction, Arg1: float) -> str """
        ...

    def ThaiNumSound(self, Arg1:float) -> str:
        """ ThaiNumSound(self: IWorksheetFunction, Arg1: float) -> str """
        ...

    def ThaiNumString(self, Arg1:float) -> str:
        """ ThaiNumString(self: IWorksheetFunction, Arg1: float) -> str """
        ...

    def ThaiStringLength(self, Arg1:str) -> float:
        """ ThaiStringLength(self: IWorksheetFunction, Arg1: str) -> float """
        ...

    def ThaiYear(self, Arg1:float) -> float:
        """ ThaiYear(self: IWorksheetFunction, Arg1: float) -> float """
        ...

    def TInv(self, Arg1:float, Arg2:float) -> float:
        """ TInv(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Transpose(self, Arg1:object) -> object:
        """ Transpose(self: IWorksheetFunction, Arg1: object) -> object """
        ...

    def Trend(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ Trend(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def Trim(self, Arg1:str) -> str:
        """ Trim(self: IWorksheetFunction, Arg1: str) -> str """
        ...

    def TrimMean(self, Arg1:object, Arg2:float) -> float:
        """ TrimMean(self: IWorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def TTest(self, Arg1:object, Arg2:object, Arg3:float, Arg4:float) -> float:
        """ TTest(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: float) -> float """
        ...

    def T_Dist(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ T_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def T_Dist_2T(self, Arg1:float, Arg2:float) -> float:
        """ T_Dist_2T(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def T_Dist_RT(self, Arg1:float, Arg2:float) -> float:
        """ T_Dist_RT(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def T_Inv(self, Arg1:float, Arg2:float) -> float:
        """ T_Inv(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def T_Inv_2T(self, Arg1:float, Arg2:float) -> float:
        """ T_Inv_2T(self: IWorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def T_Test(self, Arg1:object, Arg2:object, Arg3:float, Arg4:float) -> float:
        """ T_Test(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: float) -> float """
        ...

    def Unichar(self, Arg1:float) -> str:
        """ Unichar(self: IWorksheetFunction, Arg1: float) -> str """
        ...

    def Unicode(self, Arg1:str) -> float:
        """ Unicode(self: IWorksheetFunction, Arg1: str) -> float """
        ...

    def USDollar(self, Arg1:float, Arg2:float) -> str:
        """ USDollar(self: IWorksheetFunction, Arg1: float, Arg2: float) -> str """
        ...

    def Var(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Var(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def VarP(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ VarP(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Var_P(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Var_P(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Var_S(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Var_S(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Vdb(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:float, Arg6:object, Arg7:object) -> float:
        """ Vdb(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: float, Arg6: object, Arg7: object) -> float """
        ...

    def VLookup(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ VLookup(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def WebService(self, Arg1:str) -> object:
        """ WebService(self: IWorksheetFunction, Arg1: str) -> object """
        ...

    def Weekday(self, Arg1:object, Arg2:object) -> float:
        """ Weekday(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def WeekNum(self, Arg1:object, Arg2:object) -> float:
        """ WeekNum(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Weibull(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ Weibull(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def Weibull_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ Weibull_Dist(self: IWorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def WorkDay(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ WorkDay(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def WorkDay_Intl(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ WorkDay_Intl(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def Xirr(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ Xirr(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def Xnpv(self, Arg1:object, Arg2:object) -> float:
        """ Xnpv(self: IWorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Xor(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> bool:
        """ Xor(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        ...

    def YearFrac(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ YearFrac(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def YieldDisc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ YieldDisc(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def YieldMat(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ YieldMat(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def ZTest(self, Arg1:object, Arg2:float, Arg3:object) -> float:
        """ ZTest(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        ...

    def Z_Test(self, Arg1:object, Arg2:float, Arg3:object) -> float:
        """ Z_Test(self: IWorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        ...

    def _WSFunction(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ _WSFunction(self: IWorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def __pow__(self, *args): #cannot find CLR method
        """ x.__pow__(y[, z]) <==> pow(x, y[, z]) """
        ...


class IWorksheets(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IWorksheets) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IWorksheets) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IWorksheets) -> XlCreator """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: IWorksheets) -> HPageBreaks """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IWorksheets) -> object """
        ...

    @property
    def Visible(self) -> object:
        """
        Get: Visible(self: IWorksheets) -> object
        Set: Visible(self: IWorksheets) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: IWorksheets) -> VPageBreaks """
        ...


    def Add(self, Before:object, After:object, Count:object, Type:object) -> object:
        """ Add(self: IWorksheets, Before: object, After: object, Count: object, Type: object) -> object """
        ...

    def Add2(self, Before:object, After:object, Count:object, NewLayout:object) -> object:
        """ Add2(self: IWorksheets, Before: object, After: object, Count: object, NewLayout: object) -> object """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: IWorksheets, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: IWorksheets) """
        ...

    def FillAcrossSheets(self, Range:Range, Type:XlFillWith): # -> 
        """ FillAcrossSheets(self: IWorksheets, Range: Range, Type: XlFillWith) """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: IWorksheets, Before: object, After: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: IWorksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object, IgnorePrintAreas:object): # -> 
        """ PrintOutEx(self: IWorksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: IWorksheets, EnableChanges: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: IWorksheets, Replace: object) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: IWorksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IWorksheetView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IWorksheetView) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IWorksheetView) -> XlCreator """
        ...

    @property
    def DisplayFormulas(self) -> bool:
        """
        Get: DisplayFormulas(self: IWorksheetView) -> bool
        Set: DisplayFormulas(self: IWorksheetView) = value
        """
        ...

    @property
    def DisplayGridlines(self) -> bool:
        """
        Get: DisplayGridlines(self: IWorksheetView) -> bool
        Set: DisplayGridlines(self: IWorksheetView) = value
        """
        ...

    @property
    def DisplayHeadings(self) -> bool:
        """
        Get: DisplayHeadings(self: IWorksheetView) -> bool
        Set: DisplayHeadings(self: IWorksheetView) = value
        """
        ...

    @property
    def DisplayOutline(self) -> bool:
        """
        Get: DisplayOutline(self: IWorksheetView) -> bool
        Set: DisplayOutline(self: IWorksheetView) = value
        """
        ...

    @property
    def DisplayZeros(self) -> bool:
        """
        Get: DisplayZeros(self: IWorksheetView) -> bool
        Set: DisplayZeros(self: IWorksheetView) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IWorksheetView) -> object """
        ...

    @property
    def Sheet(self) -> object:
        """ Get: Sheet(self: IWorksheetView) -> object """
        ...



class IXmlDataBinding: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IXmlDataBinding) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IXmlDataBinding) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IXmlDataBinding) -> object """
        ...

    @property
    def SourceUrl(self) -> str:
        """ Get: SourceUrl(self: IXmlDataBinding) -> str """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: IXmlDataBinding) -> str """
        ...


    def ClearSettings(self): # -> 
        """ ClearSettings(self: IXmlDataBinding) """
        ...

    def LoadSettings(self, Url:str): # -> 
        """ LoadSettings(self: IXmlDataBinding, Url: str) """
        ...

    def Refresh(self) -> XlXmlImportResult:
        """ Refresh(self: IXmlDataBinding) -> XlXmlImportResult """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IXmlMap: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AdjustColumnWidth(self) -> bool:
        """
        Get: AdjustColumnWidth(self: IXmlMap) -> bool
        Set: AdjustColumnWidth(self: IXmlMap) = value
        """
        ...

    @property
    def AppendOnImport(self) -> bool:
        """
        Get: AppendOnImport(self: IXmlMap) -> bool
        Set: AppendOnImport(self: IXmlMap) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: IXmlMap) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IXmlMap) -> XlCreator """
        ...

    @property
    def DataBinding(self) -> XmlDataBinding:
        """ Get: DataBinding(self: IXmlMap) -> XmlDataBinding """
        ...

    @property
    def IsExportable(self) -> bool:
        """ Get: IsExportable(self: IXmlMap) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IXmlMap) -> str
        Set: Name(self: IXmlMap) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IXmlMap) -> object """
        ...

    @property
    def PreserveColumnFilter(self) -> bool:
        """
        Get: PreserveColumnFilter(self: IXmlMap) -> bool
        Set: PreserveColumnFilter(self: IXmlMap) = value
        """
        ...

    @property
    def PreserveNumberFormatting(self) -> bool:
        """
        Get: PreserveNumberFormatting(self: IXmlMap) -> bool
        Set: PreserveNumberFormatting(self: IXmlMap) = value
        """
        ...

    @property
    def RootElementName(self) -> str:
        """ Get: RootElementName(self: IXmlMap) -> str """
        ...

    @property
    def RootElementNamespace(self) -> XmlNamespace:
        """ Get: RootElementNamespace(self: IXmlMap) -> XmlNamespace """
        ...

    @property
    def SaveDataSourceDefinition(self) -> bool:
        """
        Get: SaveDataSourceDefinition(self: IXmlMap) -> bool
        Set: SaveDataSourceDefinition(self: IXmlMap) = value
        """
        ...

    @property
    def Schemas(self) -> XmlSchemas:
        """ Get: Schemas(self: IXmlMap) -> XmlSchemas """
        ...

    @property
    def ShowImportExportValidationErrors(self) -> bool:
        """
        Get: ShowImportExportValidationErrors(self: IXmlMap) -> bool
        Set: ShowImportExportValidationErrors(self: IXmlMap) = value
        """
        ...

    @property
    def WorkbookConnection(self) -> WorkbookConnection:
        """ Get: WorkbookConnection(self: IXmlMap) -> WorkbookConnection """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: IXmlMap) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: IXmlMap) """
        ...

    def Export(self, Url:str, Overwrite:object) -> XlXmlExportResult:
        """ Export(self: IXmlMap, Url: str, Overwrite: object) -> XlXmlExportResult """
        ...

    def ExportXml(self, Data) -> Tuple_[XlXmlExportResult, str]:
        """ ExportXml(self: IXmlMap) -> (XlXmlExportResult, str) """
        ...

    def Import(self, Url:str, Overwrite:object) -> XlXmlImportResult:
        """ Import(self: IXmlMap, Url: str, Overwrite: object) -> XlXmlImportResult """
        ...

    def ImportXml(self, XmlData:str, Overwrite:object) -> XlXmlImportResult:
        """ ImportXml(self: IXmlMap, XmlData: str, Overwrite: object) -> XlXmlImportResult """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IXmlMaps(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IXmlMaps) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IXmlMaps) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IXmlMaps) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IXmlMaps) -> object """
        ...


    def Add(self, Schema:str, RootElementName:object) -> XmlMap:
        """ Add(self: IXmlMaps, Schema: str, RootElementName: object) -> XmlMap """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IXmlNamespace: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IXmlNamespace) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IXmlNamespace) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IXmlNamespace) -> object """
        ...

    @property
    def Prefix(self) -> str:
        """ Get: Prefix(self: IXmlNamespace) -> str """
        ...

    @property
    def Uri(self) -> str:
        """ Get: Uri(self: IXmlNamespace) -> str """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: IXmlNamespace) -> str """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IXmlNamespaces(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IXmlNamespaces) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IXmlNamespaces) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IXmlNamespaces) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IXmlNamespaces) -> object """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: IXmlNamespaces) -> str """
        ...


    def InstallManifest(self, Path:str, InstallForAllUsers:object): # -> 
        """ InstallManifest(self: IXmlNamespaces, Path: str, InstallForAllUsers: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IXmlSchema: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IXmlSchema) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IXmlSchema) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IXmlSchema) -> str """
        ...

    @property
    def Namespace(self) -> XmlNamespace:
        """ Get: Namespace(self: IXmlSchema) -> XmlNamespace """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IXmlSchema) -> object """
        ...

    @property
    def XML(self) -> str:
        """ Get: XML(self: IXmlSchema) -> str """
        ...



class IXmlSchemas(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IXmlSchemas) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: IXmlSchemas) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IXmlSchemas) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IXmlSchemas) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IXPath: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IXPath) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: IXPath) -> XlCreator """
        ...

    @property
    def Map(self) -> XmlMap:
        """ Get: Map(self: IXPath) -> XmlMap """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IXPath) -> object """
        ...

    @property
    def Repeating(self) -> bool:
        """ Get: Repeating(self: IXPath) -> bool """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: IXPath) -> str """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: IXPath) -> str """
        ...


    def Clear(self): # -> 
        """ Clear(self: IXPath) """
        ...

    def SetValue(self, Map:XmlMap, XPath:str, SelectionNamespace:object, Repeating:object): # -> 
        """ SetValue(self: IXPath, Map: XmlMap, XPath: str, SelectionNamespace: object, Repeating: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Label: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: Label) -> object
        Set: Accelerator(self: Label) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Label) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: Label) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Label) -> str
        Set: Caption(self: Label) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Label) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Label) -> bool
        Set: Enabled(self: Label) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Label) -> float
        Set: Height(self: Label) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Label) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Label) -> float
        Set: Left(self: Label) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Label) -> bool
        Set: Locked(self: Label) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Label) -> bool
        Set: LockedText(self: Label) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Label) -> str
        Set: Name(self: Label) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Label) -> str
        Set: OnAction(self: Label) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Label) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: Label) -> object
        Set: PhoneticAccelerator(self: Label) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Label) -> object
        Set: Placement(self: Label) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Label) -> bool
        Set: PrintObject(self: Label) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Label) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Label) -> str
        Set: Text(self: Label) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Label) -> float
        Set: Top(self: Label) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: Label) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Label) -> bool
        Set: Visible(self: Label) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Label) -> float
        Set: Width(self: Label) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Label) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: Label) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Label, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Label) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Label, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Label) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Label) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Label) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Label, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Label) -> object """
        ...

    def _Dummy33(self): # -> 
        """ _Dummy33(self: Label) """
        ...


class Labels(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: Labels) -> object
        Set: Accelerator(self: Labels) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Labels) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Labels) -> str
        Set: Caption(self: Labels) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Labels) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Labels) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Labels) -> bool
        Set: Enabled(self: Labels) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Labels) -> float
        Set: Height(self: Labels) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Labels) -> float
        Set: Left(self: Labels) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Labels) -> bool
        Set: Locked(self: Labels) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Labels) -> bool
        Set: LockedText(self: Labels) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Labels) -> str
        Set: OnAction(self: Labels) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Labels) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: Labels) -> object
        Set: PhoneticAccelerator(self: Labels) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Labels) -> object
        Set: Placement(self: Labels) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Labels) -> bool
        Set: PrintObject(self: Labels) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Labels) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Labels) -> str
        Set: Text(self: Labels) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Labels) -> float
        Set: Top(self: Labels) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Labels) -> bool
        Set: Visible(self: Labels) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Labels) -> float
        Set: Width(self: Labels) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Labels) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Label:
        """ Add(self: Labels, Left: float, Top: float, Width: float, Height: float) -> Label """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: Labels) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Labels, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Labels) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Labels, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Labels) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Labels) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Labels) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: Labels) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: Labels, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Labels, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Labels) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: Labels) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: Labels) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: Labels) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: Labels) """
        ...

    def _Dummy33(self): # -> 
        """ _Dummy33(self: Labels) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class LeaderLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: LeaderLines) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: LeaderLines) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: LeaderLines) -> XlCreator """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: LeaderLines) -> ChartFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LeaderLines) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: LeaderLines) """
        ...

    def Select(self): # -> 
        """ Select(self: LeaderLines) """
        ...


class Legend: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Legend) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Legend) -> object
        Set: AutoScaleFont(self: Legend) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Legend) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Legend) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: Legend) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Legend) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Legend) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Legend) -> float
        Set: Height(self: Legend) = value
        """
        ...

    @property
    def IncludeInLayout(self) -> bool:
        """
        Get: IncludeInLayout(self: Legend) -> bool
        Set: IncludeInLayout(self: Legend) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Legend) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Legend) -> float
        Set: Left(self: Legend) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Legend) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Legend) -> object """
        ...

    @property
    def Position(self) -> XlLegendPosition:
        """
        Get: Position(self: Legend) -> XlLegendPosition
        Set: Position(self: Legend) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Legend) -> bool
        Set: Shadow(self: Legend) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Legend) -> float
        Set: Top(self: Legend) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Legend) -> float
        Set: Width(self: Legend) = value
        """
        ...


    def Clear(self) -> object:
        """ Clear(self: Legend) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Legend) -> object """
        ...

    def LegendEntries(self, Index:object) -> object:
        """ LegendEntries(self: Legend, Index: object) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: Legend) -> object """
        ...


class LegendEntries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: LegendEntries) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: LegendEntries) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: LegendEntries) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LegendEntries) -> object """
        ...


    def Item(self, Index:object) -> LegendEntry:
        """ Item(self: LegendEntries, Index: object) -> LegendEntry """
        ...

    def _Default(self, Index:object) -> LegendEntry:
        """ _Default(self: LegendEntries, Index: object) -> LegendEntry """
        ...


class LegendEntry: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: LegendEntry) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: LegendEntry) -> object
        Set: AutoScaleFont(self: LegendEntry) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: LegendEntry) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: LegendEntry) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: LegendEntry) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: LegendEntry) -> float """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: LegendEntry) -> int """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: LegendEntry) -> float """
        ...

    @property
    def LegendKey(self) -> LegendKey:
        """ Get: LegendKey(self: LegendEntry) -> LegendKey """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LegendEntry) -> object """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: LegendEntry) -> float """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: LegendEntry) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: LegendEntry) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: LegendEntry) -> object """
        ...


class LegendKey: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: LegendKey) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: LegendKey) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: LegendKey) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: LegendKey) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: LegendKey) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: LegendKey) -> float """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: LegendKey) -> Interior """
        ...

    @property
    def InvertIfNegative(self) -> bool:
        """
        Get: InvertIfNegative(self: LegendKey) -> bool
        Set: InvertIfNegative(self: LegendKey) = value
        """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: LegendKey) -> float """
        ...

    @property
    def MarkerBackgroundColor(self) -> int:
        """
        Get: MarkerBackgroundColor(self: LegendKey) -> int
        Set: MarkerBackgroundColor(self: LegendKey) = value
        """
        ...

    @property
    def MarkerBackgroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerBackgroundColorIndex(self: LegendKey) -> XlColorIndex
        Set: MarkerBackgroundColorIndex(self: LegendKey) = value
        """
        ...

    @property
    def MarkerForegroundColor(self) -> int:
        """
        Get: MarkerForegroundColor(self: LegendKey) -> int
        Set: MarkerForegroundColor(self: LegendKey) = value
        """
        ...

    @property
    def MarkerForegroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerForegroundColorIndex(self: LegendKey) -> XlColorIndex
        Set: MarkerForegroundColorIndex(self: LegendKey) = value
        """
        ...

    @property
    def MarkerSize(self) -> int:
        """
        Get: MarkerSize(self: LegendKey) -> int
        Set: MarkerSize(self: LegendKey) = value
        """
        ...

    @property
    def MarkerStyle(self) -> XlMarkerStyle:
        """
        Get: MarkerStyle(self: LegendKey) -> XlMarkerStyle
        Set: MarkerStyle(self: LegendKey) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LegendKey) -> object """
        ...

    @property
    def PictureType(self) -> int:
        """
        Get: PictureType(self: LegendKey) -> int
        Set: PictureType(self: LegendKey) = value
        """
        ...

    @property
    def PictureUnit(self) -> int:
        """
        Get: PictureUnit(self: LegendKey) -> int
        Set: PictureUnit(self: LegendKey) = value
        """
        ...

    @property
    def PictureUnit2(self) -> float:
        """
        Get: PictureUnit2(self: LegendKey) -> float
        Set: PictureUnit2(self: LegendKey) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: LegendKey) -> bool
        Set: Shadow(self: LegendKey) = value
        """
        ...

    @property
    def Smooth(self) -> bool:
        """
        Get: Smooth(self: LegendKey) -> bool
        Set: Smooth(self: LegendKey) = value
        """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: LegendKey) -> float """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: LegendKey) -> float """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: LegendKey) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: LegendKey) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: LegendKey) -> object """
        ...


class Line: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Line) -> Application """
        ...

    @property
    def ArrowHeadLength(self) -> object:
        """
        Get: ArrowHeadLength(self: Line) -> object
        Set: ArrowHeadLength(self: Line) = value
        """
        ...

    @property
    def ArrowHeadStyle(self) -> object:
        """
        Get: ArrowHeadStyle(self: Line) -> object
        Set: ArrowHeadStyle(self: Line) = value
        """
        ...

    @property
    def ArrowHeadWidth(self) -> object:
        """
        Get: ArrowHeadWidth(self: Line) -> object
        Set: ArrowHeadWidth(self: Line) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Line) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: Line) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Line) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Line) -> bool
        Set: Enabled(self: Line) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Line) -> float
        Set: Height(self: Line) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Line) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Line) -> float
        Set: Left(self: Line) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Line) -> bool
        Set: Locked(self: Line) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Line) -> str
        Set: Name(self: Line) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Line) -> str
        Set: OnAction(self: Line) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Line) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Line) -> object
        Set: Placement(self: Line) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Line) -> bool
        Set: PrintObject(self: Line) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Line) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Line) -> float
        Set: Top(self: Line) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: Line) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Line) -> bool
        Set: Visible(self: Line) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Line) -> float
        Set: Width(self: Line) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Line) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: Line) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Line) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Line, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Line) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Line) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Line) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Line, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Line) -> object """
        ...


class LinearGradient: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: LinearGradient) -> Application """
        ...

    @property
    def ColorStops(self) -> ColorStops:
        """ Get: ColorStops(self: LinearGradient) -> ColorStops """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: LinearGradient) -> XlCreator """
        ...

    @property
    def Degree(self) -> float:
        """
        Get: Degree(self: LinearGradient) -> float
        Set: Degree(self: LinearGradient) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LinearGradient) -> object """
        ...



class LineFormat(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def BackColor(self) -> ColorFormat:
        """
        Get: BackColor(self: LineFormat) -> ColorFormat
        Set: BackColor(self: LineFormat) = value
        """
        ...

    @property
    def BeginArrowheadLength(self): # -> MsoArrowheadLength
        """
        Get: BeginArrowheadLength(self: LineFormat) -> MsoArrowheadLength
        Set: BeginArrowheadLength(self: LineFormat) = value
        """
        ...

    @property
    def BeginArrowheadStyle(self): # -> MsoArrowheadStyle
        """
        Get: BeginArrowheadStyle(self: LineFormat) -> MsoArrowheadStyle
        Set: BeginArrowheadStyle(self: LineFormat) = value
        """
        ...

    @property
    def BeginArrowheadWidth(self): # -> MsoArrowheadWidth
        """
        Get: BeginArrowheadWidth(self: LineFormat) -> MsoArrowheadWidth
        Set: BeginArrowheadWidth(self: LineFormat) = value
        """
        ...

    @property
    def DashStyle(self): # -> MsoLineDashStyle
        """
        Get: DashStyle(self: LineFormat) -> MsoLineDashStyle
        Set: DashStyle(self: LineFormat) = value
        """
        ...

    @property
    def EndArrowheadLength(self): # -> MsoArrowheadLength
        """
        Get: EndArrowheadLength(self: LineFormat) -> MsoArrowheadLength
        Set: EndArrowheadLength(self: LineFormat) = value
        """
        ...

    @property
    def EndArrowheadStyle(self): # -> MsoArrowheadStyle
        """
        Get: EndArrowheadStyle(self: LineFormat) -> MsoArrowheadStyle
        Set: EndArrowheadStyle(self: LineFormat) = value
        """
        ...

    @property
    def EndArrowheadWidth(self): # -> MsoArrowheadWidth
        """
        Get: EndArrowheadWidth(self: LineFormat) -> MsoArrowheadWidth
        Set: EndArrowheadWidth(self: LineFormat) = value
        """
        ...

    @property
    def ForeColor(self) -> ColorFormat:
        """
        Get: ForeColor(self: LineFormat) -> ColorFormat
        Set: ForeColor(self: LineFormat) = value
        """
        ...

    @property
    def InsetPen(self): # -> MsoTriState
        """
        Get: InsetPen(self: LineFormat) -> MsoTriState
        Set: InsetPen(self: LineFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LineFormat) -> object """
        ...

    @property
    def Pattern(self): # -> MsoPatternType
        """
        Get: Pattern(self: LineFormat) -> MsoPatternType
        Set: Pattern(self: LineFormat) = value
        """
        ...

    @property
    def Style(self): # -> MsoLineStyle
        """
        Get: Style(self: LineFormat) -> MsoLineStyle
        Set: Style(self: LineFormat) = value
        """
        ...

    @property
    def Transparency(self) -> Single:
        """
        Get: Transparency(self: LineFormat) -> Single
        Set: Transparency(self: LineFormat) = value
        """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: LineFormat) -> MsoTriState
        Set: Visible(self: LineFormat) = value
        """
        ...

    @property
    def Weight(self) -> Single:
        """
        Get: Weight(self: LineFormat) -> Single
        Set: Weight(self: LineFormat) = value
        """
        ...



class Lines(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Lines) -> Application """
        ...

    @property
    def ArrowHeadLength(self) -> object:
        """
        Get: ArrowHeadLength(self: Lines) -> object
        Set: ArrowHeadLength(self: Lines) = value
        """
        ...

    @property
    def ArrowHeadStyle(self) -> object:
        """
        Get: ArrowHeadStyle(self: Lines) -> object
        Set: ArrowHeadStyle(self: Lines) = value
        """
        ...

    @property
    def ArrowHeadWidth(self) -> object:
        """
        Get: ArrowHeadWidth(self: Lines) -> object
        Set: ArrowHeadWidth(self: Lines) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Lines) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Lines) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Lines) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Lines) -> bool
        Set: Enabled(self: Lines) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Lines) -> float
        Set: Height(self: Lines) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Lines) -> float
        Set: Left(self: Lines) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Lines) -> bool
        Set: Locked(self: Lines) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Lines) -> str
        Set: OnAction(self: Lines) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Lines) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Lines) -> object
        Set: Placement(self: Lines) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Lines) -> bool
        Set: PrintObject(self: Lines) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Lines) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Lines) -> float
        Set: Top(self: Lines) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Lines) -> bool
        Set: Visible(self: Lines) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Lines) -> float
        Set: Width(self: Lines) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Lines) -> int """
        ...


    def Add(self, X1:float, Y1:float, X2:float, Y2:float) -> Line:
        """ Add(self: Lines, X1: float, Y1: float, X2: float, Y2: float) -> Line """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: Lines) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Lines) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Lines, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Lines) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Lines) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Lines) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: Lines) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: Lines, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Lines, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Lines) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: Lines) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: Lines) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: Lines) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: Lines) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class LinkFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: LinkFormat) -> Application """
        ...

    @property
    def AutoUpdate(self) -> bool:
        """
        Get: AutoUpdate(self: LinkFormat) -> bool
        Set: AutoUpdate(self: LinkFormat) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: LinkFormat) -> XlCreator """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: LinkFormat) -> bool
        Set: Locked(self: LinkFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LinkFormat) -> object """
        ...


    def Update(self): # -> 
        """ Update(self: LinkFormat) """
        ...


class ListBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListBox) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: ListBox) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ListBox) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: ListBox) -> bool
        Set: Display3DShading(self: ListBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ListBox) -> bool
        Set: Enabled(self: ListBox) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ListBox) -> float
        Set: Height(self: ListBox) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ListBox) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ListBox) -> float
        Set: Left(self: ListBox) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: ListBox) -> str
        Set: LinkedCell(self: ListBox) = value
        """
        ...

    @property
    def LinkedObject(self) -> object:
        """ Get: LinkedObject(self: ListBox) -> object """
        ...

    @property
    def ListCount(self) -> int:
        """ Get: ListCount(self: ListBox) -> int """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: ListBox) -> str
        Set: ListFillRange(self: ListBox) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: ListBox) -> int
        Set: ListIndex(self: ListBox) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ListBox) -> bool
        Set: Locked(self: ListBox) = value
        """
        ...

    @property
    def MultiSelect(self) -> int:
        """
        Get: MultiSelect(self: ListBox) -> int
        Set: MultiSelect(self: ListBox) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ListBox) -> str
        Set: Name(self: ListBox) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ListBox) -> str
        Set: OnAction(self: ListBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListBox) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ListBox) -> object
        Set: Placement(self: ListBox) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ListBox) -> bool
        Set: PrintObject(self: ListBox) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ListBox) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ListBox) -> float
        Set: Top(self: ListBox) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: ListBox) -> Range """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: ListBox) -> int
        Set: Value(self: ListBox) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ListBox) -> bool
        Set: Visible(self: ListBox) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ListBox) -> float
        Set: Width(self: ListBox) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ListBox) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: ListBox) -> int
        Set: _Default(self: ListBox) = value
        """
        ...


    def AddItem(self, Text:object, Index:object) -> object:
        """ AddItem(self: ListBox, Text: object, Index: object) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: ListBox) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ListBox) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ListBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ListBox) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ListBox) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ListBox) -> object """
        ...

    def RemoveAllItems(self) -> object:
        """ RemoveAllItems(self: ListBox) -> object """
        ...

    def RemoveItem(self, Index:int, Count:object) -> object:
        """ RemoveItem(self: ListBox, Index: int, Count: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ListBox, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ListBox) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ListBoxes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListBoxes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ListBoxes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ListBoxes) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: ListBoxes) -> bool
        Set: Display3DShading(self: ListBoxes) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ListBoxes) -> bool
        Set: Enabled(self: ListBoxes) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ListBoxes) -> float
        Set: Height(self: ListBoxes) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ListBoxes) -> float
        Set: Left(self: ListBoxes) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: ListBoxes) -> str
        Set: LinkedCell(self: ListBoxes) = value
        """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: ListBoxes) -> str
        Set: ListFillRange(self: ListBoxes) = value
        """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: ListBoxes) -> int
        Set: ListIndex(self: ListBoxes) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ListBoxes) -> bool
        Set: Locked(self: ListBoxes) = value
        """
        ...

    @property
    def MultiSelect(self) -> int:
        """
        Get: MultiSelect(self: ListBoxes) -> int
        Set: MultiSelect(self: ListBoxes) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ListBoxes) -> str
        Set: OnAction(self: ListBoxes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListBoxes) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ListBoxes) -> object
        Set: Placement(self: ListBoxes) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ListBoxes) -> bool
        Set: PrintObject(self: ListBoxes) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ListBoxes) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ListBoxes) -> float
        Set: Top(self: ListBoxes) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: ListBoxes) -> int
        Set: Value(self: ListBoxes) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ListBoxes) -> bool
        Set: Visible(self: ListBoxes) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ListBoxes) -> float
        Set: Width(self: ListBoxes) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ListBoxes) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: ListBoxes) -> int
        Set: _Default(self: ListBoxes) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> ListBox:
        """ Add(self: ListBoxes, Left: float, Top: float, Width: float, Height: float) -> ListBox """
        ...

    def AddItem(self, Text:object, Index:object) -> object:
        """ AddItem(self: ListBoxes, Text: object, Index: object) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: ListBoxes) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ListBoxes) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ListBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ListBoxes) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ListBoxes) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ListBoxes) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: ListBoxes) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: ListBoxes, Index: object) -> object """
        ...

    def RemoveAllItems(self) -> object:
        """ RemoveAllItems(self: ListBoxes) -> object """
        ...

    def RemoveItem(self, Index:int, Count:object) -> object:
        """ RemoveItem(self: ListBoxes, Index: int, Count: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ListBoxes, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ListBoxes) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: ListBoxes) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: ListBoxes) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: ListBoxes) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: ListBoxes) """
        ...

    def _Dummy31(self): # -> 
        """ _Dummy31(self: ListBoxes) """
        ...

    def _Dummy33(self): # -> 
        """ _Dummy33(self: ListBoxes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ListColumn: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListColumn) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ListColumn) -> XlCreator """
        ...

    @property
    def DataBodyRange(self) -> Range:
        """ Get: DataBodyRange(self: ListColumn) -> Range """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ListColumn) -> int """
        ...

    @property
    def ListDataFormat(self) -> ListDataFormat:
        """ Get: ListDataFormat(self: ListColumn) -> ListDataFormat """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ListColumn) -> str
        Set: Name(self: ListColumn) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListColumn) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: ListColumn) -> Range """
        ...

    @property
    def SharePointFormula(self) -> str:
        """ Get: SharePointFormula(self: ListColumn) -> str """
        ...

    @property
    def Total(self) -> Range:
        """ Get: Total(self: ListColumn) -> Range """
        ...

    @property
    def TotalsCalculation(self) -> XlTotalsCalculation:
        """
        Get: TotalsCalculation(self: ListColumn) -> XlTotalsCalculation
        Set: TotalsCalculation(self: ListColumn) = value
        """
        ...

    @property
    def XPath(self) -> XPath:
        """ Get: XPath(self: ListColumn) -> XPath """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: ListColumn) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: ListColumn) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ListColumns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListColumns) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ListColumns) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ListColumns) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListColumns) -> object """
        ...


    def Add(self, Position:object) -> ListColumn:
        """ Add(self: ListColumns, Position: object) -> ListColumn """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ListDataFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowFillIn(self) -> bool:
        """ Get: AllowFillIn(self: ListDataFormat) -> bool """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListDataFormat) -> Application """
        ...

    @property
    def Choices(self) -> object:
        """ Get: Choices(self: ListDataFormat) -> object """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ListDataFormat) -> XlCreator """
        ...

    @property
    def DecimalPlaces(self) -> int:
        """ Get: DecimalPlaces(self: ListDataFormat) -> int """
        ...

    @property
    def DefaultValue(self) -> object:
        """ Get: DefaultValue(self: ListDataFormat) -> object """
        ...

    @property
    def IsPercent(self) -> bool:
        """ Get: IsPercent(self: ListDataFormat) -> bool """
        ...

    @property
    def lcid(self) -> int:
        """ Get: lcid(self: ListDataFormat) -> int """
        ...

    @property
    def MaxCharacters(self) -> int:
        """ Get: MaxCharacters(self: ListDataFormat) -> int """
        ...

    @property
    def MaxNumber(self) -> object:
        """ Get: MaxNumber(self: ListDataFormat) -> object """
        ...

    @property
    def MinNumber(self) -> object:
        """ Get: MinNumber(self: ListDataFormat) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListDataFormat) -> object """
        ...

    @property
    def ReadOnly(self) -> bool:
        """ Get: ReadOnly(self: ListDataFormat) -> bool """
        ...

    @property
    def Required(self) -> bool:
        """ Get: Required(self: ListDataFormat) -> bool """
        ...

    @property
    def Type(self) -> XlListDataType:
        """ Get: Type(self: ListDataFormat) -> XlListDataType """
        ...

    @property
    def _Default(self) -> XlListDataType:
        """ Get: _Default(self: ListDataFormat) -> XlListDataType """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ListObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Active(self) -> bool:
        """ Get: Active(self: ListObject) -> bool """
        ...

    @property
    def AlternativeText(self) -> str:
        """
        Get: AlternativeText(self: ListObject) -> str
        Set: AlternativeText(self: ListObject) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListObject) -> Application """
        ...

    @property
    def AutoFilter(self) -> AutoFilter:
        """ Get: AutoFilter(self: ListObject) -> AutoFilter """
        ...

    @property
    def Comment(self) -> str:
        """
        Get: Comment(self: ListObject) -> str
        Set: Comment(self: ListObject) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ListObject) -> XlCreator """
        ...

    @property
    def DataBodyRange(self) -> Range:
        """ Get: DataBodyRange(self: ListObject) -> Range """
        ...

    @property
    def DisplayName(self) -> str:
        """
        Get: DisplayName(self: ListObject) -> str
        Set: DisplayName(self: ListObject) = value
        """
        ...

    @property
    def DisplayRightToLeft(self) -> bool:
        """ Get: DisplayRightToLeft(self: ListObject) -> bool """
        ...

    @property
    def HeaderRowRange(self) -> Range:
        """ Get: HeaderRowRange(self: ListObject) -> Range """
        ...

    @property
    def InsertRowRange(self) -> Range:
        """ Get: InsertRowRange(self: ListObject) -> Range """
        ...

    @property
    def ListColumns(self) -> ListColumns:
        """ Get: ListColumns(self: ListObject) -> ListColumns """
        ...

    @property
    def ListRows(self) -> ListRows:
        """ Get: ListRows(self: ListObject) -> ListRows """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ListObject) -> str
        Set: Name(self: ListObject) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListObject) -> object """
        ...

    @property
    def QueryTable(self) -> QueryTable:
        """ Get: QueryTable(self: ListObject) -> QueryTable """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: ListObject) -> Range """
        ...

    @property
    def SharePointURL(self) -> str:
        """ Get: SharePointURL(self: ListObject) -> str """
        ...

    @property
    def ShowAutoFilter(self) -> bool:
        """
        Get: ShowAutoFilter(self: ListObject) -> bool
        Set: ShowAutoFilter(self: ListObject) = value
        """
        ...

    @property
    def ShowAutoFilterDropDown(self) -> bool:
        """
        Get: ShowAutoFilterDropDown(self: ListObject) -> bool
        Set: ShowAutoFilterDropDown(self: ListObject) = value
        """
        ...

    @property
    def ShowHeaders(self) -> bool:
        """
        Get: ShowHeaders(self: ListObject) -> bool
        Set: ShowHeaders(self: ListObject) = value
        """
        ...

    @property
    def ShowTableStyleColumnStripes(self) -> bool:
        """
        Get: ShowTableStyleColumnStripes(self: ListObject) -> bool
        Set: ShowTableStyleColumnStripes(self: ListObject) = value
        """
        ...

    @property
    def ShowTableStyleFirstColumn(self) -> bool:
        """
        Get: ShowTableStyleFirstColumn(self: ListObject) -> bool
        Set: ShowTableStyleFirstColumn(self: ListObject) = value
        """
        ...

    @property
    def ShowTableStyleLastColumn(self) -> bool:
        """
        Get: ShowTableStyleLastColumn(self: ListObject) -> bool
        Set: ShowTableStyleLastColumn(self: ListObject) = value
        """
        ...

    @property
    def ShowTableStyleRowStripes(self) -> bool:
        """
        Get: ShowTableStyleRowStripes(self: ListObject) -> bool
        Set: ShowTableStyleRowStripes(self: ListObject) = value
        """
        ...

    @property
    def ShowTotals(self) -> bool:
        """
        Get: ShowTotals(self: ListObject) -> bool
        Set: ShowTotals(self: ListObject) = value
        """
        ...

    @property
    def Slicers(self) -> Slicers:
        """ Get: Slicers(self: ListObject) -> Slicers """
        ...

    @property
    def Sort(self) -> Sort:
        """ Get: Sort(self: ListObject) -> Sort """
        ...

    @property
    def SourceType(self) -> XlListObjectSourceType:
        """ Get: SourceType(self: ListObject) -> XlListObjectSourceType """
        ...

    @property
    def Summary(self) -> str:
        """
        Get: Summary(self: ListObject) -> str
        Set: Summary(self: ListObject) = value
        """
        ...

    @property
    def TableObject(self) -> TableObject:
        """ Get: TableObject(self: ListObject) -> TableObject """
        ...

    @property
    def TableStyle(self) -> object:
        """
        Get: TableStyle(self: ListObject) -> object
        Set: TableStyle(self: ListObject) = value
        """
        ...

    @property
    def TotalsRowRange(self) -> Range:
        """ Get: TotalsRowRange(self: ListObject) -> Range """
        ...

    @property
    def XmlMap(self) -> XmlMap:
        """ Get: XmlMap(self: ListObject) -> XmlMap """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: ListObject) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: ListObject) """
        ...

    def ExportToVisio(self): # -> 
        """ ExportToVisio(self: ListObject) """
        ...

    def Publish(self, Target:object, LinkSource:bool) -> str:
        """ Publish(self: ListObject, Target: object, LinkSource: bool) -> str """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: ListObject) """
        ...

    def Resize(self, Range:Range): # -> 
        """ Resize(self: ListObject, Range: Range) """
        ...

    def Unlink(self): # -> 
        """ Unlink(self: ListObject) """
        ...

    def Unlist(self): # -> 
        """ Unlist(self: ListObject) """
        ...

    def UpdateChanges(self, iConflictType:XlListConflict): # -> 
        """ UpdateChanges(self: ListObject, iConflictType: XlListConflict) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ListObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListObjects) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ListObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ListObjects) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListObjects) -> object """
        ...


    def Add(self, SourceType:XlListObjectSourceType, Source:object, LinkSource:object, XlListObjectHasHeaders:XlYesNoGuess, Destination:object) -> ListObject:
        """ Add(self: ListObjects, SourceType: XlListObjectSourceType, Source: object, LinkSource: object, XlListObjectHasHeaders: XlYesNoGuess, Destination: object) -> ListObject """
        ...

    def AddEx(self, SourceType:XlListObjectSourceType, Source:object, LinkSource:object, XlListObjectHasHeaders:XlYesNoGuess, Destination:object, TableStyleName:object) -> ListObject:
        """ AddEx(self: ListObjects, SourceType: XlListObjectSourceType, Source: object, LinkSource: object, XlListObjectHasHeaders: XlYesNoGuess, Destination: object, TableStyleName: object) -> ListObject """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ListRow: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListRow) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ListRow) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ListRow) -> int """
        ...

    @property
    def InvalidData(self) -> bool:
        """ Get: InvalidData(self: ListRow) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListRow) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: ListRow) -> Range """
        ...


    def Delete(self): # -> 
        """ Delete(self: ListRow) """
        ...


class ListRows(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListRows) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ListRows) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ListRows) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListRows) -> object """
        ...


    def Add(self, Position:object) -> ListRow:
        """ Add(self: ListRows, Position: object) -> ListRow """
        ...

    def AddEx(self, Position:object, AlwaysInsert:object) -> ListRow:
        """ AddEx(self: ListRows, Position: object, AlwaysInsert: object) -> ListRow """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Mailer: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Mailer) -> Application """
        ...

    @property
    def BCCRecipients(self) -> object:
        """
        Get: BCCRecipients(self: Mailer) -> object
        Set: BCCRecipients(self: Mailer) = value
        """
        ...

    @property
    def CCRecipients(self) -> object:
        """
        Get: CCRecipients(self: Mailer) -> object
        Set: CCRecipients(self: Mailer) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Mailer) -> XlCreator """
        ...

    @property
    def Enclosures(self) -> object:
        """
        Get: Enclosures(self: Mailer) -> object
        Set: Enclosures(self: Mailer) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Mailer) -> object """
        ...

    @property
    def Received(self) -> bool:
        """ Get: Received(self: Mailer) -> bool """
        ...

    @property
    def SendDateTime(self) -> DateTime:
        """ Get: SendDateTime(self: Mailer) -> DateTime """
        ...

    @property
    def Sender(self) -> str:
        """ Get: Sender(self: Mailer) -> str """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: Mailer) -> str
        Set: Subject(self: Mailer) = value
        """
        ...

    @property
    def ToRecipients(self) -> object:
        """
        Get: ToRecipients(self: Mailer) -> object
        Set: ToRecipients(self: Mailer) = value
        """
        ...

    @property
    def WhichAddress(self) -> object:
        """
        Get: WhichAddress(self: Mailer) -> object
        Set: WhichAddress(self: Mailer) = value
        """
        ...



class Menu: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Menu) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Menu) -> str
        Set: Caption(self: Menu) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Menu) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Menu) -> bool
        Set: Enabled(self: Menu) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Menu) -> int """
        ...

    @property
    def MenuItems(self) -> MenuItems:
        """ Get: MenuItems(self: Menu) -> MenuItems """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Menu) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: Menu) """
        ...


class MenuBar: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MenuBar) -> Application """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: MenuBar) -> bool """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: MenuBar) -> str
        Set: Caption(self: MenuBar) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: MenuBar) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: MenuBar) -> int """
        ...

    @property
    def Menus(self) -> Menus:
        """ Get: Menus(self: MenuBar) -> Menus """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MenuBar) -> object """
        ...


    def Activate(self): # -> 
        """ Activate(self: MenuBar) """
        ...

    def Delete(self): # -> 
        """ Delete(self: MenuBar) """
        ...

    def Reset(self): # -> 
        """ Reset(self: MenuBar) """
        ...


class MenuBars(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MenuBars) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: MenuBars) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: MenuBars) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MenuBars) -> object """
        ...


    def Add(self, Name:object) -> MenuBar:
        """ Add(self: MenuBars, Name: object) -> MenuBar """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class MenuItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MenuItem) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: MenuItem) -> str
        Set: Caption(self: MenuItem) = value
        """
        ...

    @property
    def Checked(self) -> bool:
        """
        Get: Checked(self: MenuItem) -> bool
        Set: Checked(self: MenuItem) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: MenuItem) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: MenuItem) -> bool
        Set: Enabled(self: MenuItem) = value
        """
        ...

    @property
    def HelpContextID(self) -> int:
        """
        Get: HelpContextID(self: MenuItem) -> int
        Set: HelpContextID(self: MenuItem) = value
        """
        ...

    @property
    def HelpFile(self) -> str:
        """
        Get: HelpFile(self: MenuItem) -> str
        Set: HelpFile(self: MenuItem) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: MenuItem) -> int """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: MenuItem) -> str
        Set: OnAction(self: MenuItem) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MenuItem) -> object """
        ...

    @property
    def StatusBar(self) -> str:
        """
        Get: StatusBar(self: MenuItem) -> str
        Set: StatusBar(self: MenuItem) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: MenuItem) """
        ...


class MenuItems(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MenuItems) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: MenuItems) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: MenuItems) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MenuItems) -> object """
        ...


    def Add(self, Caption:str, OnAction:object, ShortcutKey:object, Before:object, Restore:object, StatusBar:object, HelpFile:object, HelpContextID:object) -> MenuItem:
        """ Add(self: MenuItems, Caption: str, OnAction: object, ShortcutKey: object, Before: object, Restore: object, StatusBar: object, HelpFile: object, HelpContextID: object) -> MenuItem """
        ...

    def AddMenu(self, Caption:str, Before:object, Restore:object) -> Menu:
        """ AddMenu(self: MenuItems, Caption: str, Before: object, Restore: object) -> Menu """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Menus(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Menus) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Menus) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Menus) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Menus) -> object """
        ...


    def Add(self, Caption:str, Before:object, Restore:object) -> Menu:
        """ Add(self: Menus, Caption: str, Before: object, Restore: object) -> Menu """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Model: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Model) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Model) -> XlCreator """
        ...

    @property
    def DataModelConnection(self) -> WorkbookConnection:
        """ Get: DataModelConnection(self: Model) -> WorkbookConnection """
        ...

    @property
    def ModelRelationships(self) -> ModelRelationships:
        """ Get: ModelRelationships(self: Model) -> ModelRelationships """
        ...

    @property
    def ModelTables(self) -> ModelTables:
        """ Get: ModelTables(self: Model) -> ModelTables """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Model) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Model) -> object """
        ...


    def AddConnection(self, ConnectionToDataSource:WorkbookConnection) -> WorkbookConnection:
        """ AddConnection(self: Model, ConnectionToDataSource: WorkbookConnection) -> WorkbookConnection """
        ...

    def CreateModelWorkbookConnection(self, ModelTable:object) -> WorkbookConnection:
        """ CreateModelWorkbookConnection(self: Model, ModelTable: object) -> WorkbookConnection """
        ...

    def Initialize(self): # -> 
        """ Initialize(self: Model) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: Model) """
        ...


class ModelChanges: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelChanges) -> Application """
        ...

    @property
    def ColumnsAdded(self) -> ModelColumnNames:
        """ Get: ColumnsAdded(self: ModelChanges) -> ModelColumnNames """
        ...

    @property
    def ColumnsChanged(self) -> ModelColumnChanges:
        """ Get: ColumnsChanged(self: ModelChanges) -> ModelColumnChanges """
        ...

    @property
    def ColumnsDeleted(self) -> ModelColumnNames:
        """ Get: ColumnsDeleted(self: ModelChanges) -> ModelColumnNames """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelChanges) -> XlCreator """
        ...

    @property
    def MeasuresAdded(self) -> ModelMeasureNames:
        """ Get: MeasuresAdded(self: ModelChanges) -> ModelMeasureNames """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelChanges) -> object """
        ...

    @property
    def RelationshipChange(self) -> bool:
        """ Get: RelationshipChange(self: ModelChanges) -> bool """
        ...

    @property
    def Source(self) -> XlModelChangeSource:
        """ Get: Source(self: ModelChanges) -> XlModelChangeSource """
        ...

    @property
    def TableNamesChanged(self) -> ModelTableNameChanges:
        """ Get: TableNamesChanged(self: ModelChanges) -> ModelTableNameChanges """
        ...

    @property
    def TablesAdded(self) -> ModelTableNames:
        """ Get: TablesAdded(self: ModelChanges) -> ModelTableNames """
        ...

    @property
    def TablesDeleted(self) -> ModelTableNames:
        """ Get: TablesDeleted(self: ModelChanges) -> ModelTableNames """
        ...

    @property
    def TablesModified(self) -> ModelTableNames:
        """ Get: TablesModified(self: ModelChanges) -> ModelTableNames """
        ...

    @property
    def UnknownChange(self) -> bool:
        """ Get: UnknownChange(self: ModelChanges) -> bool """
        ...



class ModelColumnChange: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelColumnChange) -> Application """
        ...

    @property
    def ColumnName(self) -> str:
        """ Get: ColumnName(self: ModelColumnChange) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelColumnChange) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelColumnChange) -> object """
        ...

    @property
    def TableName(self) -> str:
        """ Get: TableName(self: ModelColumnChange) -> str """
        ...



class ModelColumnChanges(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelColumnChanges) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ModelColumnChanges) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelColumnChanges) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelColumnChanges) -> object """
        ...


    def Item(self, Index:object) -> ModelColumnChange:
        """ Item(self: ModelColumnChanges, Index: object) -> ModelColumnChange """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ModelColumnName: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelColumnName) -> Application """
        ...

    @property
    def ColumnName(self) -> str:
        """ Get: ColumnName(self: ModelColumnName) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelColumnName) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelColumnName) -> object """
        ...

    @property
    def TableName(self) -> str:
        """ Get: TableName(self: ModelColumnName) -> str """
        ...



class ModelColumnNames(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelColumnNames) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ModelColumnNames) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelColumnNames) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelColumnNames) -> object """
        ...


    def Item(self, Index:object) -> ModelColumnName:
        """ Item(self: ModelColumnNames, Index: object) -> ModelColumnName """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ModelConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ADOConnection(self) -> object:
        """ Get: ADOConnection(self: ModelConnection) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelConnection) -> Application """
        ...

    @property
    def CalculatedMembers(self) -> CalculatedMembers:
        """ Get: CalculatedMembers(self: ModelConnection) -> CalculatedMembers """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: ModelConnection) -> object
        Set: CommandText(self: ModelConnection) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: ModelConnection) -> XlCmdType
        Set: CommandType(self: ModelConnection) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelConnection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelConnection) -> object """
        ...



class ModelMeasureName: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelMeasureName) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelMeasureName) -> XlCreator """
        ...

    @property
    def MeasureName(self) -> str:
        """ Get: MeasureName(self: ModelMeasureName) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelMeasureName) -> object """
        ...

    @property
    def TableName(self) -> str:
        """ Get: TableName(self: ModelMeasureName) -> str """
        ...



class ModelMeasureNames(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelMeasureNames) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ModelMeasureNames) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelMeasureNames) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelMeasureNames) -> object """
        ...


    def Item(self, Index:object) -> ModelMeasureName:
        """ Item(self: ModelMeasureNames, Index: object) -> ModelMeasureName """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ModelRelationship: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Active(self) -> bool:
        """
        Get: Active(self: ModelRelationship) -> bool
        Set: Active(self: ModelRelationship) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelRelationship) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelRelationship) -> XlCreator """
        ...

    @property
    def ForeignKeyColumn(self) -> ModelTableColumn:
        """ Get: ForeignKeyColumn(self: ModelRelationship) -> ModelTableColumn """
        ...

    @property
    def ForeignKeyTable(self) -> ModelTable:
        """ Get: ForeignKeyTable(self: ModelRelationship) -> ModelTable """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelRelationship) -> object """
        ...

    @property
    def PrimaryKeyColumn(self) -> ModelTableColumn:
        """ Get: PrimaryKeyColumn(self: ModelRelationship) -> ModelTableColumn """
        ...

    @property
    def PrimaryKeyTable(self) -> ModelTable:
        """ Get: PrimaryKeyTable(self: ModelRelationship) -> ModelTable """
        ...


    def Delete(self): # -> 
        """ Delete(self: ModelRelationship) """
        ...


class ModelRelationships(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelRelationships) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ModelRelationships) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelRelationships) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelRelationships) -> object """
        ...


    def Add(self, ForeignKeyColumn:ModelTableColumn, PrimaryKeyColumn:ModelTableColumn) -> ModelRelationship:
        """ Add(self: ModelRelationships, ForeignKeyColumn: ModelTableColumn, PrimaryKeyColumn: ModelTableColumn) -> ModelRelationship """
        ...

    def Item(self, Index:object) -> ModelRelationship:
        """ Item(self: ModelRelationships, Index: object) -> ModelRelationship """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ModelTable: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelTable) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelTable) -> XlCreator """
        ...

    @property
    def ModelTableColumns(self) -> ModelTableColumns:
        """ Get: ModelTableColumns(self: ModelTable) -> ModelTableColumns """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ModelTable) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelTable) -> object """
        ...

    @property
    def RecordCount(self) -> int:
        """ Get: RecordCount(self: ModelTable) -> int """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: ModelTable) -> str """
        ...

    @property
    def SourceWorkbookConnection(self) -> WorkbookConnection:
        """ Get: SourceWorkbookConnection(self: ModelTable) -> WorkbookConnection """
        ...


    def Refresh(self): # -> 
        """ Refresh(self: ModelTable) """
        ...

    def _Dummy7(self): # -> 
        """ _Dummy7(self: ModelTable) """
        ...


class ModelTableColumn: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelTableColumn) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelTableColumn) -> XlCreator """
        ...

    @property
    def DataType(self) -> int:
        """ Get: DataType(self: ModelTableColumn) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ModelTableColumn) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelTableColumn) -> object """
        ...



class ModelTableColumns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelTableColumns) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ModelTableColumns) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelTableColumns) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelTableColumns) -> object """
        ...


    def Item(self, Index:object) -> ModelTableColumn:
        """ Item(self: ModelTableColumns, Index: object) -> ModelTableColumn """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ModelTableNameChange: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelTableNameChange) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelTableNameChange) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelTableNameChange) -> object """
        ...

    @property
    def TableNameNew(self) -> str:
        """ Get: TableNameNew(self: ModelTableNameChange) -> str """
        ...

    @property
    def TableNameOld(self) -> str:
        """ Get: TableNameOld(self: ModelTableNameChange) -> str """
        ...



class ModelTableNameChanges(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelTableNameChanges) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ModelTableNameChanges) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelTableNameChanges) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelTableNameChanges) -> object """
        ...


    def Item(self, Index:object) -> ModelTableNameChange:
        """ Item(self: ModelTableNameChanges, Index: object) -> ModelTableNameChange """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ModelTableNames: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelTableNames) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ModelTableNames) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelTableNames) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelTableNames) -> object """
        ...


    def Item(self, Index:object) -> str:
        """ Item(self: ModelTableNames, Index: object) -> str """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ModelTables(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModelTables) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ModelTables) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModelTables) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModelTables) -> object """
        ...


    def Item(self, Index:object) -> ModelTable:
        """ Item(self: ModelTables, Index: object) -> ModelTable """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Module: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Module) -> Application """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: Module) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Module) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Module) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Module) -> str
        Set: Name(self: Module) = value
        """
        ...

    @property
    def Next(self) -> object:
        """ Get: Next(self: Module) -> object """
        ...

    @property
    def OnDoubleClick(self) -> str:
        """
        Get: OnDoubleClick(self: Module) -> str
        Set: OnDoubleClick(self: Module) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: Module) -> str
        Set: OnSheetActivate(self: Module) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: Module) -> str
        Set: OnSheetDeactivate(self: Module) = value
        """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """ Get: PageSetup(self: Module) -> PageSetup """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Module) -> object """
        ...

    @property
    def Previous(self) -> object:
        """ Get: Previous(self: Module) -> object """
        ...

    @property
    def ProtectContents(self) -> bool:
        """ Get: ProtectContents(self: Module) -> bool """
        ...

    @property
    def ProtectionMode(self) -> bool:
        """ Get: ProtectionMode(self: Module) -> bool """
        ...

    @property
    def Shapes(self) -> Shapes:
        """ Get: Shapes(self: Module) -> Shapes """
        ...

    @property
    def Visible(self) -> XlSheetVisibility:
        """
        Get: Visible(self: Module) -> XlSheetVisibility
        Set: Visible(self: Module) = value
        """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: Module) -> str
        Set: _CodeName(self: Module) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: Module) """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: Module, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Module) """
        ...

    def InsertFile(self, Filename:object, Merge:object) -> object:
        """ InsertFile(self: Module, Filename: object, Merge: object) -> object """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: Module, Before: object, After: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ PrintOut(self: Module, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ Protect(self: Module, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ SaveAs(self: Module, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: Module, Replace: object) """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: Module, Password: object) """
        ...

    def _Dummy18(self): # -> 
        """ _Dummy18(self: Module) """
        ...

    def _Dummy21(self): # -> 
        """ _Dummy21(self: Module) """
        ...

    def _Dummy23(self): # -> 
        """ _Dummy23(self: Module) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: Module, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _PrintOut_2(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut_2(self: Module, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ _Protect(self: Module, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def _SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ _SaveAs(self: Module, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...


class Modules(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Modules) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Modules) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Modules) -> XlCreator """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: Modules) -> HPageBreaks """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Modules) -> object """
        ...

    @property
    def Visible(self) -> object:
        """
        Get: Visible(self: Modules) -> object
        Set: Visible(self: Modules) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: Modules) -> VPageBreaks """
        ...


    def Add(self, Before:object, After:object, Count:object) -> Module:
        """ Add(self: Modules, Before: object, After: object, Count: object) -> Module """
        ...

    def Add2(self, Before:object, After:object, Count:object, NewLayout:object) -> object:
        """ Add2(self: Modules, Before: object, After: object, Count: object, NewLayout: object) -> object """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: Modules, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Modules) """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: Modules, Before: object, After: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: Modules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object, IgnorePrintAreas:object): # -> 
        """ PrintOutEx(self: Modules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: Modules, Replace: object) """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: Modules) """
        ...

    def _Dummy7(self): # -> 
        """ _Dummy7(self: Modules) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: Modules, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ModuleView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ModuleView) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ModuleView) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ModuleView) -> object """
        ...

    @property
    def Sheet(self) -> object:
        """ Get: Sheet(self: ModuleView) -> object """
        ...



class MultiThreadedCalculation: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MultiThreadedCalculation) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: MultiThreadedCalculation) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: MultiThreadedCalculation) -> bool
        Set: Enabled(self: MultiThreadedCalculation) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MultiThreadedCalculation) -> object """
        ...

    @property
    def ThreadCount(self) -> int:
        """
        Get: ThreadCount(self: MultiThreadedCalculation) -> int
        Set: ThreadCount(self: MultiThreadedCalculation) = value
        """
        ...

    @property
    def ThreadMode(self) -> XlThreadMode:
        """
        Get: ThreadMode(self: MultiThreadedCalculation) -> XlThreadMode
        Set: ThreadMode(self: MultiThreadedCalculation) = value
        """
        ...



class Name: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Name) -> Application """
        ...

    @property
    def Category(self) -> str:
        """
        Get: Category(self: Name) -> str
        Set: Category(self: Name) = value
        """
        ...

    @property
    def CategoryLocal(self) -> str:
        """
        Get: CategoryLocal(self: Name) -> str
        Set: CategoryLocal(self: Name) = value
        """
        ...

    @property
    def Comment(self) -> str:
        """
        Get: Comment(self: Name) -> str
        Set: Comment(self: Name) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Name) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Name) -> int """
        ...

    @property
    def MacroType(self) -> XlXLMMacroType:
        """
        Get: MacroType(self: Name) -> XlXLMMacroType
        Set: MacroType(self: Name) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Name) -> str
        Set: Name(self: Name) = value
        """
        ...

    @property
    def NameLocal(self) -> str:
        """
        Get: NameLocal(self: Name) -> str
        Set: NameLocal(self: Name) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Name) -> object """
        ...

    @property
    def RefersTo(self) -> object:
        """
        Get: RefersTo(self: Name) -> object
        Set: RefersTo(self: Name) = value
        """
        ...

    @property
    def RefersToLocal(self) -> object:
        """
        Get: RefersToLocal(self: Name) -> object
        Set: RefersToLocal(self: Name) = value
        """
        ...

    @property
    def RefersToR1C1(self) -> object:
        """
        Get: RefersToR1C1(self: Name) -> object
        Set: RefersToR1C1(self: Name) = value
        """
        ...

    @property
    def RefersToR1C1Local(self) -> object:
        """
        Get: RefersToR1C1Local(self: Name) -> object
        Set: RefersToR1C1Local(self: Name) = value
        """
        ...

    @property
    def RefersToRange(self) -> Range:
        """ Get: RefersToRange(self: Name) -> Range """
        ...

    @property
    def ShortcutKey(self) -> str:
        """
        Get: ShortcutKey(self: Name) -> str
        Set: ShortcutKey(self: Name) = value
        """
        ...

    @property
    def ValidWorkbookParameter(self) -> bool:
        """ Get: ValidWorkbookParameter(self: Name) -> bool """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: Name) -> str
        Set: Value(self: Name) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Name) -> bool
        Set: Visible(self: Name) = value
        """
        ...

    @property
    def WorkbookParameter(self) -> bool:
        """
        Get: WorkbookParameter(self: Name) -> bool
        Set: WorkbookParameter(self: Name) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: Name) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: Name) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Names(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Names) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Names) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Names) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Names) -> object """
        ...


    def Add(self, Name:object, RefersTo:object, Visible:object, MacroType:object, ShortcutKey:object, Category:object, NameLocal:object, RefersToLocal:object, CategoryLocal:object, RefersToR1C1:object, RefersToR1C1Local:object) -> Name:
        """ Add(self: Names, Name: object, RefersTo: object, Visible: object, MacroType: object, ShortcutKey: object, Category: object, NameLocal: object, RefersToLocal: object, CategoryLocal: object, RefersToR1C1: object, RefersToR1C1Local: object) -> Name """
        ...

    def Item(self, Index:object, IndexLocal:object, RefersTo:object) -> Name:
        """ Item(self: Names, Index: object, IndexLocal: object, RefersTo: object) -> Name """
        ...

    def _Default(self, Index:object, IndexLocal:object, RefersTo:object) -> Name:
        """ _Default(self: Names, Index: object, IndexLocal: object, RefersTo: object) -> Name """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class NegativeBarFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: NegativeBarFormat) -> Application """
        ...

    @property
    def BorderColor(self) -> object:
        """ Get: BorderColor(self: NegativeBarFormat) -> object """
        ...

    @property
    def BorderColorType(self) -> XlDataBarNegativeColorType:
        """
        Get: BorderColorType(self: NegativeBarFormat) -> XlDataBarNegativeColorType
        Set: BorderColorType(self: NegativeBarFormat) = value
        """
        ...

    @property
    def Color(self) -> object:
        """ Get: Color(self: NegativeBarFormat) -> object """
        ...

    @property
    def ColorType(self) -> XlDataBarNegativeColorType:
        """
        Get: ColorType(self: NegativeBarFormat) -> XlDataBarNegativeColorType
        Set: ColorType(self: NegativeBarFormat) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: NegativeBarFormat) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NegativeBarFormat) -> object """
        ...



class ODBCConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlwaysUseConnectionFile(self) -> bool:
        """
        Get: AlwaysUseConnectionFile(self: ODBCConnection) -> bool
        Set: AlwaysUseConnectionFile(self: ODBCConnection) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ODBCConnection) -> Application """
        ...

    @property
    def BackgroundQuery(self) -> bool:
        """
        Get: BackgroundQuery(self: ODBCConnection) -> bool
        Set: BackgroundQuery(self: ODBCConnection) = value
        """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: ODBCConnection) -> object
        Set: CommandText(self: ODBCConnection) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: ODBCConnection) -> XlCmdType
        Set: CommandType(self: ODBCConnection) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: ODBCConnection) -> object
        Set: Connection(self: ODBCConnection) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ODBCConnection) -> XlCreator """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: ODBCConnection) -> bool
        Set: EnableRefresh(self: ODBCConnection) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ODBCConnection) -> object """
        ...

    @property
    def RefreshDate(self) -> DateTime:
        """ Get: RefreshDate(self: ODBCConnection) -> DateTime """
        ...

    @property
    def Refreshing(self) -> bool:
        """ Get: Refreshing(self: ODBCConnection) -> bool """
        ...

    @property
    def RefreshOnFileOpen(self) -> bool:
        """
        Get: RefreshOnFileOpen(self: ODBCConnection) -> bool
        Set: RefreshOnFileOpen(self: ODBCConnection) = value
        """
        ...

    @property
    def RefreshPeriod(self) -> int:
        """
        Get: RefreshPeriod(self: ODBCConnection) -> int
        Set: RefreshPeriod(self: ODBCConnection) = value
        """
        ...

    @property
    def RobustConnect(self) -> XlRobustConnect:
        """
        Get: RobustConnect(self: ODBCConnection) -> XlRobustConnect
        Set: RobustConnect(self: ODBCConnection) = value
        """
        ...

    @property
    def SavePassword(self) -> bool:
        """
        Get: SavePassword(self: ODBCConnection) -> bool
        Set: SavePassword(self: ODBCConnection) = value
        """
        ...

    @property
    def ServerCredentialsMethod(self) -> XlCredentialsMethod:
        """
        Get: ServerCredentialsMethod(self: ODBCConnection) -> XlCredentialsMethod
        Set: ServerCredentialsMethod(self: ODBCConnection) = value
        """
        ...

    @property
    def ServerSSOApplicationID(self) -> str:
        """
        Get: ServerSSOApplicationID(self: ODBCConnection) -> str
        Set: ServerSSOApplicationID(self: ODBCConnection) = value
        """
        ...

    @property
    def SourceConnectionFile(self) -> str:
        """
        Get: SourceConnectionFile(self: ODBCConnection) -> str
        Set: SourceConnectionFile(self: ODBCConnection) = value
        """
        ...

    @property
    def SourceData(self) -> object:
        """
        Get: SourceData(self: ODBCConnection) -> object
        Set: SourceData(self: ODBCConnection) = value
        """
        ...

    @property
    def SourceDataFile(self) -> str:
        """
        Get: SourceDataFile(self: ODBCConnection) -> str
        Set: SourceDataFile(self: ODBCConnection) = value
        """
        ...


    def CancelRefresh(self): # -> 
        """ CancelRefresh(self: ODBCConnection) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: ODBCConnection) """
        ...

    def SaveAsODC(self, ODCFileName:str, Description:object, Keywords:object): # -> 
        """ SaveAsODC(self: ODBCConnection, ODCFileName: str, Description: object, Keywords: object) """
        ...


class ODBCError: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ODBCError) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ODBCError) -> XlCreator """
        ...

    @property
    def ErrorString(self) -> str:
        """ Get: ErrorString(self: ODBCError) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ODBCError) -> object """
        ...

    @property
    def SqlState(self) -> str:
        """ Get: SqlState(self: ODBCError) -> str """
        ...



class ODBCErrors(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ODBCErrors) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ODBCErrors) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ODBCErrors) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ODBCErrors) -> object """
        ...


    def Item(self, Index:int) -> ODBCError:
        """ Item(self: ODBCErrors, Index: int) -> ODBCError """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OLEDBConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ADOConnection(self) -> object:
        """ Get: ADOConnection(self: OLEDBConnection) -> object """
        ...

    @property
    def AlwaysUseConnectionFile(self) -> bool:
        """
        Get: AlwaysUseConnectionFile(self: OLEDBConnection) -> bool
        Set: AlwaysUseConnectionFile(self: OLEDBConnection) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OLEDBConnection) -> Application """
        ...

    @property
    def BackgroundQuery(self) -> bool:
        """
        Get: BackgroundQuery(self: OLEDBConnection) -> bool
        Set: BackgroundQuery(self: OLEDBConnection) = value
        """
        ...

    @property
    def CalculatedMembers(self) -> CalculatedMembers:
        """ Get: CalculatedMembers(self: OLEDBConnection) -> CalculatedMembers """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: OLEDBConnection) -> object
        Set: CommandText(self: OLEDBConnection) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: OLEDBConnection) -> XlCmdType
        Set: CommandType(self: OLEDBConnection) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: OLEDBConnection) -> object
        Set: Connection(self: OLEDBConnection) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: OLEDBConnection) -> XlCreator """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: OLEDBConnection) -> bool
        Set: EnableRefresh(self: OLEDBConnection) = value
        """
        ...

    @property
    def IsConnected(self) -> bool:
        """ Get: IsConnected(self: OLEDBConnection) -> bool """
        ...

    @property
    def LocalConnection(self) -> object:
        """
        Get: LocalConnection(self: OLEDBConnection) -> object
        Set: LocalConnection(self: OLEDBConnection) = value
        """
        ...

    @property
    def LocaleID(self) -> int:
        """
        Get: LocaleID(self: OLEDBConnection) -> int
        Set: LocaleID(self: OLEDBConnection) = value
        """
        ...

    @property
    def MaintainConnection(self) -> bool:
        """
        Get: MaintainConnection(self: OLEDBConnection) -> bool
        Set: MaintainConnection(self: OLEDBConnection) = value
        """
        ...

    @property
    def MaxDrillthroughRecords(self) -> int:
        """
        Get: MaxDrillthroughRecords(self: OLEDBConnection) -> int
        Set: MaxDrillthroughRecords(self: OLEDBConnection) = value
        """
        ...

    @property
    def OLAP(self) -> bool:
        """ Get: OLAP(self: OLEDBConnection) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OLEDBConnection) -> object """
        ...

    @property
    def RefreshDate(self) -> DateTime:
        """ Get: RefreshDate(self: OLEDBConnection) -> DateTime """
        ...

    @property
    def Refreshing(self) -> bool:
        """ Get: Refreshing(self: OLEDBConnection) -> bool """
        ...

    @property
    def RefreshOnFileOpen(self) -> bool:
        """
        Get: RefreshOnFileOpen(self: OLEDBConnection) -> bool
        Set: RefreshOnFileOpen(self: OLEDBConnection) = value
        """
        ...

    @property
    def RefreshPeriod(self) -> int:
        """
        Get: RefreshPeriod(self: OLEDBConnection) -> int
        Set: RefreshPeriod(self: OLEDBConnection) = value
        """
        ...

    @property
    def RetrieveInOfficeUILang(self) -> bool:
        """
        Get: RetrieveInOfficeUILang(self: OLEDBConnection) -> bool
        Set: RetrieveInOfficeUILang(self: OLEDBConnection) = value
        """
        ...

    @property
    def RobustConnect(self) -> XlRobustConnect:
        """
        Get: RobustConnect(self: OLEDBConnection) -> XlRobustConnect
        Set: RobustConnect(self: OLEDBConnection) = value
        """
        ...

    @property
    def SavePassword(self) -> bool:
        """
        Get: SavePassword(self: OLEDBConnection) -> bool
        Set: SavePassword(self: OLEDBConnection) = value
        """
        ...

    @property
    def ServerCredentialsMethod(self) -> XlCredentialsMethod:
        """
        Get: ServerCredentialsMethod(self: OLEDBConnection) -> XlCredentialsMethod
        Set: ServerCredentialsMethod(self: OLEDBConnection) = value
        """
        ...

    @property
    def ServerFillColor(self) -> bool:
        """
        Get: ServerFillColor(self: OLEDBConnection) -> bool
        Set: ServerFillColor(self: OLEDBConnection) = value
        """
        ...

    @property
    def ServerFontStyle(self) -> bool:
        """
        Get: ServerFontStyle(self: OLEDBConnection) -> bool
        Set: ServerFontStyle(self: OLEDBConnection) = value
        """
        ...

    @property
    def ServerNumberFormat(self) -> bool:
        """
        Get: ServerNumberFormat(self: OLEDBConnection) -> bool
        Set: ServerNumberFormat(self: OLEDBConnection) = value
        """
        ...

    @property
    def ServerSSOApplicationID(self) -> str:
        """
        Get: ServerSSOApplicationID(self: OLEDBConnection) -> str
        Set: ServerSSOApplicationID(self: OLEDBConnection) = value
        """
        ...

    @property
    def ServerTextColor(self) -> bool:
        """
        Get: ServerTextColor(self: OLEDBConnection) -> bool
        Set: ServerTextColor(self: OLEDBConnection) = value
        """
        ...

    @property
    def SourceConnectionFile(self) -> str:
        """
        Get: SourceConnectionFile(self: OLEDBConnection) -> str
        Set: SourceConnectionFile(self: OLEDBConnection) = value
        """
        ...

    @property
    def SourceDataFile(self) -> str:
        """
        Get: SourceDataFile(self: OLEDBConnection) -> str
        Set: SourceDataFile(self: OLEDBConnection) = value
        """
        ...

    @property
    def UseLocalConnection(self) -> bool:
        """
        Get: UseLocalConnection(self: OLEDBConnection) -> bool
        Set: UseLocalConnection(self: OLEDBConnection) = value
        """
        ...


    def CancelRefresh(self): # -> 
        """ CancelRefresh(self: OLEDBConnection) """
        ...

    def MakeConnection(self): # -> 
        """ MakeConnection(self: OLEDBConnection) """
        ...

    def Reconnect(self): # -> 
        """ Reconnect(self: OLEDBConnection) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: OLEDBConnection) """
        ...

    def SaveAsODC(self, ODCFileName:str, Description:object, Keywords:object): # -> 
        """ SaveAsODC(self: OLEDBConnection, ODCFileName: str, Description: object, Keywords: object) """
        ...


class OLEDBError: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OLEDBError) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: OLEDBError) -> XlCreator """
        ...

    @property
    def ErrorString(self) -> str:
        """ Get: ErrorString(self: OLEDBError) -> str """
        ...

    @property
    def Native(self) -> int:
        """ Get: Native(self: OLEDBError) -> int """
        ...

    @property
    def Number(self) -> int:
        """ Get: Number(self: OLEDBError) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OLEDBError) -> object """
        ...

    @property
    def SqlState(self) -> str:
        """ Get: SqlState(self: OLEDBError) -> str """
        ...

    @property
    def Stage(self) -> int:
        """ Get: Stage(self: OLEDBError) -> int """
        ...



class OLEDBErrors(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OLEDBErrors) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OLEDBErrors) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: OLEDBErrors) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OLEDBErrors) -> object """
        ...


    def Item(self, Index:int) -> OLEDBError:
        """ Item(self: OLEDBErrors, Index: int) -> OLEDBError """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OLEFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OLEFormat) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: OLEFormat) -> XlCreator """
        ...

    @property
    def Object(self) -> object:
        """ Get: Object(self: OLEFormat) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OLEFormat) -> object """
        ...

    @property
    def progID(self) -> str:
        """ Get: progID(self: OLEFormat) -> str """
        ...


    def Activate(self): # -> 
        """ Activate(self: OLEFormat) """
        ...

    def Verb(self, Verb:object): # -> 
        """ Verb(self: OLEFormat, Verb: object) """
        ...


class OLEObjectEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_GotFocus(self): # -> 
        """ add_GotFocus(self: OLEObjectEvents_Event, : OLEObjectEvents_GotFocusEventHandler) """
        ...

    def add_LostFocus(self): # -> 
        """ add_LostFocus(self: OLEObjectEvents_Event, : OLEObjectEvents_LostFocusEventHandler) """
        ...

    def remove_GotFocus(self): # -> 
        """ remove_GotFocus(self: OLEObjectEvents_Event, : OLEObjectEvents_GotFocusEventHandler) """
        ...

    def remove_LostFocus(self): # -> 
        """ remove_LostFocus(self: OLEObjectEvents_Event, : OLEObjectEvents_LostFocusEventHandler) """
        ...

    GotFocus = ...
    LostFocus = ...


class _OLEObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AltHTML(self) -> str:
        """
        Get: AltHTML(self: _OLEObject) -> str
        Set: AltHTML(self: _OLEObject) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _OLEObject) -> Application """
        ...

    @property
    def AutoLoad(self) -> bool:
        """
        Get: AutoLoad(self: _OLEObject) -> bool
        Set: AutoLoad(self: _OLEObject) = value
        """
        ...

    @property
    def AutoUpdate(self) -> bool:
        """
        Get: AutoUpdate(self: _OLEObject) -> bool
        Set: AutoUpdate(self: _OLEObject) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: _OLEObject) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: _OLEObject) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: _OLEObject) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OLEObject) -> bool
        Set: Enabled(self: _OLEObject) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: _OLEObject) -> float
        Set: Height(self: _OLEObject) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: _OLEObject) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: _OLEObject) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: _OLEObject) -> float
        Set: Left(self: _OLEObject) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: _OLEObject) -> str
        Set: LinkedCell(self: _OLEObject) = value
        """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: _OLEObject) -> str
        Set: ListFillRange(self: _OLEObject) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: _OLEObject) -> bool
        Set: Locked(self: _OLEObject) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _OLEObject) -> str
        Set: Name(self: _OLEObject) = value
        """
        ...

    @property
    def Object(self) -> object:
        """ Get: Object(self: _OLEObject) -> object """
        ...

    @property
    def OLEType(self) -> object:
        """ Get: OLEType(self: _OLEObject) -> object """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: _OLEObject) -> str
        Set: OnAction(self: _OLEObject) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _OLEObject) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: _OLEObject) -> object
        Set: Placement(self: _OLEObject) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: _OLEObject) -> bool
        Set: PrintObject(self: _OLEObject) = value
        """
        ...

    @property
    def progID(self) -> str:
        """ Get: progID(self: _OLEObject) -> str """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: _OLEObject) -> bool
        Set: Shadow(self: _OLEObject) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: _OLEObject) -> ShapeRange """
        ...

    @property
    def SourceName(self) -> str:
        """
        Get: SourceName(self: _OLEObject) -> str
        Set: SourceName(self: _OLEObject) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: _OLEObject) -> float
        Set: Top(self: _OLEObject) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: _OLEObject) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _OLEObject) -> bool
        Set: Visible(self: _OLEObject) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: _OLEObject) -> float
        Set: Width(self: _OLEObject) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: _OLEObject) -> int """
        ...


    def Activate(self) -> object:
        """ Activate(self: _OLEObject) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: _OLEObject) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: _OLEObject) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: _OLEObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: _OLEObject) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: _OLEObject) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: _OLEObject) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: _OLEObject, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: _OLEObject) -> object """
        ...

    def Update(self) -> object:
        """ Update(self: _OLEObject) -> object """
        ...

    def Verb(self, Verb:XlOLEVerb) -> object:
        """ Verb(self: _OLEObject, Verb: XlOLEVerb) -> object """
        ...


class OLEObject(_OLEObject, OLEObjectEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OLEObjectClass(__ComObject, OLEObject): # skipped bases: <type 'OLEObjectEvents_Event'>, <type '_OLEObject'>, <type 'object'>
    """ OLEObjectClass() """
    @property
    def AltHTML(self) -> str:
        """
        Get: AltHTML(self: OLEObjectClass) -> str
        Set: AltHTML(self: OLEObjectClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OLEObjectClass) -> Application """
        ...

    @property
    def AutoLoad(self) -> bool:
        """
        Get: AutoLoad(self: OLEObjectClass) -> bool
        Set: AutoLoad(self: OLEObjectClass) = value
        """
        ...

    @property
    def AutoUpdate(self) -> bool:
        """
        Get: AutoUpdate(self: OLEObjectClass) -> bool
        Set: AutoUpdate(self: OLEObjectClass) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: OLEObjectClass) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: OLEObjectClass) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: OLEObjectClass) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OLEObjectClass) -> bool
        Set: Enabled(self: OLEObjectClass) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: OLEObjectClass) -> float
        Set: Height(self: OLEObjectClass) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: OLEObjectClass) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: OLEObjectClass) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: OLEObjectClass) -> float
        Set: Left(self: OLEObjectClass) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: OLEObjectClass) -> str
        Set: LinkedCell(self: OLEObjectClass) = value
        """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: OLEObjectClass) -> str
        Set: ListFillRange(self: OLEObjectClass) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: OLEObjectClass) -> bool
        Set: Locked(self: OLEObjectClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: OLEObjectClass) -> str
        Set: Name(self: OLEObjectClass) = value
        """
        ...

    @property
    def Object(self) -> object:
        """ Get: Object(self: OLEObjectClass) -> object """
        ...

    @property
    def OLEType(self) -> object:
        """ Get: OLEType(self: OLEObjectClass) -> object """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: OLEObjectClass) -> str
        Set: OnAction(self: OLEObjectClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OLEObjectClass) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: OLEObjectClass) -> object
        Set: Placement(self: OLEObjectClass) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: OLEObjectClass) -> bool
        Set: PrintObject(self: OLEObjectClass) = value
        """
        ...

    @property
    def progID(self) -> str:
        """ Get: progID(self: OLEObjectClass) -> str """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: OLEObjectClass) -> bool
        Set: Shadow(self: OLEObjectClass) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: OLEObjectClass) -> ShapeRange """
        ...

    @property
    def SourceName(self) -> str:
        """
        Get: SourceName(self: OLEObjectClass) -> str
        Set: SourceName(self: OLEObjectClass) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: OLEObjectClass) -> float
        Set: Top(self: OLEObjectClass) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: OLEObjectClass) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: OLEObjectClass) -> bool
        Set: Visible(self: OLEObjectClass) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: OLEObjectClass) -> float
        Set: Width(self: OLEObjectClass) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: OLEObjectClass) -> int """
        ...


    def Activate(self) -> object:
        """ Activate(self: OLEObjectClass) -> object """
        ...

    def add_GotFocus(self): # -> 
        """ add_GotFocus(self: OLEObjectClass, : OLEObjectEvents_GotFocusEventHandler) """
        ...

    def add_LostFocus(self): # -> 
        """ add_LostFocus(self: OLEObjectClass, : OLEObjectEvents_LostFocusEventHandler) """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: OLEObjectClass) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: OLEObjectClass) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: OLEObjectClass, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: OLEObjectClass) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: OLEObjectClass) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: OLEObjectClass) -> object """
        ...

    def remove_GotFocus(self): # -> 
        """ remove_GotFocus(self: OLEObjectClass, : OLEObjectEvents_GotFocusEventHandler) """
        ...

    def remove_LostFocus(self): # -> 
        """ remove_LostFocus(self: OLEObjectClass, : OLEObjectEvents_LostFocusEventHandler) """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: OLEObjectClass, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: OLEObjectClass) -> object """
        ...

    def Update(self) -> object:
        """ Update(self: OLEObjectClass) -> object """
        ...

    def Verb(self, Verb:XlOLEVerb) -> object:
        """ Verb(self: OLEObjectClass, Verb: XlOLEVerb) -> object """
        ...

    GotFocus = ...
    LostFocus = ...


class OLEObjectEvents: # skipped bases: <type 'object'>
    """ no doc """
    def GotFocus(self): # -> 
        """ GotFocus(self: OLEObjectEvents) """
        ...

    def LostFocus(self): # -> 
        """ LostFocus(self: OLEObjectEvents) """
        ...


class OLEObjectEvents_GotFocusEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OLEObjectEvents_GotFocusEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OLEObjectEvents_GotFocusEventHandler) """
        ...


class OLEObjectEvents_LostFocusEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OLEObjectEvents_LostFocusEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OLEObjectEvents_LostFocusEventHandler) """
        ...


class OLEObjectEvents_SinkHelper(OLEObjectEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_GotFocusDelegate = ...
    m_LostFocusDelegate = ...


class OLEObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OLEObjects) -> Application """
        ...

    @property
    def AutoLoad(self) -> bool:
        """
        Get: AutoLoad(self: OLEObjects) -> bool
        Set: AutoLoad(self: OLEObjects) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: OLEObjects) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OLEObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: OLEObjects) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OLEObjects) -> bool
        Set: Enabled(self: OLEObjects) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: OLEObjects) -> float
        Set: Height(self: OLEObjects) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: OLEObjects) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: OLEObjects) -> float
        Set: Left(self: OLEObjects) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: OLEObjects) -> bool
        Set: Locked(self: OLEObjects) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: OLEObjects) -> str
        Set: OnAction(self: OLEObjects) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OLEObjects) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: OLEObjects) -> object
        Set: Placement(self: OLEObjects) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: OLEObjects) -> bool
        Set: PrintObject(self: OLEObjects) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: OLEObjects) -> bool
        Set: Shadow(self: OLEObjects) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: OLEObjects) -> ShapeRange """
        ...

    @property
    def SourceName(self) -> str:
        """
        Get: SourceName(self: OLEObjects) -> str
        Set: SourceName(self: OLEObjects) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: OLEObjects) -> float
        Set: Top(self: OLEObjects) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: OLEObjects) -> bool
        Set: Visible(self: OLEObjects) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: OLEObjects) -> float
        Set: Width(self: OLEObjects) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: OLEObjects) -> int """
        ...


    def Add(self, ClassType:object, Filename:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object, Left:object, Top:object, Width:object, Height:object) -> OLEObject:
        """ Add(self: OLEObjects, ClassType: object, Filename: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, Left: object, Top: object, Width: object, Height: object) -> OLEObject """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: OLEObjects) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: OLEObjects) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: OLEObjects, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: OLEObjects) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: OLEObjects) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: OLEObjects) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: OLEObjects) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: OLEObjects, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: OLEObjects, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: OLEObjects) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: OLEObjects) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: OLEObjects) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: OLEObjects) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: OLEObjects) """
        ...

    def _Dummy30(self): # -> 
        """ _Dummy30(self: OLEObjects) """
        ...

    def _Dummy32(self): # -> 
        """ _Dummy32(self: OLEObjects) """
        ...

    def _Dummy33(self): # -> 
        """ _Dummy33(self: OLEObjects) """
        ...

    def _Dummy34(self): # -> 
        """ _Dummy34(self: OLEObjects) """
        ...

    def _Dummy36(self): # -> 
        """ _Dummy36(self: OLEObjects) """
        ...

    def _Dummy37(self): # -> 
        """ _Dummy37(self: OLEObjects) """
        ...

    def _Dummy38(self): # -> 
        """ _Dummy38(self: OLEObjects) """
        ...

    def _Dummy39(self): # -> 
        """ _Dummy39(self: OLEObjects) """
        ...

    def _Dummy40(self): # -> 
        """ _Dummy40(self: OLEObjects) """
        ...

    def _Dummy41(self): # -> 
        """ _Dummy41(self: OLEObjects) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class OptionButton: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: OptionButton) -> object
        Set: Accelerator(self: OptionButton) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OptionButton) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: OptionButton) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: OptionButton) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: OptionButton) -> str
        Set: Caption(self: OptionButton) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: OptionButton) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: OptionButton) -> bool
        Set: Display3DShading(self: OptionButton) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OptionButton) -> bool
        Set: Enabled(self: OptionButton) = value
        """
        ...

    @property
    def GroupBox(self) -> GroupBox:
        """ Get: GroupBox(self: OptionButton) -> GroupBox """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: OptionButton) -> float
        Set: Height(self: OptionButton) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: OptionButton) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: OptionButton) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: OptionButton) -> float
        Set: Left(self: OptionButton) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: OptionButton) -> str
        Set: LinkedCell(self: OptionButton) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: OptionButton) -> bool
        Set: Locked(self: OptionButton) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: OptionButton) -> bool
        Set: LockedText(self: OptionButton) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: OptionButton) -> str
        Set: Name(self: OptionButton) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: OptionButton) -> str
        Set: OnAction(self: OptionButton) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OptionButton) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: OptionButton) -> object
        Set: PhoneticAccelerator(self: OptionButton) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: OptionButton) -> object
        Set: Placement(self: OptionButton) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: OptionButton) -> bool
        Set: PrintObject(self: OptionButton) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: OptionButton) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: OptionButton) -> str
        Set: Text(self: OptionButton) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: OptionButton) -> float
        Set: Top(self: OptionButton) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: OptionButton) -> Range """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: OptionButton) -> object
        Set: Value(self: OptionButton) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: OptionButton) -> bool
        Set: Visible(self: OptionButton) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: OptionButton) -> float
        Set: Width(self: OptionButton) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: OptionButton) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: OptionButton) -> int
        Set: _Default(self: OptionButton) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: OptionButton) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: OptionButton, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: OptionButton) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: OptionButton, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: OptionButton) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: OptionButton) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: OptionButton) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: OptionButton, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: OptionButton) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OptionButtons(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> object:
        """
        Get: Accelerator(self: OptionButtons) -> object
        Set: Accelerator(self: OptionButtons) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OptionButtons) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: OptionButtons) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: OptionButtons) -> str
        Set: Caption(self: OptionButtons) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OptionButtons) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: OptionButtons) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: OptionButtons) -> bool
        Set: Display3DShading(self: OptionButtons) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OptionButtons) -> bool
        Set: Enabled(self: OptionButtons) = value
        """
        ...

    @property
    def GroupBox(self) -> GroupBox:
        """ Get: GroupBox(self: OptionButtons) -> GroupBox """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: OptionButtons) -> float
        Set: Height(self: OptionButtons) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: OptionButtons) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: OptionButtons) -> float
        Set: Left(self: OptionButtons) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: OptionButtons) -> str
        Set: LinkedCell(self: OptionButtons) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: OptionButtons) -> bool
        Set: Locked(self: OptionButtons) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: OptionButtons) -> bool
        Set: LockedText(self: OptionButtons) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: OptionButtons) -> str
        Set: OnAction(self: OptionButtons) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OptionButtons) -> object """
        ...

    @property
    def PhoneticAccelerator(self) -> object:
        """
        Get: PhoneticAccelerator(self: OptionButtons) -> object
        Set: PhoneticAccelerator(self: OptionButtons) = value
        """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: OptionButtons) -> object
        Set: Placement(self: OptionButtons) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: OptionButtons) -> bool
        Set: PrintObject(self: OptionButtons) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: OptionButtons) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: OptionButtons) -> str
        Set: Text(self: OptionButtons) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: OptionButtons) -> float
        Set: Top(self: OptionButtons) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: OptionButtons) -> object
        Set: Value(self: OptionButtons) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: OptionButtons) -> bool
        Set: Visible(self: OptionButtons) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: OptionButtons) -> float
        Set: Width(self: OptionButtons) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: OptionButtons) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: OptionButtons) -> int
        Set: _Default(self: OptionButtons) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> OptionButton:
        """ Add(self: OptionButtons, Left: float, Top: float, Width: float, Height: float) -> OptionButton """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: OptionButtons) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: OptionButtons, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: OptionButtons) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: OptionButtons, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: OptionButtons) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: OptionButtons) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: OptionButtons) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: OptionButtons) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: OptionButtons, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: OptionButtons, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: OptionButtons) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: OptionButtons) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: OptionButtons) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: OptionButtons) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: OptionButtons) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Outline: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Outline) -> Application """
        ...

    @property
    def AutomaticStyles(self) -> bool:
        """
        Get: AutomaticStyles(self: Outline) -> bool
        Set: AutomaticStyles(self: Outline) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Outline) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Outline) -> object """
        ...

    @property
    def SummaryColumn(self) -> XlSummaryColumn:
        """
        Get: SummaryColumn(self: Outline) -> XlSummaryColumn
        Set: SummaryColumn(self: Outline) = value
        """
        ...

    @property
    def SummaryRow(self) -> XlSummaryRow:
        """
        Get: SummaryRow(self: Outline) -> XlSummaryRow
        Set: SummaryRow(self: Outline) = value
        """
        ...


    def ShowLevels(self, RowLevels:object, ColumnLevels:object) -> object:
        """ ShowLevels(self: Outline, RowLevels: object, ColumnLevels: object) -> object """
        ...


class Oval: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: Oval) -> bool
        Set: AddIndent(self: Oval) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Oval) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Oval) -> object
        Set: AutoScaleFont(self: Oval) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Oval) -> bool
        Set: AutoSize(self: Oval) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Oval) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: Oval) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Oval) -> str
        Set: Caption(self: Oval) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Oval) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Oval) -> bool
        Set: Enabled(self: Oval) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Oval) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Oval) -> str
        Set: Formula(self: Oval) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Oval) -> float
        Set: Height(self: Oval) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: Oval) -> object
        Set: HorizontalAlignment(self: Oval) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Oval) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Oval) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Oval) -> float
        Set: Left(self: Oval) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Oval) -> bool
        Set: Locked(self: Oval) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Oval) -> bool
        Set: LockedText(self: Oval) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Oval) -> str
        Set: Name(self: Oval) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Oval) -> str
        Set: OnAction(self: Oval) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: Oval) -> object
        Set: Orientation(self: Oval) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Oval) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Oval) -> object
        Set: Placement(self: Oval) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Oval) -> bool
        Set: PrintObject(self: Oval) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Oval) -> int
        Set: ReadingOrder(self: Oval) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Oval) -> bool
        Set: Shadow(self: Oval) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Oval) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Oval) -> str
        Set: Text(self: Oval) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Oval) -> float
        Set: Top(self: Oval) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: Oval) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: Oval) -> object
        Set: VerticalAlignment(self: Oval) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Oval) -> bool
        Set: Visible(self: Oval) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Oval) -> float
        Set: Width(self: Oval) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Oval) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: Oval) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Oval, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Oval) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Oval, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Oval) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Oval) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Oval) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Oval, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Oval) -> object """
        ...


class Ovals(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: Ovals) -> bool
        Set: AddIndent(self: Ovals) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Ovals) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Ovals) -> object
        Set: AutoScaleFont(self: Ovals) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Ovals) -> bool
        Set: AutoSize(self: Ovals) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Ovals) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Ovals) -> str
        Set: Caption(self: Ovals) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Ovals) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Ovals) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Ovals) -> bool
        Set: Enabled(self: Ovals) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Ovals) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Ovals) -> str
        Set: Formula(self: Ovals) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Ovals) -> float
        Set: Height(self: Ovals) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: Ovals) -> object
        Set: HorizontalAlignment(self: Ovals) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Ovals) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Ovals) -> float
        Set: Left(self: Ovals) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Ovals) -> bool
        Set: Locked(self: Ovals) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Ovals) -> bool
        Set: LockedText(self: Ovals) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Ovals) -> str
        Set: OnAction(self: Ovals) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: Ovals) -> object
        Set: Orientation(self: Ovals) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Ovals) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Ovals) -> object
        Set: Placement(self: Ovals) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Ovals) -> bool
        Set: PrintObject(self: Ovals) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Ovals) -> int
        Set: ReadingOrder(self: Ovals) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Ovals) -> bool
        Set: Shadow(self: Ovals) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Ovals) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Ovals) -> str
        Set: Text(self: Ovals) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Ovals) -> float
        Set: Top(self: Ovals) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: Ovals) -> object
        Set: VerticalAlignment(self: Ovals) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Ovals) -> bool
        Set: Visible(self: Ovals) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Ovals) -> float
        Set: Width(self: Ovals) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Ovals) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Oval:
        """ Add(self: Ovals, Left: float, Top: float, Width: float, Height: float) -> Oval """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: Ovals) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Ovals, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Ovals) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Ovals, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Ovals) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Ovals) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Ovals) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: Ovals) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: Ovals, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Ovals, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Ovals) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: Ovals) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: Ovals) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: Ovals) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: Ovals) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class Page: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def CenterFooter(self) -> HeaderFooter:
        """ Get: CenterFooter(self: Page) -> HeaderFooter """
        ...

    @property
    def CenterHeader(self) -> HeaderFooter:
        """ Get: CenterHeader(self: Page) -> HeaderFooter """
        ...

    @property
    def LeftFooter(self) -> HeaderFooter:
        """ Get: LeftFooter(self: Page) -> HeaderFooter """
        ...

    @property
    def LeftHeader(self) -> HeaderFooter:
        """ Get: LeftHeader(self: Page) -> HeaderFooter """
        ...

    @property
    def RightFooter(self) -> HeaderFooter:
        """ Get: RightFooter(self: Page) -> HeaderFooter """
        ...

    @property
    def RightHeader(self) -> HeaderFooter:
        """ Get: RightHeader(self: Page) -> HeaderFooter """
        ...



class Pages(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: Pages) -> int """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class PageSetup: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlignMarginsHeaderFooter(self) -> bool:
        """
        Get: AlignMarginsHeaderFooter(self: PageSetup) -> bool
        Set: AlignMarginsHeaderFooter(self: PageSetup) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: PageSetup) -> Application """
        ...

    @property
    def BlackAndWhite(self) -> bool:
        """
        Get: BlackAndWhite(self: PageSetup) -> bool
        Set: BlackAndWhite(self: PageSetup) = value
        """
        ...

    @property
    def BottomMargin(self) -> float:
        """
        Get: BottomMargin(self: PageSetup) -> float
        Set: BottomMargin(self: PageSetup) = value
        """
        ...

    @property
    def CenterFooter(self) -> str:
        """
        Get: CenterFooter(self: PageSetup) -> str
        Set: CenterFooter(self: PageSetup) = value
        """
        ...

    @property
    def CenterFooterPicture(self) -> Graphic:
        """ Get: CenterFooterPicture(self: PageSetup) -> Graphic """
        ...

    @property
    def CenterHeader(self) -> str:
        """
        Get: CenterHeader(self: PageSetup) -> str
        Set: CenterHeader(self: PageSetup) = value
        """
        ...

    @property
    def CenterHeaderPicture(self) -> Graphic:
        """ Get: CenterHeaderPicture(self: PageSetup) -> Graphic """
        ...

    @property
    def CenterHorizontally(self) -> bool:
        """
        Get: CenterHorizontally(self: PageSetup) -> bool
        Set: CenterHorizontally(self: PageSetup) = value
        """
        ...

    @property
    def CenterVertically(self) -> bool:
        """
        Get: CenterVertically(self: PageSetup) -> bool
        Set: CenterVertically(self: PageSetup) = value
        """
        ...

    @property
    def ChartSize(self) -> XlObjectSize:
        """
        Get: ChartSize(self: PageSetup) -> XlObjectSize
        Set: ChartSize(self: PageSetup) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PageSetup) -> XlCreator """
        ...

    @property
    def DifferentFirstPageHeaderFooter(self) -> bool:
        """
        Get: DifferentFirstPageHeaderFooter(self: PageSetup) -> bool
        Set: DifferentFirstPageHeaderFooter(self: PageSetup) = value
        """
        ...

    @property
    def Draft(self) -> bool:
        """
        Get: Draft(self: PageSetup) -> bool
        Set: Draft(self: PageSetup) = value
        """
        ...

    @property
    def EvenPage(self) -> Page:
        """ Get: EvenPage(self: PageSetup) -> Page """
        ...

    @property
    def FirstPage(self) -> Page:
        """ Get: FirstPage(self: PageSetup) -> Page """
        ...

    @property
    def FirstPageNumber(self) -> int:
        """
        Get: FirstPageNumber(self: PageSetup) -> int
        Set: FirstPageNumber(self: PageSetup) = value
        """
        ...

    @property
    def FitToPagesTall(self) -> object:
        """
        Get: FitToPagesTall(self: PageSetup) -> object
        Set: FitToPagesTall(self: PageSetup) = value
        """
        ...

    @property
    def FitToPagesWide(self) -> object:
        """
        Get: FitToPagesWide(self: PageSetup) -> object
        Set: FitToPagesWide(self: PageSetup) = value
        """
        ...

    @property
    def FooterMargin(self) -> float:
        """
        Get: FooterMargin(self: PageSetup) -> float
        Set: FooterMargin(self: PageSetup) = value
        """
        ...

    @property
    def HeaderMargin(self) -> float:
        """
        Get: HeaderMargin(self: PageSetup) -> float
        Set: HeaderMargin(self: PageSetup) = value
        """
        ...

    @property
    def LeftFooter(self) -> str:
        """
        Get: LeftFooter(self: PageSetup) -> str
        Set: LeftFooter(self: PageSetup) = value
        """
        ...

    @property
    def LeftFooterPicture(self) -> Graphic:
        """ Get: LeftFooterPicture(self: PageSetup) -> Graphic """
        ...

    @property
    def LeftHeader(self) -> str:
        """
        Get: LeftHeader(self: PageSetup) -> str
        Set: LeftHeader(self: PageSetup) = value
        """
        ...

    @property
    def LeftHeaderPicture(self) -> Graphic:
        """ Get: LeftHeaderPicture(self: PageSetup) -> Graphic """
        ...

    @property
    def LeftMargin(self) -> float:
        """
        Get: LeftMargin(self: PageSetup) -> float
        Set: LeftMargin(self: PageSetup) = value
        """
        ...

    @property
    def OddAndEvenPagesHeaderFooter(self) -> bool:
        """
        Get: OddAndEvenPagesHeaderFooter(self: PageSetup) -> bool
        Set: OddAndEvenPagesHeaderFooter(self: PageSetup) = value
        """
        ...

    @property
    def Order(self) -> XlOrder:
        """
        Get: Order(self: PageSetup) -> XlOrder
        Set: Order(self: PageSetup) = value
        """
        ...

    @property
    def Orientation(self) -> XlPageOrientation:
        """
        Get: Orientation(self: PageSetup) -> XlPageOrientation
        Set: Orientation(self: PageSetup) = value
        """
        ...

    @property
    def Pages(self) -> Pages:
        """ Get: Pages(self: PageSetup) -> Pages """
        ...

    @property
    def PaperSize(self) -> XlPaperSize:
        """
        Get: PaperSize(self: PageSetup) -> XlPaperSize
        Set: PaperSize(self: PageSetup) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PageSetup) -> object """
        ...

    @property
    def PrintArea(self) -> str:
        """
        Get: PrintArea(self: PageSetup) -> str
        Set: PrintArea(self: PageSetup) = value
        """
        ...

    @property
    def PrintComments(self) -> XlPrintLocation:
        """
        Get: PrintComments(self: PageSetup) -> XlPrintLocation
        Set: PrintComments(self: PageSetup) = value
        """
        ...

    @property
    def PrintErrors(self) -> XlPrintErrors:
        """
        Get: PrintErrors(self: PageSetup) -> XlPrintErrors
        Set: PrintErrors(self: PageSetup) = value
        """
        ...

    @property
    def PrintGridlines(self) -> bool:
        """
        Get: PrintGridlines(self: PageSetup) -> bool
        Set: PrintGridlines(self: PageSetup) = value
        """
        ...

    @property
    def PrintHeadings(self) -> bool:
        """
        Get: PrintHeadings(self: PageSetup) -> bool
        Set: PrintHeadings(self: PageSetup) = value
        """
        ...

    @property
    def PrintNotes(self) -> bool:
        """
        Get: PrintNotes(self: PageSetup) -> bool
        Set: PrintNotes(self: PageSetup) = value
        """
        ...

    @property
    def PrintTitleColumns(self) -> str:
        """
        Get: PrintTitleColumns(self: PageSetup) -> str
        Set: PrintTitleColumns(self: PageSetup) = value
        """
        ...

    @property
    def PrintTitleRows(self) -> str:
        """
        Get: PrintTitleRows(self: PageSetup) -> str
        Set: PrintTitleRows(self: PageSetup) = value
        """
        ...

    @property
    def RightFooter(self) -> str:
        """
        Get: RightFooter(self: PageSetup) -> str
        Set: RightFooter(self: PageSetup) = value
        """
        ...

    @property
    def RightFooterPicture(self) -> Graphic:
        """ Get: RightFooterPicture(self: PageSetup) -> Graphic """
        ...

    @property
    def RightHeader(self) -> str:
        """
        Get: RightHeader(self: PageSetup) -> str
        Set: RightHeader(self: PageSetup) = value
        """
        ...

    @property
    def RightHeaderPicture(self) -> Graphic:
        """ Get: RightHeaderPicture(self: PageSetup) -> Graphic """
        ...

    @property
    def RightMargin(self) -> float:
        """
        Get: RightMargin(self: PageSetup) -> float
        Set: RightMargin(self: PageSetup) = value
        """
        ...

    @property
    def ScaleWithDocHeaderFooter(self) -> bool:
        """
        Get: ScaleWithDocHeaderFooter(self: PageSetup) -> bool
        Set: ScaleWithDocHeaderFooter(self: PageSetup) = value
        """
        ...

    @property
    def TopMargin(self) -> float:
        """
        Get: TopMargin(self: PageSetup) -> float
        Set: TopMargin(self: PageSetup) = value
        """
        ...

    @property
    def Zoom(self) -> object:
        """
        Get: Zoom(self: PageSetup) -> object
        Set: Zoom(self: PageSetup) = value
        """
        ...



class Pane: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Pane) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Pane) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Pane) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Pane) -> object """
        ...

    @property
    def ScrollColumn(self) -> int:
        """
        Get: ScrollColumn(self: Pane) -> int
        Set: ScrollColumn(self: Pane) = value
        """
        ...

    @property
    def ScrollRow(self) -> int:
        """
        Get: ScrollRow(self: Pane) -> int
        Set: ScrollRow(self: Pane) = value
        """
        ...

    @property
    def VisibleRange(self) -> Range:
        """ Get: VisibleRange(self: Pane) -> Range """
        ...


    def Activate(self) -> bool:
        """ Activate(self: Pane) -> bool """
        ...

    def LargeScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> object:
        """ LargeScroll(self: Pane, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        ...

    def PointsToScreenPixelsX(self, Points:int) -> int:
        """ PointsToScreenPixelsX(self: Pane, Points: int) -> int """
        ...

    def PointsToScreenPixelsY(self, Points:int) -> int:
        """ PointsToScreenPixelsY(self: Pane, Points: int) -> int """
        ...

    def ScrollIntoView(self, Left:int, Top:int, Width:int, Height:int, Start:object): # -> 
        """ ScrollIntoView(self: Pane, Left: int, Top: int, Width: int, Height: int, Start: object) """
        ...

    def SmallScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> object:
        """ SmallScroll(self: Pane, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        ...


class Panes: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Panes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Panes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Panes) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Panes) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Parameter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Parameter) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Parameter) -> XlCreator """
        ...

    @property
    def DataType(self) -> XlParameterDataType:
        """
        Get: DataType(self: Parameter) -> XlParameterDataType
        Set: DataType(self: Parameter) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Parameter) -> str
        Set: Name(self: Parameter) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Parameter) -> object """
        ...

    @property
    def PromptString(self) -> str:
        """ Get: PromptString(self: Parameter) -> str """
        ...

    @property
    def RefreshOnChange(self) -> bool:
        """
        Get: RefreshOnChange(self: Parameter) -> bool
        Set: RefreshOnChange(self: Parameter) = value
        """
        ...

    @property
    def SourceRange(self) -> Range:
        """ Get: SourceRange(self: Parameter) -> Range """
        ...

    @property
    def Type(self) -> XlParameterType:
        """ Get: Type(self: Parameter) -> XlParameterType """
        ...

    @property
    def Value(self) -> object:
        """ Get: Value(self: Parameter) -> object """
        ...


    def SetParam(self, Type:XlParameterType, Value:object): # -> 
        """ SetParam(self: Parameter, Type: XlParameterType, Value: object) """
        ...


class Parameters(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Parameters) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Parameters) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Parameters) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Parameters) -> object """
        ...


    def Add(self, Name:str, iDataType:object) -> Parameter:
        """ Add(self: Parameters, Name: str, iDataType: object) -> Parameter """
        ...

    def Delete(self): # -> 
        """ Delete(self: Parameters) """
        ...

    def Item(self, Index:object) -> Parameter:
        """ Item(self: Parameters, Index: object) -> Parameter """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Phonetic: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> int:
        """
        Get: Alignment(self: Phonetic) -> int
        Set: Alignment(self: Phonetic) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Phonetic) -> Application """
        ...

    @property
    def CharacterType(self) -> int:
        """
        Get: CharacterType(self: Phonetic) -> int
        Set: CharacterType(self: Phonetic) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Phonetic) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Phonetic) -> Font """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Phonetic) -> object """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Phonetic) -> str
        Set: Text(self: Phonetic) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Phonetic) -> bool
        Set: Visible(self: Phonetic) = value
        """
        ...



class Phonetics(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> int:
        """
        Get: Alignment(self: Phonetics) -> int
        Set: Alignment(self: Phonetics) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Phonetics) -> Application """
        ...

    @property
    def CharacterType(self) -> int:
        """
        Get: CharacterType(self: Phonetics) -> int
        Set: CharacterType(self: Phonetics) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Phonetics) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Phonetics) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Phonetics) -> Font """
        ...

    @property
    def Length(self) -> int:
        """ Get: Length(self: Phonetics) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Phonetics) -> object """
        ...

    @property
    def Start(self) -> int:
        """ Get: Start(self: Phonetics) -> int """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Phonetics) -> str
        Set: Text(self: Phonetics) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Phonetics) -> bool
        Set: Visible(self: Phonetics) = value
        """
        ...


    def Add(self, Start:int, Length:int, Text:str): # -> 
        """ Add(self: Phonetics, Start: int, Length: int, Text: str) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Phonetics) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Picture: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Picture) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Picture) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: Picture) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Picture) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Picture) -> bool
        Set: Enabled(self: Picture) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Picture) -> str
        Set: Formula(self: Picture) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Picture) -> float
        Set: Height(self: Picture) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Picture) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Picture) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Picture) -> float
        Set: Left(self: Picture) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Picture) -> bool
        Set: Locked(self: Picture) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Picture) -> str
        Set: Name(self: Picture) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Picture) -> str
        Set: OnAction(self: Picture) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Picture) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Picture) -> object
        Set: Placement(self: Picture) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Picture) -> bool
        Set: PrintObject(self: Picture) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Picture) -> bool
        Set: Shadow(self: Picture) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Picture) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Picture) -> float
        Set: Top(self: Picture) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: Picture) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Picture) -> bool
        Set: Visible(self: Picture) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Picture) -> float
        Set: Width(self: Picture) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Picture) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: Picture) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Picture) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Picture, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Picture) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Picture) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Picture) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Picture, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Picture) -> object """
        ...


class PictureFormat(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Brightness(self) -> Single:
        """
        Get: Brightness(self: PictureFormat) -> Single
        Set: Brightness(self: PictureFormat) = value
        """
        ...

    @property
    def ColorType(self): # -> MsoPictureColorType
        """
        Get: ColorType(self: PictureFormat) -> MsoPictureColorType
        Set: ColorType(self: PictureFormat) = value
        """
        ...

    @property
    def Contrast(self) -> Single:
        """
        Get: Contrast(self: PictureFormat) -> Single
        Set: Contrast(self: PictureFormat) = value
        """
        ...

    @property
    def Crop(self): # -> Crop
        """ Get: Crop(self: PictureFormat) -> Crop """
        ...

    @property
    def CropBottom(self) -> Single:
        """
        Get: CropBottom(self: PictureFormat) -> Single
        Set: CropBottom(self: PictureFormat) = value
        """
        ...

    @property
    def CropLeft(self) -> Single:
        """
        Get: CropLeft(self: PictureFormat) -> Single
        Set: CropLeft(self: PictureFormat) = value
        """
        ...

    @property
    def CropRight(self) -> Single:
        """
        Get: CropRight(self: PictureFormat) -> Single
        Set: CropRight(self: PictureFormat) = value
        """
        ...

    @property
    def CropTop(self) -> Single:
        """
        Get: CropTop(self: PictureFormat) -> Single
        Set: CropTop(self: PictureFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PictureFormat) -> object """
        ...

    @property
    def TransparencyColor(self) -> int:
        """
        Get: TransparencyColor(self: PictureFormat) -> int
        Set: TransparencyColor(self: PictureFormat) = value
        """
        ...

    @property
    def TransparentBackground(self): # -> MsoTriState
        """
        Get: TransparentBackground(self: PictureFormat) -> MsoTriState
        Set: TransparentBackground(self: PictureFormat) = value
        """
        ...


    def IncrementBrightness(self, Increment:Single): # -> 
        """ IncrementBrightness(self: PictureFormat, Increment: Single) """
        ...

    def IncrementContrast(self, Increment:Single): # -> 
        """ IncrementContrast(self: PictureFormat, Increment: Single) """
        ...


class Pictures(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Pictures) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Pictures) -> Border """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Pictures) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Pictures) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Pictures) -> bool
        Set: Enabled(self: Pictures) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Pictures) -> str
        Set: Formula(self: Pictures) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Pictures) -> float
        Set: Height(self: Pictures) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Pictures) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Pictures) -> float
        Set: Left(self: Pictures) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Pictures) -> bool
        Set: Locked(self: Pictures) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Pictures) -> str
        Set: OnAction(self: Pictures) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Pictures) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Pictures) -> object
        Set: Placement(self: Pictures) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Pictures) -> bool
        Set: PrintObject(self: Pictures) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Pictures) -> bool
        Set: Shadow(self: Pictures) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Pictures) -> ShapeRange """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Pictures) -> float
        Set: Top(self: Pictures) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Pictures) -> bool
        Set: Visible(self: Pictures) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Pictures) -> float
        Set: Width(self: Pictures) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Pictures) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Picture:
        """ Add(self: Pictures, Left: float, Top: float, Width: float, Height: float) -> Picture """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: Pictures) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Pictures) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Pictures, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Pictures) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Pictures) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Pictures) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: Pictures) -> GroupObject """
        ...

    def Insert(self, Filename:str, Converter:object) -> Picture:
        """ Insert(self: Pictures, Filename: str, Converter: object) -> Picture """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: Pictures, Index: object) -> object """
        ...

    def Paste(self, Link:object) -> Picture:
        """ Paste(self: Pictures, Link: object) -> Picture """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Pictures, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Pictures) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: Pictures) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: Pictures) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: Pictures) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: Pictures) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class PivotAxis: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotAxis) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotAxis) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotAxis) -> object """
        ...

    @property
    def PivotLines(self) -> PivotLines:
        """ Get: PivotLines(self: PivotAxis) -> PivotLines """
        ...



class PivotCache: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ADOConnection(self) -> object:
        """ Get: ADOConnection(self: PivotCache) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotCache) -> Application """
        ...

    @property
    def BackgroundQuery(self) -> bool:
        """
        Get: BackgroundQuery(self: PivotCache) -> bool
        Set: BackgroundQuery(self: PivotCache) = value
        """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: PivotCache) -> object
        Set: CommandText(self: PivotCache) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: PivotCache) -> XlCmdType
        Set: CommandType(self: PivotCache) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: PivotCache) -> object
        Set: Connection(self: PivotCache) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotCache) -> XlCreator """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: PivotCache) -> bool
        Set: EnableRefresh(self: PivotCache) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: PivotCache) -> int """
        ...

    @property
    def IsConnected(self) -> bool:
        """ Get: IsConnected(self: PivotCache) -> bool """
        ...

    @property
    def LocalConnection(self) -> object:
        """
        Get: LocalConnection(self: PivotCache) -> object
        Set: LocalConnection(self: PivotCache) = value
        """
        ...

    @property
    def MaintainConnection(self) -> bool:
        """
        Get: MaintainConnection(self: PivotCache) -> bool
        Set: MaintainConnection(self: PivotCache) = value
        """
        ...

    @property
    def MemoryUsed(self) -> int:
        """ Get: MemoryUsed(self: PivotCache) -> int """
        ...

    @property
    def MissingItemsLimit(self) -> XlPivotTableMissingItems:
        """
        Get: MissingItemsLimit(self: PivotCache) -> XlPivotTableMissingItems
        Set: MissingItemsLimit(self: PivotCache) = value
        """
        ...

    @property
    def OLAP(self) -> bool:
        """ Get: OLAP(self: PivotCache) -> bool """
        ...

    @property
    def OptimizeCache(self) -> bool:
        """
        Get: OptimizeCache(self: PivotCache) -> bool
        Set: OptimizeCache(self: PivotCache) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotCache) -> object """
        ...

    @property
    def QueryType(self) -> XlQueryType:
        """ Get: QueryType(self: PivotCache) -> XlQueryType """
        ...

    @property
    def RecordCount(self) -> int:
        """ Get: RecordCount(self: PivotCache) -> int """
        ...

    @property
    def Recordset(self) -> object:
        """
        Get: Recordset(self: PivotCache) -> object
        Set: Recordset(self: PivotCache) = value
        """
        ...

    @property
    def RefreshDate(self) -> DateTime:
        """ Get: RefreshDate(self: PivotCache) -> DateTime """
        ...

    @property
    def RefreshName(self) -> str:
        """ Get: RefreshName(self: PivotCache) -> str """
        ...

    @property
    def RefreshOnFileOpen(self) -> bool:
        """
        Get: RefreshOnFileOpen(self: PivotCache) -> bool
        Set: RefreshOnFileOpen(self: PivotCache) = value
        """
        ...

    @property
    def RefreshPeriod(self) -> int:
        """
        Get: RefreshPeriod(self: PivotCache) -> int
        Set: RefreshPeriod(self: PivotCache) = value
        """
        ...

    @property
    def RobustConnect(self) -> XlRobustConnect:
        """
        Get: RobustConnect(self: PivotCache) -> XlRobustConnect
        Set: RobustConnect(self: PivotCache) = value
        """
        ...

    @property
    def SavePassword(self) -> bool:
        """
        Get: SavePassword(self: PivotCache) -> bool
        Set: SavePassword(self: PivotCache) = value
        """
        ...

    @property
    def SourceConnectionFile(self) -> str:
        """
        Get: SourceConnectionFile(self: PivotCache) -> str
        Set: SourceConnectionFile(self: PivotCache) = value
        """
        ...

    @property
    def SourceData(self) -> object:
        """
        Get: SourceData(self: PivotCache) -> object
        Set: SourceData(self: PivotCache) = value
        """
        ...

    @property
    def SourceDataFile(self) -> str:
        """ Get: SourceDataFile(self: PivotCache) -> str """
        ...

    @property
    def SourceType(self) -> XlPivotTableSourceType:
        """ Get: SourceType(self: PivotCache) -> XlPivotTableSourceType """
        ...

    @property
    def Sql(self) -> object:
        """
        Get: Sql(self: PivotCache) -> object
        Set: Sql(self: PivotCache) = value
        """
        ...

    @property
    def UpgradeOnRefresh(self) -> bool:
        """
        Get: UpgradeOnRefresh(self: PivotCache) -> bool
        Set: UpgradeOnRefresh(self: PivotCache) = value
        """
        ...

    @property
    def UseLocalConnection(self) -> bool:
        """
        Get: UseLocalConnection(self: PivotCache) -> bool
        Set: UseLocalConnection(self: PivotCache) = value
        """
        ...

    @property
    def Version(self) -> XlPivotTableVersionList:
        """ Get: Version(self: PivotCache) -> XlPivotTableVersionList """
        ...

    @property
    def WorkbookConnection(self) -> WorkbookConnection:
        """ Get: WorkbookConnection(self: PivotCache) -> WorkbookConnection """
        ...


    def CreatePivotChart(self, ChartDestination:object, XlChartType:object, Left:object, Top:object, Width:object, Height:object) -> Shape:
        """ CreatePivotChart(self: PivotCache, ChartDestination: object, XlChartType: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        ...

    def CreatePivotTable(self, TableDestination:object, TableName:object, ReadData:object, DefaultVersion:object) -> PivotTable:
        """ CreatePivotTable(self: PivotCache, TableDestination: object, TableName: object, ReadData: object, DefaultVersion: object) -> PivotTable """
        ...

    def MakeConnection(self): # -> 
        """ MakeConnection(self: PivotCache) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: PivotCache) """
        ...

    def ResetTimer(self): # -> 
        """ ResetTimer(self: PivotCache) """
        ...

    def SaveAsODC(self, ODCFileName:str, Description:object, Keywords:object): # -> 
        """ SaveAsODC(self: PivotCache, ODCFileName: str, Description: object, Keywords: object) """
        ...


class PivotCaches(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotCaches) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PivotCaches) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotCaches) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotCaches) -> object """
        ...


    def Add(self, SourceType:XlPivotTableSourceType, SourceData:object) -> PivotCache:
        """ Add(self: PivotCaches, SourceType: XlPivotTableSourceType, SourceData: object) -> PivotCache """
        ...

    def Create(self, SourceType:XlPivotTableSourceType, SourceData:object, Version:object) -> PivotCache:
        """ Create(self: PivotCaches, SourceType: XlPivotTableSourceType, SourceData: object, Version: object) -> PivotCache """
        ...

    def Item(self, Index:object) -> PivotCache:
        """ Item(self: PivotCaches, Index: object) -> PivotCache """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class PivotCell: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotCell) -> Application """
        ...

    @property
    def CellChanged(self) -> XlCellChangedState:
        """ Get: CellChanged(self: PivotCell) -> XlCellChangedState """
        ...

    @property
    def ColumnItems(self) -> PivotItemList:
        """ Get: ColumnItems(self: PivotCell) -> PivotItemList """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotCell) -> XlCreator """
        ...

    @property
    def CustomSubtotalFunction(self) -> XlConsolidationFunction:
        """ Get: CustomSubtotalFunction(self: PivotCell) -> XlConsolidationFunction """
        ...

    @property
    def DataField(self) -> PivotField:
        """ Get: DataField(self: PivotCell) -> PivotField """
        ...

    @property
    def DataSourceValue(self) -> object:
        """ Get: DataSourceValue(self: PivotCell) -> object """
        ...

    @property
    def Dummy18(self) -> str:
        """ Get: Dummy18(self: PivotCell) -> str """
        ...

    @property
    def MDX(self) -> str:
        """ Get: MDX(self: PivotCell) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotCell) -> object """
        ...

    @property
    def PivotCellType(self) -> XlPivotCellType:
        """ Get: PivotCellType(self: PivotCell) -> XlPivotCellType """
        ...

    @property
    def PivotColumnLine(self) -> PivotLine:
        """ Get: PivotColumnLine(self: PivotCell) -> PivotLine """
        ...

    @property
    def PivotField(self) -> PivotField:
        """ Get: PivotField(self: PivotCell) -> PivotField """
        ...

    @property
    def PivotItem(self) -> PivotItem:
        """ Get: PivotItem(self: PivotCell) -> PivotItem """
        ...

    @property
    def PivotRowLine(self) -> PivotLine:
        """ Get: PivotRowLine(self: PivotCell) -> PivotLine """
        ...

    @property
    def PivotTable(self) -> PivotTable:
        """ Get: PivotTable(self: PivotCell) -> PivotTable """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: PivotCell) -> Range """
        ...

    @property
    def RowItems(self) -> PivotItemList:
        """ Get: RowItems(self: PivotCell) -> PivotItemList """
        ...

    @property
    def ServerActions(self) -> Actions:
        """ Get: ServerActions(self: PivotCell) -> Actions """
        ...


    def AllocateChange(self): # -> 
        """ AllocateChange(self: PivotCell) """
        ...

    def DiscardChange(self): # -> 
        """ DiscardChange(self: PivotCell) """
        ...


class PivotField: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllItemsVisible(self) -> bool:
        """ Get: AllItemsVisible(self: PivotField) -> bool """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotField) -> Application """
        ...

    @property
    def AutoShowCount(self) -> int:
        """ Get: AutoShowCount(self: PivotField) -> int """
        ...

    @property
    def AutoShowField(self) -> str:
        """ Get: AutoShowField(self: PivotField) -> str """
        ...

    @property
    def AutoShowRange(self) -> int:
        """ Get: AutoShowRange(self: PivotField) -> int """
        ...

    @property
    def AutoShowType(self) -> int:
        """ Get: AutoShowType(self: PivotField) -> int """
        ...

    @property
    def AutoSortCustomSubtotal(self) -> int:
        """ Get: AutoSortCustomSubtotal(self: PivotField) -> int """
        ...

    @property
    def AutoSortField(self) -> str:
        """ Get: AutoSortField(self: PivotField) -> str """
        ...

    @property
    def AutoSortOrder(self) -> int:
        """ Get: AutoSortOrder(self: PivotField) -> int """
        ...

    @property
    def AutoSortPivotLine(self) -> PivotLine:
        """ Get: AutoSortPivotLine(self: PivotField) -> PivotLine """
        ...

    @property
    def BaseField(self) -> object:
        """
        Get: BaseField(self: PivotField) -> object
        Set: BaseField(self: PivotField) = value
        """
        ...

    @property
    def BaseItem(self) -> object:
        """
        Get: BaseItem(self: PivotField) -> object
        Set: BaseItem(self: PivotField) = value
        """
        ...

    @property
    def Calculation(self) -> XlPivotFieldCalculation:
        """
        Get: Calculation(self: PivotField) -> XlPivotFieldCalculation
        Set: Calculation(self: PivotField) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: PivotField) -> str
        Set: Caption(self: PivotField) = value
        """
        ...

    @property
    def ChildField(self) -> PivotField:
        """ Get: ChildField(self: PivotField) -> PivotField """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotField) -> XlCreator """
        ...

    @property
    def CubeField(self) -> CubeField:
        """ Get: CubeField(self: PivotField) -> CubeField """
        ...

    @property
    def CurrentPage(self) -> object:
        """
        Get: CurrentPage(self: PivotField) -> object
        Set: CurrentPage(self: PivotField) = value
        """
        ...

    @property
    def CurrentPageList(self) -> object:
        """
        Get: CurrentPageList(self: PivotField) -> object
        Set: CurrentPageList(self: PivotField) = value
        """
        ...

    @property
    def CurrentPageName(self) -> str:
        """
        Get: CurrentPageName(self: PivotField) -> str
        Set: CurrentPageName(self: PivotField) = value
        """
        ...

    @property
    def DatabaseSort(self) -> bool:
        """
        Get: DatabaseSort(self: PivotField) -> bool
        Set: DatabaseSort(self: PivotField) = value
        """
        ...

    @property
    def DataRange(self) -> Range:
        """ Get: DataRange(self: PivotField) -> Range """
        ...

    @property
    def DataType(self) -> XlPivotFieldDataType:
        """ Get: DataType(self: PivotField) -> XlPivotFieldDataType """
        ...

    @property
    def DisplayAsCaption(self) -> bool:
        """ Get: DisplayAsCaption(self: PivotField) -> bool """
        ...

    @property
    def DisplayAsTooltip(self) -> bool:
        """
        Get: DisplayAsTooltip(self: PivotField) -> bool
        Set: DisplayAsTooltip(self: PivotField) = value
        """
        ...

    @property
    def DisplayInReport(self) -> bool:
        """
        Get: DisplayInReport(self: PivotField) -> bool
        Set: DisplayInReport(self: PivotField) = value
        """
        ...

    @property
    def DragToColumn(self) -> bool:
        """
        Get: DragToColumn(self: PivotField) -> bool
        Set: DragToColumn(self: PivotField) = value
        """
        ...

    @property
    def DragToData(self) -> bool:
        """
        Get: DragToData(self: PivotField) -> bool
        Set: DragToData(self: PivotField) = value
        """
        ...

    @property
    def DragToHide(self) -> bool:
        """
        Get: DragToHide(self: PivotField) -> bool
        Set: DragToHide(self: PivotField) = value
        """
        ...

    @property
    def DragToPage(self) -> bool:
        """
        Get: DragToPage(self: PivotField) -> bool
        Set: DragToPage(self: PivotField) = value
        """
        ...

    @property
    def DragToRow(self) -> bool:
        """
        Get: DragToRow(self: PivotField) -> bool
        Set: DragToRow(self: PivotField) = value
        """
        ...

    @property
    def DrilledDown(self) -> bool:
        """
        Get: DrilledDown(self: PivotField) -> bool
        Set: DrilledDown(self: PivotField) = value
        """
        ...

    @property
    def EnableItemSelection(self) -> bool:
        """
        Get: EnableItemSelection(self: PivotField) -> bool
        Set: EnableItemSelection(self: PivotField) = value
        """
        ...

    @property
    def EnableMultiplePageItems(self) -> bool:
        """
        Get: EnableMultiplePageItems(self: PivotField) -> bool
        Set: EnableMultiplePageItems(self: PivotField) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: PivotField) -> str
        Set: Formula(self: PivotField) = value
        """
        ...

    @property
    def Function(self) -> XlConsolidationFunction:
        """
        Get: Function(self: PivotField) -> XlConsolidationFunction
        Set: Function(self: PivotField) = value
        """
        ...

    @property
    def GroupLevel(self) -> object:
        """ Get: GroupLevel(self: PivotField) -> object """
        ...

    @property
    def Hidden(self) -> bool:
        """
        Get: Hidden(self: PivotField) -> bool
        Set: Hidden(self: PivotField) = value
        """
        ...

    @property
    def HiddenItemsList(self) -> object:
        """
        Get: HiddenItemsList(self: PivotField) -> object
        Set: HiddenItemsList(self: PivotField) = value
        """
        ...

    @property
    def IncludeNewItemsInFilter(self) -> bool:
        """
        Get: IncludeNewItemsInFilter(self: PivotField) -> bool
        Set: IncludeNewItemsInFilter(self: PivotField) = value
        """
        ...

    @property
    def IsCalculated(self) -> bool:
        """ Get: IsCalculated(self: PivotField) -> bool """
        ...

    @property
    def IsMemberProperty(self) -> bool:
        """ Get: IsMemberProperty(self: PivotField) -> bool """
        ...

    @property
    def LabelRange(self) -> Range:
        """ Get: LabelRange(self: PivotField) -> Range """
        ...

    @property
    def LayoutBlankLine(self) -> bool:
        """
        Get: LayoutBlankLine(self: PivotField) -> bool
        Set: LayoutBlankLine(self: PivotField) = value
        """
        ...

    @property
    def LayoutCompactRow(self) -> bool:
        """
        Get: LayoutCompactRow(self: PivotField) -> bool
        Set: LayoutCompactRow(self: PivotField) = value
        """
        ...

    @property
    def LayoutForm(self) -> XlLayoutFormType:
        """
        Get: LayoutForm(self: PivotField) -> XlLayoutFormType
        Set: LayoutForm(self: PivotField) = value
        """
        ...

    @property
    def LayoutPageBreak(self) -> bool:
        """
        Get: LayoutPageBreak(self: PivotField) -> bool
        Set: LayoutPageBreak(self: PivotField) = value
        """
        ...

    @property
    def LayoutSubtotalLocation(self) -> XlSubtototalLocationType:
        """
        Get: LayoutSubtotalLocation(self: PivotField) -> XlSubtototalLocationType
        Set: LayoutSubtotalLocation(self: PivotField) = value
        """
        ...

    @property
    def MemberPropertyCaption(self) -> str:
        """
        Get: MemberPropertyCaption(self: PivotField) -> str
        Set: MemberPropertyCaption(self: PivotField) = value
        """
        ...

    @property
    def MemoryUsed(self) -> int:
        """ Get: MemoryUsed(self: PivotField) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: PivotField) -> str
        Set: Name(self: PivotField) = value
        """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: PivotField) -> str
        Set: NumberFormat(self: PivotField) = value
        """
        ...

    @property
    def Orientation(self) -> XlPivotFieldOrientation:
        """
        Get: Orientation(self: PivotField) -> XlPivotFieldOrientation
        Set: Orientation(self: PivotField) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotField) -> object """
        ...

    @property
    def ParentField(self) -> PivotField:
        """ Get: ParentField(self: PivotField) -> PivotField """
        ...

    @property
    def PivotFilters(self) -> PivotFilters:
        """ Get: PivotFilters(self: PivotField) -> PivotFilters """
        ...

    @property
    def Position(self) -> object:
        """
        Get: Position(self: PivotField) -> object
        Set: Position(self: PivotField) = value
        """
        ...

    @property
    def PropertyOrder(self) -> int:
        """
        Get: PropertyOrder(self: PivotField) -> int
        Set: PropertyOrder(self: PivotField) = value
        """
        ...

    @property
    def PropertyParentField(self) -> PivotField:
        """ Get: PropertyParentField(self: PivotField) -> PivotField """
        ...

    @property
    def RepeatLabels(self) -> bool:
        """
        Get: RepeatLabels(self: PivotField) -> bool
        Set: RepeatLabels(self: PivotField) = value
        """
        ...

    @property
    def ServerBased(self) -> bool:
        """
        Get: ServerBased(self: PivotField) -> bool
        Set: ServerBased(self: PivotField) = value
        """
        ...

    @property
    def ShowAllItems(self) -> bool:
        """
        Get: ShowAllItems(self: PivotField) -> bool
        Set: ShowAllItems(self: PivotField) = value
        """
        ...

    @property
    def ShowDetail(self) -> bool:
        """
        Get: ShowDetail(self: PivotField) -> bool
        Set: ShowDetail(self: PivotField) = value
        """
        ...

    @property
    def ShowingInAxis(self) -> bool:
        """ Get: ShowingInAxis(self: PivotField) -> bool """
        ...

    @property
    def SourceCaption(self) -> str:
        """ Get: SourceCaption(self: PivotField) -> str """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: PivotField) -> str """
        ...

    @property
    def StandardFormula(self) -> str:
        """
        Get: StandardFormula(self: PivotField) -> str
        Set: StandardFormula(self: PivotField) = value
        """
        ...

    @property
    def SubtotalName(self) -> str:
        """
        Get: SubtotalName(self: PivotField) -> str
        Set: SubtotalName(self: PivotField) = value
        """
        ...

    @property
    def TotalLevels(self) -> object:
        """ Get: TotalLevels(self: PivotField) -> object """
        ...

    @property
    def UseMemberPropertyAsCaption(self) -> bool:
        """
        Get: UseMemberPropertyAsCaption(self: PivotField) -> bool
        Set: UseMemberPropertyAsCaption(self: PivotField) = value
        """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: PivotField) -> str
        Set: Value(self: PivotField) = value
        """
        ...

    @property
    def VisibleItemsList(self) -> object:
        """
        Get: VisibleItemsList(self: PivotField) -> object
        Set: VisibleItemsList(self: PivotField) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """
        Get: _Default(self: PivotField) -> str
        Set: _Default(self: PivotField) = value
        """
        ...


    def AddPageItem(self, Item:str, ClearList:object): # -> 
        """ AddPageItem(self: PivotField, Item: str, ClearList: object) """
        ...

    def AutoShow(self, Type:int, Range:int, Count:int, Field:str): # -> 
        """ AutoShow(self: PivotField, Type: int, Range: int, Count: int, Field: str) """
        ...

    def AutoSort(self, Order:int, Field:str): # -> 
        """ AutoSort(self: PivotField, Order: int, Field: str) """
        ...

    def AutoSortEx(self, Order:int, Field:str, PivotLine:object, CustomSubtotal:object): # -> 
        """ AutoSortEx(self: PivotField, Order: int, Field: str, PivotLine: object, CustomSubtotal: object) """
        ...

    def CalculatedItems(self) -> CalculatedItems:
        """ CalculatedItems(self: PivotField) -> CalculatedItems """
        ...

    def ClearAllFilters(self): # -> 
        """ ClearAllFilters(self: PivotField) """
        ...

    def ClearLabelFilters(self): # -> 
        """ ClearLabelFilters(self: PivotField) """
        ...

    def ClearManualFilter(self): # -> 
        """ ClearManualFilter(self: PivotField) """
        ...

    def ClearValueFilters(self): # -> 
        """ ClearValueFilters(self: PivotField) """
        ...

    def Delete(self): # -> 
        """ Delete(self: PivotField) """
        ...

    def DrillTo(self, Field:str): # -> 
        """ DrillTo(self: PivotField, Field: str) """
        ...

    def PivotItems(self, Index:object) -> object:
        """ PivotItems(self: PivotField, Index: object) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class PivotFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotFields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PivotFields) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotFields) -> XlCreator """
        ...

    @property
    def Parent(self) -> PivotTable:
        """ Get: Parent(self: PivotFields) -> PivotTable """
        ...


    def Item(self, Index:object) -> object:
        """ Item(self: PivotFields, Index: object) -> object """
        ...


class PivotFilter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Active(self) -> bool:
        """ Get: Active(self: PivotFilter) -> bool """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotFilter) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotFilter) -> XlCreator """
        ...

    @property
    def DataCubeField(self) -> CubeField:
        """ Get: DataCubeField(self: PivotFilter) -> CubeField """
        ...

    @property
    def DataField(self) -> PivotField:
        """ Get: DataField(self: PivotFilter) -> PivotField """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description(self: PivotFilter) -> str """
        ...

    @property
    def FilterType(self) -> XlPivotFilterType:
        """ Get: FilterType(self: PivotFilter) -> XlPivotFilterType """
        ...

    @property
    def IsMemberPropertyFilter(self) -> bool:
        """ Get: IsMemberPropertyFilter(self: PivotFilter) -> bool """
        ...

    @property
    def MemberPropertyField(self) -> PivotField:
        """ Get: MemberPropertyField(self: PivotFilter) -> PivotField """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: PivotFilter) -> str """
        ...

    @property
    def Order(self) -> int:
        """
        Get: Order(self: PivotFilter) -> int
        Set: Order(self: PivotFilter) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotFilter) -> object """
        ...

    @property
    def PivotField(self) -> PivotField:
        """ Get: PivotField(self: PivotFilter) -> PivotField """
        ...

    @property
    def Value1(self) -> object:
        """ Get: Value1(self: PivotFilter) -> object """
        ...

    @property
    def Value2(self) -> object:
        """ Get: Value2(self: PivotFilter) -> object """
        ...

    @property
    def WholeDayFilter(self) -> bool:
        """
        Get: WholeDayFilter(self: PivotFilter) -> bool
        Set: WholeDayFilter(self: PivotFilter) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: PivotFilter) """
        ...


class PivotFilters(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotFilters) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PivotFilters) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotFilters) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotFilters) -> object """
        ...


    def Add(self, Type:XlPivotFilterType, DataField:object, Value1:object, Value2:object, Order:object, Name:object, Description:object, MemberPropertyField:object) -> PivotFilter:
        """ Add(self: PivotFilters, Type: XlPivotFilterType, DataField: object, Value1: object, Value2: object, Order: object, Name: object, Description: object, MemberPropertyField: object) -> PivotFilter """
        ...

    def Add2(self, Type:XlPivotFilterType, DataField:object, Value1:object, Value2:object, Order:object, Name:object, Description:object, MemberPropertyField:object, WholeDayFilter:object) -> PivotFilter:
        """ Add2(self: PivotFilters, Type: XlPivotFilterType, DataField: object, Value1: object, Value2: object, Order: object, Name: object, Description: object, MemberPropertyField: object, WholeDayFilter: object) -> PivotFilter """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class PivotFormula: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotFormula) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotFormula) -> XlCreator """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: PivotFormula) -> str
        Set: Formula(self: PivotFormula) = value
        """
        ...

    @property
    def Index(self) -> int:
        """
        Get: Index(self: PivotFormula) -> int
        Set: Index(self: PivotFormula) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotFormula) -> object """
        ...

    @property
    def StandardFormula(self) -> str:
        """
        Get: StandardFormula(self: PivotFormula) -> str
        Set: StandardFormula(self: PivotFormula) = value
        """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: PivotFormula) -> str
        Set: Value(self: PivotFormula) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """
        Get: _Default(self: PivotFormula) -> str
        Set: _Default(self: PivotFormula) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: PivotFormula) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class PivotFormulas(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotFormulas) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PivotFormulas) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotFormulas) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotFormulas) -> object """
        ...


    def Add(self, Formula:str, UseStandardFormula:object) -> PivotFormula:
        """ Add(self: PivotFormulas, Formula: str, UseStandardFormula: object) -> PivotFormula """
        ...

    def Item(self, Index:object) -> PivotFormula:
        """ Item(self: PivotFormulas, Index: object) -> PivotFormula """
        ...

    def _Add(self, Formula:str) -> PivotFormula:
        """ _Add(self: PivotFormulas, Formula: str) -> PivotFormula """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class PivotItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotItem) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: PivotItem) -> str
        Set: Caption(self: PivotItem) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotItem) -> XlCreator """
        ...

    @property
    def DataRange(self) -> Range:
        """ Get: DataRange(self: PivotItem) -> Range """
        ...

    @property
    def DrilledDown(self) -> bool:
        """
        Get: DrilledDown(self: PivotItem) -> bool
        Set: DrilledDown(self: PivotItem) = value
        """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: PivotItem) -> str
        Set: Formula(self: PivotItem) = value
        """
        ...

    @property
    def IsCalculated(self) -> bool:
        """ Get: IsCalculated(self: PivotItem) -> bool """
        ...

    @property
    def LabelRange(self) -> Range:
        """ Get: LabelRange(self: PivotItem) -> Range """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: PivotItem) -> str
        Set: Name(self: PivotItem) = value
        """
        ...

    @property
    def Parent(self) -> PivotField:
        """ Get: Parent(self: PivotItem) -> PivotField """
        ...

    @property
    def ParentItem(self) -> PivotItem:
        """ Get: ParentItem(self: PivotItem) -> PivotItem """
        ...

    @property
    def ParentShowDetail(self) -> bool:
        """ Get: ParentShowDetail(self: PivotItem) -> bool """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: PivotItem) -> int
        Set: Position(self: PivotItem) = value
        """
        ...

    @property
    def RecordCount(self) -> int:
        """ Get: RecordCount(self: PivotItem) -> int """
        ...

    @property
    def ShowDetail(self) -> bool:
        """
        Get: ShowDetail(self: PivotItem) -> bool
        Set: ShowDetail(self: PivotItem) = value
        """
        ...

    @property
    def SourceName(self) -> object:
        """ Get: SourceName(self: PivotItem) -> object """
        ...

    @property
    def SourceNameStandard(self) -> str:
        """ Get: SourceNameStandard(self: PivotItem) -> str """
        ...

    @property
    def StandardFormula(self) -> str:
        """
        Get: StandardFormula(self: PivotItem) -> str
        Set: StandardFormula(self: PivotItem) = value
        """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: PivotItem) -> str
        Set: Value(self: PivotItem) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: PivotItem) -> bool
        Set: Visible(self: PivotItem) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """
        Get: _Default(self: PivotItem) -> str
        Set: _Default(self: PivotItem) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: PivotItem) """
        ...

    def DrillTo(self, Field:str): # -> 
        """ DrillTo(self: PivotItem, Field: str) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class PivotItemList(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotItemList) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PivotItemList) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotItemList) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotItemList) -> object """
        ...


    def Item(self, Index:object) -> PivotItem:
        """ Item(self: PivotItemList, Index: object) -> PivotItem """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class PivotItems(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotItems) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PivotItems) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotItems) -> XlCreator """
        ...

    @property
    def Parent(self) -> PivotField:
        """ Get: Parent(self: PivotItems) -> PivotField """
        ...


    def Add(self, Name:str): # -> 
        """ Add(self: PivotItems, Name: str) """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: PivotItems, Index: object) -> object """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class PivotLayout: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotLayout) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotLayout) -> XlCreator """
        ...

    @property
    def CubeFields(self) -> CubeFields:
        """ Get: CubeFields(self: PivotLayout) -> CubeFields """
        ...

    @property
    def InnerDetail(self) -> str:
        """
        Get: InnerDetail(self: PivotLayout) -> str
        Set: InnerDetail(self: PivotLayout) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotLayout) -> object """
        ...

    @property
    def PivotCache(self) -> PivotCache:
        """ Get: PivotCache(self: PivotLayout) -> PivotCache """
        ...

    @property
    def PivotTable(self) -> PivotTable:
        """ Get: PivotTable(self: PivotLayout) -> PivotTable """
        ...


    def AddFields(self, RowFields:object, ColumnFields:object, PageFields:object, AppendField:object): # -> 
        """ AddFields(self: PivotLayout, RowFields: object, ColumnFields: object, PageFields: object, AppendField: object) """
        ...


class PivotLine: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotLine) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotLine) -> XlCreator """
        ...

    @property
    def LineType(self) -> XlPivotLineType:
        """ Get: LineType(self: PivotLine) -> XlPivotLineType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotLine) -> object """
        ...

    @property
    def PivotLineCells(self) -> PivotLineCells:
        """ Get: PivotLineCells(self: PivotLine) -> PivotLineCells """
        ...

    @property
    def PivotLineCellsFull(self) -> PivotLineCells:
        """ Get: PivotLineCellsFull(self: PivotLine) -> PivotLineCells """
        ...

    @property
    def Position(self) -> int:
        """ Get: Position(self: PivotLine) -> int """
        ...



class PivotLineCells(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotLineCells) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PivotLineCells) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotLineCells) -> XlCreator """
        ...

    @property
    def Full(self) -> bool:
        """ Get: Full(self: PivotLineCells) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotLineCells) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class PivotLines(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotLines) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PivotLines) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotLines) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotLines) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class PivotTable: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveFilters(self) -> PivotFilters:
        """ Get: ActiveFilters(self: PivotTable) -> PivotFilters """
        ...

    @property
    def Allocation(self) -> XlAllocation:
        """
        Get: Allocation(self: PivotTable) -> XlAllocation
        Set: Allocation(self: PivotTable) = value
        """
        ...

    @property
    def AllocationMethod(self) -> XlAllocationMethod:
        """
        Get: AllocationMethod(self: PivotTable) -> XlAllocationMethod
        Set: AllocationMethod(self: PivotTable) = value
        """
        ...

    @property
    def AllocationValue(self) -> XlAllocationValue:
        """
        Get: AllocationValue(self: PivotTable) -> XlAllocationValue
        Set: AllocationValue(self: PivotTable) = value
        """
        ...

    @property
    def AllocationWeightExpression(self) -> str:
        """
        Get: AllocationWeightExpression(self: PivotTable) -> str
        Set: AllocationWeightExpression(self: PivotTable) = value
        """
        ...

    @property
    def AllowMultipleFilters(self) -> bool:
        """
        Get: AllowMultipleFilters(self: PivotTable) -> bool
        Set: AllowMultipleFilters(self: PivotTable) = value
        """
        ...

    @property
    def AlternativeText(self) -> str:
        """
        Get: AlternativeText(self: PivotTable) -> str
        Set: AlternativeText(self: PivotTable) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotTable) -> Application """
        ...

    @property
    def CacheIndex(self) -> int:
        """
        Get: CacheIndex(self: PivotTable) -> int
        Set: CacheIndex(self: PivotTable) = value
        """
        ...

    @property
    def CalculatedMembers(self) -> CalculatedMembers:
        """ Get: CalculatedMembers(self: PivotTable) -> CalculatedMembers """
        ...

    @property
    def CalculatedMembersInFilters(self) -> bool:
        """
        Get: CalculatedMembersInFilters(self: PivotTable) -> bool
        Set: CalculatedMembersInFilters(self: PivotTable) = value
        """
        ...

    @property
    def ChangeList(self) -> PivotTableChangeList:
        """ Get: ChangeList(self: PivotTable) -> PivotTableChangeList """
        ...

    @property
    def ColumnGrand(self) -> bool:
        """
        Get: ColumnGrand(self: PivotTable) -> bool
        Set: ColumnGrand(self: PivotTable) = value
        """
        ...

    @property
    def ColumnRange(self) -> Range:
        """ Get: ColumnRange(self: PivotTable) -> Range """
        ...

    @property
    def CompactLayoutColumnHeader(self) -> str:
        """
        Get: CompactLayoutColumnHeader(self: PivotTable) -> str
        Set: CompactLayoutColumnHeader(self: PivotTable) = value
        """
        ...

    @property
    def CompactLayoutRowHeader(self) -> str:
        """
        Get: CompactLayoutRowHeader(self: PivotTable) -> str
        Set: CompactLayoutRowHeader(self: PivotTable) = value
        """
        ...

    @property
    def CompactRowIndent(self) -> int:
        """
        Get: CompactRowIndent(self: PivotTable) -> int
        Set: CompactRowIndent(self: PivotTable) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotTable) -> XlCreator """
        ...

    @property
    def CubeFields(self) -> CubeFields:
        """ Get: CubeFields(self: PivotTable) -> CubeFields """
        ...

    @property
    def DataBodyRange(self) -> Range:
        """ Get: DataBodyRange(self: PivotTable) -> Range """
        ...

    @property
    def DataLabelRange(self) -> Range:
        """ Get: DataLabelRange(self: PivotTable) -> Range """
        ...

    @property
    def DataPivotField(self) -> PivotField:
        """ Get: DataPivotField(self: PivotTable) -> PivotField """
        ...

    @property
    def DisplayContextTooltips(self) -> bool:
        """
        Get: DisplayContextTooltips(self: PivotTable) -> bool
        Set: DisplayContextTooltips(self: PivotTable) = value
        """
        ...

    @property
    def DisplayEmptyColumn(self) -> bool:
        """
        Get: DisplayEmptyColumn(self: PivotTable) -> bool
        Set: DisplayEmptyColumn(self: PivotTable) = value
        """
        ...

    @property
    def DisplayEmptyRow(self) -> bool:
        """
        Get: DisplayEmptyRow(self: PivotTable) -> bool
        Set: DisplayEmptyRow(self: PivotTable) = value
        """
        ...

    @property
    def DisplayErrorString(self) -> bool:
        """
        Get: DisplayErrorString(self: PivotTable) -> bool
        Set: DisplayErrorString(self: PivotTable) = value
        """
        ...

    @property
    def DisplayFieldCaptions(self) -> bool:
        """
        Get: DisplayFieldCaptions(self: PivotTable) -> bool
        Set: DisplayFieldCaptions(self: PivotTable) = value
        """
        ...

    @property
    def DisplayImmediateItems(self) -> bool:
        """
        Get: DisplayImmediateItems(self: PivotTable) -> bool
        Set: DisplayImmediateItems(self: PivotTable) = value
        """
        ...

    @property
    def DisplayMemberPropertyTooltips(self) -> bool:
        """
        Get: DisplayMemberPropertyTooltips(self: PivotTable) -> bool
        Set: DisplayMemberPropertyTooltips(self: PivotTable) = value
        """
        ...

    @property
    def DisplayNullString(self) -> bool:
        """
        Get: DisplayNullString(self: PivotTable) -> bool
        Set: DisplayNullString(self: PivotTable) = value
        """
        ...

    @property
    def EnableDataValueEditing(self) -> bool:
        """
        Get: EnableDataValueEditing(self: PivotTable) -> bool
        Set: EnableDataValueEditing(self: PivotTable) = value
        """
        ...

    @property
    def EnableDrilldown(self) -> bool:
        """
        Get: EnableDrilldown(self: PivotTable) -> bool
        Set: EnableDrilldown(self: PivotTable) = value
        """
        ...

    @property
    def EnableFieldDialog(self) -> bool:
        """
        Get: EnableFieldDialog(self: PivotTable) -> bool
        Set: EnableFieldDialog(self: PivotTable) = value
        """
        ...

    @property
    def EnableFieldList(self) -> bool:
        """
        Get: EnableFieldList(self: PivotTable) -> bool
        Set: EnableFieldList(self: PivotTable) = value
        """
        ...

    @property
    def EnableWizard(self) -> bool:
        """
        Get: EnableWizard(self: PivotTable) -> bool
        Set: EnableWizard(self: PivotTable) = value
        """
        ...

    @property
    def EnableWriteback(self) -> bool:
        """
        Get: EnableWriteback(self: PivotTable) -> bool
        Set: EnableWriteback(self: PivotTable) = value
        """
        ...

    @property
    def ErrorString(self) -> str:
        """
        Get: ErrorString(self: PivotTable) -> str
        Set: ErrorString(self: PivotTable) = value
        """
        ...

    @property
    def FieldListSortAscending(self) -> bool:
        """
        Get: FieldListSortAscending(self: PivotTable) -> bool
        Set: FieldListSortAscending(self: PivotTable) = value
        """
        ...

    @property
    def GrandTotalName(self) -> str:
        """
        Get: GrandTotalName(self: PivotTable) -> str
        Set: GrandTotalName(self: PivotTable) = value
        """
        ...

    @property
    def HasAutoFormat(self) -> bool:
        """
        Get: HasAutoFormat(self: PivotTable) -> bool
        Set: HasAutoFormat(self: PivotTable) = value
        """
        ...

    @property
    def Hidden(self) -> bool:
        """ Get: Hidden(self: PivotTable) -> bool """
        ...

    @property
    def InGridDropZones(self) -> bool:
        """
        Get: InGridDropZones(self: PivotTable) -> bool
        Set: InGridDropZones(self: PivotTable) = value
        """
        ...

    @property
    def InnerDetail(self) -> str:
        """
        Get: InnerDetail(self: PivotTable) -> str
        Set: InnerDetail(self: PivotTable) = value
        """
        ...

    @property
    def LayoutRowDefault(self) -> XlLayoutRowType:
        """
        Get: LayoutRowDefault(self: PivotTable) -> XlLayoutRowType
        Set: LayoutRowDefault(self: PivotTable) = value
        """
        ...

    @property
    def Location(self) -> str:
        """
        Get: Location(self: PivotTable) -> str
        Set: Location(self: PivotTable) = value
        """
        ...

    @property
    def ManualUpdate(self) -> bool:
        """
        Get: ManualUpdate(self: PivotTable) -> bool
        Set: ManualUpdate(self: PivotTable) = value
        """
        ...

    @property
    def MDX(self) -> str:
        """ Get: MDX(self: PivotTable) -> str """
        ...

    @property
    def MergeLabels(self) -> bool:
        """
        Get: MergeLabels(self: PivotTable) -> bool
        Set: MergeLabels(self: PivotTable) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: PivotTable) -> str
        Set: Name(self: PivotTable) = value
        """
        ...

    @property
    def NullString(self) -> str:
        """
        Get: NullString(self: PivotTable) -> str
        Set: NullString(self: PivotTable) = value
        """
        ...

    @property
    def PageFieldOrder(self) -> int:
        """
        Get: PageFieldOrder(self: PivotTable) -> int
        Set: PageFieldOrder(self: PivotTable) = value
        """
        ...

    @property
    def PageFieldStyle(self) -> str:
        """
        Get: PageFieldStyle(self: PivotTable) -> str
        Set: PageFieldStyle(self: PivotTable) = value
        """
        ...

    @property
    def PageFieldWrapCount(self) -> int:
        """
        Get: PageFieldWrapCount(self: PivotTable) -> int
        Set: PageFieldWrapCount(self: PivotTable) = value
        """
        ...

    @property
    def PageRange(self) -> Range:
        """ Get: PageRange(self: PivotTable) -> Range """
        ...

    @property
    def PageRangeCells(self) -> Range:
        """ Get: PageRangeCells(self: PivotTable) -> Range """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotTable) -> object """
        ...

    @property
    def PivotChart(self) -> Shape:
        """ Get: PivotChart(self: PivotTable) -> Shape """
        ...

    @property
    def PivotColumnAxis(self) -> PivotAxis:
        """ Get: PivotColumnAxis(self: PivotTable) -> PivotAxis """
        ...

    @property
    def PivotFormulas(self) -> PivotFormulas:
        """ Get: PivotFormulas(self: PivotTable) -> PivotFormulas """
        ...

    @property
    def PivotRowAxis(self) -> PivotAxis:
        """ Get: PivotRowAxis(self: PivotTable) -> PivotAxis """
        ...

    @property
    def PivotSelection(self) -> str:
        """
        Get: PivotSelection(self: PivotTable) -> str
        Set: PivotSelection(self: PivotTable) = value
        """
        ...

    @property
    def PivotSelectionStandard(self) -> str:
        """
        Get: PivotSelectionStandard(self: PivotTable) -> str
        Set: PivotSelectionStandard(self: PivotTable) = value
        """
        ...

    @property
    def PreserveFormatting(self) -> bool:
        """
        Get: PreserveFormatting(self: PivotTable) -> bool
        Set: PreserveFormatting(self: PivotTable) = value
        """
        ...

    @property
    def PrintDrillIndicators(self) -> bool:
        """
        Get: PrintDrillIndicators(self: PivotTable) -> bool
        Set: PrintDrillIndicators(self: PivotTable) = value
        """
        ...

    @property
    def PrintTitles(self) -> bool:
        """
        Get: PrintTitles(self: PivotTable) -> bool
        Set: PrintTitles(self: PivotTable) = value
        """
        ...

    @property
    def RefreshDate(self) -> DateTime:
        """ Get: RefreshDate(self: PivotTable) -> DateTime """
        ...

    @property
    def RefreshName(self) -> str:
        """ Get: RefreshName(self: PivotTable) -> str """
        ...

    @property
    def RepeatItemsOnEachPrintedPage(self) -> bool:
        """
        Get: RepeatItemsOnEachPrintedPage(self: PivotTable) -> bool
        Set: RepeatItemsOnEachPrintedPage(self: PivotTable) = value
        """
        ...

    @property
    def RowGrand(self) -> bool:
        """
        Get: RowGrand(self: PivotTable) -> bool
        Set: RowGrand(self: PivotTable) = value
        """
        ...

    @property
    def RowRange(self) -> Range:
        """ Get: RowRange(self: PivotTable) -> Range """
        ...

    @property
    def SaveData(self) -> bool:
        """
        Get: SaveData(self: PivotTable) -> bool
        Set: SaveData(self: PivotTable) = value
        """
        ...

    @property
    def SelectionMode(self) -> XlPTSelectionMode:
        """
        Get: SelectionMode(self: PivotTable) -> XlPTSelectionMode
        Set: SelectionMode(self: PivotTable) = value
        """
        ...

    @property
    def ShowCellBackgroundFromOLAP(self) -> bool:
        """
        Get: ShowCellBackgroundFromOLAP(self: PivotTable) -> bool
        Set: ShowCellBackgroundFromOLAP(self: PivotTable) = value
        """
        ...

    @property
    def ShowDrillIndicators(self) -> bool:
        """
        Get: ShowDrillIndicators(self: PivotTable) -> bool
        Set: ShowDrillIndicators(self: PivotTable) = value
        """
        ...

    @property
    def ShowPageMultipleItemLabel(self) -> bool:
        """
        Get: ShowPageMultipleItemLabel(self: PivotTable) -> bool
        Set: ShowPageMultipleItemLabel(self: PivotTable) = value
        """
        ...

    @property
    def ShowTableStyleColumnHeaders(self) -> bool:
        """
        Get: ShowTableStyleColumnHeaders(self: PivotTable) -> bool
        Set: ShowTableStyleColumnHeaders(self: PivotTable) = value
        """
        ...

    @property
    def ShowTableStyleColumnStripes(self) -> bool:
        """
        Get: ShowTableStyleColumnStripes(self: PivotTable) -> bool
        Set: ShowTableStyleColumnStripes(self: PivotTable) = value
        """
        ...

    @property
    def ShowTableStyleLastColumn(self) -> bool:
        """
        Get: ShowTableStyleLastColumn(self: PivotTable) -> bool
        Set: ShowTableStyleLastColumn(self: PivotTable) = value
        """
        ...

    @property
    def ShowTableStyleRowHeaders(self) -> bool:
        """
        Get: ShowTableStyleRowHeaders(self: PivotTable) -> bool
        Set: ShowTableStyleRowHeaders(self: PivotTable) = value
        """
        ...

    @property
    def ShowTableStyleRowStripes(self) -> bool:
        """
        Get: ShowTableStyleRowStripes(self: PivotTable) -> bool
        Set: ShowTableStyleRowStripes(self: PivotTable) = value
        """
        ...

    @property
    def ShowValuesRow(self) -> bool:
        """
        Get: ShowValuesRow(self: PivotTable) -> bool
        Set: ShowValuesRow(self: PivotTable) = value
        """
        ...

    @property
    def Slicers(self) -> Slicers:
        """ Get: Slicers(self: PivotTable) -> Slicers """
        ...

    @property
    def SmallGrid(self) -> bool:
        """
        Get: SmallGrid(self: PivotTable) -> bool
        Set: SmallGrid(self: PivotTable) = value
        """
        ...

    @property
    def SortUsingCustomLists(self) -> bool:
        """
        Get: SortUsingCustomLists(self: PivotTable) -> bool
        Set: SortUsingCustomLists(self: PivotTable) = value
        """
        ...

    @property
    def SourceData(self) -> object:
        """
        Get: SourceData(self: PivotTable) -> object
        Set: SourceData(self: PivotTable) = value
        """
        ...

    @property
    def SubtotalHiddenPageItems(self) -> bool:
        """
        Get: SubtotalHiddenPageItems(self: PivotTable) -> bool
        Set: SubtotalHiddenPageItems(self: PivotTable) = value
        """
        ...

    @property
    def Summary(self) -> str:
        """
        Get: Summary(self: PivotTable) -> str
        Set: Summary(self: PivotTable) = value
        """
        ...

    @property
    def TableRange1(self) -> Range:
        """ Get: TableRange1(self: PivotTable) -> Range """
        ...

    @property
    def TableRange2(self) -> Range:
        """ Get: TableRange2(self: PivotTable) -> Range """
        ...

    @property
    def TableStyle(self) -> str:
        """
        Get: TableStyle(self: PivotTable) -> str
        Set: TableStyle(self: PivotTable) = value
        """
        ...

    @property
    def TableStyle2(self) -> object:
        """
        Get: TableStyle2(self: PivotTable) -> object
        Set: TableStyle2(self: PivotTable) = value
        """
        ...

    @property
    def Tag(self) -> str:
        """
        Get: Tag(self: PivotTable) -> str
        Set: Tag(self: PivotTable) = value
        """
        ...

    @property
    def TotalsAnnotation(self) -> bool:
        """
        Get: TotalsAnnotation(self: PivotTable) -> bool
        Set: TotalsAnnotation(self: PivotTable) = value
        """
        ...

    @property
    def VacatedStyle(self) -> str:
        """
        Get: VacatedStyle(self: PivotTable) -> str
        Set: VacatedStyle(self: PivotTable) = value
        """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: PivotTable) -> str
        Set: Value(self: PivotTable) = value
        """
        ...

    @property
    def Version(self) -> XlPivotTableVersionList:
        """ Get: Version(self: PivotTable) -> XlPivotTableVersionList """
        ...

    @property
    def ViewCalculatedMembers(self) -> bool:
        """
        Get: ViewCalculatedMembers(self: PivotTable) -> bool
        Set: ViewCalculatedMembers(self: PivotTable) = value
        """
        ...

    @property
    def VisualTotals(self) -> bool:
        """
        Get: VisualTotals(self: PivotTable) -> bool
        Set: VisualTotals(self: PivotTable) = value
        """
        ...

    @property
    def VisualTotalsForSets(self) -> bool:
        """
        Get: VisualTotalsForSets(self: PivotTable) -> bool
        Set: VisualTotalsForSets(self: PivotTable) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """
        Get: _Default(self: PivotTable) -> str
        Set: _Default(self: PivotTable) = value
        """
        ...


    def AddDataField(self, Field:object, Caption:object, Function:object) -> PivotField:
        """ AddDataField(self: PivotTable, Field: object, Caption: object, Function: object) -> PivotField """
        ...

    def AddFields(self, RowFields:object, ColumnFields:object, PageFields:object, AddToTable:object) -> object:
        """ AddFields(self: PivotTable, RowFields: object, ColumnFields: object, PageFields: object, AddToTable: object) -> object """
        ...

    def AllocateChanges(self): # -> 
        """ AllocateChanges(self: PivotTable) """
        ...

    def CalculatedFields(self) -> CalculatedFields:
        """ CalculatedFields(self: PivotTable) -> CalculatedFields """
        ...

    def ChangeConnection(self, conn:WorkbookConnection): # -> 
        """ ChangeConnection(self: PivotTable, conn: WorkbookConnection) """
        ...

    def ChangePivotCache(self, PivotCache:object): # -> 
        """ ChangePivotCache(self: PivotTable, PivotCache: object) """
        ...

    def ClearAllFilters(self): # -> 
        """ ClearAllFilters(self: PivotTable) """
        ...

    def ClearTable(self): # -> 
        """ ClearTable(self: PivotTable) """
        ...

    def CommitChanges(self): # -> 
        """ CommitChanges(self: PivotTable) """
        ...

    def ConvertToFormulas(self, ConvertFilters:bool): # -> 
        """ ConvertToFormulas(self: PivotTable, ConvertFilters: bool) """
        ...

    def CreateCubeFile(self, File:str, Measures:object, Levels:object, Members:object, Properties:object) -> str:
        """ CreateCubeFile(self: PivotTable, File: str, Measures: object, Levels: object, Members: object, Properties: object) -> str """
        ...

    def DiscardChanges(self): # -> 
        """ DiscardChanges(self: PivotTable) """
        ...

    def DrillDown(self, PivotItem:PivotItem, PivotLine:object): # -> 
        """ DrillDown(self: PivotTable, PivotItem: PivotItem, PivotLine: object) """
        ...

    def DrillTo(self, PivotItem:PivotItem, CubeField:CubeField, PivotLine:object): # -> 
        """ DrillTo(self: PivotTable, PivotItem: PivotItem, CubeField: CubeField, PivotLine: object) """
        ...

    def DrillUp(self, PivotItem:PivotItem, PivotLine:object, LevelUniqueName:object): # -> 
        """ DrillUp(self: PivotTable, PivotItem: PivotItem, PivotLine: object, LevelUniqueName: object) """
        ...

    def Dummy15(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Dummy15(self: PivotTable, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Dummy2(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ Dummy2(self: PivotTable, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def Format(self, Format:XlPivotFormatType): # -> 
        """ Format(self: PivotTable, Format: XlPivotFormatType) """
        ...

    def GetData(self, Name:str) -> float:
        """ GetData(self: PivotTable, Name: str) -> float """
        ...

    def GetPivotData(self, DataField:object, Field1:object, Item1:object, Field2:object, Item2:object, Field3:object, Item3:object, Field4:object, Item4:object, Field5:object, Item5:object, Field6:object, Item6:object, Field7:object, Item7:object, Field8:object, Item8:object, Field9:object, Item9:object, Field10:object, Item10:object, Field11:object, Item11:object, Field12:object, Item12:object, Field13:object, Item13:object, Field14:object, Item14:object) -> Range:
        """ GetPivotData(self: PivotTable, DataField: object, Field1: object, Item1: object, Field2: object, Item2: object, Field3: object, Item3: object, Field4: object, Item4: object, Field5: object, Item5: object, Field6: object, Item6: object, Field7: object, Item7: object, Field8: object, Item8: object, Field9: object, Item9: object, Field10: object, Item10: object, Field11: object, Item11: object, Field12: object, Item12: object, Field13: object, Item13: object, Field14: object, Item14: object) -> Range """
        ...

    def ListFormulas(self): # -> 
        """ ListFormulas(self: PivotTable) """
        ...

    def PivotCache(self) -> PivotCache:
        """ PivotCache(self: PivotTable) -> PivotCache """
        ...

    def PivotFields(self, Index:object) -> object:
        """ PivotFields(self: PivotTable, Index: object) -> object """
        ...

    def PivotSelect(self, Name:str, Mode:XlPTSelectionMode, UseStandardName:object): # -> 
        """ PivotSelect(self: PivotTable, Name: str, Mode: XlPTSelectionMode, UseStandardName: object) """
        ...

    def PivotTableWizard(self, SourceType:object, SourceData:object, TableDestination:object, TableName:object, RowGrand:object, ColumnGrand:object, SaveData:object, HasAutoFormat:object, AutoPage:object, Reserved:object, BackgroundQuery:object, OptimizeCache:object, PageFieldOrder:object, PageFieldWrapCount:object, ReadData:object, Connection:object): # -> 
        """ PivotTableWizard(self: PivotTable, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) """
        ...

    def PivotValueCell(self, rowline:object, columnline:object) -> PivotValueCell:
        """ PivotValueCell(self: PivotTable, rowline: object, columnline: object) -> PivotValueCell """
        ...

    def RefreshDataSourceValues(self): # -> 
        """ RefreshDataSourceValues(self: PivotTable) """
        ...

    def RefreshTable(self) -> bool:
        """ RefreshTable(self: PivotTable) -> bool """
        ...

    def RepeatAllLabels(self, Repeat:XlPivotFieldRepeatLabels): # -> 
        """ RepeatAllLabels(self: PivotTable, Repeat: XlPivotFieldRepeatLabels) """
        ...

    def RowAxisLayout(self, RowLayout:XlLayoutRowType): # -> 
        """ RowAxisLayout(self: PivotTable, RowLayout: XlLayoutRowType) """
        ...

    def ShowPages(self, PageField:object) -> object:
        """ ShowPages(self: PivotTable, PageField: object) -> object """
        ...

    def SubtotalLocation(self, Location:XlSubtototalLocationType): # -> 
        """ SubtotalLocation(self: PivotTable, Location: XlSubtototalLocationType) """
        ...

    def Update(self): # -> 
        """ Update(self: PivotTable) """
        ...

    def _PivotSelect(self, Name:str, Mode:XlPTSelectionMode): # -> 
        """ _PivotSelect(self: PivotTable, Name: str, Mode: XlPTSelectionMode) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class PivotTableChangeList(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotTableChangeList) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PivotTableChangeList) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotTableChangeList) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotTableChangeList) -> object """
        ...


    def Add(self, Tuple:str, Value:float, AllocationValue:object, AllocationMethod:object, AllocationWeightExpression:object) -> ValueChange:
        """ Add(self: PivotTableChangeList, Tuple: str, Value: float, AllocationValue: object, AllocationMethod: object, AllocationWeightExpression: object) -> ValueChange """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class PivotTables(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotTables) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PivotTables) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotTables) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotTables) -> object """
        ...


    def Add(self, PivotCache:PivotCache, TableDestination:object, TableName:object, ReadData:object, DefaultVersion:object) -> PivotTable:
        """ Add(self: PivotTables, PivotCache: PivotCache, TableDestination: object, TableName: object, ReadData: object, DefaultVersion: object) -> PivotTable """
        ...

    def Item(self, Index:object) -> PivotTable:
        """ Item(self: PivotTables, Index: object) -> PivotTable """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class PivotValueCell: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PivotValueCell) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PivotValueCell) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PivotValueCell) -> object """
        ...

    @property
    def PivotCell(self) -> PivotCell:
        """ Get: PivotCell(self: PivotValueCell) -> PivotCell """
        ...

    @property
    def ServerActions(self) -> Actions:
        """ Get: ServerActions(self: PivotValueCell) -> Actions """
        ...

    @property
    def Value(self) -> object:
        """ Get: Value(self: PivotValueCell) -> object """
        ...


    def ShowDetail(self): # -> 
        """ ShowDetail(self: PivotValueCell) """
        ...


class PlotArea: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PlotArea) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: PlotArea) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PlotArea) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: PlotArea) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: PlotArea) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: PlotArea) -> float
        Set: Height(self: PlotArea) = value
        """
        ...

    @property
    def InsideHeight(self) -> float:
        """
        Get: InsideHeight(self: PlotArea) -> float
        Set: InsideHeight(self: PlotArea) = value
        """
        ...

    @property
    def InsideLeft(self) -> float:
        """
        Get: InsideLeft(self: PlotArea) -> float
        Set: InsideLeft(self: PlotArea) = value
        """
        ...

    @property
    def InsideTop(self) -> float:
        """
        Get: InsideTop(self: PlotArea) -> float
        Set: InsideTop(self: PlotArea) = value
        """
        ...

    @property
    def InsideWidth(self) -> float:
        """
        Get: InsideWidth(self: PlotArea) -> float
        Set: InsideWidth(self: PlotArea) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: PlotArea) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: PlotArea) -> float
        Set: Left(self: PlotArea) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: PlotArea) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PlotArea) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: PlotArea) -> XlChartElementPosition
        Set: Position(self: PlotArea) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: PlotArea) -> float
        Set: Top(self: PlotArea) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: PlotArea) -> float
        Set: Width(self: PlotArea) = value
        """
        ...

    @property
    def _InsideHeight(self) -> float:
        """ Get: _InsideHeight(self: PlotArea) -> float """
        ...

    @property
    def _InsideLeft(self) -> float:
        """ Get: _InsideLeft(self: PlotArea) -> float """
        ...

    @property
    def _InsideTop(self) -> float:
        """ Get: _InsideTop(self: PlotArea) -> float """
        ...

    @property
    def _InsideWidth(self) -> float:
        """ Get: _InsideWidth(self: PlotArea) -> float """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: PlotArea) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: PlotArea) -> object """
        ...


class Point: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Point) -> Application """
        ...

    @property
    def ApplyPictToEnd(self) -> bool:
        """
        Get: ApplyPictToEnd(self: Point) -> bool
        Set: ApplyPictToEnd(self: Point) = value
        """
        ...

    @property
    def ApplyPictToFront(self) -> bool:
        """
        Get: ApplyPictToFront(self: Point) -> bool
        Set: ApplyPictToFront(self: Point) = value
        """
        ...

    @property
    def ApplyPictToSides(self) -> bool:
        """
        Get: ApplyPictToSides(self: Point) -> bool
        Set: ApplyPictToSides(self: Point) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Point) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Point) -> XlCreator """
        ...

    @property
    def DataLabel(self) -> DataLabel:
        """ Get: DataLabel(self: Point) -> DataLabel """
        ...

    @property
    def Explosion(self) -> int:
        """
        Get: Explosion(self: Point) -> int
        Set: Explosion(self: Point) = value
        """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: Point) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Point) -> ChartFormat """
        ...

    @property
    def Has3DEffect(self) -> bool:
        """
        Get: Has3DEffect(self: Point) -> bool
        Set: Has3DEffect(self: Point) = value
        """
        ...

    @property
    def HasDataLabel(self) -> bool:
        """
        Get: HasDataLabel(self: Point) -> bool
        Set: HasDataLabel(self: Point) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: Point) -> float """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Point) -> Interior """
        ...

    @property
    def InvertIfNegative(self) -> bool:
        """
        Get: InvertIfNegative(self: Point) -> bool
        Set: InvertIfNegative(self: Point) = value
        """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: Point) -> float """
        ...

    @property
    def MarkerBackgroundColor(self) -> int:
        """
        Get: MarkerBackgroundColor(self: Point) -> int
        Set: MarkerBackgroundColor(self: Point) = value
        """
        ...

    @property
    def MarkerBackgroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerBackgroundColorIndex(self: Point) -> XlColorIndex
        Set: MarkerBackgroundColorIndex(self: Point) = value
        """
        ...

    @property
    def MarkerForegroundColor(self) -> int:
        """
        Get: MarkerForegroundColor(self: Point) -> int
        Set: MarkerForegroundColor(self: Point) = value
        """
        ...

    @property
    def MarkerForegroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerForegroundColorIndex(self: Point) -> XlColorIndex
        Set: MarkerForegroundColorIndex(self: Point) = value
        """
        ...

    @property
    def MarkerSize(self) -> int:
        """
        Get: MarkerSize(self: Point) -> int
        Set: MarkerSize(self: Point) = value
        """
        ...

    @property
    def MarkerStyle(self) -> XlMarkerStyle:
        """
        Get: MarkerStyle(self: Point) -> XlMarkerStyle
        Set: MarkerStyle(self: Point) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Point) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Point) -> object """
        ...

    @property
    def PictureType(self) -> XlChartPictureType:
        """
        Get: PictureType(self: Point) -> XlChartPictureType
        Set: PictureType(self: Point) = value
        """
        ...

    @property
    def PictureUnit(self) -> int:
        """
        Get: PictureUnit(self: Point) -> int
        Set: PictureUnit(self: Point) = value
        """
        ...

    @property
    def PictureUnit2(self) -> float:
        """
        Get: PictureUnit2(self: Point) -> float
        Set: PictureUnit2(self: Point) = value
        """
        ...

    @property
    def SecondaryPlot(self) -> bool:
        """
        Get: SecondaryPlot(self: Point) -> bool
        Set: SecondaryPlot(self: Point) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Point) -> bool
        Set: Shadow(self: Point) = value
        """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: Point) -> float """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: Point) -> float """
        ...


    def ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object, ShowSeriesName:object, ShowCategoryName:object, ShowValue:object, ShowPercentage:object, ShowBubbleSize:object, Separator:object) -> object:
        """ ApplyDataLabels(self: Point, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) -> object """
        ...

    def ClearFormats(self) -> object:
        """ ClearFormats(self: Point) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Point) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Point) -> object """
        ...

    def Paste(self) -> object:
        """ Paste(self: Point) -> object """
        ...

    def PieSliceLocation(self, loc:XlPieSliceLocation, Index:XlPieSliceIndex) -> float:
        """ PieSliceLocation(self: Point, loc: XlPieSliceLocation, Index: XlPieSliceIndex) -> float """
        ...

    def Select(self) -> object:
        """ Select(self: Point) -> object """
        ...

    def _ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object) -> object:
        """ _ApplyDataLabels(self: Point, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) -> object """
        ...


class Points(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Points) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Points) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Points) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Points) -> object """
        ...


    def Item(self, Index:int) -> Point:
        """ Item(self: Points, Index: int) -> Point """
        ...

    def _Default(self, Index:int) -> Point:
        """ _Default(self: Points, Index: int) -> Point """
        ...


class ProtectedViewWindow: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ProtectedViewWindow) -> str
        Set: Caption(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def EnableResize(self) -> bool:
        """
        Get: EnableResize(self: ProtectedViewWindow) -> bool
        Set: EnableResize(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ProtectedViewWindow) -> float
        Set: Height(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ProtectedViewWindow) -> float
        Set: Left(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: ProtectedViewWindow) -> str """
        ...

    @property
    def SourcePath(self) -> str:
        """ Get: SourcePath(self: ProtectedViewWindow) -> str """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ProtectedViewWindow) -> float
        Set: Top(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ProtectedViewWindow) -> bool
        Set: Visible(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ProtectedViewWindow) -> float
        Set: Width(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def WindowState(self) -> XlProtectedViewWindowState:
        """
        Get: WindowState(self: ProtectedViewWindow) -> XlProtectedViewWindowState
        Set: WindowState(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def Workbook(self) -> Workbook:
        """ Get: Workbook(self: ProtectedViewWindow) -> Workbook """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: ProtectedViewWindow) -> str """
        ...


    def Activate(self): # -> 
        """ Activate(self: ProtectedViewWindow) """
        ...

    def Close(self) -> bool:
        """ Close(self: ProtectedViewWindow) -> bool """
        ...

    def Edit(self, WriteResPassword:object, UpdateLinks:object) -> Workbook:
        """ Edit(self: ProtectedViewWindow, WriteResPassword: object, UpdateLinks: object) -> Workbook """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ProtectedViewWindows(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ProtectedViewWindows) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ProtectedViewWindows) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ProtectedViewWindows) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ProtectedViewWindows) -> object """
        ...


    def Open(self, Filename:str, Password:object, AddToMru:object, RepairMode:object) -> ProtectedViewWindow:
        """ Open(self: ProtectedViewWindows, Filename: str, Password: object, AddToMru: object, RepairMode: object) -> ProtectedViewWindow """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Protection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowDeletingColumns(self) -> bool:
        """ Get: AllowDeletingColumns(self: Protection) -> bool """
        ...

    @property
    def AllowDeletingRows(self) -> bool:
        """ Get: AllowDeletingRows(self: Protection) -> bool """
        ...

    @property
    def AllowEditRanges(self) -> AllowEditRanges:
        """ Get: AllowEditRanges(self: Protection) -> AllowEditRanges """
        ...

    @property
    def AllowFiltering(self) -> bool:
        """ Get: AllowFiltering(self: Protection) -> bool """
        ...

    @property
    def AllowFormattingCells(self) -> bool:
        """ Get: AllowFormattingCells(self: Protection) -> bool """
        ...

    @property
    def AllowFormattingColumns(self) -> bool:
        """ Get: AllowFormattingColumns(self: Protection) -> bool """
        ...

    @property
    def AllowFormattingRows(self) -> bool:
        """ Get: AllowFormattingRows(self: Protection) -> bool """
        ...

    @property
    def AllowInsertingColumns(self) -> bool:
        """ Get: AllowInsertingColumns(self: Protection) -> bool """
        ...

    @property
    def AllowInsertingHyperlinks(self) -> bool:
        """ Get: AllowInsertingHyperlinks(self: Protection) -> bool """
        ...

    @property
    def AllowInsertingRows(self) -> bool:
        """ Get: AllowInsertingRows(self: Protection) -> bool """
        ...

    @property
    def AllowSorting(self) -> bool:
        """ Get: AllowSorting(self: Protection) -> bool """
        ...

    @property
    def AllowUsingPivotTables(self) -> bool:
        """ Get: AllowUsingPivotTables(self: Protection) -> bool """
        ...



class PublishObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PublishObject) -> Application """
        ...

    @property
    def AutoRepublish(self) -> bool:
        """
        Get: AutoRepublish(self: PublishObject) -> bool
        Set: AutoRepublish(self: PublishObject) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PublishObject) -> XlCreator """
        ...

    @property
    def DivID(self) -> str:
        """ Get: DivID(self: PublishObject) -> str """
        ...

    @property
    def Filename(self) -> str:
        """
        Get: Filename(self: PublishObject) -> str
        Set: Filename(self: PublishObject) = value
        """
        ...

    @property
    def HtmlType(self) -> XlHtmlType:
        """
        Get: HtmlType(self: PublishObject) -> XlHtmlType
        Set: HtmlType(self: PublishObject) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PublishObject) -> object """
        ...

    @property
    def Sheet(self) -> str:
        """ Get: Sheet(self: PublishObject) -> str """
        ...

    @property
    def Source(self) -> str:
        """ Get: Source(self: PublishObject) -> str """
        ...

    @property
    def SourceType(self) -> XlSourceType:
        """ Get: SourceType(self: PublishObject) -> XlSourceType """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: PublishObject) -> str
        Set: Title(self: PublishObject) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: PublishObject) """
        ...

    def Publish(self, Create:object): # -> 
        """ Publish(self: PublishObject, Create: object) """
        ...


class PublishObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PublishObjects) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PublishObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: PublishObjects) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PublishObjects) -> object """
        ...


    def Add(self, SourceType:XlSourceType, Filename:str, Sheet:object, Source:object, HtmlType:object, DivID:object, Title:object) -> PublishObject:
        """ Add(self: PublishObjects, SourceType: XlSourceType, Filename: str, Sheet: object, Source: object, HtmlType: object, DivID: object, Title: object) -> PublishObject """
        ...

    def Delete(self): # -> 
        """ Delete(self: PublishObjects) """
        ...

    def Publish(self): # -> 
        """ Publish(self: PublishObjects) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class RefreshEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterRefresh(self): # -> 
        """ add_AfterRefresh(self: RefreshEvents_Event, : RefreshEvents_AfterRefreshEventHandler) """
        ...

    def add_BeforeRefresh(self): # -> 
        """ add_BeforeRefresh(self: RefreshEvents_Event, : RefreshEvents_BeforeRefreshEventHandler) """
        ...

    def remove_AfterRefresh(self): # -> 
        """ remove_AfterRefresh(self: RefreshEvents_Event, : RefreshEvents_AfterRefreshEventHandler) """
        ...

    def remove_BeforeRefresh(self): # -> 
        """ remove_BeforeRefresh(self: RefreshEvents_Event, : RefreshEvents_BeforeRefreshEventHandler) """
        ...

    AfterRefresh = ...
    BeforeRefresh = ...


class _QueryTable: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AdjustColumnWidth(self) -> bool:
        """
        Get: AdjustColumnWidth(self: _QueryTable) -> bool
        Set: AdjustColumnWidth(self: _QueryTable) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _QueryTable) -> Application """
        ...

    @property
    def BackgroundQuery(self) -> bool:
        """
        Get: BackgroundQuery(self: _QueryTable) -> bool
        Set: BackgroundQuery(self: _QueryTable) = value
        """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: _QueryTable) -> object
        Set: CommandText(self: _QueryTable) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: _QueryTable) -> XlCmdType
        Set: CommandType(self: _QueryTable) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: _QueryTable) -> object
        Set: Connection(self: _QueryTable) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: _QueryTable) -> XlCreator """
        ...

    @property
    def Destination(self) -> Range:
        """ Get: Destination(self: _QueryTable) -> Range """
        ...

    @property
    def EditWebPage(self) -> object:
        """
        Get: EditWebPage(self: _QueryTable) -> object
        Set: EditWebPage(self: _QueryTable) = value
        """
        ...

    @property
    def EnableEditing(self) -> bool:
        """
        Get: EnableEditing(self: _QueryTable) -> bool
        Set: EnableEditing(self: _QueryTable) = value
        """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: _QueryTable) -> bool
        Set: EnableRefresh(self: _QueryTable) = value
        """
        ...

    @property
    def FetchedRowOverflow(self) -> bool:
        """ Get: FetchedRowOverflow(self: _QueryTable) -> bool """
        ...

    @property
    def FieldNames(self) -> bool:
        """
        Get: FieldNames(self: _QueryTable) -> bool
        Set: FieldNames(self: _QueryTable) = value
        """
        ...

    @property
    def FillAdjacentFormulas(self) -> bool:
        """
        Get: FillAdjacentFormulas(self: _QueryTable) -> bool
        Set: FillAdjacentFormulas(self: _QueryTable) = value
        """
        ...

    @property
    def HasAutoFormat(self) -> bool:
        """
        Get: HasAutoFormat(self: _QueryTable) -> bool
        Set: HasAutoFormat(self: _QueryTable) = value
        """
        ...

    @property
    def ListObject(self) -> ListObject:
        """ Get: ListObject(self: _QueryTable) -> ListObject """
        ...

    @property
    def MaintainConnection(self) -> bool:
        """
        Get: MaintainConnection(self: _QueryTable) -> bool
        Set: MaintainConnection(self: _QueryTable) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _QueryTable) -> str
        Set: Name(self: _QueryTable) = value
        """
        ...

    @property
    def Parameters(self) -> Parameters:
        """ Get: Parameters(self: _QueryTable) -> Parameters """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _QueryTable) -> object """
        ...

    @property
    def PostText(self) -> str:
        """
        Get: PostText(self: _QueryTable) -> str
        Set: PostText(self: _QueryTable) = value
        """
        ...

    @property
    def PreserveColumnInfo(self) -> bool:
        """
        Get: PreserveColumnInfo(self: _QueryTable) -> bool
        Set: PreserveColumnInfo(self: _QueryTable) = value
        """
        ...

    @property
    def PreserveFormatting(self) -> bool:
        """
        Get: PreserveFormatting(self: _QueryTable) -> bool
        Set: PreserveFormatting(self: _QueryTable) = value
        """
        ...

    @property
    def QueryType(self) -> XlQueryType:
        """ Get: QueryType(self: _QueryTable) -> XlQueryType """
        ...

    @property
    def Recordset(self) -> object:
        """
        Get: Recordset(self: _QueryTable) -> object
        Set: Recordset(self: _QueryTable) = value
        """
        ...

    @property
    def Refreshing(self) -> bool:
        """ Get: Refreshing(self: _QueryTable) -> bool """
        ...

    @property
    def RefreshOnFileOpen(self) -> bool:
        """
        Get: RefreshOnFileOpen(self: _QueryTable) -> bool
        Set: RefreshOnFileOpen(self: _QueryTable) = value
        """
        ...

    @property
    def RefreshPeriod(self) -> int:
        """
        Get: RefreshPeriod(self: _QueryTable) -> int
        Set: RefreshPeriod(self: _QueryTable) = value
        """
        ...

    @property
    def RefreshStyle(self) -> XlCellInsertionMode:
        """
        Get: RefreshStyle(self: _QueryTable) -> XlCellInsertionMode
        Set: RefreshStyle(self: _QueryTable) = value
        """
        ...

    @property
    def ResultRange(self) -> Range:
        """ Get: ResultRange(self: _QueryTable) -> Range """
        ...

    @property
    def RobustConnect(self) -> XlRobustConnect:
        """
        Get: RobustConnect(self: _QueryTable) -> XlRobustConnect
        Set: RobustConnect(self: _QueryTable) = value
        """
        ...

    @property
    def RowNumbers(self) -> bool:
        """
        Get: RowNumbers(self: _QueryTable) -> bool
        Set: RowNumbers(self: _QueryTable) = value
        """
        ...

    @property
    def SaveData(self) -> bool:
        """
        Get: SaveData(self: _QueryTable) -> bool
        Set: SaveData(self: _QueryTable) = value
        """
        ...

    @property
    def SavePassword(self) -> bool:
        """
        Get: SavePassword(self: _QueryTable) -> bool
        Set: SavePassword(self: _QueryTable) = value
        """
        ...

    @property
    def Sort(self) -> Sort:
        """ Get: Sort(self: _QueryTable) -> Sort """
        ...

    @property
    def SourceConnectionFile(self) -> str:
        """
        Get: SourceConnectionFile(self: _QueryTable) -> str
        Set: SourceConnectionFile(self: _QueryTable) = value
        """
        ...

    @property
    def SourceDataFile(self) -> str:
        """
        Get: SourceDataFile(self: _QueryTable) -> str
        Set: SourceDataFile(self: _QueryTable) = value
        """
        ...

    @property
    def Sql(self) -> object:
        """
        Get: Sql(self: _QueryTable) -> object
        Set: Sql(self: _QueryTable) = value
        """
        ...

    @property
    def TablesOnlyFromHTML(self) -> bool:
        """
        Get: TablesOnlyFromHTML(self: _QueryTable) -> bool
        Set: TablesOnlyFromHTML(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileColumnDataTypes(self) -> object:
        """
        Get: TextFileColumnDataTypes(self: _QueryTable) -> object
        Set: TextFileColumnDataTypes(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileCommaDelimiter(self) -> bool:
        """
        Get: TextFileCommaDelimiter(self: _QueryTable) -> bool
        Set: TextFileCommaDelimiter(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileConsecutiveDelimiter(self) -> bool:
        """
        Get: TextFileConsecutiveDelimiter(self: _QueryTable) -> bool
        Set: TextFileConsecutiveDelimiter(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileDecimalSeparator(self) -> str:
        """
        Get: TextFileDecimalSeparator(self: _QueryTable) -> str
        Set: TextFileDecimalSeparator(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileFixedColumnWidths(self) -> object:
        """
        Get: TextFileFixedColumnWidths(self: _QueryTable) -> object
        Set: TextFileFixedColumnWidths(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileOtherDelimiter(self) -> str:
        """
        Get: TextFileOtherDelimiter(self: _QueryTable) -> str
        Set: TextFileOtherDelimiter(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileParseType(self) -> XlTextParsingType:
        """
        Get: TextFileParseType(self: _QueryTable) -> XlTextParsingType
        Set: TextFileParseType(self: _QueryTable) = value
        """
        ...

    @property
    def TextFilePlatform(self) -> int:
        """
        Get: TextFilePlatform(self: _QueryTable) -> int
        Set: TextFilePlatform(self: _QueryTable) = value
        """
        ...

    @property
    def TextFilePromptOnRefresh(self) -> bool:
        """
        Get: TextFilePromptOnRefresh(self: _QueryTable) -> bool
        Set: TextFilePromptOnRefresh(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileSemicolonDelimiter(self) -> bool:
        """
        Get: TextFileSemicolonDelimiter(self: _QueryTable) -> bool
        Set: TextFileSemicolonDelimiter(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileSpaceDelimiter(self) -> bool:
        """
        Get: TextFileSpaceDelimiter(self: _QueryTable) -> bool
        Set: TextFileSpaceDelimiter(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileStartRow(self) -> int:
        """
        Get: TextFileStartRow(self: _QueryTable) -> int
        Set: TextFileStartRow(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileTabDelimiter(self) -> bool:
        """
        Get: TextFileTabDelimiter(self: _QueryTable) -> bool
        Set: TextFileTabDelimiter(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileTextQualifier(self) -> XlTextQualifier:
        """
        Get: TextFileTextQualifier(self: _QueryTable) -> XlTextQualifier
        Set: TextFileTextQualifier(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileThousandsSeparator(self) -> str:
        """
        Get: TextFileThousandsSeparator(self: _QueryTable) -> str
        Set: TextFileThousandsSeparator(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileTrailingMinusNumbers(self) -> bool:
        """
        Get: TextFileTrailingMinusNumbers(self: _QueryTable) -> bool
        Set: TextFileTrailingMinusNumbers(self: _QueryTable) = value
        """
        ...

    @property
    def TextFileVisualLayout(self) -> XlTextVisualLayoutType:
        """
        Get: TextFileVisualLayout(self: _QueryTable) -> XlTextVisualLayoutType
        Set: TextFileVisualLayout(self: _QueryTable) = value
        """
        ...

    @property
    def WebConsecutiveDelimitersAsOne(self) -> bool:
        """
        Get: WebConsecutiveDelimitersAsOne(self: _QueryTable) -> bool
        Set: WebConsecutiveDelimitersAsOne(self: _QueryTable) = value
        """
        ...

    @property
    def WebDisableDateRecognition(self) -> bool:
        """
        Get: WebDisableDateRecognition(self: _QueryTable) -> bool
        Set: WebDisableDateRecognition(self: _QueryTable) = value
        """
        ...

    @property
    def WebDisableRedirections(self) -> bool:
        """
        Get: WebDisableRedirections(self: _QueryTable) -> bool
        Set: WebDisableRedirections(self: _QueryTable) = value
        """
        ...

    @property
    def WebFormatting(self) -> XlWebFormatting:
        """
        Get: WebFormatting(self: _QueryTable) -> XlWebFormatting
        Set: WebFormatting(self: _QueryTable) = value
        """
        ...

    @property
    def WebPreFormattedTextToColumns(self) -> bool:
        """
        Get: WebPreFormattedTextToColumns(self: _QueryTable) -> bool
        Set: WebPreFormattedTextToColumns(self: _QueryTable) = value
        """
        ...

    @property
    def WebSelectionType(self) -> XlWebSelectionType:
        """
        Get: WebSelectionType(self: _QueryTable) -> XlWebSelectionType
        Set: WebSelectionType(self: _QueryTable) = value
        """
        ...

    @property
    def WebSingleBlockTextImport(self) -> bool:
        """
        Get: WebSingleBlockTextImport(self: _QueryTable) -> bool
        Set: WebSingleBlockTextImport(self: _QueryTable) = value
        """
        ...

    @property
    def WebTables(self) -> str:
        """
        Get: WebTables(self: _QueryTable) -> str
        Set: WebTables(self: _QueryTable) = value
        """
        ...

    @property
    def WorkbookConnection(self) -> WorkbookConnection:
        """ Get: WorkbookConnection(self: _QueryTable) -> WorkbookConnection """
        ...


    def CancelRefresh(self): # -> 
        """ CancelRefresh(self: _QueryTable) """
        ...

    def Delete(self): # -> 
        """ Delete(self: _QueryTable) """
        ...

    def Refresh(self, BackgroundQuery:object) -> bool:
        """ Refresh(self: _QueryTable, BackgroundQuery: object) -> bool """
        ...

    def ResetTimer(self): # -> 
        """ ResetTimer(self: _QueryTable) """
        ...

    def SaveAsODC(self, ODCFileName:str, Description:object, Keywords:object): # -> 
        """ SaveAsODC(self: _QueryTable, ODCFileName: str, Description: object, Keywords: object) """
        ...


class QueryTable(RefreshEvents_Event, _QueryTable): # skipped bases: <type 'object'>
    """ no doc """
    pass

class QueryTableClass(QueryTable, __ComObject): # skipped bases: <type '_QueryTable'>, <type 'RefreshEvents_Event'>, <type 'object'>
    """ QueryTableClass() """
    @property
    def AdjustColumnWidth(self) -> bool:
        """
        Get: AdjustColumnWidth(self: QueryTableClass) -> bool
        Set: AdjustColumnWidth(self: QueryTableClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: QueryTableClass) -> Application """
        ...

    @property
    def BackgroundQuery(self) -> bool:
        """
        Get: BackgroundQuery(self: QueryTableClass) -> bool
        Set: BackgroundQuery(self: QueryTableClass) = value
        """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: QueryTableClass) -> object
        Set: CommandText(self: QueryTableClass) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: QueryTableClass) -> XlCmdType
        Set: CommandType(self: QueryTableClass) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: QueryTableClass) -> object
        Set: Connection(self: QueryTableClass) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: QueryTableClass) -> XlCreator """
        ...

    @property
    def Destination(self) -> Range:
        """ Get: Destination(self: QueryTableClass) -> Range """
        ...

    @property
    def EditWebPage(self) -> object:
        """
        Get: EditWebPage(self: QueryTableClass) -> object
        Set: EditWebPage(self: QueryTableClass) = value
        """
        ...

    @property
    def EnableEditing(self) -> bool:
        """
        Get: EnableEditing(self: QueryTableClass) -> bool
        Set: EnableEditing(self: QueryTableClass) = value
        """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: QueryTableClass) -> bool
        Set: EnableRefresh(self: QueryTableClass) = value
        """
        ...

    @property
    def FetchedRowOverflow(self) -> bool:
        """ Get: FetchedRowOverflow(self: QueryTableClass) -> bool """
        ...

    @property
    def FieldNames(self) -> bool:
        """
        Get: FieldNames(self: QueryTableClass) -> bool
        Set: FieldNames(self: QueryTableClass) = value
        """
        ...

    @property
    def FillAdjacentFormulas(self) -> bool:
        """
        Get: FillAdjacentFormulas(self: QueryTableClass) -> bool
        Set: FillAdjacentFormulas(self: QueryTableClass) = value
        """
        ...

    @property
    def HasAutoFormat(self) -> bool:
        """
        Get: HasAutoFormat(self: QueryTableClass) -> bool
        Set: HasAutoFormat(self: QueryTableClass) = value
        """
        ...

    @property
    def ListObject(self) -> ListObject:
        """ Get: ListObject(self: QueryTableClass) -> ListObject """
        ...

    @property
    def MaintainConnection(self) -> bool:
        """
        Get: MaintainConnection(self: QueryTableClass) -> bool
        Set: MaintainConnection(self: QueryTableClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: QueryTableClass) -> str
        Set: Name(self: QueryTableClass) = value
        """
        ...

    @property
    def Parameters(self) -> Parameters:
        """ Get: Parameters(self: QueryTableClass) -> Parameters """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: QueryTableClass) -> object """
        ...

    @property
    def PostText(self) -> str:
        """
        Get: PostText(self: QueryTableClass) -> str
        Set: PostText(self: QueryTableClass) = value
        """
        ...

    @property
    def PreserveColumnInfo(self) -> bool:
        """
        Get: PreserveColumnInfo(self: QueryTableClass) -> bool
        Set: PreserveColumnInfo(self: QueryTableClass) = value
        """
        ...

    @property
    def PreserveFormatting(self) -> bool:
        """
        Get: PreserveFormatting(self: QueryTableClass) -> bool
        Set: PreserveFormatting(self: QueryTableClass) = value
        """
        ...

    @property
    def QueryType(self) -> XlQueryType:
        """ Get: QueryType(self: QueryTableClass) -> XlQueryType """
        ...

    @property
    def Recordset(self) -> object:
        """
        Get: Recordset(self: QueryTableClass) -> object
        Set: Recordset(self: QueryTableClass) = value
        """
        ...

    @property
    def Refreshing(self) -> bool:
        """ Get: Refreshing(self: QueryTableClass) -> bool """
        ...

    @property
    def RefreshOnFileOpen(self) -> bool:
        """
        Get: RefreshOnFileOpen(self: QueryTableClass) -> bool
        Set: RefreshOnFileOpen(self: QueryTableClass) = value
        """
        ...

    @property
    def RefreshPeriod(self) -> int:
        """
        Get: RefreshPeriod(self: QueryTableClass) -> int
        Set: RefreshPeriod(self: QueryTableClass) = value
        """
        ...

    @property
    def RefreshStyle(self) -> XlCellInsertionMode:
        """
        Get: RefreshStyle(self: QueryTableClass) -> XlCellInsertionMode
        Set: RefreshStyle(self: QueryTableClass) = value
        """
        ...

    @property
    def ResultRange(self) -> Range:
        """ Get: ResultRange(self: QueryTableClass) -> Range """
        ...

    @property
    def RobustConnect(self) -> XlRobustConnect:
        """
        Get: RobustConnect(self: QueryTableClass) -> XlRobustConnect
        Set: RobustConnect(self: QueryTableClass) = value
        """
        ...

    @property
    def RowNumbers(self) -> bool:
        """
        Get: RowNumbers(self: QueryTableClass) -> bool
        Set: RowNumbers(self: QueryTableClass) = value
        """
        ...

    @property
    def SaveData(self) -> bool:
        """
        Get: SaveData(self: QueryTableClass) -> bool
        Set: SaveData(self: QueryTableClass) = value
        """
        ...

    @property
    def SavePassword(self) -> bool:
        """
        Get: SavePassword(self: QueryTableClass) -> bool
        Set: SavePassword(self: QueryTableClass) = value
        """
        ...

    @property
    def Sort(self) -> Sort:
        """ Get: Sort(self: QueryTableClass) -> Sort """
        ...

    @property
    def SourceConnectionFile(self) -> str:
        """
        Get: SourceConnectionFile(self: QueryTableClass) -> str
        Set: SourceConnectionFile(self: QueryTableClass) = value
        """
        ...

    @property
    def SourceDataFile(self) -> str:
        """
        Get: SourceDataFile(self: QueryTableClass) -> str
        Set: SourceDataFile(self: QueryTableClass) = value
        """
        ...

    @property
    def Sql(self) -> object:
        """
        Get: Sql(self: QueryTableClass) -> object
        Set: Sql(self: QueryTableClass) = value
        """
        ...

    @property
    def TablesOnlyFromHTML(self) -> bool:
        """
        Get: TablesOnlyFromHTML(self: QueryTableClass) -> bool
        Set: TablesOnlyFromHTML(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileColumnDataTypes(self) -> object:
        """
        Get: TextFileColumnDataTypes(self: QueryTableClass) -> object
        Set: TextFileColumnDataTypes(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileCommaDelimiter(self) -> bool:
        """
        Get: TextFileCommaDelimiter(self: QueryTableClass) -> bool
        Set: TextFileCommaDelimiter(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileConsecutiveDelimiter(self) -> bool:
        """
        Get: TextFileConsecutiveDelimiter(self: QueryTableClass) -> bool
        Set: TextFileConsecutiveDelimiter(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileDecimalSeparator(self) -> str:
        """
        Get: TextFileDecimalSeparator(self: QueryTableClass) -> str
        Set: TextFileDecimalSeparator(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileFixedColumnWidths(self) -> object:
        """
        Get: TextFileFixedColumnWidths(self: QueryTableClass) -> object
        Set: TextFileFixedColumnWidths(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileOtherDelimiter(self) -> str:
        """
        Get: TextFileOtherDelimiter(self: QueryTableClass) -> str
        Set: TextFileOtherDelimiter(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileParseType(self) -> XlTextParsingType:
        """
        Get: TextFileParseType(self: QueryTableClass) -> XlTextParsingType
        Set: TextFileParseType(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFilePlatform(self) -> int:
        """
        Get: TextFilePlatform(self: QueryTableClass) -> int
        Set: TextFilePlatform(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFilePromptOnRefresh(self) -> bool:
        """
        Get: TextFilePromptOnRefresh(self: QueryTableClass) -> bool
        Set: TextFilePromptOnRefresh(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileSemicolonDelimiter(self) -> bool:
        """
        Get: TextFileSemicolonDelimiter(self: QueryTableClass) -> bool
        Set: TextFileSemicolonDelimiter(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileSpaceDelimiter(self) -> bool:
        """
        Get: TextFileSpaceDelimiter(self: QueryTableClass) -> bool
        Set: TextFileSpaceDelimiter(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileStartRow(self) -> int:
        """
        Get: TextFileStartRow(self: QueryTableClass) -> int
        Set: TextFileStartRow(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileTabDelimiter(self) -> bool:
        """
        Get: TextFileTabDelimiter(self: QueryTableClass) -> bool
        Set: TextFileTabDelimiter(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileTextQualifier(self) -> XlTextQualifier:
        """
        Get: TextFileTextQualifier(self: QueryTableClass) -> XlTextQualifier
        Set: TextFileTextQualifier(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileThousandsSeparator(self) -> str:
        """
        Get: TextFileThousandsSeparator(self: QueryTableClass) -> str
        Set: TextFileThousandsSeparator(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileTrailingMinusNumbers(self) -> bool:
        """
        Get: TextFileTrailingMinusNumbers(self: QueryTableClass) -> bool
        Set: TextFileTrailingMinusNumbers(self: QueryTableClass) = value
        """
        ...

    @property
    def TextFileVisualLayout(self) -> XlTextVisualLayoutType:
        """
        Get: TextFileVisualLayout(self: QueryTableClass) -> XlTextVisualLayoutType
        Set: TextFileVisualLayout(self: QueryTableClass) = value
        """
        ...

    @property
    def WebConsecutiveDelimitersAsOne(self) -> bool:
        """
        Get: WebConsecutiveDelimitersAsOne(self: QueryTableClass) -> bool
        Set: WebConsecutiveDelimitersAsOne(self: QueryTableClass) = value
        """
        ...

    @property
    def WebDisableDateRecognition(self) -> bool:
        """
        Get: WebDisableDateRecognition(self: QueryTableClass) -> bool
        Set: WebDisableDateRecognition(self: QueryTableClass) = value
        """
        ...

    @property
    def WebDisableRedirections(self) -> bool:
        """
        Get: WebDisableRedirections(self: QueryTableClass) -> bool
        Set: WebDisableRedirections(self: QueryTableClass) = value
        """
        ...

    @property
    def WebFormatting(self) -> XlWebFormatting:
        """
        Get: WebFormatting(self: QueryTableClass) -> XlWebFormatting
        Set: WebFormatting(self: QueryTableClass) = value
        """
        ...

    @property
    def WebPreFormattedTextToColumns(self) -> bool:
        """
        Get: WebPreFormattedTextToColumns(self: QueryTableClass) -> bool
        Set: WebPreFormattedTextToColumns(self: QueryTableClass) = value
        """
        ...

    @property
    def WebSelectionType(self) -> XlWebSelectionType:
        """
        Get: WebSelectionType(self: QueryTableClass) -> XlWebSelectionType
        Set: WebSelectionType(self: QueryTableClass) = value
        """
        ...

    @property
    def WebSingleBlockTextImport(self) -> bool:
        """
        Get: WebSingleBlockTextImport(self: QueryTableClass) -> bool
        Set: WebSingleBlockTextImport(self: QueryTableClass) = value
        """
        ...

    @property
    def WebTables(self) -> str:
        """
        Get: WebTables(self: QueryTableClass) -> str
        Set: WebTables(self: QueryTableClass) = value
        """
        ...

    @property
    def WorkbookConnection(self) -> WorkbookConnection:
        """ Get: WorkbookConnection(self: QueryTableClass) -> WorkbookConnection """
        ...


    def add_AfterRefresh(self): # -> 
        """ add_AfterRefresh(self: QueryTableClass, : RefreshEvents_AfterRefreshEventHandler) """
        ...

    def add_BeforeRefresh(self): # -> 
        """ add_BeforeRefresh(self: QueryTableClass, : RefreshEvents_BeforeRefreshEventHandler) """
        ...

    def CancelRefresh(self): # -> 
        """ CancelRefresh(self: QueryTableClass) """
        ...

    def Delete(self): # -> 
        """ Delete(self: QueryTableClass) """
        ...

    def Refresh(self, BackgroundQuery:object) -> bool:
        """ Refresh(self: QueryTableClass, BackgroundQuery: object) -> bool """
        ...

    def remove_AfterRefresh(self): # -> 
        """ remove_AfterRefresh(self: QueryTableClass, : RefreshEvents_AfterRefreshEventHandler) """
        ...

    def remove_BeforeRefresh(self): # -> 
        """ remove_BeforeRefresh(self: QueryTableClass, : RefreshEvents_BeforeRefreshEventHandler) """
        ...

    def ResetTimer(self): # -> 
        """ ResetTimer(self: QueryTableClass) """
        ...

    def SaveAsODC(self, ODCFileName:str, Description:object, Keywords:object): # -> 
        """ SaveAsODC(self: QueryTableClass, ODCFileName: str, Description: object, Keywords: object) """
        ...

    AfterRefresh = ...
    BeforeRefresh = ...


class QueryTables(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: QueryTables) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: QueryTables) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: QueryTables) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: QueryTables) -> object """
        ...


    def Add(self, Connection:object, Destination:Range, Sql:object) -> QueryTable:
        """ Add(self: QueryTables, Connection: object, Destination: Range, Sql: object) -> QueryTable """
        ...

    def Item(self, Index:object) -> QueryTable:
        """ Item(self: QueryTables, Index: object) -> QueryTable """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class QuickAnalysis: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: QuickAnalysis) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: QuickAnalysis) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: QuickAnalysis) -> object """
        ...


    def Hide(self, XlQuickAnalysisMode:XlQuickAnalysisMode): # -> 
        """ Hide(self: QuickAnalysis, XlQuickAnalysisMode: XlQuickAnalysisMode) """
        ...

    def Show(self, XlQuickAnalysisMode:XlQuickAnalysisMode): # -> 
        """ Show(self: QuickAnalysis, XlQuickAnalysisMode: XlQuickAnalysisMode) """
        ...


class Range(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> object:
        """
        Get: AddIndent(self: Range) -> object
        Set: AddIndent(self: Range) = value
        """
        ...

    @property
    def AllowEdit(self) -> bool:
        """ Get: AllowEdit(self: Range) -> bool """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Range) -> Application """
        ...

    @property
    def Areas(self) -> Areas:
        """ Get: Areas(self: Range) -> Areas """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: Range) -> Borders """
        ...

    @property
    def Cells(self) -> Range:
        """ Get: Cells(self: Range) -> Range """
        ...

    @property
    def Column(self) -> int:
        """ Get: Column(self: Range) -> int """
        ...

    @property
    def Columns(self) -> Range:
        """ Get: Columns(self: Range) -> Range """
        ...

    @property
    def ColumnWidth(self) -> object:
        """
        Get: ColumnWidth(self: Range) -> object
        Set: ColumnWidth(self: Range) = value
        """
        ...

    @property
    def Comment(self) -> Comment:
        """ Get: Comment(self: Range) -> Comment """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Range) -> int """
        ...

    @property
    def CountLarge(self) -> object:
        """ Get: CountLarge(self: Range) -> object """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Range) -> XlCreator """
        ...

    @property
    def CurrentArray(self) -> Range:
        """ Get: CurrentArray(self: Range) -> Range """
        ...

    @property
    def CurrentRegion(self) -> Range:
        """ Get: CurrentRegion(self: Range) -> Range """
        ...

    @property
    def Dependents(self) -> Range:
        """ Get: Dependents(self: Range) -> Range """
        ...

    @property
    def DirectDependents(self) -> Range:
        """ Get: DirectDependents(self: Range) -> Range """
        ...

    @property
    def DirectPrecedents(self) -> Range:
        """ Get: DirectPrecedents(self: Range) -> Range """
        ...

    @property
    def DisplayFormat(self) -> DisplayFormat:
        """ Get: DisplayFormat(self: Range) -> DisplayFormat """
        ...

    @property
    def EntireColumn(self) -> Range:
        """ Get: EntireColumn(self: Range) -> Range """
        ...

    @property
    def EntireRow(self) -> Range:
        """ Get: EntireRow(self: Range) -> Range """
        ...

    @property
    def Errors(self) -> Errors:
        """ Get: Errors(self: Range) -> Errors """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Range) -> Font """
        ...

    @property
    def FormatConditions(self) -> FormatConditions:
        """ Get: FormatConditions(self: Range) -> FormatConditions """
        ...

    @property
    def Formula(self) -> object:
        """
        Get: Formula(self: Range) -> object
        Set: Formula(self: Range) = value
        """
        ...

    @property
    def FormulaArray(self) -> object:
        """
        Get: FormulaArray(self: Range) -> object
        Set: FormulaArray(self: Range) = value
        """
        ...

    @property
    def FormulaHidden(self) -> object:
        """
        Get: FormulaHidden(self: Range) -> object
        Set: FormulaHidden(self: Range) = value
        """
        ...

    @property
    def FormulaLabel(self) -> XlFormulaLabel:
        """
        Get: FormulaLabel(self: Range) -> XlFormulaLabel
        Set: FormulaLabel(self: Range) = value
        """
        ...

    @property
    def FormulaLocal(self) -> object:
        """
        Get: FormulaLocal(self: Range) -> object
        Set: FormulaLocal(self: Range) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> object:
        """
        Get: FormulaR1C1(self: Range) -> object
        Set: FormulaR1C1(self: Range) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> object:
        """
        Get: FormulaR1C1Local(self: Range) -> object
        Set: FormulaR1C1Local(self: Range) = value
        """
        ...

    @property
    def HasArray(self) -> object:
        """ Get: HasArray(self: Range) -> object """
        ...

    @property
    def HasFormula(self) -> object:
        """ Get: HasFormula(self: Range) -> object """
        ...

    @property
    def Height(self) -> object:
        """ Get: Height(self: Range) -> object """
        ...

    @property
    def Hidden(self) -> object:
        """
        Get: Hidden(self: Range) -> object
        Set: Hidden(self: Range) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: Range) -> object
        Set: HorizontalAlignment(self: Range) = value
        """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: Range) -> Hyperlinks """
        ...

    @property
    def ID(self) -> str:
        """
        Get: ID(self: Range) -> str
        Set: ID(self: Range) = value
        """
        ...

    @property
    def IndentLevel(self) -> object:
        """
        Get: IndentLevel(self: Range) -> object
        Set: IndentLevel(self: Range) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Range) -> Interior """
        ...

    @property
    def Left(self) -> object:
        """ Get: Left(self: Range) -> object """
        ...

    @property
    def ListHeaderRows(self) -> int:
        """ Get: ListHeaderRows(self: Range) -> int """
        ...

    @property
    def ListObject(self) -> ListObject:
        """ Get: ListObject(self: Range) -> ListObject """
        ...

    @property
    def LocationInTable(self) -> XlLocationInTable:
        """ Get: LocationInTable(self: Range) -> XlLocationInTable """
        ...

    @property
    def Locked(self) -> object:
        """
        Get: Locked(self: Range) -> object
        Set: Locked(self: Range) = value
        """
        ...

    @property
    def MDX(self) -> str:
        """ Get: MDX(self: Range) -> str """
        ...

    @property
    def MergeArea(self) -> Range:
        """ Get: MergeArea(self: Range) -> Range """
        ...

    @property
    def MergeCells(self) -> object:
        """
        Get: MergeCells(self: Range) -> object
        Set: MergeCells(self: Range) = value
        """
        ...

    @property
    def Name(self) -> object:
        """
        Get: Name(self: Range) -> object
        Set: Name(self: Range) = value
        """
        ...

    @property
    def Next(self) -> Range:
        """ Get: Next(self: Range) -> Range """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: Range) -> object
        Set: NumberFormat(self: Range) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: Range) -> object
        Set: NumberFormatLocal(self: Range) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: Range) -> object
        Set: Orientation(self: Range) = value
        """
        ...

    @property
    def OutlineLevel(self) -> object:
        """
        Get: OutlineLevel(self: Range) -> object
        Set: OutlineLevel(self: Range) = value
        """
        ...

    @property
    def PageBreak(self) -> int:
        """
        Get: PageBreak(self: Range) -> int
        Set: PageBreak(self: Range) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Range) -> object """
        ...

    @property
    def Phonetic(self) -> Phonetic:
        """ Get: Phonetic(self: Range) -> Phonetic """
        ...

    @property
    def Phonetics(self) -> Phonetics:
        """ Get: Phonetics(self: Range) -> Phonetics """
        ...

    @property
    def PivotCell(self) -> PivotCell:
        """ Get: PivotCell(self: Range) -> PivotCell """
        ...

    @property
    def PivotField(self) -> PivotField:
        """ Get: PivotField(self: Range) -> PivotField """
        ...

    @property
    def PivotItem(self) -> PivotItem:
        """ Get: PivotItem(self: Range) -> PivotItem """
        ...

    @property
    def PivotTable(self) -> PivotTable:
        """ Get: PivotTable(self: Range) -> PivotTable """
        ...

    @property
    def Precedents(self) -> Range:
        """ Get: Precedents(self: Range) -> Range """
        ...

    @property
    def PrefixCharacter(self) -> object:
        """ Get: PrefixCharacter(self: Range) -> object """
        ...

    @property
    def Previous(self) -> Range:
        """ Get: Previous(self: Range) -> Range """
        ...

    @property
    def QueryTable(self) -> QueryTable:
        """ Get: QueryTable(self: Range) -> QueryTable """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Range) -> int
        Set: ReadingOrder(self: Range) = value
        """
        ...

    @property
    def Row(self) -> int:
        """ Get: Row(self: Range) -> int """
        ...

    @property
    def RowHeight(self) -> object:
        """
        Get: RowHeight(self: Range) -> object
        Set: RowHeight(self: Range) = value
        """
        ...

    @property
    def Rows(self) -> Range:
        """ Get: Rows(self: Range) -> Range """
        ...

    @property
    def ServerActions(self) -> Actions:
        """ Get: ServerActions(self: Range) -> Actions """
        ...

    @property
    def ShowDetail(self) -> object:
        """
        Get: ShowDetail(self: Range) -> object
        Set: ShowDetail(self: Range) = value
        """
        ...

    @property
    def ShrinkToFit(self) -> object:
        """
        Get: ShrinkToFit(self: Range) -> object
        Set: ShrinkToFit(self: Range) = value
        """
        ...

    @property
    def SmartTags(self) -> SmartTags:
        """ Get: SmartTags(self: Range) -> SmartTags """
        ...

    @property
    def SoundNote(self) -> SoundNote:
        """ Get: SoundNote(self: Range) -> SoundNote """
        ...

    @property
    def SparklineGroups(self) -> SparklineGroups:
        """ Get: SparklineGroups(self: Range) -> SparklineGroups """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: Range) -> object
        Set: Style(self: Range) = value
        """
        ...

    @property
    def Summary(self) -> object:
        """ Get: Summary(self: Range) -> object """
        ...

    @property
    def Text(self) -> object:
        """ Get: Text(self: Range) -> object """
        ...

    @property
    def Top(self) -> object:
        """ Get: Top(self: Range) -> object """
        ...

    @property
    def UseStandardHeight(self) -> object:
        """
        Get: UseStandardHeight(self: Range) -> object
        Set: UseStandardHeight(self: Range) = value
        """
        ...

    @property
    def UseStandardWidth(self) -> object:
        """
        Get: UseStandardWidth(self: Range) -> object
        Set: UseStandardWidth(self: Range) = value
        """
        ...

    @property
    def Validation(self) -> Validation:
        """ Get: Validation(self: Range) -> Validation """
        ...

    @property
    def Value2(self) -> object:
        """
        Get: Value2(self: Range) -> object
        Set: Value2(self: Range) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: Range) -> object
        Set: VerticalAlignment(self: Range) = value
        """
        ...

    @property
    def Width(self) -> object:
        """ Get: Width(self: Range) -> object """
        ...

    @property
    def Worksheet(self) -> Worksheet:
        """ Get: Worksheet(self: Range) -> Worksheet """
        ...

    @property
    def WrapText(self) -> object:
        """
        Get: WrapText(self: Range) -> object
        Set: WrapText(self: Range) = value
        """
        ...

    @property
    def XPath(self) -> XPath:
        """ Get: XPath(self: Range) -> XPath """
        ...


    def Activate(self) -> object:
        """ Activate(self: Range) -> object """
        ...

    def AddComment(self, Text:object) -> Comment:
        """ AddComment(self: Range, Text: object) -> Comment """
        ...

    def AdvancedFilter(self, Action:XlFilterAction, CriteriaRange:object, CopyToRange:object, Unique:object) -> object:
        """ AdvancedFilter(self: Range, Action: XlFilterAction, CriteriaRange: object, CopyToRange: object, Unique: object) -> object """
        ...

    def AllocateChanges(self): # -> 
        """ AllocateChanges(self: Range) """
        ...

    def ApplyNames(self, Names:object, IgnoreRelativeAbsolute:object, UseRowColumnNames:object, OmitColumn:object, OmitRow:object, Order:XlApplyNamesOrder, AppendLast:object) -> object:
        """ ApplyNames(self: Range, Names: object, IgnoreRelativeAbsolute: object, UseRowColumnNames: object, OmitColumn: object, OmitRow: object, Order: XlApplyNamesOrder, AppendLast: object) -> object """
        ...

    def ApplyOutlineStyles(self) -> object:
        """ ApplyOutlineStyles(self: Range) -> object """
        ...

    def AutoComplete(self, String:str) -> str:
        """ AutoComplete(self: Range, String: str) -> str """
        ...

    def AutoFill(self, Destination:Range, Type:XlAutoFillType) -> object:
        """ AutoFill(self: Range, Destination: Range, Type: XlAutoFillType) -> object """
        ...

    def AutoFilter(self, Field:object, Criteria1:object, Operator:XlAutoFilterOperator, Criteria2:object, VisibleDropDown:object) -> object:
        """ AutoFilter(self: Range, Field: object, Criteria1: object, Operator: XlAutoFilterOperator, Criteria2: object, VisibleDropDown: object) -> object """
        ...

    def AutoFit(self) -> object:
        """ AutoFit(self: Range) -> object """
        ...

    def AutoFormat(self, Format:XlRangeAutoFormat, Number:object, Font:object, Alignment:object, Border:object, Pattern:object, Width:object) -> object:
        """ AutoFormat(self: Range, Format: XlRangeAutoFormat, Number: object, Font: object, Alignment: object, Border: object, Pattern: object, Width: object) -> object """
        ...

    def AutoOutline(self) -> object:
        """ AutoOutline(self: Range) -> object """
        ...

    def BorderAround(self, LineStyle:object, Weight:XlBorderWeight, ColorIndex:XlColorIndex, Color:object) -> object:
        """ BorderAround(self: Range, LineStyle: object, Weight: XlBorderWeight, ColorIndex: XlColorIndex, Color: object) -> object """
        ...

    def BorderAround2(self, LineStyle:object, Weight:XlBorderWeight, ColorIndex:XlColorIndex, Color:object, ThemeColor:object) -> object:
        """ BorderAround2(self: Range, LineStyle: object, Weight: XlBorderWeight, ColorIndex: XlColorIndex, Color: object, ThemeColor: object) -> object """
        ...

    def Calculate(self) -> object:
        """ Calculate(self: Range) -> object """
        ...

    def CalculateRowMajorOrder(self) -> object:
        """ CalculateRowMajorOrder(self: Range) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Range, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Clear(self) -> object:
        """ Clear(self: Range) -> object """
        ...

    def ClearComments(self): # -> 
        """ ClearComments(self: Range) """
        ...

    def ClearContents(self) -> object:
        """ ClearContents(self: Range) -> object """
        ...

    def ClearFormats(self) -> object:
        """ ClearFormats(self: Range) -> object """
        ...

    def ClearHyperlinks(self): # -> 
        """ ClearHyperlinks(self: Range) """
        ...

    def ClearNotes(self) -> object:
        """ ClearNotes(self: Range) -> object """
        ...

    def ClearOutline(self) -> object:
        """ ClearOutline(self: Range) -> object """
        ...

    def ColumnDifferences(self, Comparison:object) -> Range:
        """ ColumnDifferences(self: Range, Comparison: object) -> Range """
        ...

    def Consolidate(self, Sources:object, Function:object, TopRow:object, LeftColumn:object, CreateLinks:object) -> object:
        """ Consolidate(self: Range, Sources: object, Function: object, TopRow: object, LeftColumn: object, CreateLinks: object) -> object """
        ...

    def Copy(self, Destination:object) -> object:
        """ Copy(self: Range, Destination: object) -> object """
        ...

    def CopyFromRecordset(self, Data:object, MaxRows:object, MaxColumns:object) -> int:
        """ CopyFromRecordset(self: Range, Data: object, MaxRows: object, MaxColumns: object) -> int """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Range, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def CreateNames(self, Top:object, Left:object, Bottom:object, Right:object) -> object:
        """ CreateNames(self: Range, Top: object, Left: object, Bottom: object, Right: object) -> object """
        ...

    def CreatePublisher(self, Edition:object, Appearance:XlPictureAppearance, ContainsPICT:object, ContainsBIFF:object, ContainsRTF:object, ContainsVALU:object) -> object:
        """ CreatePublisher(self: Range, Edition: object, Appearance: XlPictureAppearance, ContainsPICT: object, ContainsBIFF: object, ContainsRTF: object, ContainsVALU: object) -> object """
        ...

    def Cut(self, Destination:object) -> object:
        """ Cut(self: Range, Destination: object) -> object """
        ...

    def DataSeries(self, Rowcol:object, Type:XlDataSeriesType, Date:XlDataSeriesDate, Step:object, Stop:object, Trend:object) -> object:
        """ DataSeries(self: Range, Rowcol: object, Type: XlDataSeriesType, Date: XlDataSeriesDate, Step: object, Stop: object, Trend: object) -> object """
        ...

    def Delete(self, Shift:object) -> object:
        """ Delete(self: Range, Shift: object) -> object """
        ...

    def DialogBox(self) -> object:
        """ DialogBox(self: Range) -> object """
        ...

    def Dirty(self): # -> 
        """ Dirty(self: Range) """
        ...

    def DiscardChanges(self): # -> 
        """ DiscardChanges(self: Range) """
        ...

    def EditionOptions(self, Type:XlEditionType, Option:XlEditionOptionsOption, Name:object, Reference:object, Appearance:XlPictureAppearance, ChartSize:XlPictureAppearance, Format:object) -> object:
        """ EditionOptions(self: Range, Type: XlEditionType, Option: XlEditionOptionsOption, Name: object, Reference: object, Appearance: XlPictureAppearance, ChartSize: XlPictureAppearance, Format: object) -> object """
        ...

    def ExportAsFixedFormat(self, Type:XlFixedFormatType, Filename:object, Quality:object, IncludeDocProperties:object, IgnorePrintAreas:object, From:object, To:object, OpenAfterPublish:object, FixedFormatExtClassPtr:object): # -> 
        """ ExportAsFixedFormat(self: Range, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        ...

    def FillDown(self) -> object:
        """ FillDown(self: Range) -> object """
        ...

    def FillLeft(self) -> object:
        """ FillLeft(self: Range) -> object """
        ...

    def FillRight(self) -> object:
        """ FillRight(self: Range) -> object """
        ...

    def FillUp(self) -> object:
        """ FillUp(self: Range) -> object """
        ...

    def Find(self, What:object, After:object, LookIn:object, LookAt:object, SearchOrder:object, SearchDirection:XlSearchDirection, MatchCase:object, MatchByte:object, SearchFormat:object) -> Range:
        """ Find(self: Range, What: object, After: object, LookIn: object, LookAt: object, SearchOrder: object, SearchDirection: XlSearchDirection, MatchCase: object, MatchByte: object, SearchFormat: object) -> Range """
        ...

    def FindNext(self, After:object) -> Range:
        """ FindNext(self: Range, After: object) -> Range """
        ...

    def FindPrevious(self, After:object) -> Range:
        """ FindPrevious(self: Range, After: object) -> Range """
        ...

    def FlashFill(self): # -> 
        """ FlashFill(self: Range) """
        ...

    def FunctionWizard(self) -> object:
        """ FunctionWizard(self: Range) -> object """
        ...

    def GoalSeek(self, Goal:object, ChangingCell:Range) -> bool:
        """ GoalSeek(self: Range, Goal: object, ChangingCell: Range) -> bool """
        ...

    def Group(self, Start:object, End:object, By:object, Periods:object) -> object:
        """ Group(self: Range, Start: object, End: object, By: object, Periods: object) -> object """
        ...

    def Insert(self, Shift:object, CopyOrigin:object) -> object:
        """ Insert(self: Range, Shift: object, CopyOrigin: object) -> object """
        ...

    def InsertIndent(self, InsertAmount:int): # -> 
        """ InsertIndent(self: Range, InsertAmount: int) """
        ...

    def Justify(self) -> object:
        """ Justify(self: Range) -> object """
        ...

    def ListNames(self) -> object:
        """ ListNames(self: Range) -> object """
        ...

    def Merge(self, Across:object): # -> 
        """ Merge(self: Range, Across: object) """
        ...

    def NavigateArrow(self, TowardPrecedent:object, ArrowNumber:object, LinkNumber:object) -> object:
        """ NavigateArrow(self: Range, TowardPrecedent: object, ArrowNumber: object, LinkNumber: object) -> object """
        ...

    def NoteText(self, Text:object, Start:object, Length:object) -> str:
        """ NoteText(self: Range, Text: object, Start: object, Length: object) -> str """
        ...

    def Parse(self, ParseLine:object, Destination:object) -> object:
        """ Parse(self: Range, ParseLine: object, Destination: object) -> object """
        ...

    def PasteSpecial(self, Paste:XlPasteType, Operation:XlPasteSpecialOperation, SkipBlanks:object, Transpose:object) -> object:
        """ PasteSpecial(self: Range, Paste: XlPasteType, Operation: XlPasteSpecialOperation, SkipBlanks: object, Transpose: object) -> object """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object) -> object:
        """ PrintOut(self: Range, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object) -> object:
        """ PrintOutEx(self: Range, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        ...

    def PrintPreview(self, EnableChanges:object) -> object:
        """ PrintPreview(self: Range, EnableChanges: object) -> object """
        ...

    def RemoveDuplicates(self, Columns:object, Header:XlYesNoGuess): # -> 
        """ RemoveDuplicates(self: Range, Columns: object, Header: XlYesNoGuess) """
        ...

    def RemoveSubtotal(self) -> object:
        """ RemoveSubtotal(self: Range) -> object """
        ...

    def Replace(self, What:object, Replacement:object, LookAt:object, SearchOrder:object, MatchCase:object, MatchByte:object, SearchFormat:object, ReplaceFormat:object) -> bool:
        """ Replace(self: Range, What: object, Replacement: object, LookAt: object, SearchOrder: object, MatchCase: object, MatchByte: object, SearchFormat: object, ReplaceFormat: object) -> bool """
        ...

    def RowDifferences(self, Comparison:object) -> Range:
        """ RowDifferences(self: Range, Comparison: object) -> Range """
        ...

    def Run(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Run(self: Range, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: Range) -> object """
        ...

    def SetPhonetic(self): # -> 
        """ SetPhonetic(self: Range) """
        ...

    def Show(self) -> object:
        """ Show(self: Range) -> object """
        ...

    def ShowDependents(self, Remove:object) -> object:
        """ ShowDependents(self: Range, Remove: object) -> object """
        ...

    def ShowErrors(self) -> object:
        """ ShowErrors(self: Range) -> object """
        ...

    def ShowPrecedents(self, Remove:object) -> object:
        """ ShowPrecedents(self: Range, Remove: object) -> object """
        ...

    def Sort(self, Key1:object, Order1:XlSortOrder, Key2:object, Type:object, Order2:XlSortOrder, Key3:object, Order3:XlSortOrder, Header:XlYesNoGuess, OrderCustom:object, MatchCase:object, Orientation:XlSortOrientation, SortMethod:XlSortMethod, DataOption1:XlSortDataOption, DataOption2:XlSortDataOption, DataOption3:XlSortDataOption) -> object:
        """ Sort(self: Range, Key1: object, Order1: XlSortOrder, Key2: object, Type: object, Order2: XlSortOrder, Key3: object, Order3: XlSortOrder, Header: XlYesNoGuess, OrderCustom: object, MatchCase: object, Orientation: XlSortOrientation, SortMethod: XlSortMethod, DataOption1: XlSortDataOption, DataOption2: XlSortDataOption, DataOption3: XlSortDataOption) -> object """
        ...

    def SortSpecial(self, SortMethod:XlSortMethod, Key1:object, Order1:XlSortOrder, Type:object, Key2:object, Order2:XlSortOrder, Key3:object, Order3:XlSortOrder, Header:XlYesNoGuess, OrderCustom:object, MatchCase:object, Orientation:XlSortOrientation, DataOption1:XlSortDataOption, DataOption2:XlSortDataOption, DataOption3:XlSortDataOption) -> object:
        """ SortSpecial(self: Range, SortMethod: XlSortMethod, Key1: object, Order1: XlSortOrder, Type: object, Key2: object, Order2: XlSortOrder, Key3: object, Order3: XlSortOrder, Header: XlYesNoGuess, OrderCustom: object, MatchCase: object, Orientation: XlSortOrientation, DataOption1: XlSortDataOption, DataOption2: XlSortDataOption, DataOption3: XlSortDataOption) -> object """
        ...

    def Speak(self, SpeakDirection:object, SpeakFormulas:object): # -> 
        """ Speak(self: Range, SpeakDirection: object, SpeakFormulas: object) """
        ...

    def SpecialCells(self, Type:XlCellType, Value:object) -> Range:
        """ SpecialCells(self: Range, Type: XlCellType, Value: object) -> Range """
        ...

    def SubscribeTo(self, Edition:str, Format:XlSubscribeToFormat) -> object:
        """ SubscribeTo(self: Range, Edition: str, Format: XlSubscribeToFormat) -> object """
        ...

    def Subtotal(self, GroupBy:int, Function:XlConsolidationFunction, TotalList:object, Replace:object, PageBreaks:object, SummaryBelowData:XlSummaryRow) -> object:
        """ Subtotal(self: Range, GroupBy: int, Function: XlConsolidationFunction, TotalList: object, Replace: object, PageBreaks: object, SummaryBelowData: XlSummaryRow) -> object """
        ...

    def Table(self, RowInput:object, ColumnInput:object) -> object:
        """ Table(self: Range, RowInput: object, ColumnInput: object) -> object """
        ...

    def TextToColumns(self, Destination:object, DataType:XlTextParsingType, TextQualifier:XlTextQualifier, ConsecutiveDelimiter:object, Tab:object, Semicolon:object, Comma:object, Space:object, Other:object, OtherChar:object, FieldInfo:object, DecimalSeparator:object, ThousandsSeparator:object, TrailingMinusNumbers:object) -> object:
        """ TextToColumns(self: Range, Destination: object, DataType: XlTextParsingType, TextQualifier: XlTextQualifier, ConsecutiveDelimiter: object, Tab: object, Semicolon: object, Comma: object, Space: object, Other: object, OtherChar: object, FieldInfo: object, DecimalSeparator: object, ThousandsSeparator: object, TrailingMinusNumbers: object) -> object """
        ...

    def Ungroup(self) -> object:
        """ Ungroup(self: Range) -> object """
        ...

    def UnMerge(self): # -> 
        """ UnMerge(self: Range) """
        ...

    def _PasteSpecial(self, Paste:XlPasteType, Operation:XlPasteSpecialOperation, SkipBlanks:object, Transpose:object) -> object:
        """ _PasteSpecial(self: Range, Paste: XlPasteType, Operation: XlPasteSpecialOperation, SkipBlanks: object, Transpose: object) -> object """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object) -> object:
        """ _PrintOut(self: Range, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Ranges(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Ranges) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Ranges) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Ranges) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Ranges) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class RecentFile: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RecentFile) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: RecentFile) -> XlCreator """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: RecentFile) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: RecentFile) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RecentFile) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: RecentFile) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: RecentFile) """
        ...

    def Open(self) -> Workbook:
        """ Open(self: RecentFile) -> Workbook """
        ...


class RecentFiles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RecentFiles) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: RecentFiles) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: RecentFiles) -> XlCreator """
        ...

    @property
    def Maximum(self) -> int:
        """
        Get: Maximum(self: RecentFiles) -> int
        Set: Maximum(self: RecentFiles) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RecentFiles) -> object """
        ...


    def Add(self, Name:str) -> RecentFile:
        """ Add(self: RecentFiles, Name: str) -> RecentFile """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Rectangle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: Rectangle) -> bool
        Set: AddIndent(self: Rectangle) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Rectangle) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Rectangle) -> object
        Set: AutoScaleFont(self: Rectangle) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Rectangle) -> bool
        Set: AutoSize(self: Rectangle) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Rectangle) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: Rectangle) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Rectangle) -> str
        Set: Caption(self: Rectangle) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Rectangle) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Rectangle) -> bool
        Set: Enabled(self: Rectangle) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Rectangle) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Rectangle) -> str
        Set: Formula(self: Rectangle) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Rectangle) -> float
        Set: Height(self: Rectangle) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: Rectangle) -> object
        Set: HorizontalAlignment(self: Rectangle) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Rectangle) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Rectangle) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Rectangle) -> float
        Set: Left(self: Rectangle) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Rectangle) -> bool
        Set: Locked(self: Rectangle) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Rectangle) -> bool
        Set: LockedText(self: Rectangle) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Rectangle) -> str
        Set: Name(self: Rectangle) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Rectangle) -> str
        Set: OnAction(self: Rectangle) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: Rectangle) -> object
        Set: Orientation(self: Rectangle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Rectangle) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Rectangle) -> object
        Set: Placement(self: Rectangle) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Rectangle) -> bool
        Set: PrintObject(self: Rectangle) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Rectangle) -> int
        Set: ReadingOrder(self: Rectangle) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: Rectangle) -> bool
        Set: RoundedCorners(self: Rectangle) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Rectangle) -> bool
        Set: Shadow(self: Rectangle) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Rectangle) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Rectangle) -> str
        Set: Text(self: Rectangle) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Rectangle) -> float
        Set: Top(self: Rectangle) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: Rectangle) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: Rectangle) -> object
        Set: VerticalAlignment(self: Rectangle) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Rectangle) -> bool
        Set: Visible(self: Rectangle) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Rectangle) -> float
        Set: Width(self: Rectangle) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Rectangle) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: Rectangle) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Rectangle, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Rectangle) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Rectangle, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Rectangle) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Rectangle) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Rectangle) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Rectangle, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Rectangle) -> object """
        ...


class Rectangles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: Rectangles) -> bool
        Set: AddIndent(self: Rectangles) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Rectangles) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Rectangles) -> object
        Set: AutoScaleFont(self: Rectangles) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: Rectangles) -> bool
        Set: AutoSize(self: Rectangles) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Rectangles) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Rectangles) -> str
        Set: Caption(self: Rectangles) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Rectangles) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Rectangles) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Rectangles) -> bool
        Set: Enabled(self: Rectangles) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Rectangles) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Rectangles) -> str
        Set: Formula(self: Rectangles) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Rectangles) -> float
        Set: Height(self: Rectangles) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: Rectangles) -> object
        Set: HorizontalAlignment(self: Rectangles) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Rectangles) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Rectangles) -> float
        Set: Left(self: Rectangles) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Rectangles) -> bool
        Set: Locked(self: Rectangles) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: Rectangles) -> bool
        Set: LockedText(self: Rectangles) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Rectangles) -> str
        Set: OnAction(self: Rectangles) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: Rectangles) -> object
        Set: Orientation(self: Rectangles) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Rectangles) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Rectangles) -> object
        Set: Placement(self: Rectangles) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Rectangles) -> bool
        Set: PrintObject(self: Rectangles) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Rectangles) -> int
        Set: ReadingOrder(self: Rectangles) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: Rectangles) -> bool
        Set: RoundedCorners(self: Rectangles) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Rectangles) -> bool
        Set: Shadow(self: Rectangles) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Rectangles) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Rectangles) -> str
        Set: Text(self: Rectangles) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Rectangles) -> float
        Set: Top(self: Rectangles) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: Rectangles) -> object
        Set: VerticalAlignment(self: Rectangles) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Rectangles) -> bool
        Set: Visible(self: Rectangles) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Rectangles) -> float
        Set: Width(self: Rectangles) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Rectangles) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Rectangle:
        """ Add(self: Rectangles, Left: float, Top: float, Width: float, Height: float) -> Rectangle """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: Rectangles) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: Rectangles, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Rectangles) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Rectangles, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Rectangles) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Rectangles) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Rectangles) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: Rectangles) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: Rectangles, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Rectangles, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Rectangles) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: Rectangles) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: Rectangles) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: Rectangles) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: Rectangles) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class RectangularGradient: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RectangularGradient) -> Application """
        ...

    @property
    def ColorStops(self) -> ColorStops:
        """ Get: ColorStops(self: RectangularGradient) -> ColorStops """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: RectangularGradient) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RectangularGradient) -> object """
        ...

    @property
    def RectangleBottom(self) -> float:
        """
        Get: RectangleBottom(self: RectangularGradient) -> float
        Set: RectangleBottom(self: RectangularGradient) = value
        """
        ...

    @property
    def RectangleLeft(self) -> float:
        """
        Get: RectangleLeft(self: RectangularGradient) -> float
        Set: RectangleLeft(self: RectangularGradient) = value
        """
        ...

    @property
    def RectangleRight(self) -> float:
        """
        Get: RectangleRight(self: RectangularGradient) -> float
        Set: RectangleRight(self: RectangularGradient) = value
        """
        ...

    @property
    def RectangleTop(self) -> float:
        """
        Get: RectangleTop(self: RectangularGradient) -> float
        Set: RectangleTop(self: RectangularGradient) = value
        """
        ...



class RefreshEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterRefresh(self, Success:bool): # -> 
        """ AfterRefresh(self: RefreshEvents, Success: bool) """
        ...

    def BeforeRefresh(self, Cancel) -> bool:
        """ BeforeRefresh(self: RefreshEvents) -> bool """
        ...


class RefreshEvents_AfterRefreshEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ RefreshEvents_AfterRefreshEventHandler(: object, : UIntPtr) """
    def Invoke(self, Success:bool): # -> 
        """ Invoke(self: RefreshEvents_AfterRefreshEventHandler, Success: bool) """
        ...


class RefreshEvents_BeforeRefreshEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ RefreshEvents_BeforeRefreshEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: RefreshEvents_BeforeRefreshEventHandler) -> bool """
        ...


class RefreshEvents_SinkHelper(RefreshEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterRefreshDelegate = ...
    m_BeforeRefreshDelegate = ...
    m_dwCookie = ...


class Research: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Research) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Research) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Research) -> object """
        ...


    def IsResearchService(self, ServiceID:str) -> bool:
        """ IsResearchService(self: Research, ServiceID: str) -> bool """
        ...

    def Query(self, ServiceID:str, QueryString:object, QueryLanguage:object, UseSelection:object, LaunchQuery:object) -> object:
        """ Query(self: Research, ServiceID: str, QueryString: object, QueryLanguage: object, UseSelection: object, LaunchQuery: object) -> object """
        ...

    def SetLanguagePair(self, LanguageFrom:int, LanguageTo:int) -> object:
        """ SetLanguagePair(self: Research, LanguageFrom: int, LanguageTo: int) -> object """
        ...


class RoutingSlip: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RoutingSlip) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: RoutingSlip) -> XlCreator """
        ...

    @property
    def Delivery(self) -> XlRoutingSlipDelivery:
        """
        Get: Delivery(self: RoutingSlip) -> XlRoutingSlipDelivery
        Set: Delivery(self: RoutingSlip) = value
        """
        ...

    @property
    def Message(self) -> object:
        """
        Get: Message(self: RoutingSlip) -> object
        Set: Message(self: RoutingSlip) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RoutingSlip) -> object """
        ...

    @property
    def ReturnWhenDone(self) -> bool:
        """
        Get: ReturnWhenDone(self: RoutingSlip) -> bool
        Set: ReturnWhenDone(self: RoutingSlip) = value
        """
        ...

    @property
    def Status(self) -> XlRoutingSlipStatus:
        """ Get: Status(self: RoutingSlip) -> XlRoutingSlipStatus """
        ...

    @property
    def Subject(self) -> object:
        """
        Get: Subject(self: RoutingSlip) -> object
        Set: Subject(self: RoutingSlip) = value
        """
        ...

    @property
    def TrackStatus(self) -> bool:
        """
        Get: TrackStatus(self: RoutingSlip) -> bool
        Set: TrackStatus(self: RoutingSlip) = value
        """
        ...


    def Reset(self) -> object:
        """ Reset(self: RoutingSlip) -> object """
        ...


class RTD: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ThrottleInterval(self) -> int:
        """
        Get: ThrottleInterval(self: RTD) -> int
        Set: ThrottleInterval(self: RTD) = value
        """
        ...


    def RefreshData(self): # -> 
        """ RefreshData(self: RTD) """
        ...

    def RestartServers(self): # -> 
        """ RestartServers(self: RTD) """
        ...


class Scenario: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Scenario) -> Application """
        ...

    @property
    def ChangingCells(self) -> Range:
        """ Get: ChangingCells(self: Scenario) -> Range """
        ...

    @property
    def Comment(self) -> str:
        """
        Get: Comment(self: Scenario) -> str
        Set: Comment(self: Scenario) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Scenario) -> XlCreator """
        ...

    @property
    def Hidden(self) -> bool:
        """
        Get: Hidden(self: Scenario) -> bool
        Set: Hidden(self: Scenario) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Scenario) -> int """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Scenario) -> bool
        Set: Locked(self: Scenario) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Scenario) -> str
        Set: Name(self: Scenario) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Scenario) -> object """
        ...


    def ChangeScenario(self, ChangingCells:object, Values:object) -> object:
        """ ChangeScenario(self: Scenario, ChangingCells: object, Values: object) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Scenario) -> object """
        ...

    def Show(self) -> object:
        """ Show(self: Scenario) -> object """
        ...


class Scenarios(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Scenarios) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Scenarios) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Scenarios) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Scenarios) -> object """
        ...


    def Add(self, Name:str, ChangingCells:object, Values:object, Comment:object, Locked:object, Hidden:object) -> Scenario:
        """ Add(self: Scenarios, Name: str, ChangingCells: object, Values: object, Comment: object, Locked: object, Hidden: object) -> Scenario """
        ...

    def CreateSummary(self, ReportType:XlSummaryReportType, ResultCells:object) -> object:
        """ CreateSummary(self: Scenarios, ReportType: XlSummaryReportType, ResultCells: object) -> object """
        ...

    def Item(self, Index:object) -> Scenario:
        """ Item(self: Scenarios, Index: object) -> Scenario """
        ...

    def Merge(self, Source:object) -> object:
        """ Merge(self: Scenarios, Source: object) -> object """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class ScrollBar: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ScrollBar) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: ScrollBar) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ScrollBar) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: ScrollBar) -> bool
        Set: Display3DShading(self: ScrollBar) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ScrollBar) -> bool
        Set: Enabled(self: ScrollBar) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ScrollBar) -> float
        Set: Height(self: ScrollBar) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ScrollBar) -> int """
        ...

    @property
    def LargeChange(self) -> int:
        """
        Get: LargeChange(self: ScrollBar) -> int
        Set: LargeChange(self: ScrollBar) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ScrollBar) -> float
        Set: Left(self: ScrollBar) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: ScrollBar) -> str
        Set: LinkedCell(self: ScrollBar) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ScrollBar) -> bool
        Set: Locked(self: ScrollBar) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: ScrollBar) -> int
        Set: Max(self: ScrollBar) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: ScrollBar) -> int
        Set: Min(self: ScrollBar) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ScrollBar) -> str
        Set: Name(self: ScrollBar) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ScrollBar) -> str
        Set: OnAction(self: ScrollBar) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ScrollBar) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ScrollBar) -> object
        Set: Placement(self: ScrollBar) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ScrollBar) -> bool
        Set: PrintObject(self: ScrollBar) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ScrollBar) -> ShapeRange """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: ScrollBar) -> int
        Set: SmallChange(self: ScrollBar) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ScrollBar) -> float
        Set: Top(self: ScrollBar) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: ScrollBar) -> Range """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: ScrollBar) -> int
        Set: Value(self: ScrollBar) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ScrollBar) -> bool
        Set: Visible(self: ScrollBar) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ScrollBar) -> float
        Set: Width(self: ScrollBar) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ScrollBar) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: ScrollBar) -> int
        Set: _Default(self: ScrollBar) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: ScrollBar) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ScrollBar) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ScrollBar, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ScrollBar) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ScrollBar) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ScrollBar) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ScrollBar, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ScrollBar) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ScrollBars(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ScrollBars) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ScrollBars) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ScrollBars) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: ScrollBars) -> bool
        Set: Display3DShading(self: ScrollBars) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ScrollBars) -> bool
        Set: Enabled(self: ScrollBars) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ScrollBars) -> float
        Set: Height(self: ScrollBars) = value
        """
        ...

    @property
    def LargeChange(self) -> int:
        """
        Get: LargeChange(self: ScrollBars) -> int
        Set: LargeChange(self: ScrollBars) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ScrollBars) -> float
        Set: Left(self: ScrollBars) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: ScrollBars) -> str
        Set: LinkedCell(self: ScrollBars) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: ScrollBars) -> bool
        Set: Locked(self: ScrollBars) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: ScrollBars) -> int
        Set: Max(self: ScrollBars) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: ScrollBars) -> int
        Set: Min(self: ScrollBars) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ScrollBars) -> str
        Set: OnAction(self: ScrollBars) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ScrollBars) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: ScrollBars) -> object
        Set: Placement(self: ScrollBars) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: ScrollBars) -> bool
        Set: PrintObject(self: ScrollBars) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: ScrollBars) -> ShapeRange """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: ScrollBars) -> int
        Set: SmallChange(self: ScrollBars) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ScrollBars) -> float
        Set: Top(self: ScrollBars) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: ScrollBars) -> int
        Set: Value(self: ScrollBars) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ScrollBars) -> bool
        Set: Visible(self: ScrollBars) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ScrollBars) -> float
        Set: Width(self: ScrollBars) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: ScrollBars) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: ScrollBars) -> int
        Set: _Default(self: ScrollBars) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> ScrollBar:
        """ Add(self: ScrollBars, Left: float, Top: float, Width: float, Height: float) -> ScrollBar """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: ScrollBars) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ScrollBars) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: ScrollBars, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: ScrollBars) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ScrollBars) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: ScrollBars) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: ScrollBars) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: ScrollBars, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ScrollBars, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: ScrollBars) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: ScrollBars) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: ScrollBars) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: ScrollBars) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: ScrollBars) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Series: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Series) -> Application """
        ...

    @property
    def ApplyPictToEnd(self) -> bool:
        """
        Get: ApplyPictToEnd(self: Series) -> bool
        Set: ApplyPictToEnd(self: Series) = value
        """
        ...

    @property
    def ApplyPictToFront(self) -> bool:
        """
        Get: ApplyPictToFront(self: Series) -> bool
        Set: ApplyPictToFront(self: Series) = value
        """
        ...

    @property
    def ApplyPictToSides(self) -> bool:
        """
        Get: ApplyPictToSides(self: Series) -> bool
        Set: ApplyPictToSides(self: Series) = value
        """
        ...

    @property
    def AxisGroup(self) -> XlAxisGroup:
        """
        Get: AxisGroup(self: Series) -> XlAxisGroup
        Set: AxisGroup(self: Series) = value
        """
        ...

    @property
    def BarShape(self) -> XlBarShape:
        """
        Get: BarShape(self: Series) -> XlBarShape
        Set: BarShape(self: Series) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Series) -> Border """
        ...

    @property
    def BubbleSizes(self) -> object:
        """
        Get: BubbleSizes(self: Series) -> object
        Set: BubbleSizes(self: Series) = value
        """
        ...

    @property
    def ChartType(self) -> XlChartType:
        """
        Get: ChartType(self: Series) -> XlChartType
        Set: ChartType(self: Series) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Series) -> XlCreator """
        ...

    @property
    def ErrorBars(self) -> ErrorBars:
        """ Get: ErrorBars(self: Series) -> ErrorBars """
        ...

    @property
    def Explosion(self) -> int:
        """
        Get: Explosion(self: Series) -> int
        Set: Explosion(self: Series) = value
        """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: Series) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Series) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Series) -> str
        Set: Formula(self: Series) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: Series) -> str
        Set: FormulaLocal(self: Series) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: Series) -> str
        Set: FormulaR1C1(self: Series) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: Series) -> str
        Set: FormulaR1C1Local(self: Series) = value
        """
        ...

    @property
    def Has3DEffect(self) -> bool:
        """
        Get: Has3DEffect(self: Series) -> bool
        Set: Has3DEffect(self: Series) = value
        """
        ...

    @property
    def HasDataLabels(self) -> bool:
        """
        Get: HasDataLabels(self: Series) -> bool
        Set: HasDataLabels(self: Series) = value
        """
        ...

    @property
    def HasErrorBars(self) -> bool:
        """
        Get: HasErrorBars(self: Series) -> bool
        Set: HasErrorBars(self: Series) = value
        """
        ...

    @property
    def HasLeaderLines(self) -> bool:
        """
        Get: HasLeaderLines(self: Series) -> bool
        Set: HasLeaderLines(self: Series) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Series) -> Interior """
        ...

    @property
    def InvertColor(self) -> int:
        """
        Get: InvertColor(self: Series) -> int
        Set: InvertColor(self: Series) = value
        """
        ...

    @property
    def InvertColorIndex(self) -> int:
        """
        Get: InvertColorIndex(self: Series) -> int
        Set: InvertColorIndex(self: Series) = value
        """
        ...

    @property
    def InvertIfNegative(self) -> bool:
        """
        Get: InvertIfNegative(self: Series) -> bool
        Set: InvertIfNegative(self: Series) = value
        """
        ...

    @property
    def IsFiltered(self) -> bool:
        """
        Get: IsFiltered(self: Series) -> bool
        Set: IsFiltered(self: Series) = value
        """
        ...

    @property
    def LeaderLines(self) -> LeaderLines:
        """ Get: LeaderLines(self: Series) -> LeaderLines """
        ...

    @property
    def MarkerBackgroundColor(self) -> int:
        """
        Get: MarkerBackgroundColor(self: Series) -> int
        Set: MarkerBackgroundColor(self: Series) = value
        """
        ...

    @property
    def MarkerBackgroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerBackgroundColorIndex(self: Series) -> XlColorIndex
        Set: MarkerBackgroundColorIndex(self: Series) = value
        """
        ...

    @property
    def MarkerForegroundColor(self) -> int:
        """
        Get: MarkerForegroundColor(self: Series) -> int
        Set: MarkerForegroundColor(self: Series) = value
        """
        ...

    @property
    def MarkerForegroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerForegroundColorIndex(self: Series) -> XlColorIndex
        Set: MarkerForegroundColorIndex(self: Series) = value
        """
        ...

    @property
    def MarkerSize(self) -> int:
        """
        Get: MarkerSize(self: Series) -> int
        Set: MarkerSize(self: Series) = value
        """
        ...

    @property
    def MarkerStyle(self) -> XlMarkerStyle:
        """
        Get: MarkerStyle(self: Series) -> XlMarkerStyle
        Set: MarkerStyle(self: Series) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Series) -> str
        Set: Name(self: Series) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Series) -> object """
        ...

    @property
    def PictureType(self) -> XlChartPictureType:
        """
        Get: PictureType(self: Series) -> XlChartPictureType
        Set: PictureType(self: Series) = value
        """
        ...

    @property
    def PictureUnit(self) -> int:
        """
        Get: PictureUnit(self: Series) -> int
        Set: PictureUnit(self: Series) = value
        """
        ...

    @property
    def PictureUnit2(self) -> float:
        """
        Get: PictureUnit2(self: Series) -> float
        Set: PictureUnit2(self: Series) = value
        """
        ...

    @property
    def PlotColorIndex(self) -> int:
        """ Get: PlotColorIndex(self: Series) -> int """
        ...

    @property
    def PlotOrder(self) -> int:
        """
        Get: PlotOrder(self: Series) -> int
        Set: PlotOrder(self: Series) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Series) -> bool
        Set: Shadow(self: Series) = value
        """
        ...

    @property
    def Smooth(self) -> bool:
        """
        Get: Smooth(self: Series) -> bool
        Set: Smooth(self: Series) = value
        """
        ...

    @property
    def Type(self) -> int:
        """
        Get: Type(self: Series) -> int
        Set: Type(self: Series) = value
        """
        ...

    @property
    def Values(self) -> object:
        """
        Get: Values(self: Series) -> object
        Set: Values(self: Series) = value
        """
        ...

    @property
    def XValues(self) -> object:
        """
        Get: XValues(self: Series) -> object
        Set: XValues(self: Series) = value
        """
        ...


    def ApplyCustomType(self, ChartType:XlChartType): # -> 
        """ ApplyCustomType(self: Series, ChartType: XlChartType) """
        ...

    def ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object, ShowSeriesName:object, ShowCategoryName:object, ShowValue:object, ShowPercentage:object, ShowBubbleSize:object, Separator:object) -> object:
        """ ApplyDataLabels(self: Series, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) -> object """
        ...

    def ClearFormats(self) -> object:
        """ ClearFormats(self: Series) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Series) -> object """
        ...

    def DataLabels(self, Index:object) -> object:
        """ DataLabels(self: Series, Index: object) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Series) -> object """
        ...

    def ErrorBar(self, Direction:XlErrorBarDirection, Include:XlErrorBarInclude, Type:XlErrorBarType, Amount:object, MinusValues:object) -> object:
        """ ErrorBar(self: Series, Direction: XlErrorBarDirection, Include: XlErrorBarInclude, Type: XlErrorBarType, Amount: object, MinusValues: object) -> object """
        ...

    def Paste(self) -> object:
        """ Paste(self: Series) -> object """
        ...

    def Points(self, Index:object) -> object:
        """ Points(self: Series, Index: object) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: Series) -> object """
        ...

    def Trendlines(self, Index:object) -> object:
        """ Trendlines(self: Series, Index: object) -> object """
        ...

    def _ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object) -> object:
        """ _ApplyDataLabels(self: Series, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object) -> object """
        ...


class SeriesCollection(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SeriesCollection) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SeriesCollection) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SeriesCollection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SeriesCollection) -> object """
        ...


    def Add(self, Source:object, Rowcol:XlRowCol, SeriesLabels:object, CategoryLabels:object, Replace:object) -> Series:
        """ Add(self: SeriesCollection, Source: object, Rowcol: XlRowCol, SeriesLabels: object, CategoryLabels: object, Replace: object) -> Series """
        ...

    def Extend(self, Source:object, Rowcol:object, CategoryLabels:object) -> object:
        """ Extend(self: SeriesCollection, Source: object, Rowcol: object, CategoryLabels: object) -> object """
        ...

    def Item(self, Index:object) -> Series:
        """ Item(self: SeriesCollection, Index: object) -> Series """
        ...

    def NewSeries(self) -> Series:
        """ NewSeries(self: SeriesCollection) -> Series """
        ...

    def Paste(self, Rowcol:XlRowCol, SeriesLabels:object, CategoryLabels:object, Replace:object, NewSeries:object) -> object:
        """ Paste(self: SeriesCollection, Rowcol: XlRowCol, SeriesLabels: object, CategoryLabels: object, Replace: object, NewSeries: object) -> object """
        ...

    def _Default(self, Index:object) -> Series:
        """ _Default(self: SeriesCollection, Index: object) -> Series """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class SeriesLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SeriesLines) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: SeriesLines) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SeriesLines) -> XlCreator """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: SeriesLines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SeriesLines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SeriesLines) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: SeriesLines) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: SeriesLines) -> object """
        ...


class ServerViewableItems(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ServerViewableItems) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ServerViewableItems) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ServerViewableItems) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ServerViewableItems) -> object """
        ...


    def Add(self, Obj:object) -> object:
        """ Add(self: ServerViewableItems, Obj: object) -> object """
        ...

    def Delete(self, Index:object): # -> 
        """ Delete(self: ServerViewableItems, Index: object) """
        ...

    def DeleteAll(self): # -> 
        """ DeleteAll(self: ServerViewableItems) """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: ServerViewableItems, Index: object) -> object """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ShadowFormat(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Blur(self) -> Single:
        """
        Get: Blur(self: ShadowFormat) -> Single
        Set: Blur(self: ShadowFormat) = value
        """
        ...

    @property
    def ForeColor(self) -> ColorFormat:
        """
        Get: ForeColor(self: ShadowFormat) -> ColorFormat
        Set: ForeColor(self: ShadowFormat) = value
        """
        ...

    @property
    def Obscured(self): # -> MsoTriState
        """
        Get: Obscured(self: ShadowFormat) -> MsoTriState
        Set: Obscured(self: ShadowFormat) = value
        """
        ...

    @property
    def OffsetX(self) -> Single:
        """
        Get: OffsetX(self: ShadowFormat) -> Single
        Set: OffsetX(self: ShadowFormat) = value
        """
        ...

    @property
    def OffsetY(self) -> Single:
        """
        Get: OffsetY(self: ShadowFormat) -> Single
        Set: OffsetY(self: ShadowFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ShadowFormat) -> object """
        ...

    @property
    def RotateWithShape(self): # -> MsoTriState
        """
        Get: RotateWithShape(self: ShadowFormat) -> MsoTriState
        Set: RotateWithShape(self: ShadowFormat) = value
        """
        ...

    @property
    def Size(self) -> Single:
        """
        Get: Size(self: ShadowFormat) -> Single
        Set: Size(self: ShadowFormat) = value
        """
        ...

    @property
    def Style(self): # -> MsoShadowStyle
        """
        Get: Style(self: ShadowFormat) -> MsoShadowStyle
        Set: Style(self: ShadowFormat) = value
        """
        ...

    @property
    def Transparency(self) -> Single:
        """
        Get: Transparency(self: ShadowFormat) -> Single
        Set: Transparency(self: ShadowFormat) = value
        """
        ...

    @property
    def Type(self): # -> MsoShadowType
        """
        Get: Type(self: ShadowFormat) -> MsoShadowType
        Set: Type(self: ShadowFormat) = value
        """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: ShadowFormat) -> MsoTriState
        Set: Visible(self: ShadowFormat) = value
        """
        ...


    def IncrementOffsetX(self, Increment:Single): # -> 
        """ IncrementOffsetX(self: ShadowFormat, Increment: Single) """
        ...

    def IncrementOffsetY(self, Increment:Single): # -> 
        """ IncrementOffsetY(self: ShadowFormat, Increment: Single) """
        ...


class Shape: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Adjustments(self) -> Adjustments:
        """ Get: Adjustments(self: Shape) -> Adjustments """
        ...

    @property
    def AlternativeText(self) -> str:
        """
        Get: AlternativeText(self: Shape) -> str
        Set: AlternativeText(self: Shape) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Shape) -> Application """
        ...

    @property
    def AutoShapeType(self): # -> MsoAutoShapeType
        """
        Get: AutoShapeType(self: Shape) -> MsoAutoShapeType
        Set: AutoShapeType(self: Shape) = value
        """
        ...

    @property
    def BackgroundStyle(self): # -> MsoBackgroundStyleIndex
        """
        Get: BackgroundStyle(self: Shape) -> MsoBackgroundStyleIndex
        Set: BackgroundStyle(self: Shape) = value
        """
        ...

    @property
    def BlackWhiteMode(self): # -> MsoBlackWhiteMode
        """
        Get: BlackWhiteMode(self: Shape) -> MsoBlackWhiteMode
        Set: BlackWhiteMode(self: Shape) = value
        """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: Shape) -> Range """
        ...

    @property
    def Callout(self) -> CalloutFormat:
        """ Get: Callout(self: Shape) -> CalloutFormat """
        ...

    @property
    def CanvasItems(self) -> CanvasShapes:
        """ Get: CanvasItems(self: Shape) -> CanvasShapes """
        ...

    @property
    def Chart(self) -> Chart:
        """ Get: Chart(self: Shape) -> Chart """
        ...

    @property
    def Child(self): # -> MsoTriState
        """ Get: Child(self: Shape) -> MsoTriState """
        ...

    @property
    def ConnectionSiteCount(self) -> int:
        """ Get: ConnectionSiteCount(self: Shape) -> int """
        ...

    @property
    def Connector(self): # -> MsoTriState
        """ Get: Connector(self: Shape) -> MsoTriState """
        ...

    @property
    def ConnectorFormat(self) -> ConnectorFormat:
        """ Get: ConnectorFormat(self: Shape) -> ConnectorFormat """
        ...

    @property
    def ControlFormat(self) -> ControlFormat:
        """ Get: ControlFormat(self: Shape) -> ControlFormat """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Shape) -> XlCreator """
        ...

    @property
    def Diagram(self) -> Diagram:
        """ Get: Diagram(self: Shape) -> Diagram """
        ...

    @property
    def DiagramNode(self) -> DiagramNode:
        """ Get: DiagramNode(self: Shape) -> DiagramNode """
        ...

    @property
    def DrawingObject(self) -> object:
        """ Get: DrawingObject(self: Shape) -> object """
        ...

    @property
    def Fill(self) -> FillFormat:
        """ Get: Fill(self: Shape) -> FillFormat """
        ...

    @property
    def FormControlType(self) -> XlFormControl:
        """ Get: FormControlType(self: Shape) -> XlFormControl """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """ Get: Glow(self: Shape) -> GlowFormat """
        ...

    @property
    def GroupItems(self) -> GroupShapes:
        """ Get: GroupItems(self: Shape) -> GroupShapes """
        ...

    @property
    def HasChart(self): # -> MsoTriState
        """ Get: HasChart(self: Shape) -> MsoTriState """
        ...

    @property
    def HasDiagram(self): # -> MsoTriState
        """ Get: HasDiagram(self: Shape) -> MsoTriState """
        ...

    @property
    def HasDiagramNode(self): # -> MsoTriState
        """ Get: HasDiagramNode(self: Shape) -> MsoTriState """
        ...

    @property
    def HasSmartArt(self): # -> MsoTriState
        """ Get: HasSmartArt(self: Shape) -> MsoTriState """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: Shape) -> Single
        Set: Height(self: Shape) = value
        """
        ...

    @property
    def HorizontalFlip(self): # -> MsoTriState
        """ Get: HorizontalFlip(self: Shape) -> MsoTriState """
        ...

    @property
    def Hyperlink(self) -> Hyperlink:
        """ Get: Hyperlink(self: Shape) -> Hyperlink """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Shape) -> int """
        ...

    @property
    def Left(self) -> Single:
        """
        Get: Left(self: Shape) -> Single
        Set: Left(self: Shape) = value
        """
        ...

    @property
    def Line(self) -> LineFormat:
        """ Get: Line(self: Shape) -> LineFormat """
        ...

    @property
    def LinkFormat(self) -> LinkFormat:
        """ Get: LinkFormat(self: Shape) -> LinkFormat """
        ...

    @property
    def LockAspectRatio(self): # -> MsoTriState
        """
        Get: LockAspectRatio(self: Shape) -> MsoTriState
        Set: LockAspectRatio(self: Shape) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Shape) -> bool
        Set: Locked(self: Shape) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Shape) -> str
        Set: Name(self: Shape) = value
        """
        ...

    @property
    def Nodes(self) -> ShapeNodes:
        """ Get: Nodes(self: Shape) -> ShapeNodes """
        ...

    @property
    def OLEFormat(self) -> OLEFormat:
        """ Get: OLEFormat(self: Shape) -> OLEFormat """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Shape) -> str
        Set: OnAction(self: Shape) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Shape) -> object """
        ...

    @property
    def ParentGroup(self) -> Shape:
        """ Get: ParentGroup(self: Shape) -> Shape """
        ...

    @property
    def PictureFormat(self) -> PictureFormat:
        """ Get: PictureFormat(self: Shape) -> PictureFormat """
        ...

    @property
    def Placement(self) -> XlPlacement:
        """
        Get: Placement(self: Shape) -> XlPlacement
        Set: Placement(self: Shape) = value
        """
        ...

    @property
    def Reflection(self) -> ReflectionFormat:
        """ Get: Reflection(self: Shape) -> ReflectionFormat """
        ...

    @property
    def Rotation(self) -> Single:
        """
        Get: Rotation(self: Shape) -> Single
        Set: Rotation(self: Shape) = value
        """
        ...

    @property
    def Script(self): # -> Script
        """ Get: Script(self: Shape) -> Script """
        ...

    @property
    def Shadow(self) -> ShadowFormat:
        """ Get: Shadow(self: Shape) -> ShadowFormat """
        ...

    @property
    def ShapeStyle(self): # -> MsoShapeStyleIndex
        """
        Get: ShapeStyle(self: Shape) -> MsoShapeStyleIndex
        Set: ShapeStyle(self: Shape) = value
        """
        ...

    @property
    def SmartArt(self): # -> SmartArt
        """ Get: SmartArt(self: Shape) -> SmartArt """
        ...

    @property
    def SoftEdge(self) -> SoftEdgeFormat:
        """ Get: SoftEdge(self: Shape) -> SoftEdgeFormat """
        ...

    @property
    def TextEffect(self) -> TextEffectFormat:
        """ Get: TextEffect(self: Shape) -> TextEffectFormat """
        ...

    @property
    def TextFrame(self) -> TextFrame:
        """ Get: TextFrame(self: Shape) -> TextFrame """
        ...

    @property
    def TextFrame2(self) -> TextFrame2:
        """ Get: TextFrame2(self: Shape) -> TextFrame2 """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """ Get: ThreeD(self: Shape) -> ThreeDFormat """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: Shape) -> str
        Set: Title(self: Shape) = value
        """
        ...

    @property
    def Top(self) -> Single:
        """
        Get: Top(self: Shape) -> Single
        Set: Top(self: Shape) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: Shape) -> Range """
        ...

    @property
    def Type(self): # -> MsoShapeType
        """ Get: Type(self: Shape) -> MsoShapeType """
        ...

    @property
    def VerticalFlip(self): # -> MsoTriState
        """ Get: VerticalFlip(self: Shape) -> MsoTriState """
        ...

    @property
    def Vertices(self) -> object:
        """ Get: Vertices(self: Shape) -> object """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: Shape) -> MsoTriState
        Set: Visible(self: Shape) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: Shape) -> Single
        Set: Width(self: Shape) = value
        """
        ...

    @property
    def ZOrderPosition(self) -> int:
        """ Get: ZOrderPosition(self: Shape) -> int """
        ...


    def Apply(self): # -> 
        """ Apply(self: Shape) """
        ...

    def CanvasCropBottom(self, Increment:Single): # -> 
        """ CanvasCropBottom(self: Shape, Increment: Single) """
        ...

    def CanvasCropLeft(self, Increment:Single): # -> 
        """ CanvasCropLeft(self: Shape, Increment: Single) """
        ...

    def CanvasCropRight(self, Increment:Single): # -> 
        """ CanvasCropRight(self: Shape, Increment: Single) """
        ...

    def CanvasCropTop(self, Increment:Single): # -> 
        """ CanvasCropTop(self: Shape, Increment: Single) """
        ...

    def Copy(self): # -> 
        """ Copy(self: Shape) """
        ...

    def CopyPicture(self, Appearance:object, Format:object): # -> 
        """ CopyPicture(self: Shape, Appearance: object, Format: object) """
        ...

    def Cut(self): # -> 
        """ Cut(self: Shape) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Shape) """
        ...

    def Duplicate(self) -> Shape:
        """ Duplicate(self: Shape) -> Shape """
        ...

    def Flip(self, FlipCmd): # ->  # Not found arg types: {'FlipCmd': 'MsoFlipCmd'}
        """ Flip(self: Shape, FlipCmd: MsoFlipCmd) """
        ...

    def IncrementLeft(self, Increment:Single): # -> 
        """ IncrementLeft(self: Shape, Increment: Single) """
        ...

    def IncrementRotation(self, Increment:Single): # -> 
        """ IncrementRotation(self: Shape, Increment: Single) """
        ...

    def IncrementTop(self, Increment:Single): # -> 
        """ IncrementTop(self: Shape, Increment: Single) """
        ...

    def PickUp(self): # -> 
        """ PickUp(self: Shape) """
        ...

    def RerouteConnections(self): # -> 
        """ RerouteConnections(self: Shape) """
        ...

    def ScaleHeight(self, Factor:Single, RelativeToOriginalSize, Scale:object): # ->  # Not found arg types: {'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleHeight(self: Shape, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        ...

    def ScaleWidth(self, Factor:Single, RelativeToOriginalSize, Scale:object): # ->  # Not found arg types: {'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleWidth(self: Shape, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: Shape, Replace: object) """
        ...

    def SetShapesDefaultProperties(self): # -> 
        """ SetShapesDefaultProperties(self: Shape) """
        ...

    def Ungroup(self) -> ShapeRange:
        """ Ungroup(self: Shape) -> ShapeRange """
        ...

    def ZOrder(self, ZOrderCmd): # ->  # Not found arg types: {'ZOrderCmd': 'MsoZOrderCmd'}
        """ ZOrder(self: Shape, ZOrderCmd: MsoZOrderCmd) """
        ...


class ShapeNode(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def EditingType(self): # -> MsoEditingType
        """ Get: EditingType(self: ShapeNode) -> MsoEditingType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ShapeNode) -> object """
        ...

    @property
    def Points(self) -> object:
        """ Get: Points(self: ShapeNode) -> object """
        ...

    @property
    def SegmentType(self): # -> MsoSegmentType
        """ Get: SegmentType(self: ShapeNode) -> MsoSegmentType """
        ...



class ShapeNodes(IEnumerable, _IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: ShapeNodes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ShapeNodes) -> object """
        ...


    def Delete(self, Index:int): # -> 
        """ Delete(self: ShapeNodes, Index: int) """
        ...

    def Insert(self, Index:int, SegmentType, EditingType, X1:Single, Y1:Single, X2:Single, Y2:Single, X3:Single, Y3:Single): # ->  # Not found arg types: {'EditingType': 'MsoEditingType', 'SegmentType': 'MsoSegmentType'}
        """ Insert(self: ShapeNodes, Index: int, SegmentType: MsoSegmentType, EditingType: MsoEditingType, X1: Single, Y1: Single, X2: Single, Y2: Single, X3: Single, Y3: Single) """
        ...

    def Item(self, Index:object) -> ShapeNode:
        """ Item(self: ShapeNodes, Index: object) -> ShapeNode """
        ...

    def SetEditingType(self, Index:int, EditingType): # ->  # Not found arg types: {'EditingType': 'MsoEditingType'}
        """ SetEditingType(self: ShapeNodes, Index: int, EditingType: MsoEditingType) """
        ...

    def SetPosition(self, Index:int, X1:Single, Y1:Single): # -> 
        """ SetPosition(self: ShapeNodes, Index: int, X1: Single, Y1: Single) """
        ...

    def SetSegmentType(self, Index:int, SegmentType): # ->  # Not found arg types: {'SegmentType': 'MsoSegmentType'}
        """ SetSegmentType(self: ShapeNodes, Index: int, SegmentType: MsoSegmentType) """
        ...


class ShapeRange(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Adjustments(self) -> Adjustments:
        """ Get: Adjustments(self: ShapeRange) -> Adjustments """
        ...

    @property
    def AlternativeText(self) -> str:
        """
        Get: AlternativeText(self: ShapeRange) -> str
        Set: AlternativeText(self: ShapeRange) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ShapeRange) -> Application """
        ...

    @property
    def AutoShapeType(self): # -> MsoAutoShapeType
        """
        Get: AutoShapeType(self: ShapeRange) -> MsoAutoShapeType
        Set: AutoShapeType(self: ShapeRange) = value
        """
        ...

    @property
    def BackgroundStyle(self): # -> MsoBackgroundStyleIndex
        """
        Get: BackgroundStyle(self: ShapeRange) -> MsoBackgroundStyleIndex
        Set: BackgroundStyle(self: ShapeRange) = value
        """
        ...

    @property
    def BlackWhiteMode(self): # -> MsoBlackWhiteMode
        """
        Get: BlackWhiteMode(self: ShapeRange) -> MsoBlackWhiteMode
        Set: BlackWhiteMode(self: ShapeRange) = value
        """
        ...

    @property
    def Callout(self) -> CalloutFormat:
        """ Get: Callout(self: ShapeRange) -> CalloutFormat """
        ...

    @property
    def CanvasItems(self) -> CanvasShapes:
        """ Get: CanvasItems(self: ShapeRange) -> CanvasShapes """
        ...

    @property
    def Chart(self) -> Chart:
        """ Get: Chart(self: ShapeRange) -> Chart """
        ...

    @property
    def Child(self): # -> MsoTriState
        """ Get: Child(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def ConnectionSiteCount(self) -> int:
        """ Get: ConnectionSiteCount(self: ShapeRange) -> int """
        ...

    @property
    def Connector(self): # -> MsoTriState
        """ Get: Connector(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def ConnectorFormat(self) -> ConnectorFormat:
        """ Get: ConnectorFormat(self: ShapeRange) -> ConnectorFormat """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ShapeRange) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ShapeRange) -> XlCreator """
        ...

    @property
    def Diagram(self) -> Diagram:
        """ Get: Diagram(self: ShapeRange) -> Diagram """
        ...

    @property
    def DiagramNode(self) -> DiagramNode:
        """ Get: DiagramNode(self: ShapeRange) -> DiagramNode """
        ...

    @property
    def Fill(self) -> FillFormat:
        """ Get: Fill(self: ShapeRange) -> FillFormat """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """ Get: Glow(self: ShapeRange) -> GlowFormat """
        ...

    @property
    def GroupItems(self) -> GroupShapes:
        """ Get: GroupItems(self: ShapeRange) -> GroupShapes """
        ...

    @property
    def HasChart(self): # -> MsoTriState
        """ Get: HasChart(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def HasDiagram(self): # -> MsoTriState
        """ Get: HasDiagram(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def HasDiagramNode(self): # -> MsoTriState
        """ Get: HasDiagramNode(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: ShapeRange) -> Single
        Set: Height(self: ShapeRange) = value
        """
        ...

    @property
    def HorizontalFlip(self): # -> MsoTriState
        """ Get: HorizontalFlip(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ShapeRange) -> int """
        ...

    @property
    def Left(self) -> Single:
        """
        Get: Left(self: ShapeRange) -> Single
        Set: Left(self: ShapeRange) = value
        """
        ...

    @property
    def Line(self) -> LineFormat:
        """ Get: Line(self: ShapeRange) -> LineFormat """
        ...

    @property
    def LockAspectRatio(self): # -> MsoTriState
        """
        Get: LockAspectRatio(self: ShapeRange) -> MsoTriState
        Set: LockAspectRatio(self: ShapeRange) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ShapeRange) -> str
        Set: Name(self: ShapeRange) = value
        """
        ...

    @property
    def Nodes(self) -> ShapeNodes:
        """ Get: Nodes(self: ShapeRange) -> ShapeNodes """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ShapeRange) -> object """
        ...

    @property
    def ParentGroup(self) -> Shape:
        """ Get: ParentGroup(self: ShapeRange) -> Shape """
        ...

    @property
    def PictureFormat(self) -> PictureFormat:
        """ Get: PictureFormat(self: ShapeRange) -> PictureFormat """
        ...

    @property
    def Reflection(self) -> ReflectionFormat:
        """ Get: Reflection(self: ShapeRange) -> ReflectionFormat """
        ...

    @property
    def Rotation(self) -> Single:
        """
        Get: Rotation(self: ShapeRange) -> Single
        Set: Rotation(self: ShapeRange) = value
        """
        ...

    @property
    def Shadow(self) -> ShadowFormat:
        """ Get: Shadow(self: ShapeRange) -> ShadowFormat """
        ...

    @property
    def ShapeStyle(self): # -> MsoShapeStyleIndex
        """
        Get: ShapeStyle(self: ShapeRange) -> MsoShapeStyleIndex
        Set: ShapeStyle(self: ShapeRange) = value
        """
        ...

    @property
    def SoftEdge(self) -> SoftEdgeFormat:
        """ Get: SoftEdge(self: ShapeRange) -> SoftEdgeFormat """
        ...

    @property
    def TextEffect(self) -> TextEffectFormat:
        """ Get: TextEffect(self: ShapeRange) -> TextEffectFormat """
        ...

    @property
    def TextFrame(self) -> TextFrame:
        """ Get: TextFrame(self: ShapeRange) -> TextFrame """
        ...

    @property
    def TextFrame2(self) -> TextFrame2:
        """ Get: TextFrame2(self: ShapeRange) -> TextFrame2 """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """ Get: ThreeD(self: ShapeRange) -> ThreeDFormat """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: ShapeRange) -> str
        Set: Title(self: ShapeRange) = value
        """
        ...

    @property
    def Top(self) -> Single:
        """
        Get: Top(self: ShapeRange) -> Single
        Set: Top(self: ShapeRange) = value
        """
        ...

    @property
    def Type(self): # -> MsoShapeType
        """ Get: Type(self: ShapeRange) -> MsoShapeType """
        ...

    @property
    def VerticalFlip(self): # -> MsoTriState
        """ Get: VerticalFlip(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def Vertices(self) -> object:
        """ Get: Vertices(self: ShapeRange) -> object """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: ShapeRange) -> MsoTriState
        Set: Visible(self: ShapeRange) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: ShapeRange) -> Single
        Set: Width(self: ShapeRange) = value
        """
        ...

    @property
    def ZOrderPosition(self) -> int:
        """ Get: ZOrderPosition(self: ShapeRange) -> int """
        ...


    def Align(self, AlignCmd, RelativeTo): # ->  # Not found arg types: {'RelativeTo': 'MsoTriState', 'AlignCmd': 'MsoAlignCmd'}
        """ Align(self: ShapeRange, AlignCmd: MsoAlignCmd, RelativeTo: MsoTriState) """
        ...

    def Apply(self): # -> 
        """ Apply(self: ShapeRange) """
        ...

    def CanvasCropBottom(self, Increment:Single): # -> 
        """ CanvasCropBottom(self: ShapeRange, Increment: Single) """
        ...

    def CanvasCropLeft(self, Increment:Single): # -> 
        """ CanvasCropLeft(self: ShapeRange, Increment: Single) """
        ...

    def CanvasCropRight(self, Increment:Single): # -> 
        """ CanvasCropRight(self: ShapeRange, Increment: Single) """
        ...

    def CanvasCropTop(self, Increment:Single): # -> 
        """ CanvasCropTop(self: ShapeRange, Increment: Single) """
        ...

    def Delete(self): # -> 
        """ Delete(self: ShapeRange) """
        ...

    def Distribute(self, DistributeCmd, RelativeTo): # ->  # Not found arg types: {'DistributeCmd': 'MsoDistributeCmd', 'RelativeTo': 'MsoTriState'}
        """ Distribute(self: ShapeRange, DistributeCmd: MsoDistributeCmd, RelativeTo: MsoTriState) """
        ...

    def Duplicate(self) -> ShapeRange:
        """ Duplicate(self: ShapeRange) -> ShapeRange """
        ...

    def Flip(self, FlipCmd): # ->  # Not found arg types: {'FlipCmd': 'MsoFlipCmd'}
        """ Flip(self: ShapeRange, FlipCmd: MsoFlipCmd) """
        ...

    def Group(self) -> Shape:
        """ Group(self: ShapeRange) -> Shape """
        ...

    def IncrementLeft(self, Increment:Single): # -> 
        """ IncrementLeft(self: ShapeRange, Increment: Single) """
        ...

    def IncrementRotation(self, Increment:Single): # -> 
        """ IncrementRotation(self: ShapeRange, Increment: Single) """
        ...

    def IncrementTop(self, Increment:Single): # -> 
        """ IncrementTop(self: ShapeRange, Increment: Single) """
        ...

    def Item(self, Index:object) -> Shape:
        """ Item(self: ShapeRange, Index: object) -> Shape """
        ...

    def PickUp(self): # -> 
        """ PickUp(self: ShapeRange) """
        ...

    def Regroup(self) -> Shape:
        """ Regroup(self: ShapeRange) -> Shape """
        ...

    def RerouteConnections(self): # -> 
        """ RerouteConnections(self: ShapeRange) """
        ...

    def ScaleHeight(self, Factor:Single, RelativeToOriginalSize, Scale:object): # ->  # Not found arg types: {'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleHeight(self: ShapeRange, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        ...

    def ScaleWidth(self, Factor:Single, RelativeToOriginalSize, Scale:object): # ->  # Not found arg types: {'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleWidth(self: ShapeRange, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: ShapeRange, Replace: object) """
        ...

    def SetShapesDefaultProperties(self): # -> 
        """ SetShapesDefaultProperties(self: ShapeRange) """
        ...

    def Ungroup(self) -> ShapeRange:
        """ Ungroup(self: ShapeRange) -> ShapeRange """
        ...

    def ZOrder(self, ZOrderCmd): # ->  # Not found arg types: {'ZOrderCmd': 'MsoZOrderCmd'}
        """ ZOrder(self: ShapeRange, ZOrderCmd: MsoZOrderCmd) """
        ...

    def _Default(self, Index:object) -> Shape:
        """ _Default(self: ShapeRange, Index: object) -> Shape """
        ...


class Shapes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Shapes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Shapes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Shapes) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Shapes) -> object """
        ...


    def AddCallout(self, Type, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Type': 'MsoCalloutType'}
        """ AddCallout(self: Shapes, Type: MsoCalloutType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddCanvas(self, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape:
        """ AddCanvas(self: Shapes, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddChart(self, XlChartType:object, Left:object, Top:object, Width:object, Height:object) -> Shape:
        """ AddChart(self: Shapes, XlChartType: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        ...

    def AddChart2(self, Style:object, XlChartType:object, Left:object, Top:object, Width:object, Height:object, NewLayout:object) -> Shape:
        """ AddChart2(self: Shapes, Style: object, XlChartType: object, Left: object, Top: object, Width: object, Height: object, NewLayout: object) -> Shape """
        ...

    def AddConnector(self, Type, BeginX:Single, BeginY:Single, EndX:Single, EndY:Single) -> Shape: # Not found arg types: {'Type': 'MsoConnectorType'}
        """ AddConnector(self: Shapes, Type: MsoConnectorType, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single) -> Shape """
        ...

    def AddCurve(self, SafeArrayOfPoints:object) -> Shape:
        """ AddCurve(self: Shapes, SafeArrayOfPoints: object) -> Shape """
        ...

    def AddDiagram(self, Type, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Type': 'MsoDiagramType'}
        """ AddDiagram(self: Shapes, Type: MsoDiagramType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddFormControl(self, Type:XlFormControl, Left:int, Top:int, Width:int, Height:int) -> Shape:
        """ AddFormControl(self: Shapes, Type: XlFormControl, Left: int, Top: int, Width: int, Height: int) -> Shape """
        ...

    def AddLabel(self, Orientation, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Orientation': 'MsoTextOrientation'}
        """ AddLabel(self: Shapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddLine(self, BeginX:Single, BeginY:Single, EndX:Single, EndY:Single) -> Shape:
        """ AddLine(self: Shapes, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single) -> Shape """
        ...

    def AddOLEObject(self, ClassType:object, Filename:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object, Left:object, Top:object, Width:object, Height:object) -> Shape:
        """ AddOLEObject(self: Shapes, ClassType: object, Filename: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, Left: object, Top: object, Width: object, Height: object) -> Shape """
        ...

    def AddPicture(self, Filename:str, LinkToFile, SaveWithDocument, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'LinkToFile': 'MsoTriState', 'SaveWithDocument': 'MsoTriState'}
        """ AddPicture(self: Shapes, Filename: str, LinkToFile: MsoTriState, SaveWithDocument: MsoTriState, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddPicture2(self, Filename:str, LinkToFile, SaveWithDocument, Left:Single, Top:Single, Width:Single, Height:Single, Compress) -> Shape: # Not found arg types: {'LinkToFile': 'MsoTriState', 'Compress': 'MsoPictureCompress', 'SaveWithDocument': 'MsoTriState'}
        """ AddPicture2(self: Shapes, Filename: str, LinkToFile: MsoTriState, SaveWithDocument: MsoTriState, Left: Single, Top: Single, Width: Single, Height: Single, Compress: MsoPictureCompress) -> Shape """
        ...

    def AddPolyline(self, SafeArrayOfPoints:object) -> Shape:
        """ AddPolyline(self: Shapes, SafeArrayOfPoints: object) -> Shape """
        ...

    def AddShape(self, Type, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Type': 'MsoAutoShapeType'}
        """ AddShape(self: Shapes, Type: MsoAutoShapeType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddSmartArt(self, Layout, Left:object, Top:object, Width:object, Height:object) -> Shape: # Not found arg types: {'Layout': 'SmartArtLayout'}
        """ AddSmartArt(self: Shapes, Layout: SmartArtLayout, Left: object, Top: object, Width: object, Height: object) -> Shape """
        ...

    def AddTextbox(self, Orientation, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Orientation': 'MsoTextOrientation'}
        """ AddTextbox(self: Shapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddTextEffect(self, PresetTextEffect, Text:str, FontName:str, FontSize:Single, FontBold, FontItalic, Left:Single, Top:Single) -> Shape: # Not found arg types: {'FontItalic': 'MsoTriState', 'FontBold': 'MsoTriState', 'PresetTextEffect': 'MsoPresetTextEffect'}
        """ AddTextEffect(self: Shapes, PresetTextEffect: MsoPresetTextEffect, Text: str, FontName: str, FontSize: Single, FontBold: MsoTriState, FontItalic: MsoTriState, Left: Single, Top: Single) -> Shape """
        ...

    def BuildFreeform(self, EditingType, X1:Single, Y1:Single) -> FreeformBuilder: # Not found arg types: {'EditingType': 'MsoEditingType'}
        """ BuildFreeform(self: Shapes, EditingType: MsoEditingType, X1: Single, Y1: Single) -> FreeformBuilder """
        ...

    def Item(self, Index:object) -> Shape:
        """ Item(self: Shapes, Index: object) -> Shape """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: Shapes) """
        ...

    def _Default(self, Index:object) -> Shape:
        """ _Default(self: Shapes, Index: object) -> Shape """
        ...


class Sheets(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Sheets) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Sheets) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Sheets) -> XlCreator """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: Sheets) -> HPageBreaks """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Sheets) -> object """
        ...

    @property
    def Visible(self) -> object:
        """
        Get: Visible(self: Sheets) -> object
        Set: Visible(self: Sheets) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: Sheets) -> VPageBreaks """
        ...


    def Add(self, Before:object, After:object, Count:object, Type:object) -> object:
        """ Add(self: Sheets, Before: object, After: object, Count: object, Type: object) -> object """
        ...

    def Add2(self, Before:object, After:object, Count:object, NewLayout:object) -> object:
        """ Add2(self: Sheets, Before: object, After: object, Count: object, NewLayout: object) -> object """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: Sheets, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Sheets) """
        ...

    def FillAcrossSheets(self, Range:Range, Type:XlFillWith): # -> 
        """ FillAcrossSheets(self: Sheets, Range: Range, Type: XlFillWith) """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: Sheets, Before: object, After: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: Sheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object, IgnorePrintAreas:object): # -> 
        """ PrintOutEx(self: Sheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: Sheets, EnableChanges: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: Sheets, Replace: object) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: Sheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SheetViews(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SheetViews) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SheetViews) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SheetViews) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SheetViews) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Slicer: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveItem(self) -> SlicerItem:
        """ Get: ActiveItem(self: Slicer) -> SlicerItem """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Slicer) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Slicer) -> str
        Set: Caption(self: Slicer) = value
        """
        ...

    @property
    def ColumnWidth(self) -> float:
        """
        Get: ColumnWidth(self: Slicer) -> float
        Set: ColumnWidth(self: Slicer) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Slicer) -> XlCreator """
        ...

    @property
    def DisableMoveResizeUI(self) -> bool:
        """
        Get: DisableMoveResizeUI(self: Slicer) -> bool
        Set: DisableMoveResizeUI(self: Slicer) = value
        """
        ...

    @property
    def DisplayHeader(self) -> bool:
        """
        Get: DisplayHeader(self: Slicer) -> bool
        Set: DisplayHeader(self: Slicer) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Slicer) -> float
        Set: Height(self: Slicer) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Slicer) -> float
        Set: Left(self: Slicer) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Slicer) -> bool
        Set: Locked(self: Slicer) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Slicer) -> str
        Set: Name(self: Slicer) = value
        """
        ...

    @property
    def NumberOfColumns(self) -> int:
        """
        Get: NumberOfColumns(self: Slicer) -> int
        Set: NumberOfColumns(self: Slicer) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Slicer) -> object """
        ...

    @property
    def RowHeight(self) -> float:
        """
        Get: RowHeight(self: Slicer) -> float
        Set: RowHeight(self: Slicer) = value
        """
        ...

    @property
    def Shape(self) -> Shape:
        """ Get: Shape(self: Slicer) -> Shape """
        ...

    @property
    def SlicerCache(self) -> SlicerCache:
        """ Get: SlicerCache(self: Slicer) -> SlicerCache """
        ...

    @property
    def SlicerCacheLevel(self) -> SlicerCacheLevel:
        """ Get: SlicerCacheLevel(self: Slicer) -> SlicerCacheLevel """
        ...

    @property
    def SlicerCacheType(self) -> XlSlicerCacheType:
        """ Get: SlicerCacheType(self: Slicer) -> XlSlicerCacheType """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: Slicer) -> object
        Set: Style(self: Slicer) = value
        """
        ...

    @property
    def TimelineViewState(self) -> TimelineViewState:
        """ Get: TimelineViewState(self: Slicer) -> TimelineViewState """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Slicer) -> float
        Set: Top(self: Slicer) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Slicer) -> float
        Set: Width(self: Slicer) = value
        """
        ...


    def Copy(self): # -> 
        """ Copy(self: Slicer) """
        ...

    def Cut(self): # -> 
        """ Cut(self: Slicer) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Slicer) """
        ...


class SlicerCache: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SlicerCache) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SlicerCache) -> XlCreator """
        ...

    @property
    def CrossFilterType(self) -> XlSlicerCrossFilterType:
        """
        Get: CrossFilterType(self: SlicerCache) -> XlSlicerCrossFilterType
        Set: CrossFilterType(self: SlicerCache) = value
        """
        ...

    @property
    def FilterCleared(self) -> bool:
        """ Get: FilterCleared(self: SlicerCache) -> bool """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: SlicerCache) -> int """
        ...

    @property
    def List(self) -> bool:
        """ Get: List(self: SlicerCache) -> bool """
        ...

    @property
    def ListObject(self) -> ListObject:
        """ Get: ListObject(self: SlicerCache) -> ListObject """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: SlicerCache) -> str
        Set: Name(self: SlicerCache) = value
        """
        ...

    @property
    def OLAP(self) -> bool:
        """ Get: OLAP(self: SlicerCache) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SlicerCache) -> object """
        ...

    @property
    def PivotTables(self) -> SlicerPivotTables:
        """ Get: PivotTables(self: SlicerCache) -> SlicerPivotTables """
        ...

    @property
    def RequireManualUpdate(self) -> bool:
        """
        Get: RequireManualUpdate(self: SlicerCache) -> bool
        Set: RequireManualUpdate(self: SlicerCache) = value
        """
        ...

    @property
    def ShowAllItems(self) -> bool:
        """
        Get: ShowAllItems(self: SlicerCache) -> bool
        Set: ShowAllItems(self: SlicerCache) = value
        """
        ...

    @property
    def SlicerCacheLevels(self) -> SlicerCacheLevels:
        """ Get: SlicerCacheLevels(self: SlicerCache) -> SlicerCacheLevels """
        ...

    @property
    def SlicerCacheType(self) -> XlSlicerCacheType:
        """ Get: SlicerCacheType(self: SlicerCache) -> XlSlicerCacheType """
        ...

    @property
    def SlicerItems(self) -> SlicerItems:
        """ Get: SlicerItems(self: SlicerCache) -> SlicerItems """
        ...

    @property
    def Slicers(self) -> Slicers:
        """ Get: Slicers(self: SlicerCache) -> Slicers """
        ...

    @property
    def SortItems(self) -> XlSlicerSort:
        """
        Get: SortItems(self: SlicerCache) -> XlSlicerSort
        Set: SortItems(self: SlicerCache) = value
        """
        ...

    @property
    def SortUsingCustomLists(self) -> bool:
        """
        Get: SortUsingCustomLists(self: SlicerCache) -> bool
        Set: SortUsingCustomLists(self: SlicerCache) = value
        """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: SlicerCache) -> str """
        ...

    @property
    def SourceType(self) -> XlPivotTableSourceType:
        """ Get: SourceType(self: SlicerCache) -> XlPivotTableSourceType """
        ...

    @property
    def TimelineState(self) -> TimelineState:
        """ Get: TimelineState(self: SlicerCache) -> TimelineState """
        ...

    @property
    def VisibleSlicerItems(self) -> SlicerItems:
        """ Get: VisibleSlicerItems(self: SlicerCache) -> SlicerItems """
        ...

    @property
    def VisibleSlicerItemsList(self) -> object:
        """
        Get: VisibleSlicerItemsList(self: SlicerCache) -> object
        Set: VisibleSlicerItemsList(self: SlicerCache) = value
        """
        ...

    @property
    def WorkbookConnection(self) -> WorkbookConnection:
        """ Get: WorkbookConnection(self: SlicerCache) -> WorkbookConnection """
        ...


    def ClearAllFilters(self): # -> 
        """ ClearAllFilters(self: SlicerCache) """
        ...

    def ClearDateFilter(self): # -> 
        """ ClearDateFilter(self: SlicerCache) """
        ...

    def ClearManualFilter(self): # -> 
        """ ClearManualFilter(self: SlicerCache) """
        ...

    def Delete(self): # -> 
        """ Delete(self: SlicerCache) """
        ...


class SlicerCacheLevel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SlicerCacheLevel) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SlicerCacheLevel) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SlicerCacheLevel) -> XlCreator """
        ...

    @property
    def CrossFilterType(self) -> XlSlicerCrossFilterType:
        """
        Get: CrossFilterType(self: SlicerCacheLevel) -> XlSlicerCrossFilterType
        Set: CrossFilterType(self: SlicerCacheLevel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SlicerCacheLevel) -> str """
        ...

    @property
    def Ordinal(self) -> int:
        """ Get: Ordinal(self: SlicerCacheLevel) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SlicerCacheLevel) -> object """
        ...

    @property
    def SlicerItems(self) -> SlicerItems:
        """ Get: SlicerItems(self: SlicerCacheLevel) -> SlicerItems """
        ...

    @property
    def SortItems(self) -> XlSlicerSort:
        """
        Get: SortItems(self: SlicerCacheLevel) -> XlSlicerSort
        Set: SortItems(self: SlicerCacheLevel) = value
        """
        ...

    @property
    def VisibleSlicerItemsList(self) -> object:
        """ Get: VisibleSlicerItemsList(self: SlicerCacheLevel) -> object """
        ...



class SlicerCacheLevels(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SlicerCacheLevels) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SlicerCacheLevels) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SlicerCacheLevels) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SlicerCacheLevels) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SlicerCaches(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SlicerCaches) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SlicerCaches) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SlicerCaches) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SlicerCaches) -> object """
        ...


    def Add(self, Source:object, SourceField:object, Name:object) -> SlicerCache:
        """ Add(self: SlicerCaches, Source: object, SourceField: object, Name: object) -> SlicerCache """
        ...

    def Add2(self, Source:object, SourceField:object, Name:object, SlicerCacheType:object) -> SlicerCache:
        """ Add2(self: SlicerCaches, Source: object, SourceField: object, Name: object, SlicerCacheType: object) -> SlicerCache """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SlicerItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SlicerItem) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """ Get: Caption(self: SlicerItem) -> str """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SlicerItem) -> XlCreator """
        ...

    @property
    def HasData(self) -> bool:
        """ Get: HasData(self: SlicerItem) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SlicerItem) -> str """
        ...

    @property
    def Parent(self) -> SlicerCache:
        """ Get: Parent(self: SlicerItem) -> SlicerCache """
        ...

    @property
    def Selected(self) -> bool:
        """
        Get: Selected(self: SlicerItem) -> bool
        Set: Selected(self: SlicerItem) = value
        """
        ...

    @property
    def SourceName(self) -> object:
        """ Get: SourceName(self: SlicerItem) -> object """
        ...

    @property
    def SourceNameStandard(self) -> str:
        """ Get: SourceNameStandard(self: SlicerItem) -> str """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: SlicerItem) -> str """
        ...



class SlicerItems(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SlicerItems) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SlicerItems) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SlicerItems) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SlicerItems) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SlicerPivotTables(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SlicerPivotTables) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SlicerPivotTables) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SlicerPivotTables) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SlicerPivotTables) -> object """
        ...


    def AddPivotTable(self, PivotTable:PivotTable): # -> 
        """ AddPivotTable(self: SlicerPivotTables, PivotTable: PivotTable) """
        ...

    def RemovePivotTable(self, PivotTable:object): # -> 
        """ RemovePivotTable(self: SlicerPivotTables, PivotTable: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Slicers(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Slicers) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Slicers) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Slicers) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Slicers) -> object """
        ...


    def Add(self, SlicerDestination:object, Level:object, Name:object, Caption:object, Top:object, Left:object, Width:object, Height:object) -> Slicer:
        """ Add(self: Slicers, SlicerDestination: object, Level: object, Name: object, Caption: object, Top: object, Left: object, Width: object, Height: object) -> Slicer """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTag: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTag) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SmartTag) -> XlCreator """
        ...

    @property
    def DownloadURL(self) -> str:
        """ Get: DownloadURL(self: SmartTag) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SmartTag) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTag) -> object """
        ...

    @property
    def Properties(self) -> CustomProperties:
        """ Get: Properties(self: SmartTag) -> CustomProperties """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: SmartTag) -> Range """
        ...

    @property
    def SmartTagActions(self) -> SmartTagActions:
        """ Get: SmartTagActions(self: SmartTag) -> SmartTagActions """
        ...

    @property
    def XML(self) -> str:
        """ Get: XML(self: SmartTag) -> str """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: SmartTag) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: SmartTag) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTagAction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveXControl(self) -> object:
        """ Get: ActiveXControl(self: SmartTagAction) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTagAction) -> Application """
        ...

    @property
    def CheckboxState(self) -> bool:
        """
        Get: CheckboxState(self: SmartTagAction) -> bool
        Set: CheckboxState(self: SmartTagAction) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SmartTagAction) -> XlCreator """
        ...

    @property
    def ExpandHelp(self) -> bool:
        """
        Get: ExpandHelp(self: SmartTagAction) -> bool
        Set: ExpandHelp(self: SmartTagAction) = value
        """
        ...

    @property
    def ListSelection(self) -> int:
        """
        Get: ListSelection(self: SmartTagAction) -> int
        Set: ListSelection(self: SmartTagAction) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SmartTagAction) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTagAction) -> object """
        ...

    @property
    def PresentInPane(self) -> bool:
        """ Get: PresentInPane(self: SmartTagAction) -> bool """
        ...

    @property
    def RadioGroupSelection(self) -> int:
        """
        Get: RadioGroupSelection(self: SmartTagAction) -> int
        Set: RadioGroupSelection(self: SmartTagAction) = value
        """
        ...

    @property
    def TextboxText(self) -> str:
        """
        Get: TextboxText(self: SmartTagAction) -> str
        Set: TextboxText(self: SmartTagAction) = value
        """
        ...

    @property
    def Type(self) -> XlSmartTagControlType:
        """ Get: Type(self: SmartTagAction) -> XlSmartTagControlType """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: SmartTagAction) -> str """
        ...


    def Execute(self): # -> 
        """ Execute(self: SmartTagAction) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTagActions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTagActions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SmartTagActions) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SmartTagActions) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTagActions) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTagOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTagOptions) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SmartTagOptions) -> XlCreator """
        ...

    @property
    def DisplaySmartTags(self) -> XlSmartTagDisplayMode:
        """
        Get: DisplaySmartTags(self: SmartTagOptions) -> XlSmartTagDisplayMode
        Set: DisplaySmartTags(self: SmartTagOptions) = value
        """
        ...

    @property
    def EmbedSmartTags(self) -> bool:
        """
        Get: EmbedSmartTags(self: SmartTagOptions) -> bool
        Set: EmbedSmartTags(self: SmartTagOptions) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTagOptions) -> object """
        ...



class SmartTagRecognizer: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTagRecognizer) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SmartTagRecognizer) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: SmartTagRecognizer) -> bool
        Set: Enabled(self: SmartTagRecognizer) = value
        """
        ...

    @property
    def FullName(self) -> str:
        """ Get: FullName(self: SmartTagRecognizer) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTagRecognizer) -> object """
        ...

    @property
    def progID(self) -> str:
        """ Get: progID(self: SmartTagRecognizer) -> str """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: SmartTagRecognizer) -> str """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTagRecognizers(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTagRecognizers) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SmartTagRecognizers) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SmartTagRecognizers) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTagRecognizers) -> object """
        ...

    @property
    def Recognize(self) -> bool:
        """
        Get: Recognize(self: SmartTagRecognizers) -> bool
        Set: Recognize(self: SmartTagRecognizers) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTags(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTags) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SmartTags) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SmartTags) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTags) -> object """
        ...


    def Add(self, SmartTagType:str) -> SmartTag:
        """ Add(self: SmartTags, SmartTagType: str) -> SmartTag """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Sort: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Sort) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Sort) -> XlCreator """
        ...

    @property
    def Header(self) -> XlYesNoGuess:
        """
        Get: Header(self: Sort) -> XlYesNoGuess
        Set: Header(self: Sort) = value
        """
        ...

    @property
    def MatchCase(self) -> bool:
        """
        Get: MatchCase(self: Sort) -> bool
        Set: MatchCase(self: Sort) = value
        """
        ...

    @property
    def Orientation(self) -> XlSortOrientation:
        """
        Get: Orientation(self: Sort) -> XlSortOrientation
        Set: Orientation(self: Sort) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Sort) -> object """
        ...

    @property
    def Rng(self) -> Range:
        """ Get: Rng(self: Sort) -> Range """
        ...

    @property
    def SortFields(self) -> SortFields:
        """ Get: SortFields(self: Sort) -> SortFields """
        ...

    @property
    def SortMethod(self) -> XlSortMethod:
        """
        Get: SortMethod(self: Sort) -> XlSortMethod
        Set: SortMethod(self: Sort) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: Sort) """
        ...

    def SetRange(self, Rng:Range): # -> 
        """ SetRange(self: Sort, Rng: Range) """
        ...


class SortField: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SortField) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SortField) -> XlCreator """
        ...

    @property
    def CustomOrder(self) -> object:
        """
        Get: CustomOrder(self: SortField) -> object
        Set: CustomOrder(self: SortField) = value
        """
        ...

    @property
    def DataOption(self) -> XlSortDataOption:
        """
        Get: DataOption(self: SortField) -> XlSortDataOption
        Set: DataOption(self: SortField) = value
        """
        ...

    @property
    def Key(self) -> Range:
        """ Get: Key(self: SortField) -> Range """
        ...

    @property
    def Order(self) -> XlSortOrder:
        """
        Get: Order(self: SortField) -> XlSortOrder
        Set: Order(self: SortField) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SortField) -> object """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: SortField) -> int
        Set: Priority(self: SortField) = value
        """
        ...

    @property
    def SortOn(self) -> XlSortOn:
        """
        Get: SortOn(self: SortField) -> XlSortOn
        Set: SortOn(self: SortField) = value
        """
        ...

    @property
    def SortOnValue(self) -> object:
        """ Get: SortOnValue(self: SortField) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: SortField) """
        ...

    def ModifyKey(self, Key:Range): # -> 
        """ ModifyKey(self: SortField, Key: Range) """
        ...

    def SetIcon(self, Icon:Icon): # -> 
        """ SetIcon(self: SortField, Icon: Icon) """
        ...


class SortFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SortFields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SortFields) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SortFields) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SortFields) -> object """
        ...


    def Add(self, Key:Range, SortOn:object, Order:object, CustomOrder:object, DataOption:object) -> SortField:
        """ Add(self: SortFields, Key: Range, SortOn: object, Order: object, CustomOrder: object, DataOption: object) -> SortField """
        ...

    def Clear(self): # -> 
        """ Clear(self: SortFields) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SoundNote: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SoundNote) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SoundNote) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SoundNote) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: SoundNote) -> object """
        ...

    def Import(self, Filename:str) -> object:
        """ Import(self: SoundNote, Filename: str) -> object """
        ...

    def Play(self) -> object:
        """ Play(self: SoundNote) -> object """
        ...

    def Record(self) -> object:
        """ Record(self: SoundNote) -> object """
        ...


class SparkAxes: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SparkAxes) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SparkAxes) -> XlCreator """
        ...

    @property
    def Horizontal(self) -> SparkHorizontalAxis:
        """ Get: Horizontal(self: SparkAxes) -> SparkHorizontalAxis """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SparkAxes) -> object """
        ...

    @property
    def Vertical(self) -> SparkVerticalAxis:
        """ Get: Vertical(self: SparkAxes) -> SparkVerticalAxis """
        ...



class SparkColor: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SparkColor) -> Application """
        ...

    @property
    def Color(self) -> FormatColor:
        """ Get: Color(self: SparkColor) -> FormatColor """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SparkColor) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SparkColor) -> object """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: SparkColor) -> bool
        Set: Visible(self: SparkColor) = value
        """
        ...



class SparkHorizontalAxis: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SparkHorizontalAxis) -> Application """
        ...

    @property
    def Axis(self) -> SparkColor:
        """ Get: Axis(self: SparkHorizontalAxis) -> SparkColor """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SparkHorizontalAxis) -> XlCreator """
        ...

    @property
    def IsDateAxis(self) -> bool:
        """ Get: IsDateAxis(self: SparkHorizontalAxis) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SparkHorizontalAxis) -> object """
        ...

    @property
    def RightToLeftPlotOrder(self) -> bool:
        """
        Get: RightToLeftPlotOrder(self: SparkHorizontalAxis) -> bool
        Set: RightToLeftPlotOrder(self: SparkHorizontalAxis) = value
        """
        ...



class Sparkline: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Sparkline) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Sparkline) -> XlCreator """
        ...

    @property
    def Location(self) -> Range:
        """
        Get: Location(self: Sparkline) -> Range
        Set: Location(self: Sparkline) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Sparkline) -> object """
        ...

    @property
    def SourceData(self) -> str:
        """
        Get: SourceData(self: Sparkline) -> str
        Set: SourceData(self: Sparkline) = value
        """
        ...


    def ModifyLocation(self, Range:Range): # -> 
        """ ModifyLocation(self: Sparkline, Range: Range) """
        ...

    def ModifySourceData(self, Formula:str): # -> 
        """ ModifySourceData(self: Sparkline, Formula: str) """
        ...


class SparklineGroup(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SparklineGroup) -> Application """
        ...

    @property
    def Axes(self) -> SparkAxes:
        """ Get: Axes(self: SparklineGroup) -> SparkAxes """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SparklineGroup) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SparklineGroup) -> XlCreator """
        ...

    @property
    def DateRange(self) -> str:
        """
        Get: DateRange(self: SparklineGroup) -> str
        Set: DateRange(self: SparklineGroup) = value
        """
        ...

    @property
    def DisplayBlanksAs(self) -> XlDisplayBlanksAs:
        """
        Get: DisplayBlanksAs(self: SparklineGroup) -> XlDisplayBlanksAs
        Set: DisplayBlanksAs(self: SparklineGroup) = value
        """
        ...

    @property
    def DisplayHidden(self) -> bool:
        """
        Get: DisplayHidden(self: SparklineGroup) -> bool
        Set: DisplayHidden(self: SparklineGroup) = value
        """
        ...

    @property
    def LineWeight(self) -> object:
        """
        Get: LineWeight(self: SparklineGroup) -> object
        Set: LineWeight(self: SparklineGroup) = value
        """
        ...

    @property
    def Location(self) -> Range:
        """
        Get: Location(self: SparklineGroup) -> Range
        Set: Location(self: SparklineGroup) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SparklineGroup) -> object """
        ...

    @property
    def PlotBy(self) -> XlSparklineRowCol:
        """
        Get: PlotBy(self: SparklineGroup) -> XlSparklineRowCol
        Set: PlotBy(self: SparklineGroup) = value
        """
        ...

    @property
    def Points(self) -> SparkPoints:
        """ Get: Points(self: SparklineGroup) -> SparkPoints """
        ...

    @property
    def SeriesColor(self) -> FormatColor:
        """ Get: SeriesColor(self: SparklineGroup) -> FormatColor """
        ...

    @property
    def SourceData(self) -> str:
        """
        Get: SourceData(self: SparklineGroup) -> str
        Set: SourceData(self: SparklineGroup) = value
        """
        ...

    @property
    def Type(self) -> XlSparkType:
        """
        Get: Type(self: SparklineGroup) -> XlSparkType
        Set: Type(self: SparklineGroup) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: SparklineGroup) """
        ...

    def Modify(self, Location:Range, SourceData:str): # -> 
        """ Modify(self: SparklineGroup, Location: Range, SourceData: str) """
        ...

    def ModifyDateRange(self, DateRange:str): # -> 
        """ ModifyDateRange(self: SparklineGroup, DateRange: str) """
        ...

    def ModifyLocation(self, Location:Range): # -> 
        """ ModifyLocation(self: SparklineGroup, Location: Range) """
        ...

    def ModifySourceData(self, SourceData:str): # -> 
        """ ModifySourceData(self: SparklineGroup, SourceData: str) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SparklineGroups(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SparklineGroups) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SparklineGroups) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SparklineGroups) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SparklineGroups) -> object """
        ...


    def Add(self, Type:XlSparkType, SourceData:str) -> SparklineGroup:
        """ Add(self: SparklineGroups, Type: XlSparkType, SourceData: str) -> SparklineGroup """
        ...

    def Clear(self): # -> 
        """ Clear(self: SparklineGroups) """
        ...

    def ClearGroups(self): # -> 
        """ ClearGroups(self: SparklineGroups) """
        ...

    def Group(self, Location:Range): # -> 
        """ Group(self: SparklineGroups, Location: Range) """
        ...

    def Ungroup(self): # -> 
        """ Ungroup(self: SparklineGroups) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SparkPoints: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SparkPoints) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SparkPoints) -> XlCreator """
        ...

    @property
    def Firstpoint(self) -> SparkColor:
        """ Get: Firstpoint(self: SparkPoints) -> SparkColor """
        ...

    @property
    def Highpoint(self) -> SparkColor:
        """ Get: Highpoint(self: SparkPoints) -> SparkColor """
        ...

    @property
    def Lastpoint(self) -> SparkColor:
        """ Get: Lastpoint(self: SparkPoints) -> SparkColor """
        ...

    @property
    def Lowpoint(self) -> SparkColor:
        """ Get: Lowpoint(self: SparkPoints) -> SparkColor """
        ...

    @property
    def Markers(self) -> SparkColor:
        """ Get: Markers(self: SparkPoints) -> SparkColor """
        ...

    @property
    def Negative(self) -> SparkColor:
        """ Get: Negative(self: SparkPoints) -> SparkColor """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SparkPoints) -> object """
        ...



class SparkVerticalAxis: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SparkVerticalAxis) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: SparkVerticalAxis) -> XlCreator """
        ...

    @property
    def CustomMaxScaleValue(self) -> object:
        """
        Get: CustomMaxScaleValue(self: SparkVerticalAxis) -> object
        Set: CustomMaxScaleValue(self: SparkVerticalAxis) = value
        """
        ...

    @property
    def CustomMinScaleValue(self) -> object:
        """
        Get: CustomMinScaleValue(self: SparkVerticalAxis) -> object
        Set: CustomMinScaleValue(self: SparkVerticalAxis) = value
        """
        ...

    @property
    def MaxScaleType(self) -> XlSparkScale:
        """
        Get: MaxScaleType(self: SparkVerticalAxis) -> XlSparkScale
        Set: MaxScaleType(self: SparkVerticalAxis) = value
        """
        ...

    @property
    def MinScaleType(self) -> XlSparkScale:
        """
        Get: MinScaleType(self: SparkVerticalAxis) -> XlSparkScale
        Set: MinScaleType(self: SparkVerticalAxis) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SparkVerticalAxis) -> object """
        ...



class Speech: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Direction(self) -> XlSpeakDirection:
        """
        Get: Direction(self: Speech) -> XlSpeakDirection
        Set: Direction(self: Speech) = value
        """
        ...

    @property
    def SpeakCellOnEnter(self) -> bool:
        """
        Get: SpeakCellOnEnter(self: Speech) -> bool
        Set: SpeakCellOnEnter(self: Speech) = value
        """
        ...


    def Speak(self, Text:str, SpeakAsync:object, SpeakXML:object, Purge:object): # -> 
        """ Speak(self: Speech, Text: str, SpeakAsync: object, SpeakXML: object, Purge: object) """
        ...


class SpellingOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ArabicModes(self) -> XlArabicModes:
        """
        Get: ArabicModes(self: SpellingOptions) -> XlArabicModes
        Set: ArabicModes(self: SpellingOptions) = value
        """
        ...

    @property
    def ArabicStrictAlefHamza(self) -> bool:
        """
        Get: ArabicStrictAlefHamza(self: SpellingOptions) -> bool
        Set: ArabicStrictAlefHamza(self: SpellingOptions) = value
        """
        ...

    @property
    def ArabicStrictFinalYaa(self) -> bool:
        """
        Get: ArabicStrictFinalYaa(self: SpellingOptions) -> bool
        Set: ArabicStrictFinalYaa(self: SpellingOptions) = value
        """
        ...

    @property
    def ArabicStrictTaaMarboota(self) -> bool:
        """
        Get: ArabicStrictTaaMarboota(self: SpellingOptions) -> bool
        Set: ArabicStrictTaaMarboota(self: SpellingOptions) = value
        """
        ...

    @property
    def BrazilReform(self) -> XlPortugueseReform:
        """
        Get: BrazilReform(self: SpellingOptions) -> XlPortugueseReform
        Set: BrazilReform(self: SpellingOptions) = value
        """
        ...

    @property
    def DictLang(self) -> int:
        """
        Get: DictLang(self: SpellingOptions) -> int
        Set: DictLang(self: SpellingOptions) = value
        """
        ...

    @property
    def GermanPostReform(self) -> bool:
        """
        Get: GermanPostReform(self: SpellingOptions) -> bool
        Set: GermanPostReform(self: SpellingOptions) = value
        """
        ...

    @property
    def HebrewModes(self) -> XlHebrewModes:
        """
        Get: HebrewModes(self: SpellingOptions) -> XlHebrewModes
        Set: HebrewModes(self: SpellingOptions) = value
        """
        ...

    @property
    def IgnoreCaps(self) -> bool:
        """
        Get: IgnoreCaps(self: SpellingOptions) -> bool
        Set: IgnoreCaps(self: SpellingOptions) = value
        """
        ...

    @property
    def IgnoreFileNames(self) -> bool:
        """
        Get: IgnoreFileNames(self: SpellingOptions) -> bool
        Set: IgnoreFileNames(self: SpellingOptions) = value
        """
        ...

    @property
    def IgnoreMixedDigits(self) -> bool:
        """
        Get: IgnoreMixedDigits(self: SpellingOptions) -> bool
        Set: IgnoreMixedDigits(self: SpellingOptions) = value
        """
        ...

    @property
    def KoreanCombineAux(self) -> bool:
        """
        Get: KoreanCombineAux(self: SpellingOptions) -> bool
        Set: KoreanCombineAux(self: SpellingOptions) = value
        """
        ...

    @property
    def KoreanProcessCompound(self) -> bool:
        """
        Get: KoreanProcessCompound(self: SpellingOptions) -> bool
        Set: KoreanProcessCompound(self: SpellingOptions) = value
        """
        ...

    @property
    def KoreanUseAutoChangeList(self) -> bool:
        """
        Get: KoreanUseAutoChangeList(self: SpellingOptions) -> bool
        Set: KoreanUseAutoChangeList(self: SpellingOptions) = value
        """
        ...

    @property
    def PortugalReform(self) -> XlPortugueseReform:
        """
        Get: PortugalReform(self: SpellingOptions) -> XlPortugueseReform
        Set: PortugalReform(self: SpellingOptions) = value
        """
        ...

    @property
    def RussianStrictE(self) -> bool:
        """
        Get: RussianStrictE(self: SpellingOptions) -> bool
        Set: RussianStrictE(self: SpellingOptions) = value
        """
        ...

    @property
    def SpanishModes(self) -> XlSpanishModes:
        """
        Get: SpanishModes(self: SpellingOptions) -> XlSpanishModes
        Set: SpanishModes(self: SpellingOptions) = value
        """
        ...

    @property
    def SuggestMainOnly(self) -> bool:
        """
        Get: SuggestMainOnly(self: SpellingOptions) -> bool
        Set: SuggestMainOnly(self: SpellingOptions) = value
        """
        ...

    @property
    def UserDict(self) -> str:
        """
        Get: UserDict(self: SpellingOptions) -> str
        Set: UserDict(self: SpellingOptions) = value
        """
        ...



class Spinner: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Spinner) -> Application """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: Spinner) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Spinner) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: Spinner) -> bool
        Set: Display3DShading(self: Spinner) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Spinner) -> bool
        Set: Enabled(self: Spinner) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Spinner) -> float
        Set: Height(self: Spinner) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Spinner) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Spinner) -> float
        Set: Left(self: Spinner) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: Spinner) -> str
        Set: LinkedCell(self: Spinner) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Spinner) -> bool
        Set: Locked(self: Spinner) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: Spinner) -> int
        Set: Max(self: Spinner) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: Spinner) -> int
        Set: Min(self: Spinner) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Spinner) -> str
        Set: Name(self: Spinner) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Spinner) -> str
        Set: OnAction(self: Spinner) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Spinner) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Spinner) -> object
        Set: Placement(self: Spinner) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Spinner) -> bool
        Set: PrintObject(self: Spinner) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Spinner) -> ShapeRange """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: Spinner) -> int
        Set: SmallChange(self: Spinner) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Spinner) -> float
        Set: Top(self: Spinner) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: Spinner) -> Range """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: Spinner) -> int
        Set: Value(self: Spinner) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Spinner) -> bool
        Set: Visible(self: Spinner) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Spinner) -> float
        Set: Width(self: Spinner) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Spinner) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: Spinner) -> int
        Set: _Default(self: Spinner) = value
        """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: Spinner) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Spinner) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Spinner, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Spinner) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Spinner) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Spinner) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Spinner, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Spinner) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Spinners(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Spinners) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Spinners) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Spinners) -> XlCreator """
        ...

    @property
    def Display3DShading(self) -> bool:
        """
        Get: Display3DShading(self: Spinners) -> bool
        Set: Display3DShading(self: Spinners) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Spinners) -> bool
        Set: Enabled(self: Spinners) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Spinners) -> float
        Set: Height(self: Spinners) = value
        """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Spinners) -> float
        Set: Left(self: Spinners) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: Spinners) -> str
        Set: LinkedCell(self: Spinners) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Spinners) -> bool
        Set: Locked(self: Spinners) = value
        """
        ...

    @property
    def Max(self) -> int:
        """
        Get: Max(self: Spinners) -> int
        Set: Max(self: Spinners) = value
        """
        ...

    @property
    def Min(self) -> int:
        """
        Get: Min(self: Spinners) -> int
        Set: Min(self: Spinners) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: Spinners) -> str
        Set: OnAction(self: Spinners) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Spinners) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: Spinners) -> object
        Set: Placement(self: Spinners) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: Spinners) -> bool
        Set: PrintObject(self: Spinners) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Spinners) -> ShapeRange """
        ...

    @property
    def SmallChange(self) -> int:
        """
        Get: SmallChange(self: Spinners) -> int
        Set: SmallChange(self: Spinners) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Spinners) -> float
        Set: Top(self: Spinners) = value
        """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: Spinners) -> int
        Set: Value(self: Spinners) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Spinners) -> bool
        Set: Visible(self: Spinners) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Spinners) -> float
        Set: Width(self: Spinners) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: Spinners) -> int """
        ...

    @property
    def _Default(self) -> int:
        """
        Get: _Default(self: Spinners) -> int
        Set: _Default(self: Spinners) = value
        """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> Spinner:
        """ Add(self: Spinners, Left: float, Top: float, Width: float, Height: float) -> Spinner """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: Spinners) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Spinners) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: Spinners, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: Spinners) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Spinners) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: Spinners) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: Spinners) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: Spinners, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Spinners, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: Spinners) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: Spinners) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: Spinners) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: Spinners) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: Spinners) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Style: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: Style) -> bool
        Set: AddIndent(self: Style) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Style) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: Style) -> Borders """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: Style) -> bool """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Style) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Style) -> Font """
        ...

    @property
    def FormulaHidden(self) -> bool:
        """
        Get: FormulaHidden(self: Style) -> bool
        Set: FormulaHidden(self: Style) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> XlHAlign:
        """
        Get: HorizontalAlignment(self: Style) -> XlHAlign
        Set: HorizontalAlignment(self: Style) = value
        """
        ...

    @property
    def IncludeAlignment(self) -> bool:
        """
        Get: IncludeAlignment(self: Style) -> bool
        Set: IncludeAlignment(self: Style) = value
        """
        ...

    @property
    def IncludeBorder(self) -> bool:
        """
        Get: IncludeBorder(self: Style) -> bool
        Set: IncludeBorder(self: Style) = value
        """
        ...

    @property
    def IncludeFont(self) -> bool:
        """
        Get: IncludeFont(self: Style) -> bool
        Set: IncludeFont(self: Style) = value
        """
        ...

    @property
    def IncludeNumber(self) -> bool:
        """
        Get: IncludeNumber(self: Style) -> bool
        Set: IncludeNumber(self: Style) = value
        """
        ...

    @property
    def IncludePatterns(self) -> bool:
        """
        Get: IncludePatterns(self: Style) -> bool
        Set: IncludePatterns(self: Style) = value
        """
        ...

    @property
    def IncludeProtection(self) -> bool:
        """
        Get: IncludeProtection(self: Style) -> bool
        Set: IncludeProtection(self: Style) = value
        """
        ...

    @property
    def IndentLevel(self) -> int:
        """
        Get: IndentLevel(self: Style) -> int
        Set: IndentLevel(self: Style) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Style) -> Interior """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Style) -> bool
        Set: Locked(self: Style) = value
        """
        ...

    @property
    def MergeCells(self) -> object:
        """
        Get: MergeCells(self: Style) -> object
        Set: MergeCells(self: Style) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Style) -> str """
        ...

    @property
    def NameLocal(self) -> str:
        """ Get: NameLocal(self: Style) -> str """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: Style) -> str
        Set: NumberFormat(self: Style) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> str:
        """
        Get: NumberFormatLocal(self: Style) -> str
        Set: NumberFormatLocal(self: Style) = value
        """
        ...

    @property
    def Orientation(self) -> XlOrientation:
        """
        Get: Orientation(self: Style) -> XlOrientation
        Set: Orientation(self: Style) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Style) -> object """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: Style) -> int
        Set: ReadingOrder(self: Style) = value
        """
        ...

    @property
    def ShrinkToFit(self) -> bool:
        """
        Get: ShrinkToFit(self: Style) -> bool
        Set: ShrinkToFit(self: Style) = value
        """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: Style) -> str """
        ...

    @property
    def VerticalAlignment(self) -> XlVAlign:
        """
        Get: VerticalAlignment(self: Style) -> XlVAlign
        Set: VerticalAlignment(self: Style) = value
        """
        ...

    @property
    def WrapText(self) -> bool:
        """
        Get: WrapText(self: Style) -> bool
        Set: WrapText(self: Style) = value
        """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: Style) -> str """
        ...


    def Delete(self) -> object:
        """ Delete(self: Style) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Styles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Styles) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Styles) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Styles) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Styles) -> object """
        ...


    def Add(self, Name:str, BasedOn:object) -> Style:
        """ Add(self: Styles, Name: str, BasedOn: object) -> Style """
        ...

    def Merge(self, Workbook:object) -> object:
        """ Merge(self: Styles, Workbook: object) -> object """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Tab: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Tab) -> Application """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: Tab) -> object
        Set: Color(self: Tab) = value
        """
        ...

    @property
    def ColorIndex(self) -> XlColorIndex:
        """
        Get: ColorIndex(self: Tab) -> XlColorIndex
        Set: ColorIndex(self: Tab) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Tab) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Tab) -> object """
        ...

    @property
    def ThemeColor(self) -> XlThemeColor:
        """
        Get: ThemeColor(self: Tab) -> XlThemeColor
        Set: ThemeColor(self: Tab) = value
        """
        ...

    @property
    def TintAndShade(self) -> object:
        """
        Get: TintAndShade(self: Tab) -> object
        Set: TintAndShade(self: Tab) = value
        """
        ...



class TableObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AdjustColumnWidth(self) -> bool:
        """
        Get: AdjustColumnWidth(self: TableObject) -> bool
        Set: AdjustColumnWidth(self: TableObject) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableObject) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TableObject) -> XlCreator """
        ...

    @property
    def Destination(self) -> Range:
        """ Get: Destination(self: TableObject) -> Range """
        ...

    @property
    def EnableEditing(self) -> bool:
        """
        Get: EnableEditing(self: TableObject) -> bool
        Set: EnableEditing(self: TableObject) = value
        """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: TableObject) -> bool
        Set: EnableRefresh(self: TableObject) = value
        """
        ...

    @property
    def FetchedRowOverflow(self) -> bool:
        """ Get: FetchedRowOverflow(self: TableObject) -> bool """
        ...

    @property
    def ListObject(self) -> ListObject:
        """ Get: ListObject(self: TableObject) -> ListObject """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableObject) -> object """
        ...

    @property
    def PreserveColumnInfo(self) -> bool:
        """
        Get: PreserveColumnInfo(self: TableObject) -> bool
        Set: PreserveColumnInfo(self: TableObject) = value
        """
        ...

    @property
    def PreserveFormatting(self) -> bool:
        """
        Get: PreserveFormatting(self: TableObject) -> bool
        Set: PreserveFormatting(self: TableObject) = value
        """
        ...

    @property
    def RefreshStyle(self) -> XlCellInsertionMode:
        """
        Get: RefreshStyle(self: TableObject) -> XlCellInsertionMode
        Set: RefreshStyle(self: TableObject) = value
        """
        ...

    @property
    def ResultRange(self) -> Range:
        """ Get: ResultRange(self: TableObject) -> Range """
        ...

    @property
    def RowNumbers(self) -> bool:
        """
        Get: RowNumbers(self: TableObject) -> bool
        Set: RowNumbers(self: TableObject) = value
        """
        ...

    @property
    def WorkbookConnection(self) -> WorkbookConnection:
        """ Get: WorkbookConnection(self: TableObject) -> WorkbookConnection """
        ...


    def Delete(self): # -> 
        """ Delete(self: TableObject) """
        ...

    def Refresh(self) -> bool:
        """ Refresh(self: TableObject) -> bool """
        ...


class TableStyle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableStyle) -> Application """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: TableStyle) -> bool """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TableStyle) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: TableStyle) -> str """
        ...

    @property
    def NameLocal(self) -> str:
        """ Get: NameLocal(self: TableStyle) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableStyle) -> object """
        ...

    @property
    def ShowAsAvailablePivotTableStyle(self) -> bool:
        """
        Get: ShowAsAvailablePivotTableStyle(self: TableStyle) -> bool
        Set: ShowAsAvailablePivotTableStyle(self: TableStyle) = value
        """
        ...

    @property
    def ShowAsAvailableSlicerStyle(self) -> bool:
        """
        Get: ShowAsAvailableSlicerStyle(self: TableStyle) -> bool
        Set: ShowAsAvailableSlicerStyle(self: TableStyle) = value
        """
        ...

    @property
    def ShowAsAvailableTableStyle(self) -> bool:
        """
        Get: ShowAsAvailableTableStyle(self: TableStyle) -> bool
        Set: ShowAsAvailableTableStyle(self: TableStyle) = value
        """
        ...

    @property
    def ShowAsAvailableTimelineStyle(self) -> bool:
        """
        Get: ShowAsAvailableTimelineStyle(self: TableStyle) -> bool
        Set: ShowAsAvailableTimelineStyle(self: TableStyle) = value
        """
        ...

    @property
    def TableStyleElements(self) -> TableStyleElements:
        """ Get: TableStyleElements(self: TableStyle) -> TableStyleElements """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: TableStyle) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: TableStyle) """
        ...

    def Duplicate(self, NewTableStyleName:object) -> TableStyle:
        """ Duplicate(self: TableStyle, NewTableStyleName: object) -> TableStyle """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TableStyleElement: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableStyleElement) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: TableStyleElement) -> Borders """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TableStyleElement) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: TableStyleElement) -> Font """
        ...

    @property
    def HasFormat(self) -> bool:
        """ Get: HasFormat(self: TableStyleElement) -> bool """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: TableStyleElement) -> Interior """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableStyleElement) -> object """
        ...

    @property
    def StripeSize(self) -> int:
        """
        Get: StripeSize(self: TableStyleElement) -> int
        Set: StripeSize(self: TableStyleElement) = value
        """
        ...


    def Clear(self): # -> 
        """ Clear(self: TableStyleElement) """
        ...


class TableStyleElements(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableStyleElements) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TableStyleElements) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TableStyleElements) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableStyleElements) -> object """
        ...


    def Item(self, Index:XlTableStyleElementType) -> TableStyleElement:
        """ Item(self: TableStyleElements, Index: XlTableStyleElementType) -> TableStyleElement """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TableStyles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableStyles) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TableStyles) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TableStyles) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableStyles) -> object """
        ...


    def Add(self, TableStyleName:str) -> TableStyle:
        """ Add(self: TableStyles, TableStyleName: str) -> TableStyle """
        ...

    def Item(self, Index:object) -> TableStyle:
        """ Item(self: TableStyles, Index: object) -> TableStyle """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TextBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: TextBox) -> bool
        Set: AddIndent(self: TextBox) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TextBox) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: TextBox) -> object
        Set: AutoScaleFont(self: TextBox) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: TextBox) -> bool
        Set: AutoSize(self: TextBox) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: TextBox) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: TextBox) -> Range """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: TextBox) -> str
        Set: Caption(self: TextBox) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TextBox) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: TextBox) -> bool
        Set: Enabled(self: TextBox) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: TextBox) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: TextBox) -> str
        Set: Formula(self: TextBox) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: TextBox) -> float
        Set: Height(self: TextBox) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: TextBox) -> object
        Set: HorizontalAlignment(self: TextBox) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: TextBox) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: TextBox) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: TextBox) -> float
        Set: Left(self: TextBox) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: TextBox) -> bool
        Set: Locked(self: TextBox) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: TextBox) -> bool
        Set: LockedText(self: TextBox) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: TextBox) -> str
        Set: Name(self: TextBox) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: TextBox) -> str
        Set: OnAction(self: TextBox) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: TextBox) -> object
        Set: Orientation(self: TextBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextBox) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: TextBox) -> object
        Set: Placement(self: TextBox) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: TextBox) -> bool
        Set: PrintObject(self: TextBox) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: TextBox) -> int
        Set: ReadingOrder(self: TextBox) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: TextBox) -> bool
        Set: RoundedCorners(self: TextBox) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: TextBox) -> bool
        Set: Shadow(self: TextBox) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: TextBox) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: TextBox) -> str
        Set: Text(self: TextBox) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: TextBox) -> float
        Set: Top(self: TextBox) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: TextBox) -> Range """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: TextBox) -> object
        Set: VerticalAlignment(self: TextBox) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: TextBox) -> bool
        Set: Visible(self: TextBox) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: TextBox) -> float
        Set: Width(self: TextBox) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: TextBox) -> int """
        ...


    def BringToFront(self) -> object:
        """ BringToFront(self: TextBox) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: TextBox, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: TextBox) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: TextBox, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: TextBox) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: TextBox) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: TextBox) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: TextBox, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: TextBox) -> object """
        ...


class TextBoxes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddIndent(self) -> bool:
        """
        Get: AddIndent(self: TextBoxes) -> bool
        Set: AddIndent(self: TextBoxes) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TextBoxes) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: TextBoxes) -> object
        Set: AutoScaleFont(self: TextBoxes) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: TextBoxes) -> bool
        Set: AutoSize(self: TextBoxes) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: TextBoxes) -> Border """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: TextBoxes) -> str
        Set: Caption(self: TextBoxes) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TextBoxes) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TextBoxes) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: TextBoxes) -> bool
        Set: Enabled(self: TextBoxes) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: TextBoxes) -> Font """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: TextBoxes) -> str
        Set: Formula(self: TextBoxes) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: TextBoxes) -> float
        Set: Height(self: TextBoxes) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: TextBoxes) -> object
        Set: HorizontalAlignment(self: TextBoxes) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: TextBoxes) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: TextBoxes) -> float
        Set: Left(self: TextBoxes) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: TextBoxes) -> bool
        Set: Locked(self: TextBoxes) = value
        """
        ...

    @property
    def LockedText(self) -> bool:
        """
        Get: LockedText(self: TextBoxes) -> bool
        Set: LockedText(self: TextBoxes) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: TextBoxes) -> str
        Set: OnAction(self: TextBoxes) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: TextBoxes) -> object
        Set: Orientation(self: TextBoxes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextBoxes) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: TextBoxes) -> object
        Set: Placement(self: TextBoxes) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: TextBoxes) -> bool
        Set: PrintObject(self: TextBoxes) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: TextBoxes) -> int
        Set: ReadingOrder(self: TextBoxes) = value
        """
        ...

    @property
    def RoundedCorners(self) -> bool:
        """
        Get: RoundedCorners(self: TextBoxes) -> bool
        Set: RoundedCorners(self: TextBoxes) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: TextBoxes) -> bool
        Set: Shadow(self: TextBoxes) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: TextBoxes) -> ShapeRange """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: TextBoxes) -> str
        Set: Text(self: TextBoxes) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: TextBoxes) -> float
        Set: Top(self: TextBoxes) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: TextBoxes) -> object
        Set: VerticalAlignment(self: TextBoxes) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: TextBoxes) -> bool
        Set: Visible(self: TextBoxes) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: TextBoxes) -> float
        Set: Width(self: TextBoxes) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: TextBoxes) -> int """
        ...


    def Add(self, Left:float, Top:float, Width:float, Height:float) -> TextBox:
        """ Add(self: TextBoxes, Left: float, Top: float, Width: float, Height: float) -> TextBox """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: TextBoxes) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object) -> object:
        """ CheckSpelling(self: TextBoxes, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: TextBoxes) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: TextBoxes, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: TextBoxes) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: TextBoxes) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: TextBoxes) -> object """
        ...

    def Group(self) -> GroupObject:
        """ Group(self: TextBoxes) -> GroupObject """
        ...

    def Item(self, Index:object) -> object:
        """ Item(self: TextBoxes, Index: object) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: TextBoxes, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: TextBoxes) -> object """
        ...

    def _Dummy12(self): # -> 
        """ _Dummy12(self: TextBoxes) """
        ...

    def _Dummy15(self): # -> 
        """ _Dummy15(self: TextBoxes) """
        ...

    def _Dummy22(self): # -> 
        """ _Dummy22(self: TextBoxes) """
        ...

    def _Dummy3(self): # -> 
        """ _Dummy3(self: TextBoxes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class TextConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TextConnection) -> Application """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: TextConnection) -> object
        Set: Connection(self: TextConnection) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TextConnection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextConnection) -> object """
        ...

    @property
    def TextFileColumnDataTypes(self) -> object:
        """
        Get: TextFileColumnDataTypes(self: TextConnection) -> object
        Set: TextFileColumnDataTypes(self: TextConnection) = value
        """
        ...

    @property
    def TextFileCommaDelimiter(self) -> bool:
        """
        Get: TextFileCommaDelimiter(self: TextConnection) -> bool
        Set: TextFileCommaDelimiter(self: TextConnection) = value
        """
        ...

    @property
    def TextFileConsecutiveDelimiter(self) -> bool:
        """
        Get: TextFileConsecutiveDelimiter(self: TextConnection) -> bool
        Set: TextFileConsecutiveDelimiter(self: TextConnection) = value
        """
        ...

    @property
    def TextFileDecimalSeparator(self) -> str:
        """
        Get: TextFileDecimalSeparator(self: TextConnection) -> str
        Set: TextFileDecimalSeparator(self: TextConnection) = value
        """
        ...

    @property
    def TextFileFixedColumnWidths(self) -> object:
        """
        Get: TextFileFixedColumnWidths(self: TextConnection) -> object
        Set: TextFileFixedColumnWidths(self: TextConnection) = value
        """
        ...

    @property
    def TextFileHeaderRow(self) -> bool:
        """
        Get: TextFileHeaderRow(self: TextConnection) -> bool
        Set: TextFileHeaderRow(self: TextConnection) = value
        """
        ...

    @property
    def TextFileOtherDelimiter(self) -> str:
        """
        Get: TextFileOtherDelimiter(self: TextConnection) -> str
        Set: TextFileOtherDelimiter(self: TextConnection) = value
        """
        ...

    @property
    def TextFileParseType(self) -> XlTextParsingType:
        """
        Get: TextFileParseType(self: TextConnection) -> XlTextParsingType
        Set: TextFileParseType(self: TextConnection) = value
        """
        ...

    @property
    def TextFilePlatform(self) -> XlPlatform:
        """
        Get: TextFilePlatform(self: TextConnection) -> XlPlatform
        Set: TextFilePlatform(self: TextConnection) = value
        """
        ...

    @property
    def TextFilePromptOnRefresh(self) -> bool:
        """
        Get: TextFilePromptOnRefresh(self: TextConnection) -> bool
        Set: TextFilePromptOnRefresh(self: TextConnection) = value
        """
        ...

    @property
    def TextFileSemicolonDelimiter(self) -> bool:
        """
        Get: TextFileSemicolonDelimiter(self: TextConnection) -> bool
        Set: TextFileSemicolonDelimiter(self: TextConnection) = value
        """
        ...

    @property
    def TextFileSpaceDelimiter(self) -> bool:
        """
        Get: TextFileSpaceDelimiter(self: TextConnection) -> bool
        Set: TextFileSpaceDelimiter(self: TextConnection) = value
        """
        ...

    @property
    def TextFileStartRow(self) -> int:
        """
        Get: TextFileStartRow(self: TextConnection) -> int
        Set: TextFileStartRow(self: TextConnection) = value
        """
        ...

    @property
    def TextFileTabDelimiter(self) -> bool:
        """
        Get: TextFileTabDelimiter(self: TextConnection) -> bool
        Set: TextFileTabDelimiter(self: TextConnection) = value
        """
        ...

    @property
    def TextFileTextQualifier(self) -> XlTextQualifier:
        """
        Get: TextFileTextQualifier(self: TextConnection) -> XlTextQualifier
        Set: TextFileTextQualifier(self: TextConnection) = value
        """
        ...

    @property
    def TextFileThousandsSeparator(self) -> str:
        """
        Get: TextFileThousandsSeparator(self: TextConnection) -> str
        Set: TextFileThousandsSeparator(self: TextConnection) = value
        """
        ...

    @property
    def TextFileTrailingMinusNumbers(self) -> bool:
        """
        Get: TextFileTrailingMinusNumbers(self: TextConnection) -> bool
        Set: TextFileTrailingMinusNumbers(self: TextConnection) = value
        """
        ...

    @property
    def TextFileVisualLayout(self) -> XlTextVisualLayoutType:
        """
        Get: TextFileVisualLayout(self: TextConnection) -> XlTextVisualLayoutType
        Set: TextFileVisualLayout(self: TextConnection) = value
        """
        ...



class TextEffectFormat(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self): # -> MsoTextEffectAlignment
        """
        Get: Alignment(self: TextEffectFormat) -> MsoTextEffectAlignment
        Set: Alignment(self: TextEffectFormat) = value
        """
        ...

    @property
    def FontBold(self): # -> MsoTriState
        """
        Get: FontBold(self: TextEffectFormat) -> MsoTriState
        Set: FontBold(self: TextEffectFormat) = value
        """
        ...

    @property
    def FontItalic(self): # -> MsoTriState
        """
        Get: FontItalic(self: TextEffectFormat) -> MsoTriState
        Set: FontItalic(self: TextEffectFormat) = value
        """
        ...

    @property
    def FontName(self) -> str:
        """
        Get: FontName(self: TextEffectFormat) -> str
        Set: FontName(self: TextEffectFormat) = value
        """
        ...

    @property
    def FontSize(self) -> Single:
        """
        Get: FontSize(self: TextEffectFormat) -> Single
        Set: FontSize(self: TextEffectFormat) = value
        """
        ...

    @property
    def KernedPairs(self): # -> MsoTriState
        """
        Get: KernedPairs(self: TextEffectFormat) -> MsoTriState
        Set: KernedPairs(self: TextEffectFormat) = value
        """
        ...

    @property
    def NormalizedHeight(self): # -> MsoTriState
        """
        Get: NormalizedHeight(self: TextEffectFormat) -> MsoTriState
        Set: NormalizedHeight(self: TextEffectFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextEffectFormat) -> object """
        ...

    @property
    def PresetShape(self): # -> MsoPresetTextEffectShape
        """
        Get: PresetShape(self: TextEffectFormat) -> MsoPresetTextEffectShape
        Set: PresetShape(self: TextEffectFormat) = value
        """
        ...

    @property
    def PresetTextEffect(self): # -> MsoPresetTextEffect
        """
        Get: PresetTextEffect(self: TextEffectFormat) -> MsoPresetTextEffect
        Set: PresetTextEffect(self: TextEffectFormat) = value
        """
        ...

    @property
    def RotatedChars(self): # -> MsoTriState
        """
        Get: RotatedChars(self: TextEffectFormat) -> MsoTriState
        Set: RotatedChars(self: TextEffectFormat) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: TextEffectFormat) -> str
        Set: Text(self: TextEffectFormat) = value
        """
        ...

    @property
    def Tracking(self) -> Single:
        """
        Get: Tracking(self: TextEffectFormat) -> Single
        Set: Tracking(self: TextEffectFormat) = value
        """
        ...


    def ToggleVerticalText(self): # -> 
        """ ToggleVerticalText(self: TextEffectFormat) """
        ...


class TextFrame: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TextFrame) -> Application """
        ...

    @property
    def AutoMargins(self) -> bool:
        """
        Get: AutoMargins(self: TextFrame) -> bool
        Set: AutoMargins(self: TextFrame) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: TextFrame) -> bool
        Set: AutoSize(self: TextFrame) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TextFrame) -> XlCreator """
        ...

    @property
    def HorizontalAlignment(self) -> XlHAlign:
        """
        Get: HorizontalAlignment(self: TextFrame) -> XlHAlign
        Set: HorizontalAlignment(self: TextFrame) = value
        """
        ...

    @property
    def HorizontalOverflow(self) -> XlOartHorizontalOverflow:
        """
        Get: HorizontalOverflow(self: TextFrame) -> XlOartHorizontalOverflow
        Set: HorizontalOverflow(self: TextFrame) = value
        """
        ...

    @property
    def MarginBottom(self) -> Single:
        """
        Get: MarginBottom(self: TextFrame) -> Single
        Set: MarginBottom(self: TextFrame) = value
        """
        ...

    @property
    def MarginLeft(self) -> Single:
        """
        Get: MarginLeft(self: TextFrame) -> Single
        Set: MarginLeft(self: TextFrame) = value
        """
        ...

    @property
    def MarginRight(self) -> Single:
        """
        Get: MarginRight(self: TextFrame) -> Single
        Set: MarginRight(self: TextFrame) = value
        """
        ...

    @property
    def MarginTop(self) -> Single:
        """
        Get: MarginTop(self: TextFrame) -> Single
        Set: MarginTop(self: TextFrame) = value
        """
        ...

    @property
    def Orientation(self): # -> MsoTextOrientation
        """
        Get: Orientation(self: TextFrame) -> MsoTextOrientation
        Set: Orientation(self: TextFrame) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextFrame) -> object """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: TextFrame) -> int
        Set: ReadingOrder(self: TextFrame) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> XlVAlign:
        """
        Get: VerticalAlignment(self: TextFrame) -> XlVAlign
        Set: VerticalAlignment(self: TextFrame) = value
        """
        ...

    @property
    def VerticalOverflow(self) -> XlOartVerticalOverflow:
        """
        Get: VerticalOverflow(self: TextFrame) -> XlOartVerticalOverflow
        Set: VerticalOverflow(self: TextFrame) = value
        """
        ...


    def Characters(self, Start:object, Length:object) -> Characters:
        """ Characters(self: TextFrame, Start: object, Length: object) -> Characters """
        ...


class TextFrame2(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AutoSize(self): # -> MsoAutoSize
        """
        Get: AutoSize(self: TextFrame2) -> MsoAutoSize
        Set: AutoSize(self: TextFrame2) = value
        """
        ...

    @property
    def Column(self): # -> TextColumn2
        """ Get: Column(self: TextFrame2) -> TextColumn2 """
        ...

    @property
    def HasText(self): # -> MsoTriState
        """ Get: HasText(self: TextFrame2) -> MsoTriState """
        ...

    @property
    def HorizontalAnchor(self): # -> MsoHorizontalAnchor
        """
        Get: HorizontalAnchor(self: TextFrame2) -> MsoHorizontalAnchor
        Set: HorizontalAnchor(self: TextFrame2) = value
        """
        ...

    @property
    def MarginBottom(self) -> Single:
        """
        Get: MarginBottom(self: TextFrame2) -> Single
        Set: MarginBottom(self: TextFrame2) = value
        """
        ...

    @property
    def MarginLeft(self) -> Single:
        """
        Get: MarginLeft(self: TextFrame2) -> Single
        Set: MarginLeft(self: TextFrame2) = value
        """
        ...

    @property
    def MarginRight(self) -> Single:
        """
        Get: MarginRight(self: TextFrame2) -> Single
        Set: MarginRight(self: TextFrame2) = value
        """
        ...

    @property
    def MarginTop(self) -> Single:
        """
        Get: MarginTop(self: TextFrame2) -> Single
        Set: MarginTop(self: TextFrame2) = value
        """
        ...

    @property
    def NoTextRotation(self): # -> MsoTriState
        """
        Get: NoTextRotation(self: TextFrame2) -> MsoTriState
        Set: NoTextRotation(self: TextFrame2) = value
        """
        ...

    @property
    def Orientation(self): # -> MsoTextOrientation
        """
        Get: Orientation(self: TextFrame2) -> MsoTextOrientation
        Set: Orientation(self: TextFrame2) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextFrame2) -> object """
        ...

    @property
    def PathFormat(self): # -> MsoPathFormat
        """
        Get: PathFormat(self: TextFrame2) -> MsoPathFormat
        Set: PathFormat(self: TextFrame2) = value
        """
        ...

    @property
    def Ruler(self): # -> Ruler2
        """ Get: Ruler(self: TextFrame2) -> Ruler2 """
        ...

    @property
    def TextRange(self): # -> TextRange2
        """ Get: TextRange(self: TextFrame2) -> TextRange2 """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """ Get: ThreeD(self: TextFrame2) -> ThreeDFormat """
        ...

    @property
    def VerticalAnchor(self): # -> MsoVerticalAnchor
        """
        Get: VerticalAnchor(self: TextFrame2) -> MsoVerticalAnchor
        Set: VerticalAnchor(self: TextFrame2) = value
        """
        ...

    @property
    def WarpFormat(self): # -> MsoWarpFormat
        """
        Get: WarpFormat(self: TextFrame2) -> MsoWarpFormat
        Set: WarpFormat(self: TextFrame2) = value
        """
        ...

    @property
    def WordArtformat(self): # -> MsoPresetTextEffect
        """
        Get: WordArtformat(self: TextFrame2) -> MsoPresetTextEffect
        Set: WordArtformat(self: TextFrame2) = value
        """
        ...

    @property
    def WordWrap(self): # -> MsoTriState
        """
        Get: WordWrap(self: TextFrame2) -> MsoTriState
        Set: WordWrap(self: TextFrame2) = value
        """
        ...


    def DeleteText(self): # -> 
        """ DeleteText(self: TextFrame2) """
        ...


class ThreeDFormat(_IMsoDispObj): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def BevelBottomDepth(self) -> Single:
        """
        Get: BevelBottomDepth(self: ThreeDFormat) -> Single
        Set: BevelBottomDepth(self: ThreeDFormat) = value
        """
        ...

    @property
    def BevelBottomInset(self) -> Single:
        """
        Get: BevelBottomInset(self: ThreeDFormat) -> Single
        Set: BevelBottomInset(self: ThreeDFormat) = value
        """
        ...

    @property
    def BevelBottomType(self): # -> MsoBevelType
        """
        Get: BevelBottomType(self: ThreeDFormat) -> MsoBevelType
        Set: BevelBottomType(self: ThreeDFormat) = value
        """
        ...

    @property
    def BevelTopDepth(self) -> Single:
        """
        Get: BevelTopDepth(self: ThreeDFormat) -> Single
        Set: BevelTopDepth(self: ThreeDFormat) = value
        """
        ...

    @property
    def BevelTopInset(self) -> Single:
        """
        Get: BevelTopInset(self: ThreeDFormat) -> Single
        Set: BevelTopInset(self: ThreeDFormat) = value
        """
        ...

    @property
    def BevelTopType(self): # -> MsoBevelType
        """
        Get: BevelTopType(self: ThreeDFormat) -> MsoBevelType
        Set: BevelTopType(self: ThreeDFormat) = value
        """
        ...

    @property
    def ContourColor(self) -> ColorFormat:
        """ Get: ContourColor(self: ThreeDFormat) -> ColorFormat """
        ...

    @property
    def ContourWidth(self) -> Single:
        """
        Get: ContourWidth(self: ThreeDFormat) -> Single
        Set: ContourWidth(self: ThreeDFormat) = value
        """
        ...

    @property
    def Depth(self) -> Single:
        """
        Get: Depth(self: ThreeDFormat) -> Single
        Set: Depth(self: ThreeDFormat) = value
        """
        ...

    @property
    def ExtrusionColor(self) -> ColorFormat:
        """ Get: ExtrusionColor(self: ThreeDFormat) -> ColorFormat """
        ...

    @property
    def ExtrusionColorType(self): # -> MsoExtrusionColorType
        """
        Get: ExtrusionColorType(self: ThreeDFormat) -> MsoExtrusionColorType
        Set: ExtrusionColorType(self: ThreeDFormat) = value
        """
        ...

    @property
    def FieldOfView(self) -> Single:
        """
        Get: FieldOfView(self: ThreeDFormat) -> Single
        Set: FieldOfView(self: ThreeDFormat) = value
        """
        ...

    @property
    def LightAngle(self) -> Single:
        """
        Get: LightAngle(self: ThreeDFormat) -> Single
        Set: LightAngle(self: ThreeDFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ThreeDFormat) -> object """
        ...

    @property
    def Perspective(self): # -> MsoTriState
        """
        Get: Perspective(self: ThreeDFormat) -> MsoTriState
        Set: Perspective(self: ThreeDFormat) = value
        """
        ...

    @property
    def PresetCamera(self): # -> MsoPresetCamera
        """ Get: PresetCamera(self: ThreeDFormat) -> MsoPresetCamera """
        ...

    @property
    def PresetExtrusionDirection(self): # -> MsoPresetExtrusionDirection
        """ Get: PresetExtrusionDirection(self: ThreeDFormat) -> MsoPresetExtrusionDirection """
        ...

    @property
    def PresetLighting(self): # -> MsoLightRigType
        """
        Get: PresetLighting(self: ThreeDFormat) -> MsoLightRigType
        Set: PresetLighting(self: ThreeDFormat) = value
        """
        ...

    @property
    def PresetLightingDirection(self): # -> MsoPresetLightingDirection
        """
        Get: PresetLightingDirection(self: ThreeDFormat) -> MsoPresetLightingDirection
        Set: PresetLightingDirection(self: ThreeDFormat) = value
        """
        ...

    @property
    def PresetLightingSoftness(self): # -> MsoPresetLightingSoftness
        """
        Get: PresetLightingSoftness(self: ThreeDFormat) -> MsoPresetLightingSoftness
        Set: PresetLightingSoftness(self: ThreeDFormat) = value
        """
        ...

    @property
    def PresetMaterial(self): # -> MsoPresetMaterial
        """
        Get: PresetMaterial(self: ThreeDFormat) -> MsoPresetMaterial
        Set: PresetMaterial(self: ThreeDFormat) = value
        """
        ...

    @property
    def PresetThreeDFormat(self): # -> MsoPresetThreeDFormat
        """ Get: PresetThreeDFormat(self: ThreeDFormat) -> MsoPresetThreeDFormat """
        ...

    @property
    def ProjectText(self): # -> MsoTriState
        """
        Get: ProjectText(self: ThreeDFormat) -> MsoTriState
        Set: ProjectText(self: ThreeDFormat) = value
        """
        ...

    @property
    def RotationX(self) -> Single:
        """
        Get: RotationX(self: ThreeDFormat) -> Single
        Set: RotationX(self: ThreeDFormat) = value
        """
        ...

    @property
    def RotationY(self) -> Single:
        """
        Get: RotationY(self: ThreeDFormat) -> Single
        Set: RotationY(self: ThreeDFormat) = value
        """
        ...

    @property
    def RotationZ(self) -> Single:
        """
        Get: RotationZ(self: ThreeDFormat) -> Single
        Set: RotationZ(self: ThreeDFormat) = value
        """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: ThreeDFormat) -> MsoTriState
        Set: Visible(self: ThreeDFormat) = value
        """
        ...

    @property
    def Z(self) -> Single:
        """
        Get: Z(self: ThreeDFormat) -> Single
        Set: Z(self: ThreeDFormat) = value
        """
        ...


    def IncrementRotationHorizontal(self, Increment:Single): # -> 
        """ IncrementRotationHorizontal(self: ThreeDFormat, Increment: Single) """
        ...

    def IncrementRotationVertical(self, Increment:Single): # -> 
        """ IncrementRotationVertical(self: ThreeDFormat, Increment: Single) """
        ...

    def IncrementRotationX(self, Increment:Single): # -> 
        """ IncrementRotationX(self: ThreeDFormat, Increment: Single) """
        ...

    def IncrementRotationY(self, Increment:Single): # -> 
        """ IncrementRotationY(self: ThreeDFormat, Increment: Single) """
        ...

    def IncrementRotationZ(self, Increment:Single): # -> 
        """ IncrementRotationZ(self: ThreeDFormat, Increment: Single) """
        ...

    def ResetRotation(self): # -> 
        """ ResetRotation(self: ThreeDFormat) """
        ...

    def SetExtrusionDirection(self, PresetExtrusionDirection): # ->  # Not found arg types: {'PresetExtrusionDirection': 'MsoPresetExtrusionDirection'}
        """ SetExtrusionDirection(self: ThreeDFormat, PresetExtrusionDirection: MsoPresetExtrusionDirection) """
        ...

    def SetPresetCamera(self, PresetCamera): # ->  # Not found arg types: {'PresetCamera': 'MsoPresetCamera'}
        """ SetPresetCamera(self: ThreeDFormat, PresetCamera: MsoPresetCamera) """
        ...

    def SetThreeDFormat(self, PresetThreeDFormat): # ->  # Not found arg types: {'PresetThreeDFormat': 'MsoPresetThreeDFormat'}
        """ SetThreeDFormat(self: ThreeDFormat, PresetThreeDFormat: MsoPresetThreeDFormat) """
        ...


class TickLabels: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> int:
        """
        Get: Alignment(self: TickLabels) -> int
        Set: Alignment(self: TickLabels) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TickLabels) -> Application """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: TickLabels) -> object
        Set: AutoScaleFont(self: TickLabels) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TickLabels) -> XlCreator """
        ...

    @property
    def Depth(self) -> int:
        """ Get: Depth(self: TickLabels) -> int """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: TickLabels) -> Font """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: TickLabels) -> ChartFormat """
        ...

    @property
    def MultiLevel(self) -> bool:
        """
        Get: MultiLevel(self: TickLabels) -> bool
        Set: MultiLevel(self: TickLabels) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: TickLabels) -> str """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: TickLabels) -> str
        Set: NumberFormat(self: TickLabels) = value
        """
        ...

    @property
    def NumberFormatLinked(self) -> bool:
        """
        Get: NumberFormatLinked(self: TickLabels) -> bool
        Set: NumberFormatLinked(self: TickLabels) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: TickLabels) -> object
        Set: NumberFormatLocal(self: TickLabels) = value
        """
        ...

    @property
    def Offset(self) -> int:
        """
        Get: Offset(self: TickLabels) -> int
        Set: Offset(self: TickLabels) = value
        """
        ...

    @property
    def Orientation(self) -> XlTickLabelOrientation:
        """
        Get: Orientation(self: TickLabels) -> XlTickLabelOrientation
        Set: Orientation(self: TickLabels) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TickLabels) -> object """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: TickLabels) -> int
        Set: ReadingOrder(self: TickLabels) = value
        """
        ...


    def Delete(self) -> object:
        """ Delete(self: TickLabels) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: TickLabels) -> object """
        ...


class TimelineState: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TimelineState) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TimelineState) -> XlCreator """
        ...

    @property
    def EndDate(self) -> object:
        """ Get: EndDate(self: TimelineState) -> object """
        ...

    @property
    def FilterType(self) -> XlPivotFilterType:
        """ Get: FilterType(self: TimelineState) -> XlPivotFilterType """
        ...

    @property
    def FilterValue1(self) -> object:
        """ Get: FilterValue1(self: TimelineState) -> object """
        ...

    @property
    def FilterValue2(self) -> object:
        """ Get: FilterValue2(self: TimelineState) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TimelineState) -> object """
        ...

    @property
    def SingleRangeFilterState(self) -> bool:
        """ Get: SingleRangeFilterState(self: TimelineState) -> bool """
        ...

    @property
    def StartDate(self) -> object:
        """ Get: StartDate(self: TimelineState) -> object """
        ...


    def SetFilterDateRange(self, StartDate:object, EndDate:object) -> XlFilterStatus:
        """ SetFilterDateRange(self: TimelineState, StartDate: object, EndDate: object) -> XlFilterStatus """
        ...


class TimelineViewState: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TimelineViewState) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TimelineViewState) -> XlCreator """
        ...

    @property
    def Level(self) -> XlTimelineLevel:
        """
        Get: Level(self: TimelineViewState) -> XlTimelineLevel
        Set: Level(self: TimelineViewState) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TimelineViewState) -> object """
        ...

    @property
    def ShowHeader(self) -> bool:
        """
        Get: ShowHeader(self: TimelineViewState) -> bool
        Set: ShowHeader(self: TimelineViewState) = value
        """
        ...

    @property
    def ShowHorizontalScrollbar(self) -> bool:
        """
        Get: ShowHorizontalScrollbar(self: TimelineViewState) -> bool
        Set: ShowHorizontalScrollbar(self: TimelineViewState) = value
        """
        ...

    @property
    def ShowSelectionLabel(self) -> bool:
        """
        Get: ShowSelectionLabel(self: TimelineViewState) -> bool
        Set: ShowSelectionLabel(self: TimelineViewState) = value
        """
        ...

    @property
    def ShowTimeLevel(self) -> bool:
        """
        Get: ShowTimeLevel(self: TimelineViewState) -> bool
        Set: ShowTimeLevel(self: TimelineViewState) = value
        """
        ...



class Toolbar: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Toolbar) -> Application """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: Toolbar) -> bool """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Toolbar) -> XlCreator """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: Toolbar) -> int
        Set: Height(self: Toolbar) = value
        """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: Toolbar) -> int
        Set: Left(self: Toolbar) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Toolbar) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Toolbar) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: Toolbar) -> int
        Set: Position(self: Toolbar) = value
        """
        ...

    @property
    def Protection(self) -> XlToolbarProtection:
        """
        Get: Protection(self: Toolbar) -> XlToolbarProtection
        Set: Protection(self: Toolbar) = value
        """
        ...

    @property
    def ToolbarButtons(self) -> ToolbarButtons:
        """ Get: ToolbarButtons(self: Toolbar) -> ToolbarButtons """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: Toolbar) -> int
        Set: Top(self: Toolbar) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Toolbar) -> bool
        Set: Visible(self: Toolbar) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: Toolbar) -> int
        Set: Width(self: Toolbar) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: Toolbar) """
        ...

    def Reset(self): # -> 
        """ Reset(self: Toolbar) """
        ...


class ToolbarButton: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ToolbarButton) -> Application """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: ToolbarButton) -> bool """
        ...

    @property
    def BuiltInFace(self) -> bool:
        """
        Get: BuiltInFace(self: ToolbarButton) -> bool
        Set: BuiltInFace(self: ToolbarButton) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ToolbarButton) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ToolbarButton) -> bool
        Set: Enabled(self: ToolbarButton) = value
        """
        ...

    @property
    def HelpContextID(self) -> int:
        """
        Get: HelpContextID(self: ToolbarButton) -> int
        Set: HelpContextID(self: ToolbarButton) = value
        """
        ...

    @property
    def HelpFile(self) -> str:
        """
        Get: HelpFile(self: ToolbarButton) -> str
        Set: HelpFile(self: ToolbarButton) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ToolbarButton) -> int """
        ...

    @property
    def IsGap(self) -> bool:
        """ Get: IsGap(self: ToolbarButton) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ToolbarButton) -> str
        Set: Name(self: ToolbarButton) = value
        """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: ToolbarButton) -> str
        Set: OnAction(self: ToolbarButton) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ToolbarButton) -> object """
        ...

    @property
    def Pushed(self) -> bool:
        """
        Get: Pushed(self: ToolbarButton) -> bool
        Set: Pushed(self: ToolbarButton) = value
        """
        ...

    @property
    def StatusBar(self) -> str:
        """
        Get: StatusBar(self: ToolbarButton) -> str
        Set: StatusBar(self: ToolbarButton) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: ToolbarButton) -> int
        Set: Width(self: ToolbarButton) = value
        """
        ...


    def Copy(self, Toolbar:Toolbar, Before:int): # -> 
        """ Copy(self: ToolbarButton, Toolbar: Toolbar, Before: int) """
        ...

    def CopyFace(self): # -> 
        """ CopyFace(self: ToolbarButton) """
        ...

    def Delete(self): # -> 
        """ Delete(self: ToolbarButton) """
        ...

    def Edit(self): # -> 
        """ Edit(self: ToolbarButton) """
        ...

    def Move(self, Toolbar:Toolbar, Before:int): # -> 
        """ Move(self: ToolbarButton, Toolbar: Toolbar, Before: int) """
        ...

    def PasteFace(self): # -> 
        """ PasteFace(self: ToolbarButton) """
        ...

    def Reset(self): # -> 
        """ Reset(self: ToolbarButton) """
        ...


class ToolbarButtons(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ToolbarButtons) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ToolbarButtons) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ToolbarButtons) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ToolbarButtons) -> object """
        ...


    def Add(self, Button:object, Before:object, OnAction:object, Pushed:object, Enabled:object, StatusBar:object, HelpFile:object, HelpContextID:object) -> ToolbarButton:
        """ Add(self: ToolbarButtons, Button: object, Before: object, OnAction: object, Pushed: object, Enabled: object, StatusBar: object, HelpFile: object, HelpContextID: object) -> ToolbarButton """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Toolbars(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Toolbars) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Toolbars) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Toolbars) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Toolbars) -> object """
        ...


    def Add(self, Name:object) -> Toolbar:
        """ Add(self: Toolbars, Name: object) -> Toolbar """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Top10: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Top10) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: Top10) -> Range """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: Top10) -> Borders """
        ...

    @property
    def CalcFor(self) -> XlCalcFor:
        """
        Get: CalcFor(self: Top10) -> XlCalcFor
        Set: CalcFor(self: Top10) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Top10) -> XlCreator """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: Top10) -> Font """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Top10) -> Interior """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: Top10) -> object
        Set: NumberFormat(self: Top10) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Top10) -> object """
        ...

    @property
    def Percent(self) -> bool:
        """
        Get: Percent(self: Top10) -> bool
        Set: Percent(self: Top10) = value
        """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: Top10) -> int
        Set: Priority(self: Top10) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: Top10) -> bool """
        ...

    @property
    def Rank(self) -> int:
        """
        Get: Rank(self: Top10) -> int
        Set: Rank(self: Top10) = value
        """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: Top10) -> XlPivotConditionScope
        Set: ScopeType(self: Top10) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """
        Get: StopIfTrue(self: Top10) -> bool
        Set: StopIfTrue(self: Top10) = value
        """
        ...

    @property
    def TopBottom(self) -> XlTopBottom:
        """
        Get: TopBottom(self: Top10) -> XlTopBottom
        Set: TopBottom(self: Top10) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: Top10) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: Top10) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: Top10, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: Top10) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: Top10) """
        ...


class TreeviewControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TreeviewControl) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: TreeviewControl) -> XlCreator """
        ...

    @property
    def Drilled(self) -> object:
        """
        Get: Drilled(self: TreeviewControl) -> object
        Set: Drilled(self: TreeviewControl) = value
        """
        ...

    @property
    def Hidden(self) -> object:
        """
        Get: Hidden(self: TreeviewControl) -> object
        Set: Hidden(self: TreeviewControl) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TreeviewControl) -> object """
        ...



class Trendline: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Trendline) -> Application """
        ...

    @property
    def Backward(self) -> int:
        """
        Get: Backward(self: Trendline) -> int
        Set: Backward(self: Trendline) = value
        """
        ...

    @property
    def Backward2(self) -> float:
        """
        Get: Backward2(self: Trendline) -> float
        Set: Backward2(self: Trendline) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Trendline) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Trendline) -> XlCreator """
        ...

    @property
    def DataLabel(self) -> DataLabel:
        """ Get: DataLabel(self: Trendline) -> DataLabel """
        ...

    @property
    def DisplayEquation(self) -> bool:
        """
        Get: DisplayEquation(self: Trendline) -> bool
        Set: DisplayEquation(self: Trendline) = value
        """
        ...

    @property
    def DisplayRSquared(self) -> bool:
        """
        Get: DisplayRSquared(self: Trendline) -> bool
        Set: DisplayRSquared(self: Trendline) = value
        """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Trendline) -> ChartFormat """
        ...

    @property
    def Forward(self) -> int:
        """
        Get: Forward(self: Trendline) -> int
        Set: Forward(self: Trendline) = value
        """
        ...

    @property
    def Forward2(self) -> float:
        """
        Get: Forward2(self: Trendline) -> float
        Set: Forward2(self: Trendline) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Trendline) -> int """
        ...

    @property
    def Intercept(self) -> float:
        """
        Get: Intercept(self: Trendline) -> float
        Set: Intercept(self: Trendline) = value
        """
        ...

    @property
    def InterceptIsAuto(self) -> bool:
        """
        Get: InterceptIsAuto(self: Trendline) -> bool
        Set: InterceptIsAuto(self: Trendline) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Trendline) -> str
        Set: Name(self: Trendline) = value
        """
        ...

    @property
    def NameIsAuto(self) -> bool:
        """
        Get: NameIsAuto(self: Trendline) -> bool
        Set: NameIsAuto(self: Trendline) = value
        """
        ...

    @property
    def Order(self) -> int:
        """
        Get: Order(self: Trendline) -> int
        Set: Order(self: Trendline) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Trendline) -> object """
        ...

    @property
    def Period(self) -> int:
        """
        Get: Period(self: Trendline) -> int
        Set: Period(self: Trendline) = value
        """
        ...

    @property
    def Type(self) -> XlTrendlineType:
        """
        Get: Type(self: Trendline) -> XlTrendlineType
        Set: Type(self: Trendline) = value
        """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: Trendline) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Trendline) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: Trendline) -> object """
        ...


class Trendlines(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Trendlines) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Trendlines) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Trendlines) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Trendlines) -> object """
        ...


    def Add(self, Type:XlTrendlineType, Order:object, Period:object, Forward:object, Backward:object, Intercept:object, DisplayEquation:object, DisplayRSquared:object, Name:object) -> Trendline:
        """ Add(self: Trendlines, Type: XlTrendlineType, Order: object, Period: object, Forward: object, Backward: object, Intercept: object, DisplayEquation: object, DisplayRSquared: object, Name: object) -> Trendline """
        ...

    def Item(self, Index:object) -> Trendline:
        """ Item(self: Trendlines, Index: object) -> Trendline """
        ...

    def _Default(self, Index:object) -> Trendline:
        """ _Default(self: Trendlines, Index: object) -> Trendline """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class UniqueValues: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: UniqueValues) -> Application """
        ...

    @property
    def AppliesTo(self) -> Range:
        """ Get: AppliesTo(self: UniqueValues) -> Range """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: UniqueValues) -> Borders """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: UniqueValues) -> XlCreator """
        ...

    @property
    def DupeUnique(self) -> XlDupeUnique:
        """
        Get: DupeUnique(self: UniqueValues) -> XlDupeUnique
        Set: DupeUnique(self: UniqueValues) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """ Get: Font(self: UniqueValues) -> Font """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: UniqueValues) -> Interior """
        ...

    @property
    def NumberFormat(self) -> object:
        """
        Get: NumberFormat(self: UniqueValues) -> object
        Set: NumberFormat(self: UniqueValues) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: UniqueValues) -> object """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: UniqueValues) -> int
        Set: Priority(self: UniqueValues) = value
        """
        ...

    @property
    def PTCondition(self) -> bool:
        """ Get: PTCondition(self: UniqueValues) -> bool """
        ...

    @property
    def ScopeType(self) -> XlPivotConditionScope:
        """
        Get: ScopeType(self: UniqueValues) -> XlPivotConditionScope
        Set: ScopeType(self: UniqueValues) = value
        """
        ...

    @property
    def StopIfTrue(self) -> bool:
        """
        Get: StopIfTrue(self: UniqueValues) -> bool
        Set: StopIfTrue(self: UniqueValues) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: UniqueValues) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: UniqueValues) """
        ...

    def ModifyAppliesToRange(self, Range:Range): # -> 
        """ ModifyAppliesToRange(self: UniqueValues, Range: Range) """
        ...

    def SetFirstPriority(self): # -> 
        """ SetFirstPriority(self: UniqueValues) """
        ...

    def SetLastPriority(self): # -> 
        """ SetLastPriority(self: UniqueValues) """
        ...


class UpBars: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: UpBars) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: UpBars) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: UpBars) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: UpBars) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: UpBars) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: UpBars) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: UpBars) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: UpBars) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: UpBars) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: UpBars) -> object """
        ...


class UsedObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: UsedObjects) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: UsedObjects) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: UsedObjects) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: UsedObjects) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class UserAccess: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowEdit(self) -> bool:
        """
        Get: AllowEdit(self: UserAccess) -> bool
        Set: AllowEdit(self: UserAccess) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: UserAccess) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: UserAccess) """
        ...


class UserAccessList(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: UserAccessList) -> int """
        ...


    def Add(self, Name:str, AllowEdit:bool) -> UserAccess:
        """ Add(self: UserAccessList, Name: str, AllowEdit: bool) -> UserAccess """
        ...

    def DeleteAll(self): # -> 
        """ DeleteAll(self: UserAccessList) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Validation: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlertStyle(self) -> int:
        """ Get: AlertStyle(self: Validation) -> int """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Validation) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Validation) -> XlCreator """
        ...

    @property
    def ErrorMessage(self) -> str:
        """
        Get: ErrorMessage(self: Validation) -> str
        Set: ErrorMessage(self: Validation) = value
        """
        ...

    @property
    def ErrorTitle(self) -> str:
        """
        Get: ErrorTitle(self: Validation) -> str
        Set: ErrorTitle(self: Validation) = value
        """
        ...

    @property
    def Formula1(self) -> str:
        """ Get: Formula1(self: Validation) -> str """
        ...

    @property
    def Formula2(self) -> str:
        """ Get: Formula2(self: Validation) -> str """
        ...

    @property
    def IgnoreBlank(self) -> bool:
        """
        Get: IgnoreBlank(self: Validation) -> bool
        Set: IgnoreBlank(self: Validation) = value
        """
        ...

    @property
    def IMEMode(self) -> int:
        """
        Get: IMEMode(self: Validation) -> int
        Set: IMEMode(self: Validation) = value
        """
        ...

    @property
    def InCellDropdown(self) -> bool:
        """
        Get: InCellDropdown(self: Validation) -> bool
        Set: InCellDropdown(self: Validation) = value
        """
        ...

    @property
    def InputMessage(self) -> str:
        """
        Get: InputMessage(self: Validation) -> str
        Set: InputMessage(self: Validation) = value
        """
        ...

    @property
    def InputTitle(self) -> str:
        """
        Get: InputTitle(self: Validation) -> str
        Set: InputTitle(self: Validation) = value
        """
        ...

    @property
    def Operator(self) -> int:
        """ Get: Operator(self: Validation) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Validation) -> object """
        ...

    @property
    def ShowError(self) -> bool:
        """
        Get: ShowError(self: Validation) -> bool
        Set: ShowError(self: Validation) = value
        """
        ...

    @property
    def ShowInput(self) -> bool:
        """
        Get: ShowInput(self: Validation) -> bool
        Set: ShowInput(self: Validation) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: Validation) -> int """
        ...

    @property
    def Value(self) -> bool:
        """ Get: Value(self: Validation) -> bool """
        ...


    def Add(self, Type:XlDVType, AlertStyle:object, Operator:object, Formula1:object, Formula2:object): # -> 
        """ Add(self: Validation, Type: XlDVType, AlertStyle: object, Operator: object, Formula1: object, Formula2: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Validation) """
        ...

    def Modify(self, Type:object, AlertStyle:object, Operator:object, Formula1:object, Formula2:object): # -> 
        """ Modify(self: Validation, Type: object, AlertStyle: object, Operator: object, Formula1: object, Formula2: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class ValueChange: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllocationMethod(self) -> XlAllocationMethod:
        """ Get: AllocationMethod(self: ValueChange) -> XlAllocationMethod """
        ...

    @property
    def AllocationValue(self) -> XlAllocationValue:
        """ Get: AllocationValue(self: ValueChange) -> XlAllocationValue """
        ...

    @property
    def AllocationWeightExpression(self) -> str:
        """ Get: AllocationWeightExpression(self: ValueChange) -> str """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ValueChange) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: ValueChange) -> XlCreator """
        ...

    @property
    def Order(self) -> int:
        """ Get: Order(self: ValueChange) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ValueChange) -> object """
        ...

    @property
    def PivotCell(self) -> PivotCell:
        """ Get: PivotCell(self: ValueChange) -> PivotCell """
        ...

    @property
    def Tuple(self) -> str:
        """ Get: Tuple(self: ValueChange) -> str """
        ...

    @property
    def Value(self) -> float:
        """ Get: Value(self: ValueChange) -> float """
        ...

    @property
    def VisibleInPivotTable(self) -> bool:
        """ Get: VisibleInPivotTable(self: ValueChange) -> bool """
        ...


    def Delete(self): # -> 
        """ Delete(self: ValueChange) """
        ...


class VPageBreak: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: VPageBreak) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: VPageBreak) -> XlCreator """
        ...

    @property
    def Extent(self) -> XlPageBreakExtent:
        """ Get: Extent(self: VPageBreak) -> XlPageBreakExtent """
        ...

    @property
    def Location(self) -> Range:
        """
        Get: Location(self: VPageBreak) -> Range
        Set: Location(self: VPageBreak) = value
        """
        ...

    @property
    def Parent(self) -> Worksheet:
        """ Get: Parent(self: VPageBreak) -> Worksheet """
        ...

    @property
    def Type(self) -> XlPageBreak:
        """
        Get: Type(self: VPageBreak) -> XlPageBreak
        Set: Type(self: VPageBreak) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: VPageBreak) """
        ...

    def DragOff(self, Direction:XlDirection, RegionIndex:int): # -> 
        """ DragOff(self: VPageBreak, Direction: XlDirection, RegionIndex: int) """
        ...


class VPageBreaks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: VPageBreaks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: VPageBreaks) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: VPageBreaks) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: VPageBreaks) -> object """
        ...


    def Add(self, Before:object) -> VPageBreak:
        """ Add(self: VPageBreaks, Before: object) -> VPageBreak """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Walls: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Walls) -> Application """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: Walls) -> Border """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Walls) -> XlCreator """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: Walls) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Walls) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Walls) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Walls) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Walls) -> object """
        ...

    @property
    def PictureType(self) -> object:
        """
        Get: PictureType(self: Walls) -> object
        Set: PictureType(self: Walls) = value
        """
        ...

    @property
    def PictureUnit(self) -> object:
        """
        Get: PictureUnit(self: Walls) -> object
        Set: PictureUnit(self: Walls) = value
        """
        ...

    @property
    def Thickness(self) -> int:
        """
        Get: Thickness(self: Walls) -> int
        Set: Thickness(self: Walls) = value
        """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: Walls) -> object """
        ...

    def Paste(self): # -> 
        """ Paste(self: Walls) """
        ...

    def Select(self) -> object:
        """ Select(self: Walls) -> object """
        ...


class Watch: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Watch) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Watch) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Watch) -> object """
        ...

    @property
    def Source(self) -> object:
        """ Get: Source(self: Watch) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: Watch) """
        ...


class Watches(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Watches) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Watches) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Watches) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Watches) -> object """
        ...


    def Add(self, Source:object) -> Watch:
        """ Add(self: Watches, Source: object) -> Watch """
        ...

    def Delete(self): # -> 
        """ Delete(self: Watches) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class WebOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowPNG(self) -> bool:
        """
        Get: AllowPNG(self: WebOptions) -> bool
        Set: AllowPNG(self: WebOptions) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: WebOptions) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: WebOptions) -> XlCreator """
        ...

    @property
    def DownloadComponents(self) -> bool:
        """
        Get: DownloadComponents(self: WebOptions) -> bool
        Set: DownloadComponents(self: WebOptions) = value
        """
        ...

    @property
    def Encoding(self): # -> MsoEncoding
        """
        Get: Encoding(self: WebOptions) -> MsoEncoding
        Set: Encoding(self: WebOptions) = value
        """
        ...

    @property
    def FolderSuffix(self) -> str:
        """ Get: FolderSuffix(self: WebOptions) -> str """
        ...

    @property
    def LocationOfComponents(self) -> str:
        """
        Get: LocationOfComponents(self: WebOptions) -> str
        Set: LocationOfComponents(self: WebOptions) = value
        """
        ...

    @property
    def OrganizeInFolder(self) -> bool:
        """
        Get: OrganizeInFolder(self: WebOptions) -> bool
        Set: OrganizeInFolder(self: WebOptions) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: WebOptions) -> object """
        ...

    @property
    def PixelsPerInch(self) -> int:
        """
        Get: PixelsPerInch(self: WebOptions) -> int
        Set: PixelsPerInch(self: WebOptions) = value
        """
        ...

    @property
    def RelyOnCSS(self) -> bool:
        """
        Get: RelyOnCSS(self: WebOptions) -> bool
        Set: RelyOnCSS(self: WebOptions) = value
        """
        ...

    @property
    def RelyOnVML(self) -> bool:
        """
        Get: RelyOnVML(self: WebOptions) -> bool
        Set: RelyOnVML(self: WebOptions) = value
        """
        ...

    @property
    def ScreenSize(self): # -> MsoScreenSize
        """
        Get: ScreenSize(self: WebOptions) -> MsoScreenSize
        Set: ScreenSize(self: WebOptions) = value
        """
        ...

    @property
    def TargetBrowser(self): # -> MsoTargetBrowser
        """
        Get: TargetBrowser(self: WebOptions) -> MsoTargetBrowser
        Set: TargetBrowser(self: WebOptions) = value
        """
        ...

    @property
    def UseLongFileNames(self) -> bool:
        """
        Get: UseLongFileNames(self: WebOptions) -> bool
        Set: UseLongFileNames(self: WebOptions) = value
        """
        ...


    def UseDefaultFolderSuffix(self): # -> 
        """ UseDefaultFolderSuffix(self: WebOptions) """
        ...


class Window: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveCell(self) -> Range:
        """ Get: ActiveCell(self: Window) -> Range """
        ...

    @property
    def ActiveChart(self) -> Chart:
        """ Get: ActiveChart(self: Window) -> Chart """
        ...

    @property
    def ActivePane(self) -> Pane:
        """ Get: ActivePane(self: Window) -> Pane """
        ...

    @property
    def ActiveSheet(self) -> object:
        """ Get: ActiveSheet(self: Window) -> object """
        ...

    @property
    def ActiveSheetView(self) -> object:
        """ Get: ActiveSheetView(self: Window) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Window) -> Application """
        ...

    @property
    def AutoFilterDateGrouping(self) -> bool:
        """
        Get: AutoFilterDateGrouping(self: Window) -> bool
        Set: AutoFilterDateGrouping(self: Window) = value
        """
        ...

    @property
    def Caption(self) -> object:
        """
        Get: Caption(self: Window) -> object
        Set: Caption(self: Window) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Window) -> XlCreator """
        ...

    @property
    def DisplayFormulas(self) -> bool:
        """
        Get: DisplayFormulas(self: Window) -> bool
        Set: DisplayFormulas(self: Window) = value
        """
        ...

    @property
    def DisplayGridlines(self) -> bool:
        """
        Get: DisplayGridlines(self: Window) -> bool
        Set: DisplayGridlines(self: Window) = value
        """
        ...

    @property
    def DisplayHeadings(self) -> bool:
        """
        Get: DisplayHeadings(self: Window) -> bool
        Set: DisplayHeadings(self: Window) = value
        """
        ...

    @property
    def DisplayHorizontalScrollBar(self) -> bool:
        """
        Get: DisplayHorizontalScrollBar(self: Window) -> bool
        Set: DisplayHorizontalScrollBar(self: Window) = value
        """
        ...

    @property
    def DisplayOutline(self) -> bool:
        """
        Get: DisplayOutline(self: Window) -> bool
        Set: DisplayOutline(self: Window) = value
        """
        ...

    @property
    def DisplayRightToLeft(self) -> bool:
        """
        Get: DisplayRightToLeft(self: Window) -> bool
        Set: DisplayRightToLeft(self: Window) = value
        """
        ...

    @property
    def DisplayRuler(self) -> bool:
        """
        Get: DisplayRuler(self: Window) -> bool
        Set: DisplayRuler(self: Window) = value
        """
        ...

    @property
    def DisplayVerticalScrollBar(self) -> bool:
        """
        Get: DisplayVerticalScrollBar(self: Window) -> bool
        Set: DisplayVerticalScrollBar(self: Window) = value
        """
        ...

    @property
    def DisplayWhitespace(self) -> bool:
        """
        Get: DisplayWhitespace(self: Window) -> bool
        Set: DisplayWhitespace(self: Window) = value
        """
        ...

    @property
    def DisplayWorkbookTabs(self) -> bool:
        """
        Get: DisplayWorkbookTabs(self: Window) -> bool
        Set: DisplayWorkbookTabs(self: Window) = value
        """
        ...

    @property
    def DisplayZeros(self) -> bool:
        """
        Get: DisplayZeros(self: Window) -> bool
        Set: DisplayZeros(self: Window) = value
        """
        ...

    @property
    def EnableResize(self) -> bool:
        """
        Get: EnableResize(self: Window) -> bool
        Set: EnableResize(self: Window) = value
        """
        ...

    @property
    def FreezePanes(self) -> bool:
        """
        Get: FreezePanes(self: Window) -> bool
        Set: FreezePanes(self: Window) = value
        """
        ...

    @property
    def GridlineColor(self) -> int:
        """
        Get: GridlineColor(self: Window) -> int
        Set: GridlineColor(self: Window) = value
        """
        ...

    @property
    def GridlineColorIndex(self) -> XlColorIndex:
        """
        Get: GridlineColorIndex(self: Window) -> XlColorIndex
        Set: GridlineColorIndex(self: Window) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Window) -> float
        Set: Height(self: Window) = value
        """
        ...

    @property
    def Hwnd(self) -> int:
        """ Get: Hwnd(self: Window) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Window) -> int """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Window) -> float
        Set: Left(self: Window) = value
        """
        ...

    @property
    def OnWindow(self) -> str:
        """
        Get: OnWindow(self: Window) -> str
        Set: OnWindow(self: Window) = value
        """
        ...

    @property
    def Panes(self) -> Panes:
        """ Get: Panes(self: Window) -> Panes """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Window) -> object """
        ...

    @property
    def RangeSelection(self) -> Range:
        """ Get: RangeSelection(self: Window) -> Range """
        ...

    @property
    def ScrollColumn(self) -> int:
        """
        Get: ScrollColumn(self: Window) -> int
        Set: ScrollColumn(self: Window) = value
        """
        ...

    @property
    def ScrollRow(self) -> int:
        """
        Get: ScrollRow(self: Window) -> int
        Set: ScrollRow(self: Window) = value
        """
        ...

    @property
    def SelectedSheets(self) -> Sheets:
        """ Get: SelectedSheets(self: Window) -> Sheets """
        ...

    @property
    def Selection(self) -> object:
        """ Get: Selection(self: Window) -> object """
        ...

    @property
    def SheetViews(self) -> SheetViews:
        """ Get: SheetViews(self: Window) -> SheetViews """
        ...

    @property
    def Split(self) -> bool:
        """
        Get: Split(self: Window) -> bool
        Set: Split(self: Window) = value
        """
        ...

    @property
    def SplitColumn(self) -> int:
        """
        Get: SplitColumn(self: Window) -> int
        Set: SplitColumn(self: Window) = value
        """
        ...

    @property
    def SplitHorizontal(self) -> float:
        """
        Get: SplitHorizontal(self: Window) -> float
        Set: SplitHorizontal(self: Window) = value
        """
        ...

    @property
    def SplitRow(self) -> int:
        """
        Get: SplitRow(self: Window) -> int
        Set: SplitRow(self: Window) = value
        """
        ...

    @property
    def SplitVertical(self) -> float:
        """
        Get: SplitVertical(self: Window) -> float
        Set: SplitVertical(self: Window) = value
        """
        ...

    @property
    def TabRatio(self) -> float:
        """
        Get: TabRatio(self: Window) -> float
        Set: TabRatio(self: Window) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Window) -> float
        Set: Top(self: Window) = value
        """
        ...

    @property
    def Type(self) -> XlWindowType:
        """ Get: Type(self: Window) -> XlWindowType """
        ...

    @property
    def UsableHeight(self) -> float:
        """ Get: UsableHeight(self: Window) -> float """
        ...

    @property
    def UsableWidth(self) -> float:
        """ Get: UsableWidth(self: Window) -> float """
        ...

    @property
    def View(self) -> XlWindowView:
        """
        Get: View(self: Window) -> XlWindowView
        Set: View(self: Window) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Window) -> bool
        Set: Visible(self: Window) = value
        """
        ...

    @property
    def VisibleRange(self) -> Range:
        """ Get: VisibleRange(self: Window) -> Range """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Window) -> float
        Set: Width(self: Window) = value
        """
        ...

    @property
    def WindowNumber(self) -> int:
        """ Get: WindowNumber(self: Window) -> int """
        ...

    @property
    def WindowState(self) -> XlWindowState:
        """
        Get: WindowState(self: Window) -> XlWindowState
        Set: WindowState(self: Window) = value
        """
        ...

    @property
    def Zoom(self) -> object:
        """
        Get: Zoom(self: Window) -> object
        Set: Zoom(self: Window) = value
        """
        ...

    @property
    def _DisplayRightToLeft(self) -> bool:
        """
        Get: _DisplayRightToLeft(self: Window) -> bool
        Set: _DisplayRightToLeft(self: Window) = value
        """
        ...


    def Activate(self) -> object:
        """ Activate(self: Window) -> object """
        ...

    def ActivateNext(self) -> object:
        """ ActivateNext(self: Window) -> object """
        ...

    def ActivatePrevious(self) -> object:
        """ ActivatePrevious(self: Window) -> object """
        ...

    def Close(self, SaveChanges:object, Filename:object, RouteWorkbook:object) -> bool:
        """ Close(self: Window, SaveChanges: object, Filename: object, RouteWorkbook: object) -> bool """
        ...

    def LargeScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> object:
        """ LargeScroll(self: Window, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        ...

    def NewWindow(self) -> Window:
        """ NewWindow(self: Window) -> Window """
        ...

    def PointsToScreenPixelsX(self, Points:int) -> int:
        """ PointsToScreenPixelsX(self: Window, Points: int) -> int """
        ...

    def PointsToScreenPixelsY(self, Points:int) -> int:
        """ PointsToScreenPixelsY(self: Window, Points: int) -> int """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object) -> object:
        """ PrintOut(self: Window, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        ...

    def PrintPreview(self, EnableChanges:object) -> object:
        """ PrintPreview(self: Window, EnableChanges: object) -> object """
        ...

    def RangeFromPoint(self, x:int, y:int) -> object:
        """ RangeFromPoint(self: Window, x: int, y: int) -> object """
        ...

    def ScrollIntoView(self, Left:int, Top:int, Width:int, Height:int, Start:object): # -> 
        """ ScrollIntoView(self: Window, Left: int, Top: int, Width: int, Height: int, Start: object) """
        ...

    def ScrollWorkbookTabs(self, Sheets:object, Position:object) -> object:
        """ ScrollWorkbookTabs(self: Window, Sheets: object, Position: object) -> object """
        ...

    def SmallScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> object:
        """ SmallScroll(self: Window, Down: object, Up: object, ToRight: object, ToLeft: object) -> object """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object) -> object:
        """ _PrintOut(self: Window, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) -> object """
        ...


class Windows(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Windows) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Windows) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Windows) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Windows) -> object """
        ...

    @property
    def SyncScrollingSideBySide(self) -> bool:
        """
        Get: SyncScrollingSideBySide(self: Windows) -> bool
        Set: SyncScrollingSideBySide(self: Windows) = value
        """
        ...


    def Arrange(self, ArrangeStyle:XlArrangeStyle, ActiveWorkbook:object, SyncHorizontal:object, SyncVertical:object) -> object:
        """ Arrange(self: Windows, ArrangeStyle: XlArrangeStyle, ActiveWorkbook: object, SyncHorizontal: object, SyncVertical: object) -> object """
        ...

    def BreakSideBySide(self) -> bool:
        """ BreakSideBySide(self: Windows) -> bool """
        ...

    def CompareSideBySideWith(self, WindowName:object) -> bool:
        """ CompareSideBySideWith(self: Windows, WindowName: object) -> bool """
        ...

    def ResetPositionsSideBySide(self): # -> 
        """ ResetPositionsSideBySide(self: Windows) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class WorkbookEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Activate(self): # -> 
        """ add_Activate(self: WorkbookEvents_Event, : WorkbookEvents_ActivateEventHandler) """
        ...

    def add_AddinInstall(self): # -> 
        """ add_AddinInstall(self: WorkbookEvents_Event, : WorkbookEvents_AddinInstallEventHandler) """
        ...

    def add_AddinUninstall(self): # -> 
        """ add_AddinUninstall(self: WorkbookEvents_Event, : WorkbookEvents_AddinUninstallEventHandler) """
        ...

    def add_AfterSave(self): # -> 
        """ add_AfterSave(self: WorkbookEvents_Event, : WorkbookEvents_AfterSaveEventHandler) """
        ...

    def add_AfterXmlExport(self): # -> 
        """ add_AfterXmlExport(self: WorkbookEvents_Event, : WorkbookEvents_AfterXmlExportEventHandler) """
        ...

    def add_AfterXmlImport(self): # -> 
        """ add_AfterXmlImport(self: WorkbookEvents_Event, : WorkbookEvents_AfterXmlImportEventHandler) """
        ...

    def add_BeforeClose(self): # -> 
        """ add_BeforeClose(self: WorkbookEvents_Event, : WorkbookEvents_BeforeCloseEventHandler) """
        ...

    def add_BeforePrint(self): # -> 
        """ add_BeforePrint(self: WorkbookEvents_Event, : WorkbookEvents_BeforePrintEventHandler) """
        ...

    def add_BeforeSave(self): # -> 
        """ add_BeforeSave(self: WorkbookEvents_Event, : WorkbookEvents_BeforeSaveEventHandler) """
        ...

    def add_BeforeXmlExport(self): # -> 
        """ add_BeforeXmlExport(self: WorkbookEvents_Event, : WorkbookEvents_BeforeXmlExportEventHandler) """
        ...

    def add_BeforeXmlImport(self): # -> 
        """ add_BeforeXmlImport(self: WorkbookEvents_Event, : WorkbookEvents_BeforeXmlImportEventHandler) """
        ...

    def add_Deactivate(self): # -> 
        """ add_Deactivate(self: WorkbookEvents_Event, : WorkbookEvents_DeactivateEventHandler) """
        ...

    def add_ModelChange(self): # -> 
        """ add_ModelChange(self: WorkbookEvents_Event, : WorkbookEvents_ModelChangeEventHandler) """
        ...

    def add_NewChart(self): # -> 
        """ add_NewChart(self: WorkbookEvents_Event, : WorkbookEvents_NewChartEventHandler) """
        ...

    def add_NewSheet(self): # -> 
        """ add_NewSheet(self: WorkbookEvents_Event, : WorkbookEvents_NewSheetEventHandler) """
        ...

    def add_Open(self): # -> 
        """ add_Open(self: WorkbookEvents_Event, : WorkbookEvents_OpenEventHandler) """
        ...

    def add_PivotTableCloseConnection(self): # -> 
        """ add_PivotTableCloseConnection(self: WorkbookEvents_Event, : WorkbookEvents_PivotTableCloseConnectionEventHandler) """
        ...

    def add_PivotTableOpenConnection(self): # -> 
        """ add_PivotTableOpenConnection(self: WorkbookEvents_Event, : WorkbookEvents_PivotTableOpenConnectionEventHandler) """
        ...

    def add_RowsetComplete(self): # -> 
        """ add_RowsetComplete(self: WorkbookEvents_Event, : WorkbookEvents_RowsetCompleteEventHandler) """
        ...

    def add_SheetActivate(self): # -> 
        """ add_SheetActivate(self: WorkbookEvents_Event, : WorkbookEvents_SheetActivateEventHandler) """
        ...

    def add_SheetBeforeDelete(self): # -> 
        """ add_SheetBeforeDelete(self: WorkbookEvents_Event, : WorkbookEvents_SheetBeforeDeleteEventHandler) """
        ...

    def add_SheetBeforeDoubleClick(self): # -> 
        """ add_SheetBeforeDoubleClick(self: WorkbookEvents_Event, : WorkbookEvents_SheetBeforeDoubleClickEventHandler) """
        ...

    def add_SheetBeforeRightClick(self): # -> 
        """ add_SheetBeforeRightClick(self: WorkbookEvents_Event, : WorkbookEvents_SheetBeforeRightClickEventHandler) """
        ...

    def add_SheetCalculate(self): # -> 
        """ add_SheetCalculate(self: WorkbookEvents_Event, : WorkbookEvents_SheetCalculateEventHandler) """
        ...

    def add_SheetChange(self): # -> 
        """ add_SheetChange(self: WorkbookEvents_Event, : WorkbookEvents_SheetChangeEventHandler) """
        ...

    def add_SheetDeactivate(self): # -> 
        """ add_SheetDeactivate(self: WorkbookEvents_Event, : WorkbookEvents_SheetDeactivateEventHandler) """
        ...

    def add_SheetFollowHyperlink(self): # -> 
        """ add_SheetFollowHyperlink(self: WorkbookEvents_Event, : WorkbookEvents_SheetFollowHyperlinkEventHandler) """
        ...

    def add_SheetLensGalleryRenderComplete(self): # -> 
        """ add_SheetLensGalleryRenderComplete(self: WorkbookEvents_Event, : WorkbookEvents_SheetLensGalleryRenderCompleteEventHandler) """
        ...

    def add_SheetPivotTableAfterValueChange(self): # -> 
        """ add_SheetPivotTableAfterValueChange(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler) """
        ...

    def add_SheetPivotTableBeforeAllocateChanges(self): # -> 
        """ add_SheetPivotTableBeforeAllocateChanges(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler) """
        ...

    def add_SheetPivotTableBeforeCommitChanges(self): # -> 
        """ add_SheetPivotTableBeforeCommitChanges(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler) """
        ...

    def add_SheetPivotTableBeforeDiscardChanges(self): # -> 
        """ add_SheetPivotTableBeforeDiscardChanges(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler) """
        ...

    def add_SheetPivotTableChangeSync(self): # -> 
        """ add_SheetPivotTableChangeSync(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableChangeSyncEventHandler) """
        ...

    def add_SheetPivotTableUpdate(self): # -> 
        """ add_SheetPivotTableUpdate(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableUpdateEventHandler) """
        ...

    def add_SheetSelectionChange(self): # -> 
        """ add_SheetSelectionChange(self: WorkbookEvents_Event, : WorkbookEvents_SheetSelectionChangeEventHandler) """
        ...

    def add_SheetTableUpdate(self): # -> 
        """ add_SheetTableUpdate(self: WorkbookEvents_Event, : WorkbookEvents_SheetTableUpdateEventHandler) """
        ...

    def add_Sync(self): # -> 
        """ add_Sync(self: WorkbookEvents_Event, : WorkbookEvents_SyncEventHandler) """
        ...

    def add_WindowActivate(self): # -> 
        """ add_WindowActivate(self: WorkbookEvents_Event, : WorkbookEvents_WindowActivateEventHandler) """
        ...

    def add_WindowDeactivate(self): # -> 
        """ add_WindowDeactivate(self: WorkbookEvents_Event, : WorkbookEvents_WindowDeactivateEventHandler) """
        ...

    def add_WindowResize(self): # -> 
        """ add_WindowResize(self: WorkbookEvents_Event, : WorkbookEvents_WindowResizeEventHandler) """
        ...

    def remove_Activate(self): # -> 
        """ remove_Activate(self: WorkbookEvents_Event, : WorkbookEvents_ActivateEventHandler) """
        ...

    def remove_AddinInstall(self): # -> 
        """ remove_AddinInstall(self: WorkbookEvents_Event, : WorkbookEvents_AddinInstallEventHandler) """
        ...

    def remove_AddinUninstall(self): # -> 
        """ remove_AddinUninstall(self: WorkbookEvents_Event, : WorkbookEvents_AddinUninstallEventHandler) """
        ...

    def remove_AfterSave(self): # -> 
        """ remove_AfterSave(self: WorkbookEvents_Event, : WorkbookEvents_AfterSaveEventHandler) """
        ...

    def remove_AfterXmlExport(self): # -> 
        """ remove_AfterXmlExport(self: WorkbookEvents_Event, : WorkbookEvents_AfterXmlExportEventHandler) """
        ...

    def remove_AfterXmlImport(self): # -> 
        """ remove_AfterXmlImport(self: WorkbookEvents_Event, : WorkbookEvents_AfterXmlImportEventHandler) """
        ...

    def remove_BeforeClose(self): # -> 
        """ remove_BeforeClose(self: WorkbookEvents_Event, : WorkbookEvents_BeforeCloseEventHandler) """
        ...

    def remove_BeforePrint(self): # -> 
        """ remove_BeforePrint(self: WorkbookEvents_Event, : WorkbookEvents_BeforePrintEventHandler) """
        ...

    def remove_BeforeSave(self): # -> 
        """ remove_BeforeSave(self: WorkbookEvents_Event, : WorkbookEvents_BeforeSaveEventHandler) """
        ...

    def remove_BeforeXmlExport(self): # -> 
        """ remove_BeforeXmlExport(self: WorkbookEvents_Event, : WorkbookEvents_BeforeXmlExportEventHandler) """
        ...

    def remove_BeforeXmlImport(self): # -> 
        """ remove_BeforeXmlImport(self: WorkbookEvents_Event, : WorkbookEvents_BeforeXmlImportEventHandler) """
        ...

    def remove_Deactivate(self): # -> 
        """ remove_Deactivate(self: WorkbookEvents_Event, : WorkbookEvents_DeactivateEventHandler) """
        ...

    def remove_ModelChange(self): # -> 
        """ remove_ModelChange(self: WorkbookEvents_Event, : WorkbookEvents_ModelChangeEventHandler) """
        ...

    def remove_NewChart(self): # -> 
        """ remove_NewChart(self: WorkbookEvents_Event, : WorkbookEvents_NewChartEventHandler) """
        ...

    def remove_NewSheet(self): # -> 
        """ remove_NewSheet(self: WorkbookEvents_Event, : WorkbookEvents_NewSheetEventHandler) """
        ...

    def remove_Open(self): # -> 
        """ remove_Open(self: WorkbookEvents_Event, : WorkbookEvents_OpenEventHandler) """
        ...

    def remove_PivotTableCloseConnection(self): # -> 
        """ remove_PivotTableCloseConnection(self: WorkbookEvents_Event, : WorkbookEvents_PivotTableCloseConnectionEventHandler) """
        ...

    def remove_PivotTableOpenConnection(self): # -> 
        """ remove_PivotTableOpenConnection(self: WorkbookEvents_Event, : WorkbookEvents_PivotTableOpenConnectionEventHandler) """
        ...

    def remove_RowsetComplete(self): # -> 
        """ remove_RowsetComplete(self: WorkbookEvents_Event, : WorkbookEvents_RowsetCompleteEventHandler) """
        ...

    def remove_SheetActivate(self): # -> 
        """ remove_SheetActivate(self: WorkbookEvents_Event, : WorkbookEvents_SheetActivateEventHandler) """
        ...

    def remove_SheetBeforeDelete(self): # -> 
        """ remove_SheetBeforeDelete(self: WorkbookEvents_Event, : WorkbookEvents_SheetBeforeDeleteEventHandler) """
        ...

    def remove_SheetBeforeDoubleClick(self): # -> 
        """ remove_SheetBeforeDoubleClick(self: WorkbookEvents_Event, : WorkbookEvents_SheetBeforeDoubleClickEventHandler) """
        ...

    def remove_SheetBeforeRightClick(self): # -> 
        """ remove_SheetBeforeRightClick(self: WorkbookEvents_Event, : WorkbookEvents_SheetBeforeRightClickEventHandler) """
        ...

    def remove_SheetCalculate(self): # -> 
        """ remove_SheetCalculate(self: WorkbookEvents_Event, : WorkbookEvents_SheetCalculateEventHandler) """
        ...

    def remove_SheetChange(self): # -> 
        """ remove_SheetChange(self: WorkbookEvents_Event, : WorkbookEvents_SheetChangeEventHandler) """
        ...

    def remove_SheetDeactivate(self): # -> 
        """ remove_SheetDeactivate(self: WorkbookEvents_Event, : WorkbookEvents_SheetDeactivateEventHandler) """
        ...

    def remove_SheetFollowHyperlink(self): # -> 
        """ remove_SheetFollowHyperlink(self: WorkbookEvents_Event, : WorkbookEvents_SheetFollowHyperlinkEventHandler) """
        ...

    def remove_SheetLensGalleryRenderComplete(self): # -> 
        """ remove_SheetLensGalleryRenderComplete(self: WorkbookEvents_Event, : WorkbookEvents_SheetLensGalleryRenderCompleteEventHandler) """
        ...

    def remove_SheetPivotTableAfterValueChange(self): # -> 
        """ remove_SheetPivotTableAfterValueChange(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler) """
        ...

    def remove_SheetPivotTableBeforeAllocateChanges(self): # -> 
        """ remove_SheetPivotTableBeforeAllocateChanges(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler) """
        ...

    def remove_SheetPivotTableBeforeCommitChanges(self): # -> 
        """ remove_SheetPivotTableBeforeCommitChanges(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler) """
        ...

    def remove_SheetPivotTableBeforeDiscardChanges(self): # -> 
        """ remove_SheetPivotTableBeforeDiscardChanges(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler) """
        ...

    def remove_SheetPivotTableChangeSync(self): # -> 
        """ remove_SheetPivotTableChangeSync(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableChangeSyncEventHandler) """
        ...

    def remove_SheetPivotTableUpdate(self): # -> 
        """ remove_SheetPivotTableUpdate(self: WorkbookEvents_Event, : WorkbookEvents_SheetPivotTableUpdateEventHandler) """
        ...

    def remove_SheetSelectionChange(self): # -> 
        """ remove_SheetSelectionChange(self: WorkbookEvents_Event, : WorkbookEvents_SheetSelectionChangeEventHandler) """
        ...

    def remove_SheetTableUpdate(self): # -> 
        """ remove_SheetTableUpdate(self: WorkbookEvents_Event, : WorkbookEvents_SheetTableUpdateEventHandler) """
        ...

    def remove_Sync(self): # -> 
        """ remove_Sync(self: WorkbookEvents_Event, : WorkbookEvents_SyncEventHandler) """
        ...

    def remove_WindowActivate(self): # -> 
        """ remove_WindowActivate(self: WorkbookEvents_Event, : WorkbookEvents_WindowActivateEventHandler) """
        ...

    def remove_WindowDeactivate(self): # -> 
        """ remove_WindowDeactivate(self: WorkbookEvents_Event, : WorkbookEvents_WindowDeactivateEventHandler) """
        ...

    def remove_WindowResize(self): # -> 
        """ remove_WindowResize(self: WorkbookEvents_Event, : WorkbookEvents_WindowResizeEventHandler) """
        ...

    Activate = ...
    AddinInstall = ...
    AddinUninstall = ...
    AfterSave = ...
    AfterXmlExport = ...
    AfterXmlImport = ...
    BeforeClose = ...
    BeforePrint = ...
    BeforeSave = ...
    BeforeXmlExport = ...
    BeforeXmlImport = ...
    Deactivate = ...
    ModelChange = ...
    NewChart = ...
    NewSheet = ...
    Open = ...
    PivotTableCloseConnection = ...
    PivotTableOpenConnection = ...
    RowsetComplete = ...
    SheetActivate = ...
    SheetBeforeDelete = ...
    SheetBeforeDoubleClick = ...
    SheetBeforeRightClick = ...
    SheetCalculate = ...
    SheetChange = ...
    SheetDeactivate = ...
    SheetFollowHyperlink = ...
    SheetLensGalleryRenderComplete = ...
    SheetPivotTableAfterValueChange = ...
    SheetPivotTableBeforeAllocateChanges = ...
    SheetPivotTableBeforeCommitChanges = ...
    SheetPivotTableBeforeDiscardChanges = ...
    SheetPivotTableChangeSync = ...
    SheetPivotTableUpdate = ...
    SheetSelectionChange = ...
    SheetTableUpdate = ...
    Sync = ...
    WindowActivate = ...
    WindowDeactivate = ...
    WindowResize = ...


class _Workbook: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AcceptLabelsInFormulas(self) -> bool:
        """
        Get: AcceptLabelsInFormulas(self: _Workbook) -> bool
        Set: AcceptLabelsInFormulas(self: _Workbook) = value
        """
        ...

    @property
    def AccuracyVersion(self) -> int:
        """
        Get: AccuracyVersion(self: _Workbook) -> int
        Set: AccuracyVersion(self: _Workbook) = value
        """
        ...

    @property
    def ActiveChart(self) -> Chart:
        """ Get: ActiveChart(self: _Workbook) -> Chart """
        ...

    @property
    def ActiveSheet(self) -> object:
        """ Get: ActiveSheet(self: _Workbook) -> object """
        ...

    @property
    def ActiveSlicer(self) -> Slicer:
        """ Get: ActiveSlicer(self: _Workbook) -> Slicer """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Workbook) -> Application """
        ...

    @property
    def Author(self) -> str:
        """
        Get: Author(self: _Workbook) -> str
        Set: Author(self: _Workbook) = value
        """
        ...

    @property
    def AutoUpdateFrequency(self) -> int:
        """
        Get: AutoUpdateFrequency(self: _Workbook) -> int
        Set: AutoUpdateFrequency(self: _Workbook) = value
        """
        ...

    @property
    def AutoUpdateSaveChanges(self) -> bool:
        """
        Get: AutoUpdateSaveChanges(self: _Workbook) -> bool
        Set: AutoUpdateSaveChanges(self: _Workbook) = value
        """
        ...

    @property
    def BuiltinDocumentProperties(self) -> object:
        """ Get: BuiltinDocumentProperties(self: _Workbook) -> object """
        ...

    @property
    def CalculationVersion(self) -> int:
        """ Get: CalculationVersion(self: _Workbook) -> int """
        ...

    @property
    def CaseSensitive(self) -> bool:
        """ Get: CaseSensitive(self: _Workbook) -> bool """
        ...

    @property
    def ChangeHistoryDuration(self) -> int:
        """
        Get: ChangeHistoryDuration(self: _Workbook) -> int
        Set: ChangeHistoryDuration(self: _Workbook) = value
        """
        ...

    @property
    def ChartDataPointTrack(self) -> bool:
        """
        Get: ChartDataPointTrack(self: _Workbook) -> bool
        Set: ChartDataPointTrack(self: _Workbook) = value
        """
        ...

    @property
    def Charts(self) -> Sheets:
        """ Get: Charts(self: _Workbook) -> Sheets """
        ...

    @property
    def CheckCompatibility(self) -> bool:
        """
        Get: CheckCompatibility(self: _Workbook) -> bool
        Set: CheckCompatibility(self: _Workbook) = value
        """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: _Workbook) -> str """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: _Workbook) -> CommandBars """
        ...

    @property
    def Comments(self) -> str:
        """
        Get: Comments(self: _Workbook) -> str
        Set: Comments(self: _Workbook) = value
        """
        ...

    @property
    def ConflictResolution(self) -> XlSaveConflictResolution:
        """
        Get: ConflictResolution(self: _Workbook) -> XlSaveConflictResolution
        Set: ConflictResolution(self: _Workbook) = value
        """
        ...

    @property
    def Connections(self) -> Connections:
        """ Get: Connections(self: _Workbook) -> Connections """
        ...

    @property
    def ConnectionsDisabled(self) -> bool:
        """ Get: ConnectionsDisabled(self: _Workbook) -> bool """
        ...

    @property
    def Container(self) -> object:
        """ Get: Container(self: _Workbook) -> object """
        ...

    @property
    def ContentTypeProperties(self): # -> MetaProperties
        """ Get: ContentTypeProperties(self: _Workbook) -> MetaProperties """
        ...

    @property
    def CreateBackup(self) -> bool:
        """ Get: CreateBackup(self: _Workbook) -> bool """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: _Workbook) -> XlCreator """
        ...

    @property
    def CustomDocumentProperties(self) -> object:
        """ Get: CustomDocumentProperties(self: _Workbook) -> object """
        ...

    @property
    def CustomViews(self) -> CustomViews:
        """ Get: CustomViews(self: _Workbook) -> CustomViews """
        ...

    @property
    def CustomXMLParts(self): # -> CustomXMLParts
        """ Get: CustomXMLParts(self: _Workbook) -> CustomXMLParts """
        ...

    @property
    def Date1904(self) -> bool:
        """
        Get: Date1904(self: _Workbook) -> bool
        Set: Date1904(self: _Workbook) = value
        """
        ...

    @property
    def DefaultPivotTableStyle(self) -> object:
        """
        Get: DefaultPivotTableStyle(self: _Workbook) -> object
        Set: DefaultPivotTableStyle(self: _Workbook) = value
        """
        ...

    @property
    def DefaultSlicerStyle(self) -> object:
        """
        Get: DefaultSlicerStyle(self: _Workbook) -> object
        Set: DefaultSlicerStyle(self: _Workbook) = value
        """
        ...

    @property
    def DefaultTableStyle(self) -> object:
        """
        Get: DefaultTableStyle(self: _Workbook) -> object
        Set: DefaultTableStyle(self: _Workbook) = value
        """
        ...

    @property
    def DefaultTimelineStyle(self) -> object:
        """
        Get: DefaultTimelineStyle(self: _Workbook) -> object
        Set: DefaultTimelineStyle(self: _Workbook) = value
        """
        ...

    @property
    def DialogSheets(self) -> Sheets:
        """ Get: DialogSheets(self: _Workbook) -> Sheets """
        ...

    @property
    def DisplayDrawingObjects(self) -> XlDisplayDrawingObjects:
        """
        Get: DisplayDrawingObjects(self: _Workbook) -> XlDisplayDrawingObjects
        Set: DisplayDrawingObjects(self: _Workbook) = value
        """
        ...

    @property
    def DisplayInkComments(self) -> bool:
        """
        Get: DisplayInkComments(self: _Workbook) -> bool
        Set: DisplayInkComments(self: _Workbook) = value
        """
        ...

    @property
    def DocumentInspectors(self): # -> DocumentInspectors
        """ Get: DocumentInspectors(self: _Workbook) -> DocumentInspectors """
        ...

    @property
    def DocumentLibraryVersions(self): # -> DocumentLibraryVersions
        """ Get: DocumentLibraryVersions(self: _Workbook) -> DocumentLibraryVersions """
        ...

    @property
    def DoNotPromptForConvert(self) -> bool:
        """
        Get: DoNotPromptForConvert(self: _Workbook) -> bool
        Set: DoNotPromptForConvert(self: _Workbook) = value
        """
        ...

    @property
    def EnableAutoRecover(self) -> bool:
        """
        Get: EnableAutoRecover(self: _Workbook) -> bool
        Set: EnableAutoRecover(self: _Workbook) = value
        """
        ...

    @property
    def EncryptionProvider(self) -> str:
        """
        Get: EncryptionProvider(self: _Workbook) -> str
        Set: EncryptionProvider(self: _Workbook) = value
        """
        ...

    @property
    def EnvelopeVisible(self) -> bool:
        """
        Get: EnvelopeVisible(self: _Workbook) -> bool
        Set: EnvelopeVisible(self: _Workbook) = value
        """
        ...

    @property
    def Excel4IntlMacroSheets(self) -> Sheets:
        """ Get: Excel4IntlMacroSheets(self: _Workbook) -> Sheets """
        ...

    @property
    def Excel4MacroSheets(self) -> Sheets:
        """ Get: Excel4MacroSheets(self: _Workbook) -> Sheets """
        ...

    @property
    def Excel8CompatibilityMode(self) -> bool:
        """ Get: Excel8CompatibilityMode(self: _Workbook) -> bool """
        ...

    @property
    def FileFormat(self) -> XlFileFormat:
        """ Get: FileFormat(self: _Workbook) -> XlFileFormat """
        ...

    @property
    def Final(self) -> bool:
        """
        Get: Final(self: _Workbook) -> bool
        Set: Final(self: _Workbook) = value
        """
        ...

    @property
    def ForceFullCalculation(self) -> bool:
        """
        Get: ForceFullCalculation(self: _Workbook) -> bool
        Set: ForceFullCalculation(self: _Workbook) = value
        """
        ...

    @property
    def FullName(self) -> str:
        """ Get: FullName(self: _Workbook) -> str """
        ...

    @property
    def FullNameURLEncoded(self) -> str:
        """ Get: FullNameURLEncoded(self: _Workbook) -> str """
        ...

    @property
    def HasMailer(self) -> bool:
        """
        Get: HasMailer(self: _Workbook) -> bool
        Set: HasMailer(self: _Workbook) = value
        """
        ...

    @property
    def HasPassword(self) -> bool:
        """ Get: HasPassword(self: _Workbook) -> bool """
        ...

    @property
    def HasRoutingSlip(self) -> bool:
        """
        Get: HasRoutingSlip(self: _Workbook) -> bool
        Set: HasRoutingSlip(self: _Workbook) = value
        """
        ...

    @property
    def HasVBProject(self) -> bool:
        """ Get: HasVBProject(self: _Workbook) -> bool """
        ...

    @property
    def HighlightChangesOnScreen(self) -> bool:
        """
        Get: HighlightChangesOnScreen(self: _Workbook) -> bool
        Set: HighlightChangesOnScreen(self: _Workbook) = value
        """
        ...

    @property
    def HTMLProject(self): # -> HTMLProject
        """ Get: HTMLProject(self: _Workbook) -> HTMLProject """
        ...

    @property
    def IconSets(self) -> IconSets:
        """ Get: IconSets(self: _Workbook) -> IconSets """
        ...

    @property
    def InactiveListBorderVisible(self) -> bool:
        """
        Get: InactiveListBorderVisible(self: _Workbook) -> bool
        Set: InactiveListBorderVisible(self: _Workbook) = value
        """
        ...

    @property
    def IsAddin(self) -> bool:
        """
        Get: IsAddin(self: _Workbook) -> bool
        Set: IsAddin(self: _Workbook) = value
        """
        ...

    @property
    def IsInplace(self) -> bool:
        """ Get: IsInplace(self: _Workbook) -> bool """
        ...

    @property
    def KeepChangeHistory(self) -> bool:
        """
        Get: KeepChangeHistory(self: _Workbook) -> bool
        Set: KeepChangeHistory(self: _Workbook) = value
        """
        ...

    @property
    def Keywords(self) -> str:
        """
        Get: Keywords(self: _Workbook) -> str
        Set: Keywords(self: _Workbook) = value
        """
        ...

    @property
    def ListChangesOnNewSheet(self) -> bool:
        """
        Get: ListChangesOnNewSheet(self: _Workbook) -> bool
        Set: ListChangesOnNewSheet(self: _Workbook) = value
        """
        ...

    @property
    def Mailer(self) -> Mailer:
        """ Get: Mailer(self: _Workbook) -> Mailer """
        ...

    @property
    def Model(self) -> Model:
        """ Get: Model(self: _Workbook) -> Model """
        ...

    @property
    def Modules(self) -> Sheets:
        """ Get: Modules(self: _Workbook) -> Sheets """
        ...

    @property
    def MultiUserEditing(self) -> bool:
        """ Get: MultiUserEditing(self: _Workbook) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _Workbook) -> str """
        ...

    @property
    def Names(self) -> Names:
        """ Get: Names(self: _Workbook) -> Names """
        ...

    @property
    def OnSave(self) -> str:
        """
        Get: OnSave(self: _Workbook) -> str
        Set: OnSave(self: _Workbook) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: _Workbook) -> str
        Set: OnSheetActivate(self: _Workbook) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: _Workbook) -> str
        Set: OnSheetDeactivate(self: _Workbook) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Workbook) -> object """
        ...

    @property
    def Password(self) -> str:
        """
        Get: Password(self: _Workbook) -> str
        Set: Password(self: _Workbook) = value
        """
        ...

    @property
    def PasswordEncryptionAlgorithm(self) -> str:
        """ Get: PasswordEncryptionAlgorithm(self: _Workbook) -> str """
        ...

    @property
    def PasswordEncryptionFileProperties(self) -> bool:
        """ Get: PasswordEncryptionFileProperties(self: _Workbook) -> bool """
        ...

    @property
    def PasswordEncryptionKeyLength(self) -> int:
        """ Get: PasswordEncryptionKeyLength(self: _Workbook) -> int """
        ...

    @property
    def PasswordEncryptionProvider(self) -> str:
        """ Get: PasswordEncryptionProvider(self: _Workbook) -> str """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: _Workbook) -> str """
        ...

    @property
    def Permission(self): # -> Permission
        """ Get: Permission(self: _Workbook) -> Permission """
        ...

    @property
    def PersonalViewListSettings(self) -> bool:
        """
        Get: PersonalViewListSettings(self: _Workbook) -> bool
        Set: PersonalViewListSettings(self: _Workbook) = value
        """
        ...

    @property
    def PersonalViewPrintSettings(self) -> bool:
        """
        Get: PersonalViewPrintSettings(self: _Workbook) -> bool
        Set: PersonalViewPrintSettings(self: _Workbook) = value
        """
        ...

    @property
    def PivotTables(self) -> object:
        """ Get: PivotTables(self: _Workbook) -> object """
        ...

    @property
    def PrecisionAsDisplayed(self) -> bool:
        """
        Get: PrecisionAsDisplayed(self: _Workbook) -> bool
        Set: PrecisionAsDisplayed(self: _Workbook) = value
        """
        ...

    @property
    def ProtectStructure(self) -> bool:
        """ Get: ProtectStructure(self: _Workbook) -> bool """
        ...

    @property
    def ProtectWindows(self) -> bool:
        """ Get: ProtectWindows(self: _Workbook) -> bool """
        ...

    @property
    def PublishObjects(self) -> PublishObjects:
        """ Get: PublishObjects(self: _Workbook) -> PublishObjects """
        ...

    @property
    def ReadOnly(self) -> bool:
        """ Get: ReadOnly(self: _Workbook) -> bool """
        ...

    @property
    def ReadOnlyRecommended(self) -> bool:
        """
        Get: ReadOnlyRecommended(self: _Workbook) -> bool
        Set: ReadOnlyRecommended(self: _Workbook) = value
        """
        ...

    @property
    def RemovePersonalInformation(self) -> bool:
        """
        Get: RemovePersonalInformation(self: _Workbook) -> bool
        Set: RemovePersonalInformation(self: _Workbook) = value
        """
        ...

    @property
    def Research(self) -> Research:
        """ Get: Research(self: _Workbook) -> Research """
        ...

    @property
    def RevisionNumber(self) -> int:
        """ Get: RevisionNumber(self: _Workbook) -> int """
        ...

    @property
    def Routed(self) -> bool:
        """ Get: Routed(self: _Workbook) -> bool """
        ...

    @property
    def RoutingSlip(self) -> RoutingSlip:
        """ Get: RoutingSlip(self: _Workbook) -> RoutingSlip """
        ...

    @property
    def Saved(self) -> bool:
        """
        Get: Saved(self: _Workbook) -> bool
        Set: Saved(self: _Workbook) = value
        """
        ...

    @property
    def SaveLinkValues(self) -> bool:
        """
        Get: SaveLinkValues(self: _Workbook) -> bool
        Set: SaveLinkValues(self: _Workbook) = value
        """
        ...

    @property
    def ServerPolicy(self): # -> ServerPolicy
        """ Get: ServerPolicy(self: _Workbook) -> ServerPolicy """
        ...

    @property
    def ServerViewableItems(self) -> ServerViewableItems:
        """ Get: ServerViewableItems(self: _Workbook) -> ServerViewableItems """
        ...

    @property
    def SharedWorkspace(self): # -> SharedWorkspace
        """ Get: SharedWorkspace(self: _Workbook) -> SharedWorkspace """
        ...

    @property
    def Sheets(self) -> Sheets:
        """ Get: Sheets(self: _Workbook) -> Sheets """
        ...

    @property
    def ShowConflictHistory(self) -> bool:
        """
        Get: ShowConflictHistory(self: _Workbook) -> bool
        Set: ShowConflictHistory(self: _Workbook) = value
        """
        ...

    @property
    def ShowPivotChartActiveFields(self) -> bool:
        """
        Get: ShowPivotChartActiveFields(self: _Workbook) -> bool
        Set: ShowPivotChartActiveFields(self: _Workbook) = value
        """
        ...

    @property
    def ShowPivotTableFieldList(self) -> bool:
        """
        Get: ShowPivotTableFieldList(self: _Workbook) -> bool
        Set: ShowPivotTableFieldList(self: _Workbook) = value
        """
        ...

    @property
    def Signatures(self): # -> SignatureSet
        """ Get: Signatures(self: _Workbook) -> SignatureSet """
        ...

    @property
    def SlicerCaches(self) -> SlicerCaches:
        """ Get: SlicerCaches(self: _Workbook) -> SlicerCaches """
        ...

    @property
    def SmartDocument(self): # -> SmartDocument
        """ Get: SmartDocument(self: _Workbook) -> SmartDocument """
        ...

    @property
    def SmartTagOptions(self) -> SmartTagOptions:
        """ Get: SmartTagOptions(self: _Workbook) -> SmartTagOptions """
        ...

    @property
    def Styles(self) -> Styles:
        """ Get: Styles(self: _Workbook) -> Styles """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _Workbook) -> str
        Set: Subject(self: _Workbook) = value
        """
        ...

    @property
    def Sync(self): # -> Sync
        """ Get: Sync(self: _Workbook) -> Sync """
        ...

    @property
    def TableStyles(self) -> TableStyles:
        """ Get: TableStyles(self: _Workbook) -> TableStyles """
        ...

    @property
    def TemplateRemoveExtData(self) -> bool:
        """
        Get: TemplateRemoveExtData(self: _Workbook) -> bool
        Set: TemplateRemoveExtData(self: _Workbook) = value
        """
        ...

    @property
    def Theme(self): # -> OfficeTheme
        """ Get: Theme(self: _Workbook) -> OfficeTheme """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: _Workbook) -> str
        Set: Title(self: _Workbook) = value
        """
        ...

    @property
    def UpdateLinks(self) -> XlUpdateLinks:
        """
        Get: UpdateLinks(self: _Workbook) -> XlUpdateLinks
        Set: UpdateLinks(self: _Workbook) = value
        """
        ...

    @property
    def UpdateRemoteReferences(self) -> bool:
        """
        Get: UpdateRemoteReferences(self: _Workbook) -> bool
        Set: UpdateRemoteReferences(self: _Workbook) = value
        """
        ...

    @property
    def UserControl(self) -> bool:
        """
        Get: UserControl(self: _Workbook) -> bool
        Set: UserControl(self: _Workbook) = value
        """
        ...

    @property
    def UserStatus(self) -> object:
        """ Get: UserStatus(self: _Workbook) -> object """
        ...

    @property
    def UseWholeCellCriteria(self) -> bool:
        """ Get: UseWholeCellCriteria(self: _Workbook) -> bool """
        ...

    @property
    def UseWildcards(self) -> bool:
        """ Get: UseWildcards(self: _Workbook) -> bool """
        ...

    @property
    def VBASigned(self) -> bool:
        """ Get: VBASigned(self: _Workbook) -> bool """
        ...

    @property
    def VBProject(self) -> VBProject:
        """ Get: VBProject(self: _Workbook) -> VBProject """
        ...

    @property
    def WebOptions(self) -> WebOptions:
        """ Get: WebOptions(self: _Workbook) -> WebOptions """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: _Workbook) -> Windows """
        ...

    @property
    def Worksheets(self) -> Sheets:
        """ Get: Worksheets(self: _Workbook) -> Sheets """
        ...

    @property
    def WritePassword(self) -> str:
        """
        Get: WritePassword(self: _Workbook) -> str
        Set: WritePassword(self: _Workbook) = value
        """
        ...

    @property
    def WriteReserved(self) -> bool:
        """ Get: WriteReserved(self: _Workbook) -> bool """
        ...

    @property
    def WriteReservedBy(self) -> str:
        """ Get: WriteReservedBy(self: _Workbook) -> str """
        ...

    @property
    def XmlMaps(self) -> XmlMaps:
        """ Get: XmlMaps(self: _Workbook) -> XmlMaps """
        ...

    @property
    def XmlNamespaces(self) -> XmlNamespaces:
        """ Get: XmlNamespaces(self: _Workbook) -> XmlNamespaces """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: _Workbook) -> str
        Set: _CodeName(self: _Workbook) = value
        """
        ...

    @property
    def _ReadOnlyRecommended(self) -> bool:
        """ Get: _ReadOnlyRecommended(self: _Workbook) -> bool """
        ...


    def AcceptAllChanges(self, When:object, Who:object, Where:object): # -> 
        """ AcceptAllChanges(self: _Workbook, When: object, Who: object, Where: object) """
        ...

    def Activate(self): # -> 
        """ Activate(self: _Workbook) """
        ...

    def AddToFavorites(self): # -> 
        """ AddToFavorites(self: _Workbook) """
        ...

    def ApplyTheme(self, Filename:str): # -> 
        """ ApplyTheme(self: _Workbook, Filename: str) """
        ...

    def BreakLink(self, Name:str, Type:XlLinkType): # -> 
        """ BreakLink(self: _Workbook, Name: str, Type: XlLinkType) """
        ...

    def CanCheckIn(self) -> bool:
        """ CanCheckIn(self: _Workbook) -> bool """
        ...

    def ChangeFileAccess(self, Mode:XlFileAccess, WritePassword:object, Notify:object): # -> 
        """ ChangeFileAccess(self: _Workbook, Mode: XlFileAccess, WritePassword: object, Notify: object) """
        ...

    def ChangeLink(self, Name:str, NewName:str, Type:XlLinkType): # -> 
        """ ChangeLink(self: _Workbook, Name: str, NewName: str, Type: XlLinkType) """
        ...

    def CheckIn(self, SaveChanges:object, Comments:object, MakePublic:object): # -> 
        """ CheckIn(self: _Workbook, SaveChanges: object, Comments: object, MakePublic: object) """
        ...

    def CheckInWithVersion(self, SaveChanges:object, Comments:object, MakePublic:object, VersionType:object): # -> 
        """ CheckInWithVersion(self: _Workbook, SaveChanges: object, Comments: object, MakePublic: object, VersionType: object) """
        ...

    def Close(self, SaveChanges:object, Filename:object, RouteWorkbook:object): # -> 
        """ Close(self: _Workbook, SaveChanges: object, Filename: object, RouteWorkbook: object) """
        ...

    def DeleteNumberFormat(self, NumberFormat:str): # -> 
        """ DeleteNumberFormat(self: _Workbook, NumberFormat: str) """
        ...

    def Dummy16(self): # -> 
        """ Dummy16(self: _Workbook) """
        ...

    def Dummy17(self, calcid:int): # -> 
        """ Dummy17(self: _Workbook, calcid: int) """
        ...

    def Dummy26(self): # -> 
        """ Dummy26(self: _Workbook) """
        ...

    def Dummy27(self): # -> 
        """ Dummy27(self: _Workbook) """
        ...

    def EnableConnections(self): # -> 
        """ EnableConnections(self: _Workbook) """
        ...

    def EndReview(self): # -> 
        """ EndReview(self: _Workbook) """
        ...

    def ExclusiveAccess(self) -> bool:
        """ ExclusiveAccess(self: _Workbook) -> bool """
        ...

    def ExportAsFixedFormat(self, Type:XlFixedFormatType, Filename:object, Quality:object, IncludeDocProperties:object, IgnorePrintAreas:object, From:object, To:object, OpenAfterPublish:object, FixedFormatExtClassPtr:object): # -> 
        """ ExportAsFixedFormat(self: _Workbook, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        ...

    def FollowHyperlink(self, Address:str, SubAddress:object, NewWindow:object, AddHistory:object, ExtraInfo:object, Method:object, HeaderInfo:object): # -> 
        """ FollowHyperlink(self: _Workbook, Address: str, SubAddress: object, NewWindow: object, AddHistory: object, ExtraInfo: object, Method: object, HeaderInfo: object) """
        ...

    def ForwardMailer(self): # -> 
        """ ForwardMailer(self: _Workbook) """
        ...

    def GetWorkflowTasks(self): # -> WorkflowTasks
        """ GetWorkflowTasks(self: _Workbook) -> WorkflowTasks """
        ...

    def GetWorkflowTemplates(self): # -> WorkflowTemplates
        """ GetWorkflowTemplates(self: _Workbook) -> WorkflowTemplates """
        ...

    def HighlightChangesOptions(self, When:object, Who:object, Where:object): # -> 
        """ HighlightChangesOptions(self: _Workbook, When: object, Who: object, Where: object) """
        ...

    def LinkInfo(self, Name:str, LinkInfo:XlLinkInfo, Type:object, EditionRef:object) -> object:
        """ LinkInfo(self: _Workbook, Name: str, LinkInfo: XlLinkInfo, Type: object, EditionRef: object) -> object """
        ...

    def LinkSources(self, Type:object) -> object:
        """ LinkSources(self: _Workbook, Type: object) -> object """
        ...

    def LockServerFile(self): # -> 
        """ LockServerFile(self: _Workbook) """
        ...

    def MergeWorkbook(self, Filename:object): # -> 
        """ MergeWorkbook(self: _Workbook, Filename: object) """
        ...

    def NewWindow(self) -> Window:
        """ NewWindow(self: _Workbook) -> Window """
        ...

    def OpenLinks(self, Name:str, ReadOnly:object, Type:object): # -> 
        """ OpenLinks(self: _Workbook, Name: str, ReadOnly: object, Type: object) """
        ...

    def PivotCaches(self) -> PivotCaches:
        """ PivotCaches(self: _Workbook) -> PivotCaches """
        ...

    def PivotTableWizard(self, SourceType:object, SourceData:object, TableDestination:object, TableName:object, RowGrand:object, ColumnGrand:object, SaveData:object, HasAutoFormat:object, AutoPage:object, Reserved:object, BackgroundQuery:object, OptimizeCache:object, PageFieldOrder:object, PageFieldWrapCount:object, ReadData:object, Connection:object): # -> 
        """ PivotTableWizard(self: _Workbook, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) """
        ...

    def Post(self, DestName:object): # -> 
        """ Post(self: _Workbook, DestName: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: _Workbook, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object, IgnorePrintAreas:object): # -> 
        """ PrintOutEx(self: _Workbook, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: _Workbook, EnableChanges: object) """
        ...

    def Protect(self, Password:object, Structure:object, Windows:object): # -> 
        """ Protect(self: _Workbook, Password: object, Structure: object, Windows: object) """
        ...

    def ProtectSharing(self, Filename:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, SharingPassword:object): # -> 
        """ ProtectSharing(self: _Workbook, Filename: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, SharingPassword: object) """
        ...

    def ProtectSharingEx(self, Filename:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, SharingPassword:object, FileFormat:object): # -> 
        """ ProtectSharingEx(self: _Workbook, Filename: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, SharingPassword: object, FileFormat: object) """
        ...

    def PurgeChangeHistoryNow(self, Days:int, SharingPassword:object): # -> 
        """ PurgeChangeHistoryNow(self: _Workbook, Days: int, SharingPassword: object) """
        ...

    def RecheckSmartTags(self): # -> 
        """ RecheckSmartTags(self: _Workbook) """
        ...

    def RefreshAll(self): # -> 
        """ RefreshAll(self: _Workbook) """
        ...

    def RejectAllChanges(self, When:object, Who:object, Where:object): # -> 
        """ RejectAllChanges(self: _Workbook, When: object, Who: object, Where: object) """
        ...

    def ReloadAs(self, Encoding): # ->  # Not found arg types: {'Encoding': 'MsoEncoding'}
        """ ReloadAs(self: _Workbook, Encoding: MsoEncoding) """
        ...

    def RemoveDocumentInformation(self, RemoveDocInfoType:XlRemoveDocInfoType): # -> 
        """ RemoveDocumentInformation(self: _Workbook, RemoveDocInfoType: XlRemoveDocInfoType) """
        ...

    def RemoveUser(self, Index:int): # -> 
        """ RemoveUser(self: _Workbook, Index: int) """
        ...

    def Reply(self): # -> 
        """ Reply(self: _Workbook) """
        ...

    def ReplyAll(self): # -> 
        """ ReplyAll(self: _Workbook) """
        ...

    def ReplyWithChanges(self, ShowMessage:object): # -> 
        """ ReplyWithChanges(self: _Workbook, ShowMessage: object) """
        ...

    def ResetColors(self): # -> 
        """ ResetColors(self: _Workbook) """
        ...

    def Route(self): # -> 
        """ Route(self: _Workbook) """
        ...

    def RunAutoMacros(self, Which:XlRunAutoMacro): # -> 
        """ RunAutoMacros(self: _Workbook, Which: XlRunAutoMacro) """
        ...

    def Save(self): # -> 
        """ Save(self: _Workbook) """
        ...

    def SaveAs(self, Filename:object, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AccessMode:XlSaveAsAccessMode, ConflictResolution:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object, Local:object): # -> 
        """ SaveAs(self: _Workbook, Filename: object, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AccessMode: XlSaveAsAccessMode, ConflictResolution: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        ...

    def SaveAsXMLData(self, Filename:str, Map:XmlMap): # -> 
        """ SaveAsXMLData(self: _Workbook, Filename: str, Map: XmlMap) """
        ...

    def SaveCopyAs(self, Filename:object): # -> 
        """ SaveCopyAs(self: _Workbook, Filename: object) """
        ...

    def sblt(self, s:str): # -> 
        """ sblt(self: _Workbook, s: str) """
        ...

    def SendFaxOverInternet(self, Recipients:object, Subject:object, ShowMessage:object): # -> 
        """ SendFaxOverInternet(self: _Workbook, Recipients: object, Subject: object, ShowMessage: object) """
        ...

    def SendForReview(self, Recipients:object, Subject:object, ShowMessage:object, IncludeAttachment:object): # -> 
        """ SendForReview(self: _Workbook, Recipients: object, Subject: object, ShowMessage: object, IncludeAttachment: object) """
        ...

    def SendMail(self, Recipients:object, Subject:object, ReturnReceipt:object): # -> 
        """ SendMail(self: _Workbook, Recipients: object, Subject: object, ReturnReceipt: object) """
        ...

    def SendMailer(self, FileFormat:object, Priority:XlPriority): # -> 
        """ SendMailer(self: _Workbook, FileFormat: object, Priority: XlPriority) """
        ...

    def SetLinkOnData(self, Name:str, Procedure:object): # -> 
        """ SetLinkOnData(self: _Workbook, Name: str, Procedure: object) """
        ...

    def SetPasswordEncryptionOptions(self, PasswordEncryptionProvider:object, PasswordEncryptionAlgorithm:object, PasswordEncryptionKeyLength:object, PasswordEncryptionFileProperties:object): # -> 
        """ SetPasswordEncryptionOptions(self: _Workbook, PasswordEncryptionProvider: object, PasswordEncryptionAlgorithm: object, PasswordEncryptionKeyLength: object, PasswordEncryptionFileProperties: object) """
        ...

    def ToggleFormsDesign(self): # -> 
        """ ToggleFormsDesign(self: _Workbook) """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: _Workbook, Password: object) """
        ...

    def UnprotectSharing(self, SharingPassword:object): # -> 
        """ UnprotectSharing(self: _Workbook, SharingPassword: object) """
        ...

    def UpdateFromFile(self): # -> 
        """ UpdateFromFile(self: _Workbook) """
        ...

    def UpdateLink(self, Name:object, Type:object): # -> 
        """ UpdateLink(self: _Workbook, Name: object, Type: object) """
        ...

    def WebPagePreview(self): # -> 
        """ WebPagePreview(self: _Workbook) """
        ...

    def XmlImport(self, Url, ImportMap, Overwrite, Destination) -> Tuple_[XlXmlImportResult, XmlMap]:
        """ XmlImport(self: _Workbook, Url: str, Overwrite: object, Destination: object) -> (XlXmlImportResult, XmlMap) """
        ...

    def XmlImportXml(self, Data, ImportMap, Overwrite, Destination) -> Tuple_[XlXmlImportResult, XmlMap]:
        """ XmlImportXml(self: _Workbook, Data: str, Overwrite: object, Destination: object) -> (XlXmlImportResult, XmlMap) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: _Workbook, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _Protect(self, Password:object, Structure:object, Windows:object): # -> 
        """ _Protect(self: _Workbook, Password: object, Structure: object, Windows: object) """
        ...

    def _SaveAs(self, Filename:object, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AccessMode:XlSaveAsAccessMode, ConflictResolution:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ _SaveAs(self: _Workbook, Filename: object, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AccessMode: XlSaveAsAccessMode, ConflictResolution: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...


class Workbook(WorkbookEvents_Event, _Workbook): # skipped bases: <type 'object'>
    """ no doc """
    pass

class WorkbookClass(__ComObject, Workbook): # skipped bases: <type 'WorkbookEvents_Event'>, <type '_Workbook'>, <type 'object'>
    """ WorkbookClass() """
    @property
    def AcceptLabelsInFormulas(self) -> bool:
        """
        Get: AcceptLabelsInFormulas(self: WorkbookClass) -> bool
        Set: AcceptLabelsInFormulas(self: WorkbookClass) = value
        """
        ...

    @property
    def AccuracyVersion(self) -> int:
        """
        Get: AccuracyVersion(self: WorkbookClass) -> int
        Set: AccuracyVersion(self: WorkbookClass) = value
        """
        ...

    @property
    def ActiveChart(self) -> Chart:
        """ Get: ActiveChart(self: WorkbookClass) -> Chart """
        ...

    @property
    def ActiveSheet(self) -> object:
        """ Get: ActiveSheet(self: WorkbookClass) -> object """
        ...

    @property
    def ActiveSlicer(self) -> Slicer:
        """ Get: ActiveSlicer(self: WorkbookClass) -> Slicer """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: WorkbookClass) -> Application """
        ...

    @property
    def Author(self) -> str:
        """
        Get: Author(self: WorkbookClass) -> str
        Set: Author(self: WorkbookClass) = value
        """
        ...

    @property
    def AutoUpdateFrequency(self) -> int:
        """
        Get: AutoUpdateFrequency(self: WorkbookClass) -> int
        Set: AutoUpdateFrequency(self: WorkbookClass) = value
        """
        ...

    @property
    def AutoUpdateSaveChanges(self) -> bool:
        """
        Get: AutoUpdateSaveChanges(self: WorkbookClass) -> bool
        Set: AutoUpdateSaveChanges(self: WorkbookClass) = value
        """
        ...

    @property
    def BuiltinDocumentProperties(self) -> object:
        """ Get: BuiltinDocumentProperties(self: WorkbookClass) -> object """
        ...

    @property
    def CalculationVersion(self) -> int:
        """ Get: CalculationVersion(self: WorkbookClass) -> int """
        ...

    @property
    def CaseSensitive(self) -> bool:
        """ Get: CaseSensitive(self: WorkbookClass) -> bool """
        ...

    @property
    def ChangeHistoryDuration(self) -> int:
        """
        Get: ChangeHistoryDuration(self: WorkbookClass) -> int
        Set: ChangeHistoryDuration(self: WorkbookClass) = value
        """
        ...

    @property
    def ChartDataPointTrack(self) -> bool:
        """
        Get: ChartDataPointTrack(self: WorkbookClass) -> bool
        Set: ChartDataPointTrack(self: WorkbookClass) = value
        """
        ...

    @property
    def Charts(self) -> Sheets:
        """ Get: Charts(self: WorkbookClass) -> Sheets """
        ...

    @property
    def CheckCompatibility(self) -> bool:
        """
        Get: CheckCompatibility(self: WorkbookClass) -> bool
        Set: CheckCompatibility(self: WorkbookClass) = value
        """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: WorkbookClass) -> str """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: WorkbookClass) -> CommandBars """
        ...

    @property
    def Comments(self) -> str:
        """
        Get: Comments(self: WorkbookClass) -> str
        Set: Comments(self: WorkbookClass) = value
        """
        ...

    @property
    def ConflictResolution(self) -> XlSaveConflictResolution:
        """
        Get: ConflictResolution(self: WorkbookClass) -> XlSaveConflictResolution
        Set: ConflictResolution(self: WorkbookClass) = value
        """
        ...

    @property
    def Connections(self) -> Connections:
        """ Get: Connections(self: WorkbookClass) -> Connections """
        ...

    @property
    def ConnectionsDisabled(self) -> bool:
        """ Get: ConnectionsDisabled(self: WorkbookClass) -> bool """
        ...

    @property
    def Container(self) -> object:
        """ Get: Container(self: WorkbookClass) -> object """
        ...

    @property
    def ContentTypeProperties(self): # -> MetaProperties
        """ Get: ContentTypeProperties(self: WorkbookClass) -> MetaProperties """
        ...

    @property
    def CreateBackup(self) -> bool:
        """ Get: CreateBackup(self: WorkbookClass) -> bool """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: WorkbookClass) -> XlCreator """
        ...

    @property
    def CustomDocumentProperties(self) -> object:
        """ Get: CustomDocumentProperties(self: WorkbookClass) -> object """
        ...

    @property
    def CustomViews(self) -> CustomViews:
        """ Get: CustomViews(self: WorkbookClass) -> CustomViews """
        ...

    @property
    def CustomXMLParts(self): # -> CustomXMLParts
        """ Get: CustomXMLParts(self: WorkbookClass) -> CustomXMLParts """
        ...

    @property
    def Date1904(self) -> bool:
        """
        Get: Date1904(self: WorkbookClass) -> bool
        Set: Date1904(self: WorkbookClass) = value
        """
        ...

    @property
    def DefaultPivotTableStyle(self) -> object:
        """
        Get: DefaultPivotTableStyle(self: WorkbookClass) -> object
        Set: DefaultPivotTableStyle(self: WorkbookClass) = value
        """
        ...

    @property
    def DefaultSlicerStyle(self) -> object:
        """
        Get: DefaultSlicerStyle(self: WorkbookClass) -> object
        Set: DefaultSlicerStyle(self: WorkbookClass) = value
        """
        ...

    @property
    def DefaultTableStyle(self) -> object:
        """
        Get: DefaultTableStyle(self: WorkbookClass) -> object
        Set: DefaultTableStyle(self: WorkbookClass) = value
        """
        ...

    @property
    def DefaultTimelineStyle(self) -> object:
        """
        Get: DefaultTimelineStyle(self: WorkbookClass) -> object
        Set: DefaultTimelineStyle(self: WorkbookClass) = value
        """
        ...

    @property
    def DialogSheets(self) -> Sheets:
        """ Get: DialogSheets(self: WorkbookClass) -> Sheets """
        ...

    @property
    def DisplayDrawingObjects(self) -> XlDisplayDrawingObjects:
        """
        Get: DisplayDrawingObjects(self: WorkbookClass) -> XlDisplayDrawingObjects
        Set: DisplayDrawingObjects(self: WorkbookClass) = value
        """
        ...

    @property
    def DisplayInkComments(self) -> bool:
        """
        Get: DisplayInkComments(self: WorkbookClass) -> bool
        Set: DisplayInkComments(self: WorkbookClass) = value
        """
        ...

    @property
    def DocumentInspectors(self): # -> DocumentInspectors
        """ Get: DocumentInspectors(self: WorkbookClass) -> DocumentInspectors """
        ...

    @property
    def DocumentLibraryVersions(self): # -> DocumentLibraryVersions
        """ Get: DocumentLibraryVersions(self: WorkbookClass) -> DocumentLibraryVersions """
        ...

    @property
    def DoNotPromptForConvert(self) -> bool:
        """
        Get: DoNotPromptForConvert(self: WorkbookClass) -> bool
        Set: DoNotPromptForConvert(self: WorkbookClass) = value
        """
        ...

    @property
    def EnableAutoRecover(self) -> bool:
        """
        Get: EnableAutoRecover(self: WorkbookClass) -> bool
        Set: EnableAutoRecover(self: WorkbookClass) = value
        """
        ...

    @property
    def EncryptionProvider(self) -> str:
        """
        Get: EncryptionProvider(self: WorkbookClass) -> str
        Set: EncryptionProvider(self: WorkbookClass) = value
        """
        ...

    @property
    def EnvelopeVisible(self) -> bool:
        """
        Get: EnvelopeVisible(self: WorkbookClass) -> bool
        Set: EnvelopeVisible(self: WorkbookClass) = value
        """
        ...

    @property
    def Excel4IntlMacroSheets(self) -> Sheets:
        """ Get: Excel4IntlMacroSheets(self: WorkbookClass) -> Sheets """
        ...

    @property
    def Excel4MacroSheets(self) -> Sheets:
        """ Get: Excel4MacroSheets(self: WorkbookClass) -> Sheets """
        ...

    @property
    def Excel8CompatibilityMode(self) -> bool:
        """ Get: Excel8CompatibilityMode(self: WorkbookClass) -> bool """
        ...

    @property
    def FileFormat(self) -> XlFileFormat:
        """ Get: FileFormat(self: WorkbookClass) -> XlFileFormat """
        ...

    @property
    def Final(self) -> bool:
        """
        Get: Final(self: WorkbookClass) -> bool
        Set: Final(self: WorkbookClass) = value
        """
        ...

    @property
    def ForceFullCalculation(self) -> bool:
        """
        Get: ForceFullCalculation(self: WorkbookClass) -> bool
        Set: ForceFullCalculation(self: WorkbookClass) = value
        """
        ...

    @property
    def FullName(self) -> str:
        """ Get: FullName(self: WorkbookClass) -> str """
        ...

    @property
    def FullNameURLEncoded(self) -> str:
        """ Get: FullNameURLEncoded(self: WorkbookClass) -> str """
        ...

    @property
    def HasMailer(self) -> bool:
        """
        Get: HasMailer(self: WorkbookClass) -> bool
        Set: HasMailer(self: WorkbookClass) = value
        """
        ...

    @property
    def HasPassword(self) -> bool:
        """ Get: HasPassword(self: WorkbookClass) -> bool """
        ...

    @property
    def HasRoutingSlip(self) -> bool:
        """
        Get: HasRoutingSlip(self: WorkbookClass) -> bool
        Set: HasRoutingSlip(self: WorkbookClass) = value
        """
        ...

    @property
    def HasVBProject(self) -> bool:
        """ Get: HasVBProject(self: WorkbookClass) -> bool """
        ...

    @property
    def HighlightChangesOnScreen(self) -> bool:
        """
        Get: HighlightChangesOnScreen(self: WorkbookClass) -> bool
        Set: HighlightChangesOnScreen(self: WorkbookClass) = value
        """
        ...

    @property
    def HTMLProject(self): # -> HTMLProject
        """ Get: HTMLProject(self: WorkbookClass) -> HTMLProject """
        ...

    @property
    def IconSets(self) -> IconSets:
        """ Get: IconSets(self: WorkbookClass) -> IconSets """
        ...

    @property
    def InactiveListBorderVisible(self) -> bool:
        """
        Get: InactiveListBorderVisible(self: WorkbookClass) -> bool
        Set: InactiveListBorderVisible(self: WorkbookClass) = value
        """
        ...

    @property
    def IsAddin(self) -> bool:
        """
        Get: IsAddin(self: WorkbookClass) -> bool
        Set: IsAddin(self: WorkbookClass) = value
        """
        ...

    @property
    def IsInplace(self) -> bool:
        """ Get: IsInplace(self: WorkbookClass) -> bool """
        ...

    @property
    def KeepChangeHistory(self) -> bool:
        """
        Get: KeepChangeHistory(self: WorkbookClass) -> bool
        Set: KeepChangeHistory(self: WorkbookClass) = value
        """
        ...

    @property
    def Keywords(self) -> str:
        """
        Get: Keywords(self: WorkbookClass) -> str
        Set: Keywords(self: WorkbookClass) = value
        """
        ...

    @property
    def ListChangesOnNewSheet(self) -> bool:
        """
        Get: ListChangesOnNewSheet(self: WorkbookClass) -> bool
        Set: ListChangesOnNewSheet(self: WorkbookClass) = value
        """
        ...

    @property
    def Mailer(self) -> Mailer:
        """ Get: Mailer(self: WorkbookClass) -> Mailer """
        ...

    @property
    def Model(self) -> Model:
        """ Get: Model(self: WorkbookClass) -> Model """
        ...

    @property
    def Modules(self) -> Sheets:
        """ Get: Modules(self: WorkbookClass) -> Sheets """
        ...

    @property
    def MultiUserEditing(self) -> bool:
        """ Get: MultiUserEditing(self: WorkbookClass) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: WorkbookClass) -> str """
        ...

    @property
    def Names(self) -> Names:
        """ Get: Names(self: WorkbookClass) -> Names """
        ...

    @property
    def OnSave(self) -> str:
        """
        Get: OnSave(self: WorkbookClass) -> str
        Set: OnSave(self: WorkbookClass) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: WorkbookClass) -> str
        Set: OnSheetActivate(self: WorkbookClass) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: WorkbookClass) -> str
        Set: OnSheetDeactivate(self: WorkbookClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: WorkbookClass) -> object """
        ...

    @property
    def Password(self) -> str:
        """
        Get: Password(self: WorkbookClass) -> str
        Set: Password(self: WorkbookClass) = value
        """
        ...

    @property
    def PasswordEncryptionAlgorithm(self) -> str:
        """ Get: PasswordEncryptionAlgorithm(self: WorkbookClass) -> str """
        ...

    @property
    def PasswordEncryptionFileProperties(self) -> bool:
        """ Get: PasswordEncryptionFileProperties(self: WorkbookClass) -> bool """
        ...

    @property
    def PasswordEncryptionKeyLength(self) -> int:
        """ Get: PasswordEncryptionKeyLength(self: WorkbookClass) -> int """
        ...

    @property
    def PasswordEncryptionProvider(self) -> str:
        """ Get: PasswordEncryptionProvider(self: WorkbookClass) -> str """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: WorkbookClass) -> str """
        ...

    @property
    def Permission(self): # -> Permission
        """ Get: Permission(self: WorkbookClass) -> Permission """
        ...

    @property
    def PersonalViewListSettings(self) -> bool:
        """
        Get: PersonalViewListSettings(self: WorkbookClass) -> bool
        Set: PersonalViewListSettings(self: WorkbookClass) = value
        """
        ...

    @property
    def PersonalViewPrintSettings(self) -> bool:
        """
        Get: PersonalViewPrintSettings(self: WorkbookClass) -> bool
        Set: PersonalViewPrintSettings(self: WorkbookClass) = value
        """
        ...

    @property
    def PivotTables(self) -> object:
        """ Get: PivotTables(self: WorkbookClass) -> object """
        ...

    @property
    def PrecisionAsDisplayed(self) -> bool:
        """
        Get: PrecisionAsDisplayed(self: WorkbookClass) -> bool
        Set: PrecisionAsDisplayed(self: WorkbookClass) = value
        """
        ...

    @property
    def ProtectStructure(self) -> bool:
        """ Get: ProtectStructure(self: WorkbookClass) -> bool """
        ...

    @property
    def ProtectWindows(self) -> bool:
        """ Get: ProtectWindows(self: WorkbookClass) -> bool """
        ...

    @property
    def PublishObjects(self) -> PublishObjects:
        """ Get: PublishObjects(self: WorkbookClass) -> PublishObjects """
        ...

    @property
    def ReadOnly(self) -> bool:
        """ Get: ReadOnly(self: WorkbookClass) -> bool """
        ...

    @property
    def ReadOnlyRecommended(self) -> bool:
        """
        Get: ReadOnlyRecommended(self: WorkbookClass) -> bool
        Set: ReadOnlyRecommended(self: WorkbookClass) = value
        """
        ...

    @property
    def RemovePersonalInformation(self) -> bool:
        """
        Get: RemovePersonalInformation(self: WorkbookClass) -> bool
        Set: RemovePersonalInformation(self: WorkbookClass) = value
        """
        ...

    @property
    def Research(self) -> Research:
        """ Get: Research(self: WorkbookClass) -> Research """
        ...

    @property
    def RevisionNumber(self) -> int:
        """ Get: RevisionNumber(self: WorkbookClass) -> int """
        ...

    @property
    def Routed(self) -> bool:
        """ Get: Routed(self: WorkbookClass) -> bool """
        ...

    @property
    def RoutingSlip(self) -> RoutingSlip:
        """ Get: RoutingSlip(self: WorkbookClass) -> RoutingSlip """
        ...

    @property
    def Saved(self) -> bool:
        """
        Get: Saved(self: WorkbookClass) -> bool
        Set: Saved(self: WorkbookClass) = value
        """
        ...

    @property
    def SaveLinkValues(self) -> bool:
        """
        Get: SaveLinkValues(self: WorkbookClass) -> bool
        Set: SaveLinkValues(self: WorkbookClass) = value
        """
        ...

    @property
    def ServerPolicy(self): # -> ServerPolicy
        """ Get: ServerPolicy(self: WorkbookClass) -> ServerPolicy """
        ...

    @property
    def ServerViewableItems(self) -> ServerViewableItems:
        """ Get: ServerViewableItems(self: WorkbookClass) -> ServerViewableItems """
        ...

    @property
    def SharedWorkspace(self): # -> SharedWorkspace
        """ Get: SharedWorkspace(self: WorkbookClass) -> SharedWorkspace """
        ...

    @property
    def Sheets(self) -> Sheets:
        """ Get: Sheets(self: WorkbookClass) -> Sheets """
        ...

    @property
    def ShowConflictHistory(self) -> bool:
        """
        Get: ShowConflictHistory(self: WorkbookClass) -> bool
        Set: ShowConflictHistory(self: WorkbookClass) = value
        """
        ...

    @property
    def ShowPivotChartActiveFields(self) -> bool:
        """
        Get: ShowPivotChartActiveFields(self: WorkbookClass) -> bool
        Set: ShowPivotChartActiveFields(self: WorkbookClass) = value
        """
        ...

    @property
    def ShowPivotTableFieldList(self) -> bool:
        """
        Get: ShowPivotTableFieldList(self: WorkbookClass) -> bool
        Set: ShowPivotTableFieldList(self: WorkbookClass) = value
        """
        ...

    @property
    def Signatures(self): # -> SignatureSet
        """ Get: Signatures(self: WorkbookClass) -> SignatureSet """
        ...

    @property
    def SlicerCaches(self) -> SlicerCaches:
        """ Get: SlicerCaches(self: WorkbookClass) -> SlicerCaches """
        ...

    @property
    def SmartDocument(self): # -> SmartDocument
        """ Get: SmartDocument(self: WorkbookClass) -> SmartDocument """
        ...

    @property
    def SmartTagOptions(self) -> SmartTagOptions:
        """ Get: SmartTagOptions(self: WorkbookClass) -> SmartTagOptions """
        ...

    @property
    def Styles(self) -> Styles:
        """ Get: Styles(self: WorkbookClass) -> Styles """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: WorkbookClass) -> str
        Set: Subject(self: WorkbookClass) = value
        """
        ...

    @property
    def Sync(self): # -> Sync
        """ Get: Sync(self: WorkbookClass) -> Sync """
        ...

    @property
    def TableStyles(self) -> TableStyles:
        """ Get: TableStyles(self: WorkbookClass) -> TableStyles """
        ...

    @property
    def TemplateRemoveExtData(self) -> bool:
        """
        Get: TemplateRemoveExtData(self: WorkbookClass) -> bool
        Set: TemplateRemoveExtData(self: WorkbookClass) = value
        """
        ...

    @property
    def Theme(self): # -> OfficeTheme
        """ Get: Theme(self: WorkbookClass) -> OfficeTheme """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: WorkbookClass) -> str
        Set: Title(self: WorkbookClass) = value
        """
        ...

    @property
    def UpdateLinks(self) -> XlUpdateLinks:
        """
        Get: UpdateLinks(self: WorkbookClass) -> XlUpdateLinks
        Set: UpdateLinks(self: WorkbookClass) = value
        """
        ...

    @property
    def UpdateRemoteReferences(self) -> bool:
        """
        Get: UpdateRemoteReferences(self: WorkbookClass) -> bool
        Set: UpdateRemoteReferences(self: WorkbookClass) = value
        """
        ...

    @property
    def UserControl(self) -> bool:
        """
        Get: UserControl(self: WorkbookClass) -> bool
        Set: UserControl(self: WorkbookClass) = value
        """
        ...

    @property
    def UserStatus(self) -> object:
        """ Get: UserStatus(self: WorkbookClass) -> object """
        ...

    @property
    def UseWholeCellCriteria(self) -> bool:
        """ Get: UseWholeCellCriteria(self: WorkbookClass) -> bool """
        ...

    @property
    def UseWildcards(self) -> bool:
        """ Get: UseWildcards(self: WorkbookClass) -> bool """
        ...

    @property
    def VBASigned(self) -> bool:
        """ Get: VBASigned(self: WorkbookClass) -> bool """
        ...

    @property
    def VBProject(self) -> VBProject:
        """ Get: VBProject(self: WorkbookClass) -> VBProject """
        ...

    @property
    def WebOptions(self) -> WebOptions:
        """ Get: WebOptions(self: WorkbookClass) -> WebOptions """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: WorkbookClass) -> Windows """
        ...

    @property
    def Worksheets(self) -> Sheets:
        """ Get: Worksheets(self: WorkbookClass) -> Sheets """
        ...

    @property
    def WritePassword(self) -> str:
        """
        Get: WritePassword(self: WorkbookClass) -> str
        Set: WritePassword(self: WorkbookClass) = value
        """
        ...

    @property
    def WriteReserved(self) -> bool:
        """ Get: WriteReserved(self: WorkbookClass) -> bool """
        ...

    @property
    def WriteReservedBy(self) -> str:
        """ Get: WriteReservedBy(self: WorkbookClass) -> str """
        ...

    @property
    def XmlMaps(self) -> XmlMaps:
        """ Get: XmlMaps(self: WorkbookClass) -> XmlMaps """
        ...

    @property
    def XmlNamespaces(self) -> XmlNamespaces:
        """ Get: XmlNamespaces(self: WorkbookClass) -> XmlNamespaces """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: WorkbookClass) -> str
        Set: _CodeName(self: WorkbookClass) = value
        """
        ...

    @property
    def _ReadOnlyRecommended(self) -> bool:
        """ Get: _ReadOnlyRecommended(self: WorkbookClass) -> bool """
        ...


    def AcceptAllChanges(self, When:object, Who:object, Where:object): # -> 
        """ AcceptAllChanges(self: WorkbookClass, When: object, Who: object, Where: object) """
        ...

    def Activate(self): # -> 
        """ Activate(self: WorkbookClass) """
        ...

    def AddToFavorites(self): # -> 
        """ AddToFavorites(self: WorkbookClass) """
        ...

    def add_Activate(self): # -> 
        """ add_Activate(self: WorkbookClass, : WorkbookEvents_ActivateEventHandler) """
        ...

    def add_AddinInstall(self): # -> 
        """ add_AddinInstall(self: WorkbookClass, : WorkbookEvents_AddinInstallEventHandler) """
        ...

    def add_AddinUninstall(self): # -> 
        """ add_AddinUninstall(self: WorkbookClass, : WorkbookEvents_AddinUninstallEventHandler) """
        ...

    def add_AfterSave(self): # -> 
        """ add_AfterSave(self: WorkbookClass, : WorkbookEvents_AfterSaveEventHandler) """
        ...

    def add_AfterXmlExport(self): # -> 
        """ add_AfterXmlExport(self: WorkbookClass, : WorkbookEvents_AfterXmlExportEventHandler) """
        ...

    def add_AfterXmlImport(self): # -> 
        """ add_AfterXmlImport(self: WorkbookClass, : WorkbookEvents_AfterXmlImportEventHandler) """
        ...

    def add_BeforeClose(self): # -> 
        """ add_BeforeClose(self: WorkbookClass, : WorkbookEvents_BeforeCloseEventHandler) """
        ...

    def add_BeforePrint(self): # -> 
        """ add_BeforePrint(self: WorkbookClass, : WorkbookEvents_BeforePrintEventHandler) """
        ...

    def add_BeforeSave(self): # -> 
        """ add_BeforeSave(self: WorkbookClass, : WorkbookEvents_BeforeSaveEventHandler) """
        ...

    def add_BeforeXmlExport(self): # -> 
        """ add_BeforeXmlExport(self: WorkbookClass, : WorkbookEvents_BeforeXmlExportEventHandler) """
        ...

    def add_BeforeXmlImport(self): # -> 
        """ add_BeforeXmlImport(self: WorkbookClass, : WorkbookEvents_BeforeXmlImportEventHandler) """
        ...

    def add_Deactivate(self): # -> 
        """ add_Deactivate(self: WorkbookClass, : WorkbookEvents_DeactivateEventHandler) """
        ...

    def add_ModelChange(self): # -> 
        """ add_ModelChange(self: WorkbookClass, : WorkbookEvents_ModelChangeEventHandler) """
        ...

    def add_NewChart(self): # -> 
        """ add_NewChart(self: WorkbookClass, : WorkbookEvents_NewChartEventHandler) """
        ...

    def add_NewSheet(self): # -> 
        """ add_NewSheet(self: WorkbookClass, : WorkbookEvents_NewSheetEventHandler) """
        ...

    def add_Open(self): # -> 
        """ add_Open(self: WorkbookClass, : WorkbookEvents_OpenEventHandler) """
        ...

    def add_PivotTableCloseConnection(self): # -> 
        """ add_PivotTableCloseConnection(self: WorkbookClass, : WorkbookEvents_PivotTableCloseConnectionEventHandler) """
        ...

    def add_PivotTableOpenConnection(self): # -> 
        """ add_PivotTableOpenConnection(self: WorkbookClass, : WorkbookEvents_PivotTableOpenConnectionEventHandler) """
        ...

    def add_RowsetComplete(self): # -> 
        """ add_RowsetComplete(self: WorkbookClass, : WorkbookEvents_RowsetCompleteEventHandler) """
        ...

    def add_SheetActivate(self): # -> 
        """ add_SheetActivate(self: WorkbookClass, : WorkbookEvents_SheetActivateEventHandler) """
        ...

    def add_SheetBeforeDelete(self): # -> 
        """ add_SheetBeforeDelete(self: WorkbookClass, : WorkbookEvents_SheetBeforeDeleteEventHandler) """
        ...

    def add_SheetBeforeDoubleClick(self): # -> 
        """ add_SheetBeforeDoubleClick(self: WorkbookClass, : WorkbookEvents_SheetBeforeDoubleClickEventHandler) """
        ...

    def add_SheetBeforeRightClick(self): # -> 
        """ add_SheetBeforeRightClick(self: WorkbookClass, : WorkbookEvents_SheetBeforeRightClickEventHandler) """
        ...

    def add_SheetCalculate(self): # -> 
        """ add_SheetCalculate(self: WorkbookClass, : WorkbookEvents_SheetCalculateEventHandler) """
        ...

    def add_SheetChange(self): # -> 
        """ add_SheetChange(self: WorkbookClass, : WorkbookEvents_SheetChangeEventHandler) """
        ...

    def add_SheetDeactivate(self): # -> 
        """ add_SheetDeactivate(self: WorkbookClass, : WorkbookEvents_SheetDeactivateEventHandler) """
        ...

    def add_SheetFollowHyperlink(self): # -> 
        """ add_SheetFollowHyperlink(self: WorkbookClass, : WorkbookEvents_SheetFollowHyperlinkEventHandler) """
        ...

    def add_SheetLensGalleryRenderComplete(self): # -> 
        """ add_SheetLensGalleryRenderComplete(self: WorkbookClass, : WorkbookEvents_SheetLensGalleryRenderCompleteEventHandler) """
        ...

    def add_SheetPivotTableAfterValueChange(self): # -> 
        """ add_SheetPivotTableAfterValueChange(self: WorkbookClass, : WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler) """
        ...

    def add_SheetPivotTableBeforeAllocateChanges(self): # -> 
        """ add_SheetPivotTableBeforeAllocateChanges(self: WorkbookClass, : WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler) """
        ...

    def add_SheetPivotTableBeforeCommitChanges(self): # -> 
        """ add_SheetPivotTableBeforeCommitChanges(self: WorkbookClass, : WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler) """
        ...

    def add_SheetPivotTableBeforeDiscardChanges(self): # -> 
        """ add_SheetPivotTableBeforeDiscardChanges(self: WorkbookClass, : WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler) """
        ...

    def add_SheetPivotTableChangeSync(self): # -> 
        """ add_SheetPivotTableChangeSync(self: WorkbookClass, : WorkbookEvents_SheetPivotTableChangeSyncEventHandler) """
        ...

    def add_SheetPivotTableUpdate(self): # -> 
        """ add_SheetPivotTableUpdate(self: WorkbookClass, : WorkbookEvents_SheetPivotTableUpdateEventHandler) """
        ...

    def add_SheetSelectionChange(self): # -> 
        """ add_SheetSelectionChange(self: WorkbookClass, : WorkbookEvents_SheetSelectionChangeEventHandler) """
        ...

    def add_SheetTableUpdate(self): # -> 
        """ add_SheetTableUpdate(self: WorkbookClass, : WorkbookEvents_SheetTableUpdateEventHandler) """
        ...

    def add_Sync(self): # -> 
        """ add_Sync(self: WorkbookClass, : WorkbookEvents_SyncEventHandler) """
        ...

    def add_WindowActivate(self): # -> 
        """ add_WindowActivate(self: WorkbookClass, : WorkbookEvents_WindowActivateEventHandler) """
        ...

    def add_WindowDeactivate(self): # -> 
        """ add_WindowDeactivate(self: WorkbookClass, : WorkbookEvents_WindowDeactivateEventHandler) """
        ...

    def add_WindowResize(self): # -> 
        """ add_WindowResize(self: WorkbookClass, : WorkbookEvents_WindowResizeEventHandler) """
        ...

    def ApplyTheme(self, Filename:str): # -> 
        """ ApplyTheme(self: WorkbookClass, Filename: str) """
        ...

    def BreakLink(self, Name:str, Type:XlLinkType): # -> 
        """ BreakLink(self: WorkbookClass, Name: str, Type: XlLinkType) """
        ...

    def CanCheckIn(self) -> bool:
        """ CanCheckIn(self: WorkbookClass) -> bool """
        ...

    def ChangeFileAccess(self, Mode:XlFileAccess, WritePassword:object, Notify:object): # -> 
        """ ChangeFileAccess(self: WorkbookClass, Mode: XlFileAccess, WritePassword: object, Notify: object) """
        ...

    def ChangeLink(self, Name:str, NewName:str, Type:XlLinkType): # -> 
        """ ChangeLink(self: WorkbookClass, Name: str, NewName: str, Type: XlLinkType) """
        ...

    def CheckIn(self, SaveChanges:object, Comments:object, MakePublic:object): # -> 
        """ CheckIn(self: WorkbookClass, SaveChanges: object, Comments: object, MakePublic: object) """
        ...

    def CheckInWithVersion(self, SaveChanges:object, Comments:object, MakePublic:object, VersionType:object): # -> 
        """ CheckInWithVersion(self: WorkbookClass, SaveChanges: object, Comments: object, MakePublic: object, VersionType: object) """
        ...

    def Close(self, SaveChanges:object, Filename:object, RouteWorkbook:object): # -> 
        """ Close(self: WorkbookClass, SaveChanges: object, Filename: object, RouteWorkbook: object) """
        ...

    def DeleteNumberFormat(self, NumberFormat:str): # -> 
        """ DeleteNumberFormat(self: WorkbookClass, NumberFormat: str) """
        ...

    def Dummy16(self): # -> 
        """ Dummy16(self: WorkbookClass) """
        ...

    def Dummy17(self, calcid:int): # -> 
        """ Dummy17(self: WorkbookClass, calcid: int) """
        ...

    def Dummy26(self): # -> 
        """ Dummy26(self: WorkbookClass) """
        ...

    def Dummy27(self): # -> 
        """ Dummy27(self: WorkbookClass) """
        ...

    def EnableConnections(self): # -> 
        """ EnableConnections(self: WorkbookClass) """
        ...

    def EndReview(self): # -> 
        """ EndReview(self: WorkbookClass) """
        ...

    def ExclusiveAccess(self) -> bool:
        """ ExclusiveAccess(self: WorkbookClass) -> bool """
        ...

    def ExportAsFixedFormat(self, Type:XlFixedFormatType, Filename:object, Quality:object, IncludeDocProperties:object, IgnorePrintAreas:object, From:object, To:object, OpenAfterPublish:object, FixedFormatExtClassPtr:object): # -> 
        """ ExportAsFixedFormat(self: WorkbookClass, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        ...

    def FollowHyperlink(self, Address:str, SubAddress:object, NewWindow:object, AddHistory:object, ExtraInfo:object, Method:object, HeaderInfo:object): # -> 
        """ FollowHyperlink(self: WorkbookClass, Address: str, SubAddress: object, NewWindow: object, AddHistory: object, ExtraInfo: object, Method: object, HeaderInfo: object) """
        ...

    def ForwardMailer(self): # -> 
        """ ForwardMailer(self: WorkbookClass) """
        ...

    def GetWorkflowTasks(self): # -> WorkflowTasks
        """ GetWorkflowTasks(self: WorkbookClass) -> WorkflowTasks """
        ...

    def GetWorkflowTemplates(self): # -> WorkflowTemplates
        """ GetWorkflowTemplates(self: WorkbookClass) -> WorkflowTemplates """
        ...

    def HighlightChangesOptions(self, When:object, Who:object, Where:object): # -> 
        """ HighlightChangesOptions(self: WorkbookClass, When: object, Who: object, Where: object) """
        ...

    def LinkInfo(self, Name:str, LinkInfo:XlLinkInfo, Type:object, EditionRef:object) -> object:
        """ LinkInfo(self: WorkbookClass, Name: str, LinkInfo: XlLinkInfo, Type: object, EditionRef: object) -> object """
        ...

    def LinkSources(self, Type:object) -> object:
        """ LinkSources(self: WorkbookClass, Type: object) -> object """
        ...

    def LockServerFile(self): # -> 
        """ LockServerFile(self: WorkbookClass) """
        ...

    def MergeWorkbook(self, Filename:object): # -> 
        """ MergeWorkbook(self: WorkbookClass, Filename: object) """
        ...

    def NewWindow(self) -> Window:
        """ NewWindow(self: WorkbookClass) -> Window """
        ...

    def OpenLinks(self, Name:str, ReadOnly:object, Type:object): # -> 
        """ OpenLinks(self: WorkbookClass, Name: str, ReadOnly: object, Type: object) """
        ...

    def PivotCaches(self) -> PivotCaches:
        """ PivotCaches(self: WorkbookClass) -> PivotCaches """
        ...

    def PivotTableWizard(self, SourceType:object, SourceData:object, TableDestination:object, TableName:object, RowGrand:object, ColumnGrand:object, SaveData:object, HasAutoFormat:object, AutoPage:object, Reserved:object, BackgroundQuery:object, OptimizeCache:object, PageFieldOrder:object, PageFieldWrapCount:object, ReadData:object, Connection:object): # -> 
        """ PivotTableWizard(self: WorkbookClass, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) """
        ...

    def Post(self, DestName:object): # -> 
        """ Post(self: WorkbookClass, DestName: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: WorkbookClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object, IgnorePrintAreas:object): # -> 
        """ PrintOutEx(self: WorkbookClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: WorkbookClass, EnableChanges: object) """
        ...

    def Protect(self, Password:object, Structure:object, Windows:object): # -> 
        """ Protect(self: WorkbookClass, Password: object, Structure: object, Windows: object) """
        ...

    def ProtectSharing(self, Filename:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, SharingPassword:object): # -> 
        """ ProtectSharing(self: WorkbookClass, Filename: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, SharingPassword: object) """
        ...

    def ProtectSharingEx(self, Filename:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, SharingPassword:object, FileFormat:object): # -> 
        """ ProtectSharingEx(self: WorkbookClass, Filename: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, SharingPassword: object, FileFormat: object) """
        ...

    def PurgeChangeHistoryNow(self, Days:int, SharingPassword:object): # -> 
        """ PurgeChangeHistoryNow(self: WorkbookClass, Days: int, SharingPassword: object) """
        ...

    def RecheckSmartTags(self): # -> 
        """ RecheckSmartTags(self: WorkbookClass) """
        ...

    def RefreshAll(self): # -> 
        """ RefreshAll(self: WorkbookClass) """
        ...

    def RejectAllChanges(self, When:object, Who:object, Where:object): # -> 
        """ RejectAllChanges(self: WorkbookClass, When: object, Who: object, Where: object) """
        ...

    def ReloadAs(self, Encoding): # ->  # Not found arg types: {'Encoding': 'MsoEncoding'}
        """ ReloadAs(self: WorkbookClass, Encoding: MsoEncoding) """
        ...

    def RemoveDocumentInformation(self, RemoveDocInfoType:XlRemoveDocInfoType): # -> 
        """ RemoveDocumentInformation(self: WorkbookClass, RemoveDocInfoType: XlRemoveDocInfoType) """
        ...

    def RemoveUser(self, Index:int): # -> 
        """ RemoveUser(self: WorkbookClass, Index: int) """
        ...

    def remove_Activate(self): # -> 
        """ remove_Activate(self: WorkbookClass, : WorkbookEvents_ActivateEventHandler) """
        ...

    def remove_AddinInstall(self): # -> 
        """ remove_AddinInstall(self: WorkbookClass, : WorkbookEvents_AddinInstallEventHandler) """
        ...

    def remove_AddinUninstall(self): # -> 
        """ remove_AddinUninstall(self: WorkbookClass, : WorkbookEvents_AddinUninstallEventHandler) """
        ...

    def remove_AfterSave(self): # -> 
        """ remove_AfterSave(self: WorkbookClass, : WorkbookEvents_AfterSaveEventHandler) """
        ...

    def remove_AfterXmlExport(self): # -> 
        """ remove_AfterXmlExport(self: WorkbookClass, : WorkbookEvents_AfterXmlExportEventHandler) """
        ...

    def remove_AfterXmlImport(self): # -> 
        """ remove_AfterXmlImport(self: WorkbookClass, : WorkbookEvents_AfterXmlImportEventHandler) """
        ...

    def remove_BeforeClose(self): # -> 
        """ remove_BeforeClose(self: WorkbookClass, : WorkbookEvents_BeforeCloseEventHandler) """
        ...

    def remove_BeforePrint(self): # -> 
        """ remove_BeforePrint(self: WorkbookClass, : WorkbookEvents_BeforePrintEventHandler) """
        ...

    def remove_BeforeSave(self): # -> 
        """ remove_BeforeSave(self: WorkbookClass, : WorkbookEvents_BeforeSaveEventHandler) """
        ...

    def remove_BeforeXmlExport(self): # -> 
        """ remove_BeforeXmlExport(self: WorkbookClass, : WorkbookEvents_BeforeXmlExportEventHandler) """
        ...

    def remove_BeforeXmlImport(self): # -> 
        """ remove_BeforeXmlImport(self: WorkbookClass, : WorkbookEvents_BeforeXmlImportEventHandler) """
        ...

    def remove_Deactivate(self): # -> 
        """ remove_Deactivate(self: WorkbookClass, : WorkbookEvents_DeactivateEventHandler) """
        ...

    def remove_ModelChange(self): # -> 
        """ remove_ModelChange(self: WorkbookClass, : WorkbookEvents_ModelChangeEventHandler) """
        ...

    def remove_NewChart(self): # -> 
        """ remove_NewChart(self: WorkbookClass, : WorkbookEvents_NewChartEventHandler) """
        ...

    def remove_NewSheet(self): # -> 
        """ remove_NewSheet(self: WorkbookClass, : WorkbookEvents_NewSheetEventHandler) """
        ...

    def remove_Open(self): # -> 
        """ remove_Open(self: WorkbookClass, : WorkbookEvents_OpenEventHandler) """
        ...

    def remove_PivotTableCloseConnection(self): # -> 
        """ remove_PivotTableCloseConnection(self: WorkbookClass, : WorkbookEvents_PivotTableCloseConnectionEventHandler) """
        ...

    def remove_PivotTableOpenConnection(self): # -> 
        """ remove_PivotTableOpenConnection(self: WorkbookClass, : WorkbookEvents_PivotTableOpenConnectionEventHandler) """
        ...

    def remove_RowsetComplete(self): # -> 
        """ remove_RowsetComplete(self: WorkbookClass, : WorkbookEvents_RowsetCompleteEventHandler) """
        ...

    def remove_SheetActivate(self): # -> 
        """ remove_SheetActivate(self: WorkbookClass, : WorkbookEvents_SheetActivateEventHandler) """
        ...

    def remove_SheetBeforeDelete(self): # -> 
        """ remove_SheetBeforeDelete(self: WorkbookClass, : WorkbookEvents_SheetBeforeDeleteEventHandler) """
        ...

    def remove_SheetBeforeDoubleClick(self): # -> 
        """ remove_SheetBeforeDoubleClick(self: WorkbookClass, : WorkbookEvents_SheetBeforeDoubleClickEventHandler) """
        ...

    def remove_SheetBeforeRightClick(self): # -> 
        """ remove_SheetBeforeRightClick(self: WorkbookClass, : WorkbookEvents_SheetBeforeRightClickEventHandler) """
        ...

    def remove_SheetCalculate(self): # -> 
        """ remove_SheetCalculate(self: WorkbookClass, : WorkbookEvents_SheetCalculateEventHandler) """
        ...

    def remove_SheetChange(self): # -> 
        """ remove_SheetChange(self: WorkbookClass, : WorkbookEvents_SheetChangeEventHandler) """
        ...

    def remove_SheetDeactivate(self): # -> 
        """ remove_SheetDeactivate(self: WorkbookClass, : WorkbookEvents_SheetDeactivateEventHandler) """
        ...

    def remove_SheetFollowHyperlink(self): # -> 
        """ remove_SheetFollowHyperlink(self: WorkbookClass, : WorkbookEvents_SheetFollowHyperlinkEventHandler) """
        ...

    def remove_SheetLensGalleryRenderComplete(self): # -> 
        """ remove_SheetLensGalleryRenderComplete(self: WorkbookClass, : WorkbookEvents_SheetLensGalleryRenderCompleteEventHandler) """
        ...

    def remove_SheetPivotTableAfterValueChange(self): # -> 
        """ remove_SheetPivotTableAfterValueChange(self: WorkbookClass, : WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler) """
        ...

    def remove_SheetPivotTableBeforeAllocateChanges(self): # -> 
        """ remove_SheetPivotTableBeforeAllocateChanges(self: WorkbookClass, : WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler) """
        ...

    def remove_SheetPivotTableBeforeCommitChanges(self): # -> 
        """ remove_SheetPivotTableBeforeCommitChanges(self: WorkbookClass, : WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler) """
        ...

    def remove_SheetPivotTableBeforeDiscardChanges(self): # -> 
        """ remove_SheetPivotTableBeforeDiscardChanges(self: WorkbookClass, : WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler) """
        ...

    def remove_SheetPivotTableChangeSync(self): # -> 
        """ remove_SheetPivotTableChangeSync(self: WorkbookClass, : WorkbookEvents_SheetPivotTableChangeSyncEventHandler) """
        ...

    def remove_SheetPivotTableUpdate(self): # -> 
        """ remove_SheetPivotTableUpdate(self: WorkbookClass, : WorkbookEvents_SheetPivotTableUpdateEventHandler) """
        ...

    def remove_SheetSelectionChange(self): # -> 
        """ remove_SheetSelectionChange(self: WorkbookClass, : WorkbookEvents_SheetSelectionChangeEventHandler) """
        ...

    def remove_SheetTableUpdate(self): # -> 
        """ remove_SheetTableUpdate(self: WorkbookClass, : WorkbookEvents_SheetTableUpdateEventHandler) """
        ...

    def remove_Sync(self): # -> 
        """ remove_Sync(self: WorkbookClass, : WorkbookEvents_SyncEventHandler) """
        ...

    def remove_WindowActivate(self): # -> 
        """ remove_WindowActivate(self: WorkbookClass, : WorkbookEvents_WindowActivateEventHandler) """
        ...

    def remove_WindowDeactivate(self): # -> 
        """ remove_WindowDeactivate(self: WorkbookClass, : WorkbookEvents_WindowDeactivateEventHandler) """
        ...

    def remove_WindowResize(self): # -> 
        """ remove_WindowResize(self: WorkbookClass, : WorkbookEvents_WindowResizeEventHandler) """
        ...

    def Reply(self): # -> 
        """ Reply(self: WorkbookClass) """
        ...

    def ReplyAll(self): # -> 
        """ ReplyAll(self: WorkbookClass) """
        ...

    def ReplyWithChanges(self, ShowMessage:object): # -> 
        """ ReplyWithChanges(self: WorkbookClass, ShowMessage: object) """
        ...

    def ResetColors(self): # -> 
        """ ResetColors(self: WorkbookClass) """
        ...

    def Route(self): # -> 
        """ Route(self: WorkbookClass) """
        ...

    def RunAutoMacros(self, Which:XlRunAutoMacro): # -> 
        """ RunAutoMacros(self: WorkbookClass, Which: XlRunAutoMacro) """
        ...

    def Save(self): # -> 
        """ Save(self: WorkbookClass) """
        ...

    def SaveAs(self, Filename:object, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AccessMode:XlSaveAsAccessMode, ConflictResolution:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object, Local:object): # -> 
        """ SaveAs(self: WorkbookClass, Filename: object, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AccessMode: XlSaveAsAccessMode, ConflictResolution: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        ...

    def SaveAsXMLData(self, Filename:str, Map:XmlMap): # -> 
        """ SaveAsXMLData(self: WorkbookClass, Filename: str, Map: XmlMap) """
        ...

    def SaveCopyAs(self, Filename:object): # -> 
        """ SaveCopyAs(self: WorkbookClass, Filename: object) """
        ...

    def sblt(self, s:str): # -> 
        """ sblt(self: WorkbookClass, s: str) """
        ...

    def SendFaxOverInternet(self, Recipients:object, Subject:object, ShowMessage:object): # -> 
        """ SendFaxOverInternet(self: WorkbookClass, Recipients: object, Subject: object, ShowMessage: object) """
        ...

    def SendForReview(self, Recipients:object, Subject:object, ShowMessage:object, IncludeAttachment:object): # -> 
        """ SendForReview(self: WorkbookClass, Recipients: object, Subject: object, ShowMessage: object, IncludeAttachment: object) """
        ...

    def SendMail(self, Recipients:object, Subject:object, ReturnReceipt:object): # -> 
        """ SendMail(self: WorkbookClass, Recipients: object, Subject: object, ReturnReceipt: object) """
        ...

    def SendMailer(self, FileFormat:object, Priority:XlPriority): # -> 
        """ SendMailer(self: WorkbookClass, FileFormat: object, Priority: XlPriority) """
        ...

    def SetLinkOnData(self, Name:str, Procedure:object): # -> 
        """ SetLinkOnData(self: WorkbookClass, Name: str, Procedure: object) """
        ...

    def SetPasswordEncryptionOptions(self, PasswordEncryptionProvider:object, PasswordEncryptionAlgorithm:object, PasswordEncryptionKeyLength:object, PasswordEncryptionFileProperties:object): # -> 
        """ SetPasswordEncryptionOptions(self: WorkbookClass, PasswordEncryptionProvider: object, PasswordEncryptionAlgorithm: object, PasswordEncryptionKeyLength: object, PasswordEncryptionFileProperties: object) """
        ...

    def ToggleFormsDesign(self): # -> 
        """ ToggleFormsDesign(self: WorkbookClass) """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: WorkbookClass, Password: object) """
        ...

    def UnprotectSharing(self, SharingPassword:object): # -> 
        """ UnprotectSharing(self: WorkbookClass, SharingPassword: object) """
        ...

    def UpdateFromFile(self): # -> 
        """ UpdateFromFile(self: WorkbookClass) """
        ...

    def UpdateLink(self, Name:object, Type:object): # -> 
        """ UpdateLink(self: WorkbookClass, Name: object, Type: object) """
        ...

    def WebPagePreview(self): # -> 
        """ WebPagePreview(self: WorkbookClass) """
        ...

    def XmlImport(self, Url, ImportMap, Overwrite, Destination) -> Tuple_[XlXmlImportResult, XmlMap]:
        """ XmlImport(self: WorkbookClass, Url: str, Overwrite: object, Destination: object) -> (XlXmlImportResult, XmlMap) """
        ...

    def XmlImportXml(self, Data, ImportMap, Overwrite, Destination) -> Tuple_[XlXmlImportResult, XmlMap]:
        """ XmlImportXml(self: WorkbookClass, Data: str, Overwrite: object, Destination: object) -> (XlXmlImportResult, XmlMap) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: WorkbookClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _Protect(self, Password:object, Structure:object, Windows:object): # -> 
        """ _Protect(self: WorkbookClass, Password: object, Structure: object, Windows: object) """
        ...

    def _SaveAs(self, Filename:object, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AccessMode:XlSaveAsAccessMode, ConflictResolution:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ _SaveAs(self: WorkbookClass, Filename: object, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AccessMode: XlSaveAsAccessMode, ConflictResolution: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...

    AddinInstall = ...
    AddinUninstall = ...
    AfterSave = ...
    AfterXmlExport = ...
    AfterXmlImport = ...
    BeforeClose = ...
    BeforePrint = ...
    BeforeSave = ...
    BeforeXmlExport = ...
    BeforeXmlImport = ...
    Deactivate = ...
    ModelChange = ...
    NewChart = ...
    NewSheet = ...
    Open = ...
    PivotTableCloseConnection = ...
    PivotTableOpenConnection = ...
    RowsetComplete = ...
    SheetActivate = ...
    SheetBeforeDelete = ...
    SheetBeforeDoubleClick = ...
    SheetBeforeRightClick = ...
    SheetCalculate = ...
    SheetChange = ...
    SheetDeactivate = ...
    SheetFollowHyperlink = ...
    SheetLensGalleryRenderComplete = ...
    SheetPivotTableAfterValueChange = ...
    SheetPivotTableBeforeAllocateChanges = ...
    SheetPivotTableBeforeCommitChanges = ...
    SheetPivotTableBeforeDiscardChanges = ...
    SheetPivotTableChangeSync = ...
    SheetPivotTableUpdate = ...
    SheetSelectionChange = ...
    SheetTableUpdate = ...
    WindowActivate = ...
    WindowDeactivate = ...
    WindowResize = ...
    WorkbookEvents_Event_Activate = ...
    WorkbookEvents_Event_Sync = ...


class WorkbookConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: WorkbookConnection) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: WorkbookConnection) -> XlCreator """
        ...

    @property
    def DataFeedConnection(self) -> DataFeedConnection:
        """ Get: DataFeedConnection(self: WorkbookConnection) -> DataFeedConnection """
        ...

    @property
    def Description(self) -> str:
        """
        Get: Description(self: WorkbookConnection) -> str
        Set: Description(self: WorkbookConnection) = value
        """
        ...

    @property
    def InModel(self) -> bool:
        """ Get: InModel(self: WorkbookConnection) -> bool """
        ...

    @property
    def ModelConnection(self) -> ModelConnection:
        """ Get: ModelConnection(self: WorkbookConnection) -> ModelConnection """
        ...

    @property
    def ModelTables(self) -> ModelTables:
        """ Get: ModelTables(self: WorkbookConnection) -> ModelTables """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: WorkbookConnection) -> str
        Set: Name(self: WorkbookConnection) = value
        """
        ...

    @property
    def ODBCConnection(self) -> ODBCConnection:
        """ Get: ODBCConnection(self: WorkbookConnection) -> ODBCConnection """
        ...

    @property
    def OLEDBConnection(self) -> OLEDBConnection:
        """ Get: OLEDBConnection(self: WorkbookConnection) -> OLEDBConnection """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: WorkbookConnection) -> object """
        ...

    @property
    def Ranges(self) -> Ranges:
        """ Get: Ranges(self: WorkbookConnection) -> Ranges """
        ...

    @property
    def RefreshWithRefreshAll(self) -> bool:
        """
        Get: RefreshWithRefreshAll(self: WorkbookConnection) -> bool
        Set: RefreshWithRefreshAll(self: WorkbookConnection) = value
        """
        ...

    @property
    def TextConnection(self) -> TextConnection:
        """ Get: TextConnection(self: WorkbookConnection) -> TextConnection """
        ...

    @property
    def Type(self) -> XlConnectionType:
        """ Get: Type(self: WorkbookConnection) -> XlConnectionType """
        ...

    @property
    def WorksheetDataConnection(self) -> WorksheetDataConnection:
        """ Get: WorksheetDataConnection(self: WorkbookConnection) -> WorksheetDataConnection """
        ...

    @property
    def _Default(self) -> str:
        """
        Get: _Default(self: WorkbookConnection) -> str
        Set: _Default(self: WorkbookConnection) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: WorkbookConnection) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: WorkbookConnection) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class WorkbookEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Activate(self): # -> 
        """ Activate(self: WorkbookEvents) """
        ...

    def AddinInstall(self): # -> 
        """ AddinInstall(self: WorkbookEvents) """
        ...

    def AddinUninstall(self): # -> 
        """ AddinUninstall(self: WorkbookEvents) """
        ...

    def AfterSave(self, Success:bool): # -> 
        """ AfterSave(self: WorkbookEvents, Success: bool) """
        ...

    def AfterXmlExport(self, Map:XmlMap, Url:str, Result:XlXmlExportResult): # -> 
        """ AfterXmlExport(self: WorkbookEvents, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        ...

    def AfterXmlImport(self, Map:XmlMap, IsRefresh:bool, Result:XlXmlImportResult): # -> 
        """ AfterXmlImport(self: WorkbookEvents, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        ...

    def BeforeClose(self, Cancel) -> bool:
        """ BeforeClose(self: WorkbookEvents) -> bool """
        ...

    def BeforePrint(self, Cancel) -> bool:
        """ BeforePrint(self: WorkbookEvents) -> bool """
        ...

    def BeforeSave(self, SaveAsUI, Cancel) -> bool:
        """ BeforeSave(self: WorkbookEvents, SaveAsUI: bool) -> bool """
        ...

    def BeforeXmlExport(self, Map, Url, Cancel) -> bool:
        """ BeforeXmlExport(self: WorkbookEvents, Map: XmlMap, Url: str) -> bool """
        ...

    def BeforeXmlImport(self, Map, Url, IsRefresh, Cancel) -> bool:
        """ BeforeXmlImport(self: WorkbookEvents, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        ...

    def Deactivate(self): # -> 
        """ Deactivate(self: WorkbookEvents) """
        ...

    def ModelChange(self, Changes:ModelChanges): # -> 
        """ ModelChange(self: WorkbookEvents, Changes: ModelChanges) """
        ...

    def NewChart(self, Ch:Chart): # -> 
        """ NewChart(self: WorkbookEvents, Ch: Chart) """
        ...

    def NewSheet(self, Sh:object): # -> 
        """ NewSheet(self: WorkbookEvents, Sh: object) """
        ...

    def Open(self): # -> 
        """ Open(self: WorkbookEvents) """
        ...

    def PivotTableCloseConnection(self, Target:PivotTable): # -> 
        """ PivotTableCloseConnection(self: WorkbookEvents, Target: PivotTable) """
        ...

    def PivotTableOpenConnection(self, Target:PivotTable): # -> 
        """ PivotTableOpenConnection(self: WorkbookEvents, Target: PivotTable) """
        ...

    def RowsetComplete(self, Description:str, Sheet:str, Success:bool): # -> 
        """ RowsetComplete(self: WorkbookEvents, Description: str, Sheet: str, Success: bool) """
        ...

    def SheetActivate(self, Sh:object): # -> 
        """ SheetActivate(self: WorkbookEvents, Sh: object) """
        ...

    def SheetBeforeDelete(self, Sh:object): # -> 
        """ SheetBeforeDelete(self: WorkbookEvents, Sh: object) """
        ...

    def SheetBeforeDoubleClick(self, Sh, Target, Cancel) -> bool:
        """ SheetBeforeDoubleClick(self: WorkbookEvents, Sh: object, Target: Range) -> bool """
        ...

    def SheetBeforeRightClick(self, Sh, Target, Cancel) -> bool:
        """ SheetBeforeRightClick(self: WorkbookEvents, Sh: object, Target: Range) -> bool """
        ...

    def SheetCalculate(self, Sh:object): # -> 
        """ SheetCalculate(self: WorkbookEvents, Sh: object) """
        ...

    def SheetChange(self, Sh:object, Target:Range): # -> 
        """ SheetChange(self: WorkbookEvents, Sh: object, Target: Range) """
        ...

    def SheetDeactivate(self, Sh:object): # -> 
        """ SheetDeactivate(self: WorkbookEvents, Sh: object) """
        ...

    def SheetFollowHyperlink(self, Sh:object, Target:Hyperlink): # -> 
        """ SheetFollowHyperlink(self: WorkbookEvents, Sh: object, Target: Hyperlink) """
        ...

    def SheetLensGalleryRenderComplete(self, Sh:object): # -> 
        """ SheetLensGalleryRenderComplete(self: WorkbookEvents, Sh: object) """
        ...

    def SheetPivotTableAfterValueChange(self, Sh:object, TargetPivotTable:PivotTable, TargetRange:Range): # -> 
        """ SheetPivotTableAfterValueChange(self: WorkbookEvents, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        ...

    def SheetPivotTableBeforeAllocateChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ SheetPivotTableBeforeAllocateChanges(self: WorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def SheetPivotTableBeforeCommitChanges(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ SheetPivotTableBeforeCommitChanges(self: WorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...

    def SheetPivotTableBeforeDiscardChanges(self, Sh:object, TargetPivotTable:PivotTable, ValueChangeStart:int, ValueChangeEnd:int): # -> 
        """ SheetPivotTableBeforeDiscardChanges(self: WorkbookEvents, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        ...

    def SheetPivotTableChangeSync(self, Sh:object, Target:PivotTable): # -> 
        """ SheetPivotTableChangeSync(self: WorkbookEvents, Sh: object, Target: PivotTable) """
        ...

    def SheetPivotTableUpdate(self, Sh:object, Target:PivotTable): # -> 
        """ SheetPivotTableUpdate(self: WorkbookEvents, Sh: object, Target: PivotTable) """
        ...

    def SheetSelectionChange(self, Sh:object, Target:Range): # -> 
        """ SheetSelectionChange(self: WorkbookEvents, Sh: object, Target: Range) """
        ...

    def SheetTableUpdate(self, Sh:object, Target:TableObject): # -> 
        """ SheetTableUpdate(self: WorkbookEvents, Sh: object, Target: TableObject) """
        ...

    def Sync(self, SyncEventType): # ->  # Not found arg types: {'SyncEventType': 'MsoSyncEventType'}
        """ Sync(self: WorkbookEvents, SyncEventType: MsoSyncEventType) """
        ...

    def WindowActivate(self, Wn:Window): # -> 
        """ WindowActivate(self: WorkbookEvents, Wn: Window) """
        ...

    def WindowDeactivate(self, Wn:Window): # -> 
        """ WindowDeactivate(self: WorkbookEvents, Wn: Window) """
        ...

    def WindowResize(self, Wn:Window): # -> 
        """ WindowResize(self: WorkbookEvents, Wn: Window) """
        ...


class WorkbookEvents_ActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_ActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: WorkbookEvents_ActivateEventHandler) """
        ...


class WorkbookEvents_AddinInstallEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_AddinInstallEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: WorkbookEvents_AddinInstallEventHandler) """
        ...


class WorkbookEvents_AddinUninstallEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_AddinUninstallEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: WorkbookEvents_AddinUninstallEventHandler) """
        ...


class WorkbookEvents_AfterSaveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_AfterSaveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Success:bool): # -> 
        """ Invoke(self: WorkbookEvents_AfterSaveEventHandler, Success: bool) """
        ...


class WorkbookEvents_AfterXmlExportEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_AfterXmlExportEventHandler(: object, : UIntPtr) """
    def Invoke(self, Map:XmlMap, Url:str, Result:XlXmlExportResult): # -> 
        """ Invoke(self: WorkbookEvents_AfterXmlExportEventHandler, Map: XmlMap, Url: str, Result: XlXmlExportResult) """
        ...


class WorkbookEvents_AfterXmlImportEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_AfterXmlImportEventHandler(: object, : UIntPtr) """
    def Invoke(self, Map:XmlMap, IsRefresh:bool, Result:XlXmlImportResult): # -> 
        """ Invoke(self: WorkbookEvents_AfterXmlImportEventHandler, Map: XmlMap, IsRefresh: bool, Result: XlXmlImportResult) """
        ...


class WorkbookEvents_BeforeCloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_BeforeCloseEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: WorkbookEvents_BeforeCloseEventHandler) -> bool """
        ...


class WorkbookEvents_BeforePrintEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_BeforePrintEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: WorkbookEvents_BeforePrintEventHandler) -> bool """
        ...


class WorkbookEvents_BeforeSaveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_BeforeSaveEventHandler(: object, : UIntPtr) """
    def Invoke(self, SaveAsUI, Cancel) -> bool:
        """ Invoke(self: WorkbookEvents_BeforeSaveEventHandler, SaveAsUI: bool) -> bool """
        ...


class WorkbookEvents_BeforeXmlExportEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_BeforeXmlExportEventHandler(: object, : UIntPtr) """
    def Invoke(self, Map, Url, Cancel) -> bool:
        """ Invoke(self: WorkbookEvents_BeforeXmlExportEventHandler, Map: XmlMap, Url: str) -> bool """
        ...


class WorkbookEvents_BeforeXmlImportEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_BeforeXmlImportEventHandler(: object, : UIntPtr) """
    def Invoke(self, Map, Url, IsRefresh, Cancel) -> bool:
        """ Invoke(self: WorkbookEvents_BeforeXmlImportEventHandler, Map: XmlMap, Url: str, IsRefresh: bool) -> bool """
        ...


class WorkbookEvents_DeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_DeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: WorkbookEvents_DeactivateEventHandler) """
        ...


class WorkbookEvents_ModelChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_ModelChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Changes:ModelChanges): # -> 
        """ Invoke(self: WorkbookEvents_ModelChangeEventHandler, Changes: ModelChanges) """
        ...


class WorkbookEvents_NewChartEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_NewChartEventHandler(: object, : UIntPtr) """
    def Invoke(self, Ch:Chart): # -> 
        """ Invoke(self: WorkbookEvents_NewChartEventHandler, Ch: Chart) """
        ...


class WorkbookEvents_NewSheetEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_NewSheetEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object): # -> 
        """ Invoke(self: WorkbookEvents_NewSheetEventHandler, Sh: object) """
        ...


class WorkbookEvents_OpenEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_OpenEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: WorkbookEvents_OpenEventHandler) """
        ...


class WorkbookEvents_PivotTableCloseConnectionEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_PivotTableCloseConnectionEventHandler(: object, : UIntPtr) """
    def Invoke(self, Target:PivotTable): # -> 
        """ Invoke(self: WorkbookEvents_PivotTableCloseConnectionEventHandler, Target: PivotTable) """
        ...


class WorkbookEvents_PivotTableOpenConnectionEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_PivotTableOpenConnectionEventHandler(: object, : UIntPtr) """
    def Invoke(self, Target:PivotTable): # -> 
        """ Invoke(self: WorkbookEvents_PivotTableOpenConnectionEventHandler, Target: PivotTable) """
        ...


class WorkbookEvents_RowsetCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_RowsetCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, Description:str, Sheet:str, Success:bool): # -> 
        """ Invoke(self: WorkbookEvents_RowsetCompleteEventHandler, Description: str, Sheet: str, Success: bool) """
        ...


class WorkbookEvents_SheetActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object): # -> 
        """ Invoke(self: WorkbookEvents_SheetActivateEventHandler, Sh: object) """
        ...


class WorkbookEvents_SheetBeforeDeleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetBeforeDeleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object): # -> 
        """ Invoke(self: WorkbookEvents_SheetBeforeDeleteEventHandler, Sh: object) """
        ...


class WorkbookEvents_SheetBeforeDoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetBeforeDoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh, Target, Cancel) -> bool:
        """ Invoke(self: WorkbookEvents_SheetBeforeDoubleClickEventHandler, Sh: object, Target: Range) -> bool """
        ...


class WorkbookEvents_SheetBeforeRightClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetBeforeRightClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh, Target, Cancel) -> bool:
        """ Invoke(self: WorkbookEvents_SheetBeforeRightClickEventHandler, Sh: object, Target: Range) -> bool """
        ...


class WorkbookEvents_SheetCalculateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetCalculateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object): # -> 
        """ Invoke(self: WorkbookEvents_SheetCalculateEventHandler, Sh: object) """
        ...


class WorkbookEvents_SheetChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, Target:Range): # -> 
        """ Invoke(self: WorkbookEvents_SheetChangeEventHandler, Sh: object, Target: Range) """
        ...


class WorkbookEvents_SheetDeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetDeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object): # -> 
        """ Invoke(self: WorkbookEvents_SheetDeactivateEventHandler, Sh: object) """
        ...


class WorkbookEvents_SheetFollowHyperlinkEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetFollowHyperlinkEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, Target:Hyperlink): # -> 
        """ Invoke(self: WorkbookEvents_SheetFollowHyperlinkEventHandler, Sh: object, Target: Hyperlink) """
        ...


class WorkbookEvents_SheetLensGalleryRenderCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetLensGalleryRenderCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object): # -> 
        """ Invoke(self: WorkbookEvents_SheetLensGalleryRenderCompleteEventHandler, Sh: object) """
        ...


class WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, TargetPivotTable:PivotTable, TargetRange:Range): # -> 
        """ Invoke(self: WorkbookEvents_SheetPivotTableAfterValueChangeEventHandler, Sh: object, TargetPivotTable: PivotTable, TargetRange: Range) """
        ...


class WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ Invoke(self: WorkbookEvents_SheetPivotTableBeforeAllocateChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...


class WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh, TargetPivotTable, ValueChangeStart, ValueChangeEnd, Cancel) -> bool:
        """ Invoke(self: WorkbookEvents_SheetPivotTableBeforeCommitChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) -> bool """
        ...


class WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, TargetPivotTable:PivotTable, ValueChangeStart:int, ValueChangeEnd:int): # -> 
        """ Invoke(self: WorkbookEvents_SheetPivotTableBeforeDiscardChangesEventHandler, Sh: object, TargetPivotTable: PivotTable, ValueChangeStart: int, ValueChangeEnd: int) """
        ...


class WorkbookEvents_SheetPivotTableChangeSyncEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetPivotTableChangeSyncEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, Target:PivotTable): # -> 
        """ Invoke(self: WorkbookEvents_SheetPivotTableChangeSyncEventHandler, Sh: object, Target: PivotTable) """
        ...


class WorkbookEvents_SheetPivotTableUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetPivotTableUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, Target:PivotTable): # -> 
        """ Invoke(self: WorkbookEvents_SheetPivotTableUpdateEventHandler, Sh: object, Target: PivotTable) """
        ...


class WorkbookEvents_SheetSelectionChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetSelectionChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, Target:Range): # -> 
        """ Invoke(self: WorkbookEvents_SheetSelectionChangeEventHandler, Sh: object, Target: Range) """
        ...


class WorkbookEvents_SheetTableUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SheetTableUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sh:object, Target:TableObject): # -> 
        """ Invoke(self: WorkbookEvents_SheetTableUpdateEventHandler, Sh: object, Target: TableObject) """
        ...


class WorkbookEvents_SinkHelper(WorkbookEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_ActivateDelegate = ...
    m_AddinInstallDelegate = ...
    m_AddinUninstallDelegate = ...
    m_AfterSaveDelegate = ...
    m_AfterXmlExportDelegate = ...
    m_AfterXmlImportDelegate = ...
    m_BeforeCloseDelegate = ...
    m_BeforePrintDelegate = ...
    m_BeforeSaveDelegate = ...
    m_BeforeXmlExportDelegate = ...
    m_BeforeXmlImportDelegate = ...
    m_DeactivateDelegate = ...
    m_dwCookie = ...
    m_ModelChangeDelegate = ...
    m_NewChartDelegate = ...
    m_NewSheetDelegate = ...
    m_OpenDelegate = ...
    m_PivotTableCloseConnectionDelegate = ...
    m_PivotTableOpenConnectionDelegate = ...
    m_RowsetCompleteDelegate = ...
    m_SheetActivateDelegate = ...
    m_SheetBeforeDeleteDelegate = ...
    m_SheetBeforeDoubleClickDelegate = ...
    m_SheetBeforeRightClickDelegate = ...
    m_SheetCalculateDelegate = ...
    m_SheetChangeDelegate = ...
    m_SheetDeactivateDelegate = ...
    m_SheetFollowHyperlinkDelegate = ...
    m_SheetLensGalleryRenderCompleteDelegate = ...
    m_SheetPivotTableAfterValueChangeDelegate = ...
    m_SheetPivotTableBeforeAllocateChangesDelegate = ...
    m_SheetPivotTableBeforeCommitChangesDelegate = ...
    m_SheetPivotTableBeforeDiscardChangesDelegate = ...
    m_SheetPivotTableChangeSyncDelegate = ...
    m_SheetPivotTableUpdateDelegate = ...
    m_SheetSelectionChangeDelegate = ...
    m_SheetTableUpdateDelegate = ...
    m_SyncDelegate = ...
    m_WindowActivateDelegate = ...
    m_WindowDeactivateDelegate = ...
    m_WindowResizeDelegate = ...


class WorkbookEvents_SyncEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_SyncEventHandler(: object, : UIntPtr) """
    def Invoke(self, SyncEventType): # ->  # Not found arg types: {'SyncEventType': 'MsoSyncEventType'}
        """ Invoke(self: WorkbookEvents_SyncEventHandler, SyncEventType: MsoSyncEventType) """
        ...


class WorkbookEvents_WindowActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_WindowActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wn:Window): # -> 
        """ Invoke(self: WorkbookEvents_WindowActivateEventHandler, Wn: Window) """
        ...


class WorkbookEvents_WindowDeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_WindowDeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wn:Window): # -> 
        """ Invoke(self: WorkbookEvents_WindowDeactivateEventHandler, Wn: Window) """
        ...


class WorkbookEvents_WindowResizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ WorkbookEvents_WindowResizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Wn:Window): # -> 
        """ Invoke(self: WorkbookEvents_WindowResizeEventHandler, Wn: Window) """
        ...


class Workbooks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Workbooks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Workbooks) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Workbooks) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Workbooks) -> object """
        ...


    def Add(self, Template:object) -> Workbook:
        """ Add(self: Workbooks, Template: object) -> Workbook """
        ...

    def CanCheckOut(self, Filename:str) -> bool:
        """ CanCheckOut(self: Workbooks, Filename: str) -> bool """
        ...

    def CheckOut(self, Filename:str): # -> 
        """ CheckOut(self: Workbooks, Filename: str) """
        ...

    def Close(self): # -> 
        """ Close(self: Workbooks) """
        ...

    def Open(self, Filename:str, UpdateLinks:object, ReadOnly:object, Format:object, Password:object, WriteResPassword:object, IgnoreReadOnlyRecommended:object, Origin:object, Delimiter:object, Editable:object, Notify:object, Converter:object, AddToMru:object, Local:object, CorruptLoad:object) -> Workbook:
        """ Open(self: Workbooks, Filename: str, UpdateLinks: object, ReadOnly: object, Format: object, Password: object, WriteResPassword: object, IgnoreReadOnlyRecommended: object, Origin: object, Delimiter: object, Editable: object, Notify: object, Converter: object, AddToMru: object, Local: object, CorruptLoad: object) -> Workbook """
        ...

    def OpenDatabase(self, Filename:str, CommandText:object, CommandType:object, BackgroundQuery:object, ImportDataAs:object) -> Workbook:
        """ OpenDatabase(self: Workbooks, Filename: str, CommandText: object, CommandType: object, BackgroundQuery: object, ImportDataAs: object) -> Workbook """
        ...

    def OpenText(self, Filename:str, Origin:object, StartRow:object, DataType:object, TextQualifier:XlTextQualifier, ConsecutiveDelimiter:object, Tab:object, Semicolon:object, Comma:object, Space:object, Other:object, OtherChar:object, FieldInfo:object, TextVisualLayout:object, DecimalSeparator:object, ThousandsSeparator:object, TrailingMinusNumbers:object, Local:object): # -> 
        """ OpenText(self: Workbooks, Filename: str, Origin: object, StartRow: object, DataType: object, TextQualifier: XlTextQualifier, ConsecutiveDelimiter: object, Tab: object, Semicolon: object, Comma: object, Space: object, Other: object, OtherChar: object, FieldInfo: object, TextVisualLayout: object, DecimalSeparator: object, ThousandsSeparator: object, TrailingMinusNumbers: object, Local: object) """
        ...

    def OpenXML(self, Filename:str, Stylesheets:object, LoadOption:object) -> Workbook:
        """ OpenXML(self: Workbooks, Filename: str, Stylesheets: object, LoadOption: object) -> Workbook """
        ...

    def _Open(self, Filename:str, UpdateLinks:object, ReadOnly:object, Format:object, Password:object, WriteResPassword:object, IgnoreReadOnlyRecommended:object, Origin:object, Delimiter:object, Editable:object, Notify:object, Converter:object, AddToMru:object) -> Workbook:
        """ _Open(self: Workbooks, Filename: str, UpdateLinks: object, ReadOnly: object, Format: object, Password: object, WriteResPassword: object, IgnoreReadOnlyRecommended: object, Origin: object, Delimiter: object, Editable: object, Notify: object, Converter: object, AddToMru: object) -> Workbook """
        ...

    def _OpenText(self, Filename:str, Origin:object, StartRow:object, DataType:object, TextQualifier:XlTextQualifier, ConsecutiveDelimiter:object, Tab:object, Semicolon:object, Comma:object, Space:object, Other:object, OtherChar:object, FieldInfo:object, TextVisualLayout:object, DecimalSeparator:object, ThousandsSeparator:object): # -> 
        """ _OpenText(self: Workbooks, Filename: str, Origin: object, StartRow: object, DataType: object, TextQualifier: XlTextQualifier, ConsecutiveDelimiter: object, Tab: object, Semicolon: object, Comma: object, Space: object, Other: object, OtherChar: object, FieldInfo: object, TextVisualLayout: object, DecimalSeparator: object, ThousandsSeparator: object) """
        ...

    def _OpenXML(self, Filename:str, Stylesheets:object) -> Workbook:
        """ _OpenXML(self: Workbooks, Filename: str, Stylesheets: object) -> Workbook """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __OpenText(self, Filename:str, Origin:object, StartRow:object, DataType:object, TextQualifier:XlTextQualifier, ConsecutiveDelimiter:object, Tab:object, Semicolon:object, Comma:object, Space:object, Other:object, OtherChar:object, FieldInfo:object, TextVisualLayout:object): # -> 
        """ __OpenText(self: Workbooks, Filename: str, Origin: object, StartRow: object, DataType: object, TextQualifier: XlTextQualifier, ConsecutiveDelimiter: object, Tab: object, Semicolon: object, Comma: object, Space: object, Other: object, OtherChar: object, FieldInfo: object, TextVisualLayout: object) """
        ...


class _Worksheet: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Worksheet) -> Application """
        ...

    @property
    def AutoFilter(self) -> AutoFilter:
        """ Get: AutoFilter(self: _Worksheet) -> AutoFilter """
        ...

    @property
    def AutoFilterMode(self) -> bool:
        """
        Get: AutoFilterMode(self: _Worksheet) -> bool
        Set: AutoFilterMode(self: _Worksheet) = value
        """
        ...

    @property
    def Cells(self) -> Range:
        """ Get: Cells(self: _Worksheet) -> Range """
        ...

    @property
    def CircularReference(self) -> Range:
        """ Get: CircularReference(self: _Worksheet) -> Range """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: _Worksheet) -> str """
        ...

    @property
    def Columns(self) -> Range:
        """ Get: Columns(self: _Worksheet) -> Range """
        ...

    @property
    def Comments(self) -> Comments:
        """ Get: Comments(self: _Worksheet) -> Comments """
        ...

    @property
    def ConsolidationFunction(self) -> XlConsolidationFunction:
        """ Get: ConsolidationFunction(self: _Worksheet) -> XlConsolidationFunction """
        ...

    @property
    def ConsolidationOptions(self) -> object:
        """ Get: ConsolidationOptions(self: _Worksheet) -> object """
        ...

    @property
    def ConsolidationSources(self) -> object:
        """ Get: ConsolidationSources(self: _Worksheet) -> object """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: _Worksheet) -> XlCreator """
        ...

    @property
    def CustomProperties(self) -> CustomProperties:
        """ Get: CustomProperties(self: _Worksheet) -> CustomProperties """
        ...

    @property
    def DisplayAutomaticPageBreaks(self) -> bool:
        """
        Get: DisplayAutomaticPageBreaks(self: _Worksheet) -> bool
        Set: DisplayAutomaticPageBreaks(self: _Worksheet) = value
        """
        ...

    @property
    def DisplayPageBreaks(self) -> bool:
        """
        Get: DisplayPageBreaks(self: _Worksheet) -> bool
        Set: DisplayPageBreaks(self: _Worksheet) = value
        """
        ...

    @property
    def DisplayRightToLeft(self) -> bool:
        """
        Get: DisplayRightToLeft(self: _Worksheet) -> bool
        Set: DisplayRightToLeft(self: _Worksheet) = value
        """
        ...

    @property
    def EnableAutoFilter(self) -> bool:
        """
        Get: EnableAutoFilter(self: _Worksheet) -> bool
        Set: EnableAutoFilter(self: _Worksheet) = value
        """
        ...

    @property
    def EnableCalculation(self) -> bool:
        """
        Get: EnableCalculation(self: _Worksheet) -> bool
        Set: EnableCalculation(self: _Worksheet) = value
        """
        ...

    @property
    def EnableFormatConditionsCalculation(self) -> bool:
        """
        Get: EnableFormatConditionsCalculation(self: _Worksheet) -> bool
        Set: EnableFormatConditionsCalculation(self: _Worksheet) = value
        """
        ...

    @property
    def EnableOutlining(self) -> bool:
        """
        Get: EnableOutlining(self: _Worksheet) -> bool
        Set: EnableOutlining(self: _Worksheet) = value
        """
        ...

    @property
    def EnablePivotTable(self) -> bool:
        """
        Get: EnablePivotTable(self: _Worksheet) -> bool
        Set: EnablePivotTable(self: _Worksheet) = value
        """
        ...

    @property
    def EnableSelection(self) -> XlEnableSelection:
        """
        Get: EnableSelection(self: _Worksheet) -> XlEnableSelection
        Set: EnableSelection(self: _Worksheet) = value
        """
        ...

    @property
    def FilterMode(self) -> bool:
        """ Get: FilterMode(self: _Worksheet) -> bool """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: _Worksheet) -> HPageBreaks """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: _Worksheet) -> Hyperlinks """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: _Worksheet) -> int """
        ...

    @property
    def ListObjects(self) -> ListObjects:
        """ Get: ListObjects(self: _Worksheet) -> ListObjects """
        ...

    @property
    def MailEnvelope(self): # -> MsoEnvelope
        """ Get: MailEnvelope(self: _Worksheet) -> MsoEnvelope """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _Worksheet) -> str
        Set: Name(self: _Worksheet) = value
        """
        ...

    @property
    def Names(self) -> Names:
        """ Get: Names(self: _Worksheet) -> Names """
        ...

    @property
    def Next(self) -> object:
        """ Get: Next(self: _Worksheet) -> object """
        ...

    @property
    def OnCalculate(self) -> str:
        """
        Get: OnCalculate(self: _Worksheet) -> str
        Set: OnCalculate(self: _Worksheet) = value
        """
        ...

    @property
    def OnData(self) -> str:
        """
        Get: OnData(self: _Worksheet) -> str
        Set: OnData(self: _Worksheet) = value
        """
        ...

    @property
    def OnDoubleClick(self) -> str:
        """
        Get: OnDoubleClick(self: _Worksheet) -> str
        Set: OnDoubleClick(self: _Worksheet) = value
        """
        ...

    @property
    def OnEntry(self) -> str:
        """
        Get: OnEntry(self: _Worksheet) -> str
        Set: OnEntry(self: _Worksheet) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: _Worksheet) -> str
        Set: OnSheetActivate(self: _Worksheet) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: _Worksheet) -> str
        Set: OnSheetDeactivate(self: _Worksheet) = value
        """
        ...

    @property
    def Outline(self) -> Outline:
        """ Get: Outline(self: _Worksheet) -> Outline """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """ Get: PageSetup(self: _Worksheet) -> PageSetup """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Worksheet) -> object """
        ...

    @property
    def Previous(self) -> object:
        """ Get: Previous(self: _Worksheet) -> object """
        ...

    @property
    def PrintedCommentPages(self) -> int:
        """ Get: PrintedCommentPages(self: _Worksheet) -> int """
        ...

    @property
    def ProtectContents(self) -> bool:
        """ Get: ProtectContents(self: _Worksheet) -> bool """
        ...

    @property
    def ProtectDrawingObjects(self) -> bool:
        """ Get: ProtectDrawingObjects(self: _Worksheet) -> bool """
        ...

    @property
    def Protection(self) -> Protection:
        """ Get: Protection(self: _Worksheet) -> Protection """
        ...

    @property
    def ProtectionMode(self) -> bool:
        """ Get: ProtectionMode(self: _Worksheet) -> bool """
        ...

    @property
    def ProtectScenarios(self) -> bool:
        """ Get: ProtectScenarios(self: _Worksheet) -> bool """
        ...

    @property
    def QueryTables(self) -> QueryTables:
        """ Get: QueryTables(self: _Worksheet) -> QueryTables """
        ...

    @property
    def Rows(self) -> Range:
        """ Get: Rows(self: _Worksheet) -> Range """
        ...

    @property
    def Scripts(self): # -> Scripts
        """ Get: Scripts(self: _Worksheet) -> Scripts """
        ...

    @property
    def ScrollArea(self) -> str:
        """
        Get: ScrollArea(self: _Worksheet) -> str
        Set: ScrollArea(self: _Worksheet) = value
        """
        ...

    @property
    def Shapes(self) -> Shapes:
        """ Get: Shapes(self: _Worksheet) -> Shapes """
        ...

    @property
    def SmartTags(self) -> SmartTags:
        """ Get: SmartTags(self: _Worksheet) -> SmartTags """
        ...

    @property
    def Sort(self) -> Sort:
        """ Get: Sort(self: _Worksheet) -> Sort """
        ...

    @property
    def StandardHeight(self) -> float:
        """ Get: StandardHeight(self: _Worksheet) -> float """
        ...

    @property
    def StandardWidth(self) -> float:
        """
        Get: StandardWidth(self: _Worksheet) -> float
        Set: StandardWidth(self: _Worksheet) = value
        """
        ...

    @property
    def Tab(self) -> Tab:
        """ Get: Tab(self: _Worksheet) -> Tab """
        ...

    @property
    def TransitionExpEval(self) -> bool:
        """
        Get: TransitionExpEval(self: _Worksheet) -> bool
        Set: TransitionExpEval(self: _Worksheet) = value
        """
        ...

    @property
    def TransitionFormEntry(self) -> bool:
        """
        Get: TransitionFormEntry(self: _Worksheet) -> bool
        Set: TransitionFormEntry(self: _Worksheet) = value
        """
        ...

    @property
    def Type(self) -> XlSheetType:
        """ Get: Type(self: _Worksheet) -> XlSheetType """
        ...

    @property
    def UsedRange(self) -> Range:
        """ Get: UsedRange(self: _Worksheet) -> Range """
        ...

    @property
    def Visible(self) -> XlSheetVisibility:
        """
        Get: Visible(self: _Worksheet) -> XlSheetVisibility
        Set: Visible(self: _Worksheet) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: _Worksheet) -> VPageBreaks """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: _Worksheet) -> str
        Set: _CodeName(self: _Worksheet) = value
        """
        ...

    @property
    def _DisplayRightToLeft(self) -> int:
        """
        Get: _DisplayRightToLeft(self: _Worksheet) -> int
        Set: _DisplayRightToLeft(self: _Worksheet) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: _Worksheet) """
        ...

    def Arcs(self, Index:object) -> object:
        """ Arcs(self: _Worksheet, Index: object) -> object """
        ...

    def Buttons(self, Index:object) -> object:
        """ Buttons(self: _Worksheet, Index: object) -> object """
        ...

    def Calculate(self): # -> 
        """ Calculate(self: _Worksheet) """
        ...

    def ChartObjects(self, Index:object) -> object:
        """ ChartObjects(self: _Worksheet, Index: object) -> object """
        ...

    def CheckBoxes(self, Index:object) -> object:
        """ CheckBoxes(self: _Worksheet, Index: object) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object): # -> 
        """ CheckSpelling(self: _Worksheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        ...

    def CircleInvalid(self): # -> 
        """ CircleInvalid(self: _Worksheet) """
        ...

    def ClearArrows(self): # -> 
        """ ClearArrows(self: _Worksheet) """
        ...

    def ClearCircles(self): # -> 
        """ ClearCircles(self: _Worksheet) """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: _Worksheet, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: _Worksheet) """
        ...

    def DrawingObjects(self, Index:object) -> object:
        """ DrawingObjects(self: _Worksheet, Index: object) -> object """
        ...

    def Drawings(self, Index:object) -> object:
        """ Drawings(self: _Worksheet, Index: object) -> object """
        ...

    def DropDowns(self, Index:object) -> object:
        """ DropDowns(self: _Worksheet, Index: object) -> object """
        ...

    def Evaluate(self, Name:object) -> object:
        """ Evaluate(self: _Worksheet, Name: object) -> object """
        ...

    def ExportAsFixedFormat(self, Type:XlFixedFormatType, Filename:object, Quality:object, IncludeDocProperties:object, IgnorePrintAreas:object, From:object, To:object, OpenAfterPublish:object, FixedFormatExtClassPtr:object): # -> 
        """ ExportAsFixedFormat(self: _Worksheet, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        ...

    def GroupBoxes(self, Index:object) -> object:
        """ GroupBoxes(self: _Worksheet, Index: object) -> object """
        ...

    def GroupObjects(self, Index:object) -> object:
        """ GroupObjects(self: _Worksheet, Index: object) -> object """
        ...

    def Labels(self, Index:object) -> object:
        """ Labels(self: _Worksheet, Index: object) -> object """
        ...

    def Lines(self, Index:object) -> object:
        """ Lines(self: _Worksheet, Index: object) -> object """
        ...

    def ListBoxes(self, Index:object) -> object:
        """ ListBoxes(self: _Worksheet, Index: object) -> object """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: _Worksheet, Before: object, After: object) """
        ...

    def OLEObjects(self, Index:object) -> object:
        """ OLEObjects(self: _Worksheet, Index: object) -> object """
        ...

    def OptionButtons(self, Index:object) -> object:
        """ OptionButtons(self: _Worksheet, Index: object) -> object """
        ...

    def Ovals(self, Index:object) -> object:
        """ Ovals(self: _Worksheet, Index: object) -> object """
        ...

    def Paste(self, Destination:object, Link:object): # -> 
        """ Paste(self: _Worksheet, Destination: object, Link: object) """
        ...

    def PasteSpecial(self, Format:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object, NoHTMLFormatting:object): # -> 
        """ PasteSpecial(self: _Worksheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, NoHTMLFormatting: object) """
        ...

    def Pictures(self, Index:object) -> object:
        """ Pictures(self: _Worksheet, Index: object) -> object """
        ...

    def PivotTables(self, Index:object) -> object:
        """ PivotTables(self: _Worksheet, Index: object) -> object """
        ...

    def PivotTableWizard(self, SourceType:object, SourceData:object, TableDestination:object, TableName:object, RowGrand:object, ColumnGrand:object, SaveData:object, HasAutoFormat:object, AutoPage:object, Reserved:object, BackgroundQuery:object, OptimizeCache:object, PageFieldOrder:object, PageFieldWrapCount:object, ReadData:object, Connection:object) -> PivotTable:
        """ PivotTableWizard(self: _Worksheet, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) -> PivotTable """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: _Worksheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object, IgnorePrintAreas:object): # -> 
        """ PrintOutEx(self: _Worksheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: _Worksheet, EnableChanges: object) """
        ...

    def Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object, AllowFormattingCells:object, AllowFormattingColumns:object, AllowFormattingRows:object, AllowInsertingColumns:object, AllowInsertingRows:object, AllowInsertingHyperlinks:object, AllowDeletingColumns:object, AllowDeletingRows:object, AllowSorting:object, AllowFiltering:object, AllowUsingPivotTables:object): # -> 
        """ Protect(self: _Worksheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object, AllowFormattingCells: object, AllowFormattingColumns: object, AllowFormattingRows: object, AllowInsertingColumns: object, AllowInsertingRows: object, AllowInsertingHyperlinks: object, AllowDeletingColumns: object, AllowDeletingRows: object, AllowSorting: object, AllowFiltering: object, AllowUsingPivotTables: object) """
        ...

    def Rectangles(self, Index:object) -> object:
        """ Rectangles(self: _Worksheet, Index: object) -> object """
        ...

    def ResetAllPageBreaks(self): # -> 
        """ ResetAllPageBreaks(self: _Worksheet) """
        ...

    def SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object, Local:object): # -> 
        """ SaveAs(self: _Worksheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        ...

    def Scenarios(self, Index:object) -> object:
        """ Scenarios(self: _Worksheet, Index: object) -> object """
        ...

    def ScrollBars(self, Index:object) -> object:
        """ ScrollBars(self: _Worksheet, Index: object) -> object """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: _Worksheet, Replace: object) """
        ...

    def SetBackgroundPicture(self, Filename:str): # -> 
        """ SetBackgroundPicture(self: _Worksheet, Filename: str) """
        ...

    def ShowAllData(self): # -> 
        """ ShowAllData(self: _Worksheet) """
        ...

    def ShowDataForm(self): # -> 
        """ ShowDataForm(self: _Worksheet) """
        ...

    def Spinners(self, Index:object) -> object:
        """ Spinners(self: _Worksheet, Index: object) -> object """
        ...

    def TextBoxes(self, Index:object) -> object:
        """ TextBoxes(self: _Worksheet, Index: object) -> object """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: _Worksheet, Password: object) """
        ...

    def XmlDataQuery(self, XPath:str, SelectionNamespaces:object, Map:object) -> Range:
        """ XmlDataQuery(self: _Worksheet, XPath: str, SelectionNamespaces: object, Map: object) -> Range """
        ...

    def XmlMapQuery(self, XPath:str, SelectionNamespaces:object, Map:object) -> Range:
        """ XmlMapQuery(self: _Worksheet, XPath: str, SelectionNamespaces: object, Map: object) -> Range """
        ...

    def _CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object, IgnoreFinalYaa:object, SpellScript:object): # -> 
        """ _CheckSpelling(self: _Worksheet, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object, IgnoreFinalYaa: object, SpellScript: object) """
        ...

    def _Evaluate(self, Name:object) -> object:
        """ _Evaluate(self: _Worksheet, Name: object) -> object """
        ...

    def _PasteSpecial(self, Format:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object): # -> 
        """ _PasteSpecial(self: _Worksheet, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: _Worksheet, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ _Protect(self: _Worksheet, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def _SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ _SaveAs(self: _Worksheet, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...


class Worksheet(DocEvents_Event, _Worksheet): # skipped bases: <type 'object'>
    """ no doc """
    pass

class WorksheetClass(__ComObject, Worksheet): # skipped bases: <type 'DocEvents_Event'>, <type '_Worksheet'>, <type 'object'>
    """ WorksheetClass() """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: WorksheetClass) -> Application """
        ...

    @property
    def AutoFilter(self) -> AutoFilter:
        """ Get: AutoFilter(self: WorksheetClass) -> AutoFilter """
        ...

    @property
    def AutoFilterMode(self) -> bool:
        """
        Get: AutoFilterMode(self: WorksheetClass) -> bool
        Set: AutoFilterMode(self: WorksheetClass) = value
        """
        ...

    @property
    def Cells(self) -> Range:
        """ Get: Cells(self: WorksheetClass) -> Range """
        ...

    @property
    def CircularReference(self) -> Range:
        """ Get: CircularReference(self: WorksheetClass) -> Range """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: WorksheetClass) -> str """
        ...

    @property
    def Columns(self) -> Range:
        """ Get: Columns(self: WorksheetClass) -> Range """
        ...

    @property
    def Comments(self) -> Comments:
        """ Get: Comments(self: WorksheetClass) -> Comments """
        ...

    @property
    def ConsolidationFunction(self) -> XlConsolidationFunction:
        """ Get: ConsolidationFunction(self: WorksheetClass) -> XlConsolidationFunction """
        ...

    @property
    def ConsolidationOptions(self) -> object:
        """ Get: ConsolidationOptions(self: WorksheetClass) -> object """
        ...

    @property
    def ConsolidationSources(self) -> object:
        """ Get: ConsolidationSources(self: WorksheetClass) -> object """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: WorksheetClass) -> XlCreator """
        ...

    @property
    def CustomProperties(self) -> CustomProperties:
        """ Get: CustomProperties(self: WorksheetClass) -> CustomProperties """
        ...

    @property
    def DisplayAutomaticPageBreaks(self) -> bool:
        """
        Get: DisplayAutomaticPageBreaks(self: WorksheetClass) -> bool
        Set: DisplayAutomaticPageBreaks(self: WorksheetClass) = value
        """
        ...

    @property
    def DisplayPageBreaks(self) -> bool:
        """
        Get: DisplayPageBreaks(self: WorksheetClass) -> bool
        Set: DisplayPageBreaks(self: WorksheetClass) = value
        """
        ...

    @property
    def DisplayRightToLeft(self) -> bool:
        """
        Get: DisplayRightToLeft(self: WorksheetClass) -> bool
        Set: DisplayRightToLeft(self: WorksheetClass) = value
        """
        ...

    @property
    def EnableAutoFilter(self) -> bool:
        """
        Get: EnableAutoFilter(self: WorksheetClass) -> bool
        Set: EnableAutoFilter(self: WorksheetClass) = value
        """
        ...

    @property
    def EnableCalculation(self) -> bool:
        """
        Get: EnableCalculation(self: WorksheetClass) -> bool
        Set: EnableCalculation(self: WorksheetClass) = value
        """
        ...

    @property
    def EnableFormatConditionsCalculation(self) -> bool:
        """
        Get: EnableFormatConditionsCalculation(self: WorksheetClass) -> bool
        Set: EnableFormatConditionsCalculation(self: WorksheetClass) = value
        """
        ...

    @property
    def EnableOutlining(self) -> bool:
        """
        Get: EnableOutlining(self: WorksheetClass) -> bool
        Set: EnableOutlining(self: WorksheetClass) = value
        """
        ...

    @property
    def EnablePivotTable(self) -> bool:
        """
        Get: EnablePivotTable(self: WorksheetClass) -> bool
        Set: EnablePivotTable(self: WorksheetClass) = value
        """
        ...

    @property
    def EnableSelection(self) -> XlEnableSelection:
        """
        Get: EnableSelection(self: WorksheetClass) -> XlEnableSelection
        Set: EnableSelection(self: WorksheetClass) = value
        """
        ...

    @property
    def FilterMode(self) -> bool:
        """ Get: FilterMode(self: WorksheetClass) -> bool """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: WorksheetClass) -> HPageBreaks """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: WorksheetClass) -> Hyperlinks """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: WorksheetClass) -> int """
        ...

    @property
    def ListObjects(self) -> ListObjects:
        """ Get: ListObjects(self: WorksheetClass) -> ListObjects """
        ...

    @property
    def MailEnvelope(self): # -> MsoEnvelope
        """ Get: MailEnvelope(self: WorksheetClass) -> MsoEnvelope """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: WorksheetClass) -> str
        Set: Name(self: WorksheetClass) = value
        """
        ...

    @property
    def Names(self) -> Names:
        """ Get: Names(self: WorksheetClass) -> Names """
        ...

    @property
    def Next(self) -> object:
        """ Get: Next(self: WorksheetClass) -> object """
        ...

    @property
    def OnCalculate(self) -> str:
        """
        Get: OnCalculate(self: WorksheetClass) -> str
        Set: OnCalculate(self: WorksheetClass) = value
        """
        ...

    @property
    def OnData(self) -> str:
        """
        Get: OnData(self: WorksheetClass) -> str
        Set: OnData(self: WorksheetClass) = value
        """
        ...

    @property
    def OnDoubleClick(self) -> str:
        """
        Get: OnDoubleClick(self: WorksheetClass) -> str
        Set: OnDoubleClick(self: WorksheetClass) = value
        """
        ...

    @property
    def OnEntry(self) -> str:
        """
        Get: OnEntry(self: WorksheetClass) -> str
        Set: OnEntry(self: WorksheetClass) = value
        """
        ...

    @property
    def OnSheetActivate(self) -> str:
        """
        Get: OnSheetActivate(self: WorksheetClass) -> str
        Set: OnSheetActivate(self: WorksheetClass) = value
        """
        ...

    @property
    def OnSheetDeactivate(self) -> str:
        """
        Get: OnSheetDeactivate(self: WorksheetClass) -> str
        Set: OnSheetDeactivate(self: WorksheetClass) = value
        """
        ...

    @property
    def Outline(self) -> Outline:
        """ Get: Outline(self: WorksheetClass) -> Outline """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """ Get: PageSetup(self: WorksheetClass) -> PageSetup """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: WorksheetClass) -> object """
        ...

    @property
    def Previous(self) -> object:
        """ Get: Previous(self: WorksheetClass) -> object """
        ...

    @property
    def PrintedCommentPages(self) -> int:
        """ Get: PrintedCommentPages(self: WorksheetClass) -> int """
        ...

    @property
    def ProtectContents(self) -> bool:
        """ Get: ProtectContents(self: WorksheetClass) -> bool """
        ...

    @property
    def ProtectDrawingObjects(self) -> bool:
        """ Get: ProtectDrawingObjects(self: WorksheetClass) -> bool """
        ...

    @property
    def Protection(self) -> Protection:
        """ Get: Protection(self: WorksheetClass) -> Protection """
        ...

    @property
    def ProtectionMode(self) -> bool:
        """ Get: ProtectionMode(self: WorksheetClass) -> bool """
        ...

    @property
    def ProtectScenarios(self) -> bool:
        """ Get: ProtectScenarios(self: WorksheetClass) -> bool """
        ...

    @property
    def QueryTables(self) -> QueryTables:
        """ Get: QueryTables(self: WorksheetClass) -> QueryTables """
        ...

    @property
    def Rows(self) -> Range:
        """ Get: Rows(self: WorksheetClass) -> Range """
        ...

    @property
    def Scripts(self): # -> Scripts
        """ Get: Scripts(self: WorksheetClass) -> Scripts """
        ...

    @property
    def ScrollArea(self) -> str:
        """
        Get: ScrollArea(self: WorksheetClass) -> str
        Set: ScrollArea(self: WorksheetClass) = value
        """
        ...

    @property
    def Shapes(self) -> Shapes:
        """ Get: Shapes(self: WorksheetClass) -> Shapes """
        ...

    @property
    def SmartTags(self) -> SmartTags:
        """ Get: SmartTags(self: WorksheetClass) -> SmartTags """
        ...

    @property
    def Sort(self) -> Sort:
        """ Get: Sort(self: WorksheetClass) -> Sort """
        ...

    @property
    def StandardHeight(self) -> float:
        """ Get: StandardHeight(self: WorksheetClass) -> float """
        ...

    @property
    def StandardWidth(self) -> float:
        """
        Get: StandardWidth(self: WorksheetClass) -> float
        Set: StandardWidth(self: WorksheetClass) = value
        """
        ...

    @property
    def Tab(self) -> Tab:
        """ Get: Tab(self: WorksheetClass) -> Tab """
        ...

    @property
    def TransitionExpEval(self) -> bool:
        """
        Get: TransitionExpEval(self: WorksheetClass) -> bool
        Set: TransitionExpEval(self: WorksheetClass) = value
        """
        ...

    @property
    def TransitionFormEntry(self) -> bool:
        """
        Get: TransitionFormEntry(self: WorksheetClass) -> bool
        Set: TransitionFormEntry(self: WorksheetClass) = value
        """
        ...

    @property
    def Type(self) -> XlSheetType:
        """ Get: Type(self: WorksheetClass) -> XlSheetType """
        ...

    @property
    def UsedRange(self) -> Range:
        """ Get: UsedRange(self: WorksheetClass) -> Range """
        ...

    @property
    def Visible(self) -> XlSheetVisibility:
        """
        Get: Visible(self: WorksheetClass) -> XlSheetVisibility
        Set: Visible(self: WorksheetClass) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: WorksheetClass) -> VPageBreaks """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: WorksheetClass) -> str
        Set: _CodeName(self: WorksheetClass) = value
        """
        ...

    @property
    def _DisplayRightToLeft(self) -> int:
        """
        Get: _DisplayRightToLeft(self: WorksheetClass) -> int
        Set: _DisplayRightToLeft(self: WorksheetClass) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: WorksheetClass) """
        ...

    def add_Activate(self): # -> 
        """ add_Activate(self: WorksheetClass, : DocEvents_ActivateEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: WorksheetClass, : DocEvents_BeforeDeleteEventHandler) """
        ...

    def add_BeforeDoubleClick(self): # -> 
        """ add_BeforeDoubleClick(self: WorksheetClass, : DocEvents_BeforeDoubleClickEventHandler) """
        ...

    def add_BeforeRightClick(self): # -> 
        """ add_BeforeRightClick(self: WorksheetClass, : DocEvents_BeforeRightClickEventHandler) """
        ...

    def add_Calculate(self): # -> 
        """ add_Calculate(self: WorksheetClass, : DocEvents_CalculateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: WorksheetClass, : DocEvents_ChangeEventHandler) """
        ...

    def add_Deactivate(self): # -> 
        """ add_Deactivate(self: WorksheetClass, : DocEvents_DeactivateEventHandler) """
        ...

    def add_FollowHyperlink(self): # -> 
        """ add_FollowHyperlink(self: WorksheetClass, : DocEvents_FollowHyperlinkEventHandler) """
        ...

    def add_LensGalleryRenderComplete(self): # -> 
        """ add_LensGalleryRenderComplete(self: WorksheetClass, : DocEvents_LensGalleryRenderCompleteEventHandler) """
        ...

    def add_PivotTableAfterValueChange(self): # -> 
        """ add_PivotTableAfterValueChange(self: WorksheetClass, : DocEvents_PivotTableAfterValueChangeEventHandler) """
        ...

    def add_PivotTableBeforeAllocateChanges(self): # -> 
        """ add_PivotTableBeforeAllocateChanges(self: WorksheetClass, : DocEvents_PivotTableBeforeAllocateChangesEventHandler) """
        ...

    def add_PivotTableBeforeCommitChanges(self): # -> 
        """ add_PivotTableBeforeCommitChanges(self: WorksheetClass, : DocEvents_PivotTableBeforeCommitChangesEventHandler) """
        ...

    def add_PivotTableBeforeDiscardChanges(self): # -> 
        """ add_PivotTableBeforeDiscardChanges(self: WorksheetClass, : DocEvents_PivotTableBeforeDiscardChangesEventHandler) """
        ...

    def add_PivotTableChangeSync(self): # -> 
        """ add_PivotTableChangeSync(self: WorksheetClass, : DocEvents_PivotTableChangeSyncEventHandler) """
        ...

    def add_PivotTableUpdate(self): # -> 
        """ add_PivotTableUpdate(self: WorksheetClass, : DocEvents_PivotTableUpdateEventHandler) """
        ...

    def add_SelectionChange(self): # -> 
        """ add_SelectionChange(self: WorksheetClass, : DocEvents_SelectionChangeEventHandler) """
        ...

    def add_TableUpdate(self): # -> 
        """ add_TableUpdate(self: WorksheetClass, : DocEvents_TableUpdateEventHandler) """
        ...

    def Arcs(self, Index:object) -> object:
        """ Arcs(self: WorksheetClass, Index: object) -> object """
        ...

    def Buttons(self, Index:object) -> object:
        """ Buttons(self: WorksheetClass, Index: object) -> object """
        ...

    def Calculate(self): # -> 
        """ Calculate(self: WorksheetClass) """
        ...

    def ChartObjects(self, Index:object) -> object:
        """ ChartObjects(self: WorksheetClass, Index: object) -> object """
        ...

    def CheckBoxes(self, Index:object) -> object:
        """ CheckBoxes(self: WorksheetClass, Index: object) -> object """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object): # -> 
        """ CheckSpelling(self: WorksheetClass, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object) """
        ...

    def CircleInvalid(self): # -> 
        """ CircleInvalid(self: WorksheetClass) """
        ...

    def ClearArrows(self): # -> 
        """ ClearArrows(self: WorksheetClass) """
        ...

    def ClearCircles(self): # -> 
        """ ClearCircles(self: WorksheetClass) """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: WorksheetClass, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: WorksheetClass) """
        ...

    def DrawingObjects(self, Index:object) -> object:
        """ DrawingObjects(self: WorksheetClass, Index: object) -> object """
        ...

    def Drawings(self, Index:object) -> object:
        """ Drawings(self: WorksheetClass, Index: object) -> object """
        ...

    def DropDowns(self, Index:object) -> object:
        """ DropDowns(self: WorksheetClass, Index: object) -> object """
        ...

    def Evaluate(self, Name:object) -> object:
        """ Evaluate(self: WorksheetClass, Name: object) -> object """
        ...

    def ExportAsFixedFormat(self, Type:XlFixedFormatType, Filename:object, Quality:object, IncludeDocProperties:object, IgnorePrintAreas:object, From:object, To:object, OpenAfterPublish:object, FixedFormatExtClassPtr:object): # -> 
        """ ExportAsFixedFormat(self: WorksheetClass, Type: XlFixedFormatType, Filename: object, Quality: object, IncludeDocProperties: object, IgnorePrintAreas: object, From: object, To: object, OpenAfterPublish: object, FixedFormatExtClassPtr: object) """
        ...

    def GroupBoxes(self, Index:object) -> object:
        """ GroupBoxes(self: WorksheetClass, Index: object) -> object """
        ...

    def GroupObjects(self, Index:object) -> object:
        """ GroupObjects(self: WorksheetClass, Index: object) -> object """
        ...

    def Labels(self, Index:object) -> object:
        """ Labels(self: WorksheetClass, Index: object) -> object """
        ...

    def Lines(self, Index:object) -> object:
        """ Lines(self: WorksheetClass, Index: object) -> object """
        ...

    def ListBoxes(self, Index:object) -> object:
        """ ListBoxes(self: WorksheetClass, Index: object) -> object """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: WorksheetClass, Before: object, After: object) """
        ...

    def OLEObjects(self, Index:object) -> object:
        """ OLEObjects(self: WorksheetClass, Index: object) -> object """
        ...

    def OptionButtons(self, Index:object) -> object:
        """ OptionButtons(self: WorksheetClass, Index: object) -> object """
        ...

    def Ovals(self, Index:object) -> object:
        """ Ovals(self: WorksheetClass, Index: object) -> object """
        ...

    def Paste(self, Destination:object, Link:object): # -> 
        """ Paste(self: WorksheetClass, Destination: object, Link: object) """
        ...

    def PasteSpecial(self, Format:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object, NoHTMLFormatting:object): # -> 
        """ PasteSpecial(self: WorksheetClass, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, NoHTMLFormatting: object) """
        ...

    def Pictures(self, Index:object) -> object:
        """ Pictures(self: WorksheetClass, Index: object) -> object """
        ...

    def PivotTables(self, Index:object) -> object:
        """ PivotTables(self: WorksheetClass, Index: object) -> object """
        ...

    def PivotTableWizard(self, SourceType:object, SourceData:object, TableDestination:object, TableName:object, RowGrand:object, ColumnGrand:object, SaveData:object, HasAutoFormat:object, AutoPage:object, Reserved:object, BackgroundQuery:object, OptimizeCache:object, PageFieldOrder:object, PageFieldWrapCount:object, ReadData:object, Connection:object) -> PivotTable:
        """ PivotTableWizard(self: WorksheetClass, SourceType: object, SourceData: object, TableDestination: object, TableName: object, RowGrand: object, ColumnGrand: object, SaveData: object, HasAutoFormat: object, AutoPage: object, Reserved: object, BackgroundQuery: object, OptimizeCache: object, PageFieldOrder: object, PageFieldWrapCount: object, ReadData: object, Connection: object) -> PivotTable """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: WorksheetClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object, IgnorePrintAreas:object): # -> 
        """ PrintOutEx(self: WorksheetClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: WorksheetClass, EnableChanges: object) """
        ...

    def Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object, AllowFormattingCells:object, AllowFormattingColumns:object, AllowFormattingRows:object, AllowInsertingColumns:object, AllowInsertingRows:object, AllowInsertingHyperlinks:object, AllowDeletingColumns:object, AllowDeletingRows:object, AllowSorting:object, AllowFiltering:object, AllowUsingPivotTables:object): # -> 
        """ Protect(self: WorksheetClass, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object, AllowFormattingCells: object, AllowFormattingColumns: object, AllowFormattingRows: object, AllowInsertingColumns: object, AllowInsertingRows: object, AllowInsertingHyperlinks: object, AllowDeletingColumns: object, AllowDeletingRows: object, AllowSorting: object, AllowFiltering: object, AllowUsingPivotTables: object) """
        ...

    def Rectangles(self, Index:object) -> object:
        """ Rectangles(self: WorksheetClass, Index: object) -> object """
        ...

    def remove_Activate(self): # -> 
        """ remove_Activate(self: WorksheetClass, : DocEvents_ActivateEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: WorksheetClass, : DocEvents_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeDoubleClick(self): # -> 
        """ remove_BeforeDoubleClick(self: WorksheetClass, : DocEvents_BeforeDoubleClickEventHandler) """
        ...

    def remove_BeforeRightClick(self): # -> 
        """ remove_BeforeRightClick(self: WorksheetClass, : DocEvents_BeforeRightClickEventHandler) """
        ...

    def remove_Calculate(self): # -> 
        """ remove_Calculate(self: WorksheetClass, : DocEvents_CalculateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: WorksheetClass, : DocEvents_ChangeEventHandler) """
        ...

    def remove_Deactivate(self): # -> 
        """ remove_Deactivate(self: WorksheetClass, : DocEvents_DeactivateEventHandler) """
        ...

    def remove_FollowHyperlink(self): # -> 
        """ remove_FollowHyperlink(self: WorksheetClass, : DocEvents_FollowHyperlinkEventHandler) """
        ...

    def remove_LensGalleryRenderComplete(self): # -> 
        """ remove_LensGalleryRenderComplete(self: WorksheetClass, : DocEvents_LensGalleryRenderCompleteEventHandler) """
        ...

    def remove_PivotTableAfterValueChange(self): # -> 
        """ remove_PivotTableAfterValueChange(self: WorksheetClass, : DocEvents_PivotTableAfterValueChangeEventHandler) """
        ...

    def remove_PivotTableBeforeAllocateChanges(self): # -> 
        """ remove_PivotTableBeforeAllocateChanges(self: WorksheetClass, : DocEvents_PivotTableBeforeAllocateChangesEventHandler) """
        ...

    def remove_PivotTableBeforeCommitChanges(self): # -> 
        """ remove_PivotTableBeforeCommitChanges(self: WorksheetClass, : DocEvents_PivotTableBeforeCommitChangesEventHandler) """
        ...

    def remove_PivotTableBeforeDiscardChanges(self): # -> 
        """ remove_PivotTableBeforeDiscardChanges(self: WorksheetClass, : DocEvents_PivotTableBeforeDiscardChangesEventHandler) """
        ...

    def remove_PivotTableChangeSync(self): # -> 
        """ remove_PivotTableChangeSync(self: WorksheetClass, : DocEvents_PivotTableChangeSyncEventHandler) """
        ...

    def remove_PivotTableUpdate(self): # -> 
        """ remove_PivotTableUpdate(self: WorksheetClass, : DocEvents_PivotTableUpdateEventHandler) """
        ...

    def remove_SelectionChange(self): # -> 
        """ remove_SelectionChange(self: WorksheetClass, : DocEvents_SelectionChangeEventHandler) """
        ...

    def remove_TableUpdate(self): # -> 
        """ remove_TableUpdate(self: WorksheetClass, : DocEvents_TableUpdateEventHandler) """
        ...

    def ResetAllPageBreaks(self): # -> 
        """ ResetAllPageBreaks(self: WorksheetClass) """
        ...

    def SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object, Local:object): # -> 
        """ SaveAs(self: WorksheetClass, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object, Local: object) """
        ...

    def Scenarios(self, Index:object) -> object:
        """ Scenarios(self: WorksheetClass, Index: object) -> object """
        ...

    def ScrollBars(self, Index:object) -> object:
        """ ScrollBars(self: WorksheetClass, Index: object) -> object """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: WorksheetClass, Replace: object) """
        ...

    def SetBackgroundPicture(self, Filename:str): # -> 
        """ SetBackgroundPicture(self: WorksheetClass, Filename: str) """
        ...

    def ShowAllData(self): # -> 
        """ ShowAllData(self: WorksheetClass) """
        ...

    def ShowDataForm(self): # -> 
        """ ShowDataForm(self: WorksheetClass) """
        ...

    def Spinners(self, Index:object) -> object:
        """ Spinners(self: WorksheetClass, Index: object) -> object """
        ...

    def TextBoxes(self, Index:object) -> object:
        """ TextBoxes(self: WorksheetClass, Index: object) -> object """
        ...

    def Unprotect(self, Password:object): # -> 
        """ Unprotect(self: WorksheetClass, Password: object) """
        ...

    def XmlDataQuery(self, XPath:str, SelectionNamespaces:object, Map:object) -> Range:
        """ XmlDataQuery(self: WorksheetClass, XPath: str, SelectionNamespaces: object, Map: object) -> Range """
        ...

    def XmlMapQuery(self, XPath:str, SelectionNamespaces:object, Map:object) -> Range:
        """ XmlMapQuery(self: WorksheetClass, XPath: str, SelectionNamespaces: object, Map: object) -> Range """
        ...

    def _CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, SpellLang:object, IgnoreFinalYaa:object, SpellScript:object): # -> 
        """ _CheckSpelling(self: WorksheetClass, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, SpellLang: object, IgnoreFinalYaa: object, SpellScript: object) """
        ...

    def _Evaluate(self, Name:object) -> object:
        """ _Evaluate(self: WorksheetClass, Name: object) -> object """
        ...

    def _PasteSpecial(self, Format:object, Link:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object): # -> 
        """ _PasteSpecial(self: WorksheetClass, Format: object, Link: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: WorksheetClass, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def _Protect(self, Password:object, DrawingObjects:object, Contents:object, Scenarios:object, UserInterfaceOnly:object): # -> 
        """ _Protect(self: WorksheetClass, Password: object, DrawingObjects: object, Contents: object, Scenarios: object, UserInterfaceOnly: object) """
        ...

    def _SaveAs(self, Filename:str, FileFormat:object, Password:object, WriteResPassword:object, ReadOnlyRecommended:object, CreateBackup:object, AddToMru:object, TextCodepage:object, TextVisualLayout:object): # -> 
        """ _SaveAs(self: WorksheetClass, Filename: str, FileFormat: object, Password: object, WriteResPassword: object, ReadOnlyRecommended: object, CreateBackup: object, AddToMru: object, TextCodepage: object, TextVisualLayout: object) """
        ...

    BeforeDelete = ...
    BeforeDoubleClick = ...
    BeforeRightClick = ...
    Change = ...
    Deactivate = ...
    DocEvents_Event_Activate = ...
    DocEvents_Event_Calculate = ...
    FollowHyperlink = ...
    LensGalleryRenderComplete = ...
    PivotTableAfterValueChange = ...
    PivotTableBeforeAllocateChanges = ...
    PivotTableBeforeCommitChanges = ...
    PivotTableBeforeDiscardChanges = ...
    PivotTableChangeSync = ...
    PivotTableUpdate = ...
    SelectionChange = ...
    TableUpdate = ...


class WorksheetDataConnection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: WorksheetDataConnection) -> Application """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: WorksheetDataConnection) -> object
        Set: CommandText(self: WorksheetDataConnection) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: WorksheetDataConnection) -> XlCmdType
        Set: CommandType(self: WorksheetDataConnection) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """ Get: Connection(self: WorksheetDataConnection) -> object """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: WorksheetDataConnection) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: WorksheetDataConnection) -> object """
        ...



class WorksheetFunction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: WorksheetFunction) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: WorksheetFunction) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: WorksheetFunction) -> object """
        ...


    def AccrInt(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object) -> float:
        """ AccrInt(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        ...

    def AccrIntM(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ AccrIntM(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def Acos(self, Arg1:float) -> float:
        """ Acos(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Acosh(self, Arg1:float) -> float:
        """ Acosh(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Acot(self, Arg1:float) -> float:
        """ Acot(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Acoth(self, Arg1:float) -> float:
        """ Acoth(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Aggregate(self, Arg1:float, Arg2:float, Arg3:Range, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Aggregate(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: Range, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def AmorDegrc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object) -> float:
        """ AmorDegrc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        ...

    def AmorLinc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object) -> float:
        """ AmorLinc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        ...

    def And(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> bool:
        """ And(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        ...

    def Arabic(self, Arg1:str) -> float:
        """ Arabic(self: WorksheetFunction, Arg1: str) -> float """
        ...

    def Asc(self, Arg1:str) -> str:
        """ Asc(self: WorksheetFunction, Arg1: str) -> str """
        ...

    def Asin(self, Arg1:float) -> float:
        """ Asin(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Asinh(self, Arg1:float) -> float:
        """ Asinh(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Atan2(self, Arg1:float, Arg2:float) -> float:
        """ Atan2(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Atanh(self, Arg1:float) -> float:
        """ Atanh(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def AveDev(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ AveDev(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Average(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Average(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def AverageIf(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ AverageIf(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def AverageIfs(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object) -> float:
        """ AverageIfs(self: WorksheetFunction, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object) -> float """
        ...

    def BahtText(self, Arg1:float) -> str:
        """ BahtText(self: WorksheetFunction, Arg1: float) -> str """
        ...

    def Base(self, Arg1:float, Arg2:float, Arg3:object) -> str:
        """ Base(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: object) -> str """
        ...

    def BesselI(self, Arg1:object, Arg2:object) -> float:
        """ BesselI(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def BesselJ(self, Arg1:object, Arg2:object) -> float:
        """ BesselJ(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def BesselK(self, Arg1:object, Arg2:object) -> float:
        """ BesselK(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def BesselY(self, Arg1:object, Arg2:object) -> float:
        """ BesselY(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def BetaDist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ BetaDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def BetaInv(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ BetaInv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def Beta_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool, Arg5:object, Arg6:object) -> float:
        """ Beta_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool, Arg5: object, Arg6: object) -> float """
        ...

    def Beta_Inv(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ Beta_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def Bin2Dec(self, Arg1:object) -> str:
        """ Bin2Dec(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def Bin2Hex(self, Arg1:object, Arg2:object) -> str:
        """ Bin2Hex(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Bin2Oct(self, Arg1:object, Arg2:object) -> str:
        """ Bin2Oct(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def BinomDist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ BinomDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def Binom_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ Binom_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def Binom_Dist_Range(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object) -> float:
        """ Binom_Dist_Range(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object) -> float """
        ...

    def Binom_Inv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Binom_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Bitand(self, Arg1:float, Arg2:float) -> float:
        """ Bitand(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Bitlshift(self, Arg1:float, Arg2:float) -> float:
        """ Bitlshift(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Bitor(self, Arg1:float, Arg2:float) -> float:
        """ Bitor(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Bitrshift(self, Arg1:float, Arg2:float) -> float:
        """ Bitrshift(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Bitxor(self, Arg1:float, Arg2:float) -> float:
        """ Bitxor(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Ceiling(self, Arg1:float, Arg2:float) -> float:
        """ Ceiling(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Ceiling_Math(self, Arg1:float, Arg2:object, Arg3:object) -> float:
        """ Ceiling_Math(self: WorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        ...

    def Ceiling_Precise(self, Arg1:float, Arg2:object) -> float:
        """ Ceiling_Precise(self: WorksheetFunction, Arg1: float, Arg2: object) -> float """
        ...

    def ChiDist(self, Arg1:float, Arg2:float) -> float:
        """ ChiDist(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def ChiInv(self, Arg1:float, Arg2:float) -> float:
        """ ChiInv(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def ChiSq_Dist(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ ChiSq_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def ChiSq_Dist_RT(self, Arg1:float, Arg2:float) -> float:
        """ ChiSq_Dist_RT(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def ChiSq_Inv(self, Arg1:float, Arg2:float) -> float:
        """ ChiSq_Inv(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def ChiSq_Inv_RT(self, Arg1:float, Arg2:float) -> float:
        """ ChiSq_Inv_RT(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def ChiSq_Test(self, Arg1:object, Arg2:object) -> float:
        """ ChiSq_Test(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def ChiTest(self, Arg1:object, Arg2:object) -> float:
        """ ChiTest(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Choose(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Choose(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Clean(self, Arg1:str) -> str:
        """ Clean(self: WorksheetFunction, Arg1: str) -> str """
        ...

    def Combin(self, Arg1:float, Arg2:float) -> float:
        """ Combin(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Combina(self, Arg1:float, Arg2:float) -> float:
        """ Combina(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Complex(self, Arg1:object, Arg2:object, Arg3:object) -> str:
        """ Complex(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> str """
        ...

    def Confidence(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Confidence(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Confidence_Norm(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Confidence_Norm(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Confidence_T(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Confidence_T(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Convert(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ Convert(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def Correl(self, Arg1:object, Arg2:object) -> float:
        """ Correl(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Cosh(self, Arg1:float) -> float:
        """ Cosh(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Cot(self, Arg1:float) -> float:
        """ Cot(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Coth(self, Arg1:float) -> float:
        """ Coth(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Count(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Count(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def CountA(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ CountA(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def CountBlank(self, Arg1:Range) -> float:
        """ CountBlank(self: WorksheetFunction, Arg1: Range) -> float """
        ...

    def CountIf(self, Arg1:Range, Arg2:object) -> float:
        """ CountIf(self: WorksheetFunction, Arg1: Range, Arg2: object) -> float """
        ...

    def CountIfs(self, Arg1:Range, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ CountIfs(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def CoupDayBs(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupDayBs(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def CoupDays(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupDays(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def CoupDaysNc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupDaysNc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def CoupNcd(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupNcd(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def CoupNum(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupNum(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def CoupPcd(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ CoupPcd(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def Covar(self, Arg1:object, Arg2:object) -> float:
        """ Covar(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Covariance_P(self, Arg1:object, Arg2:object) -> float:
        """ Covariance_P(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Covariance_S(self, Arg1:object, Arg2:object) -> float:
        """ Covariance_S(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def CritBinom(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ CritBinom(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Csc(self, Arg1:float) -> float:
        """ Csc(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Csch(self, Arg1:float) -> float:
        """ Csch(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def CumIPmt(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ CumIPmt(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def CumPrinc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ CumPrinc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def DAverage(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DAverage(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def Days(self, Arg1:object, Arg2:object) -> float:
        """ Days(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Days360(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ Days360(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def Db(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:object) -> float:
        """ Db(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object) -> float """
        ...

    def Dbcs(self, Arg1:str) -> str:
        """ Dbcs(self: WorksheetFunction, Arg1: str) -> str """
        ...

    def DCount(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DCount(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DCountA(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DCountA(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def Ddb(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:object) -> float:
        """ Ddb(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object) -> float """
        ...

    def Dec2Bin(self, Arg1:object, Arg2:object) -> str:
        """ Dec2Bin(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Dec2Hex(self, Arg1:object, Arg2:object) -> str:
        """ Dec2Hex(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Dec2Oct(self, Arg1:object, Arg2:object) -> str:
        """ Dec2Oct(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Decimal(self, Arg1:str, Arg2:float) -> float:
        """ Decimal(self: WorksheetFunction, Arg1: str, Arg2: float) -> float """
        ...

    def Degrees(self, Arg1:float) -> float:
        """ Degrees(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Delta(self, Arg1:object, Arg2:object) -> float:
        """ Delta(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def DevSq(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ DevSq(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def DGet(self, Arg1:Range, Arg2:object, Arg3:object) -> object:
        """ DGet(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> object """
        ...

    def Disc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ Disc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def DMax(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DMax(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DMin(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DMin(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def Dollar(self, Arg1:float, Arg2:object) -> str:
        """ Dollar(self: WorksheetFunction, Arg1: float, Arg2: object) -> str """
        ...

    def DollarDe(self, Arg1:object, Arg2:object) -> float:
        """ DollarDe(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def DollarFr(self, Arg1:object, Arg2:object) -> float:
        """ DollarFr(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def DProduct(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DProduct(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DStDev(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DStDev(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DStDevP(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DStDevP(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DSum(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DSum(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def Dummy19(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Dummy19(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Dummy21(self, Arg1:float, Arg2:float) -> float:
        """ Dummy21(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Duration(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ Duration(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def DVar(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DVar(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def DVarP(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ DVarP(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def EDate(self, Arg1:object, Arg2:object) -> float:
        """ EDate(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Effect(self, Arg1:object, Arg2:object) -> float:
        """ Effect(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def EncodeURL(self, Arg1:str) -> object:
        """ EncodeURL(self: WorksheetFunction, Arg1: str) -> object """
        ...

    def EoMonth(self, Arg1:object, Arg2:object) -> float:
        """ EoMonth(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Erf(self, Arg1:object, Arg2:object) -> float:
        """ Erf(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def ErfC(self, Arg1:object) -> float:
        """ ErfC(self: WorksheetFunction, Arg1: object) -> float """
        ...

    def ErfC_Precise(self, Arg1:object) -> float:
        """ ErfC_Precise(self: WorksheetFunction, Arg1: object) -> float """
        ...

    def Erf_Precise(self, Arg1:object) -> float:
        """ Erf_Precise(self: WorksheetFunction, Arg1: object) -> float """
        ...

    def Even(self, Arg1:float) -> float:
        """ Even(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def ExponDist(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ ExponDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def Expon_Dist(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ Expon_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def Fact(self, Arg1:float) -> float:
        """ Fact(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def FactDouble(self, Arg1:object) -> float:
        """ FactDouble(self: WorksheetFunction, Arg1: object) -> float """
        ...

    def FDist(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ FDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def FilterXML(self, Arg1:str, Arg2:str) -> object:
        """ FilterXML(self: WorksheetFunction, Arg1: str, Arg2: str) -> object """
        ...

    def Find(self, Arg1:str, Arg2:str, Arg3:object) -> float:
        """ Find(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        ...

    def FindB(self, Arg1:str, Arg2:str, Arg3:object) -> float:
        """ FindB(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        ...

    def FInv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ FInv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Fisher(self, Arg1:float) -> float:
        """ Fisher(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def FisherInv(self, Arg1:float) -> float:
        """ FisherInv(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Fixed(self, Arg1:float, Arg2:object, Arg3:object) -> str:
        """ Fixed(self: WorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> str """
        ...

    def Floor(self, Arg1:float, Arg2:float) -> float:
        """ Floor(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Floor_Math(self, Arg1:float, Arg2:object, Arg3:object) -> float:
        """ Floor_Math(self: WorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        ...

    def Floor_Precise(self, Arg1:float, Arg2:object) -> float:
        """ Floor_Precise(self: WorksheetFunction, Arg1: float, Arg2: object) -> float """
        ...

    def Forecast(self, Arg1:float, Arg2:object, Arg3:object) -> float:
        """ Forecast(self: WorksheetFunction, Arg1: float, Arg2: object, Arg3: object) -> float """
        ...

    def Frequency(self, Arg1:object, Arg2:object) -> object:
        """ Frequency(self: WorksheetFunction, Arg1: object, Arg2: object) -> object """
        ...

    def FTest(self, Arg1:object, Arg2:object) -> float:
        """ FTest(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Fv(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ Fv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def FVSchedule(self, Arg1:object, Arg2:object) -> float:
        """ FVSchedule(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def F_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ F_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def F_Dist_RT(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ F_Dist_RT(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def F_Inv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ F_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def F_Inv_RT(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ F_Inv_RT(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def F_Test(self, Arg1:object, Arg2:object) -> float:
        """ F_Test(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Gamma(self, Arg1:float) -> float:
        """ Gamma(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def GammaDist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ GammaDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def GammaInv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ GammaInv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def GammaLn(self, Arg1:float) -> float:
        """ GammaLn(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def GammaLn_Precise(self, Arg1:float) -> float:
        """ GammaLn_Precise(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Gamma_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ Gamma_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def Gamma_Inv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Gamma_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Gauss(self, Arg1:float) -> float:
        """ Gauss(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Gcd(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Gcd(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def GeoMean(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ GeoMean(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def GeStep(self, Arg1:object, Arg2:object) -> float:
        """ GeStep(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Growth(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ Growth(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def HarMean(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ HarMean(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Hex2Bin(self, Arg1:object, Arg2:object) -> str:
        """ Hex2Bin(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Hex2Dec(self, Arg1:object) -> str:
        """ Hex2Dec(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def Hex2Oct(self, Arg1:object, Arg2:object) -> str:
        """ Hex2Oct(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def HLookup(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ HLookup(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def HypGeomDist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float) -> float:
        """ HypGeomDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        ...

    def HypGeom_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:bool) -> float:
        """ HypGeom_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: bool) -> float """
        ...

    def IfError(self, Arg1:object, Arg2:object) -> object:
        """ IfError(self: WorksheetFunction, Arg1: object, Arg2: object) -> object """
        ...

    def IfNa(self, Arg1:object, Arg2:object) -> object:
        """ IfNa(self: WorksheetFunction, Arg1: object, Arg2: object) -> object """
        ...

    def ImAbs(self, Arg1:object) -> str:
        """ ImAbs(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def Imaginary(self, Arg1:object) -> float:
        """ Imaginary(self: WorksheetFunction, Arg1: object) -> float """
        ...

    def ImArgument(self, Arg1:object) -> str:
        """ ImArgument(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImConjugate(self, Arg1:object) -> str:
        """ ImConjugate(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImCos(self, Arg1:object) -> str:
        """ ImCos(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImCosh(self, Arg1:object) -> str:
        """ ImCosh(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImCot(self, Arg1:object) -> str:
        """ ImCot(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImCsc(self, Arg1:object) -> str:
        """ ImCsc(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImCsch(self, Arg1:object) -> str:
        """ ImCsch(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImDiv(self, Arg1:object, Arg2:object) -> str:
        """ ImDiv(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def ImExp(self, Arg1:object) -> str:
        """ ImExp(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImLn(self, Arg1:object) -> str:
        """ ImLn(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImLog10(self, Arg1:object) -> str:
        """ ImLog10(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImLog2(self, Arg1:object) -> str:
        """ ImLog2(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImPower(self, Arg1:object, Arg2:object) -> str:
        """ ImPower(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def ImProduct(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> str:
        """ ImProduct(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> str """
        ...

    def ImReal(self, Arg1:object) -> float:
        """ ImReal(self: WorksheetFunction, Arg1: object) -> float """
        ...

    def ImSec(self, Arg1:object) -> str:
        """ ImSec(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImSech(self, Arg1:object) -> str:
        """ ImSech(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImSin(self, Arg1:object) -> str:
        """ ImSin(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImSinh(self, Arg1:object) -> str:
        """ ImSinh(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImSqrt(self, Arg1:object) -> str:
        """ ImSqrt(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def ImSub(self, Arg1:object, Arg2:object) -> str:
        """ ImSub(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def ImSum(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> str:
        """ ImSum(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> str """
        ...

    def ImTan(self, Arg1:object) -> str:
        """ ImTan(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def Index(self, Arg1:object, Arg2:float, Arg3:object, Arg4:object) -> object:
        """ Index(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object, Arg4: object) -> object """
        ...

    def Intercept(self, Arg1:object, Arg2:object) -> float:
        """ Intercept(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def IntRate(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ IntRate(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def Ipmt(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:object, Arg6:object) -> float:
        """ Ipmt(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object, Arg6: object) -> float """
        ...

    def Irr(self, Arg1:object, Arg2:object) -> float:
        """ Irr(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def IsErr(self, Arg1:object) -> bool:
        """ IsErr(self: WorksheetFunction, Arg1: object) -> bool """
        ...

    def IsError(self, Arg1:object) -> bool:
        """ IsError(self: WorksheetFunction, Arg1: object) -> bool """
        ...

    def IsEven(self, Arg1:object) -> bool:
        """ IsEven(self: WorksheetFunction, Arg1: object) -> bool """
        ...

    def IsFormula(self, Arg1:Range) -> bool:
        """ IsFormula(self: WorksheetFunction, Arg1: Range) -> bool """
        ...

    def IsLogical(self, Arg1:object) -> bool:
        """ IsLogical(self: WorksheetFunction, Arg1: object) -> bool """
        ...

    def IsNA(self, Arg1:object) -> bool:
        """ IsNA(self: WorksheetFunction, Arg1: object) -> bool """
        ...

    def IsNonText(self, Arg1:object) -> bool:
        """ IsNonText(self: WorksheetFunction, Arg1: object) -> bool """
        ...

    def IsNumber(self, Arg1:object) -> bool:
        """ IsNumber(self: WorksheetFunction, Arg1: object) -> bool """
        ...

    def IsOdd(self, Arg1:object) -> bool:
        """ IsOdd(self: WorksheetFunction, Arg1: object) -> bool """
        ...

    def IsoWeekNum(self, Arg1:float, Arg2:object) -> float:
        """ IsoWeekNum(self: WorksheetFunction, Arg1: float, Arg2: object) -> float """
        ...

    def ISO_Ceiling(self, Arg1:float, Arg2:object) -> float:
        """ ISO_Ceiling(self: WorksheetFunction, Arg1: float, Arg2: object) -> float """
        ...

    def Ispmt(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float) -> float:
        """ Ispmt(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        ...

    def IsText(self, Arg1:object) -> bool:
        """ IsText(self: WorksheetFunction, Arg1: object) -> bool """
        ...

    def IsThaiDigit(self, Arg1:str) -> bool:
        """ IsThaiDigit(self: WorksheetFunction, Arg1: str) -> bool """
        ...

    def Kurt(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Kurt(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Large(self, Arg1:object, Arg2:float) -> float:
        """ Large(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Lcm(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Lcm(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def LinEst(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ LinEst(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def Ln(self, Arg1:float) -> float:
        """ Ln(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Log(self, Arg1:float, Arg2:object) -> float:
        """ Log(self: WorksheetFunction, Arg1: float, Arg2: object) -> float """
        ...

    def Log10(self, Arg1:float) -> float:
        """ Log10(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def LogEst(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ LogEst(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def LogInv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ LogInv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def LogNormDist(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ LogNormDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def LogNorm_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ LogNorm_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def LogNorm_Inv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ LogNorm_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Lookup(self, Arg1:object, Arg2:object, Arg3:object) -> object:
        """ Lookup(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> object """
        ...

    def Match(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ Match(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def Max(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Max(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def MDeterm(self, Arg1:object) -> float:
        """ MDeterm(self: WorksheetFunction, Arg1: object) -> float """
        ...

    def MDuration(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ MDuration(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def Median(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Median(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Min(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Min(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def MInverse(self, Arg1:object) -> object:
        """ MInverse(self: WorksheetFunction, Arg1: object) -> object """
        ...

    def MIrr(self, Arg1:object, Arg2:float, Arg3:float) -> float:
        """ MIrr(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: float) -> float """
        ...

    def MMult(self, Arg1:object, Arg2:object) -> object:
        """ MMult(self: WorksheetFunction, Arg1: object, Arg2: object) -> object """
        ...

    def Mode(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Mode(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Mode_Mult(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ Mode_Mult(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def Mode_Sngl(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Mode_Sngl(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def MRound(self, Arg1:object, Arg2:object) -> float:
        """ MRound(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def MultiNomial(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ MultiNomial(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Munit(self, Arg1:float) -> object:
        """ Munit(self: WorksheetFunction, Arg1: float) -> object """
        ...

    def NegBinomDist(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ NegBinomDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def NegBinom_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ NegBinom_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def NetworkDays(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ NetworkDays(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def NetworkDays_Intl(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ NetworkDays_Intl(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def Nominal(self, Arg1:object, Arg2:object) -> float:
        """ Nominal(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def NormDist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ NormDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def NormInv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ NormInv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def NormSDist(self, Arg1:float) -> float:
        """ NormSDist(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def NormSInv(self, Arg1:float) -> float:
        """ NormSInv(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Norm_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ Norm_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def Norm_Inv(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Norm_Inv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Norm_S_Dist(self, Arg1:float, Arg2:bool) -> float:
        """ Norm_S_Dist(self: WorksheetFunction, Arg1: float, Arg2: bool) -> float """
        ...

    def Norm_S_Inv(self, Arg1:float) -> float:
        """ Norm_S_Inv(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def NPer(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ NPer(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def Npv(self, Arg1:float, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Npv(self: WorksheetFunction, Arg1: float, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def NumberValue(self, Arg1:str, Arg2:str, Arg3:str) -> float:
        """ NumberValue(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: str) -> float """
        ...

    def Oct2Bin(self, Arg1:object, Arg2:object) -> str:
        """ Oct2Bin(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Oct2Dec(self, Arg1:object) -> str:
        """ Oct2Dec(self: WorksheetFunction, Arg1: object) -> str """
        ...

    def Oct2Hex(self, Arg1:object, Arg2:object) -> str:
        """ Oct2Hex(self: WorksheetFunction, Arg1: object, Arg2: object) -> str """
        ...

    def Odd(self, Arg1:float) -> float:
        """ Odd(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def OddFPrice(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object) -> float:
        """ OddFPrice(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object) -> float """
        ...

    def OddFYield(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object) -> float:
        """ OddFYield(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object) -> float """
        ...

    def OddLPrice(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object) -> float:
        """ OddLPrice(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> float """
        ...

    def OddLYield(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object) -> float:
        """ OddLYield(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object) -> float """
        ...

    def Or(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> bool:
        """ Or(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        ...

    def PDuration(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ PDuration(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Pearson(self, Arg1:object, Arg2:object) -> float:
        """ Pearson(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Percentile(self, Arg1:object, Arg2:float) -> float:
        """ Percentile(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Percentile_Exc(self, Arg1:object, Arg2:float) -> float:
        """ Percentile_Exc(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Percentile_Inc(self, Arg1:object, Arg2:float) -> float:
        """ Percentile_Inc(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def PercentRank(self, Arg1:object, Arg2:float, Arg3:object) -> float:
        """ PercentRank(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        ...

    def PercentRank_Exc(self, Arg1:object, Arg2:float, Arg3:object) -> float:
        """ PercentRank_Exc(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        ...

    def PercentRank_Inc(self, Arg1:object, Arg2:float, Arg3:object) -> float:
        """ PercentRank_Inc(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        ...

    def Permut(self, Arg1:float, Arg2:float) -> float:
        """ Permut(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Permutationa(self, Arg1:float, Arg2:float) -> float:
        """ Permutationa(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Phi(self, Arg1:float) -> float:
        """ Phi(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Phonetic(self, Arg1:Range) -> str:
        """ Phonetic(self: WorksheetFunction, Arg1: Range) -> str """
        ...

    def Pi(self) -> float:
        """ Pi(self: WorksheetFunction) -> float """
        ...

    def Pmt(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ Pmt(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def Poisson(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ Poisson(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def Poisson_Dist(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ Poisson_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def Power(self, Arg1:float, Arg2:float) -> float:
        """ Power(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Ppmt(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:object, Arg6:object) -> float:
        """ Ppmt(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: object, Arg6: object) -> float """
        ...

    def Price(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object) -> float:
        """ Price(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object) -> float """
        ...

    def PriceDisc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ PriceDisc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def PriceMat(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ PriceMat(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def Prob(self, Arg1:object, Arg2:object, Arg3:float, Arg4:object) -> float:
        """ Prob(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: object) -> float """
        ...

    def Product(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Product(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Proper(self, Arg1:str) -> str:
        """ Proper(self: WorksheetFunction, Arg1: str) -> str """
        ...

    def Pv(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object) -> float:
        """ Pv(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object) -> float """
        ...

    def Quartile(self, Arg1:object, Arg2:float) -> float:
        """ Quartile(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Quartile_Exc(self, Arg1:object, Arg2:float) -> float:
        """ Quartile_Exc(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Quartile_Inc(self, Arg1:object, Arg2:float) -> float:
        """ Quartile_Inc(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def Quotient(self, Arg1:object, Arg2:object) -> float:
        """ Quotient(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Radians(self, Arg1:float) -> float:
        """ Radians(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def RandBetween(self, Arg1:object, Arg2:object) -> float:
        """ RandBetween(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Rank(self, Arg1:float, Arg2:Range, Arg3:object) -> float:
        """ Rank(self: WorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        ...

    def Rank_Avg(self, Arg1:float, Arg2:Range, Arg3:object) -> float:
        """ Rank_Avg(self: WorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        ...

    def Rank_Eq(self, Arg1:float, Arg2:Range, Arg3:object) -> float:
        """ Rank_Eq(self: WorksheetFunction, Arg1: float, Arg2: Range, Arg3: object) -> float """
        ...

    def Rate(self, Arg1:float, Arg2:float, Arg3:float, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ Rate(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def Received(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ Received(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def Replace(self, Arg1:str, Arg2:float, Arg3:float, Arg4:str) -> str:
        """ Replace(self: WorksheetFunction, Arg1: str, Arg2: float, Arg3: float, Arg4: str) -> str """
        ...

    def ReplaceB(self, Arg1:str, Arg2:float, Arg3:float, Arg4:str) -> str:
        """ ReplaceB(self: WorksheetFunction, Arg1: str, Arg2: float, Arg3: float, Arg4: str) -> str """
        ...

    def Rept(self, Arg1:str, Arg2:float) -> str:
        """ Rept(self: WorksheetFunction, Arg1: str, Arg2: float) -> str """
        ...

    def Roman(self, Arg1:float, Arg2:object) -> str:
        """ Roman(self: WorksheetFunction, Arg1: float, Arg2: object) -> str """
        ...

    def Round(self, Arg1:float, Arg2:float) -> float:
        """ Round(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def RoundBahtDown(self, Arg1:float) -> float:
        """ RoundBahtDown(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def RoundBahtUp(self, Arg1:float) -> float:
        """ RoundBahtUp(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def RoundDown(self, Arg1:float, Arg2:float) -> float:
        """ RoundDown(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def RoundUp(self, Arg1:float, Arg2:float) -> float:
        """ RoundUp(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Rri(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Rri(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def RSq(self, Arg1:object, Arg2:object) -> float:
        """ RSq(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def RTD(self, progID:object, server:object, topic1:object, topic2:object, topic3:object, topic4:object, topic5:object, topic6:object, topic7:object, topic8:object, topic9:object, topic10:object, topic11:object, topic12:object, topic13:object, topic14:object, topic15:object, topic16:object, topic17:object, topic18:object, topic19:object, topic20:object, topic21:object, topic22:object, topic23:object, topic24:object, topic25:object, topic26:object, topic27:object, topic28:object) -> object:
        """ RTD(self: WorksheetFunction, progID: object, server: object, topic1: object, topic2: object, topic3: object, topic4: object, topic5: object, topic6: object, topic7: object, topic8: object, topic9: object, topic10: object, topic11: object, topic12: object, topic13: object, topic14: object, topic15: object, topic16: object, topic17: object, topic18: object, topic19: object, topic20: object, topic21: object, topic22: object, topic23: object, topic24: object, topic25: object, topic26: object, topic27: object, topic28: object) -> object """
        ...

    def Search(self, Arg1:str, Arg2:str, Arg3:object) -> float:
        """ Search(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        ...

    def SearchB(self, Arg1:str, Arg2:str, Arg3:object) -> float:
        """ SearchB(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: object) -> float """
        ...

    def Sec(self, Arg1:float) -> float:
        """ Sec(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Sech(self, Arg1:float) -> float:
        """ Sech(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def SeriesSum(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ SeriesSum(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def Sinh(self, Arg1:float) -> float:
        """ Sinh(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def Skew(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Skew(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Skew_p(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Skew_p(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Sln(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Sln(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Slope(self, Arg1:object, Arg2:object) -> float:
        """ Slope(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Small(self, Arg1:object, Arg2:float) -> float:
        """ Small(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def SqrtPi(self, Arg1:object) -> float:
        """ SqrtPi(self: WorksheetFunction, Arg1: object) -> float """
        ...

    def Standardize(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ Standardize(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def StDev(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ StDev(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def StDevP(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ StDevP(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def StDev_P(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ StDev_P(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def StDev_S(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ StDev_S(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def StEyx(self, Arg1:object, Arg2:object) -> float:
        """ StEyx(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Substitute(self, Arg1:str, Arg2:str, Arg3:str, Arg4:object) -> str:
        """ Substitute(self: WorksheetFunction, Arg1: str, Arg2: str, Arg3: str, Arg4: object) -> str """
        ...

    def Subtotal(self, Arg1:float, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Subtotal(self: WorksheetFunction, Arg1: float, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Sum(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Sum(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def SumIf(self, Arg1:Range, Arg2:object, Arg3:object) -> float:
        """ SumIf(self: WorksheetFunction, Arg1: Range, Arg2: object, Arg3: object) -> float """
        ...

    def SumIfs(self, Arg1:Range, Arg2:Range, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object) -> float:
        """ SumIfs(self: WorksheetFunction, Arg1: Range, Arg2: Range, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object) -> float """
        ...

    def SumProduct(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ SumProduct(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def SumSq(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ SumSq(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def SumX2MY2(self, Arg1:object, Arg2:object) -> float:
        """ SumX2MY2(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def SumX2PY2(self, Arg1:object, Arg2:object) -> float:
        """ SumX2PY2(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def SumXMY2(self, Arg1:object, Arg2:object) -> float:
        """ SumXMY2(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Syd(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float) -> float:
        """ Syd(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float) -> float """
        ...

    def Tanh(self, Arg1:float) -> float:
        """ Tanh(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def TBillEq(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ TBillEq(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def TBillPrice(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ TBillPrice(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def TBillYield(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ TBillYield(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def TDist(self, Arg1:float, Arg2:float, Arg3:float) -> float:
        """ TDist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float) -> float """
        ...

    def Text(self, Arg1:object, Arg2:str) -> str:
        """ Text(self: WorksheetFunction, Arg1: object, Arg2: str) -> str """
        ...

    def ThaiDayOfWeek(self, Arg1:float) -> str:
        """ ThaiDayOfWeek(self: WorksheetFunction, Arg1: float) -> str """
        ...

    def ThaiDigit(self, Arg1:str) -> str:
        """ ThaiDigit(self: WorksheetFunction, Arg1: str) -> str """
        ...

    def ThaiMonthOfYear(self, Arg1:float) -> str:
        """ ThaiMonthOfYear(self: WorksheetFunction, Arg1: float) -> str """
        ...

    def ThaiNumSound(self, Arg1:float) -> str:
        """ ThaiNumSound(self: WorksheetFunction, Arg1: float) -> str """
        ...

    def ThaiNumString(self, Arg1:float) -> str:
        """ ThaiNumString(self: WorksheetFunction, Arg1: float) -> str """
        ...

    def ThaiStringLength(self, Arg1:str) -> float:
        """ ThaiStringLength(self: WorksheetFunction, Arg1: str) -> float """
        ...

    def ThaiYear(self, Arg1:float) -> float:
        """ ThaiYear(self: WorksheetFunction, Arg1: float) -> float """
        ...

    def TInv(self, Arg1:float, Arg2:float) -> float:
        """ TInv(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def Transpose(self, Arg1:object) -> object:
        """ Transpose(self: WorksheetFunction, Arg1: object) -> object """
        ...

    def Trend(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ Trend(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def Trim(self, Arg1:str) -> str:
        """ Trim(self: WorksheetFunction, Arg1: str) -> str """
        ...

    def TrimMean(self, Arg1:object, Arg2:float) -> float:
        """ TrimMean(self: WorksheetFunction, Arg1: object, Arg2: float) -> float """
        ...

    def TTest(self, Arg1:object, Arg2:object, Arg3:float, Arg4:float) -> float:
        """ TTest(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: float) -> float """
        ...

    def T_Dist(self, Arg1:float, Arg2:float, Arg3:bool) -> float:
        """ T_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: bool) -> float """
        ...

    def T_Dist_2T(self, Arg1:float, Arg2:float) -> float:
        """ T_Dist_2T(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def T_Dist_RT(self, Arg1:float, Arg2:float) -> float:
        """ T_Dist_RT(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def T_Inv(self, Arg1:float, Arg2:float) -> float:
        """ T_Inv(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def T_Inv_2T(self, Arg1:float, Arg2:float) -> float:
        """ T_Inv_2T(self: WorksheetFunction, Arg1: float, Arg2: float) -> float """
        ...

    def T_Test(self, Arg1:object, Arg2:object, Arg3:float, Arg4:float) -> float:
        """ T_Test(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: float, Arg4: float) -> float """
        ...

    def Unichar(self, Arg1:float) -> str:
        """ Unichar(self: WorksheetFunction, Arg1: float) -> str """
        ...

    def Unicode(self, Arg1:str) -> float:
        """ Unicode(self: WorksheetFunction, Arg1: str) -> float """
        ...

    def USDollar(self, Arg1:float, Arg2:float) -> str:
        """ USDollar(self: WorksheetFunction, Arg1: float, Arg2: float) -> str """
        ...

    def Var(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Var(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def VarP(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ VarP(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Var_P(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Var_P(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Var_S(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> float:
        """ Var_S(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> float """
        ...

    def Vdb(self, Arg1:float, Arg2:float, Arg3:float, Arg4:float, Arg5:float, Arg6:object, Arg7:object) -> float:
        """ Vdb(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: float, Arg5: float, Arg6: object, Arg7: object) -> float """
        ...

    def VLookup(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> object:
        """ VLookup(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> object """
        ...

    def WebService(self, Arg1:str) -> object:
        """ WebService(self: WorksheetFunction, Arg1: str) -> object """
        ...

    def Weekday(self, Arg1:object, Arg2:object) -> float:
        """ Weekday(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def WeekNum(self, Arg1:object, Arg2:object) -> float:
        """ WeekNum(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Weibull(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ Weibull(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def Weibull_Dist(self, Arg1:float, Arg2:float, Arg3:float, Arg4:bool) -> float:
        """ Weibull_Dist(self: WorksheetFunction, Arg1: float, Arg2: float, Arg3: float, Arg4: bool) -> float """
        ...

    def WorkDay(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ WorkDay(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def WorkDay_Intl(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object) -> float:
        """ WorkDay_Intl(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object) -> float """
        ...

    def Xirr(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ Xirr(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def Xnpv(self, Arg1:object, Arg2:object) -> float:
        """ Xnpv(self: WorksheetFunction, Arg1: object, Arg2: object) -> float """
        ...

    def Xor(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> bool:
        """ Xor(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> bool """
        ...

    def YearFrac(self, Arg1:object, Arg2:object, Arg3:object) -> float:
        """ YearFrac(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object) -> float """
        ...

    def YieldDisc(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object) -> float:
        """ YieldDisc(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object) -> float """
        ...

    def YieldMat(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object) -> float:
        """ YieldMat(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object) -> float """
        ...

    def ZTest(self, Arg1:object, Arg2:float, Arg3:object) -> float:
        """ ZTest(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        ...

    def Z_Test(self, Arg1:object, Arg2:float, Arg3:object) -> float:
        """ Z_Test(self: WorksheetFunction, Arg1: object, Arg2: float, Arg3: object) -> float """
        ...

    def _WSFunction(self, Arg1:object, Arg2:object, Arg3:object, Arg4:object, Arg5:object, Arg6:object, Arg7:object, Arg8:object, Arg9:object, Arg10:object, Arg11:object, Arg12:object, Arg13:object, Arg14:object, Arg15:object, Arg16:object, Arg17:object, Arg18:object, Arg19:object, Arg20:object, Arg21:object, Arg22:object, Arg23:object, Arg24:object, Arg25:object, Arg26:object, Arg27:object, Arg28:object, Arg29:object, Arg30:object) -> object:
        """ _WSFunction(self: WorksheetFunction, Arg1: object, Arg2: object, Arg3: object, Arg4: object, Arg5: object, Arg6: object, Arg7: object, Arg8: object, Arg9: object, Arg10: object, Arg11: object, Arg12: object, Arg13: object, Arg14: object, Arg15: object, Arg16: object, Arg17: object, Arg18: object, Arg19: object, Arg20: object, Arg21: object, Arg22: object, Arg23: object, Arg24: object, Arg25: object, Arg26: object, Arg27: object, Arg28: object, Arg29: object, Arg30: object) -> object """
        ...

    def __pow__(self, *args): #cannot find CLR method
        """ x.__pow__(y[, z]) <==> pow(x, y[, z]) """
        ...


class Worksheets(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Worksheets) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Worksheets) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: Worksheets) -> XlCreator """
        ...

    @property
    def HPageBreaks(self) -> HPageBreaks:
        """ Get: HPageBreaks(self: Worksheets) -> HPageBreaks """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Worksheets) -> object """
        ...

    @property
    def Visible(self) -> object:
        """
        Get: Visible(self: Worksheets) -> object
        Set: Visible(self: Worksheets) = value
        """
        ...

    @property
    def VPageBreaks(self) -> VPageBreaks:
        """ Get: VPageBreaks(self: Worksheets) -> VPageBreaks """
        ...


    def Add(self, Before:object, After:object, Count:object, Type:object) -> object:
        """ Add(self: Worksheets, Before: object, After: object, Count: object, Type: object) -> object """
        ...

    def Add2(self, Before:object, After:object, Count:object, NewLayout:object) -> object:
        """ Add2(self: Worksheets, Before: object, After: object, Count: object, NewLayout: object) -> object """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: Worksheets, Before: object, After: object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Worksheets) """
        ...

    def FillAcrossSheets(self, Range:Range, Type:XlFillWith): # -> 
        """ FillAcrossSheets(self: Worksheets, Range: Range, Type: XlFillWith) """
        ...

    def Move(self, Before:object, After:object): # -> 
        """ Move(self: Worksheets, Before: object, After: object) """
        ...

    def PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object): # -> 
        """ PrintOut(self: Worksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object) """
        ...

    def PrintOutEx(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object, PrToFileName:object, IgnorePrintAreas:object): # -> 
        """ PrintOutEx(self: Worksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object, PrToFileName: object, IgnorePrintAreas: object) """
        ...

    def PrintPreview(self, EnableChanges:object): # -> 
        """ PrintPreview(self: Worksheets, EnableChanges: object) """
        ...

    def Select(self, Replace:object): # -> 
        """ Select(self: Worksheets, Replace: object) """
        ...

    def _PrintOut(self, From:object, To:object, Copies:object, Preview:object, ActivePrinter:object, PrintToFile:object, Collate:object): # -> 
        """ _PrintOut(self: Worksheets, From: object, To: object, Copies: object, Preview: object, ActivePrinter: object, PrintToFile: object, Collate: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class WorksheetView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: WorksheetView) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: WorksheetView) -> XlCreator """
        ...

    @property
    def DisplayFormulas(self) -> bool:
        """
        Get: DisplayFormulas(self: WorksheetView) -> bool
        Set: DisplayFormulas(self: WorksheetView) = value
        """
        ...

    @property
    def DisplayGridlines(self) -> bool:
        """
        Get: DisplayGridlines(self: WorksheetView) -> bool
        Set: DisplayGridlines(self: WorksheetView) = value
        """
        ...

    @property
    def DisplayHeadings(self) -> bool:
        """
        Get: DisplayHeadings(self: WorksheetView) -> bool
        Set: DisplayHeadings(self: WorksheetView) = value
        """
        ...

    @property
    def DisplayOutline(self) -> bool:
        """
        Get: DisplayOutline(self: WorksheetView) -> bool
        Set: DisplayOutline(self: WorksheetView) = value
        """
        ...

    @property
    def DisplayZeros(self) -> bool:
        """
        Get: DisplayZeros(self: WorksheetView) -> bool
        Set: DisplayZeros(self: WorksheetView) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: WorksheetView) -> object """
        ...

    @property
    def Sheet(self) -> object:
        """ Get: Sheet(self: WorksheetView) -> object """
        ...



class XlAboveBelow(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAboveBelow, values: xlAboveAverage (0), xlAboveStdDev (4), xlBelowAverage (1), xlBelowStdDev (5), xlEqualAboveAverage (2), xlEqualBelowAverage (3) """
    value__ = ...
    xlAboveAverage: XlAboveBelow = ...
    xlAboveStdDev: XlAboveBelow = ...
    xlBelowAverage: XlAboveBelow = ...
    xlBelowStdDev: XlAboveBelow = ...
    xlEqualAboveAverage: XlAboveBelow = ...
    xlEqualBelowAverage: XlAboveBelow = ...


class XlActionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlActionType, values: xlActionTypeDrillthrough (256), xlActionTypeReport (128), xlActionTypeRowset (16), xlActionTypeUrl (1) """
    value__ = ...
    xlActionTypeDrillthrough: XlActionType = ...
    xlActionTypeReport: XlActionType = ...
    xlActionTypeRowset: XlActionType = ...
    xlActionTypeUrl: XlActionType = ...


class XlAllocation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAllocation, values: xlAutomaticAllocation (2), xlManualAllocation (1) """
    value__ = ...
    xlAutomaticAllocation: XlAllocation = ...
    xlManualAllocation: XlAllocation = ...


class XlAllocationMethod(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAllocationMethod, values: xlEqualAllocation (1), xlWeightedAllocation (2) """
    value__ = ...
    xlEqualAllocation: XlAllocationMethod = ...
    xlWeightedAllocation: XlAllocationMethod = ...


class XlAllocationValue(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAllocationValue, values: xlAllocateIncrement (2), xlAllocateValue (1) """
    value__ = ...
    xlAllocateIncrement: XlAllocationValue = ...
    xlAllocateValue: XlAllocationValue = ...


class XlApplicationInternational(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlApplicationInternational, values: xl24HourClock (33), xl4DigitYears (43), xlAlternateArraySeparator (16), xlColumnSeparator (14), xlCountryCode (1), xlCountrySetting (2), xlCurrencyBefore (37), xlCurrencyCode (25), xlCurrencyDigits (27), xlCurrencyLeadingZeros (40), xlCurrencyMinusSign (38), xlCurrencyNegative (28), xlCurrencySpaceBefore (36), xlCurrencyTrailingZeros (39), xlDateOrder (32), xlDateSeparator (17), xlDayCode (21), xlDayLeadingZero (42), xlDecimalSeparator (3), xlGeneralFormatName (26), xlHourCode (22), xlLeftBrace (12), xlLeftBracket (10), xlListSeparator (5), xlLowerCaseColumnLetter (9), xlLowerCaseRowLetter (8), xlMDY (44), xlMetric (35), xlMinuteCode (23), xlMonthCode (20), xlMonthLeadingZero (41), xlMonthNameChars (30), xlNoncurrencyDigits (29), xlNonEnglishFunctions (34), xlRightBrace (13), xlRightBracket (11), xlRowSeparator (15), xlSecondCode (24), xlThousandsSeparator (4), xlTimeLeadingZero (45), xlTimeSeparator (18), xlUpperCaseColumnLetter (7), xlUpperCaseRowLetter (6), xlWeekdayNameChars (31), xlYearCode (19) """
    value__ = ...
    xl24HourClock: XlApplicationInternational = ...
    xl4DigitYears: XlApplicationInternational = ...
    xlAlternateArraySeparator: XlApplicationInternational = ...
    xlColumnSeparator: XlApplicationInternational = ...
    xlCountryCode: XlApplicationInternational = ...
    xlCountrySetting: XlApplicationInternational = ...
    xlCurrencyBefore: XlApplicationInternational = ...
    xlCurrencyCode: XlApplicationInternational = ...
    xlCurrencyDigits: XlApplicationInternational = ...
    xlCurrencyLeadingZeros: XlApplicationInternational = ...
    xlCurrencyMinusSign: XlApplicationInternational = ...
    xlCurrencyNegative: XlApplicationInternational = ...
    xlCurrencySpaceBefore: XlApplicationInternational = ...
    xlCurrencyTrailingZeros: XlApplicationInternational = ...
    xlDateOrder: XlApplicationInternational = ...
    xlDateSeparator: XlApplicationInternational = ...
    xlDayCode: XlApplicationInternational = ...
    xlDayLeadingZero: XlApplicationInternational = ...
    xlDecimalSeparator: XlApplicationInternational = ...
    xlGeneralFormatName: XlApplicationInternational = ...
    xlHourCode: XlApplicationInternational = ...
    xlLeftBrace: XlApplicationInternational = ...
    xlLeftBracket: XlApplicationInternational = ...
    xlListSeparator: XlApplicationInternational = ...
    xlLowerCaseColumnLetter: XlApplicationInternational = ...
    xlLowerCaseRowLetter: XlApplicationInternational = ...
    xlMDY: XlApplicationInternational = ...
    xlMetric: XlApplicationInternational = ...
    xlMinuteCode: XlApplicationInternational = ...
    xlMonthCode: XlApplicationInternational = ...
    xlMonthLeadingZero: XlApplicationInternational = ...
    xlMonthNameChars: XlApplicationInternational = ...
    xlNoncurrencyDigits: XlApplicationInternational = ...
    xlNonEnglishFunctions: XlApplicationInternational = ...
    xlRightBrace: XlApplicationInternational = ...
    xlRightBracket: XlApplicationInternational = ...
    xlRowSeparator: XlApplicationInternational = ...
    xlSecondCode: XlApplicationInternational = ...
    xlThousandsSeparator: XlApplicationInternational = ...
    xlTimeLeadingZero: XlApplicationInternational = ...
    xlTimeSeparator: XlApplicationInternational = ...
    xlUpperCaseColumnLetter: XlApplicationInternational = ...
    xlUpperCaseRowLetter: XlApplicationInternational = ...
    xlWeekdayNameChars: XlApplicationInternational = ...
    xlYearCode: XlApplicationInternational = ...


class XlApplyNamesOrder(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlApplyNamesOrder, values: xlColumnThenRow (2), xlRowThenColumn (1) """
    value__ = ...
    xlColumnThenRow: XlApplyNamesOrder = ...
    xlRowThenColumn: XlApplyNamesOrder = ...


class XlArabicModes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlArabicModes, values: xlArabicBothStrict (3), xlArabicNone (0), xlArabicStrictAlefHamza (1), xlArabicStrictFinalYaa (2) """
    value__ = ...
    xlArabicBothStrict: XlArabicModes = ...
    xlArabicNone: XlArabicModes = ...
    xlArabicStrictAlefHamza: XlArabicModes = ...
    xlArabicStrictFinalYaa: XlArabicModes = ...


class XlArrangeStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlArrangeStyle, values: xlArrangeStyleCascade (7), xlArrangeStyleHorizontal (-4128), xlArrangeStyleTiled (1), xlArrangeStyleVertical (-4166) """
    value__ = ...
    xlArrangeStyleCascade: XlArrangeStyle = ...
    xlArrangeStyleHorizontal: XlArrangeStyle = ...
    xlArrangeStyleTiled: XlArrangeStyle = ...
    xlArrangeStyleVertical: XlArrangeStyle = ...


class XlArrowHeadLength(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlArrowHeadLength, values: xlArrowHeadLengthLong (3), xlArrowHeadLengthMedium (-4138), xlArrowHeadLengthShort (1) """
    value__ = ...
    xlArrowHeadLengthLong: XlArrowHeadLength = ...
    xlArrowHeadLengthMedium: XlArrowHeadLength = ...
    xlArrowHeadLengthShort: XlArrowHeadLength = ...


class XlArrowHeadStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlArrowHeadStyle, values: xlArrowHeadStyleClosed (3), xlArrowHeadStyleDoubleClosed (5), xlArrowHeadStyleDoubleOpen (4), xlArrowHeadStyleNone (-4142), xlArrowHeadStyleOpen (2) """
    value__ = ...
    xlArrowHeadStyleClosed: XlArrowHeadStyle = ...
    xlArrowHeadStyleDoubleClosed: XlArrowHeadStyle = ...
    xlArrowHeadStyleDoubleOpen: XlArrowHeadStyle = ...
    xlArrowHeadStyleNone: XlArrowHeadStyle = ...
    xlArrowHeadStyleOpen: XlArrowHeadStyle = ...


class XlArrowHeadWidth(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlArrowHeadWidth, values: xlArrowHeadWidthMedium (-4138), xlArrowHeadWidthNarrow (1), xlArrowHeadWidthWide (3) """
    value__ = ...
    xlArrowHeadWidthMedium: XlArrowHeadWidth = ...
    xlArrowHeadWidthNarrow: XlArrowHeadWidth = ...
    xlArrowHeadWidthWide: XlArrowHeadWidth = ...


class XlAutoFillType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAutoFillType, values: xlFillCopy (1), xlFillDays (5), xlFillDefault (0), xlFillFormats (3), xlFillMonths (7), xlFillSeries (2), xlFillValues (4), xlFillWeekdays (6), xlFillYears (8), xlFlashFill (11), xlGrowthTrend (10), xlLinearTrend (9) """
    value__ = ...
    xlFillCopy: XlAutoFillType = ...
    xlFillDays: XlAutoFillType = ...
    xlFillDefault: XlAutoFillType = ...
    xlFillFormats: XlAutoFillType = ...
    xlFillMonths: XlAutoFillType = ...
    xlFillSeries: XlAutoFillType = ...
    xlFillValues: XlAutoFillType = ...
    xlFillWeekdays: XlAutoFillType = ...
    xlFillYears: XlAutoFillType = ...
    xlFlashFill: XlAutoFillType = ...
    xlGrowthTrend: XlAutoFillType = ...
    xlLinearTrend: XlAutoFillType = ...


class XlAutoFilterOperator(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAutoFilterOperator, values: xlAnd (1), xlBottom10Items (4), xlBottom10Percent (6), xlFilterAutomaticFontColor (13), xlFilterCellColor (8), xlFilterDynamic (11), xlFilterFontColor (9), xlFilterIcon (10), xlFilterNoFill (12), xlFilterNoIcon (14), xlFilterValues (7), xlOr (2), xlTop10Items (3), xlTop10Percent (5) """
    value__ = ...
    xlAnd: XlAutoFilterOperator = ...
    xlBottom10Items: XlAutoFilterOperator = ...
    xlBottom10Percent: XlAutoFilterOperator = ...
    xlFilterAutomaticFontColor: XlAutoFilterOperator = ...
    xlFilterCellColor: XlAutoFilterOperator = ...
    xlFilterDynamic: XlAutoFilterOperator = ...
    xlFilterFontColor: XlAutoFilterOperator = ...
    xlFilterIcon: XlAutoFilterOperator = ...
    xlFilterNoFill: XlAutoFilterOperator = ...
    xlFilterNoIcon: XlAutoFilterOperator = ...
    xlFilterValues: XlAutoFilterOperator = ...
    xlOr: XlAutoFilterOperator = ...
    xlTop10Items: XlAutoFilterOperator = ...
    xlTop10Percent: XlAutoFilterOperator = ...


class XlAxisCrosses(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAxisCrosses, values: xlAxisCrossesAutomatic (-4105), xlAxisCrossesCustom (-4114), xlAxisCrossesMaximum (2), xlAxisCrossesMinimum (4) """
    value__ = ...
    xlAxisCrossesAutomatic: XlAxisCrosses = ...
    xlAxisCrossesCustom: XlAxisCrosses = ...
    xlAxisCrossesMaximum: XlAxisCrosses = ...
    xlAxisCrossesMinimum: XlAxisCrosses = ...


class XlAxisGroup(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAxisGroup, values: xlPrimary (1), xlSecondary (2) """
    value__ = ...
    xlPrimary: XlAxisGroup = ...
    xlSecondary: XlAxisGroup = ...


class XlAxisType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAxisType, values: xlCategory (1), xlSeriesAxis (3), xlValue (2) """
    value__ = ...
    xlCategory: XlAxisType = ...
    xlSeriesAxis: XlAxisType = ...
    xlValue: XlAxisType = ...


class XlBackground(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlBackground, values: xlBackgroundAutomatic (-4105), xlBackgroundOpaque (3), xlBackgroundTransparent (2) """
    value__ = ...
    xlBackgroundAutomatic: XlBackground = ...
    xlBackgroundOpaque: XlBackground = ...
    xlBackgroundTransparent: XlBackground = ...


class XlBarShape(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlBarShape, values: xlBox (0), xlConeToMax (5), xlConeToPoint (4), xlCylinder (3), xlPyramidToMax (2), xlPyramidToPoint (1) """
    value__ = ...
    xlBox: XlBarShape = ...
    xlConeToMax: XlBarShape = ...
    xlConeToPoint: XlBarShape = ...
    xlCylinder: XlBarShape = ...
    xlPyramidToMax: XlBarShape = ...
    xlPyramidToPoint: XlBarShape = ...


class XlBordersIndex(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlBordersIndex, values: xlDiagonalDown (5), xlDiagonalUp (6), xlEdgeBottom (9), xlEdgeLeft (7), xlEdgeRight (10), xlEdgeTop (8), xlInsideHorizontal (12), xlInsideVertical (11) """
    value__ = ...
    xlDiagonalDown: XlBordersIndex = ...
    xlDiagonalUp: XlBordersIndex = ...
    xlEdgeBottom: XlBordersIndex = ...
    xlEdgeLeft: XlBordersIndex = ...
    xlEdgeRight: XlBordersIndex = ...
    xlEdgeTop: XlBordersIndex = ...
    xlInsideHorizontal: XlBordersIndex = ...
    xlInsideVertical: XlBordersIndex = ...


class XlBorderWeight(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlBorderWeight, values: xlHairline (1), xlMedium (-4138), xlThick (4), xlThin (2) """
    value__ = ...
    xlHairline: XlBorderWeight = ...
    xlMedium: XlBorderWeight = ...
    xlThick: XlBorderWeight = ...
    xlThin: XlBorderWeight = ...


class XlBuiltInDialog(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlBuiltInDialog, values: _xlDialogChartSourceData (541), _xlDialogPhonetic (538), xlDialogActivate (103), xlDialogActiveCellFont (476), xlDialogAddChartAutoformat (390), xlDialogAddinManager (321), xlDialogAlignment (43), xlDialogApplyNames (133), xlDialogApplyStyle (212), xlDialogAppMove (170), xlDialogAppSize (171), xlDialogArrangeAll (12), xlDialogAssignToObject (213), xlDialogAssignToTool (293), xlDialogAttachText (80), xlDialogAttachToolbars (323), xlDialogAutoCorrect (485), xlDialogAxes (78), xlDialogBorder (45), xlDialogCalculation (32), xlDialogCellProtection (46), xlDialogChangeLink (166), xlDialogChartAddData (392), xlDialogChartLocation (527), xlDialogChartOptionsDataLabelMultiple (724), xlDialogChartOptionsDataLabels (505), xlDialogChartOptionsDataTable (506), xlDialogChartSourceData (540), xlDialogChartTrend (350), xlDialogChartType (526), xlDialogChartWizard (288), xlDialogCheckboxProperties (435), xlDialogClear (52), xlDialogColorPalette (161), xlDialogColumnWidth (47), xlDialogCombination (73), xlDialogConditionalFormatting (583), xlDialogConsolidate (191), xlDialogCopyChart (147), xlDialogCopyPicture (108), xlDialogCreateList (796), xlDialogCreateNames (62), xlDialogCreatePublisher (217), xlDialogCreateRelationship (1272), xlDialogCustomizeToolbar (276), xlDialogCustomViews (493), xlDialogDataDelete (36), xlDialogDataLabel (379), xlDialogDataLabelMultiple (723), xlDialogDataSeries (40), xlDialogDataValidation (525), xlDialogDefineName (61), xlDialogDefineStyle (229), xlDialogDeleteFormat (111), xlDialogDeleteName (110), xlDialogDemote (203), xlDialogDisplay (27), xlDialogDocumentInspector (862), xlDialogEditboxProperties (438), xlDialogEditColor (223), xlDialogEditDelete (54), xlDialogEditionOptions (251), xlDialogEditSeries (228), xlDialogErrorbarX (463), xlDialogErrorbarY (464), xlDialogErrorChecking (732), xlDialogEvaluateFormula (709), xlDialogExternalDataProperties (530), xlDialogExtract (35), xlDialogFileDelete (6), xlDialogFileSharing (481), xlDialogFillGroup (200), xlDialogFillWorkgroup (301), xlDialogFilter (447), xlDialogFilterAdvanced (370), xlDialogFindFile (475), xlDialogFont (26), xlDialogFontProperties (381), xlDialogFormatAuto (269), xlDialogFormatChart (465), xlDialogFormatCharttype (423), xlDialogFormatFont (150), xlDialogFormatLegend (88), xlDialogFormatMain (225), xlDialogFormatMove (128), xlDialogFormatNumber (42), xlDialogFormatOverlay (226), xlDialogFormatSize (129), xlDialogFormatText (89), xlDialogFormulaFind (64), xlDialogFormulaGoto (63), xlDialogFormulaReplace (130), xlDialogFunctionWizard (450), xlDialogGallery3dArea (193), xlDialogGallery3dBar (272), xlDialogGallery3dColumn (194), xlDialogGallery3dLine (195), xlDialogGallery3dPie (196), xlDialogGallery3dSurface (273), xlDialogGalleryArea (67), xlDialogGalleryBar (68), xlDialogGalleryColumn (69), xlDialogGalleryCustom (388), xlDialogGalleryDoughnut (344), xlDialogGalleryLine (70), xlDialogGalleryPie (71), xlDialogGalleryRadar (249), xlDialogGalleryScatter (72), xlDialogGoalSeek (198), xlDialogGridlines (76), xlDialogImportTextFile (666), xlDialogInsert (55), xlDialogInsertHyperlink (596), xlDialogInsertNameLabel (496), xlDialogInsertObject (259), xlDialogInsertPicture (342), xlDialogInsertTitle (380), xlDialogLabelProperties (436), xlDialogListboxProperties (437), xlDialogMacroOptions (382), xlDialogMailEditMailer (470), xlDialogMailLogon (339), xlDialogMailNextLetter (378), xlDialogMainChart (85), xlDialogMainChartType (185), xlDialogManageRelationships (1271), xlDialogMenuEditor (322), xlDialogMove (262), xlDialogMyPermission (834), xlDialogNameManager (977), xlDialogNew (119), xlDialogNewName (978), xlDialogNewWebQuery (667), xlDialogNote (154), xlDialogObjectProperties (207), xlDialogObjectProtection (214), xlDialogOpen (1), xlDialogOpenLinks (2), xlDialogOpenMail (188), xlDialogOpenText (441), xlDialogOptionsCalculation (318), xlDialogOptionsChart (325), xlDialogOptionsEdit (319), xlDialogOptionsGeneral (356), xlDialogOptionsListsAdd (458), xlDialogOptionsME (647), xlDialogOptionsTransition (355), xlDialogOptionsView (320), xlDialogOutline (142), xlDialogOverlay (86), xlDialogOverlayChartType (186), xlDialogPageSetup (7), xlDialogParse (91), xlDialogPasteNames (58), xlDialogPasteSpecial (53), xlDialogPatterns (84), xlDialogPermission (832), xlDialogPhonetic (656), xlDialogPivotCalculatedField (570), xlDialogPivotCalculatedItem (572), xlDialogPivotClientServerSet (689), xlDialogPivotFieldGroup (433), xlDialogPivotFieldProperties (313), xlDialogPivotFieldUngroup (434), xlDialogPivotShowPages (421), xlDialogPivotSolveOrder (568), xlDialogPivotTableOptions (567), xlDialogPivotTableSlicerConnections (1183), xlDialogPivotTableWhatIfAnalysisSettings (1153), xlDialogPivotTableWizard (312), xlDialogPlacement (300), xlDialogPrint (8), xlDialogPrinterSetup (9), xlDialogPrintPreview (222), xlDialogPromote (202), xlDialogProperties (474), xlDialogPropertyFields (754), xlDialogProtectDocument (28), xlDialogProtectSharing (620), xlDialogPublishAsWebPage (653), xlDialogPushbuttonProperties (445), xlDialogRecommendedPivotTables (1258), xlDialogReplaceFont (134), xlDialogRoutingSlip (336), xlDialogRowHeight (127), xlDialogRun (17), xlDialogSaveAs (5), xlDialogSaveCopyAs (456), xlDialogSaveNewObject (208), xlDialogSaveWorkbook (145), xlDialogSaveWorkspace (285), xlDialogScale (87), xlDialogScenarioAdd (307), xlDialogScenarioCells (305), xlDialogScenarioEdit (308), xlDialogScenarioMerge (473), xlDialogScenarioSummary (311), xlDialogScrollbarProperties (420), xlDialogSearch (731), xlDialogSelectSpecial (132), xlDialogSendMail (189), xlDialogSeriesAxes (460), xlDialogSeriesOptions (557), xlDialogSeriesOrder (466), xlDialogSeriesShape (504), xlDialogSeriesX (461), xlDialogSeriesY (462), xlDialogSetBackgroundPicture (509), xlDialogSetManager (1109), xlDialogSetMDXEditor (1208), xlDialogSetPrintTitles (23), xlDialogSetTupleEditorOnColumns (1108), xlDialogSetTupleEditorOnRows (1107), xlDialogSetUpdateStatus (159), xlDialogShowDetail (204), xlDialogShowToolbar (220), xlDialogSize (261), xlDialogSlicerCreation (1182), xlDialogSlicerPivotTableConnections (1184), xlDialogSlicerSettings (1179), xlDialogSort (39), xlDialogSortSpecial (192), xlDialogSparklineInsertColumn (1134), xlDialogSparklineInsertLine (1133), xlDialogSparklineInsertWinLoss (1135), xlDialogSplit (137), xlDialogStandardFont (190), xlDialogStandardWidth (472), xlDialogStyle (44), xlDialogSubscribeTo (218), xlDialogSubtotalCreate (398), xlDialogSummaryInfo (474), xlDialogTable (41), xlDialogTabOrder (394), xlDialogTextToColumns (422), xlDialogUnhide (94), xlDialogUpdateLink (201), xlDialogVbaInsertFile (328), xlDialogVbaMakeAddin (478), xlDialogVbaProcedureDefinition (330), xlDialogView3d (197), xlDialogWebOptionsBrowsers (773), xlDialogWebOptionsEncoding (686), xlDialogWebOptionsFiles (684), xlDialogWebOptionsFonts (687), xlDialogWebOptionsGeneral (683), xlDialogWebOptionsPictures (685), xlDialogWindowMove (14), xlDialogWindowSize (13), xlDialogWorkbookAdd (281), xlDialogWorkbookCopy (283), xlDialogWorkbookInsert (354), xlDialogWorkbookMove (282), xlDialogWorkbookName (386), xlDialogWorkbookNew (302), xlDialogWorkbookOptions (284), xlDialogWorkbookProtect (417), xlDialogWorkbookTabSplit (415), xlDialogWorkbookUnhide (384), xlDialogWorkgroup (199), xlDialogWorkspace (95), xlDialogZoom (256) """
    value__ = ...
    xlDialogActivate: XlBuiltInDialog = ...
    xlDialogActiveCellFont: XlBuiltInDialog = ...
    xlDialogAddChartAutoformat: XlBuiltInDialog = ...
    xlDialogAddinManager: XlBuiltInDialog = ...
    xlDialogAlignment: XlBuiltInDialog = ...
    xlDialogApplyNames: XlBuiltInDialog = ...
    xlDialogApplyStyle: XlBuiltInDialog = ...
    xlDialogAppMove: XlBuiltInDialog = ...
    xlDialogAppSize: XlBuiltInDialog = ...
    xlDialogArrangeAll: XlBuiltInDialog = ...
    xlDialogAssignToObject: XlBuiltInDialog = ...
    xlDialogAssignToTool: XlBuiltInDialog = ...
    xlDialogAttachText: XlBuiltInDialog = ...
    xlDialogAttachToolbars: XlBuiltInDialog = ...
    xlDialogAutoCorrect: XlBuiltInDialog = ...
    xlDialogAxes: XlBuiltInDialog = ...
    xlDialogBorder: XlBuiltInDialog = ...
    xlDialogCalculation: XlBuiltInDialog = ...
    xlDialogCellProtection: XlBuiltInDialog = ...
    xlDialogChangeLink: XlBuiltInDialog = ...
    xlDialogChartAddData: XlBuiltInDialog = ...
    xlDialogChartLocation: XlBuiltInDialog = ...
    xlDialogChartOptionsDataLabelMultiple: XlBuiltInDialog = ...
    xlDialogChartOptionsDataLabels: XlBuiltInDialog = ...
    xlDialogChartOptionsDataTable: XlBuiltInDialog = ...
    xlDialogChartSourceData: XlBuiltInDialog = ...
    xlDialogChartTrend: XlBuiltInDialog = ...
    xlDialogChartType: XlBuiltInDialog = ...
    xlDialogChartWizard: XlBuiltInDialog = ...
    xlDialogCheckboxProperties: XlBuiltInDialog = ...
    xlDialogClear: XlBuiltInDialog = ...
    xlDialogColorPalette: XlBuiltInDialog = ...
    xlDialogColumnWidth: XlBuiltInDialog = ...
    xlDialogCombination: XlBuiltInDialog = ...
    xlDialogConditionalFormatting: XlBuiltInDialog = ...
    xlDialogConsolidate: XlBuiltInDialog = ...
    xlDialogCopyChart: XlBuiltInDialog = ...
    xlDialogCopyPicture: XlBuiltInDialog = ...
    xlDialogCreateList: XlBuiltInDialog = ...
    xlDialogCreateNames: XlBuiltInDialog = ...
    xlDialogCreatePublisher: XlBuiltInDialog = ...
    xlDialogCreateRelationship: XlBuiltInDialog = ...
    xlDialogCustomizeToolbar: XlBuiltInDialog = ...
    xlDialogCustomViews: XlBuiltInDialog = ...
    xlDialogDataDelete: XlBuiltInDialog = ...
    xlDialogDataLabel: XlBuiltInDialog = ...
    xlDialogDataLabelMultiple: XlBuiltInDialog = ...
    xlDialogDataSeries: XlBuiltInDialog = ...
    xlDialogDataValidation: XlBuiltInDialog = ...
    xlDialogDefineName: XlBuiltInDialog = ...
    xlDialogDefineStyle: XlBuiltInDialog = ...
    xlDialogDeleteFormat: XlBuiltInDialog = ...
    xlDialogDeleteName: XlBuiltInDialog = ...
    xlDialogDemote: XlBuiltInDialog = ...
    xlDialogDisplay: XlBuiltInDialog = ...
    xlDialogDocumentInspector: XlBuiltInDialog = ...
    xlDialogEditboxProperties: XlBuiltInDialog = ...
    xlDialogEditColor: XlBuiltInDialog = ...
    xlDialogEditDelete: XlBuiltInDialog = ...
    xlDialogEditionOptions: XlBuiltInDialog = ...
    xlDialogEditSeries: XlBuiltInDialog = ...
    xlDialogErrorbarX: XlBuiltInDialog = ...
    xlDialogErrorbarY: XlBuiltInDialog = ...
    xlDialogErrorChecking: XlBuiltInDialog = ...
    xlDialogEvaluateFormula: XlBuiltInDialog = ...
    xlDialogExternalDataProperties: XlBuiltInDialog = ...
    xlDialogExtract: XlBuiltInDialog = ...
    xlDialogFileDelete: XlBuiltInDialog = ...
    xlDialogFileSharing: XlBuiltInDialog = ...
    xlDialogFillGroup: XlBuiltInDialog = ...
    xlDialogFillWorkgroup: XlBuiltInDialog = ...
    xlDialogFilter: XlBuiltInDialog = ...
    xlDialogFilterAdvanced: XlBuiltInDialog = ...
    xlDialogFindFile: XlBuiltInDialog = ...
    xlDialogFont: XlBuiltInDialog = ...
    xlDialogFontProperties: XlBuiltInDialog = ...
    xlDialogFormatAuto: XlBuiltInDialog = ...
    xlDialogFormatChart: XlBuiltInDialog = ...
    xlDialogFormatCharttype: XlBuiltInDialog = ...
    xlDialogFormatFont: XlBuiltInDialog = ...
    xlDialogFormatLegend: XlBuiltInDialog = ...
    xlDialogFormatMain: XlBuiltInDialog = ...
    xlDialogFormatMove: XlBuiltInDialog = ...
    xlDialogFormatNumber: XlBuiltInDialog = ...
    xlDialogFormatOverlay: XlBuiltInDialog = ...
    xlDialogFormatSize: XlBuiltInDialog = ...
    xlDialogFormatText: XlBuiltInDialog = ...
    xlDialogFormulaFind: XlBuiltInDialog = ...
    xlDialogFormulaGoto: XlBuiltInDialog = ...
    xlDialogFormulaReplace: XlBuiltInDialog = ...
    xlDialogFunctionWizard: XlBuiltInDialog = ...
    xlDialogGallery3dArea: XlBuiltInDialog = ...
    xlDialogGallery3dBar: XlBuiltInDialog = ...
    xlDialogGallery3dColumn: XlBuiltInDialog = ...
    xlDialogGallery3dLine: XlBuiltInDialog = ...
    xlDialogGallery3dPie: XlBuiltInDialog = ...
    xlDialogGallery3dSurface: XlBuiltInDialog = ...
    xlDialogGalleryArea: XlBuiltInDialog = ...
    xlDialogGalleryBar: XlBuiltInDialog = ...
    xlDialogGalleryColumn: XlBuiltInDialog = ...
    xlDialogGalleryCustom: XlBuiltInDialog = ...
    xlDialogGalleryDoughnut: XlBuiltInDialog = ...
    xlDialogGalleryLine: XlBuiltInDialog = ...
    xlDialogGalleryPie: XlBuiltInDialog = ...
    xlDialogGalleryRadar: XlBuiltInDialog = ...
    xlDialogGalleryScatter: XlBuiltInDialog = ...
    xlDialogGoalSeek: XlBuiltInDialog = ...
    xlDialogGridlines: XlBuiltInDialog = ...
    xlDialogImportTextFile: XlBuiltInDialog = ...
    xlDialogInsert: XlBuiltInDialog = ...
    xlDialogInsertHyperlink: XlBuiltInDialog = ...
    xlDialogInsertNameLabel: XlBuiltInDialog = ...
    xlDialogInsertObject: XlBuiltInDialog = ...
    xlDialogInsertPicture: XlBuiltInDialog = ...
    xlDialogInsertTitle: XlBuiltInDialog = ...
    xlDialogLabelProperties: XlBuiltInDialog = ...
    xlDialogListboxProperties: XlBuiltInDialog = ...
    xlDialogMacroOptions: XlBuiltInDialog = ...
    xlDialogMailEditMailer: XlBuiltInDialog = ...
    xlDialogMailLogon: XlBuiltInDialog = ...
    xlDialogMailNextLetter: XlBuiltInDialog = ...
    xlDialogMainChart: XlBuiltInDialog = ...
    xlDialogMainChartType: XlBuiltInDialog = ...
    xlDialogManageRelationships: XlBuiltInDialog = ...
    xlDialogMenuEditor: XlBuiltInDialog = ...
    xlDialogMove: XlBuiltInDialog = ...
    xlDialogMyPermission: XlBuiltInDialog = ...
    xlDialogNameManager: XlBuiltInDialog = ...
    xlDialogNew: XlBuiltInDialog = ...
    xlDialogNewName: XlBuiltInDialog = ...
    xlDialogNewWebQuery: XlBuiltInDialog = ...
    xlDialogNote: XlBuiltInDialog = ...
    xlDialogObjectProperties: XlBuiltInDialog = ...
    xlDialogObjectProtection: XlBuiltInDialog = ...
    xlDialogOpen: XlBuiltInDialog = ...
    xlDialogOpenLinks: XlBuiltInDialog = ...
    xlDialogOpenMail: XlBuiltInDialog = ...
    xlDialogOpenText: XlBuiltInDialog = ...
    xlDialogOptionsCalculation: XlBuiltInDialog = ...
    xlDialogOptionsChart: XlBuiltInDialog = ...
    xlDialogOptionsEdit: XlBuiltInDialog = ...
    xlDialogOptionsGeneral: XlBuiltInDialog = ...
    xlDialogOptionsListsAdd: XlBuiltInDialog = ...
    xlDialogOptionsME: XlBuiltInDialog = ...
    xlDialogOptionsTransition: XlBuiltInDialog = ...
    xlDialogOptionsView: XlBuiltInDialog = ...
    xlDialogOutline: XlBuiltInDialog = ...
    xlDialogOverlay: XlBuiltInDialog = ...
    xlDialogOverlayChartType: XlBuiltInDialog = ...
    xlDialogPageSetup: XlBuiltInDialog = ...
    xlDialogParse: XlBuiltInDialog = ...
    xlDialogPasteNames: XlBuiltInDialog = ...
    xlDialogPasteSpecial: XlBuiltInDialog = ...
    xlDialogPatterns: XlBuiltInDialog = ...
    xlDialogPermission: XlBuiltInDialog = ...
    xlDialogPhonetic: XlBuiltInDialog = ...
    xlDialogPivotCalculatedField: XlBuiltInDialog = ...
    xlDialogPivotCalculatedItem: XlBuiltInDialog = ...
    xlDialogPivotClientServerSet: XlBuiltInDialog = ...
    xlDialogPivotFieldGroup: XlBuiltInDialog = ...
    xlDialogPivotFieldProperties: XlBuiltInDialog = ...
    xlDialogPivotFieldUngroup: XlBuiltInDialog = ...
    xlDialogPivotShowPages: XlBuiltInDialog = ...
    xlDialogPivotSolveOrder: XlBuiltInDialog = ...
    xlDialogPivotTableOptions: XlBuiltInDialog = ...
    xlDialogPivotTableSlicerConnections: XlBuiltInDialog = ...
    xlDialogPivotTableWhatIfAnalysisSettings: XlBuiltInDialog = ...
    xlDialogPivotTableWizard: XlBuiltInDialog = ...
    xlDialogPlacement: XlBuiltInDialog = ...
    xlDialogPrint: XlBuiltInDialog = ...
    xlDialogPrinterSetup: XlBuiltInDialog = ...
    xlDialogPrintPreview: XlBuiltInDialog = ...
    xlDialogPromote: XlBuiltInDialog = ...
    xlDialogProperties: XlBuiltInDialog = ...
    xlDialogPropertyFields: XlBuiltInDialog = ...
    xlDialogProtectDocument: XlBuiltInDialog = ...
    xlDialogProtectSharing: XlBuiltInDialog = ...
    xlDialogPublishAsWebPage: XlBuiltInDialog = ...
    xlDialogPushbuttonProperties: XlBuiltInDialog = ...
    xlDialogRecommendedPivotTables: XlBuiltInDialog = ...
    xlDialogReplaceFont: XlBuiltInDialog = ...
    xlDialogRoutingSlip: XlBuiltInDialog = ...
    xlDialogRowHeight: XlBuiltInDialog = ...
    xlDialogRun: XlBuiltInDialog = ...
    xlDialogSaveAs: XlBuiltInDialog = ...
    xlDialogSaveCopyAs: XlBuiltInDialog = ...
    xlDialogSaveNewObject: XlBuiltInDialog = ...
    xlDialogSaveWorkbook: XlBuiltInDialog = ...
    xlDialogSaveWorkspace: XlBuiltInDialog = ...
    xlDialogScale: XlBuiltInDialog = ...
    xlDialogScenarioAdd: XlBuiltInDialog = ...
    xlDialogScenarioCells: XlBuiltInDialog = ...
    xlDialogScenarioEdit: XlBuiltInDialog = ...
    xlDialogScenarioMerge: XlBuiltInDialog = ...
    xlDialogScenarioSummary: XlBuiltInDialog = ...
    xlDialogScrollbarProperties: XlBuiltInDialog = ...
    xlDialogSearch: XlBuiltInDialog = ...
    xlDialogSelectSpecial: XlBuiltInDialog = ...
    xlDialogSendMail: XlBuiltInDialog = ...
    xlDialogSeriesAxes: XlBuiltInDialog = ...
    xlDialogSeriesOptions: XlBuiltInDialog = ...
    xlDialogSeriesOrder: XlBuiltInDialog = ...
    xlDialogSeriesShape: XlBuiltInDialog = ...
    xlDialogSeriesX: XlBuiltInDialog = ...
    xlDialogSeriesY: XlBuiltInDialog = ...
    xlDialogSetBackgroundPicture: XlBuiltInDialog = ...
    xlDialogSetManager: XlBuiltInDialog = ...
    xlDialogSetMDXEditor: XlBuiltInDialog = ...
    xlDialogSetPrintTitles: XlBuiltInDialog = ...
    xlDialogSetTupleEditorOnColumns: XlBuiltInDialog = ...
    xlDialogSetTupleEditorOnRows: XlBuiltInDialog = ...
    xlDialogSetUpdateStatus: XlBuiltInDialog = ...
    xlDialogShowDetail: XlBuiltInDialog = ...
    xlDialogShowToolbar: XlBuiltInDialog = ...
    xlDialogSize: XlBuiltInDialog = ...
    xlDialogSlicerCreation: XlBuiltInDialog = ...
    xlDialogSlicerPivotTableConnections: XlBuiltInDialog = ...
    xlDialogSlicerSettings: XlBuiltInDialog = ...
    xlDialogSort: XlBuiltInDialog = ...
    xlDialogSortSpecial: XlBuiltInDialog = ...
    xlDialogSparklineInsertColumn: XlBuiltInDialog = ...
    xlDialogSparklineInsertLine: XlBuiltInDialog = ...
    xlDialogSparklineInsertWinLoss: XlBuiltInDialog = ...
    xlDialogSplit: XlBuiltInDialog = ...
    xlDialogStandardFont: XlBuiltInDialog = ...
    xlDialogStandardWidth: XlBuiltInDialog = ...
    xlDialogStyle: XlBuiltInDialog = ...
    xlDialogSubscribeTo: XlBuiltInDialog = ...
    xlDialogSubtotalCreate: XlBuiltInDialog = ...
    xlDialogSummaryInfo: XlBuiltInDialog = ...
    xlDialogTable: XlBuiltInDialog = ...
    xlDialogTabOrder: XlBuiltInDialog = ...
    xlDialogTextToColumns: XlBuiltInDialog = ...
    xlDialogUnhide: XlBuiltInDialog = ...
    xlDialogUpdateLink: XlBuiltInDialog = ...
    xlDialogVbaInsertFile: XlBuiltInDialog = ...
    xlDialogVbaMakeAddin: XlBuiltInDialog = ...
    xlDialogVbaProcedureDefinition: XlBuiltInDialog = ...
    xlDialogView3d: XlBuiltInDialog = ...
    xlDialogWebOptionsBrowsers: XlBuiltInDialog = ...
    xlDialogWebOptionsEncoding: XlBuiltInDialog = ...
    xlDialogWebOptionsFiles: XlBuiltInDialog = ...
    xlDialogWebOptionsFonts: XlBuiltInDialog = ...
    xlDialogWebOptionsGeneral: XlBuiltInDialog = ...
    xlDialogWebOptionsPictures: XlBuiltInDialog = ...
    xlDialogWindowMove: XlBuiltInDialog = ...
    xlDialogWindowSize: XlBuiltInDialog = ...
    xlDialogWorkbookAdd: XlBuiltInDialog = ...
    xlDialogWorkbookCopy: XlBuiltInDialog = ...
    xlDialogWorkbookInsert: XlBuiltInDialog = ...
    xlDialogWorkbookMove: XlBuiltInDialog = ...
    xlDialogWorkbookName: XlBuiltInDialog = ...
    xlDialogWorkbookNew: XlBuiltInDialog = ...
    xlDialogWorkbookOptions: XlBuiltInDialog = ...
    xlDialogWorkbookProtect: XlBuiltInDialog = ...
    xlDialogWorkbookTabSplit: XlBuiltInDialog = ...
    xlDialogWorkbookUnhide: XlBuiltInDialog = ...
    xlDialogWorkgroup: XlBuiltInDialog = ...
    xlDialogWorkspace: XlBuiltInDialog = ...
    xlDialogZoom: XlBuiltInDialog = ...
    _xlDialogChartSourceData: XlBuiltInDialog = ...
    _xlDialogPhonetic: XlBuiltInDialog = ...


class XlCalcFor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCalcFor, values: xlAllValues (0), xlColGroups (2), xlRowGroups (1) """
    value__ = ...
    xlAllValues: XlCalcFor = ...
    xlColGroups: XlCalcFor = ...
    xlRowGroups: XlCalcFor = ...


class XlCalcMemNumberFormatType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCalcMemNumberFormatType, values: xlNumberFormatTypeDefault (0), xlNumberFormatTypeNumber (1), xlNumberFormatTypePercent (2) """
    value__ = ...
    xlNumberFormatTypeDefault: XlCalcMemNumberFormatType = ...
    xlNumberFormatTypeNumber: XlCalcMemNumberFormatType = ...
    xlNumberFormatTypePercent: XlCalcMemNumberFormatType = ...


class XlCalculatedMemberType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCalculatedMemberType, values: xlCalculatedMeasure (2), xlCalculatedMember (0), xlCalculatedSet (1) """
    value__ = ...
    xlCalculatedMeasure: XlCalculatedMemberType = ...
    xlCalculatedMember: XlCalculatedMemberType = ...
    xlCalculatedSet: XlCalculatedMemberType = ...


class XlCalculation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCalculation, values: xlCalculationAutomatic (-4105), xlCalculationManual (-4135), xlCalculationSemiautomatic (2) """
    value__ = ...
    xlCalculationAutomatic: XlCalculation = ...
    xlCalculationManual: XlCalculation = ...
    xlCalculationSemiautomatic: XlCalculation = ...


class XlCalculationInterruptKey(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCalculationInterruptKey, values: xlAnyKey (2), xlEscKey (1), xlNoKey (0) """
    value__ = ...
    xlAnyKey: XlCalculationInterruptKey = ...
    xlEscKey: XlCalculationInterruptKey = ...
    xlNoKey: XlCalculationInterruptKey = ...


class XlCalculationState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCalculationState, values: xlCalculating (1), xlDone (0), xlPending (2) """
    value__ = ...
    xlCalculating: XlCalculationState = ...
    xlDone: XlCalculationState = ...
    xlPending: XlCalculationState = ...


class XlCategoryLabelLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCategoryLabelLevel, values: xlCategoryLabelLevelAll (-1), xlCategoryLabelLevelCustom (-2), xlCategoryLabelLevelNone (-3) """
    value__ = ...
    xlCategoryLabelLevelAll: XlCategoryLabelLevel = ...
    xlCategoryLabelLevelCustom: XlCategoryLabelLevel = ...
    xlCategoryLabelLevelNone: XlCategoryLabelLevel = ...


class XlCategoryType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCategoryType, values: xlAutomaticScale (-4105), xlCategoryScale (2), xlTimeScale (3) """
    value__ = ...
    xlAutomaticScale: XlCategoryType = ...
    xlCategoryScale: XlCategoryType = ...
    xlTimeScale: XlCategoryType = ...


class XlCellChangedState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCellChangedState, values: xlCellChangeApplied (3), xlCellChanged (2), xlCellNotChanged (1) """
    value__ = ...
    xlCellChangeApplied: XlCellChangedState = ...
    xlCellChanged: XlCellChangedState = ...
    xlCellNotChanged: XlCellChangedState = ...


class XlCellInsertionMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCellInsertionMode, values: xlInsertDeleteCells (1), xlInsertEntireRows (2), xlOverwriteCells (0) """
    value__ = ...
    xlInsertDeleteCells: XlCellInsertionMode = ...
    xlInsertEntireRows: XlCellInsertionMode = ...
    xlOverwriteCells: XlCellInsertionMode = ...


class XlCellType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCellType, values: xlCellTypeAllFormatConditions (-4172), xlCellTypeAllValidation (-4174), xlCellTypeBlanks (4), xlCellTypeComments (-4144), xlCellTypeConstants (2), xlCellTypeFormulas (-4123), xlCellTypeLastCell (11), xlCellTypeSameFormatConditions (-4173), xlCellTypeSameValidation (-4175), xlCellTypeVisible (12) """
    value__ = ...
    xlCellTypeAllFormatConditions: XlCellType = ...
    xlCellTypeAllValidation: XlCellType = ...
    xlCellTypeBlanks: XlCellType = ...
    xlCellTypeComments: XlCellType = ...
    xlCellTypeConstants: XlCellType = ...
    xlCellTypeFormulas: XlCellType = ...
    xlCellTypeLastCell: XlCellType = ...
    xlCellTypeSameFormatConditions: XlCellType = ...
    xlCellTypeSameValidation: XlCellType = ...
    xlCellTypeVisible: XlCellType = ...


class XlChartElementPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartElementPosition, values: xlChartElementPositionAutomatic (-4105), xlChartElementPositionCustom (-4114) """
    value__ = ...
    xlChartElementPositionAutomatic: XlChartElementPosition = ...
    xlChartElementPositionCustom: XlChartElementPosition = ...


class XlChartGallery(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartGallery, values: xlAnyGallery (23), xlBuiltIn (21), xlUserDefined (22) """
    value__ = ...
    xlAnyGallery: XlChartGallery = ...
    xlBuiltIn: XlChartGallery = ...
    xlUserDefined: XlChartGallery = ...


class XlChartItem(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartItem, values: xlAxis (21), xlAxisTitle (17), xlChartArea (2), xlChartTitle (4), xlCorners (6), xlDataLabel (0), xlDataTable (7), xlDisplayUnitLabel (30), xlDownBars (20), xlDropLines (26), xlErrorBars (9), xlFloor (23), xlHiLoLines (25), xlLeaderLines (29), xlLegend (24), xlLegendEntry (12), xlLegendKey (13), xlMajorGridlines (15), xlMinorGridlines (16), xlNothing (28), xlPivotChartDropZone (32), xlPivotChartFieldButton (31), xlPlotArea (19), xlRadarAxisLabels (27), xlSeries (3), xlSeriesLines (22), xlShape (14), xlTrendline (8), xlUpBars (18), xlWalls (5), xlXErrorBars (10), xlYErrorBars (11) """
    value__ = ...
    xlAxis: XlChartItem = ...
    xlAxisTitle: XlChartItem = ...
    xlChartArea: XlChartItem = ...
    xlChartTitle: XlChartItem = ...
    xlCorners: XlChartItem = ...
    xlDataLabel: XlChartItem = ...
    xlDataTable: XlChartItem = ...
    xlDisplayUnitLabel: XlChartItem = ...
    xlDownBars: XlChartItem = ...
    xlDropLines: XlChartItem = ...
    xlErrorBars: XlChartItem = ...
    xlFloor: XlChartItem = ...
    xlHiLoLines: XlChartItem = ...
    xlLeaderLines: XlChartItem = ...
    xlLegend: XlChartItem = ...
    xlLegendEntry: XlChartItem = ...
    xlLegendKey: XlChartItem = ...
    xlMajorGridlines: XlChartItem = ...
    xlMinorGridlines: XlChartItem = ...
    xlNothing: XlChartItem = ...
    xlPivotChartDropZone: XlChartItem = ...
    xlPivotChartFieldButton: XlChartItem = ...
    xlPlotArea: XlChartItem = ...
    xlRadarAxisLabels: XlChartItem = ...
    xlSeries: XlChartItem = ...
    xlSeriesLines: XlChartItem = ...
    xlShape: XlChartItem = ...
    xlTrendline: XlChartItem = ...
    xlUpBars: XlChartItem = ...
    xlWalls: XlChartItem = ...
    xlXErrorBars: XlChartItem = ...
    xlYErrorBars: XlChartItem = ...


class XlChartLocation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartLocation, values: xlLocationAsNewSheet (1), xlLocationAsObject (2), xlLocationAutomatic (3) """
    value__ = ...
    xlLocationAsNewSheet: XlChartLocation = ...
    xlLocationAsObject: XlChartLocation = ...
    xlLocationAutomatic: XlChartLocation = ...


class XlChartPicturePlacement(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartPicturePlacement, values: xlAllFaces (7), xlEnd (2), xlEndSides (3), xlFront (4), xlFrontEnd (6), xlFrontSides (5), xlSides (1) """
    value__ = ...
    xlAllFaces: XlChartPicturePlacement = ...
    xlEnd: XlChartPicturePlacement = ...
    xlEndSides: XlChartPicturePlacement = ...
    xlFront: XlChartPicturePlacement = ...
    xlFrontEnd: XlChartPicturePlacement = ...
    xlFrontSides: XlChartPicturePlacement = ...
    xlSides: XlChartPicturePlacement = ...


class XlChartPictureType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartPictureType, values: xlStack (2), xlStackScale (3), xlStretch (1) """
    value__ = ...
    xlStack: XlChartPictureType = ...
    xlStackScale: XlChartPictureType = ...
    xlStretch: XlChartPictureType = ...


class XlChartSplitType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartSplitType, values: xlSplitByCustomSplit (4), xlSplitByPercentValue (3), xlSplitByPosition (1), xlSplitByValue (2) """
    value__ = ...
    xlSplitByCustomSplit: XlChartSplitType = ...
    xlSplitByPercentValue: XlChartSplitType = ...
    xlSplitByPosition: XlChartSplitType = ...
    xlSplitByValue: XlChartSplitType = ...


class XlChartType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartType, values: xl3DArea (-4098), xl3DAreaStacked (78), xl3DAreaStacked100 (79), xl3DBarClustered (60), xl3DBarStacked (61), xl3DBarStacked100 (62), xl3DColumn (-4100), xl3DColumnClustered (54), xl3DColumnStacked (55), xl3DColumnStacked100 (56), xl3DLine (-4101), xl3DPie (-4102), xl3DPieExploded (70), xlArea (1), xlAreaStacked (76), xlAreaStacked100 (77), xlBarClustered (57), xlBarOfPie (71), xlBarStacked (58), xlBarStacked100 (59), xlBubble (15), xlBubble3DEffect (87), xlColumnClustered (51), xlColumnStacked (52), xlColumnStacked100 (53), xlConeBarClustered (102), xlConeBarStacked (103), xlConeBarStacked100 (104), xlConeCol (105), xlConeColClustered (99), xlConeColStacked (100), xlConeColStacked100 (101), xlCylinderBarClustered (95), xlCylinderBarStacked (96), xlCylinderBarStacked100 (97), xlCylinderCol (98), xlCylinderColClustered (92), xlCylinderColStacked (93), xlCylinderColStacked100 (94), xlDoughnut (-4120), xlDoughnutExploded (80), xlLine (4), xlLineMarkers (65), xlLineMarkersStacked (66), xlLineMarkersStacked100 (67), xlLineStacked (63), xlLineStacked100 (64), xlPie (5), xlPieExploded (69), xlPieOfPie (68), xlPyramidBarClustered (109), xlPyramidBarStacked (110), xlPyramidBarStacked100 (111), xlPyramidCol (112), xlPyramidColClustered (106), xlPyramidColStacked (107), xlPyramidColStacked100 (108), xlRadar (-4151), xlRadarFilled (82), xlRadarMarkers (81), xlStockHLC (88), xlStockOHLC (89), xlStockVHLC (90), xlStockVOHLC (91), xlSurface (83), xlSurfaceTopView (85), xlSurfaceTopViewWireframe (86), xlSurfaceWireframe (84), xlXYScatter (-4169), xlXYScatterLines (74), xlXYScatterLinesNoMarkers (75), xlXYScatterSmooth (72), xlXYScatterSmoothNoMarkers (73) """
    value__ = ...
    xl3DArea: XlChartType = ...
    xl3DAreaStacked: XlChartType = ...
    xl3DAreaStacked100: XlChartType = ...
    xl3DBarClustered: XlChartType = ...
    xl3DBarStacked: XlChartType = ...
    xl3DBarStacked100: XlChartType = ...
    xl3DColumn: XlChartType = ...
    xl3DColumnClustered: XlChartType = ...
    xl3DColumnStacked: XlChartType = ...
    xl3DColumnStacked100: XlChartType = ...
    xl3DLine: XlChartType = ...
    xl3DPie: XlChartType = ...
    xl3DPieExploded: XlChartType = ...
    xlArea: XlChartType = ...
    xlAreaStacked: XlChartType = ...
    xlAreaStacked100: XlChartType = ...
    xlBarClustered: XlChartType = ...
    xlBarOfPie: XlChartType = ...
    xlBarStacked: XlChartType = ...
    xlBarStacked100: XlChartType = ...
    xlBubble: XlChartType = ...
    xlBubble3DEffect: XlChartType = ...
    xlColumnClustered: XlChartType = ...
    xlColumnStacked: XlChartType = ...
    xlColumnStacked100: XlChartType = ...
    xlConeBarClustered: XlChartType = ...
    xlConeBarStacked: XlChartType = ...
    xlConeBarStacked100: XlChartType = ...
    xlConeCol: XlChartType = ...
    xlConeColClustered: XlChartType = ...
    xlConeColStacked: XlChartType = ...
    xlConeColStacked100: XlChartType = ...
    xlCylinderBarClustered: XlChartType = ...
    xlCylinderBarStacked: XlChartType = ...
    xlCylinderBarStacked100: XlChartType = ...
    xlCylinderCol: XlChartType = ...
    xlCylinderColClustered: XlChartType = ...
    xlCylinderColStacked: XlChartType = ...
    xlCylinderColStacked100: XlChartType = ...
    xlDoughnut: XlChartType = ...
    xlDoughnutExploded: XlChartType = ...
    xlLine: XlChartType = ...
    xlLineMarkers: XlChartType = ...
    xlLineMarkersStacked: XlChartType = ...
    xlLineMarkersStacked100: XlChartType = ...
    xlLineStacked: XlChartType = ...
    xlLineStacked100: XlChartType = ...
    xlPie: XlChartType = ...
    xlPieExploded: XlChartType = ...
    xlPieOfPie: XlChartType = ...
    xlPyramidBarClustered: XlChartType = ...
    xlPyramidBarStacked: XlChartType = ...
    xlPyramidBarStacked100: XlChartType = ...
    xlPyramidCol: XlChartType = ...
    xlPyramidColClustered: XlChartType = ...
    xlPyramidColStacked: XlChartType = ...
    xlPyramidColStacked100: XlChartType = ...
    xlRadar: XlChartType = ...
    xlRadarFilled: XlChartType = ...
    xlRadarMarkers: XlChartType = ...
    xlStockHLC: XlChartType = ...
    xlStockOHLC: XlChartType = ...
    xlStockVHLC: XlChartType = ...
    xlStockVOHLC: XlChartType = ...
    xlSurface: XlChartType = ...
    xlSurfaceTopView: XlChartType = ...
    xlSurfaceTopViewWireframe: XlChartType = ...
    xlSurfaceWireframe: XlChartType = ...
    xlXYScatter: XlChartType = ...
    xlXYScatterLines: XlChartType = ...
    xlXYScatterLinesNoMarkers: XlChartType = ...
    xlXYScatterSmooth: XlChartType = ...
    xlXYScatterSmoothNoMarkers: XlChartType = ...


class XlCheckInVersionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCheckInVersionType, values: xlCheckInMajorVersion (1), xlCheckInMinorVersion (0), xlCheckInOverwriteVersion (2) """
    value__ = ...
    xlCheckInMajorVersion: XlCheckInVersionType = ...
    xlCheckInMinorVersion: XlCheckInVersionType = ...
    xlCheckInOverwriteVersion: XlCheckInVersionType = ...


class XlClipboardFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlClipboardFormat, values: xlClipboardFormatBIFF (8), xlClipboardFormatBIFF12 (63), xlClipboardFormatBIFF2 (18), xlClipboardFormatBIFF3 (20), xlClipboardFormatBIFF4 (30), xlClipboardFormatBinary (15), xlClipboardFormatBitmap (9), xlClipboardFormatCGM (13), xlClipboardFormatCSV (5), xlClipboardFormatDIF (4), xlClipboardFormatDspText (12), xlClipboardFormatEmbeddedObject (21), xlClipboardFormatEmbedSource (22), xlClipboardFormatLink (11), xlClipboardFormatLinkSource (23), xlClipboardFormatLinkSourceDesc (32), xlClipboardFormatMovie (24), xlClipboardFormatNative (14), xlClipboardFormatObjectDesc (31), xlClipboardFormatObjectLink (19), xlClipboardFormatOwnerLink (17), xlClipboardFormatPICT (2), xlClipboardFormatPrintPICT (3), xlClipboardFormatRTF (7), xlClipboardFormatScreenPICT (29), xlClipboardFormatStandardFont (28), xlClipboardFormatStandardScale (27), xlClipboardFormatSYLK (6), xlClipboardFormatTable (16), xlClipboardFormatText (0), xlClipboardFormatToolFace (25), xlClipboardFormatToolFacePICT (26), xlClipboardFormatVALU (1), xlClipboardFormatWK1 (10) """
    value__ = ...
    xlClipboardFormatBIFF: XlClipboardFormat = ...
    xlClipboardFormatBIFF12: XlClipboardFormat = ...
    xlClipboardFormatBIFF2: XlClipboardFormat = ...
    xlClipboardFormatBIFF3: XlClipboardFormat = ...
    xlClipboardFormatBIFF4: XlClipboardFormat = ...
    xlClipboardFormatBinary: XlClipboardFormat = ...
    xlClipboardFormatBitmap: XlClipboardFormat = ...
    xlClipboardFormatCGM: XlClipboardFormat = ...
    xlClipboardFormatCSV: XlClipboardFormat = ...
    xlClipboardFormatDIF: XlClipboardFormat = ...
    xlClipboardFormatDspText: XlClipboardFormat = ...
    xlClipboardFormatEmbeddedObject: XlClipboardFormat = ...
    xlClipboardFormatEmbedSource: XlClipboardFormat = ...
    xlClipboardFormatLink: XlClipboardFormat = ...
    xlClipboardFormatLinkSource: XlClipboardFormat = ...
    xlClipboardFormatLinkSourceDesc: XlClipboardFormat = ...
    xlClipboardFormatMovie: XlClipboardFormat = ...
    xlClipboardFormatNative: XlClipboardFormat = ...
    xlClipboardFormatObjectDesc: XlClipboardFormat = ...
    xlClipboardFormatObjectLink: XlClipboardFormat = ...
    xlClipboardFormatOwnerLink: XlClipboardFormat = ...
    xlClipboardFormatPICT: XlClipboardFormat = ...
    xlClipboardFormatPrintPICT: XlClipboardFormat = ...
    xlClipboardFormatRTF: XlClipboardFormat = ...
    xlClipboardFormatScreenPICT: XlClipboardFormat = ...
    xlClipboardFormatStandardFont: XlClipboardFormat = ...
    xlClipboardFormatStandardScale: XlClipboardFormat = ...
    xlClipboardFormatSYLK: XlClipboardFormat = ...
    xlClipboardFormatTable: XlClipboardFormat = ...
    xlClipboardFormatText: XlClipboardFormat = ...
    xlClipboardFormatToolFace: XlClipboardFormat = ...
    xlClipboardFormatToolFacePICT: XlClipboardFormat = ...
    xlClipboardFormatVALU: XlClipboardFormat = ...
    xlClipboardFormatWK1: XlClipboardFormat = ...


class XlCmdType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCmdType, values: xlCmdCube (1), xlCmdDAX (8), xlCmdDefault (4), xlCmdExcel (7), xlCmdList (5), xlCmdSql (2), xlCmdTable (3), xlCmdTableCollection (6) """
    value__ = ...
    xlCmdCube: XlCmdType = ...
    xlCmdDAX: XlCmdType = ...
    xlCmdDefault: XlCmdType = ...
    xlCmdExcel: XlCmdType = ...
    xlCmdList: XlCmdType = ...
    xlCmdSql: XlCmdType = ...
    xlCmdTable: XlCmdType = ...
    xlCmdTableCollection: XlCmdType = ...


class XlColorIndex(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlColorIndex, values: xlColorIndexAutomatic (-4105), xlColorIndexNone (-4142) """
    value__ = ...
    xlColorIndexAutomatic: XlColorIndex = ...
    xlColorIndexNone: XlColorIndex = ...


class XlColumnDataType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlColumnDataType, values: xlDMYFormat (4), xlDYMFormat (7), xlEMDFormat (10), xlGeneralFormat (1), xlMDYFormat (3), xlMYDFormat (6), xlSkipColumn (9), xlTextFormat (2), xlYDMFormat (8), xlYMDFormat (5) """
    value__ = ...
    xlDMYFormat: XlColumnDataType = ...
    xlDYMFormat: XlColumnDataType = ...
    xlEMDFormat: XlColumnDataType = ...
    xlGeneralFormat: XlColumnDataType = ...
    xlMDYFormat: XlColumnDataType = ...
    xlMYDFormat: XlColumnDataType = ...
    xlSkipColumn: XlColumnDataType = ...
    xlTextFormat: XlColumnDataType = ...
    xlYDMFormat: XlColumnDataType = ...
    xlYMDFormat: XlColumnDataType = ...


class XlCommandUnderlines(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCommandUnderlines, values: xlCommandUnderlinesAutomatic (-4105), xlCommandUnderlinesOff (-4146), xlCommandUnderlinesOn (1) """
    value__ = ...
    xlCommandUnderlinesAutomatic: XlCommandUnderlines = ...
    xlCommandUnderlinesOff: XlCommandUnderlines = ...
    xlCommandUnderlinesOn: XlCommandUnderlines = ...


class XlCommentDisplayMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCommentDisplayMode, values: xlCommentAndIndicator (1), xlCommentIndicatorOnly (-1), xlNoIndicator (0) """
    value__ = ...
    xlCommentAndIndicator: XlCommentDisplayMode = ...
    xlCommentIndicatorOnly: XlCommentDisplayMode = ...
    xlNoIndicator: XlCommentDisplayMode = ...


class XlConditionValueTypes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlConditionValueTypes, values: xlConditionValueAutomaticMax (7), xlConditionValueAutomaticMin (6), xlConditionValueFormula (4), xlConditionValueHighestValue (2), xlConditionValueLowestValue (1), xlConditionValueNone (-1), xlConditionValueNumber (0), xlConditionValuePercent (3), xlConditionValuePercentile (5) """
    value__ = ...
    xlConditionValueAutomaticMax: XlConditionValueTypes = ...
    xlConditionValueAutomaticMin: XlConditionValueTypes = ...
    xlConditionValueFormula: XlConditionValueTypes = ...
    xlConditionValueHighestValue: XlConditionValueTypes = ...
    xlConditionValueLowestValue: XlConditionValueTypes = ...
    xlConditionValueNone: XlConditionValueTypes = ...
    xlConditionValueNumber: XlConditionValueTypes = ...
    xlConditionValuePercent: XlConditionValueTypes = ...
    xlConditionValuePercentile: XlConditionValueTypes = ...


class XlConnectionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlConnectionType, values: xlConnectionTypeDATAFEED (6), xlConnectionTypeMODEL (7), xlConnectionTypeNOSOURCE (9), xlConnectionTypeODBC (2), xlConnectionTypeOLEDB (1), xlConnectionTypeTEXT (4), xlConnectionTypeWEB (5), xlConnectionTypeWORKSHEET (8), xlConnectionTypeXMLMAP (3) """
    value__ = ...
    xlConnectionTypeDATAFEED: XlConnectionType = ...
    xlConnectionTypeMODEL: XlConnectionType = ...
    xlConnectionTypeNOSOURCE: XlConnectionType = ...
    xlConnectionTypeODBC: XlConnectionType = ...
    xlConnectionTypeOLEDB: XlConnectionType = ...
    xlConnectionTypeTEXT: XlConnectionType = ...
    xlConnectionTypeWEB: XlConnectionType = ...
    xlConnectionTypeWORKSHEET: XlConnectionType = ...
    xlConnectionTypeXMLMAP: XlConnectionType = ...


class XlConsolidationFunction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlConsolidationFunction, values: xlAverage (-4106), xlCount (-4112), xlCountNums (-4113), xlDistinctCount (11), xlMax (-4136), xlMin (-4139), xlProduct (-4149), xlStDev (-4155), xlStDevP (-4156), xlSum (-4157), xlUnknown (1000), xlVar (-4164), xlVarP (-4165) """
    value__ = ...
    xlAverage: XlConsolidationFunction = ...
    xlCount: XlConsolidationFunction = ...
    xlCountNums: XlConsolidationFunction = ...
    xlDistinctCount: XlConsolidationFunction = ...
    xlMax: XlConsolidationFunction = ...
    xlMin: XlConsolidationFunction = ...
    xlProduct: XlConsolidationFunction = ...
    xlStDev: XlConsolidationFunction = ...
    xlStDevP: XlConsolidationFunction = ...
    xlSum: XlConsolidationFunction = ...
    xlUnknown: XlConsolidationFunction = ...
    xlVar: XlConsolidationFunction = ...
    xlVarP: XlConsolidationFunction = ...


class XlContainsOperator(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlContainsOperator, values: xlBeginsWith (2), xlContains (0), xlDoesNotContain (1), xlEndsWith (3) """
    value__ = ...
    xlBeginsWith: XlContainsOperator = ...
    xlContains: XlContainsOperator = ...
    xlDoesNotContain: XlContainsOperator = ...
    xlEndsWith: XlContainsOperator = ...


class XlCopyPictureFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCopyPictureFormat, values: xlBitmap (2), xlPicture (-4147) """
    value__ = ...
    xlBitmap: XlCopyPictureFormat = ...
    xlPicture: XlCopyPictureFormat = ...


class XlCorruptLoad(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCorruptLoad, values: xlExtractData (2), xlNormalLoad (0), xlRepairFile (1) """
    value__ = ...
    xlExtractData: XlCorruptLoad = ...
    xlNormalLoad: XlCorruptLoad = ...
    xlRepairFile: XlCorruptLoad = ...


class XlCreator(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCreator, values: xlCreatorCode (1480803660) """
    value__ = ...
    xlCreatorCode: XlCreator = ...


class XlCredentialsMethod(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCredentialsMethod, values: xlCredentialsMethodIntegrated (0), xlCredentialsMethodNone (1), xlCredentialsMethodStored (2) """
    value__ = ...
    xlCredentialsMethodIntegrated: XlCredentialsMethod = ...
    xlCredentialsMethodNone: XlCredentialsMethod = ...
    xlCredentialsMethodStored: XlCredentialsMethod = ...


class XlCubeFieldSubType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCubeFieldSubType, values: xlCubeAttribute (4), xlCubeCalculatedMeasure (5), xlCubeHierarchy (1), xlCubeImplicitMeasure (11), xlCubeKPIGoal (7), xlCubeKPIStatus (8), xlCubeKPITrend (9), xlCubeKPIValue (6), xlCubeKPIWeight (10), xlCubeMeasure (2), xlCubeSet (3) """
    value__ = ...
    xlCubeAttribute: XlCubeFieldSubType = ...
    xlCubeCalculatedMeasure: XlCubeFieldSubType = ...
    xlCubeHierarchy: XlCubeFieldSubType = ...
    xlCubeImplicitMeasure: XlCubeFieldSubType = ...
    xlCubeKPIGoal: XlCubeFieldSubType = ...
    xlCubeKPIStatus: XlCubeFieldSubType = ...
    xlCubeKPITrend: XlCubeFieldSubType = ...
    xlCubeKPIValue: XlCubeFieldSubType = ...
    xlCubeKPIWeight: XlCubeFieldSubType = ...
    xlCubeMeasure: XlCubeFieldSubType = ...
    xlCubeSet: XlCubeFieldSubType = ...


class XlCubeFieldType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCubeFieldType, values: xlHierarchy (1), xlMeasure (2), xlSet (3) """
    value__ = ...
    xlHierarchy: XlCubeFieldType = ...
    xlMeasure: XlCubeFieldType = ...
    xlSet: XlCubeFieldType = ...


class XlCutCopyMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCutCopyMode, values: xlCopy (1), xlCut (2) """
    value__ = ...
    xlCopy: XlCutCopyMode = ...
    xlCut: XlCutCopyMode = ...


class XlCVError(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCVError, values: xlErrDiv0 (2007), xlErrNA (2042), xlErrName (2029), xlErrNull (2000), xlErrNum (2036), xlErrRef (2023), xlErrValue (2015) """
    value__ = ...
    xlErrDiv0: XlCVError = ...
    xlErrNA: XlCVError = ...
    xlErrName: XlCVError = ...
    xlErrNull: XlCVError = ...
    xlErrNum: XlCVError = ...
    xlErrRef: XlCVError = ...
    xlErrValue: XlCVError = ...


class XlDataBarAxisPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataBarAxisPosition, values: xlDataBarAxisAutomatic (0), xlDataBarAxisMidpoint (1), xlDataBarAxisNone (2) """
    value__ = ...
    xlDataBarAxisAutomatic: XlDataBarAxisPosition = ...
    xlDataBarAxisMidpoint: XlDataBarAxisPosition = ...
    xlDataBarAxisNone: XlDataBarAxisPosition = ...


class XlDataBarBorderType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataBarBorderType, values: xlDataBarBorderNone (0), xlDataBarBorderSolid (1) """
    value__ = ...
    xlDataBarBorderNone: XlDataBarBorderType = ...
    xlDataBarBorderSolid: XlDataBarBorderType = ...


class XlDataBarFillType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataBarFillType, values: xlDataBarFillGradient (1), xlDataBarFillSolid (0) """
    value__ = ...
    xlDataBarFillGradient: XlDataBarFillType = ...
    xlDataBarFillSolid: XlDataBarFillType = ...


class XlDataBarNegativeColorType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataBarNegativeColorType, values: xlDataBarColor (0), xlDataBarSameAsPositive (1) """
    value__ = ...
    xlDataBarColor: XlDataBarNegativeColorType = ...
    xlDataBarSameAsPositive: XlDataBarNegativeColorType = ...


class XlDataLabelPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataLabelPosition, values: xlLabelPositionAbove (0), xlLabelPositionBelow (1), xlLabelPositionBestFit (5), xlLabelPositionCenter (-4108), xlLabelPositionCustom (7), xlLabelPositionInsideBase (4), xlLabelPositionInsideEnd (3), xlLabelPositionLeft (-4131), xlLabelPositionMixed (6), xlLabelPositionOutsideEnd (2), xlLabelPositionRight (-4152) """
    value__ = ...
    xlLabelPositionAbove: XlDataLabelPosition = ...
    xlLabelPositionBelow: XlDataLabelPosition = ...
    xlLabelPositionBestFit: XlDataLabelPosition = ...
    xlLabelPositionCenter: XlDataLabelPosition = ...
    xlLabelPositionCustom: XlDataLabelPosition = ...
    xlLabelPositionInsideBase: XlDataLabelPosition = ...
    xlLabelPositionInsideEnd: XlDataLabelPosition = ...
    xlLabelPositionLeft: XlDataLabelPosition = ...
    xlLabelPositionMixed: XlDataLabelPosition = ...
    xlLabelPositionOutsideEnd: XlDataLabelPosition = ...
    xlLabelPositionRight: XlDataLabelPosition = ...


class XlDataLabelSeparator(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataLabelSeparator, values: xlDataLabelSeparatorDefault (1) """
    value__ = ...
    xlDataLabelSeparatorDefault: XlDataLabelSeparator = ...


class XlDataLabelsType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataLabelsType, values: xlDataLabelsShowBubbleSizes (6), xlDataLabelsShowLabel (4), xlDataLabelsShowLabelAndPercent (5), xlDataLabelsShowNone (-4142), xlDataLabelsShowPercent (3), xlDataLabelsShowValue (2) """
    value__ = ...
    xlDataLabelsShowBubbleSizes: XlDataLabelsType = ...
    xlDataLabelsShowLabel: XlDataLabelsType = ...
    xlDataLabelsShowLabelAndPercent: XlDataLabelsType = ...
    xlDataLabelsShowNone: XlDataLabelsType = ...
    xlDataLabelsShowPercent: XlDataLabelsType = ...
    xlDataLabelsShowValue: XlDataLabelsType = ...


class XlDataSeriesDate(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataSeriesDate, values: xlDay (1), xlMonth (3), xlWeekday (2), xlYear (4) """
    value__ = ...
    xlDay: XlDataSeriesDate = ...
    xlMonth: XlDataSeriesDate = ...
    xlWeekday: XlDataSeriesDate = ...
    xlYear: XlDataSeriesDate = ...


class XlDataSeriesType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataSeriesType, values: xlAutoFill (4), xlChronological (3), xlDataSeriesLinear (-4132), xlGrowth (2) """
    value__ = ...
    xlAutoFill: XlDataSeriesType = ...
    xlChronological: XlDataSeriesType = ...
    xlDataSeriesLinear: XlDataSeriesType = ...
    xlGrowth: XlDataSeriesType = ...


class XlDeleteShiftDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDeleteShiftDirection, values: xlShiftToLeft (-4159), xlShiftUp (-4162) """
    value__ = ...
    xlShiftToLeft: XlDeleteShiftDirection = ...
    xlShiftUp: XlDeleteShiftDirection = ...


class XlDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDirection, values: xlDown (-4121), xlToLeft (-4159), xlToRight (-4161), xlUp (-4162) """
    value__ = ...
    xlDown: XlDirection = ...
    xlToLeft: XlDirection = ...
    xlToRight: XlDirection = ...
    xlUp: XlDirection = ...


class XlDisplayBlanksAs(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDisplayBlanksAs, values: xlInterpolated (3), xlNotPlotted (1), xlZero (2) """
    value__ = ...
    xlInterpolated: XlDisplayBlanksAs = ...
    xlNotPlotted: XlDisplayBlanksAs = ...
    xlZero: XlDisplayBlanksAs = ...


class XlDisplayDrawingObjects(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDisplayDrawingObjects, values: xlDisplayShapes (-4104), xlHide (3), xlPlaceholders (2) """
    value__ = ...
    xlDisplayShapes: XlDisplayDrawingObjects = ...
    xlHide: XlDisplayDrawingObjects = ...
    xlPlaceholders: XlDisplayDrawingObjects = ...


class XlDisplayUnit(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDisplayUnit, values: xlHundredMillions (-8), xlHundreds (-2), xlHundredThousands (-5), xlMillionMillions (-10), xlMillions (-6), xlTenMillions (-7), xlTenThousands (-4), xlThousandMillions (-9), xlThousands (-3) """
    value__ = ...
    xlHundredMillions: XlDisplayUnit = ...
    xlHundreds: XlDisplayUnit = ...
    xlHundredThousands: XlDisplayUnit = ...
    xlMillionMillions: XlDisplayUnit = ...
    xlMillions: XlDisplayUnit = ...
    xlTenMillions: XlDisplayUnit = ...
    xlTenThousands: XlDisplayUnit = ...
    xlThousandMillions: XlDisplayUnit = ...
    xlThousands: XlDisplayUnit = ...


class XlDupeUnique(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDupeUnique, values: xlDuplicate (1), xlUnique (0) """
    value__ = ...
    xlDuplicate: XlDupeUnique = ...
    xlUnique: XlDupeUnique = ...


class XlDVAlertStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDVAlertStyle, values: xlValidAlertInformation (3), xlValidAlertStop (1), xlValidAlertWarning (2) """
    value__ = ...
    xlValidAlertInformation: XlDVAlertStyle = ...
    xlValidAlertStop: XlDVAlertStyle = ...
    xlValidAlertWarning: XlDVAlertStyle = ...


class XlDVType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDVType, values: xlValidateCustom (7), xlValidateDate (4), xlValidateDecimal (2), xlValidateInputOnly (0), xlValidateList (3), xlValidateTextLength (6), xlValidateTime (5), xlValidateWholeNumber (1) """
    value__ = ...
    xlValidateCustom: XlDVType = ...
    xlValidateDate: XlDVType = ...
    xlValidateDecimal: XlDVType = ...
    xlValidateInputOnly: XlDVType = ...
    xlValidateList: XlDVType = ...
    xlValidateTextLength: XlDVType = ...
    xlValidateTime: XlDVType = ...
    xlValidateWholeNumber: XlDVType = ...


class XlDynamicFilterCriteria(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDynamicFilterCriteria, values: xlFilterAboveAverage (33), xlFilterAllDatesInPeriodApril (24), xlFilterAllDatesInPeriodAugust (28), xlFilterAllDatesInPeriodDecember (32), xlFilterAllDatesInPeriodFebruray (22), xlFilterAllDatesInPeriodJanuary (21), xlFilterAllDatesInPeriodJuly (27), xlFilterAllDatesInPeriodJune (26), xlFilterAllDatesInPeriodMarch (23), xlFilterAllDatesInPeriodMay (25), xlFilterAllDatesInPeriodNovember (31), xlFilterAllDatesInPeriodOctober (30), xlFilterAllDatesInPeriodQuarter1 (17), xlFilterAllDatesInPeriodQuarter2 (18), xlFilterAllDatesInPeriodQuarter3 (19), xlFilterAllDatesInPeriodQuarter4 (20), xlFilterAllDatesInPeriodSeptember (29), xlFilterBelowAverage (34), xlFilterLastMonth (8), xlFilterLastQuarter (11), xlFilterLastWeek (5), xlFilterLastYear (14), xlFilterNextMonth (9), xlFilterNextQuarter (12), xlFilterNextWeek (6), xlFilterNextYear (15), xlFilterThisMonth (7), xlFilterThisQuarter (10), xlFilterThisWeek (4), xlFilterThisYear (13), xlFilterToday (1), xlFilterTomorrow (3), xlFilterYearToDate (16), xlFilterYesterday (2) """
    value__ = ...
    xlFilterAboveAverage: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodApril: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodAugust: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodDecember: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodFebruray: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodJanuary: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodJuly: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodJune: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodMarch: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodMay: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodNovember: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodOctober: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodQuarter1: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodQuarter2: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodQuarter3: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodQuarter4: XlDynamicFilterCriteria = ...
    xlFilterAllDatesInPeriodSeptember: XlDynamicFilterCriteria = ...
    xlFilterBelowAverage: XlDynamicFilterCriteria = ...
    xlFilterLastMonth: XlDynamicFilterCriteria = ...
    xlFilterLastQuarter: XlDynamicFilterCriteria = ...
    xlFilterLastWeek: XlDynamicFilterCriteria = ...
    xlFilterLastYear: XlDynamicFilterCriteria = ...
    xlFilterNextMonth: XlDynamicFilterCriteria = ...
    xlFilterNextQuarter: XlDynamicFilterCriteria = ...
    xlFilterNextWeek: XlDynamicFilterCriteria = ...
    xlFilterNextYear: XlDynamicFilterCriteria = ...
    xlFilterThisMonth: XlDynamicFilterCriteria = ...
    xlFilterThisQuarter: XlDynamicFilterCriteria = ...
    xlFilterThisWeek: XlDynamicFilterCriteria = ...
    xlFilterThisYear: XlDynamicFilterCriteria = ...
    xlFilterToday: XlDynamicFilterCriteria = ...
    xlFilterTomorrow: XlDynamicFilterCriteria = ...
    xlFilterYearToDate: XlDynamicFilterCriteria = ...
    xlFilterYesterday: XlDynamicFilterCriteria = ...


class XlEditionFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlEditionFormat, values: xlBIFF (2), xlPICT (1), xlRTF (4), xlVALU (8) """
    value__ = ...
    xlBIFF: XlEditionFormat = ...
    xlPICT: XlEditionFormat = ...
    xlRTF: XlEditionFormat = ...
    xlVALU: XlEditionFormat = ...


class XlEditionOptionsOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlEditionOptionsOption, values: xlAutomaticUpdate (4), xlCancel (1), xlChangeAttributes (6), xlManualUpdate (5), xlOpenSource (3), xlSelect (3), xlSendPublisher (2), xlUpdateSubscriber (2) """
    value__ = ...
    xlAutomaticUpdate: XlEditionOptionsOption = ...
    xlCancel: XlEditionOptionsOption = ...
    xlChangeAttributes: XlEditionOptionsOption = ...
    xlManualUpdate: XlEditionOptionsOption = ...
    xlOpenSource: XlEditionOptionsOption = ...
    xlSelect: XlEditionOptionsOption = ...
    xlSendPublisher: XlEditionOptionsOption = ...
    xlUpdateSubscriber: XlEditionOptionsOption = ...


class XlEditionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlEditionType, values: xlPublisher (1), xlSubscriber (2) """
    value__ = ...
    xlPublisher: XlEditionType = ...
    xlSubscriber: XlEditionType = ...


class XlEnableCancelKey(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlEnableCancelKey, values: xlDisabled (0), xlErrorHandler (2), xlInterrupt (1) """
    value__ = ...
    xlDisabled: XlEnableCancelKey = ...
    xlErrorHandler: XlEnableCancelKey = ...
    xlInterrupt: XlEnableCancelKey = ...


class XlEnableSelection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlEnableSelection, values: xlNoRestrictions (0), xlNoSelection (-4142), xlUnlockedCells (1) """
    value__ = ...
    xlNoRestrictions: XlEnableSelection = ...
    xlNoSelection: XlEnableSelection = ...
    xlUnlockedCells: XlEnableSelection = ...


class XlEndStyleCap(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlEndStyleCap, values: xlCap (1), xlNoCap (2) """
    value__ = ...
    xlCap: XlEndStyleCap = ...
    xlNoCap: XlEndStyleCap = ...


class XlErrorBarDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlErrorBarDirection, values: xlX (-4168), xlY (1) """
    value__ = ...
    xlX: XlErrorBarDirection = ...
    xlY: XlErrorBarDirection = ...


class XlErrorBarInclude(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlErrorBarInclude, values: xlErrorBarIncludeBoth (1), xlErrorBarIncludeMinusValues (3), xlErrorBarIncludeNone (-4142), xlErrorBarIncludePlusValues (2) """
    value__ = ...
    xlErrorBarIncludeBoth: XlErrorBarInclude = ...
    xlErrorBarIncludeMinusValues: XlErrorBarInclude = ...
    xlErrorBarIncludeNone: XlErrorBarInclude = ...
    xlErrorBarIncludePlusValues: XlErrorBarInclude = ...


class XlErrorBarType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlErrorBarType, values: xlErrorBarTypeCustom (-4114), xlErrorBarTypeFixedValue (1), xlErrorBarTypePercent (2), xlErrorBarTypeStDev (-4155), xlErrorBarTypeStError (4) """
    value__ = ...
    xlErrorBarTypeCustom: XlErrorBarType = ...
    xlErrorBarTypeFixedValue: XlErrorBarType = ...
    xlErrorBarTypePercent: XlErrorBarType = ...
    xlErrorBarTypeStDev: XlErrorBarType = ...
    xlErrorBarTypeStError: XlErrorBarType = ...


class XlErrorChecks(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlErrorChecks, values: xlEmptyCellReferences (7), xlEvaluateToError (1), xlInconsistentFormula (4), xlInconsistentListFormula (9), xlListDataValidation (8), xlNumberAsText (3), xlOmittedCells (5), xlTextDate (2), xlUnlockedFormulaCells (6) """
    value__ = ...
    xlEmptyCellReferences: XlErrorChecks = ...
    xlEvaluateToError: XlErrorChecks = ...
    xlInconsistentFormula: XlErrorChecks = ...
    xlInconsistentListFormula: XlErrorChecks = ...
    xlListDataValidation: XlErrorChecks = ...
    xlNumberAsText: XlErrorChecks = ...
    xlOmittedCells: XlErrorChecks = ...
    xlTextDate: XlErrorChecks = ...
    xlUnlockedFormulaCells: XlErrorChecks = ...


class XlFileAccess(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFileAccess, values: xlReadOnly (3), xlReadWrite (2) """
    value__ = ...
    xlReadOnly: XlFileAccess = ...
    xlReadWrite: XlFileAccess = ...


class XlFileFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFileFormat, values: xlAddIn (18), xlAddIn8 (18), xlCSV (6), xlCSVMac (22), xlCSVMSDOS (24), xlCSVWindows (23), xlCurrentPlatformText (-4158), xlDBF2 (7), xlDBF3 (8), xlDBF4 (11), xlDIF (9), xlExcel12 (50), xlExcel2 (16), xlExcel2FarEast (27), xlExcel3 (29), xlExcel4 (33), xlExcel4Workbook (35), xlExcel5 (39), xlExcel7 (39), xlExcel8 (56), xlExcel9795 (43), xlHtml (44), xlIntlAddIn (26), xlIntlMacro (25), xlOpenDocumentSpreadsheet (60), xlOpenXMLAddIn (55), xlOpenXMLStrictWorkbook (61), xlOpenXMLTemplate (54), xlOpenXMLTemplateMacroEnabled (53), xlOpenXMLWorkbook (51), xlOpenXMLWorkbookMacroEnabled (52), xlSYLK (2), xlTemplate (17), xlTemplate8 (17), xlTextMac (19), xlTextMSDOS (21), xlTextPrinter (36), xlTextWindows (20), xlUnicodeText (42), xlWebArchive (45), xlWJ2WD1 (14), xlWJ3 (40), xlWJ3FJ3 (41), xlWK1 (5), xlWK1ALL (31), xlWK1FMT (30), xlWK3 (15), xlWK3FM3 (32), xlWK4 (38), xlWKS (4), xlWorkbookDefault (51), xlWorkbookNormal (-4143), xlWorks2FarEast (28), xlWQ1 (34), xlXMLSpreadsheet (46) """
    value__ = ...
    xlAddIn: XlFileFormat = ...
    xlAddIn8: XlFileFormat = ...
    xlCSV: XlFileFormat = ...
    xlCSVMac: XlFileFormat = ...
    xlCSVMSDOS: XlFileFormat = ...
    xlCSVWindows: XlFileFormat = ...
    xlCurrentPlatformText: XlFileFormat = ...
    xlDBF2: XlFileFormat = ...
    xlDBF3: XlFileFormat = ...
    xlDBF4: XlFileFormat = ...
    xlDIF: XlFileFormat = ...
    xlExcel12: XlFileFormat = ...
    xlExcel2: XlFileFormat = ...
    xlExcel2FarEast: XlFileFormat = ...
    xlExcel3: XlFileFormat = ...
    xlExcel4: XlFileFormat = ...
    xlExcel4Workbook: XlFileFormat = ...
    xlExcel5: XlFileFormat = ...
    xlExcel7: XlFileFormat = ...
    xlExcel8: XlFileFormat = ...
    xlExcel9795: XlFileFormat = ...
    xlHtml: XlFileFormat = ...
    xlIntlAddIn: XlFileFormat = ...
    xlIntlMacro: XlFileFormat = ...
    xlOpenDocumentSpreadsheet: XlFileFormat = ...
    xlOpenXMLAddIn: XlFileFormat = ...
    xlOpenXMLStrictWorkbook: XlFileFormat = ...
    xlOpenXMLTemplate: XlFileFormat = ...
    xlOpenXMLTemplateMacroEnabled: XlFileFormat = ...
    xlOpenXMLWorkbook: XlFileFormat = ...
    xlOpenXMLWorkbookMacroEnabled: XlFileFormat = ...
    xlSYLK: XlFileFormat = ...
    xlTemplate: XlFileFormat = ...
    xlTemplate8: XlFileFormat = ...
    xlTextMac: XlFileFormat = ...
    xlTextMSDOS: XlFileFormat = ...
    xlTextPrinter: XlFileFormat = ...
    xlTextWindows: XlFileFormat = ...
    xlUnicodeText: XlFileFormat = ...
    xlWebArchive: XlFileFormat = ...
    xlWJ2WD1: XlFileFormat = ...
    xlWJ3: XlFileFormat = ...
    xlWJ3FJ3: XlFileFormat = ...
    xlWK1: XlFileFormat = ...
    xlWK1ALL: XlFileFormat = ...
    xlWK1FMT: XlFileFormat = ...
    xlWK3: XlFileFormat = ...
    xlWK3FM3: XlFileFormat = ...
    xlWK4: XlFileFormat = ...
    xlWKS: XlFileFormat = ...
    xlWorkbookDefault: XlFileFormat = ...
    xlWorkbookNormal: XlFileFormat = ...
    xlWorks2FarEast: XlFileFormat = ...
    xlWQ1: XlFileFormat = ...
    xlXMLSpreadsheet: XlFileFormat = ...


class XlFileValidationPivotMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFileValidationPivotMode, values: xlFileValidationPivotDefault (0), xlFileValidationPivotRun (1), xlFileValidationPivotSkip (2) """
    value__ = ...
    xlFileValidationPivotDefault: XlFileValidationPivotMode = ...
    xlFileValidationPivotRun: XlFileValidationPivotMode = ...
    xlFileValidationPivotSkip: XlFileValidationPivotMode = ...


class XlFillWith(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFillWith, values: xlFillWithAll (-4104), xlFillWithContents (2), xlFillWithFormats (-4122) """
    value__ = ...
    xlFillWithAll: XlFillWith = ...
    xlFillWithContents: XlFillWith = ...
    xlFillWithFormats: XlFillWith = ...


class XlFilterAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFilterAction, values: xlFilterCopy (2), xlFilterInPlace (1) """
    value__ = ...
    xlFilterCopy: XlFilterAction = ...
    xlFilterInPlace: XlFilterAction = ...


class XlFilterAllDatesInPeriod(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFilterAllDatesInPeriod, values: xlFilterAllDatesInPeriodDay (2), xlFilterAllDatesInPeriodHour (3), xlFilterAllDatesInPeriodMinute (4), xlFilterAllDatesInPeriodMonth (1), xlFilterAllDatesInPeriodSecond (5), xlFilterAllDatesInPeriodYear (0) """
    value__ = ...
    xlFilterAllDatesInPeriodDay: XlFilterAllDatesInPeriod = ...
    xlFilterAllDatesInPeriodHour: XlFilterAllDatesInPeriod = ...
    xlFilterAllDatesInPeriodMinute: XlFilterAllDatesInPeriod = ...
    xlFilterAllDatesInPeriodMonth: XlFilterAllDatesInPeriod = ...
    xlFilterAllDatesInPeriodSecond: XlFilterAllDatesInPeriod = ...
    xlFilterAllDatesInPeriodYear: XlFilterAllDatesInPeriod = ...


class XlFilterStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFilterStatus, values: xlFilterStatusDateHasTime (2), xlFilterStatusDateWrongOrder (1), xlFilterStatusInvalidDate (3), xlFilterStatusOK (0) """
    value__ = ...
    xlFilterStatusDateHasTime: XlFilterStatus = ...
    xlFilterStatusDateWrongOrder: XlFilterStatus = ...
    xlFilterStatusInvalidDate: XlFilterStatus = ...
    xlFilterStatusOK: XlFilterStatus = ...


class XlFindLookIn(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFindLookIn, values: xlComments (-4144), xlFormulas (-4123), xlValues (-4163) """
    value__ = ...
    xlComments: XlFindLookIn = ...
    xlFormulas: XlFindLookIn = ...
    xlValues: XlFindLookIn = ...


class XlFixedFormatQuality(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFixedFormatQuality, values: xlQualityMinimum (1), xlQualityStandard (0) """
    value__ = ...
    xlQualityMinimum: XlFixedFormatQuality = ...
    xlQualityStandard: XlFixedFormatQuality = ...


class XlFixedFormatType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFixedFormatType, values: xlTypePDF (0), xlTypeXPS (1) """
    value__ = ...
    xlTypePDF: XlFixedFormatType = ...
    xlTypeXPS: XlFixedFormatType = ...


class XlFormatConditionOperator(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFormatConditionOperator, values: xlBetween (1), xlEqual (3), xlGreater (5), xlGreaterEqual (7), xlLess (6), xlLessEqual (8), xlNotBetween (2), xlNotEqual (4) """
    value__ = ...
    xlBetween: XlFormatConditionOperator = ...
    xlEqual: XlFormatConditionOperator = ...
    xlGreater: XlFormatConditionOperator = ...
    xlGreaterEqual: XlFormatConditionOperator = ...
    xlLess: XlFormatConditionOperator = ...
    xlLessEqual: XlFormatConditionOperator = ...
    xlNotBetween: XlFormatConditionOperator = ...
    xlNotEqual: XlFormatConditionOperator = ...


class XlFormatConditionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFormatConditionType, values: xlAboveAverageCondition (12), xlBlanksCondition (10), xlCellValue (1), xlColorScale (3), xlDatabar (4), xlErrorsCondition (16), xlExpression (2), xlIconSets (6), xlNoBlanksCondition (13), xlNoErrorsCondition (17), xlTextString (9), xlTimePeriod (11), xlTop10 (5), xlUniqueValues (8) """
    value__ = ...
    xlAboveAverageCondition: XlFormatConditionType = ...
    xlBlanksCondition: XlFormatConditionType = ...
    xlCellValue: XlFormatConditionType = ...
    xlColorScale: XlFormatConditionType = ...
    xlDatabar: XlFormatConditionType = ...
    xlErrorsCondition: XlFormatConditionType = ...
    xlExpression: XlFormatConditionType = ...
    xlIconSets: XlFormatConditionType = ...
    xlNoBlanksCondition: XlFormatConditionType = ...
    xlNoErrorsCondition: XlFormatConditionType = ...
    xlTextString: XlFormatConditionType = ...
    xlTimePeriod: XlFormatConditionType = ...
    xlTop10: XlFormatConditionType = ...
    xlUniqueValues: XlFormatConditionType = ...


class XlFormatFilterTypes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFormatFilterTypes, values: xlFilterBottom (0), xlFilterBottomPercent (2), xlFilterTop (1), xlFilterTopPercent (3) """
    value__ = ...
    xlFilterBottom: XlFormatFilterTypes = ...
    xlFilterBottomPercent: XlFormatFilterTypes = ...
    xlFilterTop: XlFormatFilterTypes = ...
    xlFilterTopPercent: XlFormatFilterTypes = ...


class XlFormControl(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFormControl, values: xlButtonControl (0), xlCheckBox (1), xlDropDown (2), xlEditBox (3), xlGroupBox (4), xlLabel (5), xlListBox (6), xlOptionButton (7), xlScrollBar (8), xlSpinner (9) """
    value__ = ...
    xlButtonControl: XlFormControl = ...
    xlCheckBox: XlFormControl = ...
    xlDropDown: XlFormControl = ...
    xlEditBox: XlFormControl = ...
    xlGroupBox: XlFormControl = ...
    xlLabel: XlFormControl = ...
    xlListBox: XlFormControl = ...
    xlOptionButton: XlFormControl = ...
    xlScrollBar: XlFormControl = ...
    xlSpinner: XlFormControl = ...


class XlFormulaLabel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlFormulaLabel, values: xlColumnLabels (2), xlMixedLabels (3), xlNoLabels (-4142), xlRowLabels (1) """
    value__ = ...
    xlColumnLabels: XlFormulaLabel = ...
    xlMixedLabels: XlFormulaLabel = ...
    xlNoLabels: XlFormulaLabel = ...
    xlRowLabels: XlFormulaLabel = ...


class XlGenerateTableRefs(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlGenerateTableRefs, values: xlGenerateTableRefA1 (0), xlGenerateTableRefStruct (1) """
    value__ = ...
    xlGenerateTableRefA1: XlGenerateTableRefs = ...
    xlGenerateTableRefStruct: XlGenerateTableRefs = ...


class XlGradientFillType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlGradientFillType, values: xlGradientFillLinear (0), xlGradientFillPath (1) """
    value__ = ...
    xlGradientFillLinear: XlGradientFillType = ...
    xlGradientFillPath: XlGradientFillType = ...


class XlHAlign(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlHAlign, values: xlHAlignCenter (-4108), xlHAlignCenterAcrossSelection (7), xlHAlignDistributed (-4117), xlHAlignFill (5), xlHAlignGeneral (1), xlHAlignJustify (-4130), xlHAlignLeft (-4131), xlHAlignRight (-4152) """
    value__ = ...
    xlHAlignCenter: XlHAlign = ...
    xlHAlignCenterAcrossSelection: XlHAlign = ...
    xlHAlignDistributed: XlHAlign = ...
    xlHAlignFill: XlHAlign = ...
    xlHAlignGeneral: XlHAlign = ...
    xlHAlignJustify: XlHAlign = ...
    xlHAlignLeft: XlHAlign = ...
    xlHAlignRight: XlHAlign = ...


class XlHebrewModes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlHebrewModes, values: xlHebrewFullScript (0), xlHebrewMixedAuthorizedScript (3), xlHebrewMixedScript (2), xlHebrewPartialScript (1) """
    value__ = ...
    xlHebrewFullScript: XlHebrewModes = ...
    xlHebrewMixedAuthorizedScript: XlHebrewModes = ...
    xlHebrewMixedScript: XlHebrewModes = ...
    xlHebrewPartialScript: XlHebrewModes = ...


class XlHighlightChangesTime(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlHighlightChangesTime, values: xlAllChanges (2), xlNotYetReviewed (3), xlSinceMyLastSave (1) """
    value__ = ...
    xlAllChanges: XlHighlightChangesTime = ...
    xlNotYetReviewed: XlHighlightChangesTime = ...
    xlSinceMyLastSave: XlHighlightChangesTime = ...


class XlHtmlType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlHtmlType, values: xlHtmlCalc (1), xlHtmlChart (3), xlHtmlList (2), xlHtmlStatic (0) """
    value__ = ...
    xlHtmlCalc: XlHtmlType = ...
    xlHtmlChart: XlHtmlType = ...
    xlHtmlList: XlHtmlType = ...
    xlHtmlStatic: XlHtmlType = ...


class XlIcon(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlIcon, values: xlIcon0Bars (37), xlIcon0FilledBoxes (52), xlIcon1Bar (38), xlIcon1FilledBox (51), xlIcon2Bars (39), xlIcon2FilledBoxes (50), xlIcon3Bars (40), xlIcon3FilledBoxes (49), xlIcon4Bars (41), xlIcon4FilledBoxes (48), xlIconBlackCircle (32), xlIconBlackCircleWithBorder (13), xlIconCircleWithOneWhiteQuarter (33), xlIconCircleWithThreeWhiteQuarters (35), xlIconCircleWithTwoWhiteQuarters (34), xlIconGoldStar (42), xlIconGrayCircle (31), xlIconGrayDownArrow (6), xlIconGrayDownInclineArrow (28), xlIconGraySideArrow (5), xlIconGrayUpArrow (4), xlIconGrayUpInclineArrow (27), xlIconGreenCheck (22), xlIconGreenCheckSymbol (19), xlIconGreenCircle (10), xlIconGreenFlag (7), xlIconGreenTrafficLight (14), xlIconGreenUpArrow (1), xlIconGreenUpTriangle (45), xlIconHalfGoldStar (43), xlIconNoCellIcon (-1), xlIconPinkCircle (30), xlIconRedCircle (29), xlIconRedCircleWithBorder (12), xlIconRedCross (24), xlIconRedCrossSymbol (21), xlIconRedDiamond (18), xlIconRedDownArrow (3), xlIconRedDownTriangle (47), xlIconRedFlag (9), xlIconRedTrafficLight (16), xlIconSilverStar (44), xlIconWhiteCircleAllWhiteQuarters (36), xlIconYellowCircle (11), xlIconYellowDash (46), xlIconYellowDownInclineArrow (26), xlIconYellowExclamation (23), xlIconYellowExclamationSymbol (20), xlIconYellowFlag (8), xlIconYellowSideArrow (2), xlIconYellowTrafficLight (15), xlIconYellowTriangle (17), xlIconYellowUpInclineArrow (25) """
    value__ = ...
    xlIcon0Bars: XlIcon = ...
    xlIcon0FilledBoxes: XlIcon = ...
    xlIcon1Bar: XlIcon = ...
    xlIcon1FilledBox: XlIcon = ...
    xlIcon2Bars: XlIcon = ...
    xlIcon2FilledBoxes: XlIcon = ...
    xlIcon3Bars: XlIcon = ...
    xlIcon3FilledBoxes: XlIcon = ...
    xlIcon4Bars: XlIcon = ...
    xlIcon4FilledBoxes: XlIcon = ...
    xlIconBlackCircle: XlIcon = ...
    xlIconBlackCircleWithBorder: XlIcon = ...
    xlIconCircleWithOneWhiteQuarter: XlIcon = ...
    xlIconCircleWithThreeWhiteQuarters: XlIcon = ...
    xlIconCircleWithTwoWhiteQuarters: XlIcon = ...
    xlIconGoldStar: XlIcon = ...
    xlIconGrayCircle: XlIcon = ...
    xlIconGrayDownArrow: XlIcon = ...
    xlIconGrayDownInclineArrow: XlIcon = ...
    xlIconGraySideArrow: XlIcon = ...
    xlIconGrayUpArrow: XlIcon = ...
    xlIconGrayUpInclineArrow: XlIcon = ...
    xlIconGreenCheck: XlIcon = ...
    xlIconGreenCheckSymbol: XlIcon = ...
    xlIconGreenCircle: XlIcon = ...
    xlIconGreenFlag: XlIcon = ...
    xlIconGreenTrafficLight: XlIcon = ...
    xlIconGreenUpArrow: XlIcon = ...
    xlIconGreenUpTriangle: XlIcon = ...
    xlIconHalfGoldStar: XlIcon = ...
    xlIconNoCellIcon: XlIcon = ...
    xlIconPinkCircle: XlIcon = ...
    xlIconRedCircle: XlIcon = ...
    xlIconRedCircleWithBorder: XlIcon = ...
    xlIconRedCross: XlIcon = ...
    xlIconRedCrossSymbol: XlIcon = ...
    xlIconRedDiamond: XlIcon = ...
    xlIconRedDownArrow: XlIcon = ...
    xlIconRedDownTriangle: XlIcon = ...
    xlIconRedFlag: XlIcon = ...
    xlIconRedTrafficLight: XlIcon = ...
    xlIconSilverStar: XlIcon = ...
    xlIconWhiteCircleAllWhiteQuarters: XlIcon = ...
    xlIconYellowCircle: XlIcon = ...
    xlIconYellowDash: XlIcon = ...
    xlIconYellowDownInclineArrow: XlIcon = ...
    xlIconYellowExclamation: XlIcon = ...
    xlIconYellowExclamationSymbol: XlIcon = ...
    xlIconYellowFlag: XlIcon = ...
    xlIconYellowSideArrow: XlIcon = ...
    xlIconYellowTrafficLight: XlIcon = ...
    xlIconYellowTriangle: XlIcon = ...
    xlIconYellowUpInclineArrow: XlIcon = ...


class XlIconSet(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlIconSet, values: xl3Arrows (1), xl3ArrowsGray (2), xl3Flags (3), xl3Signs (6), xl3Stars (18), xl3Symbols (7), xl3Symbols2 (8), xl3TrafficLights1 (4), xl3TrafficLights2 (5), xl3Triangles (19), xl4Arrows (9), xl4ArrowsGray (10), xl4CRV (12), xl4RedToBlack (11), xl4TrafficLights (13), xl5Arrows (14), xl5ArrowsGray (15), xl5Boxes (20), xl5CRV (16), xl5Quarters (17), xlCustomSet (-1) """
    value__ = ...
    xl3Arrows: XlIconSet = ...
    xl3ArrowsGray: XlIconSet = ...
    xl3Flags: XlIconSet = ...
    xl3Signs: XlIconSet = ...
    xl3Stars: XlIconSet = ...
    xl3Symbols: XlIconSet = ...
    xl3Symbols2: XlIconSet = ...
    xl3TrafficLights1: XlIconSet = ...
    xl3TrafficLights2: XlIconSet = ...
    xl3Triangles: XlIconSet = ...
    xl4Arrows: XlIconSet = ...
    xl4ArrowsGray: XlIconSet = ...
    xl4CRV: XlIconSet = ...
    xl4RedToBlack: XlIconSet = ...
    xl4TrafficLights: XlIconSet = ...
    xl5Arrows: XlIconSet = ...
    xl5ArrowsGray: XlIconSet = ...
    xl5Boxes: XlIconSet = ...
    xl5CRV: XlIconSet = ...
    xl5Quarters: XlIconSet = ...
    xlCustomSet: XlIconSet = ...


class XlIMEMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlIMEMode, values: xlIMEModeAlpha (8), xlIMEModeAlphaFull (7), xlIMEModeDisable (3), xlIMEModeHangul (10), xlIMEModeHangulFull (9), xlIMEModeHiragana (4), xlIMEModeKatakana (5), xlIMEModeKatakanaHalf (6), xlIMEModeNoControl (0), xlIMEModeOff (2), xlIMEModeOn (1) """
    value__ = ...
    xlIMEModeAlpha: XlIMEMode = ...
    xlIMEModeAlphaFull: XlIMEMode = ...
    xlIMEModeDisable: XlIMEMode = ...
    xlIMEModeHangul: XlIMEMode = ...
    xlIMEModeHangulFull: XlIMEMode = ...
    xlIMEModeHiragana: XlIMEMode = ...
    xlIMEModeKatakana: XlIMEMode = ...
    xlIMEModeKatakanaHalf: XlIMEMode = ...
    xlIMEModeNoControl: XlIMEMode = ...
    xlIMEModeOff: XlIMEMode = ...
    xlIMEModeOn: XlIMEMode = ...


class XlImportDataAs(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlImportDataAs, values: xlPivotTableReport (1), xlQueryTable (0), xlTable (2) """
    value__ = ...
    xlPivotTableReport: XlImportDataAs = ...
    xlQueryTable: XlImportDataAs = ...
    xlTable: XlImportDataAs = ...


class XlInsertFormatOrigin(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlInsertFormatOrigin, values: xlFormatFromLeftOrAbove (0), xlFormatFromRightOrBelow (1) """
    value__ = ...
    xlFormatFromLeftOrAbove: XlInsertFormatOrigin = ...
    xlFormatFromRightOrBelow: XlInsertFormatOrigin = ...


class XlInsertShiftDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlInsertShiftDirection, values: xlShiftDown (-4121), xlShiftToRight (-4161) """
    value__ = ...
    xlShiftDown: XlInsertShiftDirection = ...
    xlShiftToRight: XlInsertShiftDirection = ...


class XlLayoutFormType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLayoutFormType, values: xlOutline (1), xlTabular (0) """
    value__ = ...
    xlOutline: XlLayoutFormType = ...
    xlTabular: XlLayoutFormType = ...


class XlLayoutRowType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLayoutRowType, values: xlCompactRow (0), xlOutlineRow (2), xlTabularRow (1) """
    value__ = ...
    xlCompactRow: XlLayoutRowType = ...
    xlOutlineRow: XlLayoutRowType = ...
    xlTabularRow: XlLayoutRowType = ...


class XlLegendPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLegendPosition, values: xlLegendPositionBottom (-4107), xlLegendPositionCorner (2), xlLegendPositionCustom (-4161), xlLegendPositionLeft (-4131), xlLegendPositionRight (-4152), xlLegendPositionTop (-4160) """
    value__ = ...
    xlLegendPositionBottom: XlLegendPosition = ...
    xlLegendPositionCorner: XlLegendPosition = ...
    xlLegendPositionCustom: XlLegendPosition = ...
    xlLegendPositionLeft: XlLegendPosition = ...
    xlLegendPositionRight: XlLegendPosition = ...
    xlLegendPositionTop: XlLegendPosition = ...


class XlLineStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLineStyle, values: xlContinuous (1), xlDash (-4115), xlDashDot (4), xlDashDotDot (5), xlDot (-4118), xlDouble (-4119), xlLineStyleNone (-4142), xlSlantDashDot (13) """
    value__ = ...
    xlContinuous: XlLineStyle = ...
    xlDash: XlLineStyle = ...
    xlDashDot: XlLineStyle = ...
    xlDashDotDot: XlLineStyle = ...
    xlDot: XlLineStyle = ...
    xlDouble: XlLineStyle = ...
    xlLineStyleNone: XlLineStyle = ...
    xlSlantDashDot: XlLineStyle = ...


class XlLink(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLink, values: xlExcelLinks (1), xlOLELinks (2), xlPublishers (5), xlSubscribers (6) """
    value__ = ...
    xlExcelLinks: XlLink = ...
    xlOLELinks: XlLink = ...
    xlPublishers: XlLink = ...
    xlSubscribers: XlLink = ...


class XlLinkInfo(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLinkInfo, values: xlEditionDate (2), xlLinkInfoStatus (3), xlUpdateState (1) """
    value__ = ...
    xlEditionDate: XlLinkInfo = ...
    xlLinkInfoStatus: XlLinkInfo = ...
    xlUpdateState: XlLinkInfo = ...


class XlLinkInfoType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLinkInfoType, values: xlLinkInfoOLELinks (2), xlLinkInfoPublishers (5), xlLinkInfoSubscribers (6) """
    value__ = ...
    xlLinkInfoOLELinks: XlLinkInfoType = ...
    xlLinkInfoPublishers: XlLinkInfoType = ...
    xlLinkInfoSubscribers: XlLinkInfoType = ...


class XlLinkStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLinkStatus, values: xlLinkStatusCopiedValues (10), xlLinkStatusIndeterminate (5), xlLinkStatusInvalidName (7), xlLinkStatusMissingFile (1), xlLinkStatusMissingSheet (2), xlLinkStatusNotStarted (6), xlLinkStatusOK (0), xlLinkStatusOld (3), xlLinkStatusSourceNotCalculated (4), xlLinkStatusSourceNotOpen (8), xlLinkStatusSourceOpen (9) """
    value__ = ...
    xlLinkStatusCopiedValues: XlLinkStatus = ...
    xlLinkStatusIndeterminate: XlLinkStatus = ...
    xlLinkStatusInvalidName: XlLinkStatus = ...
    xlLinkStatusMissingFile: XlLinkStatus = ...
    xlLinkStatusMissingSheet: XlLinkStatus = ...
    xlLinkStatusNotStarted: XlLinkStatus = ...
    xlLinkStatusOK: XlLinkStatus = ...
    xlLinkStatusOld: XlLinkStatus = ...
    xlLinkStatusSourceNotCalculated: XlLinkStatus = ...
    xlLinkStatusSourceNotOpen: XlLinkStatus = ...
    xlLinkStatusSourceOpen: XlLinkStatus = ...


class XlLinkType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLinkType, values: xlLinkTypeExcelLinks (1), xlLinkTypeOLELinks (2) """
    value__ = ...
    xlLinkTypeExcelLinks: XlLinkType = ...
    xlLinkTypeOLELinks: XlLinkType = ...


class XlListConflict(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlListConflict, values: xlListConflictDialog (0), xlListConflictDiscardAllConflicts (2), xlListConflictError (3), xlListConflictRetryAllConflicts (1) """
    value__ = ...
    xlListConflictDialog: XlListConflict = ...
    xlListConflictDiscardAllConflicts: XlListConflict = ...
    xlListConflictError: XlListConflict = ...
    xlListConflictRetryAllConflicts: XlListConflict = ...


class XlListDataType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlListDataType, values: xlListDataTypeCheckbox (9), xlListDataTypeChoice (6), xlListDataTypeChoiceMulti (7), xlListDataTypeCounter (11), xlListDataTypeCurrency (4), xlListDataTypeDateTime (5), xlListDataTypeHyperLink (10), xlListDataTypeListLookup (8), xlListDataTypeMultiLineRichText (12), xlListDataTypeMultiLineText (2), xlListDataTypeNone (0), xlListDataTypeNumber (3), xlListDataTypeText (1) """
    value__ = ...
    xlListDataTypeCheckbox: XlListDataType = ...
    xlListDataTypeChoice: XlListDataType = ...
    xlListDataTypeChoiceMulti: XlListDataType = ...
    xlListDataTypeCounter: XlListDataType = ...
    xlListDataTypeCurrency: XlListDataType = ...
    xlListDataTypeDateTime: XlListDataType = ...
    xlListDataTypeHyperLink: XlListDataType = ...
    xlListDataTypeListLookup: XlListDataType = ...
    xlListDataTypeMultiLineRichText: XlListDataType = ...
    xlListDataTypeMultiLineText: XlListDataType = ...
    xlListDataTypeNone: XlListDataType = ...
    xlListDataTypeNumber: XlListDataType = ...
    xlListDataTypeText: XlListDataType = ...


class XlListObjectSourceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlListObjectSourceType, values: xlSrcExternal (0), xlSrcModel (4), xlSrcQuery (3), xlSrcRange (1), xlSrcXml (2) """
    value__ = ...
    xlSrcExternal: XlListObjectSourceType = ...
    xlSrcModel: XlListObjectSourceType = ...
    xlSrcQuery: XlListObjectSourceType = ...
    xlSrcRange: XlListObjectSourceType = ...
    xlSrcXml: XlListObjectSourceType = ...


class XlLocationInTable(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLocationInTable, values: xlColumnHeader (-4110), xlColumnItem (5), xlDataHeader (3), xlDataItem (7), xlPageHeader (2), xlPageItem (6), xlRowHeader (-4153), xlRowItem (4), xlTableBody (8) """
    value__ = ...
    xlColumnHeader: XlLocationInTable = ...
    xlColumnItem: XlLocationInTable = ...
    xlDataHeader: XlLocationInTable = ...
    xlDataItem: XlLocationInTable = ...
    xlPageHeader: XlLocationInTable = ...
    xlPageItem: XlLocationInTable = ...
    xlRowHeader: XlLocationInTable = ...
    xlRowItem: XlLocationInTable = ...
    xlTableBody: XlLocationInTable = ...


class XlLookAt(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLookAt, values: xlPart (2), xlWhole (1) """
    value__ = ...
    xlPart: XlLookAt = ...
    xlWhole: XlLookAt = ...


class XlLookFor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLookFor, values: xlLookForBlanks (0), xlLookForErrors (1), xlLookForFormulas (2) """
    value__ = ...
    xlLookForBlanks: XlLookFor = ...
    xlLookForErrors: XlLookFor = ...
    xlLookForFormulas: XlLookFor = ...


class XlMailSystem(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlMailSystem, values: xlMAPI (1), xlNoMailSystem (0), xlPowerTalk (2) """
    value__ = ...
    xlMAPI: XlMailSystem = ...
    xlNoMailSystem: XlMailSystem = ...
    xlPowerTalk: XlMailSystem = ...


class XlMarkerStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlMarkerStyle, values: xlMarkerStyleAutomatic (-4105), xlMarkerStyleCircle (8), xlMarkerStyleDash (-4115), xlMarkerStyleDiamond (2), xlMarkerStyleDot (-4118), xlMarkerStyleNone (-4142), xlMarkerStylePicture (-4147), xlMarkerStylePlus (9), xlMarkerStyleSquare (1), xlMarkerStyleStar (5), xlMarkerStyleTriangle (3), xlMarkerStyleX (-4168) """
    value__ = ...
    xlMarkerStyleAutomatic: XlMarkerStyle = ...
    xlMarkerStyleCircle: XlMarkerStyle = ...
    xlMarkerStyleDash: XlMarkerStyle = ...
    xlMarkerStyleDiamond: XlMarkerStyle = ...
    xlMarkerStyleDot: XlMarkerStyle = ...
    xlMarkerStyleNone: XlMarkerStyle = ...
    xlMarkerStylePicture: XlMarkerStyle = ...
    xlMarkerStylePlus: XlMarkerStyle = ...
    xlMarkerStyleSquare: XlMarkerStyle = ...
    xlMarkerStyleStar: XlMarkerStyle = ...
    xlMarkerStyleTriangle: XlMarkerStyle = ...
    xlMarkerStyleX: XlMarkerStyle = ...


class XlMeasurementUnits(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlMeasurementUnits, values: xlCentimeters (1), xlInches (0), xlMillimeters (2) """
    value__ = ...
    xlCentimeters: XlMeasurementUnits = ...
    xlInches: XlMeasurementUnits = ...
    xlMillimeters: XlMeasurementUnits = ...


class XlModelChangeSource(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlModelChangeSource, values: xlChangeByExcel (0), xlChangeByPowerPivotAddIn (1) """
    value__ = ...
    xlChangeByExcel: XlModelChangeSource = ...
    xlChangeByPowerPivotAddIn: XlModelChangeSource = ...


class XlMouseButton(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlMouseButton, values: xlNoButton (0), xlPrimaryButton (1), xlSecondaryButton (2) """
    value__ = ...
    xlNoButton: XlMouseButton = ...
    xlPrimaryButton: XlMouseButton = ...
    xlSecondaryButton: XlMouseButton = ...


class XlMousePointer(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlMousePointer, values: xlDefault (-4143), xlIBeam (3), xlNorthwestArrow (1), xlWait (2) """
    value__ = ...
    xlDefault: XlMousePointer = ...
    xlIBeam: XlMousePointer = ...
    xlNorthwestArrow: XlMousePointer = ...
    xlWait: XlMousePointer = ...


class XlMSApplication(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlMSApplication, values: xlMicrosoftAccess (4), xlMicrosoftFoxPro (5), xlMicrosoftMail (3), xlMicrosoftPowerPoint (2), xlMicrosoftProject (6), xlMicrosoftSchedulePlus (7), xlMicrosoftWord (1) """
    value__ = ...
    xlMicrosoftAccess: XlMSApplication = ...
    xlMicrosoftFoxPro: XlMSApplication = ...
    xlMicrosoftMail: XlMSApplication = ...
    xlMicrosoftPowerPoint: XlMSApplication = ...
    xlMicrosoftProject: XlMSApplication = ...
    xlMicrosoftSchedulePlus: XlMSApplication = ...
    xlMicrosoftWord: XlMSApplication = ...


class XlOartHorizontalOverflow(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlOartHorizontalOverflow, values: xlOartHorizontalOverflowClip (1), xlOartHorizontalOverflowOverflow (0) """
    value__ = ...
    xlOartHorizontalOverflowClip: XlOartHorizontalOverflow = ...
    xlOartHorizontalOverflowOverflow: XlOartHorizontalOverflow = ...


class XlOartVerticalOverflow(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlOartVerticalOverflow, values: xlOartVerticalOverflowClip (1), xlOartVerticalOverflowEllipsis (2), xlOartVerticalOverflowOverflow (0) """
    value__ = ...
    xlOartVerticalOverflowClip: XlOartVerticalOverflow = ...
    xlOartVerticalOverflowEllipsis: XlOartVerticalOverflow = ...
    xlOartVerticalOverflowOverflow: XlOartVerticalOverflow = ...


class XlObjectSize(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlObjectSize, values: xlFitToPage (2), xlFullPage (3), xlScreenSize (1) """
    value__ = ...
    xlFitToPage: XlObjectSize = ...
    xlFullPage: XlObjectSize = ...
    xlScreenSize: XlObjectSize = ...


class XlOLEType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlOLEType, values: xlOLEControl (2), xlOLEEmbed (1), xlOLELink (0) """
    value__ = ...
    xlOLEControl: XlOLEType = ...
    xlOLEEmbed: XlOLEType = ...
    xlOLELink: XlOLEType = ...


class XlOLEVerb(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlOLEVerb, values: xlVerbOpen (2), xlVerbPrimary (1) """
    value__ = ...
    xlVerbOpen: XlOLEVerb = ...
    xlVerbPrimary: XlOLEVerb = ...


class XlOrder(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlOrder, values: xlDownThenOver (1), xlOverThenDown (2) """
    value__ = ...
    xlDownThenOver: XlOrder = ...
    xlOverThenDown: XlOrder = ...


class XlOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlOrientation, values: xlDownward (-4170), xlHorizontal (-4128), xlUpward (-4171), xlVertical (-4166) """
    value__ = ...
    xlDownward: XlOrientation = ...
    xlHorizontal: XlOrientation = ...
    xlUpward: XlOrientation = ...
    xlVertical: XlOrientation = ...


class XlPageBreak(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPageBreak, values: xlPageBreakAutomatic (-4105), xlPageBreakManual (-4135), xlPageBreakNone (-4142) """
    value__ = ...
    xlPageBreakAutomatic: XlPageBreak = ...
    xlPageBreakManual: XlPageBreak = ...
    xlPageBreakNone: XlPageBreak = ...


class XlPageBreakExtent(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPageBreakExtent, values: xlPageBreakFull (1), xlPageBreakPartial (2) """
    value__ = ...
    xlPageBreakFull: XlPageBreakExtent = ...
    xlPageBreakPartial: XlPageBreakExtent = ...


class XlPageOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPageOrientation, values: xlLandscape (2), xlPortrait (1) """
    value__ = ...
    xlLandscape: XlPageOrientation = ...
    xlPortrait: XlPageOrientation = ...


class XlPaperSize(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPaperSize, values: xlPaper10x14 (16), xlPaper11x17 (17), xlPaperA3 (8), xlPaperA4 (9), xlPaperA4Small (10), xlPaperA5 (11), xlPaperB4 (12), xlPaperB5 (13), xlPaperCsheet (24), xlPaperDsheet (25), xlPaperEnvelope10 (20), xlPaperEnvelope11 (21), xlPaperEnvelope12 (22), xlPaperEnvelope14 (23), xlPaperEnvelope9 (19), xlPaperEnvelopeB4 (33), xlPaperEnvelopeB5 (34), xlPaperEnvelopeB6 (35), xlPaperEnvelopeC3 (29), xlPaperEnvelopeC4 (30), xlPaperEnvelopeC5 (28), xlPaperEnvelopeC6 (31), xlPaperEnvelopeC65 (32), xlPaperEnvelopeDL (27), xlPaperEnvelopeItaly (36), xlPaperEnvelopeMonarch (37), xlPaperEnvelopePersonal (38), xlPaperEsheet (26), xlPaperExecutive (7), xlPaperFanfoldLegalGerman (41), xlPaperFanfoldStdGerman (40), xlPaperFanfoldUS (39), xlPaperFolio (14), xlPaperLedger (4), xlPaperLegal (5), xlPaperLetter (1), xlPaperLetterSmall (2), xlPaperNote (18), xlPaperQuarto (15), xlPaperStatement (6), xlPaperTabloid (3), xlPaperUser (256) """
    value__ = ...
    xlPaper10x14: XlPaperSize = ...
    xlPaper11x17: XlPaperSize = ...
    xlPaperA3: XlPaperSize = ...
    xlPaperA4: XlPaperSize = ...
    xlPaperA4Small: XlPaperSize = ...
    xlPaperA5: XlPaperSize = ...
    xlPaperB4: XlPaperSize = ...
    xlPaperB5: XlPaperSize = ...
    xlPaperCsheet: XlPaperSize = ...
    xlPaperDsheet: XlPaperSize = ...
    xlPaperEnvelope10: XlPaperSize = ...
    xlPaperEnvelope11: XlPaperSize = ...
    xlPaperEnvelope12: XlPaperSize = ...
    xlPaperEnvelope14: XlPaperSize = ...
    xlPaperEnvelope9: XlPaperSize = ...
    xlPaperEnvelopeB4: XlPaperSize = ...
    xlPaperEnvelopeB5: XlPaperSize = ...
    xlPaperEnvelopeB6: XlPaperSize = ...
    xlPaperEnvelopeC3: XlPaperSize = ...
    xlPaperEnvelopeC4: XlPaperSize = ...
    xlPaperEnvelopeC5: XlPaperSize = ...
    xlPaperEnvelopeC6: XlPaperSize = ...
    xlPaperEnvelopeC65: XlPaperSize = ...
    xlPaperEnvelopeDL: XlPaperSize = ...
    xlPaperEnvelopeItaly: XlPaperSize = ...
    xlPaperEnvelopeMonarch: XlPaperSize = ...
    xlPaperEnvelopePersonal: XlPaperSize = ...
    xlPaperEsheet: XlPaperSize = ...
    xlPaperExecutive: XlPaperSize = ...
    xlPaperFanfoldLegalGerman: XlPaperSize = ...
    xlPaperFanfoldStdGerman: XlPaperSize = ...
    xlPaperFanfoldUS: XlPaperSize = ...
    xlPaperFolio: XlPaperSize = ...
    xlPaperLedger: XlPaperSize = ...
    xlPaperLegal: XlPaperSize = ...
    xlPaperLetter: XlPaperSize = ...
    xlPaperLetterSmall: XlPaperSize = ...
    xlPaperNote: XlPaperSize = ...
    xlPaperQuarto: XlPaperSize = ...
    xlPaperStatement: XlPaperSize = ...
    xlPaperTabloid: XlPaperSize = ...
    xlPaperUser: XlPaperSize = ...


class XlParameterDataType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlParameterDataType, values: xlParamTypeBigInt (-5), xlParamTypeBinary (-2), xlParamTypeBit (-7), xlParamTypeChar (1), xlParamTypeDate (9), xlParamTypeDecimal (3), xlParamTypeDouble (8), xlParamTypeFloat (6), xlParamTypeInteger (4), xlParamTypeLongVarBinary (-4), xlParamTypeLongVarChar (-1), xlParamTypeNumeric (2), xlParamTypeReal (7), xlParamTypeSmallInt (5), xlParamTypeTime (10), xlParamTypeTimestamp (11), xlParamTypeTinyInt (-6), xlParamTypeUnknown (0), xlParamTypeVarBinary (-3), xlParamTypeVarChar (12), xlParamTypeWChar (-8) """
    value__ = ...
    xlParamTypeBigInt: XlParameterDataType = ...
    xlParamTypeBinary: XlParameterDataType = ...
    xlParamTypeBit: XlParameterDataType = ...
    xlParamTypeChar: XlParameterDataType = ...
    xlParamTypeDate: XlParameterDataType = ...
    xlParamTypeDecimal: XlParameterDataType = ...
    xlParamTypeDouble: XlParameterDataType = ...
    xlParamTypeFloat: XlParameterDataType = ...
    xlParamTypeInteger: XlParameterDataType = ...
    xlParamTypeLongVarBinary: XlParameterDataType = ...
    xlParamTypeLongVarChar: XlParameterDataType = ...
    xlParamTypeNumeric: XlParameterDataType = ...
    xlParamTypeReal: XlParameterDataType = ...
    xlParamTypeSmallInt: XlParameterDataType = ...
    xlParamTypeTime: XlParameterDataType = ...
    xlParamTypeTimestamp: XlParameterDataType = ...
    xlParamTypeTinyInt: XlParameterDataType = ...
    xlParamTypeUnknown: XlParameterDataType = ...
    xlParamTypeVarBinary: XlParameterDataType = ...
    xlParamTypeVarChar: XlParameterDataType = ...
    xlParamTypeWChar: XlParameterDataType = ...


class XlParameterType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlParameterType, values: xlConstant (1), xlPrompt (0), xlRange (2) """
    value__ = ...
    xlConstant: XlParameterType = ...
    xlPrompt: XlParameterType = ...
    xlRange: XlParameterType = ...


class XlPasteSpecialOperation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPasteSpecialOperation, values: xlPasteSpecialOperationAdd (2), xlPasteSpecialOperationDivide (5), xlPasteSpecialOperationMultiply (4), xlPasteSpecialOperationNone (-4142), xlPasteSpecialOperationSubtract (3) """
    value__ = ...
    xlPasteSpecialOperationAdd: XlPasteSpecialOperation = ...
    xlPasteSpecialOperationDivide: XlPasteSpecialOperation = ...
    xlPasteSpecialOperationMultiply: XlPasteSpecialOperation = ...
    xlPasteSpecialOperationNone: XlPasteSpecialOperation = ...
    xlPasteSpecialOperationSubtract: XlPasteSpecialOperation = ...


class XlPasteType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPasteType, values: xlPasteAll (-4104), xlPasteAllExceptBorders (7), xlPasteAllMergingConditionalFormats (14), xlPasteAllUsingSourceTheme (13), xlPasteColumnWidths (8), xlPasteComments (-4144), xlPasteFormats (-4122), xlPasteFormulas (-4123), xlPasteFormulasAndNumberFormats (11), xlPasteValidation (6), xlPasteValues (-4163), xlPasteValuesAndNumberFormats (12) """
    value__ = ...
    xlPasteAll: XlPasteType = ...
    xlPasteAllExceptBorders: XlPasteType = ...
    xlPasteAllMergingConditionalFormats: XlPasteType = ...
    xlPasteAllUsingSourceTheme: XlPasteType = ...
    xlPasteColumnWidths: XlPasteType = ...
    xlPasteComments: XlPasteType = ...
    xlPasteFormats: XlPasteType = ...
    xlPasteFormulas: XlPasteType = ...
    xlPasteFormulasAndNumberFormats: XlPasteType = ...
    xlPasteValidation: XlPasteType = ...
    xlPasteValues: XlPasteType = ...
    xlPasteValuesAndNumberFormats: XlPasteType = ...


class XlPattern(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPattern, values: xlPatternAutomatic (-4105), xlPatternChecker (9), xlPatternCrissCross (16), xlPatternDown (-4121), xlPatternGray16 (17), xlPatternGray25 (-4124), xlPatternGray50 (-4125), xlPatternGray75 (-4126), xlPatternGray8 (18), xlPatternGrid (15), xlPatternHorizontal (-4128), xlPatternLightDown (13), xlPatternLightHorizontal (11), xlPatternLightUp (14), xlPatternLightVertical (12), xlPatternLinearGradient (4000), xlPatternNone (-4142), xlPatternRectangularGradient (4001), xlPatternSemiGray75 (10), xlPatternSolid (1), xlPatternUp (-4162), xlPatternVertical (-4166) """
    value__ = ...
    xlPatternAutomatic: XlPattern = ...
    xlPatternChecker: XlPattern = ...
    xlPatternCrissCross: XlPattern = ...
    xlPatternDown: XlPattern = ...
    xlPatternGray16: XlPattern = ...
    xlPatternGray25: XlPattern = ...
    xlPatternGray50: XlPattern = ...
    xlPatternGray75: XlPattern = ...
    xlPatternGray8: XlPattern = ...
    xlPatternGrid: XlPattern = ...
    xlPatternHorizontal: XlPattern = ...
    xlPatternLightDown: XlPattern = ...
    xlPatternLightHorizontal: XlPattern = ...
    xlPatternLightUp: XlPattern = ...
    xlPatternLightVertical: XlPattern = ...
    xlPatternLinearGradient: XlPattern = ...
    xlPatternNone: XlPattern = ...
    xlPatternRectangularGradient: XlPattern = ...
    xlPatternSemiGray75: XlPattern = ...
    xlPatternSolid: XlPattern = ...
    xlPatternUp: XlPattern = ...
    xlPatternVertical: XlPattern = ...


class XlPhoneticAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPhoneticAlignment, values: xlPhoneticAlignCenter (2), xlPhoneticAlignDistributed (3), xlPhoneticAlignLeft (1), xlPhoneticAlignNoControl (0) """
    value__ = ...
    xlPhoneticAlignCenter: XlPhoneticAlignment = ...
    xlPhoneticAlignDistributed: XlPhoneticAlignment = ...
    xlPhoneticAlignLeft: XlPhoneticAlignment = ...
    xlPhoneticAlignNoControl: XlPhoneticAlignment = ...


class XlPhoneticCharacterType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPhoneticCharacterType, values: xlHiragana (2), xlKatakana (1), xlKatakanaHalf (0), xlNoConversion (3) """
    value__ = ...
    xlHiragana: XlPhoneticCharacterType = ...
    xlKatakana: XlPhoneticCharacterType = ...
    xlKatakanaHalf: XlPhoneticCharacterType = ...
    xlNoConversion: XlPhoneticCharacterType = ...


class XlPictureAppearance(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPictureAppearance, values: xlPrinter (2), xlScreen (1) """
    value__ = ...
    xlPrinter: XlPictureAppearance = ...
    xlScreen: XlPictureAppearance = ...


class XlPictureConvertorType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPictureConvertorType, values: xlBMP (1), xlCGM (7), xlDRW (4), xlDXF (5), xlEPS (8), xlHGL (6), xlPCT (13), xlPCX (10), xlPIC (11), xlPLT (12), xlTIF (9), xlWMF (2), xlWPG (3) """
    value__ = ...
    xlBMP: XlPictureConvertorType = ...
    xlCGM: XlPictureConvertorType = ...
    xlDRW: XlPictureConvertorType = ...
    xlDXF: XlPictureConvertorType = ...
    xlEPS: XlPictureConvertorType = ...
    xlHGL: XlPictureConvertorType = ...
    xlPCT: XlPictureConvertorType = ...
    xlPCX: XlPictureConvertorType = ...
    xlPIC: XlPictureConvertorType = ...
    xlPLT: XlPictureConvertorType = ...
    xlTIF: XlPictureConvertorType = ...
    xlWMF: XlPictureConvertorType = ...
    xlWPG: XlPictureConvertorType = ...


class XlPieSliceIndex(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPieSliceIndex, values: xlCenterPoint (5), xlInnerCenterPoint (8), xlInnerClockwisePoint (7), xlInnerCounterClockwisePoint (9), xlMidClockwiseRadiusPoint (4), xlMidCounterClockwiseRadiusPoint (6), xlOuterCenterPoint (2), xlOuterClockwisePoint (3), xlOuterCounterClockwisePoint (1) """
    value__ = ...
    xlCenterPoint: XlPieSliceIndex = ...
    xlInnerCenterPoint: XlPieSliceIndex = ...
    xlInnerClockwisePoint: XlPieSliceIndex = ...
    xlInnerCounterClockwisePoint: XlPieSliceIndex = ...
    xlMidClockwiseRadiusPoint: XlPieSliceIndex = ...
    xlMidCounterClockwiseRadiusPoint: XlPieSliceIndex = ...
    xlOuterCenterPoint: XlPieSliceIndex = ...
    xlOuterClockwisePoint: XlPieSliceIndex = ...
    xlOuterCounterClockwisePoint: XlPieSliceIndex = ...


class XlPieSliceLocation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPieSliceLocation, values: xlHorizontalCoordinate (1), xlVerticalCoordinate (2) """
    value__ = ...
    xlHorizontalCoordinate: XlPieSliceLocation = ...
    xlVerticalCoordinate: XlPieSliceLocation = ...


class XlPivotCellType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotCellType, values: xlPivotCellBlankCell (9), xlPivotCellCustomSubtotal (7), xlPivotCellDataField (4), xlPivotCellDataPivotField (8), xlPivotCellGrandTotal (3), xlPivotCellPageFieldItem (6), xlPivotCellPivotField (5), xlPivotCellPivotItem (1), xlPivotCellSubtotal (2), xlPivotCellValue (0) """
    value__ = ...
    xlPivotCellBlankCell: XlPivotCellType = ...
    xlPivotCellCustomSubtotal: XlPivotCellType = ...
    xlPivotCellDataField: XlPivotCellType = ...
    xlPivotCellDataPivotField: XlPivotCellType = ...
    xlPivotCellGrandTotal: XlPivotCellType = ...
    xlPivotCellPageFieldItem: XlPivotCellType = ...
    xlPivotCellPivotField: XlPivotCellType = ...
    xlPivotCellPivotItem: XlPivotCellType = ...
    xlPivotCellSubtotal: XlPivotCellType = ...
    xlPivotCellValue: XlPivotCellType = ...


class XlPivotConditionScope(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotConditionScope, values: xlDataFieldScope (2), xlFieldsScope (1), xlSelectionScope (0) """
    value__ = ...
    xlDataFieldScope: XlPivotConditionScope = ...
    xlFieldsScope: XlPivotConditionScope = ...
    xlSelectionScope: XlPivotConditionScope = ...


class XlPivotFieldCalculation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotFieldCalculation, values: xlDifferenceFrom (2), xlIndex (9), xlNoAdditionalCalculation (-4143), xlPercentDifferenceFrom (4), xlPercentOf (3), xlPercentOfColumn (7), xlPercentOfParent (12), xlPercentOfParentColumn (11), xlPercentOfParentRow (10), xlPercentOfRow (6), xlPercentOfTotal (8), xlPercentRunningTotal (13), xlRankAscending (14), xlRankDecending (15), xlRunningTotal (5) """
    value__ = ...
    xlDifferenceFrom: XlPivotFieldCalculation = ...
    xlIndex: XlPivotFieldCalculation = ...
    xlNoAdditionalCalculation: XlPivotFieldCalculation = ...
    xlPercentDifferenceFrom: XlPivotFieldCalculation = ...
    xlPercentOf: XlPivotFieldCalculation = ...
    xlPercentOfColumn: XlPivotFieldCalculation = ...
    xlPercentOfParent: XlPivotFieldCalculation = ...
    xlPercentOfParentColumn: XlPivotFieldCalculation = ...
    xlPercentOfParentRow: XlPivotFieldCalculation = ...
    xlPercentOfRow: XlPivotFieldCalculation = ...
    xlPercentOfTotal: XlPivotFieldCalculation = ...
    xlPercentRunningTotal: XlPivotFieldCalculation = ...
    xlRankAscending: XlPivotFieldCalculation = ...
    xlRankDecending: XlPivotFieldCalculation = ...
    xlRunningTotal: XlPivotFieldCalculation = ...


class XlPivotFieldDataType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotFieldDataType, values: xlDate (2), xlNumber (-4145), xlText (-4158) """
    value__ = ...
    xlDate: XlPivotFieldDataType = ...
    xlNumber: XlPivotFieldDataType = ...
    xlText: XlPivotFieldDataType = ...


class XlPivotFieldOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotFieldOrientation, values: xlColumnField (2), xlDataField (4), xlHidden (0), xlPageField (3), xlRowField (1) """
    value__ = ...
    xlColumnField: XlPivotFieldOrientation = ...
    xlDataField: XlPivotFieldOrientation = ...
    xlHidden: XlPivotFieldOrientation = ...
    xlPageField: XlPivotFieldOrientation = ...
    xlRowField: XlPivotFieldOrientation = ...


class XlPivotFieldRepeatLabels(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotFieldRepeatLabels, values: xlDoNotRepeatLabels (1), xlRepeatLabels (2) """
    value__ = ...
    xlDoNotRepeatLabels: XlPivotFieldRepeatLabels = ...
    xlRepeatLabels: XlPivotFieldRepeatLabels = ...


class XlPivotFilterType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotFilterType, values: xlAfter (33), xlAfterOrEqualTo (34), xlAllDatesInPeriodApril (60), xlAllDatesInPeriodAugust (64), xlAllDatesInPeriodDecember (68), xlAllDatesInPeriodFebruary (58), xlAllDatesInPeriodJanuary (57), xlAllDatesInPeriodJuly (63), xlAllDatesInPeriodJune (62), xlAllDatesInPeriodMarch (59), xlAllDatesInPeriodMay (61), xlAllDatesInPeriodNovember (67), xlAllDatesInPeriodOctober (66), xlAllDatesInPeriodQuarter1 (53), xlAllDatesInPeriodQuarter2 (54), xlAllDatesInPeriodQuarter3 (55), xlAllDatesInPeriodQuarter4 (56), xlAllDatesInPeriodSeptember (65), xlBefore (31), xlBeforeOrEqualTo (32), xlBottomCount (2), xlBottomPercent (4), xlBottomSum (6), xlCaptionBeginsWith (17), xlCaptionContains (21), xlCaptionDoesNotBeginWith (18), xlCaptionDoesNotContain (22), xlCaptionDoesNotEndWith (20), xlCaptionDoesNotEqual (16), xlCaptionEndsWith (19), xlCaptionEquals (15), xlCaptionIsBetween (27), xlCaptionIsGreaterThan (23), xlCaptionIsGreaterThanOrEqualTo (24), xlCaptionIsLessThan (25), xlCaptionIsLessThanOrEqualTo (26), xlCaptionIsNotBetween (28), xlDateBetween (35), xlDateLastMonth (45), xlDateLastQuarter (48), xlDateLastWeek (42), xlDateLastYear (51), xlDateNextMonth (43), xlDateNextQuarter (46), xlDateNextWeek (40), xlDateNextYear (49), xlDateNotBetween (36), xlDateThisMonth (44), xlDateThisQuarter (47), xlDateThisWeek (41), xlDateThisYear (50), xlDateToday (38), xlDateTomorrow (37), xlDateYesterday (39), xlNotSpecificDate (30), xlSpecificDate (29), xlTopCount (1), xlTopPercent (3), xlTopSum (5), xlValueDoesNotEqual (8), xlValueEquals (7), xlValueIsBetween (13), xlValueIsGreaterThan (9), xlValueIsGreaterThanOrEqualTo (10), xlValueIsLessThan (11), xlValueIsLessThanOrEqualTo (12), xlValueIsNotBetween (14), xlYearToDate (52) """
    value__ = ...
    xlAfter: XlPivotFilterType = ...
    xlAfterOrEqualTo: XlPivotFilterType = ...
    xlAllDatesInPeriodApril: XlPivotFilterType = ...
    xlAllDatesInPeriodAugust: XlPivotFilterType = ...
    xlAllDatesInPeriodDecember: XlPivotFilterType = ...
    xlAllDatesInPeriodFebruary: XlPivotFilterType = ...
    xlAllDatesInPeriodJanuary: XlPivotFilterType = ...
    xlAllDatesInPeriodJuly: XlPivotFilterType = ...
    xlAllDatesInPeriodJune: XlPivotFilterType = ...
    xlAllDatesInPeriodMarch: XlPivotFilterType = ...
    xlAllDatesInPeriodMay: XlPivotFilterType = ...
    xlAllDatesInPeriodNovember: XlPivotFilterType = ...
    xlAllDatesInPeriodOctober: XlPivotFilterType = ...
    xlAllDatesInPeriodQuarter1: XlPivotFilterType = ...
    xlAllDatesInPeriodQuarter2: XlPivotFilterType = ...
    xlAllDatesInPeriodQuarter3: XlPivotFilterType = ...
    xlAllDatesInPeriodQuarter4: XlPivotFilterType = ...
    xlAllDatesInPeriodSeptember: XlPivotFilterType = ...
    xlBefore: XlPivotFilterType = ...
    xlBeforeOrEqualTo: XlPivotFilterType = ...
    xlBottomCount: XlPivotFilterType = ...
    xlBottomPercent: XlPivotFilterType = ...
    xlBottomSum: XlPivotFilterType = ...
    xlCaptionBeginsWith: XlPivotFilterType = ...
    xlCaptionContains: XlPivotFilterType = ...
    xlCaptionDoesNotBeginWith: XlPivotFilterType = ...
    xlCaptionDoesNotContain: XlPivotFilterType = ...
    xlCaptionDoesNotEndWith: XlPivotFilterType = ...
    xlCaptionDoesNotEqual: XlPivotFilterType = ...
    xlCaptionEndsWith: XlPivotFilterType = ...
    xlCaptionEquals: XlPivotFilterType = ...
    xlCaptionIsBetween: XlPivotFilterType = ...
    xlCaptionIsGreaterThan: XlPivotFilterType = ...
    xlCaptionIsGreaterThanOrEqualTo: XlPivotFilterType = ...
    xlCaptionIsLessThan: XlPivotFilterType = ...
    xlCaptionIsLessThanOrEqualTo: XlPivotFilterType = ...
    xlCaptionIsNotBetween: XlPivotFilterType = ...
    xlDateBetween: XlPivotFilterType = ...
    xlDateLastMonth: XlPivotFilterType = ...
    xlDateLastQuarter: XlPivotFilterType = ...
    xlDateLastWeek: XlPivotFilterType = ...
    xlDateLastYear: XlPivotFilterType = ...
    xlDateNextMonth: XlPivotFilterType = ...
    xlDateNextQuarter: XlPivotFilterType = ...
    xlDateNextWeek: XlPivotFilterType = ...
    xlDateNextYear: XlPivotFilterType = ...
    xlDateNotBetween: XlPivotFilterType = ...
    xlDateThisMonth: XlPivotFilterType = ...
    xlDateThisQuarter: XlPivotFilterType = ...
    xlDateThisWeek: XlPivotFilterType = ...
    xlDateThisYear: XlPivotFilterType = ...
    xlDateToday: XlPivotFilterType = ...
    xlDateTomorrow: XlPivotFilterType = ...
    xlDateYesterday: XlPivotFilterType = ...
    xlNotSpecificDate: XlPivotFilterType = ...
    xlSpecificDate: XlPivotFilterType = ...
    xlTopCount: XlPivotFilterType = ...
    xlTopPercent: XlPivotFilterType = ...
    xlTopSum: XlPivotFilterType = ...
    xlValueDoesNotEqual: XlPivotFilterType = ...
    xlValueEquals: XlPivotFilterType = ...
    xlValueIsBetween: XlPivotFilterType = ...
    xlValueIsGreaterThan: XlPivotFilterType = ...
    xlValueIsGreaterThanOrEqualTo: XlPivotFilterType = ...
    xlValueIsLessThan: XlPivotFilterType = ...
    xlValueIsLessThanOrEqualTo: XlPivotFilterType = ...
    xlValueIsNotBetween: XlPivotFilterType = ...
    xlYearToDate: XlPivotFilterType = ...


class XlPivotFormatType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotFormatType, values: xlPTClassic (20), xlPTNone (21), xlReport1 (0), xlReport10 (9), xlReport2 (1), xlReport3 (2), xlReport4 (3), xlReport5 (4), xlReport6 (5), xlReport7 (6), xlReport8 (7), xlReport9 (8), xlTable1 (10), xlTable10 (19), xlTable2 (11), xlTable3 (12), xlTable4 (13), xlTable5 (14), xlTable6 (15), xlTable7 (16), xlTable8 (17), xlTable9 (18) """
    value__ = ...
    xlPTClassic: XlPivotFormatType = ...
    xlPTNone: XlPivotFormatType = ...
    xlReport1: XlPivotFormatType = ...
    xlReport10: XlPivotFormatType = ...
    xlReport2: XlPivotFormatType = ...
    xlReport3: XlPivotFormatType = ...
    xlReport4: XlPivotFormatType = ...
    xlReport5: XlPivotFormatType = ...
    xlReport6: XlPivotFormatType = ...
    xlReport7: XlPivotFormatType = ...
    xlReport8: XlPivotFormatType = ...
    xlReport9: XlPivotFormatType = ...
    xlTable1: XlPivotFormatType = ...
    xlTable10: XlPivotFormatType = ...
    xlTable2: XlPivotFormatType = ...
    xlTable3: XlPivotFormatType = ...
    xlTable4: XlPivotFormatType = ...
    xlTable5: XlPivotFormatType = ...
    xlTable6: XlPivotFormatType = ...
    xlTable7: XlPivotFormatType = ...
    xlTable8: XlPivotFormatType = ...
    xlTable9: XlPivotFormatType = ...


class XlPivotLineType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotLineType, values: xlPivotLineBlank (3), xlPivotLineGrandTotal (2), xlPivotLineRegular (0), xlPivotLineSubtotal (1) """
    value__ = ...
    xlPivotLineBlank: XlPivotLineType = ...
    xlPivotLineGrandTotal: XlPivotLineType = ...
    xlPivotLineRegular: XlPivotLineType = ...
    xlPivotLineSubtotal: XlPivotLineType = ...


class XlPivotTableMissingItems(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotTableMissingItems, values: xlMissingItemsDefault (-1), xlMissingItemsMax (32500), xlMissingItemsMax2 (1048576), xlMissingItemsNone (0) """
    value__ = ...
    xlMissingItemsDefault: XlPivotTableMissingItems = ...
    xlMissingItemsMax: XlPivotTableMissingItems = ...
    xlMissingItemsMax2: XlPivotTableMissingItems = ...
    xlMissingItemsNone: XlPivotTableMissingItems = ...


class XlPivotTableSourceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotTableSourceType, values: xlConsolidation (3), xlDatabase (1), xlExternal (2), xlPivotTable (-4148), xlScenario (4) """
    value__ = ...
    xlConsolidation: XlPivotTableSourceType = ...
    xlDatabase: XlPivotTableSourceType = ...
    xlExternal: XlPivotTableSourceType = ...
    xlPivotTable: XlPivotTableSourceType = ...
    xlScenario: XlPivotTableSourceType = ...


class XlPivotTableVersionList(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotTableVersionList, values: xlPivotTableVersion10 (1), xlPivotTableVersion11 (2), xlPivotTableVersion12 (3), xlPivotTableVersion14 (4), xlPivotTableVersion15 (5), xlPivotTableVersion2000 (0), xlPivotTableVersionCurrent (-1) """
    value__ = ...
    xlPivotTableVersion10: XlPivotTableVersionList = ...
    xlPivotTableVersion11: XlPivotTableVersionList = ...
    xlPivotTableVersion12: XlPivotTableVersionList = ...
    xlPivotTableVersion14: XlPivotTableVersionList = ...
    xlPivotTableVersion15: XlPivotTableVersionList = ...
    xlPivotTableVersion2000: XlPivotTableVersionList = ...
    xlPivotTableVersionCurrent: XlPivotTableVersionList = ...


class XlPlacement(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPlacement, values: xlFreeFloating (3), xlMove (2), xlMoveAndSize (1) """
    value__ = ...
    xlFreeFloating: XlPlacement = ...
    xlMove: XlPlacement = ...
    xlMoveAndSize: XlPlacement = ...


class XlPlatform(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPlatform, values: xlMacintosh (1), xlMSDOS (3), xlWindows (2) """
    value__ = ...
    xlMacintosh: XlPlatform = ...
    xlMSDOS: XlPlatform = ...
    xlWindows: XlPlatform = ...


class XlPortugueseReform(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPortugueseReform, values: xlPortugueseBoth (3), xlPortuguesePostReform (2), xlPortuguesePreReform (1) """
    value__ = ...
    xlPortugueseBoth: XlPortugueseReform = ...
    xlPortuguesePostReform: XlPortugueseReform = ...
    xlPortuguesePreReform: XlPortugueseReform = ...


class XlPrintErrors(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPrintErrors, values: xlPrintErrorsBlank (1), xlPrintErrorsDash (2), xlPrintErrorsDisplayed (0), xlPrintErrorsNA (3) """
    value__ = ...
    xlPrintErrorsBlank: XlPrintErrors = ...
    xlPrintErrorsDash: XlPrintErrors = ...
    xlPrintErrorsDisplayed: XlPrintErrors = ...
    xlPrintErrorsNA: XlPrintErrors = ...


class XlPrintLocation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPrintLocation, values: xlPrintInPlace (16), xlPrintNoComments (-4142), xlPrintSheetEnd (1) """
    value__ = ...
    xlPrintInPlace: XlPrintLocation = ...
    xlPrintNoComments: XlPrintLocation = ...
    xlPrintSheetEnd: XlPrintLocation = ...


class XlPriority(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPriority, values: xlPriorityHigh (-4127), xlPriorityLow (-4134), xlPriorityNormal (-4143) """
    value__ = ...
    xlPriorityHigh: XlPriority = ...
    xlPriorityLow: XlPriority = ...
    xlPriorityNormal: XlPriority = ...


class XlPropertyDisplayedIn(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPropertyDisplayedIn, values: xlDisplayPropertyInPivotTable (1), xlDisplayPropertyInPivotTableAndTooltip (3), xlDisplayPropertyInTooltip (2) """
    value__ = ...
    xlDisplayPropertyInPivotTable: XlPropertyDisplayedIn = ...
    xlDisplayPropertyInPivotTableAndTooltip: XlPropertyDisplayedIn = ...
    xlDisplayPropertyInTooltip: XlPropertyDisplayedIn = ...


class XlProtectedViewCloseReason(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlProtectedViewCloseReason, values: xlProtectedViewCloseEdit (1), xlProtectedViewCloseForced (2), xlProtectedViewCloseNormal (0) """
    value__ = ...
    xlProtectedViewCloseEdit: XlProtectedViewCloseReason = ...
    xlProtectedViewCloseForced: XlProtectedViewCloseReason = ...
    xlProtectedViewCloseNormal: XlProtectedViewCloseReason = ...


class XlProtectedViewWindowState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlProtectedViewWindowState, values: xlProtectedViewWindowMaximized (2), xlProtectedViewWindowMinimized (1), xlProtectedViewWindowNormal (0) """
    value__ = ...
    xlProtectedViewWindowMaximized: XlProtectedViewWindowState = ...
    xlProtectedViewWindowMinimized: XlProtectedViewWindowState = ...
    xlProtectedViewWindowNormal: XlProtectedViewWindowState = ...


class XlPTSelectionMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPTSelectionMode, values: xlBlanks (4), xlButton (15), xlDataAndLabel (0), xlDataOnly (2), xlFirstRow (256), xlLabelOnly (1), xlOrigin (3) """
    value__ = ...
    xlBlanks: XlPTSelectionMode = ...
    xlButton: XlPTSelectionMode = ...
    xlDataAndLabel: XlPTSelectionMode = ...
    xlDataOnly: XlPTSelectionMode = ...
    xlFirstRow: XlPTSelectionMode = ...
    xlLabelOnly: XlPTSelectionMode = ...
    xlOrigin: XlPTSelectionMode = ...


class XlQueryType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlQueryType, values: xlADORecordset (7), xlDAORecordset (2), xlODBCQuery (1), xlOLEDBQuery (5), xlTextImport (6), xlWebQuery (4) """
    value__ = ...
    xlADORecordset: XlQueryType = ...
    xlDAORecordset: XlQueryType = ...
    xlODBCQuery: XlQueryType = ...
    xlOLEDBQuery: XlQueryType = ...
    xlTextImport: XlQueryType = ...
    xlWebQuery: XlQueryType = ...


class XlQuickAnalysisMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlQuickAnalysisMode, values: xlFormatConditions (1), xlLensOnly (0), xlRecommendedCharts (2), xlSparklines (5), xlTables (4), xlTotals (3) """
    value__ = ...
    xlFormatConditions: XlQuickAnalysisMode = ...
    xlLensOnly: XlQuickAnalysisMode = ...
    xlRecommendedCharts: XlQuickAnalysisMode = ...
    xlSparklines: XlQuickAnalysisMode = ...
    xlTables: XlQuickAnalysisMode = ...
    xlTotals: XlQuickAnalysisMode = ...


class XlRangeAutoFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlRangeAutoFormat, values: xlRangeAutoFormat3DEffects1 (13), xlRangeAutoFormat3DEffects2 (14), xlRangeAutoFormatAccounting1 (4), xlRangeAutoFormatAccounting2 (5), xlRangeAutoFormatAccounting3 (6), xlRangeAutoFormatAccounting4 (17), xlRangeAutoFormatClassic1 (1), xlRangeAutoFormatClassic2 (2), xlRangeAutoFormatClassic3 (3), xlRangeAutoFormatClassicPivotTable (31), xlRangeAutoFormatColor1 (7), xlRangeAutoFormatColor2 (8), xlRangeAutoFormatColor3 (9), xlRangeAutoFormatList1 (10), xlRangeAutoFormatList2 (11), xlRangeAutoFormatList3 (12), xlRangeAutoFormatLocalFormat1 (15), xlRangeAutoFormatLocalFormat2 (16), xlRangeAutoFormatLocalFormat3 (19), xlRangeAutoFormatLocalFormat4 (20), xlRangeAutoFormatNone (-4142), xlRangeAutoFormatPTNone (42), xlRangeAutoFormatReport1 (21), xlRangeAutoFormatReport10 (30), xlRangeAutoFormatReport2 (22), xlRangeAutoFormatReport3 (23), xlRangeAutoFormatReport4 (24), xlRangeAutoFormatReport5 (25), xlRangeAutoFormatReport6 (26), xlRangeAutoFormatReport7 (27), xlRangeAutoFormatReport8 (28), xlRangeAutoFormatReport9 (29), xlRangeAutoFormatSimple (-4154), xlRangeAutoFormatTable1 (32), xlRangeAutoFormatTable10 (41), xlRangeAutoFormatTable2 (33), xlRangeAutoFormatTable3 (34), xlRangeAutoFormatTable4 (35), xlRangeAutoFormatTable5 (36), xlRangeAutoFormatTable6 (37), xlRangeAutoFormatTable7 (38), xlRangeAutoFormatTable8 (39), xlRangeAutoFormatTable9 (40) """
    value__ = ...
    xlRangeAutoFormat3DEffects1: XlRangeAutoFormat = ...
    xlRangeAutoFormat3DEffects2: XlRangeAutoFormat = ...
    xlRangeAutoFormatAccounting1: XlRangeAutoFormat = ...
    xlRangeAutoFormatAccounting2: XlRangeAutoFormat = ...
    xlRangeAutoFormatAccounting3: XlRangeAutoFormat = ...
    xlRangeAutoFormatAccounting4: XlRangeAutoFormat = ...
    xlRangeAutoFormatClassic1: XlRangeAutoFormat = ...
    xlRangeAutoFormatClassic2: XlRangeAutoFormat = ...
    xlRangeAutoFormatClassic3: XlRangeAutoFormat = ...
    xlRangeAutoFormatClassicPivotTable: XlRangeAutoFormat = ...
    xlRangeAutoFormatColor1: XlRangeAutoFormat = ...
    xlRangeAutoFormatColor2: XlRangeAutoFormat = ...
    xlRangeAutoFormatColor3: XlRangeAutoFormat = ...
    xlRangeAutoFormatList1: XlRangeAutoFormat = ...
    xlRangeAutoFormatList2: XlRangeAutoFormat = ...
    xlRangeAutoFormatList3: XlRangeAutoFormat = ...
    xlRangeAutoFormatLocalFormat1: XlRangeAutoFormat = ...
    xlRangeAutoFormatLocalFormat2: XlRangeAutoFormat = ...
    xlRangeAutoFormatLocalFormat3: XlRangeAutoFormat = ...
    xlRangeAutoFormatLocalFormat4: XlRangeAutoFormat = ...
    xlRangeAutoFormatNone: XlRangeAutoFormat = ...
    xlRangeAutoFormatPTNone: XlRangeAutoFormat = ...
    xlRangeAutoFormatReport1: XlRangeAutoFormat = ...
    xlRangeAutoFormatReport10: XlRangeAutoFormat = ...
    xlRangeAutoFormatReport2: XlRangeAutoFormat = ...
    xlRangeAutoFormatReport3: XlRangeAutoFormat = ...
    xlRangeAutoFormatReport4: XlRangeAutoFormat = ...
    xlRangeAutoFormatReport5: XlRangeAutoFormat = ...
    xlRangeAutoFormatReport6: XlRangeAutoFormat = ...
    xlRangeAutoFormatReport7: XlRangeAutoFormat = ...
    xlRangeAutoFormatReport8: XlRangeAutoFormat = ...
    xlRangeAutoFormatReport9: XlRangeAutoFormat = ...
    xlRangeAutoFormatSimple: XlRangeAutoFormat = ...
    xlRangeAutoFormatTable1: XlRangeAutoFormat = ...
    xlRangeAutoFormatTable10: XlRangeAutoFormat = ...
    xlRangeAutoFormatTable2: XlRangeAutoFormat = ...
    xlRangeAutoFormatTable3: XlRangeAutoFormat = ...
    xlRangeAutoFormatTable4: XlRangeAutoFormat = ...
    xlRangeAutoFormatTable5: XlRangeAutoFormat = ...
    xlRangeAutoFormatTable6: XlRangeAutoFormat = ...
    xlRangeAutoFormatTable7: XlRangeAutoFormat = ...
    xlRangeAutoFormatTable8: XlRangeAutoFormat = ...
    xlRangeAutoFormatTable9: XlRangeAutoFormat = ...


class XlRangeValueDataType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlRangeValueDataType, values: xlRangeValueDefault (10), xlRangeValueMSPersistXML (12), xlRangeValueXMLSpreadsheet (11) """
    value__ = ...
    xlRangeValueDefault: XlRangeValueDataType = ...
    xlRangeValueMSPersistXML: XlRangeValueDataType = ...
    xlRangeValueXMLSpreadsheet: XlRangeValueDataType = ...


class XlReferenceStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlReferenceStyle, values: xlA1 (1), xlR1C1 (-4150) """
    value__ = ...
    xlA1: XlReferenceStyle = ...
    xlR1C1: XlReferenceStyle = ...


class XlReferenceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlReferenceType, values: xlAbsolute (1), xlAbsRowRelColumn (2), xlRelative (4), xlRelRowAbsColumn (3) """
    value__ = ...
    xlAbsolute: XlReferenceType = ...
    xlAbsRowRelColumn: XlReferenceType = ...
    xlRelative: XlReferenceType = ...
    xlRelRowAbsColumn: XlReferenceType = ...


class XlRemoveDocInfoType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlRemoveDocInfoType, values: xlRDIAll (99), xlRDIComments (1), xlRDIContentType (16), xlRDIDefinedNameComments (18), xlRDIDocumentManagementPolicy (15), xlRDIDocumentProperties (8), xlRDIDocumentServerProperties (14), xlRDIDocumentWorkspace (10), xlRDIEmailHeader (5), xlRDIExcelDataModel (23), xlRDIInactiveDataConnections (19), xlRDIInkAnnotations (11), xlRDIInlineWebExtensions (21), xlRDIPrinterPath (20), xlRDIPublishInfo (13), xlRDIRemovePersonalInformation (4), xlRDIRoutingSlip (6), xlRDIScenarioComments (12), xlRDISendForReview (7), xlRDITaskpaneWebExtensions (22) """
    value__ = ...
    xlRDIAll: XlRemoveDocInfoType = ...
    xlRDIComments: XlRemoveDocInfoType = ...
    xlRDIContentType: XlRemoveDocInfoType = ...
    xlRDIDefinedNameComments: XlRemoveDocInfoType = ...
    xlRDIDocumentManagementPolicy: XlRemoveDocInfoType = ...
    xlRDIDocumentProperties: XlRemoveDocInfoType = ...
    xlRDIDocumentServerProperties: XlRemoveDocInfoType = ...
    xlRDIDocumentWorkspace: XlRemoveDocInfoType = ...
    xlRDIEmailHeader: XlRemoveDocInfoType = ...
    xlRDIExcelDataModel: XlRemoveDocInfoType = ...
    xlRDIInactiveDataConnections: XlRemoveDocInfoType = ...
    xlRDIInkAnnotations: XlRemoveDocInfoType = ...
    xlRDIInlineWebExtensions: XlRemoveDocInfoType = ...
    xlRDIPrinterPath: XlRemoveDocInfoType = ...
    xlRDIPublishInfo: XlRemoveDocInfoType = ...
    xlRDIRemovePersonalInformation: XlRemoveDocInfoType = ...
    xlRDIRoutingSlip: XlRemoveDocInfoType = ...
    xlRDIScenarioComments: XlRemoveDocInfoType = ...
    xlRDISendForReview: XlRemoveDocInfoType = ...
    xlRDITaskpaneWebExtensions: XlRemoveDocInfoType = ...


class XlRgbColor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlRgbColor, values: rgbAliceBlue (16775408), rgbAntiqueWhite (14150650), rgbAqua (16776960), rgbAquamarine (13959039), rgbAzure (16777200), rgbBeige (14480885), rgbBisque (12903679), rgbBlack (0), rgbBlanchedAlmond (13495295), rgbBlue (16711680), rgbBlueViolet (14822282), rgbBrown (2763429), rgbBurlyWood (8894686), rgbCadetBlue (10526303), rgbChartreuse (65407), rgbCoral (5275647), rgbCornflowerBlue (15570276), rgbCornsilk (14481663), rgbCrimson (3937500), rgbDarkBlue (9109504), rgbDarkCyan (9145088), rgbDarkGoldenrod (755384), rgbDarkGray (11119017), rgbDarkGreen (25600), rgbDarkGrey (11119017), rgbDarkKhaki (7059389), rgbDarkMagenta (9109643), rgbDarkOliveGreen (3107669), rgbDarkOrange (36095), rgbDarkOrchid (13382297), rgbDarkRed (139), rgbDarkSalmon (8034025), rgbDarkSeaGreen (9419919), rgbDarkSlateBlue (9125192), rgbDarkSlateGray (5197615), rgbDarkSlateGrey (5197615), rgbDarkTurquoise (13749760), rgbDarkViolet (13828244), rgbDeepPink (9639167), rgbDeepSkyBlue (16760576), rgbDimGray (6908265), rgbDimGrey (6908265), rgbDodgerBlue (16748574), rgbFireBrick (2237106), rgbFloralWhite (15792895), rgbForestGreen (2263842), rgbFuchsia (16711935), rgbGainsboro (14474460), rgbGhostWhite (16775416), rgbGold (55295), rgbGoldenrod (2139610), rgbGray (8421504), rgbGreen (32768), rgbGreenYellow (3145645), rgbGrey (8421504), rgbHoneydew (15794160), rgbHotPink (11823615), rgbIndianRed (6053069), rgbIndigo (8519755), rgbIvory (15794175), rgbKhaki (9234160), rgbLavender (16443110), rgbLavenderBlush (16118015), rgbLawnGreen (64636), rgbLemonChiffon (13499135), rgbLightBlue (15128749), rgbLightCoral (8421616), rgbLightCyan (9145088), rgbLightGoldenrodYellow (13826810), rgbLightGray (13882323), rgbLightGreen (9498256), rgbLightGrey (13882323), rgbLightPink (12695295), rgbLightSalmon (8036607), rgbLightSeaGreen (11186720), rgbLightSkyBlue (16436871), rgbLightSlateGray (10061943), rgbLightSlateGrey (10061943), rgbLightSteelBlue (14599344), rgbLightYellow (14745599), rgbLime (65280), rgbLimeGreen (3329330), rgbLinen (15134970), rgbMaroon (128), rgbMediumAquamarine (11206502), rgbMediumBlue (13434880), rgbMediumOrchid (13850042), rgbMediumPurple (14381203), rgbMediumSeaGreen (7451452), rgbMediumSlateBlue (15624315), rgbMediumSpringGreen (10156544), rgbMediumTurquoise (13422920), rgbMediumVioletRed (8721863), rgbMidnightBlue (7346457), rgbMintCream (16449525), rgbMistyRose (14804223), rgbMoccasin (11920639), rgbNavajoWhite (11394815), rgbNavy (8388608), rgbNavyBlue (8388608), rgbOldLace (15136253), rgbOlive (32896), rgbOliveDrab (2330219), rgbOrange (42495), rgbOrangeRed (17919), rgbOrchid (14053594), rgbPaleGoldenrod (7071982), rgbPaleGreen (10025880), rgbPaleTurquoise (15658671), rgbPaleVioletRed (9662683), rgbPapayaWhip (14020607), rgbPeachPuff (12180223), rgbPeru (4163021), rgbPink (13353215), rgbPlum (14524637), rgbPowderBlue (15130800), rgbPurple (8388736), rgbRed (255), rgbRosyBrown (9408444), rgbRoyalBlue (14772545), rgbSalmon (7504122), rgbSandyBrown (6333684), rgbSeaGreen (5737262), rgbSeashell (15660543), rgbSienna (2970272), rgbSilver (12632256), rgbSkyBlue (15453831), rgbSlateBlue (13458026), rgbSlateGray (9470064), rgbSlateGrey (9470064), rgbSnow (16448255), rgbSpringGreen (8388352), rgbSteelBlue (11829830), rgbTan (9221330), rgbTeal (8421376), rgbThistle (14204888), rgbTomato (4678655), rgbTurquoise (13688896), rgbViolet (15631086), rgbWheat (11788021), rgbWhite (16777215), rgbWhiteSmoke (16119285), rgbYellow (65535), rgbYellowGreen (3329434) """
    rgbAliceBlue: XlRgbColor = ...
    rgbAntiqueWhite: XlRgbColor = ...
    rgbAqua: XlRgbColor = ...
    rgbAquamarine: XlRgbColor = ...
    rgbAzure: XlRgbColor = ...
    rgbBeige: XlRgbColor = ...
    rgbBisque: XlRgbColor = ...
    rgbBlack: XlRgbColor = ...
    rgbBlanchedAlmond: XlRgbColor = ...
    rgbBlue: XlRgbColor = ...
    rgbBlueViolet: XlRgbColor = ...
    rgbBrown: XlRgbColor = ...
    rgbBurlyWood: XlRgbColor = ...
    rgbCadetBlue: XlRgbColor = ...
    rgbChartreuse: XlRgbColor = ...
    rgbCoral: XlRgbColor = ...
    rgbCornflowerBlue: XlRgbColor = ...
    rgbCornsilk: XlRgbColor = ...
    rgbCrimson: XlRgbColor = ...
    rgbDarkBlue: XlRgbColor = ...
    rgbDarkCyan: XlRgbColor = ...
    rgbDarkGoldenrod: XlRgbColor = ...
    rgbDarkGray: XlRgbColor = ...
    rgbDarkGreen: XlRgbColor = ...
    rgbDarkGrey: XlRgbColor = ...
    rgbDarkKhaki: XlRgbColor = ...
    rgbDarkMagenta: XlRgbColor = ...
    rgbDarkOliveGreen: XlRgbColor = ...
    rgbDarkOrange: XlRgbColor = ...
    rgbDarkOrchid: XlRgbColor = ...
    rgbDarkRed: XlRgbColor = ...
    rgbDarkSalmon: XlRgbColor = ...
    rgbDarkSeaGreen: XlRgbColor = ...
    rgbDarkSlateBlue: XlRgbColor = ...
    rgbDarkSlateGray: XlRgbColor = ...
    rgbDarkSlateGrey: XlRgbColor = ...
    rgbDarkTurquoise: XlRgbColor = ...
    rgbDarkViolet: XlRgbColor = ...
    rgbDeepPink: XlRgbColor = ...
    rgbDeepSkyBlue: XlRgbColor = ...
    rgbDimGray: XlRgbColor = ...
    rgbDimGrey: XlRgbColor = ...
    rgbDodgerBlue: XlRgbColor = ...
    rgbFireBrick: XlRgbColor = ...
    rgbFloralWhite: XlRgbColor = ...
    rgbForestGreen: XlRgbColor = ...
    rgbFuchsia: XlRgbColor = ...
    rgbGainsboro: XlRgbColor = ...
    rgbGhostWhite: XlRgbColor = ...
    rgbGold: XlRgbColor = ...
    rgbGoldenrod: XlRgbColor = ...
    rgbGray: XlRgbColor = ...
    rgbGreen: XlRgbColor = ...
    rgbGreenYellow: XlRgbColor = ...
    rgbGrey: XlRgbColor = ...
    rgbHoneydew: XlRgbColor = ...
    rgbHotPink: XlRgbColor = ...
    rgbIndianRed: XlRgbColor = ...
    rgbIndigo: XlRgbColor = ...
    rgbIvory: XlRgbColor = ...
    rgbKhaki: XlRgbColor = ...
    rgbLavender: XlRgbColor = ...
    rgbLavenderBlush: XlRgbColor = ...
    rgbLawnGreen: XlRgbColor = ...
    rgbLemonChiffon: XlRgbColor = ...
    rgbLightBlue: XlRgbColor = ...
    rgbLightCoral: XlRgbColor = ...
    rgbLightCyan: XlRgbColor = ...
    rgbLightGoldenrodYellow: XlRgbColor = ...
    rgbLightGray: XlRgbColor = ...
    rgbLightGreen: XlRgbColor = ...
    rgbLightGrey: XlRgbColor = ...
    rgbLightPink: XlRgbColor = ...
    rgbLightSalmon: XlRgbColor = ...
    rgbLightSeaGreen: XlRgbColor = ...
    rgbLightSkyBlue: XlRgbColor = ...
    rgbLightSlateGray: XlRgbColor = ...
    rgbLightSlateGrey: XlRgbColor = ...
    rgbLightSteelBlue: XlRgbColor = ...
    rgbLightYellow: XlRgbColor = ...
    rgbLime: XlRgbColor = ...
    rgbLimeGreen: XlRgbColor = ...
    rgbLinen: XlRgbColor = ...
    rgbMaroon: XlRgbColor = ...
    rgbMediumAquamarine: XlRgbColor = ...
    rgbMediumBlue: XlRgbColor = ...
    rgbMediumOrchid: XlRgbColor = ...
    rgbMediumPurple: XlRgbColor = ...
    rgbMediumSeaGreen: XlRgbColor = ...
    rgbMediumSlateBlue: XlRgbColor = ...
    rgbMediumSpringGreen: XlRgbColor = ...
    rgbMediumTurquoise: XlRgbColor = ...
    rgbMediumVioletRed: XlRgbColor = ...
    rgbMidnightBlue: XlRgbColor = ...
    rgbMintCream: XlRgbColor = ...
    rgbMistyRose: XlRgbColor = ...
    rgbMoccasin: XlRgbColor = ...
    rgbNavajoWhite: XlRgbColor = ...
    rgbNavy: XlRgbColor = ...
    rgbNavyBlue: XlRgbColor = ...
    rgbOldLace: XlRgbColor = ...
    rgbOlive: XlRgbColor = ...
    rgbOliveDrab: XlRgbColor = ...
    rgbOrange: XlRgbColor = ...
    rgbOrangeRed: XlRgbColor = ...
    rgbOrchid: XlRgbColor = ...
    rgbPaleGoldenrod: XlRgbColor = ...
    rgbPaleGreen: XlRgbColor = ...
    rgbPaleTurquoise: XlRgbColor = ...
    rgbPaleVioletRed: XlRgbColor = ...
    rgbPapayaWhip: XlRgbColor = ...
    rgbPeachPuff: XlRgbColor = ...
    rgbPeru: XlRgbColor = ...
    rgbPink: XlRgbColor = ...
    rgbPlum: XlRgbColor = ...
    rgbPowderBlue: XlRgbColor = ...
    rgbPurple: XlRgbColor = ...
    rgbRed: XlRgbColor = ...
    rgbRosyBrown: XlRgbColor = ...
    rgbRoyalBlue: XlRgbColor = ...
    rgbSalmon: XlRgbColor = ...
    rgbSandyBrown: XlRgbColor = ...
    rgbSeaGreen: XlRgbColor = ...
    rgbSeashell: XlRgbColor = ...
    rgbSienna: XlRgbColor = ...
    rgbSilver: XlRgbColor = ...
    rgbSkyBlue: XlRgbColor = ...
    rgbSlateBlue: XlRgbColor = ...
    rgbSlateGray: XlRgbColor = ...
    rgbSlateGrey: XlRgbColor = ...
    rgbSnow: XlRgbColor = ...
    rgbSpringGreen: XlRgbColor = ...
    rgbSteelBlue: XlRgbColor = ...
    rgbTan: XlRgbColor = ...
    rgbTeal: XlRgbColor = ...
    rgbThistle: XlRgbColor = ...
    rgbTomato: XlRgbColor = ...
    rgbTurquoise: XlRgbColor = ...
    rgbViolet: XlRgbColor = ...
    rgbWheat: XlRgbColor = ...
    rgbWhite: XlRgbColor = ...
    rgbWhiteSmoke: XlRgbColor = ...
    rgbYellow: XlRgbColor = ...
    rgbYellowGreen: XlRgbColor = ...
    value__ = ...


class XlRobustConnect(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlRobustConnect, values: xlAlways (1), xlAsRequired (0), xlNever (2) """
    value__ = ...
    xlAlways: XlRobustConnect = ...
    xlAsRequired: XlRobustConnect = ...
    xlNever: XlRobustConnect = ...


class XlRoutingSlipDelivery(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlRoutingSlipDelivery, values: xlAllAtOnce (2), xlOneAfterAnother (1) """
    value__ = ...
    xlAllAtOnce: XlRoutingSlipDelivery = ...
    xlOneAfterAnother: XlRoutingSlipDelivery = ...


class XlRoutingSlipStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlRoutingSlipStatus, values: xlNotYetRouted (0), xlRoutingComplete (2), xlRoutingInProgress (1) """
    value__ = ...
    xlNotYetRouted: XlRoutingSlipStatus = ...
    xlRoutingComplete: XlRoutingSlipStatus = ...
    xlRoutingInProgress: XlRoutingSlipStatus = ...


class XlRowCol(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlRowCol, values: xlColumns (2), xlRows (1) """
    value__ = ...
    xlColumns: XlRowCol = ...
    xlRows: XlRowCol = ...


class XlRunAutoMacro(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlRunAutoMacro, values: xlAutoActivate (3), xlAutoClose (2), xlAutoDeactivate (4), xlAutoOpen (1) """
    value__ = ...
    xlAutoActivate: XlRunAutoMacro = ...
    xlAutoClose: XlRunAutoMacro = ...
    xlAutoDeactivate: XlRunAutoMacro = ...
    xlAutoOpen: XlRunAutoMacro = ...


class XlSaveAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSaveAction, values: xlDoNotSaveChanges (2), xlSaveChanges (1) """
    value__ = ...
    xlDoNotSaveChanges: XlSaveAction = ...
    xlSaveChanges: XlSaveAction = ...


class XlSaveAsAccessMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSaveAsAccessMode, values: xlExclusive (3), xlNoChange (1), xlShared (2) """
    value__ = ...
    xlExclusive: XlSaveAsAccessMode = ...
    xlNoChange: XlSaveAsAccessMode = ...
    xlShared: XlSaveAsAccessMode = ...


class XlSaveConflictResolution(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSaveConflictResolution, values: xlLocalSessionChanges (2), xlOtherSessionChanges (3), xlUserResolution (1) """
    value__ = ...
    xlLocalSessionChanges: XlSaveConflictResolution = ...
    xlOtherSessionChanges: XlSaveConflictResolution = ...
    xlUserResolution: XlSaveConflictResolution = ...


class XlScaleType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlScaleType, values: xlScaleLinear (-4132), xlScaleLogarithmic (-4133) """
    value__ = ...
    xlScaleLinear: XlScaleType = ...
    xlScaleLogarithmic: XlScaleType = ...


class XlSearchDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSearchDirection, values: xlNext (1), xlPrevious (2) """
    value__ = ...
    xlNext: XlSearchDirection = ...
    xlPrevious: XlSearchDirection = ...


class XlSearchOrder(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSearchOrder, values: xlByColumns (2), xlByRows (1) """
    value__ = ...
    xlByColumns: XlSearchOrder = ...
    xlByRows: XlSearchOrder = ...


class XlSearchWithin(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSearchWithin, values: xlWithinSheet (1), xlWithinWorkbook (2) """
    value__ = ...
    xlWithinSheet: XlSearchWithin = ...
    xlWithinWorkbook: XlSearchWithin = ...


class XlSeriesNameLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSeriesNameLevel, values: xlSeriesNameLevelAll (-1), xlSeriesNameLevelCustom (-2), xlSeriesNameLevelNone (-3) """
    value__ = ...
    xlSeriesNameLevelAll: XlSeriesNameLevel = ...
    xlSeriesNameLevelCustom: XlSeriesNameLevel = ...
    xlSeriesNameLevelNone: XlSeriesNameLevel = ...


class XlSheetType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSheetType, values: xlChart (-4109), xlDialogSheet (-4116), xlExcel4IntlMacroSheet (4), xlExcel4MacroSheet (3), xlWorksheet (-4167) """
    value__ = ...
    xlChart: XlSheetType = ...
    xlDialogSheet: XlSheetType = ...
    xlExcel4IntlMacroSheet: XlSheetType = ...
    xlExcel4MacroSheet: XlSheetType = ...
    xlWorksheet: XlSheetType = ...


class XlSheetVisibility(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSheetVisibility, values: xlSheetHidden (0), xlSheetVeryHidden (2), xlSheetVisible (-1) """
    value__ = ...
    xlSheetHidden: XlSheetVisibility = ...
    xlSheetVeryHidden: XlSheetVisibility = ...
    xlSheetVisible: XlSheetVisibility = ...


class XlSizeRepresents(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSizeRepresents, values: xlSizeIsArea (1), xlSizeIsWidth (2) """
    value__ = ...
    xlSizeIsArea: XlSizeRepresents = ...
    xlSizeIsWidth: XlSizeRepresents = ...


class XlSlicerCacheType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSlicerCacheType, values: xlSlicer (1), xlTimeline (2) """
    value__ = ...
    xlSlicer: XlSlicerCacheType = ...
    xlTimeline: XlSlicerCacheType = ...


class XlSlicerCrossFilterType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSlicerCrossFilterType, values: xlSlicerCrossFilterHideButtonsWithNoData (4), xlSlicerCrossFilterShowItemsWithDataAtTop (2), xlSlicerCrossFilterShowItemsWithNoData (3), xlSlicerNoCrossFilter (1) """
    value__ = ...
    xlSlicerCrossFilterHideButtonsWithNoData: XlSlicerCrossFilterType = ...
    xlSlicerCrossFilterShowItemsWithDataAtTop: XlSlicerCrossFilterType = ...
    xlSlicerCrossFilterShowItemsWithNoData: XlSlicerCrossFilterType = ...
    xlSlicerNoCrossFilter: XlSlicerCrossFilterType = ...


class XlSlicerSort(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSlicerSort, values: xlSlicerSortAscending (2), xlSlicerSortDataSourceOrder (1), xlSlicerSortDescending (3) """
    value__ = ...
    xlSlicerSortAscending: XlSlicerSort = ...
    xlSlicerSortDataSourceOrder: XlSlicerSort = ...
    xlSlicerSortDescending: XlSlicerSort = ...


class XlSmartTagControlType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSmartTagControlType, values: xlSmartTagControlActiveX (13), xlSmartTagControlButton (6), xlSmartTagControlCheckbox (9), xlSmartTagControlCombo (12), xlSmartTagControlHelp (3), xlSmartTagControlHelpURL (4), xlSmartTagControlImage (8), xlSmartTagControlLabel (7), xlSmartTagControlLink (2), xlSmartTagControlListbox (11), xlSmartTagControlRadioGroup (14), xlSmartTagControlSeparator (5), xlSmartTagControlSmartTag (1), xlSmartTagControlTextbox (10) """
    value__ = ...
    xlSmartTagControlActiveX: XlSmartTagControlType = ...
    xlSmartTagControlButton: XlSmartTagControlType = ...
    xlSmartTagControlCheckbox: XlSmartTagControlType = ...
    xlSmartTagControlCombo: XlSmartTagControlType = ...
    xlSmartTagControlHelp: XlSmartTagControlType = ...
    xlSmartTagControlHelpURL: XlSmartTagControlType = ...
    xlSmartTagControlImage: XlSmartTagControlType = ...
    xlSmartTagControlLabel: XlSmartTagControlType = ...
    xlSmartTagControlLink: XlSmartTagControlType = ...
    xlSmartTagControlListbox: XlSmartTagControlType = ...
    xlSmartTagControlRadioGroup: XlSmartTagControlType = ...
    xlSmartTagControlSeparator: XlSmartTagControlType = ...
    xlSmartTagControlSmartTag: XlSmartTagControlType = ...
    xlSmartTagControlTextbox: XlSmartTagControlType = ...


class XlSmartTagDisplayMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSmartTagDisplayMode, values: xlButtonOnly (2), xlDisplayNone (1), xlIndicatorAndButton (0) """
    value__ = ...
    xlButtonOnly: XlSmartTagDisplayMode = ...
    xlDisplayNone: XlSmartTagDisplayMode = ...
    xlIndicatorAndButton: XlSmartTagDisplayMode = ...


class XlSortDataOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSortDataOption, values: xlSortNormal (0), xlSortTextAsNumbers (1) """
    value__ = ...
    xlSortNormal: XlSortDataOption = ...
    xlSortTextAsNumbers: XlSortDataOption = ...


class XlSortMethod(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSortMethod, values: xlPinYin (1), xlStroke (2) """
    value__ = ...
    xlPinYin: XlSortMethod = ...
    xlStroke: XlSortMethod = ...


class XlSortMethodOld(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSortMethodOld, values: xlCodePage (2), xlSyllabary (1) """
    value__ = ...
    xlCodePage: XlSortMethodOld = ...
    xlSyllabary: XlSortMethodOld = ...


class XlSortOn(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSortOn, values: xlSortOnCellColor (1), xlSortOnFontColor (2), xlSortOnIcon (3), xlSortOnValues (0) """
    value__ = ...
    xlSortOnCellColor: XlSortOn = ...
    xlSortOnFontColor: XlSortOn = ...
    xlSortOnIcon: XlSortOn = ...
    xlSortOnValues: XlSortOn = ...


class XlSortOrder(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSortOrder, values: xlAscending (1), xlDescending (2) """
    value__ = ...
    xlAscending: XlSortOrder = ...
    xlDescending: XlSortOrder = ...


class XlSortOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSortOrientation, values: xlSortColumns (1), xlSortRows (2) """
    value__ = ...
    xlSortColumns: XlSortOrientation = ...
    xlSortRows: XlSortOrientation = ...


class XlSortType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSortType, values: xlSortLabels (2), xlSortValues (1) """
    value__ = ...
    xlSortLabels: XlSortType = ...
    xlSortValues: XlSortType = ...


class XlSourceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSourceType, values: xlSourceAutoFilter (3), xlSourceChart (5), xlSourcePivotTable (6), xlSourcePrintArea (2), xlSourceQuery (7), xlSourceRange (4), xlSourceSheet (1), xlSourceWorkbook (0) """
    value__ = ...
    xlSourceAutoFilter: XlSourceType = ...
    xlSourceChart: XlSourceType = ...
    xlSourcePivotTable: XlSourceType = ...
    xlSourcePrintArea: XlSourceType = ...
    xlSourceQuery: XlSourceType = ...
    xlSourceRange: XlSourceType = ...
    xlSourceSheet: XlSourceType = ...
    xlSourceWorkbook: XlSourceType = ...


class XlSpanishModes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSpanishModes, values: xlSpanishTuteoAndVoseo (1), xlSpanishTuteoOnly (0), xlSpanishVoseoOnly (2) """
    value__ = ...
    xlSpanishTuteoAndVoseo: XlSpanishModes = ...
    xlSpanishTuteoOnly: XlSpanishModes = ...
    xlSpanishVoseoOnly: XlSpanishModes = ...


class XlSparklineRowCol(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSparklineRowCol, values: xlSparklineColumnsSquare (2), xlSparklineNonSquare (0), xlSparklineRowsSquare (1) """
    value__ = ...
    xlSparklineColumnsSquare: XlSparklineRowCol = ...
    xlSparklineNonSquare: XlSparklineRowCol = ...
    xlSparklineRowsSquare: XlSparklineRowCol = ...


class XlSparkScale(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSparkScale, values: xlSparkScaleCustom (3), xlSparkScaleGroup (1), xlSparkScaleSingle (2) """
    value__ = ...
    xlSparkScaleCustom: XlSparkScale = ...
    xlSparkScaleGroup: XlSparkScale = ...
    xlSparkScaleSingle: XlSparkScale = ...


class XlSparkType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSparkType, values: xlSparkColumn (2), xlSparkColumnStacked100 (3), xlSparkLine (1) """
    value__ = ...
    xlSparkColumn: XlSparkType = ...
    xlSparkColumnStacked100: XlSparkType = ...
    xlSparkLine: XlSparkType = ...


class XlSpeakDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSpeakDirection, values: xlSpeakByColumns (1), xlSpeakByRows (0) """
    value__ = ...
    xlSpeakByColumns: XlSpeakDirection = ...
    xlSpeakByRows: XlSpeakDirection = ...


class XlSpecialCellsValue(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSpecialCellsValue, values: xlErrors (16), xlLogical (4), xlNumbers (1), xlTextValues (2) """
    value__ = ...
    xlErrors: XlSpecialCellsValue = ...
    xlLogical: XlSpecialCellsValue = ...
    xlNumbers: XlSpecialCellsValue = ...
    xlTextValues: XlSpecialCellsValue = ...


class XlStdColorScale(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlStdColorScale, values: xlColorScaleBlackWhite (3), xlColorScaleGYR (2), xlColorScaleRYG (1), xlColorScaleWhiteBlack (4) """
    value__ = ...
    xlColorScaleBlackWhite: XlStdColorScale = ...
    xlColorScaleGYR: XlStdColorScale = ...
    xlColorScaleRYG: XlStdColorScale = ...
    xlColorScaleWhiteBlack: XlStdColorScale = ...


class XlSubscribeToFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSubscribeToFormat, values: xlSubscribeToPicture (-4147), xlSubscribeToText (-4158) """
    value__ = ...
    xlSubscribeToPicture: XlSubscribeToFormat = ...
    xlSubscribeToText: XlSubscribeToFormat = ...


class XlSubtototalLocationType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSubtototalLocationType, values: xlAtBottom (2), xlAtTop (1) """
    value__ = ...
    xlAtBottom: XlSubtototalLocationType = ...
    xlAtTop: XlSubtototalLocationType = ...


class XlSummaryColumn(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSummaryColumn, values: xlSummaryOnLeft (-4131), xlSummaryOnRight (-4152) """
    value__ = ...
    xlSummaryOnLeft: XlSummaryColumn = ...
    xlSummaryOnRight: XlSummaryColumn = ...


class XlSummaryReportType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSummaryReportType, values: xlStandardSummary (1), xlSummaryPivotTable (-4148) """
    value__ = ...
    xlStandardSummary: XlSummaryReportType = ...
    xlSummaryPivotTable: XlSummaryReportType = ...


class XlSummaryRow(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSummaryRow, values: xlSummaryAbove (0), xlSummaryBelow (1) """
    value__ = ...
    xlSummaryAbove: XlSummaryRow = ...
    xlSummaryBelow: XlSummaryRow = ...


class XlTableStyleElementType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTableStyleElementType, values: xlBlankRow (19), xlColumnStripe1 (7), xlColumnStripe2 (8), xlColumnSubheading1 (20), xlColumnSubheading2 (21), xlColumnSubheading3 (22), xlFirstColumn (3), xlFirstHeaderCell (9), xlFirstTotalCell (11), xlGrandTotalColumn (4), xlGrandTotalRow (2), xlHeaderRow (1), xlLastColumn (4), xlLastHeaderCell (10), xlLastTotalCell (12), xlPageFieldLabels (26), xlPageFieldValues (27), xlRowStripe1 (5), xlRowStripe2 (6), xlRowSubheading1 (23), xlRowSubheading2 (24), xlRowSubheading3 (25), xlSlicerHoveredSelectedItemWithData (33), xlSlicerHoveredSelectedItemWithNoData (35), xlSlicerHoveredUnselectedItemWithData (32), xlSlicerHoveredUnselectedItemWithNoData (34), xlSlicerSelectedItemWithData (30), xlSlicerSelectedItemWithNoData (31), xlSlicerUnselectedItemWithData (28), xlSlicerUnselectedItemWithNoData (29), xlSubtotalColumn1 (13), xlSubtotalColumn2 (14), xlSubtotalColumn3 (15), xlSubtotalRow1 (16), xlSubtotalRow2 (17), xlSubtotalRow3 (18), xlTimelinePeriodLabels1 (38), xlTimelinePeriodLabels2 (39), xlTimelineSelectedTimeBlock (40), xlTimelineSelectedTimeBlockSpace (42), xlTimelineSelectionLabel (36), xlTimelineTimeLevel (37), xlTimelineUnselectedTimeBlock (41), xlTotalRow (2), xlWholeTable (0) """
    value__ = ...
    xlBlankRow: XlTableStyleElementType = ...
    xlColumnStripe1: XlTableStyleElementType = ...
    xlColumnStripe2: XlTableStyleElementType = ...
    xlColumnSubheading1: XlTableStyleElementType = ...
    xlColumnSubheading2: XlTableStyleElementType = ...
    xlColumnSubheading3: XlTableStyleElementType = ...
    xlFirstColumn: XlTableStyleElementType = ...
    xlFirstHeaderCell: XlTableStyleElementType = ...
    xlFirstTotalCell: XlTableStyleElementType = ...
    xlGrandTotalColumn: XlTableStyleElementType = ...
    xlGrandTotalRow: XlTableStyleElementType = ...
    xlHeaderRow: XlTableStyleElementType = ...
    xlLastColumn: XlTableStyleElementType = ...
    xlLastHeaderCell: XlTableStyleElementType = ...
    xlLastTotalCell: XlTableStyleElementType = ...
    xlPageFieldLabels: XlTableStyleElementType = ...
    xlPageFieldValues: XlTableStyleElementType = ...
    xlRowStripe1: XlTableStyleElementType = ...
    xlRowStripe2: XlTableStyleElementType = ...
    xlRowSubheading1: XlTableStyleElementType = ...
    xlRowSubheading2: XlTableStyleElementType = ...
    xlRowSubheading3: XlTableStyleElementType = ...
    xlSlicerHoveredSelectedItemWithData: XlTableStyleElementType = ...
    xlSlicerHoveredSelectedItemWithNoData: XlTableStyleElementType = ...
    xlSlicerHoveredUnselectedItemWithData: XlTableStyleElementType = ...
    xlSlicerHoveredUnselectedItemWithNoData: XlTableStyleElementType = ...
    xlSlicerSelectedItemWithData: XlTableStyleElementType = ...
    xlSlicerSelectedItemWithNoData: XlTableStyleElementType = ...
    xlSlicerUnselectedItemWithData: XlTableStyleElementType = ...
    xlSlicerUnselectedItemWithNoData: XlTableStyleElementType = ...
    xlSubtotalColumn1: XlTableStyleElementType = ...
    xlSubtotalColumn2: XlTableStyleElementType = ...
    xlSubtotalColumn3: XlTableStyleElementType = ...
    xlSubtotalRow1: XlTableStyleElementType = ...
    xlSubtotalRow2: XlTableStyleElementType = ...
    xlSubtotalRow3: XlTableStyleElementType = ...
    xlTimelinePeriodLabels1: XlTableStyleElementType = ...
    xlTimelinePeriodLabels2: XlTableStyleElementType = ...
    xlTimelineSelectedTimeBlock: XlTableStyleElementType = ...
    xlTimelineSelectedTimeBlockSpace: XlTableStyleElementType = ...
    xlTimelineSelectionLabel: XlTableStyleElementType = ...
    xlTimelineTimeLevel: XlTableStyleElementType = ...
    xlTimelineUnselectedTimeBlock: XlTableStyleElementType = ...
    xlTotalRow: XlTableStyleElementType = ...
    xlWholeTable: XlTableStyleElementType = ...


class XlTabPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTabPosition, values: xlTabPositionFirst (0), xlTabPositionLast (1) """
    value__ = ...
    xlTabPositionFirst: XlTabPosition = ...
    xlTabPositionLast: XlTabPosition = ...


class XlTextParsingType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTextParsingType, values: xlDelimited (1), xlFixedWidth (2) """
    value__ = ...
    xlDelimited: XlTextParsingType = ...
    xlFixedWidth: XlTextParsingType = ...


class XlTextQualifier(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTextQualifier, values: xlTextQualifierDoubleQuote (1), xlTextQualifierNone (-4142), xlTextQualifierSingleQuote (2) """
    value__ = ...
    xlTextQualifierDoubleQuote: XlTextQualifier = ...
    xlTextQualifierNone: XlTextQualifier = ...
    xlTextQualifierSingleQuote: XlTextQualifier = ...


class XlTextVisualLayoutType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTextVisualLayoutType, values: xlTextVisualLTR (1), xlTextVisualRTL (2) """
    value__ = ...
    xlTextVisualLTR: XlTextVisualLayoutType = ...
    xlTextVisualRTL: XlTextVisualLayoutType = ...


class XlThemeColor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlThemeColor, values: xlThemeColorAccent1 (5), xlThemeColorAccent2 (6), xlThemeColorAccent3 (7), xlThemeColorAccent4 (8), xlThemeColorAccent5 (9), xlThemeColorAccent6 (10), xlThemeColorDark1 (1), xlThemeColorDark2 (3), xlThemeColorFollowedHyperlink (12), xlThemeColorHyperlink (11), xlThemeColorLight1 (2), xlThemeColorLight2 (4) """
    value__ = ...
    xlThemeColorAccent1: XlThemeColor = ...
    xlThemeColorAccent2: XlThemeColor = ...
    xlThemeColorAccent3: XlThemeColor = ...
    xlThemeColorAccent4: XlThemeColor = ...
    xlThemeColorAccent5: XlThemeColor = ...
    xlThemeColorAccent6: XlThemeColor = ...
    xlThemeColorDark1: XlThemeColor = ...
    xlThemeColorDark2: XlThemeColor = ...
    xlThemeColorFollowedHyperlink: XlThemeColor = ...
    xlThemeColorHyperlink: XlThemeColor = ...
    xlThemeColorLight1: XlThemeColor = ...
    xlThemeColorLight2: XlThemeColor = ...


class XlThemeFont(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlThemeFont, values: xlThemeFontMajor (1), xlThemeFontMinor (2), xlThemeFontNone (0) """
    value__ = ...
    xlThemeFontMajor: XlThemeFont = ...
    xlThemeFontMinor: XlThemeFont = ...
    xlThemeFontNone: XlThemeFont = ...


class XlThreadMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlThreadMode, values: xlThreadModeAutomatic (0), xlThreadModeManual (1) """
    value__ = ...
    xlThreadModeAutomatic: XlThreadMode = ...
    xlThreadModeManual: XlThreadMode = ...


class XlTickLabelOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTickLabelOrientation, values: xlTickLabelOrientationAutomatic (-4105), xlTickLabelOrientationDownward (-4170), xlTickLabelOrientationHorizontal (-4128), xlTickLabelOrientationUpward (-4171), xlTickLabelOrientationVertical (-4166) """
    value__ = ...
    xlTickLabelOrientationAutomatic: XlTickLabelOrientation = ...
    xlTickLabelOrientationDownward: XlTickLabelOrientation = ...
    xlTickLabelOrientationHorizontal: XlTickLabelOrientation = ...
    xlTickLabelOrientationUpward: XlTickLabelOrientation = ...
    xlTickLabelOrientationVertical: XlTickLabelOrientation = ...


class XlTickLabelPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTickLabelPosition, values: xlTickLabelPositionHigh (-4127), xlTickLabelPositionLow (-4134), xlTickLabelPositionNextToAxis (4), xlTickLabelPositionNone (-4142) """
    value__ = ...
    xlTickLabelPositionHigh: XlTickLabelPosition = ...
    xlTickLabelPositionLow: XlTickLabelPosition = ...
    xlTickLabelPositionNextToAxis: XlTickLabelPosition = ...
    xlTickLabelPositionNone: XlTickLabelPosition = ...


class XlTickMark(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTickMark, values: xlTickMarkCross (4), xlTickMarkInside (2), xlTickMarkNone (-4142), xlTickMarkOutside (3) """
    value__ = ...
    xlTickMarkCross: XlTickMark = ...
    xlTickMarkInside: XlTickMark = ...
    xlTickMarkNone: XlTickMark = ...
    xlTickMarkOutside: XlTickMark = ...


class XlTimelineLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTimelineLevel, values: xlTimelineLevelDays (3), xlTimelineLevelMonths (2), xlTimelineLevelQuarters (1), xlTimelineLevelYears (0) """
    value__ = ...
    xlTimelineLevelDays: XlTimelineLevel = ...
    xlTimelineLevelMonths: XlTimelineLevel = ...
    xlTimelineLevelQuarters: XlTimelineLevel = ...
    xlTimelineLevelYears: XlTimelineLevel = ...


class XlTimePeriods(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTimePeriods, values: xlLast7Days (2), xlLastMonth (5), xlLastWeek (4), xlNextMonth (8), xlNextWeek (7), xlThisMonth (9), xlThisWeek (3), xlToday (0), xlTomorrow (6), xlYesterday (1) """
    value__ = ...
    xlLast7Days: XlTimePeriods = ...
    xlLastMonth: XlTimePeriods = ...
    xlLastWeek: XlTimePeriods = ...
    xlNextMonth: XlTimePeriods = ...
    xlNextWeek: XlTimePeriods = ...
    xlThisMonth: XlTimePeriods = ...
    xlThisWeek: XlTimePeriods = ...
    xlToday: XlTimePeriods = ...
    xlTomorrow: XlTimePeriods = ...
    xlYesterday: XlTimePeriods = ...


class XlTimeUnit(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTimeUnit, values: xlDays (0), xlMonths (1), xlYears (2) """
    value__ = ...
    xlDays: XlTimeUnit = ...
    xlMonths: XlTimeUnit = ...
    xlYears: XlTimeUnit = ...


class XlToolbarProtection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlToolbarProtection, values: xlNoButtonChanges (1), xlNoChanges (4), xlNoDockingChanges (3), xlNoShapeChanges (2), xlToolbarProtectionNone (-4143) """
    value__ = ...
    xlNoButtonChanges: XlToolbarProtection = ...
    xlNoChanges: XlToolbarProtection = ...
    xlNoDockingChanges: XlToolbarProtection = ...
    xlNoShapeChanges: XlToolbarProtection = ...
    xlToolbarProtectionNone: XlToolbarProtection = ...


class XlTopBottom(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTopBottom, values: xlTop10Bottom (0), xlTop10Top (1) """
    value__ = ...
    xlTop10Bottom: XlTopBottom = ...
    xlTop10Top: XlTopBottom = ...


class XlTotalsCalculation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTotalsCalculation, values: xlTotalsCalculationAverage (2), xlTotalsCalculationCount (3), xlTotalsCalculationCountNums (4), xlTotalsCalculationCustom (9), xlTotalsCalculationMax (6), xlTotalsCalculationMin (5), xlTotalsCalculationNone (0), xlTotalsCalculationStdDev (7), xlTotalsCalculationSum (1), xlTotalsCalculationVar (8) """
    value__ = ...
    xlTotalsCalculationAverage: XlTotalsCalculation = ...
    xlTotalsCalculationCount: XlTotalsCalculation = ...
    xlTotalsCalculationCountNums: XlTotalsCalculation = ...
    xlTotalsCalculationCustom: XlTotalsCalculation = ...
    xlTotalsCalculationMax: XlTotalsCalculation = ...
    xlTotalsCalculationMin: XlTotalsCalculation = ...
    xlTotalsCalculationNone: XlTotalsCalculation = ...
    xlTotalsCalculationStdDev: XlTotalsCalculation = ...
    xlTotalsCalculationSum: XlTotalsCalculation = ...
    xlTotalsCalculationVar: XlTotalsCalculation = ...


class XlTrendlineType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTrendlineType, values: xlExponential (5), xlLinear (-4132), xlLogarithmic (-4133), xlMovingAvg (6), xlPolynomial (3), xlPower (4) """
    value__ = ...
    xlExponential: XlTrendlineType = ...
    xlLinear: XlTrendlineType = ...
    xlLogarithmic: XlTrendlineType = ...
    xlMovingAvg: XlTrendlineType = ...
    xlPolynomial: XlTrendlineType = ...
    xlPower: XlTrendlineType = ...


class XlUnderlineStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlUnderlineStyle, values: xlUnderlineStyleDouble (-4119), xlUnderlineStyleDoubleAccounting (5), xlUnderlineStyleNone (-4142), xlUnderlineStyleSingle (2), xlUnderlineStyleSingleAccounting (4) """
    value__ = ...
    xlUnderlineStyleDouble: XlUnderlineStyle = ...
    xlUnderlineStyleDoubleAccounting: XlUnderlineStyle = ...
    xlUnderlineStyleNone: XlUnderlineStyle = ...
    xlUnderlineStyleSingle: XlUnderlineStyle = ...
    xlUnderlineStyleSingleAccounting: XlUnderlineStyle = ...


class XlUpdateLinks(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlUpdateLinks, values: xlUpdateLinksAlways (3), xlUpdateLinksNever (2), xlUpdateLinksUserSetting (1) """
    value__ = ...
    xlUpdateLinksAlways: XlUpdateLinks = ...
    xlUpdateLinksNever: XlUpdateLinks = ...
    xlUpdateLinksUserSetting: XlUpdateLinks = ...


class XlVAlign(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlVAlign, values: xlVAlignBottom (-4107), xlVAlignCenter (-4108), xlVAlignDistributed (-4117), xlVAlignJustify (-4130), xlVAlignTop (-4160) """
    value__ = ...
    xlVAlignBottom: XlVAlign = ...
    xlVAlignCenter: XlVAlign = ...
    xlVAlignDistributed: XlVAlign = ...
    xlVAlignJustify: XlVAlign = ...
    xlVAlignTop: XlVAlign = ...


class XlWBATemplate(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlWBATemplate, values: xlWBATChart (-4109), xlWBATExcel4IntlMacroSheet (4), xlWBATExcel4MacroSheet (3), xlWBATWorksheet (-4167) """
    value__ = ...
    xlWBATChart: XlWBATemplate = ...
    xlWBATExcel4IntlMacroSheet: XlWBATemplate = ...
    xlWBATExcel4MacroSheet: XlWBATemplate = ...
    xlWBATWorksheet: XlWBATemplate = ...


class XlWebFormatting(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlWebFormatting, values: xlWebFormattingAll (1), xlWebFormattingNone (3), xlWebFormattingRTF (2) """
    value__ = ...
    xlWebFormattingAll: XlWebFormatting = ...
    xlWebFormattingNone: XlWebFormatting = ...
    xlWebFormattingRTF: XlWebFormatting = ...


class XlWebSelectionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlWebSelectionType, values: xlAllTables (2), xlEntirePage (1), xlSpecifiedTables (3) """
    value__ = ...
    xlAllTables: XlWebSelectionType = ...
    xlEntirePage: XlWebSelectionType = ...
    xlSpecifiedTables: XlWebSelectionType = ...


class XlWindowState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlWindowState, values: xlMaximized (-4137), xlMinimized (-4140), xlNormal (-4143) """
    value__ = ...
    xlMaximized: XlWindowState = ...
    xlMinimized: XlWindowState = ...
    xlNormal: XlWindowState = ...


class XlWindowType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlWindowType, values: xlChartAsWindow (5), xlChartInPlace (4), xlClipboard (3), xlInfo (-4129), xlWorkbook (1) """
    value__ = ...
    xlChartAsWindow: XlWindowType = ...
    xlChartInPlace: XlWindowType = ...
    xlClipboard: XlWindowType = ...
    xlInfo: XlWindowType = ...
    xlWorkbook: XlWindowType = ...


class XlWindowView(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlWindowView, values: xlNormalView (1), xlPageBreakPreview (2), xlPageLayoutView (3) """
    value__ = ...
    xlNormalView: XlWindowView = ...
    xlPageBreakPreview: XlWindowView = ...
    xlPageLayoutView: XlWindowView = ...


class XlXLMMacroType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlXLMMacroType, values: xlCommand (2), xlFunction (1), xlNotXLM (3) """
    value__ = ...
    xlCommand: XlXLMMacroType = ...
    xlFunction: XlXLMMacroType = ...
    xlNotXLM: XlXLMMacroType = ...


class XlXmlExportResult(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlXmlExportResult, values: xlXmlExportSuccess (0), xlXmlExportValidationFailed (1) """
    value__ = ...
    xlXmlExportSuccess: XlXmlExportResult = ...
    xlXmlExportValidationFailed: XlXmlExportResult = ...


class XlXmlImportResult(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlXmlImportResult, values: xlXmlImportElementsTruncated (1), xlXmlImportSuccess (0), xlXmlImportValidationFailed (2) """
    value__ = ...
    xlXmlImportElementsTruncated: XlXmlImportResult = ...
    xlXmlImportSuccess: XlXmlImportResult = ...
    xlXmlImportValidationFailed: XlXmlImportResult = ...


class XlXmlLoadOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlXmlLoadOption, values: xlXmlLoadImportToList (2), xlXmlLoadMapXml (3), xlXmlLoadOpenXml (1), xlXmlLoadPromptUser (0) """
    value__ = ...
    xlXmlLoadImportToList: XlXmlLoadOption = ...
    xlXmlLoadMapXml: XlXmlLoadOption = ...
    xlXmlLoadOpenXml: XlXmlLoadOption = ...
    xlXmlLoadPromptUser: XlXmlLoadOption = ...


class XlYesNoGuess(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlYesNoGuess, values: xlGuess (0), xlNo (2), xlYes (1) """
    value__ = ...
    xlGuess: XlYesNoGuess = ...
    xlNo: XlYesNoGuess = ...
    xlYes: XlYesNoGuess = ...


class XmlDataBinding: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XmlDataBinding) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: XmlDataBinding) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XmlDataBinding) -> object """
        ...

    @property
    def SourceUrl(self) -> str:
        """ Get: SourceUrl(self: XmlDataBinding) -> str """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: XmlDataBinding) -> str """
        ...


    def ClearSettings(self): # -> 
        """ ClearSettings(self: XmlDataBinding) """
        ...

    def LoadSettings(self, Url:str): # -> 
        """ LoadSettings(self: XmlDataBinding, Url: str) """
        ...

    def Refresh(self) -> XlXmlImportResult:
        """ Refresh(self: XmlDataBinding) -> XlXmlImportResult """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XmlMap: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AdjustColumnWidth(self) -> bool:
        """
        Get: AdjustColumnWidth(self: XmlMap) -> bool
        Set: AdjustColumnWidth(self: XmlMap) = value
        """
        ...

    @property
    def AppendOnImport(self) -> bool:
        """
        Get: AppendOnImport(self: XmlMap) -> bool
        Set: AppendOnImport(self: XmlMap) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: XmlMap) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: XmlMap) -> XlCreator """
        ...

    @property
    def DataBinding(self) -> XmlDataBinding:
        """ Get: DataBinding(self: XmlMap) -> XmlDataBinding """
        ...

    @property
    def IsExportable(self) -> bool:
        """ Get: IsExportable(self: XmlMap) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: XmlMap) -> str
        Set: Name(self: XmlMap) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XmlMap) -> object """
        ...

    @property
    def PreserveColumnFilter(self) -> bool:
        """
        Get: PreserveColumnFilter(self: XmlMap) -> bool
        Set: PreserveColumnFilter(self: XmlMap) = value
        """
        ...

    @property
    def PreserveNumberFormatting(self) -> bool:
        """
        Get: PreserveNumberFormatting(self: XmlMap) -> bool
        Set: PreserveNumberFormatting(self: XmlMap) = value
        """
        ...

    @property
    def RootElementName(self) -> str:
        """ Get: RootElementName(self: XmlMap) -> str """
        ...

    @property
    def RootElementNamespace(self) -> XmlNamespace:
        """ Get: RootElementNamespace(self: XmlMap) -> XmlNamespace """
        ...

    @property
    def SaveDataSourceDefinition(self) -> bool:
        """
        Get: SaveDataSourceDefinition(self: XmlMap) -> bool
        Set: SaveDataSourceDefinition(self: XmlMap) = value
        """
        ...

    @property
    def Schemas(self) -> XmlSchemas:
        """ Get: Schemas(self: XmlMap) -> XmlSchemas """
        ...

    @property
    def ShowImportExportValidationErrors(self) -> bool:
        """
        Get: ShowImportExportValidationErrors(self: XmlMap) -> bool
        Set: ShowImportExportValidationErrors(self: XmlMap) = value
        """
        ...

    @property
    def WorkbookConnection(self) -> WorkbookConnection:
        """ Get: WorkbookConnection(self: XmlMap) -> WorkbookConnection """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: XmlMap) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: XmlMap) """
        ...

    def Export(self, Url:str, Overwrite:object) -> XlXmlExportResult:
        """ Export(self: XmlMap, Url: str, Overwrite: object) -> XlXmlExportResult """
        ...

    def ExportXml(self, Data) -> Tuple_[XlXmlExportResult, str]:
        """ ExportXml(self: XmlMap) -> (XlXmlExportResult, str) """
        ...

    def Import(self, Url:str, Overwrite:object) -> XlXmlImportResult:
        """ Import(self: XmlMap, Url: str, Overwrite: object) -> XlXmlImportResult """
        ...

    def ImportXml(self, XmlData:str, Overwrite:object) -> XlXmlImportResult:
        """ ImportXml(self: XmlMap, XmlData: str, Overwrite: object) -> XlXmlImportResult """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XmlMaps(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XmlMaps) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: XmlMaps) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: XmlMaps) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XmlMaps) -> object """
        ...


    def Add(self, Schema:str, RootElementName:object) -> XmlMap:
        """ Add(self: XmlMaps, Schema: str, RootElementName: object) -> XmlMap """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XmlNamespace: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XmlNamespace) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: XmlNamespace) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XmlNamespace) -> object """
        ...

    @property
    def Prefix(self) -> str:
        """ Get: Prefix(self: XmlNamespace) -> str """
        ...

    @property
    def Uri(self) -> str:
        """ Get: Uri(self: XmlNamespace) -> str """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: XmlNamespace) -> str """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XmlNamespaces(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XmlNamespaces) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: XmlNamespaces) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: XmlNamespaces) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XmlNamespaces) -> object """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: XmlNamespaces) -> str """
        ...


    def InstallManifest(self, Path:str, InstallForAllUsers:object): # -> 
        """ InstallManifest(self: XmlNamespaces, Path: str, InstallForAllUsers: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XmlSchema: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XmlSchema) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: XmlSchema) -> XlCreator """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: XmlSchema) -> str """
        ...

    @property
    def Namespace(self) -> XmlNamespace:
        """ Get: Namespace(self: XmlSchema) -> XmlNamespace """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XmlSchema) -> object """
        ...

    @property
    def XML(self) -> str:
        """ Get: XML(self: XmlSchema) -> str """
        ...



class XmlSchemas(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XmlSchemas) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: XmlSchemas) -> int """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: XmlSchemas) -> XlCreator """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XmlSchemas) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XPath: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XPath) -> Application """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: XPath) -> XlCreator """
        ...

    @property
    def Map(self) -> XmlMap:
        """ Get: Map(self: XPath) -> XmlMap """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XPath) -> object """
        ...

    @property
    def Repeating(self) -> bool:
        """ Get: Repeating(self: XPath) -> bool """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: XPath) -> str """
        ...

    @property
    def _Default(self) -> str:
        """ Get: _Default(self: XPath) -> str """
        ...


    def Clear(self): # -> 
        """ Clear(self: XPath) """
        ...

    def SetValue(self, Map:XmlMap, XPath:str, SelectionNamespace:object, Repeating:object): # -> 
        """ SetValue(self: XPath, Map: XmlMap, XPath: str, SelectionNamespace: object, Repeating: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _IOLEObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AltHTML(self) -> str:
        """
        Get: AltHTML(self: _IOLEObject) -> str
        Set: AltHTML(self: _IOLEObject) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _IOLEObject) -> Application """
        ...

    @property
    def AutoLoad(self) -> bool:
        """
        Get: AutoLoad(self: _IOLEObject) -> bool
        Set: AutoLoad(self: _IOLEObject) = value
        """
        ...

    @property
    def AutoUpdate(self) -> bool:
        """
        Get: AutoUpdate(self: _IOLEObject) -> bool
        Set: AutoUpdate(self: _IOLEObject) = value
        """
        ...

    @property
    def Border(self) -> Border:
        """ Get: Border(self: _IOLEObject) -> Border """
        ...

    @property
    def BottomRightCell(self) -> Range:
        """ Get: BottomRightCell(self: _IOLEObject) -> Range """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: _IOLEObject) -> XlCreator """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _IOLEObject) -> bool
        Set: Enabled(self: _IOLEObject) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: _IOLEObject) -> float
        Set: Height(self: _IOLEObject) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: _IOLEObject) -> int """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: _IOLEObject) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: _IOLEObject) -> float
        Set: Left(self: _IOLEObject) = value
        """
        ...

    @property
    def LinkedCell(self) -> str:
        """
        Get: LinkedCell(self: _IOLEObject) -> str
        Set: LinkedCell(self: _IOLEObject) = value
        """
        ...

    @property
    def ListFillRange(self) -> str:
        """
        Get: ListFillRange(self: _IOLEObject) -> str
        Set: ListFillRange(self: _IOLEObject) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: _IOLEObject) -> bool
        Set: Locked(self: _IOLEObject) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _IOLEObject) -> str
        Set: Name(self: _IOLEObject) = value
        """
        ...

    @property
    def Object(self) -> object:
        """ Get: Object(self: _IOLEObject) -> object """
        ...

    @property
    def OLEType(self) -> object:
        """ Get: OLEType(self: _IOLEObject) -> object """
        ...

    @property
    def OnAction(self) -> str:
        """
        Get: OnAction(self: _IOLEObject) -> str
        Set: OnAction(self: _IOLEObject) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _IOLEObject) -> object """
        ...

    @property
    def Placement(self) -> object:
        """
        Get: Placement(self: _IOLEObject) -> object
        Set: Placement(self: _IOLEObject) = value
        """
        ...

    @property
    def PrintObject(self) -> bool:
        """
        Get: PrintObject(self: _IOLEObject) -> bool
        Set: PrintObject(self: _IOLEObject) = value
        """
        ...

    @property
    def progID(self) -> str:
        """ Get: progID(self: _IOLEObject) -> str """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: _IOLEObject) -> bool
        Set: Shadow(self: _IOLEObject) = value
        """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: _IOLEObject) -> ShapeRange """
        ...

    @property
    def SourceName(self) -> str:
        """
        Get: SourceName(self: _IOLEObject) -> str
        Set: SourceName(self: _IOLEObject) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: _IOLEObject) -> float
        Set: Top(self: _IOLEObject) = value
        """
        ...

    @property
    def TopLeftCell(self) -> Range:
        """ Get: TopLeftCell(self: _IOLEObject) -> Range """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _IOLEObject) -> bool
        Set: Visible(self: _IOLEObject) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: _IOLEObject) -> float
        Set: Width(self: _IOLEObject) = value
        """
        ...

    @property
    def ZOrder(self) -> int:
        """ Get: ZOrder(self: _IOLEObject) -> int """
        ...


    def Activate(self) -> object:
        """ Activate(self: _IOLEObject) -> object """
        ...

    def BringToFront(self) -> object:
        """ BringToFront(self: _IOLEObject) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: _IOLEObject) -> object """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat) -> object:
        """ CopyPicture(self: _IOLEObject, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat) -> object """
        ...

    def Cut(self) -> object:
        """ Cut(self: _IOLEObject) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: _IOLEObject) -> object """
        ...

    def Duplicate(self) -> object:
        """ Duplicate(self: _IOLEObject) -> object """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: _IOLEObject, Replace: object) -> object """
        ...

    def SendToBack(self) -> object:
        """ SendToBack(self: _IOLEObject) -> object """
        ...

    def Update(self) -> object:
        """ Update(self: _IOLEObject) -> object """
        ...

    def Verb(self, Verb:XlOLEVerb) -> object:
        """ Verb(self: _IOLEObject, Verb: XlOLEVerb) -> object """
        ...


class _IQueryTable: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AdjustColumnWidth(self) -> bool:
        """
        Get: AdjustColumnWidth(self: _IQueryTable) -> bool
        Set: AdjustColumnWidth(self: _IQueryTable) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _IQueryTable) -> Application """
        ...

    @property
    def BackgroundQuery(self) -> bool:
        """
        Get: BackgroundQuery(self: _IQueryTable) -> bool
        Set: BackgroundQuery(self: _IQueryTable) = value
        """
        ...

    @property
    def CommandText(self) -> object:
        """
        Get: CommandText(self: _IQueryTable) -> object
        Set: CommandText(self: _IQueryTable) = value
        """
        ...

    @property
    def CommandType(self) -> XlCmdType:
        """
        Get: CommandType(self: _IQueryTable) -> XlCmdType
        Set: CommandType(self: _IQueryTable) = value
        """
        ...

    @property
    def Connection(self) -> object:
        """
        Get: Connection(self: _IQueryTable) -> object
        Set: Connection(self: _IQueryTable) = value
        """
        ...

    @property
    def Creator(self) -> XlCreator:
        """ Get: Creator(self: _IQueryTable) -> XlCreator """
        ...

    @property
    def Destination(self) -> Range:
        """ Get: Destination(self: _IQueryTable) -> Range """
        ...

    @property
    def EditWebPage(self) -> object:
        """
        Get: EditWebPage(self: _IQueryTable) -> object
        Set: EditWebPage(self: _IQueryTable) = value
        """
        ...

    @property
    def EnableEditing(self) -> bool:
        """
        Get: EnableEditing(self: _IQueryTable) -> bool
        Set: EnableEditing(self: _IQueryTable) = value
        """
        ...

    @property
    def EnableRefresh(self) -> bool:
        """
        Get: EnableRefresh(self: _IQueryTable) -> bool
        Set: EnableRefresh(self: _IQueryTable) = value
        """
        ...

    @property
    def FetchedRowOverflow(self) -> bool:
        """ Get: FetchedRowOverflow(self: _IQueryTable) -> bool """
        ...

    @property
    def FieldNames(self) -> bool:
        """
        Get: FieldNames(self: _IQueryTable) -> bool
        Set: FieldNames(self: _IQueryTable) = value
        """
        ...

    @property
    def FillAdjacentFormulas(self) -> bool:
        """
        Get: FillAdjacentFormulas(self: _IQueryTable) -> bool
        Set: FillAdjacentFormulas(self: _IQueryTable) = value
        """
        ...

    @property
    def HasAutoFormat(self) -> bool:
        """
        Get: HasAutoFormat(self: _IQueryTable) -> bool
        Set: HasAutoFormat(self: _IQueryTable) = value
        """
        ...

    @property
    def ListObject(self) -> ListObject:
        """ Get: ListObject(self: _IQueryTable) -> ListObject """
        ...

    @property
    def MaintainConnection(self) -> bool:
        """
        Get: MaintainConnection(self: _IQueryTable) -> bool
        Set: MaintainConnection(self: _IQueryTable) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _IQueryTable) -> str
        Set: Name(self: _IQueryTable) = value
        """
        ...

    @property
    def Parameters(self) -> Parameters:
        """ Get: Parameters(self: _IQueryTable) -> Parameters """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _IQueryTable) -> object """
        ...

    @property
    def PostText(self) -> str:
        """
        Get: PostText(self: _IQueryTable) -> str
        Set: PostText(self: _IQueryTable) = value
        """
        ...

    @property
    def PreserveColumnInfo(self) -> bool:
        """
        Get: PreserveColumnInfo(self: _IQueryTable) -> bool
        Set: PreserveColumnInfo(self: _IQueryTable) = value
        """
        ...

    @property
    def PreserveFormatting(self) -> bool:
        """
        Get: PreserveFormatting(self: _IQueryTable) -> bool
        Set: PreserveFormatting(self: _IQueryTable) = value
        """
        ...

    @property
    def QueryType(self) -> XlQueryType:
        """ Get: QueryType(self: _IQueryTable) -> XlQueryType """
        ...

    @property
    def Recordset(self) -> object:
        """
        Get: Recordset(self: _IQueryTable) -> object
        Set: Recordset(self: _IQueryTable) = value
        """
        ...

    @property
    def Refreshing(self) -> bool:
        """ Get: Refreshing(self: _IQueryTable) -> bool """
        ...

    @property
    def RefreshOnFileOpen(self) -> bool:
        """
        Get: RefreshOnFileOpen(self: _IQueryTable) -> bool
        Set: RefreshOnFileOpen(self: _IQueryTable) = value
        """
        ...

    @property
    def RefreshPeriod(self) -> int:
        """
        Get: RefreshPeriod(self: _IQueryTable) -> int
        Set: RefreshPeriod(self: _IQueryTable) = value
        """
        ...

    @property
    def RefreshStyle(self) -> XlCellInsertionMode:
        """
        Get: RefreshStyle(self: _IQueryTable) -> XlCellInsertionMode
        Set: RefreshStyle(self: _IQueryTable) = value
        """
        ...

    @property
    def ResultRange(self) -> Range:
        """ Get: ResultRange(self: _IQueryTable) -> Range """
        ...

    @property
    def RobustConnect(self) -> XlRobustConnect:
        """
        Get: RobustConnect(self: _IQueryTable) -> XlRobustConnect
        Set: RobustConnect(self: _IQueryTable) = value
        """
        ...

    @property
    def RowNumbers(self) -> bool:
        """
        Get: RowNumbers(self: _IQueryTable) -> bool
        Set: RowNumbers(self: _IQueryTable) = value
        """
        ...

    @property
    def SaveData(self) -> bool:
        """
        Get: SaveData(self: _IQueryTable) -> bool
        Set: SaveData(self: _IQueryTable) = value
        """
        ...

    @property
    def SavePassword(self) -> bool:
        """
        Get: SavePassword(self: _IQueryTable) -> bool
        Set: SavePassword(self: _IQueryTable) = value
        """
        ...

    @property
    def Sort(self) -> Sort:
        """ Get: Sort(self: _IQueryTable) -> Sort """
        ...

    @property
    def SourceConnectionFile(self) -> str:
        """
        Get: SourceConnectionFile(self: _IQueryTable) -> str
        Set: SourceConnectionFile(self: _IQueryTable) = value
        """
        ...

    @property
    def SourceDataFile(self) -> str:
        """
        Get: SourceDataFile(self: _IQueryTable) -> str
        Set: SourceDataFile(self: _IQueryTable) = value
        """
        ...

    @property
    def Sql(self) -> object:
        """
        Get: Sql(self: _IQueryTable) -> object
        Set: Sql(self: _IQueryTable) = value
        """
        ...

    @property
    def TablesOnlyFromHTML(self) -> bool:
        """
        Get: TablesOnlyFromHTML(self: _IQueryTable) -> bool
        Set: TablesOnlyFromHTML(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileColumnDataTypes(self) -> object:
        """
        Get: TextFileColumnDataTypes(self: _IQueryTable) -> object
        Set: TextFileColumnDataTypes(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileCommaDelimiter(self) -> bool:
        """
        Get: TextFileCommaDelimiter(self: _IQueryTable) -> bool
        Set: TextFileCommaDelimiter(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileConsecutiveDelimiter(self) -> bool:
        """
        Get: TextFileConsecutiveDelimiter(self: _IQueryTable) -> bool
        Set: TextFileConsecutiveDelimiter(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileDecimalSeparator(self) -> str:
        """
        Get: TextFileDecimalSeparator(self: _IQueryTable) -> str
        Set: TextFileDecimalSeparator(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileFixedColumnWidths(self) -> object:
        """
        Get: TextFileFixedColumnWidths(self: _IQueryTable) -> object
        Set: TextFileFixedColumnWidths(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileOtherDelimiter(self) -> str:
        """
        Get: TextFileOtherDelimiter(self: _IQueryTable) -> str
        Set: TextFileOtherDelimiter(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileParseType(self) -> XlTextParsingType:
        """
        Get: TextFileParseType(self: _IQueryTable) -> XlTextParsingType
        Set: TextFileParseType(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFilePlatform(self) -> int:
        """
        Get: TextFilePlatform(self: _IQueryTable) -> int
        Set: TextFilePlatform(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFilePromptOnRefresh(self) -> bool:
        """
        Get: TextFilePromptOnRefresh(self: _IQueryTable) -> bool
        Set: TextFilePromptOnRefresh(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileSemicolonDelimiter(self) -> bool:
        """
        Get: TextFileSemicolonDelimiter(self: _IQueryTable) -> bool
        Set: TextFileSemicolonDelimiter(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileSpaceDelimiter(self) -> bool:
        """
        Get: TextFileSpaceDelimiter(self: _IQueryTable) -> bool
        Set: TextFileSpaceDelimiter(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileStartRow(self) -> int:
        """
        Get: TextFileStartRow(self: _IQueryTable) -> int
        Set: TextFileStartRow(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileTabDelimiter(self) -> bool:
        """
        Get: TextFileTabDelimiter(self: _IQueryTable) -> bool
        Set: TextFileTabDelimiter(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileTextQualifier(self) -> XlTextQualifier:
        """
        Get: TextFileTextQualifier(self: _IQueryTable) -> XlTextQualifier
        Set: TextFileTextQualifier(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileThousandsSeparator(self) -> str:
        """
        Get: TextFileThousandsSeparator(self: _IQueryTable) -> str
        Set: TextFileThousandsSeparator(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileTrailingMinusNumbers(self) -> bool:
        """
        Get: TextFileTrailingMinusNumbers(self: _IQueryTable) -> bool
        Set: TextFileTrailingMinusNumbers(self: _IQueryTable) = value
        """
        ...

    @property
    def TextFileVisualLayout(self) -> XlTextVisualLayoutType:
        """
        Get: TextFileVisualLayout(self: _IQueryTable) -> XlTextVisualLayoutType
        Set: TextFileVisualLayout(self: _IQueryTable) = value
        """
        ...

    @property
    def WebConsecutiveDelimitersAsOne(self) -> bool:
        """
        Get: WebConsecutiveDelimitersAsOne(self: _IQueryTable) -> bool
        Set: WebConsecutiveDelimitersAsOne(self: _IQueryTable) = value
        """
        ...

    @property
    def WebDisableDateRecognition(self) -> bool:
        """
        Get: WebDisableDateRecognition(self: _IQueryTable) -> bool
        Set: WebDisableDateRecognition(self: _IQueryTable) = value
        """
        ...

    @property
    def WebDisableRedirections(self) -> bool:
        """
        Get: WebDisableRedirections(self: _IQueryTable) -> bool
        Set: WebDisableRedirections(self: _IQueryTable) = value
        """
        ...

    @property
    def WebFormatting(self) -> XlWebFormatting:
        """
        Get: WebFormatting(self: _IQueryTable) -> XlWebFormatting
        Set: WebFormatting(self: _IQueryTable) = value
        """
        ...

    @property
    def WebPreFormattedTextToColumns(self) -> bool:
        """
        Get: WebPreFormattedTextToColumns(self: _IQueryTable) -> bool
        Set: WebPreFormattedTextToColumns(self: _IQueryTable) = value
        """
        ...

    @property
    def WebSelectionType(self) -> XlWebSelectionType:
        """
        Get: WebSelectionType(self: _IQueryTable) -> XlWebSelectionType
        Set: WebSelectionType(self: _IQueryTable) = value
        """
        ...

    @property
    def WebSingleBlockTextImport(self) -> bool:
        """
        Get: WebSingleBlockTextImport(self: _IQueryTable) -> bool
        Set: WebSingleBlockTextImport(self: _IQueryTable) = value
        """
        ...

    @property
    def WebTables(self) -> str:
        """
        Get: WebTables(self: _IQueryTable) -> str
        Set: WebTables(self: _IQueryTable) = value
        """
        ...

    @property
    def WorkbookConnection(self) -> WorkbookConnection:
        """ Get: WorkbookConnection(self: _IQueryTable) -> WorkbookConnection """
        ...


    def CancelRefresh(self): # -> 
        """ CancelRefresh(self: _IQueryTable) """
        ...

    def Delete(self): # -> 
        """ Delete(self: _IQueryTable) """
        ...

    def Refresh(self, BackgroundQuery:object) -> bool:
        """ Refresh(self: _IQueryTable, BackgroundQuery: object) -> bool """
        ...

    def ResetTimer(self): # -> 
        """ ResetTimer(self: _IQueryTable) """
        ...

    def SaveAsODC(self, ODCFileName:str, Description:object, Keywords:object): # -> 
        """ SaveAsODC(self: _IQueryTable, ODCFileName: str, Description: object, Keywords: object) """
        ...


