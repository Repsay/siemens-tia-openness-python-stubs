# encoding: utf-8
# module Microsoft.Office.Interop.Outlook calls itself Outlook
# from Microsoft.Office.Interop.Outlook, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c
# by generator 1.145
""" no doc """
from __future__ import annotations
from Microsoft.VisualStudio.CommandBars import CommandBar, CommandBars

from System import DateTime, Enum, MulticastDelegate, SByte, Single, UInt32

from System.Collections import IEnumerable, IEnumerator

from typing import Tuple as Tuple_

"""The following names are not found in the module: (AnswerWizard, Assistant, 
    BoundEvent, COMAddIns, ContactCard, IAssistance, LanguageSettings, 
    MsoFeatureInstall, PickerDialog, StdFont, StdPicture, __ComObject, field#)
"""

# no functions
# classes

class _Account: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AccountType(self) -> OlAccountType:
        """ Get: AccountType(self: _Account) -> OlAccountType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Account) -> Application """
        ...

    @property
    def AutoDiscoverConnectionMode(self) -> OlAutoDiscoverConnectionMode:
        """ Get: AutoDiscoverConnectionMode(self: _Account) -> OlAutoDiscoverConnectionMode """
        ...

    @property
    def AutoDiscoverXml(self) -> str:
        """ Get: AutoDiscoverXml(self: _Account) -> str """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Account) -> OlObjectClass """
        ...

    @property
    def CurrentUser(self) -> Recipient:
        """ Get: CurrentUser(self: _Account) -> Recipient """
        ...

    @property
    def DeliveryStore(self) -> Store:
        """ Get: DeliveryStore(self: _Account) -> Store """
        ...

    @property
    def DisplayName(self) -> str:
        """ Get: DisplayName(self: _Account) -> str """
        ...

    @property
    def ExchangeConnectionMode(self) -> OlExchangeConnectionMode:
        """ Get: ExchangeConnectionMode(self: _Account) -> OlExchangeConnectionMode """
        ...

    @property
    def ExchangeMailboxServerName(self) -> str:
        """ Get: ExchangeMailboxServerName(self: _Account) -> str """
        ...

    @property
    def ExchangeMailboxServerVersion(self) -> str:
        """ Get: ExchangeMailboxServerVersion(self: _Account) -> str """
        ...

    @property
    def IOlkAccount(self) -> object:
        """ Get: IOlkAccount(self: _Account) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Account) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Account) -> NameSpace """
        ...

    @property
    def SmtpAddress(self) -> str:
        """ Get: SmtpAddress(self: _Account) -> str """
        ...

    @property
    def UserName(self) -> str:
        """ Get: UserName(self: _Account) -> str """
        ...


    def GetAddressEntryFromID(self, ID:str) -> AddressEntry:
        """ GetAddressEntryFromID(self: _Account, ID: str) -> AddressEntry """
        ...

    def GetRecipientFromID(self, EntryID:str) -> Recipient:
        """ GetRecipientFromID(self: _Account, EntryID: str) -> Recipient """
        ...


class Account(_Account): # skipped bases: <type 'object'>
    """ no doc """
    pass

class AccountClass(Account, __ComObject): # skipped bases: <type '_Account'>, <type 'object'>
    """ no doc """
    @property
    def AccountType(self) -> OlAccountType:
        """ Get: AccountType(self: AccountClass) -> OlAccountType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: AccountClass) -> Application """
        ...

    @property
    def AutoDiscoverConnectionMode(self) -> OlAutoDiscoverConnectionMode:
        """ Get: AutoDiscoverConnectionMode(self: AccountClass) -> OlAutoDiscoverConnectionMode """
        ...

    @property
    def AutoDiscoverXml(self) -> str:
        """ Get: AutoDiscoverXml(self: AccountClass) -> str """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AccountClass) -> OlObjectClass """
        ...

    @property
    def CurrentUser(self) -> Recipient:
        """ Get: CurrentUser(self: AccountClass) -> Recipient """
        ...

    @property
    def DeliveryStore(self) -> Store:
        """ Get: DeliveryStore(self: AccountClass) -> Store """
        ...

    @property
    def DisplayName(self) -> str:
        """ Get: DisplayName(self: AccountClass) -> str """
        ...

    @property
    def ExchangeConnectionMode(self) -> OlExchangeConnectionMode:
        """ Get: ExchangeConnectionMode(self: AccountClass) -> OlExchangeConnectionMode """
        ...

    @property
    def ExchangeMailboxServerName(self) -> str:
        """ Get: ExchangeMailboxServerName(self: AccountClass) -> str """
        ...

    @property
    def ExchangeMailboxServerVersion(self) -> str:
        """ Get: ExchangeMailboxServerVersion(self: AccountClass) -> str """
        ...

    @property
    def IOlkAccount(self) -> object:
        """ Get: IOlkAccount(self: AccountClass) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AccountClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AccountClass) -> NameSpace """
        ...

    @property
    def SmtpAddress(self) -> str:
        """ Get: SmtpAddress(self: AccountClass) -> str """
        ...

    @property
    def UserName(self) -> str:
        """ Get: UserName(self: AccountClass) -> str """
        ...


    def GetAddressEntryFromID(self, ID:str) -> AddressEntry:
        """ GetAddressEntryFromID(self: AccountClass, ID: str) -> AddressEntry """
        ...

    def GetRecipientFromID(self, EntryID:str) -> Recipient:
        """ GetRecipientFromID(self: AccountClass, EntryID: str) -> Recipient """
        ...


class _AccountRuleCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Account(self) -> Account:
        """
        Get: Account(self: _AccountRuleCondition) -> Account
        Set: Account(self: _AccountRuleCondition) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _AccountRuleCondition) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _AccountRuleCondition) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: _AccountRuleCondition) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _AccountRuleCondition) -> bool
        Set: Enabled(self: _AccountRuleCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _AccountRuleCondition) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _AccountRuleCondition) -> NameSpace """
        ...



class AccountRuleCondition(_AccountRuleCondition): # skipped bases: <type 'object'>
    """ no doc """
    pass

class AccountRuleConditionClass(AccountRuleCondition, __ComObject): # skipped bases: <type '_AccountRuleCondition'>, <type 'object'>
    """ no doc """
    @property
    def Account(self) -> Account:
        """
        Get: Account(self: AccountRuleConditionClass) -> Account
        Set: Account(self: AccountRuleConditionClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: AccountRuleConditionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AccountRuleConditionClass) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: AccountRuleConditionClass) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: AccountRuleConditionClass) -> bool
        Set: Enabled(self: AccountRuleConditionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AccountRuleConditionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AccountRuleConditionClass) -> NameSpace """
        ...



class AccountsEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AutoDiscoverComplete(self): # -> 
        """ add_AutoDiscoverComplete(self: AccountsEvents_Event, : AccountsEvents_AutoDiscoverCompleteEventHandler) """
        ...

    def remove_AutoDiscoverComplete(self): # -> 
        """ remove_AutoDiscoverComplete(self: AccountsEvents_Event, : AccountsEvents_AutoDiscoverCompleteEventHandler) """
        ...

    AutoDiscoverComplete = ...


class _Accounts(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Accounts) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Accounts) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Accounts) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Accounts) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Accounts) -> NameSpace """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Accounts(_Accounts, AccountsEvents_Event): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class AccountsClass(Accounts, __ComObject): # skipped bases: <type 'AccountsEvents_Event'>, <type 'IEnumerable'>, <type '_Accounts'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AccountsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AccountsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: AccountsClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AccountsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AccountsClass) -> NameSpace """
        ...


    def add_AutoDiscoverComplete(self): # -> 
        """ add_AutoDiscoverComplete(self: AccountsClass, : AccountsEvents_AutoDiscoverCompleteEventHandler) """
        ...

    def remove_AutoDiscoverComplete(self): # -> 
        """ remove_AutoDiscoverComplete(self: AccountsClass, : AccountsEvents_AutoDiscoverCompleteEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AutoDiscoverComplete = ...


class AccountSelectorEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_SelectedAccountChange(self): # -> 
        """ add_SelectedAccountChange(self: AccountSelectorEvents_Event, : AccountSelectorEvents_SelectedAccountChangeEventHandler) """
        ...

    def remove_SelectedAccountChange(self): # -> 
        """ remove_SelectedAccountChange(self: AccountSelectorEvents_Event, : AccountSelectorEvents_SelectedAccountChangeEventHandler) """
        ...

    SelectedAccountChange = ...


class _AccountSelector: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _AccountSelector) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _AccountSelector) -> OlObjectClass """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _AccountSelector) -> object """
        ...

    @property
    def SelectedAccount(self) -> Account:
        """ Get: SelectedAccount(self: _AccountSelector) -> Account """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _AccountSelector) -> NameSpace """
        ...



class AccountSelector(AccountSelectorEvents_Event, _AccountSelector): # skipped bases: <type 'object'>
    """ no doc """
    pass

class AccountSelectorClass(AccountSelector, __ComObject): # skipped bases: <type '_AccountSelector'>, <type 'AccountSelectorEvents_Event'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AccountSelectorClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AccountSelectorClass) -> OlObjectClass """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AccountSelectorClass) -> object """
        ...

    @property
    def SelectedAccount(self) -> Account:
        """ Get: SelectedAccount(self: AccountSelectorClass) -> Account """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AccountSelectorClass) -> NameSpace """
        ...


    def add_SelectedAccountChange(self): # -> 
        """ add_SelectedAccountChange(self: AccountSelectorClass, : AccountSelectorEvents_SelectedAccountChangeEventHandler) """
        ...

    def remove_SelectedAccountChange(self): # -> 
        """ remove_SelectedAccountChange(self: AccountSelectorClass, : AccountSelectorEvents_SelectedAccountChangeEventHandler) """
        ...

    SelectedAccountChange = ...


class AccountSelectorEvents: # skipped bases: <type 'object'>
    """ no doc """
    def SelectedAccountChange(self, SelectedAccount:Account): # -> 
        """ SelectedAccountChange(self: AccountSelectorEvents, SelectedAccount: Account) """
        ...


class AccountSelectorEvents_SelectedAccountChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AccountSelectorEvents_SelectedAccountChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, SelectedAccount:Account): # -> 
        """ Invoke(self: AccountSelectorEvents_SelectedAccountChangeEventHandler, SelectedAccount: Account) """
        ...


class AccountSelectorEvents_SinkHelper(AccountSelectorEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_SelectedAccountChangeDelegate = ...


class AccountsEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AutoDiscoverComplete(self, Account:Account): # -> 
        """ AutoDiscoverComplete(self: AccountsEvents, Account: Account) """
        ...


class AccountsEvents_AutoDiscoverCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ AccountsEvents_AutoDiscoverCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, Account:Account): # -> 
        """ Invoke(self: AccountsEvents_AutoDiscoverCompleteEventHandler, Account: Account) """
        ...


class AccountsEvents_SinkHelper(AccountsEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AutoDiscoverCompleteDelegate = ...
    m_dwCookie = ...


class Action: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Action) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Action) -> OlObjectClass """
        ...

    @property
    def CopyLike(self) -> OlActionCopyLike:
        """
        Get: CopyLike(self: Action) -> OlActionCopyLike
        Set: CopyLike(self: Action) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: Action) -> bool
        Set: Enabled(self: Action) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: Action) -> str
        Set: MessageClass(self: Action) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Action) -> str
        Set: Name(self: Action) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Action) -> object """
        ...

    @property
    def Prefix(self) -> str:
        """
        Get: Prefix(self: Action) -> str
        Set: Prefix(self: Action) = value
        """
        ...

    @property
    def ReplyStyle(self) -> OlActionReplyStyle:
        """
        Get: ReplyStyle(self: Action) -> OlActionReplyStyle
        Set: ReplyStyle(self: Action) = value
        """
        ...

    @property
    def ResponseStyle(self) -> OlActionResponseStyle:
        """
        Get: ResponseStyle(self: Action) -> OlActionResponseStyle
        Set: ResponseStyle(self: Action) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Action) -> NameSpace """
        ...

    @property
    def ShowOn(self) -> OlActionShowOn:
        """
        Get: ShowOn(self: Action) -> OlActionShowOn
        Set: ShowOn(self: Action) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: Action) """
        ...

    def Execute(self) -> object:
        """ Execute(self: Action) -> object """
        ...


class Actions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Actions) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Actions) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Actions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Actions) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Actions) -> NameSpace """
        ...


    def Add(self) -> Action:
        """ Add(self: Actions) -> Action """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: Actions, Index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AddressEntries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AddressEntries) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AddressEntries) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: AddressEntries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AddressEntries) -> object """
        ...

    @property
    def RawTable(self) -> object:
        """ Get: RawTable(self: AddressEntries) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AddressEntries) -> NameSpace """
        ...


    def Add(self, Type:str, Name:object, Address:object) -> AddressEntry:
        """ Add(self: AddressEntries, Type: str, Name: object, Address: object) -> AddressEntry """
        ...

    def GetFirst(self) -> AddressEntry:
        """ GetFirst(self: AddressEntries) -> AddressEntry """
        ...

    def GetLast(self) -> AddressEntry:
        """ GetLast(self: AddressEntries) -> AddressEntry """
        ...

    def GetNext(self) -> AddressEntry:
        """ GetNext(self: AddressEntries) -> AddressEntry """
        ...

    def GetPrevious(self) -> AddressEntry:
        """ GetPrevious(self: AddressEntries) -> AddressEntry """
        ...

    def Sort(self, Property:object, Order:object): # -> 
        """ Sort(self: AddressEntries, Property: object, Order: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AddressEntry: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Address(self) -> str:
        """
        Get: Address(self: AddressEntry) -> str
        Set: Address(self: AddressEntry) = value
        """
        ...

    @property
    def AddressEntryUserType(self) -> OlAddressEntryUserType:
        """ Get: AddressEntryUserType(self: AddressEntry) -> OlAddressEntryUserType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: AddressEntry) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AddressEntry) -> OlObjectClass """
        ...

    @property
    def DisplayType(self) -> OlDisplayType:
        """ Get: DisplayType(self: AddressEntry) -> OlDisplayType """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: AddressEntry) -> str """
        ...

    @property
    def Manager(self) -> AddressEntry:
        """ Get: Manager(self: AddressEntry) -> AddressEntry """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """
        Get: MAPIOBJECT(self: AddressEntry) -> object
        Set: MAPIOBJECT(self: AddressEntry) = value
        """
        ...

    @property
    def Members(self) -> AddressEntries:
        """ Get: Members(self: AddressEntry) -> AddressEntries """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: AddressEntry) -> str
        Set: Name(self: AddressEntry) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AddressEntry) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: AddressEntry) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AddressEntry) -> NameSpace """
        ...

    @property
    def Type(self) -> str:
        """
        Get: Type(self: AddressEntry) -> str
        Set: Type(self: AddressEntry) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: AddressEntry) """
        ...

    def Details(self, HWnd:object): # -> 
        """ Details(self: AddressEntry, HWnd: object) """
        ...

    def GetContact(self) -> ContactItem:
        """ GetContact(self: AddressEntry) -> ContactItem """
        ...

    def GetExchangeDistributionList(self) -> ExchangeDistributionList:
        """ GetExchangeDistributionList(self: AddressEntry) -> ExchangeDistributionList """
        ...

    def GetExchangeUser(self) -> ExchangeUser:
        """ GetExchangeUser(self: AddressEntry) -> ExchangeUser """
        ...

    def GetFreeBusy(self, Start:DateTime, MinPerChar:int, CompleteFormat:object) -> str:
        """ GetFreeBusy(self: AddressEntry, Start: DateTime, MinPerChar: int, CompleteFormat: object) -> str """
        ...

    def Update(self, MakePermanent:object, Refresh:object): # -> 
        """ Update(self: AddressEntry, MakePermanent: object, Refresh: object) """
        ...

    def UpdateFreeBusy(self): # -> 
        """ UpdateFreeBusy(self: AddressEntry) """
        ...


class AddressList: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddressEntries(self) -> AddressEntries:
        """ Get: AddressEntries(self: AddressList) -> AddressEntries """
        ...

    @property
    def AddressListType(self) -> OlAddressListType:
        """ Get: AddressListType(self: AddressList) -> OlAddressListType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: AddressList) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AddressList) -> OlObjectClass """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: AddressList) -> str """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: AddressList) -> int """
        ...

    @property
    def IsInitialAddressList(self) -> bool:
        """ Get: IsInitialAddressList(self: AddressList) -> bool """
        ...

    @property
    def IsReadOnly(self) -> bool:
        """ Get: IsReadOnly(self: AddressList) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: AddressList) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AddressList) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: AddressList) -> PropertyAccessor """
        ...

    @property
    def ResolutionOrder(self) -> int:
        """ Get: ResolutionOrder(self: AddressList) -> int """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AddressList) -> NameSpace """
        ...


    def GetContactsFolder(self) -> MAPIFolder:
        """ GetContactsFolder(self: AddressList) -> MAPIFolder """
        ...


class AddressLists(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AddressLists) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AddressLists) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: AddressLists) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AddressLists) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AddressLists) -> NameSpace """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _AddressRuleCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Address(self) -> object:
        """
        Get: Address(self: _AddressRuleCondition) -> object
        Set: Address(self: _AddressRuleCondition) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _AddressRuleCondition) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _AddressRuleCondition) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: _AddressRuleCondition) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _AddressRuleCondition) -> bool
        Set: Enabled(self: _AddressRuleCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _AddressRuleCondition) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _AddressRuleCondition) -> NameSpace """
        ...



class AddressRuleCondition(_AddressRuleCondition): # skipped bases: <type 'object'>
    """ no doc """
    pass

class AddressRuleConditionClass(__ComObject, AddressRuleCondition): # skipped bases: <type '_AddressRuleCondition'>, <type 'object'>
    """ no doc """
    @property
    def Address(self) -> object:
        """
        Get: Address(self: AddressRuleConditionClass) -> object
        Set: Address(self: AddressRuleConditionClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: AddressRuleConditionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AddressRuleConditionClass) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: AddressRuleConditionClass) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: AddressRuleConditionClass) -> bool
        Set: Enabled(self: AddressRuleConditionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AddressRuleConditionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AddressRuleConditionClass) -> NameSpace """
        ...



class ApplicationEvents_11_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AdvancedSearchComplete(self): # -> 
        """ add_AdvancedSearchComplete(self: ApplicationEvents_11_Event, : ApplicationEvents_11_AdvancedSearchCompleteEventHandler) """
        ...

    def add_AdvancedSearchStopped(self): # -> 
        """ add_AdvancedSearchStopped(self: ApplicationEvents_11_Event, : ApplicationEvents_11_AdvancedSearchStoppedEventHandler) """
        ...

    def add_AttachmentContextMenuDisplay(self): # -> 
        """ add_AttachmentContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_AttachmentContextMenuDisplayEventHandler) """
        ...

    def add_BeforeFolderSharingDialog(self): # -> 
        """ add_BeforeFolderSharingDialog(self: ApplicationEvents_11_Event, : ApplicationEvents_11_BeforeFolderSharingDialogEventHandler) """
        ...

    def add_ContextMenuClose(self): # -> 
        """ add_ContextMenuClose(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ContextMenuCloseEventHandler) """
        ...

    def add_FolderContextMenuDisplay(self): # -> 
        """ add_FolderContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_FolderContextMenuDisplayEventHandler) """
        ...

    def add_ItemContextMenuDisplay(self): # -> 
        """ add_ItemContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ItemContextMenuDisplayEventHandler) """
        ...

    def add_ItemLoad(self): # -> 
        """ add_ItemLoad(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ItemLoadEventHandler) """
        ...

    def add_ItemSend(self): # -> 
        """ add_ItemSend(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ItemSendEventHandler) """
        ...

    def add_MAPILogonComplete(self): # -> 
        """ add_MAPILogonComplete(self: ApplicationEvents_11_Event, : ApplicationEvents_11_MAPILogonCompleteEventHandler) """
        ...

    def add_NewMail(self): # -> 
        """ add_NewMail(self: ApplicationEvents_11_Event, : ApplicationEvents_11_NewMailEventHandler) """
        ...

    def add_NewMailEx(self): # -> 
        """ add_NewMailEx(self: ApplicationEvents_11_Event, : ApplicationEvents_11_NewMailExEventHandler) """
        ...

    def add_OptionsPagesAdd(self): # -> 
        """ add_OptionsPagesAdd(self: ApplicationEvents_11_Event, : ApplicationEvents_11_OptionsPagesAddEventHandler) """
        ...

    def add_Quit(self): # -> 
        """ add_Quit(self: ApplicationEvents_11_Event, : ApplicationEvents_11_QuitEventHandler) """
        ...

    def add_Reminder(self): # -> 
        """ add_Reminder(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ReminderEventHandler) """
        ...

    def add_ShortcutContextMenuDisplay(self): # -> 
        """ add_ShortcutContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ShortcutContextMenuDisplayEventHandler) """
        ...

    def add_Startup(self): # -> 
        """ add_Startup(self: ApplicationEvents_11_Event, : ApplicationEvents_11_StartupEventHandler) """
        ...

    def add_StoreContextMenuDisplay(self): # -> 
        """ add_StoreContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_StoreContextMenuDisplayEventHandler) """
        ...

    def add_ViewContextMenuDisplay(self): # -> 
        """ add_ViewContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ViewContextMenuDisplayEventHandler) """
        ...

    def remove_AdvancedSearchComplete(self): # -> 
        """ remove_AdvancedSearchComplete(self: ApplicationEvents_11_Event, : ApplicationEvents_11_AdvancedSearchCompleteEventHandler) """
        ...

    def remove_AdvancedSearchStopped(self): # -> 
        """ remove_AdvancedSearchStopped(self: ApplicationEvents_11_Event, : ApplicationEvents_11_AdvancedSearchStoppedEventHandler) """
        ...

    def remove_AttachmentContextMenuDisplay(self): # -> 
        """ remove_AttachmentContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_AttachmentContextMenuDisplayEventHandler) """
        ...

    def remove_BeforeFolderSharingDialog(self): # -> 
        """ remove_BeforeFolderSharingDialog(self: ApplicationEvents_11_Event, : ApplicationEvents_11_BeforeFolderSharingDialogEventHandler) """
        ...

    def remove_ContextMenuClose(self): # -> 
        """ remove_ContextMenuClose(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ContextMenuCloseEventHandler) """
        ...

    def remove_FolderContextMenuDisplay(self): # -> 
        """ remove_FolderContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_FolderContextMenuDisplayEventHandler) """
        ...

    def remove_ItemContextMenuDisplay(self): # -> 
        """ remove_ItemContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ItemContextMenuDisplayEventHandler) """
        ...

    def remove_ItemLoad(self): # -> 
        """ remove_ItemLoad(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ItemLoadEventHandler) """
        ...

    def remove_ItemSend(self): # -> 
        """ remove_ItemSend(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ItemSendEventHandler) """
        ...

    def remove_MAPILogonComplete(self): # -> 
        """ remove_MAPILogonComplete(self: ApplicationEvents_11_Event, : ApplicationEvents_11_MAPILogonCompleteEventHandler) """
        ...

    def remove_NewMail(self): # -> 
        """ remove_NewMail(self: ApplicationEvents_11_Event, : ApplicationEvents_11_NewMailEventHandler) """
        ...

    def remove_NewMailEx(self): # -> 
        """ remove_NewMailEx(self: ApplicationEvents_11_Event, : ApplicationEvents_11_NewMailExEventHandler) """
        ...

    def remove_OptionsPagesAdd(self): # -> 
        """ remove_OptionsPagesAdd(self: ApplicationEvents_11_Event, : ApplicationEvents_11_OptionsPagesAddEventHandler) """
        ...

    def remove_Quit(self): # -> 
        """ remove_Quit(self: ApplicationEvents_11_Event, : ApplicationEvents_11_QuitEventHandler) """
        ...

    def remove_Reminder(self): # -> 
        """ remove_Reminder(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ReminderEventHandler) """
        ...

    def remove_ShortcutContextMenuDisplay(self): # -> 
        """ remove_ShortcutContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ShortcutContextMenuDisplayEventHandler) """
        ...

    def remove_Startup(self): # -> 
        """ remove_Startup(self: ApplicationEvents_11_Event, : ApplicationEvents_11_StartupEventHandler) """
        ...

    def remove_StoreContextMenuDisplay(self): # -> 
        """ remove_StoreContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_StoreContextMenuDisplayEventHandler) """
        ...

    def remove_ViewContextMenuDisplay(self): # -> 
        """ remove_ViewContextMenuDisplay(self: ApplicationEvents_11_Event, : ApplicationEvents_11_ViewContextMenuDisplayEventHandler) """
        ...

    AdvancedSearchComplete = ...
    AdvancedSearchStopped = ...
    AttachmentContextMenuDisplay = ...
    BeforeFolderSharingDialog = ...
    ContextMenuClose = ...
    FolderContextMenuDisplay = ...
    ItemContextMenuDisplay = ...
    ItemLoad = ...
    ItemSend = ...
    MAPILogonComplete = ...
    NewMail = ...
    NewMailEx = ...
    OptionsPagesAdd = ...
    Quit = ...
    Reminder = ...
    ShortcutContextMenuDisplay = ...
    Startup = ...
    StoreContextMenuDisplay = ...
    ViewContextMenuDisplay = ...


class _Application: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AnswerWizard(self): # -> AnswerWizard
        """ Get: AnswerWizard(self: _Application) -> AnswerWizard """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Application) -> Application """
        ...

    @property
    def Assistance(self): # -> IAssistance
        """ Get: Assistance(self: _Application) -> IAssistance """
        ...

    @property
    def Assistant(self): # -> Assistant
        """ Get: Assistant(self: _Application) -> Assistant """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Application) -> OlObjectClass """
        ...

    @property
    def COMAddIns(self): # -> COMAddIns
        """ Get: COMAddIns(self: _Application) -> COMAddIns """
        ...

    @property
    def DefaultProfileName(self) -> str:
        """ Get: DefaultProfileName(self: _Application) -> str """
        ...

    @property
    def Explorers(self) -> Explorers:
        """ Get: Explorers(self: _Application) -> Explorers """
        ...

    @property
    def FeatureInstall(self): # -> MsoFeatureInstall
        """
        Get: FeatureInstall(self: _Application) -> MsoFeatureInstall
        Set: FeatureInstall(self: _Application) = value
        """
        ...

    @property
    def Inspectors(self) -> Inspectors:
        """ Get: Inspectors(self: _Application) -> Inspectors """
        ...

    @property
    def IsTrusted(self) -> bool:
        """ Get: IsTrusted(self: _Application) -> bool """
        ...

    @property
    def LanguageSettings(self): # -> LanguageSettings
        """ Get: LanguageSettings(self: _Application) -> LanguageSettings """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _Application) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Application) -> object """
        ...

    @property
    def PickerDialog(self): # -> PickerDialog
        """ Get: PickerDialog(self: _Application) -> PickerDialog """
        ...

    @property
    def ProductCode(self) -> str:
        """ Get: ProductCode(self: _Application) -> str """
        ...

    @property
    def Reminders(self) -> Reminders:
        """ Get: Reminders(self: _Application) -> Reminders """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Application) -> NameSpace """
        ...

    @property
    def TimeZones(self) -> TimeZones:
        """ Get: TimeZones(self: _Application) -> TimeZones """
        ...

    @property
    def Version(self) -> str:
        """ Get: Version(self: _Application) -> str """
        ...


    def ActiveExplorer(self) -> Explorer:
        """ ActiveExplorer(self: _Application) -> Explorer """
        ...

    def ActiveInspector(self) -> Inspector:
        """ ActiveInspector(self: _Application) -> Inspector """
        ...

    def ActiveWindow(self) -> object:
        """ ActiveWindow(self: _Application) -> object """
        ...

    def AdvancedSearch(self, Scope:str, Filter:object, SearchSubFolders:object, Tag:object) -> Search:
        """ AdvancedSearch(self: _Application, Scope: str, Filter: object, SearchSubFolders: object, Tag: object) -> Search """
        ...

    def CopyFile(self, FilePath:str, DestFolderPath:str) -> object:
        """ CopyFile(self: _Application, FilePath: str, DestFolderPath: str) -> object """
        ...

    def CreateItem(self, ItemType:OlItemType) -> object:
        """ CreateItem(self: _Application, ItemType: OlItemType) -> object """
        ...

    def CreateItemFromTemplate(self, TemplatePath:str, InFolder:object) -> object:
        """ CreateItemFromTemplate(self: _Application, TemplatePath: str, InFolder: object) -> object """
        ...

    def CreateObject(self, ObjectName:str) -> object:
        """ CreateObject(self: _Application, ObjectName: str) -> object """
        ...

    def GetNamespace(self, Type:str) -> NameSpace:
        """ GetNamespace(self: _Application, Type: str) -> NameSpace """
        ...

    def GetNewNickNames(self, pvar:object) -> object:
        """ GetNewNickNames(self: _Application, pvar: object) -> object """
        ...

    def GetObjectReference(self, Item:object, ReferenceType:OlReferenceType) -> object:
        """ GetObjectReference(self: _Application, Item: object, ReferenceType: OlReferenceType) -> object """
        ...

    def IsSearchSynchronous(self, LookInFolders:str) -> bool:
        """ IsSearchSynchronous(self: _Application, LookInFolders: str) -> bool """
        ...

    def Quit(self): # -> 
        """ Quit(self: _Application) """
        ...

    def RefreshFormRegionDefinition(self, RegionName:str): # -> 
        """ RefreshFormRegionDefinition(self: _Application, RegionName: str) """
        ...


class Application(ApplicationEvents_11_Event, _Application): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ApplicationClass(Application, ApplicationEvents_10_Event, __ComObject, ApplicationEvents_Event): # skipped bases: <type 'ApplicationEvents_11_Event'>, <type '_Application'>, <type 'object'>
    """ ApplicationClass() """
    @property
    def AnswerWizard(self): # -> AnswerWizard
        """ Get: AnswerWizard(self: ApplicationClass) -> AnswerWizard """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ApplicationClass) -> Application """
        ...

    @property
    def Assistance(self): # -> IAssistance
        """ Get: Assistance(self: ApplicationClass) -> IAssistance """
        ...

    @property
    def Assistant(self): # -> Assistant
        """ Get: Assistant(self: ApplicationClass) -> Assistant """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ApplicationClass) -> OlObjectClass """
        ...

    @property
    def COMAddIns(self): # -> COMAddIns
        """ Get: COMAddIns(self: ApplicationClass) -> COMAddIns """
        ...

    @property
    def DefaultProfileName(self) -> str:
        """ Get: DefaultProfileName(self: ApplicationClass) -> str """
        ...

    @property
    def Explorers(self) -> Explorers:
        """ Get: Explorers(self: ApplicationClass) -> Explorers """
        ...

    @property
    def FeatureInstall(self): # -> MsoFeatureInstall
        """
        Get: FeatureInstall(self: ApplicationClass) -> MsoFeatureInstall
        Set: FeatureInstall(self: ApplicationClass) = value
        """
        ...

    @property
    def Inspectors(self) -> Inspectors:
        """ Get: Inspectors(self: ApplicationClass) -> Inspectors """
        ...

    @property
    def IsTrusted(self) -> bool:
        """ Get: IsTrusted(self: ApplicationClass) -> bool """
        ...

    @property
    def LanguageSettings(self): # -> LanguageSettings
        """ Get: LanguageSettings(self: ApplicationClass) -> LanguageSettings """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ApplicationClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ApplicationClass) -> object """
        ...

    @property
    def PickerDialog(self): # -> PickerDialog
        """ Get: PickerDialog(self: ApplicationClass) -> PickerDialog """
        ...

    @property
    def ProductCode(self) -> str:
        """ Get: ProductCode(self: ApplicationClass) -> str """
        ...

    @property
    def Reminders(self) -> Reminders:
        """ Get: Reminders(self: ApplicationClass) -> Reminders """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ApplicationClass) -> NameSpace """
        ...

    @property
    def TimeZones(self) -> TimeZones:
        """ Get: TimeZones(self: ApplicationClass) -> TimeZones """
        ...

    @property
    def Version(self) -> str:
        """ Get: Version(self: ApplicationClass) -> str """
        ...


    def ActiveExplorer(self) -> Explorer:
        """ ActiveExplorer(self: ApplicationClass) -> Explorer """
        ...

    def ActiveInspector(self) -> Inspector:
        """ ActiveInspector(self: ApplicationClass) -> Inspector """
        ...

    def ActiveWindow(self) -> object:
        """ ActiveWindow(self: ApplicationClass) -> object """
        ...

    def add_AttachmentContextMenuDisplay(self): # -> 
        """ add_AttachmentContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_AttachmentContextMenuDisplayEventHandler) """
        ...

    def add_BeforeFolderSharingDialog(self): # -> 
        """ add_BeforeFolderSharingDialog(self: ApplicationClass, : ApplicationEvents_11_BeforeFolderSharingDialogEventHandler) """
        ...

    def add_ContextMenuClose(self): # -> 
        """ add_ContextMenuClose(self: ApplicationClass, : ApplicationEvents_11_ContextMenuCloseEventHandler) """
        ...

    def add_FolderContextMenuDisplay(self): # -> 
        """ add_FolderContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_FolderContextMenuDisplayEventHandler) """
        ...

    def add_ItemContextMenuDisplay(self): # -> 
        """ add_ItemContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_ItemContextMenuDisplayEventHandler) """
        ...

    def add_ItemLoad(self): # -> 
        """ add_ItemLoad(self: ApplicationClass, : ApplicationEvents_11_ItemLoadEventHandler) """
        ...

    def add_NewMailEx(self): # -> 
        """ add_NewMailEx(self: ApplicationClass, : ApplicationEvents_11_NewMailExEventHandler) """
        ...

    def add_ShortcutContextMenuDisplay(self): # -> 
        """ add_ShortcutContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_ShortcutContextMenuDisplayEventHandler) """
        ...

    def add_StoreContextMenuDisplay(self): # -> 
        """ add_StoreContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_StoreContextMenuDisplayEventHandler) """
        ...

    def add_ViewContextMenuDisplay(self): # -> 
        """ add_ViewContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_ViewContextMenuDisplayEventHandler) """
        ...

    def AdvancedSearch(self, Scope:str, Filter:object, SearchSubFolders:object, Tag:object) -> Search:
        """ AdvancedSearch(self: ApplicationClass, Scope: str, Filter: object, SearchSubFolders: object, Tag: object) -> Search """
        ...

    def ApplicationEvents_10_Event_add_AdvancedSearchComplete(self): # -> 
        """ ApplicationEvents_10_Event_add_AdvancedSearchComplete(self: ApplicationClass, : ApplicationEvents_10_AdvancedSearchCompleteEventHandler) """
        ...

    def ApplicationEvents_10_Event_add_AdvancedSearchStopped(self): # -> 
        """ ApplicationEvents_10_Event_add_AdvancedSearchStopped(self: ApplicationClass, : ApplicationEvents_10_AdvancedSearchStoppedEventHandler) """
        ...

    def ApplicationEvents_10_Event_add_ItemSend(self): # -> 
        """ ApplicationEvents_10_Event_add_ItemSend(self: ApplicationClass, : ApplicationEvents_10_ItemSendEventHandler) """
        ...

    def ApplicationEvents_10_Event_add_MAPILogonComplete(self): # -> 
        """ ApplicationEvents_10_Event_add_MAPILogonComplete(self: ApplicationClass, : ApplicationEvents_10_MAPILogonCompleteEventHandler) """
        ...

    def ApplicationEvents_10_Event_add_NewMail(self): # -> 
        """ ApplicationEvents_10_Event_add_NewMail(self: ApplicationClass, : ApplicationEvents_10_NewMailEventHandler) """
        ...

    def ApplicationEvents_10_Event_add_OptionsPagesAdd(self): # -> 
        """ ApplicationEvents_10_Event_add_OptionsPagesAdd(self: ApplicationClass, : ApplicationEvents_10_OptionsPagesAddEventHandler) """
        ...

    def ApplicationEvents_10_Event_add_Quit(self): # -> 
        """ ApplicationEvents_10_Event_add_Quit(self: ApplicationClass, : ApplicationEvents_10_QuitEventHandler) """
        ...

    def ApplicationEvents_10_Event_add_Reminder(self): # -> 
        """ ApplicationEvents_10_Event_add_Reminder(self: ApplicationClass, : ApplicationEvents_10_ReminderEventHandler) """
        ...

    def ApplicationEvents_10_Event_add_Startup(self): # -> 
        """ ApplicationEvents_10_Event_add_Startup(self: ApplicationClass, : ApplicationEvents_10_StartupEventHandler) """
        ...

    def ApplicationEvents_10_Event_remove_AdvancedSearchComplete(self): # -> 
        """ ApplicationEvents_10_Event_remove_AdvancedSearchComplete(self: ApplicationClass, : ApplicationEvents_10_AdvancedSearchCompleteEventHandler) """
        ...

    def ApplicationEvents_10_Event_remove_AdvancedSearchStopped(self): # -> 
        """ ApplicationEvents_10_Event_remove_AdvancedSearchStopped(self: ApplicationClass, : ApplicationEvents_10_AdvancedSearchStoppedEventHandler) """
        ...

    def ApplicationEvents_10_Event_remove_ItemSend(self): # -> 
        """ ApplicationEvents_10_Event_remove_ItemSend(self: ApplicationClass, : ApplicationEvents_10_ItemSendEventHandler) """
        ...

    def ApplicationEvents_10_Event_remove_MAPILogonComplete(self): # -> 
        """ ApplicationEvents_10_Event_remove_MAPILogonComplete(self: ApplicationClass, : ApplicationEvents_10_MAPILogonCompleteEventHandler) """
        ...

    def ApplicationEvents_10_Event_remove_NewMail(self): # -> 
        """ ApplicationEvents_10_Event_remove_NewMail(self: ApplicationClass, : ApplicationEvents_10_NewMailEventHandler) """
        ...

    def ApplicationEvents_10_Event_remove_OptionsPagesAdd(self): # -> 
        """ ApplicationEvents_10_Event_remove_OptionsPagesAdd(self: ApplicationClass, : ApplicationEvents_10_OptionsPagesAddEventHandler) """
        ...

    def ApplicationEvents_10_Event_remove_Quit(self): # -> 
        """ ApplicationEvents_10_Event_remove_Quit(self: ApplicationClass, : ApplicationEvents_10_QuitEventHandler) """
        ...

    def ApplicationEvents_10_Event_remove_Reminder(self): # -> 
        """ ApplicationEvents_10_Event_remove_Reminder(self: ApplicationClass, : ApplicationEvents_10_ReminderEventHandler) """
        ...

    def ApplicationEvents_10_Event_remove_Startup(self): # -> 
        """ ApplicationEvents_10_Event_remove_Startup(self: ApplicationClass, : ApplicationEvents_10_StartupEventHandler) """
        ...

    def ApplicationEvents_Event_add_ItemSend(self): # -> 
        """ ApplicationEvents_Event_add_ItemSend(self: ApplicationClass, : ApplicationEvents_ItemSendEventHandler) """
        ...

    def ApplicationEvents_Event_add_NewMail(self): # -> 
        """ ApplicationEvents_Event_add_NewMail(self: ApplicationClass, : ApplicationEvents_NewMailEventHandler) """
        ...

    def ApplicationEvents_Event_add_OptionsPagesAdd(self): # -> 
        """ ApplicationEvents_Event_add_OptionsPagesAdd(self: ApplicationClass, : ApplicationEvents_OptionsPagesAddEventHandler) """
        ...

    def ApplicationEvents_Event_add_Quit(self): # -> 
        """ ApplicationEvents_Event_add_Quit(self: ApplicationClass, : ApplicationEvents_QuitEventHandler) """
        ...

    def ApplicationEvents_Event_add_Reminder(self): # -> 
        """ ApplicationEvents_Event_add_Reminder(self: ApplicationClass, : ApplicationEvents_ReminderEventHandler) """
        ...

    def ApplicationEvents_Event_add_Startup(self): # -> 
        """ ApplicationEvents_Event_add_Startup(self: ApplicationClass, : ApplicationEvents_StartupEventHandler) """
        ...

    def ApplicationEvents_Event_remove_ItemSend(self): # -> 
        """ ApplicationEvents_Event_remove_ItemSend(self: ApplicationClass, : ApplicationEvents_ItemSendEventHandler) """
        ...

    def ApplicationEvents_Event_remove_NewMail(self): # -> 
        """ ApplicationEvents_Event_remove_NewMail(self: ApplicationClass, : ApplicationEvents_NewMailEventHandler) """
        ...

    def ApplicationEvents_Event_remove_OptionsPagesAdd(self): # -> 
        """ ApplicationEvents_Event_remove_OptionsPagesAdd(self: ApplicationClass, : ApplicationEvents_OptionsPagesAddEventHandler) """
        ...

    def ApplicationEvents_Event_remove_Quit(self): # -> 
        """ ApplicationEvents_Event_remove_Quit(self: ApplicationClass, : ApplicationEvents_QuitEventHandler) """
        ...

    def ApplicationEvents_Event_remove_Reminder(self): # -> 
        """ ApplicationEvents_Event_remove_Reminder(self: ApplicationClass, : ApplicationEvents_ReminderEventHandler) """
        ...

    def ApplicationEvents_Event_remove_Startup(self): # -> 
        """ ApplicationEvents_Event_remove_Startup(self: ApplicationClass, : ApplicationEvents_StartupEventHandler) """
        ...

    def CopyFile(self, FilePath:str, DestFolderPath:str) -> object:
        """ CopyFile(self: ApplicationClass, FilePath: str, DestFolderPath: str) -> object """
        ...

    def CreateItem(self, ItemType:OlItemType) -> object:
        """ CreateItem(self: ApplicationClass, ItemType: OlItemType) -> object """
        ...

    def CreateItemFromTemplate(self, TemplatePath:str, InFolder:object) -> object:
        """ CreateItemFromTemplate(self: ApplicationClass, TemplatePath: str, InFolder: object) -> object """
        ...

    def CreateObject(self, ObjectName:str) -> object:
        """ CreateObject(self: ApplicationClass, ObjectName: str) -> object """
        ...

    def GetNamespace(self, Type:str) -> NameSpace:
        """ GetNamespace(self: ApplicationClass, Type: str) -> NameSpace """
        ...

    def GetNewNickNames(self, pvar:object) -> object:
        """ GetNewNickNames(self: ApplicationClass, pvar: object) -> object """
        ...

    def GetObjectReference(self, Item:object, ReferenceType:OlReferenceType) -> object:
        """ GetObjectReference(self: ApplicationClass, Item: object, ReferenceType: OlReferenceType) -> object """
        ...

    def IsSearchSynchronous(self, LookInFolders:str) -> bool:
        """ IsSearchSynchronous(self: ApplicationClass, LookInFolders: str) -> bool """
        ...

    def Quit(self): # -> 
        """ Quit(self: ApplicationClass) """
        ...

    def RefreshFormRegionDefinition(self, RegionName:str): # -> 
        """ RefreshFormRegionDefinition(self: ApplicationClass, RegionName: str) """
        ...

    def remove_AttachmentContextMenuDisplay(self): # -> 
        """ remove_AttachmentContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_AttachmentContextMenuDisplayEventHandler) """
        ...

    def remove_BeforeFolderSharingDialog(self): # -> 
        """ remove_BeforeFolderSharingDialog(self: ApplicationClass, : ApplicationEvents_11_BeforeFolderSharingDialogEventHandler) """
        ...

    def remove_ContextMenuClose(self): # -> 
        """ remove_ContextMenuClose(self: ApplicationClass, : ApplicationEvents_11_ContextMenuCloseEventHandler) """
        ...

    def remove_FolderContextMenuDisplay(self): # -> 
        """ remove_FolderContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_FolderContextMenuDisplayEventHandler) """
        ...

    def remove_ItemContextMenuDisplay(self): # -> 
        """ remove_ItemContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_ItemContextMenuDisplayEventHandler) """
        ...

    def remove_ItemLoad(self): # -> 
        """ remove_ItemLoad(self: ApplicationClass, : ApplicationEvents_11_ItemLoadEventHandler) """
        ...

    def remove_NewMailEx(self): # -> 
        """ remove_NewMailEx(self: ApplicationClass, : ApplicationEvents_11_NewMailExEventHandler) """
        ...

    def remove_ShortcutContextMenuDisplay(self): # -> 
        """ remove_ShortcutContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_ShortcutContextMenuDisplayEventHandler) """
        ...

    def remove_StoreContextMenuDisplay(self): # -> 
        """ remove_StoreContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_StoreContextMenuDisplayEventHandler) """
        ...

    def remove_ViewContextMenuDisplay(self): # -> 
        """ remove_ViewContextMenuDisplay(self: ApplicationClass, : ApplicationEvents_11_ViewContextMenuDisplayEventHandler) """
        ...

    AdvancedSearchComplete = ...
    AdvancedSearchStopped = ...
    ApplicationEvents_10_Event_AdvancedSearchComplete = ...
    ApplicationEvents_10_Event_AdvancedSearchStopped = ...
    ApplicationEvents_10_Event_ItemSend = ...
    ApplicationEvents_10_Event_MAPILogonComplete = ...
    ApplicationEvents_10_Event_NewMail = ...
    ApplicationEvents_10_Event_OptionsPagesAdd = ...
    ApplicationEvents_10_Event_Quit = ...
    ApplicationEvents_10_Event_Reminder = ...
    ApplicationEvents_10_Event_Startup = ...
    ApplicationEvents_11_Event_Quit = ...
    ApplicationEvents_Event_ItemSend = ...
    ApplicationEvents_Event_NewMail = ...
    ApplicationEvents_Event_OptionsPagesAdd = ...
    ApplicationEvents_Event_Quit = ...
    ApplicationEvents_Event_Reminder = ...
    ApplicationEvents_Event_Startup = ...
    AttachmentContextMenuDisplay = ...
    BeforeFolderSharingDialog = ...
    ContextMenuClose = ...
    FolderContextMenuDisplay = ...
    ItemContextMenuDisplay = ...
    ItemLoad = ...
    ItemSend = ...
    MAPILogonComplete = ...
    NewMail = ...
    NewMailEx = ...
    OptionsPagesAdd = ...
    Reminder = ...
    ShortcutContextMenuDisplay = ...
    Startup = ...
    StoreContextMenuDisplay = ...
    ViewContextMenuDisplay = ...


class ApplicationEvents: # skipped bases: <type 'object'>
    """ no doc """
    def ItemSend(self, Item, Cancel) -> bool:
        """ ItemSend(self: ApplicationEvents, Item: object) -> bool """
        ...

    def NewMail(self): # -> 
        """ NewMail(self: ApplicationEvents) """
        ...

    def OptionsPagesAdd(self, Pages:PropertyPages): # -> 
        """ OptionsPagesAdd(self: ApplicationEvents, Pages: PropertyPages) """
        ...

    def Quit(self): # -> 
        """ Quit(self: ApplicationEvents) """
        ...

    def Reminder(self, Item:object): # -> 
        """ Reminder(self: ApplicationEvents, Item: object) """
        ...

    def Startup(self): # -> 
        """ Startup(self: ApplicationEvents) """
        ...


class ApplicationEvents_10: # skipped bases: <type 'object'>
    """ no doc """
    def AdvancedSearchComplete(self, SearchObject:Search): # -> 
        """ AdvancedSearchComplete(self: ApplicationEvents_10, SearchObject: Search) """
        ...

    def AdvancedSearchStopped(self, SearchObject:Search): # -> 
        """ AdvancedSearchStopped(self: ApplicationEvents_10, SearchObject: Search) """
        ...

    def ItemSend(self, Item, Cancel) -> bool:
        """ ItemSend(self: ApplicationEvents_10, Item: object) -> bool """
        ...

    def MAPILogonComplete(self): # -> 
        """ MAPILogonComplete(self: ApplicationEvents_10) """
        ...

    def NewMail(self): # -> 
        """ NewMail(self: ApplicationEvents_10) """
        ...

    def OptionsPagesAdd(self, Pages:PropertyPages): # -> 
        """ OptionsPagesAdd(self: ApplicationEvents_10, Pages: PropertyPages) """
        ...

    def Quit(self): # -> 
        """ Quit(self: ApplicationEvents_10) """
        ...

    def Reminder(self, Item:object): # -> 
        """ Reminder(self: ApplicationEvents_10, Item: object) """
        ...

    def Startup(self): # -> 
        """ Startup(self: ApplicationEvents_10) """
        ...


class ApplicationEvents_10_AdvancedSearchCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_10_AdvancedSearchCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, SearchObject:Search): # -> 
        """ Invoke(self: ApplicationEvents_10_AdvancedSearchCompleteEventHandler, SearchObject: Search) """
        ...


class ApplicationEvents_10_AdvancedSearchStoppedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_10_AdvancedSearchStoppedEventHandler(: object, : UIntPtr) """
    def Invoke(self, SearchObject:Search): # -> 
        """ Invoke(self: ApplicationEvents_10_AdvancedSearchStoppedEventHandler, SearchObject: Search) """
        ...


class ApplicationEvents_10_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AdvancedSearchComplete(self): # -> 
        """ add_AdvancedSearchComplete(self: ApplicationEvents_10_Event, : ApplicationEvents_10_AdvancedSearchCompleteEventHandler) """
        ...

    def add_AdvancedSearchStopped(self): # -> 
        """ add_AdvancedSearchStopped(self: ApplicationEvents_10_Event, : ApplicationEvents_10_AdvancedSearchStoppedEventHandler) """
        ...

    def add_ItemSend(self): # -> 
        """ add_ItemSend(self: ApplicationEvents_10_Event, : ApplicationEvents_10_ItemSendEventHandler) """
        ...

    def add_MAPILogonComplete(self): # -> 
        """ add_MAPILogonComplete(self: ApplicationEvents_10_Event, : ApplicationEvents_10_MAPILogonCompleteEventHandler) """
        ...

    def add_NewMail(self): # -> 
        """ add_NewMail(self: ApplicationEvents_10_Event, : ApplicationEvents_10_NewMailEventHandler) """
        ...

    def add_OptionsPagesAdd(self): # -> 
        """ add_OptionsPagesAdd(self: ApplicationEvents_10_Event, : ApplicationEvents_10_OptionsPagesAddEventHandler) """
        ...

    def add_Quit(self): # -> 
        """ add_Quit(self: ApplicationEvents_10_Event, : ApplicationEvents_10_QuitEventHandler) """
        ...

    def add_Reminder(self): # -> 
        """ add_Reminder(self: ApplicationEvents_10_Event, : ApplicationEvents_10_ReminderEventHandler) """
        ...

    def add_Startup(self): # -> 
        """ add_Startup(self: ApplicationEvents_10_Event, : ApplicationEvents_10_StartupEventHandler) """
        ...

    def remove_AdvancedSearchComplete(self): # -> 
        """ remove_AdvancedSearchComplete(self: ApplicationEvents_10_Event, : ApplicationEvents_10_AdvancedSearchCompleteEventHandler) """
        ...

    def remove_AdvancedSearchStopped(self): # -> 
        """ remove_AdvancedSearchStopped(self: ApplicationEvents_10_Event, : ApplicationEvents_10_AdvancedSearchStoppedEventHandler) """
        ...

    def remove_ItemSend(self): # -> 
        """ remove_ItemSend(self: ApplicationEvents_10_Event, : ApplicationEvents_10_ItemSendEventHandler) """
        ...

    def remove_MAPILogonComplete(self): # -> 
        """ remove_MAPILogonComplete(self: ApplicationEvents_10_Event, : ApplicationEvents_10_MAPILogonCompleteEventHandler) """
        ...

    def remove_NewMail(self): # -> 
        """ remove_NewMail(self: ApplicationEvents_10_Event, : ApplicationEvents_10_NewMailEventHandler) """
        ...

    def remove_OptionsPagesAdd(self): # -> 
        """ remove_OptionsPagesAdd(self: ApplicationEvents_10_Event, : ApplicationEvents_10_OptionsPagesAddEventHandler) """
        ...

    def remove_Quit(self): # -> 
        """ remove_Quit(self: ApplicationEvents_10_Event, : ApplicationEvents_10_QuitEventHandler) """
        ...

    def remove_Reminder(self): # -> 
        """ remove_Reminder(self: ApplicationEvents_10_Event, : ApplicationEvents_10_ReminderEventHandler) """
        ...

    def remove_Startup(self): # -> 
        """ remove_Startup(self: ApplicationEvents_10_Event, : ApplicationEvents_10_StartupEventHandler) """
        ...

    AdvancedSearchComplete = ...
    AdvancedSearchStopped = ...
    ItemSend = ...
    MAPILogonComplete = ...
    NewMail = ...
    OptionsPagesAdd = ...
    Quit = ...
    Reminder = ...
    Startup = ...


class ApplicationEvents_10_ItemSendEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_10_ItemSendEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents_10_ItemSendEventHandler, Item: object) -> bool """
        ...


class ApplicationEvents_10_MAPILogonCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_10_MAPILogonCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents_10_MAPILogonCompleteEventHandler) """
        ...


class ApplicationEvents_10_NewMailEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_10_NewMailEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents_10_NewMailEventHandler) """
        ...


class ApplicationEvents_10_OptionsPagesAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_10_OptionsPagesAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Pages:PropertyPages): # -> 
        """ Invoke(self: ApplicationEvents_10_OptionsPagesAddEventHandler, Pages: PropertyPages) """
        ...


class ApplicationEvents_10_QuitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_10_QuitEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents_10_QuitEventHandler) """
        ...


class ApplicationEvents_10_ReminderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_10_ReminderEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item:object): # -> 
        """ Invoke(self: ApplicationEvents_10_ReminderEventHandler, Item: object) """
        ...


class ApplicationEvents_10_SinkHelper(ApplicationEvents_10): # skipped bases: <type 'object'>
    """ no doc """
    m_AdvancedSearchCompleteDelegate = ...
    m_AdvancedSearchStoppedDelegate = ...
    m_dwCookie = ...
    m_ItemSendDelegate = ...
    m_MAPILogonCompleteDelegate = ...
    m_NewMailDelegate = ...
    m_OptionsPagesAddDelegate = ...
    m_QuitDelegate = ...
    m_ReminderDelegate = ...
    m_StartupDelegate = ...


class ApplicationEvents_10_StartupEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_10_StartupEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents_10_StartupEventHandler) """
        ...


class ApplicationEvents_11: # skipped bases: <type 'object'>
    """ no doc """
    def AdvancedSearchComplete(self, SearchObject:Search): # -> 
        """ AdvancedSearchComplete(self: ApplicationEvents_11, SearchObject: Search) """
        ...

    def AdvancedSearchStopped(self, SearchObject:Search): # -> 
        """ AdvancedSearchStopped(self: ApplicationEvents_11, SearchObject: Search) """
        ...

    def AttachmentContextMenuDisplay(self, CommandBar:CommandBar, Attachments:AttachmentSelection): # -> 
        """ AttachmentContextMenuDisplay(self: ApplicationEvents_11, CommandBar: CommandBar, Attachments: AttachmentSelection) """
        ...

    def BeforeFolderSharingDialog(self, FolderToShare, Cancel) -> bool:
        """ BeforeFolderSharingDialog(self: ApplicationEvents_11, FolderToShare: MAPIFolder) -> bool """
        ...

    def ContextMenuClose(self, ContextMenu:OlContextMenu): # -> 
        """ ContextMenuClose(self: ApplicationEvents_11, ContextMenu: OlContextMenu) """
        ...

    def FolderContextMenuDisplay(self, CommandBar:CommandBar, Folder:MAPIFolder): # -> 
        """ FolderContextMenuDisplay(self: ApplicationEvents_11, CommandBar: CommandBar, Folder: MAPIFolder) """
        ...

    def ItemContextMenuDisplay(self, CommandBar:CommandBar, Selection:Selection): # -> 
        """ ItemContextMenuDisplay(self: ApplicationEvents_11, CommandBar: CommandBar, Selection: Selection) """
        ...

    def ItemLoad(self, Item:object): # -> 
        """ ItemLoad(self: ApplicationEvents_11, Item: object) """
        ...

    def ItemSend(self, Item, Cancel) -> bool:
        """ ItemSend(self: ApplicationEvents_11, Item: object) -> bool """
        ...

    def MAPILogonComplete(self): # -> 
        """ MAPILogonComplete(self: ApplicationEvents_11) """
        ...

    def NewMail(self): # -> 
        """ NewMail(self: ApplicationEvents_11) """
        ...

    def NewMailEx(self, EntryIDCollection:str): # -> 
        """ NewMailEx(self: ApplicationEvents_11, EntryIDCollection: str) """
        ...

    def OptionsPagesAdd(self, Pages:PropertyPages): # -> 
        """ OptionsPagesAdd(self: ApplicationEvents_11, Pages: PropertyPages) """
        ...

    def Quit(self): # -> 
        """ Quit(self: ApplicationEvents_11) """
        ...

    def Reminder(self, Item:object): # -> 
        """ Reminder(self: ApplicationEvents_11, Item: object) """
        ...

    def ShortcutContextMenuDisplay(self, CommandBar:CommandBar, Shortcut:OutlookBarShortcut): # -> 
        """ ShortcutContextMenuDisplay(self: ApplicationEvents_11, CommandBar: CommandBar, Shortcut: OutlookBarShortcut) """
        ...

    def Startup(self): # -> 
        """ Startup(self: ApplicationEvents_11) """
        ...

    def StoreContextMenuDisplay(self, CommandBar:CommandBar, Store:Store): # -> 
        """ StoreContextMenuDisplay(self: ApplicationEvents_11, CommandBar: CommandBar, Store: Store) """
        ...

    def ViewContextMenuDisplay(self, CommandBar:CommandBar, View:View): # -> 
        """ ViewContextMenuDisplay(self: ApplicationEvents_11, CommandBar: CommandBar, View: View) """
        ...


class ApplicationEvents_11_AdvancedSearchCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_AdvancedSearchCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, SearchObject:Search): # -> 
        """ Invoke(self: ApplicationEvents_11_AdvancedSearchCompleteEventHandler, SearchObject: Search) """
        ...


class ApplicationEvents_11_AdvancedSearchStoppedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_AdvancedSearchStoppedEventHandler(: object, : UIntPtr) """
    def Invoke(self, SearchObject:Search): # -> 
        """ Invoke(self: ApplicationEvents_11_AdvancedSearchStoppedEventHandler, SearchObject: Search) """
        ...


class ApplicationEvents_11_AttachmentContextMenuDisplayEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_AttachmentContextMenuDisplayEventHandler(: object, : UIntPtr) """
    def Invoke(self, CommandBar:CommandBar, Attachments:AttachmentSelection): # -> 
        """ Invoke(self: ApplicationEvents_11_AttachmentContextMenuDisplayEventHandler, CommandBar: CommandBar, Attachments: AttachmentSelection) """
        ...


class ApplicationEvents_11_BeforeFolderSharingDialogEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_BeforeFolderSharingDialogEventHandler(: object, : UIntPtr) """
    def Invoke(self, FolderToShare, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents_11_BeforeFolderSharingDialogEventHandler, FolderToShare: MAPIFolder) -> bool """
        ...


class ApplicationEvents_11_ContextMenuCloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_ContextMenuCloseEventHandler(: object, : UIntPtr) """
    def Invoke(self, ContextMenu:OlContextMenu): # -> 
        """ Invoke(self: ApplicationEvents_11_ContextMenuCloseEventHandler, ContextMenu: OlContextMenu) """
        ...


class ApplicationEvents_11_FolderContextMenuDisplayEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_FolderContextMenuDisplayEventHandler(: object, : UIntPtr) """
    def Invoke(self, CommandBar:CommandBar, Folder:MAPIFolder): # -> 
        """ Invoke(self: ApplicationEvents_11_FolderContextMenuDisplayEventHandler, CommandBar: CommandBar, Folder: MAPIFolder) """
        ...


class ApplicationEvents_11_ItemContextMenuDisplayEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_ItemContextMenuDisplayEventHandler(: object, : UIntPtr) """
    def Invoke(self, CommandBar:CommandBar, Selection:Selection): # -> 
        """ Invoke(self: ApplicationEvents_11_ItemContextMenuDisplayEventHandler, CommandBar: CommandBar, Selection: Selection) """
        ...


class ApplicationEvents_11_ItemLoadEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_ItemLoadEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item:object): # -> 
        """ Invoke(self: ApplicationEvents_11_ItemLoadEventHandler, Item: object) """
        ...


class ApplicationEvents_11_ItemSendEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_ItemSendEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents_11_ItemSendEventHandler, Item: object) -> bool """
        ...


class ApplicationEvents_11_MAPILogonCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_MAPILogonCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents_11_MAPILogonCompleteEventHandler) """
        ...


class ApplicationEvents_11_NewMailEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_NewMailEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents_11_NewMailEventHandler) """
        ...


class ApplicationEvents_11_NewMailExEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_NewMailExEventHandler(: object, : UIntPtr) """
    def Invoke(self, EntryIDCollection:str): # -> 
        """ Invoke(self: ApplicationEvents_11_NewMailExEventHandler, EntryIDCollection: str) """
        ...


class ApplicationEvents_11_OptionsPagesAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_OptionsPagesAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Pages:PropertyPages): # -> 
        """ Invoke(self: ApplicationEvents_11_OptionsPagesAddEventHandler, Pages: PropertyPages) """
        ...


class ApplicationEvents_11_QuitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_QuitEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents_11_QuitEventHandler) """
        ...


class ApplicationEvents_11_ReminderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_ReminderEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item:object): # -> 
        """ Invoke(self: ApplicationEvents_11_ReminderEventHandler, Item: object) """
        ...


class ApplicationEvents_11_ShortcutContextMenuDisplayEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_ShortcutContextMenuDisplayEventHandler(: object, : UIntPtr) """
    def Invoke(self, CommandBar:CommandBar, Shortcut:OutlookBarShortcut): # -> 
        """ Invoke(self: ApplicationEvents_11_ShortcutContextMenuDisplayEventHandler, CommandBar: CommandBar, Shortcut: OutlookBarShortcut) """
        ...


class ApplicationEvents_11_SinkHelper(ApplicationEvents_11): # skipped bases: <type 'object'>
    """ no doc """
    m_AdvancedSearchCompleteDelegate = ...
    m_AdvancedSearchStoppedDelegate = ...
    m_AttachmentContextMenuDisplayDelegate = ...
    m_BeforeFolderSharingDialogDelegate = ...
    m_ContextMenuCloseDelegate = ...
    m_dwCookie = ...
    m_FolderContextMenuDisplayDelegate = ...
    m_ItemContextMenuDisplayDelegate = ...
    m_ItemLoadDelegate = ...
    m_ItemSendDelegate = ...
    m_MAPILogonCompleteDelegate = ...
    m_NewMailDelegate = ...
    m_NewMailExDelegate = ...
    m_OptionsPagesAddDelegate = ...
    m_QuitDelegate = ...
    m_ReminderDelegate = ...
    m_ShortcutContextMenuDisplayDelegate = ...
    m_StartupDelegate = ...
    m_StoreContextMenuDisplayDelegate = ...
    m_ViewContextMenuDisplayDelegate = ...


class ApplicationEvents_11_StartupEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_StartupEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents_11_StartupEventHandler) """
        ...


class ApplicationEvents_11_StoreContextMenuDisplayEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_StoreContextMenuDisplayEventHandler(: object, : UIntPtr) """
    def Invoke(self, CommandBar:CommandBar, Store:Store): # -> 
        """ Invoke(self: ApplicationEvents_11_StoreContextMenuDisplayEventHandler, CommandBar: CommandBar, Store: Store) """
        ...


class ApplicationEvents_11_ViewContextMenuDisplayEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_11_ViewContextMenuDisplayEventHandler(: object, : UIntPtr) """
    def Invoke(self, CommandBar:CommandBar, View:View): # -> 
        """ Invoke(self: ApplicationEvents_11_ViewContextMenuDisplayEventHandler, CommandBar: CommandBar, View: View) """
        ...


class ApplicationEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_ItemSend(self): # -> 
        """ add_ItemSend(self: ApplicationEvents_Event, : ApplicationEvents_ItemSendEventHandler) """
        ...

    def add_NewMail(self): # -> 
        """ add_NewMail(self: ApplicationEvents_Event, : ApplicationEvents_NewMailEventHandler) """
        ...

    def add_OptionsPagesAdd(self): # -> 
        """ add_OptionsPagesAdd(self: ApplicationEvents_Event, : ApplicationEvents_OptionsPagesAddEventHandler) """
        ...

    def add_Quit(self): # -> 
        """ add_Quit(self: ApplicationEvents_Event, : ApplicationEvents_QuitEventHandler) """
        ...

    def add_Reminder(self): # -> 
        """ add_Reminder(self: ApplicationEvents_Event, : ApplicationEvents_ReminderEventHandler) """
        ...

    def add_Startup(self): # -> 
        """ add_Startup(self: ApplicationEvents_Event, : ApplicationEvents_StartupEventHandler) """
        ...

    def remove_ItemSend(self): # -> 
        """ remove_ItemSend(self: ApplicationEvents_Event, : ApplicationEvents_ItemSendEventHandler) """
        ...

    def remove_NewMail(self): # -> 
        """ remove_NewMail(self: ApplicationEvents_Event, : ApplicationEvents_NewMailEventHandler) """
        ...

    def remove_OptionsPagesAdd(self): # -> 
        """ remove_OptionsPagesAdd(self: ApplicationEvents_Event, : ApplicationEvents_OptionsPagesAddEventHandler) """
        ...

    def remove_Quit(self): # -> 
        """ remove_Quit(self: ApplicationEvents_Event, : ApplicationEvents_QuitEventHandler) """
        ...

    def remove_Reminder(self): # -> 
        """ remove_Reminder(self: ApplicationEvents_Event, : ApplicationEvents_ReminderEventHandler) """
        ...

    def remove_Startup(self): # -> 
        """ remove_Startup(self: ApplicationEvents_Event, : ApplicationEvents_StartupEventHandler) """
        ...

    ItemSend = ...
    NewMail = ...
    OptionsPagesAdd = ...
    Quit = ...
    Reminder = ...
    Startup = ...


class ApplicationEvents_ItemSendEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_ItemSendEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents_ItemSendEventHandler, Item: object) -> bool """
        ...


class ApplicationEvents_NewMailEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_NewMailEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents_NewMailEventHandler) """
        ...


class ApplicationEvents_OptionsPagesAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_OptionsPagesAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Pages:PropertyPages): # -> 
        """ Invoke(self: ApplicationEvents_OptionsPagesAddEventHandler, Pages: PropertyPages) """
        ...


class ApplicationEvents_QuitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_QuitEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents_QuitEventHandler) """
        ...


class ApplicationEvents_ReminderEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_ReminderEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item:object): # -> 
        """ Invoke(self: ApplicationEvents_ReminderEventHandler, Item: object) """
        ...


class ApplicationEvents_SinkHelper(ApplicationEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_ItemSendDelegate = ...
    m_NewMailDelegate = ...
    m_OptionsPagesAddDelegate = ...
    m_QuitDelegate = ...
    m_ReminderDelegate = ...
    m_StartupDelegate = ...


class ApplicationEvents_StartupEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents_StartupEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents_StartupEventHandler) """
        ...


class ItemEvents_10_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: ItemEvents_10_Event, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentAdd(self): # -> 
        """ add_AttachmentAdd(self: ItemEvents_10_Event, : ItemEvents_10_AttachmentAddEventHandler) """
        ...

    def add_AttachmentRead(self): # -> 
        """ add_AttachmentRead(self: ItemEvents_10_Event, : ItemEvents_10_AttachmentReadEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: ItemEvents_10_Event, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentSave(self): # -> 
        """ add_BeforeAttachmentSave(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAttachmentSaveEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeCheckNames(self): # -> 
        """ add_BeforeCheckNames(self: ItemEvents_10_Event, : ItemEvents_10_BeforeCheckNamesEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: ItemEvents_10_Event, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: ItemEvents_10_Event, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_Close(self): # -> 
        """ add_Close(self: ItemEvents_10_Event, : ItemEvents_10_CloseEventHandler) """
        ...

    def add_CustomAction(self): # -> 
        """ add_CustomAction(self: ItemEvents_10_Event, : ItemEvents_10_CustomActionEventHandler) """
        ...

    def add_CustomPropertyChange(self): # -> 
        """ add_CustomPropertyChange(self: ItemEvents_10_Event, : ItemEvents_10_CustomPropertyChangeEventHandler) """
        ...

    def add_Forward(self): # -> 
        """ add_Forward(self: ItemEvents_10_Event, : ItemEvents_10_ForwardEventHandler) """
        ...

    def add_Open(self): # -> 
        """ add_Open(self: ItemEvents_10_Event, : ItemEvents_10_OpenEventHandler) """
        ...

    def add_PropertyChange(self): # -> 
        """ add_PropertyChange(self: ItemEvents_10_Event, : ItemEvents_10_PropertyChangeEventHandler) """
        ...

    def add_Read(self): # -> 
        """ add_Read(self: ItemEvents_10_Event, : ItemEvents_10_ReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: ItemEvents_10_Event, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Reply(self): # -> 
        """ add_Reply(self: ItemEvents_10_Event, : ItemEvents_10_ReplyEventHandler) """
        ...

    def add_ReplyAll(self): # -> 
        """ add_ReplyAll(self: ItemEvents_10_Event, : ItemEvents_10_ReplyAllEventHandler) """
        ...

    def add_Send(self): # -> 
        """ add_Send(self: ItemEvents_10_Event, : ItemEvents_10_SendEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: ItemEvents_10_Event, : ItemEvents_10_UnloadEventHandler) """
        ...

    def add_Write(self): # -> 
        """ add_Write(self: ItemEvents_10_Event, : ItemEvents_10_WriteEventHandler) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: ItemEvents_10_Event, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentAdd(self): # -> 
        """ remove_AttachmentAdd(self: ItemEvents_10_Event, : ItemEvents_10_AttachmentAddEventHandler) """
        ...

    def remove_AttachmentRead(self): # -> 
        """ remove_AttachmentRead(self: ItemEvents_10_Event, : ItemEvents_10_AttachmentReadEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: ItemEvents_10_Event, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentSave(self): # -> 
        """ remove_BeforeAttachmentSave(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAttachmentSaveEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: ItemEvents_10_Event, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeCheckNames(self): # -> 
        """ remove_BeforeCheckNames(self: ItemEvents_10_Event, : ItemEvents_10_BeforeCheckNamesEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: ItemEvents_10_Event, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: ItemEvents_10_Event, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_Close(self): # -> 
        """ remove_Close(self: ItemEvents_10_Event, : ItemEvents_10_CloseEventHandler) """
        ...

    def remove_CustomAction(self): # -> 
        """ remove_CustomAction(self: ItemEvents_10_Event, : ItemEvents_10_CustomActionEventHandler) """
        ...

    def remove_CustomPropertyChange(self): # -> 
        """ remove_CustomPropertyChange(self: ItemEvents_10_Event, : ItemEvents_10_CustomPropertyChangeEventHandler) """
        ...

    def remove_Forward(self): # -> 
        """ remove_Forward(self: ItemEvents_10_Event, : ItemEvents_10_ForwardEventHandler) """
        ...

    def remove_Open(self): # -> 
        """ remove_Open(self: ItemEvents_10_Event, : ItemEvents_10_OpenEventHandler) """
        ...

    def remove_PropertyChange(self): # -> 
        """ remove_PropertyChange(self: ItemEvents_10_Event, : ItemEvents_10_PropertyChangeEventHandler) """
        ...

    def remove_Read(self): # -> 
        """ remove_Read(self: ItemEvents_10_Event, : ItemEvents_10_ReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: ItemEvents_10_Event, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Reply(self): # -> 
        """ remove_Reply(self: ItemEvents_10_Event, : ItemEvents_10_ReplyEventHandler) """
        ...

    def remove_ReplyAll(self): # -> 
        """ remove_ReplyAll(self: ItemEvents_10_Event, : ItemEvents_10_ReplyAllEventHandler) """
        ...

    def remove_Send(self): # -> 
        """ remove_Send(self: ItemEvents_10_Event, : ItemEvents_10_SendEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: ItemEvents_10_Event, : ItemEvents_10_UnloadEventHandler) """
        ...

    def remove_Write(self): # -> 
        """ remove_Write(self: ItemEvents_10_Event, : ItemEvents_10_WriteEventHandler) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    Close = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Send = ...
    Unload = ...
    Write = ...


class _AppointmentItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _AppointmentItem) -> Actions """
        ...

    @property
    def AllDayEvent(self) -> bool:
        """
        Get: AllDayEvent(self: _AppointmentItem) -> bool
        Set: AllDayEvent(self: _AppointmentItem) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _AppointmentItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _AppointmentItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _AppointmentItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _AppointmentItem) -> str
        Set: BillingInformation(self: _AppointmentItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _AppointmentItem) -> str
        Set: Body(self: _AppointmentItem) = value
        """
        ...

    @property
    def BusyStatus(self) -> OlBusyStatus:
        """
        Get: BusyStatus(self: _AppointmentItem) -> OlBusyStatus
        Set: BusyStatus(self: _AppointmentItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _AppointmentItem) -> str
        Set: Categories(self: _AppointmentItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _AppointmentItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _AppointmentItem) -> str
        Set: Companies(self: _AppointmentItem) = value
        """
        ...

    @property
    def ConferenceServerAllowExternal(self) -> bool:
        """
        Get: ConferenceServerAllowExternal(self: _AppointmentItem) -> bool
        Set: ConferenceServerAllowExternal(self: _AppointmentItem) = value
        """
        ...

    @property
    def ConferenceServerPassword(self) -> str:
        """
        Get: ConferenceServerPassword(self: _AppointmentItem) -> str
        Set: ConferenceServerPassword(self: _AppointmentItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _AppointmentItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _AppointmentItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _AppointmentItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _AppointmentItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _AppointmentItem) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _AppointmentItem) -> OlDownloadState """
        ...

    @property
    def Duration(self) -> int:
        """
        Get: Duration(self: _AppointmentItem) -> int
        Set: Duration(self: _AppointmentItem) = value
        """
        ...

    @property
    def End(self) -> DateTime:
        """
        Get: End(self: _AppointmentItem) -> DateTime
        Set: End(self: _AppointmentItem) = value
        """
        ...

    @property
    def EndInEndTimeZone(self) -> DateTime:
        """
        Get: EndInEndTimeZone(self: _AppointmentItem) -> DateTime
        Set: EndInEndTimeZone(self: _AppointmentItem) = value
        """
        ...

    @property
    def EndTimeZone(self) -> TimeZone:
        """
        Get: EndTimeZone(self: _AppointmentItem) -> TimeZone
        Set: EndTimeZone(self: _AppointmentItem) = value
        """
        ...

    @property
    def EndUTC(self) -> DateTime:
        """
        Get: EndUTC(self: _AppointmentItem) -> DateTime
        Set: EndUTC(self: _AppointmentItem) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _AppointmentItem) -> str """
        ...

    @property
    def ForceUpdateToAllAttendees(self) -> bool:
        """
        Get: ForceUpdateToAllAttendees(self: _AppointmentItem) -> bool
        Set: ForceUpdateToAllAttendees(self: _AppointmentItem) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _AppointmentItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _AppointmentItem) -> Inspector """
        ...

    @property
    def GlobalAppointmentID(self) -> str:
        """ Get: GlobalAppointmentID(self: _AppointmentItem) -> str """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _AppointmentItem) -> OlImportance
        Set: Importance(self: _AppointmentItem) = value
        """
        ...

    @property
    def InternetCodepage(self) -> int:
        """
        Get: InternetCodepage(self: _AppointmentItem) -> int
        Set: InternetCodepage(self: _AppointmentItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _AppointmentItem) -> bool """
        ...

    @property
    def IsOnlineMeeting(self) -> bool:
        """
        Get: IsOnlineMeeting(self: _AppointmentItem) -> bool
        Set: IsOnlineMeeting(self: _AppointmentItem) = value
        """
        ...

    @property
    def IsRecurring(self) -> bool:
        """ Get: IsRecurring(self: _AppointmentItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _AppointmentItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _AppointmentItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _AppointmentItem) -> Links """
        ...

    @property
    def Location(self) -> str:
        """
        Get: Location(self: _AppointmentItem) -> str
        Set: Location(self: _AppointmentItem) = value
        """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _AppointmentItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _AppointmentItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _AppointmentItem) = value
        """
        ...

    @property
    def MeetingStatus(self) -> OlMeetingStatus:
        """
        Get: MeetingStatus(self: _AppointmentItem) -> OlMeetingStatus
        Set: MeetingStatus(self: _AppointmentItem) = value
        """
        ...

    @property
    def MeetingWorkspaceURL(self) -> str:
        """ Get: MeetingWorkspaceURL(self: _AppointmentItem) -> str """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _AppointmentItem) -> str
        Set: MessageClass(self: _AppointmentItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _AppointmentItem) -> str
        Set: Mileage(self: _AppointmentItem) = value
        """
        ...

    @property
    def NetMeetingAutoStart(self) -> bool:
        """
        Get: NetMeetingAutoStart(self: _AppointmentItem) -> bool
        Set: NetMeetingAutoStart(self: _AppointmentItem) = value
        """
        ...

    @property
    def NetMeetingDocPathName(self) -> str:
        """
        Get: NetMeetingDocPathName(self: _AppointmentItem) -> str
        Set: NetMeetingDocPathName(self: _AppointmentItem) = value
        """
        ...

    @property
    def NetMeetingOrganizerAlias(self) -> str:
        """
        Get: NetMeetingOrganizerAlias(self: _AppointmentItem) -> str
        Set: NetMeetingOrganizerAlias(self: _AppointmentItem) = value
        """
        ...

    @property
    def NetMeetingServer(self) -> str:
        """
        Get: NetMeetingServer(self: _AppointmentItem) -> str
        Set: NetMeetingServer(self: _AppointmentItem) = value
        """
        ...

    @property
    def NetMeetingType(self) -> OlNetMeetingType:
        """
        Get: NetMeetingType(self: _AppointmentItem) -> OlNetMeetingType
        Set: NetMeetingType(self: _AppointmentItem) = value
        """
        ...

    @property
    def NetShowURL(self) -> str:
        """
        Get: NetShowURL(self: _AppointmentItem) -> str
        Set: NetShowURL(self: _AppointmentItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _AppointmentItem) -> bool
        Set: NoAging(self: _AppointmentItem) = value
        """
        ...

    @property
    def OptionalAttendees(self) -> str:
        """
        Get: OptionalAttendees(self: _AppointmentItem) -> str
        Set: OptionalAttendees(self: _AppointmentItem) = value
        """
        ...

    @property
    def Organizer(self) -> str:
        """ Get: Organizer(self: _AppointmentItem) -> str """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _AppointmentItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _AppointmentItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _AppointmentItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _AppointmentItem) -> PropertyAccessor """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: _AppointmentItem) -> Recipients """
        ...

    @property
    def RecurrenceState(self) -> OlRecurrenceState:
        """ Get: RecurrenceState(self: _AppointmentItem) -> OlRecurrenceState """
        ...

    @property
    def ReminderMinutesBeforeStart(self) -> int:
        """
        Get: ReminderMinutesBeforeStart(self: _AppointmentItem) -> int
        Set: ReminderMinutesBeforeStart(self: _AppointmentItem) = value
        """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: _AppointmentItem) -> bool
        Set: ReminderOverrideDefault(self: _AppointmentItem) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: _AppointmentItem) -> bool
        Set: ReminderPlaySound(self: _AppointmentItem) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: _AppointmentItem) -> bool
        Set: ReminderSet(self: _AppointmentItem) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: _AppointmentItem) -> str
        Set: ReminderSoundFile(self: _AppointmentItem) = value
        """
        ...

    @property
    def ReplyTime(self) -> DateTime:
        """
        Get: ReplyTime(self: _AppointmentItem) -> DateTime
        Set: ReplyTime(self: _AppointmentItem) = value
        """
        ...

    @property
    def RequiredAttendees(self) -> str:
        """
        Get: RequiredAttendees(self: _AppointmentItem) -> str
        Set: RequiredAttendees(self: _AppointmentItem) = value
        """
        ...

    @property
    def Resources(self) -> str:
        """
        Get: Resources(self: _AppointmentItem) -> str
        Set: Resources(self: _AppointmentItem) = value
        """
        ...

    @property
    def ResponseRequested(self) -> bool:
        """
        Get: ResponseRequested(self: _AppointmentItem) -> bool
        Set: ResponseRequested(self: _AppointmentItem) = value
        """
        ...

    @property
    def ResponseStatus(self) -> OlResponseStatus:
        """ Get: ResponseStatus(self: _AppointmentItem) -> OlResponseStatus """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _AppointmentItem) -> object
        Set: RTFBody(self: _AppointmentItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _AppointmentItem) -> bool """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: _AppointmentItem) -> Account
        Set: SendUsingAccount(self: _AppointmentItem) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _AppointmentItem) -> OlSensitivity
        Set: Sensitivity(self: _AppointmentItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _AppointmentItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _AppointmentItem) -> int """
        ...

    @property
    def Start(self) -> DateTime:
        """
        Get: Start(self: _AppointmentItem) -> DateTime
        Set: Start(self: _AppointmentItem) = value
        """
        ...

    @property
    def StartInStartTimeZone(self) -> DateTime:
        """
        Get: StartInStartTimeZone(self: _AppointmentItem) -> DateTime
        Set: StartInStartTimeZone(self: _AppointmentItem) = value
        """
        ...

    @property
    def StartTimeZone(self) -> TimeZone:
        """
        Get: StartTimeZone(self: _AppointmentItem) -> TimeZone
        Set: StartTimeZone(self: _AppointmentItem) = value
        """
        ...

    @property
    def StartUTC(self) -> DateTime:
        """
        Get: StartUTC(self: _AppointmentItem) -> DateTime
        Set: StartUTC(self: _AppointmentItem) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _AppointmentItem) -> str
        Set: Subject(self: _AppointmentItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _AppointmentItem) -> bool
        Set: UnRead(self: _AppointmentItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _AppointmentItem) -> UserProperties """
        ...


    def ClearRecurrencePattern(self): # -> 
        """ ClearRecurrencePattern(self: _AppointmentItem) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _AppointmentItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _AppointmentItem) -> object """
        ...

    def CopyTo(self, DestinationFolder:MAPIFolder, CopyOptions:OlAppointmentCopyOptions) -> AppointmentItem:
        """ CopyTo(self: _AppointmentItem, DestinationFolder: MAPIFolder, CopyOptions: OlAppointmentCopyOptions) -> AppointmentItem """
        ...

    def Delete(self): # -> 
        """ Delete(self: _AppointmentItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _AppointmentItem, Modal: object) """
        ...

    def ForwardAsVcal(self) -> MailItem:
        """ ForwardAsVcal(self: _AppointmentItem) -> MailItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _AppointmentItem) -> Conversation """
        ...

    def GetOrganizer(self) -> AddressEntry:
        """ GetOrganizer(self: _AppointmentItem) -> AddressEntry """
        ...

    def GetRecurrencePattern(self) -> RecurrencePattern:
        """ GetRecurrencePattern(self: _AppointmentItem) -> RecurrencePattern """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _AppointmentItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _AppointmentItem) """
        ...

    def Respond(self, Response:OlMeetingResponse, fNoUI:object, fAdditionalTextDialog:object) -> MeetingItem:
        """ Respond(self: _AppointmentItem, Response: OlMeetingResponse, fNoUI: object, fAdditionalTextDialog: object) -> MeetingItem """
        ...

    def Save(self): # -> 
        """ Save(self: _AppointmentItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _AppointmentItem, Path: str, Type: object) """
        ...

    def Send(self): # -> 
        """ Send(self: _AppointmentItem) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _AppointmentItem) """
        ...


class AppointmentItem(_AppointmentItem, ItemEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class AppointmentItemClass(AppointmentItem, ItemEvents_Event, __ComObject): # skipped bases: <type '_AppointmentItem'>, <type 'ItemEvents_10_Event'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: AppointmentItemClass) -> Actions """
        ...

    @property
    def AllDayEvent(self) -> bool:
        """
        Get: AllDayEvent(self: AppointmentItemClass) -> bool
        Set: AllDayEvent(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: AppointmentItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: AppointmentItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: AppointmentItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: AppointmentItemClass) -> str
        Set: BillingInformation(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: AppointmentItemClass) -> str
        Set: Body(self: AppointmentItemClass) = value
        """
        ...

    @property
    def BusyStatus(self) -> OlBusyStatus:
        """
        Get: BusyStatus(self: AppointmentItemClass) -> OlBusyStatus
        Set: BusyStatus(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: AppointmentItemClass) -> str
        Set: Categories(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AppointmentItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: AppointmentItemClass) -> str
        Set: Companies(self: AppointmentItemClass) = value
        """
        ...

    @property
    def ConferenceServerAllowExternal(self) -> bool:
        """
        Get: ConferenceServerAllowExternal(self: AppointmentItemClass) -> bool
        Set: ConferenceServerAllowExternal(self: AppointmentItemClass) = value
        """
        ...

    @property
    def ConferenceServerPassword(self) -> str:
        """
        Get: ConferenceServerPassword(self: AppointmentItemClass) -> str
        Set: ConferenceServerPassword(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: AppointmentItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: AppointmentItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: AppointmentItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: AppointmentItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: AppointmentItemClass) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: AppointmentItemClass) -> OlDownloadState """
        ...

    @property
    def Duration(self) -> int:
        """
        Get: Duration(self: AppointmentItemClass) -> int
        Set: Duration(self: AppointmentItemClass) = value
        """
        ...

    @property
    def End(self) -> DateTime:
        """
        Get: End(self: AppointmentItemClass) -> DateTime
        Set: End(self: AppointmentItemClass) = value
        """
        ...

    @property
    def EndInEndTimeZone(self) -> DateTime:
        """
        Get: EndInEndTimeZone(self: AppointmentItemClass) -> DateTime
        Set: EndInEndTimeZone(self: AppointmentItemClass) = value
        """
        ...

    @property
    def EndTimeZone(self) -> TimeZone:
        """
        Get: EndTimeZone(self: AppointmentItemClass) -> TimeZone
        Set: EndTimeZone(self: AppointmentItemClass) = value
        """
        ...

    @property
    def EndUTC(self) -> DateTime:
        """
        Get: EndUTC(self: AppointmentItemClass) -> DateTime
        Set: EndUTC(self: AppointmentItemClass) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: AppointmentItemClass) -> str """
        ...

    @property
    def ForceUpdateToAllAttendees(self) -> bool:
        """
        Get: ForceUpdateToAllAttendees(self: AppointmentItemClass) -> bool
        Set: ForceUpdateToAllAttendees(self: AppointmentItemClass) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: AppointmentItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: AppointmentItemClass) -> Inspector """
        ...

    @property
    def GlobalAppointmentID(self) -> str:
        """ Get: GlobalAppointmentID(self: AppointmentItemClass) -> str """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: AppointmentItemClass) -> OlImportance
        Set: Importance(self: AppointmentItemClass) = value
        """
        ...

    @property
    def InternetCodepage(self) -> int:
        """
        Get: InternetCodepage(self: AppointmentItemClass) -> int
        Set: InternetCodepage(self: AppointmentItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: AppointmentItemClass) -> bool """
        ...

    @property
    def IsOnlineMeeting(self) -> bool:
        """
        Get: IsOnlineMeeting(self: AppointmentItemClass) -> bool
        Set: IsOnlineMeeting(self: AppointmentItemClass) = value
        """
        ...

    @property
    def IsRecurring(self) -> bool:
        """ Get: IsRecurring(self: AppointmentItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: AppointmentItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: AppointmentItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: AppointmentItemClass) -> Links """
        ...

    @property
    def Location(self) -> str:
        """
        Get: Location(self: AppointmentItemClass) -> str
        Set: Location(self: AppointmentItemClass) = value
        """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: AppointmentItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: AppointmentItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: AppointmentItemClass) = value
        """
        ...

    @property
    def MeetingStatus(self) -> OlMeetingStatus:
        """
        Get: MeetingStatus(self: AppointmentItemClass) -> OlMeetingStatus
        Set: MeetingStatus(self: AppointmentItemClass) = value
        """
        ...

    @property
    def MeetingWorkspaceURL(self) -> str:
        """ Get: MeetingWorkspaceURL(self: AppointmentItemClass) -> str """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: AppointmentItemClass) -> str
        Set: MessageClass(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: AppointmentItemClass) -> str
        Set: Mileage(self: AppointmentItemClass) = value
        """
        ...

    @property
    def NetMeetingAutoStart(self) -> bool:
        """
        Get: NetMeetingAutoStart(self: AppointmentItemClass) -> bool
        Set: NetMeetingAutoStart(self: AppointmentItemClass) = value
        """
        ...

    @property
    def NetMeetingDocPathName(self) -> str:
        """
        Get: NetMeetingDocPathName(self: AppointmentItemClass) -> str
        Set: NetMeetingDocPathName(self: AppointmentItemClass) = value
        """
        ...

    @property
    def NetMeetingOrganizerAlias(self) -> str:
        """
        Get: NetMeetingOrganizerAlias(self: AppointmentItemClass) -> str
        Set: NetMeetingOrganizerAlias(self: AppointmentItemClass) = value
        """
        ...

    @property
    def NetMeetingServer(self) -> str:
        """
        Get: NetMeetingServer(self: AppointmentItemClass) -> str
        Set: NetMeetingServer(self: AppointmentItemClass) = value
        """
        ...

    @property
    def NetMeetingType(self) -> OlNetMeetingType:
        """
        Get: NetMeetingType(self: AppointmentItemClass) -> OlNetMeetingType
        Set: NetMeetingType(self: AppointmentItemClass) = value
        """
        ...

    @property
    def NetShowURL(self) -> str:
        """
        Get: NetShowURL(self: AppointmentItemClass) -> str
        Set: NetShowURL(self: AppointmentItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: AppointmentItemClass) -> bool
        Set: NoAging(self: AppointmentItemClass) = value
        """
        ...

    @property
    def OptionalAttendees(self) -> str:
        """
        Get: OptionalAttendees(self: AppointmentItemClass) -> str
        Set: OptionalAttendees(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Organizer(self) -> str:
        """ Get: Organizer(self: AppointmentItemClass) -> str """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: AppointmentItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: AppointmentItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AppointmentItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: AppointmentItemClass) -> PropertyAccessor """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: AppointmentItemClass) -> Recipients """
        ...

    @property
    def RecurrenceState(self) -> OlRecurrenceState:
        """ Get: RecurrenceState(self: AppointmentItemClass) -> OlRecurrenceState """
        ...

    @property
    def ReminderMinutesBeforeStart(self) -> int:
        """
        Get: ReminderMinutesBeforeStart(self: AppointmentItemClass) -> int
        Set: ReminderMinutesBeforeStart(self: AppointmentItemClass) = value
        """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: AppointmentItemClass) -> bool
        Set: ReminderOverrideDefault(self: AppointmentItemClass) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: AppointmentItemClass) -> bool
        Set: ReminderPlaySound(self: AppointmentItemClass) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: AppointmentItemClass) -> bool
        Set: ReminderSet(self: AppointmentItemClass) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: AppointmentItemClass) -> str
        Set: ReminderSoundFile(self: AppointmentItemClass) = value
        """
        ...

    @property
    def ReplyTime(self) -> DateTime:
        """
        Get: ReplyTime(self: AppointmentItemClass) -> DateTime
        Set: ReplyTime(self: AppointmentItemClass) = value
        """
        ...

    @property
    def RequiredAttendees(self) -> str:
        """
        Get: RequiredAttendees(self: AppointmentItemClass) -> str
        Set: RequiredAttendees(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Resources(self) -> str:
        """
        Get: Resources(self: AppointmentItemClass) -> str
        Set: Resources(self: AppointmentItemClass) = value
        """
        ...

    @property
    def ResponseRequested(self) -> bool:
        """
        Get: ResponseRequested(self: AppointmentItemClass) -> bool
        Set: ResponseRequested(self: AppointmentItemClass) = value
        """
        ...

    @property
    def ResponseStatus(self) -> OlResponseStatus:
        """ Get: ResponseStatus(self: AppointmentItemClass) -> OlResponseStatus """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: AppointmentItemClass) -> object
        Set: RTFBody(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: AppointmentItemClass) -> bool """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: AppointmentItemClass) -> Account
        Set: SendUsingAccount(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: AppointmentItemClass) -> OlSensitivity
        Set: Sensitivity(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AppointmentItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: AppointmentItemClass) -> int """
        ...

    @property
    def Start(self) -> DateTime:
        """
        Get: Start(self: AppointmentItemClass) -> DateTime
        Set: Start(self: AppointmentItemClass) = value
        """
        ...

    @property
    def StartInStartTimeZone(self) -> DateTime:
        """
        Get: StartInStartTimeZone(self: AppointmentItemClass) -> DateTime
        Set: StartInStartTimeZone(self: AppointmentItemClass) = value
        """
        ...

    @property
    def StartTimeZone(self) -> TimeZone:
        """
        Get: StartTimeZone(self: AppointmentItemClass) -> TimeZone
        Set: StartTimeZone(self: AppointmentItemClass) = value
        """
        ...

    @property
    def StartUTC(self) -> DateTime:
        """
        Get: StartUTC(self: AppointmentItemClass) -> DateTime
        Set: StartUTC(self: AppointmentItemClass) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: AppointmentItemClass) -> str
        Set: Subject(self: AppointmentItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: AppointmentItemClass) -> bool
        Set: UnRead(self: AppointmentItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: AppointmentItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: AppointmentItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: AppointmentItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: AppointmentItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: AppointmentItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: AppointmentItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: AppointmentItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: AppointmentItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: AppointmentItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: AppointmentItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: AppointmentItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: AppointmentItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def ClearRecurrencePattern(self): # -> 
        """ ClearRecurrencePattern(self: AppointmentItemClass) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: AppointmentItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: AppointmentItemClass) -> object """
        ...

    def CopyTo(self, DestinationFolder:MAPIFolder, CopyOptions:OlAppointmentCopyOptions) -> AppointmentItem:
        """ CopyTo(self: AppointmentItemClass, DestinationFolder: MAPIFolder, CopyOptions: OlAppointmentCopyOptions) -> AppointmentItem """
        ...

    def Delete(self): # -> 
        """ Delete(self: AppointmentItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: AppointmentItemClass, Modal: object) """
        ...

    def ForwardAsVcal(self) -> MailItem:
        """ ForwardAsVcal(self: AppointmentItemClass) -> MailItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: AppointmentItemClass) -> Conversation """
        ...

    def GetOrganizer(self) -> AddressEntry:
        """ GetOrganizer(self: AppointmentItemClass) -> AddressEntry """
        ...

    def GetRecurrencePattern(self) -> RecurrencePattern:
        """ GetRecurrencePattern(self: AppointmentItemClass) -> RecurrencePattern """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: AppointmentItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: AppointmentItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: AppointmentItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: AppointmentItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: AppointmentItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: AppointmentItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: AppointmentItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: AppointmentItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: AppointmentItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: AppointmentItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: AppointmentItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: AppointmentItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: AppointmentItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: AppointmentItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: AppointmentItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: AppointmentItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: AppointmentItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: AppointmentItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: AppointmentItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: AppointmentItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: AppointmentItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: AppointmentItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: AppointmentItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: AppointmentItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: AppointmentItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: AppointmentItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: AppointmentItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: AppointmentItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: AppointmentItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: AppointmentItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: AppointmentItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: AppointmentItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: AppointmentItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: AppointmentItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: AppointmentItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: AppointmentItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: AppointmentItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: AppointmentItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: AppointmentItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: AppointmentItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: AppointmentItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: AppointmentItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: AppointmentItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Respond(self, Response:OlMeetingResponse, fNoUI:object, fAdditionalTextDialog:object) -> MeetingItem:
        """ Respond(self: AppointmentItemClass, Response: OlMeetingResponse, fNoUI: object, fAdditionalTextDialog: object) -> MeetingItem """
        ...

    def Save(self): # -> 
        """ Save(self: AppointmentItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: AppointmentItemClass, Path: str, Type: object) """
        ...

    def Send(self): # -> 
        """ Send(self: AppointmentItemClass) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: AppointmentItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_10_Event_Send = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Unload = ...
    Write = ...


class _AssignToCategoryRuleAction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: _AssignToCategoryRuleAction) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _AssignToCategoryRuleAction) -> Application """
        ...

    @property
    def Categories(self) -> object:
        """
        Get: Categories(self: _AssignToCategoryRuleAction) -> object
        Set: Categories(self: _AssignToCategoryRuleAction) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _AssignToCategoryRuleAction) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _AssignToCategoryRuleAction) -> bool
        Set: Enabled(self: _AssignToCategoryRuleAction) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _AssignToCategoryRuleAction) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _AssignToCategoryRuleAction) -> NameSpace """
        ...



class AssignToCategoryRuleAction(_AssignToCategoryRuleAction): # skipped bases: <type 'object'>
    """ no doc """
    pass

class AssignToCategoryRuleActionClass(AssignToCategoryRuleAction, __ComObject): # skipped bases: <type '_AssignToCategoryRuleAction'>, <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: AssignToCategoryRuleActionClass) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: AssignToCategoryRuleActionClass) -> Application """
        ...

    @property
    def Categories(self) -> object:
        """
        Get: Categories(self: AssignToCategoryRuleActionClass) -> object
        Set: Categories(self: AssignToCategoryRuleActionClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AssignToCategoryRuleActionClass) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: AssignToCategoryRuleActionClass) -> bool
        Set: Enabled(self: AssignToCategoryRuleActionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AssignToCategoryRuleActionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AssignToCategoryRuleActionClass) -> NameSpace """
        ...



class Attachment: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Attachment) -> Application """
        ...

    @property
    def BlockLevel(self) -> OlAttachmentBlockLevel:
        """ Get: BlockLevel(self: Attachment) -> OlAttachmentBlockLevel """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Attachment) -> OlObjectClass """
        ...

    @property
    def DisplayName(self) -> str:
        """
        Get: DisplayName(self: Attachment) -> str
        Set: DisplayName(self: Attachment) = value
        """
        ...

    @property
    def FileName(self) -> str:
        """ Get: FileName(self: Attachment) -> str """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Attachment) -> int """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: Attachment) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Attachment) -> object """
        ...

    @property
    def PathName(self) -> str:
        """ Get: PathName(self: Attachment) -> str """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: Attachment) -> int
        Set: Position(self: Attachment) = value
        """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: Attachment) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Attachment) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: Attachment) -> int """
        ...

    @property
    def Type(self) -> OlAttachmentType:
        """ Get: Type(self: Attachment) -> OlAttachmentType """
        ...


    def Delete(self): # -> 
        """ Delete(self: Attachment) """
        ...

    def GetTemporaryFilePath(self) -> str:
        """ GetTemporaryFilePath(self: Attachment) -> str """
        ...

    def SaveAsFile(self, Path:str): # -> 
        """ SaveAsFile(self: Attachment, Path: str) """
        ...


class Attachments(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Attachments) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Attachments) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Attachments) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Attachments) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Attachments) -> NameSpace """
        ...


    def Add(self, Source:object, Type:object, Position:object, DisplayName:object) -> Attachment:
        """ Add(self: Attachments, Source: object, Type: object, Position: object, DisplayName: object) -> Attachment """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: Attachments, Index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _AttachmentSelection(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _AttachmentSelection) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _AttachmentSelection) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _AttachmentSelection) -> int """
        ...

    @property
    def Location(self) -> OlSelectionLocation:
        """ Get: Location(self: _AttachmentSelection) -> OlSelectionLocation """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _AttachmentSelection) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _AttachmentSelection) -> NameSpace """
        ...


    def GetSelection(self, SelectionContents:OlSelectionContents) -> Selection:
        """ GetSelection(self: _AttachmentSelection, SelectionContents: OlSelectionContents) -> Selection """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AttachmentSelection(_AttachmentSelection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class AttachmentSelectionClass(AttachmentSelection, __ComObject): # skipped bases: <type '_AttachmentSelection'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AttachmentSelectionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AttachmentSelectionClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: AttachmentSelectionClass) -> int """
        ...

    @property
    def Location(self) -> OlSelectionLocation:
        """ Get: Location(self: AttachmentSelectionClass) -> OlSelectionLocation """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AttachmentSelectionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AttachmentSelectionClass) -> NameSpace """
        ...


    def GetSelection(self, SelectionContents:OlSelectionContents) -> Selection:
        """ GetSelection(self: AttachmentSelectionClass, SelectionContents: OlSelectionContents) -> Selection """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _AutoFormatRule: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _AutoFormatRule) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _AutoFormatRule) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _AutoFormatRule) -> bool
        Set: Enabled(self: _AutoFormatRule) = value
        """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: _AutoFormatRule) -> str
        Set: Filter(self: _AutoFormatRule) = value
        """
        ...

    @property
    def Font(self) -> ViewFont:
        """
        Get: Font(self: _AutoFormatRule) -> ViewFont
        Set: Font(self: _AutoFormatRule) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _AutoFormatRule) -> str
        Set: Name(self: _AutoFormatRule) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _AutoFormatRule) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _AutoFormatRule) -> NameSpace """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: _AutoFormatRule) -> bool """
        ...



class AutoFormatRule(_AutoFormatRule): # skipped bases: <type 'object'>
    """ no doc """
    pass

class AutoFormatRuleClass(AutoFormatRule, __ComObject): # skipped bases: <type '_AutoFormatRule'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoFormatRuleClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AutoFormatRuleClass) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: AutoFormatRuleClass) -> bool
        Set: Enabled(self: AutoFormatRuleClass) = value
        """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: AutoFormatRuleClass) -> str
        Set: Filter(self: AutoFormatRuleClass) = value
        """
        ...

    @property
    def Font(self) -> ViewFont:
        """
        Get: Font(self: AutoFormatRuleClass) -> ViewFont
        Set: Font(self: AutoFormatRuleClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: AutoFormatRuleClass) -> str
        Set: Name(self: AutoFormatRuleClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoFormatRuleClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AutoFormatRuleClass) -> NameSpace """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: AutoFormatRuleClass) -> bool """
        ...



class _AutoFormatRules(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _AutoFormatRules) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _AutoFormatRules) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _AutoFormatRules) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _AutoFormatRules) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _AutoFormatRules) -> NameSpace """
        ...


    def Add(self, Name:str) -> AutoFormatRule:
        """ Add(self: _AutoFormatRules, Name: str) -> AutoFormatRule """
        ...

    def Insert(self, Name:str, Index:object) -> AutoFormatRule:
        """ Insert(self: _AutoFormatRules, Name: str, Index: object) -> AutoFormatRule """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: _AutoFormatRules, Index: object) """
        ...

    def RemoveAll(self): # -> 
        """ RemoveAll(self: _AutoFormatRules) """
        ...

    def Save(self): # -> 
        """ Save(self: _AutoFormatRules) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AutoFormatRules(_AutoFormatRules): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class AutoFormatRulesClass(AutoFormatRules, __ComObject): # skipped bases: <type '_AutoFormatRules'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoFormatRulesClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: AutoFormatRulesClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: AutoFormatRulesClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoFormatRulesClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: AutoFormatRulesClass) -> NameSpace """
        ...


    def Add(self, Name:str) -> AutoFormatRule:
        """ Add(self: AutoFormatRulesClass, Name: str) -> AutoFormatRule """
        ...

    def Insert(self, Name:str, Index:object) -> AutoFormatRule:
        """ Insert(self: AutoFormatRulesClass, Name: str, Index: object) -> AutoFormatRule """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: AutoFormatRulesClass, Index: object) """
        ...

    def RemoveAll(self): # -> 
        """ RemoveAll(self: AutoFormatRulesClass) """
        ...

    def Save(self): # -> 
        """ Save(self: AutoFormatRulesClass) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _BusinessCardView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _BusinessCardView) -> Application """
        ...

    @property
    def CardSize(self) -> int:
        """
        Get: CardSize(self: _BusinessCardView) -> int
        Set: CardSize(self: _BusinessCardView) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _BusinessCardView) -> OlObjectClass """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: _BusinessCardView) -> str
        Set: Filter(self: _BusinessCardView) = value
        """
        ...

    @property
    def HeadingsFont(self) -> ViewFont:
        """ Get: HeadingsFont(self: _BusinessCardView) -> ViewFont """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: _BusinessCardView) -> str
        Set: Language(self: _BusinessCardView) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: _BusinessCardView) -> bool
        Set: LockUserChanges(self: _BusinessCardView) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _BusinessCardView) -> str
        Set: Name(self: _BusinessCardView) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _BusinessCardView) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: _BusinessCardView) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _BusinessCardView) -> NameSpace """
        ...

    @property
    def SortFields(self) -> OrderFields:
        """ Get: SortFields(self: _BusinessCardView) -> OrderFields """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: _BusinessCardView) -> bool """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: _BusinessCardView) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: _BusinessCardView) -> str
        Set: XML(self: _BusinessCardView) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: _BusinessCardView) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: _BusinessCardView, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: _BusinessCardView) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: _BusinessCardView, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: _BusinessCardView) """
        ...

    def Save(self): # -> 
        """ Save(self: _BusinessCardView) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class BusinessCardView(_BusinessCardView): # skipped bases: <type 'object'>
    """ no doc """
    pass

class BusinessCardViewClass(__ComObject, BusinessCardView): # skipped bases: <type '_BusinessCardView'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: BusinessCardViewClass) -> Application """
        ...

    @property
    def CardSize(self) -> int:
        """
        Get: CardSize(self: BusinessCardViewClass) -> int
        Set: CardSize(self: BusinessCardViewClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: BusinessCardViewClass) -> OlObjectClass """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: BusinessCardViewClass) -> str
        Set: Filter(self: BusinessCardViewClass) = value
        """
        ...

    @property
    def HeadingsFont(self) -> ViewFont:
        """ Get: HeadingsFont(self: BusinessCardViewClass) -> ViewFont """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: BusinessCardViewClass) -> str
        Set: Language(self: BusinessCardViewClass) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: BusinessCardViewClass) -> bool
        Set: LockUserChanges(self: BusinessCardViewClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: BusinessCardViewClass) -> str
        Set: Name(self: BusinessCardViewClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: BusinessCardViewClass) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: BusinessCardViewClass) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: BusinessCardViewClass) -> NameSpace """
        ...

    @property
    def SortFields(self) -> OrderFields:
        """ Get: SortFields(self: BusinessCardViewClass) -> OrderFields """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: BusinessCardViewClass) -> bool """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: BusinessCardViewClass) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: BusinessCardViewClass) -> str
        Set: XML(self: BusinessCardViewClass) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: BusinessCardViewClass) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: BusinessCardViewClass, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: BusinessCardViewClass) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: BusinessCardViewClass, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: BusinessCardViewClass) """
        ...

    def Save(self): # -> 
        """ Save(self: BusinessCardViewClass) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class _CalendarModule: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _CalendarModule) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _CalendarModule) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _CalendarModule) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: _CalendarModule) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: _CalendarModule) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _CalendarModule) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: _CalendarModule) -> int
        Set: Position(self: _CalendarModule) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _CalendarModule) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _CalendarModule) -> bool
        Set: Visible(self: _CalendarModule) = value
        """
        ...



class CalendarModule(_CalendarModule): # skipped bases: <type 'object'>
    """ no doc """
    pass

class CalendarModuleClass(CalendarModule, __ComObject): # skipped bases: <type '_CalendarModule'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CalendarModuleClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: CalendarModuleClass) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: CalendarModuleClass) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: CalendarModuleClass) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: CalendarModuleClass) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CalendarModuleClass) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: CalendarModuleClass) -> int
        Set: Position(self: CalendarModuleClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: CalendarModuleClass) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: CalendarModuleClass) -> bool
        Set: Visible(self: CalendarModuleClass) = value
        """
        ...



class _CalendarSharing: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _CalendarSharing) -> Application """
        ...

    @property
    def CalendarDetail(self) -> OlCalendarDetail:
        """
        Get: CalendarDetail(self: _CalendarSharing) -> OlCalendarDetail
        Set: CalendarDetail(self: _CalendarSharing) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _CalendarSharing) -> OlObjectClass """
        ...

    @property
    def EndDate(self) -> DateTime:
        """
        Get: EndDate(self: _CalendarSharing) -> DateTime
        Set: EndDate(self: _CalendarSharing) = value
        """
        ...

    @property
    def Folder(self) -> MAPIFolder:
        """ Get: Folder(self: _CalendarSharing) -> MAPIFolder """
        ...

    @property
    def IncludeAttachments(self) -> bool:
        """
        Get: IncludeAttachments(self: _CalendarSharing) -> bool
        Set: IncludeAttachments(self: _CalendarSharing) = value
        """
        ...

    @property
    def IncludePrivateDetails(self) -> bool:
        """
        Get: IncludePrivateDetails(self: _CalendarSharing) -> bool
        Set: IncludePrivateDetails(self: _CalendarSharing) = value
        """
        ...

    @property
    def IncludeWholeCalendar(self) -> bool:
        """
        Get: IncludeWholeCalendar(self: _CalendarSharing) -> bool
        Set: IncludeWholeCalendar(self: _CalendarSharing) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _CalendarSharing) -> object """
        ...

    @property
    def RestrictToWorkingHours(self) -> bool:
        """
        Get: RestrictToWorkingHours(self: _CalendarSharing) -> bool
        Set: RestrictToWorkingHours(self: _CalendarSharing) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _CalendarSharing) -> NameSpace """
        ...

    @property
    def StartDate(self) -> DateTime:
        """
        Get: StartDate(self: _CalendarSharing) -> DateTime
        Set: StartDate(self: _CalendarSharing) = value
        """
        ...


    def ForwardAsICal(self, MailFormat:OlCalendarMailFormat) -> MailItem:
        """ ForwardAsICal(self: _CalendarSharing, MailFormat: OlCalendarMailFormat) -> MailItem """
        ...

    def SaveAsICal(self, Path:str): # -> 
        """ SaveAsICal(self: _CalendarSharing, Path: str) """
        ...


class CalendarSharing(_CalendarSharing): # skipped bases: <type 'object'>
    """ no doc """
    pass

class CalendarSharingClass(CalendarSharing, __ComObject): # skipped bases: <type '_CalendarSharing'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CalendarSharingClass) -> Application """
        ...

    @property
    def CalendarDetail(self) -> OlCalendarDetail:
        """
        Get: CalendarDetail(self: CalendarSharingClass) -> OlCalendarDetail
        Set: CalendarDetail(self: CalendarSharingClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: CalendarSharingClass) -> OlObjectClass """
        ...

    @property
    def EndDate(self) -> DateTime:
        """
        Get: EndDate(self: CalendarSharingClass) -> DateTime
        Set: EndDate(self: CalendarSharingClass) = value
        """
        ...

    @property
    def Folder(self) -> MAPIFolder:
        """ Get: Folder(self: CalendarSharingClass) -> MAPIFolder """
        ...

    @property
    def IncludeAttachments(self) -> bool:
        """
        Get: IncludeAttachments(self: CalendarSharingClass) -> bool
        Set: IncludeAttachments(self: CalendarSharingClass) = value
        """
        ...

    @property
    def IncludePrivateDetails(self) -> bool:
        """
        Get: IncludePrivateDetails(self: CalendarSharingClass) -> bool
        Set: IncludePrivateDetails(self: CalendarSharingClass) = value
        """
        ...

    @property
    def IncludeWholeCalendar(self) -> bool:
        """
        Get: IncludeWholeCalendar(self: CalendarSharingClass) -> bool
        Set: IncludeWholeCalendar(self: CalendarSharingClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CalendarSharingClass) -> object """
        ...

    @property
    def RestrictToWorkingHours(self) -> bool:
        """
        Get: RestrictToWorkingHours(self: CalendarSharingClass) -> bool
        Set: RestrictToWorkingHours(self: CalendarSharingClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: CalendarSharingClass) -> NameSpace """
        ...

    @property
    def StartDate(self) -> DateTime:
        """
        Get: StartDate(self: CalendarSharingClass) -> DateTime
        Set: StartDate(self: CalendarSharingClass) = value
        """
        ...


    def ForwardAsICal(self, MailFormat:OlCalendarMailFormat) -> MailItem:
        """ ForwardAsICal(self: CalendarSharingClass, MailFormat: OlCalendarMailFormat) -> MailItem """
        ...

    def SaveAsICal(self, Path:str): # -> 
        """ SaveAsICal(self: CalendarSharingClass, Path: str) """
        ...


class _CalendarView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _CalendarView) -> Application """
        ...

    @property
    def AutoFormatRules(self) -> AutoFormatRules:
        """ Get: AutoFormatRules(self: _CalendarView) -> AutoFormatRules """
        ...

    @property
    def BoldDatesWithItems(self) -> bool:
        """
        Get: BoldDatesWithItems(self: _CalendarView) -> bool
        Set: BoldDatesWithItems(self: _CalendarView) = value
        """
        ...

    @property
    def BoldSubjects(self) -> bool:
        """
        Get: BoldSubjects(self: _CalendarView) -> bool
        Set: BoldSubjects(self: _CalendarView) = value
        """
        ...

    @property
    def CalendarViewMode(self) -> OlCalendarViewMode:
        """
        Get: CalendarViewMode(self: _CalendarView) -> OlCalendarViewMode
        Set: CalendarViewMode(self: _CalendarView) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _CalendarView) -> OlObjectClass """
        ...

    @property
    def DaysInMultiDayMode(self) -> int:
        """
        Get: DaysInMultiDayMode(self: _CalendarView) -> int
        Set: DaysInMultiDayMode(self: _CalendarView) = value
        """
        ...

    @property
    def DayWeekFont(self) -> ViewFont:
        """ Get: DayWeekFont(self: _CalendarView) -> ViewFont """
        ...

    @property
    def DayWeekTimeFont(self) -> ViewFont:
        """ Get: DayWeekTimeFont(self: _CalendarView) -> ViewFont """
        ...

    @property
    def DayWeekTimeScale(self) -> OlDayWeekTimeScale:
        """
        Get: DayWeekTimeScale(self: _CalendarView) -> OlDayWeekTimeScale
        Set: DayWeekTimeScale(self: _CalendarView) = value
        """
        ...

    @property
    def DisplayedDates(self) -> object:
        """ Get: DisplayedDates(self: _CalendarView) -> object """
        ...

    @property
    def EndField(self) -> str:
        """
        Get: EndField(self: _CalendarView) -> str
        Set: EndField(self: _CalendarView) = value
        """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: _CalendarView) -> str
        Set: Filter(self: _CalendarView) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: _CalendarView) -> str
        Set: Language(self: _CalendarView) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: _CalendarView) -> bool
        Set: LockUserChanges(self: _CalendarView) = value
        """
        ...

    @property
    def MonthFont(self) -> ViewFont:
        """ Get: MonthFont(self: _CalendarView) -> ViewFont """
        ...

    @property
    def MonthShowEndTime(self) -> bool:
        """
        Get: MonthShowEndTime(self: _CalendarView) -> bool
        Set: MonthShowEndTime(self: _CalendarView) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _CalendarView) -> str
        Set: Name(self: _CalendarView) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _CalendarView) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: _CalendarView) -> OlViewSaveOption """
        ...

    @property
    def SelectedEndTime(self) -> DateTime:
        """ Get: SelectedEndTime(self: _CalendarView) -> DateTime """
        ...

    @property
    def SelectedStartTime(self) -> DateTime:
        """ Get: SelectedStartTime(self: _CalendarView) -> DateTime """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _CalendarView) -> NameSpace """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: _CalendarView) -> bool """
        ...

    @property
    def StartField(self) -> str:
        """
        Get: StartField(self: _CalendarView) -> str
        Set: StartField(self: _CalendarView) = value
        """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: _CalendarView) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: _CalendarView) -> str
        Set: XML(self: _CalendarView) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: _CalendarView) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: _CalendarView, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: _CalendarView) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: _CalendarView, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: _CalendarView) """
        ...

    def Save(self): # -> 
        """ Save(self: _CalendarView) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class CalendarView(_CalendarView): # skipped bases: <type 'object'>
    """ no doc """
    pass

class CalendarViewClass(CalendarView, __ComObject): # skipped bases: <type '_CalendarView'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CalendarViewClass) -> Application """
        ...

    @property
    def AutoFormatRules(self) -> AutoFormatRules:
        """ Get: AutoFormatRules(self: CalendarViewClass) -> AutoFormatRules """
        ...

    @property
    def BoldDatesWithItems(self) -> bool:
        """
        Get: BoldDatesWithItems(self: CalendarViewClass) -> bool
        Set: BoldDatesWithItems(self: CalendarViewClass) = value
        """
        ...

    @property
    def BoldSubjects(self) -> bool:
        """
        Get: BoldSubjects(self: CalendarViewClass) -> bool
        Set: BoldSubjects(self: CalendarViewClass) = value
        """
        ...

    @property
    def CalendarViewMode(self) -> OlCalendarViewMode:
        """
        Get: CalendarViewMode(self: CalendarViewClass) -> OlCalendarViewMode
        Set: CalendarViewMode(self: CalendarViewClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: CalendarViewClass) -> OlObjectClass """
        ...

    @property
    def DaysInMultiDayMode(self) -> int:
        """
        Get: DaysInMultiDayMode(self: CalendarViewClass) -> int
        Set: DaysInMultiDayMode(self: CalendarViewClass) = value
        """
        ...

    @property
    def DayWeekFont(self) -> ViewFont:
        """ Get: DayWeekFont(self: CalendarViewClass) -> ViewFont """
        ...

    @property
    def DayWeekTimeFont(self) -> ViewFont:
        """ Get: DayWeekTimeFont(self: CalendarViewClass) -> ViewFont """
        ...

    @property
    def DayWeekTimeScale(self) -> OlDayWeekTimeScale:
        """
        Get: DayWeekTimeScale(self: CalendarViewClass) -> OlDayWeekTimeScale
        Set: DayWeekTimeScale(self: CalendarViewClass) = value
        """
        ...

    @property
    def DisplayedDates(self) -> object:
        """ Get: DisplayedDates(self: CalendarViewClass) -> object """
        ...

    @property
    def EndField(self) -> str:
        """
        Get: EndField(self: CalendarViewClass) -> str
        Set: EndField(self: CalendarViewClass) = value
        """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: CalendarViewClass) -> str
        Set: Filter(self: CalendarViewClass) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: CalendarViewClass) -> str
        Set: Language(self: CalendarViewClass) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: CalendarViewClass) -> bool
        Set: LockUserChanges(self: CalendarViewClass) = value
        """
        ...

    @property
    def MonthFont(self) -> ViewFont:
        """ Get: MonthFont(self: CalendarViewClass) -> ViewFont """
        ...

    @property
    def MonthShowEndTime(self) -> bool:
        """
        Get: MonthShowEndTime(self: CalendarViewClass) -> bool
        Set: MonthShowEndTime(self: CalendarViewClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: CalendarViewClass) -> str
        Set: Name(self: CalendarViewClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CalendarViewClass) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: CalendarViewClass) -> OlViewSaveOption """
        ...

    @property
    def SelectedEndTime(self) -> DateTime:
        """ Get: SelectedEndTime(self: CalendarViewClass) -> DateTime """
        ...

    @property
    def SelectedStartTime(self) -> DateTime:
        """ Get: SelectedStartTime(self: CalendarViewClass) -> DateTime """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: CalendarViewClass) -> NameSpace """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: CalendarViewClass) -> bool """
        ...

    @property
    def StartField(self) -> str:
        """
        Get: StartField(self: CalendarViewClass) -> str
        Set: StartField(self: CalendarViewClass) = value
        """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: CalendarViewClass) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: CalendarViewClass) -> str
        Set: XML(self: CalendarViewClass) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: CalendarViewClass) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: CalendarViewClass, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: CalendarViewClass) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: CalendarViewClass, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: CalendarViewClass) """
        ...

    def Save(self): # -> 
        """ Save(self: CalendarViewClass) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class _CardView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowInCellEditing(self) -> bool:
        """
        Get: AllowInCellEditing(self: _CardView) -> bool
        Set: AllowInCellEditing(self: _CardView) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _CardView) -> Application """
        ...

    @property
    def AutoFormatRules(self) -> AutoFormatRules:
        """ Get: AutoFormatRules(self: _CardView) -> AutoFormatRules """
        ...

    @property
    def BodyFont(self) -> ViewFont:
        """ Get: BodyFont(self: _CardView) -> ViewFont """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _CardView) -> OlObjectClass """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: _CardView) -> str
        Set: Filter(self: _CardView) = value
        """
        ...

    @property
    def HeadingsFont(self) -> ViewFont:
        """ Get: HeadingsFont(self: _CardView) -> ViewFont """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: _CardView) -> str
        Set: Language(self: _CardView) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: _CardView) -> bool
        Set: LockUserChanges(self: _CardView) = value
        """
        ...

    @property
    def MultiLineFieldHeight(self) -> int:
        """
        Get: MultiLineFieldHeight(self: _CardView) -> int
        Set: MultiLineFieldHeight(self: _CardView) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _CardView) -> str
        Set: Name(self: _CardView) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _CardView) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: _CardView) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _CardView) -> NameSpace """
        ...

    @property
    def ShowEmptyFields(self) -> bool:
        """
        Get: ShowEmptyFields(self: _CardView) -> bool
        Set: ShowEmptyFields(self: _CardView) = value
        """
        ...

    @property
    def SortFields(self) -> OrderFields:
        """ Get: SortFields(self: _CardView) -> OrderFields """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: _CardView) -> bool """
        ...

    @property
    def ViewFields(self) -> ViewFields:
        """ Get: ViewFields(self: _CardView) -> ViewFields """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: _CardView) -> OlViewType """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: _CardView) -> int
        Set: Width(self: _CardView) = value
        """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: _CardView) -> str
        Set: XML(self: _CardView) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: _CardView) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: _CardView, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: _CardView) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: _CardView, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: _CardView) """
        ...

    def Save(self): # -> 
        """ Save(self: _CardView) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class CardView(_CardView): # skipped bases: <type 'object'>
    """ no doc """
    pass

class CardViewClass(CardView, __ComObject): # skipped bases: <type '_CardView'>, <type 'object'>
    """ no doc """
    @property
    def AllowInCellEditing(self) -> bool:
        """
        Get: AllowInCellEditing(self: CardViewClass) -> bool
        Set: AllowInCellEditing(self: CardViewClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: CardViewClass) -> Application """
        ...

    @property
    def AutoFormatRules(self) -> AutoFormatRules:
        """ Get: AutoFormatRules(self: CardViewClass) -> AutoFormatRules """
        ...

    @property
    def BodyFont(self) -> ViewFont:
        """ Get: BodyFont(self: CardViewClass) -> ViewFont """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: CardViewClass) -> OlObjectClass """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: CardViewClass) -> str
        Set: Filter(self: CardViewClass) = value
        """
        ...

    @property
    def HeadingsFont(self) -> ViewFont:
        """ Get: HeadingsFont(self: CardViewClass) -> ViewFont """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: CardViewClass) -> str
        Set: Language(self: CardViewClass) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: CardViewClass) -> bool
        Set: LockUserChanges(self: CardViewClass) = value
        """
        ...

    @property
    def MultiLineFieldHeight(self) -> int:
        """
        Get: MultiLineFieldHeight(self: CardViewClass) -> int
        Set: MultiLineFieldHeight(self: CardViewClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: CardViewClass) -> str
        Set: Name(self: CardViewClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CardViewClass) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: CardViewClass) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: CardViewClass) -> NameSpace """
        ...

    @property
    def ShowEmptyFields(self) -> bool:
        """
        Get: ShowEmptyFields(self: CardViewClass) -> bool
        Set: ShowEmptyFields(self: CardViewClass) = value
        """
        ...

    @property
    def SortFields(self) -> OrderFields:
        """ Get: SortFields(self: CardViewClass) -> OrderFields """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: CardViewClass) -> bool """
        ...

    @property
    def ViewFields(self) -> ViewFields:
        """ Get: ViewFields(self: CardViewClass) -> ViewFields """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: CardViewClass) -> OlViewType """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: CardViewClass) -> int
        Set: Width(self: CardViewClass) = value
        """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: CardViewClass) -> str
        Set: XML(self: CardViewClass) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: CardViewClass) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: CardViewClass, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: CardViewClass) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: CardViewClass, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: CardViewClass) """
        ...

    def Save(self): # -> 
        """ Save(self: CardViewClass) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class _Categories(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Categories) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Categories) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Categories) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Categories) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Categories) -> NameSpace """
        ...


    def Add(self, Name:str, Color:object, ShortcutKey:object) -> Category:
        """ Add(self: _Categories, Name: str, Color: object, ShortcutKey: object) -> Category """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: _Categories, Index: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Categories(_Categories): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class CategoriesClass(__ComObject, Categories): # skipped bases: <type 'IEnumerable'>, <type '_Categories'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CategoriesClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: CategoriesClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CategoriesClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CategoriesClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: CategoriesClass) -> NameSpace """
        ...


    def Add(self, Name:str, Color:object, ShortcutKey:object) -> Category:
        """ Add(self: CategoriesClass, Name: str, Color: object, ShortcutKey: object) -> Category """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: CategoriesClass, Index: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _Category: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Category) -> Application """
        ...

    @property
    def CategoryBorderColor(self) -> UInt32:
        """ Get: CategoryBorderColor(self: _Category) -> UInt32 """
        ...

    @property
    def CategoryGradientBottomColor(self) -> UInt32:
        """ Get: CategoryGradientBottomColor(self: _Category) -> UInt32 """
        ...

    @property
    def CategoryGradientTopColor(self) -> UInt32:
        """ Get: CategoryGradientTopColor(self: _Category) -> UInt32 """
        ...

    @property
    def CategoryID(self) -> str:
        """ Get: CategoryID(self: _Category) -> str """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Category) -> OlObjectClass """
        ...

    @property
    def Color(self) -> OlCategoryColor:
        """
        Get: Color(self: _Category) -> OlCategoryColor
        Set: Color(self: _Category) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _Category) -> str
        Set: Name(self: _Category) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Category) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Category) -> NameSpace """
        ...

    @property
    def ShortcutKey(self) -> OlCategoryShortcutKey:
        """
        Get: ShortcutKey(self: _Category) -> OlCategoryShortcutKey
        Set: ShortcutKey(self: _Category) = value
        """
        ...



class Category(_Category): # skipped bases: <type 'object'>
    """ no doc """
    pass

class CategoryClass(Category, __ComObject): # skipped bases: <type '_Category'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CategoryClass) -> Application """
        ...

    @property
    def CategoryBorderColor(self) -> UInt32:
        """ Get: CategoryBorderColor(self: CategoryClass) -> UInt32 """
        ...

    @property
    def CategoryGradientBottomColor(self) -> UInt32:
        """ Get: CategoryGradientBottomColor(self: CategoryClass) -> UInt32 """
        ...

    @property
    def CategoryGradientTopColor(self) -> UInt32:
        """ Get: CategoryGradientTopColor(self: CategoryClass) -> UInt32 """
        ...

    @property
    def CategoryID(self) -> str:
        """ Get: CategoryID(self: CategoryClass) -> str """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: CategoryClass) -> OlObjectClass """
        ...

    @property
    def Color(self) -> OlCategoryColor:
        """
        Get: Color(self: CategoryClass) -> OlCategoryColor
        Set: Color(self: CategoryClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: CategoryClass) -> str
        Set: Name(self: CategoryClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CategoryClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: CategoryClass) -> NameSpace """
        ...

    @property
    def ShortcutKey(self) -> OlCategoryShortcutKey:
        """
        Get: ShortcutKey(self: CategoryClass) -> OlCategoryShortcutKey
        Set: ShortcutKey(self: CategoryClass) = value
        """
        ...



class _CategoryRuleCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _CategoryRuleCondition) -> Application """
        ...

    @property
    def Categories(self) -> object:
        """
        Get: Categories(self: _CategoryRuleCondition) -> object
        Set: Categories(self: _CategoryRuleCondition) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _CategoryRuleCondition) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: _CategoryRuleCondition) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _CategoryRuleCondition) -> bool
        Set: Enabled(self: _CategoryRuleCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _CategoryRuleCondition) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _CategoryRuleCondition) -> NameSpace """
        ...



class CategoryRuleCondition(_CategoryRuleCondition): # skipped bases: <type 'object'>
    """ no doc """
    pass

class CategoryRuleConditionClass(CategoryRuleCondition, __ComObject): # skipped bases: <type '_CategoryRuleCondition'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CategoryRuleConditionClass) -> Application """
        ...

    @property
    def Categories(self) -> object:
        """
        Get: Categories(self: CategoryRuleConditionClass) -> object
        Set: Categories(self: CategoryRuleConditionClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: CategoryRuleConditionClass) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: CategoryRuleConditionClass) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: CategoryRuleConditionClass) -> bool
        Set: Enabled(self: CategoryRuleConditionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CategoryRuleConditionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: CategoryRuleConditionClass) -> NameSpace """
        ...



class _Column: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Column) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Column) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _Column) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Column) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Column) -> NameSpace """
        ...



class Column(_Column): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ColumnClass(Column, __ComObject): # skipped bases: <type '_Column'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ColumnClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ColumnClass) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ColumnClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ColumnClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ColumnClass) -> NameSpace """
        ...



class _ColumnFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Align(self) -> OlAlign:
        """
        Get: Align(self: _ColumnFormat) -> OlAlign
        Set: Align(self: _ColumnFormat) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ColumnFormat) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ColumnFormat) -> OlObjectClass """
        ...

    @property
    def FieldFormat(self) -> int:
        """
        Get: FieldFormat(self: _ColumnFormat) -> int
        Set: FieldFormat(self: _ColumnFormat) = value
        """
        ...

    @property
    def FieldType(self) -> OlUserPropertyType:
        """ Get: FieldType(self: _ColumnFormat) -> OlUserPropertyType """
        ...

    @property
    def Label(self) -> str:
        """
        Get: Label(self: _ColumnFormat) -> str
        Set: Label(self: _ColumnFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ColumnFormat) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ColumnFormat) -> NameSpace """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: _ColumnFormat) -> int
        Set: Width(self: _ColumnFormat) = value
        """
        ...



class ColumnFormat(_ColumnFormat): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ColumnFormatClass(ColumnFormat, __ComObject): # skipped bases: <type '_ColumnFormat'>, <type 'object'>
    """ no doc """
    @property
    def Align(self) -> OlAlign:
        """
        Get: Align(self: ColumnFormatClass) -> OlAlign
        Set: Align(self: ColumnFormatClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ColumnFormatClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ColumnFormatClass) -> OlObjectClass """
        ...

    @property
    def FieldFormat(self) -> int:
        """
        Get: FieldFormat(self: ColumnFormatClass) -> int
        Set: FieldFormat(self: ColumnFormatClass) = value
        """
        ...

    @property
    def FieldType(self) -> OlUserPropertyType:
        """ Get: FieldType(self: ColumnFormatClass) -> OlUserPropertyType """
        ...

    @property
    def Label(self) -> str:
        """
        Get: Label(self: ColumnFormatClass) -> str
        Set: Label(self: ColumnFormatClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ColumnFormatClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ColumnFormatClass) -> NameSpace """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: ColumnFormatClass) -> int
        Set: Width(self: ColumnFormatClass) = value
        """
        ...



class _Columns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Columns) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Columns) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Columns) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Columns) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Columns) -> NameSpace """
        ...


    def Add(self, Name:str) -> Column:
        """ Add(self: _Columns, Name: str) -> Column """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: _Columns, Index: object) """
        ...

    def RemoveAll(self): # -> 
        """ RemoveAll(self: _Columns) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Columns(_Columns): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class ColumnsClass(Columns, __ComObject): # skipped bases: <type '_Columns'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ColumnsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ColumnsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ColumnsClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ColumnsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ColumnsClass) -> NameSpace """
        ...


    def Add(self, Name:str) -> Column:
        """ Add(self: ColumnsClass, Name: str) -> Column """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: ColumnsClass, Index: object) """
        ...

    def RemoveAll(self): # -> 
        """ RemoveAll(self: ColumnsClass) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Conflict: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Conflict) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Conflict) -> OlObjectClass """
        ...

    @property
    def Item(self) -> object:
        """ Get: Item(self: Conflict) -> object """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Conflict) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Conflict) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Conflict) -> NameSpace """
        ...

    @property
    def Type(self) -> OlObjectClass:
        """ Get: Type(self: Conflict) -> OlObjectClass """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Conflicts(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Conflicts) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Conflicts) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Conflicts) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Conflicts) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Conflicts) -> NameSpace """
        ...


    def GetFirst(self) -> Conflict:
        """ GetFirst(self: Conflicts) -> Conflict """
        ...

    def GetLast(self) -> Conflict:
        """ GetLast(self: Conflicts) -> Conflict """
        ...

    def GetNext(self) -> Conflict:
        """ GetNext(self: Conflicts) -> Conflict """
        ...

    def GetPrevious(self) -> Conflict:
        """ GetPrevious(self: Conflicts) -> Conflict """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _ContactItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Account(self) -> str:
        """
        Get: Account(self: _ContactItem) -> str
        Set: Account(self: _ContactItem) = value
        """
        ...

    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _ContactItem) -> Actions """
        ...

    @property
    def Anniversary(self) -> DateTime:
        """
        Get: Anniversary(self: _ContactItem) -> DateTime
        Set: Anniversary(self: _ContactItem) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ContactItem) -> Application """
        ...

    @property
    def AssistantName(self) -> str:
        """
        Get: AssistantName(self: _ContactItem) -> str
        Set: AssistantName(self: _ContactItem) = value
        """
        ...

    @property
    def AssistantTelephoneNumber(self) -> str:
        """
        Get: AssistantTelephoneNumber(self: _ContactItem) -> str
        Set: AssistantTelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _ContactItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _ContactItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _ContactItem) -> str
        Set: BillingInformation(self: _ContactItem) = value
        """
        ...

    @property
    def Birthday(self) -> DateTime:
        """
        Get: Birthday(self: _ContactItem) -> DateTime
        Set: Birthday(self: _ContactItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _ContactItem) -> str
        Set: Body(self: _ContactItem) = value
        """
        ...

    @property
    def Business2TelephoneNumber(self) -> str:
        """
        Get: Business2TelephoneNumber(self: _ContactItem) -> str
        Set: Business2TelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def BusinessAddress(self) -> str:
        """
        Get: BusinessAddress(self: _ContactItem) -> str
        Set: BusinessAddress(self: _ContactItem) = value
        """
        ...

    @property
    def BusinessAddressCity(self) -> str:
        """
        Get: BusinessAddressCity(self: _ContactItem) -> str
        Set: BusinessAddressCity(self: _ContactItem) = value
        """
        ...

    @property
    def BusinessAddressCountry(self) -> str:
        """
        Get: BusinessAddressCountry(self: _ContactItem) -> str
        Set: BusinessAddressCountry(self: _ContactItem) = value
        """
        ...

    @property
    def BusinessAddressPostalCode(self) -> str:
        """
        Get: BusinessAddressPostalCode(self: _ContactItem) -> str
        Set: BusinessAddressPostalCode(self: _ContactItem) = value
        """
        ...

    @property
    def BusinessAddressPostOfficeBox(self) -> str:
        """
        Get: BusinessAddressPostOfficeBox(self: _ContactItem) -> str
        Set: BusinessAddressPostOfficeBox(self: _ContactItem) = value
        """
        ...

    @property
    def BusinessAddressState(self) -> str:
        """
        Get: BusinessAddressState(self: _ContactItem) -> str
        Set: BusinessAddressState(self: _ContactItem) = value
        """
        ...

    @property
    def BusinessAddressStreet(self) -> str:
        """
        Get: BusinessAddressStreet(self: _ContactItem) -> str
        Set: BusinessAddressStreet(self: _ContactItem) = value
        """
        ...

    @property
    def BusinessCardLayoutXml(self) -> str:
        """
        Get: BusinessCardLayoutXml(self: _ContactItem) -> str
        Set: BusinessCardLayoutXml(self: _ContactItem) = value
        """
        ...

    @property
    def BusinessCardType(self) -> OlBusinessCardType:
        """ Get: BusinessCardType(self: _ContactItem) -> OlBusinessCardType """
        ...

    @property
    def BusinessFaxNumber(self) -> str:
        """
        Get: BusinessFaxNumber(self: _ContactItem) -> str
        Set: BusinessFaxNumber(self: _ContactItem) = value
        """
        ...

    @property
    def BusinessHomePage(self) -> str:
        """
        Get: BusinessHomePage(self: _ContactItem) -> str
        Set: BusinessHomePage(self: _ContactItem) = value
        """
        ...

    @property
    def BusinessTelephoneNumber(self) -> str:
        """
        Get: BusinessTelephoneNumber(self: _ContactItem) -> str
        Set: BusinessTelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def CallbackTelephoneNumber(self) -> str:
        """
        Get: CallbackTelephoneNumber(self: _ContactItem) -> str
        Set: CallbackTelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def CarTelephoneNumber(self) -> str:
        """
        Get: CarTelephoneNumber(self: _ContactItem) -> str
        Set: CarTelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _ContactItem) -> str
        Set: Categories(self: _ContactItem) = value
        """
        ...

    @property
    def Children(self) -> str:
        """
        Get: Children(self: _ContactItem) -> str
        Set: Children(self: _ContactItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ContactItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _ContactItem) -> str
        Set: Companies(self: _ContactItem) = value
        """
        ...

    @property
    def CompanyAndFullName(self) -> str:
        """ Get: CompanyAndFullName(self: _ContactItem) -> str """
        ...

    @property
    def CompanyLastFirstNoSpace(self) -> str:
        """ Get: CompanyLastFirstNoSpace(self: _ContactItem) -> str """
        ...

    @property
    def CompanyLastFirstSpaceOnly(self) -> str:
        """ Get: CompanyLastFirstSpaceOnly(self: _ContactItem) -> str """
        ...

    @property
    def CompanyMainTelephoneNumber(self) -> str:
        """
        Get: CompanyMainTelephoneNumber(self: _ContactItem) -> str
        Set: CompanyMainTelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def CompanyName(self) -> str:
        """
        Get: CompanyName(self: _ContactItem) -> str
        Set: CompanyName(self: _ContactItem) = value
        """
        ...

    @property
    def ComputerNetworkName(self) -> str:
        """
        Get: ComputerNetworkName(self: _ContactItem) -> str
        Set: ComputerNetworkName(self: _ContactItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _ContactItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _ContactItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _ContactItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _ContactItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _ContactItem) -> DateTime """
        ...

    @property
    def CustomerID(self) -> str:
        """
        Get: CustomerID(self: _ContactItem) -> str
        Set: CustomerID(self: _ContactItem) = value
        """
        ...

    @property
    def Department(self) -> str:
        """
        Get: Department(self: _ContactItem) -> str
        Set: Department(self: _ContactItem) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _ContactItem) -> OlDownloadState """
        ...

    @property
    def Email1Address(self) -> str:
        """
        Get: Email1Address(self: _ContactItem) -> str
        Set: Email1Address(self: _ContactItem) = value
        """
        ...

    @property
    def Email1AddressType(self) -> str:
        """
        Get: Email1AddressType(self: _ContactItem) -> str
        Set: Email1AddressType(self: _ContactItem) = value
        """
        ...

    @property
    def Email1DisplayName(self) -> str:
        """
        Get: Email1DisplayName(self: _ContactItem) -> str
        Set: Email1DisplayName(self: _ContactItem) = value
        """
        ...

    @property
    def Email1EntryID(self) -> str:
        """ Get: Email1EntryID(self: _ContactItem) -> str """
        ...

    @property
    def Email2Address(self) -> str:
        """
        Get: Email2Address(self: _ContactItem) -> str
        Set: Email2Address(self: _ContactItem) = value
        """
        ...

    @property
    def Email2AddressType(self) -> str:
        """
        Get: Email2AddressType(self: _ContactItem) -> str
        Set: Email2AddressType(self: _ContactItem) = value
        """
        ...

    @property
    def Email2DisplayName(self) -> str:
        """
        Get: Email2DisplayName(self: _ContactItem) -> str
        Set: Email2DisplayName(self: _ContactItem) = value
        """
        ...

    @property
    def Email2EntryID(self) -> str:
        """ Get: Email2EntryID(self: _ContactItem) -> str """
        ...

    @property
    def Email3Address(self) -> str:
        """
        Get: Email3Address(self: _ContactItem) -> str
        Set: Email3Address(self: _ContactItem) = value
        """
        ...

    @property
    def Email3AddressType(self) -> str:
        """
        Get: Email3AddressType(self: _ContactItem) -> str
        Set: Email3AddressType(self: _ContactItem) = value
        """
        ...

    @property
    def Email3DisplayName(self) -> str:
        """
        Get: Email3DisplayName(self: _ContactItem) -> str
        Set: Email3DisplayName(self: _ContactItem) = value
        """
        ...

    @property
    def Email3EntryID(self) -> str:
        """ Get: Email3EntryID(self: _ContactItem) -> str """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _ContactItem) -> str """
        ...

    @property
    def FileAs(self) -> str:
        """
        Get: FileAs(self: _ContactItem) -> str
        Set: FileAs(self: _ContactItem) = value
        """
        ...

    @property
    def FirstName(self) -> str:
        """
        Get: FirstName(self: _ContactItem) -> str
        Set: FirstName(self: _ContactItem) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _ContactItem) -> FormDescription """
        ...

    @property
    def FTPSite(self) -> str:
        """
        Get: FTPSite(self: _ContactItem) -> str
        Set: FTPSite(self: _ContactItem) = value
        """
        ...

    @property
    def FullName(self) -> str:
        """
        Get: FullName(self: _ContactItem) -> str
        Set: FullName(self: _ContactItem) = value
        """
        ...

    @property
    def FullNameAndCompany(self) -> str:
        """ Get: FullNameAndCompany(self: _ContactItem) -> str """
        ...

    @property
    def Gender(self) -> OlGender:
        """
        Get: Gender(self: _ContactItem) -> OlGender
        Set: Gender(self: _ContactItem) = value
        """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _ContactItem) -> Inspector """
        ...

    @property
    def GovernmentIDNumber(self) -> str:
        """
        Get: GovernmentIDNumber(self: _ContactItem) -> str
        Set: GovernmentIDNumber(self: _ContactItem) = value
        """
        ...

    @property
    def HasPicture(self) -> bool:
        """ Get: HasPicture(self: _ContactItem) -> bool """
        ...

    @property
    def Hobby(self) -> str:
        """
        Get: Hobby(self: _ContactItem) -> str
        Set: Hobby(self: _ContactItem) = value
        """
        ...

    @property
    def Home2TelephoneNumber(self) -> str:
        """
        Get: Home2TelephoneNumber(self: _ContactItem) -> str
        Set: Home2TelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def HomeAddress(self) -> str:
        """
        Get: HomeAddress(self: _ContactItem) -> str
        Set: HomeAddress(self: _ContactItem) = value
        """
        ...

    @property
    def HomeAddressCity(self) -> str:
        """
        Get: HomeAddressCity(self: _ContactItem) -> str
        Set: HomeAddressCity(self: _ContactItem) = value
        """
        ...

    @property
    def HomeAddressCountry(self) -> str:
        """
        Get: HomeAddressCountry(self: _ContactItem) -> str
        Set: HomeAddressCountry(self: _ContactItem) = value
        """
        ...

    @property
    def HomeAddressPostalCode(self) -> str:
        """
        Get: HomeAddressPostalCode(self: _ContactItem) -> str
        Set: HomeAddressPostalCode(self: _ContactItem) = value
        """
        ...

    @property
    def HomeAddressPostOfficeBox(self) -> str:
        """
        Get: HomeAddressPostOfficeBox(self: _ContactItem) -> str
        Set: HomeAddressPostOfficeBox(self: _ContactItem) = value
        """
        ...

    @property
    def HomeAddressState(self) -> str:
        """
        Get: HomeAddressState(self: _ContactItem) -> str
        Set: HomeAddressState(self: _ContactItem) = value
        """
        ...

    @property
    def HomeAddressStreet(self) -> str:
        """
        Get: HomeAddressStreet(self: _ContactItem) -> str
        Set: HomeAddressStreet(self: _ContactItem) = value
        """
        ...

    @property
    def HomeFaxNumber(self) -> str:
        """
        Get: HomeFaxNumber(self: _ContactItem) -> str
        Set: HomeFaxNumber(self: _ContactItem) = value
        """
        ...

    @property
    def HomeTelephoneNumber(self) -> str:
        """
        Get: HomeTelephoneNumber(self: _ContactItem) -> str
        Set: HomeTelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def IMAddress(self) -> str:
        """
        Get: IMAddress(self: _ContactItem) -> str
        Set: IMAddress(self: _ContactItem) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _ContactItem) -> OlImportance
        Set: Importance(self: _ContactItem) = value
        """
        ...

    @property
    def Initials(self) -> str:
        """
        Get: Initials(self: _ContactItem) -> str
        Set: Initials(self: _ContactItem) = value
        """
        ...

    @property
    def InternetFreeBusyAddress(self) -> str:
        """
        Get: InternetFreeBusyAddress(self: _ContactItem) -> str
        Set: InternetFreeBusyAddress(self: _ContactItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _ContactItem) -> bool """
        ...

    @property
    def ISDNNumber(self) -> str:
        """
        Get: ISDNNumber(self: _ContactItem) -> str
        Set: ISDNNumber(self: _ContactItem) = value
        """
        ...

    @property
    def IsMarkedAsTask(self) -> bool:
        """ Get: IsMarkedAsTask(self: _ContactItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _ContactItem) -> ItemProperties """
        ...

    @property
    def JobTitle(self) -> str:
        """
        Get: JobTitle(self: _ContactItem) -> str
        Set: JobTitle(self: _ContactItem) = value
        """
        ...

    @property
    def Journal(self) -> bool:
        """
        Get: Journal(self: _ContactItem) -> bool
        Set: Journal(self: _ContactItem) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: _ContactItem) -> str
        Set: Language(self: _ContactItem) = value
        """
        ...

    @property
    def LastFirstAndSuffix(self) -> str:
        """ Get: LastFirstAndSuffix(self: _ContactItem) -> str """
        ...

    @property
    def LastFirstNoSpace(self) -> str:
        """ Get: LastFirstNoSpace(self: _ContactItem) -> str """
        ...

    @property
    def LastFirstNoSpaceAndSuffix(self) -> str:
        """ Get: LastFirstNoSpaceAndSuffix(self: _ContactItem) -> str """
        ...

    @property
    def LastFirstNoSpaceCompany(self) -> str:
        """ Get: LastFirstNoSpaceCompany(self: _ContactItem) -> str """
        ...

    @property
    def LastFirstSpaceOnly(self) -> str:
        """ Get: LastFirstSpaceOnly(self: _ContactItem) -> str """
        ...

    @property
    def LastFirstSpaceOnlyCompany(self) -> str:
        """ Get: LastFirstSpaceOnlyCompany(self: _ContactItem) -> str """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _ContactItem) -> DateTime """
        ...

    @property
    def LastName(self) -> str:
        """
        Get: LastName(self: _ContactItem) -> str
        Set: LastName(self: _ContactItem) = value
        """
        ...

    @property
    def LastNameAndFirstName(self) -> str:
        """ Get: LastNameAndFirstName(self: _ContactItem) -> str """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _ContactItem) -> Links """
        ...

    @property
    def MailingAddress(self) -> str:
        """
        Get: MailingAddress(self: _ContactItem) -> str
        Set: MailingAddress(self: _ContactItem) = value
        """
        ...

    @property
    def MailingAddressCity(self) -> str:
        """
        Get: MailingAddressCity(self: _ContactItem) -> str
        Set: MailingAddressCity(self: _ContactItem) = value
        """
        ...

    @property
    def MailingAddressCountry(self) -> str:
        """
        Get: MailingAddressCountry(self: _ContactItem) -> str
        Set: MailingAddressCountry(self: _ContactItem) = value
        """
        ...

    @property
    def MailingAddressPostalCode(self) -> str:
        """
        Get: MailingAddressPostalCode(self: _ContactItem) -> str
        Set: MailingAddressPostalCode(self: _ContactItem) = value
        """
        ...

    @property
    def MailingAddressPostOfficeBox(self) -> str:
        """
        Get: MailingAddressPostOfficeBox(self: _ContactItem) -> str
        Set: MailingAddressPostOfficeBox(self: _ContactItem) = value
        """
        ...

    @property
    def MailingAddressState(self) -> str:
        """
        Get: MailingAddressState(self: _ContactItem) -> str
        Set: MailingAddressState(self: _ContactItem) = value
        """
        ...

    @property
    def MailingAddressStreet(self) -> str:
        """
        Get: MailingAddressStreet(self: _ContactItem) -> str
        Set: MailingAddressStreet(self: _ContactItem) = value
        """
        ...

    @property
    def ManagerName(self) -> str:
        """
        Get: ManagerName(self: _ContactItem) -> str
        Set: ManagerName(self: _ContactItem) = value
        """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _ContactItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _ContactItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _ContactItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _ContactItem) -> str
        Set: MessageClass(self: _ContactItem) = value
        """
        ...

    @property
    def MiddleName(self) -> str:
        """
        Get: MiddleName(self: _ContactItem) -> str
        Set: MiddleName(self: _ContactItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _ContactItem) -> str
        Set: Mileage(self: _ContactItem) = value
        """
        ...

    @property
    def MobileTelephoneNumber(self) -> str:
        """
        Get: MobileTelephoneNumber(self: _ContactItem) -> str
        Set: MobileTelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def NetMeetingAlias(self) -> str:
        """
        Get: NetMeetingAlias(self: _ContactItem) -> str
        Set: NetMeetingAlias(self: _ContactItem) = value
        """
        ...

    @property
    def NetMeetingServer(self) -> str:
        """
        Get: NetMeetingServer(self: _ContactItem) -> str
        Set: NetMeetingServer(self: _ContactItem) = value
        """
        ...

    @property
    def NickName(self) -> str:
        """
        Get: NickName(self: _ContactItem) -> str
        Set: NickName(self: _ContactItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _ContactItem) -> bool
        Set: NoAging(self: _ContactItem) = value
        """
        ...

    @property
    def OfficeLocation(self) -> str:
        """
        Get: OfficeLocation(self: _ContactItem) -> str
        Set: OfficeLocation(self: _ContactItem) = value
        """
        ...

    @property
    def OrganizationalIDNumber(self) -> str:
        """
        Get: OrganizationalIDNumber(self: _ContactItem) -> str
        Set: OrganizationalIDNumber(self: _ContactItem) = value
        """
        ...

    @property
    def OtherAddress(self) -> str:
        """
        Get: OtherAddress(self: _ContactItem) -> str
        Set: OtherAddress(self: _ContactItem) = value
        """
        ...

    @property
    def OtherAddressCity(self) -> str:
        """
        Get: OtherAddressCity(self: _ContactItem) -> str
        Set: OtherAddressCity(self: _ContactItem) = value
        """
        ...

    @property
    def OtherAddressCountry(self) -> str:
        """
        Get: OtherAddressCountry(self: _ContactItem) -> str
        Set: OtherAddressCountry(self: _ContactItem) = value
        """
        ...

    @property
    def OtherAddressPostalCode(self) -> str:
        """
        Get: OtherAddressPostalCode(self: _ContactItem) -> str
        Set: OtherAddressPostalCode(self: _ContactItem) = value
        """
        ...

    @property
    def OtherAddressPostOfficeBox(self) -> str:
        """
        Get: OtherAddressPostOfficeBox(self: _ContactItem) -> str
        Set: OtherAddressPostOfficeBox(self: _ContactItem) = value
        """
        ...

    @property
    def OtherAddressState(self) -> str:
        """
        Get: OtherAddressState(self: _ContactItem) -> str
        Set: OtherAddressState(self: _ContactItem) = value
        """
        ...

    @property
    def OtherAddressStreet(self) -> str:
        """
        Get: OtherAddressStreet(self: _ContactItem) -> str
        Set: OtherAddressStreet(self: _ContactItem) = value
        """
        ...

    @property
    def OtherFaxNumber(self) -> str:
        """
        Get: OtherFaxNumber(self: _ContactItem) -> str
        Set: OtherFaxNumber(self: _ContactItem) = value
        """
        ...

    @property
    def OtherTelephoneNumber(self) -> str:
        """
        Get: OtherTelephoneNumber(self: _ContactItem) -> str
        Set: OtherTelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _ContactItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _ContactItem) -> str """
        ...

    @property
    def PagerNumber(self) -> str:
        """
        Get: PagerNumber(self: _ContactItem) -> str
        Set: PagerNumber(self: _ContactItem) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ContactItem) -> object """
        ...

    @property
    def PersonalHomePage(self) -> str:
        """
        Get: PersonalHomePage(self: _ContactItem) -> str
        Set: PersonalHomePage(self: _ContactItem) = value
        """
        ...

    @property
    def PrimaryTelephoneNumber(self) -> str:
        """
        Get: PrimaryTelephoneNumber(self: _ContactItem) -> str
        Set: PrimaryTelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def Profession(self) -> str:
        """
        Get: Profession(self: _ContactItem) -> str
        Set: Profession(self: _ContactItem) = value
        """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _ContactItem) -> PropertyAccessor """
        ...

    @property
    def RadioTelephoneNumber(self) -> str:
        """
        Get: RadioTelephoneNumber(self: _ContactItem) -> str
        Set: RadioTelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def ReferredBy(self) -> str:
        """
        Get: ReferredBy(self: _ContactItem) -> str
        Set: ReferredBy(self: _ContactItem) = value
        """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: _ContactItem) -> bool
        Set: ReminderOverrideDefault(self: _ContactItem) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: _ContactItem) -> bool
        Set: ReminderPlaySound(self: _ContactItem) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: _ContactItem) -> bool
        Set: ReminderSet(self: _ContactItem) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: _ContactItem) -> str
        Set: ReminderSoundFile(self: _ContactItem) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: _ContactItem) -> DateTime
        Set: ReminderTime(self: _ContactItem) = value
        """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _ContactItem) -> object
        Set: RTFBody(self: _ContactItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _ContactItem) -> bool """
        ...

    @property
    def SelectedMailingAddress(self) -> OlMailingAddress:
        """
        Get: SelectedMailingAddress(self: _ContactItem) -> OlMailingAddress
        Set: SelectedMailingAddress(self: _ContactItem) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _ContactItem) -> OlSensitivity
        Set: Sensitivity(self: _ContactItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ContactItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _ContactItem) -> int """
        ...

    @property
    def Spouse(self) -> str:
        """
        Get: Spouse(self: _ContactItem) -> str
        Set: Spouse(self: _ContactItem) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _ContactItem) -> str
        Set: Subject(self: _ContactItem) = value
        """
        ...

    @property
    def Suffix(self) -> str:
        """
        Get: Suffix(self: _ContactItem) -> str
        Set: Suffix(self: _ContactItem) = value
        """
        ...

    @property
    def TaskCompletedDate(self) -> DateTime:
        """
        Get: TaskCompletedDate(self: _ContactItem) -> DateTime
        Set: TaskCompletedDate(self: _ContactItem) = value
        """
        ...

    @property
    def TaskDueDate(self) -> DateTime:
        """
        Get: TaskDueDate(self: _ContactItem) -> DateTime
        Set: TaskDueDate(self: _ContactItem) = value
        """
        ...

    @property
    def TaskStartDate(self) -> DateTime:
        """
        Get: TaskStartDate(self: _ContactItem) -> DateTime
        Set: TaskStartDate(self: _ContactItem) = value
        """
        ...

    @property
    def TaskSubject(self) -> str:
        """
        Get: TaskSubject(self: _ContactItem) -> str
        Set: TaskSubject(self: _ContactItem) = value
        """
        ...

    @property
    def TelexNumber(self) -> str:
        """
        Get: TelexNumber(self: _ContactItem) -> str
        Set: TelexNumber(self: _ContactItem) = value
        """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: _ContactItem) -> str
        Set: Title(self: _ContactItem) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: _ContactItem) -> DateTime
        Set: ToDoTaskOrdinal(self: _ContactItem) = value
        """
        ...

    @property
    def TTYTDDTelephoneNumber(self) -> str:
        """
        Get: TTYTDDTelephoneNumber(self: _ContactItem) -> str
        Set: TTYTDDTelephoneNumber(self: _ContactItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _ContactItem) -> bool
        Set: UnRead(self: _ContactItem) = value
        """
        ...

    @property
    def User1(self) -> str:
        """
        Get: User1(self: _ContactItem) -> str
        Set: User1(self: _ContactItem) = value
        """
        ...

    @property
    def User2(self) -> str:
        """
        Get: User2(self: _ContactItem) -> str
        Set: User2(self: _ContactItem) = value
        """
        ...

    @property
    def User3(self) -> str:
        """
        Get: User3(self: _ContactItem) -> str
        Set: User3(self: _ContactItem) = value
        """
        ...

    @property
    def User4(self) -> str:
        """
        Get: User4(self: _ContactItem) -> str
        Set: User4(self: _ContactItem) = value
        """
        ...

    @property
    def UserCertificate(self) -> str:
        """
        Get: UserCertificate(self: _ContactItem) -> str
        Set: UserCertificate(self: _ContactItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _ContactItem) -> UserProperties """
        ...

    @property
    def WebPage(self) -> str:
        """
        Get: WebPage(self: _ContactItem) -> str
        Set: WebPage(self: _ContactItem) = value
        """
        ...

    @property
    def YomiCompanyName(self) -> str:
        """
        Get: YomiCompanyName(self: _ContactItem) -> str
        Set: YomiCompanyName(self: _ContactItem) = value
        """
        ...

    @property
    def YomiFirstName(self) -> str:
        """
        Get: YomiFirstName(self: _ContactItem) -> str
        Set: YomiFirstName(self: _ContactItem) = value
        """
        ...

    @property
    def YomiLastName(self) -> str:
        """
        Get: YomiLastName(self: _ContactItem) -> str
        Set: YomiLastName(self: _ContactItem) = value
        """
        ...


    def AddBusinessCardLogoPicture(self, Path:str): # -> 
        """ AddBusinessCardLogoPicture(self: _ContactItem, Path: str) """
        ...

    def AddPicture(self, Path:str): # -> 
        """ AddPicture(self: _ContactItem, Path: str) """
        ...

    def ClearTaskFlag(self): # -> 
        """ ClearTaskFlag(self: _ContactItem) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _ContactItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _ContactItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _ContactItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _ContactItem, Modal: object) """
        ...

    def ForwardAsBusinessCard(self) -> MailItem:
        """ ForwardAsBusinessCard(self: _ContactItem) -> MailItem """
        ...

    def ForwardAsVcard(self) -> MailItem:
        """ ForwardAsVcard(self: _ContactItem) -> MailItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _ContactItem) -> Conversation """
        ...

    def MarkAsTask(self, MarkInterval:OlMarkInterval): # -> 
        """ MarkAsTask(self: _ContactItem, MarkInterval: OlMarkInterval) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _ContactItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _ContactItem) """
        ...

    def RemovePicture(self): # -> 
        """ RemovePicture(self: _ContactItem) """
        ...

    def ResetBusinessCard(self): # -> 
        """ ResetBusinessCard(self: _ContactItem) """
        ...

    def Save(self): # -> 
        """ Save(self: _ContactItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _ContactItem, Path: str, Type: object) """
        ...

    def SaveBusinessCardImage(self, Path:str): # -> 
        """ SaveBusinessCardImage(self: _ContactItem, Path: str) """
        ...

    def ShowBusinessCardEditor(self): # -> 
        """ ShowBusinessCardEditor(self: _ContactItem) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _ContactItem) """
        ...

    def ShowCheckAddressDialog(self, MailingAddress:OlMailingAddress): # -> 
        """ ShowCheckAddressDialog(self: _ContactItem, MailingAddress: OlMailingAddress) """
        ...

    def ShowCheckFullNameDialog(self): # -> 
        """ ShowCheckFullNameDialog(self: _ContactItem) """
        ...

    def ShowCheckPhoneDialog(self, PhoneNumber:OlContactPhoneNumber): # -> 
        """ ShowCheckPhoneDialog(self: _ContactItem, PhoneNumber: OlContactPhoneNumber) """
        ...


class ContactItem(_ContactItem, ItemEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ContactItemClass(ContactItem, ItemEvents_Event, __ComObject): # skipped bases: <type 'ItemEvents_10_Event'>, <type '_ContactItem'>, <type 'object'>
    """ no doc """
    @property
    def Account(self) -> str:
        """
        Get: Account(self: ContactItemClass) -> str
        Set: Account(self: ContactItemClass) = value
        """
        ...

    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: ContactItemClass) -> Actions """
        ...

    @property
    def Anniversary(self) -> DateTime:
        """
        Get: Anniversary(self: ContactItemClass) -> DateTime
        Set: Anniversary(self: ContactItemClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ContactItemClass) -> Application """
        ...

    @property
    def AssistantName(self) -> str:
        """
        Get: AssistantName(self: ContactItemClass) -> str
        Set: AssistantName(self: ContactItemClass) = value
        """
        ...

    @property
    def AssistantTelephoneNumber(self) -> str:
        """
        Get: AssistantTelephoneNumber(self: ContactItemClass) -> str
        Set: AssistantTelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: ContactItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: ContactItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: ContactItemClass) -> str
        Set: BillingInformation(self: ContactItemClass) = value
        """
        ...

    @property
    def Birthday(self) -> DateTime:
        """
        Get: Birthday(self: ContactItemClass) -> DateTime
        Set: Birthday(self: ContactItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: ContactItemClass) -> str
        Set: Body(self: ContactItemClass) = value
        """
        ...

    @property
    def Business2TelephoneNumber(self) -> str:
        """
        Get: Business2TelephoneNumber(self: ContactItemClass) -> str
        Set: Business2TelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def BusinessAddress(self) -> str:
        """
        Get: BusinessAddress(self: ContactItemClass) -> str
        Set: BusinessAddress(self: ContactItemClass) = value
        """
        ...

    @property
    def BusinessAddressCity(self) -> str:
        """
        Get: BusinessAddressCity(self: ContactItemClass) -> str
        Set: BusinessAddressCity(self: ContactItemClass) = value
        """
        ...

    @property
    def BusinessAddressCountry(self) -> str:
        """
        Get: BusinessAddressCountry(self: ContactItemClass) -> str
        Set: BusinessAddressCountry(self: ContactItemClass) = value
        """
        ...

    @property
    def BusinessAddressPostalCode(self) -> str:
        """
        Get: BusinessAddressPostalCode(self: ContactItemClass) -> str
        Set: BusinessAddressPostalCode(self: ContactItemClass) = value
        """
        ...

    @property
    def BusinessAddressPostOfficeBox(self) -> str:
        """
        Get: BusinessAddressPostOfficeBox(self: ContactItemClass) -> str
        Set: BusinessAddressPostOfficeBox(self: ContactItemClass) = value
        """
        ...

    @property
    def BusinessAddressState(self) -> str:
        """
        Get: BusinessAddressState(self: ContactItemClass) -> str
        Set: BusinessAddressState(self: ContactItemClass) = value
        """
        ...

    @property
    def BusinessAddressStreet(self) -> str:
        """
        Get: BusinessAddressStreet(self: ContactItemClass) -> str
        Set: BusinessAddressStreet(self: ContactItemClass) = value
        """
        ...

    @property
    def BusinessCardLayoutXml(self) -> str:
        """
        Get: BusinessCardLayoutXml(self: ContactItemClass) -> str
        Set: BusinessCardLayoutXml(self: ContactItemClass) = value
        """
        ...

    @property
    def BusinessCardType(self) -> OlBusinessCardType:
        """ Get: BusinessCardType(self: ContactItemClass) -> OlBusinessCardType """
        ...

    @property
    def BusinessFaxNumber(self) -> str:
        """
        Get: BusinessFaxNumber(self: ContactItemClass) -> str
        Set: BusinessFaxNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def BusinessHomePage(self) -> str:
        """
        Get: BusinessHomePage(self: ContactItemClass) -> str
        Set: BusinessHomePage(self: ContactItemClass) = value
        """
        ...

    @property
    def BusinessTelephoneNumber(self) -> str:
        """
        Get: BusinessTelephoneNumber(self: ContactItemClass) -> str
        Set: BusinessTelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def CallbackTelephoneNumber(self) -> str:
        """
        Get: CallbackTelephoneNumber(self: ContactItemClass) -> str
        Set: CallbackTelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def CarTelephoneNumber(self) -> str:
        """
        Get: CarTelephoneNumber(self: ContactItemClass) -> str
        Set: CarTelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: ContactItemClass) -> str
        Set: Categories(self: ContactItemClass) = value
        """
        ...

    @property
    def Children(self) -> str:
        """
        Get: Children(self: ContactItemClass) -> str
        Set: Children(self: ContactItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ContactItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: ContactItemClass) -> str
        Set: Companies(self: ContactItemClass) = value
        """
        ...

    @property
    def CompanyAndFullName(self) -> str:
        """ Get: CompanyAndFullName(self: ContactItemClass) -> str """
        ...

    @property
    def CompanyLastFirstNoSpace(self) -> str:
        """ Get: CompanyLastFirstNoSpace(self: ContactItemClass) -> str """
        ...

    @property
    def CompanyLastFirstSpaceOnly(self) -> str:
        """ Get: CompanyLastFirstSpaceOnly(self: ContactItemClass) -> str """
        ...

    @property
    def CompanyMainTelephoneNumber(self) -> str:
        """
        Get: CompanyMainTelephoneNumber(self: ContactItemClass) -> str
        Set: CompanyMainTelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def CompanyName(self) -> str:
        """
        Get: CompanyName(self: ContactItemClass) -> str
        Set: CompanyName(self: ContactItemClass) = value
        """
        ...

    @property
    def ComputerNetworkName(self) -> str:
        """
        Get: ComputerNetworkName(self: ContactItemClass) -> str
        Set: ComputerNetworkName(self: ContactItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: ContactItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: ContactItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: ContactItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: ContactItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: ContactItemClass) -> DateTime """
        ...

    @property
    def CustomerID(self) -> str:
        """
        Get: CustomerID(self: ContactItemClass) -> str
        Set: CustomerID(self: ContactItemClass) = value
        """
        ...

    @property
    def Department(self) -> str:
        """
        Get: Department(self: ContactItemClass) -> str
        Set: Department(self: ContactItemClass) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: ContactItemClass) -> OlDownloadState """
        ...

    @property
    def Email1Address(self) -> str:
        """
        Get: Email1Address(self: ContactItemClass) -> str
        Set: Email1Address(self: ContactItemClass) = value
        """
        ...

    @property
    def Email1AddressType(self) -> str:
        """
        Get: Email1AddressType(self: ContactItemClass) -> str
        Set: Email1AddressType(self: ContactItemClass) = value
        """
        ...

    @property
    def Email1DisplayName(self) -> str:
        """
        Get: Email1DisplayName(self: ContactItemClass) -> str
        Set: Email1DisplayName(self: ContactItemClass) = value
        """
        ...

    @property
    def Email1EntryID(self) -> str:
        """ Get: Email1EntryID(self: ContactItemClass) -> str """
        ...

    @property
    def Email2Address(self) -> str:
        """
        Get: Email2Address(self: ContactItemClass) -> str
        Set: Email2Address(self: ContactItemClass) = value
        """
        ...

    @property
    def Email2AddressType(self) -> str:
        """
        Get: Email2AddressType(self: ContactItemClass) -> str
        Set: Email2AddressType(self: ContactItemClass) = value
        """
        ...

    @property
    def Email2DisplayName(self) -> str:
        """
        Get: Email2DisplayName(self: ContactItemClass) -> str
        Set: Email2DisplayName(self: ContactItemClass) = value
        """
        ...

    @property
    def Email2EntryID(self) -> str:
        """ Get: Email2EntryID(self: ContactItemClass) -> str """
        ...

    @property
    def Email3Address(self) -> str:
        """
        Get: Email3Address(self: ContactItemClass) -> str
        Set: Email3Address(self: ContactItemClass) = value
        """
        ...

    @property
    def Email3AddressType(self) -> str:
        """
        Get: Email3AddressType(self: ContactItemClass) -> str
        Set: Email3AddressType(self: ContactItemClass) = value
        """
        ...

    @property
    def Email3DisplayName(self) -> str:
        """
        Get: Email3DisplayName(self: ContactItemClass) -> str
        Set: Email3DisplayName(self: ContactItemClass) = value
        """
        ...

    @property
    def Email3EntryID(self) -> str:
        """ Get: Email3EntryID(self: ContactItemClass) -> str """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: ContactItemClass) -> str """
        ...

    @property
    def FileAs(self) -> str:
        """
        Get: FileAs(self: ContactItemClass) -> str
        Set: FileAs(self: ContactItemClass) = value
        """
        ...

    @property
    def FirstName(self) -> str:
        """
        Get: FirstName(self: ContactItemClass) -> str
        Set: FirstName(self: ContactItemClass) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: ContactItemClass) -> FormDescription """
        ...

    @property
    def FTPSite(self) -> str:
        """
        Get: FTPSite(self: ContactItemClass) -> str
        Set: FTPSite(self: ContactItemClass) = value
        """
        ...

    @property
    def FullName(self) -> str:
        """
        Get: FullName(self: ContactItemClass) -> str
        Set: FullName(self: ContactItemClass) = value
        """
        ...

    @property
    def FullNameAndCompany(self) -> str:
        """ Get: FullNameAndCompany(self: ContactItemClass) -> str """
        ...

    @property
    def Gender(self) -> OlGender:
        """
        Get: Gender(self: ContactItemClass) -> OlGender
        Set: Gender(self: ContactItemClass) = value
        """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: ContactItemClass) -> Inspector """
        ...

    @property
    def GovernmentIDNumber(self) -> str:
        """
        Get: GovernmentIDNumber(self: ContactItemClass) -> str
        Set: GovernmentIDNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def HasPicture(self) -> bool:
        """ Get: HasPicture(self: ContactItemClass) -> bool """
        ...

    @property
    def Hobby(self) -> str:
        """
        Get: Hobby(self: ContactItemClass) -> str
        Set: Hobby(self: ContactItemClass) = value
        """
        ...

    @property
    def Home2TelephoneNumber(self) -> str:
        """
        Get: Home2TelephoneNumber(self: ContactItemClass) -> str
        Set: Home2TelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def HomeAddress(self) -> str:
        """
        Get: HomeAddress(self: ContactItemClass) -> str
        Set: HomeAddress(self: ContactItemClass) = value
        """
        ...

    @property
    def HomeAddressCity(self) -> str:
        """
        Get: HomeAddressCity(self: ContactItemClass) -> str
        Set: HomeAddressCity(self: ContactItemClass) = value
        """
        ...

    @property
    def HomeAddressCountry(self) -> str:
        """
        Get: HomeAddressCountry(self: ContactItemClass) -> str
        Set: HomeAddressCountry(self: ContactItemClass) = value
        """
        ...

    @property
    def HomeAddressPostalCode(self) -> str:
        """
        Get: HomeAddressPostalCode(self: ContactItemClass) -> str
        Set: HomeAddressPostalCode(self: ContactItemClass) = value
        """
        ...

    @property
    def HomeAddressPostOfficeBox(self) -> str:
        """
        Get: HomeAddressPostOfficeBox(self: ContactItemClass) -> str
        Set: HomeAddressPostOfficeBox(self: ContactItemClass) = value
        """
        ...

    @property
    def HomeAddressState(self) -> str:
        """
        Get: HomeAddressState(self: ContactItemClass) -> str
        Set: HomeAddressState(self: ContactItemClass) = value
        """
        ...

    @property
    def HomeAddressStreet(self) -> str:
        """
        Get: HomeAddressStreet(self: ContactItemClass) -> str
        Set: HomeAddressStreet(self: ContactItemClass) = value
        """
        ...

    @property
    def HomeFaxNumber(self) -> str:
        """
        Get: HomeFaxNumber(self: ContactItemClass) -> str
        Set: HomeFaxNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def HomeTelephoneNumber(self) -> str:
        """
        Get: HomeTelephoneNumber(self: ContactItemClass) -> str
        Set: HomeTelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def IMAddress(self) -> str:
        """
        Get: IMAddress(self: ContactItemClass) -> str
        Set: IMAddress(self: ContactItemClass) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: ContactItemClass) -> OlImportance
        Set: Importance(self: ContactItemClass) = value
        """
        ...

    @property
    def Initials(self) -> str:
        """
        Get: Initials(self: ContactItemClass) -> str
        Set: Initials(self: ContactItemClass) = value
        """
        ...

    @property
    def InternetFreeBusyAddress(self) -> str:
        """
        Get: InternetFreeBusyAddress(self: ContactItemClass) -> str
        Set: InternetFreeBusyAddress(self: ContactItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: ContactItemClass) -> bool """
        ...

    @property
    def ISDNNumber(self) -> str:
        """
        Get: ISDNNumber(self: ContactItemClass) -> str
        Set: ISDNNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def IsMarkedAsTask(self) -> bool:
        """ Get: IsMarkedAsTask(self: ContactItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: ContactItemClass) -> ItemProperties """
        ...

    @property
    def JobTitle(self) -> str:
        """
        Get: JobTitle(self: ContactItemClass) -> str
        Set: JobTitle(self: ContactItemClass) = value
        """
        ...

    @property
    def Journal(self) -> bool:
        """
        Get: Journal(self: ContactItemClass) -> bool
        Set: Journal(self: ContactItemClass) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: ContactItemClass) -> str
        Set: Language(self: ContactItemClass) = value
        """
        ...

    @property
    def LastFirstAndSuffix(self) -> str:
        """ Get: LastFirstAndSuffix(self: ContactItemClass) -> str """
        ...

    @property
    def LastFirstNoSpace(self) -> str:
        """ Get: LastFirstNoSpace(self: ContactItemClass) -> str """
        ...

    @property
    def LastFirstNoSpaceAndSuffix(self) -> str:
        """ Get: LastFirstNoSpaceAndSuffix(self: ContactItemClass) -> str """
        ...

    @property
    def LastFirstNoSpaceCompany(self) -> str:
        """ Get: LastFirstNoSpaceCompany(self: ContactItemClass) -> str """
        ...

    @property
    def LastFirstSpaceOnly(self) -> str:
        """ Get: LastFirstSpaceOnly(self: ContactItemClass) -> str """
        ...

    @property
    def LastFirstSpaceOnlyCompany(self) -> str:
        """ Get: LastFirstSpaceOnlyCompany(self: ContactItemClass) -> str """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: ContactItemClass) -> DateTime """
        ...

    @property
    def LastName(self) -> str:
        """
        Get: LastName(self: ContactItemClass) -> str
        Set: LastName(self: ContactItemClass) = value
        """
        ...

    @property
    def LastNameAndFirstName(self) -> str:
        """ Get: LastNameAndFirstName(self: ContactItemClass) -> str """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: ContactItemClass) -> Links """
        ...

    @property
    def MailingAddress(self) -> str:
        """
        Get: MailingAddress(self: ContactItemClass) -> str
        Set: MailingAddress(self: ContactItemClass) = value
        """
        ...

    @property
    def MailingAddressCity(self) -> str:
        """
        Get: MailingAddressCity(self: ContactItemClass) -> str
        Set: MailingAddressCity(self: ContactItemClass) = value
        """
        ...

    @property
    def MailingAddressCountry(self) -> str:
        """
        Get: MailingAddressCountry(self: ContactItemClass) -> str
        Set: MailingAddressCountry(self: ContactItemClass) = value
        """
        ...

    @property
    def MailingAddressPostalCode(self) -> str:
        """
        Get: MailingAddressPostalCode(self: ContactItemClass) -> str
        Set: MailingAddressPostalCode(self: ContactItemClass) = value
        """
        ...

    @property
    def MailingAddressPostOfficeBox(self) -> str:
        """
        Get: MailingAddressPostOfficeBox(self: ContactItemClass) -> str
        Set: MailingAddressPostOfficeBox(self: ContactItemClass) = value
        """
        ...

    @property
    def MailingAddressState(self) -> str:
        """
        Get: MailingAddressState(self: ContactItemClass) -> str
        Set: MailingAddressState(self: ContactItemClass) = value
        """
        ...

    @property
    def MailingAddressStreet(self) -> str:
        """
        Get: MailingAddressStreet(self: ContactItemClass) -> str
        Set: MailingAddressStreet(self: ContactItemClass) = value
        """
        ...

    @property
    def ManagerName(self) -> str:
        """
        Get: ManagerName(self: ContactItemClass) -> str
        Set: ManagerName(self: ContactItemClass) = value
        """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: ContactItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: ContactItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: ContactItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: ContactItemClass) -> str
        Set: MessageClass(self: ContactItemClass) = value
        """
        ...

    @property
    def MiddleName(self) -> str:
        """
        Get: MiddleName(self: ContactItemClass) -> str
        Set: MiddleName(self: ContactItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: ContactItemClass) -> str
        Set: Mileage(self: ContactItemClass) = value
        """
        ...

    @property
    def MobileTelephoneNumber(self) -> str:
        """
        Get: MobileTelephoneNumber(self: ContactItemClass) -> str
        Set: MobileTelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def NetMeetingAlias(self) -> str:
        """
        Get: NetMeetingAlias(self: ContactItemClass) -> str
        Set: NetMeetingAlias(self: ContactItemClass) = value
        """
        ...

    @property
    def NetMeetingServer(self) -> str:
        """
        Get: NetMeetingServer(self: ContactItemClass) -> str
        Set: NetMeetingServer(self: ContactItemClass) = value
        """
        ...

    @property
    def NickName(self) -> str:
        """
        Get: NickName(self: ContactItemClass) -> str
        Set: NickName(self: ContactItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: ContactItemClass) -> bool
        Set: NoAging(self: ContactItemClass) = value
        """
        ...

    @property
    def OfficeLocation(self) -> str:
        """
        Get: OfficeLocation(self: ContactItemClass) -> str
        Set: OfficeLocation(self: ContactItemClass) = value
        """
        ...

    @property
    def OrganizationalIDNumber(self) -> str:
        """
        Get: OrganizationalIDNumber(self: ContactItemClass) -> str
        Set: OrganizationalIDNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def OtherAddress(self) -> str:
        """
        Get: OtherAddress(self: ContactItemClass) -> str
        Set: OtherAddress(self: ContactItemClass) = value
        """
        ...

    @property
    def OtherAddressCity(self) -> str:
        """
        Get: OtherAddressCity(self: ContactItemClass) -> str
        Set: OtherAddressCity(self: ContactItemClass) = value
        """
        ...

    @property
    def OtherAddressCountry(self) -> str:
        """
        Get: OtherAddressCountry(self: ContactItemClass) -> str
        Set: OtherAddressCountry(self: ContactItemClass) = value
        """
        ...

    @property
    def OtherAddressPostalCode(self) -> str:
        """
        Get: OtherAddressPostalCode(self: ContactItemClass) -> str
        Set: OtherAddressPostalCode(self: ContactItemClass) = value
        """
        ...

    @property
    def OtherAddressPostOfficeBox(self) -> str:
        """
        Get: OtherAddressPostOfficeBox(self: ContactItemClass) -> str
        Set: OtherAddressPostOfficeBox(self: ContactItemClass) = value
        """
        ...

    @property
    def OtherAddressState(self) -> str:
        """
        Get: OtherAddressState(self: ContactItemClass) -> str
        Set: OtherAddressState(self: ContactItemClass) = value
        """
        ...

    @property
    def OtherAddressStreet(self) -> str:
        """
        Get: OtherAddressStreet(self: ContactItemClass) -> str
        Set: OtherAddressStreet(self: ContactItemClass) = value
        """
        ...

    @property
    def OtherFaxNumber(self) -> str:
        """
        Get: OtherFaxNumber(self: ContactItemClass) -> str
        Set: OtherFaxNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def OtherTelephoneNumber(self) -> str:
        """
        Get: OtherTelephoneNumber(self: ContactItemClass) -> str
        Set: OtherTelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: ContactItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: ContactItemClass) -> str """
        ...

    @property
    def PagerNumber(self) -> str:
        """
        Get: PagerNumber(self: ContactItemClass) -> str
        Set: PagerNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ContactItemClass) -> object """
        ...

    @property
    def PersonalHomePage(self) -> str:
        """
        Get: PersonalHomePage(self: ContactItemClass) -> str
        Set: PersonalHomePage(self: ContactItemClass) = value
        """
        ...

    @property
    def PrimaryTelephoneNumber(self) -> str:
        """
        Get: PrimaryTelephoneNumber(self: ContactItemClass) -> str
        Set: PrimaryTelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def Profession(self) -> str:
        """
        Get: Profession(self: ContactItemClass) -> str
        Set: Profession(self: ContactItemClass) = value
        """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: ContactItemClass) -> PropertyAccessor """
        ...

    @property
    def RadioTelephoneNumber(self) -> str:
        """
        Get: RadioTelephoneNumber(self: ContactItemClass) -> str
        Set: RadioTelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def ReferredBy(self) -> str:
        """
        Get: ReferredBy(self: ContactItemClass) -> str
        Set: ReferredBy(self: ContactItemClass) = value
        """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: ContactItemClass) -> bool
        Set: ReminderOverrideDefault(self: ContactItemClass) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: ContactItemClass) -> bool
        Set: ReminderPlaySound(self: ContactItemClass) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: ContactItemClass) -> bool
        Set: ReminderSet(self: ContactItemClass) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: ContactItemClass) -> str
        Set: ReminderSoundFile(self: ContactItemClass) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: ContactItemClass) -> DateTime
        Set: ReminderTime(self: ContactItemClass) = value
        """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: ContactItemClass) -> object
        Set: RTFBody(self: ContactItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: ContactItemClass) -> bool """
        ...

    @property
    def SelectedMailingAddress(self) -> OlMailingAddress:
        """
        Get: SelectedMailingAddress(self: ContactItemClass) -> OlMailingAddress
        Set: SelectedMailingAddress(self: ContactItemClass) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: ContactItemClass) -> OlSensitivity
        Set: Sensitivity(self: ContactItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ContactItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: ContactItemClass) -> int """
        ...

    @property
    def Spouse(self) -> str:
        """
        Get: Spouse(self: ContactItemClass) -> str
        Set: Spouse(self: ContactItemClass) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: ContactItemClass) -> str
        Set: Subject(self: ContactItemClass) = value
        """
        ...

    @property
    def Suffix(self) -> str:
        """
        Get: Suffix(self: ContactItemClass) -> str
        Set: Suffix(self: ContactItemClass) = value
        """
        ...

    @property
    def TaskCompletedDate(self) -> DateTime:
        """
        Get: TaskCompletedDate(self: ContactItemClass) -> DateTime
        Set: TaskCompletedDate(self: ContactItemClass) = value
        """
        ...

    @property
    def TaskDueDate(self) -> DateTime:
        """
        Get: TaskDueDate(self: ContactItemClass) -> DateTime
        Set: TaskDueDate(self: ContactItemClass) = value
        """
        ...

    @property
    def TaskStartDate(self) -> DateTime:
        """
        Get: TaskStartDate(self: ContactItemClass) -> DateTime
        Set: TaskStartDate(self: ContactItemClass) = value
        """
        ...

    @property
    def TaskSubject(self) -> str:
        """
        Get: TaskSubject(self: ContactItemClass) -> str
        Set: TaskSubject(self: ContactItemClass) = value
        """
        ...

    @property
    def TelexNumber(self) -> str:
        """
        Get: TelexNumber(self: ContactItemClass) -> str
        Set: TelexNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: ContactItemClass) -> str
        Set: Title(self: ContactItemClass) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: ContactItemClass) -> DateTime
        Set: ToDoTaskOrdinal(self: ContactItemClass) = value
        """
        ...

    @property
    def TTYTDDTelephoneNumber(self) -> str:
        """
        Get: TTYTDDTelephoneNumber(self: ContactItemClass) -> str
        Set: TTYTDDTelephoneNumber(self: ContactItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: ContactItemClass) -> bool
        Set: UnRead(self: ContactItemClass) = value
        """
        ...

    @property
    def User1(self) -> str:
        """
        Get: User1(self: ContactItemClass) -> str
        Set: User1(self: ContactItemClass) = value
        """
        ...

    @property
    def User2(self) -> str:
        """
        Get: User2(self: ContactItemClass) -> str
        Set: User2(self: ContactItemClass) = value
        """
        ...

    @property
    def User3(self) -> str:
        """
        Get: User3(self: ContactItemClass) -> str
        Set: User3(self: ContactItemClass) = value
        """
        ...

    @property
    def User4(self) -> str:
        """
        Get: User4(self: ContactItemClass) -> str
        Set: User4(self: ContactItemClass) = value
        """
        ...

    @property
    def UserCertificate(self) -> str:
        """
        Get: UserCertificate(self: ContactItemClass) -> str
        Set: UserCertificate(self: ContactItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: ContactItemClass) -> UserProperties """
        ...

    @property
    def WebPage(self) -> str:
        """
        Get: WebPage(self: ContactItemClass) -> str
        Set: WebPage(self: ContactItemClass) = value
        """
        ...

    @property
    def YomiCompanyName(self) -> str:
        """
        Get: YomiCompanyName(self: ContactItemClass) -> str
        Set: YomiCompanyName(self: ContactItemClass) = value
        """
        ...

    @property
    def YomiFirstName(self) -> str:
        """
        Get: YomiFirstName(self: ContactItemClass) -> str
        Set: YomiFirstName(self: ContactItemClass) = value
        """
        ...

    @property
    def YomiLastName(self) -> str:
        """
        Get: YomiLastName(self: ContactItemClass) -> str
        Set: YomiLastName(self: ContactItemClass) = value
        """
        ...


    def AddBusinessCardLogoPicture(self, Path:str): # -> 
        """ AddBusinessCardLogoPicture(self: ContactItemClass, Path: str) """
        ...

    def AddPicture(self, Path:str): # -> 
        """ AddPicture(self: ContactItemClass, Path: str) """
        ...

    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: ContactItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: ContactItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: ContactItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: ContactItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: ContactItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: ContactItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: ContactItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: ContactItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: ContactItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: ContactItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: ContactItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def ClearTaskFlag(self): # -> 
        """ ClearTaskFlag(self: ContactItemClass) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: ContactItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: ContactItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: ContactItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: ContactItemClass, Modal: object) """
        ...

    def ForwardAsBusinessCard(self) -> MailItem:
        """ ForwardAsBusinessCard(self: ContactItemClass) -> MailItem """
        ...

    def ForwardAsVcard(self) -> MailItem:
        """ ForwardAsVcard(self: ContactItemClass) -> MailItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: ContactItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: ContactItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: ContactItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: ContactItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: ContactItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: ContactItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: ContactItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: ContactItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: ContactItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: ContactItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: ContactItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: ContactItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: ContactItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: ContactItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: ContactItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: ContactItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: ContactItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: ContactItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: ContactItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: ContactItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: ContactItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: ContactItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: ContactItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: ContactItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: ContactItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: ContactItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: ContactItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: ContactItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: ContactItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: ContactItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: ContactItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def MarkAsTask(self, MarkInterval:OlMarkInterval): # -> 
        """ MarkAsTask(self: ContactItemClass, MarkInterval: OlMarkInterval) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: ContactItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: ContactItemClass) """
        ...

    def RemovePicture(self): # -> 
        """ RemovePicture(self: ContactItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: ContactItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: ContactItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: ContactItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: ContactItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: ContactItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: ContactItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: ContactItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: ContactItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: ContactItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: ContactItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: ContactItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def ResetBusinessCard(self): # -> 
        """ ResetBusinessCard(self: ContactItemClass) """
        ...

    def Save(self): # -> 
        """ Save(self: ContactItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: ContactItemClass, Path: str, Type: object) """
        ...

    def SaveBusinessCardImage(self, Path:str): # -> 
        """ SaveBusinessCardImage(self: ContactItemClass, Path: str) """
        ...

    def ShowBusinessCardEditor(self): # -> 
        """ ShowBusinessCardEditor(self: ContactItemClass) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: ContactItemClass) """
        ...

    def ShowCheckAddressDialog(self, MailingAddress:OlMailingAddress): # -> 
        """ ShowCheckAddressDialog(self: ContactItemClass, MailingAddress: OlMailingAddress) """
        ...

    def ShowCheckFullNameDialog(self): # -> 
        """ ShowCheckFullNameDialog(self: ContactItemClass) """
        ...

    def ShowCheckPhoneDialog(self, PhoneNumber:OlContactPhoneNumber): # -> 
        """ ShowCheckPhoneDialog(self: ContactItemClass, PhoneNumber: OlContactPhoneNumber) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Send = ...
    Unload = ...
    Write = ...


class _ContactsModule: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ContactsModule) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ContactsModule) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _ContactsModule) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: _ContactsModule) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: _ContactsModule) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ContactsModule) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: _ContactsModule) -> int
        Set: Position(self: _ContactsModule) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ContactsModule) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _ContactsModule) -> bool
        Set: Visible(self: _ContactsModule) = value
        """
        ...



class ContactsModule(_ContactsModule): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ContactsModuleClass(ContactsModule, __ComObject): # skipped bases: <type '_ContactsModule'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ContactsModuleClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ContactsModuleClass) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ContactsModuleClass) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: ContactsModuleClass) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: ContactsModuleClass) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ContactsModuleClass) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: ContactsModuleClass) -> int
        Set: Position(self: ContactsModuleClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ContactsModuleClass) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ContactsModuleClass) -> bool
        Set: Visible(self: ContactsModuleClass) = value
        """
        ...



class _Conversation: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Conversation) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Conversation) -> OlObjectClass """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _Conversation) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Conversation) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Conversation) -> NameSpace """
        ...


    def ClearAlwaysAssignCategories(self, Store:Store): # -> 
        """ ClearAlwaysAssignCategories(self: _Conversation, Store: Store) """
        ...

    def GetAlwaysAssignCategories(self, Store:Store) -> str:
        """ GetAlwaysAssignCategories(self: _Conversation, Store: Store) -> str """
        ...

    def GetAlwaysDelete(self, Store:Store) -> OlAlwaysDeleteConversation:
        """ GetAlwaysDelete(self: _Conversation, Store: Store) -> OlAlwaysDeleteConversation """
        ...

    def GetAlwaysMoveToFolder(self, Store:Store) -> MAPIFolder:
        """ GetAlwaysMoveToFolder(self: _Conversation, Store: Store) -> MAPIFolder """
        ...

    def GetChildren(self, Item:object) -> SimpleItems:
        """ GetChildren(self: _Conversation, Item: object) -> SimpleItems """
        ...

    def GetParent(self, Item:object) -> object:
        """ GetParent(self: _Conversation, Item: object) -> object """
        ...

    def GetRootItems(self) -> SimpleItems:
        """ GetRootItems(self: _Conversation) -> SimpleItems """
        ...

    def GetTable(self) -> Table:
        """ GetTable(self: _Conversation) -> Table """
        ...

    def MarkAsRead(self): # -> 
        """ MarkAsRead(self: _Conversation) """
        ...

    def MarkAsUnread(self): # -> 
        """ MarkAsUnread(self: _Conversation) """
        ...

    def SetAlwaysAssignCategories(self, Categories:str, Store:Store): # -> 
        """ SetAlwaysAssignCategories(self: _Conversation, Categories: str, Store: Store) """
        ...

    def SetAlwaysDelete(self, AlwaysDelete:OlAlwaysDeleteConversation, Store:Store): # -> 
        """ SetAlwaysDelete(self: _Conversation, AlwaysDelete: OlAlwaysDeleteConversation, Store: Store) """
        ...

    def SetAlwaysMoveToFolder(self, MoveToFolder:MAPIFolder, Store:Store): # -> 
        """ SetAlwaysMoveToFolder(self: _Conversation, MoveToFolder: MAPIFolder, Store: Store) """
        ...

    def StopAlwaysDelete(self, Store:Store): # -> 
        """ StopAlwaysDelete(self: _Conversation, Store: Store) """
        ...

    def StopAlwaysMoveToFolder(self, Store:Store): # -> 
        """ StopAlwaysMoveToFolder(self: _Conversation, Store: Store) """
        ...


class Conversation(_Conversation): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ConversationClass(Conversation, __ComObject): # skipped bases: <type '_Conversation'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ConversationClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ConversationClass) -> OlObjectClass """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: ConversationClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ConversationClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ConversationClass) -> NameSpace """
        ...


    def ClearAlwaysAssignCategories(self, Store:Store): # -> 
        """ ClearAlwaysAssignCategories(self: ConversationClass, Store: Store) """
        ...

    def GetAlwaysAssignCategories(self, Store:Store) -> str:
        """ GetAlwaysAssignCategories(self: ConversationClass, Store: Store) -> str """
        ...

    def GetAlwaysDelete(self, Store:Store) -> OlAlwaysDeleteConversation:
        """ GetAlwaysDelete(self: ConversationClass, Store: Store) -> OlAlwaysDeleteConversation """
        ...

    def GetAlwaysMoveToFolder(self, Store:Store) -> MAPIFolder:
        """ GetAlwaysMoveToFolder(self: ConversationClass, Store: Store) -> MAPIFolder """
        ...

    def GetChildren(self, Item:object) -> SimpleItems:
        """ GetChildren(self: ConversationClass, Item: object) -> SimpleItems """
        ...

    def GetParent(self, Item:object) -> object:
        """ GetParent(self: ConversationClass, Item: object) -> object """
        ...

    def GetRootItems(self) -> SimpleItems:
        """ GetRootItems(self: ConversationClass) -> SimpleItems """
        ...

    def GetTable(self) -> Table:
        """ GetTable(self: ConversationClass) -> Table """
        ...

    def MarkAsRead(self): # -> 
        """ MarkAsRead(self: ConversationClass) """
        ...

    def MarkAsUnread(self): # -> 
        """ MarkAsUnread(self: ConversationClass) """
        ...

    def SetAlwaysAssignCategories(self, Categories:str, Store:Store): # -> 
        """ SetAlwaysAssignCategories(self: ConversationClass, Categories: str, Store: Store) """
        ...

    def SetAlwaysDelete(self, AlwaysDelete:OlAlwaysDeleteConversation, Store:Store): # -> 
        """ SetAlwaysDelete(self: ConversationClass, AlwaysDelete: OlAlwaysDeleteConversation, Store: Store) """
        ...

    def SetAlwaysMoveToFolder(self, MoveToFolder:MAPIFolder, Store:Store): # -> 
        """ SetAlwaysMoveToFolder(self: ConversationClass, MoveToFolder: MAPIFolder, Store: Store) """
        ...

    def StopAlwaysDelete(self, Store:Store): # -> 
        """ StopAlwaysDelete(self: ConversationClass, Store: Store) """
        ...

    def StopAlwaysMoveToFolder(self, Store:Store): # -> 
        """ StopAlwaysMoveToFolder(self: ConversationClass, Store: Store) """
        ...


class _ConversationHeader: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ConversationHeader) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ConversationHeader) -> OlObjectClass """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _ConversationHeader) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _ConversationHeader) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ConversationHeader) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ConversationHeader) -> NameSpace """
        ...


    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _ConversationHeader) -> Conversation """
        ...

    def GetItems(self) -> SimpleItems:
        """ GetItems(self: _ConversationHeader) -> SimpleItems """
        ...


class ConversationHeader(_ConversationHeader): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ConversationHeaderClass(ConversationHeader, __ComObject): # skipped bases: <type '_ConversationHeader'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ConversationHeaderClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ConversationHeaderClass) -> OlObjectClass """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: ConversationHeaderClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: ConversationHeaderClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ConversationHeaderClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ConversationHeaderClass) -> NameSpace """
        ...


    def GetConversation(self) -> Conversation:
        """ GetConversation(self: ConversationHeaderClass) -> Conversation """
        ...

    def GetItems(self) -> SimpleItems:
        """ GetItems(self: ConversationHeaderClass) -> SimpleItems """
        ...


class _DistListItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _DistListItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _DistListItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _DistListItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _DistListItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _DistListItem) -> str
        Set: BillingInformation(self: _DistListItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _DistListItem) -> str
        Set: Body(self: _DistListItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _DistListItem) -> str
        Set: Categories(self: _DistListItem) = value
        """
        ...

    @property
    def CheckSum(self) -> int:
        """ Get: CheckSum(self: _DistListItem) -> int """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _DistListItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _DistListItem) -> str
        Set: Companies(self: _DistListItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _DistListItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _DistListItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _DistListItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _DistListItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _DistListItem) -> DateTime """
        ...

    @property
    def DLName(self) -> str:
        """
        Get: DLName(self: _DistListItem) -> str
        Set: DLName(self: _DistListItem) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _DistListItem) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _DistListItem) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _DistListItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _DistListItem) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _DistListItem) -> OlImportance
        Set: Importance(self: _DistListItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _DistListItem) -> bool """
        ...

    @property
    def IsMarkedAsTask(self) -> bool:
        """ Get: IsMarkedAsTask(self: _DistListItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _DistListItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _DistListItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _DistListItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _DistListItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _DistListItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _DistListItem) = value
        """
        ...

    @property
    def MemberCount(self) -> int:
        """ Get: MemberCount(self: _DistListItem) -> int """
        ...

    @property
    def Members(self) -> object:
        """
        Get: Members(self: _DistListItem) -> object
        Set: Members(self: _DistListItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _DistListItem) -> str
        Set: MessageClass(self: _DistListItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _DistListItem) -> str
        Set: Mileage(self: _DistListItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _DistListItem) -> bool
        Set: NoAging(self: _DistListItem) = value
        """
        ...

    @property
    def OneOffMembers(self) -> object:
        """
        Get: OneOffMembers(self: _DistListItem) -> object
        Set: OneOffMembers(self: _DistListItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _DistListItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _DistListItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _DistListItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _DistListItem) -> PropertyAccessor """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: _DistListItem) -> bool
        Set: ReminderOverrideDefault(self: _DistListItem) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: _DistListItem) -> bool
        Set: ReminderPlaySound(self: _DistListItem) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: _DistListItem) -> bool
        Set: ReminderSet(self: _DistListItem) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: _DistListItem) -> str
        Set: ReminderSoundFile(self: _DistListItem) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: _DistListItem) -> DateTime
        Set: ReminderTime(self: _DistListItem) = value
        """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _DistListItem) -> object
        Set: RTFBody(self: _DistListItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _DistListItem) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _DistListItem) -> OlSensitivity
        Set: Sensitivity(self: _DistListItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _DistListItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _DistListItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _DistListItem) -> str
        Set: Subject(self: _DistListItem) = value
        """
        ...

    @property
    def TaskCompletedDate(self) -> DateTime:
        """
        Get: TaskCompletedDate(self: _DistListItem) -> DateTime
        Set: TaskCompletedDate(self: _DistListItem) = value
        """
        ...

    @property
    def TaskDueDate(self) -> DateTime:
        """
        Get: TaskDueDate(self: _DistListItem) -> DateTime
        Set: TaskDueDate(self: _DistListItem) = value
        """
        ...

    @property
    def TaskStartDate(self) -> DateTime:
        """
        Get: TaskStartDate(self: _DistListItem) -> DateTime
        Set: TaskStartDate(self: _DistListItem) = value
        """
        ...

    @property
    def TaskSubject(self) -> str:
        """
        Get: TaskSubject(self: _DistListItem) -> str
        Set: TaskSubject(self: _DistListItem) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: _DistListItem) -> DateTime
        Set: ToDoTaskOrdinal(self: _DistListItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _DistListItem) -> bool
        Set: UnRead(self: _DistListItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _DistListItem) -> UserProperties """
        ...


    def AddMember(self, Recipient:Recipient): # -> 
        """ AddMember(self: _DistListItem, Recipient: Recipient) """
        ...

    def AddMembers(self, Recipients:Recipients): # -> 
        """ AddMembers(self: _DistListItem, Recipients: Recipients) """
        ...

    def ClearTaskFlag(self): # -> 
        """ ClearTaskFlag(self: _DistListItem) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _DistListItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _DistListItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _DistListItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _DistListItem, Modal: object) """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _DistListItem) -> Conversation """
        ...

    def GetMember(self, Index:int) -> Recipient:
        """ GetMember(self: _DistListItem, Index: int) -> Recipient """
        ...

    def MarkAsTask(self, MarkInterval:OlMarkInterval): # -> 
        """ MarkAsTask(self: _DistListItem, MarkInterval: OlMarkInterval) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _DistListItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _DistListItem) """
        ...

    def RemoveMember(self, Recipient:Recipient): # -> 
        """ RemoveMember(self: _DistListItem, Recipient: Recipient) """
        ...

    def RemoveMembers(self, Recipients:Recipients): # -> 
        """ RemoveMembers(self: _DistListItem, Recipients: Recipients) """
        ...

    def Save(self): # -> 
        """ Save(self: _DistListItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _DistListItem, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _DistListItem) """
        ...


class DistListItem(_DistListItem, ItemEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class DistListItemClass(ItemEvents_Event, DistListItem, __ComObject): # skipped bases: <type '_DistListItem'>, <type 'ItemEvents_10_Event'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: DistListItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: DistListItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: DistListItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: DistListItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: DistListItemClass) -> str
        Set: BillingInformation(self: DistListItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: DistListItemClass) -> str
        Set: Body(self: DistListItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: DistListItemClass) -> str
        Set: Categories(self: DistListItemClass) = value
        """
        ...

    @property
    def CheckSum(self) -> int:
        """ Get: CheckSum(self: DistListItemClass) -> int """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: DistListItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: DistListItemClass) -> str
        Set: Companies(self: DistListItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: DistListItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: DistListItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: DistListItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: DistListItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: DistListItemClass) -> DateTime """
        ...

    @property
    def DLName(self) -> str:
        """
        Get: DLName(self: DistListItemClass) -> str
        Set: DLName(self: DistListItemClass) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: DistListItemClass) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: DistListItemClass) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: DistListItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: DistListItemClass) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: DistListItemClass) -> OlImportance
        Set: Importance(self: DistListItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: DistListItemClass) -> bool """
        ...

    @property
    def IsMarkedAsTask(self) -> bool:
        """ Get: IsMarkedAsTask(self: DistListItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: DistListItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: DistListItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: DistListItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: DistListItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: DistListItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: DistListItemClass) = value
        """
        ...

    @property
    def MemberCount(self) -> int:
        """ Get: MemberCount(self: DistListItemClass) -> int """
        ...

    @property
    def Members(self) -> object:
        """
        Get: Members(self: DistListItemClass) -> object
        Set: Members(self: DistListItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: DistListItemClass) -> str
        Set: MessageClass(self: DistListItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: DistListItemClass) -> str
        Set: Mileage(self: DistListItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: DistListItemClass) -> bool
        Set: NoAging(self: DistListItemClass) = value
        """
        ...

    @property
    def OneOffMembers(self) -> object:
        """
        Get: OneOffMembers(self: DistListItemClass) -> object
        Set: OneOffMembers(self: DistListItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: DistListItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: DistListItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DistListItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: DistListItemClass) -> PropertyAccessor """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: DistListItemClass) -> bool
        Set: ReminderOverrideDefault(self: DistListItemClass) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: DistListItemClass) -> bool
        Set: ReminderPlaySound(self: DistListItemClass) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: DistListItemClass) -> bool
        Set: ReminderSet(self: DistListItemClass) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: DistListItemClass) -> str
        Set: ReminderSoundFile(self: DistListItemClass) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: DistListItemClass) -> DateTime
        Set: ReminderTime(self: DistListItemClass) = value
        """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: DistListItemClass) -> object
        Set: RTFBody(self: DistListItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: DistListItemClass) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: DistListItemClass) -> OlSensitivity
        Set: Sensitivity(self: DistListItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: DistListItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: DistListItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: DistListItemClass) -> str
        Set: Subject(self: DistListItemClass) = value
        """
        ...

    @property
    def TaskCompletedDate(self) -> DateTime:
        """
        Get: TaskCompletedDate(self: DistListItemClass) -> DateTime
        Set: TaskCompletedDate(self: DistListItemClass) = value
        """
        ...

    @property
    def TaskDueDate(self) -> DateTime:
        """
        Get: TaskDueDate(self: DistListItemClass) -> DateTime
        Set: TaskDueDate(self: DistListItemClass) = value
        """
        ...

    @property
    def TaskStartDate(self) -> DateTime:
        """
        Get: TaskStartDate(self: DistListItemClass) -> DateTime
        Set: TaskStartDate(self: DistListItemClass) = value
        """
        ...

    @property
    def TaskSubject(self) -> str:
        """
        Get: TaskSubject(self: DistListItemClass) -> str
        Set: TaskSubject(self: DistListItemClass) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: DistListItemClass) -> DateTime
        Set: ToDoTaskOrdinal(self: DistListItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: DistListItemClass) -> bool
        Set: UnRead(self: DistListItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: DistListItemClass) -> UserProperties """
        ...


    def AddMember(self, Recipient:Recipient): # -> 
        """ AddMember(self: DistListItemClass, Recipient: Recipient) """
        ...

    def AddMembers(self, Recipients:Recipients): # -> 
        """ AddMembers(self: DistListItemClass, Recipients: Recipients) """
        ...

    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: DistListItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: DistListItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: DistListItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: DistListItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: DistListItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: DistListItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: DistListItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: DistListItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: DistListItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: DistListItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: DistListItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def ClearTaskFlag(self): # -> 
        """ ClearTaskFlag(self: DistListItemClass) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: DistListItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: DistListItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: DistListItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: DistListItemClass, Modal: object) """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: DistListItemClass) -> Conversation """
        ...

    def GetMember(self, Index:int) -> Recipient:
        """ GetMember(self: DistListItemClass, Index: int) -> Recipient """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: DistListItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: DistListItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: DistListItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: DistListItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: DistListItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: DistListItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: DistListItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: DistListItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: DistListItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: DistListItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: DistListItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: DistListItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: DistListItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: DistListItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: DistListItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: DistListItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: DistListItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: DistListItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: DistListItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: DistListItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: DistListItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: DistListItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: DistListItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: DistListItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: DistListItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: DistListItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: DistListItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: DistListItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: DistListItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: DistListItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def MarkAsTask(self, MarkInterval:OlMarkInterval): # -> 
        """ MarkAsTask(self: DistListItemClass, MarkInterval: OlMarkInterval) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: DistListItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: DistListItemClass) """
        ...

    def RemoveMember(self, Recipient:Recipient): # -> 
        """ RemoveMember(self: DistListItemClass, Recipient: Recipient) """
        ...

    def RemoveMembers(self, Recipients:Recipients): # -> 
        """ RemoveMembers(self: DistListItemClass, Recipients: Recipients) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: DistListItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: DistListItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: DistListItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: DistListItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: DistListItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: DistListItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: DistListItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: DistListItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: DistListItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: DistListItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: DistListItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Save(self): # -> 
        """ Save(self: DistListItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: DistListItemClass, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: DistListItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Send = ...
    Unload = ...
    Write = ...


class _DocumentItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _DocumentItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _DocumentItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _DocumentItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _DocumentItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _DocumentItem) -> str
        Set: BillingInformation(self: _DocumentItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _DocumentItem) -> str
        Set: Body(self: _DocumentItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _DocumentItem) -> str
        Set: Categories(self: _DocumentItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _DocumentItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _DocumentItem) -> str
        Set: Companies(self: _DocumentItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _DocumentItem) -> Conflicts """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _DocumentItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _DocumentItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _DocumentItem) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _DocumentItem) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _DocumentItem) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _DocumentItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _DocumentItem) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _DocumentItem) -> OlImportance
        Set: Importance(self: _DocumentItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _DocumentItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _DocumentItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _DocumentItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _DocumentItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _DocumentItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _DocumentItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _DocumentItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _DocumentItem) -> str
        Set: MessageClass(self: _DocumentItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _DocumentItem) -> str
        Set: Mileage(self: _DocumentItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _DocumentItem) -> bool
        Set: NoAging(self: _DocumentItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _DocumentItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _DocumentItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _DocumentItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _DocumentItem) -> PropertyAccessor """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _DocumentItem) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _DocumentItem) -> OlSensitivity
        Set: Sensitivity(self: _DocumentItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _DocumentItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _DocumentItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _DocumentItem) -> str
        Set: Subject(self: _DocumentItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _DocumentItem) -> bool
        Set: UnRead(self: _DocumentItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _DocumentItem) -> UserProperties """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _DocumentItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _DocumentItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _DocumentItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _DocumentItem, Modal: object) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _DocumentItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _DocumentItem) """
        ...

    def Save(self): # -> 
        """ Save(self: _DocumentItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _DocumentItem, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _DocumentItem) """
        ...


class DocumentItem(_DocumentItem, ItemEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class DocumentItemClass(DocumentItem, ItemEvents_Event, __ComObject): # skipped bases: <type 'ItemEvents_10_Event'>, <type '_DocumentItem'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: DocumentItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: DocumentItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: DocumentItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: DocumentItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: DocumentItemClass) -> str
        Set: BillingInformation(self: DocumentItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: DocumentItemClass) -> str
        Set: Body(self: DocumentItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: DocumentItemClass) -> str
        Set: Categories(self: DocumentItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: DocumentItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: DocumentItemClass) -> str
        Set: Companies(self: DocumentItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: DocumentItemClass) -> Conflicts """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: DocumentItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: DocumentItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: DocumentItemClass) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: DocumentItemClass) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: DocumentItemClass) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: DocumentItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: DocumentItemClass) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: DocumentItemClass) -> OlImportance
        Set: Importance(self: DocumentItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: DocumentItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: DocumentItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: DocumentItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: DocumentItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: DocumentItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: DocumentItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: DocumentItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: DocumentItemClass) -> str
        Set: MessageClass(self: DocumentItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: DocumentItemClass) -> str
        Set: Mileage(self: DocumentItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: DocumentItemClass) -> bool
        Set: NoAging(self: DocumentItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: DocumentItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: DocumentItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DocumentItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: DocumentItemClass) -> PropertyAccessor """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: DocumentItemClass) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: DocumentItemClass) -> OlSensitivity
        Set: Sensitivity(self: DocumentItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: DocumentItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: DocumentItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: DocumentItemClass) -> str
        Set: Subject(self: DocumentItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: DocumentItemClass) -> bool
        Set: UnRead(self: DocumentItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: DocumentItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: DocumentItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: DocumentItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: DocumentItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: DocumentItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: DocumentItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: DocumentItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: DocumentItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: DocumentItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: DocumentItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: DocumentItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: DocumentItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: DocumentItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: DocumentItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: DocumentItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: DocumentItemClass, Modal: object) """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: DocumentItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: DocumentItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: DocumentItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: DocumentItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: DocumentItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: DocumentItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: DocumentItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: DocumentItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: DocumentItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: DocumentItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: DocumentItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: DocumentItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: DocumentItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: DocumentItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: DocumentItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: DocumentItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: DocumentItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: DocumentItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: DocumentItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: DocumentItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: DocumentItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: DocumentItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: DocumentItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: DocumentItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: DocumentItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: DocumentItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: DocumentItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: DocumentItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: DocumentItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: DocumentItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: DocumentItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: DocumentItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: DocumentItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: DocumentItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: DocumentItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: DocumentItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: DocumentItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: DocumentItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: DocumentItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: DocumentItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: DocumentItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: DocumentItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: DocumentItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Save(self): # -> 
        """ Save(self: DocumentItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: DocumentItemClass, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: DocumentItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Send = ...
    Unload = ...
    Write = ...


class MAPIFolder: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddressBookName(self) -> str:
        """
        Get: AddressBookName(self: MAPIFolder) -> str
        Set: AddressBookName(self: MAPIFolder) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: MAPIFolder) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: MAPIFolder) -> OlObjectClass """
        ...

    @property
    def CurrentView(self) -> View:
        """ Get: CurrentView(self: MAPIFolder) -> View """
        ...

    @property
    def CustomViewsOnly(self) -> bool:
        """
        Get: CustomViewsOnly(self: MAPIFolder) -> bool
        Set: CustomViewsOnly(self: MAPIFolder) = value
        """
        ...

    @property
    def DefaultItemType(self) -> OlItemType:
        """ Get: DefaultItemType(self: MAPIFolder) -> OlItemType """
        ...

    @property
    def DefaultMessageClass(self) -> str:
        """ Get: DefaultMessageClass(self: MAPIFolder) -> str """
        ...

    @property
    def Description(self) -> str:
        """
        Get: Description(self: MAPIFolder) -> str
        Set: Description(self: MAPIFolder) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: MAPIFolder) -> str """
        ...

    @property
    def FolderPath(self) -> str:
        """ Get: FolderPath(self: MAPIFolder) -> str """
        ...

    @property
    def Folders(self) -> Folders:
        """ Get: Folders(self: MAPIFolder) -> Folders """
        ...

    @property
    def FullFolderPath(self) -> str:
        """ Get: FullFolderPath(self: MAPIFolder) -> str """
        ...

    @property
    def InAppFolderSyncObject(self) -> bool:
        """
        Get: InAppFolderSyncObject(self: MAPIFolder) -> bool
        Set: InAppFolderSyncObject(self: MAPIFolder) = value
        """
        ...

    @property
    def IsSharePointFolder(self) -> bool:
        """ Get: IsSharePointFolder(self: MAPIFolder) -> bool """
        ...

    @property
    def Items(self) -> Items:
        """ Get: Items(self: MAPIFolder) -> Items """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: MAPIFolder) -> object """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: MAPIFolder) -> str
        Set: Name(self: MAPIFolder) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MAPIFolder) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: MAPIFolder) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: MAPIFolder) -> NameSpace """
        ...

    @property
    def ShowAsOutlookAB(self) -> bool:
        """
        Get: ShowAsOutlookAB(self: MAPIFolder) -> bool
        Set: ShowAsOutlookAB(self: MAPIFolder) = value
        """
        ...

    @property
    def ShowItemCount(self) -> OlShowItemCount:
        """
        Get: ShowItemCount(self: MAPIFolder) -> OlShowItemCount
        Set: ShowItemCount(self: MAPIFolder) = value
        """
        ...

    @property
    def Store(self) -> Store:
        """ Get: Store(self: MAPIFolder) -> Store """
        ...

    @property
    def StoreID(self) -> str:
        """ Get: StoreID(self: MAPIFolder) -> str """
        ...

    @property
    def UnReadItemCount(self) -> int:
        """ Get: UnReadItemCount(self: MAPIFolder) -> int """
        ...

    @property
    def UserDefinedProperties(self) -> UserDefinedProperties:
        """ Get: UserDefinedProperties(self: MAPIFolder) -> UserDefinedProperties """
        ...

    @property
    def UserPermissions(self) -> object:
        """ Get: UserPermissions(self: MAPIFolder) -> object """
        ...

    @property
    def Views(self) -> Views:
        """ Get: Views(self: MAPIFolder) -> Views """
        ...

    @property
    def WebViewAllowNavigation(self) -> bool:
        """
        Get: WebViewAllowNavigation(self: MAPIFolder) -> bool
        Set: WebViewAllowNavigation(self: MAPIFolder) = value
        """
        ...

    @property
    def WebViewOn(self) -> bool:
        """
        Get: WebViewOn(self: MAPIFolder) -> bool
        Set: WebViewOn(self: MAPIFolder) = value
        """
        ...

    @property
    def WebViewURL(self) -> str:
        """
        Get: WebViewURL(self: MAPIFolder) -> str
        Set: WebViewURL(self: MAPIFolder) = value
        """
        ...


    def AddToFavorites(self, fNoUI:object, Name:object): # -> 
        """ AddToFavorites(self: MAPIFolder, fNoUI: object, Name: object) """
        ...

    def AddToPFFavorites(self): # -> 
        """ AddToPFFavorites(self: MAPIFolder) """
        ...

    def CopyTo(self, DestinationFolder:MAPIFolder) -> MAPIFolder:
        """ CopyTo(self: MAPIFolder, DestinationFolder: MAPIFolder) -> MAPIFolder """
        ...

    def Delete(self): # -> 
        """ Delete(self: MAPIFolder) """
        ...

    def Display(self): # -> 
        """ Display(self: MAPIFolder) """
        ...

    def GetCalendarExporter(self) -> CalendarSharing:
        """ GetCalendarExporter(self: MAPIFolder) -> CalendarSharing """
        ...

    def GetCustomIcon(self): # -> StdPicture
        """ GetCustomIcon(self: MAPIFolder) -> StdPicture """
        ...

    def GetExplorer(self, DisplayMode:object) -> Explorer:
        """ GetExplorer(self: MAPIFolder, DisplayMode: object) -> Explorer """
        ...

    def GetStorage(self, StorageIdentifier:str, StorageIdentifierType:OlStorageIdentifierType) -> StorageItem:
        """ GetStorage(self: MAPIFolder, StorageIdentifier: str, StorageIdentifierType: OlStorageIdentifierType) -> StorageItem """
        ...

    def GetTable(self, Filter:object, TableContents:object) -> Table:
        """ GetTable(self: MAPIFolder, Filter: object, TableContents: object) -> Table """
        ...

    def MoveTo(self, DestinationFolder:MAPIFolder): # -> 
        """ MoveTo(self: MAPIFolder, DestinationFolder: MAPIFolder) """
        ...

    def SetCustomIcon(self, Picture): # ->  # Not found arg types: {'Picture': 'StdPicture'}
        """ SetCustomIcon(self: MAPIFolder, Picture: StdPicture) """
        ...


class DoNotUseMeFolder(MAPIFolder): # skipped bases: <type 'object'>
    """ no doc """
    pass

class DoNotUseMeFolderClass(__ComObject, DoNotUseMeFolder): # skipped bases: <type 'MAPIFolder'>, <type 'object'>
    """ no doc """
    @property
    def AddressBookName(self) -> str:
        """
        Get: AddressBookName(self: DoNotUseMeFolderClass) -> str
        Set: AddressBookName(self: DoNotUseMeFolderClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: DoNotUseMeFolderClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: DoNotUseMeFolderClass) -> OlObjectClass """
        ...

    @property
    def CurrentView(self) -> View:
        """ Get: CurrentView(self: DoNotUseMeFolderClass) -> View """
        ...

    @property
    def CustomViewsOnly(self) -> bool:
        """
        Get: CustomViewsOnly(self: DoNotUseMeFolderClass) -> bool
        Set: CustomViewsOnly(self: DoNotUseMeFolderClass) = value
        """
        ...

    @property
    def DefaultItemType(self) -> OlItemType:
        """ Get: DefaultItemType(self: DoNotUseMeFolderClass) -> OlItemType """
        ...

    @property
    def DefaultMessageClass(self) -> str:
        """ Get: DefaultMessageClass(self: DoNotUseMeFolderClass) -> str """
        ...

    @property
    def Description(self) -> str:
        """
        Get: Description(self: DoNotUseMeFolderClass) -> str
        Set: Description(self: DoNotUseMeFolderClass) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: DoNotUseMeFolderClass) -> str """
        ...

    @property
    def FolderPath(self) -> str:
        """ Get: FolderPath(self: DoNotUseMeFolderClass) -> str """
        ...

    @property
    def Folders(self) -> Folders:
        """ Get: Folders(self: DoNotUseMeFolderClass) -> Folders """
        ...

    @property
    def FullFolderPath(self) -> str:
        """ Get: FullFolderPath(self: DoNotUseMeFolderClass) -> str """
        ...

    @property
    def InAppFolderSyncObject(self) -> bool:
        """
        Get: InAppFolderSyncObject(self: DoNotUseMeFolderClass) -> bool
        Set: InAppFolderSyncObject(self: DoNotUseMeFolderClass) = value
        """
        ...

    @property
    def IsSharePointFolder(self) -> bool:
        """ Get: IsSharePointFolder(self: DoNotUseMeFolderClass) -> bool """
        ...

    @property
    def Items(self) -> Items:
        """ Get: Items(self: DoNotUseMeFolderClass) -> Items """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: DoNotUseMeFolderClass) -> object """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: DoNotUseMeFolderClass) -> str
        Set: Name(self: DoNotUseMeFolderClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DoNotUseMeFolderClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: DoNotUseMeFolderClass) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: DoNotUseMeFolderClass) -> NameSpace """
        ...

    @property
    def ShowAsOutlookAB(self) -> bool:
        """
        Get: ShowAsOutlookAB(self: DoNotUseMeFolderClass) -> bool
        Set: ShowAsOutlookAB(self: DoNotUseMeFolderClass) = value
        """
        ...

    @property
    def ShowItemCount(self) -> OlShowItemCount:
        """
        Get: ShowItemCount(self: DoNotUseMeFolderClass) -> OlShowItemCount
        Set: ShowItemCount(self: DoNotUseMeFolderClass) = value
        """
        ...

    @property
    def Store(self) -> Store:
        """ Get: Store(self: DoNotUseMeFolderClass) -> Store """
        ...

    @property
    def StoreID(self) -> str:
        """ Get: StoreID(self: DoNotUseMeFolderClass) -> str """
        ...

    @property
    def UnReadItemCount(self) -> int:
        """ Get: UnReadItemCount(self: DoNotUseMeFolderClass) -> int """
        ...

    @property
    def UserDefinedProperties(self) -> UserDefinedProperties:
        """ Get: UserDefinedProperties(self: DoNotUseMeFolderClass) -> UserDefinedProperties """
        ...

    @property
    def UserPermissions(self) -> object:
        """ Get: UserPermissions(self: DoNotUseMeFolderClass) -> object """
        ...

    @property
    def Views(self) -> Views:
        """ Get: Views(self: DoNotUseMeFolderClass) -> Views """
        ...

    @property
    def WebViewAllowNavigation(self) -> bool:
        """
        Get: WebViewAllowNavigation(self: DoNotUseMeFolderClass) -> bool
        Set: WebViewAllowNavigation(self: DoNotUseMeFolderClass) = value
        """
        ...

    @property
    def WebViewOn(self) -> bool:
        """
        Get: WebViewOn(self: DoNotUseMeFolderClass) -> bool
        Set: WebViewOn(self: DoNotUseMeFolderClass) = value
        """
        ...

    @property
    def WebViewURL(self) -> str:
        """
        Get: WebViewURL(self: DoNotUseMeFolderClass) -> str
        Set: WebViewURL(self: DoNotUseMeFolderClass) = value
        """
        ...


    def AddToFavorites(self, fNoUI:object, Name:object): # -> 
        """ AddToFavorites(self: DoNotUseMeFolderClass, fNoUI: object, Name: object) """
        ...

    def AddToPFFavorites(self): # -> 
        """ AddToPFFavorites(self: DoNotUseMeFolderClass) """
        ...

    def CopyTo(self, DestinationFolder:MAPIFolder) -> MAPIFolder:
        """ CopyTo(self: DoNotUseMeFolderClass, DestinationFolder: MAPIFolder) -> MAPIFolder """
        ...

    def Delete(self): # -> 
        """ Delete(self: DoNotUseMeFolderClass) """
        ...

    def Display(self): # -> 
        """ Display(self: DoNotUseMeFolderClass) """
        ...

    def GetCalendarExporter(self) -> CalendarSharing:
        """ GetCalendarExporter(self: DoNotUseMeFolderClass) -> CalendarSharing """
        ...

    def GetCustomIcon(self): # -> StdPicture
        """ GetCustomIcon(self: DoNotUseMeFolderClass) -> StdPicture """
        ...

    def GetExplorer(self, DisplayMode:object) -> Explorer:
        """ GetExplorer(self: DoNotUseMeFolderClass, DisplayMode: object) -> Explorer """
        ...

    def GetStorage(self, StorageIdentifier:str, StorageIdentifierType:OlStorageIdentifierType) -> StorageItem:
        """ GetStorage(self: DoNotUseMeFolderClass, StorageIdentifier: str, StorageIdentifierType: OlStorageIdentifierType) -> StorageItem """
        ...

    def GetTable(self, Filter:object, TableContents:object) -> Table:
        """ GetTable(self: DoNotUseMeFolderClass, Filter: object, TableContents: object) -> Table """
        ...

    def MoveTo(self, DestinationFolder:MAPIFolder): # -> 
        """ MoveTo(self: DoNotUseMeFolderClass, DestinationFolder: MAPIFolder) """
        ...

    def SetCustomIcon(self, Picture): # ->  # Not found arg types: {'Picture': 'StdPicture'}
        """ SetCustomIcon(self: DoNotUseMeFolderClass, Picture: StdPicture) """
        ...


class Exception: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Exception) -> Application """
        ...

    @property
    def AppointmentItem(self) -> AppointmentItem:
        """ Get: AppointmentItem(self: Exception) -> AppointmentItem """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Exception) -> OlObjectClass """
        ...

    @property
    def Deleted(self) -> bool:
        """ Get: Deleted(self: Exception) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: Exception) -> ItemProperties """
        ...

    @property
    def OriginalDate(self) -> DateTime:
        """ Get: OriginalDate(self: Exception) -> DateTime """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Exception) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Exception) -> NameSpace """
        ...



class Exceptions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Exceptions) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Exceptions) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Exceptions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Exceptions) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Exceptions) -> NameSpace """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _ExchangeDistributionList: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Address(self) -> str:
        """
        Get: Address(self: _ExchangeDistributionList) -> str
        Set: Address(self: _ExchangeDistributionList) = value
        """
        ...

    @property
    def AddressEntryUserType(self) -> OlAddressEntryUserType:
        """ Get: AddressEntryUserType(self: _ExchangeDistributionList) -> OlAddressEntryUserType """
        ...

    @property
    def Alias(self) -> str:
        """ Get: Alias(self: _ExchangeDistributionList) -> str """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ExchangeDistributionList) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ExchangeDistributionList) -> OlObjectClass """
        ...

    @property
    def Comments(self) -> str:
        """
        Get: Comments(self: _ExchangeDistributionList) -> str
        Set: Comments(self: _ExchangeDistributionList) = value
        """
        ...

    @property
    def DisplayType(self) -> OlDisplayType:
        """ Get: DisplayType(self: _ExchangeDistributionList) -> OlDisplayType """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: _ExchangeDistributionList) -> str """
        ...

    @property
    def Manager(self) -> AddressEntry:
        """ Get: Manager(self: _ExchangeDistributionList) -> AddressEntry """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """
        Get: MAPIOBJECT(self: _ExchangeDistributionList) -> object
        Set: MAPIOBJECT(self: _ExchangeDistributionList) = value
        """
        ...

    @property
    def Members(self) -> AddressEntries:
        """ Get: Members(self: _ExchangeDistributionList) -> AddressEntries """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _ExchangeDistributionList) -> str
        Set: Name(self: _ExchangeDistributionList) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ExchangeDistributionList) -> object """
        ...

    @property
    def PrimarySmtpAddress(self) -> str:
        """ Get: PrimarySmtpAddress(self: _ExchangeDistributionList) -> str """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _ExchangeDistributionList) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ExchangeDistributionList) -> NameSpace """
        ...

    @property
    def Type(self) -> str:
        """
        Get: Type(self: _ExchangeDistributionList) -> str
        Set: Type(self: _ExchangeDistributionList) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: _ExchangeDistributionList) """
        ...

    def Details(self, HWnd:object): # -> 
        """ Details(self: _ExchangeDistributionList, HWnd: object) """
        ...

    def GetContact(self) -> ContactItem:
        """ GetContact(self: _ExchangeDistributionList) -> ContactItem """
        ...

    def GetExchangeDistributionList(self) -> ExchangeDistributionList:
        """ GetExchangeDistributionList(self: _ExchangeDistributionList) -> ExchangeDistributionList """
        ...

    def GetExchangeDistributionListMembers(self) -> AddressEntries:
        """ GetExchangeDistributionListMembers(self: _ExchangeDistributionList) -> AddressEntries """
        ...

    def GetExchangeUser(self) -> ExchangeUser:
        """ GetExchangeUser(self: _ExchangeDistributionList) -> ExchangeUser """
        ...

    def GetFreeBusy(self, Start:DateTime, MinPerChar:int, CompleteFormat:object) -> str:
        """ GetFreeBusy(self: _ExchangeDistributionList, Start: DateTime, MinPerChar: int, CompleteFormat: object) -> str """
        ...

    def GetMemberOfList(self) -> AddressEntries:
        """ GetMemberOfList(self: _ExchangeDistributionList) -> AddressEntries """
        ...

    def GetOwners(self) -> AddressEntries:
        """ GetOwners(self: _ExchangeDistributionList) -> AddressEntries """
        ...

    def Update(self, MakePermanent:object, Refresh:object): # -> 
        """ Update(self: _ExchangeDistributionList, MakePermanent: object, Refresh: object) """
        ...

    def UpdateFreeBusy(self): # -> 
        """ UpdateFreeBusy(self: _ExchangeDistributionList) """
        ...


class ExchangeDistributionList(_ExchangeDistributionList): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ExchangeDistributionListClass(__ComObject, ExchangeDistributionList): # skipped bases: <type '_ExchangeDistributionList'>, <type 'object'>
    """ no doc """
    @property
    def Address(self) -> str:
        """
        Get: Address(self: ExchangeDistributionListClass) -> str
        Set: Address(self: ExchangeDistributionListClass) = value
        """
        ...

    @property
    def AddressEntryUserType(self) -> OlAddressEntryUserType:
        """ Get: AddressEntryUserType(self: ExchangeDistributionListClass) -> OlAddressEntryUserType """
        ...

    @property
    def Alias(self) -> str:
        """ Get: Alias(self: ExchangeDistributionListClass) -> str """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ExchangeDistributionListClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ExchangeDistributionListClass) -> OlObjectClass """
        ...

    @property
    def Comments(self) -> str:
        """
        Get: Comments(self: ExchangeDistributionListClass) -> str
        Set: Comments(self: ExchangeDistributionListClass) = value
        """
        ...

    @property
    def DisplayType(self) -> OlDisplayType:
        """ Get: DisplayType(self: ExchangeDistributionListClass) -> OlDisplayType """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: ExchangeDistributionListClass) -> str """
        ...

    @property
    def Manager(self) -> AddressEntry:
        """ Get: Manager(self: ExchangeDistributionListClass) -> AddressEntry """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """
        Get: MAPIOBJECT(self: ExchangeDistributionListClass) -> object
        Set: MAPIOBJECT(self: ExchangeDistributionListClass) = value
        """
        ...

    @property
    def Members(self) -> AddressEntries:
        """ Get: Members(self: ExchangeDistributionListClass) -> AddressEntries """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ExchangeDistributionListClass) -> str
        Set: Name(self: ExchangeDistributionListClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ExchangeDistributionListClass) -> object """
        ...

    @property
    def PrimarySmtpAddress(self) -> str:
        """ Get: PrimarySmtpAddress(self: ExchangeDistributionListClass) -> str """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: ExchangeDistributionListClass) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ExchangeDistributionListClass) -> NameSpace """
        ...

    @property
    def Type(self) -> str:
        """
        Get: Type(self: ExchangeDistributionListClass) -> str
        Set: Type(self: ExchangeDistributionListClass) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: ExchangeDistributionListClass) """
        ...

    def Details(self, HWnd:object): # -> 
        """ Details(self: ExchangeDistributionListClass, HWnd: object) """
        ...

    def GetContact(self) -> ContactItem:
        """ GetContact(self: ExchangeDistributionListClass) -> ContactItem """
        ...

    def GetExchangeDistributionList(self) -> ExchangeDistributionList:
        """ GetExchangeDistributionList(self: ExchangeDistributionListClass) -> ExchangeDistributionList """
        ...

    def GetExchangeDistributionListMembers(self) -> AddressEntries:
        """ GetExchangeDistributionListMembers(self: ExchangeDistributionListClass) -> AddressEntries """
        ...

    def GetExchangeUser(self) -> ExchangeUser:
        """ GetExchangeUser(self: ExchangeDistributionListClass) -> ExchangeUser """
        ...

    def GetFreeBusy(self, Start:DateTime, MinPerChar:int, CompleteFormat:object) -> str:
        """ GetFreeBusy(self: ExchangeDistributionListClass, Start: DateTime, MinPerChar: int, CompleteFormat: object) -> str """
        ...

    def GetMemberOfList(self) -> AddressEntries:
        """ GetMemberOfList(self: ExchangeDistributionListClass) -> AddressEntries """
        ...

    def GetOwners(self) -> AddressEntries:
        """ GetOwners(self: ExchangeDistributionListClass) -> AddressEntries """
        ...

    def Update(self, MakePermanent:object, Refresh:object): # -> 
        """ Update(self: ExchangeDistributionListClass, MakePermanent: object, Refresh: object) """
        ...

    def UpdateFreeBusy(self): # -> 
        """ UpdateFreeBusy(self: ExchangeDistributionListClass) """
        ...


class _ExchangeUser: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Address(self) -> str:
        """
        Get: Address(self: _ExchangeUser) -> str
        Set: Address(self: _ExchangeUser) = value
        """
        ...

    @property
    def AddressEntryUserType(self) -> OlAddressEntryUserType:
        """ Get: AddressEntryUserType(self: _ExchangeUser) -> OlAddressEntryUserType """
        ...

    @property
    def Alias(self) -> str:
        """ Get: Alias(self: _ExchangeUser) -> str """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ExchangeUser) -> Application """
        ...

    @property
    def AssistantName(self) -> str:
        """
        Get: AssistantName(self: _ExchangeUser) -> str
        Set: AssistantName(self: _ExchangeUser) = value
        """
        ...

    @property
    def BusinessTelephoneNumber(self) -> str:
        """
        Get: BusinessTelephoneNumber(self: _ExchangeUser) -> str
        Set: BusinessTelephoneNumber(self: _ExchangeUser) = value
        """
        ...

    @property
    def City(self) -> str:
        """
        Get: City(self: _ExchangeUser) -> str
        Set: City(self: _ExchangeUser) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ExchangeUser) -> OlObjectClass """
        ...

    @property
    def Comments(self) -> str:
        """
        Get: Comments(self: _ExchangeUser) -> str
        Set: Comments(self: _ExchangeUser) = value
        """
        ...

    @property
    def CompanyName(self) -> str:
        """
        Get: CompanyName(self: _ExchangeUser) -> str
        Set: CompanyName(self: _ExchangeUser) = value
        """
        ...

    @property
    def Department(self) -> str:
        """
        Get: Department(self: _ExchangeUser) -> str
        Set: Department(self: _ExchangeUser) = value
        """
        ...

    @property
    def DisplayType(self) -> OlDisplayType:
        """ Get: DisplayType(self: _ExchangeUser) -> OlDisplayType """
        ...

    @property
    def FirstName(self) -> str:
        """
        Get: FirstName(self: _ExchangeUser) -> str
        Set: FirstName(self: _ExchangeUser) = value
        """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: _ExchangeUser) -> str """
        ...

    @property
    def JobTitle(self) -> str:
        """
        Get: JobTitle(self: _ExchangeUser) -> str
        Set: JobTitle(self: _ExchangeUser) = value
        """
        ...

    @property
    def LastName(self) -> str:
        """
        Get: LastName(self: _ExchangeUser) -> str
        Set: LastName(self: _ExchangeUser) = value
        """
        ...

    @property
    def Manager(self) -> AddressEntry:
        """ Get: Manager(self: _ExchangeUser) -> AddressEntry """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """
        Get: MAPIOBJECT(self: _ExchangeUser) -> object
        Set: MAPIOBJECT(self: _ExchangeUser) = value
        """
        ...

    @property
    def Members(self) -> AddressEntries:
        """ Get: Members(self: _ExchangeUser) -> AddressEntries """
        ...

    @property
    def MobileTelephoneNumber(self) -> str:
        """
        Get: MobileTelephoneNumber(self: _ExchangeUser) -> str
        Set: MobileTelephoneNumber(self: _ExchangeUser) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _ExchangeUser) -> str
        Set: Name(self: _ExchangeUser) = value
        """
        ...

    @property
    def OfficeLocation(self) -> str:
        """
        Get: OfficeLocation(self: _ExchangeUser) -> str
        Set: OfficeLocation(self: _ExchangeUser) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ExchangeUser) -> object """
        ...

    @property
    def PostalCode(self) -> str:
        """
        Get: PostalCode(self: _ExchangeUser) -> str
        Set: PostalCode(self: _ExchangeUser) = value
        """
        ...

    @property
    def PrimarySmtpAddress(self) -> str:
        """ Get: PrimarySmtpAddress(self: _ExchangeUser) -> str """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _ExchangeUser) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ExchangeUser) -> NameSpace """
        ...

    @property
    def StateOrProvince(self) -> str:
        """
        Get: StateOrProvince(self: _ExchangeUser) -> str
        Set: StateOrProvince(self: _ExchangeUser) = value
        """
        ...

    @property
    def StreetAddress(self) -> str:
        """
        Get: StreetAddress(self: _ExchangeUser) -> str
        Set: StreetAddress(self: _ExchangeUser) = value
        """
        ...

    @property
    def Type(self) -> str:
        """
        Get: Type(self: _ExchangeUser) -> str
        Set: Type(self: _ExchangeUser) = value
        """
        ...

    @property
    def YomiCompanyName(self) -> str:
        """
        Get: YomiCompanyName(self: _ExchangeUser) -> str
        Set: YomiCompanyName(self: _ExchangeUser) = value
        """
        ...

    @property
    def YomiDepartment(self) -> str:
        """
        Get: YomiDepartment(self: _ExchangeUser) -> str
        Set: YomiDepartment(self: _ExchangeUser) = value
        """
        ...

    @property
    def YomiDisplayName(self) -> str:
        """
        Get: YomiDisplayName(self: _ExchangeUser) -> str
        Set: YomiDisplayName(self: _ExchangeUser) = value
        """
        ...

    @property
    def YomiFirstName(self) -> str:
        """
        Get: YomiFirstName(self: _ExchangeUser) -> str
        Set: YomiFirstName(self: _ExchangeUser) = value
        """
        ...

    @property
    def YomiLastName(self) -> str:
        """
        Get: YomiLastName(self: _ExchangeUser) -> str
        Set: YomiLastName(self: _ExchangeUser) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: _ExchangeUser) """
        ...

    def Details(self, HWnd:object): # -> 
        """ Details(self: _ExchangeUser, HWnd: object) """
        ...

    def GetContact(self) -> ContactItem:
        """ GetContact(self: _ExchangeUser) -> ContactItem """
        ...

    def GetDirectReports(self) -> AddressEntries:
        """ GetDirectReports(self: _ExchangeUser) -> AddressEntries """
        ...

    def GetExchangeDistributionList(self) -> ExchangeDistributionList:
        """ GetExchangeDistributionList(self: _ExchangeUser) -> ExchangeDistributionList """
        ...

    def GetExchangeUser(self) -> ExchangeUser:
        """ GetExchangeUser(self: _ExchangeUser) -> ExchangeUser """
        ...

    def GetExchangeUserManager(self) -> ExchangeUser:
        """ GetExchangeUserManager(self: _ExchangeUser) -> ExchangeUser """
        ...

    def GetFreeBusy(self, Start:DateTime, MinPerChar:int, CompleteFormat:object) -> str:
        """ GetFreeBusy(self: _ExchangeUser, Start: DateTime, MinPerChar: int, CompleteFormat: object) -> str """
        ...

    def GetMemberOfList(self) -> AddressEntries:
        """ GetMemberOfList(self: _ExchangeUser) -> AddressEntries """
        ...

    def GetPicture(self): # -> StdPicture
        """ GetPicture(self: _ExchangeUser) -> StdPicture """
        ...

    def Update(self, MakePermanent:object, Refresh:object): # -> 
        """ Update(self: _ExchangeUser, MakePermanent: object, Refresh: object) """
        ...

    def UpdateFreeBusy(self): # -> 
        """ UpdateFreeBusy(self: _ExchangeUser) """
        ...


class ExchangeUser(_ExchangeUser): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ExchangeUserClass(ExchangeUser, __ComObject): # skipped bases: <type '_ExchangeUser'>, <type 'object'>
    """ no doc """
    @property
    def Address(self) -> str:
        """
        Get: Address(self: ExchangeUserClass) -> str
        Set: Address(self: ExchangeUserClass) = value
        """
        ...

    @property
    def AddressEntryUserType(self) -> OlAddressEntryUserType:
        """ Get: AddressEntryUserType(self: ExchangeUserClass) -> OlAddressEntryUserType """
        ...

    @property
    def Alias(self) -> str:
        """ Get: Alias(self: ExchangeUserClass) -> str """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ExchangeUserClass) -> Application """
        ...

    @property
    def AssistantName(self) -> str:
        """
        Get: AssistantName(self: ExchangeUserClass) -> str
        Set: AssistantName(self: ExchangeUserClass) = value
        """
        ...

    @property
    def BusinessTelephoneNumber(self) -> str:
        """
        Get: BusinessTelephoneNumber(self: ExchangeUserClass) -> str
        Set: BusinessTelephoneNumber(self: ExchangeUserClass) = value
        """
        ...

    @property
    def City(self) -> str:
        """
        Get: City(self: ExchangeUserClass) -> str
        Set: City(self: ExchangeUserClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ExchangeUserClass) -> OlObjectClass """
        ...

    @property
    def Comments(self) -> str:
        """
        Get: Comments(self: ExchangeUserClass) -> str
        Set: Comments(self: ExchangeUserClass) = value
        """
        ...

    @property
    def CompanyName(self) -> str:
        """
        Get: CompanyName(self: ExchangeUserClass) -> str
        Set: CompanyName(self: ExchangeUserClass) = value
        """
        ...

    @property
    def Department(self) -> str:
        """
        Get: Department(self: ExchangeUserClass) -> str
        Set: Department(self: ExchangeUserClass) = value
        """
        ...

    @property
    def DisplayType(self) -> OlDisplayType:
        """ Get: DisplayType(self: ExchangeUserClass) -> OlDisplayType """
        ...

    @property
    def FirstName(self) -> str:
        """
        Get: FirstName(self: ExchangeUserClass) -> str
        Set: FirstName(self: ExchangeUserClass) = value
        """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: ExchangeUserClass) -> str """
        ...

    @property
    def JobTitle(self) -> str:
        """
        Get: JobTitle(self: ExchangeUserClass) -> str
        Set: JobTitle(self: ExchangeUserClass) = value
        """
        ...

    @property
    def LastName(self) -> str:
        """
        Get: LastName(self: ExchangeUserClass) -> str
        Set: LastName(self: ExchangeUserClass) = value
        """
        ...

    @property
    def Manager(self) -> AddressEntry:
        """ Get: Manager(self: ExchangeUserClass) -> AddressEntry """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """
        Get: MAPIOBJECT(self: ExchangeUserClass) -> object
        Set: MAPIOBJECT(self: ExchangeUserClass) = value
        """
        ...

    @property
    def Members(self) -> AddressEntries:
        """ Get: Members(self: ExchangeUserClass) -> AddressEntries """
        ...

    @property
    def MobileTelephoneNumber(self) -> str:
        """
        Get: MobileTelephoneNumber(self: ExchangeUserClass) -> str
        Set: MobileTelephoneNumber(self: ExchangeUserClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ExchangeUserClass) -> str
        Set: Name(self: ExchangeUserClass) = value
        """
        ...

    @property
    def OfficeLocation(self) -> str:
        """
        Get: OfficeLocation(self: ExchangeUserClass) -> str
        Set: OfficeLocation(self: ExchangeUserClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ExchangeUserClass) -> object """
        ...

    @property
    def PostalCode(self) -> str:
        """
        Get: PostalCode(self: ExchangeUserClass) -> str
        Set: PostalCode(self: ExchangeUserClass) = value
        """
        ...

    @property
    def PrimarySmtpAddress(self) -> str:
        """ Get: PrimarySmtpAddress(self: ExchangeUserClass) -> str """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: ExchangeUserClass) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ExchangeUserClass) -> NameSpace """
        ...

    @property
    def StateOrProvince(self) -> str:
        """
        Get: StateOrProvince(self: ExchangeUserClass) -> str
        Set: StateOrProvince(self: ExchangeUserClass) = value
        """
        ...

    @property
    def StreetAddress(self) -> str:
        """
        Get: StreetAddress(self: ExchangeUserClass) -> str
        Set: StreetAddress(self: ExchangeUserClass) = value
        """
        ...

    @property
    def Type(self) -> str:
        """
        Get: Type(self: ExchangeUserClass) -> str
        Set: Type(self: ExchangeUserClass) = value
        """
        ...

    @property
    def YomiCompanyName(self) -> str:
        """
        Get: YomiCompanyName(self: ExchangeUserClass) -> str
        Set: YomiCompanyName(self: ExchangeUserClass) = value
        """
        ...

    @property
    def YomiDepartment(self) -> str:
        """
        Get: YomiDepartment(self: ExchangeUserClass) -> str
        Set: YomiDepartment(self: ExchangeUserClass) = value
        """
        ...

    @property
    def YomiDisplayName(self) -> str:
        """
        Get: YomiDisplayName(self: ExchangeUserClass) -> str
        Set: YomiDisplayName(self: ExchangeUserClass) = value
        """
        ...

    @property
    def YomiFirstName(self) -> str:
        """
        Get: YomiFirstName(self: ExchangeUserClass) -> str
        Set: YomiFirstName(self: ExchangeUserClass) = value
        """
        ...

    @property
    def YomiLastName(self) -> str:
        """
        Get: YomiLastName(self: ExchangeUserClass) -> str
        Set: YomiLastName(self: ExchangeUserClass) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: ExchangeUserClass) """
        ...

    def Details(self, HWnd:object): # -> 
        """ Details(self: ExchangeUserClass, HWnd: object) """
        ...

    def GetContact(self) -> ContactItem:
        """ GetContact(self: ExchangeUserClass) -> ContactItem """
        ...

    def GetDirectReports(self) -> AddressEntries:
        """ GetDirectReports(self: ExchangeUserClass) -> AddressEntries """
        ...

    def GetExchangeDistributionList(self) -> ExchangeDistributionList:
        """ GetExchangeDistributionList(self: ExchangeUserClass) -> ExchangeDistributionList """
        ...

    def GetExchangeUser(self) -> ExchangeUser:
        """ GetExchangeUser(self: ExchangeUserClass) -> ExchangeUser """
        ...

    def GetExchangeUserManager(self) -> ExchangeUser:
        """ GetExchangeUserManager(self: ExchangeUserClass) -> ExchangeUser """
        ...

    def GetFreeBusy(self, Start:DateTime, MinPerChar:int, CompleteFormat:object) -> str:
        """ GetFreeBusy(self: ExchangeUserClass, Start: DateTime, MinPerChar: int, CompleteFormat: object) -> str """
        ...

    def GetMemberOfList(self) -> AddressEntries:
        """ GetMemberOfList(self: ExchangeUserClass) -> AddressEntries """
        ...

    def GetPicture(self): # -> StdPicture
        """ GetPicture(self: ExchangeUserClass) -> StdPicture """
        ...

    def Update(self, MakePermanent:object, Refresh:object): # -> 
        """ Update(self: ExchangeUserClass, MakePermanent: object, Refresh: object) """
        ...

    def UpdateFreeBusy(self): # -> 
        """ UpdateFreeBusy(self: ExchangeUserClass) """
        ...


class ExplorerEvents_10_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Activate(self): # -> 
        """ add_Activate(self: ExplorerEvents_10_Event, : ExplorerEvents_10_ActivateEventHandler) """
        ...

    def add_AttachmentSelectionChange(self): # -> 
        """ add_AttachmentSelectionChange(self: ExplorerEvents_10_Event, : ExplorerEvents_10_AttachmentSelectionChangeEventHandler) """
        ...

    def add_BeforeFolderSwitch(self): # -> 
        """ add_BeforeFolderSwitch(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeFolderSwitchEventHandler) """
        ...

    def add_BeforeItemCopy(self): # -> 
        """ add_BeforeItemCopy(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeItemCopyEventHandler) """
        ...

    def add_BeforeItemCut(self): # -> 
        """ add_BeforeItemCut(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeItemCutEventHandler) """
        ...

    def add_BeforeItemPaste(self): # -> 
        """ add_BeforeItemPaste(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeItemPasteEventHandler) """
        ...

    def add_BeforeMaximize(self): # -> 
        """ add_BeforeMaximize(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeMaximizeEventHandler) """
        ...

    def add_BeforeMinimize(self): # -> 
        """ add_BeforeMinimize(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeMinimizeEventHandler) """
        ...

    def add_BeforeMove(self): # -> 
        """ add_BeforeMove(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeMoveEventHandler) """
        ...

    def add_BeforeSize(self): # -> 
        """ add_BeforeSize(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeSizeEventHandler) """
        ...

    def add_BeforeViewSwitch(self): # -> 
        """ add_BeforeViewSwitch(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeViewSwitchEventHandler) """
        ...

    def add_Close(self): # -> 
        """ add_Close(self: ExplorerEvents_10_Event, : ExplorerEvents_10_CloseEventHandler) """
        ...

    def add_Deactivate(self): # -> 
        """ add_Deactivate(self: ExplorerEvents_10_Event, : ExplorerEvents_10_DeactivateEventHandler) """
        ...

    def add_FolderSwitch(self): # -> 
        """ add_FolderSwitch(self: ExplorerEvents_10_Event, : ExplorerEvents_10_FolderSwitchEventHandler) """
        ...

    def add_InlineResponse(self): # -> 
        """ add_InlineResponse(self: ExplorerEvents_10_Event, : ExplorerEvents_10_InlineResponseEventHandler) """
        ...

    def add_InlineResponseClose(self): # -> 
        """ add_InlineResponseClose(self: ExplorerEvents_10_Event, : ExplorerEvents_10_InlineResponseCloseEventHandler) """
        ...

    def add_SelectionChange(self): # -> 
        """ add_SelectionChange(self: ExplorerEvents_10_Event, : ExplorerEvents_10_SelectionChangeEventHandler) """
        ...

    def add_ViewSwitch(self): # -> 
        """ add_ViewSwitch(self: ExplorerEvents_10_Event, : ExplorerEvents_10_ViewSwitchEventHandler) """
        ...

    def remove_Activate(self): # -> 
        """ remove_Activate(self: ExplorerEvents_10_Event, : ExplorerEvents_10_ActivateEventHandler) """
        ...

    def remove_AttachmentSelectionChange(self): # -> 
        """ remove_AttachmentSelectionChange(self: ExplorerEvents_10_Event, : ExplorerEvents_10_AttachmentSelectionChangeEventHandler) """
        ...

    def remove_BeforeFolderSwitch(self): # -> 
        """ remove_BeforeFolderSwitch(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeFolderSwitchEventHandler) """
        ...

    def remove_BeforeItemCopy(self): # -> 
        """ remove_BeforeItemCopy(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeItemCopyEventHandler) """
        ...

    def remove_BeforeItemCut(self): # -> 
        """ remove_BeforeItemCut(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeItemCutEventHandler) """
        ...

    def remove_BeforeItemPaste(self): # -> 
        """ remove_BeforeItemPaste(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeItemPasteEventHandler) """
        ...

    def remove_BeforeMaximize(self): # -> 
        """ remove_BeforeMaximize(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeMaximizeEventHandler) """
        ...

    def remove_BeforeMinimize(self): # -> 
        """ remove_BeforeMinimize(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeMinimizeEventHandler) """
        ...

    def remove_BeforeMove(self): # -> 
        """ remove_BeforeMove(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeMoveEventHandler) """
        ...

    def remove_BeforeSize(self): # -> 
        """ remove_BeforeSize(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeSizeEventHandler) """
        ...

    def remove_BeforeViewSwitch(self): # -> 
        """ remove_BeforeViewSwitch(self: ExplorerEvents_10_Event, : ExplorerEvents_10_BeforeViewSwitchEventHandler) """
        ...

    def remove_Close(self): # -> 
        """ remove_Close(self: ExplorerEvents_10_Event, : ExplorerEvents_10_CloseEventHandler) """
        ...

    def remove_Deactivate(self): # -> 
        """ remove_Deactivate(self: ExplorerEvents_10_Event, : ExplorerEvents_10_DeactivateEventHandler) """
        ...

    def remove_FolderSwitch(self): # -> 
        """ remove_FolderSwitch(self: ExplorerEvents_10_Event, : ExplorerEvents_10_FolderSwitchEventHandler) """
        ...

    def remove_InlineResponse(self): # -> 
        """ remove_InlineResponse(self: ExplorerEvents_10_Event, : ExplorerEvents_10_InlineResponseEventHandler) """
        ...

    def remove_InlineResponseClose(self): # -> 
        """ remove_InlineResponseClose(self: ExplorerEvents_10_Event, : ExplorerEvents_10_InlineResponseCloseEventHandler) """
        ...

    def remove_SelectionChange(self): # -> 
        """ remove_SelectionChange(self: ExplorerEvents_10_Event, : ExplorerEvents_10_SelectionChangeEventHandler) """
        ...

    def remove_ViewSwitch(self): # -> 
        """ remove_ViewSwitch(self: ExplorerEvents_10_Event, : ExplorerEvents_10_ViewSwitchEventHandler) """
        ...

    Activate = ...
    AttachmentSelectionChange = ...
    BeforeFolderSwitch = ...
    BeforeItemCopy = ...
    BeforeItemCut = ...
    BeforeItemPaste = ...
    BeforeMaximize = ...
    BeforeMinimize = ...
    BeforeMove = ...
    BeforeSize = ...
    BeforeViewSwitch = ...
    Close = ...
    Deactivate = ...
    FolderSwitch = ...
    InlineResponse = ...
    InlineResponseClose = ...
    SelectionChange = ...
    ViewSwitch = ...


class _Explorer: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AccountSelector(self) -> AccountSelector:
        """ Get: AccountSelector(self: _Explorer) -> AccountSelector """
        ...

    @property
    def ActiveInlineResponse(self) -> object:
        """ Get: ActiveInlineResponse(self: _Explorer) -> object """
        ...

    @property
    def ActiveInlineResponseWordEditor(self) -> object:
        """ Get: ActiveInlineResponseWordEditor(self: _Explorer) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Explorer) -> Application """
        ...

    @property
    def AttachmentSelection(self) -> AttachmentSelection:
        """ Get: AttachmentSelection(self: _Explorer) -> AttachmentSelection """
        ...

    @property
    def Caption(self) -> str:
        """ Get: Caption(self: _Explorer) -> str """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Explorer) -> OlObjectClass """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: _Explorer) -> CommandBars """
        ...

    @property
    def CurrentFolder(self) -> MAPIFolder:
        """
        Get: CurrentFolder(self: _Explorer) -> MAPIFolder
        Set: CurrentFolder(self: _Explorer) = value
        """
        ...

    @property
    def CurrentView(self) -> object:
        """
        Get: CurrentView(self: _Explorer) -> object
        Set: CurrentView(self: _Explorer) = value
        """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: _Explorer) -> int
        Set: Height(self: _Explorer) = value
        """
        ...

    @property
    def HTMLDocument(self) -> object:
        """ Get: HTMLDocument(self: _Explorer) -> object """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: _Explorer) -> int
        Set: Left(self: _Explorer) = value
        """
        ...

    @property
    def NavigationPane(self) -> NavigationPane:
        """ Get: NavigationPane(self: _Explorer) -> NavigationPane """
        ...

    @property
    def Panes(self) -> Panes:
        """ Get: Panes(self: _Explorer) -> Panes """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Explorer) -> object """
        ...

    @property
    def Selection(self) -> Selection:
        """ Get: Selection(self: _Explorer) -> Selection """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Explorer) -> NameSpace """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: _Explorer) -> int
        Set: Top(self: _Explorer) = value
        """
        ...

    @property
    def Views(self) -> object:
        """ Get: Views(self: _Explorer) -> object """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: _Explorer) -> int
        Set: Width(self: _Explorer) = value
        """
        ...

    @property
    def WindowState(self) -> OlWindowState:
        """
        Get: WindowState(self: _Explorer) -> OlWindowState
        Set: WindowState(self: _Explorer) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: _Explorer) """
        ...

    def AddToSelection(self, Item:object): # -> 
        """ AddToSelection(self: _Explorer, Item: object) """
        ...

    def ClearSearch(self): # -> 
        """ ClearSearch(self: _Explorer) """
        ...

    def ClearSelection(self): # -> 
        """ ClearSelection(self: _Explorer) """
        ...

    def Close(self): # -> 
        """ Close(self: _Explorer) """
        ...

    def DeselectFolder(self, Folder:MAPIFolder): # -> 
        """ DeselectFolder(self: _Explorer, Folder: MAPIFolder) """
        ...

    def Display(self): # -> 
        """ Display(self: _Explorer) """
        ...

    def IsFolderSelected(self, Folder:MAPIFolder) -> bool:
        """ IsFolderSelected(self: _Explorer, Folder: MAPIFolder) -> bool """
        ...

    def IsItemSelectableInView(self, Item:object) -> bool:
        """ IsItemSelectableInView(self: _Explorer, Item: object) -> bool """
        ...

    def IsPaneVisible(self, Pane:OlPane) -> bool:
        """ IsPaneVisible(self: _Explorer, Pane: OlPane) -> bool """
        ...

    def RemoveFromSelection(self, Item:object): # -> 
        """ RemoveFromSelection(self: _Explorer, Item: object) """
        ...

    def Search(self, Query:str, SearchScope:OlSearchScope): # -> 
        """ Search(self: _Explorer, Query: str, SearchScope: OlSearchScope) """
        ...

    def SelectAllItems(self): # -> 
        """ SelectAllItems(self: _Explorer) """
        ...

    def SelectFolder(self, Folder:MAPIFolder): # -> 
        """ SelectFolder(self: _Explorer, Folder: MAPIFolder) """
        ...

    def ShowPane(self, Pane:OlPane, Visible:bool): # -> 
        """ ShowPane(self: _Explorer, Pane: OlPane, Visible: bool) """
        ...


class Explorer(_Explorer, ExplorerEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ExplorerClass(ExplorerEvents_Event, __ComObject, Explorer): # skipped bases: <type '_Explorer'>, <type 'ExplorerEvents_10_Event'>, <type 'object'>
    """ no doc """
    @property
    def AccountSelector(self) -> AccountSelector:
        """ Get: AccountSelector(self: ExplorerClass) -> AccountSelector """
        ...

    @property
    def ActiveInlineResponse(self) -> object:
        """ Get: ActiveInlineResponse(self: ExplorerClass) -> object """
        ...

    @property
    def ActiveInlineResponseWordEditor(self) -> object:
        """ Get: ActiveInlineResponseWordEditor(self: ExplorerClass) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ExplorerClass) -> Application """
        ...

    @property
    def AttachmentSelection(self) -> AttachmentSelection:
        """ Get: AttachmentSelection(self: ExplorerClass) -> AttachmentSelection """
        ...

    @property
    def Caption(self) -> str:
        """ Get: Caption(self: ExplorerClass) -> str """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ExplorerClass) -> OlObjectClass """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: ExplorerClass) -> CommandBars """
        ...

    @property
    def CurrentFolder(self) -> MAPIFolder:
        """
        Get: CurrentFolder(self: ExplorerClass) -> MAPIFolder
        Set: CurrentFolder(self: ExplorerClass) = value
        """
        ...

    @property
    def CurrentView(self) -> object:
        """
        Get: CurrentView(self: ExplorerClass) -> object
        Set: CurrentView(self: ExplorerClass) = value
        """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: ExplorerClass) -> int
        Set: Height(self: ExplorerClass) = value
        """
        ...

    @property
    def HTMLDocument(self) -> object:
        """ Get: HTMLDocument(self: ExplorerClass) -> object """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: ExplorerClass) -> int
        Set: Left(self: ExplorerClass) = value
        """
        ...

    @property
    def NavigationPane(self) -> NavigationPane:
        """ Get: NavigationPane(self: ExplorerClass) -> NavigationPane """
        ...

    @property
    def Panes(self) -> Panes:
        """ Get: Panes(self: ExplorerClass) -> Panes """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ExplorerClass) -> object """
        ...

    @property
    def Selection(self) -> Selection:
        """ Get: Selection(self: ExplorerClass) -> Selection """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ExplorerClass) -> NameSpace """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: ExplorerClass) -> int
        Set: Top(self: ExplorerClass) = value
        """
        ...

    @property
    def Views(self) -> object:
        """ Get: Views(self: ExplorerClass) -> object """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: ExplorerClass) -> int
        Set: Width(self: ExplorerClass) = value
        """
        ...

    @property
    def WindowState(self) -> OlWindowState:
        """
        Get: WindowState(self: ExplorerClass) -> OlWindowState
        Set: WindowState(self: ExplorerClass) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: ExplorerClass) """
        ...

    def AddToSelection(self, Item:object): # -> 
        """ AddToSelection(self: ExplorerClass, Item: object) """
        ...

    def add_AttachmentSelectionChange(self): # -> 
        """ add_AttachmentSelectionChange(self: ExplorerClass, : ExplorerEvents_10_AttachmentSelectionChangeEventHandler) """
        ...

    def add_BeforeItemCopy(self): # -> 
        """ add_BeforeItemCopy(self: ExplorerClass, : ExplorerEvents_10_BeforeItemCopyEventHandler) """
        ...

    def add_BeforeItemCut(self): # -> 
        """ add_BeforeItemCut(self: ExplorerClass, : ExplorerEvents_10_BeforeItemCutEventHandler) """
        ...

    def add_BeforeItemPaste(self): # -> 
        """ add_BeforeItemPaste(self: ExplorerClass, : ExplorerEvents_10_BeforeItemPasteEventHandler) """
        ...

    def add_BeforeMaximize(self): # -> 
        """ add_BeforeMaximize(self: ExplorerClass, : ExplorerEvents_10_BeforeMaximizeEventHandler) """
        ...

    def add_BeforeMinimize(self): # -> 
        """ add_BeforeMinimize(self: ExplorerClass, : ExplorerEvents_10_BeforeMinimizeEventHandler) """
        ...

    def add_BeforeMove(self): # -> 
        """ add_BeforeMove(self: ExplorerClass, : ExplorerEvents_10_BeforeMoveEventHandler) """
        ...

    def add_BeforeSize(self): # -> 
        """ add_BeforeSize(self: ExplorerClass, : ExplorerEvents_10_BeforeSizeEventHandler) """
        ...

    def add_InlineResponse(self): # -> 
        """ add_InlineResponse(self: ExplorerClass, : ExplorerEvents_10_InlineResponseEventHandler) """
        ...

    def add_InlineResponseClose(self): # -> 
        """ add_InlineResponseClose(self: ExplorerClass, : ExplorerEvents_10_InlineResponseCloseEventHandler) """
        ...

    def ClearSearch(self): # -> 
        """ ClearSearch(self: ExplorerClass) """
        ...

    def ClearSelection(self): # -> 
        """ ClearSelection(self: ExplorerClass) """
        ...

    def Close(self): # -> 
        """ Close(self: ExplorerClass) """
        ...

    def DeselectFolder(self, Folder:MAPIFolder): # -> 
        """ DeselectFolder(self: ExplorerClass, Folder: MAPIFolder) """
        ...

    def Display(self): # -> 
        """ Display(self: ExplorerClass) """
        ...

    def ExplorerEvents_Event_add_Activate(self): # -> 
        """ ExplorerEvents_Event_add_Activate(self: ExplorerClass, : ExplorerEvents_ActivateEventHandler) """
        ...

    def ExplorerEvents_Event_add_BeforeFolderSwitch(self): # -> 
        """ ExplorerEvents_Event_add_BeforeFolderSwitch(self: ExplorerClass, : ExplorerEvents_BeforeFolderSwitchEventHandler) """
        ...

    def ExplorerEvents_Event_add_BeforeViewSwitch(self): # -> 
        """ ExplorerEvents_Event_add_BeforeViewSwitch(self: ExplorerClass, : ExplorerEvents_BeforeViewSwitchEventHandler) """
        ...

    def ExplorerEvents_Event_add_Close(self): # -> 
        """ ExplorerEvents_Event_add_Close(self: ExplorerClass, : ExplorerEvents_CloseEventHandler) """
        ...

    def ExplorerEvents_Event_add_Deactivate(self): # -> 
        """ ExplorerEvents_Event_add_Deactivate(self: ExplorerClass, : ExplorerEvents_DeactivateEventHandler) """
        ...

    def ExplorerEvents_Event_add_FolderSwitch(self): # -> 
        """ ExplorerEvents_Event_add_FolderSwitch(self: ExplorerClass, : ExplorerEvents_FolderSwitchEventHandler) """
        ...

    def ExplorerEvents_Event_add_SelectionChange(self): # -> 
        """ ExplorerEvents_Event_add_SelectionChange(self: ExplorerClass, : ExplorerEvents_SelectionChangeEventHandler) """
        ...

    def ExplorerEvents_Event_add_ViewSwitch(self): # -> 
        """ ExplorerEvents_Event_add_ViewSwitch(self: ExplorerClass, : ExplorerEvents_ViewSwitchEventHandler) """
        ...

    def ExplorerEvents_Event_remove_Activate(self): # -> 
        """ ExplorerEvents_Event_remove_Activate(self: ExplorerClass, : ExplorerEvents_ActivateEventHandler) """
        ...

    def ExplorerEvents_Event_remove_BeforeFolderSwitch(self): # -> 
        """ ExplorerEvents_Event_remove_BeforeFolderSwitch(self: ExplorerClass, : ExplorerEvents_BeforeFolderSwitchEventHandler) """
        ...

    def ExplorerEvents_Event_remove_BeforeViewSwitch(self): # -> 
        """ ExplorerEvents_Event_remove_BeforeViewSwitch(self: ExplorerClass, : ExplorerEvents_BeforeViewSwitchEventHandler) """
        ...

    def ExplorerEvents_Event_remove_Close(self): # -> 
        """ ExplorerEvents_Event_remove_Close(self: ExplorerClass, : ExplorerEvents_CloseEventHandler) """
        ...

    def ExplorerEvents_Event_remove_Deactivate(self): # -> 
        """ ExplorerEvents_Event_remove_Deactivate(self: ExplorerClass, : ExplorerEvents_DeactivateEventHandler) """
        ...

    def ExplorerEvents_Event_remove_FolderSwitch(self): # -> 
        """ ExplorerEvents_Event_remove_FolderSwitch(self: ExplorerClass, : ExplorerEvents_FolderSwitchEventHandler) """
        ...

    def ExplorerEvents_Event_remove_SelectionChange(self): # -> 
        """ ExplorerEvents_Event_remove_SelectionChange(self: ExplorerClass, : ExplorerEvents_SelectionChangeEventHandler) """
        ...

    def ExplorerEvents_Event_remove_ViewSwitch(self): # -> 
        """ ExplorerEvents_Event_remove_ViewSwitch(self: ExplorerClass, : ExplorerEvents_ViewSwitchEventHandler) """
        ...

    def IsFolderSelected(self, Folder:MAPIFolder) -> bool:
        """ IsFolderSelected(self: ExplorerClass, Folder: MAPIFolder) -> bool """
        ...

    def IsItemSelectableInView(self, Item:object) -> bool:
        """ IsItemSelectableInView(self: ExplorerClass, Item: object) -> bool """
        ...

    def IsPaneVisible(self, Pane:OlPane) -> bool:
        """ IsPaneVisible(self: ExplorerClass, Pane: OlPane) -> bool """
        ...

    def RemoveFromSelection(self, Item:object): # -> 
        """ RemoveFromSelection(self: ExplorerClass, Item: object) """
        ...

    def remove_AttachmentSelectionChange(self): # -> 
        """ remove_AttachmentSelectionChange(self: ExplorerClass, : ExplorerEvents_10_AttachmentSelectionChangeEventHandler) """
        ...

    def remove_BeforeItemCopy(self): # -> 
        """ remove_BeforeItemCopy(self: ExplorerClass, : ExplorerEvents_10_BeforeItemCopyEventHandler) """
        ...

    def remove_BeforeItemCut(self): # -> 
        """ remove_BeforeItemCut(self: ExplorerClass, : ExplorerEvents_10_BeforeItemCutEventHandler) """
        ...

    def remove_BeforeItemPaste(self): # -> 
        """ remove_BeforeItemPaste(self: ExplorerClass, : ExplorerEvents_10_BeforeItemPasteEventHandler) """
        ...

    def remove_BeforeMaximize(self): # -> 
        """ remove_BeforeMaximize(self: ExplorerClass, : ExplorerEvents_10_BeforeMaximizeEventHandler) """
        ...

    def remove_BeforeMinimize(self): # -> 
        """ remove_BeforeMinimize(self: ExplorerClass, : ExplorerEvents_10_BeforeMinimizeEventHandler) """
        ...

    def remove_BeforeMove(self): # -> 
        """ remove_BeforeMove(self: ExplorerClass, : ExplorerEvents_10_BeforeMoveEventHandler) """
        ...

    def remove_BeforeSize(self): # -> 
        """ remove_BeforeSize(self: ExplorerClass, : ExplorerEvents_10_BeforeSizeEventHandler) """
        ...

    def remove_InlineResponse(self): # -> 
        """ remove_InlineResponse(self: ExplorerClass, : ExplorerEvents_10_InlineResponseEventHandler) """
        ...

    def remove_InlineResponseClose(self): # -> 
        """ remove_InlineResponseClose(self: ExplorerClass, : ExplorerEvents_10_InlineResponseCloseEventHandler) """
        ...

    def Search(self, Query:str, SearchScope:OlSearchScope): # -> 
        """ Search(self: ExplorerClass, Query: str, SearchScope: OlSearchScope) """
        ...

    def SelectAllItems(self): # -> 
        """ SelectAllItems(self: ExplorerClass) """
        ...

    def SelectFolder(self, Folder:MAPIFolder): # -> 
        """ SelectFolder(self: ExplorerClass, Folder: MAPIFolder) """
        ...

    def ShowPane(self, Pane:OlPane, Visible:bool): # -> 
        """ ShowPane(self: ExplorerClass, Pane: OlPane, Visible: bool) """
        ...

    AttachmentSelectionChange = ...
    BeforeFolderSwitch = ...
    BeforeItemCopy = ...
    BeforeItemCut = ...
    BeforeItemPaste = ...
    BeforeMaximize = ...
    BeforeMinimize = ...
    BeforeMove = ...
    BeforeSize = ...
    BeforeViewSwitch = ...
    Deactivate = ...
    ExplorerEvents_10_Event_Activate = ...
    ExplorerEvents_10_Event_Close = ...
    ExplorerEvents_Event_Activate = ...
    ExplorerEvents_Event_BeforeFolderSwitch = ...
    ExplorerEvents_Event_BeforeViewSwitch = ...
    ExplorerEvents_Event_Close = ...
    ExplorerEvents_Event_Deactivate = ...
    ExplorerEvents_Event_FolderSwitch = ...
    ExplorerEvents_Event_SelectionChange = ...
    ExplorerEvents_Event_ViewSwitch = ...
    FolderSwitch = ...
    InlineResponse = ...
    InlineResponseClose = ...
    SelectionChange = ...
    ViewSwitch = ...


class ExplorerEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Activate(self): # -> 
        """ Activate(self: ExplorerEvents) """
        ...

    def BeforeFolderSwitch(self, NewFolder, Cancel) -> bool:
        """ BeforeFolderSwitch(self: ExplorerEvents, NewFolder: object) -> bool """
        ...

    def BeforeViewSwitch(self, NewView, Cancel) -> bool:
        """ BeforeViewSwitch(self: ExplorerEvents, NewView: object) -> bool """
        ...

    def Close(self): # -> 
        """ Close(self: ExplorerEvents) """
        ...

    def Deactivate(self): # -> 
        """ Deactivate(self: ExplorerEvents) """
        ...

    def FolderSwitch(self): # -> 
        """ FolderSwitch(self: ExplorerEvents) """
        ...

    def SelectionChange(self): # -> 
        """ SelectionChange(self: ExplorerEvents) """
        ...

    def ViewSwitch(self): # -> 
        """ ViewSwitch(self: ExplorerEvents) """
        ...


class ExplorerEvents_10: # skipped bases: <type 'object'>
    """ no doc """
    def Activate(self): # -> 
        """ Activate(self: ExplorerEvents_10) """
        ...

    def AttachmentSelectionChange(self): # -> 
        """ AttachmentSelectionChange(self: ExplorerEvents_10) """
        ...

    def BeforeFolderSwitch(self, NewFolder, Cancel) -> bool:
        """ BeforeFolderSwitch(self: ExplorerEvents_10, NewFolder: object) -> bool """
        ...

    def BeforeItemCopy(self, Cancel) -> bool:
        """ BeforeItemCopy(self: ExplorerEvents_10) -> bool """
        ...

    def BeforeItemCut(self, Cancel) -> bool:
        """ BeforeItemCut(self: ExplorerEvents_10) -> bool """
        ...

    def BeforeItemPaste(self, ClipboardContent, Target, Cancel) -> Tuple_[object, bool]:
        """ BeforeItemPaste(self: ExplorerEvents_10, ClipboardContent: object, Target: MAPIFolder) -> (object, bool) """
        ...

    def BeforeMaximize(self, Cancel) -> bool:
        """ BeforeMaximize(self: ExplorerEvents_10) -> bool """
        ...

    def BeforeMinimize(self, Cancel) -> bool:
        """ BeforeMinimize(self: ExplorerEvents_10) -> bool """
        ...

    def BeforeMove(self, Cancel) -> bool:
        """ BeforeMove(self: ExplorerEvents_10) -> bool """
        ...

    def BeforeSize(self, Cancel) -> bool:
        """ BeforeSize(self: ExplorerEvents_10) -> bool """
        ...

    def BeforeViewSwitch(self, NewView, Cancel) -> bool:
        """ BeforeViewSwitch(self: ExplorerEvents_10, NewView: object) -> bool """
        ...

    def Close(self): # -> 
        """ Close(self: ExplorerEvents_10) """
        ...

    def Deactivate(self): # -> 
        """ Deactivate(self: ExplorerEvents_10) """
        ...

    def FolderSwitch(self): # -> 
        """ FolderSwitch(self: ExplorerEvents_10) """
        ...

    def InlineResponse(self, Item:object): # -> 
        """ InlineResponse(self: ExplorerEvents_10, Item: object) """
        ...

    def InlineResponseClose(self): # -> 
        """ InlineResponseClose(self: ExplorerEvents_10) """
        ...

    def SelectionChange(self): # -> 
        """ SelectionChange(self: ExplorerEvents_10) """
        ...

    def ViewSwitch(self): # -> 
        """ ViewSwitch(self: ExplorerEvents_10) """
        ...


class ExplorerEvents_10_ActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_ActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_10_ActivateEventHandler) """
        ...


class ExplorerEvents_10_AttachmentSelectionChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_AttachmentSelectionChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_10_AttachmentSelectionChangeEventHandler) """
        ...


class ExplorerEvents_10_BeforeFolderSwitchEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_BeforeFolderSwitchEventHandler(: object, : UIntPtr) """
    def Invoke(self, NewFolder, Cancel) -> bool:
        """ Invoke(self: ExplorerEvents_10_BeforeFolderSwitchEventHandler, NewFolder: object) -> bool """
        ...


class ExplorerEvents_10_BeforeItemCopyEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_BeforeItemCopyEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ExplorerEvents_10_BeforeItemCopyEventHandler) -> bool """
        ...


class ExplorerEvents_10_BeforeItemCutEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_BeforeItemCutEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ExplorerEvents_10_BeforeItemCutEventHandler) -> bool """
        ...


class ExplorerEvents_10_BeforeItemPasteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_BeforeItemPasteEventHandler(: object, : UIntPtr) """
    def Invoke(self, ClipboardContent, Target, Cancel) -> Tuple_[object, bool]:
        """ Invoke(self: ExplorerEvents_10_BeforeItemPasteEventHandler, ClipboardContent: object, Target: MAPIFolder) -> (object, bool) """
        ...


class ExplorerEvents_10_BeforeMaximizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_BeforeMaximizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ExplorerEvents_10_BeforeMaximizeEventHandler) -> bool """
        ...


class ExplorerEvents_10_BeforeMinimizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_BeforeMinimizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ExplorerEvents_10_BeforeMinimizeEventHandler) -> bool """
        ...


class ExplorerEvents_10_BeforeMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_BeforeMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ExplorerEvents_10_BeforeMoveEventHandler) -> bool """
        ...


class ExplorerEvents_10_BeforeSizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_BeforeSizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ExplorerEvents_10_BeforeSizeEventHandler) -> bool """
        ...


class ExplorerEvents_10_BeforeViewSwitchEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_BeforeViewSwitchEventHandler(: object, : UIntPtr) """
    def Invoke(self, NewView, Cancel) -> bool:
        """ Invoke(self: ExplorerEvents_10_BeforeViewSwitchEventHandler, NewView: object) -> bool """
        ...


class ExplorerEvents_10_CloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_CloseEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_10_CloseEventHandler) """
        ...


class ExplorerEvents_10_DeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_DeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_10_DeactivateEventHandler) """
        ...


class ExplorerEvents_10_FolderSwitchEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_FolderSwitchEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_10_FolderSwitchEventHandler) """
        ...


class ExplorerEvents_10_InlineResponseCloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_InlineResponseCloseEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_10_InlineResponseCloseEventHandler) """
        ...


class ExplorerEvents_10_InlineResponseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_InlineResponseEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item:object): # -> 
        """ Invoke(self: ExplorerEvents_10_InlineResponseEventHandler, Item: object) """
        ...


class ExplorerEvents_10_SelectionChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_SelectionChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_10_SelectionChangeEventHandler) """
        ...


class ExplorerEvents_10_SinkHelper(ExplorerEvents_10): # skipped bases: <type 'object'>
    """ no doc """
    m_ActivateDelegate = ...
    m_AttachmentSelectionChangeDelegate = ...
    m_BeforeFolderSwitchDelegate = ...
    m_BeforeItemCopyDelegate = ...
    m_BeforeItemCutDelegate = ...
    m_BeforeItemPasteDelegate = ...
    m_BeforeMaximizeDelegate = ...
    m_BeforeMinimizeDelegate = ...
    m_BeforeMoveDelegate = ...
    m_BeforeSizeDelegate = ...
    m_BeforeViewSwitchDelegate = ...
    m_CloseDelegate = ...
    m_DeactivateDelegate = ...
    m_dwCookie = ...
    m_FolderSwitchDelegate = ...
    m_InlineResponseCloseDelegate = ...
    m_InlineResponseDelegate = ...
    m_SelectionChangeDelegate = ...
    m_ViewSwitchDelegate = ...


class ExplorerEvents_10_ViewSwitchEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_10_ViewSwitchEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_10_ViewSwitchEventHandler) """
        ...


class ExplorerEvents_ActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_ActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_ActivateEventHandler) """
        ...


class ExplorerEvents_BeforeFolderSwitchEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_BeforeFolderSwitchEventHandler(: object, : UIntPtr) """
    def Invoke(self, NewFolder, Cancel) -> bool:
        """ Invoke(self: ExplorerEvents_BeforeFolderSwitchEventHandler, NewFolder: object) -> bool """
        ...


class ExplorerEvents_BeforeViewSwitchEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_BeforeViewSwitchEventHandler(: object, : UIntPtr) """
    def Invoke(self, NewView, Cancel) -> bool:
        """ Invoke(self: ExplorerEvents_BeforeViewSwitchEventHandler, NewView: object) -> bool """
        ...


class ExplorerEvents_CloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_CloseEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_CloseEventHandler) """
        ...


class ExplorerEvents_DeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_DeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_DeactivateEventHandler) """
        ...


class ExplorerEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Activate(self): # -> 
        """ add_Activate(self: ExplorerEvents_Event, : ExplorerEvents_ActivateEventHandler) """
        ...

    def add_BeforeFolderSwitch(self): # -> 
        """ add_BeforeFolderSwitch(self: ExplorerEvents_Event, : ExplorerEvents_BeforeFolderSwitchEventHandler) """
        ...

    def add_BeforeViewSwitch(self): # -> 
        """ add_BeforeViewSwitch(self: ExplorerEvents_Event, : ExplorerEvents_BeforeViewSwitchEventHandler) """
        ...

    def add_Close(self): # -> 
        """ add_Close(self: ExplorerEvents_Event, : ExplorerEvents_CloseEventHandler) """
        ...

    def add_Deactivate(self): # -> 
        """ add_Deactivate(self: ExplorerEvents_Event, : ExplorerEvents_DeactivateEventHandler) """
        ...

    def add_FolderSwitch(self): # -> 
        """ add_FolderSwitch(self: ExplorerEvents_Event, : ExplorerEvents_FolderSwitchEventHandler) """
        ...

    def add_SelectionChange(self): # -> 
        """ add_SelectionChange(self: ExplorerEvents_Event, : ExplorerEvents_SelectionChangeEventHandler) """
        ...

    def add_ViewSwitch(self): # -> 
        """ add_ViewSwitch(self: ExplorerEvents_Event, : ExplorerEvents_ViewSwitchEventHandler) """
        ...

    def remove_Activate(self): # -> 
        """ remove_Activate(self: ExplorerEvents_Event, : ExplorerEvents_ActivateEventHandler) """
        ...

    def remove_BeforeFolderSwitch(self): # -> 
        """ remove_BeforeFolderSwitch(self: ExplorerEvents_Event, : ExplorerEvents_BeforeFolderSwitchEventHandler) """
        ...

    def remove_BeforeViewSwitch(self): # -> 
        """ remove_BeforeViewSwitch(self: ExplorerEvents_Event, : ExplorerEvents_BeforeViewSwitchEventHandler) """
        ...

    def remove_Close(self): # -> 
        """ remove_Close(self: ExplorerEvents_Event, : ExplorerEvents_CloseEventHandler) """
        ...

    def remove_Deactivate(self): # -> 
        """ remove_Deactivate(self: ExplorerEvents_Event, : ExplorerEvents_DeactivateEventHandler) """
        ...

    def remove_FolderSwitch(self): # -> 
        """ remove_FolderSwitch(self: ExplorerEvents_Event, : ExplorerEvents_FolderSwitchEventHandler) """
        ...

    def remove_SelectionChange(self): # -> 
        """ remove_SelectionChange(self: ExplorerEvents_Event, : ExplorerEvents_SelectionChangeEventHandler) """
        ...

    def remove_ViewSwitch(self): # -> 
        """ remove_ViewSwitch(self: ExplorerEvents_Event, : ExplorerEvents_ViewSwitchEventHandler) """
        ...

    Activate = ...
    BeforeFolderSwitch = ...
    BeforeViewSwitch = ...
    Close = ...
    Deactivate = ...
    FolderSwitch = ...
    SelectionChange = ...
    ViewSwitch = ...


class ExplorerEvents_FolderSwitchEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_FolderSwitchEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_FolderSwitchEventHandler) """
        ...


class ExplorerEvents_SelectionChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_SelectionChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_SelectionChangeEventHandler) """
        ...


class ExplorerEvents_SinkHelper(ExplorerEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_ActivateDelegate = ...
    m_BeforeFolderSwitchDelegate = ...
    m_BeforeViewSwitchDelegate = ...
    m_CloseDelegate = ...
    m_DeactivateDelegate = ...
    m_dwCookie = ...
    m_FolderSwitchDelegate = ...
    m_SelectionChangeDelegate = ...
    m_ViewSwitchDelegate = ...


class ExplorerEvents_ViewSwitchEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorerEvents_ViewSwitchEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ExplorerEvents_ViewSwitchEventHandler) """
        ...


class ExplorersEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_NewExplorer(self): # -> 
        """ add_NewExplorer(self: ExplorersEvents_Event, : ExplorersEvents_NewExplorerEventHandler) """
        ...

    def remove_NewExplorer(self): # -> 
        """ remove_NewExplorer(self: ExplorersEvents_Event, : ExplorersEvents_NewExplorerEventHandler) """
        ...

    NewExplorer = ...


class _Explorers(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Explorers) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Explorers) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Explorers) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Explorers) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Explorers) -> NameSpace """
        ...


    def Add(self, Folder:object, DisplayMode:OlFolderDisplayMode) -> Explorer:
        """ Add(self: _Explorers, Folder: object, DisplayMode: OlFolderDisplayMode) -> Explorer """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Explorers(ExplorersEvents_Event, _Explorers): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class ExplorersClass(__ComObject, Explorers): # skipped bases: <type 'ExplorersEvents_Event'>, <type 'IEnumerable'>, <type '_Explorers'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ExplorersClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ExplorersClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ExplorersClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ExplorersClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ExplorersClass) -> NameSpace """
        ...


    def Add(self, Folder:object, DisplayMode:OlFolderDisplayMode) -> Explorer:
        """ Add(self: ExplorersClass, Folder: object, DisplayMode: OlFolderDisplayMode) -> Explorer """
        ...

    def add_NewExplorer(self): # -> 
        """ add_NewExplorer(self: ExplorersClass, : ExplorersEvents_NewExplorerEventHandler) """
        ...

    def remove_NewExplorer(self): # -> 
        """ remove_NewExplorer(self: ExplorersClass, : ExplorersEvents_NewExplorerEventHandler) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    NewExplorer = ...


class ExplorersEvents: # skipped bases: <type 'object'>
    """ no doc """
    def NewExplorer(self, Explorer:Explorer): # -> 
        """ NewExplorer(self: ExplorersEvents, Explorer: Explorer) """
        ...


class ExplorersEvents_NewExplorerEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ExplorersEvents_NewExplorerEventHandler(: object, : UIntPtr) """
    def Invoke(self, Explorer:Explorer): # -> 
        """ Invoke(self: ExplorersEvents_NewExplorerEventHandler, Explorer: Explorer) """
        ...


class ExplorersEvents_SinkHelper(ExplorersEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_NewExplorerDelegate = ...


class MAPIFolderEvents_12_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_BeforeFolderMove(self): # -> 
        """ add_BeforeFolderMove(self: MAPIFolderEvents_12_Event, : MAPIFolderEvents_12_BeforeFolderMoveEventHandler) """
        ...

    def add_BeforeItemMove(self): # -> 
        """ add_BeforeItemMove(self: MAPIFolderEvents_12_Event, : MAPIFolderEvents_12_BeforeItemMoveEventHandler) """
        ...

    def remove_BeforeFolderMove(self): # -> 
        """ remove_BeforeFolderMove(self: MAPIFolderEvents_12_Event, : MAPIFolderEvents_12_BeforeFolderMoveEventHandler) """
        ...

    def remove_BeforeItemMove(self): # -> 
        """ remove_BeforeItemMove(self: MAPIFolderEvents_12_Event, : MAPIFolderEvents_12_BeforeItemMoveEventHandler) """
        ...

    BeforeFolderMove = ...
    BeforeItemMove = ...


class Folder(MAPIFolder, MAPIFolderEvents_12_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class FolderClass(__ComObject, Folder): # skipped bases: <type 'MAPIFolderEvents_12_Event'>, <type 'MAPIFolder'>, <type 'object'>
    """ no doc """
    @property
    def AddressBookName(self) -> str:
        """
        Get: AddressBookName(self: FolderClass) -> str
        Set: AddressBookName(self: FolderClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: FolderClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: FolderClass) -> OlObjectClass """
        ...

    @property
    def CurrentView(self) -> View:
        """ Get: CurrentView(self: FolderClass) -> View """
        ...

    @property
    def CustomViewsOnly(self) -> bool:
        """
        Get: CustomViewsOnly(self: FolderClass) -> bool
        Set: CustomViewsOnly(self: FolderClass) = value
        """
        ...

    @property
    def DefaultItemType(self) -> OlItemType:
        """ Get: DefaultItemType(self: FolderClass) -> OlItemType """
        ...

    @property
    def DefaultMessageClass(self) -> str:
        """ Get: DefaultMessageClass(self: FolderClass) -> str """
        ...

    @property
    def Description(self) -> str:
        """
        Get: Description(self: FolderClass) -> str
        Set: Description(self: FolderClass) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: FolderClass) -> str """
        ...

    @property
    def FolderPath(self) -> str:
        """ Get: FolderPath(self: FolderClass) -> str """
        ...

    @property
    def Folders(self) -> Folders:
        """ Get: Folders(self: FolderClass) -> Folders """
        ...

    @property
    def FullFolderPath(self) -> str:
        """ Get: FullFolderPath(self: FolderClass) -> str """
        ...

    @property
    def InAppFolderSyncObject(self) -> bool:
        """
        Get: InAppFolderSyncObject(self: FolderClass) -> bool
        Set: InAppFolderSyncObject(self: FolderClass) = value
        """
        ...

    @property
    def IsSharePointFolder(self) -> bool:
        """ Get: IsSharePointFolder(self: FolderClass) -> bool """
        ...

    @property
    def Items(self) -> Items:
        """ Get: Items(self: FolderClass) -> Items """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: FolderClass) -> object """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: FolderClass) -> str
        Set: Name(self: FolderClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FolderClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: FolderClass) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: FolderClass) -> NameSpace """
        ...

    @property
    def ShowAsOutlookAB(self) -> bool:
        """
        Get: ShowAsOutlookAB(self: FolderClass) -> bool
        Set: ShowAsOutlookAB(self: FolderClass) = value
        """
        ...

    @property
    def ShowItemCount(self) -> OlShowItemCount:
        """
        Get: ShowItemCount(self: FolderClass) -> OlShowItemCount
        Set: ShowItemCount(self: FolderClass) = value
        """
        ...

    @property
    def Store(self) -> Store:
        """ Get: Store(self: FolderClass) -> Store """
        ...

    @property
    def StoreID(self) -> str:
        """ Get: StoreID(self: FolderClass) -> str """
        ...

    @property
    def UnReadItemCount(self) -> int:
        """ Get: UnReadItemCount(self: FolderClass) -> int """
        ...

    @property
    def UserDefinedProperties(self) -> UserDefinedProperties:
        """ Get: UserDefinedProperties(self: FolderClass) -> UserDefinedProperties """
        ...

    @property
    def UserPermissions(self) -> object:
        """ Get: UserPermissions(self: FolderClass) -> object """
        ...

    @property
    def Views(self) -> Views:
        """ Get: Views(self: FolderClass) -> Views """
        ...

    @property
    def WebViewAllowNavigation(self) -> bool:
        """
        Get: WebViewAllowNavigation(self: FolderClass) -> bool
        Set: WebViewAllowNavigation(self: FolderClass) = value
        """
        ...

    @property
    def WebViewOn(self) -> bool:
        """
        Get: WebViewOn(self: FolderClass) -> bool
        Set: WebViewOn(self: FolderClass) = value
        """
        ...

    @property
    def WebViewURL(self) -> str:
        """
        Get: WebViewURL(self: FolderClass) -> str
        Set: WebViewURL(self: FolderClass) = value
        """
        ...


    def AddToFavorites(self, fNoUI:object, Name:object): # -> 
        """ AddToFavorites(self: FolderClass, fNoUI: object, Name: object) """
        ...

    def AddToPFFavorites(self): # -> 
        """ AddToPFFavorites(self: FolderClass) """
        ...

    def add_BeforeFolderMove(self): # -> 
        """ add_BeforeFolderMove(self: FolderClass, : MAPIFolderEvents_12_BeforeFolderMoveEventHandler) """
        ...

    def add_BeforeItemMove(self): # -> 
        """ add_BeforeItemMove(self: FolderClass, : MAPIFolderEvents_12_BeforeItemMoveEventHandler) """
        ...

    def CopyTo(self, DestinationFolder:MAPIFolder) -> MAPIFolder:
        """ CopyTo(self: FolderClass, DestinationFolder: MAPIFolder) -> MAPIFolder """
        ...

    def Delete(self): # -> 
        """ Delete(self: FolderClass) """
        ...

    def Display(self): # -> 
        """ Display(self: FolderClass) """
        ...

    def GetCalendarExporter(self) -> CalendarSharing:
        """ GetCalendarExporter(self: FolderClass) -> CalendarSharing """
        ...

    def GetCustomIcon(self): # -> StdPicture
        """ GetCustomIcon(self: FolderClass) -> StdPicture """
        ...

    def GetExplorer(self, DisplayMode:object) -> Explorer:
        """ GetExplorer(self: FolderClass, DisplayMode: object) -> Explorer """
        ...

    def GetStorage(self, StorageIdentifier:str, StorageIdentifierType:OlStorageIdentifierType) -> StorageItem:
        """ GetStorage(self: FolderClass, StorageIdentifier: str, StorageIdentifierType: OlStorageIdentifierType) -> StorageItem """
        ...

    def GetTable(self, Filter:object, TableContents:object) -> Table:
        """ GetTable(self: FolderClass, Filter: object, TableContents: object) -> Table """
        ...

    def MoveTo(self, DestinationFolder:MAPIFolder): # -> 
        """ MoveTo(self: FolderClass, DestinationFolder: MAPIFolder) """
        ...

    def remove_BeforeFolderMove(self): # -> 
        """ remove_BeforeFolderMove(self: FolderClass, : MAPIFolderEvents_12_BeforeFolderMoveEventHandler) """
        ...

    def remove_BeforeItemMove(self): # -> 
        """ remove_BeforeItemMove(self: FolderClass, : MAPIFolderEvents_12_BeforeItemMoveEventHandler) """
        ...

    def SetCustomIcon(self, Picture): # ->  # Not found arg types: {'Picture': 'StdPicture'}
        """ SetCustomIcon(self: FolderClass, Picture: StdPicture) """
        ...

    BeforeFolderMove = ...
    BeforeItemMove = ...


class FoldersEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_FolderAdd(self): # -> 
        """ add_FolderAdd(self: FoldersEvents_Event, : FoldersEvents_FolderAddEventHandler) """
        ...

    def add_FolderChange(self): # -> 
        """ add_FolderChange(self: FoldersEvents_Event, : FoldersEvents_FolderChangeEventHandler) """
        ...

    def add_FolderRemove(self): # -> 
        """ add_FolderRemove(self: FoldersEvents_Event, : FoldersEvents_FolderRemoveEventHandler) """
        ...

    def remove_FolderAdd(self): # -> 
        """ remove_FolderAdd(self: FoldersEvents_Event, : FoldersEvents_FolderAddEventHandler) """
        ...

    def remove_FolderChange(self): # -> 
        """ remove_FolderChange(self: FoldersEvents_Event, : FoldersEvents_FolderChangeEventHandler) """
        ...

    def remove_FolderRemove(self): # -> 
        """ remove_FolderRemove(self: FoldersEvents_Event, : FoldersEvents_FolderRemoveEventHandler) """
        ...

    FolderAdd = ...
    FolderChange = ...
    FolderRemove = ...


class _Folders(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Folders) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Folders) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Folders) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Folders) -> object """
        ...

    @property
    def RawTable(self) -> object:
        """ Get: RawTable(self: _Folders) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Folders) -> NameSpace """
        ...


    def Add(self, Name:str, Type:object) -> MAPIFolder:
        """ Add(self: _Folders, Name: str, Type: object) -> MAPIFolder """
        ...

    def GetFirst(self) -> MAPIFolder:
        """ GetFirst(self: _Folders) -> MAPIFolder """
        ...

    def GetLast(self) -> MAPIFolder:
        """ GetLast(self: _Folders) -> MAPIFolder """
        ...

    def GetNext(self) -> MAPIFolder:
        """ GetNext(self: _Folders) -> MAPIFolder """
        ...

    def GetPrevious(self) -> MAPIFolder:
        """ GetPrevious(self: _Folders) -> MAPIFolder """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: _Folders, Index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Folders(_Folders, FoldersEvents_Event): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class FoldersClass(Folders, __ComObject): # skipped bases: <type 'FoldersEvents_Event'>, <type 'IEnumerable'>, <type '_Folders'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FoldersClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: FoldersClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: FoldersClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FoldersClass) -> object """
        ...

    @property
    def RawTable(self) -> object:
        """ Get: RawTable(self: FoldersClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: FoldersClass) -> NameSpace """
        ...


    def Add(self, Name:str, Type:object) -> MAPIFolder:
        """ Add(self: FoldersClass, Name: str, Type: object) -> MAPIFolder """
        ...

    def add_FolderAdd(self): # -> 
        """ add_FolderAdd(self: FoldersClass, : FoldersEvents_FolderAddEventHandler) """
        ...

    def add_FolderChange(self): # -> 
        """ add_FolderChange(self: FoldersClass, : FoldersEvents_FolderChangeEventHandler) """
        ...

    def add_FolderRemove(self): # -> 
        """ add_FolderRemove(self: FoldersClass, : FoldersEvents_FolderRemoveEventHandler) """
        ...

    def GetFirst(self) -> MAPIFolder:
        """ GetFirst(self: FoldersClass) -> MAPIFolder """
        ...

    def GetLast(self) -> MAPIFolder:
        """ GetLast(self: FoldersClass) -> MAPIFolder """
        ...

    def GetNext(self) -> MAPIFolder:
        """ GetNext(self: FoldersClass) -> MAPIFolder """
        ...

    def GetPrevious(self) -> MAPIFolder:
        """ GetPrevious(self: FoldersClass) -> MAPIFolder """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: FoldersClass, Index: int) """
        ...

    def remove_FolderAdd(self): # -> 
        """ remove_FolderAdd(self: FoldersClass, : FoldersEvents_FolderAddEventHandler) """
        ...

    def remove_FolderChange(self): # -> 
        """ remove_FolderChange(self: FoldersClass, : FoldersEvents_FolderChangeEventHandler) """
        ...

    def remove_FolderRemove(self): # -> 
        """ remove_FolderRemove(self: FoldersClass, : FoldersEvents_FolderRemoveEventHandler) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    FolderAdd = ...
    FolderChange = ...
    FolderRemove = ...


class FoldersEvents: # skipped bases: <type 'object'>
    """ no doc """
    def FolderAdd(self, Folder:MAPIFolder): # -> 
        """ FolderAdd(self: FoldersEvents, Folder: MAPIFolder) """
        ...

    def FolderChange(self, Folder:MAPIFolder): # -> 
        """ FolderChange(self: FoldersEvents, Folder: MAPIFolder) """
        ...

    def FolderRemove(self): # -> 
        """ FolderRemove(self: FoldersEvents) """
        ...


class FoldersEvents_FolderAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ FoldersEvents_FolderAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Folder:MAPIFolder): # -> 
        """ Invoke(self: FoldersEvents_FolderAddEventHandler, Folder: MAPIFolder) """
        ...


class FoldersEvents_FolderChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ FoldersEvents_FolderChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Folder:MAPIFolder): # -> 
        """ Invoke(self: FoldersEvents_FolderChangeEventHandler, Folder: MAPIFolder) """
        ...


class FoldersEvents_FolderRemoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ FoldersEvents_FolderRemoveEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: FoldersEvents_FolderRemoveEventHandler) """
        ...


class FoldersEvents_SinkHelper(FoldersEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_FolderAddDelegate = ...
    m_FolderChangeDelegate = ...
    m_FolderRemoveDelegate = ...


class FormDescription: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FormDescription) -> Application """
        ...

    @property
    def Category(self) -> str:
        """
        Get: Category(self: FormDescription) -> str
        Set: Category(self: FormDescription) = value
        """
        ...

    @property
    def CategorySub(self) -> str:
        """
        Get: CategorySub(self: FormDescription) -> str
        Set: CategorySub(self: FormDescription) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: FormDescription) -> OlObjectClass """
        ...

    @property
    def Comment(self) -> str:
        """
        Get: Comment(self: FormDescription) -> str
        Set: Comment(self: FormDescription) = value
        """
        ...

    @property
    def ContactName(self) -> str:
        """
        Get: ContactName(self: FormDescription) -> str
        Set: ContactName(self: FormDescription) = value
        """
        ...

    @property
    def DisplayName(self) -> str:
        """
        Get: DisplayName(self: FormDescription) -> str
        Set: DisplayName(self: FormDescription) = value
        """
        ...

    @property
    def Hidden(self) -> bool:
        """
        Get: Hidden(self: FormDescription) -> bool
        Set: Hidden(self: FormDescription) = value
        """
        ...

    @property
    def Icon(self) -> str:
        """
        Get: Icon(self: FormDescription) -> str
        Set: Icon(self: FormDescription) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: FormDescription) -> bool
        Set: Locked(self: FormDescription) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """ Get: MessageClass(self: FormDescription) -> str """
        ...

    @property
    def MiniIcon(self) -> str:
        """
        Get: MiniIcon(self: FormDescription) -> str
        Set: MiniIcon(self: FormDescription) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: FormDescription) -> str
        Set: Name(self: FormDescription) = value
        """
        ...

    @property
    def Number(self) -> str:
        """
        Get: Number(self: FormDescription) -> str
        Set: Number(self: FormDescription) = value
        """
        ...

    @property
    def OneOff(self) -> bool:
        """
        Get: OneOff(self: FormDescription) -> bool
        Set: OneOff(self: FormDescription) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FormDescription) -> object """
        ...

    @property
    def Password(self) -> str:
        """
        Get: Password(self: FormDescription) -> str
        Set: Password(self: FormDescription) = value
        """
        ...

    @property
    def ScriptText(self) -> str:
        """ Get: ScriptText(self: FormDescription) -> str """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: FormDescription) -> NameSpace """
        ...

    @property
    def Template(self) -> str:
        """
        Get: Template(self: FormDescription) -> str
        Set: Template(self: FormDescription) = value
        """
        ...

    @property
    def UseWordMail(self) -> bool:
        """
        Get: UseWordMail(self: FormDescription) -> bool
        Set: UseWordMail(self: FormDescription) = value
        """
        ...

    @property
    def Version(self) -> str:
        """
        Get: Version(self: FormDescription) -> str
        Set: Version(self: FormDescription) = value
        """
        ...


    def PublishForm(self, Registry:OlFormRegistry, Folder:object): # -> 
        """ PublishForm(self: FormDescription, Registry: OlFormRegistry, Folder: object) """
        ...


class _FormNameRuleCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _FormNameRuleCondition) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _FormNameRuleCondition) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: _FormNameRuleCondition) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _FormNameRuleCondition) -> bool
        Set: Enabled(self: _FormNameRuleCondition) = value
        """
        ...

    @property
    def FormName(self) -> object:
        """
        Get: FormName(self: _FormNameRuleCondition) -> object
        Set: FormName(self: _FormNameRuleCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _FormNameRuleCondition) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _FormNameRuleCondition) -> NameSpace """
        ...



class FormNameRuleCondition(_FormNameRuleCondition): # skipped bases: <type 'object'>
    """ no doc """
    pass

class FormNameRuleConditionClass(__ComObject, FormNameRuleCondition): # skipped bases: <type '_FormNameRuleCondition'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FormNameRuleConditionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: FormNameRuleConditionClass) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: FormNameRuleConditionClass) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: FormNameRuleConditionClass) -> bool
        Set: Enabled(self: FormNameRuleConditionClass) = value
        """
        ...

    @property
    def FormName(self) -> object:
        """
        Get: FormName(self: FormNameRuleConditionClass) -> object
        Set: FormName(self: FormNameRuleConditionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FormNameRuleConditionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: FormNameRuleConditionClass) -> NameSpace """
        ...



class FormRegionEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Close(self): # -> 
        """ add_Close(self: FormRegionEvents_Event, : FormRegionEvents_CloseEventHandler) """
        ...

    def add_Expanded(self): # -> 
        """ add_Expanded(self: FormRegionEvents_Event, : FormRegionEvents_ExpandedEventHandler) """
        ...

    def remove_Close(self): # -> 
        """ remove_Close(self: FormRegionEvents_Event, : FormRegionEvents_CloseEventHandler) """
        ...

    def remove_Expanded(self): # -> 
        """ remove_Expanded(self: FormRegionEvents_Event, : FormRegionEvents_ExpandedEventHandler) """
        ...

    Close = ...
    Expanded = ...


class _FormRegion: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _FormRegion) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _FormRegion) -> OlObjectClass """
        ...

    @property
    def Detail(self) -> str:
        """
        Get: Detail(self: _FormRegion) -> str
        Set: Detail(self: _FormRegion) = value
        """
        ...

    @property
    def DisplayName(self) -> str:
        """ Get: DisplayName(self: _FormRegion) -> str """
        ...

    @property
    def EnableAutoLayout(self) -> bool:
        """
        Get: EnableAutoLayout(self: _FormRegion) -> bool
        Set: EnableAutoLayout(self: _FormRegion) = value
        """
        ...

    @property
    def Form(self) -> object:
        """ Get: Form(self: _FormRegion) -> object """
        ...

    @property
    def FormRegionMode(self) -> OlFormRegionMode:
        """ Get: FormRegionMode(self: _FormRegion) -> OlFormRegionMode """
        ...

    @property
    def Inspector(self) -> Inspector:
        """ Get: Inspector(self: _FormRegion) -> Inspector """
        ...

    @property
    def InternalName(self) -> str:
        """ Get: InternalName(self: _FormRegion) -> str """
        ...

    @property
    def IsExpanded(self) -> bool:
        """ Get: IsExpanded(self: _FormRegion) -> bool """
        ...

    @property
    def Item(self) -> object:
        """ Get: Item(self: _FormRegion) -> object """
        ...

    @property
    def Language(self) -> int:
        """ Get: Language(self: _FormRegion) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _FormRegion) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _FormRegion) -> NameSpace """
        ...

    @property
    def SuppressControlReplacement(self) -> bool:
        """
        Get: SuppressControlReplacement(self: _FormRegion) -> bool
        Set: SuppressControlReplacement(self: _FormRegion) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _FormRegion) -> bool
        Set: Visible(self: _FormRegion) = value
        """
        ...


    def Reflow(self): # -> 
        """ Reflow(self: _FormRegion) """
        ...

    def Select(self): # -> 
        """ Select(self: _FormRegion) """
        ...

    def SetControlItemProperty(self, Control:object, PropertyName:str): # -> 
        """ SetControlItemProperty(self: _FormRegion, Control: object, PropertyName: str) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class FormRegion(_FormRegion, FormRegionEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class FormRegionClass(FormRegion, __ComObject): # skipped bases: <type 'FormRegionEvents_Event'>, <type '_FormRegion'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FormRegionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: FormRegionClass) -> OlObjectClass """
        ...

    @property
    def Detail(self) -> str:
        """
        Get: Detail(self: FormRegionClass) -> str
        Set: Detail(self: FormRegionClass) = value
        """
        ...

    @property
    def DisplayName(self) -> str:
        """ Get: DisplayName(self: FormRegionClass) -> str """
        ...

    @property
    def EnableAutoLayout(self) -> bool:
        """
        Get: EnableAutoLayout(self: FormRegionClass) -> bool
        Set: EnableAutoLayout(self: FormRegionClass) = value
        """
        ...

    @property
    def Form(self) -> object:
        """ Get: Form(self: FormRegionClass) -> object """
        ...

    @property
    def FormRegionMode(self) -> OlFormRegionMode:
        """ Get: FormRegionMode(self: FormRegionClass) -> OlFormRegionMode """
        ...

    @property
    def Inspector(self) -> Inspector:
        """ Get: Inspector(self: FormRegionClass) -> Inspector """
        ...

    @property
    def InternalName(self) -> str:
        """ Get: InternalName(self: FormRegionClass) -> str """
        ...

    @property
    def IsExpanded(self) -> bool:
        """ Get: IsExpanded(self: FormRegionClass) -> bool """
        ...

    @property
    def Item(self) -> object:
        """ Get: Item(self: FormRegionClass) -> object """
        ...

    @property
    def Language(self) -> int:
        """ Get: Language(self: FormRegionClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FormRegionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: FormRegionClass) -> NameSpace """
        ...

    @property
    def SuppressControlReplacement(self) -> bool:
        """
        Get: SuppressControlReplacement(self: FormRegionClass) -> bool
        Set: SuppressControlReplacement(self: FormRegionClass) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: FormRegionClass) -> bool
        Set: Visible(self: FormRegionClass) = value
        """
        ...


    def add_Close(self): # -> 
        """ add_Close(self: FormRegionClass, : FormRegionEvents_CloseEventHandler) """
        ...

    def add_Expanded(self): # -> 
        """ add_Expanded(self: FormRegionClass, : FormRegionEvents_ExpandedEventHandler) """
        ...

    def Reflow(self): # -> 
        """ Reflow(self: FormRegionClass) """
        ...

    def remove_Close(self): # -> 
        """ remove_Close(self: FormRegionClass, : FormRegionEvents_CloseEventHandler) """
        ...

    def remove_Expanded(self): # -> 
        """ remove_Expanded(self: FormRegionClass, : FormRegionEvents_ExpandedEventHandler) """
        ...

    def Select(self): # -> 
        """ Select(self: FormRegionClass) """
        ...

    def SetControlItemProperty(self, Control:object, PropertyName:str): # -> 
        """ SetControlItemProperty(self: FormRegionClass, Control: object, PropertyName: str) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    Close = ...
    Expanded = ...


class FormRegionEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Close(self): # -> 
        """ Close(self: FormRegionEvents) """
        ...

    def Expanded(self, Expand:bool): # -> 
        """ Expanded(self: FormRegionEvents, Expand: bool) """
        ...


class FormRegionEvents_CloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ FormRegionEvents_CloseEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: FormRegionEvents_CloseEventHandler) """
        ...


class FormRegionEvents_ExpandedEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ FormRegionEvents_ExpandedEventHandler(: object, : UIntPtr) """
    def Invoke(self, Expand:bool): # -> 
        """ Invoke(self: FormRegionEvents_ExpandedEventHandler, Expand: bool) """
        ...


class FormRegionEvents_SinkHelper(FormRegionEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_CloseDelegate = ...
    m_dwCookie = ...
    m_ExpandedDelegate = ...


class _FormRegionStartup: # skipped bases: <type 'object'>
    """ no doc """
    def BeforeFormRegionShow(self, FormRegion:FormRegion): # -> 
        """ BeforeFormRegionShow(self: _FormRegionStartup, FormRegion: FormRegion) """
        ...

    def GetFormRegionIcon(self, FormRegionName:str, LCID:int, Icon:OlFormRegionIcon) -> object:
        """ GetFormRegionIcon(self: _FormRegionStartup, FormRegionName: str, LCID: int, Icon: OlFormRegionIcon) -> object """
        ...

    def GetFormRegionManifest(self, FormRegionName:str, LCID:int) -> object:
        """ GetFormRegionManifest(self: _FormRegionStartup, FormRegionName: str, LCID: int) -> object """
        ...

    def GetFormRegionStorage(self, FormRegionName:str, Item:object, LCID:int, FormRegionMode:OlFormRegionMode, FormRegionSize:OlFormRegionSize) -> object:
        """ GetFormRegionStorage(self: _FormRegionStartup, FormRegionName: str, Item: object, LCID: int, FormRegionMode: OlFormRegionMode, FormRegionSize: OlFormRegionSize) -> object """
        ...


class FormRegionStartup(_FormRegionStartup): # skipped bases: <type 'object'>
    """ no doc """
    pass

class FormRegionStartupClass(FormRegionStartup, __ComObject): # skipped bases: <type '_FormRegionStartup'>, <type 'object'>
    """ no doc """
    def BeforeFormRegionShow(self, FormRegion:FormRegion): # -> 
        """ BeforeFormRegionShow(self: FormRegionStartupClass, FormRegion: FormRegion) """
        ...

    def GetFormRegionIcon(self, FormRegionName:str, LCID:int, Icon:OlFormRegionIcon) -> object:
        """ GetFormRegionIcon(self: FormRegionStartupClass, FormRegionName: str, LCID: int, Icon: OlFormRegionIcon) -> object """
        ...

    def GetFormRegionManifest(self, FormRegionName:str, LCID:int) -> object:
        """ GetFormRegionManifest(self: FormRegionStartupClass, FormRegionName: str, LCID: int) -> object """
        ...

    def GetFormRegionStorage(self, FormRegionName:str, Item:object, LCID:int, FormRegionMode:OlFormRegionMode, FormRegionSize:OlFormRegionSize) -> object:
        """ GetFormRegionStorage(self: FormRegionStartupClass, FormRegionName: str, Item: object, LCID: int, FormRegionMode: OlFormRegionMode, FormRegionSize: OlFormRegionSize) -> object """
        ...


class _FromRssFeedRuleCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _FromRssFeedRuleCondition) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _FromRssFeedRuleCondition) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: _FromRssFeedRuleCondition) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _FromRssFeedRuleCondition) -> bool
        Set: Enabled(self: _FromRssFeedRuleCondition) = value
        """
        ...

    @property
    def FromRssFeed(self) -> object:
        """
        Get: FromRssFeed(self: _FromRssFeedRuleCondition) -> object
        Set: FromRssFeed(self: _FromRssFeedRuleCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _FromRssFeedRuleCondition) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _FromRssFeedRuleCondition) -> NameSpace """
        ...



class FromRssFeedRuleCondition(_FromRssFeedRuleCondition): # skipped bases: <type 'object'>
    """ no doc """
    pass

class FromRssFeedRuleConditionClass(__ComObject, FromRssFeedRuleCondition): # skipped bases: <type '_FromRssFeedRuleCondition'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FromRssFeedRuleConditionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: FromRssFeedRuleConditionClass) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: FromRssFeedRuleConditionClass) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: FromRssFeedRuleConditionClass) -> bool
        Set: Enabled(self: FromRssFeedRuleConditionClass) = value
        """
        ...

    @property
    def FromRssFeed(self) -> object:
        """
        Get: FromRssFeed(self: FromRssFeedRuleConditionClass) -> object
        Set: FromRssFeed(self: FromRssFeedRuleConditionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FromRssFeedRuleConditionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: FromRssFeedRuleConditionClass) -> NameSpace """
        ...



class _IconView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _IconView) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _IconView) -> OlObjectClass """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: _IconView) -> str
        Set: Filter(self: _IconView) = value
        """
        ...

    @property
    def IconPlacement(self) -> OlIconViewPlacement:
        """
        Get: IconPlacement(self: _IconView) -> OlIconViewPlacement
        Set: IconPlacement(self: _IconView) = value
        """
        ...

    @property
    def IconViewType(self) -> OlIconViewType:
        """
        Get: IconViewType(self: _IconView) -> OlIconViewType
        Set: IconViewType(self: _IconView) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: _IconView) -> str
        Set: Language(self: _IconView) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: _IconView) -> bool
        Set: LockUserChanges(self: _IconView) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _IconView) -> str
        Set: Name(self: _IconView) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _IconView) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: _IconView) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _IconView) -> NameSpace """
        ...

    @property
    def SortFields(self) -> OrderFields:
        """ Get: SortFields(self: _IconView) -> OrderFields """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: _IconView) -> bool """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: _IconView) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: _IconView) -> str
        Set: XML(self: _IconView) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: _IconView) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: _IconView, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: _IconView) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: _IconView, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: _IconView) """
        ...

    def Save(self): # -> 
        """ Save(self: _IconView) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IconView(_IconView): # skipped bases: <type 'object'>
    """ no doc """
    pass

class IconViewClass(__ComObject, IconView): # skipped bases: <type '_IconView'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: IconViewClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: IconViewClass) -> OlObjectClass """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: IconViewClass) -> str
        Set: Filter(self: IconViewClass) = value
        """
        ...

    @property
    def IconPlacement(self) -> OlIconViewPlacement:
        """
        Get: IconPlacement(self: IconViewClass) -> OlIconViewPlacement
        Set: IconPlacement(self: IconViewClass) = value
        """
        ...

    @property
    def IconViewType(self) -> OlIconViewType:
        """
        Get: IconViewType(self: IconViewClass) -> OlIconViewType
        Set: IconViewType(self: IconViewClass) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: IconViewClass) -> str
        Set: Language(self: IconViewClass) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: IconViewClass) -> bool
        Set: LockUserChanges(self: IconViewClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: IconViewClass) -> str
        Set: Name(self: IconViewClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: IconViewClass) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: IconViewClass) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: IconViewClass) -> NameSpace """
        ...

    @property
    def SortFields(self) -> OrderFields:
        """ Get: SortFields(self: IconViewClass) -> OrderFields """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: IconViewClass) -> bool """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: IconViewClass) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: IconViewClass) -> str
        Set: XML(self: IconViewClass) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: IconViewClass) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: IconViewClass, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: IconViewClass) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: IconViewClass, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: IconViewClass) """
        ...

    def Save(self): # -> 
        """ Save(self: IconViewClass) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class _ImportanceRuleCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ImportanceRuleCondition) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ImportanceRuleCondition) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: _ImportanceRuleCondition) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _ImportanceRuleCondition) -> bool
        Set: Enabled(self: _ImportanceRuleCondition) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _ImportanceRuleCondition) -> OlImportance
        Set: Importance(self: _ImportanceRuleCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ImportanceRuleCondition) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ImportanceRuleCondition) -> NameSpace """
        ...



class ImportanceRuleCondition(_ImportanceRuleCondition): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ImportanceRuleConditionClass(ImportanceRuleCondition, __ComObject): # skipped bases: <type '_ImportanceRuleCondition'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ImportanceRuleConditionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ImportanceRuleConditionClass) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: ImportanceRuleConditionClass) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ImportanceRuleConditionClass) -> bool
        Set: Enabled(self: ImportanceRuleConditionClass) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: ImportanceRuleConditionClass) -> OlImportance
        Set: Importance(self: ImportanceRuleConditionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ImportanceRuleConditionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ImportanceRuleConditionClass) -> NameSpace """
        ...



class InspectorEvents_10_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Activate(self): # -> 
        """ add_Activate(self: InspectorEvents_10_Event, : InspectorEvents_10_ActivateEventHandler) """
        ...

    def add_AttachmentSelectionChange(self): # -> 
        """ add_AttachmentSelectionChange(self: InspectorEvents_10_Event, : InspectorEvents_10_AttachmentSelectionChangeEventHandler) """
        ...

    def add_BeforeMaximize(self): # -> 
        """ add_BeforeMaximize(self: InspectorEvents_10_Event, : InspectorEvents_10_BeforeMaximizeEventHandler) """
        ...

    def add_BeforeMinimize(self): # -> 
        """ add_BeforeMinimize(self: InspectorEvents_10_Event, : InspectorEvents_10_BeforeMinimizeEventHandler) """
        ...

    def add_BeforeMove(self): # -> 
        """ add_BeforeMove(self: InspectorEvents_10_Event, : InspectorEvents_10_BeforeMoveEventHandler) """
        ...

    def add_BeforeSize(self): # -> 
        """ add_BeforeSize(self: InspectorEvents_10_Event, : InspectorEvents_10_BeforeSizeEventHandler) """
        ...

    def add_Close(self): # -> 
        """ add_Close(self: InspectorEvents_10_Event, : InspectorEvents_10_CloseEventHandler) """
        ...

    def add_Deactivate(self): # -> 
        """ add_Deactivate(self: InspectorEvents_10_Event, : InspectorEvents_10_DeactivateEventHandler) """
        ...

    def add_PageChange(self): # -> 
        """ add_PageChange(self: InspectorEvents_10_Event, : InspectorEvents_10_PageChangeEventHandler) """
        ...

    def remove_Activate(self): # -> 
        """ remove_Activate(self: InspectorEvents_10_Event, : InspectorEvents_10_ActivateEventHandler) """
        ...

    def remove_AttachmentSelectionChange(self): # -> 
        """ remove_AttachmentSelectionChange(self: InspectorEvents_10_Event, : InspectorEvents_10_AttachmentSelectionChangeEventHandler) """
        ...

    def remove_BeforeMaximize(self): # -> 
        """ remove_BeforeMaximize(self: InspectorEvents_10_Event, : InspectorEvents_10_BeforeMaximizeEventHandler) """
        ...

    def remove_BeforeMinimize(self): # -> 
        """ remove_BeforeMinimize(self: InspectorEvents_10_Event, : InspectorEvents_10_BeforeMinimizeEventHandler) """
        ...

    def remove_BeforeMove(self): # -> 
        """ remove_BeforeMove(self: InspectorEvents_10_Event, : InspectorEvents_10_BeforeMoveEventHandler) """
        ...

    def remove_BeforeSize(self): # -> 
        """ remove_BeforeSize(self: InspectorEvents_10_Event, : InspectorEvents_10_BeforeSizeEventHandler) """
        ...

    def remove_Close(self): # -> 
        """ remove_Close(self: InspectorEvents_10_Event, : InspectorEvents_10_CloseEventHandler) """
        ...

    def remove_Deactivate(self): # -> 
        """ remove_Deactivate(self: InspectorEvents_10_Event, : InspectorEvents_10_DeactivateEventHandler) """
        ...

    def remove_PageChange(self): # -> 
        """ remove_PageChange(self: InspectorEvents_10_Event, : InspectorEvents_10_PageChangeEventHandler) """
        ...

    Activate = ...
    AttachmentSelectionChange = ...
    BeforeMaximize = ...
    BeforeMinimize = ...
    BeforeMove = ...
    BeforeSize = ...
    Close = ...
    Deactivate = ...
    PageChange = ...


class _Inspector: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Inspector) -> Application """
        ...

    @property
    def AttachmentSelection(self) -> AttachmentSelection:
        """ Get: AttachmentSelection(self: _Inspector) -> AttachmentSelection """
        ...

    @property
    def Caption(self) -> str:
        """ Get: Caption(self: _Inspector) -> str """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Inspector) -> OlObjectClass """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: _Inspector) -> CommandBars """
        ...

    @property
    def CurrentItem(self) -> object:
        """ Get: CurrentItem(self: _Inspector) -> object """
        ...

    @property
    def EditorType(self) -> OlEditorType:
        """ Get: EditorType(self: _Inspector) -> OlEditorType """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: _Inspector) -> int
        Set: Height(self: _Inspector) = value
        """
        ...

    @property
    def HTMLEditor(self) -> object:
        """ Get: HTMLEditor(self: _Inspector) -> object """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: _Inspector) -> int
        Set: Left(self: _Inspector) = value
        """
        ...

    @property
    def ModifiedFormPages(self) -> object:
        """ Get: ModifiedFormPages(self: _Inspector) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Inspector) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Inspector) -> NameSpace """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: _Inspector) -> int
        Set: Top(self: _Inspector) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: _Inspector) -> int
        Set: Width(self: _Inspector) = value
        """
        ...

    @property
    def WindowState(self) -> OlWindowState:
        """
        Get: WindowState(self: _Inspector) -> OlWindowState
        Set: WindowState(self: _Inspector) = value
        """
        ...

    @property
    def WordEditor(self) -> object:
        """ Get: WordEditor(self: _Inspector) -> object """
        ...


    def Activate(self): # -> 
        """ Activate(self: _Inspector) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _Inspector, SaveMode: OlInspectorClose) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _Inspector, Modal: object) """
        ...

    def HideFormPage(self, PageName:str): # -> 
        """ HideFormPage(self: _Inspector, PageName: str) """
        ...

    def IsWordMail(self) -> bool:
        """ IsWordMail(self: _Inspector) -> bool """
        ...

    def NewFormRegion(self) -> object:
        """ NewFormRegion(self: _Inspector) -> object """
        ...

    def OpenFormRegion(self, Path:str) -> object:
        """ OpenFormRegion(self: _Inspector, Path: str) -> object """
        ...

    def SaveFormRegion(self, Page:object, FileName:str): # -> 
        """ SaveFormRegion(self: _Inspector, Page: object, FileName: str) """
        ...

    def SetControlItemProperty(self, Control:object, PropertyName:str): # -> 
        """ SetControlItemProperty(self: _Inspector, Control: object, PropertyName: str) """
        ...

    def SetCurrentFormPage(self, PageName:str): # -> 
        """ SetCurrentFormPage(self: _Inspector, PageName: str) """
        ...

    def SetSchedulingStartTime(self, Start:DateTime): # -> 
        """ SetSchedulingStartTime(self: _Inspector, Start: DateTime) """
        ...

    def ShowFormPage(self, PageName:str): # -> 
        """ ShowFormPage(self: _Inspector, PageName: str) """
        ...


class Inspector(InspectorEvents_10_Event, _Inspector): # skipped bases: <type 'object'>
    """ no doc """
    pass

class InspectorClass(InspectorEvents_Event, __ComObject, Inspector): # skipped bases: <type '_Inspector'>, <type 'InspectorEvents_10_Event'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: InspectorClass) -> Application """
        ...

    @property
    def AttachmentSelection(self) -> AttachmentSelection:
        """ Get: AttachmentSelection(self: InspectorClass) -> AttachmentSelection """
        ...

    @property
    def Caption(self) -> str:
        """ Get: Caption(self: InspectorClass) -> str """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: InspectorClass) -> OlObjectClass """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: InspectorClass) -> CommandBars """
        ...

    @property
    def CurrentItem(self) -> object:
        """ Get: CurrentItem(self: InspectorClass) -> object """
        ...

    @property
    def EditorType(self) -> OlEditorType:
        """ Get: EditorType(self: InspectorClass) -> OlEditorType """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: InspectorClass) -> int
        Set: Height(self: InspectorClass) = value
        """
        ...

    @property
    def HTMLEditor(self) -> object:
        """ Get: HTMLEditor(self: InspectorClass) -> object """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: InspectorClass) -> int
        Set: Left(self: InspectorClass) = value
        """
        ...

    @property
    def ModifiedFormPages(self) -> object:
        """ Get: ModifiedFormPages(self: InspectorClass) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: InspectorClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: InspectorClass) -> NameSpace """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: InspectorClass) -> int
        Set: Top(self: InspectorClass) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: InspectorClass) -> int
        Set: Width(self: InspectorClass) = value
        """
        ...

    @property
    def WindowState(self) -> OlWindowState:
        """
        Get: WindowState(self: InspectorClass) -> OlWindowState
        Set: WindowState(self: InspectorClass) = value
        """
        ...

    @property
    def WordEditor(self) -> object:
        """ Get: WordEditor(self: InspectorClass) -> object """
        ...


    def Activate(self): # -> 
        """ Activate(self: InspectorClass) """
        ...

    def add_AttachmentSelectionChange(self): # -> 
        """ add_AttachmentSelectionChange(self: InspectorClass, : InspectorEvents_10_AttachmentSelectionChangeEventHandler) """
        ...

    def add_BeforeMaximize(self): # -> 
        """ add_BeforeMaximize(self: InspectorClass, : InspectorEvents_10_BeforeMaximizeEventHandler) """
        ...

    def add_BeforeMinimize(self): # -> 
        """ add_BeforeMinimize(self: InspectorClass, : InspectorEvents_10_BeforeMinimizeEventHandler) """
        ...

    def add_BeforeMove(self): # -> 
        """ add_BeforeMove(self: InspectorClass, : InspectorEvents_10_BeforeMoveEventHandler) """
        ...

    def add_BeforeSize(self): # -> 
        """ add_BeforeSize(self: InspectorClass, : InspectorEvents_10_BeforeSizeEventHandler) """
        ...

    def add_PageChange(self): # -> 
        """ add_PageChange(self: InspectorClass, : InspectorEvents_10_PageChangeEventHandler) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: InspectorClass, SaveMode: OlInspectorClose) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: InspectorClass, Modal: object) """
        ...

    def HideFormPage(self, PageName:str): # -> 
        """ HideFormPage(self: InspectorClass, PageName: str) """
        ...

    def InspectorEvents_Event_add_Activate(self): # -> 
        """ InspectorEvents_Event_add_Activate(self: InspectorClass, : InspectorEvents_ActivateEventHandler) """
        ...

    def InspectorEvents_Event_add_Close(self): # -> 
        """ InspectorEvents_Event_add_Close(self: InspectorClass, : InspectorEvents_CloseEventHandler) """
        ...

    def InspectorEvents_Event_add_Deactivate(self): # -> 
        """ InspectorEvents_Event_add_Deactivate(self: InspectorClass, : InspectorEvents_DeactivateEventHandler) """
        ...

    def InspectorEvents_Event_remove_Activate(self): # -> 
        """ InspectorEvents_Event_remove_Activate(self: InspectorClass, : InspectorEvents_ActivateEventHandler) """
        ...

    def InspectorEvents_Event_remove_Close(self): # -> 
        """ InspectorEvents_Event_remove_Close(self: InspectorClass, : InspectorEvents_CloseEventHandler) """
        ...

    def InspectorEvents_Event_remove_Deactivate(self): # -> 
        """ InspectorEvents_Event_remove_Deactivate(self: InspectorClass, : InspectorEvents_DeactivateEventHandler) """
        ...

    def IsWordMail(self) -> bool:
        """ IsWordMail(self: InspectorClass) -> bool """
        ...

    def NewFormRegion(self) -> object:
        """ NewFormRegion(self: InspectorClass) -> object """
        ...

    def OpenFormRegion(self, Path:str) -> object:
        """ OpenFormRegion(self: InspectorClass, Path: str) -> object """
        ...

    def remove_AttachmentSelectionChange(self): # -> 
        """ remove_AttachmentSelectionChange(self: InspectorClass, : InspectorEvents_10_AttachmentSelectionChangeEventHandler) """
        ...

    def remove_BeforeMaximize(self): # -> 
        """ remove_BeforeMaximize(self: InspectorClass, : InspectorEvents_10_BeforeMaximizeEventHandler) """
        ...

    def remove_BeforeMinimize(self): # -> 
        """ remove_BeforeMinimize(self: InspectorClass, : InspectorEvents_10_BeforeMinimizeEventHandler) """
        ...

    def remove_BeforeMove(self): # -> 
        """ remove_BeforeMove(self: InspectorClass, : InspectorEvents_10_BeforeMoveEventHandler) """
        ...

    def remove_BeforeSize(self): # -> 
        """ remove_BeforeSize(self: InspectorClass, : InspectorEvents_10_BeforeSizeEventHandler) """
        ...

    def remove_PageChange(self): # -> 
        """ remove_PageChange(self: InspectorClass, : InspectorEvents_10_PageChangeEventHandler) """
        ...

    def SaveFormRegion(self, Page:object, FileName:str): # -> 
        """ SaveFormRegion(self: InspectorClass, Page: object, FileName: str) """
        ...

    def SetControlItemProperty(self, Control:object, PropertyName:str): # -> 
        """ SetControlItemProperty(self: InspectorClass, Control: object, PropertyName: str) """
        ...

    def SetCurrentFormPage(self, PageName:str): # -> 
        """ SetCurrentFormPage(self: InspectorClass, PageName: str) """
        ...

    def SetSchedulingStartTime(self, Start:DateTime): # -> 
        """ SetSchedulingStartTime(self: InspectorClass, Start: DateTime) """
        ...

    def ShowFormPage(self, PageName:str): # -> 
        """ ShowFormPage(self: InspectorClass, PageName: str) """
        ...

    AttachmentSelectionChange = ...
    BeforeMaximize = ...
    BeforeMinimize = ...
    BeforeMove = ...
    BeforeSize = ...
    Deactivate = ...
    InspectorEvents_10_Event_Activate = ...
    InspectorEvents_10_Event_Close = ...
    InspectorEvents_Event_Activate = ...
    InspectorEvents_Event_Close = ...
    InspectorEvents_Event_Deactivate = ...
    PageChange = ...


class InspectorEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Activate(self): # -> 
        """ Activate(self: InspectorEvents) """
        ...

    def Close(self): # -> 
        """ Close(self: InspectorEvents) """
        ...

    def Deactivate(self): # -> 
        """ Deactivate(self: InspectorEvents) """
        ...


class InspectorEvents_10: # skipped bases: <type 'object'>
    """ no doc """
    def Activate(self): # -> 
        """ Activate(self: InspectorEvents_10) """
        ...

    def AttachmentSelectionChange(self): # -> 
        """ AttachmentSelectionChange(self: InspectorEvents_10) """
        ...

    def BeforeMaximize(self, Cancel) -> bool:
        """ BeforeMaximize(self: InspectorEvents_10) -> bool """
        ...

    def BeforeMinimize(self, Cancel) -> bool:
        """ BeforeMinimize(self: InspectorEvents_10) -> bool """
        ...

    def BeforeMove(self, Cancel) -> bool:
        """ BeforeMove(self: InspectorEvents_10) -> bool """
        ...

    def BeforeSize(self, Cancel) -> bool:
        """ BeforeSize(self: InspectorEvents_10) -> bool """
        ...

    def Close(self): # -> 
        """ Close(self: InspectorEvents_10) """
        ...

    def Deactivate(self): # -> 
        """ Deactivate(self: InspectorEvents_10) """
        ...

    def PageChange(self, ActivePageName:str) -> str:
        """ PageChange(self: InspectorEvents_10, ActivePageName: str) -> str """
        ...


class InspectorEvents_10_ActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_10_ActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: InspectorEvents_10_ActivateEventHandler) """
        ...


class InspectorEvents_10_AttachmentSelectionChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_10_AttachmentSelectionChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: InspectorEvents_10_AttachmentSelectionChangeEventHandler) """
        ...


class InspectorEvents_10_BeforeMaximizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_10_BeforeMaximizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: InspectorEvents_10_BeforeMaximizeEventHandler) -> bool """
        ...


class InspectorEvents_10_BeforeMinimizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_10_BeforeMinimizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: InspectorEvents_10_BeforeMinimizeEventHandler) -> bool """
        ...


class InspectorEvents_10_BeforeMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_10_BeforeMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: InspectorEvents_10_BeforeMoveEventHandler) -> bool """
        ...


class InspectorEvents_10_BeforeSizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_10_BeforeSizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: InspectorEvents_10_BeforeSizeEventHandler) -> bool """
        ...


class InspectorEvents_10_CloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_10_CloseEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: InspectorEvents_10_CloseEventHandler) """
        ...


class InspectorEvents_10_DeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_10_DeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: InspectorEvents_10_DeactivateEventHandler) """
        ...


class InspectorEvents_10_PageChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_10_PageChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, ActivePageName:str) -> str:
        """ Invoke(self: InspectorEvents_10_PageChangeEventHandler, ActivePageName: str) -> str """
        ...


class InspectorEvents_10_SinkHelper(InspectorEvents_10): # skipped bases: <type 'object'>
    """ no doc """
    m_ActivateDelegate = ...
    m_AttachmentSelectionChangeDelegate = ...
    m_BeforeMaximizeDelegate = ...
    m_BeforeMinimizeDelegate = ...
    m_BeforeMoveDelegate = ...
    m_BeforeSizeDelegate = ...
    m_CloseDelegate = ...
    m_DeactivateDelegate = ...
    m_dwCookie = ...
    m_PageChangeDelegate = ...


class InspectorEvents_ActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_ActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: InspectorEvents_ActivateEventHandler) """
        ...


class InspectorEvents_CloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_CloseEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: InspectorEvents_CloseEventHandler) """
        ...


class InspectorEvents_DeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorEvents_DeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: InspectorEvents_DeactivateEventHandler) """
        ...


class InspectorEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Activate(self): # -> 
        """ add_Activate(self: InspectorEvents_Event, : InspectorEvents_ActivateEventHandler) """
        ...

    def add_Close(self): # -> 
        """ add_Close(self: InspectorEvents_Event, : InspectorEvents_CloseEventHandler) """
        ...

    def add_Deactivate(self): # -> 
        """ add_Deactivate(self: InspectorEvents_Event, : InspectorEvents_DeactivateEventHandler) """
        ...

    def remove_Activate(self): # -> 
        """ remove_Activate(self: InspectorEvents_Event, : InspectorEvents_ActivateEventHandler) """
        ...

    def remove_Close(self): # -> 
        """ remove_Close(self: InspectorEvents_Event, : InspectorEvents_CloseEventHandler) """
        ...

    def remove_Deactivate(self): # -> 
        """ remove_Deactivate(self: InspectorEvents_Event, : InspectorEvents_DeactivateEventHandler) """
        ...

    Activate = ...
    Close = ...
    Deactivate = ...


class InspectorEvents_SinkHelper(InspectorEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_ActivateDelegate = ...
    m_CloseDelegate = ...
    m_DeactivateDelegate = ...
    m_dwCookie = ...


class InspectorsEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_NewInspector(self): # -> 
        """ add_NewInspector(self: InspectorsEvents_Event, : InspectorsEvents_NewInspectorEventHandler) """
        ...

    def remove_NewInspector(self): # -> 
        """ remove_NewInspector(self: InspectorsEvents_Event, : InspectorsEvents_NewInspectorEventHandler) """
        ...

    NewInspector = ...


class _Inspectors(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Inspectors) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Inspectors) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Inspectors) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Inspectors) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Inspectors) -> NameSpace """
        ...


    def Add(self, Item:object) -> Inspector:
        """ Add(self: _Inspectors, Item: object) -> Inspector """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Inspectors(InspectorsEvents_Event, _Inspectors): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class InspectorsClass(Inspectors, __ComObject): # skipped bases: <type 'InspectorsEvents_Event'>, <type '_Inspectors'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: InspectorsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: InspectorsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: InspectorsClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: InspectorsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: InspectorsClass) -> NameSpace """
        ...


    def Add(self, Item:object) -> Inspector:
        """ Add(self: InspectorsClass, Item: object) -> Inspector """
        ...

    def add_NewInspector(self): # -> 
        """ add_NewInspector(self: InspectorsClass, : InspectorsEvents_NewInspectorEventHandler) """
        ...

    def remove_NewInspector(self): # -> 
        """ remove_NewInspector(self: InspectorsClass, : InspectorsEvents_NewInspectorEventHandler) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    NewInspector = ...


class InspectorsEvents: # skipped bases: <type 'object'>
    """ no doc """
    def NewInspector(self, Inspector:Inspector): # -> 
        """ NewInspector(self: InspectorsEvents, Inspector: Inspector) """
        ...


class InspectorsEvents_NewInspectorEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ InspectorsEvents_NewInspectorEventHandler(: object, : UIntPtr) """
    def Invoke(self, Inspector:Inspector): # -> 
        """ Invoke(self: InspectorsEvents_NewInspectorEventHandler, Inspector: Inspector) """
        ...


class InspectorsEvents_SinkHelper(InspectorsEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_NewInspectorDelegate = ...


class ItemEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AttachmentAdd(self, Attachment:Attachment): # -> 
        """ AttachmentAdd(self: ItemEvents, Attachment: Attachment) """
        ...

    def AttachmentRead(self, Attachment:Attachment): # -> 
        """ AttachmentRead(self: ItemEvents, Attachment: Attachment) """
        ...

    def BeforeAttachmentSave(self, Attachment, Cancel) -> bool:
        """ BeforeAttachmentSave(self: ItemEvents, Attachment: Attachment) -> bool """
        ...

    def BeforeCheckNames(self, Cancel) -> bool:
        """ BeforeCheckNames(self: ItemEvents) -> bool """
        ...

    def Close(self, Cancel) -> bool:
        """ Close(self: ItemEvents) -> bool """
        ...

    def CustomAction(self, Action, Response, Cancel) -> bool:
        """ CustomAction(self: ItemEvents, Action: object, Response: object) -> bool """
        ...

    def CustomPropertyChange(self, Name:str): # -> 
        """ CustomPropertyChange(self: ItemEvents, Name: str) """
        ...

    def Forward(self, Forward, Cancel) -> bool:
        """ Forward(self: ItemEvents, Forward: object) -> bool """
        ...

    def Open(self, Cancel) -> bool:
        """ Open(self: ItemEvents) -> bool """
        ...

    def PropertyChange(self, Name:str): # -> 
        """ PropertyChange(self: ItemEvents, Name: str) """
        ...

    def Read(self): # -> 
        """ Read(self: ItemEvents) """
        ...

    def Reply(self, Response, Cancel) -> bool:
        """ Reply(self: ItemEvents, Response: object) -> bool """
        ...

    def ReplyAll(self, Response, Cancel) -> bool:
        """ ReplyAll(self: ItemEvents, Response: object) -> bool """
        ...

    def Send(self, Cancel) -> bool:
        """ Send(self: ItemEvents) -> bool """
        ...

    def Write(self, Cancel) -> bool:
        """ Write(self: ItemEvents) -> bool """
        ...


class ItemEvents_10: # skipped bases: <type 'object'>
    """ no doc """
    def AfterWrite(self): # -> 
        """ AfterWrite(self: ItemEvents_10) """
        ...

    def AttachmentAdd(self, Attachment:Attachment): # -> 
        """ AttachmentAdd(self: ItemEvents_10, Attachment: Attachment) """
        ...

    def AttachmentRead(self, Attachment:Attachment): # -> 
        """ AttachmentRead(self: ItemEvents_10, Attachment: Attachment) """
        ...

    def AttachmentRemove(self, Attachment:Attachment): # -> 
        """ AttachmentRemove(self: ItemEvents_10, Attachment: Attachment) """
        ...

    def BeforeAttachmentAdd(self, Attachment, Cancel) -> bool:
        """ BeforeAttachmentAdd(self: ItemEvents_10, Attachment: Attachment) -> bool """
        ...

    def BeforeAttachmentPreview(self, Attachment, Cancel) -> bool:
        """ BeforeAttachmentPreview(self: ItemEvents_10, Attachment: Attachment) -> bool """
        ...

    def BeforeAttachmentRead(self, Attachment, Cancel) -> bool:
        """ BeforeAttachmentRead(self: ItemEvents_10, Attachment: Attachment) -> bool """
        ...

    def BeforeAttachmentSave(self, Attachment, Cancel) -> bool:
        """ BeforeAttachmentSave(self: ItemEvents_10, Attachment: Attachment) -> bool """
        ...

    def BeforeAttachmentWriteToTempFile(self, Attachment, Cancel) -> bool:
        """ BeforeAttachmentWriteToTempFile(self: ItemEvents_10, Attachment: Attachment) -> bool """
        ...

    def BeforeAutoSave(self, Cancel) -> bool:
        """ BeforeAutoSave(self: ItemEvents_10) -> bool """
        ...

    def BeforeCheckNames(self, Cancel) -> bool:
        """ BeforeCheckNames(self: ItemEvents_10) -> bool """
        ...

    def BeforeDelete(self, Item, Cancel) -> bool:
        """ BeforeDelete(self: ItemEvents_10, Item: object) -> bool """
        ...

    def BeforeRead(self): # -> 
        """ BeforeRead(self: ItemEvents_10) """
        ...

    def Close(self, Cancel) -> bool:
        """ Close(self: ItemEvents_10) -> bool """
        ...

    def CustomAction(self, Action, Response, Cancel) -> bool:
        """ CustomAction(self: ItemEvents_10, Action: object, Response: object) -> bool """
        ...

    def CustomPropertyChange(self, Name:str): # -> 
        """ CustomPropertyChange(self: ItemEvents_10, Name: str) """
        ...

    def Forward(self, Forward, Cancel) -> bool:
        """ Forward(self: ItemEvents_10, Forward: object) -> bool """
        ...

    def Open(self, Cancel) -> bool:
        """ Open(self: ItemEvents_10) -> bool """
        ...

    def PropertyChange(self, Name:str): # -> 
        """ PropertyChange(self: ItemEvents_10, Name: str) """
        ...

    def Read(self): # -> 
        """ Read(self: ItemEvents_10) """
        ...

    def ReadComplete(self, Cancel) -> bool:
        """ ReadComplete(self: ItemEvents_10) -> bool """
        ...

    def Reply(self, Response, Cancel) -> bool:
        """ Reply(self: ItemEvents_10, Response: object) -> bool """
        ...

    def ReplyAll(self, Response, Cancel) -> bool:
        """ ReplyAll(self: ItemEvents_10, Response: object) -> bool """
        ...

    def Send(self, Cancel) -> bool:
        """ Send(self: ItemEvents_10) -> bool """
        ...

    def Unload(self): # -> 
        """ Unload(self: ItemEvents_10) """
        ...

    def Write(self, Cancel) -> bool:
        """ Write(self: ItemEvents_10) -> bool """
        ...


class ItemEvents_10_AfterWriteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_AfterWriteEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ItemEvents_10_AfterWriteEventHandler) """
        ...


class ItemEvents_10_AttachmentAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_AttachmentAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Attachment:Attachment): # -> 
        """ Invoke(self: ItemEvents_10_AttachmentAddEventHandler, Attachment: Attachment) """
        ...


class ItemEvents_10_AttachmentReadEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_AttachmentReadEventHandler(: object, : UIntPtr) """
    def Invoke(self, Attachment:Attachment): # -> 
        """ Invoke(self: ItemEvents_10_AttachmentReadEventHandler, Attachment: Attachment) """
        ...


class ItemEvents_10_AttachmentRemoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_AttachmentRemoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Attachment:Attachment): # -> 
        """ Invoke(self: ItemEvents_10_AttachmentRemoveEventHandler, Attachment: Attachment) """
        ...


class ItemEvents_10_BeforeAttachmentAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_BeforeAttachmentAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Attachment, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_BeforeAttachmentAddEventHandler, Attachment: Attachment) -> bool """
        ...


class ItemEvents_10_BeforeAttachmentPreviewEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_BeforeAttachmentPreviewEventHandler(: object, : UIntPtr) """
    def Invoke(self, Attachment, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_BeforeAttachmentPreviewEventHandler, Attachment: Attachment) -> bool """
        ...


class ItemEvents_10_BeforeAttachmentReadEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_BeforeAttachmentReadEventHandler(: object, : UIntPtr) """
    def Invoke(self, Attachment, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_BeforeAttachmentReadEventHandler, Attachment: Attachment) -> bool """
        ...


class ItemEvents_10_BeforeAttachmentSaveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_BeforeAttachmentSaveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Attachment, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_BeforeAttachmentSaveEventHandler, Attachment: Attachment) -> bool """
        ...


class ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler(: object, : UIntPtr) """
    def Invoke(self, Attachment, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler, Attachment: Attachment) -> bool """
        ...


class ItemEvents_10_BeforeAutoSaveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_BeforeAutoSaveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_BeforeAutoSaveEventHandler) -> bool """
        ...


class ItemEvents_10_BeforeCheckNamesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_BeforeCheckNamesEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_BeforeCheckNamesEventHandler) -> bool """
        ...


class ItemEvents_10_BeforeDeleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_BeforeDeleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_BeforeDeleteEventHandler, Item: object) -> bool """
        ...


class ItemEvents_10_BeforeReadEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_BeforeReadEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ItemEvents_10_BeforeReadEventHandler) """
        ...


class ItemEvents_10_CloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_CloseEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_CloseEventHandler) -> bool """
        ...


class ItemEvents_10_CustomActionEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_CustomActionEventHandler(: object, : UIntPtr) """
    def Invoke(self, Action, Response, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_CustomActionEventHandler, Action: object, Response: object) -> bool """
        ...


class ItemEvents_10_CustomPropertyChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_CustomPropertyChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Name:str): # -> 
        """ Invoke(self: ItemEvents_10_CustomPropertyChangeEventHandler, Name: str) """
        ...


class ItemEvents_10_ForwardEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_ForwardEventHandler(: object, : UIntPtr) """
    def Invoke(self, Forward, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_ForwardEventHandler, Forward: object) -> bool """
        ...


class ItemEvents_10_OpenEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_OpenEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_OpenEventHandler) -> bool """
        ...


class ItemEvents_10_PropertyChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_PropertyChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Name:str): # -> 
        """ Invoke(self: ItemEvents_10_PropertyChangeEventHandler, Name: str) """
        ...


class ItemEvents_10_ReadCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_ReadCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_ReadCompleteEventHandler) -> bool """
        ...


class ItemEvents_10_ReadEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_ReadEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ItemEvents_10_ReadEventHandler) """
        ...


class ItemEvents_10_ReplyAllEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_ReplyAllEventHandler(: object, : UIntPtr) """
    def Invoke(self, Response, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_ReplyAllEventHandler, Response: object) -> bool """
        ...


class ItemEvents_10_ReplyEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_ReplyEventHandler(: object, : UIntPtr) """
    def Invoke(self, Response, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_ReplyEventHandler, Response: object) -> bool """
        ...


class ItemEvents_10_SendEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_SendEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_SendEventHandler) -> bool """
        ...


class ItemEvents_10_SinkHelper(ItemEvents_10): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterWriteDelegate = ...
    m_AttachmentAddDelegate = ...
    m_AttachmentReadDelegate = ...
    m_AttachmentRemoveDelegate = ...
    m_BeforeAttachmentAddDelegate = ...
    m_BeforeAttachmentPreviewDelegate = ...
    m_BeforeAttachmentReadDelegate = ...
    m_BeforeAttachmentSaveDelegate = ...
    m_BeforeAttachmentWriteToTempFileDelegate = ...
    m_BeforeAutoSaveDelegate = ...
    m_BeforeCheckNamesDelegate = ...
    m_BeforeDeleteDelegate = ...
    m_BeforeReadDelegate = ...
    m_CloseDelegate = ...
    m_CustomActionDelegate = ...
    m_CustomPropertyChangeDelegate = ...
    m_dwCookie = ...
    m_ForwardDelegate = ...
    m_OpenDelegate = ...
    m_PropertyChangeDelegate = ...
    m_ReadCompleteDelegate = ...
    m_ReadDelegate = ...
    m_ReplyAllDelegate = ...
    m_ReplyDelegate = ...
    m_SendDelegate = ...
    m_UnloadDelegate = ...
    m_WriteDelegate = ...


class ItemEvents_10_UnloadEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_UnloadEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ItemEvents_10_UnloadEventHandler) """
        ...


class ItemEvents_10_WriteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_10_WriteEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_10_WriteEventHandler) -> bool """
        ...


class ItemEvents_AttachmentAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_AttachmentAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Attachment:Attachment): # -> 
        """ Invoke(self: ItemEvents_AttachmentAddEventHandler, Attachment: Attachment) """
        ...


class ItemEvents_AttachmentReadEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_AttachmentReadEventHandler(: object, : UIntPtr) """
    def Invoke(self, Attachment:Attachment): # -> 
        """ Invoke(self: ItemEvents_AttachmentReadEventHandler, Attachment: Attachment) """
        ...


class ItemEvents_BeforeAttachmentSaveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_BeforeAttachmentSaveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Attachment, Cancel) -> bool:
        """ Invoke(self: ItemEvents_BeforeAttachmentSaveEventHandler, Attachment: Attachment) -> bool """
        ...


class ItemEvents_BeforeCheckNamesEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_BeforeCheckNamesEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_BeforeCheckNamesEventHandler) -> bool """
        ...


class ItemEvents_CloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_CloseEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_CloseEventHandler) -> bool """
        ...


class ItemEvents_CustomActionEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_CustomActionEventHandler(: object, : UIntPtr) """
    def Invoke(self, Action, Response, Cancel) -> bool:
        """ Invoke(self: ItemEvents_CustomActionEventHandler, Action: object, Response: object) -> bool """
        ...


class ItemEvents_CustomPropertyChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_CustomPropertyChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Name:str): # -> 
        """ Invoke(self: ItemEvents_CustomPropertyChangeEventHandler, Name: str) """
        ...


class ItemEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AttachmentAdd(self): # -> 
        """ add_AttachmentAdd(self: ItemEvents_Event, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def add_AttachmentRead(self): # -> 
        """ add_AttachmentRead(self: ItemEvents_Event, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentSave(self): # -> 
        """ add_BeforeAttachmentSave(self: ItemEvents_Event, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def add_BeforeCheckNames(self): # -> 
        """ add_BeforeCheckNames(self: ItemEvents_Event, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def add_Close(self): # -> 
        """ add_Close(self: ItemEvents_Event, : ItemEvents_CloseEventHandler) """
        ...

    def add_CustomAction(self): # -> 
        """ add_CustomAction(self: ItemEvents_Event, : ItemEvents_CustomActionEventHandler) """
        ...

    def add_CustomPropertyChange(self): # -> 
        """ add_CustomPropertyChange(self: ItemEvents_Event, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def add_Forward(self): # -> 
        """ add_Forward(self: ItemEvents_Event, : ItemEvents_ForwardEventHandler) """
        ...

    def add_Open(self): # -> 
        """ add_Open(self: ItemEvents_Event, : ItemEvents_OpenEventHandler) """
        ...

    def add_PropertyChange(self): # -> 
        """ add_PropertyChange(self: ItemEvents_Event, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def add_Read(self): # -> 
        """ add_Read(self: ItemEvents_Event, : ItemEvents_ReadEventHandler) """
        ...

    def add_Reply(self): # -> 
        """ add_Reply(self: ItemEvents_Event, : ItemEvents_ReplyEventHandler) """
        ...

    def add_ReplyAll(self): # -> 
        """ add_ReplyAll(self: ItemEvents_Event, : ItemEvents_ReplyAllEventHandler) """
        ...

    def add_Send(self): # -> 
        """ add_Send(self: ItemEvents_Event, : ItemEvents_SendEventHandler) """
        ...

    def add_Write(self): # -> 
        """ add_Write(self: ItemEvents_Event, : ItemEvents_WriteEventHandler) """
        ...

    def remove_AttachmentAdd(self): # -> 
        """ remove_AttachmentAdd(self: ItemEvents_Event, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def remove_AttachmentRead(self): # -> 
        """ remove_AttachmentRead(self: ItemEvents_Event, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentSave(self): # -> 
        """ remove_BeforeAttachmentSave(self: ItemEvents_Event, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def remove_BeforeCheckNames(self): # -> 
        """ remove_BeforeCheckNames(self: ItemEvents_Event, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def remove_Close(self): # -> 
        """ remove_Close(self: ItemEvents_Event, : ItemEvents_CloseEventHandler) """
        ...

    def remove_CustomAction(self): # -> 
        """ remove_CustomAction(self: ItemEvents_Event, : ItemEvents_CustomActionEventHandler) """
        ...

    def remove_CustomPropertyChange(self): # -> 
        """ remove_CustomPropertyChange(self: ItemEvents_Event, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def remove_Forward(self): # -> 
        """ remove_Forward(self: ItemEvents_Event, : ItemEvents_ForwardEventHandler) """
        ...

    def remove_Open(self): # -> 
        """ remove_Open(self: ItemEvents_Event, : ItemEvents_OpenEventHandler) """
        ...

    def remove_PropertyChange(self): # -> 
        """ remove_PropertyChange(self: ItemEvents_Event, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def remove_Read(self): # -> 
        """ remove_Read(self: ItemEvents_Event, : ItemEvents_ReadEventHandler) """
        ...

    def remove_Reply(self): # -> 
        """ remove_Reply(self: ItemEvents_Event, : ItemEvents_ReplyEventHandler) """
        ...

    def remove_ReplyAll(self): # -> 
        """ remove_ReplyAll(self: ItemEvents_Event, : ItemEvents_ReplyAllEventHandler) """
        ...

    def remove_Send(self): # -> 
        """ remove_Send(self: ItemEvents_Event, : ItemEvents_SendEventHandler) """
        ...

    def remove_Write(self): # -> 
        """ remove_Write(self: ItemEvents_Event, : ItemEvents_WriteEventHandler) """
        ...

    AttachmentAdd = ...
    AttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeCheckNames = ...
    Close = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    Reply = ...
    ReplyAll = ...
    Send = ...
    Write = ...


class ItemEvents_ForwardEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_ForwardEventHandler(: object, : UIntPtr) """
    def Invoke(self, Forward, Cancel) -> bool:
        """ Invoke(self: ItemEvents_ForwardEventHandler, Forward: object) -> bool """
        ...


class ItemEvents_OpenEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_OpenEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_OpenEventHandler) -> bool """
        ...


class ItemEvents_PropertyChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_PropertyChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Name:str): # -> 
        """ Invoke(self: ItemEvents_PropertyChangeEventHandler, Name: str) """
        ...


class ItemEvents_ReadEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_ReadEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ItemEvents_ReadEventHandler) """
        ...


class ItemEvents_ReplyAllEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_ReplyAllEventHandler(: object, : UIntPtr) """
    def Invoke(self, Response, Cancel) -> bool:
        """ Invoke(self: ItemEvents_ReplyAllEventHandler, Response: object) -> bool """
        ...


class ItemEvents_ReplyEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_ReplyEventHandler(: object, : UIntPtr) """
    def Invoke(self, Response, Cancel) -> bool:
        """ Invoke(self: ItemEvents_ReplyEventHandler, Response: object) -> bool """
        ...


class ItemEvents_SendEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_SendEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_SendEventHandler) -> bool """
        ...


class ItemEvents_SinkHelper(ItemEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AttachmentAddDelegate = ...
    m_AttachmentReadDelegate = ...
    m_BeforeAttachmentSaveDelegate = ...
    m_BeforeCheckNamesDelegate = ...
    m_CloseDelegate = ...
    m_CustomActionDelegate = ...
    m_CustomPropertyChangeDelegate = ...
    m_dwCookie = ...
    m_ForwardDelegate = ...
    m_OpenDelegate = ...
    m_PropertyChangeDelegate = ...
    m_ReadDelegate = ...
    m_ReplyAllDelegate = ...
    m_ReplyDelegate = ...
    m_SendDelegate = ...
    m_WriteDelegate = ...


class ItemEvents_WriteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemEvents_WriteEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ItemEvents_WriteEventHandler) -> bool """
        ...


class ItemProperties(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ItemProperties) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ItemProperties) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ItemProperties) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ItemProperties) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ItemProperties) -> NameSpace """
        ...


    def Add(self, Name:str, Type:OlUserPropertyType, AddToFolderFields:object, DisplayFormat:object) -> ItemProperty:
        """ Add(self: ItemProperties, Name: str, Type: OlUserPropertyType, AddToFolderFields: object, DisplayFormat: object) -> ItemProperty """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: ItemProperties, Index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ItemProperty: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ItemProperty) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ItemProperty) -> OlObjectClass """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: ItemProperty) -> str
        Set: Formula(self: ItemProperty) = value
        """
        ...

    @property
    def IsUserProperty(self) -> bool:
        """ Get: IsUserProperty(self: ItemProperty) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ItemProperty) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ItemProperty) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ItemProperty) -> NameSpace """
        ...

    @property
    def Type(self) -> OlUserPropertyType:
        """ Get: Type(self: ItemProperty) -> OlUserPropertyType """
        ...

    @property
    def ValidationFormula(self) -> str:
        """
        Get: ValidationFormula(self: ItemProperty) -> str
        Set: ValidationFormula(self: ItemProperty) = value
        """
        ...

    @property
    def ValidationText(self) -> str:
        """
        Get: ValidationText(self: ItemProperty) -> str
        Set: ValidationText(self: ItemProperty) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: ItemProperty) -> object
        Set: Value(self: ItemProperty) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: ItemProperty) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ItemsEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_ItemAdd(self): # -> 
        """ add_ItemAdd(self: ItemsEvents_Event, : ItemsEvents_ItemAddEventHandler) """
        ...

    def add_ItemChange(self): # -> 
        """ add_ItemChange(self: ItemsEvents_Event, : ItemsEvents_ItemChangeEventHandler) """
        ...

    def add_ItemRemove(self): # -> 
        """ add_ItemRemove(self: ItemsEvents_Event, : ItemsEvents_ItemRemoveEventHandler) """
        ...

    def remove_ItemAdd(self): # -> 
        """ remove_ItemAdd(self: ItemsEvents_Event, : ItemsEvents_ItemAddEventHandler) """
        ...

    def remove_ItemChange(self): # -> 
        """ remove_ItemChange(self: ItemsEvents_Event, : ItemsEvents_ItemChangeEventHandler) """
        ...

    def remove_ItemRemove(self): # -> 
        """ remove_ItemRemove(self: ItemsEvents_Event, : ItemsEvents_ItemRemoveEventHandler) """
        ...

    ItemAdd = ...
    ItemChange = ...
    ItemRemove = ...


class _Items(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Items) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Items) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Items) -> int """
        ...

    @property
    def IncludeRecurrences(self) -> bool:
        """
        Get: IncludeRecurrences(self: _Items) -> bool
        Set: IncludeRecurrences(self: _Items) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Items) -> object """
        ...

    @property
    def RawTable(self) -> object:
        """ Get: RawTable(self: _Items) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Items) -> NameSpace """
        ...


    def Add(self, Type:object) -> object:
        """ Add(self: _Items, Type: object) -> object """
        ...

    def Find(self, Filter:str) -> object:
        """ Find(self: _Items, Filter: str) -> object """
        ...

    def FindNext(self) -> object:
        """ FindNext(self: _Items) -> object """
        ...

    def GetFirst(self) -> object:
        """ GetFirst(self: _Items) -> object """
        ...

    def GetLast(self) -> object:
        """ GetLast(self: _Items) -> object """
        ...

    def GetNext(self) -> object:
        """ GetNext(self: _Items) -> object """
        ...

    def GetPrevious(self) -> object:
        """ GetPrevious(self: _Items) -> object """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: _Items, Index: int) """
        ...

    def ResetColumns(self): # -> 
        """ ResetColumns(self: _Items) """
        ...

    def Restrict(self, Filter:str) -> Items:
        """ Restrict(self: _Items, Filter: str) -> Items """
        ...

    def SetColumns(self, Columns:str): # -> 
        """ SetColumns(self: _Items, Columns: str) """
        ...

    def Sort(self, Property:str, Descending:object): # -> 
        """ Sort(self: _Items, Property: str, Descending: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Items(ItemsEvents_Event, _Items): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class ItemsClass(__ComObject, Items): # skipped bases: <type 'ItemsEvents_Event'>, <type 'IEnumerable'>, <type '_Items'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ItemsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ItemsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ItemsClass) -> int """
        ...

    @property
    def IncludeRecurrences(self) -> bool:
        """
        Get: IncludeRecurrences(self: ItemsClass) -> bool
        Set: IncludeRecurrences(self: ItemsClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ItemsClass) -> object """
        ...

    @property
    def RawTable(self) -> object:
        """ Get: RawTable(self: ItemsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ItemsClass) -> NameSpace """
        ...


    def Add(self, Type:object) -> object:
        """ Add(self: ItemsClass, Type: object) -> object """
        ...

    def add_ItemAdd(self): # -> 
        """ add_ItemAdd(self: ItemsClass, : ItemsEvents_ItemAddEventHandler) """
        ...

    def add_ItemChange(self): # -> 
        """ add_ItemChange(self: ItemsClass, : ItemsEvents_ItemChangeEventHandler) """
        ...

    def add_ItemRemove(self): # -> 
        """ add_ItemRemove(self: ItemsClass, : ItemsEvents_ItemRemoveEventHandler) """
        ...

    def Find(self, Filter:str) -> object:
        """ Find(self: ItemsClass, Filter: str) -> object """
        ...

    def FindNext(self) -> object:
        """ FindNext(self: ItemsClass) -> object """
        ...

    def GetFirst(self) -> object:
        """ GetFirst(self: ItemsClass) -> object """
        ...

    def GetLast(self) -> object:
        """ GetLast(self: ItemsClass) -> object """
        ...

    def GetNext(self) -> object:
        """ GetNext(self: ItemsClass) -> object """
        ...

    def GetPrevious(self) -> object:
        """ GetPrevious(self: ItemsClass) -> object """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: ItemsClass, Index: int) """
        ...

    def remove_ItemAdd(self): # -> 
        """ remove_ItemAdd(self: ItemsClass, : ItemsEvents_ItemAddEventHandler) """
        ...

    def remove_ItemChange(self): # -> 
        """ remove_ItemChange(self: ItemsClass, : ItemsEvents_ItemChangeEventHandler) """
        ...

    def remove_ItemRemove(self): # -> 
        """ remove_ItemRemove(self: ItemsClass, : ItemsEvents_ItemRemoveEventHandler) """
        ...

    def ResetColumns(self): # -> 
        """ ResetColumns(self: ItemsClass) """
        ...

    def Restrict(self, Filter:str) -> Items:
        """ Restrict(self: ItemsClass, Filter: str) -> Items """
        ...

    def SetColumns(self, Columns:str): # -> 
        """ SetColumns(self: ItemsClass, Columns: str) """
        ...

    def Sort(self, Property:str, Descending:object): # -> 
        """ Sort(self: ItemsClass, Property: str, Descending: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    ItemAdd = ...
    ItemChange = ...
    ItemRemove = ...


class ItemsEvents: # skipped bases: <type 'object'>
    """ no doc """
    def ItemAdd(self, Item:object): # -> 
        """ ItemAdd(self: ItemsEvents, Item: object) """
        ...

    def ItemChange(self, Item:object): # -> 
        """ ItemChange(self: ItemsEvents, Item: object) """
        ...

    def ItemRemove(self): # -> 
        """ ItemRemove(self: ItemsEvents) """
        ...


class ItemsEvents_ItemAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemsEvents_ItemAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item:object): # -> 
        """ Invoke(self: ItemsEvents_ItemAddEventHandler, Item: object) """
        ...


class ItemsEvents_ItemChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemsEvents_ItemChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item:object): # -> 
        """ Invoke(self: ItemsEvents_ItemChangeEventHandler, Item: object) """
        ...


class ItemsEvents_ItemRemoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ItemsEvents_ItemRemoveEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ItemsEvents_ItemRemoveEventHandler) """
        ...


class ItemsEvents_SinkHelper(ItemsEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_ItemAddDelegate = ...
    m_ItemChangeDelegate = ...
    m_ItemRemoveDelegate = ...


class _JournalItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _JournalItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _JournalItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _JournalItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _JournalItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _JournalItem) -> str
        Set: BillingInformation(self: _JournalItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _JournalItem) -> str
        Set: Body(self: _JournalItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _JournalItem) -> str
        Set: Categories(self: _JournalItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _JournalItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _JournalItem) -> str
        Set: Companies(self: _JournalItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _JournalItem) -> Conflicts """
        ...

    @property
    def ContactNames(self) -> str:
        """
        Get: ContactNames(self: _JournalItem) -> str
        Set: ContactNames(self: _JournalItem) = value
        """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _JournalItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _JournalItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _JournalItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _JournalItem) -> DateTime """
        ...

    @property
    def DocPosted(self) -> bool:
        """
        Get: DocPosted(self: _JournalItem) -> bool
        Set: DocPosted(self: _JournalItem) = value
        """
        ...

    @property
    def DocPrinted(self) -> bool:
        """
        Get: DocPrinted(self: _JournalItem) -> bool
        Set: DocPrinted(self: _JournalItem) = value
        """
        ...

    @property
    def DocRouted(self) -> bool:
        """
        Get: DocRouted(self: _JournalItem) -> bool
        Set: DocRouted(self: _JournalItem) = value
        """
        ...

    @property
    def DocSaved(self) -> bool:
        """
        Get: DocSaved(self: _JournalItem) -> bool
        Set: DocSaved(self: _JournalItem) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _JournalItem) -> OlDownloadState """
        ...

    @property
    def Duration(self) -> int:
        """
        Get: Duration(self: _JournalItem) -> int
        Set: Duration(self: _JournalItem) = value
        """
        ...

    @property
    def End(self) -> DateTime:
        """
        Get: End(self: _JournalItem) -> DateTime
        Set: End(self: _JournalItem) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _JournalItem) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _JournalItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _JournalItem) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _JournalItem) -> OlImportance
        Set: Importance(self: _JournalItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _JournalItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _JournalItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _JournalItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _JournalItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _JournalItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _JournalItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _JournalItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _JournalItem) -> str
        Set: MessageClass(self: _JournalItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _JournalItem) -> str
        Set: Mileage(self: _JournalItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _JournalItem) -> bool
        Set: NoAging(self: _JournalItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _JournalItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _JournalItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _JournalItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _JournalItem) -> PropertyAccessor """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: _JournalItem) -> Recipients """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _JournalItem) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _JournalItem) -> OlSensitivity
        Set: Sensitivity(self: _JournalItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _JournalItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _JournalItem) -> int """
        ...

    @property
    def Start(self) -> DateTime:
        """
        Get: Start(self: _JournalItem) -> DateTime
        Set: Start(self: _JournalItem) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _JournalItem) -> str
        Set: Subject(self: _JournalItem) = value
        """
        ...

    @property
    def Type(self) -> str:
        """
        Get: Type(self: _JournalItem) -> str
        Set: Type(self: _JournalItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _JournalItem) -> bool
        Set: UnRead(self: _JournalItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _JournalItem) -> UserProperties """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _JournalItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _JournalItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _JournalItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _JournalItem, Modal: object) """
        ...

    def Forward(self) -> MailItem:
        """ Forward(self: _JournalItem) -> MailItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _JournalItem) -> Conversation """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _JournalItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _JournalItem) """
        ...

    def Reply(self) -> MailItem:
        """ Reply(self: _JournalItem) -> MailItem """
        ...

    def ReplyAll(self) -> MailItem:
        """ ReplyAll(self: _JournalItem) -> MailItem """
        ...

    def Save(self): # -> 
        """ Save(self: _JournalItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _JournalItem, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _JournalItem) """
        ...

    def StartTimer(self): # -> 
        """ StartTimer(self: _JournalItem) """
        ...

    def StopTimer(self): # -> 
        """ StopTimer(self: _JournalItem) """
        ...


class JournalItem(ItemEvents_10_Event, _JournalItem): # skipped bases: <type 'object'>
    """ no doc """
    pass

class JournalItemClass(ItemEvents_Event, JournalItem, __ComObject): # skipped bases: <type 'ItemEvents_10_Event'>, <type '_JournalItem'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: JournalItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: JournalItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: JournalItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: JournalItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: JournalItemClass) -> str
        Set: BillingInformation(self: JournalItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: JournalItemClass) -> str
        Set: Body(self: JournalItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: JournalItemClass) -> str
        Set: Categories(self: JournalItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: JournalItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: JournalItemClass) -> str
        Set: Companies(self: JournalItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: JournalItemClass) -> Conflicts """
        ...

    @property
    def ContactNames(self) -> str:
        """
        Get: ContactNames(self: JournalItemClass) -> str
        Set: ContactNames(self: JournalItemClass) = value
        """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: JournalItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: JournalItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: JournalItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: JournalItemClass) -> DateTime """
        ...

    @property
    def DocPosted(self) -> bool:
        """
        Get: DocPosted(self: JournalItemClass) -> bool
        Set: DocPosted(self: JournalItemClass) = value
        """
        ...

    @property
    def DocPrinted(self) -> bool:
        """
        Get: DocPrinted(self: JournalItemClass) -> bool
        Set: DocPrinted(self: JournalItemClass) = value
        """
        ...

    @property
    def DocRouted(self) -> bool:
        """
        Get: DocRouted(self: JournalItemClass) -> bool
        Set: DocRouted(self: JournalItemClass) = value
        """
        ...

    @property
    def DocSaved(self) -> bool:
        """
        Get: DocSaved(self: JournalItemClass) -> bool
        Set: DocSaved(self: JournalItemClass) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: JournalItemClass) -> OlDownloadState """
        ...

    @property
    def Duration(self) -> int:
        """
        Get: Duration(self: JournalItemClass) -> int
        Set: Duration(self: JournalItemClass) = value
        """
        ...

    @property
    def End(self) -> DateTime:
        """
        Get: End(self: JournalItemClass) -> DateTime
        Set: End(self: JournalItemClass) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: JournalItemClass) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: JournalItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: JournalItemClass) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: JournalItemClass) -> OlImportance
        Set: Importance(self: JournalItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: JournalItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: JournalItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: JournalItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: JournalItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: JournalItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: JournalItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: JournalItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: JournalItemClass) -> str
        Set: MessageClass(self: JournalItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: JournalItemClass) -> str
        Set: Mileage(self: JournalItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: JournalItemClass) -> bool
        Set: NoAging(self: JournalItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: JournalItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: JournalItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: JournalItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: JournalItemClass) -> PropertyAccessor """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: JournalItemClass) -> Recipients """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: JournalItemClass) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: JournalItemClass) -> OlSensitivity
        Set: Sensitivity(self: JournalItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: JournalItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: JournalItemClass) -> int """
        ...

    @property
    def Start(self) -> DateTime:
        """
        Get: Start(self: JournalItemClass) -> DateTime
        Set: Start(self: JournalItemClass) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: JournalItemClass) -> str
        Set: Subject(self: JournalItemClass) = value
        """
        ...

    @property
    def Type(self) -> str:
        """
        Get: Type(self: JournalItemClass) -> str
        Set: Type(self: JournalItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: JournalItemClass) -> bool
        Set: UnRead(self: JournalItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: JournalItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: JournalItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: JournalItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: JournalItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: JournalItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: JournalItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: JournalItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: JournalItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: JournalItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: JournalItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: JournalItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: JournalItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: JournalItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: JournalItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: JournalItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: JournalItemClass, Modal: object) """
        ...

    def Forward(self) -> MailItem:
        """ Forward(self: JournalItemClass) -> MailItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: JournalItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: JournalItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: JournalItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: JournalItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: JournalItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: JournalItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: JournalItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: JournalItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: JournalItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: JournalItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: JournalItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: JournalItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: JournalItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: JournalItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: JournalItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: JournalItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: JournalItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: JournalItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: JournalItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: JournalItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: JournalItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: JournalItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: JournalItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: JournalItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: JournalItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: JournalItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: JournalItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: JournalItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: JournalItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: JournalItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: JournalItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: JournalItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: JournalItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: JournalItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: JournalItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: JournalItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: JournalItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: JournalItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: JournalItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: JournalItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: JournalItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: JournalItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: JournalItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: JournalItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Reply(self) -> MailItem:
        """ Reply(self: JournalItemClass) -> MailItem """
        ...

    def ReplyAll(self) -> MailItem:
        """ ReplyAll(self: JournalItemClass) -> MailItem """
        ...

    def Save(self): # -> 
        """ Save(self: JournalItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: JournalItemClass, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: JournalItemClass) """
        ...

    def StartTimer(self): # -> 
        """ StartTimer(self: JournalItemClass) """
        ...

    def StopTimer(self): # -> 
        """ StopTimer(self: JournalItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_10_Event_Forward = ...
    ItemEvents_10_Event_Reply = ...
    ItemEvents_10_Event_ReplyAll = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Send = ...
    Unload = ...
    Write = ...


class _JournalModule: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _JournalModule) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _JournalModule) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _JournalModule) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: _JournalModule) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: _JournalModule) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _JournalModule) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: _JournalModule) -> int
        Set: Position(self: _JournalModule) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _JournalModule) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _JournalModule) -> bool
        Set: Visible(self: _JournalModule) = value
        """
        ...



class JournalModule(_JournalModule): # skipped bases: <type 'object'>
    """ no doc """
    pass

class JournalModuleClass(JournalModule, __ComObject): # skipped bases: <type '_JournalModule'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: JournalModuleClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: JournalModuleClass) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: JournalModuleClass) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: JournalModuleClass) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: JournalModuleClass) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: JournalModuleClass) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: JournalModuleClass) -> int
        Set: Position(self: JournalModuleClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: JournalModuleClass) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: JournalModuleClass) -> bool
        Set: Visible(self: JournalModuleClass) = value
        """
        ...



class Link: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Link) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Link) -> OlObjectClass """
        ...

    @property
    def Item(self) -> object:
        """ Get: Item(self: Link) -> object """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Link) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Link) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Link) -> NameSpace """
        ...

    @property
    def Type(self) -> OlObjectClass:
        """ Get: Type(self: Link) -> OlObjectClass """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Links(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Links) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Links) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Links) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Links) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Links) -> NameSpace """
        ...


    def Add(self, Item:object) -> Link:
        """ Add(self: Links, Item: object) -> Link """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: Links, Index: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _MailItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _MailItem) -> Actions """
        ...

    @property
    def AlternateRecipientAllowed(self) -> bool:
        """
        Get: AlternateRecipientAllowed(self: _MailItem) -> bool
        Set: AlternateRecipientAllowed(self: _MailItem) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _MailItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _MailItem) -> Attachments """
        ...

    @property
    def AutoForwarded(self) -> bool:
        """
        Get: AutoForwarded(self: _MailItem) -> bool
        Set: AutoForwarded(self: _MailItem) = value
        """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _MailItem) -> bool """
        ...

    @property
    def BCC(self) -> str:
        """
        Get: BCC(self: _MailItem) -> str
        Set: BCC(self: _MailItem) = value
        """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _MailItem) -> str
        Set: BillingInformation(self: _MailItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _MailItem) -> str
        Set: Body(self: _MailItem) = value
        """
        ...

    @property
    def BodyFormat(self) -> OlBodyFormat:
        """
        Get: BodyFormat(self: _MailItem) -> OlBodyFormat
        Set: BodyFormat(self: _MailItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _MailItem) -> str
        Set: Categories(self: _MailItem) = value
        """
        ...

    @property
    def CC(self) -> str:
        """
        Get: CC(self: _MailItem) -> str
        Set: CC(self: _MailItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _MailItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _MailItem) -> str
        Set: Companies(self: _MailItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _MailItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _MailItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _MailItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _MailItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _MailItem) -> DateTime """
        ...

    @property
    def DeferredDeliveryTime(self) -> DateTime:
        """
        Get: DeferredDeliveryTime(self: _MailItem) -> DateTime
        Set: DeferredDeliveryTime(self: _MailItem) = value
        """
        ...

    @property
    def DeleteAfterSubmit(self) -> bool:
        """
        Get: DeleteAfterSubmit(self: _MailItem) -> bool
        Set: DeleteAfterSubmit(self: _MailItem) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _MailItem) -> OlDownloadState """
        ...

    @property
    def EnableSharedAttachments(self) -> bool:
        """
        Get: EnableSharedAttachments(self: _MailItem) -> bool
        Set: EnableSharedAttachments(self: _MailItem) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _MailItem) -> str """
        ...

    @property
    def ExpiryTime(self) -> DateTime:
        """
        Get: ExpiryTime(self: _MailItem) -> DateTime
        Set: ExpiryTime(self: _MailItem) = value
        """
        ...

    @property
    def FlagDueBy(self) -> DateTime:
        """
        Get: FlagDueBy(self: _MailItem) -> DateTime
        Set: FlagDueBy(self: _MailItem) = value
        """
        ...

    @property
    def FlagIcon(self) -> OlFlagIcon:
        """
        Get: FlagIcon(self: _MailItem) -> OlFlagIcon
        Set: FlagIcon(self: _MailItem) = value
        """
        ...

    @property
    def FlagRequest(self) -> str:
        """
        Get: FlagRequest(self: _MailItem) -> str
        Set: FlagRequest(self: _MailItem) = value
        """
        ...

    @property
    def FlagStatus(self) -> OlFlagStatus:
        """
        Get: FlagStatus(self: _MailItem) -> OlFlagStatus
        Set: FlagStatus(self: _MailItem) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _MailItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _MailItem) -> Inspector """
        ...

    @property
    def HasCoverSheet(self) -> bool:
        """
        Get: HasCoverSheet(self: _MailItem) -> bool
        Set: HasCoverSheet(self: _MailItem) = value
        """
        ...

    @property
    def HTMLBody(self) -> str:
        """
        Get: HTMLBody(self: _MailItem) -> str
        Set: HTMLBody(self: _MailItem) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _MailItem) -> OlImportance
        Set: Importance(self: _MailItem) = value
        """
        ...

    @property
    def InternetCodepage(self) -> int:
        """
        Get: InternetCodepage(self: _MailItem) -> int
        Set: InternetCodepage(self: _MailItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _MailItem) -> bool """
        ...

    @property
    def IsIPFax(self) -> bool:
        """
        Get: IsIPFax(self: _MailItem) -> bool
        Set: IsIPFax(self: _MailItem) = value
        """
        ...

    @property
    def IsMarkedAsTask(self) -> bool:
        """ Get: IsMarkedAsTask(self: _MailItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _MailItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _MailItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _MailItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _MailItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _MailItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _MailItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _MailItem) -> str
        Set: MessageClass(self: _MailItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _MailItem) -> str
        Set: Mileage(self: _MailItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _MailItem) -> bool
        Set: NoAging(self: _MailItem) = value
        """
        ...

    @property
    def OriginatorDeliveryReportRequested(self) -> bool:
        """
        Get: OriginatorDeliveryReportRequested(self: _MailItem) -> bool
        Set: OriginatorDeliveryReportRequested(self: _MailItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _MailItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _MailItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _MailItem) -> object """
        ...

    @property
    def Permission(self) -> OlPermission:
        """
        Get: Permission(self: _MailItem) -> OlPermission
        Set: Permission(self: _MailItem) = value
        """
        ...

    @property
    def PermissionService(self) -> OlPermissionService:
        """
        Get: PermissionService(self: _MailItem) -> OlPermissionService
        Set: PermissionService(self: _MailItem) = value
        """
        ...

    @property
    def PermissionTemplateGuid(self) -> str:
        """
        Get: PermissionTemplateGuid(self: _MailItem) -> str
        Set: PermissionTemplateGuid(self: _MailItem) = value
        """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _MailItem) -> PropertyAccessor """
        ...

    @property
    def ReadReceiptRequested(self) -> bool:
        """
        Get: ReadReceiptRequested(self: _MailItem) -> bool
        Set: ReadReceiptRequested(self: _MailItem) = value
        """
        ...

    @property
    def ReceivedByEntryID(self) -> str:
        """ Get: ReceivedByEntryID(self: _MailItem) -> str """
        ...

    @property
    def ReceivedByName(self) -> str:
        """ Get: ReceivedByName(self: _MailItem) -> str """
        ...

    @property
    def ReceivedOnBehalfOfEntryID(self) -> str:
        """ Get: ReceivedOnBehalfOfEntryID(self: _MailItem) -> str """
        ...

    @property
    def ReceivedOnBehalfOfName(self) -> str:
        """ Get: ReceivedOnBehalfOfName(self: _MailItem) -> str """
        ...

    @property
    def ReceivedTime(self) -> DateTime:
        """ Get: ReceivedTime(self: _MailItem) -> DateTime """
        ...

    @property
    def RecipientReassignmentProhibited(self) -> bool:
        """
        Get: RecipientReassignmentProhibited(self: _MailItem) -> bool
        Set: RecipientReassignmentProhibited(self: _MailItem) = value
        """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: _MailItem) -> Recipients """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: _MailItem) -> bool
        Set: ReminderOverrideDefault(self: _MailItem) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: _MailItem) -> bool
        Set: ReminderPlaySound(self: _MailItem) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: _MailItem) -> bool
        Set: ReminderSet(self: _MailItem) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: _MailItem) -> str
        Set: ReminderSoundFile(self: _MailItem) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: _MailItem) -> DateTime
        Set: ReminderTime(self: _MailItem) = value
        """
        ...

    @property
    def RemoteStatus(self) -> OlRemoteStatus:
        """
        Get: RemoteStatus(self: _MailItem) -> OlRemoteStatus
        Set: RemoteStatus(self: _MailItem) = value
        """
        ...

    @property
    def ReplyRecipientNames(self) -> str:
        """ Get: ReplyRecipientNames(self: _MailItem) -> str """
        ...

    @property
    def ReplyRecipients(self) -> Recipients:
        """ Get: ReplyRecipients(self: _MailItem) -> Recipients """
        ...

    @property
    def RetentionExpirationDate(self) -> DateTime:
        """ Get: RetentionExpirationDate(self: _MailItem) -> DateTime """
        ...

    @property
    def RetentionPolicyName(self) -> str:
        """ Get: RetentionPolicyName(self: _MailItem) -> str """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _MailItem) -> object
        Set: RTFBody(self: _MailItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _MailItem) -> bool """
        ...

    @property
    def SaveSentMessageFolder(self) -> MAPIFolder:
        """
        Get: SaveSentMessageFolder(self: _MailItem) -> MAPIFolder
        Set: SaveSentMessageFolder(self: _MailItem) = value
        """
        ...

    @property
    def Sender(self) -> AddressEntry:
        """
        Get: Sender(self: _MailItem) -> AddressEntry
        Set: Sender(self: _MailItem) = value
        """
        ...

    @property
    def SenderEmailAddress(self) -> str:
        """ Get: SenderEmailAddress(self: _MailItem) -> str """
        ...

    @property
    def SenderEmailType(self) -> str:
        """ Get: SenderEmailType(self: _MailItem) -> str """
        ...

    @property
    def SenderName(self) -> str:
        """ Get: SenderName(self: _MailItem) -> str """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: _MailItem) -> Account
        Set: SendUsingAccount(self: _MailItem) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _MailItem) -> OlSensitivity
        Set: Sensitivity(self: _MailItem) = value
        """
        ...

    @property
    def Sent(self) -> bool:
        """ Get: Sent(self: _MailItem) -> bool """
        ...

    @property
    def SentOn(self) -> DateTime:
        """ Get: SentOn(self: _MailItem) -> DateTime """
        ...

    @property
    def SentOnBehalfOfName(self) -> str:
        """
        Get: SentOnBehalfOfName(self: _MailItem) -> str
        Set: SentOnBehalfOfName(self: _MailItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _MailItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _MailItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _MailItem) -> str
        Set: Subject(self: _MailItem) = value
        """
        ...

    @property
    def Submitted(self) -> bool:
        """ Get: Submitted(self: _MailItem) -> bool """
        ...

    @property
    def TaskCompletedDate(self) -> DateTime:
        """
        Get: TaskCompletedDate(self: _MailItem) -> DateTime
        Set: TaskCompletedDate(self: _MailItem) = value
        """
        ...

    @property
    def TaskDueDate(self) -> DateTime:
        """
        Get: TaskDueDate(self: _MailItem) -> DateTime
        Set: TaskDueDate(self: _MailItem) = value
        """
        ...

    @property
    def TaskStartDate(self) -> DateTime:
        """
        Get: TaskStartDate(self: _MailItem) -> DateTime
        Set: TaskStartDate(self: _MailItem) = value
        """
        ...

    @property
    def TaskSubject(self) -> str:
        """
        Get: TaskSubject(self: _MailItem) -> str
        Set: TaskSubject(self: _MailItem) = value
        """
        ...

    @property
    def To(self) -> str:
        """
        Get: To(self: _MailItem) -> str
        Set: To(self: _MailItem) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: _MailItem) -> DateTime
        Set: ToDoTaskOrdinal(self: _MailItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _MailItem) -> bool
        Set: UnRead(self: _MailItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _MailItem) -> UserProperties """
        ...

    @property
    def VotingOptions(self) -> str:
        """
        Get: VotingOptions(self: _MailItem) -> str
        Set: VotingOptions(self: _MailItem) = value
        """
        ...

    @property
    def VotingResponse(self) -> str:
        """
        Get: VotingResponse(self: _MailItem) -> str
        Set: VotingResponse(self: _MailItem) = value
        """
        ...


    def AddBusinessCard(self, contact:ContactItem): # -> 
        """ AddBusinessCard(self: _MailItem, contact: ContactItem) """
        ...

    def ClearConversationIndex(self): # -> 
        """ ClearConversationIndex(self: _MailItem) """
        ...

    def ClearTaskFlag(self): # -> 
        """ ClearTaskFlag(self: _MailItem) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _MailItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _MailItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _MailItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _MailItem, Modal: object) """
        ...

    def Forward(self) -> MailItem:
        """ Forward(self: _MailItem) -> MailItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _MailItem) -> Conversation """
        ...

    def MarkAsTask(self, MarkInterval:OlMarkInterval): # -> 
        """ MarkAsTask(self: _MailItem, MarkInterval: OlMarkInterval) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _MailItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _MailItem) """
        ...

    def Reply(self) -> MailItem:
        """ Reply(self: _MailItem) -> MailItem """
        ...

    def ReplyAll(self) -> MailItem:
        """ ReplyAll(self: _MailItem) -> MailItem """
        ...

    def Save(self): # -> 
        """ Save(self: _MailItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _MailItem, Path: str, Type: object) """
        ...

    def Send(self): # -> 
        """ Send(self: _MailItem) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _MailItem) """
        ...


class MailItem(ItemEvents_10_Event, _MailItem): # skipped bases: <type 'object'>
    """ no doc """
    pass

class MailItemClass(ItemEvents_Event, MailItem, __ComObject): # skipped bases: <type 'ItemEvents_10_Event'>, <type '_MailItem'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: MailItemClass) -> Actions """
        ...

    @property
    def AlternateRecipientAllowed(self) -> bool:
        """
        Get: AlternateRecipientAllowed(self: MailItemClass) -> bool
        Set: AlternateRecipientAllowed(self: MailItemClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: MailItemClass) -> Attachments """
        ...

    @property
    def AutoForwarded(self) -> bool:
        """
        Get: AutoForwarded(self: MailItemClass) -> bool
        Set: AutoForwarded(self: MailItemClass) = value
        """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: MailItemClass) -> bool """
        ...

    @property
    def BCC(self) -> str:
        """
        Get: BCC(self: MailItemClass) -> str
        Set: BCC(self: MailItemClass) = value
        """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: MailItemClass) -> str
        Set: BillingInformation(self: MailItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: MailItemClass) -> str
        Set: Body(self: MailItemClass) = value
        """
        ...

    @property
    def BodyFormat(self) -> OlBodyFormat:
        """
        Get: BodyFormat(self: MailItemClass) -> OlBodyFormat
        Set: BodyFormat(self: MailItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: MailItemClass) -> str
        Set: Categories(self: MailItemClass) = value
        """
        ...

    @property
    def CC(self) -> str:
        """
        Get: CC(self: MailItemClass) -> str
        Set: CC(self: MailItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: MailItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: MailItemClass) -> str
        Set: Companies(self: MailItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: MailItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: MailItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: MailItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: MailItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: MailItemClass) -> DateTime """
        ...

    @property
    def DeferredDeliveryTime(self) -> DateTime:
        """
        Get: DeferredDeliveryTime(self: MailItemClass) -> DateTime
        Set: DeferredDeliveryTime(self: MailItemClass) = value
        """
        ...

    @property
    def DeleteAfterSubmit(self) -> bool:
        """
        Get: DeleteAfterSubmit(self: MailItemClass) -> bool
        Set: DeleteAfterSubmit(self: MailItemClass) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: MailItemClass) -> OlDownloadState """
        ...

    @property
    def EnableSharedAttachments(self) -> bool:
        """
        Get: EnableSharedAttachments(self: MailItemClass) -> bool
        Set: EnableSharedAttachments(self: MailItemClass) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: MailItemClass) -> str """
        ...

    @property
    def ExpiryTime(self) -> DateTime:
        """
        Get: ExpiryTime(self: MailItemClass) -> DateTime
        Set: ExpiryTime(self: MailItemClass) = value
        """
        ...

    @property
    def FlagDueBy(self) -> DateTime:
        """
        Get: FlagDueBy(self: MailItemClass) -> DateTime
        Set: FlagDueBy(self: MailItemClass) = value
        """
        ...

    @property
    def FlagIcon(self) -> OlFlagIcon:
        """
        Get: FlagIcon(self: MailItemClass) -> OlFlagIcon
        Set: FlagIcon(self: MailItemClass) = value
        """
        ...

    @property
    def FlagRequest(self) -> str:
        """
        Get: FlagRequest(self: MailItemClass) -> str
        Set: FlagRequest(self: MailItemClass) = value
        """
        ...

    @property
    def FlagStatus(self) -> OlFlagStatus:
        """
        Get: FlagStatus(self: MailItemClass) -> OlFlagStatus
        Set: FlagStatus(self: MailItemClass) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: MailItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: MailItemClass) -> Inspector """
        ...

    @property
    def HasCoverSheet(self) -> bool:
        """
        Get: HasCoverSheet(self: MailItemClass) -> bool
        Set: HasCoverSheet(self: MailItemClass) = value
        """
        ...

    @property
    def HTMLBody(self) -> str:
        """
        Get: HTMLBody(self: MailItemClass) -> str
        Set: HTMLBody(self: MailItemClass) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: MailItemClass) -> OlImportance
        Set: Importance(self: MailItemClass) = value
        """
        ...

    @property
    def InternetCodepage(self) -> int:
        """
        Get: InternetCodepage(self: MailItemClass) -> int
        Set: InternetCodepage(self: MailItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: MailItemClass) -> bool """
        ...

    @property
    def IsIPFax(self) -> bool:
        """
        Get: IsIPFax(self: MailItemClass) -> bool
        Set: IsIPFax(self: MailItemClass) = value
        """
        ...

    @property
    def IsMarkedAsTask(self) -> bool:
        """ Get: IsMarkedAsTask(self: MailItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: MailItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: MailItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: MailItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: MailItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: MailItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: MailItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: MailItemClass) -> str
        Set: MessageClass(self: MailItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: MailItemClass) -> str
        Set: Mileage(self: MailItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: MailItemClass) -> bool
        Set: NoAging(self: MailItemClass) = value
        """
        ...

    @property
    def OriginatorDeliveryReportRequested(self) -> bool:
        """
        Get: OriginatorDeliveryReportRequested(self: MailItemClass) -> bool
        Set: OriginatorDeliveryReportRequested(self: MailItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: MailItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: MailItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailItemClass) -> object """
        ...

    @property
    def Permission(self) -> OlPermission:
        """
        Get: Permission(self: MailItemClass) -> OlPermission
        Set: Permission(self: MailItemClass) = value
        """
        ...

    @property
    def PermissionService(self) -> OlPermissionService:
        """
        Get: PermissionService(self: MailItemClass) -> OlPermissionService
        Set: PermissionService(self: MailItemClass) = value
        """
        ...

    @property
    def PermissionTemplateGuid(self) -> str:
        """
        Get: PermissionTemplateGuid(self: MailItemClass) -> str
        Set: PermissionTemplateGuid(self: MailItemClass) = value
        """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: MailItemClass) -> PropertyAccessor """
        ...

    @property
    def ReadReceiptRequested(self) -> bool:
        """
        Get: ReadReceiptRequested(self: MailItemClass) -> bool
        Set: ReadReceiptRequested(self: MailItemClass) = value
        """
        ...

    @property
    def ReceivedByEntryID(self) -> str:
        """ Get: ReceivedByEntryID(self: MailItemClass) -> str """
        ...

    @property
    def ReceivedByName(self) -> str:
        """ Get: ReceivedByName(self: MailItemClass) -> str """
        ...

    @property
    def ReceivedOnBehalfOfEntryID(self) -> str:
        """ Get: ReceivedOnBehalfOfEntryID(self: MailItemClass) -> str """
        ...

    @property
    def ReceivedOnBehalfOfName(self) -> str:
        """ Get: ReceivedOnBehalfOfName(self: MailItemClass) -> str """
        ...

    @property
    def ReceivedTime(self) -> DateTime:
        """ Get: ReceivedTime(self: MailItemClass) -> DateTime """
        ...

    @property
    def RecipientReassignmentProhibited(self) -> bool:
        """
        Get: RecipientReassignmentProhibited(self: MailItemClass) -> bool
        Set: RecipientReassignmentProhibited(self: MailItemClass) = value
        """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: MailItemClass) -> Recipients """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: MailItemClass) -> bool
        Set: ReminderOverrideDefault(self: MailItemClass) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: MailItemClass) -> bool
        Set: ReminderPlaySound(self: MailItemClass) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: MailItemClass) -> bool
        Set: ReminderSet(self: MailItemClass) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: MailItemClass) -> str
        Set: ReminderSoundFile(self: MailItemClass) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: MailItemClass) -> DateTime
        Set: ReminderTime(self: MailItemClass) = value
        """
        ...

    @property
    def RemoteStatus(self) -> OlRemoteStatus:
        """
        Get: RemoteStatus(self: MailItemClass) -> OlRemoteStatus
        Set: RemoteStatus(self: MailItemClass) = value
        """
        ...

    @property
    def ReplyRecipientNames(self) -> str:
        """ Get: ReplyRecipientNames(self: MailItemClass) -> str """
        ...

    @property
    def ReplyRecipients(self) -> Recipients:
        """ Get: ReplyRecipients(self: MailItemClass) -> Recipients """
        ...

    @property
    def RetentionExpirationDate(self) -> DateTime:
        """ Get: RetentionExpirationDate(self: MailItemClass) -> DateTime """
        ...

    @property
    def RetentionPolicyName(self) -> str:
        """ Get: RetentionPolicyName(self: MailItemClass) -> str """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: MailItemClass) -> object
        Set: RTFBody(self: MailItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: MailItemClass) -> bool """
        ...

    @property
    def SaveSentMessageFolder(self) -> MAPIFolder:
        """
        Get: SaveSentMessageFolder(self: MailItemClass) -> MAPIFolder
        Set: SaveSentMessageFolder(self: MailItemClass) = value
        """
        ...

    @property
    def Sender(self) -> AddressEntry:
        """
        Get: Sender(self: MailItemClass) -> AddressEntry
        Set: Sender(self: MailItemClass) = value
        """
        ...

    @property
    def SenderEmailAddress(self) -> str:
        """ Get: SenderEmailAddress(self: MailItemClass) -> str """
        ...

    @property
    def SenderEmailType(self) -> str:
        """ Get: SenderEmailType(self: MailItemClass) -> str """
        ...

    @property
    def SenderName(self) -> str:
        """ Get: SenderName(self: MailItemClass) -> str """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: MailItemClass) -> Account
        Set: SendUsingAccount(self: MailItemClass) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: MailItemClass) -> OlSensitivity
        Set: Sensitivity(self: MailItemClass) = value
        """
        ...

    @property
    def Sent(self) -> bool:
        """ Get: Sent(self: MailItemClass) -> bool """
        ...

    @property
    def SentOn(self) -> DateTime:
        """ Get: SentOn(self: MailItemClass) -> DateTime """
        ...

    @property
    def SentOnBehalfOfName(self) -> str:
        """
        Get: SentOnBehalfOfName(self: MailItemClass) -> str
        Set: SentOnBehalfOfName(self: MailItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: MailItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: MailItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: MailItemClass) -> str
        Set: Subject(self: MailItemClass) = value
        """
        ...

    @property
    def Submitted(self) -> bool:
        """ Get: Submitted(self: MailItemClass) -> bool """
        ...

    @property
    def TaskCompletedDate(self) -> DateTime:
        """
        Get: TaskCompletedDate(self: MailItemClass) -> DateTime
        Set: TaskCompletedDate(self: MailItemClass) = value
        """
        ...

    @property
    def TaskDueDate(self) -> DateTime:
        """
        Get: TaskDueDate(self: MailItemClass) -> DateTime
        Set: TaskDueDate(self: MailItemClass) = value
        """
        ...

    @property
    def TaskStartDate(self) -> DateTime:
        """
        Get: TaskStartDate(self: MailItemClass) -> DateTime
        Set: TaskStartDate(self: MailItemClass) = value
        """
        ...

    @property
    def TaskSubject(self) -> str:
        """
        Get: TaskSubject(self: MailItemClass) -> str
        Set: TaskSubject(self: MailItemClass) = value
        """
        ...

    @property
    def To(self) -> str:
        """
        Get: To(self: MailItemClass) -> str
        Set: To(self: MailItemClass) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: MailItemClass) -> DateTime
        Set: ToDoTaskOrdinal(self: MailItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: MailItemClass) -> bool
        Set: UnRead(self: MailItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: MailItemClass) -> UserProperties """
        ...

    @property
    def VotingOptions(self) -> str:
        """
        Get: VotingOptions(self: MailItemClass) -> str
        Set: VotingOptions(self: MailItemClass) = value
        """
        ...

    @property
    def VotingResponse(self) -> str:
        """
        Get: VotingResponse(self: MailItemClass) -> str
        Set: VotingResponse(self: MailItemClass) = value
        """
        ...


    def AddBusinessCard(self, contact:ContactItem): # -> 
        """ AddBusinessCard(self: MailItemClass, contact: ContactItem) """
        ...

    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: MailItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: MailItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: MailItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: MailItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: MailItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: MailItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: MailItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: MailItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: MailItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: MailItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: MailItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def ClearConversationIndex(self): # -> 
        """ ClearConversationIndex(self: MailItemClass) """
        ...

    def ClearTaskFlag(self): # -> 
        """ ClearTaskFlag(self: MailItemClass) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: MailItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: MailItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: MailItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: MailItemClass, Modal: object) """
        ...

    def Forward(self) -> MailItem:
        """ Forward(self: MailItemClass) -> MailItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: MailItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: MailItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: MailItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: MailItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: MailItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: MailItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: MailItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: MailItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: MailItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: MailItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: MailItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: MailItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: MailItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: MailItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: MailItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: MailItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: MailItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: MailItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: MailItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: MailItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: MailItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: MailItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: MailItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: MailItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: MailItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: MailItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: MailItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: MailItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: MailItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: MailItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: MailItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def MarkAsTask(self, MarkInterval:OlMarkInterval): # -> 
        """ MarkAsTask(self: MailItemClass, MarkInterval: OlMarkInterval) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: MailItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: MailItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: MailItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: MailItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: MailItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: MailItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: MailItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: MailItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: MailItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: MailItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: MailItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: MailItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: MailItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Reply(self) -> MailItem:
        """ Reply(self: MailItemClass) -> MailItem """
        ...

    def ReplyAll(self) -> MailItem:
        """ ReplyAll(self: MailItemClass) -> MailItem """
        ...

    def Save(self): # -> 
        """ Save(self: MailItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: MailItemClass, Path: str, Type: object) """
        ...

    def Send(self): # -> 
        """ Send(self: MailItemClass) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: MailItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_10_Event_Forward = ...
    ItemEvents_10_Event_Reply = ...
    ItemEvents_10_Event_ReplyAll = ...
    ItemEvents_10_Event_Send = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Unload = ...
    Write = ...


class _MailModule: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _MailModule) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _MailModule) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _MailModule) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: _MailModule) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: _MailModule) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _MailModule) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: _MailModule) -> int
        Set: Position(self: _MailModule) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _MailModule) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _MailModule) -> bool
        Set: Visible(self: _MailModule) = value
        """
        ...



class MailModule(_MailModule): # skipped bases: <type 'object'>
    """ no doc """
    pass

class MailModuleClass(__ComObject, MailModule): # skipped bases: <type '_MailModule'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailModuleClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: MailModuleClass) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: MailModuleClass) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: MailModuleClass) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: MailModuleClass) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailModuleClass) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: MailModuleClass) -> int
        Set: Position(self: MailModuleClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: MailModuleClass) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: MailModuleClass) -> bool
        Set: Visible(self: MailModuleClass) = value
        """
        ...



class MAPIFolderEvents_12: # skipped bases: <type 'object'>
    """ no doc """
    def BeforeFolderMove(self, MoveTo, Cancel) -> bool:
        """ BeforeFolderMove(self: MAPIFolderEvents_12, MoveTo: MAPIFolder) -> bool """
        ...

    def BeforeItemMove(self, Item, MoveTo, Cancel) -> bool:
        """ BeforeItemMove(self: MAPIFolderEvents_12, Item: object, MoveTo: MAPIFolder) -> bool """
        ...


class MAPIFolderEvents_12_BeforeFolderMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ MAPIFolderEvents_12_BeforeFolderMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, MoveTo, Cancel) -> bool:
        """ Invoke(self: MAPIFolderEvents_12_BeforeFolderMoveEventHandler, MoveTo: MAPIFolder) -> bool """
        ...


class MAPIFolderEvents_12_BeforeItemMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ MAPIFolderEvents_12_BeforeItemMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item, MoveTo, Cancel) -> bool:
        """ Invoke(self: MAPIFolderEvents_12_BeforeItemMoveEventHandler, Item: object, MoveTo: MAPIFolder) -> bool """
        ...


class MAPIFolderEvents_12_SinkHelper(MAPIFolderEvents_12): # skipped bases: <type 'object'>
    """ no doc """
    m_BeforeFolderMoveDelegate = ...
    m_BeforeItemMoveDelegate = ...
    m_dwCookie = ...


class _MarkAsTaskRuleAction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: _MarkAsTaskRuleAction) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _MarkAsTaskRuleAction) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _MarkAsTaskRuleAction) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _MarkAsTaskRuleAction) -> bool
        Set: Enabled(self: _MarkAsTaskRuleAction) = value
        """
        ...

    @property
    def FlagTo(self) -> str:
        """
        Get: FlagTo(self: _MarkAsTaskRuleAction) -> str
        Set: FlagTo(self: _MarkAsTaskRuleAction) = value
        """
        ...

    @property
    def MarkInterval(self) -> OlMarkInterval:
        """
        Get: MarkInterval(self: _MarkAsTaskRuleAction) -> OlMarkInterval
        Set: MarkInterval(self: _MarkAsTaskRuleAction) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _MarkAsTaskRuleAction) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _MarkAsTaskRuleAction) -> NameSpace """
        ...



class MarkAsTaskRuleAction(_MarkAsTaskRuleAction): # skipped bases: <type 'object'>
    """ no doc """
    pass

class MarkAsTaskRuleActionClass(MarkAsTaskRuleAction, __ComObject): # skipped bases: <type '_MarkAsTaskRuleAction'>, <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: MarkAsTaskRuleActionClass) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: MarkAsTaskRuleActionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: MarkAsTaskRuleActionClass) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: MarkAsTaskRuleActionClass) -> bool
        Set: Enabled(self: MarkAsTaskRuleActionClass) = value
        """
        ...

    @property
    def FlagTo(self) -> str:
        """
        Get: FlagTo(self: MarkAsTaskRuleActionClass) -> str
        Set: FlagTo(self: MarkAsTaskRuleActionClass) = value
        """
        ...

    @property
    def MarkInterval(self) -> OlMarkInterval:
        """
        Get: MarkInterval(self: MarkAsTaskRuleActionClass) -> OlMarkInterval
        Set: MarkInterval(self: MarkAsTaskRuleActionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MarkAsTaskRuleActionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: MarkAsTaskRuleActionClass) -> NameSpace """
        ...



class _MeetingItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _MeetingItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _MeetingItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _MeetingItem) -> Attachments """
        ...

    @property
    def AutoForwarded(self) -> bool:
        """
        Get: AutoForwarded(self: _MeetingItem) -> bool
        Set: AutoForwarded(self: _MeetingItem) = value
        """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _MeetingItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _MeetingItem) -> str
        Set: BillingInformation(self: _MeetingItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _MeetingItem) -> str
        Set: Body(self: _MeetingItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _MeetingItem) -> str
        Set: Categories(self: _MeetingItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _MeetingItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _MeetingItem) -> str
        Set: Companies(self: _MeetingItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _MeetingItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _MeetingItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _MeetingItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _MeetingItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _MeetingItem) -> DateTime """
        ...

    @property
    def DeferredDeliveryTime(self) -> DateTime:
        """
        Get: DeferredDeliveryTime(self: _MeetingItem) -> DateTime
        Set: DeferredDeliveryTime(self: _MeetingItem) = value
        """
        ...

    @property
    def DeleteAfterSubmit(self) -> bool:
        """
        Get: DeleteAfterSubmit(self: _MeetingItem) -> bool
        Set: DeleteAfterSubmit(self: _MeetingItem) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _MeetingItem) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _MeetingItem) -> str """
        ...

    @property
    def ExpiryTime(self) -> DateTime:
        """
        Get: ExpiryTime(self: _MeetingItem) -> DateTime
        Set: ExpiryTime(self: _MeetingItem) = value
        """
        ...

    @property
    def FlagDueBy(self) -> DateTime:
        """
        Get: FlagDueBy(self: _MeetingItem) -> DateTime
        Set: FlagDueBy(self: _MeetingItem) = value
        """
        ...

    @property
    def FlagIcon(self) -> OlFlagIcon:
        """
        Get: FlagIcon(self: _MeetingItem) -> OlFlagIcon
        Set: FlagIcon(self: _MeetingItem) = value
        """
        ...

    @property
    def FlagRequest(self) -> str:
        """
        Get: FlagRequest(self: _MeetingItem) -> str
        Set: FlagRequest(self: _MeetingItem) = value
        """
        ...

    @property
    def FlagStatus(self) -> OlFlagStatus:
        """
        Get: FlagStatus(self: _MeetingItem) -> OlFlagStatus
        Set: FlagStatus(self: _MeetingItem) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _MeetingItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _MeetingItem) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _MeetingItem) -> OlImportance
        Set: Importance(self: _MeetingItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _MeetingItem) -> bool """
        ...

    @property
    def IsLatestVersion(self) -> bool:
        """ Get: IsLatestVersion(self: _MeetingItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _MeetingItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _MeetingItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _MeetingItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _MeetingItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _MeetingItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _MeetingItem) = value
        """
        ...

    @property
    def MeetingWorkspaceURL(self) -> str:
        """ Get: MeetingWorkspaceURL(self: _MeetingItem) -> str """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _MeetingItem) -> str
        Set: MessageClass(self: _MeetingItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _MeetingItem) -> str
        Set: Mileage(self: _MeetingItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _MeetingItem) -> bool
        Set: NoAging(self: _MeetingItem) = value
        """
        ...

    @property
    def OriginatorDeliveryReportRequested(self) -> bool:
        """
        Get: OriginatorDeliveryReportRequested(self: _MeetingItem) -> bool
        Set: OriginatorDeliveryReportRequested(self: _MeetingItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _MeetingItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _MeetingItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _MeetingItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _MeetingItem) -> PropertyAccessor """
        ...

    @property
    def ReceivedTime(self) -> DateTime:
        """
        Get: ReceivedTime(self: _MeetingItem) -> DateTime
        Set: ReceivedTime(self: _MeetingItem) = value
        """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: _MeetingItem) -> Recipients """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: _MeetingItem) -> bool
        Set: ReminderSet(self: _MeetingItem) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: _MeetingItem) -> DateTime
        Set: ReminderTime(self: _MeetingItem) = value
        """
        ...

    @property
    def ReplyRecipients(self) -> Recipients:
        """ Get: ReplyRecipients(self: _MeetingItem) -> Recipients """
        ...

    @property
    def RetentionExpirationDate(self) -> DateTime:
        """ Get: RetentionExpirationDate(self: _MeetingItem) -> DateTime """
        ...

    @property
    def RetentionPolicyName(self) -> str:
        """ Get: RetentionPolicyName(self: _MeetingItem) -> str """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _MeetingItem) -> object
        Set: RTFBody(self: _MeetingItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _MeetingItem) -> bool """
        ...

    @property
    def SaveSentMessageFolder(self) -> MAPIFolder:
        """
        Get: SaveSentMessageFolder(self: _MeetingItem) -> MAPIFolder
        Set: SaveSentMessageFolder(self: _MeetingItem) = value
        """
        ...

    @property
    def SenderEmailAddress(self) -> str:
        """ Get: SenderEmailAddress(self: _MeetingItem) -> str """
        ...

    @property
    def SenderEmailType(self) -> str:
        """ Get: SenderEmailType(self: _MeetingItem) -> str """
        ...

    @property
    def SenderName(self) -> str:
        """ Get: SenderName(self: _MeetingItem) -> str """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: _MeetingItem) -> Account
        Set: SendUsingAccount(self: _MeetingItem) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _MeetingItem) -> OlSensitivity
        Set: Sensitivity(self: _MeetingItem) = value
        """
        ...

    @property
    def Sent(self) -> bool:
        """ Get: Sent(self: _MeetingItem) -> bool """
        ...

    @property
    def SentOn(self) -> DateTime:
        """ Get: SentOn(self: _MeetingItem) -> DateTime """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _MeetingItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _MeetingItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _MeetingItem) -> str
        Set: Subject(self: _MeetingItem) = value
        """
        ...

    @property
    def Submitted(self) -> bool:
        """ Get: Submitted(self: _MeetingItem) -> bool """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _MeetingItem) -> bool
        Set: UnRead(self: _MeetingItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _MeetingItem) -> UserProperties """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _MeetingItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _MeetingItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _MeetingItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _MeetingItem, Modal: object) """
        ...

    def Forward(self) -> MeetingItem:
        """ Forward(self: _MeetingItem) -> MeetingItem """
        ...

    def GetAssociatedAppointment(self, AddToCalendar:bool) -> AppointmentItem:
        """ GetAssociatedAppointment(self: _MeetingItem, AddToCalendar: bool) -> AppointmentItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _MeetingItem) -> Conversation """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _MeetingItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _MeetingItem) """
        ...

    def Reply(self) -> MailItem:
        """ Reply(self: _MeetingItem) -> MailItem """
        ...

    def ReplyAll(self) -> MailItem:
        """ ReplyAll(self: _MeetingItem) -> MailItem """
        ...

    def Save(self): # -> 
        """ Save(self: _MeetingItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _MeetingItem, Path: str, Type: object) """
        ...

    def Send(self): # -> 
        """ Send(self: _MeetingItem) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _MeetingItem) """
        ...


class MeetingItem(_MeetingItem, ItemEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class MeetingItemClass(MeetingItem, ItemEvents_Event, __ComObject): # skipped bases: <type 'ItemEvents_10_Event'>, <type '_MeetingItem'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: MeetingItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: MeetingItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: MeetingItemClass) -> Attachments """
        ...

    @property
    def AutoForwarded(self) -> bool:
        """
        Get: AutoForwarded(self: MeetingItemClass) -> bool
        Set: AutoForwarded(self: MeetingItemClass) = value
        """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: MeetingItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: MeetingItemClass) -> str
        Set: BillingInformation(self: MeetingItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: MeetingItemClass) -> str
        Set: Body(self: MeetingItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: MeetingItemClass) -> str
        Set: Categories(self: MeetingItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: MeetingItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: MeetingItemClass) -> str
        Set: Companies(self: MeetingItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: MeetingItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: MeetingItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: MeetingItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: MeetingItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: MeetingItemClass) -> DateTime """
        ...

    @property
    def DeferredDeliveryTime(self) -> DateTime:
        """
        Get: DeferredDeliveryTime(self: MeetingItemClass) -> DateTime
        Set: DeferredDeliveryTime(self: MeetingItemClass) = value
        """
        ...

    @property
    def DeleteAfterSubmit(self) -> bool:
        """
        Get: DeleteAfterSubmit(self: MeetingItemClass) -> bool
        Set: DeleteAfterSubmit(self: MeetingItemClass) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: MeetingItemClass) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: MeetingItemClass) -> str """
        ...

    @property
    def ExpiryTime(self) -> DateTime:
        """
        Get: ExpiryTime(self: MeetingItemClass) -> DateTime
        Set: ExpiryTime(self: MeetingItemClass) = value
        """
        ...

    @property
    def FlagDueBy(self) -> DateTime:
        """
        Get: FlagDueBy(self: MeetingItemClass) -> DateTime
        Set: FlagDueBy(self: MeetingItemClass) = value
        """
        ...

    @property
    def FlagIcon(self) -> OlFlagIcon:
        """
        Get: FlagIcon(self: MeetingItemClass) -> OlFlagIcon
        Set: FlagIcon(self: MeetingItemClass) = value
        """
        ...

    @property
    def FlagRequest(self) -> str:
        """
        Get: FlagRequest(self: MeetingItemClass) -> str
        Set: FlagRequest(self: MeetingItemClass) = value
        """
        ...

    @property
    def FlagStatus(self) -> OlFlagStatus:
        """
        Get: FlagStatus(self: MeetingItemClass) -> OlFlagStatus
        Set: FlagStatus(self: MeetingItemClass) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: MeetingItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: MeetingItemClass) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: MeetingItemClass) -> OlImportance
        Set: Importance(self: MeetingItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: MeetingItemClass) -> bool """
        ...

    @property
    def IsLatestVersion(self) -> bool:
        """ Get: IsLatestVersion(self: MeetingItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: MeetingItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: MeetingItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: MeetingItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: MeetingItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: MeetingItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: MeetingItemClass) = value
        """
        ...

    @property
    def MeetingWorkspaceURL(self) -> str:
        """ Get: MeetingWorkspaceURL(self: MeetingItemClass) -> str """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: MeetingItemClass) -> str
        Set: MessageClass(self: MeetingItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: MeetingItemClass) -> str
        Set: Mileage(self: MeetingItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: MeetingItemClass) -> bool
        Set: NoAging(self: MeetingItemClass) = value
        """
        ...

    @property
    def OriginatorDeliveryReportRequested(self) -> bool:
        """
        Get: OriginatorDeliveryReportRequested(self: MeetingItemClass) -> bool
        Set: OriginatorDeliveryReportRequested(self: MeetingItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: MeetingItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: MeetingItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MeetingItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: MeetingItemClass) -> PropertyAccessor """
        ...

    @property
    def ReceivedTime(self) -> DateTime:
        """
        Get: ReceivedTime(self: MeetingItemClass) -> DateTime
        Set: ReceivedTime(self: MeetingItemClass) = value
        """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: MeetingItemClass) -> Recipients """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: MeetingItemClass) -> bool
        Set: ReminderSet(self: MeetingItemClass) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: MeetingItemClass) -> DateTime
        Set: ReminderTime(self: MeetingItemClass) = value
        """
        ...

    @property
    def ReplyRecipients(self) -> Recipients:
        """ Get: ReplyRecipients(self: MeetingItemClass) -> Recipients """
        ...

    @property
    def RetentionExpirationDate(self) -> DateTime:
        """ Get: RetentionExpirationDate(self: MeetingItemClass) -> DateTime """
        ...

    @property
    def RetentionPolicyName(self) -> str:
        """ Get: RetentionPolicyName(self: MeetingItemClass) -> str """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: MeetingItemClass) -> object
        Set: RTFBody(self: MeetingItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: MeetingItemClass) -> bool """
        ...

    @property
    def SaveSentMessageFolder(self) -> MAPIFolder:
        """
        Get: SaveSentMessageFolder(self: MeetingItemClass) -> MAPIFolder
        Set: SaveSentMessageFolder(self: MeetingItemClass) = value
        """
        ...

    @property
    def SenderEmailAddress(self) -> str:
        """ Get: SenderEmailAddress(self: MeetingItemClass) -> str """
        ...

    @property
    def SenderEmailType(self) -> str:
        """ Get: SenderEmailType(self: MeetingItemClass) -> str """
        ...

    @property
    def SenderName(self) -> str:
        """ Get: SenderName(self: MeetingItemClass) -> str """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: MeetingItemClass) -> Account
        Set: SendUsingAccount(self: MeetingItemClass) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: MeetingItemClass) -> OlSensitivity
        Set: Sensitivity(self: MeetingItemClass) = value
        """
        ...

    @property
    def Sent(self) -> bool:
        """ Get: Sent(self: MeetingItemClass) -> bool """
        ...

    @property
    def SentOn(self) -> DateTime:
        """ Get: SentOn(self: MeetingItemClass) -> DateTime """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: MeetingItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: MeetingItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: MeetingItemClass) -> str
        Set: Subject(self: MeetingItemClass) = value
        """
        ...

    @property
    def Submitted(self) -> bool:
        """ Get: Submitted(self: MeetingItemClass) -> bool """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: MeetingItemClass) -> bool
        Set: UnRead(self: MeetingItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: MeetingItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: MeetingItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: MeetingItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: MeetingItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: MeetingItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: MeetingItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: MeetingItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: MeetingItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: MeetingItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: MeetingItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: MeetingItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: MeetingItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: MeetingItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: MeetingItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: MeetingItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: MeetingItemClass, Modal: object) """
        ...

    def Forward(self) -> MeetingItem:
        """ Forward(self: MeetingItemClass) -> MeetingItem """
        ...

    def GetAssociatedAppointment(self, AddToCalendar:bool) -> AppointmentItem:
        """ GetAssociatedAppointment(self: MeetingItemClass, AddToCalendar: bool) -> AppointmentItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: MeetingItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: MeetingItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: MeetingItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: MeetingItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: MeetingItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: MeetingItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: MeetingItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: MeetingItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: MeetingItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: MeetingItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: MeetingItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: MeetingItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: MeetingItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: MeetingItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: MeetingItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: MeetingItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: MeetingItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: MeetingItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: MeetingItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: MeetingItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: MeetingItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: MeetingItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: MeetingItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: MeetingItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: MeetingItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: MeetingItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: MeetingItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: MeetingItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: MeetingItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: MeetingItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: MeetingItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: MeetingItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: MeetingItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: MeetingItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: MeetingItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: MeetingItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: MeetingItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: MeetingItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: MeetingItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: MeetingItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: MeetingItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: MeetingItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: MeetingItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: MeetingItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Reply(self) -> MailItem:
        """ Reply(self: MeetingItemClass) -> MailItem """
        ...

    def ReplyAll(self) -> MailItem:
        """ ReplyAll(self: MeetingItemClass) -> MailItem """
        ...

    def Save(self): # -> 
        """ Save(self: MeetingItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: MeetingItemClass, Path: str, Type: object) """
        ...

    def Send(self): # -> 
        """ Send(self: MeetingItemClass) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: MeetingItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_10_Event_Forward = ...
    ItemEvents_10_Event_Reply = ...
    ItemEvents_10_Event_ReplyAll = ...
    ItemEvents_10_Event_Send = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Unload = ...
    Write = ...


class _MobileItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _MobileItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _MobileItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _MobileItem) -> Attachments """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _MobileItem) -> str
        Set: BillingInformation(self: _MobileItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _MobileItem) -> str
        Set: Body(self: _MobileItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _MobileItem) -> str
        Set: Categories(self: _MobileItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _MobileItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _MobileItem) -> str
        Set: Companies(self: _MobileItem) = value
        """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _MobileItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _MobileItem) -> str """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _MobileItem) -> int """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _MobileItem) -> DateTime """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _MobileItem) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _MobileItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _MobileItem) -> Inspector """
        ...

    @property
    def HTMLBody(self) -> str:
        """
        Get: HTMLBody(self: _MobileItem) -> str
        Set: HTMLBody(self: _MobileItem) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _MobileItem) -> OlImportance
        Set: Importance(self: _MobileItem) = value
        """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _MobileItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _MobileItem) -> DateTime """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _MobileItem) -> object """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _MobileItem) -> str
        Set: MessageClass(self: _MobileItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _MobileItem) -> str
        Set: Mileage(self: _MobileItem) = value
        """
        ...

    @property
    def MobileFormat(self) -> OlMobileFormat:
        """ Get: MobileFormat(self: _MobileItem) -> OlMobileFormat """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _MobileItem) -> bool
        Set: NoAging(self: _MobileItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _MobileItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _MobileItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _MobileItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _MobileItem) -> PropertyAccessor """
        ...

    @property
    def ReceivedByEntryID(self) -> str:
        """ Get: ReceivedByEntryID(self: _MobileItem) -> str """
        ...

    @property
    def ReceivedByName(self) -> str:
        """ Get: ReceivedByName(self: _MobileItem) -> str """
        ...

    @property
    def ReceivedTime(self) -> DateTime:
        """ Get: ReceivedTime(self: _MobileItem) -> DateTime """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: _MobileItem) -> Recipients """
        ...

    @property
    def ReplyRecipientNames(self) -> str:
        """ Get: ReplyRecipientNames(self: _MobileItem) -> str """
        ...

    @property
    def ReplyRecipients(self) -> Recipients:
        """ Get: ReplyRecipients(self: _MobileItem) -> Recipients """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _MobileItem) -> bool """
        ...

    @property
    def SenderEmailAddress(self) -> str:
        """ Get: SenderEmailAddress(self: _MobileItem) -> str """
        ...

    @property
    def SenderEmailType(self) -> str:
        """ Get: SenderEmailType(self: _MobileItem) -> str """
        ...

    @property
    def SenderName(self) -> str:
        """ Get: SenderName(self: _MobileItem) -> str """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: _MobileItem) -> Account
        Set: SendUsingAccount(self: _MobileItem) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _MobileItem) -> OlSensitivity
        Set: Sensitivity(self: _MobileItem) = value
        """
        ...

    @property
    def Sent(self) -> bool:
        """ Get: Sent(self: _MobileItem) -> bool """
        ...

    @property
    def SentOn(self) -> DateTime:
        """ Get: SentOn(self: _MobileItem) -> DateTime """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _MobileItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _MobileItem) -> int """
        ...

    @property
    def SMILBody(self) -> str:
        """
        Get: SMILBody(self: _MobileItem) -> str
        Set: SMILBody(self: _MobileItem) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _MobileItem) -> str
        Set: Subject(self: _MobileItem) = value
        """
        ...

    @property
    def Submitted(self) -> bool:
        """ Get: Submitted(self: _MobileItem) -> bool """
        ...

    @property
    def To(self) -> str:
        """
        Get: To(self: _MobileItem) -> str
        Set: To(self: _MobileItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _MobileItem) -> bool
        Set: UnRead(self: _MobileItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _MobileItem) -> UserProperties """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _MobileItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _MobileItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _MobileItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _MobileItem, Modal: object) """
        ...

    def Forward(self) -> MobileItem:
        """ Forward(self: _MobileItem) -> MobileItem """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _MobileItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _MobileItem) """
        ...

    def Reply(self) -> MobileItem:
        """ Reply(self: _MobileItem) -> MobileItem """
        ...

    def ReplyAll(self) -> MobileItem:
        """ ReplyAll(self: _MobileItem) -> MobileItem """
        ...

    def Save(self): # -> 
        """ Save(self: _MobileItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _MobileItem, Path: str, Type: object) """
        ...

    def Send(self, ForceSend:bool): # -> 
        """ Send(self: _MobileItem, ForceSend: bool) """
        ...


class MobileItem(_MobileItem, ItemEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class MobileItemClass(ItemEvents_Event, MobileItem, __ComObject): # skipped bases: <type 'ItemEvents_10_Event'>, <type '_MobileItem'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: MobileItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: MobileItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: MobileItemClass) -> Attachments """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: MobileItemClass) -> str
        Set: BillingInformation(self: MobileItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: MobileItemClass) -> str
        Set: Body(self: MobileItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: MobileItemClass) -> str
        Set: Categories(self: MobileItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: MobileItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: MobileItemClass) -> str
        Set: Companies(self: MobileItemClass) = value
        """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: MobileItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: MobileItemClass) -> str """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: MobileItemClass) -> int """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: MobileItemClass) -> DateTime """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: MobileItemClass) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: MobileItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: MobileItemClass) -> Inspector """
        ...

    @property
    def HTMLBody(self) -> str:
        """
        Get: HTMLBody(self: MobileItemClass) -> str
        Set: HTMLBody(self: MobileItemClass) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: MobileItemClass) -> OlImportance
        Set: Importance(self: MobileItemClass) = value
        """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: MobileItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: MobileItemClass) -> DateTime """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: MobileItemClass) -> object """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: MobileItemClass) -> str
        Set: MessageClass(self: MobileItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: MobileItemClass) -> str
        Set: Mileage(self: MobileItemClass) = value
        """
        ...

    @property
    def MobileFormat(self) -> OlMobileFormat:
        """ Get: MobileFormat(self: MobileItemClass) -> OlMobileFormat """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: MobileItemClass) -> bool
        Set: NoAging(self: MobileItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: MobileItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: MobileItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MobileItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: MobileItemClass) -> PropertyAccessor """
        ...

    @property
    def ReceivedByEntryID(self) -> str:
        """ Get: ReceivedByEntryID(self: MobileItemClass) -> str """
        ...

    @property
    def ReceivedByName(self) -> str:
        """ Get: ReceivedByName(self: MobileItemClass) -> str """
        ...

    @property
    def ReceivedTime(self) -> DateTime:
        """ Get: ReceivedTime(self: MobileItemClass) -> DateTime """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: MobileItemClass) -> Recipients """
        ...

    @property
    def ReplyRecipientNames(self) -> str:
        """ Get: ReplyRecipientNames(self: MobileItemClass) -> str """
        ...

    @property
    def ReplyRecipients(self) -> Recipients:
        """ Get: ReplyRecipients(self: MobileItemClass) -> Recipients """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: MobileItemClass) -> bool """
        ...

    @property
    def SenderEmailAddress(self) -> str:
        """ Get: SenderEmailAddress(self: MobileItemClass) -> str """
        ...

    @property
    def SenderEmailType(self) -> str:
        """ Get: SenderEmailType(self: MobileItemClass) -> str """
        ...

    @property
    def SenderName(self) -> str:
        """ Get: SenderName(self: MobileItemClass) -> str """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: MobileItemClass) -> Account
        Set: SendUsingAccount(self: MobileItemClass) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: MobileItemClass) -> OlSensitivity
        Set: Sensitivity(self: MobileItemClass) = value
        """
        ...

    @property
    def Sent(self) -> bool:
        """ Get: Sent(self: MobileItemClass) -> bool """
        ...

    @property
    def SentOn(self) -> DateTime:
        """ Get: SentOn(self: MobileItemClass) -> DateTime """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: MobileItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: MobileItemClass) -> int """
        ...

    @property
    def SMILBody(self) -> str:
        """
        Get: SMILBody(self: MobileItemClass) -> str
        Set: SMILBody(self: MobileItemClass) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: MobileItemClass) -> str
        Set: Subject(self: MobileItemClass) = value
        """
        ...

    @property
    def Submitted(self) -> bool:
        """ Get: Submitted(self: MobileItemClass) -> bool """
        ...

    @property
    def To(self) -> str:
        """
        Get: To(self: MobileItemClass) -> str
        Set: To(self: MobileItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: MobileItemClass) -> bool
        Set: UnRead(self: MobileItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: MobileItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: MobileItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: MobileItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: MobileItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: MobileItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: MobileItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: MobileItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: MobileItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: MobileItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: MobileItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: MobileItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: MobileItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: MobileItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: MobileItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: MobileItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: MobileItemClass, Modal: object) """
        ...

    def Forward(self) -> MobileItem:
        """ Forward(self: MobileItemClass) -> MobileItem """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: MobileItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: MobileItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: MobileItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: MobileItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: MobileItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: MobileItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: MobileItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: MobileItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: MobileItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: MobileItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: MobileItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: MobileItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: MobileItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: MobileItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: MobileItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: MobileItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: MobileItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: MobileItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: MobileItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: MobileItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: MobileItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: MobileItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: MobileItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: MobileItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: MobileItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: MobileItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: MobileItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: MobileItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: MobileItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: MobileItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: MobileItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: MobileItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: MobileItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: MobileItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: MobileItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: MobileItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: MobileItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: MobileItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: MobileItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: MobileItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: MobileItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: MobileItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: MobileItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Reply(self) -> MobileItem:
        """ Reply(self: MobileItemClass) -> MobileItem """
        ...

    def ReplyAll(self) -> MobileItem:
        """ ReplyAll(self: MobileItemClass) -> MobileItem """
        ...

    def Save(self): # -> 
        """ Save(self: MobileItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: MobileItemClass, Path: str, Type: object) """
        ...

    def Send(self, ForceSend:bool): # -> 
        """ Send(self: MobileItemClass, ForceSend: bool) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_10_Event_Forward = ...
    ItemEvents_10_Event_Reply = ...
    ItemEvents_10_Event_ReplyAll = ...
    ItemEvents_10_Event_Send = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Unload = ...
    Write = ...


class _MoveOrCopyRuleAction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: _MoveOrCopyRuleAction) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _MoveOrCopyRuleAction) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _MoveOrCopyRuleAction) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _MoveOrCopyRuleAction) -> bool
        Set: Enabled(self: _MoveOrCopyRuleAction) = value
        """
        ...

    @property
    def Folder(self) -> MAPIFolder:
        """
        Get: Folder(self: _MoveOrCopyRuleAction) -> MAPIFolder
        Set: Folder(self: _MoveOrCopyRuleAction) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _MoveOrCopyRuleAction) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _MoveOrCopyRuleAction) -> NameSpace """
        ...



class MoveOrCopyRuleAction(_MoveOrCopyRuleAction): # skipped bases: <type 'object'>
    """ no doc """
    pass

class MoveOrCopyRuleActionClass(MoveOrCopyRuleAction, __ComObject): # skipped bases: <type '_MoveOrCopyRuleAction'>, <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: MoveOrCopyRuleActionClass) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: MoveOrCopyRuleActionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: MoveOrCopyRuleActionClass) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: MoveOrCopyRuleActionClass) -> bool
        Set: Enabled(self: MoveOrCopyRuleActionClass) = value
        """
        ...

    @property
    def Folder(self) -> MAPIFolder:
        """
        Get: Folder(self: MoveOrCopyRuleActionClass) -> MAPIFolder
        Set: Folder(self: MoveOrCopyRuleActionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MoveOrCopyRuleActionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: MoveOrCopyRuleActionClass) -> NameSpace """
        ...



class NameSpaceEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AutoDiscoverComplete(self): # -> 
        """ add_AutoDiscoverComplete(self: NameSpaceEvents_Event, : NameSpaceEvents_AutoDiscoverCompleteEventHandler) """
        ...

    def add_OptionsPagesAdd(self): # -> 
        """ add_OptionsPagesAdd(self: NameSpaceEvents_Event, : NameSpaceEvents_OptionsPagesAddEventHandler) """
        ...

    def remove_AutoDiscoverComplete(self): # -> 
        """ remove_AutoDiscoverComplete(self: NameSpaceEvents_Event, : NameSpaceEvents_AutoDiscoverCompleteEventHandler) """
        ...

    def remove_OptionsPagesAdd(self): # -> 
        """ remove_OptionsPagesAdd(self: NameSpaceEvents_Event, : NameSpaceEvents_OptionsPagesAddEventHandler) """
        ...

    AutoDiscoverComplete = ...
    OptionsPagesAdd = ...


class _NameSpace: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accounts(self) -> Accounts:
        """ Get: Accounts(self: _NameSpace) -> Accounts """
        ...

    @property
    def AddressLists(self) -> AddressLists:
        """ Get: AddressLists(self: _NameSpace) -> AddressLists """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _NameSpace) -> Application """
        ...

    @property
    def AutoDiscoverConnectionMode(self) -> OlAutoDiscoverConnectionMode:
        """ Get: AutoDiscoverConnectionMode(self: _NameSpace) -> OlAutoDiscoverConnectionMode """
        ...

    @property
    def AutoDiscoverXml(self) -> str:
        """ Get: AutoDiscoverXml(self: _NameSpace) -> str """
        ...

    @property
    def Categories(self) -> Categories:
        """ Get: Categories(self: _NameSpace) -> Categories """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _NameSpace) -> OlObjectClass """
        ...

    @property
    def CurrentProfileName(self) -> str:
        """ Get: CurrentProfileName(self: _NameSpace) -> str """
        ...

    @property
    def CurrentUser(self) -> Recipient:
        """ Get: CurrentUser(self: _NameSpace) -> Recipient """
        ...

    @property
    def DefaultStore(self) -> Store:
        """ Get: DefaultStore(self: _NameSpace) -> Store """
        ...

    @property
    def ExchangeConnectionMode(self) -> OlExchangeConnectionMode:
        """ Get: ExchangeConnectionMode(self: _NameSpace) -> OlExchangeConnectionMode """
        ...

    @property
    def ExchangeMailboxServerName(self) -> str:
        """ Get: ExchangeMailboxServerName(self: _NameSpace) -> str """
        ...

    @property
    def ExchangeMailboxServerVersion(self) -> str:
        """ Get: ExchangeMailboxServerVersion(self: _NameSpace) -> str """
        ...

    @property
    def Folders(self) -> Folders:
        """ Get: Folders(self: _NameSpace) -> Folders """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _NameSpace) -> object """
        ...

    @property
    def Offline(self) -> bool:
        """ Get: Offline(self: _NameSpace) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _NameSpace) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _NameSpace) -> NameSpace """
        ...

    @property
    def Stores(self) -> Stores:
        """ Get: Stores(self: _NameSpace) -> Stores """
        ...

    @property
    def SyncObjects(self) -> SyncObjects:
        """ Get: SyncObjects(self: _NameSpace) -> SyncObjects """
        ...

    @property
    def Type(self) -> str:
        """ Get: Type(self: _NameSpace) -> str """
        ...


    def AddStore(self, Store:object): # -> 
        """ AddStore(self: _NameSpace, Store: object) """
        ...

    def AddStoreEx(self, Store:object, Type:OlStoreType): # -> 
        """ AddStoreEx(self: _NameSpace, Store: object, Type: OlStoreType) """
        ...

    def CompareEntryIDs(self, FirstEntryID:str, SecondEntryID:str) -> bool:
        """ CompareEntryIDs(self: _NameSpace, FirstEntryID: str, SecondEntryID: str) -> bool """
        ...

    def CreateContactCard(self, AddressEntry:AddressEntry): # -> ContactCard
        """ CreateContactCard(self: _NameSpace, AddressEntry: AddressEntry) -> ContactCard """
        ...

    def CreateRecipient(self, RecipientName:str) -> Recipient:
        """ CreateRecipient(self: _NameSpace, RecipientName: str) -> Recipient """
        ...

    def CreateSharingItem(self, Context:object, Provider:object) -> SharingItem:
        """ CreateSharingItem(self: _NameSpace, Context: object, Provider: object) -> SharingItem """
        ...

    def Dial(self, ContactItem:object): # -> 
        """ Dial(self: _NameSpace, ContactItem: object) """
        ...

    def GetAddressEntryFromID(self, ID:str) -> AddressEntry:
        """ GetAddressEntryFromID(self: _NameSpace, ID: str) -> AddressEntry """
        ...

    def GetDefaultFolder(self, FolderType:OlDefaultFolders) -> MAPIFolder:
        """ GetDefaultFolder(self: _NameSpace, FolderType: OlDefaultFolders) -> MAPIFolder """
        ...

    def GetFolderFromID(self, EntryIDFolder:str, EntryIDStore:object) -> MAPIFolder:
        """ GetFolderFromID(self: _NameSpace, EntryIDFolder: str, EntryIDStore: object) -> MAPIFolder """
        ...

    def GetGlobalAddressList(self) -> AddressList:
        """ GetGlobalAddressList(self: _NameSpace) -> AddressList """
        ...

    def GetItemFromID(self, EntryIDItem:str, EntryIDStore:object) -> object:
        """ GetItemFromID(self: _NameSpace, EntryIDItem: str, EntryIDStore: object) -> object """
        ...

    def GetRecipientFromID(self, EntryID:str) -> Recipient:
        """ GetRecipientFromID(self: _NameSpace, EntryID: str) -> Recipient """
        ...

    def GetSelectNamesDialog(self) -> SelectNamesDialog:
        """ GetSelectNamesDialog(self: _NameSpace) -> SelectNamesDialog """
        ...

    def GetSharedDefaultFolder(self, Recipient:Recipient, FolderType:OlDefaultFolders) -> MAPIFolder:
        """ GetSharedDefaultFolder(self: _NameSpace, Recipient: Recipient, FolderType: OlDefaultFolders) -> MAPIFolder """
        ...

    def GetStoreFromID(self, ID:str) -> Store:
        """ GetStoreFromID(self: _NameSpace, ID: str) -> Store """
        ...

    def Logoff(self): # -> 
        """ Logoff(self: _NameSpace) """
        ...

    def Logon(self, Profile:object, Password:object, ShowDialog:object, NewSession:object): # -> 
        """ Logon(self: _NameSpace, Profile: object, Password: object, ShowDialog: object, NewSession: object) """
        ...

    def OpenSharedFolder(self, Path:str, Name:object, DownloadAttachments:object, UseTTL:object) -> MAPIFolder:
        """ OpenSharedFolder(self: _NameSpace, Path: str, Name: object, DownloadAttachments: object, UseTTL: object) -> MAPIFolder """
        ...

    def OpenSharedItem(self, Path:str) -> object:
        """ OpenSharedItem(self: _NameSpace, Path: str) -> object """
        ...

    def PickFolder(self) -> MAPIFolder:
        """ PickFolder(self: _NameSpace) -> MAPIFolder """
        ...

    def RefreshRemoteHeaders(self): # -> 
        """ RefreshRemoteHeaders(self: _NameSpace) """
        ...

    def RemoveStore(self, Folder:MAPIFolder): # -> 
        """ RemoveStore(self: _NameSpace, Folder: MAPIFolder) """
        ...

    def SendAndReceive(self, showProgressDialog:bool): # -> 
        """ SendAndReceive(self: _NameSpace, showProgressDialog: bool) """
        ...


class NameSpace(_NameSpace, NameSpaceEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class NameSpaceClass(NameSpace, __ComObject): # skipped bases: <type '_NameSpace'>, <type 'NameSpaceEvents_Event'>, <type 'object'>
    """ no doc """
    @property
    def Accounts(self) -> Accounts:
        """ Get: Accounts(self: NameSpaceClass) -> Accounts """
        ...

    @property
    def AddressLists(self) -> AddressLists:
        """ Get: AddressLists(self: NameSpaceClass) -> AddressLists """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: NameSpaceClass) -> Application """
        ...

    @property
    def AutoDiscoverConnectionMode(self) -> OlAutoDiscoverConnectionMode:
        """ Get: AutoDiscoverConnectionMode(self: NameSpaceClass) -> OlAutoDiscoverConnectionMode """
        ...

    @property
    def AutoDiscoverXml(self) -> str:
        """ Get: AutoDiscoverXml(self: NameSpaceClass) -> str """
        ...

    @property
    def Categories(self) -> Categories:
        """ Get: Categories(self: NameSpaceClass) -> Categories """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: NameSpaceClass) -> OlObjectClass """
        ...

    @property
    def CurrentProfileName(self) -> str:
        """ Get: CurrentProfileName(self: NameSpaceClass) -> str """
        ...

    @property
    def CurrentUser(self) -> Recipient:
        """ Get: CurrentUser(self: NameSpaceClass) -> Recipient """
        ...

    @property
    def DefaultStore(self) -> Store:
        """ Get: DefaultStore(self: NameSpaceClass) -> Store """
        ...

    @property
    def ExchangeConnectionMode(self) -> OlExchangeConnectionMode:
        """ Get: ExchangeConnectionMode(self: NameSpaceClass) -> OlExchangeConnectionMode """
        ...

    @property
    def ExchangeMailboxServerName(self) -> str:
        """ Get: ExchangeMailboxServerName(self: NameSpaceClass) -> str """
        ...

    @property
    def ExchangeMailboxServerVersion(self) -> str:
        """ Get: ExchangeMailboxServerVersion(self: NameSpaceClass) -> str """
        ...

    @property
    def Folders(self) -> Folders:
        """ Get: Folders(self: NameSpaceClass) -> Folders """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: NameSpaceClass) -> object """
        ...

    @property
    def Offline(self) -> bool:
        """ Get: Offline(self: NameSpaceClass) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NameSpaceClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: NameSpaceClass) -> NameSpace """
        ...

    @property
    def Stores(self) -> Stores:
        """ Get: Stores(self: NameSpaceClass) -> Stores """
        ...

    @property
    def SyncObjects(self) -> SyncObjects:
        """ Get: SyncObjects(self: NameSpaceClass) -> SyncObjects """
        ...

    @property
    def Type(self) -> str:
        """ Get: Type(self: NameSpaceClass) -> str """
        ...


    def AddStore(self, Store:object): # -> 
        """ AddStore(self: NameSpaceClass, Store: object) """
        ...

    def AddStoreEx(self, Store:object, Type:OlStoreType): # -> 
        """ AddStoreEx(self: NameSpaceClass, Store: object, Type: OlStoreType) """
        ...

    def add_AutoDiscoverComplete(self): # -> 
        """ add_AutoDiscoverComplete(self: NameSpaceClass, : NameSpaceEvents_AutoDiscoverCompleteEventHandler) """
        ...

    def add_OptionsPagesAdd(self): # -> 
        """ add_OptionsPagesAdd(self: NameSpaceClass, : NameSpaceEvents_OptionsPagesAddEventHandler) """
        ...

    def CompareEntryIDs(self, FirstEntryID:str, SecondEntryID:str) -> bool:
        """ CompareEntryIDs(self: NameSpaceClass, FirstEntryID: str, SecondEntryID: str) -> bool """
        ...

    def CreateContactCard(self, AddressEntry:AddressEntry): # -> ContactCard
        """ CreateContactCard(self: NameSpaceClass, AddressEntry: AddressEntry) -> ContactCard """
        ...

    def CreateRecipient(self, RecipientName:str) -> Recipient:
        """ CreateRecipient(self: NameSpaceClass, RecipientName: str) -> Recipient """
        ...

    def CreateSharingItem(self, Context:object, Provider:object) -> SharingItem:
        """ CreateSharingItem(self: NameSpaceClass, Context: object, Provider: object) -> SharingItem """
        ...

    def Dial(self, ContactItem:object): # -> 
        """ Dial(self: NameSpaceClass, ContactItem: object) """
        ...

    def GetAddressEntryFromID(self, ID:str) -> AddressEntry:
        """ GetAddressEntryFromID(self: NameSpaceClass, ID: str) -> AddressEntry """
        ...

    def GetDefaultFolder(self, FolderType:OlDefaultFolders) -> MAPIFolder:
        """ GetDefaultFolder(self: NameSpaceClass, FolderType: OlDefaultFolders) -> MAPIFolder """
        ...

    def GetFolderFromID(self, EntryIDFolder:str, EntryIDStore:object) -> MAPIFolder:
        """ GetFolderFromID(self: NameSpaceClass, EntryIDFolder: str, EntryIDStore: object) -> MAPIFolder """
        ...

    def GetGlobalAddressList(self) -> AddressList:
        """ GetGlobalAddressList(self: NameSpaceClass) -> AddressList """
        ...

    def GetItemFromID(self, EntryIDItem:str, EntryIDStore:object) -> object:
        """ GetItemFromID(self: NameSpaceClass, EntryIDItem: str, EntryIDStore: object) -> object """
        ...

    def GetRecipientFromID(self, EntryID:str) -> Recipient:
        """ GetRecipientFromID(self: NameSpaceClass, EntryID: str) -> Recipient """
        ...

    def GetSelectNamesDialog(self) -> SelectNamesDialog:
        """ GetSelectNamesDialog(self: NameSpaceClass) -> SelectNamesDialog """
        ...

    def GetSharedDefaultFolder(self, Recipient:Recipient, FolderType:OlDefaultFolders) -> MAPIFolder:
        """ GetSharedDefaultFolder(self: NameSpaceClass, Recipient: Recipient, FolderType: OlDefaultFolders) -> MAPIFolder """
        ...

    def GetStoreFromID(self, ID:str) -> Store:
        """ GetStoreFromID(self: NameSpaceClass, ID: str) -> Store """
        ...

    def Logoff(self): # -> 
        """ Logoff(self: NameSpaceClass) """
        ...

    def Logon(self, Profile:object, Password:object, ShowDialog:object, NewSession:object): # -> 
        """ Logon(self: NameSpaceClass, Profile: object, Password: object, ShowDialog: object, NewSession: object) """
        ...

    def OpenSharedFolder(self, Path:str, Name:object, DownloadAttachments:object, UseTTL:object) -> MAPIFolder:
        """ OpenSharedFolder(self: NameSpaceClass, Path: str, Name: object, DownloadAttachments: object, UseTTL: object) -> MAPIFolder """
        ...

    def OpenSharedItem(self, Path:str) -> object:
        """ OpenSharedItem(self: NameSpaceClass, Path: str) -> object """
        ...

    def PickFolder(self) -> MAPIFolder:
        """ PickFolder(self: NameSpaceClass) -> MAPIFolder """
        ...

    def RefreshRemoteHeaders(self): # -> 
        """ RefreshRemoteHeaders(self: NameSpaceClass) """
        ...

    def RemoveStore(self, Folder:MAPIFolder): # -> 
        """ RemoveStore(self: NameSpaceClass, Folder: MAPIFolder) """
        ...

    def remove_AutoDiscoverComplete(self): # -> 
        """ remove_AutoDiscoverComplete(self: NameSpaceClass, : NameSpaceEvents_AutoDiscoverCompleteEventHandler) """
        ...

    def remove_OptionsPagesAdd(self): # -> 
        """ remove_OptionsPagesAdd(self: NameSpaceClass, : NameSpaceEvents_OptionsPagesAddEventHandler) """
        ...

    def SendAndReceive(self, showProgressDialog:bool): # -> 
        """ SendAndReceive(self: NameSpaceClass, showProgressDialog: bool) """
        ...

    AutoDiscoverComplete = ...
    OptionsPagesAdd = ...


class NameSpaceEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AutoDiscoverComplete(self): # -> 
        """ AutoDiscoverComplete(self: NameSpaceEvents) """
        ...

    def OptionsPagesAdd(self, Pages:PropertyPages, Folder:MAPIFolder): # -> 
        """ OptionsPagesAdd(self: NameSpaceEvents, Pages: PropertyPages, Folder: MAPIFolder) """
        ...


class NameSpaceEvents_AutoDiscoverCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ NameSpaceEvents_AutoDiscoverCompleteEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: NameSpaceEvents_AutoDiscoverCompleteEventHandler) """
        ...


class NameSpaceEvents_OptionsPagesAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ NameSpaceEvents_OptionsPagesAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Pages:PropertyPages, Folder:MAPIFolder): # -> 
        """ Invoke(self: NameSpaceEvents_OptionsPagesAddEventHandler, Pages: PropertyPages, Folder: MAPIFolder) """
        ...


class NameSpaceEvents_SinkHelper(NameSpaceEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AutoDiscoverCompleteDelegate = ...
    m_dwCookie = ...
    m_OptionsPagesAddDelegate = ...


class _NavigationFolder: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _NavigationFolder) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _NavigationFolder) -> OlObjectClass """
        ...

    @property
    def DisplayName(self) -> str:
        """ Get: DisplayName(self: _NavigationFolder) -> str """
        ...

    @property
    def Folder(self) -> MAPIFolder:
        """ Get: Folder(self: _NavigationFolder) -> MAPIFolder """
        ...

    @property
    def IsRemovable(self) -> bool:
        """ Get: IsRemovable(self: _NavigationFolder) -> bool """
        ...

    @property
    def IsSelected(self) -> bool:
        """
        Get: IsSelected(self: _NavigationFolder) -> bool
        Set: IsSelected(self: _NavigationFolder) = value
        """
        ...

    @property
    def IsSideBySide(self) -> bool:
        """
        Get: IsSideBySide(self: _NavigationFolder) -> bool
        Set: IsSideBySide(self: _NavigationFolder) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _NavigationFolder) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: _NavigationFolder) -> int
        Set: Position(self: _NavigationFolder) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _NavigationFolder) -> NameSpace """
        ...



class NavigationFolder(_NavigationFolder): # skipped bases: <type 'object'>
    """ no doc """
    pass

class NavigationFolderClass(NavigationFolder, __ComObject): # skipped bases: <type '_NavigationFolder'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: NavigationFolderClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: NavigationFolderClass) -> OlObjectClass """
        ...

    @property
    def DisplayName(self) -> str:
        """ Get: DisplayName(self: NavigationFolderClass) -> str """
        ...

    @property
    def Folder(self) -> MAPIFolder:
        """ Get: Folder(self: NavigationFolderClass) -> MAPIFolder """
        ...

    @property
    def IsRemovable(self) -> bool:
        """ Get: IsRemovable(self: NavigationFolderClass) -> bool """
        ...

    @property
    def IsSelected(self) -> bool:
        """
        Get: IsSelected(self: NavigationFolderClass) -> bool
        Set: IsSelected(self: NavigationFolderClass) = value
        """
        ...

    @property
    def IsSideBySide(self) -> bool:
        """
        Get: IsSideBySide(self: NavigationFolderClass) -> bool
        Set: IsSideBySide(self: NavigationFolderClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NavigationFolderClass) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: NavigationFolderClass) -> int
        Set: Position(self: NavigationFolderClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: NavigationFolderClass) -> NameSpace """
        ...



class _NavigationFolders(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _NavigationFolders) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _NavigationFolders) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _NavigationFolders) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _NavigationFolders) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _NavigationFolders) -> NameSpace """
        ...


    def Add(self, Folder:MAPIFolder) -> NavigationFolder:
        """ Add(self: _NavigationFolders, Folder: MAPIFolder) -> NavigationFolder """
        ...

    def Remove(self, RemovableFolder:NavigationFolder): # -> 
        """ Remove(self: _NavigationFolders, RemovableFolder: NavigationFolder) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class NavigationFolders(_NavigationFolders): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class NavigationFoldersClass(__ComObject, NavigationFolders): # skipped bases: <type 'IEnumerable'>, <type '_NavigationFolders'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: NavigationFoldersClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: NavigationFoldersClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: NavigationFoldersClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NavigationFoldersClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: NavigationFoldersClass) -> NameSpace """
        ...


    def Add(self, Folder:MAPIFolder) -> NavigationFolder:
        """ Add(self: NavigationFoldersClass, Folder: MAPIFolder) -> NavigationFolder """
        ...

    def Remove(self, RemovableFolder:NavigationFolder): # -> 
        """ Remove(self: NavigationFoldersClass, RemovableFolder: NavigationFolder) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _NavigationGroup: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _NavigationGroup) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _NavigationGroup) -> OlObjectClass """
        ...

    @property
    def GroupType(self) -> OlGroupType:
        """ Get: GroupType(self: _NavigationGroup) -> OlGroupType """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _NavigationGroup) -> str
        Set: Name(self: _NavigationGroup) = value
        """
        ...

    @property
    def NavigationFolders(self) -> NavigationFolders:
        """ Get: NavigationFolders(self: _NavigationGroup) -> NavigationFolders """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _NavigationGroup) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: _NavigationGroup) -> int
        Set: Position(self: _NavigationGroup) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _NavigationGroup) -> NameSpace """
        ...



class NavigationGroup(_NavigationGroup): # skipped bases: <type 'object'>
    """ no doc """
    pass

class NavigationGroupClass(NavigationGroup, __ComObject): # skipped bases: <type '_NavigationGroup'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: NavigationGroupClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: NavigationGroupClass) -> OlObjectClass """
        ...

    @property
    def GroupType(self) -> OlGroupType:
        """ Get: GroupType(self: NavigationGroupClass) -> OlGroupType """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: NavigationGroupClass) -> str
        Set: Name(self: NavigationGroupClass) = value
        """
        ...

    @property
    def NavigationFolders(self) -> NavigationFolders:
        """ Get: NavigationFolders(self: NavigationGroupClass) -> NavigationFolders """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NavigationGroupClass) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: NavigationGroupClass) -> int
        Set: Position(self: NavigationGroupClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: NavigationGroupClass) -> NameSpace """
        ...



class NavigationGroupsEvents_12_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_NavigationFolderAdd(self): # -> 
        """ add_NavigationFolderAdd(self: NavigationGroupsEvents_12_Event, : NavigationGroupsEvents_12_NavigationFolderAddEventHandler) """
        ...

    def add_NavigationFolderRemove(self): # -> 
        """ add_NavigationFolderRemove(self: NavigationGroupsEvents_12_Event, : NavigationGroupsEvents_12_NavigationFolderRemoveEventHandler) """
        ...

    def add_SelectedChange(self): # -> 
        """ add_SelectedChange(self: NavigationGroupsEvents_12_Event, : NavigationGroupsEvents_12_SelectedChangeEventHandler) """
        ...

    def remove_NavigationFolderAdd(self): # -> 
        """ remove_NavigationFolderAdd(self: NavigationGroupsEvents_12_Event, : NavigationGroupsEvents_12_NavigationFolderAddEventHandler) """
        ...

    def remove_NavigationFolderRemove(self): # -> 
        """ remove_NavigationFolderRemove(self: NavigationGroupsEvents_12_Event, : NavigationGroupsEvents_12_NavigationFolderRemoveEventHandler) """
        ...

    def remove_SelectedChange(self): # -> 
        """ remove_SelectedChange(self: NavigationGroupsEvents_12_Event, : NavigationGroupsEvents_12_SelectedChangeEventHandler) """
        ...

    NavigationFolderAdd = ...
    NavigationFolderRemove = ...
    SelectedChange = ...


class _NavigationGroups(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _NavigationGroups) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _NavigationGroups) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _NavigationGroups) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _NavigationGroups) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _NavigationGroups) -> NameSpace """
        ...


    def Create(self, GroupDisplayName:str) -> NavigationGroup:
        """ Create(self: _NavigationGroups, GroupDisplayName: str) -> NavigationGroup """
        ...

    def Delete(self, Group:NavigationGroup): # -> 
        """ Delete(self: _NavigationGroups, Group: NavigationGroup) """
        ...

    def GetDefaultNavigationGroup(self, DefaultFolderGroup:OlGroupType) -> NavigationGroup:
        """ GetDefaultNavigationGroup(self: _NavigationGroups, DefaultFolderGroup: OlGroupType) -> NavigationGroup """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class NavigationGroups(_NavigationGroups, NavigationGroupsEvents_12_Event): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class NavigationGroupsClass(NavigationGroups, __ComObject): # skipped bases: <type '_NavigationGroups'>, <type 'IEnumerable'>, <type 'NavigationGroupsEvents_12_Event'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: NavigationGroupsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: NavigationGroupsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: NavigationGroupsClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NavigationGroupsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: NavigationGroupsClass) -> NameSpace """
        ...


    def add_NavigationFolderAdd(self): # -> 
        """ add_NavigationFolderAdd(self: NavigationGroupsClass, : NavigationGroupsEvents_12_NavigationFolderAddEventHandler) """
        ...

    def add_NavigationFolderRemove(self): # -> 
        """ add_NavigationFolderRemove(self: NavigationGroupsClass, : NavigationGroupsEvents_12_NavigationFolderRemoveEventHandler) """
        ...

    def add_SelectedChange(self): # -> 
        """ add_SelectedChange(self: NavigationGroupsClass, : NavigationGroupsEvents_12_SelectedChangeEventHandler) """
        ...

    def Create(self, GroupDisplayName:str) -> NavigationGroup:
        """ Create(self: NavigationGroupsClass, GroupDisplayName: str) -> NavigationGroup """
        ...

    def Delete(self, Group:NavigationGroup): # -> 
        """ Delete(self: NavigationGroupsClass, Group: NavigationGroup) """
        ...

    def GetDefaultNavigationGroup(self, DefaultFolderGroup:OlGroupType) -> NavigationGroup:
        """ GetDefaultNavigationGroup(self: NavigationGroupsClass, DefaultFolderGroup: OlGroupType) -> NavigationGroup """
        ...

    def remove_NavigationFolderAdd(self): # -> 
        """ remove_NavigationFolderAdd(self: NavigationGroupsClass, : NavigationGroupsEvents_12_NavigationFolderAddEventHandler) """
        ...

    def remove_NavigationFolderRemove(self): # -> 
        """ remove_NavigationFolderRemove(self: NavigationGroupsClass, : NavigationGroupsEvents_12_NavigationFolderRemoveEventHandler) """
        ...

    def remove_SelectedChange(self): # -> 
        """ remove_SelectedChange(self: NavigationGroupsClass, : NavigationGroupsEvents_12_SelectedChangeEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    NavigationFolderAdd = ...
    NavigationFolderRemove = ...
    SelectedChange = ...


class NavigationGroupsEvents_12: # skipped bases: <type 'object'>
    """ no doc """
    def NavigationFolderAdd(self, NavigationFolder:NavigationFolder): # -> 
        """ NavigationFolderAdd(self: NavigationGroupsEvents_12, NavigationFolder: NavigationFolder) """
        ...

    def NavigationFolderRemove(self): # -> 
        """ NavigationFolderRemove(self: NavigationGroupsEvents_12) """
        ...

    def SelectedChange(self, NavigationFolder:NavigationFolder): # -> 
        """ SelectedChange(self: NavigationGroupsEvents_12, NavigationFolder: NavigationFolder) """
        ...


class NavigationGroupsEvents_12_NavigationFolderAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ NavigationGroupsEvents_12_NavigationFolderAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, NavigationFolder:NavigationFolder): # -> 
        """ Invoke(self: NavigationGroupsEvents_12_NavigationFolderAddEventHandler, NavigationFolder: NavigationFolder) """
        ...


class NavigationGroupsEvents_12_NavigationFolderRemoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ NavigationGroupsEvents_12_NavigationFolderRemoveEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: NavigationGroupsEvents_12_NavigationFolderRemoveEventHandler) """
        ...


class NavigationGroupsEvents_12_SelectedChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ NavigationGroupsEvents_12_SelectedChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, NavigationFolder:NavigationFolder): # -> 
        """ Invoke(self: NavigationGroupsEvents_12_SelectedChangeEventHandler, NavigationFolder: NavigationFolder) """
        ...


class NavigationGroupsEvents_12_SinkHelper(NavigationGroupsEvents_12): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_NavigationFolderAddDelegate = ...
    m_NavigationFolderRemoveDelegate = ...
    m_SelectedChangeDelegate = ...


class _NavigationModule: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _NavigationModule) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _NavigationModule) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _NavigationModule) -> str """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: _NavigationModule) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _NavigationModule) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: _NavigationModule) -> int
        Set: Position(self: _NavigationModule) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _NavigationModule) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _NavigationModule) -> bool
        Set: Visible(self: _NavigationModule) = value
        """
        ...



class NavigationModule(_NavigationModule): # skipped bases: <type 'object'>
    """ no doc """
    pass

class NavigationModuleClass(NavigationModule, __ComObject): # skipped bases: <type '_NavigationModule'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: NavigationModuleClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: NavigationModuleClass) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: NavigationModuleClass) -> str """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: NavigationModuleClass) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NavigationModuleClass) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: NavigationModuleClass) -> int
        Set: Position(self: NavigationModuleClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: NavigationModuleClass) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: NavigationModuleClass) -> bool
        Set: Visible(self: NavigationModuleClass) = value
        """
        ...



class _NavigationModules(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _NavigationModules) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _NavigationModules) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _NavigationModules) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _NavigationModules) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _NavigationModules) -> NameSpace """
        ...


    def GetNavigationModule(self, ModuleType:OlNavigationModuleType) -> NavigationModule:
        """ GetNavigationModule(self: _NavigationModules, ModuleType: OlNavigationModuleType) -> NavigationModule """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class NavigationModules(_NavigationModules): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class NavigationModulesClass(NavigationModules, __ComObject): # skipped bases: <type 'IEnumerable'>, <type '_NavigationModules'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: NavigationModulesClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: NavigationModulesClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: NavigationModulesClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NavigationModulesClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: NavigationModulesClass) -> NameSpace """
        ...


    def GetNavigationModule(self, ModuleType:OlNavigationModuleType) -> NavigationModule:
        """ GetNavigationModule(self: NavigationModulesClass, ModuleType: OlNavigationModuleType) -> NavigationModule """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class NavigationPaneEvents_12_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_ModuleSwitch(self): # -> 
        """ add_ModuleSwitch(self: NavigationPaneEvents_12_Event, : NavigationPaneEvents_12_ModuleSwitchEventHandler) """
        ...

    def remove_ModuleSwitch(self): # -> 
        """ remove_ModuleSwitch(self: NavigationPaneEvents_12_Event, : NavigationPaneEvents_12_ModuleSwitchEventHandler) """
        ...

    ModuleSwitch = ...


class _NavigationPane: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _NavigationPane) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _NavigationPane) -> OlObjectClass """
        ...

    @property
    def CurrentModule(self) -> NavigationModule:
        """
        Get: CurrentModule(self: _NavigationPane) -> NavigationModule
        Set: CurrentModule(self: _NavigationPane) = value
        """
        ...

    @property
    def DisplayedModuleCount(self) -> int:
        """
        Get: DisplayedModuleCount(self: _NavigationPane) -> int
        Set: DisplayedModuleCount(self: _NavigationPane) = value
        """
        ...

    @property
    def IsCollapsed(self) -> bool:
        """
        Get: IsCollapsed(self: _NavigationPane) -> bool
        Set: IsCollapsed(self: _NavigationPane) = value
        """
        ...

    @property
    def Modules(self) -> NavigationModules:
        """ Get: Modules(self: _NavigationPane) -> NavigationModules """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _NavigationPane) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _NavigationPane) -> NameSpace """
        ...



class NavigationPane(_NavigationPane, NavigationPaneEvents_12_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class NavigationPaneClass(NavigationPane, __ComObject): # skipped bases: <type '_NavigationPane'>, <type 'NavigationPaneEvents_12_Event'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: NavigationPaneClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: NavigationPaneClass) -> OlObjectClass """
        ...

    @property
    def CurrentModule(self) -> NavigationModule:
        """
        Get: CurrentModule(self: NavigationPaneClass) -> NavigationModule
        Set: CurrentModule(self: NavigationPaneClass) = value
        """
        ...

    @property
    def DisplayedModuleCount(self) -> int:
        """
        Get: DisplayedModuleCount(self: NavigationPaneClass) -> int
        Set: DisplayedModuleCount(self: NavigationPaneClass) = value
        """
        ...

    @property
    def IsCollapsed(self) -> bool:
        """
        Get: IsCollapsed(self: NavigationPaneClass) -> bool
        Set: IsCollapsed(self: NavigationPaneClass) = value
        """
        ...

    @property
    def Modules(self) -> NavigationModules:
        """ Get: Modules(self: NavigationPaneClass) -> NavigationModules """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NavigationPaneClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: NavigationPaneClass) -> NameSpace """
        ...


    def add_ModuleSwitch(self): # -> 
        """ add_ModuleSwitch(self: NavigationPaneClass, : NavigationPaneEvents_12_ModuleSwitchEventHandler) """
        ...

    def remove_ModuleSwitch(self): # -> 
        """ remove_ModuleSwitch(self: NavigationPaneClass, : NavigationPaneEvents_12_ModuleSwitchEventHandler) """
        ...

    ModuleSwitch = ...


class NavigationPaneEvents_12: # skipped bases: <type 'object'>
    """ no doc """
    def ModuleSwitch(self, CurrentModule:NavigationModule): # -> 
        """ ModuleSwitch(self: NavigationPaneEvents_12, CurrentModule: NavigationModule) """
        ...


class NavigationPaneEvents_12_ModuleSwitchEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ NavigationPaneEvents_12_ModuleSwitchEventHandler(: object, : UIntPtr) """
    def Invoke(self, CurrentModule:NavigationModule): # -> 
        """ Invoke(self: NavigationPaneEvents_12_ModuleSwitchEventHandler, CurrentModule: NavigationModule) """
        ...


class NavigationPaneEvents_12_SinkHelper(NavigationPaneEvents_12): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_ModuleSwitchDelegate = ...


class _NewItemAlertRuleAction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: _NewItemAlertRuleAction) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _NewItemAlertRuleAction) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _NewItemAlertRuleAction) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _NewItemAlertRuleAction) -> bool
        Set: Enabled(self: _NewItemAlertRuleAction) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _NewItemAlertRuleAction) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _NewItemAlertRuleAction) -> NameSpace """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: _NewItemAlertRuleAction) -> str
        Set: Text(self: _NewItemAlertRuleAction) = value
        """
        ...



class NewItemAlertRuleAction(_NewItemAlertRuleAction): # skipped bases: <type 'object'>
    """ no doc """
    pass

class NewItemAlertRuleActionClass(__ComObject, NewItemAlertRuleAction): # skipped bases: <type '_NewItemAlertRuleAction'>, <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: NewItemAlertRuleActionClass) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: NewItemAlertRuleActionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: NewItemAlertRuleActionClass) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: NewItemAlertRuleActionClass) -> bool
        Set: Enabled(self: NewItemAlertRuleActionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NewItemAlertRuleActionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: NewItemAlertRuleActionClass) -> NameSpace """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: NewItemAlertRuleActionClass) -> str
        Set: Text(self: NewItemAlertRuleActionClass) = value
        """
        ...



class _NoteItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _NoteItem) -> Application """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _NoteItem) -> bool """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _NoteItem) -> str
        Set: Body(self: _NoteItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _NoteItem) -> str
        Set: Categories(self: _NoteItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _NoteItem) -> OlObjectClass """
        ...

    @property
    def Color(self) -> OlNoteColor:
        """
        Get: Color(self: _NoteItem) -> OlNoteColor
        Set: Color(self: _NoteItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _NoteItem) -> Conflicts """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _NoteItem) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _NoteItem) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _NoteItem) -> str """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _NoteItem) -> Inspector """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: _NoteItem) -> int
        Set: Height(self: _NoteItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _NoteItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _NoteItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _NoteItem) -> DateTime """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: _NoteItem) -> int
        Set: Left(self: _NoteItem) = value
        """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _NoteItem) -> Links """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _NoteItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _NoteItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _NoteItem) -> str
        Set: MessageClass(self: _NoteItem) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _NoteItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _NoteItem) -> PropertyAccessor """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _NoteItem) -> bool """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _NoteItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _NoteItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """ Get: Subject(self: _NoteItem) -> str """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: _NoteItem) -> int
        Set: Top(self: _NoteItem) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: _NoteItem) -> int
        Set: Width(self: _NoteItem) = value
        """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _NoteItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _NoteItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _NoteItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _NoteItem, Modal: object) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _NoteItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _NoteItem) """
        ...

    def Save(self): # -> 
        """ Save(self: _NoteItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _NoteItem, Path: str, Type: object) """
        ...


class NoteItem(_NoteItem): # skipped bases: <type 'object'>
    """ no doc """
    pass

class NoteItemClass(NoteItem, __ComObject): # skipped bases: <type '_NoteItem'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: NoteItemClass) -> Application """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: NoteItemClass) -> bool """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: NoteItemClass) -> str
        Set: Body(self: NoteItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: NoteItemClass) -> str
        Set: Categories(self: NoteItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: NoteItemClass) -> OlObjectClass """
        ...

    @property
    def Color(self) -> OlNoteColor:
        """
        Get: Color(self: NoteItemClass) -> OlNoteColor
        Set: Color(self: NoteItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: NoteItemClass) -> Conflicts """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: NoteItemClass) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: NoteItemClass) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: NoteItemClass) -> str """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: NoteItemClass) -> Inspector """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: NoteItemClass) -> int
        Set: Height(self: NoteItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: NoteItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: NoteItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: NoteItemClass) -> DateTime """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: NoteItemClass) -> int
        Set: Left(self: NoteItemClass) = value
        """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: NoteItemClass) -> Links """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: NoteItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: NoteItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: NoteItemClass) -> str
        Set: MessageClass(self: NoteItemClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NoteItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: NoteItemClass) -> PropertyAccessor """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: NoteItemClass) -> bool """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: NoteItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: NoteItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """ Get: Subject(self: NoteItemClass) -> str """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: NoteItemClass) -> int
        Set: Top(self: NoteItemClass) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: NoteItemClass) -> int
        Set: Width(self: NoteItemClass) = value
        """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: NoteItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: NoteItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: NoteItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: NoteItemClass, Modal: object) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: NoteItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: NoteItemClass) """
        ...

    def Save(self): # -> 
        """ Save(self: NoteItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: NoteItemClass, Path: str, Type: object) """
        ...


class _NotesModule: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _NotesModule) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _NotesModule) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _NotesModule) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: _NotesModule) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: _NotesModule) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _NotesModule) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: _NotesModule) -> int
        Set: Position(self: _NotesModule) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _NotesModule) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _NotesModule) -> bool
        Set: Visible(self: _NotesModule) = value
        """
        ...



class NotesModule(_NotesModule): # skipped bases: <type 'object'>
    """ no doc """
    pass

class NotesModuleClass(NotesModule, __ComObject): # skipped bases: <type '_NotesModule'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: NotesModuleClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: NotesModuleClass) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: NotesModuleClass) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: NotesModuleClass) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: NotesModuleClass) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: NotesModuleClass) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: NotesModuleClass) -> int
        Set: Position(self: NotesModuleClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: NotesModuleClass) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: NotesModuleClass) -> bool
        Set: Visible(self: NotesModuleClass) = value
        """
        ...



class OlAccountType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAccountType, values: olEas (4), olExchange (0), olHttp (3), olImap (1), olOtherAccount (5), olPop3 (2) """
    olEas: OlAccountType = ...
    olExchange: OlAccountType = ...
    olHttp: OlAccountType = ...
    olImap: OlAccountType = ...
    olOtherAccount: OlAccountType = ...
    olPop3: OlAccountType = ...
    value__ = ...


class OlActionCopyLike(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlActionCopyLike, values: olForward (2), olReply (0), olReplyAll (1), olReplyFolder (3), olRespond (4) """
    olForward: OlActionCopyLike = ...
    olReply: OlActionCopyLike = ...
    olReplyAll: OlActionCopyLike = ...
    olReplyFolder: OlActionCopyLike = ...
    olRespond: OlActionCopyLike = ...
    value__ = ...


class OlActionReplyStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlActionReplyStyle, values: olEmbedOriginalItem (1), olIncludeOriginalText (2), olIndentOriginalText (3), olLinkOriginalItem (4), olOmitOriginalText (0), olReplyTickOriginalText (1000), olUserPreference (5) """
    olEmbedOriginalItem: OlActionReplyStyle = ...
    olIncludeOriginalText: OlActionReplyStyle = ...
    olIndentOriginalText: OlActionReplyStyle = ...
    olLinkOriginalItem: OlActionReplyStyle = ...
    olOmitOriginalText: OlActionReplyStyle = ...
    olReplyTickOriginalText: OlActionReplyStyle = ...
    olUserPreference: OlActionReplyStyle = ...
    value__ = ...


class OlActionResponseStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlActionResponseStyle, values: olOpen (0), olPrompt (2), olSend (1) """
    olOpen: OlActionResponseStyle = ...
    olPrompt: OlActionResponseStyle = ...
    olSend: OlActionResponseStyle = ...
    value__ = ...


class OlActionShowOn(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlActionShowOn, values: olDontShow (0), olMenu (1), olMenuAndToolbar (2) """
    olDontShow: OlActionShowOn = ...
    olMenu: OlActionShowOn = ...
    olMenuAndToolbar: OlActionShowOn = ...
    value__ = ...


class OlAddressEntryUserType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAddressEntryUserType, values: olExchangeAgentAddressEntry (3), olExchangeDistributionListAddressEntry (1), olExchangeOrganizationAddressEntry (4), olExchangePublicFolderAddressEntry (2), olExchangeRemoteUserAddressEntry (5), olExchangeUserAddressEntry (0), olLdapAddressEntry (20), olOtherAddressEntry (40), olOutlookContactAddressEntry (10), olOutlookDistributionListAddressEntry (11), olSmtpAddressEntry (30) """
    olExchangeAgentAddressEntry: OlAddressEntryUserType = ...
    olExchangeDistributionListAddressEntry: OlAddressEntryUserType = ...
    olExchangeOrganizationAddressEntry: OlAddressEntryUserType = ...
    olExchangePublicFolderAddressEntry: OlAddressEntryUserType = ...
    olExchangeRemoteUserAddressEntry: OlAddressEntryUserType = ...
    olExchangeUserAddressEntry: OlAddressEntryUserType = ...
    olLdapAddressEntry: OlAddressEntryUserType = ...
    olOtherAddressEntry: OlAddressEntryUserType = ...
    olOutlookContactAddressEntry: OlAddressEntryUserType = ...
    olOutlookDistributionListAddressEntry: OlAddressEntryUserType = ...
    olSmtpAddressEntry: OlAddressEntryUserType = ...
    value__ = ...


class OlAddressListType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAddressListType, values: olCustomAddressList (4), olExchangeContainer (1), olExchangeGlobalAddressList (0), olOutlookAddressList (2), olOutlookLdapAddressList (3) """
    olCustomAddressList: OlAddressListType = ...
    olExchangeContainer: OlAddressListType = ...
    olExchangeGlobalAddressList: OlAddressListType = ...
    olOutlookAddressList: OlAddressListType = ...
    olOutlookLdapAddressList: OlAddressListType = ...
    value__ = ...


class OlAlign(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAlign, values: olAlignCenter (1), olAlignLeft (0), olAlignRight (2) """
    olAlignCenter: OlAlign = ...
    olAlignLeft: OlAlign = ...
    olAlignRight: OlAlign = ...
    value__ = ...


class OlAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAlignment, values: olAlignmentLeft (0), olAlignmentRight (1) """
    olAlignmentLeft: OlAlignment = ...
    olAlignmentRight: OlAlignment = ...
    value__ = ...


class OlAlwaysDeleteConversation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAlwaysDeleteConversation, values: olAlwaysDelete (1), olAlwaysDeleteUnsupported (2), olDoNotDelete (0) """
    olAlwaysDelete: OlAlwaysDeleteConversation = ...
    olAlwaysDeleteUnsupported: OlAlwaysDeleteConversation = ...
    olDoNotDelete: OlAlwaysDeleteConversation = ...
    value__ = ...


class OlAppointmentCopyOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAppointmentCopyOptions, values: olCopyAsAccept (2), olCreateAppointment (1), olPromptUser (0) """
    olCopyAsAccept: OlAppointmentCopyOptions = ...
    olCreateAppointment: OlAppointmentCopyOptions = ...
    olPromptUser: OlAppointmentCopyOptions = ...
    value__ = ...


class OlAppointmentTimeField(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAppointmentTimeField, values: olAppointmentTimeFieldEnd (3), olAppointmentTimeFieldNone (1), olAppointmentTimeFieldStart (2) """
    olAppointmentTimeFieldEnd: OlAppointmentTimeField = ...
    olAppointmentTimeFieldNone: OlAppointmentTimeField = ...
    olAppointmentTimeFieldStart: OlAppointmentTimeField = ...
    value__ = ...


class OlAttachmentBlockLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAttachmentBlockLevel, values: olAttachmentBlockLevelNone (0), olAttachmentBlockLevelOpen (1) """
    olAttachmentBlockLevelNone: OlAttachmentBlockLevel = ...
    olAttachmentBlockLevelOpen: OlAttachmentBlockLevel = ...
    value__ = ...


class OlAttachmentType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAttachmentType, values: olByReference (4), olByValue (1), olEmbeddeditem (5), olOLE (6) """
    olByReference: OlAttachmentType = ...
    olByValue: OlAttachmentType = ...
    olEmbeddeditem: OlAttachmentType = ...
    olOLE: OlAttachmentType = ...
    value__ = ...


class OlAutoDiscoverConnectionMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAutoDiscoverConnectionMode, values: olAutoDiscoverConnectionExternal (1), olAutoDiscoverConnectionInternal (2), olAutoDiscoverConnectionInternalDomain (3), olAutoDiscoverConnectionUnknown (0) """
    olAutoDiscoverConnectionExternal: OlAutoDiscoverConnectionMode = ...
    olAutoDiscoverConnectionInternal: OlAutoDiscoverConnectionMode = ...
    olAutoDiscoverConnectionInternalDomain: OlAutoDiscoverConnectionMode = ...
    olAutoDiscoverConnectionUnknown: OlAutoDiscoverConnectionMode = ...
    value__ = ...


class OlAutoPreview(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlAutoPreview, values: olAutoPreviewAll (0), olAutoPreviewNone (2), olAutoPreviewUnread (1) """
    olAutoPreviewAll: OlAutoPreview = ...
    olAutoPreviewNone: OlAutoPreview = ...
    olAutoPreviewUnread: OlAutoPreview = ...
    value__ = ...


class OlBackStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlBackStyle, values: olBackStyleOpaque (1), olBackStyleTransparent (0) """
    olBackStyleOpaque: OlBackStyle = ...
    olBackStyleTransparent: OlBackStyle = ...
    value__ = ...


class OlBodyFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlBodyFormat, values: olFormatHTML (2), olFormatPlain (1), olFormatRichText (3), olFormatUnspecified (0) """
    olFormatHTML: OlBodyFormat = ...
    olFormatPlain: OlBodyFormat = ...
    olFormatRichText: OlBodyFormat = ...
    olFormatUnspecified: OlBodyFormat = ...
    value__ = ...


class OlBorderStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlBorderStyle, values: olBorderStyleNone (0), olBorderStyleSingle (1) """
    olBorderStyleNone: OlBorderStyle = ...
    olBorderStyleSingle: OlBorderStyle = ...
    value__ = ...


class OlBusinessCardType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlBusinessCardType, values: olBusinessCardTypeInterConnect (1), olBusinessCardTypeOutlook (0) """
    olBusinessCardTypeInterConnect: OlBusinessCardType = ...
    olBusinessCardTypeOutlook: OlBusinessCardType = ...
    value__ = ...


class OlBusyStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlBusyStatus, values: olBusy (2), olFree (0), olOutOfOffice (3), olTentative (1), olWorkingElsewhere (4) """
    olBusy: OlBusyStatus = ...
    olFree: OlBusyStatus = ...
    olOutOfOffice: OlBusyStatus = ...
    olTentative: OlBusyStatus = ...
    olWorkingElsewhere: OlBusyStatus = ...
    value__ = ...


class OlCalendarDetail(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlCalendarDetail, values: olFreeBusyAndSubject (1), olFreeBusyOnly (0), olFullDetails (2) """
    olFreeBusyAndSubject: OlCalendarDetail = ...
    olFreeBusyOnly: OlCalendarDetail = ...
    olFullDetails: OlCalendarDetail = ...
    value__ = ...


class OlCalendarMailFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlCalendarMailFormat, values: olCalendarMailFormatDailySchedule (0), olCalendarMailFormatEventList (1) """
    olCalendarMailFormatDailySchedule: OlCalendarMailFormat = ...
    olCalendarMailFormatEventList: OlCalendarMailFormat = ...
    value__ = ...


class OlCalendarViewMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlCalendarViewMode, values: olCalendarView5DayWeek (4), olCalendarViewDay (0), olCalendarViewMonth (2), olCalendarViewMultiDay (3), olCalendarViewWeek (1) """
    olCalendarView5DayWeek: OlCalendarViewMode = ...
    olCalendarViewDay: OlCalendarViewMode = ...
    olCalendarViewMonth: OlCalendarViewMode = ...
    olCalendarViewMultiDay: OlCalendarViewMode = ...
    olCalendarViewWeek: OlCalendarViewMode = ...
    value__ = ...


class OlCategoryColor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlCategoryColor, values: olCategoryColorBlack (15), olCategoryColorBlue (8), olCategoryColorDarkBlue (23), olCategoryColorDarkGray (14), olCategoryColorDarkGreen (20), olCategoryColorDarkMaroon (25), olCategoryColorDarkOlive (22), olCategoryColorDarkOrange (17), olCategoryColorDarkPeach (18), olCategoryColorDarkPurple (24), olCategoryColorDarkRed (16), olCategoryColorDarkSteel (12), olCategoryColorDarkTeal (21), olCategoryColorDarkYellow (19), olCategoryColorGray (13), olCategoryColorGreen (5), olCategoryColorMaroon (10), olCategoryColorNone (0), olCategoryColorOlive (7), olCategoryColorOrange (2), olCategoryColorPeach (3), olCategoryColorPurple (9), olCategoryColorRed (1), olCategoryColorSteel (11), olCategoryColorTeal (6), olCategoryColorYellow (4) """
    olCategoryColorBlack: OlCategoryColor = ...
    olCategoryColorBlue: OlCategoryColor = ...
    olCategoryColorDarkBlue: OlCategoryColor = ...
    olCategoryColorDarkGray: OlCategoryColor = ...
    olCategoryColorDarkGreen: OlCategoryColor = ...
    olCategoryColorDarkMaroon: OlCategoryColor = ...
    olCategoryColorDarkOlive: OlCategoryColor = ...
    olCategoryColorDarkOrange: OlCategoryColor = ...
    olCategoryColorDarkPeach: OlCategoryColor = ...
    olCategoryColorDarkPurple: OlCategoryColor = ...
    olCategoryColorDarkRed: OlCategoryColor = ...
    olCategoryColorDarkSteel: OlCategoryColor = ...
    olCategoryColorDarkTeal: OlCategoryColor = ...
    olCategoryColorDarkYellow: OlCategoryColor = ...
    olCategoryColorGray: OlCategoryColor = ...
    olCategoryColorGreen: OlCategoryColor = ...
    olCategoryColorMaroon: OlCategoryColor = ...
    olCategoryColorNone: OlCategoryColor = ...
    olCategoryColorOlive: OlCategoryColor = ...
    olCategoryColorOrange: OlCategoryColor = ...
    olCategoryColorPeach: OlCategoryColor = ...
    olCategoryColorPurple: OlCategoryColor = ...
    olCategoryColorRed: OlCategoryColor = ...
    olCategoryColorSteel: OlCategoryColor = ...
    olCategoryColorTeal: OlCategoryColor = ...
    olCategoryColorYellow: OlCategoryColor = ...
    value__ = ...


class OlCategoryShortcutKey(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlCategoryShortcutKey, values: olCategoryShortcutKeyCtrlF10 (9), olCategoryShortcutKeyCtrlF11 (10), olCategoryShortcutKeyCtrlF12 (11), olCategoryShortcutKeyCtrlF2 (1), olCategoryShortcutKeyCtrlF3 (2), olCategoryShortcutKeyCtrlF4 (3), olCategoryShortcutKeyCtrlF5 (4), olCategoryShortcutKeyCtrlF6 (5), olCategoryShortcutKeyCtrlF7 (6), olCategoryShortcutKeyCtrlF8 (7), olCategoryShortcutKeyCtrlF9 (8), olCategoryShortcutKeyNone (0) """
    olCategoryShortcutKeyCtrlF10: OlCategoryShortcutKey = ...
    olCategoryShortcutKeyCtrlF11: OlCategoryShortcutKey = ...
    olCategoryShortcutKeyCtrlF12: OlCategoryShortcutKey = ...
    olCategoryShortcutKeyCtrlF2: OlCategoryShortcutKey = ...
    olCategoryShortcutKeyCtrlF3: OlCategoryShortcutKey = ...
    olCategoryShortcutKeyCtrlF4: OlCategoryShortcutKey = ...
    olCategoryShortcutKeyCtrlF5: OlCategoryShortcutKey = ...
    olCategoryShortcutKeyCtrlF6: OlCategoryShortcutKey = ...
    olCategoryShortcutKeyCtrlF7: OlCategoryShortcutKey = ...
    olCategoryShortcutKeyCtrlF8: OlCategoryShortcutKey = ...
    olCategoryShortcutKeyCtrlF9: OlCategoryShortcutKey = ...
    olCategoryShortcutKeyNone: OlCategoryShortcutKey = ...
    value__ = ...


class OlColor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlColor, values: olAutoColor (0), olColorAqua (15), olColorBlack (1), olColorBlue (13), olColorFuchsia (14), olColorGray (8), olColorGreen (3), olColorLime (11), olColorMaroon (2), olColorNavy (5), olColorOlive (4), olColorPurple (6), olColorRed (10), olColorSilver (9), olColorTeal (7), olColorWhite (16), olColorYellow (12) """
    olAutoColor: OlColor = ...
    olColorAqua: OlColor = ...
    olColorBlack: OlColor = ...
    olColorBlue: OlColor = ...
    olColorFuchsia: OlColor = ...
    olColorGray: OlColor = ...
    olColorGreen: OlColor = ...
    olColorLime: OlColor = ...
    olColorMaroon: OlColor = ...
    olColorNavy: OlColor = ...
    olColorOlive: OlColor = ...
    olColorPurple: OlColor = ...
    olColorRed: OlColor = ...
    olColorSilver: OlColor = ...
    olColorTeal: OlColor = ...
    olColorWhite: OlColor = ...
    olColorYellow: OlColor = ...
    value__ = ...


class OlComboBoxStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlComboBoxStyle, values: olComboBoxStyleCombo (0), olComboBoxStyleList (2) """
    olComboBoxStyleCombo: OlComboBoxStyle = ...
    olComboBoxStyleList: OlComboBoxStyle = ...
    value__ = ...


class OlContactPhoneNumber(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlContactPhoneNumber, values: olContactPhoneAssistant (0), olContactPhoneBusiness (1), olContactPhoneBusiness2 (2), olContactPhoneBusinessFax (3), olContactPhoneCallback (4), olContactPhoneCar (5), olContactPhoneCompany (6), olContactPhoneHome (7), olContactPhoneHome2 (8), olContactPhoneHomeFax (9), olContactPhoneISDN (10), olContactPhoneMobile (11), olContactPhoneOther (12), olContactPhoneOtherFax (13), olContactPhonePager (14), olContactPhonePrimary (15), olContactPhoneRadio (16), olContactPhoneTelex (17), olContactPhoneTTYTTD (18) """
    olContactPhoneAssistant: OlContactPhoneNumber = ...
    olContactPhoneBusiness: OlContactPhoneNumber = ...
    olContactPhoneBusiness2: OlContactPhoneNumber = ...
    olContactPhoneBusinessFax: OlContactPhoneNumber = ...
    olContactPhoneCallback: OlContactPhoneNumber = ...
    olContactPhoneCar: OlContactPhoneNumber = ...
    olContactPhoneCompany: OlContactPhoneNumber = ...
    olContactPhoneHome: OlContactPhoneNumber = ...
    olContactPhoneHome2: OlContactPhoneNumber = ...
    olContactPhoneHomeFax: OlContactPhoneNumber = ...
    olContactPhoneISDN: OlContactPhoneNumber = ...
    olContactPhoneMobile: OlContactPhoneNumber = ...
    olContactPhoneOther: OlContactPhoneNumber = ...
    olContactPhoneOtherFax: OlContactPhoneNumber = ...
    olContactPhonePager: OlContactPhoneNumber = ...
    olContactPhonePrimary: OlContactPhoneNumber = ...
    olContactPhoneRadio: OlContactPhoneNumber = ...
    olContactPhoneTelex: OlContactPhoneNumber = ...
    olContactPhoneTTYTTD: OlContactPhoneNumber = ...
    value__ = ...


class OlContextMenu(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlContextMenu, values: olAttachmentContextMenu (3), olFolderContextMenu (2), olItemContextMenu (0), olShortcutContextMenu (5), olStoreContextMenu (4), olViewContextMenu (1) """
    olAttachmentContextMenu: OlContextMenu = ...
    olFolderContextMenu: OlContextMenu = ...
    olItemContextMenu: OlContextMenu = ...
    olShortcutContextMenu: OlContextMenu = ...
    olStoreContextMenu: OlContextMenu = ...
    olViewContextMenu: OlContextMenu = ...
    value__ = ...


class OlDaysOfWeek(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlDaysOfWeek, values: olFriday (32), olMonday (2), olSaturday (64), olSunday (1), olThursday (16), olTuesday (4), olWednesday (8) """
    olFriday: OlDaysOfWeek = ...
    olMonday: OlDaysOfWeek = ...
    olSaturday: OlDaysOfWeek = ...
    olSunday: OlDaysOfWeek = ...
    olThursday: OlDaysOfWeek = ...
    olTuesday: OlDaysOfWeek = ...
    olWednesday: OlDaysOfWeek = ...
    value__ = ...


class OlDayWeekTimeScale(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlDayWeekTimeScale, values: olTimeScale10Minutes (2), olTimeScale15Minutes (3), olTimeScale30Minutes (4), olTimeScale5Minutes (0), olTimeScale60Minutes (5), olTimeScale6Minutes (1) """
    olTimeScale10Minutes: OlDayWeekTimeScale = ...
    olTimeScale15Minutes: OlDayWeekTimeScale = ...
    olTimeScale30Minutes: OlDayWeekTimeScale = ...
    olTimeScale5Minutes: OlDayWeekTimeScale = ...
    olTimeScale60Minutes: OlDayWeekTimeScale = ...
    olTimeScale6Minutes: OlDayWeekTimeScale = ...
    value__ = ...


class OlDefaultExpandCollapseSetting(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlDefaultExpandCollapseSetting, values: olAllCollapsed (1), olAllExpanded (0), olLastViewed (2) """
    olAllCollapsed: OlDefaultExpandCollapseSetting = ...
    olAllExpanded: OlDefaultExpandCollapseSetting = ...
    olLastViewed: OlDefaultExpandCollapseSetting = ...
    value__ = ...


class OlDefaultFolders(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlDefaultFolders, values: olFolderCalendar (9), olFolderConflicts (19), olFolderContacts (10), olFolderDeletedItems (3), olFolderDrafts (16), olFolderInbox (6), olFolderJournal (11), olFolderJunk (23), olFolderLocalFailures (21), olFolderManagedEmail (29), olFolderNotes (12), olFolderOutbox (4), olFolderRssFeeds (25), olFolderSentMail (5), olFolderServerFailures (22), olFolderSuggestedContacts (30), olFolderSyncIssues (20), olFolderTasks (13), olFolderToDo (28), olPublicFoldersAllPublicFolders (18) """
    olFolderCalendar: OlDefaultFolders = ...
    olFolderConflicts: OlDefaultFolders = ...
    olFolderContacts: OlDefaultFolders = ...
    olFolderDeletedItems: OlDefaultFolders = ...
    olFolderDrafts: OlDefaultFolders = ...
    olFolderInbox: OlDefaultFolders = ...
    olFolderJournal: OlDefaultFolders = ...
    olFolderJunk: OlDefaultFolders = ...
    olFolderLocalFailures: OlDefaultFolders = ...
    olFolderManagedEmail: OlDefaultFolders = ...
    olFolderNotes: OlDefaultFolders = ...
    olFolderOutbox: OlDefaultFolders = ...
    olFolderRssFeeds: OlDefaultFolders = ...
    olFolderSentMail: OlDefaultFolders = ...
    olFolderServerFailures: OlDefaultFolders = ...
    olFolderSuggestedContacts: OlDefaultFolders = ...
    olFolderSyncIssues: OlDefaultFolders = ...
    olFolderTasks: OlDefaultFolders = ...
    olFolderToDo: OlDefaultFolders = ...
    olPublicFoldersAllPublicFolders: OlDefaultFolders = ...
    value__ = ...


class OlDefaultSelectNamesDisplayMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlDefaultSelectNamesDisplayMode, values: olDefaultDelegates (6), olDefaultMail (1), olDefaultMeeting (2), olDefaultMembers (5), olDefaultPickRooms (8), olDefaultSharingRequest (4), olDefaultSingleName (7), olDefaultTask (3) """
    olDefaultDelegates: OlDefaultSelectNamesDisplayMode = ...
    olDefaultMail: OlDefaultSelectNamesDisplayMode = ...
    olDefaultMeeting: OlDefaultSelectNamesDisplayMode = ...
    olDefaultMembers: OlDefaultSelectNamesDisplayMode = ...
    olDefaultPickRooms: OlDefaultSelectNamesDisplayMode = ...
    olDefaultSharingRequest: OlDefaultSelectNamesDisplayMode = ...
    olDefaultSingleName: OlDefaultSelectNamesDisplayMode = ...
    olDefaultTask: OlDefaultSelectNamesDisplayMode = ...
    value__ = ...


class OlDisplayType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlDisplayType, values: olAgent (3), olDistList (1), olForum (2), olOrganization (4), olPrivateDistList (5), olRemoteUser (6), olUser (0) """
    olAgent: OlDisplayType = ...
    olDistList: OlDisplayType = ...
    olForum: OlDisplayType = ...
    olOrganization: OlDisplayType = ...
    olPrivateDistList: OlDisplayType = ...
    olRemoteUser: OlDisplayType = ...
    olUser: OlDisplayType = ...
    value__ = ...


class OlDownloadState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlDownloadState, values: olFullItem (1), olHeaderOnly (0) """
    olFullItem: OlDownloadState = ...
    olHeaderOnly: OlDownloadState = ...
    value__ = ...


class OlDragBehavior(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlDragBehavior, values: olDragBehaviorDisabled (0), olDragBehaviorEnabled (1) """
    olDragBehaviorDisabled: OlDragBehavior = ...
    olDragBehaviorEnabled: OlDragBehavior = ...
    value__ = ...


class OlEditorType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlEditorType, values: olEditorHTML (2), olEditorRTF (3), olEditorText (1), olEditorWord (4) """
    olEditorHTML: OlEditorType = ...
    olEditorRTF: OlEditorType = ...
    olEditorText: OlEditorType = ...
    olEditorWord: OlEditorType = ...
    value__ = ...


class OlEnterFieldBehavior(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlEnterFieldBehavior, values: olEnterFieldBehaviorRecallSelection (1), olEnterFieldBehaviorSelectAll (0) """
    olEnterFieldBehaviorRecallSelection: OlEnterFieldBehavior = ...
    olEnterFieldBehaviorSelectAll: OlEnterFieldBehavior = ...
    value__ = ...


class OlExchangeConnectionMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlExchangeConnectionMode, values: olCachedConnectedDrizzle (600), olCachedConnectedFull (700), olCachedConnectedHeaders (500), olCachedDisconnected (400), olCachedOffline (200), olDisconnected (300), olNoExchange (0), olOffline (100), olOnline (800) """
    olCachedConnectedDrizzle: OlExchangeConnectionMode = ...
    olCachedConnectedFull: OlExchangeConnectionMode = ...
    olCachedConnectedHeaders: OlExchangeConnectionMode = ...
    olCachedDisconnected: OlExchangeConnectionMode = ...
    olCachedOffline: OlExchangeConnectionMode = ...
    olDisconnected: OlExchangeConnectionMode = ...
    olNoExchange: OlExchangeConnectionMode = ...
    olOffline: OlExchangeConnectionMode = ...
    olOnline: OlExchangeConnectionMode = ...
    value__ = ...


class OlExchangeStoreType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlExchangeStoreType, values: olAdditionalExchangeMailbox (4), olExchangeMailbox (1), olExchangePublicFolder (2), olNotExchange (3), olPrimaryExchangeMailbox (0) """
    olAdditionalExchangeMailbox: OlExchangeStoreType = ...
    olExchangeMailbox: OlExchangeStoreType = ...
    olExchangePublicFolder: OlExchangeStoreType = ...
    olNotExchange: OlExchangeStoreType = ...
    olPrimaryExchangeMailbox: OlExchangeStoreType = ...
    value__ = ...


class OlFlagIcon(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFlagIcon, values: olBlueFlagIcon (5), olGreenFlagIcon (3), olNoFlagIcon (0), olOrangeFlagIcon (2), olPurpleFlagIcon (1), olRedFlagIcon (6), olYellowFlagIcon (4) """
    olBlueFlagIcon: OlFlagIcon = ...
    olGreenFlagIcon: OlFlagIcon = ...
    olNoFlagIcon: OlFlagIcon = ...
    olOrangeFlagIcon: OlFlagIcon = ...
    olPurpleFlagIcon: OlFlagIcon = ...
    olRedFlagIcon: OlFlagIcon = ...
    olYellowFlagIcon: OlFlagIcon = ...
    value__ = ...


class OlFlagStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFlagStatus, values: olFlagComplete (1), olFlagMarked (2), olNoFlag (0) """
    olFlagComplete: OlFlagStatus = ...
    olFlagMarked: OlFlagStatus = ...
    olNoFlag: OlFlagStatus = ...
    value__ = ...


class OlFolderDisplayMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFolderDisplayMode, values: olFolderDisplayFolderOnly (1), olFolderDisplayNoNavigation (2), olFolderDisplayNormal (0) """
    olFolderDisplayFolderOnly: OlFolderDisplayMode = ...
    olFolderDisplayNoNavigation: OlFolderDisplayMode = ...
    olFolderDisplayNormal: OlFolderDisplayMode = ...
    value__ = ...


class OlFormatCurrency(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormatCurrency, values: olFormatCurrencyDecimal (1), olFormatCurrencyNonDecimal (2) """
    olFormatCurrencyDecimal: OlFormatCurrency = ...
    olFormatCurrencyNonDecimal: OlFormatCurrency = ...
    value__ = ...


class OlFormatDateTime(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormatDateTime, values: olFormatDateTimeBestFit (17), olFormatDateTimeLongDate (6), olFormatDateTimeLongDateReversed (7), OlFormatDateTimeLongDayDate (5), olFormatDateTimeLongDayDateTime (1), olFormatDateTimeLongTime (15), olFormatDateTimeShortDate (8), olFormatDateTimeShortDateNumOnly (9), olFormatDateTimeShortDateTime (2), olFormatDateTimeShortDayDate (13), olFormatDateTimeShortDayDateTime (3), olFormatDateTimeShortDayMonth (10), olFormatDateTimeShortDayMonthDateTime (4), olFormatDateTimeShortMonthYear (11), olFormatDateTimeShortMonthYearNumOnly (12), olFormatDateTimeShortTime (16) """
    olFormatDateTimeBestFit: OlFormatDateTime = ...
    olFormatDateTimeLongDate: OlFormatDateTime = ...
    olFormatDateTimeLongDateReversed: OlFormatDateTime = ...
    OlFormatDateTimeLongDayDate: OlFormatDateTime = ...
    olFormatDateTimeLongDayDateTime: OlFormatDateTime = ...
    olFormatDateTimeLongTime: OlFormatDateTime = ...
    olFormatDateTimeShortDate: OlFormatDateTime = ...
    olFormatDateTimeShortDateNumOnly: OlFormatDateTime = ...
    olFormatDateTimeShortDateTime: OlFormatDateTime = ...
    olFormatDateTimeShortDayDate: OlFormatDateTime = ...
    olFormatDateTimeShortDayDateTime: OlFormatDateTime = ...
    olFormatDateTimeShortDayMonth: OlFormatDateTime = ...
    olFormatDateTimeShortDayMonthDateTime: OlFormatDateTime = ...
    olFormatDateTimeShortMonthYear: OlFormatDateTime = ...
    olFormatDateTimeShortMonthYearNumOnly: OlFormatDateTime = ...
    olFormatDateTimeShortTime: OlFormatDateTime = ...
    value__ = ...


class OlFormatDuration(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormatDuration, values: olFormatDurationLong (2), olFormatDurationLongBusiness (4), olFormatDurationShort (1), olFormatDurationShortBusiness (3) """
    olFormatDurationLong: OlFormatDuration = ...
    olFormatDurationLongBusiness: OlFormatDuration = ...
    olFormatDurationShort: OlFormatDuration = ...
    olFormatDurationShortBusiness: OlFormatDuration = ...
    value__ = ...


class OlFormatEnumeration(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormatEnumeration, values: olFormatEnumBitmap (1), olFormatEnumText (2) """
    olFormatEnumBitmap: OlFormatEnumeration = ...
    olFormatEnumText: OlFormatEnumeration = ...
    value__ = ...


class OlFormatInteger(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormatInteger, values: olFormatIntegerComputer1 (2), olFormatIntegerComputer2 (3), olFormatIntegerComputer3 (4), olFormatIntegerPlain (1) """
    olFormatIntegerComputer1: OlFormatInteger = ...
    olFormatIntegerComputer2: OlFormatInteger = ...
    olFormatIntegerComputer3: OlFormatInteger = ...
    olFormatIntegerPlain: OlFormatInteger = ...
    value__ = ...


class OlFormatKeywords(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormatKeywords, values: olFormatKeywordsText (1) """
    olFormatKeywordsText: OlFormatKeywords = ...
    value__ = ...


class OlFormatNumber(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormatNumber, values: olFormatNumber1Decimal (3), olFormatNumber2Decimal (4), olFormatNumberAllDigits (1), olFormatNumberComputer1 (6), olFormatNumberComputer2 (7), olFormatNumberComputer3 (8), olFormatNumberRaw (9), olFormatNumberScientific (5), olFormatNumberTruncated (2) """
    olFormatNumber1Decimal: OlFormatNumber = ...
    olFormatNumber2Decimal: OlFormatNumber = ...
    olFormatNumberAllDigits: OlFormatNumber = ...
    olFormatNumberComputer1: OlFormatNumber = ...
    olFormatNumberComputer2: OlFormatNumber = ...
    olFormatNumberComputer3: OlFormatNumber = ...
    olFormatNumberRaw: OlFormatNumber = ...
    olFormatNumberScientific: OlFormatNumber = ...
    olFormatNumberTruncated: OlFormatNumber = ...
    value__ = ...


class OlFormatPercent(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormatPercent, values: olFormatPercent1Decimal (2), olFormatPercent2Decimal (3), olFormatPercentAllDigits (4), olFormatPercentRounded (1) """
    olFormatPercent1Decimal: OlFormatPercent = ...
    olFormatPercent2Decimal: OlFormatPercent = ...
    olFormatPercentAllDigits: OlFormatPercent = ...
    olFormatPercentRounded: OlFormatPercent = ...
    value__ = ...


class OlFormatSmartFrom(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormatSmartFrom, values: olFormatSmartFromFromOnly (2), olFormatSmartFromFromTo (1) """
    olFormatSmartFromFromOnly: OlFormatSmartFrom = ...
    olFormatSmartFromFromTo: OlFormatSmartFrom = ...
    value__ = ...


class OlFormatText(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormatText, values: olFormatTextText (1) """
    olFormatTextText: OlFormatText = ...
    value__ = ...


class OlFormatYesNo(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormatYesNo, values: olFormatYesNoIcon (4), olFormatYesNoOnOff (2), olFormatYesNoTrueFalse (3), olFormatYesNoYesNo (1) """
    olFormatYesNoIcon: OlFormatYesNo = ...
    olFormatYesNoOnOff: OlFormatYesNo = ...
    olFormatYesNoTrueFalse: OlFormatYesNo = ...
    olFormatYesNoYesNo: OlFormatYesNo = ...
    value__ = ...


class OlFormRegionIcon(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormRegionIcon, values: olFormRegionIconDefault (1), olFormRegionIconEncrypted (9), olFormRegionIconForwarded (5), olFormRegionIconPage (11), olFormRegionIconRead (3), olFormRegionIconRecurring (12), olFormRegionIconReplied (4), olFormRegionIconSigned (8), olFormRegionIconSubmitted (7), olFormRegionIconUnread (2), olFormRegionIconUnsent (6), olFormRegionIconWindow (10) """
    olFormRegionIconDefault: OlFormRegionIcon = ...
    olFormRegionIconEncrypted: OlFormRegionIcon = ...
    olFormRegionIconForwarded: OlFormRegionIcon = ...
    olFormRegionIconPage: OlFormRegionIcon = ...
    olFormRegionIconRead: OlFormRegionIcon = ...
    olFormRegionIconRecurring: OlFormRegionIcon = ...
    olFormRegionIconReplied: OlFormRegionIcon = ...
    olFormRegionIconSigned: OlFormRegionIcon = ...
    olFormRegionIconSubmitted: OlFormRegionIcon = ...
    olFormRegionIconUnread: OlFormRegionIcon = ...
    olFormRegionIconUnsent: OlFormRegionIcon = ...
    olFormRegionIconWindow: OlFormRegionIcon = ...
    value__ = ...


class OlFormRegionMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormRegionMode, values: olFormRegionCompose (1), olFormRegionPreview (2), olFormRegionRead (0) """
    olFormRegionCompose: OlFormRegionMode = ...
    olFormRegionPreview: OlFormRegionMode = ...
    olFormRegionRead: OlFormRegionMode = ...
    value__ = ...


class OlFormRegionSize(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormRegionSize, values: olFormRegionTypeAdjoining (1), olFormRegionTypeSeparate (0) """
    olFormRegionTypeAdjoining: OlFormRegionSize = ...
    olFormRegionTypeSeparate: OlFormRegionSize = ...
    value__ = ...


class OlFormRegistry(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlFormRegistry, values: olDefaultRegistry (0), olFolderRegistry (3), olOrganizationRegistry (4), olPersonalRegistry (2) """
    olDefaultRegistry: OlFormRegistry = ...
    olFolderRegistry: OlFormRegistry = ...
    olOrganizationRegistry: OlFormRegistry = ...
    olPersonalRegistry: OlFormRegistry = ...
    value__ = ...


class OlGender(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlGender, values: olFemale (1), olMale (2), olUnspecified (0) """
    olFemale: OlGender = ...
    olMale: OlGender = ...
    olUnspecified: OlGender = ...
    value__ = ...


class OlGridLineStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlGridLineStyle, values: olGridLineDashes (3), olGridLineLargeDots (2), olGridLineNone (0), olGridLineSmallDots (1), olGridLineSolid (4) """
    olGridLineDashes: OlGridLineStyle = ...
    olGridLineLargeDots: OlGridLineStyle = ...
    olGridLineNone: OlGridLineStyle = ...
    olGridLineSmallDots: OlGridLineStyle = ...
    olGridLineSolid: OlGridLineStyle = ...
    value__ = ...


class OlGroupType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlGroupType, values: olCustomFoldersGroup (0), olFavoriteFoldersGroup (4), olMyFoldersGroup (1), olOtherFoldersGroup (3), olPeopleFoldersGroup (2), olReadOnlyGroup (6), olRoomsGroup (5) """
    olCustomFoldersGroup: OlGroupType = ...
    olFavoriteFoldersGroup: OlGroupType = ...
    olMyFoldersGroup: OlGroupType = ...
    olOtherFoldersGroup: OlGroupType = ...
    olPeopleFoldersGroup: OlGroupType = ...
    olReadOnlyGroup: OlGroupType = ...
    olRoomsGroup: OlGroupType = ...
    value__ = ...


class OlHorizontalLayout(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlHorizontalLayout, values: olHorizontalLayoutAlignCenter (1), olHorizontalLayoutAlignLeft (0), olHorizontalLayoutAlignRight (2), olHorizontalLayoutGrow (3) """
    olHorizontalLayoutAlignCenter: OlHorizontalLayout = ...
    olHorizontalLayoutAlignLeft: OlHorizontalLayout = ...
    olHorizontalLayoutAlignRight: OlHorizontalLayout = ...
    olHorizontalLayoutGrow: OlHorizontalLayout = ...
    value__ = ...


class OlIconViewPlacement(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlIconViewPlacement, values: olIconAutoArrange (2), olIconDoNotArrange (0), olIconLineUp (1), olIconSortAndAutoArrange (3) """
    olIconAutoArrange: OlIconViewPlacement = ...
    olIconDoNotArrange: OlIconViewPlacement = ...
    olIconLineUp: OlIconViewPlacement = ...
    olIconSortAndAutoArrange: OlIconViewPlacement = ...
    value__ = ...


class OlIconViewType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlIconViewType, values: olIconViewLarge (0), olIconViewList (2), olIconViewSmall (1) """
    olIconViewLarge: OlIconViewType = ...
    olIconViewList: OlIconViewType = ...
    olIconViewSmall: OlIconViewType = ...
    value__ = ...


class OlImportance(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlImportance, values: olImportanceHigh (2), olImportanceLow (0), olImportanceNormal (1) """
    olImportanceHigh: OlImportance = ...
    olImportanceLow: OlImportance = ...
    olImportanceNormal: OlImportance = ...
    value__ = ...


class OlInspectorClose(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlInspectorClose, values: olDiscard (1), olPromptForSave (2), olSave (0) """
    olDiscard: OlInspectorClose = ...
    olPromptForSave: OlInspectorClose = ...
    olSave: OlInspectorClose = ...
    value__ = ...


class OlItemType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlItemType, values: olAppointmentItem (1), olContactItem (2), olDistributionListItem (7), olJournalItem (4), olMailItem (0), olMobileItemMMS (12), olMobileItemSMS (11), olNoteItem (5), olPostItem (6), olTaskItem (3) """
    olAppointmentItem: OlItemType = ...
    olContactItem: OlItemType = ...
    olDistributionListItem: OlItemType = ...
    olJournalItem: OlItemType = ...
    olMailItem: OlItemType = ...
    olMobileItemMMS: OlItemType = ...
    olMobileItemSMS: OlItemType = ...
    olNoteItem: OlItemType = ...
    olPostItem: OlItemType = ...
    olTaskItem: OlItemType = ...
    value__ = ...


class OlJournalRecipientType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlJournalRecipientType, values: olAssociatedContact (1) """
    olAssociatedContact: OlJournalRecipientType = ...
    value__ = ...


class OlkBusinessCardControlEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Click(self): # -> 
        """ add_Click(self: OlkBusinessCardControlEvents_Event, : OlkBusinessCardControlEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkBusinessCardControlEvents_Event, : OlkBusinessCardControlEvents_DoubleClickEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkBusinessCardControlEvents_Event, : OlkBusinessCardControlEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkBusinessCardControlEvents_Event, : OlkBusinessCardControlEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkBusinessCardControlEvents_Event, : OlkBusinessCardControlEvents_MouseUpEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkBusinessCardControlEvents_Event, : OlkBusinessCardControlEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkBusinessCardControlEvents_Event, : OlkBusinessCardControlEvents_DoubleClickEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkBusinessCardControlEvents_Event, : OlkBusinessCardControlEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkBusinessCardControlEvents_Event, : OlkBusinessCardControlEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkBusinessCardControlEvents_Event, : OlkBusinessCardControlEvents_MouseUpEventHandler) """
        ...

    Click = ...
    DoubleClick = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkBusinessCardControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkBusinessCardControl) -> StdPicture
        Set: MouseIcon(self: _OlkBusinessCardControl) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkBusinessCardControl) -> OlMousePointer
        Set: MousePointer(self: _OlkBusinessCardControl) = value
        """
        ...



class OlkBusinessCardControl(OlkBusinessCardControlEvents_Event, _OlkBusinessCardControl): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkBusinessCardControlClass(OlkBusinessCardControl, __ComObject): # skipped bases: <type 'OlkBusinessCardControlEvents_Event'>, <type '_OlkBusinessCardControl'>, <type 'object'>
    """ OlkBusinessCardControlClass() """
    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkBusinessCardControlClass) -> StdPicture
        Set: MouseIcon(self: OlkBusinessCardControlClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkBusinessCardControlClass) -> OlMousePointer
        Set: MousePointer(self: OlkBusinessCardControlClass) = value
        """
        ...


    def add_Click(self): # -> 
        """ add_Click(self: OlkBusinessCardControlClass, : OlkBusinessCardControlEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkBusinessCardControlClass, : OlkBusinessCardControlEvents_DoubleClickEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkBusinessCardControlClass, : OlkBusinessCardControlEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkBusinessCardControlClass, : OlkBusinessCardControlEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkBusinessCardControlClass, : OlkBusinessCardControlEvents_MouseUpEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkBusinessCardControlClass, : OlkBusinessCardControlEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkBusinessCardControlClass, : OlkBusinessCardControlEvents_DoubleClickEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkBusinessCardControlClass, : OlkBusinessCardControlEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkBusinessCardControlClass, : OlkBusinessCardControlEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkBusinessCardControlClass, : OlkBusinessCardControlEvents_MouseUpEventHandler) """
        ...

    Click = ...
    DoubleClick = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkBusinessCardControlEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Click(self): # -> 
        """ Click(self: OlkBusinessCardControlEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkBusinessCardControlEvents) """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkBusinessCardControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkBusinessCardControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkBusinessCardControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkBusinessCardControlEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkBusinessCardControlEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkBusinessCardControlEvents_ClickEventHandler) """
        ...


class OlkBusinessCardControlEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkBusinessCardControlEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkBusinessCardControlEvents_DoubleClickEventHandler) """
        ...


class OlkBusinessCardControlEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkBusinessCardControlEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkBusinessCardControlEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkBusinessCardControlEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkBusinessCardControlEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkBusinessCardControlEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkBusinessCardControlEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkBusinessCardControlEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkBusinessCardControlEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkBusinessCardControlEvents_SinkHelper(OlkBusinessCardControlEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_dwCookie = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkCategoryEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Change(self): # -> 
        """ add_Change(self: OlkCategoryEvents_Event, : OlkCategoryEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkCategoryEvents_Event, : OlkCategoryEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkCategoryEvents_Event, : OlkCategoryEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkCategoryEvents_Event, : OlkCategoryEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkCategoryEvents_Event, : OlkCategoryEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkCategoryEvents_Event, : OlkCategoryEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkCategoryEvents_Event, : OlkCategoryEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkCategoryEvents_Event, : OlkCategoryEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkCategoryEvents_Event, : OlkCategoryEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkCategoryEvents_Event, : OlkCategoryEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkCategoryEvents_Event, : OlkCategoryEvents_MouseUpEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkCategoryEvents_Event, : OlkCategoryEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkCategoryEvents_Event, : OlkCategoryEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkCategoryEvents_Event, : OlkCategoryEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkCategoryEvents_Event, : OlkCategoryEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkCategoryEvents_Event, : OlkCategoryEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkCategoryEvents_Event, : OlkCategoryEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkCategoryEvents_Event, : OlkCategoryEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkCategoryEvents_Event, : OlkCategoryEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkCategoryEvents_Event, : OlkCategoryEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkCategoryEvents_Event, : OlkCategoryEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkCategoryEvents_Event, : OlkCategoryEvents_MouseUpEventHandler) """
        ...

    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkCategory: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: _OlkCategory) -> bool
        Set: AutoSize(self: _OlkCategory) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: _OlkCategory) -> UInt32
        Set: BackColor(self: _OlkCategory) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: _OlkCategory) -> OlBackStyle
        Set: BackStyle(self: _OlkCategory) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkCategory) -> bool
        Set: Enabled(self: _OlkCategory) = value
        """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: _OlkCategory) -> UInt32
        Set: ForeColor(self: _OlkCategory) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkCategory) -> StdPicture
        Set: MouseIcon(self: _OlkCategory) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkCategory) -> OlMousePointer
        Set: MousePointer(self: _OlkCategory) = value
        """
        ...



class OlkCategory(_OlkCategory, OlkCategoryEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkCategoryClass(OlkCategory, __ComObject): # skipped bases: <type 'OlkCategoryEvents_Event'>, <type '_OlkCategory'>, <type 'object'>
    """ OlkCategoryClass() """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: OlkCategoryClass) -> bool
        Set: AutoSize(self: OlkCategoryClass) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: OlkCategoryClass) -> UInt32
        Set: BackColor(self: OlkCategoryClass) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: OlkCategoryClass) -> OlBackStyle
        Set: BackStyle(self: OlkCategoryClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkCategoryClass) -> bool
        Set: Enabled(self: OlkCategoryClass) = value
        """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: OlkCategoryClass) -> UInt32
        Set: ForeColor(self: OlkCategoryClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkCategoryClass) -> StdPicture
        Set: MouseIcon(self: OlkCategoryClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkCategoryClass) -> OlMousePointer
        Set: MousePointer(self: OlkCategoryClass) = value
        """
        ...


    def add_Change(self): # -> 
        """ add_Change(self: OlkCategoryClass, : OlkCategoryEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkCategoryClass, : OlkCategoryEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkCategoryClass, : OlkCategoryEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkCategoryClass, : OlkCategoryEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkCategoryClass, : OlkCategoryEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkCategoryClass, : OlkCategoryEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkCategoryClass, : OlkCategoryEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkCategoryClass, : OlkCategoryEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkCategoryClass, : OlkCategoryEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkCategoryClass, : OlkCategoryEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkCategoryClass, : OlkCategoryEvents_MouseUpEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkCategoryClass, : OlkCategoryEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkCategoryClass, : OlkCategoryEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkCategoryClass, : OlkCategoryEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkCategoryClass, : OlkCategoryEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkCategoryClass, : OlkCategoryEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkCategoryClass, : OlkCategoryEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkCategoryClass, : OlkCategoryEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkCategoryClass, : OlkCategoryEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkCategoryClass, : OlkCategoryEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkCategoryClass, : OlkCategoryEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkCategoryClass, : OlkCategoryEvents_MouseUpEventHandler) """
        ...

    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkCategoryEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Change(self): # -> 
        """ Change(self: OlkCategoryEvents) """
        ...

    def Click(self): # -> 
        """ Click(self: OlkCategoryEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkCategoryEvents) """
        ...

    def Enter(self): # -> 
        """ Enter(self: OlkCategoryEvents) """
        ...

    def Exit(self, Cancel:bool) -> bool:
        """ Exit(self: OlkCategoryEvents, Cancel: bool) -> bool """
        ...

    def KeyDown(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyDown(self: OlkCategoryEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def KeyPress(self, KeyAscii:int) -> int:
        """ KeyPress(self: OlkCategoryEvents, KeyAscii: int) -> int """
        ...

    def KeyUp(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyUp(self: OlkCategoryEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkCategoryEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkCategoryEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkCategoryEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCategoryEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCategoryEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCategoryEvents_ChangeEventHandler) """
        ...


class OlkCategoryEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCategoryEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCategoryEvents_ClickEventHandler) """
        ...


class OlkCategoryEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCategoryEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCategoryEvents_DoubleClickEventHandler) """
        ...


class OlkCategoryEvents_EnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCategoryEvents_EnterEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCategoryEvents_EnterEventHandler) """
        ...


class OlkCategoryEvents_ExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCategoryEvents_ExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkCategoryEvents_ExitEventHandler, Cancel: bool) -> bool """
        ...


class OlkCategoryEvents_KeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCategoryEvents_KeyDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkCategoryEvents_KeyDownEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkCategoryEvents_KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCategoryEvents_KeyPressEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyAscii:int) -> int:
        """ Invoke(self: OlkCategoryEvents_KeyPressEventHandler, KeyAscii: int) -> int """
        ...


class OlkCategoryEvents_KeyUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCategoryEvents_KeyUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkCategoryEvents_KeyUpEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkCategoryEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCategoryEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkCategoryEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCategoryEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCategoryEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkCategoryEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCategoryEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCategoryEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkCategoryEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCategoryEvents_SinkHelper(OlkCategoryEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_ChangeDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_dwCookie = ...
    m_EnterDelegate = ...
    m_ExitDelegate = ...
    m_KeyDownDelegate = ...
    m_KeyPressDelegate = ...
    m_KeyUpDelegate = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkCheckBoxEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkCheckBoxEvents_Event, : OlkCheckBoxEvents_MouseUpEventHandler) """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkCheckBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> str:
        """
        Get: Accelerator(self: _OlkCheckBox) -> str
        Set: Accelerator(self: _OlkCheckBox) = value
        """
        ...

    @property
    def Alignment(self) -> OlAlignment:
        """
        Get: Alignment(self: _OlkCheckBox) -> OlAlignment
        Set: Alignment(self: _OlkCheckBox) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: _OlkCheckBox) -> UInt32
        Set: BackColor(self: _OlkCheckBox) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: _OlkCheckBox) -> OlBackStyle
        Set: BackStyle(self: _OlkCheckBox) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: _OlkCheckBox) -> str
        Set: Caption(self: _OlkCheckBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkCheckBox) -> bool
        Set: Enabled(self: _OlkCheckBox) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: _OlkCheckBox) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: _OlkCheckBox) -> UInt32
        Set: ForeColor(self: _OlkCheckBox) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkCheckBox) -> StdPicture
        Set: MouseIcon(self: _OlkCheckBox) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkCheckBox) -> OlMousePointer
        Set: MousePointer(self: _OlkCheckBox) = value
        """
        ...

    @property
    def TripleState(self) -> bool:
        """
        Get: TripleState(self: _OlkCheckBox) -> bool
        Set: TripleState(self: _OlkCheckBox) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: _OlkCheckBox) -> object
        Set: Value(self: _OlkCheckBox) = value
        """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: _OlkCheckBox) -> bool
        Set: WordWrap(self: _OlkCheckBox) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OlkCheckBox(_OlkCheckBox, OlkCheckBoxEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkCheckBoxClass(__ComObject, OlkCheckBox): # skipped bases: <type 'OlkCheckBoxEvents_Event'>, <type '_OlkCheckBox'>, <type 'object'>
    """ OlkCheckBoxClass() """
    @property
    def Accelerator(self) -> str:
        """
        Get: Accelerator(self: OlkCheckBoxClass) -> str
        Set: Accelerator(self: OlkCheckBoxClass) = value
        """
        ...

    @property
    def Alignment(self) -> OlAlignment:
        """
        Get: Alignment(self: OlkCheckBoxClass) -> OlAlignment
        Set: Alignment(self: OlkCheckBoxClass) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: OlkCheckBoxClass) -> UInt32
        Set: BackColor(self: OlkCheckBoxClass) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: OlkCheckBoxClass) -> OlBackStyle
        Set: BackStyle(self: OlkCheckBoxClass) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: OlkCheckBoxClass) -> str
        Set: Caption(self: OlkCheckBoxClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkCheckBoxClass) -> bool
        Set: Enabled(self: OlkCheckBoxClass) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: OlkCheckBoxClass) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: OlkCheckBoxClass) -> UInt32
        Set: ForeColor(self: OlkCheckBoxClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkCheckBoxClass) -> StdPicture
        Set: MouseIcon(self: OlkCheckBoxClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkCheckBoxClass) -> OlMousePointer
        Set: MousePointer(self: OlkCheckBoxClass) = value
        """
        ...

    @property
    def TripleState(self) -> bool:
        """
        Get: TripleState(self: OlkCheckBoxClass) -> bool
        Set: TripleState(self: OlkCheckBoxClass) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: OlkCheckBoxClass) -> object
        Set: Value(self: OlkCheckBoxClass) = value
        """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: OlkCheckBoxClass) -> bool
        Set: WordWrap(self: OlkCheckBoxClass) = value
        """
        ...


    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkCheckBoxClass, : OlkCheckBoxEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkCheckBoxClass, : OlkCheckBoxEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkCheckBoxClass, : OlkCheckBoxEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkCheckBoxClass, : OlkCheckBoxEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkCheckBoxClass, : OlkCheckBoxEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkCheckBoxClass, : OlkCheckBoxEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkCheckBoxClass, : OlkCheckBoxEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkCheckBoxClass, : OlkCheckBoxEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkCheckBoxClass, : OlkCheckBoxEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkCheckBoxClass, : OlkCheckBoxEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkCheckBoxClass, : OlkCheckBoxEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkCheckBoxClass, : OlkCheckBoxEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkCheckBoxClass, : OlkCheckBoxEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkCheckBoxClass, : OlkCheckBoxEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkCheckBoxClass, : OlkCheckBoxEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkCheckBoxClass, : OlkCheckBoxEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkCheckBoxClass, : OlkCheckBoxEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkCheckBoxClass, : OlkCheckBoxEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkCheckBoxClass, : OlkCheckBoxEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkCheckBoxClass, : OlkCheckBoxEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkCheckBoxClass, : OlkCheckBoxEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkCheckBoxClass, : OlkCheckBoxEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkCheckBoxClass, : OlkCheckBoxEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkCheckBoxClass, : OlkCheckBoxEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkCheckBoxClass, : OlkCheckBoxEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkCheckBoxClass, : OlkCheckBoxEvents_MouseUpEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkCheckBoxEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterUpdate(self): # -> 
        """ AfterUpdate(self: OlkCheckBoxEvents) """
        ...

    def BeforeUpdate(self, Cancel:bool) -> bool:
        """ BeforeUpdate(self: OlkCheckBoxEvents, Cancel: bool) -> bool """
        ...

    def Change(self): # -> 
        """ Change(self: OlkCheckBoxEvents) """
        ...

    def Click(self): # -> 
        """ Click(self: OlkCheckBoxEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkCheckBoxEvents) """
        ...

    def Enter(self): # -> 
        """ Enter(self: OlkCheckBoxEvents) """
        ...

    def Exit(self, Cancel:bool) -> bool:
        """ Exit(self: OlkCheckBoxEvents, Cancel: bool) -> bool """
        ...

    def KeyDown(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyDown(self: OlkCheckBoxEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def KeyPress(self, KeyAscii:int) -> int:
        """ KeyPress(self: OlkCheckBoxEvents, KeyAscii: int) -> int """
        ...

    def KeyUp(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyUp(self: OlkCheckBoxEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkCheckBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkCheckBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkCheckBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCheckBoxEvents_AfterUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_AfterUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCheckBoxEvents_AfterUpdateEventHandler) """
        ...


class OlkCheckBoxEvents_BeforeUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_BeforeUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkCheckBoxEvents_BeforeUpdateEventHandler, Cancel: bool) -> bool """
        ...


class OlkCheckBoxEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCheckBoxEvents_ChangeEventHandler) """
        ...


class OlkCheckBoxEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCheckBoxEvents_ClickEventHandler) """
        ...


class OlkCheckBoxEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCheckBoxEvents_DoubleClickEventHandler) """
        ...


class OlkCheckBoxEvents_EnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_EnterEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCheckBoxEvents_EnterEventHandler) """
        ...


class OlkCheckBoxEvents_ExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_ExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkCheckBoxEvents_ExitEventHandler, Cancel: bool) -> bool """
        ...


class OlkCheckBoxEvents_KeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_KeyDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkCheckBoxEvents_KeyDownEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkCheckBoxEvents_KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_KeyPressEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyAscii:int) -> int:
        """ Invoke(self: OlkCheckBoxEvents_KeyPressEventHandler, KeyAscii: int) -> int """
        ...


class OlkCheckBoxEvents_KeyUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_KeyUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkCheckBoxEvents_KeyUpEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkCheckBoxEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkCheckBoxEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCheckBoxEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkCheckBoxEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCheckBoxEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCheckBoxEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkCheckBoxEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCheckBoxEvents_SinkHelper(OlkCheckBoxEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterUpdateDelegate = ...
    m_BeforeUpdateDelegate = ...
    m_ChangeDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_dwCookie = ...
    m_EnterDelegate = ...
    m_ExitDelegate = ...
    m_KeyDownDelegate = ...
    m_KeyPressDelegate = ...
    m_KeyUpDelegate = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkComboBoxEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_DoubleClickEventHandler) """
        ...

    def add_DropButtonClick(self): # -> 
        """ add_DropButtonClick(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_DropButtonClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_DoubleClickEventHandler) """
        ...

    def remove_DropButtonClick(self): # -> 
        """ remove_DropButtonClick(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_DropButtonClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkComboBoxEvents_Event, : OlkComboBoxEvents_MouseUpEventHandler) """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    DropButtonClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkComboBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: _OlkComboBox) -> bool
        Set: AutoSize(self: _OlkComboBox) = value
        """
        ...

    @property
    def AutoTab(self) -> bool:
        """
        Get: AutoTab(self: _OlkComboBox) -> bool
        Set: AutoTab(self: _OlkComboBox) = value
        """
        ...

    @property
    def AutoWordSelect(self) -> bool:
        """
        Get: AutoWordSelect(self: _OlkComboBox) -> bool
        Set: AutoWordSelect(self: _OlkComboBox) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: _OlkComboBox) -> UInt32
        Set: BackColor(self: _OlkComboBox) = value
        """
        ...

    @property
    def BorderStyle(self) -> OlBorderStyle:
        """
        Get: BorderStyle(self: _OlkComboBox) -> OlBorderStyle
        Set: BorderStyle(self: _OlkComboBox) = value
        """
        ...

    @property
    def DragBehavior(self) -> OlDragBehavior:
        """
        Get: DragBehavior(self: _OlkComboBox) -> OlDragBehavior
        Set: DragBehavior(self: _OlkComboBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkComboBox) -> bool
        Set: Enabled(self: _OlkComboBox) = value
        """
        ...

    @property
    def EnterFieldBehavior(self) -> OlEnterFieldBehavior:
        """
        Get: EnterFieldBehavior(self: _OlkComboBox) -> OlEnterFieldBehavior
        Set: EnterFieldBehavior(self: _OlkComboBox) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: _OlkComboBox) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: _OlkComboBox) -> UInt32
        Set: ForeColor(self: _OlkComboBox) = value
        """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: _OlkComboBox) -> bool
        Set: HideSelection(self: _OlkComboBox) = value
        """
        ...

    @property
    def ListCount(self) -> int:
        """ Get: ListCount(self: _OlkComboBox) -> int """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: _OlkComboBox) -> int
        Set: ListIndex(self: _OlkComboBox) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: _OlkComboBox) -> bool
        Set: Locked(self: _OlkComboBox) = value
        """
        ...

    @property
    def MaxLength(self) -> int:
        """
        Get: MaxLength(self: _OlkComboBox) -> int
        Set: MaxLength(self: _OlkComboBox) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkComboBox) -> StdPicture
        Set: MouseIcon(self: _OlkComboBox) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkComboBox) -> OlMousePointer
        Set: MousePointer(self: _OlkComboBox) = value
        """
        ...

    @property
    def SelectionMargin(self) -> bool:
        """
        Get: SelectionMargin(self: _OlkComboBox) -> bool
        Set: SelectionMargin(self: _OlkComboBox) = value
        """
        ...

    @property
    def SelLength(self) -> int:
        """
        Get: SelLength(self: _OlkComboBox) -> int
        Set: SelLength(self: _OlkComboBox) = value
        """
        ...

    @property
    def SelStart(self) -> int:
        """
        Get: SelStart(self: _OlkComboBox) -> int
        Set: SelStart(self: _OlkComboBox) = value
        """
        ...

    @property
    def SelText(self) -> str:
        """ Get: SelText(self: _OlkComboBox) -> str """
        ...

    @property
    def Style(self) -> OlComboBoxStyle:
        """
        Get: Style(self: _OlkComboBox) -> OlComboBoxStyle
        Set: Style(self: _OlkComboBox) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: _OlkComboBox) -> str
        Set: Text(self: _OlkComboBox) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: _OlkComboBox) -> OlTextAlign
        Set: TextAlign(self: _OlkComboBox) = value
        """
        ...

    @property
    def TopIndex(self) -> int:
        """
        Get: TopIndex(self: _OlkComboBox) -> int
        Set: TopIndex(self: _OlkComboBox) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: _OlkComboBox) -> object
        Set: Value(self: _OlkComboBox) = value
        """
        ...


    def AddItem(self, ItemText:str, Index:object): # -> 
        """ AddItem(self: _OlkComboBox, ItemText: str, Index: object) """
        ...

    def Clear(self): # -> 
        """ Clear(self: _OlkComboBox) """
        ...

    def Copy(self): # -> 
        """ Copy(self: _OlkComboBox) """
        ...

    def Cut(self): # -> 
        """ Cut(self: _OlkComboBox) """
        ...

    def DropDown(self): # -> 
        """ DropDown(self: _OlkComboBox) """
        ...

    def GetItem(self, Index:int) -> str:
        """ GetItem(self: _OlkComboBox, Index: int) -> str """
        ...

    def Paste(self): # -> 
        """ Paste(self: _OlkComboBox) """
        ...

    def RemoveItem(self, Index:int): # -> 
        """ RemoveItem(self: _OlkComboBox, Index: int) """
        ...

    def SetItem(self, Index:int, Item:str): # -> 
        """ SetItem(self: _OlkComboBox, Index: int, Item: str) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OlkComboBox(OlkComboBoxEvents_Event, _OlkComboBox): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkComboBoxClass(OlkComboBox, __ComObject): # skipped bases: <type '_OlkComboBox'>, <type 'OlkComboBoxEvents_Event'>, <type 'object'>
    """ OlkComboBoxClass() """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: OlkComboBoxClass) -> bool
        Set: AutoSize(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def AutoTab(self) -> bool:
        """
        Get: AutoTab(self: OlkComboBoxClass) -> bool
        Set: AutoTab(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def AutoWordSelect(self) -> bool:
        """
        Get: AutoWordSelect(self: OlkComboBoxClass) -> bool
        Set: AutoWordSelect(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: OlkComboBoxClass) -> UInt32
        Set: BackColor(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def BorderStyle(self) -> OlBorderStyle:
        """
        Get: BorderStyle(self: OlkComboBoxClass) -> OlBorderStyle
        Set: BorderStyle(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def DragBehavior(self) -> OlDragBehavior:
        """
        Get: DragBehavior(self: OlkComboBoxClass) -> OlDragBehavior
        Set: DragBehavior(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkComboBoxClass) -> bool
        Set: Enabled(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def EnterFieldBehavior(self) -> OlEnterFieldBehavior:
        """
        Get: EnterFieldBehavior(self: OlkComboBoxClass) -> OlEnterFieldBehavior
        Set: EnterFieldBehavior(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: OlkComboBoxClass) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: OlkComboBoxClass) -> UInt32
        Set: ForeColor(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: OlkComboBoxClass) -> bool
        Set: HideSelection(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def ListCount(self) -> int:
        """ Get: ListCount(self: OlkComboBoxClass) -> int """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: OlkComboBoxClass) -> int
        Set: ListIndex(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: OlkComboBoxClass) -> bool
        Set: Locked(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def MaxLength(self) -> int:
        """
        Get: MaxLength(self: OlkComboBoxClass) -> int
        Set: MaxLength(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkComboBoxClass) -> StdPicture
        Set: MouseIcon(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkComboBoxClass) -> OlMousePointer
        Set: MousePointer(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def SelectionMargin(self) -> bool:
        """
        Get: SelectionMargin(self: OlkComboBoxClass) -> bool
        Set: SelectionMargin(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def SelLength(self) -> int:
        """
        Get: SelLength(self: OlkComboBoxClass) -> int
        Set: SelLength(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def SelStart(self) -> int:
        """
        Get: SelStart(self: OlkComboBoxClass) -> int
        Set: SelStart(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def SelText(self) -> str:
        """ Get: SelText(self: OlkComboBoxClass) -> str """
        ...

    @property
    def Style(self) -> OlComboBoxStyle:
        """
        Get: Style(self: OlkComboBoxClass) -> OlComboBoxStyle
        Set: Style(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: OlkComboBoxClass) -> str
        Set: Text(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: OlkComboBoxClass) -> OlTextAlign
        Set: TextAlign(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def TopIndex(self) -> int:
        """
        Get: TopIndex(self: OlkComboBoxClass) -> int
        Set: TopIndex(self: OlkComboBoxClass) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: OlkComboBoxClass) -> object
        Set: Value(self: OlkComboBoxClass) = value
        """
        ...


    def AddItem(self, ItemText:str, Index:object): # -> 
        """ AddItem(self: OlkComboBoxClass, ItemText: str, Index: object) """
        ...

    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkComboBoxClass, : OlkComboBoxEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkComboBoxClass, : OlkComboBoxEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkComboBoxClass, : OlkComboBoxEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkComboBoxClass, : OlkComboBoxEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkComboBoxClass, : OlkComboBoxEvents_DoubleClickEventHandler) """
        ...

    def add_DropButtonClick(self): # -> 
        """ add_DropButtonClick(self: OlkComboBoxClass, : OlkComboBoxEvents_DropButtonClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkComboBoxClass, : OlkComboBoxEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkComboBoxClass, : OlkComboBoxEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkComboBoxClass, : OlkComboBoxEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkComboBoxClass, : OlkComboBoxEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkComboBoxClass, : OlkComboBoxEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkComboBoxClass, : OlkComboBoxEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkComboBoxClass, : OlkComboBoxEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkComboBoxClass, : OlkComboBoxEvents_MouseUpEventHandler) """
        ...

    def Clear(self): # -> 
        """ Clear(self: OlkComboBoxClass) """
        ...

    def Copy(self): # -> 
        """ Copy(self: OlkComboBoxClass) """
        ...

    def Cut(self): # -> 
        """ Cut(self: OlkComboBoxClass) """
        ...

    def DropDown(self): # -> 
        """ DropDown(self: OlkComboBoxClass) """
        ...

    def GetItem(self, Index:int) -> str:
        """ GetItem(self: OlkComboBoxClass, Index: int) -> str """
        ...

    def Paste(self): # -> 
        """ Paste(self: OlkComboBoxClass) """
        ...

    def RemoveItem(self, Index:int): # -> 
        """ RemoveItem(self: OlkComboBoxClass, Index: int) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkComboBoxClass, : OlkComboBoxEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkComboBoxClass, : OlkComboBoxEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkComboBoxClass, : OlkComboBoxEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkComboBoxClass, : OlkComboBoxEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkComboBoxClass, : OlkComboBoxEvents_DoubleClickEventHandler) """
        ...

    def remove_DropButtonClick(self): # -> 
        """ remove_DropButtonClick(self: OlkComboBoxClass, : OlkComboBoxEvents_DropButtonClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkComboBoxClass, : OlkComboBoxEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkComboBoxClass, : OlkComboBoxEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkComboBoxClass, : OlkComboBoxEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkComboBoxClass, : OlkComboBoxEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkComboBoxClass, : OlkComboBoxEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkComboBoxClass, : OlkComboBoxEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkComboBoxClass, : OlkComboBoxEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkComboBoxClass, : OlkComboBoxEvents_MouseUpEventHandler) """
        ...

    def SetItem(self, Index:int, Item:str): # -> 
        """ SetItem(self: OlkComboBoxClass, Index: int, Item: str) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    DropButtonClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkComboBoxEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterUpdate(self): # -> 
        """ AfterUpdate(self: OlkComboBoxEvents) """
        ...

    def BeforeUpdate(self, Cancel:bool) -> bool:
        """ BeforeUpdate(self: OlkComboBoxEvents, Cancel: bool) -> bool """
        ...

    def Change(self): # -> 
        """ Change(self: OlkComboBoxEvents) """
        ...

    def Click(self): # -> 
        """ Click(self: OlkComboBoxEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkComboBoxEvents) """
        ...

    def DropButtonClick(self): # -> 
        """ DropButtonClick(self: OlkComboBoxEvents) """
        ...

    def Enter(self): # -> 
        """ Enter(self: OlkComboBoxEvents) """
        ...

    def Exit(self, Cancel:bool) -> bool:
        """ Exit(self: OlkComboBoxEvents, Cancel: bool) -> bool """
        ...

    def KeyDown(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyDown(self: OlkComboBoxEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def KeyPress(self, KeyAscii:int) -> int:
        """ KeyPress(self: OlkComboBoxEvents, KeyAscii: int) -> int """
        ...

    def KeyUp(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyUp(self: OlkComboBoxEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkComboBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkComboBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkComboBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkComboBoxEvents_AfterUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_AfterUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkComboBoxEvents_AfterUpdateEventHandler) """
        ...


class OlkComboBoxEvents_BeforeUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_BeforeUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkComboBoxEvents_BeforeUpdateEventHandler, Cancel: bool) -> bool """
        ...


class OlkComboBoxEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkComboBoxEvents_ChangeEventHandler) """
        ...


class OlkComboBoxEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkComboBoxEvents_ClickEventHandler) """
        ...


class OlkComboBoxEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkComboBoxEvents_DoubleClickEventHandler) """
        ...


class OlkComboBoxEvents_DropButtonClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_DropButtonClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkComboBoxEvents_DropButtonClickEventHandler) """
        ...


class OlkComboBoxEvents_EnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_EnterEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkComboBoxEvents_EnterEventHandler) """
        ...


class OlkComboBoxEvents_ExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_ExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkComboBoxEvents_ExitEventHandler, Cancel: bool) -> bool """
        ...


class OlkComboBoxEvents_KeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_KeyDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkComboBoxEvents_KeyDownEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkComboBoxEvents_KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_KeyPressEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyAscii:int) -> int:
        """ Invoke(self: OlkComboBoxEvents_KeyPressEventHandler, KeyAscii: int) -> int """
        ...


class OlkComboBoxEvents_KeyUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_KeyUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkComboBoxEvents_KeyUpEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkComboBoxEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkComboBoxEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkComboBoxEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkComboBoxEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkComboBoxEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkComboBoxEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkComboBoxEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkComboBoxEvents_SinkHelper(OlkComboBoxEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterUpdateDelegate = ...
    m_BeforeUpdateDelegate = ...
    m_ChangeDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_DropButtonClickDelegate = ...
    m_dwCookie = ...
    m_EnterDelegate = ...
    m_ExitDelegate = ...
    m_KeyDownDelegate = ...
    m_KeyPressDelegate = ...
    m_KeyUpDelegate = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkCommandButtonEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_BeforeUpdateEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkCommandButtonEvents_Event, : OlkCommandButtonEvents_MouseUpEventHandler) """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkCommandButton: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> str:
        """
        Get: Accelerator(self: _OlkCommandButton) -> str
        Set: Accelerator(self: _OlkCommandButton) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: _OlkCommandButton) -> bool
        Set: AutoSize(self: _OlkCommandButton) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: _OlkCommandButton) -> str
        Set: Caption(self: _OlkCommandButton) = value
        """
        ...

    @property
    def DisplayDropArrow(self) -> bool:
        """
        Get: DisplayDropArrow(self: _OlkCommandButton) -> bool
        Set: DisplayDropArrow(self: _OlkCommandButton) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkCommandButton) -> bool
        Set: Enabled(self: _OlkCommandButton) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: _OlkCommandButton) -> StdFont """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkCommandButton) -> StdPicture
        Set: MouseIcon(self: _OlkCommandButton) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkCommandButton) -> OlMousePointer
        Set: MousePointer(self: _OlkCommandButton) = value
        """
        ...

    @property
    def Picture(self): # -> StdPicture
        """
        Get: Picture(self: _OlkCommandButton) -> StdPicture
        Set: Picture(self: _OlkCommandButton) = value
        """
        ...

    @property
    def PictureAlignment(self) -> OlPictureAlignment:
        """
        Get: PictureAlignment(self: _OlkCommandButton) -> OlPictureAlignment
        Set: PictureAlignment(self: _OlkCommandButton) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: _OlkCommandButton) -> OlTextAlign
        Set: TextAlign(self: _OlkCommandButton) = value
        """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: _OlkCommandButton) -> bool
        Set: WordWrap(self: _OlkCommandButton) = value
        """
        ...



class OlkCommandButton(OlkCommandButtonEvents_Event, _OlkCommandButton): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkCommandButtonClass(OlkCommandButton, __ComObject): # skipped bases: <type '_OlkCommandButton'>, <type 'OlkCommandButtonEvents_Event'>, <type 'object'>
    """ OlkCommandButtonClass() """
    @property
    def Accelerator(self) -> str:
        """
        Get: Accelerator(self: OlkCommandButtonClass) -> str
        Set: Accelerator(self: OlkCommandButtonClass) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: OlkCommandButtonClass) -> bool
        Set: AutoSize(self: OlkCommandButtonClass) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: OlkCommandButtonClass) -> str
        Set: Caption(self: OlkCommandButtonClass) = value
        """
        ...

    @property
    def DisplayDropArrow(self) -> bool:
        """
        Get: DisplayDropArrow(self: OlkCommandButtonClass) -> bool
        Set: DisplayDropArrow(self: OlkCommandButtonClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkCommandButtonClass) -> bool
        Set: Enabled(self: OlkCommandButtonClass) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: OlkCommandButtonClass) -> StdFont """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkCommandButtonClass) -> StdPicture
        Set: MouseIcon(self: OlkCommandButtonClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkCommandButtonClass) -> OlMousePointer
        Set: MousePointer(self: OlkCommandButtonClass) = value
        """
        ...

    @property
    def Picture(self): # -> StdPicture
        """
        Get: Picture(self: OlkCommandButtonClass) -> StdPicture
        Set: Picture(self: OlkCommandButtonClass) = value
        """
        ...

    @property
    def PictureAlignment(self) -> OlPictureAlignment:
        """
        Get: PictureAlignment(self: OlkCommandButtonClass) -> OlPictureAlignment
        Set: PictureAlignment(self: OlkCommandButtonClass) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: OlkCommandButtonClass) -> OlTextAlign
        Set: TextAlign(self: OlkCommandButtonClass) = value
        """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: OlkCommandButtonClass) -> bool
        Set: WordWrap(self: OlkCommandButtonClass) = value
        """
        ...


    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkCommandButtonClass, : OlkCommandButtonEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkCommandButtonClass, : OlkCommandButtonEvents_BeforeUpdateEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkCommandButtonClass, : OlkCommandButtonEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkCommandButtonClass, : OlkCommandButtonEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkCommandButtonClass, : OlkCommandButtonEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkCommandButtonClass, : OlkCommandButtonEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkCommandButtonClass, : OlkCommandButtonEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkCommandButtonClass, : OlkCommandButtonEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkCommandButtonClass, : OlkCommandButtonEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkCommandButtonClass, : OlkCommandButtonEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkCommandButtonClass, : OlkCommandButtonEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkCommandButtonClass, : OlkCommandButtonEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkCommandButtonClass, : OlkCommandButtonEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkCommandButtonClass, : OlkCommandButtonEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkCommandButtonClass, : OlkCommandButtonEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkCommandButtonClass, : OlkCommandButtonEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkCommandButtonClass, : OlkCommandButtonEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkCommandButtonClass, : OlkCommandButtonEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkCommandButtonClass, : OlkCommandButtonEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkCommandButtonClass, : OlkCommandButtonEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkCommandButtonClass, : OlkCommandButtonEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkCommandButtonClass, : OlkCommandButtonEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkCommandButtonClass, : OlkCommandButtonEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkCommandButtonClass, : OlkCommandButtonEvents_MouseUpEventHandler) """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkCommandButtonEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterUpdate(self): # -> 
        """ AfterUpdate(self: OlkCommandButtonEvents) """
        ...

    def BeforeUpdate(self, Cancel:bool) -> bool:
        """ BeforeUpdate(self: OlkCommandButtonEvents, Cancel: bool) -> bool """
        ...

    def Click(self): # -> 
        """ Click(self: OlkCommandButtonEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkCommandButtonEvents) """
        ...

    def Enter(self): # -> 
        """ Enter(self: OlkCommandButtonEvents) """
        ...

    def Exit(self, Cancel:bool) -> bool:
        """ Exit(self: OlkCommandButtonEvents, Cancel: bool) -> bool """
        ...

    def KeyDown(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyDown(self: OlkCommandButtonEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def KeyPress(self, KeyAscii:int) -> int:
        """ KeyPress(self: OlkCommandButtonEvents, KeyAscii: int) -> int """
        ...

    def KeyUp(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyUp(self: OlkCommandButtonEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkCommandButtonEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkCommandButtonEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkCommandButtonEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCommandButtonEvents_AfterUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_AfterUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCommandButtonEvents_AfterUpdateEventHandler) """
        ...


class OlkCommandButtonEvents_BeforeUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_BeforeUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkCommandButtonEvents_BeforeUpdateEventHandler, Cancel: bool) -> bool """
        ...


class OlkCommandButtonEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCommandButtonEvents_ClickEventHandler) """
        ...


class OlkCommandButtonEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCommandButtonEvents_DoubleClickEventHandler) """
        ...


class OlkCommandButtonEvents_EnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_EnterEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkCommandButtonEvents_EnterEventHandler) """
        ...


class OlkCommandButtonEvents_ExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_ExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkCommandButtonEvents_ExitEventHandler, Cancel: bool) -> bool """
        ...


class OlkCommandButtonEvents_KeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_KeyDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkCommandButtonEvents_KeyDownEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkCommandButtonEvents_KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_KeyPressEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyAscii:int) -> int:
        """ Invoke(self: OlkCommandButtonEvents_KeyPressEventHandler, KeyAscii: int) -> int """
        ...


class OlkCommandButtonEvents_KeyUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_KeyUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkCommandButtonEvents_KeyUpEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkCommandButtonEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkCommandButtonEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCommandButtonEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkCommandButtonEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCommandButtonEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkCommandButtonEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkCommandButtonEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkCommandButtonEvents_SinkHelper(OlkCommandButtonEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterUpdateDelegate = ...
    m_BeforeUpdateDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_dwCookie = ...
    m_EnterDelegate = ...
    m_ExitDelegate = ...
    m_KeyDownDelegate = ...
    m_KeyPressDelegate = ...
    m_KeyUpDelegate = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkContactPhotoEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Change(self): # -> 
        """ add_Change(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_MouseUpEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkContactPhotoEvents_Event, : OlkContactPhotoEvents_MouseUpEventHandler) """
        ...

    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkContactPhoto: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkContactPhoto) -> bool
        Set: Enabled(self: _OlkContactPhoto) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkContactPhoto) -> StdPicture
        Set: MouseIcon(self: _OlkContactPhoto) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkContactPhoto) -> OlMousePointer
        Set: MousePointer(self: _OlkContactPhoto) = value
        """
        ...



class OlkContactPhoto(OlkContactPhotoEvents_Event, _OlkContactPhoto): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkContactPhotoClass(OlkContactPhoto, __ComObject): # skipped bases: <type 'OlkContactPhotoEvents_Event'>, <type '_OlkContactPhoto'>, <type 'object'>
    """ OlkContactPhotoClass() """
    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkContactPhotoClass) -> bool
        Set: Enabled(self: OlkContactPhotoClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkContactPhotoClass) -> StdPicture
        Set: MouseIcon(self: OlkContactPhotoClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkContactPhotoClass) -> OlMousePointer
        Set: MousePointer(self: OlkContactPhotoClass) = value
        """
        ...


    def add_Change(self): # -> 
        """ add_Change(self: OlkContactPhotoClass, : OlkContactPhotoEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkContactPhotoClass, : OlkContactPhotoEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkContactPhotoClass, : OlkContactPhotoEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkContactPhotoClass, : OlkContactPhotoEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkContactPhotoClass, : OlkContactPhotoEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkContactPhotoClass, : OlkContactPhotoEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkContactPhotoClass, : OlkContactPhotoEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkContactPhotoClass, : OlkContactPhotoEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkContactPhotoClass, : OlkContactPhotoEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkContactPhotoClass, : OlkContactPhotoEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkContactPhotoClass, : OlkContactPhotoEvents_MouseUpEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkContactPhotoClass, : OlkContactPhotoEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkContactPhotoClass, : OlkContactPhotoEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkContactPhotoClass, : OlkContactPhotoEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkContactPhotoClass, : OlkContactPhotoEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkContactPhotoClass, : OlkContactPhotoEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkContactPhotoClass, : OlkContactPhotoEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkContactPhotoClass, : OlkContactPhotoEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkContactPhotoClass, : OlkContactPhotoEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkContactPhotoClass, : OlkContactPhotoEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkContactPhotoClass, : OlkContactPhotoEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkContactPhotoClass, : OlkContactPhotoEvents_MouseUpEventHandler) """
        ...

    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkContactPhotoEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Change(self): # -> 
        """ Change(self: OlkContactPhotoEvents) """
        ...

    def Click(self): # -> 
        """ Click(self: OlkContactPhotoEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkContactPhotoEvents) """
        ...

    def Enter(self): # -> 
        """ Enter(self: OlkContactPhotoEvents) """
        ...

    def Exit(self, Cancel:bool) -> bool:
        """ Exit(self: OlkContactPhotoEvents, Cancel: bool) -> bool """
        ...

    def KeyDown(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyDown(self: OlkContactPhotoEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def KeyPress(self, KeyAscii:int) -> int:
        """ KeyPress(self: OlkContactPhotoEvents, KeyAscii: int) -> int """
        ...

    def KeyUp(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyUp(self: OlkContactPhotoEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkContactPhotoEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkContactPhotoEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkContactPhotoEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkContactPhotoEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkContactPhotoEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkContactPhotoEvents_ChangeEventHandler) """
        ...


class OlkContactPhotoEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkContactPhotoEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkContactPhotoEvents_ClickEventHandler) """
        ...


class OlkContactPhotoEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkContactPhotoEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkContactPhotoEvents_DoubleClickEventHandler) """
        ...


class OlkContactPhotoEvents_EnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkContactPhotoEvents_EnterEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkContactPhotoEvents_EnterEventHandler) """
        ...


class OlkContactPhotoEvents_ExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkContactPhotoEvents_ExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkContactPhotoEvents_ExitEventHandler, Cancel: bool) -> bool """
        ...


class OlkContactPhotoEvents_KeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkContactPhotoEvents_KeyDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkContactPhotoEvents_KeyDownEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkContactPhotoEvents_KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkContactPhotoEvents_KeyPressEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyAscii:int) -> int:
        """ Invoke(self: OlkContactPhotoEvents_KeyPressEventHandler, KeyAscii: int) -> int """
        ...


class OlkContactPhotoEvents_KeyUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkContactPhotoEvents_KeyUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkContactPhotoEvents_KeyUpEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkContactPhotoEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkContactPhotoEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkContactPhotoEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkContactPhotoEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkContactPhotoEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkContactPhotoEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkContactPhotoEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkContactPhotoEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkContactPhotoEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkContactPhotoEvents_SinkHelper(OlkContactPhotoEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_ChangeDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_dwCookie = ...
    m_EnterDelegate = ...
    m_ExitDelegate = ...
    m_KeyDownDelegate = ...
    m_KeyPressDelegate = ...
    m_KeyUpDelegate = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ControlProperty(self) -> str:
        """
        Get: ControlProperty(self: OlkControl) -> str
        Set: ControlProperty(self: OlkControl) = value
        """
        ...

    @property
    def EnableAutoLayout(self) -> bool:
        """
        Get: EnableAutoLayout(self: OlkControl) -> bool
        Set: EnableAutoLayout(self: OlkControl) = value
        """
        ...

    @property
    def Format(self) -> int:
        """
        Get: Format(self: OlkControl) -> int
        Set: Format(self: OlkControl) = value
        """
        ...

    @property
    def HorizontalLayout(self) -> OlHorizontalLayout:
        """
        Get: HorizontalLayout(self: OlkControl) -> OlHorizontalLayout
        Set: HorizontalLayout(self: OlkControl) = value
        """
        ...

    @property
    def ItemProperty(self) -> str:
        """
        Get: ItemProperty(self: OlkControl) -> str
        Set: ItemProperty(self: OlkControl) = value
        """
        ...

    @property
    def MinimumHeight(self) -> int:
        """
        Get: MinimumHeight(self: OlkControl) -> int
        Set: MinimumHeight(self: OlkControl) = value
        """
        ...

    @property
    def MinimumWidth(self) -> int:
        """
        Get: MinimumWidth(self: OlkControl) -> int
        Set: MinimumWidth(self: OlkControl) = value
        """
        ...

    @property
    def PossibleValues(self) -> str:
        """
        Get: PossibleValues(self: OlkControl) -> str
        Set: PossibleValues(self: OlkControl) = value
        """
        ...

    @property
    def VerticalLayout(self) -> OlVerticalLayout:
        """
        Get: VerticalLayout(self: OlkControl) -> OlVerticalLayout
        Set: VerticalLayout(self: OlkControl) = value
        """
        ...



class OlkDateControlEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkDateControlEvents_Event, : OlkDateControlEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkDateControlEvents_Event, : OlkDateControlEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkDateControlEvents_Event, : OlkDateControlEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkDateControlEvents_Event, : OlkDateControlEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkDateControlEvents_Event, : OlkDateControlEvents_DoubleClickEventHandler) """
        ...

    def add_DropButtonClick(self): # -> 
        """ add_DropButtonClick(self: OlkDateControlEvents_Event, : OlkDateControlEvents_DropButtonClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkDateControlEvents_Event, : OlkDateControlEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkDateControlEvents_Event, : OlkDateControlEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkDateControlEvents_Event, : OlkDateControlEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkDateControlEvents_Event, : OlkDateControlEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkDateControlEvents_Event, : OlkDateControlEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkDateControlEvents_Event, : OlkDateControlEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkDateControlEvents_Event, : OlkDateControlEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkDateControlEvents_Event, : OlkDateControlEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkDateControlEvents_Event, : OlkDateControlEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkDateControlEvents_Event, : OlkDateControlEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkDateControlEvents_Event, : OlkDateControlEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkDateControlEvents_Event, : OlkDateControlEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkDateControlEvents_Event, : OlkDateControlEvents_DoubleClickEventHandler) """
        ...

    def remove_DropButtonClick(self): # -> 
        """ remove_DropButtonClick(self: OlkDateControlEvents_Event, : OlkDateControlEvents_DropButtonClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkDateControlEvents_Event, : OlkDateControlEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkDateControlEvents_Event, : OlkDateControlEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkDateControlEvents_Event, : OlkDateControlEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkDateControlEvents_Event, : OlkDateControlEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkDateControlEvents_Event, : OlkDateControlEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkDateControlEvents_Event, : OlkDateControlEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkDateControlEvents_Event, : OlkDateControlEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkDateControlEvents_Event, : OlkDateControlEvents_MouseUpEventHandler) """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    DropButtonClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkDateControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: _OlkDateControl) -> bool
        Set: AutoSize(self: _OlkDateControl) = value
        """
        ...

    @property
    def AutoWordSelect(self) -> bool:
        """
        Get: AutoWordSelect(self: _OlkDateControl) -> bool
        Set: AutoWordSelect(self: _OlkDateControl) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: _OlkDateControl) -> UInt32
        Set: BackColor(self: _OlkDateControl) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: _OlkDateControl) -> OlBackStyle
        Set: BackStyle(self: _OlkDateControl) = value
        """
        ...

    @property
    def Date(self) -> DateTime:
        """
        Get: Date(self: _OlkDateControl) -> DateTime
        Set: Date(self: _OlkDateControl) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkDateControl) -> bool
        Set: Enabled(self: _OlkDateControl) = value
        """
        ...

    @property
    def EnterFieldBehavior(self) -> OlEnterFieldBehavior:
        """
        Get: EnterFieldBehavior(self: _OlkDateControl) -> OlEnterFieldBehavior
        Set: EnterFieldBehavior(self: _OlkDateControl) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: _OlkDateControl) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: _OlkDateControl) -> UInt32
        Set: ForeColor(self: _OlkDateControl) = value
        """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: _OlkDateControl) -> bool
        Set: HideSelection(self: _OlkDateControl) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: _OlkDateControl) -> bool
        Set: Locked(self: _OlkDateControl) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkDateControl) -> StdPicture
        Set: MouseIcon(self: _OlkDateControl) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkDateControl) -> OlMousePointer
        Set: MousePointer(self: _OlkDateControl) = value
        """
        ...

    @property
    def ShowNoneButton(self) -> bool:
        """
        Get: ShowNoneButton(self: _OlkDateControl) -> bool
        Set: ShowNoneButton(self: _OlkDateControl) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: _OlkDateControl) -> str
        Set: Text(self: _OlkDateControl) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: _OlkDateControl) -> OlTextAlign
        Set: TextAlign(self: _OlkDateControl) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: _OlkDateControl) -> object
        Set: Value(self: _OlkDateControl) = value
        """
        ...


    def DropDown(self): # -> 
        """ DropDown(self: _OlkDateControl) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OlkDateControl(_OlkDateControl, OlkDateControlEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkDateControlClass(OlkDateControl, __ComObject): # skipped bases: <type '_OlkDateControl'>, <type 'OlkDateControlEvents_Event'>, <type 'object'>
    """ OlkDateControlClass() """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: OlkDateControlClass) -> bool
        Set: AutoSize(self: OlkDateControlClass) = value
        """
        ...

    @property
    def AutoWordSelect(self) -> bool:
        """
        Get: AutoWordSelect(self: OlkDateControlClass) -> bool
        Set: AutoWordSelect(self: OlkDateControlClass) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: OlkDateControlClass) -> UInt32
        Set: BackColor(self: OlkDateControlClass) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: OlkDateControlClass) -> OlBackStyle
        Set: BackStyle(self: OlkDateControlClass) = value
        """
        ...

    @property
    def Date(self) -> DateTime:
        """
        Get: Date(self: OlkDateControlClass) -> DateTime
        Set: Date(self: OlkDateControlClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkDateControlClass) -> bool
        Set: Enabled(self: OlkDateControlClass) = value
        """
        ...

    @property
    def EnterFieldBehavior(self) -> OlEnterFieldBehavior:
        """
        Get: EnterFieldBehavior(self: OlkDateControlClass) -> OlEnterFieldBehavior
        Set: EnterFieldBehavior(self: OlkDateControlClass) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: OlkDateControlClass) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: OlkDateControlClass) -> UInt32
        Set: ForeColor(self: OlkDateControlClass) = value
        """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: OlkDateControlClass) -> bool
        Set: HideSelection(self: OlkDateControlClass) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: OlkDateControlClass) -> bool
        Set: Locked(self: OlkDateControlClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkDateControlClass) -> StdPicture
        Set: MouseIcon(self: OlkDateControlClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkDateControlClass) -> OlMousePointer
        Set: MousePointer(self: OlkDateControlClass) = value
        """
        ...

    @property
    def ShowNoneButton(self) -> bool:
        """
        Get: ShowNoneButton(self: OlkDateControlClass) -> bool
        Set: ShowNoneButton(self: OlkDateControlClass) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: OlkDateControlClass) -> str
        Set: Text(self: OlkDateControlClass) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: OlkDateControlClass) -> OlTextAlign
        Set: TextAlign(self: OlkDateControlClass) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: OlkDateControlClass) -> object
        Set: Value(self: OlkDateControlClass) = value
        """
        ...


    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkDateControlClass, : OlkDateControlEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkDateControlClass, : OlkDateControlEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkDateControlClass, : OlkDateControlEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkDateControlClass, : OlkDateControlEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkDateControlClass, : OlkDateControlEvents_DoubleClickEventHandler) """
        ...

    def add_DropButtonClick(self): # -> 
        """ add_DropButtonClick(self: OlkDateControlClass, : OlkDateControlEvents_DropButtonClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkDateControlClass, : OlkDateControlEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkDateControlClass, : OlkDateControlEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkDateControlClass, : OlkDateControlEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkDateControlClass, : OlkDateControlEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkDateControlClass, : OlkDateControlEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkDateControlClass, : OlkDateControlEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkDateControlClass, : OlkDateControlEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkDateControlClass, : OlkDateControlEvents_MouseUpEventHandler) """
        ...

    def DropDown(self): # -> 
        """ DropDown(self: OlkDateControlClass) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkDateControlClass, : OlkDateControlEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkDateControlClass, : OlkDateControlEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkDateControlClass, : OlkDateControlEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkDateControlClass, : OlkDateControlEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkDateControlClass, : OlkDateControlEvents_DoubleClickEventHandler) """
        ...

    def remove_DropButtonClick(self): # -> 
        """ remove_DropButtonClick(self: OlkDateControlClass, : OlkDateControlEvents_DropButtonClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkDateControlClass, : OlkDateControlEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkDateControlClass, : OlkDateControlEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkDateControlClass, : OlkDateControlEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkDateControlClass, : OlkDateControlEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkDateControlClass, : OlkDateControlEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkDateControlClass, : OlkDateControlEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkDateControlClass, : OlkDateControlEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkDateControlClass, : OlkDateControlEvents_MouseUpEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    DropButtonClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkDateControlEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterUpdate(self): # -> 
        """ AfterUpdate(self: OlkDateControlEvents) """
        ...

    def BeforeUpdate(self, Cancel:bool) -> bool:
        """ BeforeUpdate(self: OlkDateControlEvents, Cancel: bool) -> bool """
        ...

    def Change(self): # -> 
        """ Change(self: OlkDateControlEvents) """
        ...

    def Click(self): # -> 
        """ Click(self: OlkDateControlEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkDateControlEvents) """
        ...

    def DropButtonClick(self): # -> 
        """ DropButtonClick(self: OlkDateControlEvents) """
        ...

    def Enter(self): # -> 
        """ Enter(self: OlkDateControlEvents) """
        ...

    def Exit(self, Cancel:bool) -> bool:
        """ Exit(self: OlkDateControlEvents, Cancel: bool) -> bool """
        ...

    def KeyDown(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyDown(self: OlkDateControlEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def KeyPress(self, KeyAscii:int) -> int:
        """ KeyPress(self: OlkDateControlEvents, KeyAscii: int) -> int """
        ...

    def KeyUp(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyUp(self: OlkDateControlEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkDateControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkDateControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkDateControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkDateControlEvents_AfterUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_AfterUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkDateControlEvents_AfterUpdateEventHandler) """
        ...


class OlkDateControlEvents_BeforeUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_BeforeUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkDateControlEvents_BeforeUpdateEventHandler, Cancel: bool) -> bool """
        ...


class OlkDateControlEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkDateControlEvents_ChangeEventHandler) """
        ...


class OlkDateControlEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkDateControlEvents_ClickEventHandler) """
        ...


class OlkDateControlEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkDateControlEvents_DoubleClickEventHandler) """
        ...


class OlkDateControlEvents_DropButtonClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_DropButtonClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkDateControlEvents_DropButtonClickEventHandler) """
        ...


class OlkDateControlEvents_EnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_EnterEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkDateControlEvents_EnterEventHandler) """
        ...


class OlkDateControlEvents_ExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_ExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkDateControlEvents_ExitEventHandler, Cancel: bool) -> bool """
        ...


class OlkDateControlEvents_KeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_KeyDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkDateControlEvents_KeyDownEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkDateControlEvents_KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_KeyPressEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyAscii:int) -> int:
        """ Invoke(self: OlkDateControlEvents_KeyPressEventHandler, KeyAscii: int) -> int """
        ...


class OlkDateControlEvents_KeyUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_KeyUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkDateControlEvents_KeyUpEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkDateControlEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkDateControlEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkDateControlEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkDateControlEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkDateControlEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkDateControlEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkDateControlEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkDateControlEvents_SinkHelper(OlkDateControlEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterUpdateDelegate = ...
    m_BeforeUpdateDelegate = ...
    m_ChangeDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_DropButtonClickDelegate = ...
    m_dwCookie = ...
    m_EnterDelegate = ...
    m_ExitDelegate = ...
    m_KeyDownDelegate = ...
    m_KeyPressDelegate = ...
    m_KeyUpDelegate = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkFrameHeaderEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    pass

class _OlkFrameHeader: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> OlAlignment:
        """
        Get: Alignment(self: _OlkFrameHeader) -> OlAlignment
        Set: Alignment(self: _OlkFrameHeader) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: _OlkFrameHeader) -> str
        Set: Caption(self: _OlkFrameHeader) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkFrameHeader) -> bool
        Set: Enabled(self: _OlkFrameHeader) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: _OlkFrameHeader) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: _OlkFrameHeader) -> UInt32
        Set: ForeColor(self: _OlkFrameHeader) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkFrameHeader) -> StdPicture
        Set: MouseIcon(self: _OlkFrameHeader) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkFrameHeader) -> OlMousePointer
        Set: MousePointer(self: _OlkFrameHeader) = value
        """
        ...



class OlkFrameHeader(_OlkFrameHeader, OlkFrameHeaderEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkFrameHeaderClass(OlkFrameHeader, __ComObject): # skipped bases: <type '_OlkFrameHeader'>, <type 'OlkFrameHeaderEvents_Event'>, <type 'object'>
    """ OlkFrameHeaderClass() """
    @property
    def Alignment(self) -> OlAlignment:
        """
        Get: Alignment(self: OlkFrameHeaderClass) -> OlAlignment
        Set: Alignment(self: OlkFrameHeaderClass) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: OlkFrameHeaderClass) -> str
        Set: Caption(self: OlkFrameHeaderClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkFrameHeaderClass) -> bool
        Set: Enabled(self: OlkFrameHeaderClass) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: OlkFrameHeaderClass) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: OlkFrameHeaderClass) -> UInt32
        Set: ForeColor(self: OlkFrameHeaderClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkFrameHeaderClass) -> StdPicture
        Set: MouseIcon(self: OlkFrameHeaderClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkFrameHeaderClass) -> OlMousePointer
        Set: MousePointer(self: OlkFrameHeaderClass) = value
        """
        ...



class OlkFrameHeaderEvents: # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkFrameHeaderEvents_SinkHelper(OlkFrameHeaderEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...


class OlkInfoBarEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Click(self): # -> 
        """ add_Click(self: OlkInfoBarEvents_Event, : OlkInfoBarEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkInfoBarEvents_Event, : OlkInfoBarEvents_DoubleClickEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkInfoBarEvents_Event, : OlkInfoBarEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkInfoBarEvents_Event, : OlkInfoBarEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkInfoBarEvents_Event, : OlkInfoBarEvents_MouseUpEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkInfoBarEvents_Event, : OlkInfoBarEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkInfoBarEvents_Event, : OlkInfoBarEvents_DoubleClickEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkInfoBarEvents_Event, : OlkInfoBarEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkInfoBarEvents_Event, : OlkInfoBarEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkInfoBarEvents_Event, : OlkInfoBarEvents_MouseUpEventHandler) """
        ...

    Click = ...
    DoubleClick = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkInfoBar: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkInfoBar) -> StdPicture
        Set: MouseIcon(self: _OlkInfoBar) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkInfoBar) -> OlMousePointer
        Set: MousePointer(self: _OlkInfoBar) = value
        """
        ...



class OlkInfoBar(_OlkInfoBar, OlkInfoBarEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkInfoBarClass(__ComObject, OlkInfoBar): # skipped bases: <type '_OlkInfoBar'>, <type 'OlkInfoBarEvents_Event'>, <type 'object'>
    """ OlkInfoBarClass() """
    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkInfoBarClass) -> StdPicture
        Set: MouseIcon(self: OlkInfoBarClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkInfoBarClass) -> OlMousePointer
        Set: MousePointer(self: OlkInfoBarClass) = value
        """
        ...


    def add_Click(self): # -> 
        """ add_Click(self: OlkInfoBarClass, : OlkInfoBarEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkInfoBarClass, : OlkInfoBarEvents_DoubleClickEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkInfoBarClass, : OlkInfoBarEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkInfoBarClass, : OlkInfoBarEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkInfoBarClass, : OlkInfoBarEvents_MouseUpEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkInfoBarClass, : OlkInfoBarEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkInfoBarClass, : OlkInfoBarEvents_DoubleClickEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkInfoBarClass, : OlkInfoBarEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkInfoBarClass, : OlkInfoBarEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkInfoBarClass, : OlkInfoBarEvents_MouseUpEventHandler) """
        ...

    Click = ...
    DoubleClick = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkInfoBarEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Click(self): # -> 
        """ Click(self: OlkInfoBarEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkInfoBarEvents) """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkInfoBarEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkInfoBarEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkInfoBarEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkInfoBarEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkInfoBarEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkInfoBarEvents_ClickEventHandler) """
        ...


class OlkInfoBarEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkInfoBarEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkInfoBarEvents_DoubleClickEventHandler) """
        ...


class OlkInfoBarEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkInfoBarEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkInfoBarEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkInfoBarEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkInfoBarEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkInfoBarEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkInfoBarEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkInfoBarEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkInfoBarEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkInfoBarEvents_SinkHelper(OlkInfoBarEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_dwCookie = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkLabelEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Click(self): # -> 
        """ add_Click(self: OlkLabelEvents_Event, : OlkLabelEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkLabelEvents_Event, : OlkLabelEvents_DoubleClickEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkLabelEvents_Event, : OlkLabelEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkLabelEvents_Event, : OlkLabelEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkLabelEvents_Event, : OlkLabelEvents_MouseUpEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkLabelEvents_Event, : OlkLabelEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkLabelEvents_Event, : OlkLabelEvents_DoubleClickEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkLabelEvents_Event, : OlkLabelEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkLabelEvents_Event, : OlkLabelEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkLabelEvents_Event, : OlkLabelEvents_MouseUpEventHandler) """
        ...

    Click = ...
    DoubleClick = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkLabel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> str:
        """
        Get: Accelerator(self: _OlkLabel) -> str
        Set: Accelerator(self: _OlkLabel) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: _OlkLabel) -> bool
        Set: AutoSize(self: _OlkLabel) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: _OlkLabel) -> UInt32
        Set: BackColor(self: _OlkLabel) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: _OlkLabel) -> OlBackStyle
        Set: BackStyle(self: _OlkLabel) = value
        """
        ...

    @property
    def BorderStyle(self) -> OlBorderStyle:
        """
        Get: BorderStyle(self: _OlkLabel) -> OlBorderStyle
        Set: BorderStyle(self: _OlkLabel) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: _OlkLabel) -> str
        Set: Caption(self: _OlkLabel) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkLabel) -> bool
        Set: Enabled(self: _OlkLabel) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: _OlkLabel) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: _OlkLabel) -> UInt32
        Set: ForeColor(self: _OlkLabel) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkLabel) -> StdPicture
        Set: MouseIcon(self: _OlkLabel) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkLabel) -> OlMousePointer
        Set: MousePointer(self: _OlkLabel) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: _OlkLabel) -> OlTextAlign
        Set: TextAlign(self: _OlkLabel) = value
        """
        ...

    @property
    def UseHeaderColor(self) -> bool:
        """
        Get: UseHeaderColor(self: _OlkLabel) -> bool
        Set: UseHeaderColor(self: _OlkLabel) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: _OlkLabel) -> object
        Set: Value(self: _OlkLabel) = value
        """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: _OlkLabel) -> bool
        Set: WordWrap(self: _OlkLabel) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OlkLabel(OlkLabelEvents_Event, _OlkLabel): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkLabelClass(OlkLabel, __ComObject): # skipped bases: <type 'OlkLabelEvents_Event'>, <type '_OlkLabel'>, <type 'object'>
    """ OlkLabelClass() """
    @property
    def Accelerator(self) -> str:
        """
        Get: Accelerator(self: OlkLabelClass) -> str
        Set: Accelerator(self: OlkLabelClass) = value
        """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: OlkLabelClass) -> bool
        Set: AutoSize(self: OlkLabelClass) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: OlkLabelClass) -> UInt32
        Set: BackColor(self: OlkLabelClass) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: OlkLabelClass) -> OlBackStyle
        Set: BackStyle(self: OlkLabelClass) = value
        """
        ...

    @property
    def BorderStyle(self) -> OlBorderStyle:
        """
        Get: BorderStyle(self: OlkLabelClass) -> OlBorderStyle
        Set: BorderStyle(self: OlkLabelClass) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: OlkLabelClass) -> str
        Set: Caption(self: OlkLabelClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkLabelClass) -> bool
        Set: Enabled(self: OlkLabelClass) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: OlkLabelClass) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: OlkLabelClass) -> UInt32
        Set: ForeColor(self: OlkLabelClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkLabelClass) -> StdPicture
        Set: MouseIcon(self: OlkLabelClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkLabelClass) -> OlMousePointer
        Set: MousePointer(self: OlkLabelClass) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: OlkLabelClass) -> OlTextAlign
        Set: TextAlign(self: OlkLabelClass) = value
        """
        ...

    @property
    def UseHeaderColor(self) -> bool:
        """
        Get: UseHeaderColor(self: OlkLabelClass) -> bool
        Set: UseHeaderColor(self: OlkLabelClass) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: OlkLabelClass) -> object
        Set: Value(self: OlkLabelClass) = value
        """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: OlkLabelClass) -> bool
        Set: WordWrap(self: OlkLabelClass) = value
        """
        ...


    def add_Click(self): # -> 
        """ add_Click(self: OlkLabelClass, : OlkLabelEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkLabelClass, : OlkLabelEvents_DoubleClickEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkLabelClass, : OlkLabelEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkLabelClass, : OlkLabelEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkLabelClass, : OlkLabelEvents_MouseUpEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkLabelClass, : OlkLabelEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkLabelClass, : OlkLabelEvents_DoubleClickEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkLabelClass, : OlkLabelEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkLabelClass, : OlkLabelEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkLabelClass, : OlkLabelEvents_MouseUpEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...

    Click = ...
    DoubleClick = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkLabelEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Click(self): # -> 
        """ Click(self: OlkLabelEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkLabelEvents) """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkLabelEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkLabelEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkLabelEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkLabelEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkLabelEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkLabelEvents_ClickEventHandler) """
        ...


class OlkLabelEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkLabelEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkLabelEvents_DoubleClickEventHandler) """
        ...


class OlkLabelEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkLabelEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkLabelEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkLabelEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkLabelEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkLabelEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkLabelEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkLabelEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkLabelEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkLabelEvents_SinkHelper(OlkLabelEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_dwCookie = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkListBoxEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkListBoxEvents_Event, : OlkListBoxEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkListBoxEvents_Event, : OlkListBoxEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkListBoxEvents_Event, : OlkListBoxEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkListBoxEvents_Event, : OlkListBoxEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkListBoxEvents_Event, : OlkListBoxEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkListBoxEvents_Event, : OlkListBoxEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkListBoxEvents_Event, : OlkListBoxEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkListBoxEvents_Event, : OlkListBoxEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkListBoxEvents_Event, : OlkListBoxEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkListBoxEvents_Event, : OlkListBoxEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkListBoxEvents_Event, : OlkListBoxEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkListBoxEvents_Event, : OlkListBoxEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkListBoxEvents_Event, : OlkListBoxEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkListBoxEvents_Event, : OlkListBoxEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkListBoxEvents_Event, : OlkListBoxEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkListBoxEvents_Event, : OlkListBoxEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkListBoxEvents_Event, : OlkListBoxEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkListBoxEvents_Event, : OlkListBoxEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkListBoxEvents_Event, : OlkListBoxEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkListBoxEvents_Event, : OlkListBoxEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkListBoxEvents_Event, : OlkListBoxEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkListBoxEvents_Event, : OlkListBoxEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkListBoxEvents_Event, : OlkListBoxEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkListBoxEvents_Event, : OlkListBoxEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkListBoxEvents_Event, : OlkListBoxEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkListBoxEvents_Event, : OlkListBoxEvents_MouseUpEventHandler) """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkListBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: _OlkListBox) -> UInt32
        Set: BackColor(self: _OlkListBox) = value
        """
        ...

    @property
    def BorderStyle(self) -> OlBorderStyle:
        """
        Get: BorderStyle(self: _OlkListBox) -> OlBorderStyle
        Set: BorderStyle(self: _OlkListBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkListBox) -> bool
        Set: Enabled(self: _OlkListBox) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: _OlkListBox) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: _OlkListBox) -> UInt32
        Set: ForeColor(self: _OlkListBox) = value
        """
        ...

    @property
    def ListCount(self) -> int:
        """ Get: ListCount(self: _OlkListBox) -> int """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: _OlkListBox) -> int
        Set: ListIndex(self: _OlkListBox) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: _OlkListBox) -> bool
        Set: Locked(self: _OlkListBox) = value
        """
        ...

    @property
    def MatchEntry(self) -> OlMatchEntry:
        """
        Get: MatchEntry(self: _OlkListBox) -> OlMatchEntry
        Set: MatchEntry(self: _OlkListBox) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkListBox) -> StdPicture
        Set: MouseIcon(self: _OlkListBox) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkListBox) -> OlMousePointer
        Set: MousePointer(self: _OlkListBox) = value
        """
        ...

    @property
    def MultiSelect(self) -> OlMultiSelect:
        """
        Get: MultiSelect(self: _OlkListBox) -> OlMultiSelect
        Set: MultiSelect(self: _OlkListBox) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: _OlkListBox) -> str
        Set: Text(self: _OlkListBox) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: _OlkListBox) -> OlTextAlign
        Set: TextAlign(self: _OlkListBox) = value
        """
        ...

    @property
    def TopIndex(self) -> int:
        """
        Get: TopIndex(self: _OlkListBox) -> int
        Set: TopIndex(self: _OlkListBox) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: _OlkListBox) -> object
        Set: Value(self: _OlkListBox) = value
        """
        ...


    def AddItem(self, ItemText:str, Index:object): # -> 
        """ AddItem(self: _OlkListBox, ItemText: str, Index: object) """
        ...

    def Clear(self): # -> 
        """ Clear(self: _OlkListBox) """
        ...

    def Copy(self): # -> 
        """ Copy(self: _OlkListBox) """
        ...

    def GetItem(self, Index:int) -> str:
        """ GetItem(self: _OlkListBox, Index: int) -> str """
        ...

    def GetSelected(self, Index:int) -> bool:
        """ GetSelected(self: _OlkListBox, Index: int) -> bool """
        ...

    def RemoveItem(self, Index:int): # -> 
        """ RemoveItem(self: _OlkListBox, Index: int) """
        ...

    def SetItem(self, Index:int, Item:str): # -> 
        """ SetItem(self: _OlkListBox, Index: int, Item: str) """
        ...

    def SetSelected(self, Index:int, Selected:bool): # -> 
        """ SetSelected(self: _OlkListBox, Index: int, Selected: bool) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OlkListBox(_OlkListBox, OlkListBoxEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkListBoxClass(__ComObject, OlkListBox): # skipped bases: <type '_OlkListBox'>, <type 'OlkListBoxEvents_Event'>, <type 'object'>
    """ OlkListBoxClass() """
    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: OlkListBoxClass) -> UInt32
        Set: BackColor(self: OlkListBoxClass) = value
        """
        ...

    @property
    def BorderStyle(self) -> OlBorderStyle:
        """
        Get: BorderStyle(self: OlkListBoxClass) -> OlBorderStyle
        Set: BorderStyle(self: OlkListBoxClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkListBoxClass) -> bool
        Set: Enabled(self: OlkListBoxClass) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: OlkListBoxClass) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: OlkListBoxClass) -> UInt32
        Set: ForeColor(self: OlkListBoxClass) = value
        """
        ...

    @property
    def ListCount(self) -> int:
        """ Get: ListCount(self: OlkListBoxClass) -> int """
        ...

    @property
    def ListIndex(self) -> int:
        """
        Get: ListIndex(self: OlkListBoxClass) -> int
        Set: ListIndex(self: OlkListBoxClass) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: OlkListBoxClass) -> bool
        Set: Locked(self: OlkListBoxClass) = value
        """
        ...

    @property
    def MatchEntry(self) -> OlMatchEntry:
        """
        Get: MatchEntry(self: OlkListBoxClass) -> OlMatchEntry
        Set: MatchEntry(self: OlkListBoxClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkListBoxClass) -> StdPicture
        Set: MouseIcon(self: OlkListBoxClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkListBoxClass) -> OlMousePointer
        Set: MousePointer(self: OlkListBoxClass) = value
        """
        ...

    @property
    def MultiSelect(self) -> OlMultiSelect:
        """
        Get: MultiSelect(self: OlkListBoxClass) -> OlMultiSelect
        Set: MultiSelect(self: OlkListBoxClass) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: OlkListBoxClass) -> str
        Set: Text(self: OlkListBoxClass) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: OlkListBoxClass) -> OlTextAlign
        Set: TextAlign(self: OlkListBoxClass) = value
        """
        ...

    @property
    def TopIndex(self) -> int:
        """
        Get: TopIndex(self: OlkListBoxClass) -> int
        Set: TopIndex(self: OlkListBoxClass) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: OlkListBoxClass) -> object
        Set: Value(self: OlkListBoxClass) = value
        """
        ...


    def AddItem(self, ItemText:str, Index:object): # -> 
        """ AddItem(self: OlkListBoxClass, ItemText: str, Index: object) """
        ...

    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkListBoxClass, : OlkListBoxEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkListBoxClass, : OlkListBoxEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkListBoxClass, : OlkListBoxEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkListBoxClass, : OlkListBoxEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkListBoxClass, : OlkListBoxEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkListBoxClass, : OlkListBoxEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkListBoxClass, : OlkListBoxEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkListBoxClass, : OlkListBoxEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkListBoxClass, : OlkListBoxEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkListBoxClass, : OlkListBoxEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkListBoxClass, : OlkListBoxEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkListBoxClass, : OlkListBoxEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkListBoxClass, : OlkListBoxEvents_MouseUpEventHandler) """
        ...

    def Clear(self): # -> 
        """ Clear(self: OlkListBoxClass) """
        ...

    def Copy(self): # -> 
        """ Copy(self: OlkListBoxClass) """
        ...

    def GetItem(self, Index:int) -> str:
        """ GetItem(self: OlkListBoxClass, Index: int) -> str """
        ...

    def GetSelected(self, Index:int) -> bool:
        """ GetSelected(self: OlkListBoxClass, Index: int) -> bool """
        ...

    def RemoveItem(self, Index:int): # -> 
        """ RemoveItem(self: OlkListBoxClass, Index: int) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkListBoxClass, : OlkListBoxEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkListBoxClass, : OlkListBoxEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkListBoxClass, : OlkListBoxEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkListBoxClass, : OlkListBoxEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkListBoxClass, : OlkListBoxEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkListBoxClass, : OlkListBoxEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkListBoxClass, : OlkListBoxEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkListBoxClass, : OlkListBoxEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkListBoxClass, : OlkListBoxEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkListBoxClass, : OlkListBoxEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkListBoxClass, : OlkListBoxEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkListBoxClass, : OlkListBoxEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkListBoxClass, : OlkListBoxEvents_MouseUpEventHandler) """
        ...

    def SetItem(self, Index:int, Item:str): # -> 
        """ SetItem(self: OlkListBoxClass, Index: int, Item: str) """
        ...

    def SetSelected(self, Index:int, Selected:bool): # -> 
        """ SetSelected(self: OlkListBoxClass, Index: int, Selected: bool) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkListBoxEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterUpdate(self): # -> 
        """ AfterUpdate(self: OlkListBoxEvents) """
        ...

    def BeforeUpdate(self, Cancel:bool) -> bool:
        """ BeforeUpdate(self: OlkListBoxEvents, Cancel: bool) -> bool """
        ...

    def Change(self): # -> 
        """ Change(self: OlkListBoxEvents) """
        ...

    def Click(self): # -> 
        """ Click(self: OlkListBoxEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkListBoxEvents) """
        ...

    def Enter(self): # -> 
        """ Enter(self: OlkListBoxEvents) """
        ...

    def Exit(self, Cancel:bool) -> bool:
        """ Exit(self: OlkListBoxEvents, Cancel: bool) -> bool """
        ...

    def KeyDown(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyDown(self: OlkListBoxEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def KeyPress(self, KeyAscii:int) -> int:
        """ KeyPress(self: OlkListBoxEvents, KeyAscii: int) -> int """
        ...

    def KeyUp(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyUp(self: OlkListBoxEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkListBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkListBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkListBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkListBoxEvents_AfterUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_AfterUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkListBoxEvents_AfterUpdateEventHandler) """
        ...


class OlkListBoxEvents_BeforeUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_BeforeUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkListBoxEvents_BeforeUpdateEventHandler, Cancel: bool) -> bool """
        ...


class OlkListBoxEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkListBoxEvents_ChangeEventHandler) """
        ...


class OlkListBoxEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkListBoxEvents_ClickEventHandler) """
        ...


class OlkListBoxEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkListBoxEvents_DoubleClickEventHandler) """
        ...


class OlkListBoxEvents_EnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_EnterEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkListBoxEvents_EnterEventHandler) """
        ...


class OlkListBoxEvents_ExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_ExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkListBoxEvents_ExitEventHandler, Cancel: bool) -> bool """
        ...


class OlkListBoxEvents_KeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_KeyDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkListBoxEvents_KeyDownEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkListBoxEvents_KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_KeyPressEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyAscii:int) -> int:
        """ Invoke(self: OlkListBoxEvents_KeyPressEventHandler, KeyAscii: int) -> int """
        ...


class OlkListBoxEvents_KeyUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_KeyUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkListBoxEvents_KeyUpEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkListBoxEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkListBoxEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkListBoxEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkListBoxEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkListBoxEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkListBoxEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkListBoxEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkListBoxEvents_SinkHelper(OlkListBoxEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterUpdateDelegate = ...
    m_BeforeUpdateDelegate = ...
    m_ChangeDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_dwCookie = ...
    m_EnterDelegate = ...
    m_ExitDelegate = ...
    m_KeyDownDelegate = ...
    m_KeyPressDelegate = ...
    m_KeyUpDelegate = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkOptionButtonEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkOptionButtonEvents_Event, : OlkOptionButtonEvents_MouseUpEventHandler) """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkOptionButton: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accelerator(self) -> str:
        """
        Get: Accelerator(self: _OlkOptionButton) -> str
        Set: Accelerator(self: _OlkOptionButton) = value
        """
        ...

    @property
    def Alignment(self) -> OlAlignment:
        """
        Get: Alignment(self: _OlkOptionButton) -> OlAlignment
        Set: Alignment(self: _OlkOptionButton) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: _OlkOptionButton) -> UInt32
        Set: BackColor(self: _OlkOptionButton) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: _OlkOptionButton) -> OlBackStyle
        Set: BackStyle(self: _OlkOptionButton) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: _OlkOptionButton) -> str
        Set: Caption(self: _OlkOptionButton) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkOptionButton) -> bool
        Set: Enabled(self: _OlkOptionButton) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: _OlkOptionButton) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: _OlkOptionButton) -> UInt32
        Set: ForeColor(self: _OlkOptionButton) = value
        """
        ...

    @property
    def GroupName(self) -> str:
        """
        Get: GroupName(self: _OlkOptionButton) -> str
        Set: GroupName(self: _OlkOptionButton) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkOptionButton) -> StdPicture
        Set: MouseIcon(self: _OlkOptionButton) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkOptionButton) -> OlMousePointer
        Set: MousePointer(self: _OlkOptionButton) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: _OlkOptionButton) -> object
        Set: Value(self: _OlkOptionButton) = value
        """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: _OlkOptionButton) -> bool
        Set: WordWrap(self: _OlkOptionButton) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OlkOptionButton(_OlkOptionButton, OlkOptionButtonEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkOptionButtonClass(OlkOptionButton, __ComObject): # skipped bases: <type '_OlkOptionButton'>, <type 'OlkOptionButtonEvents_Event'>, <type 'object'>
    """ OlkOptionButtonClass() """
    @property
    def Accelerator(self) -> str:
        """
        Get: Accelerator(self: OlkOptionButtonClass) -> str
        Set: Accelerator(self: OlkOptionButtonClass) = value
        """
        ...

    @property
    def Alignment(self) -> OlAlignment:
        """
        Get: Alignment(self: OlkOptionButtonClass) -> OlAlignment
        Set: Alignment(self: OlkOptionButtonClass) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: OlkOptionButtonClass) -> UInt32
        Set: BackColor(self: OlkOptionButtonClass) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: OlkOptionButtonClass) -> OlBackStyle
        Set: BackStyle(self: OlkOptionButtonClass) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: OlkOptionButtonClass) -> str
        Set: Caption(self: OlkOptionButtonClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkOptionButtonClass) -> bool
        Set: Enabled(self: OlkOptionButtonClass) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: OlkOptionButtonClass) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: OlkOptionButtonClass) -> UInt32
        Set: ForeColor(self: OlkOptionButtonClass) = value
        """
        ...

    @property
    def GroupName(self) -> str:
        """
        Get: GroupName(self: OlkOptionButtonClass) -> str
        Set: GroupName(self: OlkOptionButtonClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkOptionButtonClass) -> StdPicture
        Set: MouseIcon(self: OlkOptionButtonClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkOptionButtonClass) -> OlMousePointer
        Set: MousePointer(self: OlkOptionButtonClass) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: OlkOptionButtonClass) -> object
        Set: Value(self: OlkOptionButtonClass) = value
        """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: OlkOptionButtonClass) -> bool
        Set: WordWrap(self: OlkOptionButtonClass) = value
        """
        ...


    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkOptionButtonClass, : OlkOptionButtonEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkOptionButtonClass, : OlkOptionButtonEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkOptionButtonClass, : OlkOptionButtonEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkOptionButtonClass, : OlkOptionButtonEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkOptionButtonClass, : OlkOptionButtonEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkOptionButtonClass, : OlkOptionButtonEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkOptionButtonClass, : OlkOptionButtonEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkOptionButtonClass, : OlkOptionButtonEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkOptionButtonClass, : OlkOptionButtonEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkOptionButtonClass, : OlkOptionButtonEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkOptionButtonClass, : OlkOptionButtonEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkOptionButtonClass, : OlkOptionButtonEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkOptionButtonClass, : OlkOptionButtonEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkOptionButtonClass, : OlkOptionButtonEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkOptionButtonClass, : OlkOptionButtonEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkOptionButtonClass, : OlkOptionButtonEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkOptionButtonClass, : OlkOptionButtonEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkOptionButtonClass, : OlkOptionButtonEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkOptionButtonClass, : OlkOptionButtonEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkOptionButtonClass, : OlkOptionButtonEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkOptionButtonClass, : OlkOptionButtonEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkOptionButtonClass, : OlkOptionButtonEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkOptionButtonClass, : OlkOptionButtonEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkOptionButtonClass, : OlkOptionButtonEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkOptionButtonClass, : OlkOptionButtonEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkOptionButtonClass, : OlkOptionButtonEvents_MouseUpEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkOptionButtonEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterUpdate(self): # -> 
        """ AfterUpdate(self: OlkOptionButtonEvents) """
        ...

    def BeforeUpdate(self, Cancel:bool) -> bool:
        """ BeforeUpdate(self: OlkOptionButtonEvents, Cancel: bool) -> bool """
        ...

    def Change(self): # -> 
        """ Change(self: OlkOptionButtonEvents) """
        ...

    def Click(self): # -> 
        """ Click(self: OlkOptionButtonEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkOptionButtonEvents) """
        ...

    def Enter(self): # -> 
        """ Enter(self: OlkOptionButtonEvents) """
        ...

    def Exit(self, Cancel:bool) -> bool:
        """ Exit(self: OlkOptionButtonEvents, Cancel: bool) -> bool """
        ...

    def KeyDown(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyDown(self: OlkOptionButtonEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def KeyPress(self, KeyAscii:int) -> int:
        """ KeyPress(self: OlkOptionButtonEvents, KeyAscii: int) -> int """
        ...

    def KeyUp(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyUp(self: OlkOptionButtonEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkOptionButtonEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkOptionButtonEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkOptionButtonEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkOptionButtonEvents_AfterUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_AfterUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkOptionButtonEvents_AfterUpdateEventHandler) """
        ...


class OlkOptionButtonEvents_BeforeUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_BeforeUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkOptionButtonEvents_BeforeUpdateEventHandler, Cancel: bool) -> bool """
        ...


class OlkOptionButtonEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkOptionButtonEvents_ChangeEventHandler) """
        ...


class OlkOptionButtonEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkOptionButtonEvents_ClickEventHandler) """
        ...


class OlkOptionButtonEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkOptionButtonEvents_DoubleClickEventHandler) """
        ...


class OlkOptionButtonEvents_EnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_EnterEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkOptionButtonEvents_EnterEventHandler) """
        ...


class OlkOptionButtonEvents_ExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_ExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkOptionButtonEvents_ExitEventHandler, Cancel: bool) -> bool """
        ...


class OlkOptionButtonEvents_KeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_KeyDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkOptionButtonEvents_KeyDownEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkOptionButtonEvents_KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_KeyPressEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyAscii:int) -> int:
        """ Invoke(self: OlkOptionButtonEvents_KeyPressEventHandler, KeyAscii: int) -> int """
        ...


class OlkOptionButtonEvents_KeyUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_KeyUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkOptionButtonEvents_KeyUpEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkOptionButtonEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkOptionButtonEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkOptionButtonEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkOptionButtonEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkOptionButtonEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkOptionButtonEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkOptionButtonEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkOptionButtonEvents_SinkHelper(OlkOptionButtonEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterUpdateDelegate = ...
    m_BeforeUpdateDelegate = ...
    m_ChangeDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_dwCookie = ...
    m_EnterDelegate = ...
    m_ExitDelegate = ...
    m_KeyDownDelegate = ...
    m_KeyPressDelegate = ...
    m_KeyUpDelegate = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkPageControlEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    pass

class _OlkPageControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Page(self) -> OlPageType:
        """
        Get: Page(self: _OlkPageControl) -> OlPageType
        Set: Page(self: _OlkPageControl) = value
        """
        ...



class OlkPageControl(OlkPageControlEvents_Event, _OlkPageControl): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkPageControlClass(OlkPageControl, __ComObject): # skipped bases: <type '_OlkPageControl'>, <type 'OlkPageControlEvents_Event'>, <type 'object'>
    """ OlkPageControlClass() """
    @property
    def Page(self) -> OlPageType:
        """
        Get: Page(self: OlkPageControlClass) -> OlPageType
        Set: Page(self: OlkPageControlClass) = value
        """
        ...



class OlkPageControlEvents: # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkPageControlEvents_SinkHelper(OlkPageControlEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...


class OlkSenderPhotoEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Change(self): # -> 
        """ add_Change(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_DoubleClickEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_MouseUpEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_DoubleClickEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkSenderPhotoEvents_Event, : OlkSenderPhotoEvents_MouseUpEventHandler) """
        ...

    Change = ...
    Click = ...
    DoubleClick = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkSenderPhoto: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkSenderPhoto) -> bool
        Set: Enabled(self: _OlkSenderPhoto) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkSenderPhoto) -> StdPicture
        Set: MouseIcon(self: _OlkSenderPhoto) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkSenderPhoto) -> OlMousePointer
        Set: MousePointer(self: _OlkSenderPhoto) = value
        """
        ...

    @property
    def PreferredHeight(self) -> int:
        """ Get: PreferredHeight(self: _OlkSenderPhoto) -> int """
        ...

    @property
    def PreferredWidth(self) -> int:
        """ Get: PreferredWidth(self: _OlkSenderPhoto) -> int """
        ...



class OlkSenderPhoto(OlkSenderPhotoEvents_Event, _OlkSenderPhoto): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkSenderPhotoClass(OlkSenderPhoto, __ComObject): # skipped bases: <type '_OlkSenderPhoto'>, <type 'OlkSenderPhotoEvents_Event'>, <type 'object'>
    """ OlkSenderPhotoClass() """
    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkSenderPhotoClass) -> bool
        Set: Enabled(self: OlkSenderPhotoClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkSenderPhotoClass) -> StdPicture
        Set: MouseIcon(self: OlkSenderPhotoClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkSenderPhotoClass) -> OlMousePointer
        Set: MousePointer(self: OlkSenderPhotoClass) = value
        """
        ...

    @property
    def PreferredHeight(self) -> int:
        """ Get: PreferredHeight(self: OlkSenderPhotoClass) -> int """
        ...

    @property
    def PreferredWidth(self) -> int:
        """ Get: PreferredWidth(self: OlkSenderPhotoClass) -> int """
        ...


    def add_Change(self): # -> 
        """ add_Change(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_DoubleClickEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_MouseUpEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_DoubleClickEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkSenderPhotoClass, : OlkSenderPhotoEvents_MouseUpEventHandler) """
        ...

    Change = ...
    Click = ...
    DoubleClick = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkSenderPhotoEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Change(self): # -> 
        """ Change(self: OlkSenderPhotoEvents) """
        ...

    def Click(self): # -> 
        """ Click(self: OlkSenderPhotoEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkSenderPhotoEvents) """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkSenderPhotoEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkSenderPhotoEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkSenderPhotoEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkSenderPhotoEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkSenderPhotoEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkSenderPhotoEvents_ChangeEventHandler) """
        ...


class OlkSenderPhotoEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkSenderPhotoEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkSenderPhotoEvents_ClickEventHandler) """
        ...


class OlkSenderPhotoEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkSenderPhotoEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkSenderPhotoEvents_DoubleClickEventHandler) """
        ...


class OlkSenderPhotoEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkSenderPhotoEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkSenderPhotoEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkSenderPhotoEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkSenderPhotoEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkSenderPhotoEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkSenderPhotoEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkSenderPhotoEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkSenderPhotoEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkSenderPhotoEvents_SinkHelper(OlkSenderPhotoEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_ChangeDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_dwCookie = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkTextBoxEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkTextBoxEvents_Event, : OlkTextBoxEvents_MouseUpEventHandler) """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkTextBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: _OlkTextBox) -> bool
        Set: AutoSize(self: _OlkTextBox) = value
        """
        ...

    @property
    def AutoTab(self) -> bool:
        """
        Get: AutoTab(self: _OlkTextBox) -> bool
        Set: AutoTab(self: _OlkTextBox) = value
        """
        ...

    @property
    def AutoWordSelect(self) -> bool:
        """
        Get: AutoWordSelect(self: _OlkTextBox) -> bool
        Set: AutoWordSelect(self: _OlkTextBox) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: _OlkTextBox) -> UInt32
        Set: BackColor(self: _OlkTextBox) = value
        """
        ...

    @property
    def BorderStyle(self) -> OlBorderStyle:
        """
        Get: BorderStyle(self: _OlkTextBox) -> OlBorderStyle
        Set: BorderStyle(self: _OlkTextBox) = value
        """
        ...

    @property
    def DragBehavior(self) -> OlDragBehavior:
        """
        Get: DragBehavior(self: _OlkTextBox) -> OlDragBehavior
        Set: DragBehavior(self: _OlkTextBox) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkTextBox) -> bool
        Set: Enabled(self: _OlkTextBox) = value
        """
        ...

    @property
    def EnableRichText(self) -> bool:
        """
        Get: EnableRichText(self: _OlkTextBox) -> bool
        Set: EnableRichText(self: _OlkTextBox) = value
        """
        ...

    @property
    def EnterFieldBehavior(self) -> OlEnterFieldBehavior:
        """
        Get: EnterFieldBehavior(self: _OlkTextBox) -> OlEnterFieldBehavior
        Set: EnterFieldBehavior(self: _OlkTextBox) = value
        """
        ...

    @property
    def EnterKeyBehavior(self) -> bool:
        """
        Get: EnterKeyBehavior(self: _OlkTextBox) -> bool
        Set: EnterKeyBehavior(self: _OlkTextBox) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: _OlkTextBox) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: _OlkTextBox) -> UInt32
        Set: ForeColor(self: _OlkTextBox) = value
        """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: _OlkTextBox) -> bool
        Set: HideSelection(self: _OlkTextBox) = value
        """
        ...

    @property
    def IntegralHeight(self) -> bool:
        """
        Get: IntegralHeight(self: _OlkTextBox) -> bool
        Set: IntegralHeight(self: _OlkTextBox) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: _OlkTextBox) -> bool
        Set: Locked(self: _OlkTextBox) = value
        """
        ...

    @property
    def MaxLength(self) -> int:
        """
        Get: MaxLength(self: _OlkTextBox) -> int
        Set: MaxLength(self: _OlkTextBox) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkTextBox) -> StdPicture
        Set: MouseIcon(self: _OlkTextBox) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkTextBox) -> OlMousePointer
        Set: MousePointer(self: _OlkTextBox) = value
        """
        ...

    @property
    def MultiLine(self) -> bool:
        """
        Get: MultiLine(self: _OlkTextBox) -> bool
        Set: MultiLine(self: _OlkTextBox) = value
        """
        ...

    @property
    def PasswordChar(self) -> str:
        """
        Get: PasswordChar(self: _OlkTextBox) -> str
        Set: PasswordChar(self: _OlkTextBox) = value
        """
        ...

    @property
    def Scrollbars(self) -> OlScrollBars:
        """
        Get: Scrollbars(self: _OlkTextBox) -> OlScrollBars
        Set: Scrollbars(self: _OlkTextBox) = value
        """
        ...

    @property
    def SelectionMargin(self) -> bool:
        """
        Get: SelectionMargin(self: _OlkTextBox) -> bool
        Set: SelectionMargin(self: _OlkTextBox) = value
        """
        ...

    @property
    def SelLength(self) -> int:
        """
        Get: SelLength(self: _OlkTextBox) -> int
        Set: SelLength(self: _OlkTextBox) = value
        """
        ...

    @property
    def SelStart(self) -> int:
        """
        Get: SelStart(self: _OlkTextBox) -> int
        Set: SelStart(self: _OlkTextBox) = value
        """
        ...

    @property
    def SelText(self) -> str:
        """ Get: SelText(self: _OlkTextBox) -> str """
        ...

    @property
    def TabKeyBehavior(self) -> bool:
        """
        Get: TabKeyBehavior(self: _OlkTextBox) -> bool
        Set: TabKeyBehavior(self: _OlkTextBox) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: _OlkTextBox) -> str
        Set: Text(self: _OlkTextBox) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: _OlkTextBox) -> OlTextAlign
        Set: TextAlign(self: _OlkTextBox) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: _OlkTextBox) -> object
        Set: Value(self: _OlkTextBox) = value
        """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: _OlkTextBox) -> bool
        Set: WordWrap(self: _OlkTextBox) = value
        """
        ...


    def Clear(self): # -> 
        """ Clear(self: _OlkTextBox) """
        ...

    def Copy(self): # -> 
        """ Copy(self: _OlkTextBox) """
        ...

    def Cut(self): # -> 
        """ Cut(self: _OlkTextBox) """
        ...

    def Paste(self): # -> 
        """ Paste(self: _OlkTextBox) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OlkTextBox(_OlkTextBox, OlkTextBoxEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkTextBoxClass(OlkTextBox, __ComObject): # skipped bases: <type '_OlkTextBox'>, <type 'OlkTextBoxEvents_Event'>, <type 'object'>
    """ OlkTextBoxClass() """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: OlkTextBoxClass) -> bool
        Set: AutoSize(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def AutoTab(self) -> bool:
        """
        Get: AutoTab(self: OlkTextBoxClass) -> bool
        Set: AutoTab(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def AutoWordSelect(self) -> bool:
        """
        Get: AutoWordSelect(self: OlkTextBoxClass) -> bool
        Set: AutoWordSelect(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: OlkTextBoxClass) -> UInt32
        Set: BackColor(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def BorderStyle(self) -> OlBorderStyle:
        """
        Get: BorderStyle(self: OlkTextBoxClass) -> OlBorderStyle
        Set: BorderStyle(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def DragBehavior(self) -> OlDragBehavior:
        """
        Get: DragBehavior(self: OlkTextBoxClass) -> OlDragBehavior
        Set: DragBehavior(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkTextBoxClass) -> bool
        Set: Enabled(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def EnableRichText(self) -> bool:
        """
        Get: EnableRichText(self: OlkTextBoxClass) -> bool
        Set: EnableRichText(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def EnterFieldBehavior(self) -> OlEnterFieldBehavior:
        """
        Get: EnterFieldBehavior(self: OlkTextBoxClass) -> OlEnterFieldBehavior
        Set: EnterFieldBehavior(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def EnterKeyBehavior(self) -> bool:
        """
        Get: EnterKeyBehavior(self: OlkTextBoxClass) -> bool
        Set: EnterKeyBehavior(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: OlkTextBoxClass) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: OlkTextBoxClass) -> UInt32
        Set: ForeColor(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: OlkTextBoxClass) -> bool
        Set: HideSelection(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def IntegralHeight(self) -> bool:
        """
        Get: IntegralHeight(self: OlkTextBoxClass) -> bool
        Set: IntegralHeight(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: OlkTextBoxClass) -> bool
        Set: Locked(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def MaxLength(self) -> int:
        """
        Get: MaxLength(self: OlkTextBoxClass) -> int
        Set: MaxLength(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkTextBoxClass) -> StdPicture
        Set: MouseIcon(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkTextBoxClass) -> OlMousePointer
        Set: MousePointer(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def MultiLine(self) -> bool:
        """
        Get: MultiLine(self: OlkTextBoxClass) -> bool
        Set: MultiLine(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def PasswordChar(self) -> str:
        """
        Get: PasswordChar(self: OlkTextBoxClass) -> str
        Set: PasswordChar(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def Scrollbars(self) -> OlScrollBars:
        """
        Get: Scrollbars(self: OlkTextBoxClass) -> OlScrollBars
        Set: Scrollbars(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def SelectionMargin(self) -> bool:
        """
        Get: SelectionMargin(self: OlkTextBoxClass) -> bool
        Set: SelectionMargin(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def SelLength(self) -> int:
        """
        Get: SelLength(self: OlkTextBoxClass) -> int
        Set: SelLength(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def SelStart(self) -> int:
        """
        Get: SelStart(self: OlkTextBoxClass) -> int
        Set: SelStart(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def SelText(self) -> str:
        """ Get: SelText(self: OlkTextBoxClass) -> str """
        ...

    @property
    def TabKeyBehavior(self) -> bool:
        """
        Get: TabKeyBehavior(self: OlkTextBoxClass) -> bool
        Set: TabKeyBehavior(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: OlkTextBoxClass) -> str
        Set: Text(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: OlkTextBoxClass) -> OlTextAlign
        Set: TextAlign(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: OlkTextBoxClass) -> object
        Set: Value(self: OlkTextBoxClass) = value
        """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: OlkTextBoxClass) -> bool
        Set: WordWrap(self: OlkTextBoxClass) = value
        """
        ...


    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkTextBoxClass, : OlkTextBoxEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkTextBoxClass, : OlkTextBoxEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkTextBoxClass, : OlkTextBoxEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkTextBoxClass, : OlkTextBoxEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkTextBoxClass, : OlkTextBoxEvents_DoubleClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkTextBoxClass, : OlkTextBoxEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkTextBoxClass, : OlkTextBoxEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkTextBoxClass, : OlkTextBoxEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkTextBoxClass, : OlkTextBoxEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkTextBoxClass, : OlkTextBoxEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkTextBoxClass, : OlkTextBoxEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkTextBoxClass, : OlkTextBoxEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkTextBoxClass, : OlkTextBoxEvents_MouseUpEventHandler) """
        ...

    def Clear(self): # -> 
        """ Clear(self: OlkTextBoxClass) """
        ...

    def Copy(self): # -> 
        """ Copy(self: OlkTextBoxClass) """
        ...

    def Cut(self): # -> 
        """ Cut(self: OlkTextBoxClass) """
        ...

    def Paste(self): # -> 
        """ Paste(self: OlkTextBoxClass) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkTextBoxClass, : OlkTextBoxEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkTextBoxClass, : OlkTextBoxEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkTextBoxClass, : OlkTextBoxEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkTextBoxClass, : OlkTextBoxEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkTextBoxClass, : OlkTextBoxEvents_DoubleClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkTextBoxClass, : OlkTextBoxEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkTextBoxClass, : OlkTextBoxEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkTextBoxClass, : OlkTextBoxEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkTextBoxClass, : OlkTextBoxEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkTextBoxClass, : OlkTextBoxEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkTextBoxClass, : OlkTextBoxEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkTextBoxClass, : OlkTextBoxEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkTextBoxClass, : OlkTextBoxEvents_MouseUpEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkTextBoxEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterUpdate(self): # -> 
        """ AfterUpdate(self: OlkTextBoxEvents) """
        ...

    def BeforeUpdate(self, Cancel:bool) -> bool:
        """ BeforeUpdate(self: OlkTextBoxEvents, Cancel: bool) -> bool """
        ...

    def Change(self): # -> 
        """ Change(self: OlkTextBoxEvents) """
        ...

    def Click(self): # -> 
        """ Click(self: OlkTextBoxEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkTextBoxEvents) """
        ...

    def Enter(self): # -> 
        """ Enter(self: OlkTextBoxEvents) """
        ...

    def Exit(self, Cancel:bool) -> bool:
        """ Exit(self: OlkTextBoxEvents, Cancel: bool) -> bool """
        ...

    def KeyDown(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyDown(self: OlkTextBoxEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def KeyPress(self, KeyAscii:int) -> int:
        """ KeyPress(self: OlkTextBoxEvents, KeyAscii: int) -> int """
        ...

    def KeyUp(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyUp(self: OlkTextBoxEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkTextBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkTextBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkTextBoxEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTextBoxEvents_AfterUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_AfterUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTextBoxEvents_AfterUpdateEventHandler) """
        ...


class OlkTextBoxEvents_BeforeUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_BeforeUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkTextBoxEvents_BeforeUpdateEventHandler, Cancel: bool) -> bool """
        ...


class OlkTextBoxEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTextBoxEvents_ChangeEventHandler) """
        ...


class OlkTextBoxEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTextBoxEvents_ClickEventHandler) """
        ...


class OlkTextBoxEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTextBoxEvents_DoubleClickEventHandler) """
        ...


class OlkTextBoxEvents_EnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_EnterEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTextBoxEvents_EnterEventHandler) """
        ...


class OlkTextBoxEvents_ExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_ExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkTextBoxEvents_ExitEventHandler, Cancel: bool) -> bool """
        ...


class OlkTextBoxEvents_KeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_KeyDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkTextBoxEvents_KeyDownEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkTextBoxEvents_KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_KeyPressEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyAscii:int) -> int:
        """ Invoke(self: OlkTextBoxEvents_KeyPressEventHandler, KeyAscii: int) -> int """
        ...


class OlkTextBoxEvents_KeyUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_KeyUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkTextBoxEvents_KeyUpEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkTextBoxEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkTextBoxEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTextBoxEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkTextBoxEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTextBoxEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTextBoxEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkTextBoxEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTextBoxEvents_SinkHelper(OlkTextBoxEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterUpdateDelegate = ...
    m_BeforeUpdateDelegate = ...
    m_ChangeDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_dwCookie = ...
    m_EnterDelegate = ...
    m_ExitDelegate = ...
    m_KeyDownDelegate = ...
    m_KeyPressDelegate = ...
    m_KeyUpDelegate = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkTimeControlEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_DoubleClickEventHandler) """
        ...

    def add_DropButtonClick(self): # -> 
        """ add_DropButtonClick(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_DropButtonClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_DoubleClickEventHandler) """
        ...

    def remove_DropButtonClick(self): # -> 
        """ remove_DropButtonClick(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_DropButtonClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkTimeControlEvents_Event, : OlkTimeControlEvents_MouseUpEventHandler) """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    DropButtonClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkTimeControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: _OlkTimeControl) -> bool
        Set: AutoSize(self: _OlkTimeControl) = value
        """
        ...

    @property
    def AutoWordSelect(self) -> bool:
        """
        Get: AutoWordSelect(self: _OlkTimeControl) -> bool
        Set: AutoWordSelect(self: _OlkTimeControl) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: _OlkTimeControl) -> UInt32
        Set: BackColor(self: _OlkTimeControl) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: _OlkTimeControl) -> OlBackStyle
        Set: BackStyle(self: _OlkTimeControl) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkTimeControl) -> bool
        Set: Enabled(self: _OlkTimeControl) = value
        """
        ...

    @property
    def EnterFieldBehavior(self) -> OlEnterFieldBehavior:
        """
        Get: EnterFieldBehavior(self: _OlkTimeControl) -> OlEnterFieldBehavior
        Set: EnterFieldBehavior(self: _OlkTimeControl) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: _OlkTimeControl) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: _OlkTimeControl) -> UInt32
        Set: ForeColor(self: _OlkTimeControl) = value
        """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: _OlkTimeControl) -> bool
        Set: HideSelection(self: _OlkTimeControl) = value
        """
        ...

    @property
    def IntervalTime(self) -> DateTime:
        """
        Get: IntervalTime(self: _OlkTimeControl) -> DateTime
        Set: IntervalTime(self: _OlkTimeControl) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: _OlkTimeControl) -> bool
        Set: Locked(self: _OlkTimeControl) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkTimeControl) -> StdPicture
        Set: MouseIcon(self: _OlkTimeControl) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkTimeControl) -> OlMousePointer
        Set: MousePointer(self: _OlkTimeControl) = value
        """
        ...

    @property
    def ReferenceTime(self) -> DateTime:
        """
        Get: ReferenceTime(self: _OlkTimeControl) -> DateTime
        Set: ReferenceTime(self: _OlkTimeControl) = value
        """
        ...

    @property
    def Style(self) -> OlTimeStyle:
        """
        Get: Style(self: _OlkTimeControl) -> OlTimeStyle
        Set: Style(self: _OlkTimeControl) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: _OlkTimeControl) -> str
        Set: Text(self: _OlkTimeControl) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: _OlkTimeControl) -> OlTextAlign
        Set: TextAlign(self: _OlkTimeControl) = value
        """
        ...

    @property
    def Time(self) -> DateTime:
        """
        Get: Time(self: _OlkTimeControl) -> DateTime
        Set: Time(self: _OlkTimeControl) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: _OlkTimeControl) -> object
        Set: Value(self: _OlkTimeControl) = value
        """
        ...


    def DropDown(self): # -> 
        """ DropDown(self: _OlkTimeControl) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OlkTimeControl(_OlkTimeControl, OlkTimeControlEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkTimeControlClass(OlkTimeControl, __ComObject): # skipped bases: <type '_OlkTimeControl'>, <type 'OlkTimeControlEvents_Event'>, <type 'object'>
    """ OlkTimeControlClass() """
    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: OlkTimeControlClass) -> bool
        Set: AutoSize(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def AutoWordSelect(self) -> bool:
        """
        Get: AutoWordSelect(self: OlkTimeControlClass) -> bool
        Set: AutoWordSelect(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def BackColor(self) -> UInt32:
        """
        Get: BackColor(self: OlkTimeControlClass) -> UInt32
        Set: BackColor(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def BackStyle(self) -> OlBackStyle:
        """
        Get: BackStyle(self: OlkTimeControlClass) -> OlBackStyle
        Set: BackStyle(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkTimeControlClass) -> bool
        Set: Enabled(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def EnterFieldBehavior(self) -> OlEnterFieldBehavior:
        """
        Get: EnterFieldBehavior(self: OlkTimeControlClass) -> OlEnterFieldBehavior
        Set: EnterFieldBehavior(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def Font(self): # -> StdFont
        """ Get: Font(self: OlkTimeControlClass) -> StdFont """
        ...

    @property
    def ForeColor(self) -> UInt32:
        """
        Get: ForeColor(self: OlkTimeControlClass) -> UInt32
        Set: ForeColor(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def HideSelection(self) -> bool:
        """
        Get: HideSelection(self: OlkTimeControlClass) -> bool
        Set: HideSelection(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def IntervalTime(self) -> DateTime:
        """
        Get: IntervalTime(self: OlkTimeControlClass) -> DateTime
        Set: IntervalTime(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: OlkTimeControlClass) -> bool
        Set: Locked(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkTimeControlClass) -> StdPicture
        Set: MouseIcon(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkTimeControlClass) -> OlMousePointer
        Set: MousePointer(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def ReferenceTime(self) -> DateTime:
        """
        Get: ReferenceTime(self: OlkTimeControlClass) -> DateTime
        Set: ReferenceTime(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def Style(self) -> OlTimeStyle:
        """
        Get: Style(self: OlkTimeControlClass) -> OlTimeStyle
        Set: Style(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: OlkTimeControlClass) -> str
        Set: Text(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def TextAlign(self) -> OlTextAlign:
        """
        Get: TextAlign(self: OlkTimeControlClass) -> OlTextAlign
        Set: TextAlign(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def Time(self) -> DateTime:
        """
        Get: Time(self: OlkTimeControlClass) -> DateTime
        Set: Time(self: OlkTimeControlClass) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: OlkTimeControlClass) -> object
        Set: Value(self: OlkTimeControlClass) = value
        """
        ...


    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkTimeControlClass, : OlkTimeControlEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkTimeControlClass, : OlkTimeControlEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkTimeControlClass, : OlkTimeControlEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkTimeControlClass, : OlkTimeControlEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkTimeControlClass, : OlkTimeControlEvents_DoubleClickEventHandler) """
        ...

    def add_DropButtonClick(self): # -> 
        """ add_DropButtonClick(self: OlkTimeControlClass, : OlkTimeControlEvents_DropButtonClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkTimeControlClass, : OlkTimeControlEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkTimeControlClass, : OlkTimeControlEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkTimeControlClass, : OlkTimeControlEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkTimeControlClass, : OlkTimeControlEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkTimeControlClass, : OlkTimeControlEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkTimeControlClass, : OlkTimeControlEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkTimeControlClass, : OlkTimeControlEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkTimeControlClass, : OlkTimeControlEvents_MouseUpEventHandler) """
        ...

    def DropDown(self): # -> 
        """ DropDown(self: OlkTimeControlClass) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkTimeControlClass, : OlkTimeControlEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkTimeControlClass, : OlkTimeControlEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkTimeControlClass, : OlkTimeControlEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkTimeControlClass, : OlkTimeControlEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkTimeControlClass, : OlkTimeControlEvents_DoubleClickEventHandler) """
        ...

    def remove_DropButtonClick(self): # -> 
        """ remove_DropButtonClick(self: OlkTimeControlClass, : OlkTimeControlEvents_DropButtonClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkTimeControlClass, : OlkTimeControlEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkTimeControlClass, : OlkTimeControlEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkTimeControlClass, : OlkTimeControlEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkTimeControlClass, : OlkTimeControlEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkTimeControlClass, : OlkTimeControlEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkTimeControlClass, : OlkTimeControlEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkTimeControlClass, : OlkTimeControlEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkTimeControlClass, : OlkTimeControlEvents_MouseUpEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    DropButtonClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkTimeControlEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterUpdate(self): # -> 
        """ AfterUpdate(self: OlkTimeControlEvents) """
        ...

    def BeforeUpdate(self, Cancel:bool) -> bool:
        """ BeforeUpdate(self: OlkTimeControlEvents, Cancel: bool) -> bool """
        ...

    def Change(self): # -> 
        """ Change(self: OlkTimeControlEvents) """
        ...

    def Click(self): # -> 
        """ Click(self: OlkTimeControlEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkTimeControlEvents) """
        ...

    def DropButtonClick(self): # -> 
        """ DropButtonClick(self: OlkTimeControlEvents) """
        ...

    def Enter(self): # -> 
        """ Enter(self: OlkTimeControlEvents) """
        ...

    def Exit(self, Cancel:bool) -> bool:
        """ Exit(self: OlkTimeControlEvents, Cancel: bool) -> bool """
        ...

    def KeyDown(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyDown(self: OlkTimeControlEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def KeyPress(self, KeyAscii:int) -> int:
        """ KeyPress(self: OlkTimeControlEvents, KeyAscii: int) -> int """
        ...

    def KeyUp(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyUp(self: OlkTimeControlEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkTimeControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkTimeControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkTimeControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTimeControlEvents_AfterUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_AfterUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeControlEvents_AfterUpdateEventHandler) """
        ...


class OlkTimeControlEvents_BeforeUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_BeforeUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkTimeControlEvents_BeforeUpdateEventHandler, Cancel: bool) -> bool """
        ...


class OlkTimeControlEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeControlEvents_ChangeEventHandler) """
        ...


class OlkTimeControlEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeControlEvents_ClickEventHandler) """
        ...


class OlkTimeControlEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeControlEvents_DoubleClickEventHandler) """
        ...


class OlkTimeControlEvents_DropButtonClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_DropButtonClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeControlEvents_DropButtonClickEventHandler) """
        ...


class OlkTimeControlEvents_EnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_EnterEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeControlEvents_EnterEventHandler) """
        ...


class OlkTimeControlEvents_ExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_ExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkTimeControlEvents_ExitEventHandler, Cancel: bool) -> bool """
        ...


class OlkTimeControlEvents_KeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_KeyDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkTimeControlEvents_KeyDownEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkTimeControlEvents_KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_KeyPressEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyAscii:int) -> int:
        """ Invoke(self: OlkTimeControlEvents_KeyPressEventHandler, KeyAscii: int) -> int """
        ...


class OlkTimeControlEvents_KeyUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_KeyUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkTimeControlEvents_KeyUpEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkTimeControlEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkTimeControlEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTimeControlEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkTimeControlEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTimeControlEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeControlEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkTimeControlEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTimeControlEvents_SinkHelper(OlkTimeControlEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterUpdateDelegate = ...
    m_BeforeUpdateDelegate = ...
    m_ChangeDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_DropButtonClickDelegate = ...
    m_dwCookie = ...
    m_EnterDelegate = ...
    m_ExitDelegate = ...
    m_KeyDownDelegate = ...
    m_KeyPressDelegate = ...
    m_KeyUpDelegate = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlkTimeZoneControlEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_DoubleClickEventHandler) """
        ...

    def add_DropButtonClick(self): # -> 
        """ add_DropButtonClick(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_DropButtonClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_MouseUpEventHandler) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_DoubleClickEventHandler) """
        ...

    def remove_DropButtonClick(self): # -> 
        """ remove_DropButtonClick(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_DropButtonClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkTimeZoneControlEvents_Event, : OlkTimeZoneControlEvents_MouseUpEventHandler) """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    DropButtonClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class _OlkTimeZoneControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AppointmentTimeField(self) -> OlAppointmentTimeField:
        """
        Get: AppointmentTimeField(self: _OlkTimeZoneControl) -> OlAppointmentTimeField
        Set: AppointmentTimeField(self: _OlkTimeZoneControl) = value
        """
        ...

    @property
    def BorderStyle(self) -> OlBorderStyle:
        """
        Get: BorderStyle(self: _OlkTimeZoneControl) -> OlBorderStyle
        Set: BorderStyle(self: _OlkTimeZoneControl) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _OlkTimeZoneControl) -> bool
        Set: Enabled(self: _OlkTimeZoneControl) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: _OlkTimeZoneControl) -> bool
        Set: Locked(self: _OlkTimeZoneControl) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: _OlkTimeZoneControl) -> StdPicture
        Set: MouseIcon(self: _OlkTimeZoneControl) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: _OlkTimeZoneControl) -> OlMousePointer
        Set: MousePointer(self: _OlkTimeZoneControl) = value
        """
        ...

    @property
    def SelectedTimeZoneIndex(self) -> int:
        """
        Get: SelectedTimeZoneIndex(self: _OlkTimeZoneControl) -> int
        Set: SelectedTimeZoneIndex(self: _OlkTimeZoneControl) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: _OlkTimeZoneControl) -> object
        Set: Value(self: _OlkTimeZoneControl) = value
        """
        ...


    def DropDown(self): # -> 
        """ DropDown(self: _OlkTimeZoneControl) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OlkTimeZoneControl(OlkTimeZoneControlEvents_Event, _OlkTimeZoneControl): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OlkTimeZoneControlClass(__ComObject, OlkTimeZoneControl): # skipped bases: <type '_OlkTimeZoneControl'>, <type 'OlkTimeZoneControlEvents_Event'>, <type 'object'>
    """ OlkTimeZoneControlClass() """
    @property
    def AppointmentTimeField(self) -> OlAppointmentTimeField:
        """
        Get: AppointmentTimeField(self: OlkTimeZoneControlClass) -> OlAppointmentTimeField
        Set: AppointmentTimeField(self: OlkTimeZoneControlClass) = value
        """
        ...

    @property
    def BorderStyle(self) -> OlBorderStyle:
        """
        Get: BorderStyle(self: OlkTimeZoneControlClass) -> OlBorderStyle
        Set: BorderStyle(self: OlkTimeZoneControlClass) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: OlkTimeZoneControlClass) -> bool
        Set: Enabled(self: OlkTimeZoneControlClass) = value
        """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: OlkTimeZoneControlClass) -> bool
        Set: Locked(self: OlkTimeZoneControlClass) = value
        """
        ...

    @property
    def MouseIcon(self): # -> StdPicture
        """
        Get: MouseIcon(self: OlkTimeZoneControlClass) -> StdPicture
        Set: MouseIcon(self: OlkTimeZoneControlClass) = value
        """
        ...

    @property
    def MousePointer(self) -> OlMousePointer:
        """
        Get: MousePointer(self: OlkTimeZoneControlClass) -> OlMousePointer
        Set: MousePointer(self: OlkTimeZoneControlClass) = value
        """
        ...

    @property
    def SelectedTimeZoneIndex(self) -> int:
        """
        Get: SelectedTimeZoneIndex(self: OlkTimeZoneControlClass) -> int
        Set: SelectedTimeZoneIndex(self: OlkTimeZoneControlClass) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: OlkTimeZoneControlClass) -> object
        Set: Value(self: OlkTimeZoneControlClass) = value
        """
        ...


    def add_AfterUpdate(self): # -> 
        """ add_AfterUpdate(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_AfterUpdateEventHandler) """
        ...

    def add_BeforeUpdate(self): # -> 
        """ add_BeforeUpdate(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_BeforeUpdateEventHandler) """
        ...

    def add_Change(self): # -> 
        """ add_Change(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_ChangeEventHandler) """
        ...

    def add_Click(self): # -> 
        """ add_Click(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_ClickEventHandler) """
        ...

    def add_DoubleClick(self): # -> 
        """ add_DoubleClick(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_DoubleClickEventHandler) """
        ...

    def add_DropButtonClick(self): # -> 
        """ add_DropButtonClick(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_DropButtonClickEventHandler) """
        ...

    def add_Enter(self): # -> 
        """ add_Enter(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_EnterEventHandler) """
        ...

    def add_Exit(self): # -> 
        """ add_Exit(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_ExitEventHandler) """
        ...

    def add_KeyDown(self): # -> 
        """ add_KeyDown(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_KeyDownEventHandler) """
        ...

    def add_KeyPress(self): # -> 
        """ add_KeyPress(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_KeyPressEventHandler) """
        ...

    def add_KeyUp(self): # -> 
        """ add_KeyUp(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_KeyUpEventHandler) """
        ...

    def add_MouseDown(self): # -> 
        """ add_MouseDown(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_MouseDownEventHandler) """
        ...

    def add_MouseMove(self): # -> 
        """ add_MouseMove(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_MouseMoveEventHandler) """
        ...

    def add_MouseUp(self): # -> 
        """ add_MouseUp(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_MouseUpEventHandler) """
        ...

    def DropDown(self): # -> 
        """ DropDown(self: OlkTimeZoneControlClass) """
        ...

    def remove_AfterUpdate(self): # -> 
        """ remove_AfterUpdate(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_AfterUpdateEventHandler) """
        ...

    def remove_BeforeUpdate(self): # -> 
        """ remove_BeforeUpdate(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_BeforeUpdateEventHandler) """
        ...

    def remove_Change(self): # -> 
        """ remove_Change(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_ChangeEventHandler) """
        ...

    def remove_Click(self): # -> 
        """ remove_Click(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_ClickEventHandler) """
        ...

    def remove_DoubleClick(self): # -> 
        """ remove_DoubleClick(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_DoubleClickEventHandler) """
        ...

    def remove_DropButtonClick(self): # -> 
        """ remove_DropButtonClick(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_DropButtonClickEventHandler) """
        ...

    def remove_Enter(self): # -> 
        """ remove_Enter(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_EnterEventHandler) """
        ...

    def remove_Exit(self): # -> 
        """ remove_Exit(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_ExitEventHandler) """
        ...

    def remove_KeyDown(self): # -> 
        """ remove_KeyDown(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_KeyDownEventHandler) """
        ...

    def remove_KeyPress(self): # -> 
        """ remove_KeyPress(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_KeyPressEventHandler) """
        ...

    def remove_KeyUp(self): # -> 
        """ remove_KeyUp(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_KeyUpEventHandler) """
        ...

    def remove_MouseDown(self): # -> 
        """ remove_MouseDown(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_MouseDownEventHandler) """
        ...

    def remove_MouseMove(self): # -> 
        """ remove_MouseMove(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_MouseMoveEventHandler) """
        ...

    def remove_MouseUp(self): # -> 
        """ remove_MouseUp(self: OlkTimeZoneControlClass, : OlkTimeZoneControlEvents_MouseUpEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...

    AfterUpdate = ...
    BeforeUpdate = ...
    Change = ...
    Click = ...
    DoubleClick = ...
    DropButtonClick = ...
    Enter = ...
    Exit = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    MouseDown = ...
    MouseMove = ...
    MouseUp = ...


class OlkTimeZoneControlEvents: # skipped bases: <type 'object'>
    """ no doc """
    def AfterUpdate(self): # -> 
        """ AfterUpdate(self: OlkTimeZoneControlEvents) """
        ...

    def BeforeUpdate(self, Cancel:bool) -> bool:
        """ BeforeUpdate(self: OlkTimeZoneControlEvents, Cancel: bool) -> bool """
        ...

    def Change(self): # -> 
        """ Change(self: OlkTimeZoneControlEvents) """
        ...

    def Click(self): # -> 
        """ Click(self: OlkTimeZoneControlEvents) """
        ...

    def DoubleClick(self): # -> 
        """ DoubleClick(self: OlkTimeZoneControlEvents) """
        ...

    def DropButtonClick(self): # -> 
        """ DropButtonClick(self: OlkTimeZoneControlEvents) """
        ...

    def Enter(self): # -> 
        """ Enter(self: OlkTimeZoneControlEvents) """
        ...

    def Exit(self, Cancel:bool) -> bool:
        """ Exit(self: OlkTimeZoneControlEvents, Cancel: bool) -> bool """
        ...

    def KeyDown(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyDown(self: OlkTimeZoneControlEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def KeyPress(self, KeyAscii:int) -> int:
        """ KeyPress(self: OlkTimeZoneControlEvents, KeyAscii: int) -> int """
        ...

    def KeyUp(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ KeyUp(self: OlkTimeZoneControlEvents, KeyCode: int, Shift: OlShiftState) -> int """
        ...

    def MouseDown(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseDown(self: OlkTimeZoneControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseMove(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseMove(self: OlkTimeZoneControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...

    def MouseUp(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ MouseUp(self: OlkTimeZoneControlEvents, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTimeZoneControlEvents_AfterUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_AfterUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeZoneControlEvents_AfterUpdateEventHandler) """
        ...


class OlkTimeZoneControlEvents_BeforeUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_BeforeUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkTimeZoneControlEvents_BeforeUpdateEventHandler, Cancel: bool) -> bool """
        ...


class OlkTimeZoneControlEvents_ChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_ChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeZoneControlEvents_ChangeEventHandler) """
        ...


class OlkTimeZoneControlEvents_ClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_ClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeZoneControlEvents_ClickEventHandler) """
        ...


class OlkTimeZoneControlEvents_DoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_DoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeZoneControlEvents_DoubleClickEventHandler) """
        ...


class OlkTimeZoneControlEvents_DropButtonClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_DropButtonClickEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeZoneControlEvents_DropButtonClickEventHandler) """
        ...


class OlkTimeZoneControlEvents_EnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_EnterEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OlkTimeZoneControlEvents_EnterEventHandler) """
        ...


class OlkTimeZoneControlEvents_ExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_ExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel:bool) -> bool:
        """ Invoke(self: OlkTimeZoneControlEvents_ExitEventHandler, Cancel: bool) -> bool """
        ...


class OlkTimeZoneControlEvents_KeyDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_KeyDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkTimeZoneControlEvents_KeyDownEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkTimeZoneControlEvents_KeyPressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_KeyPressEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyAscii:int) -> int:
        """ Invoke(self: OlkTimeZoneControlEvents_KeyPressEventHandler, KeyAscii: int) -> int """
        ...


class OlkTimeZoneControlEvents_KeyUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_KeyUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, KeyCode:int, Shift:OlShiftState) -> int:
        """ Invoke(self: OlkTimeZoneControlEvents_KeyUpEventHandler, KeyCode: int, Shift: OlShiftState) -> int """
        ...


class OlkTimeZoneControlEvents_MouseDownEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_MouseDownEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkTimeZoneControlEvents_MouseDownEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTimeZoneControlEvents_MouseMoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_MouseMoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkTimeZoneControlEvents_MouseMoveEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTimeZoneControlEvents_MouseUpEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OlkTimeZoneControlEvents_MouseUpEventHandler(: object, : UIntPtr) """
    def Invoke(self, Button:OlMouseButton, Shift:OlShiftState, X:Single, Y:Single): # -> 
        """ Invoke(self: OlkTimeZoneControlEvents_MouseUpEventHandler, Button: OlMouseButton, Shift: OlShiftState, X: Single, Y: Single) """
        ...


class OlkTimeZoneControlEvents_SinkHelper(OlkTimeZoneControlEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_AfterUpdateDelegate = ...
    m_BeforeUpdateDelegate = ...
    m_ChangeDelegate = ...
    m_ClickDelegate = ...
    m_DoubleClickDelegate = ...
    m_DropButtonClickDelegate = ...
    m_dwCookie = ...
    m_EnterDelegate = ...
    m_ExitDelegate = ...
    m_KeyDownDelegate = ...
    m_KeyPressDelegate = ...
    m_KeyUpDelegate = ...
    m_MouseDownDelegate = ...
    m_MouseMoveDelegate = ...
    m_MouseUpDelegate = ...


class OlMailingAddress(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMailingAddress, values: olBusiness (2), olHome (1), olNone (0), olOther (3) """
    olBusiness: OlMailingAddress = ...
    olHome: OlMailingAddress = ...
    olNone: OlMailingAddress = ...
    olOther: OlMailingAddress = ...
    value__ = ...


class OlMailRecipientType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMailRecipientType, values: olBCC (3), olCC (2), olOriginator (0), olTo (1) """
    olBCC: OlMailRecipientType = ...
    olCC: OlMailRecipientType = ...
    olOriginator: OlMailRecipientType = ...
    olTo: OlMailRecipientType = ...
    value__ = ...


class OlMarkInterval(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMarkInterval, values: olMarkComplete (5), olMarkNextWeek (3), olMarkNoDate (4), olMarkThisWeek (2), olMarkToday (0), olMarkTomorrow (1) """
    olMarkComplete: OlMarkInterval = ...
    olMarkNextWeek: OlMarkInterval = ...
    olMarkNoDate: OlMarkInterval = ...
    olMarkThisWeek: OlMarkInterval = ...
    olMarkToday: OlMarkInterval = ...
    olMarkTomorrow: OlMarkInterval = ...
    value__ = ...


class OlMatchEntry(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMatchEntry, values: olMatchEntryComplete (1), olMatchEntryFirstLetter (0), olMatchEntryNone (2) """
    olMatchEntryComplete: OlMatchEntry = ...
    olMatchEntryFirstLetter: OlMatchEntry = ...
    olMatchEntryNone: OlMatchEntry = ...
    value__ = ...


class OlMeetingRecipientType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMeetingRecipientType, values: olOptional (2), olOrganizer (0), olRequired (1), olResource (3) """
    olOptional: OlMeetingRecipientType = ...
    olOrganizer: OlMeetingRecipientType = ...
    olRequired: OlMeetingRecipientType = ...
    olResource: OlMeetingRecipientType = ...
    value__ = ...


class OlMeetingResponse(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMeetingResponse, values: olMeetingAccepted (3), olMeetingDeclined (4), olMeetingTentative (2) """
    olMeetingAccepted: OlMeetingResponse = ...
    olMeetingDeclined: OlMeetingResponse = ...
    olMeetingTentative: OlMeetingResponse = ...
    value__ = ...


class OlMeetingStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMeetingStatus, values: olMeeting (1), olMeetingCanceled (5), olMeetingReceived (3), olMeetingReceivedAndCanceled (7), olNonMeeting (0) """
    olMeeting: OlMeetingStatus = ...
    olMeetingCanceled: OlMeetingStatus = ...
    olMeetingReceived: OlMeetingStatus = ...
    olMeetingReceivedAndCanceled: OlMeetingStatus = ...
    olNonMeeting: OlMeetingStatus = ...
    value__ = ...


class OlMobileFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMobileFormat, values: olMMS (1), olSMS (0) """
    olMMS: OlMobileFormat = ...
    olSMS: OlMobileFormat = ...
    value__ = ...


class OlMouseButton(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMouseButton, values: olMouseButtonLeft (1), olMouseButtonMiddle (4), olMouseButtonRight (2) """
    olMouseButtonLeft: OlMouseButton = ...
    olMouseButtonMiddle: OlMouseButton = ...
    olMouseButtonRight: OlMouseButton = ...
    value__ = ...


class OlMousePointer(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMousePointer, values: olMousePointerAppStarting (13), olMousePointerArrow (1), olMousePointerCross (2), olMousePointerCustom (99), olMousePointerDefault (0), olMousePointerHelp (14), olMousePointerHourGlass (11), olMousePointerIBeam (3), olMousePointerNoDrop (12), olMousePointerSizeAll (15), olMousePointerSizeNESW (6), olMousePointerSizeNS (7), olMousePointerSizeNWSE (8), olMousePointerSizeWE (9), olMousePointerUpArrow (10) """
    olMousePointerAppStarting: OlMousePointer = ...
    olMousePointerArrow: OlMousePointer = ...
    olMousePointerCross: OlMousePointer = ...
    olMousePointerCustom: OlMousePointer = ...
    olMousePointerDefault: OlMousePointer = ...
    olMousePointerHelp: OlMousePointer = ...
    olMousePointerHourGlass: OlMousePointer = ...
    olMousePointerIBeam: OlMousePointer = ...
    olMousePointerNoDrop: OlMousePointer = ...
    olMousePointerSizeAll: OlMousePointer = ...
    olMousePointerSizeNESW: OlMousePointer = ...
    olMousePointerSizeNS: OlMousePointer = ...
    olMousePointerSizeNWSE: OlMousePointer = ...
    olMousePointerSizeWE: OlMousePointer = ...
    olMousePointerUpArrow: OlMousePointer = ...
    value__ = ...


class OlMultiLine(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMultiLine, values: olAlwaysMultiLine (2), olAlwaysSingleLine (1), olWidthMultiLine (0) """
    olAlwaysMultiLine: OlMultiLine = ...
    olAlwaysSingleLine: OlMultiLine = ...
    olWidthMultiLine: OlMultiLine = ...
    value__ = ...


class OlMultiSelect(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlMultiSelect, values: olMultiSelectExtended (2), olMultiSelectMulti (1), olMultiSelectSingle (0) """
    olMultiSelectExtended: OlMultiSelect = ...
    olMultiSelectMulti: OlMultiSelect = ...
    olMultiSelectSingle: OlMultiSelect = ...
    value__ = ...


class OlNavigationModuleType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlNavigationModuleType, values: olModuleCalendar (1), olModuleContacts (2), olModuleFolderList (6), olModuleJournal (4), olModuleMail (0), olModuleNotes (5), olModuleShortcuts (7), olModuleSolutions (8), olModuleTasks (3) """
    olModuleCalendar: OlNavigationModuleType = ...
    olModuleContacts: OlNavigationModuleType = ...
    olModuleFolderList: OlNavigationModuleType = ...
    olModuleJournal: OlNavigationModuleType = ...
    olModuleMail: OlNavigationModuleType = ...
    olModuleNotes: OlNavigationModuleType = ...
    olModuleShortcuts: OlNavigationModuleType = ...
    olModuleSolutions: OlNavigationModuleType = ...
    olModuleTasks: OlNavigationModuleType = ...
    value__ = ...


class OlNetMeetingType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlNetMeetingType, values: olExchangeConferencing (2), olNetMeeting (0), olNetShow (1) """
    olExchangeConferencing: OlNetMeetingType = ...
    olNetMeeting: OlNetMeetingType = ...
    olNetShow: OlNetMeetingType = ...
    value__ = ...


class OlNoteColor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlNoteColor, values: olBlue (0), olGreen (1), olPink (2), olWhite (4), olYellow (3) """
    olBlue: OlNoteColor = ...
    olGreen: OlNoteColor = ...
    olPink: OlNoteColor = ...
    olWhite: OlNoteColor = ...
    olYellow: OlNoteColor = ...
    value__ = ...


class OlObjectClass(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlObjectClass, values: olAccount (105), olAccountRuleCondition (135), olAccounts (106), olAction (32), olActions (33), olAddressEntries (21), olAddressEntry (8), olAddressList (7), olAddressLists (20), olAddressRuleCondition (170), olApplication (0), olAppointment (26), olAssignToCategoryRuleAction (122), olAttachment (5), olAttachments (18), olAttachmentSelection (169), olAutoFormatRule (147), olAutoFormatRules (148), olCalendarModule (159), olCalendarSharing (151), olCategories (153), olCategory (152), olCategoryRuleCondition (130), olClassBusinessCardView (168), olClassCalendarView (139), olClassCardView (138), olClassIconView (137), olClassNavigationPane (155), olClassPeopleView (183), olClassTableView (136), olClassTimeLineView (140), olClassTimeZone (174), olClassTimeZones (175), olColumn (154), olColumnFormat (149), olColumns (150), olConflict (102), olConflicts (103), olContact (40), olContactsModule (160), olConversation (178), olConversationHeader (182), olDistributionList (69), olDocument (41), olException (30), olExceptions (29), olExchangeDistributionList (111), olExchangeUser (110), olExplorer (34), olExplorers (60), olFolder (2), olFolders (15), olFormDescription (37), olFormNameRuleCondition (131), olFormRegion (129), olFromRssFeedRuleCondition (173), olFromRuleCondition (132), olImportanceRuleCondition (128), olInspector (35), olInspectors (61), olItemProperties (98), olItemProperty (99), olItems (16), olJournal (42), olJournalModule (162), olLink (75), olLinks (76), olMail (43), olMailModule (158), olMarkAsTaskRuleAction (124), olMeetingCancellation (54), olMeetingForwardNotification (181), olMeetingRequest (53), olMeetingResponseNegative (55), olMeetingResponsePositive (56), olMeetingResponseTentative (57), olMobile (176), olMoveOrCopyRuleAction (118), olNamespace (1), olNavigationFolder (167), olNavigationFolders (166), olNavigationGroup (165), olNavigationGroups (164), olNavigationModule (157), olNavigationModules (156), olNewItemAlertRuleAction (125), olNote (44), olNotesModule (163), olOrderField (144), olOrderFields (145), olOutlookBarGroup (66), olOutlookBarGroups (65), olOutlookBarPane (63), olOutlookBarShortcut (68), olOutlookBarShortcuts (67), olOutlookBarStorage (64), olOutspace (180), olPages (36), olPanes (62), olPlaySoundRuleAction (123), olPost (45), olPropertyAccessor (112), olPropertyPages (71), olPropertyPageSite (70), olRecipient (4), olRecipients (17), olRecurrencePattern (28), olReminder (101), olReminders (100), olRemote (47), olReport (46), olResults (78), olRow (121), olRule (115), olRuleAction (117), olRuleActions (116), olRuleCondition (127), olRuleConditions (126), olRules (114), olSearch (77), olSelection (74), olSelectNamesDialog (109), olSenderInAddressListRuleCondition (133), olSendRuleAction (119), olSharing (104), olSimpleItems (179), olSolutionsModule (177), olStorageItem (113), olStore (107), olStores (108), olSyncObject (72), olSyncObjects (73), olTable (120), olTask (48), olTaskRequest (49), olTaskRequestAccept (51), olTaskRequestDecline (52), olTaskRequestUpdate (50), olTasksModule (161), olTextRuleCondition (134), olUserDefinedProperties (172), olUserDefinedProperty (171), olUserProperties (38), olUserProperty (39), olView (80), olViewField (142), olViewFields (141), olViewFont (146), olViews (79) """
    olAccount: OlObjectClass = ...
    olAccountRuleCondition: OlObjectClass = ...
    olAccounts: OlObjectClass = ...
    olAction: OlObjectClass = ...
    olActions: OlObjectClass = ...
    olAddressEntries: OlObjectClass = ...
    olAddressEntry: OlObjectClass = ...
    olAddressList: OlObjectClass = ...
    olAddressLists: OlObjectClass = ...
    olAddressRuleCondition: OlObjectClass = ...
    olApplication: OlObjectClass = ...
    olAppointment: OlObjectClass = ...
    olAssignToCategoryRuleAction: OlObjectClass = ...
    olAttachment: OlObjectClass = ...
    olAttachments: OlObjectClass = ...
    olAttachmentSelection: OlObjectClass = ...
    olAutoFormatRule: OlObjectClass = ...
    olAutoFormatRules: OlObjectClass = ...
    olCalendarModule: OlObjectClass = ...
    olCalendarSharing: OlObjectClass = ...
    olCategories: OlObjectClass = ...
    olCategory: OlObjectClass = ...
    olCategoryRuleCondition: OlObjectClass = ...
    olClassBusinessCardView: OlObjectClass = ...
    olClassCalendarView: OlObjectClass = ...
    olClassCardView: OlObjectClass = ...
    olClassIconView: OlObjectClass = ...
    olClassNavigationPane: OlObjectClass = ...
    olClassPeopleView: OlObjectClass = ...
    olClassTableView: OlObjectClass = ...
    olClassTimeLineView: OlObjectClass = ...
    olClassTimeZone: OlObjectClass = ...
    olClassTimeZones: OlObjectClass = ...
    olColumn: OlObjectClass = ...
    olColumnFormat: OlObjectClass = ...
    olColumns: OlObjectClass = ...
    olConflict: OlObjectClass = ...
    olConflicts: OlObjectClass = ...
    olContact: OlObjectClass = ...
    olContactsModule: OlObjectClass = ...
    olConversation: OlObjectClass = ...
    olConversationHeader: OlObjectClass = ...
    olDistributionList: OlObjectClass = ...
    olDocument: OlObjectClass = ...
    olException: OlObjectClass = ...
    olExceptions: OlObjectClass = ...
    olExchangeDistributionList: OlObjectClass = ...
    olExchangeUser: OlObjectClass = ...
    olExplorer: OlObjectClass = ...
    olExplorers: OlObjectClass = ...
    olFolder: OlObjectClass = ...
    olFolders: OlObjectClass = ...
    olFormDescription: OlObjectClass = ...
    olFormNameRuleCondition: OlObjectClass = ...
    olFormRegion: OlObjectClass = ...
    olFromRssFeedRuleCondition: OlObjectClass = ...
    olFromRuleCondition: OlObjectClass = ...
    olImportanceRuleCondition: OlObjectClass = ...
    olInspector: OlObjectClass = ...
    olInspectors: OlObjectClass = ...
    olItemProperties: OlObjectClass = ...
    olItemProperty: OlObjectClass = ...
    olItems: OlObjectClass = ...
    olJournal: OlObjectClass = ...
    olJournalModule: OlObjectClass = ...
    olLink: OlObjectClass = ...
    olLinks: OlObjectClass = ...
    olMail: OlObjectClass = ...
    olMailModule: OlObjectClass = ...
    olMarkAsTaskRuleAction: OlObjectClass = ...
    olMeetingCancellation: OlObjectClass = ...
    olMeetingForwardNotification: OlObjectClass = ...
    olMeetingRequest: OlObjectClass = ...
    olMeetingResponseNegative: OlObjectClass = ...
    olMeetingResponsePositive: OlObjectClass = ...
    olMeetingResponseTentative: OlObjectClass = ...
    olMobile: OlObjectClass = ...
    olMoveOrCopyRuleAction: OlObjectClass = ...
    olNamespace: OlObjectClass = ...
    olNavigationFolder: OlObjectClass = ...
    olNavigationFolders: OlObjectClass = ...
    olNavigationGroup: OlObjectClass = ...
    olNavigationGroups: OlObjectClass = ...
    olNavigationModule: OlObjectClass = ...
    olNavigationModules: OlObjectClass = ...
    olNewItemAlertRuleAction: OlObjectClass = ...
    olNote: OlObjectClass = ...
    olNotesModule: OlObjectClass = ...
    olOrderField: OlObjectClass = ...
    olOrderFields: OlObjectClass = ...
    olOutlookBarGroup: OlObjectClass = ...
    olOutlookBarGroups: OlObjectClass = ...
    olOutlookBarPane: OlObjectClass = ...
    olOutlookBarShortcut: OlObjectClass = ...
    olOutlookBarShortcuts: OlObjectClass = ...
    olOutlookBarStorage: OlObjectClass = ...
    olOutspace: OlObjectClass = ...
    olPages: OlObjectClass = ...
    olPanes: OlObjectClass = ...
    olPlaySoundRuleAction: OlObjectClass = ...
    olPost: OlObjectClass = ...
    olPropertyAccessor: OlObjectClass = ...
    olPropertyPages: OlObjectClass = ...
    olPropertyPageSite: OlObjectClass = ...
    olRecipient: OlObjectClass = ...
    olRecipients: OlObjectClass = ...
    olRecurrencePattern: OlObjectClass = ...
    olReminder: OlObjectClass = ...
    olReminders: OlObjectClass = ...
    olRemote: OlObjectClass = ...
    olReport: OlObjectClass = ...
    olResults: OlObjectClass = ...
    olRow: OlObjectClass = ...
    olRule: OlObjectClass = ...
    olRuleAction: OlObjectClass = ...
    olRuleActions: OlObjectClass = ...
    olRuleCondition: OlObjectClass = ...
    olRuleConditions: OlObjectClass = ...
    olRules: OlObjectClass = ...
    olSearch: OlObjectClass = ...
    olSelection: OlObjectClass = ...
    olSelectNamesDialog: OlObjectClass = ...
    olSenderInAddressListRuleCondition: OlObjectClass = ...
    olSendRuleAction: OlObjectClass = ...
    olSharing: OlObjectClass = ...
    olSimpleItems: OlObjectClass = ...
    olSolutionsModule: OlObjectClass = ...
    olStorageItem: OlObjectClass = ...
    olStore: OlObjectClass = ...
    olStores: OlObjectClass = ...
    olSyncObject: OlObjectClass = ...
    olSyncObjects: OlObjectClass = ...
    olTable: OlObjectClass = ...
    olTask: OlObjectClass = ...
    olTaskRequest: OlObjectClass = ...
    olTaskRequestAccept: OlObjectClass = ...
    olTaskRequestDecline: OlObjectClass = ...
    olTaskRequestUpdate: OlObjectClass = ...
    olTasksModule: OlObjectClass = ...
    olTextRuleCondition: OlObjectClass = ...
    olUserDefinedProperties: OlObjectClass = ...
    olUserDefinedProperty: OlObjectClass = ...
    olUserProperties: OlObjectClass = ...
    olUserProperty: OlObjectClass = ...
    olView: OlObjectClass = ...
    olViewField: OlObjectClass = ...
    olViewFields: OlObjectClass = ...
    olViewFont: OlObjectClass = ...
    olViews: OlObjectClass = ...
    value__ = ...


class OlOfficeDocItemsType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlOfficeDocItemsType, values: olExcelWorkSheetItem (8), olPowerPointShowItem (10), olWordDocumentItem (9) """
    olExcelWorkSheetItem: OlOfficeDocItemsType = ...
    olPowerPointShowItem: OlOfficeDocItemsType = ...
    olWordDocumentItem: OlOfficeDocItemsType = ...
    value__ = ...


class OlOutlookBarViewType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlOutlookBarViewType, values: olLargeIcon (0), olSmallIcon (1) """
    olLargeIcon: OlOutlookBarViewType = ...
    olSmallIcon: OlOutlookBarViewType = ...
    value__ = ...


class OlPageType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlPageType, values: olPageTypePlanner (0), olPageTypeTracker (1) """
    olPageTypePlanner: OlPageType = ...
    olPageTypeTracker: OlPageType = ...
    value__ = ...


class OlPane(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlPane, values: olFolderList (2), olNavigationPane (4), olOutlookBar (1), olPreview (3), olToDoBar (5) """
    olFolderList: OlPane = ...
    olNavigationPane: OlPane = ...
    olOutlookBar: OlPane = ...
    olPreview: OlPane = ...
    olToDoBar: OlPane = ...
    value__ = ...


class OlPermission(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlPermission, values: olDoNotForward (1), olPermissionTemplate (2), olUnrestricted (0) """
    olDoNotForward: OlPermission = ...
    olPermissionTemplate: OlPermission = ...
    olUnrestricted: OlPermission = ...
    value__ = ...


class OlPermissionService(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlPermissionService, values: olPassport (2), olUnknown (0), olWindows (1) """
    olPassport: OlPermissionService = ...
    olUnknown: OlPermissionService = ...
    olWindows: OlPermissionService = ...
    value__ = ...


class OlPictureAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlPictureAlignment, values: olPictureAlignmentLeft (0), olPictureAlignmentTop (1) """
    olPictureAlignmentLeft: OlPictureAlignment = ...
    olPictureAlignmentTop: OlPictureAlignment = ...
    value__ = ...


class OlRecipientSelectors(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlRecipientSelectors, values: olShowNone (0), olShowTo (1), olShowToCc (2), olShowToCcBcc (3) """
    olShowNone: OlRecipientSelectors = ...
    olShowTo: OlRecipientSelectors = ...
    olShowToCc: OlRecipientSelectors = ...
    olShowToCcBcc: OlRecipientSelectors = ...
    value__ = ...


class OlRecurrenceState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlRecurrenceState, values: olApptException (3), olApptMaster (1), olApptNotRecurring (0), olApptOccurrence (2) """
    olApptException: OlRecurrenceState = ...
    olApptMaster: OlRecurrenceState = ...
    olApptNotRecurring: OlRecurrenceState = ...
    olApptOccurrence: OlRecurrenceState = ...
    value__ = ...


class OlRecurrenceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlRecurrenceType, values: olRecursDaily (0), olRecursMonthly (2), olRecursMonthNth (3), olRecursWeekly (1), olRecursYearly (5), olRecursYearNth (6) """
    olRecursDaily: OlRecurrenceType = ...
    olRecursMonthly: OlRecurrenceType = ...
    olRecursMonthNth: OlRecurrenceType = ...
    olRecursWeekly: OlRecurrenceType = ...
    olRecursYearly: OlRecurrenceType = ...
    olRecursYearNth: OlRecurrenceType = ...
    value__ = ...


class OlReferenceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlReferenceType, values: olStrong (1), olWeak (0) """
    olStrong: OlReferenceType = ...
    olWeak: OlReferenceType = ...
    value__ = ...


class OlRemoteStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlRemoteStatus, values: olMarkedForCopy (3), olMarkedForDelete (4), olMarkedForDownload (2), olRemoteStatusNone (0), olUnMarked (1) """
    olMarkedForCopy: OlRemoteStatus = ...
    olMarkedForDelete: OlRemoteStatus = ...
    olMarkedForDownload: OlRemoteStatus = ...
    olRemoteStatusNone: OlRemoteStatus = ...
    olUnMarked: OlRemoteStatus = ...
    value__ = ...


class OlResponseStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlResponseStatus, values: olResponseAccepted (3), olResponseDeclined (4), olResponseNone (0), olResponseNotResponded (5), olResponseOrganized (1), olResponseTentative (2) """
    olResponseAccepted: OlResponseStatus = ...
    olResponseDeclined: OlResponseStatus = ...
    olResponseNone: OlResponseStatus = ...
    olResponseNotResponded: OlResponseStatus = ...
    olResponseOrganized: OlResponseStatus = ...
    olResponseTentative: OlResponseStatus = ...
    value__ = ...


class OlRuleActionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlRuleActionType, values: olRuleActionAssignToCategory (2), olRuleActionCcMessage (27), olRuleActionClearCategories (30), olRuleActionCopyToFolder (5), olRuleActionCustomAction (22), olRuleActionDefer (28), olRuleActionDelete (3), olRuleActionDeletePermanently (4), olRuleActionDesktopAlert (24), olRuleActionFlagClear (13), olRuleActionFlagColor (12), olRuleActionFlagForActionInDays (11), olRuleActionForward (6), olRuleActionForwardAsAttachment (7), olRuleActionImportance (14), olRuleActionMarkAsTask (29), olRuleActionMarkRead (19), olRuleActionMoveToFolder (1), olRuleActionNewItemAlert (23), olRuleActionNotifyDelivery (26), olRuleActionNotifyRead (25), olRuleActionPlaySound (17), olRuleActionPrint (16), olRuleActionRedirect (8), olRuleActionRunScript (20), olRuleActionSensitivity (15), olRuleActionServerReply (9), olRuleActionStartApplication (18), olRuleActionStop (21), olRuleActionTemplate (10), olRuleActionUnknown (0) """
    olRuleActionAssignToCategory: OlRuleActionType = ...
    olRuleActionCcMessage: OlRuleActionType = ...
    olRuleActionClearCategories: OlRuleActionType = ...
    olRuleActionCopyToFolder: OlRuleActionType = ...
    olRuleActionCustomAction: OlRuleActionType = ...
    olRuleActionDefer: OlRuleActionType = ...
    olRuleActionDelete: OlRuleActionType = ...
    olRuleActionDeletePermanently: OlRuleActionType = ...
    olRuleActionDesktopAlert: OlRuleActionType = ...
    olRuleActionFlagClear: OlRuleActionType = ...
    olRuleActionFlagColor: OlRuleActionType = ...
    olRuleActionFlagForActionInDays: OlRuleActionType = ...
    olRuleActionForward: OlRuleActionType = ...
    olRuleActionForwardAsAttachment: OlRuleActionType = ...
    olRuleActionImportance: OlRuleActionType = ...
    olRuleActionMarkAsTask: OlRuleActionType = ...
    olRuleActionMarkRead: OlRuleActionType = ...
    olRuleActionMoveToFolder: OlRuleActionType = ...
    olRuleActionNewItemAlert: OlRuleActionType = ...
    olRuleActionNotifyDelivery: OlRuleActionType = ...
    olRuleActionNotifyRead: OlRuleActionType = ...
    olRuleActionPlaySound: OlRuleActionType = ...
    olRuleActionPrint: OlRuleActionType = ...
    olRuleActionRedirect: OlRuleActionType = ...
    olRuleActionRunScript: OlRuleActionType = ...
    olRuleActionSensitivity: OlRuleActionType = ...
    olRuleActionServerReply: OlRuleActionType = ...
    olRuleActionStartApplication: OlRuleActionType = ...
    olRuleActionStop: OlRuleActionType = ...
    olRuleActionTemplate: OlRuleActionType = ...
    olRuleActionUnknown: OlRuleActionType = ...
    value__ = ...


class OlRuleConditionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlRuleConditionType, values: olConditionAccount (3), olConditionAnyCategory (29), olConditionBody (13), olConditionBodyOrSubject (14), olConditionCategory (18), olConditionCc (9), olConditionDateRange (22), olConditionFlaggedForAction (8), olConditionFormName (23), olConditionFrom (1), olConditionFromAnyRssFeed (31), olConditionFromRssFeed (30), olConditionHasAttachment (20), olConditionImportance (6), olConditionLocalMachineOnly (27), olConditionMeetingInviteOrUpdate (26), olConditionMessageHeader (15), olConditionNotTo (11), olConditionOnlyToMe (4), olConditionOOF (19), olConditionOtherMachine (28), olConditionProperty (24), olConditionRecipientAddress (16), olConditionSenderAddress (17), olConditionSenderInAddressBook (25), olConditionSensitivity (7), olConditionSentTo (12), olConditionSizeRange (21), olConditionSubject (2), olConditionTo (5), olConditionToOrCc (10), olConditionUnknown (0) """
    olConditionAccount: OlRuleConditionType = ...
    olConditionAnyCategory: OlRuleConditionType = ...
    olConditionBody: OlRuleConditionType = ...
    olConditionBodyOrSubject: OlRuleConditionType = ...
    olConditionCategory: OlRuleConditionType = ...
    olConditionCc: OlRuleConditionType = ...
    olConditionDateRange: OlRuleConditionType = ...
    olConditionFlaggedForAction: OlRuleConditionType = ...
    olConditionFormName: OlRuleConditionType = ...
    olConditionFrom: OlRuleConditionType = ...
    olConditionFromAnyRssFeed: OlRuleConditionType = ...
    olConditionFromRssFeed: OlRuleConditionType = ...
    olConditionHasAttachment: OlRuleConditionType = ...
    olConditionImportance: OlRuleConditionType = ...
    olConditionLocalMachineOnly: OlRuleConditionType = ...
    olConditionMeetingInviteOrUpdate: OlRuleConditionType = ...
    olConditionMessageHeader: OlRuleConditionType = ...
    olConditionNotTo: OlRuleConditionType = ...
    olConditionOnlyToMe: OlRuleConditionType = ...
    olConditionOOF: OlRuleConditionType = ...
    olConditionOtherMachine: OlRuleConditionType = ...
    olConditionProperty: OlRuleConditionType = ...
    olConditionRecipientAddress: OlRuleConditionType = ...
    olConditionSenderAddress: OlRuleConditionType = ...
    olConditionSenderInAddressBook: OlRuleConditionType = ...
    olConditionSensitivity: OlRuleConditionType = ...
    olConditionSentTo: OlRuleConditionType = ...
    olConditionSizeRange: OlRuleConditionType = ...
    olConditionSubject: OlRuleConditionType = ...
    olConditionTo: OlRuleConditionType = ...
    olConditionToOrCc: OlRuleConditionType = ...
    olConditionUnknown: OlRuleConditionType = ...
    value__ = ...


class OlRuleExecuteOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlRuleExecuteOption, values: olRuleExecuteAllMessages (0), olRuleExecuteReadMessages (1), olRuleExecuteUnreadMessages (2) """
    olRuleExecuteAllMessages: OlRuleExecuteOption = ...
    olRuleExecuteReadMessages: OlRuleExecuteOption = ...
    olRuleExecuteUnreadMessages: OlRuleExecuteOption = ...
    value__ = ...


class OlRuleType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlRuleType, values: olRuleReceive (0), olRuleSend (1) """
    olRuleReceive: OlRuleType = ...
    olRuleSend: OlRuleType = ...
    value__ = ...


class OlSaveAsType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlSaveAsType, values: olDoc (4), olHTML (5), olICal (8), olMHTML (10), olMSG (3), olMSGUnicode (9), olRTF (1), olTemplate (2), olTXT (0), olVCal (7), olVCard (6) """
    olDoc: OlSaveAsType = ...
    olHTML: OlSaveAsType = ...
    olICal: OlSaveAsType = ...
    olMHTML: OlSaveAsType = ...
    olMSG: OlSaveAsType = ...
    olMSGUnicode: OlSaveAsType = ...
    olRTF: OlSaveAsType = ...
    olTemplate: OlSaveAsType = ...
    olTXT: OlSaveAsType = ...
    olVCal: OlSaveAsType = ...
    olVCard: OlSaveAsType = ...
    value__ = ...


class OlScrollBars(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlScrollBars, values: olScrollBarsBoth (3), olScrollBarsHorizontal (1), olScrollBarsNone (0), olScrollBarsVertical (2) """
    olScrollBarsBoth: OlScrollBars = ...
    olScrollBarsHorizontal: OlScrollBars = ...
    olScrollBarsNone: OlScrollBars = ...
    olScrollBarsVertical: OlScrollBars = ...
    value__ = ...


class OlSearchScope(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlSearchScope, values: olSearchScopeAllFolders (1), olSearchScopeAllOutlookItems (2), olSearchScopeCurrentFolder (0), olSearchScopeCurrentStore (4), olSearchScopeSubfolders (3) """
    olSearchScopeAllFolders: OlSearchScope = ...
    olSearchScopeAllOutlookItems: OlSearchScope = ...
    olSearchScopeCurrentFolder: OlSearchScope = ...
    olSearchScopeCurrentStore: OlSearchScope = ...
    olSearchScopeSubfolders: OlSearchScope = ...
    value__ = ...


class OlSelectionContents(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlSelectionContents, values: olConversationHeaders (1) """
    olConversationHeaders: OlSelectionContents = ...
    value__ = ...


class OlSelectionLocation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlSelectionLocation, values: olAttachmentWell (4), olDailyTaskList (3), olToDoBarAppointmentList (2), olToDoBarTaskList (1), olViewList (0) """
    olAttachmentWell: OlSelectionLocation = ...
    olDailyTaskList: OlSelectionLocation = ...
    olToDoBarAppointmentList: OlSelectionLocation = ...
    olToDoBarTaskList: OlSelectionLocation = ...
    olViewList: OlSelectionLocation = ...
    value__ = ...


class OlSensitivity(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlSensitivity, values: olConfidential (3), olNormal (0), olPersonal (1), olPrivate (2) """
    olConfidential: OlSensitivity = ...
    olNormal: OlSensitivity = ...
    olPersonal: OlSensitivity = ...
    olPrivate: OlSensitivity = ...
    value__ = ...


class OlSharingMsgType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlSharingMsgType, values: olSharingMsgTypeInvite (2), olSharingMsgTypeInviteAndRequest (3), olSharingMsgTypeRequest (1), olSharingMsgTypeResponseAllow (4), olSharingMsgTypeResponseDeny (5), olSharingMsgTypeUnknown (0) """
    olSharingMsgTypeInvite: OlSharingMsgType = ...
    olSharingMsgTypeInviteAndRequest: OlSharingMsgType = ...
    olSharingMsgTypeRequest: OlSharingMsgType = ...
    olSharingMsgTypeResponseAllow: OlSharingMsgType = ...
    olSharingMsgTypeResponseDeny: OlSharingMsgType = ...
    olSharingMsgTypeUnknown: OlSharingMsgType = ...
    value__ = ...


class OlSharingProvider(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlSharingProvider, values: olProviderExchange (1), olProviderFederate (7), olProviderICal (4), olProviderPubCal (3), olProviderRSS (6), olProviderSharePoint (5), olProviderUnknown (0), olProviderWebCal (2) """
    olProviderExchange: OlSharingProvider = ...
    olProviderFederate: OlSharingProvider = ...
    olProviderICal: OlSharingProvider = ...
    olProviderPubCal: OlSharingProvider = ...
    olProviderRSS: OlSharingProvider = ...
    olProviderSharePoint: OlSharingProvider = ...
    olProviderUnknown: OlSharingProvider = ...
    olProviderWebCal: OlSharingProvider = ...
    value__ = ...


class OlShiftState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlShiftState, values: olShiftStateAltMask (4), olShiftStateCtrlMask (2), olShiftStateShiftMask (1) """
    olShiftStateAltMask: OlShiftState = ...
    olShiftStateCtrlMask: OlShiftState = ...
    olShiftStateShiftMask: OlShiftState = ...
    value__ = ...


class OlShowItemCount(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlShowItemCount, values: olNoItemCount (0), olShowTotalItemCount (2), olShowUnreadItemCount (1) """
    olNoItemCount: OlShowItemCount = ...
    olShowTotalItemCount: OlShowItemCount = ...
    olShowUnreadItemCount: OlShowItemCount = ...
    value__ = ...


class OlSolutionScope(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlSolutionScope, values: olHideInDefaultModules (0), olShowInDefaultModules (1) """
    olHideInDefaultModules: OlSolutionScope = ...
    olShowInDefaultModules: OlSolutionScope = ...
    value__ = ...


class OlSortOrder(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlSortOrder, values: olAscending (1), olDescending (2), olSortNone (0) """
    olAscending: OlSortOrder = ...
    olDescending: OlSortOrder = ...
    olSortNone: OlSortOrder = ...
    value__ = ...


class OlSpecialFolders(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlSpecialFolders, values: olSpecialFolderAllTasks (0), olSpecialFolderReminders (1) """
    olSpecialFolderAllTasks: OlSpecialFolders = ...
    olSpecialFolderReminders: OlSpecialFolders = ...
    value__ = ...


class OlStorageIdentifierType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlStorageIdentifierType, values: olIdentifyByEntryID (1), olIdentifyByMessageClass (2), olIdentifyBySubject (0) """
    olIdentifyByEntryID: OlStorageIdentifierType = ...
    olIdentifyByMessageClass: OlStorageIdentifierType = ...
    olIdentifyBySubject: OlStorageIdentifierType = ...
    value__ = ...


class OlStoreType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlStoreType, values: olStoreANSI (3), olStoreDefault (1), olStoreUnicode (2) """
    olStoreANSI: OlStoreType = ...
    olStoreDefault: OlStoreType = ...
    olStoreUnicode: OlStoreType = ...
    value__ = ...


class OlSyncState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlSyncState, values: olSyncStarted (1), olSyncStopped (0) """
    olSyncStarted: OlSyncState = ...
    olSyncStopped: OlSyncState = ...
    value__ = ...


class OlTableContents(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlTableContents, values: olHiddenItems (1), olUserItems (0) """
    olHiddenItems: OlTableContents = ...
    olUserItems: OlTableContents = ...
    value__ = ...


class OlTaskDelegationState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlTaskDelegationState, values: olTaskDelegationAccepted (2), olTaskDelegationDeclined (3), olTaskDelegationUnknown (1), olTaskNotDelegated (0) """
    olTaskDelegationAccepted: OlTaskDelegationState = ...
    olTaskDelegationDeclined: OlTaskDelegationState = ...
    olTaskDelegationUnknown: OlTaskDelegationState = ...
    olTaskNotDelegated: OlTaskDelegationState = ...
    value__ = ...


class OlTaskOwnership(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlTaskOwnership, values: olDelegatedTask (1), olNewTask (0), olOwnTask (2) """
    olDelegatedTask: OlTaskOwnership = ...
    olNewTask: OlTaskOwnership = ...
    olOwnTask: OlTaskOwnership = ...
    value__ = ...


class OlTaskRecipientType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlTaskRecipientType, values: olFinalStatus (3), olUpdate (2) """
    olFinalStatus: OlTaskRecipientType = ...
    olUpdate: OlTaskRecipientType = ...
    value__ = ...


class OlTaskResponse(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlTaskResponse, values: olTaskAccept (2), olTaskAssign (1), olTaskDecline (3), olTaskSimple (0) """
    olTaskAccept: OlTaskResponse = ...
    olTaskAssign: OlTaskResponse = ...
    olTaskDecline: OlTaskResponse = ...
    olTaskSimple: OlTaskResponse = ...
    value__ = ...


class OlTaskStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlTaskStatus, values: olTaskComplete (2), olTaskDeferred (4), olTaskInProgress (1), olTaskNotStarted (0), olTaskWaiting (3) """
    olTaskComplete: OlTaskStatus = ...
    olTaskDeferred: OlTaskStatus = ...
    olTaskInProgress: OlTaskStatus = ...
    olTaskNotStarted: OlTaskStatus = ...
    olTaskWaiting: OlTaskStatus = ...
    value__ = ...


class OlTextAlign(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlTextAlign, values: olTextAlignCenter (2), olTextAlignLeft (1), olTextAlignRight (3) """
    olTextAlignCenter: OlTextAlign = ...
    olTextAlignLeft: OlTextAlign = ...
    olTextAlignRight: OlTextAlign = ...
    value__ = ...


class OlTimelineViewMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlTimelineViewMode, values: olTimelineViewDay (0), olTimelineViewMonth (2), olTimelineViewWeek (1) """
    olTimelineViewDay: OlTimelineViewMode = ...
    olTimelineViewMonth: OlTimelineViewMode = ...
    olTimelineViewWeek: OlTimelineViewMode = ...
    value__ = ...


class OlTimeStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlTimeStyle, values: olTimeStyleShortDuration (4), olTimeStyleTimeDuration (1), olTimeStyleTimeOnly (0) """
    olTimeStyleShortDuration: OlTimeStyle = ...
    olTimeStyleTimeDuration: OlTimeStyle = ...
    olTimeStyleTimeOnly: OlTimeStyle = ...
    value__ = ...


class OlTrackingStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlTrackingStatus, values: olTrackingDelivered (1), olTrackingNone (0), olTrackingNotDelivered (2), olTrackingNotRead (3), olTrackingRead (6), olTrackingRecallFailure (4), olTrackingRecallSuccess (5), olTrackingReplied (7) """
    olTrackingDelivered: OlTrackingStatus = ...
    olTrackingNone: OlTrackingStatus = ...
    olTrackingNotDelivered: OlTrackingStatus = ...
    olTrackingNotRead: OlTrackingStatus = ...
    olTrackingRead: OlTrackingStatus = ...
    olTrackingRecallFailure: OlTrackingStatus = ...
    olTrackingRecallSuccess: OlTrackingStatus = ...
    olTrackingReplied: OlTrackingStatus = ...
    value__ = ...


class OlUserPropertyType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlUserPropertyType, values: olCombination (19), olCurrency (14), olDateTime (5), olDuration (7), olEnumeration (21), olFormula (18), olInteger (20), olKeywords (11), olNumber (3), olOutlookInternal (0), olPercent (12), olSmartFrom (22), olText (1), olYesNo (6) """
    olCombination: OlUserPropertyType = ...
    olCurrency: OlUserPropertyType = ...
    olDateTime: OlUserPropertyType = ...
    olDuration: OlUserPropertyType = ...
    olEnumeration: OlUserPropertyType = ...
    olFormula: OlUserPropertyType = ...
    olInteger: OlUserPropertyType = ...
    olKeywords: OlUserPropertyType = ...
    olNumber: OlUserPropertyType = ...
    olOutlookInternal: OlUserPropertyType = ...
    olPercent: OlUserPropertyType = ...
    olSmartFrom: OlUserPropertyType = ...
    olText: OlUserPropertyType = ...
    olYesNo: OlUserPropertyType = ...
    value__ = ...


class OlVerticalLayout(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlVerticalLayout, values: olVerticalLayoutAlignBottom (2), olVerticalLayoutAlignMiddle (1), olVerticalLayoutAlignTop (0), olVerticalLayoutGrow (3) """
    olVerticalLayoutAlignBottom: OlVerticalLayout = ...
    olVerticalLayoutAlignMiddle: OlVerticalLayout = ...
    olVerticalLayoutAlignTop: OlVerticalLayout = ...
    olVerticalLayoutGrow: OlVerticalLayout = ...
    value__ = ...


class OlViewSaveOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlViewSaveOption, values: olViewSaveOptionAllFoldersOfType (2), olViewSaveOptionThisFolderEveryone (0), olViewSaveOptionThisFolderOnlyMe (1) """
    olViewSaveOptionAllFoldersOfType: OlViewSaveOption = ...
    olViewSaveOptionThisFolderEveryone: OlViewSaveOption = ...
    olViewSaveOptionThisFolderOnlyMe: OlViewSaveOption = ...
    value__ = ...


class OlViewType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlViewType, values: olBusinessCardView (5), olCalendarView (2), olCardView (1), olDailyTaskListView (6), olIconView (3), olPeopleView (7), olTableView (0), olTimelineView (4) """
    olBusinessCardView: OlViewType = ...
    olCalendarView: OlViewType = ...
    olCardView: OlViewType = ...
    olDailyTaskListView: OlViewType = ...
    olIconView: OlViewType = ...
    olPeopleView: OlViewType = ...
    olTableView: OlViewType = ...
    olTimelineView: OlViewType = ...
    value__ = ...


class OlWindowState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OlWindowState, values: olMaximized (0), olMinimized (1), olNormalWindow (2) """
    olMaximized: OlWindowState = ...
    olMinimized: OlWindowState = ...
    olNormalWindow: OlWindowState = ...
    value__ = ...


class _OrderField: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _OrderField) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _OrderField) -> OlObjectClass """
        ...

    @property
    def IsDescending(self) -> bool:
        """
        Get: IsDescending(self: _OrderField) -> bool
        Set: IsDescending(self: _OrderField) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _OrderField) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _OrderField) -> NameSpace """
        ...

    @property
    def ViewXMLSchemaName(self) -> str:
        """ Get: ViewXMLSchemaName(self: _OrderField) -> str """
        ...



class OrderField(_OrderField): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OrderFieldClass(OrderField, __ComObject): # skipped bases: <type '_OrderField'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OrderFieldClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: OrderFieldClass) -> OlObjectClass """
        ...

    @property
    def IsDescending(self) -> bool:
        """
        Get: IsDescending(self: OrderFieldClass) -> bool
        Set: IsDescending(self: OrderFieldClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OrderFieldClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: OrderFieldClass) -> NameSpace """
        ...

    @property
    def ViewXMLSchemaName(self) -> str:
        """ Get: ViewXMLSchemaName(self: OrderFieldClass) -> str """
        ...



class _OrderFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _OrderFields) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _OrderFields) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _OrderFields) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _OrderFields) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _OrderFields) -> NameSpace """
        ...


    def Add(self, PropertyName:str, IsDescending:object) -> OrderField:
        """ Add(self: _OrderFields, PropertyName: str, IsDescending: object) -> OrderField """
        ...

    def Insert(self, PropertyName:str, Index:object, IsDescending:object) -> OrderField:
        """ Insert(self: _OrderFields, PropertyName: str, Index: object, IsDescending: object) -> OrderField """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: _OrderFields, Index: object) """
        ...

    def RemoveAll(self): # -> 
        """ RemoveAll(self: _OrderFields) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OrderFields(_OrderFields): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class OrderFieldsClass(OrderFields, __ComObject): # skipped bases: <type 'IEnumerable'>, <type '_OrderFields'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OrderFieldsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: OrderFieldsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OrderFieldsClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OrderFieldsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: OrderFieldsClass) -> NameSpace """
        ...


    def Add(self, PropertyName:str, IsDescending:object) -> OrderField:
        """ Add(self: OrderFieldsClass, PropertyName: str, IsDescending: object) -> OrderField """
        ...

    def Insert(self, PropertyName:str, Index:object, IsDescending:object) -> OrderField:
        """ Insert(self: OrderFieldsClass, PropertyName: str, Index: object, IsDescending: object) -> OrderField """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: OrderFieldsClass, Index: object) """
        ...

    def RemoveAll(self): # -> 
        """ RemoveAll(self: OrderFieldsClass) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OutlookBarGroup: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OutlookBarGroup) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: OutlookBarGroup) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: OutlookBarGroup) -> str
        Set: Name(self: OutlookBarGroup) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OutlookBarGroup) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: OutlookBarGroup) -> NameSpace """
        ...

    @property
    def Shortcuts(self) -> OutlookBarShortcuts:
        """ Get: Shortcuts(self: OutlookBarGroup) -> OutlookBarShortcuts """
        ...

    @property
    def ViewType(self) -> OlOutlookBarViewType:
        """
        Get: ViewType(self: OutlookBarGroup) -> OlOutlookBarViewType
        Set: ViewType(self: OutlookBarGroup) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OutlookBarGroupsEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_BeforeGroupAdd(self): # -> 
        """ add_BeforeGroupAdd(self: OutlookBarGroupsEvents_Event, : OutlookBarGroupsEvents_BeforeGroupAddEventHandler) """
        ...

    def add_BeforeGroupRemove(self): # -> 
        """ add_BeforeGroupRemove(self: OutlookBarGroupsEvents_Event, : OutlookBarGroupsEvents_BeforeGroupRemoveEventHandler) """
        ...

    def add_GroupAdd(self): # -> 
        """ add_GroupAdd(self: OutlookBarGroupsEvents_Event, : OutlookBarGroupsEvents_GroupAddEventHandler) """
        ...

    def remove_BeforeGroupAdd(self): # -> 
        """ remove_BeforeGroupAdd(self: OutlookBarGroupsEvents_Event, : OutlookBarGroupsEvents_BeforeGroupAddEventHandler) """
        ...

    def remove_BeforeGroupRemove(self): # -> 
        """ remove_BeforeGroupRemove(self: OutlookBarGroupsEvents_Event, : OutlookBarGroupsEvents_BeforeGroupRemoveEventHandler) """
        ...

    def remove_GroupAdd(self): # -> 
        """ remove_GroupAdd(self: OutlookBarGroupsEvents_Event, : OutlookBarGroupsEvents_GroupAddEventHandler) """
        ...

    BeforeGroupAdd = ...
    BeforeGroupRemove = ...
    GroupAdd = ...


class _OutlookBarGroups(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _OutlookBarGroups) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _OutlookBarGroups) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _OutlookBarGroups) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _OutlookBarGroups) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _OutlookBarGroups) -> NameSpace """
        ...


    def Add(self, Name:str, Index:object) -> OutlookBarGroup:
        """ Add(self: _OutlookBarGroups, Name: str, Index: object) -> OutlookBarGroup """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: _OutlookBarGroups, Index: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OutlookBarGroups(OutlookBarGroupsEvents_Event, _OutlookBarGroups): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class OutlookBarGroupsClass(__ComObject, OutlookBarGroups): # skipped bases: <type '_OutlookBarGroups'>, <type 'IEnumerable'>, <type 'OutlookBarGroupsEvents_Event'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OutlookBarGroupsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: OutlookBarGroupsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OutlookBarGroupsClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OutlookBarGroupsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: OutlookBarGroupsClass) -> NameSpace """
        ...


    def Add(self, Name:str, Index:object) -> OutlookBarGroup:
        """ Add(self: OutlookBarGroupsClass, Name: str, Index: object) -> OutlookBarGroup """
        ...

    def add_BeforeGroupAdd(self): # -> 
        """ add_BeforeGroupAdd(self: OutlookBarGroupsClass, : OutlookBarGroupsEvents_BeforeGroupAddEventHandler) """
        ...

    def add_BeforeGroupRemove(self): # -> 
        """ add_BeforeGroupRemove(self: OutlookBarGroupsClass, : OutlookBarGroupsEvents_BeforeGroupRemoveEventHandler) """
        ...

    def add_GroupAdd(self): # -> 
        """ add_GroupAdd(self: OutlookBarGroupsClass, : OutlookBarGroupsEvents_GroupAddEventHandler) """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: OutlookBarGroupsClass, Index: object) """
        ...

    def remove_BeforeGroupAdd(self): # -> 
        """ remove_BeforeGroupAdd(self: OutlookBarGroupsClass, : OutlookBarGroupsEvents_BeforeGroupAddEventHandler) """
        ...

    def remove_BeforeGroupRemove(self): # -> 
        """ remove_BeforeGroupRemove(self: OutlookBarGroupsClass, : OutlookBarGroupsEvents_BeforeGroupRemoveEventHandler) """
        ...

    def remove_GroupAdd(self): # -> 
        """ remove_GroupAdd(self: OutlookBarGroupsClass, : OutlookBarGroupsEvents_GroupAddEventHandler) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BeforeGroupAdd = ...
    BeforeGroupRemove = ...
    GroupAdd = ...


class OutlookBarGroupsEvents: # skipped bases: <type 'object'>
    """ no doc """
    def BeforeGroupAdd(self, Cancel) -> bool:
        """ BeforeGroupAdd(self: OutlookBarGroupsEvents) -> bool """
        ...

    def BeforeGroupRemove(self, Group, Cancel) -> bool:
        """ BeforeGroupRemove(self: OutlookBarGroupsEvents, Group: OutlookBarGroup) -> bool """
        ...

    def GroupAdd(self, NewGroup:OutlookBarGroup): # -> 
        """ GroupAdd(self: OutlookBarGroupsEvents, NewGroup: OutlookBarGroup) """
        ...


class OutlookBarGroupsEvents_BeforeGroupAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OutlookBarGroupsEvents_BeforeGroupAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: OutlookBarGroupsEvents_BeforeGroupAddEventHandler) -> bool """
        ...


class OutlookBarGroupsEvents_BeforeGroupRemoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OutlookBarGroupsEvents_BeforeGroupRemoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Group, Cancel) -> bool:
        """ Invoke(self: OutlookBarGroupsEvents_BeforeGroupRemoveEventHandler, Group: OutlookBarGroup) -> bool """
        ...


class OutlookBarGroupsEvents_GroupAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OutlookBarGroupsEvents_GroupAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, NewGroup:OutlookBarGroup): # -> 
        """ Invoke(self: OutlookBarGroupsEvents_GroupAddEventHandler, NewGroup: OutlookBarGroup) """
        ...


class OutlookBarGroupsEvents_SinkHelper(OutlookBarGroupsEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_BeforeGroupAddDelegate = ...
    m_BeforeGroupRemoveDelegate = ...
    m_dwCookie = ...
    m_GroupAddDelegate = ...


class OutlookBarPaneEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_BeforeGroupSwitch(self): # -> 
        """ add_BeforeGroupSwitch(self: OutlookBarPaneEvents_Event, : OutlookBarPaneEvents_BeforeGroupSwitchEventHandler) """
        ...

    def add_BeforeNavigate(self): # -> 
        """ add_BeforeNavigate(self: OutlookBarPaneEvents_Event, : OutlookBarPaneEvents_BeforeNavigateEventHandler) """
        ...

    def remove_BeforeGroupSwitch(self): # -> 
        """ remove_BeforeGroupSwitch(self: OutlookBarPaneEvents_Event, : OutlookBarPaneEvents_BeforeGroupSwitchEventHandler) """
        ...

    def remove_BeforeNavigate(self): # -> 
        """ remove_BeforeNavigate(self: OutlookBarPaneEvents_Event, : OutlookBarPaneEvents_BeforeNavigateEventHandler) """
        ...

    BeforeGroupSwitch = ...
    BeforeNavigate = ...


class _OutlookBarPane: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _OutlookBarPane) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _OutlookBarPane) -> OlObjectClass """
        ...

    @property
    def Contents(self) -> OutlookBarStorage:
        """ Get: Contents(self: _OutlookBarPane) -> OutlookBarStorage """
        ...

    @property
    def CurrentGroup(self) -> OutlookBarGroup:
        """
        Get: CurrentGroup(self: _OutlookBarPane) -> OutlookBarGroup
        Set: CurrentGroup(self: _OutlookBarPane) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _OutlookBarPane) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _OutlookBarPane) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _OutlookBarPane) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _OutlookBarPane) -> bool
        Set: Visible(self: _OutlookBarPane) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OutlookBarPane(_OutlookBarPane, OutlookBarPaneEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OutlookBarPaneClass(OutlookBarPane, __ComObject): # skipped bases: <type '_OutlookBarPane'>, <type 'OutlookBarPaneEvents_Event'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OutlookBarPaneClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: OutlookBarPaneClass) -> OlObjectClass """
        ...

    @property
    def Contents(self) -> OutlookBarStorage:
        """ Get: Contents(self: OutlookBarPaneClass) -> OutlookBarStorage """
        ...

    @property
    def CurrentGroup(self) -> OutlookBarGroup:
        """
        Get: CurrentGroup(self: OutlookBarPaneClass) -> OutlookBarGroup
        Set: CurrentGroup(self: OutlookBarPaneClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: OutlookBarPaneClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OutlookBarPaneClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: OutlookBarPaneClass) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: OutlookBarPaneClass) -> bool
        Set: Visible(self: OutlookBarPaneClass) = value
        """
        ...


    def add_BeforeGroupSwitch(self): # -> 
        """ add_BeforeGroupSwitch(self: OutlookBarPaneClass, : OutlookBarPaneEvents_BeforeGroupSwitchEventHandler) """
        ...

    def add_BeforeNavigate(self): # -> 
        """ add_BeforeNavigate(self: OutlookBarPaneClass, : OutlookBarPaneEvents_BeforeNavigateEventHandler) """
        ...

    def remove_BeforeGroupSwitch(self): # -> 
        """ remove_BeforeGroupSwitch(self: OutlookBarPaneClass, : OutlookBarPaneEvents_BeforeGroupSwitchEventHandler) """
        ...

    def remove_BeforeNavigate(self): # -> 
        """ remove_BeforeNavigate(self: OutlookBarPaneClass, : OutlookBarPaneEvents_BeforeNavigateEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BeforeGroupSwitch = ...
    BeforeNavigate = ...


class OutlookBarPaneEvents: # skipped bases: <type 'object'>
    """ no doc """
    def BeforeGroupSwitch(self, ToGroup, Cancel) -> bool:
        """ BeforeGroupSwitch(self: OutlookBarPaneEvents, ToGroup: OutlookBarGroup) -> bool """
        ...

    def BeforeNavigate(self, Shortcut, Cancel) -> bool:
        """ BeforeNavigate(self: OutlookBarPaneEvents, Shortcut: OutlookBarShortcut) -> bool """
        ...


class OutlookBarPaneEvents_BeforeGroupSwitchEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OutlookBarPaneEvents_BeforeGroupSwitchEventHandler(: object, : UIntPtr) """
    def Invoke(self, ToGroup, Cancel) -> bool:
        """ Invoke(self: OutlookBarPaneEvents_BeforeGroupSwitchEventHandler, ToGroup: OutlookBarGroup) -> bool """
        ...


class OutlookBarPaneEvents_BeforeNavigateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OutlookBarPaneEvents_BeforeNavigateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Shortcut, Cancel) -> bool:
        """ Invoke(self: OutlookBarPaneEvents_BeforeNavigateEventHandler, Shortcut: OutlookBarShortcut) -> bool """
        ...


class OutlookBarPaneEvents_SinkHelper(OutlookBarPaneEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_BeforeGroupSwitchDelegate = ...
    m_BeforeNavigateDelegate = ...
    m_dwCookie = ...


class OutlookBarShortcut: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OutlookBarShortcut) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: OutlookBarShortcut) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: OutlookBarShortcut) -> str
        Set: Name(self: OutlookBarShortcut) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OutlookBarShortcut) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: OutlookBarShortcut) -> NameSpace """
        ...

    @property
    def Target(self) -> object:
        """ Get: Target(self: OutlookBarShortcut) -> object """
        ...


    def SetIcon(self, Icon:object): # -> 
        """ SetIcon(self: OutlookBarShortcut, Icon: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class OutlookBarShortcutsEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_BeforeShortcutAdd(self): # -> 
        """ add_BeforeShortcutAdd(self: OutlookBarShortcutsEvents_Event, : OutlookBarShortcutsEvents_BeforeShortcutAddEventHandler) """
        ...

    def add_BeforeShortcutRemove(self): # -> 
        """ add_BeforeShortcutRemove(self: OutlookBarShortcutsEvents_Event, : OutlookBarShortcutsEvents_BeforeShortcutRemoveEventHandler) """
        ...

    def add_ShortcutAdd(self): # -> 
        """ add_ShortcutAdd(self: OutlookBarShortcutsEvents_Event, : OutlookBarShortcutsEvents_ShortcutAddEventHandler) """
        ...

    def remove_BeforeShortcutAdd(self): # -> 
        """ remove_BeforeShortcutAdd(self: OutlookBarShortcutsEvents_Event, : OutlookBarShortcutsEvents_BeforeShortcutAddEventHandler) """
        ...

    def remove_BeforeShortcutRemove(self): # -> 
        """ remove_BeforeShortcutRemove(self: OutlookBarShortcutsEvents_Event, : OutlookBarShortcutsEvents_BeforeShortcutRemoveEventHandler) """
        ...

    def remove_ShortcutAdd(self): # -> 
        """ remove_ShortcutAdd(self: OutlookBarShortcutsEvents_Event, : OutlookBarShortcutsEvents_ShortcutAddEventHandler) """
        ...

    BeforeShortcutAdd = ...
    BeforeShortcutRemove = ...
    ShortcutAdd = ...


class _OutlookBarShortcuts(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _OutlookBarShortcuts) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _OutlookBarShortcuts) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _OutlookBarShortcuts) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _OutlookBarShortcuts) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _OutlookBarShortcuts) -> NameSpace """
        ...


    def Add(self, Target:object, Name:str, Index:object) -> OutlookBarShortcut:
        """ Add(self: _OutlookBarShortcuts, Target: object, Name: str, Index: object) -> OutlookBarShortcut """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: _OutlookBarShortcuts, Index: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OutlookBarShortcuts(_OutlookBarShortcuts, OutlookBarShortcutsEvents_Event): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class OutlookBarShortcutsClass(OutlookBarShortcuts, __ComObject): # skipped bases: <type '_OutlookBarShortcuts'>, <type 'OutlookBarShortcutsEvents_Event'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OutlookBarShortcutsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: OutlookBarShortcutsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OutlookBarShortcutsClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OutlookBarShortcutsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: OutlookBarShortcutsClass) -> NameSpace """
        ...


    def Add(self, Target:object, Name:str, Index:object) -> OutlookBarShortcut:
        """ Add(self: OutlookBarShortcutsClass, Target: object, Name: str, Index: object) -> OutlookBarShortcut """
        ...

    def add_BeforeShortcutAdd(self): # -> 
        """ add_BeforeShortcutAdd(self: OutlookBarShortcutsClass, : OutlookBarShortcutsEvents_BeforeShortcutAddEventHandler) """
        ...

    def add_BeforeShortcutRemove(self): # -> 
        """ add_BeforeShortcutRemove(self: OutlookBarShortcutsClass, : OutlookBarShortcutsEvents_BeforeShortcutRemoveEventHandler) """
        ...

    def add_ShortcutAdd(self): # -> 
        """ add_ShortcutAdd(self: OutlookBarShortcutsClass, : OutlookBarShortcutsEvents_ShortcutAddEventHandler) """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: OutlookBarShortcutsClass, Index: object) """
        ...

    def remove_BeforeShortcutAdd(self): # -> 
        """ remove_BeforeShortcutAdd(self: OutlookBarShortcutsClass, : OutlookBarShortcutsEvents_BeforeShortcutAddEventHandler) """
        ...

    def remove_BeforeShortcutRemove(self): # -> 
        """ remove_BeforeShortcutRemove(self: OutlookBarShortcutsClass, : OutlookBarShortcutsEvents_BeforeShortcutRemoveEventHandler) """
        ...

    def remove_ShortcutAdd(self): # -> 
        """ remove_ShortcutAdd(self: OutlookBarShortcutsClass, : OutlookBarShortcutsEvents_ShortcutAddEventHandler) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BeforeShortcutAdd = ...
    BeforeShortcutRemove = ...
    ShortcutAdd = ...


class OutlookBarShortcutsEvents: # skipped bases: <type 'object'>
    """ no doc """
    def BeforeShortcutAdd(self, Cancel) -> bool:
        """ BeforeShortcutAdd(self: OutlookBarShortcutsEvents) -> bool """
        ...

    def BeforeShortcutRemove(self, Shortcut, Cancel) -> bool:
        """ BeforeShortcutRemove(self: OutlookBarShortcutsEvents, Shortcut: OutlookBarShortcut) -> bool """
        ...

    def ShortcutAdd(self, NewShortcut:OutlookBarShortcut): # -> 
        """ ShortcutAdd(self: OutlookBarShortcutsEvents, NewShortcut: OutlookBarShortcut) """
        ...


class OutlookBarShortcutsEvents_BeforeShortcutAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OutlookBarShortcutsEvents_BeforeShortcutAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: OutlookBarShortcutsEvents_BeforeShortcutAddEventHandler) -> bool """
        ...


class OutlookBarShortcutsEvents_BeforeShortcutRemoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OutlookBarShortcutsEvents_BeforeShortcutRemoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Shortcut, Cancel) -> bool:
        """ Invoke(self: OutlookBarShortcutsEvents_BeforeShortcutRemoveEventHandler, Shortcut: OutlookBarShortcut) -> bool """
        ...


class OutlookBarShortcutsEvents_ShortcutAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OutlookBarShortcutsEvents_ShortcutAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, NewShortcut:OutlookBarShortcut): # -> 
        """ Invoke(self: OutlookBarShortcutsEvents_ShortcutAddEventHandler, NewShortcut: OutlookBarShortcut) """
        ...


class OutlookBarShortcutsEvents_SinkHelper(OutlookBarShortcutsEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_BeforeShortcutAddDelegate = ...
    m_BeforeShortcutRemoveDelegate = ...
    m_dwCookie = ...
    m_ShortcutAddDelegate = ...


class OutlookBarStorage: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OutlookBarStorage) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: OutlookBarStorage) -> OlObjectClass """
        ...

    @property
    def Groups(self) -> OutlookBarGroups:
        """ Get: Groups(self: OutlookBarStorage) -> OutlookBarGroups """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OutlookBarStorage) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: OutlookBarStorage) -> NameSpace """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Pages(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Pages) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Pages) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Pages) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Pages) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Pages) -> NameSpace """
        ...


    def Add(self, Name:object) -> object:
        """ Add(self: Pages, Name: object) -> object """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: Pages, Index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Panes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Panes) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Panes) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Panes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Panes) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Panes) -> NameSpace """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _PeopleView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _PeopleView) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _PeopleView) -> OlObjectClass """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: _PeopleView) -> str
        Set: Filter(self: _PeopleView) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: _PeopleView) -> str
        Set: Language(self: _PeopleView) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: _PeopleView) -> bool
        Set: LockUserChanges(self: _PeopleView) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _PeopleView) -> str
        Set: Name(self: _PeopleView) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _PeopleView) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: _PeopleView) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _PeopleView) -> NameSpace """
        ...

    @property
    def SortFields(self) -> OrderFields:
        """ Get: SortFields(self: _PeopleView) -> OrderFields """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: _PeopleView) -> bool """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: _PeopleView) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: _PeopleView) -> str
        Set: XML(self: _PeopleView) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: _PeopleView) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: _PeopleView, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: _PeopleView) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: _PeopleView, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: _PeopleView) """
        ...

    def Save(self): # -> 
        """ Save(self: _PeopleView) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class PeopleView(_PeopleView): # skipped bases: <type 'object'>
    """ no doc """
    pass

class PeopleViewClass(PeopleView, __ComObject): # skipped bases: <type '_PeopleView'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PeopleViewClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: PeopleViewClass) -> OlObjectClass """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: PeopleViewClass) -> str
        Set: Filter(self: PeopleViewClass) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: PeopleViewClass) -> str
        Set: Language(self: PeopleViewClass) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: PeopleViewClass) -> bool
        Set: LockUserChanges(self: PeopleViewClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: PeopleViewClass) -> str
        Set: Name(self: PeopleViewClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PeopleViewClass) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: PeopleViewClass) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: PeopleViewClass) -> NameSpace """
        ...

    @property
    def SortFields(self) -> OrderFields:
        """ Get: SortFields(self: PeopleViewClass) -> OrderFields """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: PeopleViewClass) -> bool """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: PeopleViewClass) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: PeopleViewClass) -> str
        Set: XML(self: PeopleViewClass) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: PeopleViewClass) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: PeopleViewClass, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: PeopleViewClass) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: PeopleViewClass, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: PeopleViewClass) """
        ...

    def Save(self): # -> 
        """ Save(self: PeopleViewClass) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class _PlaySoundRuleAction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: _PlaySoundRuleAction) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _PlaySoundRuleAction) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _PlaySoundRuleAction) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _PlaySoundRuleAction) -> bool
        Set: Enabled(self: _PlaySoundRuleAction) = value
        """
        ...

    @property
    def FilePath(self) -> str:
        """
        Get: FilePath(self: _PlaySoundRuleAction) -> str
        Set: FilePath(self: _PlaySoundRuleAction) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _PlaySoundRuleAction) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _PlaySoundRuleAction) -> NameSpace """
        ...



class PlaySoundRuleAction(_PlaySoundRuleAction): # skipped bases: <type 'object'>
    """ no doc """
    pass

class PlaySoundRuleActionClass(PlaySoundRuleAction, __ComObject): # skipped bases: <type '_PlaySoundRuleAction'>, <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: PlaySoundRuleActionClass) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: PlaySoundRuleActionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: PlaySoundRuleActionClass) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: PlaySoundRuleActionClass) -> bool
        Set: Enabled(self: PlaySoundRuleActionClass) = value
        """
        ...

    @property
    def FilePath(self) -> str:
        """
        Get: FilePath(self: PlaySoundRuleActionClass) -> str
        Set: FilePath(self: PlaySoundRuleActionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PlaySoundRuleActionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: PlaySoundRuleActionClass) -> NameSpace """
        ...



class _PostItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _PostItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _PostItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _PostItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _PostItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _PostItem) -> str
        Set: BillingInformation(self: _PostItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _PostItem) -> str
        Set: Body(self: _PostItem) = value
        """
        ...

    @property
    def BodyFormat(self) -> OlBodyFormat:
        """
        Get: BodyFormat(self: _PostItem) -> OlBodyFormat
        Set: BodyFormat(self: _PostItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _PostItem) -> str
        Set: Categories(self: _PostItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _PostItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _PostItem) -> str
        Set: Companies(self: _PostItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _PostItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _PostItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _PostItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _PostItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _PostItem) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _PostItem) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _PostItem) -> str """
        ...

    @property
    def ExpiryTime(self) -> DateTime:
        """
        Get: ExpiryTime(self: _PostItem) -> DateTime
        Set: ExpiryTime(self: _PostItem) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _PostItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _PostItem) -> Inspector """
        ...

    @property
    def HTMLBody(self) -> str:
        """
        Get: HTMLBody(self: _PostItem) -> str
        Set: HTMLBody(self: _PostItem) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _PostItem) -> OlImportance
        Set: Importance(self: _PostItem) = value
        """
        ...

    @property
    def InternetCodepage(self) -> int:
        """
        Get: InternetCodepage(self: _PostItem) -> int
        Set: InternetCodepage(self: _PostItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _PostItem) -> bool """
        ...

    @property
    def IsMarkedAsTask(self) -> bool:
        """ Get: IsMarkedAsTask(self: _PostItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _PostItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _PostItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _PostItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _PostItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _PostItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _PostItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _PostItem) -> str
        Set: MessageClass(self: _PostItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _PostItem) -> str
        Set: Mileage(self: _PostItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _PostItem) -> bool
        Set: NoAging(self: _PostItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _PostItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _PostItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _PostItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _PostItem) -> PropertyAccessor """
        ...

    @property
    def ReceivedTime(self) -> DateTime:
        """ Get: ReceivedTime(self: _PostItem) -> DateTime """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: _PostItem) -> bool
        Set: ReminderOverrideDefault(self: _PostItem) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: _PostItem) -> bool
        Set: ReminderPlaySound(self: _PostItem) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: _PostItem) -> bool
        Set: ReminderSet(self: _PostItem) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: _PostItem) -> str
        Set: ReminderSoundFile(self: _PostItem) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: _PostItem) -> DateTime
        Set: ReminderTime(self: _PostItem) = value
        """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _PostItem) -> object
        Set: RTFBody(self: _PostItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _PostItem) -> bool """
        ...

    @property
    def SenderEmailAddress(self) -> str:
        """ Get: SenderEmailAddress(self: _PostItem) -> str """
        ...

    @property
    def SenderEmailType(self) -> str:
        """ Get: SenderEmailType(self: _PostItem) -> str """
        ...

    @property
    def SenderName(self) -> str:
        """ Get: SenderName(self: _PostItem) -> str """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _PostItem) -> OlSensitivity
        Set: Sensitivity(self: _PostItem) = value
        """
        ...

    @property
    def SentOn(self) -> DateTime:
        """ Get: SentOn(self: _PostItem) -> DateTime """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _PostItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _PostItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _PostItem) -> str
        Set: Subject(self: _PostItem) = value
        """
        ...

    @property
    def TaskCompletedDate(self) -> DateTime:
        """
        Get: TaskCompletedDate(self: _PostItem) -> DateTime
        Set: TaskCompletedDate(self: _PostItem) = value
        """
        ...

    @property
    def TaskDueDate(self) -> DateTime:
        """
        Get: TaskDueDate(self: _PostItem) -> DateTime
        Set: TaskDueDate(self: _PostItem) = value
        """
        ...

    @property
    def TaskStartDate(self) -> DateTime:
        """
        Get: TaskStartDate(self: _PostItem) -> DateTime
        Set: TaskStartDate(self: _PostItem) = value
        """
        ...

    @property
    def TaskSubject(self) -> str:
        """
        Get: TaskSubject(self: _PostItem) -> str
        Set: TaskSubject(self: _PostItem) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: _PostItem) -> DateTime
        Set: ToDoTaskOrdinal(self: _PostItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _PostItem) -> bool
        Set: UnRead(self: _PostItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _PostItem) -> UserProperties """
        ...


    def ClearConversationIndex(self): # -> 
        """ ClearConversationIndex(self: _PostItem) """
        ...

    def ClearTaskFlag(self): # -> 
        """ ClearTaskFlag(self: _PostItem) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _PostItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _PostItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _PostItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _PostItem, Modal: object) """
        ...

    def Forward(self) -> MailItem:
        """ Forward(self: _PostItem) -> MailItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _PostItem) -> Conversation """
        ...

    def MarkAsTask(self, MarkInterval:OlMarkInterval): # -> 
        """ MarkAsTask(self: _PostItem, MarkInterval: OlMarkInterval) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _PostItem, DestFldr: MAPIFolder) -> object """
        ...

    def Post(self): # -> 
        """ Post(self: _PostItem) """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _PostItem) """
        ...

    def Reply(self) -> MailItem:
        """ Reply(self: _PostItem) -> MailItem """
        ...

    def Save(self): # -> 
        """ Save(self: _PostItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _PostItem, Path: str, Type: object) """
        ...

    def SetACLs(self) -> bool:
        """ SetACLs(self: _PostItem) -> bool """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _PostItem) """
        ...


class PostItem(_PostItem, ItemEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class PostItemClass(ItemEvents_Event, PostItem, __ComObject): # skipped bases: <type 'ItemEvents_10_Event'>, <type '_PostItem'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: PostItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: PostItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: PostItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: PostItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: PostItemClass) -> str
        Set: BillingInformation(self: PostItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: PostItemClass) -> str
        Set: Body(self: PostItemClass) = value
        """
        ...

    @property
    def BodyFormat(self) -> OlBodyFormat:
        """
        Get: BodyFormat(self: PostItemClass) -> OlBodyFormat
        Set: BodyFormat(self: PostItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: PostItemClass) -> str
        Set: Categories(self: PostItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: PostItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: PostItemClass) -> str
        Set: Companies(self: PostItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: PostItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: PostItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: PostItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: PostItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: PostItemClass) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: PostItemClass) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: PostItemClass) -> str """
        ...

    @property
    def ExpiryTime(self) -> DateTime:
        """
        Get: ExpiryTime(self: PostItemClass) -> DateTime
        Set: ExpiryTime(self: PostItemClass) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: PostItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: PostItemClass) -> Inspector """
        ...

    @property
    def HTMLBody(self) -> str:
        """
        Get: HTMLBody(self: PostItemClass) -> str
        Set: HTMLBody(self: PostItemClass) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: PostItemClass) -> OlImportance
        Set: Importance(self: PostItemClass) = value
        """
        ...

    @property
    def InternetCodepage(self) -> int:
        """
        Get: InternetCodepage(self: PostItemClass) -> int
        Set: InternetCodepage(self: PostItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: PostItemClass) -> bool """
        ...

    @property
    def IsMarkedAsTask(self) -> bool:
        """ Get: IsMarkedAsTask(self: PostItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: PostItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: PostItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: PostItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: PostItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: PostItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: PostItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: PostItemClass) -> str
        Set: MessageClass(self: PostItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: PostItemClass) -> str
        Set: Mileage(self: PostItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: PostItemClass) -> bool
        Set: NoAging(self: PostItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: PostItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: PostItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PostItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: PostItemClass) -> PropertyAccessor """
        ...

    @property
    def ReceivedTime(self) -> DateTime:
        """ Get: ReceivedTime(self: PostItemClass) -> DateTime """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: PostItemClass) -> bool
        Set: ReminderOverrideDefault(self: PostItemClass) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: PostItemClass) -> bool
        Set: ReminderPlaySound(self: PostItemClass) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: PostItemClass) -> bool
        Set: ReminderSet(self: PostItemClass) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: PostItemClass) -> str
        Set: ReminderSoundFile(self: PostItemClass) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: PostItemClass) -> DateTime
        Set: ReminderTime(self: PostItemClass) = value
        """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: PostItemClass) -> object
        Set: RTFBody(self: PostItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: PostItemClass) -> bool """
        ...

    @property
    def SenderEmailAddress(self) -> str:
        """ Get: SenderEmailAddress(self: PostItemClass) -> str """
        ...

    @property
    def SenderEmailType(self) -> str:
        """ Get: SenderEmailType(self: PostItemClass) -> str """
        ...

    @property
    def SenderName(self) -> str:
        """ Get: SenderName(self: PostItemClass) -> str """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: PostItemClass) -> OlSensitivity
        Set: Sensitivity(self: PostItemClass) = value
        """
        ...

    @property
    def SentOn(self) -> DateTime:
        """ Get: SentOn(self: PostItemClass) -> DateTime """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: PostItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: PostItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: PostItemClass) -> str
        Set: Subject(self: PostItemClass) = value
        """
        ...

    @property
    def TaskCompletedDate(self) -> DateTime:
        """
        Get: TaskCompletedDate(self: PostItemClass) -> DateTime
        Set: TaskCompletedDate(self: PostItemClass) = value
        """
        ...

    @property
    def TaskDueDate(self) -> DateTime:
        """
        Get: TaskDueDate(self: PostItemClass) -> DateTime
        Set: TaskDueDate(self: PostItemClass) = value
        """
        ...

    @property
    def TaskStartDate(self) -> DateTime:
        """
        Get: TaskStartDate(self: PostItemClass) -> DateTime
        Set: TaskStartDate(self: PostItemClass) = value
        """
        ...

    @property
    def TaskSubject(self) -> str:
        """
        Get: TaskSubject(self: PostItemClass) -> str
        Set: TaskSubject(self: PostItemClass) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: PostItemClass) -> DateTime
        Set: ToDoTaskOrdinal(self: PostItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: PostItemClass) -> bool
        Set: UnRead(self: PostItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: PostItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: PostItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: PostItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: PostItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: PostItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: PostItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: PostItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: PostItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: PostItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: PostItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: PostItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: PostItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def ClearConversationIndex(self): # -> 
        """ ClearConversationIndex(self: PostItemClass) """
        ...

    def ClearTaskFlag(self): # -> 
        """ ClearTaskFlag(self: PostItemClass) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: PostItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: PostItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: PostItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: PostItemClass, Modal: object) """
        ...

    def Forward(self) -> MailItem:
        """ Forward(self: PostItemClass) -> MailItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: PostItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: PostItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: PostItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: PostItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: PostItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: PostItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: PostItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: PostItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: PostItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: PostItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: PostItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: PostItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: PostItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: PostItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: PostItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: PostItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: PostItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: PostItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: PostItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: PostItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: PostItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: PostItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: PostItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: PostItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: PostItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: PostItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: PostItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: PostItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: PostItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: PostItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: PostItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def MarkAsTask(self, MarkInterval:OlMarkInterval): # -> 
        """ MarkAsTask(self: PostItemClass, MarkInterval: OlMarkInterval) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: PostItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def Post(self): # -> 
        """ Post(self: PostItemClass) """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: PostItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: PostItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: PostItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: PostItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: PostItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: PostItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: PostItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: PostItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: PostItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: PostItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: PostItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: PostItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Reply(self) -> MailItem:
        """ Reply(self: PostItemClass) -> MailItem """
        ...

    def Save(self): # -> 
        """ Save(self: PostItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: PostItemClass, Path: str, Type: object) """
        ...

    def SetACLs(self) -> bool:
        """ SetACLs(self: PostItemClass) -> bool """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: PostItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_10_Event_Forward = ...
    ItemEvents_10_Event_Reply = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    ReplyAll = ...
    Send = ...
    Unload = ...
    Write = ...


class _PropertyAccessor: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _PropertyAccessor) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _PropertyAccessor) -> OlObjectClass """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _PropertyAccessor) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _PropertyAccessor) -> NameSpace """
        ...


    def BinaryToString(self, Value:object) -> str:
        """ BinaryToString(self: _PropertyAccessor, Value: object) -> str """
        ...

    def DeleteProperties(self, SchemaNames:object) -> Tuple_[object, object]:
        """ DeleteProperties(self: _PropertyAccessor, SchemaNames: object) -> (object, object) """
        ...

    def DeleteProperty(self, SchemaName:str): # -> 
        """ DeleteProperty(self: _PropertyAccessor, SchemaName: str) """
        ...

    def GetProperties(self, SchemaNames:object) -> object:
        """ GetProperties(self: _PropertyAccessor, SchemaNames: object) -> object """
        ...

    def GetProperty(self, SchemaName:str) -> object:
        """ GetProperty(self: _PropertyAccessor, SchemaName: str) -> object """
        ...

    def LocalTimeToUTC(self, Value:DateTime) -> DateTime:
        """ LocalTimeToUTC(self: _PropertyAccessor, Value: DateTime) -> DateTime """
        ...

    def SetProperties(self, SchemaNames:object, Values:object) -> object:
        """ SetProperties(self: _PropertyAccessor, SchemaNames: object, Values: object) -> object """
        ...

    def SetProperty(self, SchemaName:str, Value:object): # -> 
        """ SetProperty(self: _PropertyAccessor, SchemaName: str, Value: object) """
        ...

    def StringToBinary(self, Value:str) -> object:
        """ StringToBinary(self: _PropertyAccessor, Value: str) -> object """
        ...

    def UTCToLocalTime(self, Value:DateTime) -> DateTime:
        """ UTCToLocalTime(self: _PropertyAccessor, Value: DateTime) -> DateTime """
        ...


class PropertyAccessor(_PropertyAccessor): # skipped bases: <type 'object'>
    """ no doc """
    pass

class PropertyAccessorClass(PropertyAccessor, __ComObject): # skipped bases: <type '_PropertyAccessor'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PropertyAccessorClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: PropertyAccessorClass) -> OlObjectClass """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PropertyAccessorClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: PropertyAccessorClass) -> NameSpace """
        ...


    def BinaryToString(self, Value:object) -> str:
        """ BinaryToString(self: PropertyAccessorClass, Value: object) -> str """
        ...

    def DeleteProperties(self, SchemaNames:object) -> Tuple_[object, object]:
        """ DeleteProperties(self: PropertyAccessorClass, SchemaNames: object) -> (object, object) """
        ...

    def DeleteProperty(self, SchemaName:str): # -> 
        """ DeleteProperty(self: PropertyAccessorClass, SchemaName: str) """
        ...

    def GetProperties(self, SchemaNames:object) -> object:
        """ GetProperties(self: PropertyAccessorClass, SchemaNames: object) -> object """
        ...

    def GetProperty(self, SchemaName:str) -> object:
        """ GetProperty(self: PropertyAccessorClass, SchemaName: str) -> object """
        ...

    def LocalTimeToUTC(self, Value:DateTime) -> DateTime:
        """ LocalTimeToUTC(self: PropertyAccessorClass, Value: DateTime) -> DateTime """
        ...

    def SetProperties(self, SchemaNames:object, Values:object) -> object:
        """ SetProperties(self: PropertyAccessorClass, SchemaNames: object, Values: object) -> object """
        ...

    def SetProperty(self, SchemaName:str, Value:object): # -> 
        """ SetProperty(self: PropertyAccessorClass, SchemaName: str, Value: object) """
        ...

    def StringToBinary(self, Value:str) -> object:
        """ StringToBinary(self: PropertyAccessorClass, Value: str) -> object """
        ...

    def UTCToLocalTime(self, Value:DateTime) -> DateTime:
        """ UTCToLocalTime(self: PropertyAccessorClass, Value: DateTime) -> DateTime """
        ...


class PropertyPage: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Dirty(self) -> bool:
        """ Get: Dirty(self: PropertyPage) -> bool """
        ...


    def Apply(self): # -> 
        """ Apply(self: PropertyPage) """
        ...

    def GetPageInfo(self, HelpFile, HelpContext) -> Tuple_[str, int]:
        """ GetPageInfo(self: PropertyPage) -> (str, int) """
        ...


class PropertyPages(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PropertyPages) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: PropertyPages) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PropertyPages) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PropertyPages) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: PropertyPages) -> NameSpace """
        ...


    def Add(self, Page:object, Title:str): # -> 
        """ Add(self: PropertyPages, Page: object, Title: str) """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: PropertyPages, Index: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class PropertyPageSite: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PropertyPageSite) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: PropertyPageSite) -> OlObjectClass """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PropertyPageSite) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: PropertyPageSite) -> NameSpace """
        ...


    def OnStatusChange(self): # -> 
        """ OnStatusChange(self: PropertyPageSite) """
        ...


class Recipient: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Address(self) -> str:
        """ Get: Address(self: Recipient) -> str """
        ...

    @property
    def AddressEntry(self) -> AddressEntry:
        """
        Get: AddressEntry(self: Recipient) -> AddressEntry
        Set: AddressEntry(self: Recipient) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Recipient) -> Application """
        ...

    @property
    def AutoResponse(self) -> str:
        """
        Get: AutoResponse(self: Recipient) -> str
        Set: AutoResponse(self: Recipient) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Recipient) -> OlObjectClass """
        ...

    @property
    def DisplayType(self) -> OlDisplayType:
        """ Get: DisplayType(self: Recipient) -> OlDisplayType """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: Recipient) -> str """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Recipient) -> int """
        ...

    @property
    def MeetingResponseStatus(self) -> OlResponseStatus:
        """ Get: MeetingResponseStatus(self: Recipient) -> OlResponseStatus """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Recipient) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Recipient) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: Recipient) -> PropertyAccessor """
        ...

    @property
    def Resolved(self) -> bool:
        """ Get: Resolved(self: Recipient) -> bool """
        ...

    @property
    def Sendable(self) -> bool:
        """
        Get: Sendable(self: Recipient) -> bool
        Set: Sendable(self: Recipient) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Recipient) -> NameSpace """
        ...

    @property
    def TrackingStatus(self) -> OlTrackingStatus:
        """
        Get: TrackingStatus(self: Recipient) -> OlTrackingStatus
        Set: TrackingStatus(self: Recipient) = value
        """
        ...

    @property
    def TrackingStatusTime(self) -> DateTime:
        """
        Get: TrackingStatusTime(self: Recipient) -> DateTime
        Set: TrackingStatusTime(self: Recipient) = value
        """
        ...

    @property
    def Type(self) -> int:
        """
        Get: Type(self: Recipient) -> int
        Set: Type(self: Recipient) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: Recipient) """
        ...

    def FreeBusy(self, Start:DateTime, MinPerChar:int, CompleteFormat:object) -> str:
        """ FreeBusy(self: Recipient, Start: DateTime, MinPerChar: int, CompleteFormat: object) -> str """
        ...

    def Resolve(self) -> bool:
        """ Resolve(self: Recipient) -> bool """
        ...


class Recipients(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Recipients) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Recipients) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Recipients) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Recipients) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Recipients) -> NameSpace """
        ...


    def Add(self, Name:str) -> Recipient:
        """ Add(self: Recipients, Name: str) -> Recipient """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: Recipients, Index: int) """
        ...

    def ResolveAll(self) -> bool:
        """ ResolveAll(self: Recipients) -> bool """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class RecurrencePattern: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RecurrencePattern) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: RecurrencePattern) -> OlObjectClass """
        ...

    @property
    def DayOfMonth(self) -> int:
        """
        Get: DayOfMonth(self: RecurrencePattern) -> int
        Set: DayOfMonth(self: RecurrencePattern) = value
        """
        ...

    @property
    def DayOfWeekMask(self) -> OlDaysOfWeek:
        """
        Get: DayOfWeekMask(self: RecurrencePattern) -> OlDaysOfWeek
        Set: DayOfWeekMask(self: RecurrencePattern) = value
        """
        ...

    @property
    def Duration(self) -> int:
        """
        Get: Duration(self: RecurrencePattern) -> int
        Set: Duration(self: RecurrencePattern) = value
        """
        ...

    @property
    def EndTime(self) -> DateTime:
        """
        Get: EndTime(self: RecurrencePattern) -> DateTime
        Set: EndTime(self: RecurrencePattern) = value
        """
        ...

    @property
    def Exceptions(self) -> Exceptions:
        """ Get: Exceptions(self: RecurrencePattern) -> Exceptions """
        ...

    @property
    def Instance(self) -> int:
        """
        Get: Instance(self: RecurrencePattern) -> int
        Set: Instance(self: RecurrencePattern) = value
        """
        ...

    @property
    def Interval(self) -> int:
        """
        Get: Interval(self: RecurrencePattern) -> int
        Set: Interval(self: RecurrencePattern) = value
        """
        ...

    @property
    def MonthOfYear(self) -> int:
        """
        Get: MonthOfYear(self: RecurrencePattern) -> int
        Set: MonthOfYear(self: RecurrencePattern) = value
        """
        ...

    @property
    def NoEndDate(self) -> bool:
        """
        Get: NoEndDate(self: RecurrencePattern) -> bool
        Set: NoEndDate(self: RecurrencePattern) = value
        """
        ...

    @property
    def Occurrences(self) -> int:
        """
        Get: Occurrences(self: RecurrencePattern) -> int
        Set: Occurrences(self: RecurrencePattern) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RecurrencePattern) -> object """
        ...

    @property
    def PatternEndDate(self) -> DateTime:
        """
        Get: PatternEndDate(self: RecurrencePattern) -> DateTime
        Set: PatternEndDate(self: RecurrencePattern) = value
        """
        ...

    @property
    def PatternStartDate(self) -> DateTime:
        """
        Get: PatternStartDate(self: RecurrencePattern) -> DateTime
        Set: PatternStartDate(self: RecurrencePattern) = value
        """
        ...

    @property
    def RecurrenceType(self) -> OlRecurrenceType:
        """
        Get: RecurrenceType(self: RecurrencePattern) -> OlRecurrenceType
        Set: RecurrenceType(self: RecurrencePattern) = value
        """
        ...

    @property
    def Regenerate(self) -> bool:
        """
        Get: Regenerate(self: RecurrencePattern) -> bool
        Set: Regenerate(self: RecurrencePattern) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: RecurrencePattern) -> NameSpace """
        ...

    @property
    def StartTime(self) -> DateTime:
        """
        Get: StartTime(self: RecurrencePattern) -> DateTime
        Set: StartTime(self: RecurrencePattern) = value
        """
        ...


    def GetOccurrence(self, StartDate:DateTime) -> AppointmentItem:
        """ GetOccurrence(self: RecurrencePattern, StartDate: DateTime) -> AppointmentItem """
        ...


class _Reminder: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Reminder) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """ Get: Caption(self: _Reminder) -> str """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Reminder) -> OlObjectClass """
        ...

    @property
    def IsVisible(self) -> bool:
        """ Get: IsVisible(self: _Reminder) -> bool """
        ...

    @property
    def Item(self) -> object:
        """ Get: Item(self: _Reminder) -> object """
        ...

    @property
    def NextReminderDate(self) -> DateTime:
        """ Get: NextReminderDate(self: _Reminder) -> DateTime """
        ...

    @property
    def OriginalReminderDate(self) -> DateTime:
        """ Get: OriginalReminderDate(self: _Reminder) -> DateTime """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Reminder) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Reminder) -> NameSpace """
        ...


    def Dismiss(self): # -> 
        """ Dismiss(self: _Reminder) """
        ...

    def Snooze(self, SnoozeTime:object): # -> 
        """ Snooze(self: _Reminder, SnoozeTime: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Reminder(_Reminder): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ReminderClass(Reminder, __ComObject): # skipped bases: <type '_Reminder'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ReminderClass) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """ Get: Caption(self: ReminderClass) -> str """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ReminderClass) -> OlObjectClass """
        ...

    @property
    def IsVisible(self) -> bool:
        """ Get: IsVisible(self: ReminderClass) -> bool """
        ...

    @property
    def Item(self) -> object:
        """ Get: Item(self: ReminderClass) -> object """
        ...

    @property
    def NextReminderDate(self) -> DateTime:
        """ Get: NextReminderDate(self: ReminderClass) -> DateTime """
        ...

    @property
    def OriginalReminderDate(self) -> DateTime:
        """ Get: OriginalReminderDate(self: ReminderClass) -> DateTime """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ReminderClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ReminderClass) -> NameSpace """
        ...


    def Dismiss(self): # -> 
        """ Dismiss(self: ReminderClass) """
        ...

    def Snooze(self, SnoozeTime:object): # -> 
        """ Snooze(self: ReminderClass, SnoozeTime: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ReminderCollectionEvents: # skipped bases: <type 'object'>
    """ no doc """
    def BeforeReminderShow(self, Cancel) -> bool:
        """ BeforeReminderShow(self: ReminderCollectionEvents) -> bool """
        ...

    def ReminderAdd(self, ReminderObject:Reminder): # -> 
        """ ReminderAdd(self: ReminderCollectionEvents, ReminderObject: Reminder) """
        ...

    def ReminderChange(self, ReminderObject:Reminder): # -> 
        """ ReminderChange(self: ReminderCollectionEvents, ReminderObject: Reminder) """
        ...

    def ReminderFire(self, ReminderObject:Reminder): # -> 
        """ ReminderFire(self: ReminderCollectionEvents, ReminderObject: Reminder) """
        ...

    def ReminderRemove(self): # -> 
        """ ReminderRemove(self: ReminderCollectionEvents) """
        ...

    def Snooze(self, ReminderObject:Reminder): # -> 
        """ Snooze(self: ReminderCollectionEvents, ReminderObject: Reminder) """
        ...


class ReminderCollectionEvents_BeforeReminderShowEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ReminderCollectionEvents_BeforeReminderShowEventHandler(: object, : UIntPtr) """
    def Invoke(self, Cancel) -> bool:
        """ Invoke(self: ReminderCollectionEvents_BeforeReminderShowEventHandler) -> bool """
        ...


class ReminderCollectionEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_BeforeReminderShow(self): # -> 
        """ add_BeforeReminderShow(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_BeforeReminderShowEventHandler) """
        ...

    def add_ReminderAdd(self): # -> 
        """ add_ReminderAdd(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_ReminderAddEventHandler) """
        ...

    def add_ReminderChange(self): # -> 
        """ add_ReminderChange(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_ReminderChangeEventHandler) """
        ...

    def add_ReminderFire(self): # -> 
        """ add_ReminderFire(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_ReminderFireEventHandler) """
        ...

    def add_ReminderRemove(self): # -> 
        """ add_ReminderRemove(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_ReminderRemoveEventHandler) """
        ...

    def add_Snooze(self): # -> 
        """ add_Snooze(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_SnoozeEventHandler) """
        ...

    def remove_BeforeReminderShow(self): # -> 
        """ remove_BeforeReminderShow(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_BeforeReminderShowEventHandler) """
        ...

    def remove_ReminderAdd(self): # -> 
        """ remove_ReminderAdd(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_ReminderAddEventHandler) """
        ...

    def remove_ReminderChange(self): # -> 
        """ remove_ReminderChange(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_ReminderChangeEventHandler) """
        ...

    def remove_ReminderFire(self): # -> 
        """ remove_ReminderFire(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_ReminderFireEventHandler) """
        ...

    def remove_ReminderRemove(self): # -> 
        """ remove_ReminderRemove(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_ReminderRemoveEventHandler) """
        ...

    def remove_Snooze(self): # -> 
        """ remove_Snooze(self: ReminderCollectionEvents_Event, : ReminderCollectionEvents_SnoozeEventHandler) """
        ...

    BeforeReminderShow = ...
    ReminderAdd = ...
    ReminderChange = ...
    ReminderFire = ...
    ReminderRemove = ...
    Snooze = ...


class ReminderCollectionEvents_ReminderAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ReminderCollectionEvents_ReminderAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, ReminderObject:Reminder): # -> 
        """ Invoke(self: ReminderCollectionEvents_ReminderAddEventHandler, ReminderObject: Reminder) """
        ...


class ReminderCollectionEvents_ReminderChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ReminderCollectionEvents_ReminderChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, ReminderObject:Reminder): # -> 
        """ Invoke(self: ReminderCollectionEvents_ReminderChangeEventHandler, ReminderObject: Reminder) """
        ...


class ReminderCollectionEvents_ReminderFireEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ReminderCollectionEvents_ReminderFireEventHandler(: object, : UIntPtr) """
    def Invoke(self, ReminderObject:Reminder): # -> 
        """ Invoke(self: ReminderCollectionEvents_ReminderFireEventHandler, ReminderObject: Reminder) """
        ...


class ReminderCollectionEvents_ReminderRemoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ReminderCollectionEvents_ReminderRemoveEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ReminderCollectionEvents_ReminderRemoveEventHandler) """
        ...


class ReminderCollectionEvents_SinkHelper(ReminderCollectionEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_BeforeReminderShowDelegate = ...
    m_dwCookie = ...
    m_ReminderAddDelegate = ...
    m_ReminderChangeDelegate = ...
    m_ReminderFireDelegate = ...
    m_ReminderRemoveDelegate = ...
    m_SnoozeDelegate = ...


class ReminderCollectionEvents_SnoozeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ReminderCollectionEvents_SnoozeEventHandler(: object, : UIntPtr) """
    def Invoke(self, ReminderObject:Reminder): # -> 
        """ Invoke(self: ReminderCollectionEvents_SnoozeEventHandler, ReminderObject: Reminder) """
        ...


class _Reminders(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Reminders) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Reminders) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Reminders) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Reminders) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Reminders) -> NameSpace """
        ...


    def Remove(self, Index:object): # -> 
        """ Remove(self: _Reminders, Index: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Reminders(_Reminders, ReminderCollectionEvents_Event): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class RemindersClass(Reminders, __ComObject): # skipped bases: <type 'ReminderCollectionEvents_Event'>, <type 'IEnumerable'>, <type '_Reminders'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RemindersClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: RemindersClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: RemindersClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RemindersClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: RemindersClass) -> NameSpace """
        ...


    def add_BeforeReminderShow(self): # -> 
        """ add_BeforeReminderShow(self: RemindersClass, : ReminderCollectionEvents_BeforeReminderShowEventHandler) """
        ...

    def add_ReminderAdd(self): # -> 
        """ add_ReminderAdd(self: RemindersClass, : ReminderCollectionEvents_ReminderAddEventHandler) """
        ...

    def add_ReminderChange(self): # -> 
        """ add_ReminderChange(self: RemindersClass, : ReminderCollectionEvents_ReminderChangeEventHandler) """
        ...

    def add_ReminderFire(self): # -> 
        """ add_ReminderFire(self: RemindersClass, : ReminderCollectionEvents_ReminderFireEventHandler) """
        ...

    def add_ReminderRemove(self): # -> 
        """ add_ReminderRemove(self: RemindersClass, : ReminderCollectionEvents_ReminderRemoveEventHandler) """
        ...

    def add_Snooze(self): # -> 
        """ add_Snooze(self: RemindersClass, : ReminderCollectionEvents_SnoozeEventHandler) """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: RemindersClass) -> IEnumerator """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: RemindersClass, Index: object) """
        ...

    def remove_BeforeReminderShow(self): # -> 
        """ remove_BeforeReminderShow(self: RemindersClass, : ReminderCollectionEvents_BeforeReminderShowEventHandler) """
        ...

    def remove_ReminderAdd(self): # -> 
        """ remove_ReminderAdd(self: RemindersClass, : ReminderCollectionEvents_ReminderAddEventHandler) """
        ...

    def remove_ReminderChange(self): # -> 
        """ remove_ReminderChange(self: RemindersClass, : ReminderCollectionEvents_ReminderChangeEventHandler) """
        ...

    def remove_ReminderFire(self): # -> 
        """ remove_ReminderFire(self: RemindersClass, : ReminderCollectionEvents_ReminderFireEventHandler) """
        ...

    def remove_ReminderRemove(self): # -> 
        """ remove_ReminderRemove(self: RemindersClass, : ReminderCollectionEvents_ReminderRemoveEventHandler) """
        ...

    def remove_Snooze(self): # -> 
        """ remove_Snooze(self: RemindersClass, : ReminderCollectionEvents_SnoozeEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BeforeReminderShow = ...
    ReminderAdd = ...
    ReminderChange = ...
    ReminderFire = ...
    ReminderRemove = ...
    Snooze = ...


class _RemoteItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _RemoteItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _RemoteItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _RemoteItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _RemoteItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _RemoteItem) -> str
        Set: BillingInformation(self: _RemoteItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _RemoteItem) -> str
        Set: Body(self: _RemoteItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _RemoteItem) -> str
        Set: Categories(self: _RemoteItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _RemoteItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _RemoteItem) -> str
        Set: Companies(self: _RemoteItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _RemoteItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _RemoteItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _RemoteItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _RemoteItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _RemoteItem) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _RemoteItem) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _RemoteItem) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _RemoteItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _RemoteItem) -> Inspector """
        ...

    @property
    def HasAttachment(self) -> bool:
        """ Get: HasAttachment(self: _RemoteItem) -> bool """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _RemoteItem) -> OlImportance
        Set: Importance(self: _RemoteItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _RemoteItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _RemoteItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _RemoteItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _RemoteItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _RemoteItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _RemoteItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _RemoteItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _RemoteItem) -> str
        Set: MessageClass(self: _RemoteItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _RemoteItem) -> str
        Set: Mileage(self: _RemoteItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _RemoteItem) -> bool
        Set: NoAging(self: _RemoteItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _RemoteItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _RemoteItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _RemoteItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _RemoteItem) -> PropertyAccessor """
        ...

    @property
    def RemoteMessageClass(self) -> str:
        """ Get: RemoteMessageClass(self: _RemoteItem) -> str """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _RemoteItem) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _RemoteItem) -> OlSensitivity
        Set: Sensitivity(self: _RemoteItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _RemoteItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _RemoteItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _RemoteItem) -> str
        Set: Subject(self: _RemoteItem) = value
        """
        ...

    @property
    def TransferSize(self) -> int:
        """ Get: TransferSize(self: _RemoteItem) -> int """
        ...

    @property
    def TransferTime(self) -> int:
        """ Get: TransferTime(self: _RemoteItem) -> int """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _RemoteItem) -> bool
        Set: UnRead(self: _RemoteItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _RemoteItem) -> UserProperties """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _RemoteItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _RemoteItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _RemoteItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _RemoteItem, Modal: object) """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _RemoteItem) -> Conversation """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _RemoteItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _RemoteItem) """
        ...

    def Save(self): # -> 
        """ Save(self: _RemoteItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _RemoteItem, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _RemoteItem) """
        ...


class RemoteItem(ItemEvents_10_Event, _RemoteItem): # skipped bases: <type 'object'>
    """ no doc """
    pass

class RemoteItemClass(RemoteItem, ItemEvents_Event, __ComObject): # skipped bases: <type '_RemoteItem'>, <type 'ItemEvents_10_Event'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: RemoteItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: RemoteItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: RemoteItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: RemoteItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: RemoteItemClass) -> str
        Set: BillingInformation(self: RemoteItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: RemoteItemClass) -> str
        Set: Body(self: RemoteItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: RemoteItemClass) -> str
        Set: Categories(self: RemoteItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: RemoteItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: RemoteItemClass) -> str
        Set: Companies(self: RemoteItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: RemoteItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: RemoteItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: RemoteItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: RemoteItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: RemoteItemClass) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: RemoteItemClass) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: RemoteItemClass) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: RemoteItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: RemoteItemClass) -> Inspector """
        ...

    @property
    def HasAttachment(self) -> bool:
        """ Get: HasAttachment(self: RemoteItemClass) -> bool """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: RemoteItemClass) -> OlImportance
        Set: Importance(self: RemoteItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: RemoteItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: RemoteItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: RemoteItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: RemoteItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: RemoteItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: RemoteItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: RemoteItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: RemoteItemClass) -> str
        Set: MessageClass(self: RemoteItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: RemoteItemClass) -> str
        Set: Mileage(self: RemoteItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: RemoteItemClass) -> bool
        Set: NoAging(self: RemoteItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: RemoteItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: RemoteItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RemoteItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: RemoteItemClass) -> PropertyAccessor """
        ...

    @property
    def RemoteMessageClass(self) -> str:
        """ Get: RemoteMessageClass(self: RemoteItemClass) -> str """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: RemoteItemClass) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: RemoteItemClass) -> OlSensitivity
        Set: Sensitivity(self: RemoteItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: RemoteItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: RemoteItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: RemoteItemClass) -> str
        Set: Subject(self: RemoteItemClass) = value
        """
        ...

    @property
    def TransferSize(self) -> int:
        """ Get: TransferSize(self: RemoteItemClass) -> int """
        ...

    @property
    def TransferTime(self) -> int:
        """ Get: TransferTime(self: RemoteItemClass) -> int """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: RemoteItemClass) -> bool
        Set: UnRead(self: RemoteItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: RemoteItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: RemoteItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: RemoteItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: RemoteItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: RemoteItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: RemoteItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: RemoteItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: RemoteItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: RemoteItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: RemoteItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: RemoteItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: RemoteItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: RemoteItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: RemoteItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: RemoteItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: RemoteItemClass, Modal: object) """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: RemoteItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: RemoteItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: RemoteItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: RemoteItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: RemoteItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: RemoteItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: RemoteItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: RemoteItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: RemoteItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: RemoteItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: RemoteItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: RemoteItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: RemoteItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: RemoteItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: RemoteItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: RemoteItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: RemoteItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: RemoteItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: RemoteItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: RemoteItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: RemoteItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: RemoteItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: RemoteItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: RemoteItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: RemoteItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: RemoteItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: RemoteItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: RemoteItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: RemoteItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: RemoteItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: RemoteItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: RemoteItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: RemoteItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: RemoteItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: RemoteItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: RemoteItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: RemoteItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: RemoteItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: RemoteItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: RemoteItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: RemoteItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: RemoteItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: RemoteItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: RemoteItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Save(self): # -> 
        """ Save(self: RemoteItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: RemoteItemClass, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: RemoteItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Send = ...
    Unload = ...
    Write = ...


class _ReportItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _ReportItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ReportItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _ReportItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _ReportItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _ReportItem) -> str
        Set: BillingInformation(self: _ReportItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _ReportItem) -> str
        Set: Body(self: _ReportItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _ReportItem) -> str
        Set: Categories(self: _ReportItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ReportItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _ReportItem) -> str
        Set: Companies(self: _ReportItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _ReportItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _ReportItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _ReportItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _ReportItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _ReportItem) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _ReportItem) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _ReportItem) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _ReportItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _ReportItem) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _ReportItem) -> OlImportance
        Set: Importance(self: _ReportItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _ReportItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _ReportItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _ReportItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _ReportItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _ReportItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _ReportItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _ReportItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _ReportItem) -> str
        Set: MessageClass(self: _ReportItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _ReportItem) -> str
        Set: Mileage(self: _ReportItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _ReportItem) -> bool
        Set: NoAging(self: _ReportItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _ReportItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _ReportItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ReportItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _ReportItem) -> PropertyAccessor """
        ...

    @property
    def RetentionExpirationDate(self) -> DateTime:
        """ Get: RetentionExpirationDate(self: _ReportItem) -> DateTime """
        ...

    @property
    def RetentionPolicyName(self) -> str:
        """ Get: RetentionPolicyName(self: _ReportItem) -> str """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _ReportItem) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _ReportItem) -> OlSensitivity
        Set: Sensitivity(self: _ReportItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ReportItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _ReportItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _ReportItem) -> str
        Set: Subject(self: _ReportItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _ReportItem) -> bool
        Set: UnRead(self: _ReportItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _ReportItem) -> UserProperties """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _ReportItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _ReportItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _ReportItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _ReportItem, Modal: object) """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _ReportItem) -> Conversation """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _ReportItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _ReportItem) """
        ...

    def Save(self): # -> 
        """ Save(self: _ReportItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _ReportItem, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _ReportItem) """
        ...


class ReportItem(_ReportItem, ItemEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ReportItemClass(ItemEvents_Event, ReportItem, __ComObject): # skipped bases: <type 'ItemEvents_10_Event'>, <type '_ReportItem'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: ReportItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ReportItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: ReportItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: ReportItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: ReportItemClass) -> str
        Set: BillingInformation(self: ReportItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: ReportItemClass) -> str
        Set: Body(self: ReportItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: ReportItemClass) -> str
        Set: Categories(self: ReportItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ReportItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: ReportItemClass) -> str
        Set: Companies(self: ReportItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: ReportItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: ReportItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: ReportItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: ReportItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: ReportItemClass) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: ReportItemClass) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: ReportItemClass) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: ReportItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: ReportItemClass) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: ReportItemClass) -> OlImportance
        Set: Importance(self: ReportItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: ReportItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: ReportItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: ReportItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: ReportItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: ReportItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: ReportItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: ReportItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: ReportItemClass) -> str
        Set: MessageClass(self: ReportItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: ReportItemClass) -> str
        Set: Mileage(self: ReportItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: ReportItemClass) -> bool
        Set: NoAging(self: ReportItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: ReportItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: ReportItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ReportItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: ReportItemClass) -> PropertyAccessor """
        ...

    @property
    def RetentionExpirationDate(self) -> DateTime:
        """ Get: RetentionExpirationDate(self: ReportItemClass) -> DateTime """
        ...

    @property
    def RetentionPolicyName(self) -> str:
        """ Get: RetentionPolicyName(self: ReportItemClass) -> str """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: ReportItemClass) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: ReportItemClass) -> OlSensitivity
        Set: Sensitivity(self: ReportItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ReportItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: ReportItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: ReportItemClass) -> str
        Set: Subject(self: ReportItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: ReportItemClass) -> bool
        Set: UnRead(self: ReportItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: ReportItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: ReportItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: ReportItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: ReportItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: ReportItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: ReportItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: ReportItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: ReportItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: ReportItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: ReportItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: ReportItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: ReportItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: ReportItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: ReportItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: ReportItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: ReportItemClass, Modal: object) """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: ReportItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: ReportItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: ReportItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: ReportItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: ReportItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: ReportItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: ReportItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: ReportItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: ReportItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: ReportItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: ReportItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: ReportItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: ReportItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: ReportItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: ReportItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: ReportItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: ReportItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: ReportItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: ReportItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: ReportItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: ReportItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: ReportItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: ReportItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: ReportItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: ReportItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: ReportItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: ReportItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: ReportItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: ReportItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: ReportItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: ReportItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: ReportItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: ReportItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: ReportItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: ReportItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: ReportItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: ReportItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: ReportItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: ReportItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: ReportItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: ReportItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: ReportItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: ReportItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: ReportItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Save(self): # -> 
        """ Save(self: ReportItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: ReportItemClass, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: ReportItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Send = ...
    Unload = ...
    Write = ...


class ResultsEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_ItemAdd(self): # -> 
        """ add_ItemAdd(self: ResultsEvents_Event, : ResultsEvents_ItemAddEventHandler) """
        ...

    def add_ItemChange(self): # -> 
        """ add_ItemChange(self: ResultsEvents_Event, : ResultsEvents_ItemChangeEventHandler) """
        ...

    def add_ItemRemove(self): # -> 
        """ add_ItemRemove(self: ResultsEvents_Event, : ResultsEvents_ItemRemoveEventHandler) """
        ...

    def remove_ItemAdd(self): # -> 
        """ remove_ItemAdd(self: ResultsEvents_Event, : ResultsEvents_ItemAddEventHandler) """
        ...

    def remove_ItemChange(self): # -> 
        """ remove_ItemChange(self: ResultsEvents_Event, : ResultsEvents_ItemChangeEventHandler) """
        ...

    def remove_ItemRemove(self): # -> 
        """ remove_ItemRemove(self: ResultsEvents_Event, : ResultsEvents_ItemRemoveEventHandler) """
        ...

    ItemAdd = ...
    ItemChange = ...
    ItemRemove = ...


class _Results(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Results) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Results) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Results) -> int """
        ...

    @property
    def DefaultItemType(self) -> OlItemType:
        """
        Get: DefaultItemType(self: _Results) -> OlItemType
        Set: DefaultItemType(self: _Results) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Results) -> object """
        ...

    @property
    def RawTable(self) -> object:
        """ Get: RawTable(self: _Results) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Results) -> NameSpace """
        ...


    def GetFirst(self) -> object:
        """ GetFirst(self: _Results) -> object """
        ...

    def GetLast(self) -> object:
        """ GetLast(self: _Results) -> object """
        ...

    def GetNext(self) -> object:
        """ GetNext(self: _Results) -> object """
        ...

    def GetPrevious(self) -> object:
        """ GetPrevious(self: _Results) -> object """
        ...

    def ResetColumns(self): # -> 
        """ ResetColumns(self: _Results) """
        ...

    def SetColumns(self, Columns:str): # -> 
        """ SetColumns(self: _Results, Columns: str) """
        ...

    def Sort(self, Property:str, Descending:object): # -> 
        """ Sort(self: _Results, Property: str, Descending: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Results(_Results, ResultsEvents_Event): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class ResultsClass(Results, __ComObject): # skipped bases: <type '_Results'>, <type 'IEnumerable'>, <type 'ResultsEvents_Event'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ResultsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ResultsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ResultsClass) -> int """
        ...

    @property
    def DefaultItemType(self) -> OlItemType:
        """
        Get: DefaultItemType(self: ResultsClass) -> OlItemType
        Set: DefaultItemType(self: ResultsClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ResultsClass) -> object """
        ...

    @property
    def RawTable(self) -> object:
        """ Get: RawTable(self: ResultsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ResultsClass) -> NameSpace """
        ...


    def add_ItemAdd(self): # -> 
        """ add_ItemAdd(self: ResultsClass, : ResultsEvents_ItemAddEventHandler) """
        ...

    def add_ItemChange(self): # -> 
        """ add_ItemChange(self: ResultsClass, : ResultsEvents_ItemChangeEventHandler) """
        ...

    def add_ItemRemove(self): # -> 
        """ add_ItemRemove(self: ResultsClass, : ResultsEvents_ItemRemoveEventHandler) """
        ...

    def GetFirst(self) -> object:
        """ GetFirst(self: ResultsClass) -> object """
        ...

    def GetLast(self) -> object:
        """ GetLast(self: ResultsClass) -> object """
        ...

    def GetNext(self) -> object:
        """ GetNext(self: ResultsClass) -> object """
        ...

    def GetPrevious(self) -> object:
        """ GetPrevious(self: ResultsClass) -> object """
        ...

    def remove_ItemAdd(self): # -> 
        """ remove_ItemAdd(self: ResultsClass, : ResultsEvents_ItemAddEventHandler) """
        ...

    def remove_ItemChange(self): # -> 
        """ remove_ItemChange(self: ResultsClass, : ResultsEvents_ItemChangeEventHandler) """
        ...

    def remove_ItemRemove(self): # -> 
        """ remove_ItemRemove(self: ResultsClass, : ResultsEvents_ItemRemoveEventHandler) """
        ...

    def ResetColumns(self): # -> 
        """ ResetColumns(self: ResultsClass) """
        ...

    def SetColumns(self, Columns:str): # -> 
        """ SetColumns(self: ResultsClass, Columns: str) """
        ...

    def Sort(self, Property:str, Descending:object): # -> 
        """ Sort(self: ResultsClass, Property: str, Descending: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    ItemAdd = ...
    ItemChange = ...
    ItemRemove = ...


class ResultsEvents: # skipped bases: <type 'object'>
    """ no doc """
    def ItemAdd(self, Item:object): # -> 
        """ ItemAdd(self: ResultsEvents, Item: object) """
        ...

    def ItemChange(self, Item:object): # -> 
        """ ItemChange(self: ResultsEvents, Item: object) """
        ...

    def ItemRemove(self): # -> 
        """ ItemRemove(self: ResultsEvents) """
        ...


class ResultsEvents_ItemAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ResultsEvents_ItemAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item:object): # -> 
        """ Invoke(self: ResultsEvents_ItemAddEventHandler, Item: object) """
        ...


class ResultsEvents_ItemChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ResultsEvents_ItemChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Item:object): # -> 
        """ Invoke(self: ResultsEvents_ItemChangeEventHandler, Item: object) """
        ...


class ResultsEvents_ItemRemoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ResultsEvents_ItemRemoveEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ResultsEvents_ItemRemoveEventHandler) """
        ...


class ResultsEvents_SinkHelper(ResultsEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_ItemAddDelegate = ...
    m_ItemChangeDelegate = ...
    m_ItemRemoveDelegate = ...


class _Row: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Row) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Row) -> OlObjectClass """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Row) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Row) -> NameSpace """
        ...


    def BinaryToString(self, Index:object) -> str:
        """ BinaryToString(self: _Row, Index: object) -> str """
        ...

    def GetValues(self) -> object:
        """ GetValues(self: _Row) -> object """
        ...

    def LocalTimeToUTC(self, Index:object) -> DateTime:
        """ LocalTimeToUTC(self: _Row, Index: object) -> DateTime """
        ...

    def UTCToLocalTime(self, Index:object) -> DateTime:
        """ UTCToLocalTime(self: _Row, Index: object) -> DateTime """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Row(_Row): # skipped bases: <type 'object'>
    """ no doc """
    pass

class RowClass(Row, __ComObject): # skipped bases: <type '_Row'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RowClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: RowClass) -> OlObjectClass """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RowClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: RowClass) -> NameSpace """
        ...


    def BinaryToString(self, Index:object) -> str:
        """ BinaryToString(self: RowClass, Index: object) -> str """
        ...

    def GetValues(self) -> object:
        """ GetValues(self: RowClass) -> object """
        ...

    def LocalTimeToUTC(self, Index:object) -> DateTime:
        """ LocalTimeToUTC(self: RowClass, Index: object) -> DateTime """
        ...

    def UTCToLocalTime(self, Index:object) -> DateTime:
        """ UTCToLocalTime(self: RowClass, Index: object) -> DateTime """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _Rule: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> RuleActions:
        """ Get: Actions(self: _Rule) -> RuleActions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Rule) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Rule) -> OlObjectClass """
        ...

    @property
    def Conditions(self) -> RuleConditions:
        """ Get: Conditions(self: _Rule) -> RuleConditions """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _Rule) -> bool
        Set: Enabled(self: _Rule) = value
        """
        ...

    @property
    def Exceptions(self) -> RuleConditions:
        """ Get: Exceptions(self: _Rule) -> RuleConditions """
        ...

    @property
    def ExecutionOrder(self) -> int:
        """
        Get: ExecutionOrder(self: _Rule) -> int
        Set: ExecutionOrder(self: _Rule) = value
        """
        ...

    @property
    def IsLocalRule(self) -> bool:
        """ Get: IsLocalRule(self: _Rule) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _Rule) -> str
        Set: Name(self: _Rule) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Rule) -> object """
        ...

    @property
    def RuleType(self) -> OlRuleType:
        """ Get: RuleType(self: _Rule) -> OlRuleType """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Rule) -> NameSpace """
        ...


    def Execute(self, ShowProgress:object, Folder:object, IncludeSubfolders:object, RuleExecuteOption:object): # -> 
        """ Execute(self: _Rule, ShowProgress: object, Folder: object, IncludeSubfolders: object, RuleExecuteOption: object) """
        ...


class Rule(_Rule): # skipped bases: <type 'object'>
    """ no doc """
    pass

class _RuleAction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: _RuleAction) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _RuleAction) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _RuleAction) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _RuleAction) -> bool
        Set: Enabled(self: _RuleAction) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _RuleAction) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _RuleAction) -> NameSpace """
        ...



class RuleAction(_RuleAction): # skipped bases: <type 'object'>
    """ no doc """
    pass

class RuleActionClass(__ComObject, RuleAction): # skipped bases: <type '_RuleAction'>, <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: RuleActionClass) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: RuleActionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: RuleActionClass) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: RuleActionClass) -> bool
        Set: Enabled(self: RuleActionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RuleActionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: RuleActionClass) -> NameSpace """
        ...



class _RuleActions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _RuleActions) -> Application """
        ...

    @property
    def AssignToCategory(self) -> AssignToCategoryRuleAction:
        """ Get: AssignToCategory(self: _RuleActions) -> AssignToCategoryRuleAction """
        ...

    @property
    def CC(self) -> SendRuleAction:
        """ Get: CC(self: _RuleActions) -> SendRuleAction """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _RuleActions) -> OlObjectClass """
        ...

    @property
    def ClearCategories(self) -> RuleAction:
        """ Get: ClearCategories(self: _RuleActions) -> RuleAction """
        ...

    @property
    def CopyToFolder(self) -> MoveOrCopyRuleAction:
        """ Get: CopyToFolder(self: _RuleActions) -> MoveOrCopyRuleAction """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _RuleActions) -> int """
        ...

    @property
    def Delete(self) -> RuleAction:
        """ Get: Delete(self: _RuleActions) -> RuleAction """
        ...

    @property
    def DeletePermanently(self) -> RuleAction:
        """ Get: DeletePermanently(self: _RuleActions) -> RuleAction """
        ...

    @property
    def DesktopAlert(self) -> RuleAction:
        """ Get: DesktopAlert(self: _RuleActions) -> RuleAction """
        ...

    @property
    def Forward(self) -> SendRuleAction:
        """ Get: Forward(self: _RuleActions) -> SendRuleAction """
        ...

    @property
    def ForwardAsAttachment(self) -> SendRuleAction:
        """ Get: ForwardAsAttachment(self: _RuleActions) -> SendRuleAction """
        ...

    @property
    def MarkAsTask(self) -> MarkAsTaskRuleAction:
        """ Get: MarkAsTask(self: _RuleActions) -> MarkAsTaskRuleAction """
        ...

    @property
    def MoveToFolder(self) -> MoveOrCopyRuleAction:
        """ Get: MoveToFolder(self: _RuleActions) -> MoveOrCopyRuleAction """
        ...

    @property
    def NewItemAlert(self) -> NewItemAlertRuleAction:
        """ Get: NewItemAlert(self: _RuleActions) -> NewItemAlertRuleAction """
        ...

    @property
    def NotifyDelivery(self) -> RuleAction:
        """ Get: NotifyDelivery(self: _RuleActions) -> RuleAction """
        ...

    @property
    def NotifyRead(self) -> RuleAction:
        """ Get: NotifyRead(self: _RuleActions) -> RuleAction """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _RuleActions) -> object """
        ...

    @property
    def PlaySound(self) -> PlaySoundRuleAction:
        """ Get: PlaySound(self: _RuleActions) -> PlaySoundRuleAction """
        ...

    @property
    def Redirect(self) -> SendRuleAction:
        """ Get: Redirect(self: _RuleActions) -> SendRuleAction """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _RuleActions) -> NameSpace """
        ...

    @property
    def Stop(self) -> RuleAction:
        """ Get: Stop(self: _RuleActions) -> RuleAction """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class RuleActions(_RuleActions): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class RuleActionsClass(__ComObject, RuleActions): # skipped bases: <type 'IEnumerable'>, <type '_RuleActions'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RuleActionsClass) -> Application """
        ...

    @property
    def AssignToCategory(self) -> AssignToCategoryRuleAction:
        """ Get: AssignToCategory(self: RuleActionsClass) -> AssignToCategoryRuleAction """
        ...

    @property
    def CC(self) -> SendRuleAction:
        """ Get: CC(self: RuleActionsClass) -> SendRuleAction """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: RuleActionsClass) -> OlObjectClass """
        ...

    @property
    def ClearCategories(self) -> RuleAction:
        """ Get: ClearCategories(self: RuleActionsClass) -> RuleAction """
        ...

    @property
    def CopyToFolder(self) -> MoveOrCopyRuleAction:
        """ Get: CopyToFolder(self: RuleActionsClass) -> MoveOrCopyRuleAction """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: RuleActionsClass) -> int """
        ...

    @property
    def Delete(self) -> RuleAction:
        """ Get: Delete(self: RuleActionsClass) -> RuleAction """
        ...

    @property
    def DeletePermanently(self) -> RuleAction:
        """ Get: DeletePermanently(self: RuleActionsClass) -> RuleAction """
        ...

    @property
    def DesktopAlert(self) -> RuleAction:
        """ Get: DesktopAlert(self: RuleActionsClass) -> RuleAction """
        ...

    @property
    def Forward(self) -> SendRuleAction:
        """ Get: Forward(self: RuleActionsClass) -> SendRuleAction """
        ...

    @property
    def ForwardAsAttachment(self) -> SendRuleAction:
        """ Get: ForwardAsAttachment(self: RuleActionsClass) -> SendRuleAction """
        ...

    @property
    def MarkAsTask(self) -> MarkAsTaskRuleAction:
        """ Get: MarkAsTask(self: RuleActionsClass) -> MarkAsTaskRuleAction """
        ...

    @property
    def MoveToFolder(self) -> MoveOrCopyRuleAction:
        """ Get: MoveToFolder(self: RuleActionsClass) -> MoveOrCopyRuleAction """
        ...

    @property
    def NewItemAlert(self) -> NewItemAlertRuleAction:
        """ Get: NewItemAlert(self: RuleActionsClass) -> NewItemAlertRuleAction """
        ...

    @property
    def NotifyDelivery(self) -> RuleAction:
        """ Get: NotifyDelivery(self: RuleActionsClass) -> RuleAction """
        ...

    @property
    def NotifyRead(self) -> RuleAction:
        """ Get: NotifyRead(self: RuleActionsClass) -> RuleAction """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RuleActionsClass) -> object """
        ...

    @property
    def PlaySound(self) -> PlaySoundRuleAction:
        """ Get: PlaySound(self: RuleActionsClass) -> PlaySoundRuleAction """
        ...

    @property
    def Redirect(self) -> SendRuleAction:
        """ Get: Redirect(self: RuleActionsClass) -> SendRuleAction """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: RuleActionsClass) -> NameSpace """
        ...

    @property
    def Stop(self) -> RuleAction:
        """ Get: Stop(self: RuleActionsClass) -> RuleAction """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class RuleClass(Rule, __ComObject): # skipped bases: <type '_Rule'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> RuleActions:
        """ Get: Actions(self: RuleClass) -> RuleActions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: RuleClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: RuleClass) -> OlObjectClass """
        ...

    @property
    def Conditions(self) -> RuleConditions:
        """ Get: Conditions(self: RuleClass) -> RuleConditions """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: RuleClass) -> bool
        Set: Enabled(self: RuleClass) = value
        """
        ...

    @property
    def Exceptions(self) -> RuleConditions:
        """ Get: Exceptions(self: RuleClass) -> RuleConditions """
        ...

    @property
    def ExecutionOrder(self) -> int:
        """
        Get: ExecutionOrder(self: RuleClass) -> int
        Set: ExecutionOrder(self: RuleClass) = value
        """
        ...

    @property
    def IsLocalRule(self) -> bool:
        """ Get: IsLocalRule(self: RuleClass) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: RuleClass) -> str
        Set: Name(self: RuleClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RuleClass) -> object """
        ...

    @property
    def RuleType(self) -> OlRuleType:
        """ Get: RuleType(self: RuleClass) -> OlRuleType """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: RuleClass) -> NameSpace """
        ...


    def Execute(self, ShowProgress:object, Folder:object, IncludeSubfolders:object, RuleExecuteOption:object): # -> 
        """ Execute(self: RuleClass, ShowProgress: object, Folder: object, IncludeSubfolders: object, RuleExecuteOption: object) """
        ...


class _RuleCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _RuleCondition) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _RuleCondition) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: _RuleCondition) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _RuleCondition) -> bool
        Set: Enabled(self: _RuleCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _RuleCondition) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _RuleCondition) -> NameSpace """
        ...



class RuleCondition(_RuleCondition): # skipped bases: <type 'object'>
    """ no doc """
    pass

class RuleConditionClass(RuleCondition, __ComObject): # skipped bases: <type '_RuleCondition'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RuleConditionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: RuleConditionClass) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: RuleConditionClass) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: RuleConditionClass) -> bool
        Set: Enabled(self: RuleConditionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RuleConditionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: RuleConditionClass) -> NameSpace """
        ...



class _RuleConditions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Account(self) -> AccountRuleCondition:
        """ Get: Account(self: _RuleConditions) -> AccountRuleCondition """
        ...

    @property
    def AnyCategory(self) -> RuleCondition:
        """ Get: AnyCategory(self: _RuleConditions) -> RuleCondition """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _RuleConditions) -> Application """
        ...

    @property
    def Body(self) -> TextRuleCondition:
        """ Get: Body(self: _RuleConditions) -> TextRuleCondition """
        ...

    @property
    def BodyOrSubject(self) -> TextRuleCondition:
        """ Get: BodyOrSubject(self: _RuleConditions) -> TextRuleCondition """
        ...

    @property
    def Category(self) -> CategoryRuleCondition:
        """ Get: Category(self: _RuleConditions) -> CategoryRuleCondition """
        ...

    @property
    def CC(self) -> RuleCondition:
        """ Get: CC(self: _RuleConditions) -> RuleCondition """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _RuleConditions) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _RuleConditions) -> int """
        ...

    @property
    def FormName(self) -> FormNameRuleCondition:
        """ Get: FormName(self: _RuleConditions) -> FormNameRuleCondition """
        ...

    @property
    def From(self) -> ToOrFromRuleCondition:
        """ Get: From(self: _RuleConditions) -> ToOrFromRuleCondition """
        ...

    @property
    def FromAnyRSSFeed(self) -> RuleCondition:
        """ Get: FromAnyRSSFeed(self: _RuleConditions) -> RuleCondition """
        ...

    @property
    def FromRssFeed(self) -> FromRssFeedRuleCondition:
        """ Get: FromRssFeed(self: _RuleConditions) -> FromRssFeedRuleCondition """
        ...

    @property
    def HasAttachment(self) -> RuleCondition:
        """ Get: HasAttachment(self: _RuleConditions) -> RuleCondition """
        ...

    @property
    def Importance(self) -> ImportanceRuleCondition:
        """ Get: Importance(self: _RuleConditions) -> ImportanceRuleCondition """
        ...

    @property
    def MeetingInviteOrUpdate(self) -> RuleCondition:
        """ Get: MeetingInviteOrUpdate(self: _RuleConditions) -> RuleCondition """
        ...

    @property
    def MessageHeader(self) -> TextRuleCondition:
        """ Get: MessageHeader(self: _RuleConditions) -> TextRuleCondition """
        ...

    @property
    def NotTo(self) -> RuleCondition:
        """ Get: NotTo(self: _RuleConditions) -> RuleCondition """
        ...

    @property
    def OnLocalMachine(self) -> RuleCondition:
        """ Get: OnLocalMachine(self: _RuleConditions) -> RuleCondition """
        ...

    @property
    def OnlyToMe(self) -> RuleCondition:
        """ Get: OnlyToMe(self: _RuleConditions) -> RuleCondition """
        ...

    @property
    def OnOtherMachine(self) -> RuleCondition:
        """ Get: OnOtherMachine(self: _RuleConditions) -> RuleCondition """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _RuleConditions) -> object """
        ...

    @property
    def RecipientAddress(self) -> AddressRuleCondition:
        """ Get: RecipientAddress(self: _RuleConditions) -> AddressRuleCondition """
        ...

    @property
    def SenderAddress(self) -> AddressRuleCondition:
        """ Get: SenderAddress(self: _RuleConditions) -> AddressRuleCondition """
        ...

    @property
    def SenderInAddressList(self) -> SenderInAddressListRuleCondition:
        """ Get: SenderInAddressList(self: _RuleConditions) -> SenderInAddressListRuleCondition """
        ...

    @property
    def SentTo(self) -> ToOrFromRuleCondition:
        """ Get: SentTo(self: _RuleConditions) -> ToOrFromRuleCondition """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _RuleConditions) -> NameSpace """
        ...

    @property
    def Subject(self) -> TextRuleCondition:
        """ Get: Subject(self: _RuleConditions) -> TextRuleCondition """
        ...

    @property
    def ToMe(self) -> RuleCondition:
        """ Get: ToMe(self: _RuleConditions) -> RuleCondition """
        ...

    @property
    def ToOrCc(self) -> RuleCondition:
        """ Get: ToOrCc(self: _RuleConditions) -> RuleCondition """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class RuleConditions(_RuleConditions): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class RuleConditionsClass(__ComObject, RuleConditions): # skipped bases: <type '_RuleConditions'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def Account(self) -> AccountRuleCondition:
        """ Get: Account(self: RuleConditionsClass) -> AccountRuleCondition """
        ...

    @property
    def AnyCategory(self) -> RuleCondition:
        """ Get: AnyCategory(self: RuleConditionsClass) -> RuleCondition """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: RuleConditionsClass) -> Application """
        ...

    @property
    def Body(self) -> TextRuleCondition:
        """ Get: Body(self: RuleConditionsClass) -> TextRuleCondition """
        ...

    @property
    def BodyOrSubject(self) -> TextRuleCondition:
        """ Get: BodyOrSubject(self: RuleConditionsClass) -> TextRuleCondition """
        ...

    @property
    def Category(self) -> CategoryRuleCondition:
        """ Get: Category(self: RuleConditionsClass) -> CategoryRuleCondition """
        ...

    @property
    def CC(self) -> RuleCondition:
        """ Get: CC(self: RuleConditionsClass) -> RuleCondition """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: RuleConditionsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: RuleConditionsClass) -> int """
        ...

    @property
    def FormName(self) -> FormNameRuleCondition:
        """ Get: FormName(self: RuleConditionsClass) -> FormNameRuleCondition """
        ...

    @property
    def From(self) -> ToOrFromRuleCondition:
        """ Get: From(self: RuleConditionsClass) -> ToOrFromRuleCondition """
        ...

    @property
    def FromAnyRSSFeed(self) -> RuleCondition:
        """ Get: FromAnyRSSFeed(self: RuleConditionsClass) -> RuleCondition """
        ...

    @property
    def FromRssFeed(self) -> FromRssFeedRuleCondition:
        """ Get: FromRssFeed(self: RuleConditionsClass) -> FromRssFeedRuleCondition """
        ...

    @property
    def HasAttachment(self) -> RuleCondition:
        """ Get: HasAttachment(self: RuleConditionsClass) -> RuleCondition """
        ...

    @property
    def Importance(self) -> ImportanceRuleCondition:
        """ Get: Importance(self: RuleConditionsClass) -> ImportanceRuleCondition """
        ...

    @property
    def MeetingInviteOrUpdate(self) -> RuleCondition:
        """ Get: MeetingInviteOrUpdate(self: RuleConditionsClass) -> RuleCondition """
        ...

    @property
    def MessageHeader(self) -> TextRuleCondition:
        """ Get: MessageHeader(self: RuleConditionsClass) -> TextRuleCondition """
        ...

    @property
    def NotTo(self) -> RuleCondition:
        """ Get: NotTo(self: RuleConditionsClass) -> RuleCondition """
        ...

    @property
    def OnLocalMachine(self) -> RuleCondition:
        """ Get: OnLocalMachine(self: RuleConditionsClass) -> RuleCondition """
        ...

    @property
    def OnlyToMe(self) -> RuleCondition:
        """ Get: OnlyToMe(self: RuleConditionsClass) -> RuleCondition """
        ...

    @property
    def OnOtherMachine(self) -> RuleCondition:
        """ Get: OnOtherMachine(self: RuleConditionsClass) -> RuleCondition """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RuleConditionsClass) -> object """
        ...

    @property
    def RecipientAddress(self) -> AddressRuleCondition:
        """ Get: RecipientAddress(self: RuleConditionsClass) -> AddressRuleCondition """
        ...

    @property
    def SenderAddress(self) -> AddressRuleCondition:
        """ Get: SenderAddress(self: RuleConditionsClass) -> AddressRuleCondition """
        ...

    @property
    def SenderInAddressList(self) -> SenderInAddressListRuleCondition:
        """ Get: SenderInAddressList(self: RuleConditionsClass) -> SenderInAddressListRuleCondition """
        ...

    @property
    def SentTo(self) -> ToOrFromRuleCondition:
        """ Get: SentTo(self: RuleConditionsClass) -> ToOrFromRuleCondition """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: RuleConditionsClass) -> NameSpace """
        ...

    @property
    def Subject(self) -> TextRuleCondition:
        """ Get: Subject(self: RuleConditionsClass) -> TextRuleCondition """
        ...

    @property
    def ToMe(self) -> RuleCondition:
        """ Get: ToMe(self: RuleConditionsClass) -> RuleCondition """
        ...

    @property
    def ToOrCc(self) -> RuleCondition:
        """ Get: ToOrCc(self: RuleConditionsClass) -> RuleCondition """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _Rules(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Rules) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Rules) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Rules) -> int """
        ...

    @property
    def IsRssRulesProcessingEnabled(self) -> bool:
        """
        Get: IsRssRulesProcessingEnabled(self: _Rules) -> bool
        Set: IsRssRulesProcessingEnabled(self: _Rules) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Rules) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Rules) -> NameSpace """
        ...


    def Create(self, Name:str, RuleType:OlRuleType) -> Rule:
        """ Create(self: _Rules, Name: str, RuleType: OlRuleType) -> Rule """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: _Rules, Index: object) """
        ...

    def Save(self, ShowProgress:object): # -> 
        """ Save(self: _Rules, ShowProgress: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Rules(_Rules): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class RulesClass(Rules, __ComObject): # skipped bases: <type 'IEnumerable'>, <type '_Rules'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RulesClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: RulesClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: RulesClass) -> int """
        ...

    @property
    def IsRssRulesProcessingEnabled(self) -> bool:
        """
        Get: IsRssRulesProcessingEnabled(self: RulesClass) -> bool
        Set: IsRssRulesProcessingEnabled(self: RulesClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RulesClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: RulesClass) -> NameSpace """
        ...


    def Create(self, Name:str, RuleType:OlRuleType) -> Rule:
        """ Create(self: RulesClass, Name: str, RuleType: OlRuleType) -> Rule """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: RulesClass, Index: object) """
        ...

    def Save(self, ShowProgress:object): # -> 
        """ Save(self: RulesClass, ShowProgress: object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Search: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Search) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Search) -> OlObjectClass """
        ...

    @property
    def Filter(self) -> str:
        """ Get: Filter(self: Search) -> str """
        ...

    @property
    def IsSynchronous(self) -> bool:
        """ Get: IsSynchronous(self: Search) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Search) -> object """
        ...

    @property
    def Results(self) -> Results:
        """ Get: Results(self: Search) -> Results """
        ...

    @property
    def Scope(self) -> str:
        """ Get: Scope(self: Search) -> str """
        ...

    @property
    def SearchSubFolders(self) -> bool:
        """ Get: SearchSubFolders(self: Search) -> bool """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Search) -> NameSpace """
        ...

    @property
    def Tag(self) -> str:
        """ Get: Tag(self: Search) -> str """
        ...


    def GetTable(self) -> Table:
        """ GetTable(self: Search) -> Table """
        ...

    def Save(self, Name:str) -> MAPIFolder:
        """ Save(self: Search, Name: str) -> MAPIFolder """
        ...

    def Stop(self): # -> 
        """ Stop(self: Search) """
        ...


class Selection(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Selection) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: Selection) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Selection) -> int """
        ...

    @property
    def Location(self) -> OlSelectionLocation:
        """ Get: Location(self: Selection) -> OlSelectionLocation """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Selection) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: Selection) -> NameSpace """
        ...


    def GetSelection(self, SelectionContents:OlSelectionContents) -> Selection:
        """ GetSelection(self: Selection, SelectionContents: OlSelectionContents) -> Selection """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _SelectNamesDialog: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowMultipleSelection(self) -> bool:
        """
        Get: AllowMultipleSelection(self: _SelectNamesDialog) -> bool
        Set: AllowMultipleSelection(self: _SelectNamesDialog) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _SelectNamesDialog) -> Application """
        ...

    @property
    def BccLabel(self) -> str:
        """
        Get: BccLabel(self: _SelectNamesDialog) -> str
        Set: BccLabel(self: _SelectNamesDialog) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: _SelectNamesDialog) -> str
        Set: Caption(self: _SelectNamesDialog) = value
        """
        ...

    @property
    def CcLabel(self) -> str:
        """
        Get: CcLabel(self: _SelectNamesDialog) -> str
        Set: CcLabel(self: _SelectNamesDialog) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _SelectNamesDialog) -> OlObjectClass """
        ...

    @property
    def ForceResolution(self) -> bool:
        """
        Get: ForceResolution(self: _SelectNamesDialog) -> bool
        Set: ForceResolution(self: _SelectNamesDialog) = value
        """
        ...

    @property
    def InitialAddressList(self) -> AddressList:
        """
        Get: InitialAddressList(self: _SelectNamesDialog) -> AddressList
        Set: InitialAddressList(self: _SelectNamesDialog) = value
        """
        ...

    @property
    def NumberOfRecipientSelectors(self) -> OlRecipientSelectors:
        """
        Get: NumberOfRecipientSelectors(self: _SelectNamesDialog) -> OlRecipientSelectors
        Set: NumberOfRecipientSelectors(self: _SelectNamesDialog) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _SelectNamesDialog) -> object """
        ...

    @property
    def Recipients(self) -> Recipients:
        """
        Get: Recipients(self: _SelectNamesDialog) -> Recipients
        Set: Recipients(self: _SelectNamesDialog) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _SelectNamesDialog) -> NameSpace """
        ...

    @property
    def ShowOnlyInitialAddressList(self) -> bool:
        """
        Get: ShowOnlyInitialAddressList(self: _SelectNamesDialog) -> bool
        Set: ShowOnlyInitialAddressList(self: _SelectNamesDialog) = value
        """
        ...

    @property
    def ToLabel(self) -> str:
        """
        Get: ToLabel(self: _SelectNamesDialog) -> str
        Set: ToLabel(self: _SelectNamesDialog) = value
        """
        ...


    def Display(self) -> bool:
        """ Display(self: _SelectNamesDialog) -> bool """
        ...

    def SetDefaultDisplayMode(self, defaultMode:OlDefaultSelectNamesDisplayMode): # -> 
        """ SetDefaultDisplayMode(self: _SelectNamesDialog, defaultMode: OlDefaultSelectNamesDisplayMode) """
        ...


class SelectNamesDialog(_SelectNamesDialog): # skipped bases: <type 'object'>
    """ no doc """
    pass

class SelectNamesDialogClass(__ComObject, SelectNamesDialog): # skipped bases: <type '_SelectNamesDialog'>, <type 'object'>
    """ no doc """
    @property
    def AllowMultipleSelection(self) -> bool:
        """
        Get: AllowMultipleSelection(self: SelectNamesDialogClass) -> bool
        Set: AllowMultipleSelection(self: SelectNamesDialogClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: SelectNamesDialogClass) -> Application """
        ...

    @property
    def BccLabel(self) -> str:
        """
        Get: BccLabel(self: SelectNamesDialogClass) -> str
        Set: BccLabel(self: SelectNamesDialogClass) = value
        """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: SelectNamesDialogClass) -> str
        Set: Caption(self: SelectNamesDialogClass) = value
        """
        ...

    @property
    def CcLabel(self) -> str:
        """
        Get: CcLabel(self: SelectNamesDialogClass) -> str
        Set: CcLabel(self: SelectNamesDialogClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: SelectNamesDialogClass) -> OlObjectClass """
        ...

    @property
    def ForceResolution(self) -> bool:
        """
        Get: ForceResolution(self: SelectNamesDialogClass) -> bool
        Set: ForceResolution(self: SelectNamesDialogClass) = value
        """
        ...

    @property
    def InitialAddressList(self) -> AddressList:
        """
        Get: InitialAddressList(self: SelectNamesDialogClass) -> AddressList
        Set: InitialAddressList(self: SelectNamesDialogClass) = value
        """
        ...

    @property
    def NumberOfRecipientSelectors(self) -> OlRecipientSelectors:
        """
        Get: NumberOfRecipientSelectors(self: SelectNamesDialogClass) -> OlRecipientSelectors
        Set: NumberOfRecipientSelectors(self: SelectNamesDialogClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SelectNamesDialogClass) -> object """
        ...

    @property
    def Recipients(self) -> Recipients:
        """
        Get: Recipients(self: SelectNamesDialogClass) -> Recipients
        Set: Recipients(self: SelectNamesDialogClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: SelectNamesDialogClass) -> NameSpace """
        ...

    @property
    def ShowOnlyInitialAddressList(self) -> bool:
        """
        Get: ShowOnlyInitialAddressList(self: SelectNamesDialogClass) -> bool
        Set: ShowOnlyInitialAddressList(self: SelectNamesDialogClass) = value
        """
        ...

    @property
    def ToLabel(self) -> str:
        """
        Get: ToLabel(self: SelectNamesDialogClass) -> str
        Set: ToLabel(self: SelectNamesDialogClass) = value
        """
        ...


    def Display(self) -> bool:
        """ Display(self: SelectNamesDialogClass) -> bool """
        ...

    def SetDefaultDisplayMode(self, defaultMode:OlDefaultSelectNamesDisplayMode): # -> 
        """ SetDefaultDisplayMode(self: SelectNamesDialogClass, defaultMode: OlDefaultSelectNamesDisplayMode) """
        ...


class _SenderInAddressListRuleCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddressList(self) -> AddressList:
        """
        Get: AddressList(self: _SenderInAddressListRuleCondition) -> AddressList
        Set: AddressList(self: _SenderInAddressListRuleCondition) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _SenderInAddressListRuleCondition) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _SenderInAddressListRuleCondition) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: _SenderInAddressListRuleCondition) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _SenderInAddressListRuleCondition) -> bool
        Set: Enabled(self: _SenderInAddressListRuleCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _SenderInAddressListRuleCondition) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _SenderInAddressListRuleCondition) -> NameSpace """
        ...



class SenderInAddressListRuleCondition(_SenderInAddressListRuleCondition): # skipped bases: <type 'object'>
    """ no doc """
    pass

class SenderInAddressListRuleConditionClass(SenderInAddressListRuleCondition, __ComObject): # skipped bases: <type '_SenderInAddressListRuleCondition'>, <type 'object'>
    """ no doc """
    @property
    def AddressList(self) -> AddressList:
        """
        Get: AddressList(self: SenderInAddressListRuleConditionClass) -> AddressList
        Set: AddressList(self: SenderInAddressListRuleConditionClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: SenderInAddressListRuleConditionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: SenderInAddressListRuleConditionClass) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: SenderInAddressListRuleConditionClass) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: SenderInAddressListRuleConditionClass) -> bool
        Set: Enabled(self: SenderInAddressListRuleConditionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SenderInAddressListRuleConditionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: SenderInAddressListRuleConditionClass) -> NameSpace """
        ...



class _SendRuleAction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: _SendRuleAction) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _SendRuleAction) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _SendRuleAction) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _SendRuleAction) -> bool
        Set: Enabled(self: _SendRuleAction) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _SendRuleAction) -> object """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: _SendRuleAction) -> Recipients """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _SendRuleAction) -> NameSpace """
        ...



class SendRuleAction(_SendRuleAction): # skipped bases: <type 'object'>
    """ no doc """
    pass

class SendRuleActionClass(SendRuleAction, __ComObject): # skipped bases: <type '_SendRuleAction'>, <type 'object'>
    """ no doc """
    @property
    def ActionType(self) -> OlRuleActionType:
        """ Get: ActionType(self: SendRuleActionClass) -> OlRuleActionType """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: SendRuleActionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: SendRuleActionClass) -> OlObjectClass """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: SendRuleActionClass) -> bool
        Set: Enabled(self: SendRuleActionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SendRuleActionClass) -> object """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: SendRuleActionClass) -> Recipients """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: SendRuleActionClass) -> NameSpace """
        ...



class _SharingItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _SharingItem) -> Actions """
        ...

    @property
    def AllowWriteAccess(self) -> bool:
        """
        Get: AllowWriteAccess(self: _SharingItem) -> bool
        Set: AllowWriteAccess(self: _SharingItem) = value
        """
        ...

    @property
    def AlternateRecipientAllowed(self) -> bool:
        """
        Get: AlternateRecipientAllowed(self: _SharingItem) -> bool
        Set: AlternateRecipientAllowed(self: _SharingItem) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _SharingItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _SharingItem) -> Attachments """
        ...

    @property
    def AutoForwarded(self) -> bool:
        """
        Get: AutoForwarded(self: _SharingItem) -> bool
        Set: AutoForwarded(self: _SharingItem) = value
        """
        ...

    @property
    def BCC(self) -> str:
        """
        Get: BCC(self: _SharingItem) -> str
        Set: BCC(self: _SharingItem) = value
        """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _SharingItem) -> str
        Set: BillingInformation(self: _SharingItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _SharingItem) -> str
        Set: Body(self: _SharingItem) = value
        """
        ...

    @property
    def BodyFormat(self) -> OlBodyFormat:
        """
        Get: BodyFormat(self: _SharingItem) -> OlBodyFormat
        Set: BodyFormat(self: _SharingItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _SharingItem) -> str
        Set: Categories(self: _SharingItem) = value
        """
        ...

    @property
    def CC(self) -> str:
        """
        Get: CC(self: _SharingItem) -> str
        Set: CC(self: _SharingItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _SharingItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _SharingItem) -> str
        Set: Companies(self: _SharingItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _SharingItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _SharingItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _SharingItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _SharingItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _SharingItem) -> DateTime """
        ...

    @property
    def DeferredDeliveryTime(self) -> DateTime:
        """
        Get: DeferredDeliveryTime(self: _SharingItem) -> DateTime
        Set: DeferredDeliveryTime(self: _SharingItem) = value
        """
        ...

    @property
    def DeleteAfterSubmit(self) -> bool:
        """
        Get: DeleteAfterSubmit(self: _SharingItem) -> bool
        Set: DeleteAfterSubmit(self: _SharingItem) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _SharingItem) -> OlDownloadState """
        ...

    @property
    def EnableSharedAttachments(self) -> bool:
        """
        Get: EnableSharedAttachments(self: _SharingItem) -> bool
        Set: EnableSharedAttachments(self: _SharingItem) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _SharingItem) -> str """
        ...

    @property
    def ExpiryTime(self) -> DateTime:
        """
        Get: ExpiryTime(self: _SharingItem) -> DateTime
        Set: ExpiryTime(self: _SharingItem) = value
        """
        ...

    @property
    def FlagDueBy(self) -> DateTime:
        """
        Get: FlagDueBy(self: _SharingItem) -> DateTime
        Set: FlagDueBy(self: _SharingItem) = value
        """
        ...

    @property
    def FlagIcon(self) -> OlFlagIcon:
        """
        Get: FlagIcon(self: _SharingItem) -> OlFlagIcon
        Set: FlagIcon(self: _SharingItem) = value
        """
        ...

    @property
    def FlagRequest(self) -> str:
        """
        Get: FlagRequest(self: _SharingItem) -> str
        Set: FlagRequest(self: _SharingItem) = value
        """
        ...

    @property
    def FlagStatus(self) -> OlFlagStatus:
        """
        Get: FlagStatus(self: _SharingItem) -> OlFlagStatus
        Set: FlagStatus(self: _SharingItem) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _SharingItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _SharingItem) -> Inspector """
        ...

    @property
    def HTMLBody(self) -> str:
        """
        Get: HTMLBody(self: _SharingItem) -> str
        Set: HTMLBody(self: _SharingItem) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _SharingItem) -> OlImportance
        Set: Importance(self: _SharingItem) = value
        """
        ...

    @property
    def InternetCodepage(self) -> int:
        """
        Get: InternetCodepage(self: _SharingItem) -> int
        Set: InternetCodepage(self: _SharingItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _SharingItem) -> bool """
        ...

    @property
    def IsMarkedAsTask(self) -> bool:
        """ Get: IsMarkedAsTask(self: _SharingItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _SharingItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _SharingItem) -> DateTime """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _SharingItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _SharingItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _SharingItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _SharingItem) -> str
        Set: MessageClass(self: _SharingItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _SharingItem) -> str
        Set: Mileage(self: _SharingItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _SharingItem) -> bool
        Set: NoAging(self: _SharingItem) = value
        """
        ...

    @property
    def OriginatorDeliveryReportRequested(self) -> bool:
        """
        Get: OriginatorDeliveryReportRequested(self: _SharingItem) -> bool
        Set: OriginatorDeliveryReportRequested(self: _SharingItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _SharingItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _SharingItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _SharingItem) -> object """
        ...

    @property
    def Permission(self) -> OlPermission:
        """
        Get: Permission(self: _SharingItem) -> OlPermission
        Set: Permission(self: _SharingItem) = value
        """
        ...

    @property
    def PermissionService(self) -> OlPermissionService:
        """
        Get: PermissionService(self: _SharingItem) -> OlPermissionService
        Set: PermissionService(self: _SharingItem) = value
        """
        ...

    @property
    def PermissionTemplateGuid(self) -> str:
        """
        Get: PermissionTemplateGuid(self: _SharingItem) -> str
        Set: PermissionTemplateGuid(self: _SharingItem) = value
        """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _SharingItem) -> PropertyAccessor """
        ...

    @property
    def ReadReceiptRequested(self) -> bool:
        """
        Get: ReadReceiptRequested(self: _SharingItem) -> bool
        Set: ReadReceiptRequested(self: _SharingItem) = value
        """
        ...

    @property
    def ReceivedByEntryID(self) -> str:
        """ Get: ReceivedByEntryID(self: _SharingItem) -> str """
        ...

    @property
    def ReceivedByName(self) -> str:
        """ Get: ReceivedByName(self: _SharingItem) -> str """
        ...

    @property
    def ReceivedOnBehalfOfEntryID(self) -> str:
        """ Get: ReceivedOnBehalfOfEntryID(self: _SharingItem) -> str """
        ...

    @property
    def ReceivedOnBehalfOfName(self) -> str:
        """ Get: ReceivedOnBehalfOfName(self: _SharingItem) -> str """
        ...

    @property
    def ReceivedTime(self) -> DateTime:
        """ Get: ReceivedTime(self: _SharingItem) -> DateTime """
        ...

    @property
    def RecipientReassignmentProhibited(self) -> bool:
        """
        Get: RecipientReassignmentProhibited(self: _SharingItem) -> bool
        Set: RecipientReassignmentProhibited(self: _SharingItem) = value
        """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: _SharingItem) -> Recipients """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: _SharingItem) -> bool
        Set: ReminderOverrideDefault(self: _SharingItem) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: _SharingItem) -> bool
        Set: ReminderPlaySound(self: _SharingItem) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: _SharingItem) -> bool
        Set: ReminderSet(self: _SharingItem) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: _SharingItem) -> str
        Set: ReminderSoundFile(self: _SharingItem) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: _SharingItem) -> DateTime
        Set: ReminderTime(self: _SharingItem) = value
        """
        ...

    @property
    def RemoteID(self) -> str:
        """ Get: RemoteID(self: _SharingItem) -> str """
        ...

    @property
    def RemoteName(self) -> str:
        """ Get: RemoteName(self: _SharingItem) -> str """
        ...

    @property
    def RemotePath(self) -> str:
        """ Get: RemotePath(self: _SharingItem) -> str """
        ...

    @property
    def RemoteStatus(self) -> OlRemoteStatus:
        """
        Get: RemoteStatus(self: _SharingItem) -> OlRemoteStatus
        Set: RemoteStatus(self: _SharingItem) = value
        """
        ...

    @property
    def ReplyRecipientNames(self) -> str:
        """ Get: ReplyRecipientNames(self: _SharingItem) -> str """
        ...

    @property
    def ReplyRecipients(self) -> Recipients:
        """ Get: ReplyRecipients(self: _SharingItem) -> Recipients """
        ...

    @property
    def RequestedFolder(self) -> OlDefaultFolders:
        """ Get: RequestedFolder(self: _SharingItem) -> OlDefaultFolders """
        ...

    @property
    def RetentionExpirationDate(self) -> DateTime:
        """ Get: RetentionExpirationDate(self: _SharingItem) -> DateTime """
        ...

    @property
    def RetentionPolicyName(self) -> str:
        """ Get: RetentionPolicyName(self: _SharingItem) -> str """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _SharingItem) -> object
        Set: RTFBody(self: _SharingItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _SharingItem) -> bool """
        ...

    @property
    def SaveSentMessageFolder(self) -> MAPIFolder:
        """
        Get: SaveSentMessageFolder(self: _SharingItem) -> MAPIFolder
        Set: SaveSentMessageFolder(self: _SharingItem) = value
        """
        ...

    @property
    def SenderEmailAddress(self) -> str:
        """ Get: SenderEmailAddress(self: _SharingItem) -> str """
        ...

    @property
    def SenderEmailType(self) -> str:
        """ Get: SenderEmailType(self: _SharingItem) -> str """
        ...

    @property
    def SenderName(self) -> str:
        """ Get: SenderName(self: _SharingItem) -> str """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: _SharingItem) -> Account
        Set: SendUsingAccount(self: _SharingItem) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _SharingItem) -> OlSensitivity
        Set: Sensitivity(self: _SharingItem) = value
        """
        ...

    @property
    def Sent(self) -> bool:
        """ Get: Sent(self: _SharingItem) -> bool """
        ...

    @property
    def SentOn(self) -> DateTime:
        """ Get: SentOn(self: _SharingItem) -> DateTime """
        ...

    @property
    def SentOnBehalfOfName(self) -> str:
        """
        Get: SentOnBehalfOfName(self: _SharingItem) -> str
        Set: SentOnBehalfOfName(self: _SharingItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _SharingItem) -> NameSpace """
        ...

    @property
    def SharingProvider(self) -> OlSharingProvider:
        """ Get: SharingProvider(self: _SharingItem) -> OlSharingProvider """
        ...

    @property
    def SharingProviderGuid(self) -> str:
        """ Get: SharingProviderGuid(self: _SharingItem) -> str """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _SharingItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _SharingItem) -> str
        Set: Subject(self: _SharingItem) = value
        """
        ...

    @property
    def Submitted(self) -> bool:
        """ Get: Submitted(self: _SharingItem) -> bool """
        ...

    @property
    def TaskCompletedDate(self) -> DateTime:
        """
        Get: TaskCompletedDate(self: _SharingItem) -> DateTime
        Set: TaskCompletedDate(self: _SharingItem) = value
        """
        ...

    @property
    def TaskDueDate(self) -> DateTime:
        """
        Get: TaskDueDate(self: _SharingItem) -> DateTime
        Set: TaskDueDate(self: _SharingItem) = value
        """
        ...

    @property
    def TaskStartDate(self) -> DateTime:
        """
        Get: TaskStartDate(self: _SharingItem) -> DateTime
        Set: TaskStartDate(self: _SharingItem) = value
        """
        ...

    @property
    def TaskSubject(self) -> str:
        """
        Get: TaskSubject(self: _SharingItem) -> str
        Set: TaskSubject(self: _SharingItem) = value
        """
        ...

    @property
    def To(self) -> str:
        """
        Get: To(self: _SharingItem) -> str
        Set: To(self: _SharingItem) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: _SharingItem) -> DateTime
        Set: ToDoTaskOrdinal(self: _SharingItem) = value
        """
        ...

    @property
    def Type(self) -> OlSharingMsgType:
        """
        Get: Type(self: _SharingItem) -> OlSharingMsgType
        Set: Type(self: _SharingItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _SharingItem) -> bool
        Set: UnRead(self: _SharingItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _SharingItem) -> UserProperties """
        ...


    def AddBusinessCard(self, contact:ContactItem): # -> 
        """ AddBusinessCard(self: _SharingItem, contact: ContactItem) """
        ...

    def Allow(self): # -> 
        """ Allow(self: _SharingItem) """
        ...

    def ClearConversationIndex(self): # -> 
        """ ClearConversationIndex(self: _SharingItem) """
        ...

    def ClearTaskFlag(self): # -> 
        """ ClearTaskFlag(self: _SharingItem) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _SharingItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _SharingItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _SharingItem) """
        ...

    def Deny(self) -> SharingItem:
        """ Deny(self: _SharingItem) -> SharingItem """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _SharingItem, Modal: object) """
        ...

    def Forward(self) -> SharingItem:
        """ Forward(self: _SharingItem) -> SharingItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _SharingItem) -> Conversation """
        ...

    def MarkAsTask(self, MarkInterval:OlMarkInterval): # -> 
        """ MarkAsTask(self: _SharingItem, MarkInterval: OlMarkInterval) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _SharingItem, DestFldr: MAPIFolder) -> object """
        ...

    def OpenSharedFolder(self) -> MAPIFolder:
        """ OpenSharedFolder(self: _SharingItem) -> MAPIFolder """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _SharingItem) """
        ...

    def Reply(self) -> MailItem:
        """ Reply(self: _SharingItem) -> MailItem """
        ...

    def ReplyAll(self) -> MailItem:
        """ ReplyAll(self: _SharingItem) -> MailItem """
        ...

    def Save(self): # -> 
        """ Save(self: _SharingItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _SharingItem, Path: str, Type: object) """
        ...

    def Send(self): # -> 
        """ Send(self: _SharingItem) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _SharingItem) """
        ...


class SharingItem(_SharingItem, ItemEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class SharingItemClass(SharingItem, ItemEvents_Event, __ComObject): # skipped bases: <type '_SharingItem'>, <type 'ItemEvents_10_Event'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: SharingItemClass) -> Actions """
        ...

    @property
    def AllowWriteAccess(self) -> bool:
        """
        Get: AllowWriteAccess(self: SharingItemClass) -> bool
        Set: AllowWriteAccess(self: SharingItemClass) = value
        """
        ...

    @property
    def AlternateRecipientAllowed(self) -> bool:
        """
        Get: AlternateRecipientAllowed(self: SharingItemClass) -> bool
        Set: AlternateRecipientAllowed(self: SharingItemClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: SharingItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: SharingItemClass) -> Attachments """
        ...

    @property
    def AutoForwarded(self) -> bool:
        """
        Get: AutoForwarded(self: SharingItemClass) -> bool
        Set: AutoForwarded(self: SharingItemClass) = value
        """
        ...

    @property
    def BCC(self) -> str:
        """
        Get: BCC(self: SharingItemClass) -> str
        Set: BCC(self: SharingItemClass) = value
        """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: SharingItemClass) -> str
        Set: BillingInformation(self: SharingItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: SharingItemClass) -> str
        Set: Body(self: SharingItemClass) = value
        """
        ...

    @property
    def BodyFormat(self) -> OlBodyFormat:
        """
        Get: BodyFormat(self: SharingItemClass) -> OlBodyFormat
        Set: BodyFormat(self: SharingItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: SharingItemClass) -> str
        Set: Categories(self: SharingItemClass) = value
        """
        ...

    @property
    def CC(self) -> str:
        """
        Get: CC(self: SharingItemClass) -> str
        Set: CC(self: SharingItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: SharingItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: SharingItemClass) -> str
        Set: Companies(self: SharingItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: SharingItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: SharingItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: SharingItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: SharingItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: SharingItemClass) -> DateTime """
        ...

    @property
    def DeferredDeliveryTime(self) -> DateTime:
        """
        Get: DeferredDeliveryTime(self: SharingItemClass) -> DateTime
        Set: DeferredDeliveryTime(self: SharingItemClass) = value
        """
        ...

    @property
    def DeleteAfterSubmit(self) -> bool:
        """
        Get: DeleteAfterSubmit(self: SharingItemClass) -> bool
        Set: DeleteAfterSubmit(self: SharingItemClass) = value
        """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: SharingItemClass) -> OlDownloadState """
        ...

    @property
    def EnableSharedAttachments(self) -> bool:
        """
        Get: EnableSharedAttachments(self: SharingItemClass) -> bool
        Set: EnableSharedAttachments(self: SharingItemClass) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: SharingItemClass) -> str """
        ...

    @property
    def ExpiryTime(self) -> DateTime:
        """
        Get: ExpiryTime(self: SharingItemClass) -> DateTime
        Set: ExpiryTime(self: SharingItemClass) = value
        """
        ...

    @property
    def FlagDueBy(self) -> DateTime:
        """
        Get: FlagDueBy(self: SharingItemClass) -> DateTime
        Set: FlagDueBy(self: SharingItemClass) = value
        """
        ...

    @property
    def FlagIcon(self) -> OlFlagIcon:
        """
        Get: FlagIcon(self: SharingItemClass) -> OlFlagIcon
        Set: FlagIcon(self: SharingItemClass) = value
        """
        ...

    @property
    def FlagRequest(self) -> str:
        """
        Get: FlagRequest(self: SharingItemClass) -> str
        Set: FlagRequest(self: SharingItemClass) = value
        """
        ...

    @property
    def FlagStatus(self) -> OlFlagStatus:
        """
        Get: FlagStatus(self: SharingItemClass) -> OlFlagStatus
        Set: FlagStatus(self: SharingItemClass) = value
        """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: SharingItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: SharingItemClass) -> Inspector """
        ...

    @property
    def HTMLBody(self) -> str:
        """
        Get: HTMLBody(self: SharingItemClass) -> str
        Set: HTMLBody(self: SharingItemClass) = value
        """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: SharingItemClass) -> OlImportance
        Set: Importance(self: SharingItemClass) = value
        """
        ...

    @property
    def InternetCodepage(self) -> int:
        """
        Get: InternetCodepage(self: SharingItemClass) -> int
        Set: InternetCodepage(self: SharingItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: SharingItemClass) -> bool """
        ...

    @property
    def IsMarkedAsTask(self) -> bool:
        """ Get: IsMarkedAsTask(self: SharingItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: SharingItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: SharingItemClass) -> DateTime """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: SharingItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: SharingItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: SharingItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: SharingItemClass) -> str
        Set: MessageClass(self: SharingItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: SharingItemClass) -> str
        Set: Mileage(self: SharingItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: SharingItemClass) -> bool
        Set: NoAging(self: SharingItemClass) = value
        """
        ...

    @property
    def OriginatorDeliveryReportRequested(self) -> bool:
        """
        Get: OriginatorDeliveryReportRequested(self: SharingItemClass) -> bool
        Set: OriginatorDeliveryReportRequested(self: SharingItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: SharingItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: SharingItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SharingItemClass) -> object """
        ...

    @property
    def Permission(self) -> OlPermission:
        """
        Get: Permission(self: SharingItemClass) -> OlPermission
        Set: Permission(self: SharingItemClass) = value
        """
        ...

    @property
    def PermissionService(self) -> OlPermissionService:
        """
        Get: PermissionService(self: SharingItemClass) -> OlPermissionService
        Set: PermissionService(self: SharingItemClass) = value
        """
        ...

    @property
    def PermissionTemplateGuid(self) -> str:
        """
        Get: PermissionTemplateGuid(self: SharingItemClass) -> str
        Set: PermissionTemplateGuid(self: SharingItemClass) = value
        """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: SharingItemClass) -> PropertyAccessor """
        ...

    @property
    def ReadReceiptRequested(self) -> bool:
        """
        Get: ReadReceiptRequested(self: SharingItemClass) -> bool
        Set: ReadReceiptRequested(self: SharingItemClass) = value
        """
        ...

    @property
    def ReceivedByEntryID(self) -> str:
        """ Get: ReceivedByEntryID(self: SharingItemClass) -> str """
        ...

    @property
    def ReceivedByName(self) -> str:
        """ Get: ReceivedByName(self: SharingItemClass) -> str """
        ...

    @property
    def ReceivedOnBehalfOfEntryID(self) -> str:
        """ Get: ReceivedOnBehalfOfEntryID(self: SharingItemClass) -> str """
        ...

    @property
    def ReceivedOnBehalfOfName(self) -> str:
        """ Get: ReceivedOnBehalfOfName(self: SharingItemClass) -> str """
        ...

    @property
    def ReceivedTime(self) -> DateTime:
        """ Get: ReceivedTime(self: SharingItemClass) -> DateTime """
        ...

    @property
    def RecipientReassignmentProhibited(self) -> bool:
        """
        Get: RecipientReassignmentProhibited(self: SharingItemClass) -> bool
        Set: RecipientReassignmentProhibited(self: SharingItemClass) = value
        """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: SharingItemClass) -> Recipients """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: SharingItemClass) -> bool
        Set: ReminderOverrideDefault(self: SharingItemClass) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: SharingItemClass) -> bool
        Set: ReminderPlaySound(self: SharingItemClass) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: SharingItemClass) -> bool
        Set: ReminderSet(self: SharingItemClass) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: SharingItemClass) -> str
        Set: ReminderSoundFile(self: SharingItemClass) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: SharingItemClass) -> DateTime
        Set: ReminderTime(self: SharingItemClass) = value
        """
        ...

    @property
    def RemoteID(self) -> str:
        """ Get: RemoteID(self: SharingItemClass) -> str """
        ...

    @property
    def RemoteName(self) -> str:
        """ Get: RemoteName(self: SharingItemClass) -> str """
        ...

    @property
    def RemotePath(self) -> str:
        """ Get: RemotePath(self: SharingItemClass) -> str """
        ...

    @property
    def RemoteStatus(self) -> OlRemoteStatus:
        """
        Get: RemoteStatus(self: SharingItemClass) -> OlRemoteStatus
        Set: RemoteStatus(self: SharingItemClass) = value
        """
        ...

    @property
    def ReplyRecipientNames(self) -> str:
        """ Get: ReplyRecipientNames(self: SharingItemClass) -> str """
        ...

    @property
    def ReplyRecipients(self) -> Recipients:
        """ Get: ReplyRecipients(self: SharingItemClass) -> Recipients """
        ...

    @property
    def RequestedFolder(self) -> OlDefaultFolders:
        """ Get: RequestedFolder(self: SharingItemClass) -> OlDefaultFolders """
        ...

    @property
    def RetentionExpirationDate(self) -> DateTime:
        """ Get: RetentionExpirationDate(self: SharingItemClass) -> DateTime """
        ...

    @property
    def RetentionPolicyName(self) -> str:
        """ Get: RetentionPolicyName(self: SharingItemClass) -> str """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: SharingItemClass) -> object
        Set: RTFBody(self: SharingItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: SharingItemClass) -> bool """
        ...

    @property
    def SaveSentMessageFolder(self) -> MAPIFolder:
        """
        Get: SaveSentMessageFolder(self: SharingItemClass) -> MAPIFolder
        Set: SaveSentMessageFolder(self: SharingItemClass) = value
        """
        ...

    @property
    def SenderEmailAddress(self) -> str:
        """ Get: SenderEmailAddress(self: SharingItemClass) -> str """
        ...

    @property
    def SenderEmailType(self) -> str:
        """ Get: SenderEmailType(self: SharingItemClass) -> str """
        ...

    @property
    def SenderName(self) -> str:
        """ Get: SenderName(self: SharingItemClass) -> str """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: SharingItemClass) -> Account
        Set: SendUsingAccount(self: SharingItemClass) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: SharingItemClass) -> OlSensitivity
        Set: Sensitivity(self: SharingItemClass) = value
        """
        ...

    @property
    def Sent(self) -> bool:
        """ Get: Sent(self: SharingItemClass) -> bool """
        ...

    @property
    def SentOn(self) -> DateTime:
        """ Get: SentOn(self: SharingItemClass) -> DateTime """
        ...

    @property
    def SentOnBehalfOfName(self) -> str:
        """
        Get: SentOnBehalfOfName(self: SharingItemClass) -> str
        Set: SentOnBehalfOfName(self: SharingItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: SharingItemClass) -> NameSpace """
        ...

    @property
    def SharingProvider(self) -> OlSharingProvider:
        """ Get: SharingProvider(self: SharingItemClass) -> OlSharingProvider """
        ...

    @property
    def SharingProviderGuid(self) -> str:
        """ Get: SharingProviderGuid(self: SharingItemClass) -> str """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: SharingItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: SharingItemClass) -> str
        Set: Subject(self: SharingItemClass) = value
        """
        ...

    @property
    def Submitted(self) -> bool:
        """ Get: Submitted(self: SharingItemClass) -> bool """
        ...

    @property
    def TaskCompletedDate(self) -> DateTime:
        """
        Get: TaskCompletedDate(self: SharingItemClass) -> DateTime
        Set: TaskCompletedDate(self: SharingItemClass) = value
        """
        ...

    @property
    def TaskDueDate(self) -> DateTime:
        """
        Get: TaskDueDate(self: SharingItemClass) -> DateTime
        Set: TaskDueDate(self: SharingItemClass) = value
        """
        ...

    @property
    def TaskStartDate(self) -> DateTime:
        """
        Get: TaskStartDate(self: SharingItemClass) -> DateTime
        Set: TaskStartDate(self: SharingItemClass) = value
        """
        ...

    @property
    def TaskSubject(self) -> str:
        """
        Get: TaskSubject(self: SharingItemClass) -> str
        Set: TaskSubject(self: SharingItemClass) = value
        """
        ...

    @property
    def To(self) -> str:
        """
        Get: To(self: SharingItemClass) -> str
        Set: To(self: SharingItemClass) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: SharingItemClass) -> DateTime
        Set: ToDoTaskOrdinal(self: SharingItemClass) = value
        """
        ...

    @property
    def Type(self) -> OlSharingMsgType:
        """
        Get: Type(self: SharingItemClass) -> OlSharingMsgType
        Set: Type(self: SharingItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: SharingItemClass) -> bool
        Set: UnRead(self: SharingItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: SharingItemClass) -> UserProperties """
        ...


    def AddBusinessCard(self, contact:ContactItem): # -> 
        """ AddBusinessCard(self: SharingItemClass, contact: ContactItem) """
        ...

    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: SharingItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: SharingItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: SharingItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: SharingItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: SharingItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: SharingItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: SharingItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: SharingItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: SharingItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: SharingItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: SharingItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Allow(self): # -> 
        """ Allow(self: SharingItemClass) """
        ...

    def ClearConversationIndex(self): # -> 
        """ ClearConversationIndex(self: SharingItemClass) """
        ...

    def ClearTaskFlag(self): # -> 
        """ ClearTaskFlag(self: SharingItemClass) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: SharingItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: SharingItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: SharingItemClass) """
        ...

    def Deny(self) -> SharingItem:
        """ Deny(self: SharingItemClass) -> SharingItem """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: SharingItemClass, Modal: object) """
        ...

    def Forward(self) -> SharingItem:
        """ Forward(self: SharingItemClass) -> SharingItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: SharingItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: SharingItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: SharingItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: SharingItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: SharingItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: SharingItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: SharingItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: SharingItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: SharingItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: SharingItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: SharingItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: SharingItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: SharingItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: SharingItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: SharingItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: SharingItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: SharingItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: SharingItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: SharingItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: SharingItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: SharingItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: SharingItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: SharingItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: SharingItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: SharingItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: SharingItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: SharingItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: SharingItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: SharingItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: SharingItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: SharingItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def MarkAsTask(self, MarkInterval:OlMarkInterval): # -> 
        """ MarkAsTask(self: SharingItemClass, MarkInterval: OlMarkInterval) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: SharingItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def OpenSharedFolder(self) -> MAPIFolder:
        """ OpenSharedFolder(self: SharingItemClass) -> MAPIFolder """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: SharingItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: SharingItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: SharingItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: SharingItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: SharingItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: SharingItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: SharingItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: SharingItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: SharingItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: SharingItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: SharingItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: SharingItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Reply(self) -> MailItem:
        """ Reply(self: SharingItemClass) -> MailItem """
        ...

    def ReplyAll(self) -> MailItem:
        """ ReplyAll(self: SharingItemClass) -> MailItem """
        ...

    def Save(self): # -> 
        """ Save(self: SharingItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: SharingItemClass, Path: str, Type: object) """
        ...

    def Send(self): # -> 
        """ Send(self: SharingItemClass) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: SharingItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_10_Event_Forward = ...
    ItemEvents_10_Event_Reply = ...
    ItemEvents_10_Event_ReplyAll = ...
    ItemEvents_10_Event_Send = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Unload = ...
    Write = ...


class _SimpleItems(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _SimpleItems) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _SimpleItems) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _SimpleItems) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _SimpleItems) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _SimpleItems) -> NameSpace """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SimpleItems(_SimpleItems): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class SimpleItemsClass(SimpleItems, __ComObject): # skipped bases: <type '_SimpleItems'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SimpleItemsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: SimpleItemsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SimpleItemsClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SimpleItemsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: SimpleItemsClass) -> NameSpace """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _SolutionsModule: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _SolutionsModule) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _SolutionsModule) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _SolutionsModule) -> str """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: _SolutionsModule) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _SolutionsModule) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: _SolutionsModule) -> int
        Set: Position(self: _SolutionsModule) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _SolutionsModule) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _SolutionsModule) -> bool
        Set: Visible(self: _SolutionsModule) = value
        """
        ...


    def AddSolution(self, Solution:MAPIFolder, Scope:OlSolutionScope): # -> 
        """ AddSolution(self: _SolutionsModule, Solution: MAPIFolder, Scope: OlSolutionScope) """
        ...


class SolutionsModule(_SolutionsModule): # skipped bases: <type 'object'>
    """ no doc """
    pass

class SolutionsModuleClass(__ComObject, SolutionsModule): # skipped bases: <type '_SolutionsModule'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SolutionsModuleClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: SolutionsModuleClass) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SolutionsModuleClass) -> str """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: SolutionsModuleClass) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SolutionsModuleClass) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: SolutionsModuleClass) -> int
        Set: Position(self: SolutionsModuleClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: SolutionsModuleClass) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: SolutionsModuleClass) -> bool
        Set: Visible(self: SolutionsModuleClass) = value
        """
        ...


    def AddSolution(self, Solution:MAPIFolder, Scope:OlSolutionScope): # -> 
        """ AddSolution(self: SolutionsModuleClass, Solution: MAPIFolder, Scope: OlSolutionScope) """
        ...


class _StorageItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _StorageItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _StorageItem) -> Attachments """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _StorageItem) -> str
        Set: Body(self: _StorageItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _StorageItem) -> OlObjectClass """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _StorageItem) -> DateTime """
        ...

    @property
    def Creator(self) -> str:
        """
        Get: Creator(self: _StorageItem) -> str
        Set: Creator(self: _StorageItem) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _StorageItem) -> str """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _StorageItem) -> DateTime """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _StorageItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _StorageItem) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _StorageItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _StorageItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _StorageItem) -> str
        Set: Subject(self: _StorageItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _StorageItem) -> UserProperties """
        ...


    def Delete(self): # -> 
        """ Delete(self: _StorageItem) """
        ...

    def Save(self): # -> 
        """ Save(self: _StorageItem) """
        ...


class StorageItem(_StorageItem): # skipped bases: <type 'object'>
    """ no doc """
    pass

class StorageItemClass(StorageItem, __ComObject): # skipped bases: <type '_StorageItem'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: StorageItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: StorageItemClass) -> Attachments """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: StorageItemClass) -> str
        Set: Body(self: StorageItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: StorageItemClass) -> OlObjectClass """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: StorageItemClass) -> DateTime """
        ...

    @property
    def Creator(self) -> str:
        """
        Get: Creator(self: StorageItemClass) -> str
        Set: Creator(self: StorageItemClass) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: StorageItemClass) -> str """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: StorageItemClass) -> DateTime """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: StorageItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: StorageItemClass) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: StorageItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: StorageItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: StorageItemClass) -> str
        Set: Subject(self: StorageItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: StorageItemClass) -> UserProperties """
        ...


    def Delete(self): # -> 
        """ Delete(self: StorageItemClass) """
        ...

    def Save(self): # -> 
        """ Save(self: StorageItemClass) """
        ...


class _Store: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Store) -> Application """
        ...

    @property
    def Categories(self) -> Categories:
        """ Get: Categories(self: _Store) -> Categories """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Store) -> OlObjectClass """
        ...

    @property
    def DisplayName(self) -> str:
        """ Get: DisplayName(self: _Store) -> str """
        ...

    @property
    def ExchangeStoreType(self) -> OlExchangeStoreType:
        """ Get: ExchangeStoreType(self: _Store) -> OlExchangeStoreType """
        ...

    @property
    def FilePath(self) -> str:
        """ Get: FilePath(self: _Store) -> str """
        ...

    @property
    def IsCachedExchange(self) -> bool:
        """ Get: IsCachedExchange(self: _Store) -> bool """
        ...

    @property
    def IsConversationEnabled(self) -> bool:
        """ Get: IsConversationEnabled(self: _Store) -> bool """
        ...

    @property
    def IsDataFileStore(self) -> bool:
        """ Get: IsDataFileStore(self: _Store) -> bool """
        ...

    @property
    def IsInstantSearchEnabled(self) -> bool:
        """ Get: IsInstantSearchEnabled(self: _Store) -> bool """
        ...

    @property
    def IsOpen(self) -> bool:
        """ Get: IsOpen(self: _Store) -> bool """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _Store) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Store) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _Store) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Store) -> NameSpace """
        ...

    @property
    def StoreID(self) -> str:
        """ Get: StoreID(self: _Store) -> str """
        ...


    def GetDefaultFolder(self, FolderType:OlDefaultFolders) -> MAPIFolder:
        """ GetDefaultFolder(self: _Store, FolderType: OlDefaultFolders) -> MAPIFolder """
        ...

    def GetRootFolder(self) -> MAPIFolder:
        """ GetRootFolder(self: _Store) -> MAPIFolder """
        ...

    def GetRules(self) -> Rules:
        """ GetRules(self: _Store) -> Rules """
        ...

    def GetSearchFolders(self) -> Folders:
        """ GetSearchFolders(self: _Store) -> Folders """
        ...

    def GetSpecialFolder(self, FolderType:OlSpecialFolders) -> MAPIFolder:
        """ GetSpecialFolder(self: _Store, FolderType: OlSpecialFolders) -> MAPIFolder """
        ...

    def RefreshQuotaDisplay(self): # -> 
        """ RefreshQuotaDisplay(self: _Store) """
        ...


class Store(_Store): # skipped bases: <type 'object'>
    """ no doc """
    pass

class StoreClass(Store, __ComObject): # skipped bases: <type '_Store'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: StoreClass) -> Application """
        ...

    @property
    def Categories(self) -> Categories:
        """ Get: Categories(self: StoreClass) -> Categories """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: StoreClass) -> OlObjectClass """
        ...

    @property
    def DisplayName(self) -> str:
        """ Get: DisplayName(self: StoreClass) -> str """
        ...

    @property
    def ExchangeStoreType(self) -> OlExchangeStoreType:
        """ Get: ExchangeStoreType(self: StoreClass) -> OlExchangeStoreType """
        ...

    @property
    def FilePath(self) -> str:
        """ Get: FilePath(self: StoreClass) -> str """
        ...

    @property
    def IsCachedExchange(self) -> bool:
        """ Get: IsCachedExchange(self: StoreClass) -> bool """
        ...

    @property
    def IsConversationEnabled(self) -> bool:
        """ Get: IsConversationEnabled(self: StoreClass) -> bool """
        ...

    @property
    def IsDataFileStore(self) -> bool:
        """ Get: IsDataFileStore(self: StoreClass) -> bool """
        ...

    @property
    def IsInstantSearchEnabled(self) -> bool:
        """ Get: IsInstantSearchEnabled(self: StoreClass) -> bool """
        ...

    @property
    def IsOpen(self) -> bool:
        """ Get: IsOpen(self: StoreClass) -> bool """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: StoreClass) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: StoreClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: StoreClass) -> PropertyAccessor """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: StoreClass) -> NameSpace """
        ...

    @property
    def StoreID(self) -> str:
        """ Get: StoreID(self: StoreClass) -> str """
        ...


    def GetDefaultFolder(self, FolderType:OlDefaultFolders) -> MAPIFolder:
        """ GetDefaultFolder(self: StoreClass, FolderType: OlDefaultFolders) -> MAPIFolder """
        ...

    def GetRootFolder(self) -> MAPIFolder:
        """ GetRootFolder(self: StoreClass) -> MAPIFolder """
        ...

    def GetRules(self) -> Rules:
        """ GetRules(self: StoreClass) -> Rules """
        ...

    def GetSearchFolders(self) -> Folders:
        """ GetSearchFolders(self: StoreClass) -> Folders """
        ...

    def GetSpecialFolder(self, FolderType:OlSpecialFolders) -> MAPIFolder:
        """ GetSpecialFolder(self: StoreClass, FolderType: OlSpecialFolders) -> MAPIFolder """
        ...

    def RefreshQuotaDisplay(self): # -> 
        """ RefreshQuotaDisplay(self: StoreClass) """
        ...


class StoresEvents_12_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_BeforeStoreRemove(self): # -> 
        """ add_BeforeStoreRemove(self: StoresEvents_12_Event, : StoresEvents_12_BeforeStoreRemoveEventHandler) """
        ...

    def add_StoreAdd(self): # -> 
        """ add_StoreAdd(self: StoresEvents_12_Event, : StoresEvents_12_StoreAddEventHandler) """
        ...

    def remove_BeforeStoreRemove(self): # -> 
        """ remove_BeforeStoreRemove(self: StoresEvents_12_Event, : StoresEvents_12_BeforeStoreRemoveEventHandler) """
        ...

    def remove_StoreAdd(self): # -> 
        """ remove_StoreAdd(self: StoresEvents_12_Event, : StoresEvents_12_StoreAddEventHandler) """
        ...

    BeforeStoreRemove = ...
    StoreAdd = ...


class _Stores(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Stores) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Stores) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Stores) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Stores) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Stores) -> NameSpace """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Stores(StoresEvents_12_Event, _Stores): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class StoresClass(Stores, __ComObject): # skipped bases: <type '_Stores'>, <type 'IEnumerable'>, <type 'StoresEvents_12_Event'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: StoresClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: StoresClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: StoresClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: StoresClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: StoresClass) -> NameSpace """
        ...


    def add_BeforeStoreRemove(self): # -> 
        """ add_BeforeStoreRemove(self: StoresClass, : StoresEvents_12_BeforeStoreRemoveEventHandler) """
        ...

    def add_StoreAdd(self): # -> 
        """ add_StoreAdd(self: StoresClass, : StoresEvents_12_StoreAddEventHandler) """
        ...

    def remove_BeforeStoreRemove(self): # -> 
        """ remove_BeforeStoreRemove(self: StoresClass, : StoresEvents_12_BeforeStoreRemoveEventHandler) """
        ...

    def remove_StoreAdd(self): # -> 
        """ remove_StoreAdd(self: StoresClass, : StoresEvents_12_StoreAddEventHandler) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BeforeStoreRemove = ...
    StoreAdd = ...


class StoresEvents_12: # skipped bases: <type 'object'>
    """ no doc """
    def BeforeStoreRemove(self, Store, Cancel) -> bool:
        """ BeforeStoreRemove(self: StoresEvents_12, Store: Store) -> bool """
        ...

    def StoreAdd(self, Store:Store): # -> 
        """ StoreAdd(self: StoresEvents_12, Store: Store) """
        ...


class StoresEvents_12_BeforeStoreRemoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ StoresEvents_12_BeforeStoreRemoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Store, Cancel) -> bool:
        """ Invoke(self: StoresEvents_12_BeforeStoreRemoveEventHandler, Store: Store) -> bool """
        ...


class StoresEvents_12_SinkHelper(StoresEvents_12): # skipped bases: <type 'object'>
    """ no doc """
    m_BeforeStoreRemoveDelegate = ...
    m_dwCookie = ...
    m_StoreAddDelegate = ...


class StoresEvents_12_StoreAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ StoresEvents_12_StoreAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, Store:Store): # -> 
        """ Invoke(self: StoresEvents_12_StoreAddEventHandler, Store: Store) """
        ...


class SyncObjectEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_OnError(self): # -> 
        """ add_OnError(self: SyncObjectEvents_Event, : SyncObjectEvents_OnErrorEventHandler) """
        ...

    def add_Progress(self): # -> 
        """ add_Progress(self: SyncObjectEvents_Event, : SyncObjectEvents_ProgressEventHandler) """
        ...

    def add_SyncEnd(self): # -> 
        """ add_SyncEnd(self: SyncObjectEvents_Event, : SyncObjectEvents_SyncEndEventHandler) """
        ...

    def add_SyncStart(self): # -> 
        """ add_SyncStart(self: SyncObjectEvents_Event, : SyncObjectEvents_SyncStartEventHandler) """
        ...

    def remove_OnError(self): # -> 
        """ remove_OnError(self: SyncObjectEvents_Event, : SyncObjectEvents_OnErrorEventHandler) """
        ...

    def remove_Progress(self): # -> 
        """ remove_Progress(self: SyncObjectEvents_Event, : SyncObjectEvents_ProgressEventHandler) """
        ...

    def remove_SyncEnd(self): # -> 
        """ remove_SyncEnd(self: SyncObjectEvents_Event, : SyncObjectEvents_SyncEndEventHandler) """
        ...

    def remove_SyncStart(self): # -> 
        """ remove_SyncStart(self: SyncObjectEvents_Event, : SyncObjectEvents_SyncStartEventHandler) """
        ...

    OnError = ...
    Progress = ...
    SyncEnd = ...
    SyncStart = ...


class _SyncObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _SyncObject) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _SyncObject) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _SyncObject) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _SyncObject) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _SyncObject) -> NameSpace """
        ...


    def Start(self): # -> 
        """ Start(self: _SyncObject) """
        ...

    def Stop(self): # -> 
        """ Stop(self: _SyncObject) """
        ...


class SyncObject(_SyncObject, SyncObjectEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class SyncObjectClass(SyncObject, __ComObject): # skipped bases: <type 'SyncObjectEvents_Event'>, <type '_SyncObject'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SyncObjectClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: SyncObjectClass) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SyncObjectClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SyncObjectClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: SyncObjectClass) -> NameSpace """
        ...


    def add_OnError(self): # -> 
        """ add_OnError(self: SyncObjectClass, : SyncObjectEvents_OnErrorEventHandler) """
        ...

    def add_Progress(self): # -> 
        """ add_Progress(self: SyncObjectClass, : SyncObjectEvents_ProgressEventHandler) """
        ...

    def add_SyncEnd(self): # -> 
        """ add_SyncEnd(self: SyncObjectClass, : SyncObjectEvents_SyncEndEventHandler) """
        ...

    def add_SyncStart(self): # -> 
        """ add_SyncStart(self: SyncObjectClass, : SyncObjectEvents_SyncStartEventHandler) """
        ...

    def remove_OnError(self): # -> 
        """ remove_OnError(self: SyncObjectClass, : SyncObjectEvents_OnErrorEventHandler) """
        ...

    def remove_Progress(self): # -> 
        """ remove_Progress(self: SyncObjectClass, : SyncObjectEvents_ProgressEventHandler) """
        ...

    def remove_SyncEnd(self): # -> 
        """ remove_SyncEnd(self: SyncObjectClass, : SyncObjectEvents_SyncEndEventHandler) """
        ...

    def remove_SyncStart(self): # -> 
        """ remove_SyncStart(self: SyncObjectClass, : SyncObjectEvents_SyncStartEventHandler) """
        ...

    def Start(self): # -> 
        """ Start(self: SyncObjectClass) """
        ...

    def Stop(self): # -> 
        """ Stop(self: SyncObjectClass) """
        ...

    OnError = ...
    Progress = ...
    SyncEnd = ...
    SyncStart = ...


class SyncObjectEvents: # skipped bases: <type 'object'>
    """ no doc """
    def OnError(self, Code:int, Description:str): # -> 
        """ OnError(self: SyncObjectEvents, Code: int, Description: str) """
        ...

    def Progress(self, State:OlSyncState, Description:str, Value:int, Max:int): # -> 
        """ Progress(self: SyncObjectEvents, State: OlSyncState, Description: str, Value: int, Max: int) """
        ...

    def SyncEnd(self): # -> 
        """ SyncEnd(self: SyncObjectEvents) """
        ...

    def SyncStart(self): # -> 
        """ SyncStart(self: SyncObjectEvents) """
        ...


class SyncObjectEvents_OnErrorEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ SyncObjectEvents_OnErrorEventHandler(: object, : UIntPtr) """
    def Invoke(self, Code:int, Description:str): # -> 
        """ Invoke(self: SyncObjectEvents_OnErrorEventHandler, Code: int, Description: str) """
        ...


class SyncObjectEvents_ProgressEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ SyncObjectEvents_ProgressEventHandler(: object, : UIntPtr) """
    def Invoke(self, State:OlSyncState, Description:str, Value:int, Max:int): # -> 
        """ Invoke(self: SyncObjectEvents_ProgressEventHandler, State: OlSyncState, Description: str, Value: int, Max: int) """
        ...


class SyncObjectEvents_SinkHelper(SyncObjectEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_OnErrorDelegate = ...
    m_ProgressDelegate = ...
    m_SyncEndDelegate = ...
    m_SyncStartDelegate = ...


class SyncObjectEvents_SyncEndEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ SyncObjectEvents_SyncEndEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: SyncObjectEvents_SyncEndEventHandler) """
        ...


class SyncObjectEvents_SyncStartEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ SyncObjectEvents_SyncStartEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: SyncObjectEvents_SyncStartEventHandler) """
        ...


class SyncObjects(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AppFolders(self) -> SyncObject:
        """ Get: AppFolders(self: SyncObjects) -> SyncObject """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: SyncObjects) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: SyncObjects) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SyncObjects) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SyncObjects) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: SyncObjects) -> NameSpace """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _Table: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Table) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Table) -> OlObjectClass """
        ...

    @property
    def Columns(self) -> Columns:
        """ Get: Columns(self: _Table) -> Columns """
        ...

    @property
    def EndOfTable(self) -> bool:
        """ Get: EndOfTable(self: _Table) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Table) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Table) -> NameSpace """
        ...


    def FindNextRow(self) -> Row:
        """ FindNextRow(self: _Table) -> Row """
        ...

    def FindRow(self, Filter:str) -> Row:
        """ FindRow(self: _Table, Filter: str) -> Row """
        ...

    def GetArray(self, MaxRows:int) -> object:
        """ GetArray(self: _Table, MaxRows: int) -> object """
        ...

    def GetNextRow(self) -> Row:
        """ GetNextRow(self: _Table) -> Row """
        ...

    def GetRowCount(self) -> int:
        """ GetRowCount(self: _Table) -> int """
        ...

    def MoveToStart(self): # -> 
        """ MoveToStart(self: _Table) """
        ...

    def Restrict(self, Filter:str) -> Table:
        """ Restrict(self: _Table, Filter: str) -> Table """
        ...

    def Sort(self, SortProperty:str, Descending:object): # -> 
        """ Sort(self: _Table, SortProperty: str, Descending: object) """
        ...


class Table(_Table): # skipped bases: <type 'object'>
    """ no doc """
    pass

class TableClass(__ComObject, Table): # skipped bases: <type '_Table'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TableClass) -> OlObjectClass """
        ...

    @property
    def Columns(self) -> Columns:
        """ Get: Columns(self: TableClass) -> Columns """
        ...

    @property
    def EndOfTable(self) -> bool:
        """ Get: EndOfTable(self: TableClass) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TableClass) -> NameSpace """
        ...


    def FindNextRow(self) -> Row:
        """ FindNextRow(self: TableClass) -> Row """
        ...

    def FindRow(self, Filter:str) -> Row:
        """ FindRow(self: TableClass, Filter: str) -> Row """
        ...

    def GetArray(self, MaxRows:int) -> object:
        """ GetArray(self: TableClass, MaxRows: int) -> object """
        ...

    def GetNextRow(self) -> Row:
        """ GetNextRow(self: TableClass) -> Row """
        ...

    def GetRowCount(self) -> int:
        """ GetRowCount(self: TableClass) -> int """
        ...

    def MoveToStart(self): # -> 
        """ MoveToStart(self: TableClass) """
        ...

    def Restrict(self, Filter:str) -> Table:
        """ Restrict(self: TableClass, Filter: str) -> Table """
        ...

    def Sort(self, SortProperty:str, Descending:object): # -> 
        """ Sort(self: TableClass, SortProperty: str, Descending: object) """
        ...


class _TableView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowInCellEditing(self) -> bool:
        """
        Get: AllowInCellEditing(self: _TableView) -> bool
        Set: AllowInCellEditing(self: _TableView) = value
        """
        ...

    @property
    def AlwaysExpandConversation(self) -> bool:
        """
        Get: AlwaysExpandConversation(self: _TableView) -> bool
        Set: AlwaysExpandConversation(self: _TableView) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _TableView) -> Application """
        ...

    @property
    def AutoFormatRules(self) -> AutoFormatRules:
        """ Get: AutoFormatRules(self: _TableView) -> AutoFormatRules """
        ...

    @property
    def AutomaticColumnSizing(self) -> bool:
        """
        Get: AutomaticColumnSizing(self: _TableView) -> bool
        Set: AutomaticColumnSizing(self: _TableView) = value
        """
        ...

    @property
    def AutomaticGrouping(self) -> bool:
        """
        Get: AutomaticGrouping(self: _TableView) -> bool
        Set: AutomaticGrouping(self: _TableView) = value
        """
        ...

    @property
    def AutoPreview(self) -> OlAutoPreview:
        """
        Get: AutoPreview(self: _TableView) -> OlAutoPreview
        Set: AutoPreview(self: _TableView) = value
        """
        ...

    @property
    def AutoPreviewFont(self) -> ViewFont:
        """ Get: AutoPreviewFont(self: _TableView) -> ViewFont """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _TableView) -> OlObjectClass """
        ...

    @property
    def ColumnFont(self) -> ViewFont:
        """ Get: ColumnFont(self: _TableView) -> ViewFont """
        ...

    @property
    def DefaultExpandCollapseSetting(self) -> OlDefaultExpandCollapseSetting:
        """
        Get: DefaultExpandCollapseSetting(self: _TableView) -> OlDefaultExpandCollapseSetting
        Set: DefaultExpandCollapseSetting(self: _TableView) = value
        """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: _TableView) -> str
        Set: Filter(self: _TableView) = value
        """
        ...

    @property
    def GridLineStyle(self) -> OlGridLineStyle:
        """
        Get: GridLineStyle(self: _TableView) -> OlGridLineStyle
        Set: GridLineStyle(self: _TableView) = value
        """
        ...

    @property
    def GroupByFields(self) -> OrderFields:
        """ Get: GroupByFields(self: _TableView) -> OrderFields """
        ...

    @property
    def HideReadingPaneHeaderInfo(self) -> bool:
        """
        Get: HideReadingPaneHeaderInfo(self: _TableView) -> bool
        Set: HideReadingPaneHeaderInfo(self: _TableView) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: _TableView) -> str
        Set: Language(self: _TableView) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: _TableView) -> bool
        Set: LockUserChanges(self: _TableView) = value
        """
        ...

    @property
    def MaxLinesInMultiLineView(self) -> int:
        """
        Get: MaxLinesInMultiLineView(self: _TableView) -> int
        Set: MaxLinesInMultiLineView(self: _TableView) = value
        """
        ...

    @property
    def MultiLine(self) -> OlMultiLine:
        """
        Get: MultiLine(self: _TableView) -> OlMultiLine
        Set: MultiLine(self: _TableView) = value
        """
        ...

    @property
    def MultiLineWidth(self) -> int:
        """
        Get: MultiLineWidth(self: _TableView) -> int
        Set: MultiLineWidth(self: _TableView) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _TableView) -> str
        Set: Name(self: _TableView) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _TableView) -> object """
        ...

    @property
    def RowFont(self) -> ViewFont:
        """ Get: RowFont(self: _TableView) -> ViewFont """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: _TableView) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _TableView) -> NameSpace """
        ...

    @property
    def ShowConversationByDate(self) -> bool:
        """
        Get: ShowConversationByDate(self: _TableView) -> bool
        Set: ShowConversationByDate(self: _TableView) = value
        """
        ...

    @property
    def ShowConversationSendersAboveSubject(self) -> bool:
        """
        Get: ShowConversationSendersAboveSubject(self: _TableView) -> bool
        Set: ShowConversationSendersAboveSubject(self: _TableView) = value
        """
        ...

    @property
    def ShowFullConversations(self) -> bool:
        """
        Get: ShowFullConversations(self: _TableView) -> bool
        Set: ShowFullConversations(self: _TableView) = value
        """
        ...

    @property
    def ShowItemsInGroups(self) -> bool:
        """
        Get: ShowItemsInGroups(self: _TableView) -> bool
        Set: ShowItemsInGroups(self: _TableView) = value
        """
        ...

    @property
    def ShowNewItemRow(self) -> bool:
        """
        Get: ShowNewItemRow(self: _TableView) -> bool
        Set: ShowNewItemRow(self: _TableView) = value
        """
        ...

    @property
    def ShowReadingPane(self) -> bool:
        """
        Get: ShowReadingPane(self: _TableView) -> bool
        Set: ShowReadingPane(self: _TableView) = value
        """
        ...

    @property
    def ShowUnreadAndFlaggedMessages(self) -> bool:
        """
        Get: ShowUnreadAndFlaggedMessages(self: _TableView) -> bool
        Set: ShowUnreadAndFlaggedMessages(self: _TableView) = value
        """
        ...

    @property
    def SortFields(self) -> OrderFields:
        """ Get: SortFields(self: _TableView) -> OrderFields """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: _TableView) -> bool """
        ...

    @property
    def ViewFields(self) -> ViewFields:
        """ Get: ViewFields(self: _TableView) -> ViewFields """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: _TableView) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: _TableView) -> str
        Set: XML(self: _TableView) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: _TableView) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: _TableView, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: _TableView) """
        ...

    def GetTable(self) -> Table:
        """ GetTable(self: _TableView) -> Table """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: _TableView, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: _TableView) """
        ...

    def Save(self): # -> 
        """ Save(self: _TableView) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class TableView(_TableView): # skipped bases: <type 'object'>
    """ no doc """
    pass

class TableViewClass(__ComObject, TableView): # skipped bases: <type '_TableView'>, <type 'object'>
    """ no doc """
    @property
    def AllowInCellEditing(self) -> bool:
        """
        Get: AllowInCellEditing(self: TableViewClass) -> bool
        Set: AllowInCellEditing(self: TableViewClass) = value
        """
        ...

    @property
    def AlwaysExpandConversation(self) -> bool:
        """
        Get: AlwaysExpandConversation(self: TableViewClass) -> bool
        Set: AlwaysExpandConversation(self: TableViewClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableViewClass) -> Application """
        ...

    @property
    def AutoFormatRules(self) -> AutoFormatRules:
        """ Get: AutoFormatRules(self: TableViewClass) -> AutoFormatRules """
        ...

    @property
    def AutomaticColumnSizing(self) -> bool:
        """
        Get: AutomaticColumnSizing(self: TableViewClass) -> bool
        Set: AutomaticColumnSizing(self: TableViewClass) = value
        """
        ...

    @property
    def AutomaticGrouping(self) -> bool:
        """
        Get: AutomaticGrouping(self: TableViewClass) -> bool
        Set: AutomaticGrouping(self: TableViewClass) = value
        """
        ...

    @property
    def AutoPreview(self) -> OlAutoPreview:
        """
        Get: AutoPreview(self: TableViewClass) -> OlAutoPreview
        Set: AutoPreview(self: TableViewClass) = value
        """
        ...

    @property
    def AutoPreviewFont(self) -> ViewFont:
        """ Get: AutoPreviewFont(self: TableViewClass) -> ViewFont """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TableViewClass) -> OlObjectClass """
        ...

    @property
    def ColumnFont(self) -> ViewFont:
        """ Get: ColumnFont(self: TableViewClass) -> ViewFont """
        ...

    @property
    def DefaultExpandCollapseSetting(self) -> OlDefaultExpandCollapseSetting:
        """
        Get: DefaultExpandCollapseSetting(self: TableViewClass) -> OlDefaultExpandCollapseSetting
        Set: DefaultExpandCollapseSetting(self: TableViewClass) = value
        """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: TableViewClass) -> str
        Set: Filter(self: TableViewClass) = value
        """
        ...

    @property
    def GridLineStyle(self) -> OlGridLineStyle:
        """
        Get: GridLineStyle(self: TableViewClass) -> OlGridLineStyle
        Set: GridLineStyle(self: TableViewClass) = value
        """
        ...

    @property
    def GroupByFields(self) -> OrderFields:
        """ Get: GroupByFields(self: TableViewClass) -> OrderFields """
        ...

    @property
    def HideReadingPaneHeaderInfo(self) -> bool:
        """
        Get: HideReadingPaneHeaderInfo(self: TableViewClass) -> bool
        Set: HideReadingPaneHeaderInfo(self: TableViewClass) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: TableViewClass) -> str
        Set: Language(self: TableViewClass) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: TableViewClass) -> bool
        Set: LockUserChanges(self: TableViewClass) = value
        """
        ...

    @property
    def MaxLinesInMultiLineView(self) -> int:
        """
        Get: MaxLinesInMultiLineView(self: TableViewClass) -> int
        Set: MaxLinesInMultiLineView(self: TableViewClass) = value
        """
        ...

    @property
    def MultiLine(self) -> OlMultiLine:
        """
        Get: MultiLine(self: TableViewClass) -> OlMultiLine
        Set: MultiLine(self: TableViewClass) = value
        """
        ...

    @property
    def MultiLineWidth(self) -> int:
        """
        Get: MultiLineWidth(self: TableViewClass) -> int
        Set: MultiLineWidth(self: TableViewClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: TableViewClass) -> str
        Set: Name(self: TableViewClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableViewClass) -> object """
        ...

    @property
    def RowFont(self) -> ViewFont:
        """ Get: RowFont(self: TableViewClass) -> ViewFont """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: TableViewClass) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TableViewClass) -> NameSpace """
        ...

    @property
    def ShowConversationByDate(self) -> bool:
        """
        Get: ShowConversationByDate(self: TableViewClass) -> bool
        Set: ShowConversationByDate(self: TableViewClass) = value
        """
        ...

    @property
    def ShowConversationSendersAboveSubject(self) -> bool:
        """
        Get: ShowConversationSendersAboveSubject(self: TableViewClass) -> bool
        Set: ShowConversationSendersAboveSubject(self: TableViewClass) = value
        """
        ...

    @property
    def ShowFullConversations(self) -> bool:
        """
        Get: ShowFullConversations(self: TableViewClass) -> bool
        Set: ShowFullConversations(self: TableViewClass) = value
        """
        ...

    @property
    def ShowItemsInGroups(self) -> bool:
        """
        Get: ShowItemsInGroups(self: TableViewClass) -> bool
        Set: ShowItemsInGroups(self: TableViewClass) = value
        """
        ...

    @property
    def ShowNewItemRow(self) -> bool:
        """
        Get: ShowNewItemRow(self: TableViewClass) -> bool
        Set: ShowNewItemRow(self: TableViewClass) = value
        """
        ...

    @property
    def ShowReadingPane(self) -> bool:
        """
        Get: ShowReadingPane(self: TableViewClass) -> bool
        Set: ShowReadingPane(self: TableViewClass) = value
        """
        ...

    @property
    def ShowUnreadAndFlaggedMessages(self) -> bool:
        """
        Get: ShowUnreadAndFlaggedMessages(self: TableViewClass) -> bool
        Set: ShowUnreadAndFlaggedMessages(self: TableViewClass) = value
        """
        ...

    @property
    def SortFields(self) -> OrderFields:
        """ Get: SortFields(self: TableViewClass) -> OrderFields """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: TableViewClass) -> bool """
        ...

    @property
    def ViewFields(self) -> ViewFields:
        """ Get: ViewFields(self: TableViewClass) -> ViewFields """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: TableViewClass) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: TableViewClass) -> str
        Set: XML(self: TableViewClass) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: TableViewClass) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: TableViewClass, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: TableViewClass) """
        ...

    def GetTable(self) -> Table:
        """ GetTable(self: TableViewClass) -> Table """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: TableViewClass, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: TableViewClass) """
        ...

    def Save(self): # -> 
        """ Save(self: TableViewClass) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class _TaskItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _TaskItem) -> Actions """
        ...

    @property
    def ActualWork(self) -> int:
        """
        Get: ActualWork(self: _TaskItem) -> int
        Set: ActualWork(self: _TaskItem) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _TaskItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _TaskItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _TaskItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _TaskItem) -> str
        Set: BillingInformation(self: _TaskItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _TaskItem) -> str
        Set: Body(self: _TaskItem) = value
        """
        ...

    @property
    def CardData(self) -> str:
        """
        Get: CardData(self: _TaskItem) -> str
        Set: CardData(self: _TaskItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _TaskItem) -> str
        Set: Categories(self: _TaskItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _TaskItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _TaskItem) -> str
        Set: Companies(self: _TaskItem) = value
        """
        ...

    @property
    def Complete(self) -> bool:
        """
        Get: Complete(self: _TaskItem) -> bool
        Set: Complete(self: _TaskItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _TaskItem) -> Conflicts """
        ...

    @property
    def ContactNames(self) -> str:
        """
        Get: ContactNames(self: _TaskItem) -> str
        Set: ContactNames(self: _TaskItem) = value
        """
        ...

    @property
    def Contacts(self) -> str:
        """
        Get: Contacts(self: _TaskItem) -> str
        Set: Contacts(self: _TaskItem) = value
        """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _TaskItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _TaskItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _TaskItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _TaskItem) -> DateTime """
        ...

    @property
    def DateCompleted(self) -> DateTime:
        """
        Get: DateCompleted(self: _TaskItem) -> DateTime
        Set: DateCompleted(self: _TaskItem) = value
        """
        ...

    @property
    def DelegationState(self) -> OlTaskDelegationState:
        """ Get: DelegationState(self: _TaskItem) -> OlTaskDelegationState """
        ...

    @property
    def Delegator(self) -> str:
        """ Get: Delegator(self: _TaskItem) -> str """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _TaskItem) -> OlDownloadState """
        ...

    @property
    def DueDate(self) -> DateTime:
        """
        Get: DueDate(self: _TaskItem) -> DateTime
        Set: DueDate(self: _TaskItem) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _TaskItem) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _TaskItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _TaskItem) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _TaskItem) -> OlImportance
        Set: Importance(self: _TaskItem) = value
        """
        ...

    @property
    def InternetCodepage(self) -> int:
        """
        Get: InternetCodepage(self: _TaskItem) -> int
        Set: InternetCodepage(self: _TaskItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _TaskItem) -> bool """
        ...

    @property
    def IsRecurring(self) -> bool:
        """ Get: IsRecurring(self: _TaskItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _TaskItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _TaskItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _TaskItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _TaskItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _TaskItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _TaskItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _TaskItem) -> str
        Set: MessageClass(self: _TaskItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _TaskItem) -> str
        Set: Mileage(self: _TaskItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _TaskItem) -> bool
        Set: NoAging(self: _TaskItem) = value
        """
        ...

    @property
    def Ordinal(self) -> int:
        """
        Get: Ordinal(self: _TaskItem) -> int
        Set: Ordinal(self: _TaskItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _TaskItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _TaskItem) -> str """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: _TaskItem) -> str
        Set: Owner(self: _TaskItem) = value
        """
        ...

    @property
    def Ownership(self) -> OlTaskOwnership:
        """ Get: Ownership(self: _TaskItem) -> OlTaskOwnership """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _TaskItem) -> object """
        ...

    @property
    def PercentComplete(self) -> int:
        """
        Get: PercentComplete(self: _TaskItem) -> int
        Set: PercentComplete(self: _TaskItem) = value
        """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _TaskItem) -> PropertyAccessor """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: _TaskItem) -> Recipients """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: _TaskItem) -> bool
        Set: ReminderOverrideDefault(self: _TaskItem) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: _TaskItem) -> bool
        Set: ReminderPlaySound(self: _TaskItem) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: _TaskItem) -> bool
        Set: ReminderSet(self: _TaskItem) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: _TaskItem) -> str
        Set: ReminderSoundFile(self: _TaskItem) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: _TaskItem) -> DateTime
        Set: ReminderTime(self: _TaskItem) = value
        """
        ...

    @property
    def ResponseState(self) -> OlTaskResponse:
        """ Get: ResponseState(self: _TaskItem) -> OlTaskResponse """
        ...

    @property
    def Role(self) -> str:
        """
        Get: Role(self: _TaskItem) -> str
        Set: Role(self: _TaskItem) = value
        """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _TaskItem) -> object
        Set: RTFBody(self: _TaskItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _TaskItem) -> bool """
        ...

    @property
    def SchedulePlusPriority(self) -> str:
        """
        Get: SchedulePlusPriority(self: _TaskItem) -> str
        Set: SchedulePlusPriority(self: _TaskItem) = value
        """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: _TaskItem) -> Account
        Set: SendUsingAccount(self: _TaskItem) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _TaskItem) -> OlSensitivity
        Set: Sensitivity(self: _TaskItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _TaskItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _TaskItem) -> int """
        ...

    @property
    def StartDate(self) -> DateTime:
        """
        Get: StartDate(self: _TaskItem) -> DateTime
        Set: StartDate(self: _TaskItem) = value
        """
        ...

    @property
    def Status(self) -> OlTaskStatus:
        """
        Get: Status(self: _TaskItem) -> OlTaskStatus
        Set: Status(self: _TaskItem) = value
        """
        ...

    @property
    def StatusOnCompletionRecipients(self) -> str:
        """
        Get: StatusOnCompletionRecipients(self: _TaskItem) -> str
        Set: StatusOnCompletionRecipients(self: _TaskItem) = value
        """
        ...

    @property
    def StatusUpdateRecipients(self) -> str:
        """
        Get: StatusUpdateRecipients(self: _TaskItem) -> str
        Set: StatusUpdateRecipients(self: _TaskItem) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _TaskItem) -> str
        Set: Subject(self: _TaskItem) = value
        """
        ...

    @property
    def TeamTask(self) -> bool:
        """
        Get: TeamTask(self: _TaskItem) -> bool
        Set: TeamTask(self: _TaskItem) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: _TaskItem) -> DateTime
        Set: ToDoTaskOrdinal(self: _TaskItem) = value
        """
        ...

    @property
    def TotalWork(self) -> int:
        """
        Get: TotalWork(self: _TaskItem) -> int
        Set: TotalWork(self: _TaskItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _TaskItem) -> bool
        Set: UnRead(self: _TaskItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _TaskItem) -> UserProperties """
        ...


    def Assign(self) -> TaskItem:
        """ Assign(self: _TaskItem) -> TaskItem """
        ...

    def CancelResponseState(self): # -> 
        """ CancelResponseState(self: _TaskItem) """
        ...

    def ClearRecurrencePattern(self): # -> 
        """ ClearRecurrencePattern(self: _TaskItem) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _TaskItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _TaskItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _TaskItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _TaskItem, Modal: object) """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _TaskItem) -> Conversation """
        ...

    def GetRecurrencePattern(self) -> RecurrencePattern:
        """ GetRecurrencePattern(self: _TaskItem) -> RecurrencePattern """
        ...

    def MarkComplete(self): # -> 
        """ MarkComplete(self: _TaskItem) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _TaskItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _TaskItem) """
        ...

    def Respond(self, Response:OlTaskResponse, fNoUI:object, fAdditionalTextDialog:object) -> TaskItem:
        """ Respond(self: _TaskItem, Response: OlTaskResponse, fNoUI: object, fAdditionalTextDialog: object) -> TaskItem """
        ...

    def Save(self): # -> 
        """ Save(self: _TaskItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _TaskItem, Path: str, Type: object) """
        ...

    def Send(self): # -> 
        """ Send(self: _TaskItem) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _TaskItem) """
        ...

    def SkipRecurrence(self) -> bool:
        """ SkipRecurrence(self: _TaskItem) -> bool """
        ...

    def StatusReport(self) -> object:
        """ StatusReport(self: _TaskItem) -> object """
        ...


class TaskItem(ItemEvents_10_Event, _TaskItem): # skipped bases: <type 'object'>
    """ no doc """
    pass

class TaskItemClass(ItemEvents_Event, TaskItem, __ComObject): # skipped bases: <type '_TaskItem'>, <type 'ItemEvents_10_Event'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: TaskItemClass) -> Actions """
        ...

    @property
    def ActualWork(self) -> int:
        """
        Get: ActualWork(self: TaskItemClass) -> int
        Set: ActualWork(self: TaskItemClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TaskItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: TaskItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: TaskItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: TaskItemClass) -> str
        Set: BillingInformation(self: TaskItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: TaskItemClass) -> str
        Set: Body(self: TaskItemClass) = value
        """
        ...

    @property
    def CardData(self) -> str:
        """
        Get: CardData(self: TaskItemClass) -> str
        Set: CardData(self: TaskItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: TaskItemClass) -> str
        Set: Categories(self: TaskItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TaskItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: TaskItemClass) -> str
        Set: Companies(self: TaskItemClass) = value
        """
        ...

    @property
    def Complete(self) -> bool:
        """
        Get: Complete(self: TaskItemClass) -> bool
        Set: Complete(self: TaskItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: TaskItemClass) -> Conflicts """
        ...

    @property
    def ContactNames(self) -> str:
        """
        Get: ContactNames(self: TaskItemClass) -> str
        Set: ContactNames(self: TaskItemClass) = value
        """
        ...

    @property
    def Contacts(self) -> str:
        """
        Get: Contacts(self: TaskItemClass) -> str
        Set: Contacts(self: TaskItemClass) = value
        """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: TaskItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: TaskItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: TaskItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: TaskItemClass) -> DateTime """
        ...

    @property
    def DateCompleted(self) -> DateTime:
        """
        Get: DateCompleted(self: TaskItemClass) -> DateTime
        Set: DateCompleted(self: TaskItemClass) = value
        """
        ...

    @property
    def DelegationState(self) -> OlTaskDelegationState:
        """ Get: DelegationState(self: TaskItemClass) -> OlTaskDelegationState """
        ...

    @property
    def Delegator(self) -> str:
        """ Get: Delegator(self: TaskItemClass) -> str """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: TaskItemClass) -> OlDownloadState """
        ...

    @property
    def DueDate(self) -> DateTime:
        """
        Get: DueDate(self: TaskItemClass) -> DateTime
        Set: DueDate(self: TaskItemClass) = value
        """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: TaskItemClass) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: TaskItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: TaskItemClass) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: TaskItemClass) -> OlImportance
        Set: Importance(self: TaskItemClass) = value
        """
        ...

    @property
    def InternetCodepage(self) -> int:
        """
        Get: InternetCodepage(self: TaskItemClass) -> int
        Set: InternetCodepage(self: TaskItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: TaskItemClass) -> bool """
        ...

    @property
    def IsRecurring(self) -> bool:
        """ Get: IsRecurring(self: TaskItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: TaskItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: TaskItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: TaskItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: TaskItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: TaskItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: TaskItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: TaskItemClass) -> str
        Set: MessageClass(self: TaskItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: TaskItemClass) -> str
        Set: Mileage(self: TaskItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: TaskItemClass) -> bool
        Set: NoAging(self: TaskItemClass) = value
        """
        ...

    @property
    def Ordinal(self) -> int:
        """
        Get: Ordinal(self: TaskItemClass) -> int
        Set: Ordinal(self: TaskItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: TaskItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: TaskItemClass) -> str """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: TaskItemClass) -> str
        Set: Owner(self: TaskItemClass) = value
        """
        ...

    @property
    def Ownership(self) -> OlTaskOwnership:
        """ Get: Ownership(self: TaskItemClass) -> OlTaskOwnership """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TaskItemClass) -> object """
        ...

    @property
    def PercentComplete(self) -> int:
        """
        Get: PercentComplete(self: TaskItemClass) -> int
        Set: PercentComplete(self: TaskItemClass) = value
        """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: TaskItemClass) -> PropertyAccessor """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: TaskItemClass) -> Recipients """
        ...

    @property
    def ReminderOverrideDefault(self) -> bool:
        """
        Get: ReminderOverrideDefault(self: TaskItemClass) -> bool
        Set: ReminderOverrideDefault(self: TaskItemClass) = value
        """
        ...

    @property
    def ReminderPlaySound(self) -> bool:
        """
        Get: ReminderPlaySound(self: TaskItemClass) -> bool
        Set: ReminderPlaySound(self: TaskItemClass) = value
        """
        ...

    @property
    def ReminderSet(self) -> bool:
        """
        Get: ReminderSet(self: TaskItemClass) -> bool
        Set: ReminderSet(self: TaskItemClass) = value
        """
        ...

    @property
    def ReminderSoundFile(self) -> str:
        """
        Get: ReminderSoundFile(self: TaskItemClass) -> str
        Set: ReminderSoundFile(self: TaskItemClass) = value
        """
        ...

    @property
    def ReminderTime(self) -> DateTime:
        """
        Get: ReminderTime(self: TaskItemClass) -> DateTime
        Set: ReminderTime(self: TaskItemClass) = value
        """
        ...

    @property
    def ResponseState(self) -> OlTaskResponse:
        """ Get: ResponseState(self: TaskItemClass) -> OlTaskResponse """
        ...

    @property
    def Role(self) -> str:
        """
        Get: Role(self: TaskItemClass) -> str
        Set: Role(self: TaskItemClass) = value
        """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: TaskItemClass) -> object
        Set: RTFBody(self: TaskItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: TaskItemClass) -> bool """
        ...

    @property
    def SchedulePlusPriority(self) -> str:
        """
        Get: SchedulePlusPriority(self: TaskItemClass) -> str
        Set: SchedulePlusPriority(self: TaskItemClass) = value
        """
        ...

    @property
    def SendUsingAccount(self) -> Account:
        """
        Get: SendUsingAccount(self: TaskItemClass) -> Account
        Set: SendUsingAccount(self: TaskItemClass) = value
        """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: TaskItemClass) -> OlSensitivity
        Set: Sensitivity(self: TaskItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TaskItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: TaskItemClass) -> int """
        ...

    @property
    def StartDate(self) -> DateTime:
        """
        Get: StartDate(self: TaskItemClass) -> DateTime
        Set: StartDate(self: TaskItemClass) = value
        """
        ...

    @property
    def Status(self) -> OlTaskStatus:
        """
        Get: Status(self: TaskItemClass) -> OlTaskStatus
        Set: Status(self: TaskItemClass) = value
        """
        ...

    @property
    def StatusOnCompletionRecipients(self) -> str:
        """
        Get: StatusOnCompletionRecipients(self: TaskItemClass) -> str
        Set: StatusOnCompletionRecipients(self: TaskItemClass) = value
        """
        ...

    @property
    def StatusUpdateRecipients(self) -> str:
        """
        Get: StatusUpdateRecipients(self: TaskItemClass) -> str
        Set: StatusUpdateRecipients(self: TaskItemClass) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: TaskItemClass) -> str
        Set: Subject(self: TaskItemClass) = value
        """
        ...

    @property
    def TeamTask(self) -> bool:
        """
        Get: TeamTask(self: TaskItemClass) -> bool
        Set: TeamTask(self: TaskItemClass) = value
        """
        ...

    @property
    def ToDoTaskOrdinal(self) -> DateTime:
        """
        Get: ToDoTaskOrdinal(self: TaskItemClass) -> DateTime
        Set: ToDoTaskOrdinal(self: TaskItemClass) = value
        """
        ...

    @property
    def TotalWork(self) -> int:
        """
        Get: TotalWork(self: TaskItemClass) -> int
        Set: TotalWork(self: TaskItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: TaskItemClass) -> bool
        Set: UnRead(self: TaskItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: TaskItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: TaskItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: TaskItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: TaskItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: TaskItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: TaskItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: TaskItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: TaskItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: TaskItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: TaskItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: TaskItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: TaskItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Assign(self) -> TaskItem:
        """ Assign(self: TaskItemClass) -> TaskItem """
        ...

    def CancelResponseState(self): # -> 
        """ CancelResponseState(self: TaskItemClass) """
        ...

    def ClearRecurrencePattern(self): # -> 
        """ ClearRecurrencePattern(self: TaskItemClass) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: TaskItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: TaskItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: TaskItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: TaskItemClass, Modal: object) """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: TaskItemClass) -> Conversation """
        ...

    def GetRecurrencePattern(self) -> RecurrencePattern:
        """ GetRecurrencePattern(self: TaskItemClass) -> RecurrencePattern """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: TaskItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: TaskItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: TaskItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: TaskItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: TaskItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: TaskItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: TaskItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: TaskItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: TaskItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: TaskItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: TaskItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: TaskItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: TaskItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: TaskItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: TaskItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: TaskItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: TaskItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: TaskItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: TaskItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: TaskItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: TaskItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: TaskItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: TaskItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: TaskItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: TaskItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: TaskItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: TaskItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: TaskItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: TaskItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: TaskItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def MarkComplete(self): # -> 
        """ MarkComplete(self: TaskItemClass) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: TaskItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: TaskItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: TaskItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: TaskItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: TaskItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: TaskItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: TaskItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: TaskItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: TaskItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: TaskItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: TaskItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: TaskItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: TaskItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Respond(self, Response:OlTaskResponse, fNoUI:object, fAdditionalTextDialog:object) -> TaskItem:
        """ Respond(self: TaskItemClass, Response: OlTaskResponse, fNoUI: object, fAdditionalTextDialog: object) -> TaskItem """
        ...

    def Save(self): # -> 
        """ Save(self: TaskItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: TaskItemClass, Path: str, Type: object) """
        ...

    def Send(self): # -> 
        """ Send(self: TaskItemClass) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: TaskItemClass) """
        ...

    def SkipRecurrence(self) -> bool:
        """ SkipRecurrence(self: TaskItemClass) -> bool """
        ...

    def StatusReport(self) -> object:
        """ StatusReport(self: TaskItemClass) -> object """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_10_Event_Send = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Unload = ...
    Write = ...


class _TaskRequestAcceptItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _TaskRequestAcceptItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _TaskRequestAcceptItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _TaskRequestAcceptItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _TaskRequestAcceptItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _TaskRequestAcceptItem) -> str
        Set: BillingInformation(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _TaskRequestAcceptItem) -> str
        Set: Body(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _TaskRequestAcceptItem) -> str
        Set: Categories(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _TaskRequestAcceptItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _TaskRequestAcceptItem) -> str
        Set: Companies(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _TaskRequestAcceptItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _TaskRequestAcceptItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _TaskRequestAcceptItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _TaskRequestAcceptItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _TaskRequestAcceptItem) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _TaskRequestAcceptItem) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _TaskRequestAcceptItem) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _TaskRequestAcceptItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _TaskRequestAcceptItem) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _TaskRequestAcceptItem) -> OlImportance
        Set: Importance(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _TaskRequestAcceptItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _TaskRequestAcceptItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _TaskRequestAcceptItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _TaskRequestAcceptItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _TaskRequestAcceptItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _TaskRequestAcceptItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _TaskRequestAcceptItem) -> str
        Set: MessageClass(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _TaskRequestAcceptItem) -> str
        Set: Mileage(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _TaskRequestAcceptItem) -> bool
        Set: NoAging(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _TaskRequestAcceptItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _TaskRequestAcceptItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _TaskRequestAcceptItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _TaskRequestAcceptItem) -> PropertyAccessor """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _TaskRequestAcceptItem) -> object
        Set: RTFBody(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _TaskRequestAcceptItem) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _TaskRequestAcceptItem) -> OlSensitivity
        Set: Sensitivity(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _TaskRequestAcceptItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _TaskRequestAcceptItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _TaskRequestAcceptItem) -> str
        Set: Subject(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _TaskRequestAcceptItem) -> bool
        Set: UnRead(self: _TaskRequestAcceptItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _TaskRequestAcceptItem) -> UserProperties """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _TaskRequestAcceptItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _TaskRequestAcceptItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _TaskRequestAcceptItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _TaskRequestAcceptItem, Modal: object) """
        ...

    def GetAssociatedTask(self, AddToTaskList:bool) -> TaskItem:
        """ GetAssociatedTask(self: _TaskRequestAcceptItem, AddToTaskList: bool) -> TaskItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _TaskRequestAcceptItem) -> Conversation """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _TaskRequestAcceptItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _TaskRequestAcceptItem) """
        ...

    def Save(self): # -> 
        """ Save(self: _TaskRequestAcceptItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _TaskRequestAcceptItem, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _TaskRequestAcceptItem) """
        ...


class TaskRequestAcceptItem(ItemEvents_10_Event, _TaskRequestAcceptItem): # skipped bases: <type 'object'>
    """ no doc """
    pass

class TaskRequestAcceptItemClass(ItemEvents_Event, TaskRequestAcceptItem, __ComObject): # skipped bases: <type '_TaskRequestAcceptItem'>, <type 'ItemEvents_10_Event'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: TaskRequestAcceptItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TaskRequestAcceptItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: TaskRequestAcceptItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: TaskRequestAcceptItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: TaskRequestAcceptItemClass) -> str
        Set: BillingInformation(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: TaskRequestAcceptItemClass) -> str
        Set: Body(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: TaskRequestAcceptItemClass) -> str
        Set: Categories(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TaskRequestAcceptItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: TaskRequestAcceptItemClass) -> str
        Set: Companies(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: TaskRequestAcceptItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: TaskRequestAcceptItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: TaskRequestAcceptItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: TaskRequestAcceptItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: TaskRequestAcceptItemClass) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: TaskRequestAcceptItemClass) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: TaskRequestAcceptItemClass) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: TaskRequestAcceptItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: TaskRequestAcceptItemClass) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: TaskRequestAcceptItemClass) -> OlImportance
        Set: Importance(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: TaskRequestAcceptItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: TaskRequestAcceptItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: TaskRequestAcceptItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: TaskRequestAcceptItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: TaskRequestAcceptItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: TaskRequestAcceptItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: TaskRequestAcceptItemClass) -> str
        Set: MessageClass(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: TaskRequestAcceptItemClass) -> str
        Set: Mileage(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: TaskRequestAcceptItemClass) -> bool
        Set: NoAging(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: TaskRequestAcceptItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: TaskRequestAcceptItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TaskRequestAcceptItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: TaskRequestAcceptItemClass) -> PropertyAccessor """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: TaskRequestAcceptItemClass) -> object
        Set: RTFBody(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: TaskRequestAcceptItemClass) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: TaskRequestAcceptItemClass) -> OlSensitivity
        Set: Sensitivity(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TaskRequestAcceptItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: TaskRequestAcceptItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: TaskRequestAcceptItemClass) -> str
        Set: Subject(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: TaskRequestAcceptItemClass) -> bool
        Set: UnRead(self: TaskRequestAcceptItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: TaskRequestAcceptItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: TaskRequestAcceptItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: TaskRequestAcceptItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: TaskRequestAcceptItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: TaskRequestAcceptItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: TaskRequestAcceptItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: TaskRequestAcceptItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: TaskRequestAcceptItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: TaskRequestAcceptItemClass, Modal: object) """
        ...

    def GetAssociatedTask(self, AddToTaskList:bool) -> TaskItem:
        """ GetAssociatedTask(self: TaskRequestAcceptItemClass, AddToTaskList: bool) -> TaskItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: TaskRequestAcceptItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: TaskRequestAcceptItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: TaskRequestAcceptItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: TaskRequestAcceptItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: TaskRequestAcceptItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: TaskRequestAcceptItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: TaskRequestAcceptItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: TaskRequestAcceptItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: TaskRequestAcceptItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: TaskRequestAcceptItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: TaskRequestAcceptItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: TaskRequestAcceptItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: TaskRequestAcceptItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: TaskRequestAcceptItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: TaskRequestAcceptItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: TaskRequestAcceptItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: TaskRequestAcceptItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: TaskRequestAcceptItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: TaskRequestAcceptItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: TaskRequestAcceptItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: TaskRequestAcceptItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: TaskRequestAcceptItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: TaskRequestAcceptItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: TaskRequestAcceptItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: TaskRequestAcceptItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: TaskRequestAcceptItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: TaskRequestAcceptItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: TaskRequestAcceptItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: TaskRequestAcceptItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: TaskRequestAcceptItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: TaskRequestAcceptItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: TaskRequestAcceptItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: TaskRequestAcceptItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: TaskRequestAcceptItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: TaskRequestAcceptItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: TaskRequestAcceptItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: TaskRequestAcceptItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: TaskRequestAcceptItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Save(self): # -> 
        """ Save(self: TaskRequestAcceptItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: TaskRequestAcceptItemClass, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: TaskRequestAcceptItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Send = ...
    Unload = ...
    Write = ...


class _TaskRequestDeclineItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _TaskRequestDeclineItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _TaskRequestDeclineItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _TaskRequestDeclineItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _TaskRequestDeclineItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _TaskRequestDeclineItem) -> str
        Set: BillingInformation(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _TaskRequestDeclineItem) -> str
        Set: Body(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _TaskRequestDeclineItem) -> str
        Set: Categories(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _TaskRequestDeclineItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _TaskRequestDeclineItem) -> str
        Set: Companies(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _TaskRequestDeclineItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _TaskRequestDeclineItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _TaskRequestDeclineItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _TaskRequestDeclineItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _TaskRequestDeclineItem) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _TaskRequestDeclineItem) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _TaskRequestDeclineItem) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _TaskRequestDeclineItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _TaskRequestDeclineItem) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _TaskRequestDeclineItem) -> OlImportance
        Set: Importance(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _TaskRequestDeclineItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _TaskRequestDeclineItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _TaskRequestDeclineItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _TaskRequestDeclineItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _TaskRequestDeclineItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _TaskRequestDeclineItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _TaskRequestDeclineItem) -> str
        Set: MessageClass(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _TaskRequestDeclineItem) -> str
        Set: Mileage(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _TaskRequestDeclineItem) -> bool
        Set: NoAging(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _TaskRequestDeclineItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _TaskRequestDeclineItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _TaskRequestDeclineItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _TaskRequestDeclineItem) -> PropertyAccessor """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _TaskRequestDeclineItem) -> object
        Set: RTFBody(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _TaskRequestDeclineItem) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _TaskRequestDeclineItem) -> OlSensitivity
        Set: Sensitivity(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _TaskRequestDeclineItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _TaskRequestDeclineItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _TaskRequestDeclineItem) -> str
        Set: Subject(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _TaskRequestDeclineItem) -> bool
        Set: UnRead(self: _TaskRequestDeclineItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _TaskRequestDeclineItem) -> UserProperties """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _TaskRequestDeclineItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _TaskRequestDeclineItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _TaskRequestDeclineItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _TaskRequestDeclineItem, Modal: object) """
        ...

    def GetAssociatedTask(self, AddToTaskList:bool) -> TaskItem:
        """ GetAssociatedTask(self: _TaskRequestDeclineItem, AddToTaskList: bool) -> TaskItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _TaskRequestDeclineItem) -> Conversation """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _TaskRequestDeclineItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _TaskRequestDeclineItem) """
        ...

    def Save(self): # -> 
        """ Save(self: _TaskRequestDeclineItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _TaskRequestDeclineItem, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _TaskRequestDeclineItem) """
        ...


class TaskRequestDeclineItem(_TaskRequestDeclineItem, ItemEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class TaskRequestDeclineItemClass(TaskRequestDeclineItem, ItemEvents_Event, __ComObject): # skipped bases: <type 'ItemEvents_10_Event'>, <type '_TaskRequestDeclineItem'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: TaskRequestDeclineItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TaskRequestDeclineItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: TaskRequestDeclineItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: TaskRequestDeclineItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: TaskRequestDeclineItemClass) -> str
        Set: BillingInformation(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: TaskRequestDeclineItemClass) -> str
        Set: Body(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: TaskRequestDeclineItemClass) -> str
        Set: Categories(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TaskRequestDeclineItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: TaskRequestDeclineItemClass) -> str
        Set: Companies(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: TaskRequestDeclineItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: TaskRequestDeclineItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: TaskRequestDeclineItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: TaskRequestDeclineItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: TaskRequestDeclineItemClass) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: TaskRequestDeclineItemClass) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: TaskRequestDeclineItemClass) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: TaskRequestDeclineItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: TaskRequestDeclineItemClass) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: TaskRequestDeclineItemClass) -> OlImportance
        Set: Importance(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: TaskRequestDeclineItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: TaskRequestDeclineItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: TaskRequestDeclineItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: TaskRequestDeclineItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: TaskRequestDeclineItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: TaskRequestDeclineItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: TaskRequestDeclineItemClass) -> str
        Set: MessageClass(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: TaskRequestDeclineItemClass) -> str
        Set: Mileage(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: TaskRequestDeclineItemClass) -> bool
        Set: NoAging(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: TaskRequestDeclineItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: TaskRequestDeclineItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TaskRequestDeclineItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: TaskRequestDeclineItemClass) -> PropertyAccessor """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: TaskRequestDeclineItemClass) -> object
        Set: RTFBody(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: TaskRequestDeclineItemClass) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: TaskRequestDeclineItemClass) -> OlSensitivity
        Set: Sensitivity(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TaskRequestDeclineItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: TaskRequestDeclineItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: TaskRequestDeclineItemClass) -> str
        Set: Subject(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: TaskRequestDeclineItemClass) -> bool
        Set: UnRead(self: TaskRequestDeclineItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: TaskRequestDeclineItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: TaskRequestDeclineItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: TaskRequestDeclineItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: TaskRequestDeclineItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: TaskRequestDeclineItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: TaskRequestDeclineItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: TaskRequestDeclineItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: TaskRequestDeclineItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: TaskRequestDeclineItemClass, Modal: object) """
        ...

    def GetAssociatedTask(self, AddToTaskList:bool) -> TaskItem:
        """ GetAssociatedTask(self: TaskRequestDeclineItemClass, AddToTaskList: bool) -> TaskItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: TaskRequestDeclineItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: TaskRequestDeclineItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: TaskRequestDeclineItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: TaskRequestDeclineItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: TaskRequestDeclineItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: TaskRequestDeclineItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: TaskRequestDeclineItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: TaskRequestDeclineItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: TaskRequestDeclineItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: TaskRequestDeclineItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: TaskRequestDeclineItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: TaskRequestDeclineItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: TaskRequestDeclineItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: TaskRequestDeclineItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: TaskRequestDeclineItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: TaskRequestDeclineItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: TaskRequestDeclineItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: TaskRequestDeclineItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: TaskRequestDeclineItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: TaskRequestDeclineItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: TaskRequestDeclineItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: TaskRequestDeclineItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: TaskRequestDeclineItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: TaskRequestDeclineItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: TaskRequestDeclineItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: TaskRequestDeclineItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: TaskRequestDeclineItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: TaskRequestDeclineItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: TaskRequestDeclineItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: TaskRequestDeclineItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: TaskRequestDeclineItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: TaskRequestDeclineItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: TaskRequestDeclineItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: TaskRequestDeclineItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: TaskRequestDeclineItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: TaskRequestDeclineItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: TaskRequestDeclineItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: TaskRequestDeclineItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Save(self): # -> 
        """ Save(self: TaskRequestDeclineItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: TaskRequestDeclineItemClass, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: TaskRequestDeclineItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Send = ...
    Unload = ...
    Write = ...


class _TaskRequestItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _TaskRequestItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _TaskRequestItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _TaskRequestItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _TaskRequestItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _TaskRequestItem) -> str
        Set: BillingInformation(self: _TaskRequestItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _TaskRequestItem) -> str
        Set: Body(self: _TaskRequestItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _TaskRequestItem) -> str
        Set: Categories(self: _TaskRequestItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _TaskRequestItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _TaskRequestItem) -> str
        Set: Companies(self: _TaskRequestItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _TaskRequestItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _TaskRequestItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _TaskRequestItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _TaskRequestItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _TaskRequestItem) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _TaskRequestItem) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _TaskRequestItem) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _TaskRequestItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _TaskRequestItem) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _TaskRequestItem) -> OlImportance
        Set: Importance(self: _TaskRequestItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _TaskRequestItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _TaskRequestItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _TaskRequestItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _TaskRequestItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _TaskRequestItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _TaskRequestItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _TaskRequestItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _TaskRequestItem) -> str
        Set: MessageClass(self: _TaskRequestItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _TaskRequestItem) -> str
        Set: Mileage(self: _TaskRequestItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _TaskRequestItem) -> bool
        Set: NoAging(self: _TaskRequestItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _TaskRequestItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _TaskRequestItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _TaskRequestItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _TaskRequestItem) -> PropertyAccessor """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _TaskRequestItem) -> object
        Set: RTFBody(self: _TaskRequestItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _TaskRequestItem) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _TaskRequestItem) -> OlSensitivity
        Set: Sensitivity(self: _TaskRequestItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _TaskRequestItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _TaskRequestItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _TaskRequestItem) -> str
        Set: Subject(self: _TaskRequestItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _TaskRequestItem) -> bool
        Set: UnRead(self: _TaskRequestItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _TaskRequestItem) -> UserProperties """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _TaskRequestItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _TaskRequestItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _TaskRequestItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _TaskRequestItem, Modal: object) """
        ...

    def GetAssociatedTask(self, AddToTaskList:bool) -> TaskItem:
        """ GetAssociatedTask(self: _TaskRequestItem, AddToTaskList: bool) -> TaskItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _TaskRequestItem) -> Conversation """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _TaskRequestItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _TaskRequestItem) """
        ...

    def Save(self): # -> 
        """ Save(self: _TaskRequestItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _TaskRequestItem, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _TaskRequestItem) """
        ...


class TaskRequestItem(ItemEvents_10_Event, _TaskRequestItem): # skipped bases: <type 'object'>
    """ no doc """
    pass

class TaskRequestItemClass(TaskRequestItem, ItemEvents_Event, __ComObject): # skipped bases: <type '_TaskRequestItem'>, <type 'ItemEvents_10_Event'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: TaskRequestItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TaskRequestItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: TaskRequestItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: TaskRequestItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: TaskRequestItemClass) -> str
        Set: BillingInformation(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: TaskRequestItemClass) -> str
        Set: Body(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: TaskRequestItemClass) -> str
        Set: Categories(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TaskRequestItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: TaskRequestItemClass) -> str
        Set: Companies(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: TaskRequestItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: TaskRequestItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: TaskRequestItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: TaskRequestItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: TaskRequestItemClass) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: TaskRequestItemClass) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: TaskRequestItemClass) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: TaskRequestItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: TaskRequestItemClass) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: TaskRequestItemClass) -> OlImportance
        Set: Importance(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: TaskRequestItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: TaskRequestItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: TaskRequestItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: TaskRequestItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: TaskRequestItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: TaskRequestItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: TaskRequestItemClass) -> str
        Set: MessageClass(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: TaskRequestItemClass) -> str
        Set: Mileage(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: TaskRequestItemClass) -> bool
        Set: NoAging(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: TaskRequestItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: TaskRequestItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TaskRequestItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: TaskRequestItemClass) -> PropertyAccessor """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: TaskRequestItemClass) -> object
        Set: RTFBody(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: TaskRequestItemClass) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: TaskRequestItemClass) -> OlSensitivity
        Set: Sensitivity(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TaskRequestItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: TaskRequestItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: TaskRequestItemClass) -> str
        Set: Subject(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: TaskRequestItemClass) -> bool
        Set: UnRead(self: TaskRequestItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: TaskRequestItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: TaskRequestItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: TaskRequestItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: TaskRequestItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: TaskRequestItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: TaskRequestItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: TaskRequestItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: TaskRequestItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: TaskRequestItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: TaskRequestItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: TaskRequestItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: TaskRequestItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: TaskRequestItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: TaskRequestItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: TaskRequestItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: TaskRequestItemClass, Modal: object) """
        ...

    def GetAssociatedTask(self, AddToTaskList:bool) -> TaskItem:
        """ GetAssociatedTask(self: TaskRequestItemClass, AddToTaskList: bool) -> TaskItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: TaskRequestItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: TaskRequestItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: TaskRequestItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: TaskRequestItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: TaskRequestItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: TaskRequestItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: TaskRequestItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: TaskRequestItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: TaskRequestItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: TaskRequestItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: TaskRequestItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: TaskRequestItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: TaskRequestItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: TaskRequestItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: TaskRequestItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: TaskRequestItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: TaskRequestItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: TaskRequestItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: TaskRequestItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: TaskRequestItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: TaskRequestItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: TaskRequestItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: TaskRequestItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: TaskRequestItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: TaskRequestItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: TaskRequestItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: TaskRequestItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: TaskRequestItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: TaskRequestItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: TaskRequestItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: TaskRequestItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: TaskRequestItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: TaskRequestItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: TaskRequestItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: TaskRequestItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: TaskRequestItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: TaskRequestItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: TaskRequestItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: TaskRequestItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: TaskRequestItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: TaskRequestItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: TaskRequestItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: TaskRequestItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: TaskRequestItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Save(self): # -> 
        """ Save(self: TaskRequestItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: TaskRequestItemClass, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: TaskRequestItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Send = ...
    Unload = ...
    Write = ...


class _TaskRequestUpdateItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: _TaskRequestUpdateItem) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _TaskRequestUpdateItem) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: _TaskRequestUpdateItem) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: _TaskRequestUpdateItem) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: _TaskRequestUpdateItem) -> str
        Set: BillingInformation(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: _TaskRequestUpdateItem) -> str
        Set: Body(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: _TaskRequestUpdateItem) -> str
        Set: Categories(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _TaskRequestUpdateItem) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: _TaskRequestUpdateItem) -> str
        Set: Companies(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: _TaskRequestUpdateItem) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: _TaskRequestUpdateItem) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: _TaskRequestUpdateItem) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: _TaskRequestUpdateItem) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: _TaskRequestUpdateItem) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: _TaskRequestUpdateItem) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: _TaskRequestUpdateItem) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: _TaskRequestUpdateItem) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: _TaskRequestUpdateItem) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: _TaskRequestUpdateItem) -> OlImportance
        Set: Importance(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: _TaskRequestUpdateItem) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: _TaskRequestUpdateItem) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: _TaskRequestUpdateItem) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: _TaskRequestUpdateItem) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: _TaskRequestUpdateItem) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: _TaskRequestUpdateItem) -> OlRemoteStatus
        Set: MarkForDownload(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: _TaskRequestUpdateItem) -> str
        Set: MessageClass(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: _TaskRequestUpdateItem) -> str
        Set: Mileage(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: _TaskRequestUpdateItem) -> bool
        Set: NoAging(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: _TaskRequestUpdateItem) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: _TaskRequestUpdateItem) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _TaskRequestUpdateItem) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: _TaskRequestUpdateItem) -> PropertyAccessor """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: _TaskRequestUpdateItem) -> object
        Set: RTFBody(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: _TaskRequestUpdateItem) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: _TaskRequestUpdateItem) -> OlSensitivity
        Set: Sensitivity(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _TaskRequestUpdateItem) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: _TaskRequestUpdateItem) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _TaskRequestUpdateItem) -> str
        Set: Subject(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: _TaskRequestUpdateItem) -> bool
        Set: UnRead(self: _TaskRequestUpdateItem) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: _TaskRequestUpdateItem) -> UserProperties """
        ...


    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: _TaskRequestUpdateItem, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: _TaskRequestUpdateItem) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: _TaskRequestUpdateItem) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: _TaskRequestUpdateItem, Modal: object) """
        ...

    def GetAssociatedTask(self, AddToTaskList:bool) -> TaskItem:
        """ GetAssociatedTask(self: _TaskRequestUpdateItem, AddToTaskList: bool) -> TaskItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: _TaskRequestUpdateItem) -> Conversation """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: _TaskRequestUpdateItem, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: _TaskRequestUpdateItem) """
        ...

    def Save(self): # -> 
        """ Save(self: _TaskRequestUpdateItem) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: _TaskRequestUpdateItem, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: _TaskRequestUpdateItem) """
        ...


class TaskRequestUpdateItem(_TaskRequestUpdateItem, ItemEvents_10_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class TaskRequestUpdateItemClass(ItemEvents_Event, __ComObject, TaskRequestUpdateItem): # skipped bases: <type '_TaskRequestUpdateItem'>, <type 'ItemEvents_10_Event'>, <type 'object'>
    """ no doc """
    @property
    def Actions(self) -> Actions:
        """ Get: Actions(self: TaskRequestUpdateItemClass) -> Actions """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TaskRequestUpdateItemClass) -> Application """
        ...

    @property
    def Attachments(self) -> Attachments:
        """ Get: Attachments(self: TaskRequestUpdateItemClass) -> Attachments """
        ...

    @property
    def AutoResolvedWinner(self) -> bool:
        """ Get: AutoResolvedWinner(self: TaskRequestUpdateItemClass) -> bool """
        ...

    @property
    def BillingInformation(self) -> str:
        """
        Get: BillingInformation(self: TaskRequestUpdateItemClass) -> str
        Set: BillingInformation(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def Body(self) -> str:
        """
        Get: Body(self: TaskRequestUpdateItemClass) -> str
        Set: Body(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def Categories(self) -> str:
        """
        Get: Categories(self: TaskRequestUpdateItemClass) -> str
        Set: Categories(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TaskRequestUpdateItemClass) -> OlObjectClass """
        ...

    @property
    def Companies(self) -> str:
        """
        Get: Companies(self: TaskRequestUpdateItemClass) -> str
        Set: Companies(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: TaskRequestUpdateItemClass) -> Conflicts """
        ...

    @property
    def ConversationID(self) -> str:
        """ Get: ConversationID(self: TaskRequestUpdateItemClass) -> str """
        ...

    @property
    def ConversationIndex(self) -> str:
        """ Get: ConversationIndex(self: TaskRequestUpdateItemClass) -> str """
        ...

    @property
    def ConversationTopic(self) -> str:
        """ Get: ConversationTopic(self: TaskRequestUpdateItemClass) -> str """
        ...

    @property
    def CreationTime(self) -> DateTime:
        """ Get: CreationTime(self: TaskRequestUpdateItemClass) -> DateTime """
        ...

    @property
    def DownloadState(self) -> OlDownloadState:
        """ Get: DownloadState(self: TaskRequestUpdateItemClass) -> OlDownloadState """
        ...

    @property
    def EntryID(self) -> str:
        """ Get: EntryID(self: TaskRequestUpdateItemClass) -> str """
        ...

    @property
    def FormDescription(self) -> FormDescription:
        """ Get: FormDescription(self: TaskRequestUpdateItemClass) -> FormDescription """
        ...

    @property
    def GetInspector(self) -> Inspector:
        """ Get: GetInspector(self: TaskRequestUpdateItemClass) -> Inspector """
        ...

    @property
    def Importance(self) -> OlImportance:
        """
        Get: Importance(self: TaskRequestUpdateItemClass) -> OlImportance
        Set: Importance(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def IsConflict(self) -> bool:
        """ Get: IsConflict(self: TaskRequestUpdateItemClass) -> bool """
        ...

    @property
    def ItemProperties(self) -> ItemProperties:
        """ Get: ItemProperties(self: TaskRequestUpdateItemClass) -> ItemProperties """
        ...

    @property
    def LastModificationTime(self) -> DateTime:
        """ Get: LastModificationTime(self: TaskRequestUpdateItemClass) -> DateTime """
        ...

    @property
    def Links(self) -> Links:
        """ Get: Links(self: TaskRequestUpdateItemClass) -> Links """
        ...

    @property
    def MAPIOBJECT(self) -> object:
        """ Get: MAPIOBJECT(self: TaskRequestUpdateItemClass) -> object """
        ...

    @property
    def MarkForDownload(self) -> OlRemoteStatus:
        """
        Get: MarkForDownload(self: TaskRequestUpdateItemClass) -> OlRemoteStatus
        Set: MarkForDownload(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def MessageClass(self) -> str:
        """
        Get: MessageClass(self: TaskRequestUpdateItemClass) -> str
        Set: MessageClass(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def Mileage(self) -> str:
        """
        Get: Mileage(self: TaskRequestUpdateItemClass) -> str
        Set: Mileage(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def NoAging(self) -> bool:
        """
        Get: NoAging(self: TaskRequestUpdateItemClass) -> bool
        Set: NoAging(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def OutlookInternalVersion(self) -> int:
        """ Get: OutlookInternalVersion(self: TaskRequestUpdateItemClass) -> int """
        ...

    @property
    def OutlookVersion(self) -> str:
        """ Get: OutlookVersion(self: TaskRequestUpdateItemClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TaskRequestUpdateItemClass) -> object """
        ...

    @property
    def PropertyAccessor(self) -> PropertyAccessor:
        """ Get: PropertyAccessor(self: TaskRequestUpdateItemClass) -> PropertyAccessor """
        ...

    @property
    def RTFBody(self) -> object:
        """
        Get: RTFBody(self: TaskRequestUpdateItemClass) -> object
        Set: RTFBody(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def Saved(self) -> bool:
        """ Get: Saved(self: TaskRequestUpdateItemClass) -> bool """
        ...

    @property
    def Sensitivity(self) -> OlSensitivity:
        """
        Get: Sensitivity(self: TaskRequestUpdateItemClass) -> OlSensitivity
        Set: Sensitivity(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TaskRequestUpdateItemClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """ Get: Size(self: TaskRequestUpdateItemClass) -> int """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: TaskRequestUpdateItemClass) -> str
        Set: Subject(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def UnRead(self) -> bool:
        """
        Get: UnRead(self: TaskRequestUpdateItemClass) -> bool
        Set: UnRead(self: TaskRequestUpdateItemClass) = value
        """
        ...

    @property
    def UserProperties(self) -> UserProperties:
        """ Get: UserProperties(self: TaskRequestUpdateItemClass) -> UserProperties """
        ...


    def add_AfterWrite(self): # -> 
        """ add_AfterWrite(self: TaskRequestUpdateItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def add_AttachmentRemove(self): # -> 
        """ add_AttachmentRemove(self: TaskRequestUpdateItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def add_BeforeAttachmentAdd(self): # -> 
        """ add_BeforeAttachmentAdd(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def add_BeforeAttachmentPreview(self): # -> 
        """ add_BeforeAttachmentPreview(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def add_BeforeAttachmentRead(self): # -> 
        """ add_BeforeAttachmentRead(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def add_BeforeAttachmentWriteToTempFile(self): # -> 
        """ add_BeforeAttachmentWriteToTempFile(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def add_BeforeAutoSave(self): # -> 
        """ add_BeforeAutoSave(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def add_BeforeDelete(self): # -> 
        """ add_BeforeDelete(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def add_BeforeRead(self): # -> 
        """ add_BeforeRead(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def add_ReadComplete(self): # -> 
        """ add_ReadComplete(self: TaskRequestUpdateItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def add_Unload(self): # -> 
        """ add_Unload(self: TaskRequestUpdateItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Close(self, SaveMode:OlInspectorClose): # -> 
        """ Close(self: TaskRequestUpdateItemClass, SaveMode: OlInspectorClose) """
        ...

    def Copy(self) -> object:
        """ Copy(self: TaskRequestUpdateItemClass) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: TaskRequestUpdateItemClass) """
        ...

    def Display(self, Modal:object): # -> 
        """ Display(self: TaskRequestUpdateItemClass, Modal: object) """
        ...

    def GetAssociatedTask(self, AddToTaskList:bool) -> TaskItem:
        """ GetAssociatedTask(self: TaskRequestUpdateItemClass, AddToTaskList: bool) -> TaskItem """
        ...

    def GetConversation(self) -> Conversation:
        """ GetConversation(self: TaskRequestUpdateItemClass) -> Conversation """
        ...

    def ItemEvents_Event_add_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_add_AttachmentAdd(self: TaskRequestUpdateItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_add_AttachmentRead(self): # -> 
        """ ItemEvents_Event_add_AttachmentRead(self: TaskRequestUpdateItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_add_BeforeAttachmentSave(self: TaskRequestUpdateItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_add_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_add_BeforeCheckNames(self: TaskRequestUpdateItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_add_Close(self): # -> 
        """ ItemEvents_Event_add_Close(self: TaskRequestUpdateItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_add_CustomAction(self): # -> 
        """ ItemEvents_Event_add_CustomAction(self: TaskRequestUpdateItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_add_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_add_CustomPropertyChange(self: TaskRequestUpdateItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Forward(self): # -> 
        """ ItemEvents_Event_add_Forward(self: TaskRequestUpdateItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_add_Open(self): # -> 
        """ ItemEvents_Event_add_Open(self: TaskRequestUpdateItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_add_PropertyChange(self): # -> 
        """ ItemEvents_Event_add_PropertyChange(self: TaskRequestUpdateItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_add_Read(self): # -> 
        """ ItemEvents_Event_add_Read(self: TaskRequestUpdateItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_add_Reply(self): # -> 
        """ ItemEvents_Event_add_Reply(self: TaskRequestUpdateItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_add_ReplyAll(self): # -> 
        """ ItemEvents_Event_add_ReplyAll(self: TaskRequestUpdateItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_add_Send(self): # -> 
        """ ItemEvents_Event_add_Send(self: TaskRequestUpdateItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_add_Write(self): # -> 
        """ ItemEvents_Event_add_Write(self: TaskRequestUpdateItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentAdd(self): # -> 
        """ ItemEvents_Event_remove_AttachmentAdd(self: TaskRequestUpdateItemClass, : ItemEvents_AttachmentAddEventHandler) """
        ...

    def ItemEvents_Event_remove_AttachmentRead(self): # -> 
        """ ItemEvents_Event_remove_AttachmentRead(self: TaskRequestUpdateItemClass, : ItemEvents_AttachmentReadEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeAttachmentSave(self): # -> 
        """ ItemEvents_Event_remove_BeforeAttachmentSave(self: TaskRequestUpdateItemClass, : ItemEvents_BeforeAttachmentSaveEventHandler) """
        ...

    def ItemEvents_Event_remove_BeforeCheckNames(self): # -> 
        """ ItemEvents_Event_remove_BeforeCheckNames(self: TaskRequestUpdateItemClass, : ItemEvents_BeforeCheckNamesEventHandler) """
        ...

    def ItemEvents_Event_remove_Close(self): # -> 
        """ ItemEvents_Event_remove_Close(self: TaskRequestUpdateItemClass, : ItemEvents_CloseEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomAction(self): # -> 
        """ ItemEvents_Event_remove_CustomAction(self: TaskRequestUpdateItemClass, : ItemEvents_CustomActionEventHandler) """
        ...

    def ItemEvents_Event_remove_CustomPropertyChange(self): # -> 
        """ ItemEvents_Event_remove_CustomPropertyChange(self: TaskRequestUpdateItemClass, : ItemEvents_CustomPropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Forward(self): # -> 
        """ ItemEvents_Event_remove_Forward(self: TaskRequestUpdateItemClass, : ItemEvents_ForwardEventHandler) """
        ...

    def ItemEvents_Event_remove_Open(self): # -> 
        """ ItemEvents_Event_remove_Open(self: TaskRequestUpdateItemClass, : ItemEvents_OpenEventHandler) """
        ...

    def ItemEvents_Event_remove_PropertyChange(self): # -> 
        """ ItemEvents_Event_remove_PropertyChange(self: TaskRequestUpdateItemClass, : ItemEvents_PropertyChangeEventHandler) """
        ...

    def ItemEvents_Event_remove_Read(self): # -> 
        """ ItemEvents_Event_remove_Read(self: TaskRequestUpdateItemClass, : ItemEvents_ReadEventHandler) """
        ...

    def ItemEvents_Event_remove_Reply(self): # -> 
        """ ItemEvents_Event_remove_Reply(self: TaskRequestUpdateItemClass, : ItemEvents_ReplyEventHandler) """
        ...

    def ItemEvents_Event_remove_ReplyAll(self): # -> 
        """ ItemEvents_Event_remove_ReplyAll(self: TaskRequestUpdateItemClass, : ItemEvents_ReplyAllEventHandler) """
        ...

    def ItemEvents_Event_remove_Send(self): # -> 
        """ ItemEvents_Event_remove_Send(self: TaskRequestUpdateItemClass, : ItemEvents_SendEventHandler) """
        ...

    def ItemEvents_Event_remove_Write(self): # -> 
        """ ItemEvents_Event_remove_Write(self: TaskRequestUpdateItemClass, : ItemEvents_WriteEventHandler) """
        ...

    def Move(self, DestFldr:MAPIFolder) -> object:
        """ Move(self: TaskRequestUpdateItemClass, DestFldr: MAPIFolder) -> object """
        ...

    def PrintOut(self): # -> 
        """ PrintOut(self: TaskRequestUpdateItemClass) """
        ...

    def remove_AfterWrite(self): # -> 
        """ remove_AfterWrite(self: TaskRequestUpdateItemClass, : ItemEvents_10_AfterWriteEventHandler) """
        ...

    def remove_AttachmentRemove(self): # -> 
        """ remove_AttachmentRemove(self: TaskRequestUpdateItemClass, : ItemEvents_10_AttachmentRemoveEventHandler) """
        ...

    def remove_BeforeAttachmentAdd(self): # -> 
        """ remove_BeforeAttachmentAdd(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeAttachmentAddEventHandler) """
        ...

    def remove_BeforeAttachmentPreview(self): # -> 
        """ remove_BeforeAttachmentPreview(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeAttachmentPreviewEventHandler) """
        ...

    def remove_BeforeAttachmentRead(self): # -> 
        """ remove_BeforeAttachmentRead(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeAttachmentReadEventHandler) """
        ...

    def remove_BeforeAttachmentWriteToTempFile(self): # -> 
        """ remove_BeforeAttachmentWriteToTempFile(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler) """
        ...

    def remove_BeforeAutoSave(self): # -> 
        """ remove_BeforeAutoSave(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeAutoSaveEventHandler) """
        ...

    def remove_BeforeDelete(self): # -> 
        """ remove_BeforeDelete(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeDeleteEventHandler) """
        ...

    def remove_BeforeRead(self): # -> 
        """ remove_BeforeRead(self: TaskRequestUpdateItemClass, : ItemEvents_10_BeforeReadEventHandler) """
        ...

    def remove_ReadComplete(self): # -> 
        """ remove_ReadComplete(self: TaskRequestUpdateItemClass, : ItemEvents_10_ReadCompleteEventHandler) """
        ...

    def remove_Unload(self): # -> 
        """ remove_Unload(self: TaskRequestUpdateItemClass, : ItemEvents_10_UnloadEventHandler) """
        ...

    def Save(self): # -> 
        """ Save(self: TaskRequestUpdateItemClass) """
        ...

    def SaveAs(self, Path:str, Type:object): # -> 
        """ SaveAs(self: TaskRequestUpdateItemClass, Path: str, Type: object) """
        ...

    def ShowCategoriesDialog(self): # -> 
        """ ShowCategoriesDialog(self: TaskRequestUpdateItemClass) """
        ...

    AfterWrite = ...
    AttachmentAdd = ...
    AttachmentRead = ...
    AttachmentRemove = ...
    BeforeAttachmentAdd = ...
    BeforeAttachmentPreview = ...
    BeforeAttachmentRead = ...
    BeforeAttachmentSave = ...
    BeforeAttachmentWriteToTempFile = ...
    BeforeAutoSave = ...
    BeforeCheckNames = ...
    BeforeDelete = ...
    BeforeRead = ...
    CustomAction = ...
    CustomPropertyChange = ...
    Forward = ...
    ItemEvents_10_Event_Close = ...
    ItemEvents_Event_AttachmentAdd = ...
    ItemEvents_Event_AttachmentRead = ...
    ItemEvents_Event_BeforeAttachmentSave = ...
    ItemEvents_Event_BeforeCheckNames = ...
    ItemEvents_Event_Close = ...
    ItemEvents_Event_CustomAction = ...
    ItemEvents_Event_CustomPropertyChange = ...
    ItemEvents_Event_Forward = ...
    ItemEvents_Event_Open = ...
    ItemEvents_Event_PropertyChange = ...
    ItemEvents_Event_Read = ...
    ItemEvents_Event_Reply = ...
    ItemEvents_Event_ReplyAll = ...
    ItemEvents_Event_Send = ...
    ItemEvents_Event_Write = ...
    Open = ...
    PropertyChange = ...
    Read = ...
    ReadComplete = ...
    Reply = ...
    ReplyAll = ...
    Send = ...
    Unload = ...
    Write = ...


class _TasksModule: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _TasksModule) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _TasksModule) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _TasksModule) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: _TasksModule) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: _TasksModule) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _TasksModule) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: _TasksModule) -> int
        Set: Position(self: _TasksModule) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _TasksModule) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _TasksModule) -> bool
        Set: Visible(self: _TasksModule) = value
        """
        ...



class TasksModule(_TasksModule): # skipped bases: <type 'object'>
    """ no doc """
    pass

class TasksModuleClass(TasksModule, __ComObject): # skipped bases: <type '_TasksModule'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TasksModuleClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TasksModuleClass) -> OlObjectClass """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: TasksModuleClass) -> str """
        ...

    @property
    def NavigationGroups(self) -> NavigationGroups:
        """ Get: NavigationGroups(self: TasksModuleClass) -> NavigationGroups """
        ...

    @property
    def NavigationModuleType(self) -> OlNavigationModuleType:
        """ Get: NavigationModuleType(self: TasksModuleClass) -> OlNavigationModuleType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TasksModuleClass) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: TasksModuleClass) -> int
        Set: Position(self: TasksModuleClass) = value
        """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TasksModuleClass) -> NameSpace """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: TasksModuleClass) -> bool
        Set: Visible(self: TasksModuleClass) = value
        """
        ...



class _TextRuleCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _TextRuleCondition) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _TextRuleCondition) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: _TextRuleCondition) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _TextRuleCondition) -> bool
        Set: Enabled(self: _TextRuleCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _TextRuleCondition) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _TextRuleCondition) -> NameSpace """
        ...

    @property
    def Text(self) -> object:
        """
        Get: Text(self: _TextRuleCondition) -> object
        Set: Text(self: _TextRuleCondition) = value
        """
        ...



class TextRuleCondition(_TextRuleCondition): # skipped bases: <type 'object'>
    """ no doc """
    pass

class TextRuleConditionClass(TextRuleCondition, __ComObject): # skipped bases: <type '_TextRuleCondition'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TextRuleConditionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TextRuleConditionClass) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: TextRuleConditionClass) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: TextRuleConditionClass) -> bool
        Set: Enabled(self: TextRuleConditionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextRuleConditionClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TextRuleConditionClass) -> NameSpace """
        ...

    @property
    def Text(self) -> object:
        """
        Get: Text(self: TextRuleConditionClass) -> object
        Set: Text(self: TextRuleConditionClass) = value
        """
        ...



class _TimelineView: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _TimelineView) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _TimelineView) -> OlObjectClass """
        ...

    @property
    def DefaultExpandCollapseSetting(self) -> OlDefaultExpandCollapseSetting:
        """
        Get: DefaultExpandCollapseSetting(self: _TimelineView) -> OlDefaultExpandCollapseSetting
        Set: DefaultExpandCollapseSetting(self: _TimelineView) = value
        """
        ...

    @property
    def EndField(self) -> str:
        """
        Get: EndField(self: _TimelineView) -> str
        Set: EndField(self: _TimelineView) = value
        """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: _TimelineView) -> str
        Set: Filter(self: _TimelineView) = value
        """
        ...

    @property
    def GroupByFields(self) -> OrderFields:
        """ Get: GroupByFields(self: _TimelineView) -> OrderFields """
        ...

    @property
    def ItemFont(self) -> ViewFont:
        """ Get: ItemFont(self: _TimelineView) -> ViewFont """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: _TimelineView) -> str
        Set: Language(self: _TimelineView) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: _TimelineView) -> bool
        Set: LockUserChanges(self: _TimelineView) = value
        """
        ...

    @property
    def LowerScaleFont(self) -> ViewFont:
        """ Get: LowerScaleFont(self: _TimelineView) -> ViewFont """
        ...

    @property
    def MaxLabelWidth(self) -> int:
        """
        Get: MaxLabelWidth(self: _TimelineView) -> int
        Set: MaxLabelWidth(self: _TimelineView) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _TimelineView) -> str
        Set: Name(self: _TimelineView) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _TimelineView) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: _TimelineView) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _TimelineView) -> NameSpace """
        ...

    @property
    def ShowLabelWhenViewingByMonth(self) -> bool:
        """
        Get: ShowLabelWhenViewingByMonth(self: _TimelineView) -> bool
        Set: ShowLabelWhenViewingByMonth(self: _TimelineView) = value
        """
        ...

    @property
    def ShowWeekNumbers(self) -> bool:
        """
        Get: ShowWeekNumbers(self: _TimelineView) -> bool
        Set: ShowWeekNumbers(self: _TimelineView) = value
        """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: _TimelineView) -> bool """
        ...

    @property
    def StartField(self) -> str:
        """
        Get: StartField(self: _TimelineView) -> str
        Set: StartField(self: _TimelineView) = value
        """
        ...

    @property
    def TimelineViewMode(self) -> OlTimelineViewMode:
        """
        Get: TimelineViewMode(self: _TimelineView) -> OlTimelineViewMode
        Set: TimelineViewMode(self: _TimelineView) = value
        """
        ...

    @property
    def UpperScaleFont(self) -> ViewFont:
        """ Get: UpperScaleFont(self: _TimelineView) -> ViewFont """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: _TimelineView) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: _TimelineView) -> str
        Set: XML(self: _TimelineView) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: _TimelineView) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: _TimelineView, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: _TimelineView) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: _TimelineView, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: _TimelineView) """
        ...

    def Save(self): # -> 
        """ Save(self: _TimelineView) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class TimelineView(_TimelineView): # skipped bases: <type 'object'>
    """ no doc """
    pass

class TimelineViewClass(TimelineView, __ComObject): # skipped bases: <type '_TimelineView'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TimelineViewClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TimelineViewClass) -> OlObjectClass """
        ...

    @property
    def DefaultExpandCollapseSetting(self) -> OlDefaultExpandCollapseSetting:
        """
        Get: DefaultExpandCollapseSetting(self: TimelineViewClass) -> OlDefaultExpandCollapseSetting
        Set: DefaultExpandCollapseSetting(self: TimelineViewClass) = value
        """
        ...

    @property
    def EndField(self) -> str:
        """
        Get: EndField(self: TimelineViewClass) -> str
        Set: EndField(self: TimelineViewClass) = value
        """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: TimelineViewClass) -> str
        Set: Filter(self: TimelineViewClass) = value
        """
        ...

    @property
    def GroupByFields(self) -> OrderFields:
        """ Get: GroupByFields(self: TimelineViewClass) -> OrderFields """
        ...

    @property
    def ItemFont(self) -> ViewFont:
        """ Get: ItemFont(self: TimelineViewClass) -> ViewFont """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: TimelineViewClass) -> str
        Set: Language(self: TimelineViewClass) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: TimelineViewClass) -> bool
        Set: LockUserChanges(self: TimelineViewClass) = value
        """
        ...

    @property
    def LowerScaleFont(self) -> ViewFont:
        """ Get: LowerScaleFont(self: TimelineViewClass) -> ViewFont """
        ...

    @property
    def MaxLabelWidth(self) -> int:
        """
        Get: MaxLabelWidth(self: TimelineViewClass) -> int
        Set: MaxLabelWidth(self: TimelineViewClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: TimelineViewClass) -> str
        Set: Name(self: TimelineViewClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TimelineViewClass) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: TimelineViewClass) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TimelineViewClass) -> NameSpace """
        ...

    @property
    def ShowLabelWhenViewingByMonth(self) -> bool:
        """
        Get: ShowLabelWhenViewingByMonth(self: TimelineViewClass) -> bool
        Set: ShowLabelWhenViewingByMonth(self: TimelineViewClass) = value
        """
        ...

    @property
    def ShowWeekNumbers(self) -> bool:
        """
        Get: ShowWeekNumbers(self: TimelineViewClass) -> bool
        Set: ShowWeekNumbers(self: TimelineViewClass) = value
        """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: TimelineViewClass) -> bool """
        ...

    @property
    def StartField(self) -> str:
        """
        Get: StartField(self: TimelineViewClass) -> str
        Set: StartField(self: TimelineViewClass) = value
        """
        ...

    @property
    def TimelineViewMode(self) -> OlTimelineViewMode:
        """
        Get: TimelineViewMode(self: TimelineViewClass) -> OlTimelineViewMode
        Set: TimelineViewMode(self: TimelineViewClass) = value
        """
        ...

    @property
    def UpperScaleFont(self) -> ViewFont:
        """ Get: UpperScaleFont(self: TimelineViewClass) -> ViewFont """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: TimelineViewClass) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: TimelineViewClass) -> str
        Set: XML(self: TimelineViewClass) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: TimelineViewClass) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: TimelineViewClass, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: TimelineViewClass) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: TimelineViewClass, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: TimelineViewClass) """
        ...

    def Save(self): # -> 
        """ Save(self: TimelineViewClass) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class _TimeZone: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _TimeZone) -> Application """
        ...

    @property
    def Bias(self) -> int:
        """ Get: Bias(self: _TimeZone) -> int """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _TimeZone) -> OlObjectClass """
        ...

    @property
    def DaylightBias(self) -> int:
        """ Get: DaylightBias(self: _TimeZone) -> int """
        ...

    @property
    def DaylightDate(self) -> DateTime:
        """ Get: DaylightDate(self: _TimeZone) -> DateTime """
        ...

    @property
    def DaylightDesignation(self) -> str:
        """ Get: DaylightDesignation(self: _TimeZone) -> str """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: _TimeZone) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _TimeZone) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _TimeZone) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _TimeZone) -> NameSpace """
        ...

    @property
    def StandardBias(self) -> int:
        """ Get: StandardBias(self: _TimeZone) -> int """
        ...

    @property
    def StandardDate(self) -> DateTime:
        """ Get: StandardDate(self: _TimeZone) -> DateTime """
        ...

    @property
    def StandardDesignation(self) -> str:
        """ Get: StandardDesignation(self: _TimeZone) -> str """
        ...



class TimeZone(_TimeZone): # skipped bases: <type 'object'>
    """ no doc """
    pass

class TimeZoneClass(__ComObject, TimeZone): # skipped bases: <type '_TimeZone'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TimeZoneClass) -> Application """
        ...

    @property
    def Bias(self) -> int:
        """ Get: Bias(self: TimeZoneClass) -> int """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TimeZoneClass) -> OlObjectClass """
        ...

    @property
    def DaylightBias(self) -> int:
        """ Get: DaylightBias(self: TimeZoneClass) -> int """
        ...

    @property
    def DaylightDate(self) -> DateTime:
        """ Get: DaylightDate(self: TimeZoneClass) -> DateTime """
        ...

    @property
    def DaylightDesignation(self) -> str:
        """ Get: DaylightDesignation(self: TimeZoneClass) -> str """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: TimeZoneClass) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: TimeZoneClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TimeZoneClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TimeZoneClass) -> NameSpace """
        ...

    @property
    def StandardBias(self) -> int:
        """ Get: StandardBias(self: TimeZoneClass) -> int """
        ...

    @property
    def StandardDate(self) -> DateTime:
        """ Get: StandardDate(self: TimeZoneClass) -> DateTime """
        ...

    @property
    def StandardDesignation(self) -> str:
        """ Get: StandardDesignation(self: TimeZoneClass) -> str """
        ...



class _TimeZones(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _TimeZones) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _TimeZones) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _TimeZones) -> int """
        ...

    @property
    def CurrentTimeZone(self) -> TimeZone:
        """ Get: CurrentTimeZone(self: _TimeZones) -> TimeZone """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _TimeZones) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _TimeZones) -> NameSpace """
        ...


    def ConvertTime(self, SourceDateTime:DateTime, SourceTimeZone:TimeZone, DestinationTimeZone:TimeZone) -> DateTime:
        """ ConvertTime(self: _TimeZones, SourceDateTime: DateTime, SourceTimeZone: TimeZone, DestinationTimeZone: TimeZone) -> DateTime """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TimeZones(_TimeZones): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class TimeZonesClass(TimeZones, __ComObject): # skipped bases: <type '_TimeZones'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TimeZonesClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: TimeZonesClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TimeZonesClass) -> int """
        ...

    @property
    def CurrentTimeZone(self) -> TimeZone:
        """ Get: CurrentTimeZone(self: TimeZonesClass) -> TimeZone """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TimeZonesClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: TimeZonesClass) -> NameSpace """
        ...


    def ConvertTime(self, SourceDateTime:DateTime, SourceTimeZone:TimeZone, DestinationTimeZone:TimeZone) -> DateTime:
        """ ConvertTime(self: TimeZonesClass, SourceDateTime: DateTime, SourceTimeZone: TimeZone, DestinationTimeZone: TimeZone) -> DateTime """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _ToOrFromRuleCondition: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ToOrFromRuleCondition) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ToOrFromRuleCondition) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: _ToOrFromRuleCondition) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: _ToOrFromRuleCondition) -> bool
        Set: Enabled(self: _ToOrFromRuleCondition) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ToOrFromRuleCondition) -> object """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: _ToOrFromRuleCondition) -> Recipients """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ToOrFromRuleCondition) -> NameSpace """
        ...



class ToOrFromRuleCondition(_ToOrFromRuleCondition): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ToOrFromRuleConditionClass(ToOrFromRuleCondition, __ComObject): # skipped bases: <type '_ToOrFromRuleCondition'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ToOrFromRuleConditionClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ToOrFromRuleConditionClass) -> OlObjectClass """
        ...

    @property
    def ConditionType(self) -> OlRuleConditionType:
        """ Get: ConditionType(self: ToOrFromRuleConditionClass) -> OlRuleConditionType """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ToOrFromRuleConditionClass) -> bool
        Set: Enabled(self: ToOrFromRuleConditionClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ToOrFromRuleConditionClass) -> object """
        ...

    @property
    def Recipients(self) -> Recipients:
        """ Get: Recipients(self: ToOrFromRuleConditionClass) -> Recipients """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ToOrFromRuleConditionClass) -> NameSpace """
        ...



class _UserDefinedProperties(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _UserDefinedProperties) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _UserDefinedProperties) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _UserDefinedProperties) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _UserDefinedProperties) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _UserDefinedProperties) -> NameSpace """
        ...


    def Add(self, Name:str, Type:OlUserPropertyType, DisplayFormat:object, Formula:object) -> UserDefinedProperty:
        """ Add(self: _UserDefinedProperties, Name: str, Type: OlUserPropertyType, DisplayFormat: object, Formula: object) -> UserDefinedProperty """
        ...

    def Find(self, Name:str) -> UserDefinedProperty:
        """ Find(self: _UserDefinedProperties, Name: str) -> UserDefinedProperty """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: _UserDefinedProperties) """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: _UserDefinedProperties, Index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class UserDefinedProperties(_UserDefinedProperties): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class UserDefinedPropertiesClass(UserDefinedProperties, __ComObject): # skipped bases: <type '_UserDefinedProperties'>, <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: UserDefinedPropertiesClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: UserDefinedPropertiesClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: UserDefinedPropertiesClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: UserDefinedPropertiesClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: UserDefinedPropertiesClass) -> NameSpace """
        ...


    def Add(self, Name:str, Type:OlUserPropertyType, DisplayFormat:object, Formula:object) -> UserDefinedProperty:
        """ Add(self: UserDefinedPropertiesClass, Name: str, Type: OlUserPropertyType, DisplayFormat: object, Formula: object) -> UserDefinedProperty """
        ...

    def Find(self, Name:str) -> UserDefinedProperty:
        """ Find(self: UserDefinedPropertiesClass, Name: str) -> UserDefinedProperty """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: UserDefinedPropertiesClass) """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: UserDefinedPropertiesClass, Index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _UserDefinedProperty: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _UserDefinedProperty) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _UserDefinedProperty) -> OlObjectClass """
        ...

    @property
    def DisplayFormat(self) -> int:
        """ Get: DisplayFormat(self: _UserDefinedProperty) -> int """
        ...

    @property
    def Formula(self) -> str:
        """ Get: Formula(self: _UserDefinedProperty) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _UserDefinedProperty) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _UserDefinedProperty) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _UserDefinedProperty) -> NameSpace """
        ...

    @property
    def Type(self) -> OlUserPropertyType:
        """ Get: Type(self: _UserDefinedProperty) -> OlUserPropertyType """
        ...


    def Delete(self): # -> 
        """ Delete(self: _UserDefinedProperty) """
        ...


class UserDefinedProperty(_UserDefinedProperty): # skipped bases: <type 'object'>
    """ no doc """
    pass

class UserDefinedPropertyClass(UserDefinedProperty, __ComObject): # skipped bases: <type '_UserDefinedProperty'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: UserDefinedPropertyClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: UserDefinedPropertyClass) -> OlObjectClass """
        ...

    @property
    def DisplayFormat(self) -> int:
        """ Get: DisplayFormat(self: UserDefinedPropertyClass) -> int """
        ...

    @property
    def Formula(self) -> str:
        """ Get: Formula(self: UserDefinedPropertyClass) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: UserDefinedPropertyClass) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: UserDefinedPropertyClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: UserDefinedPropertyClass) -> NameSpace """
        ...

    @property
    def Type(self) -> OlUserPropertyType:
        """ Get: Type(self: UserDefinedPropertyClass) -> OlUserPropertyType """
        ...


    def Delete(self): # -> 
        """ Delete(self: UserDefinedPropertyClass) """
        ...


class UserProperties(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: UserProperties) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: UserProperties) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: UserProperties) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: UserProperties) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: UserProperties) -> NameSpace """
        ...


    def Add(self, Name:str, Type:OlUserPropertyType, AddToFolderFields:object, DisplayFormat:object) -> UserProperty:
        """ Add(self: UserProperties, Name: str, Type: OlUserPropertyType, AddToFolderFields: object, DisplayFormat: object) -> UserProperty """
        ...

    def Find(self, Name:str, Custom:object) -> UserProperty:
        """ Find(self: UserProperties, Name: str, Custom: object) -> UserProperty """
        ...

    def Remove(self, Index:int): # -> 
        """ Remove(self: UserProperties, Index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class UserProperty: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: UserProperty) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: UserProperty) -> OlObjectClass """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: UserProperty) -> str
        Set: Formula(self: UserProperty) = value
        """
        ...

    @property
    def IsUserProperty(self) -> bool:
        """ Get: IsUserProperty(self: UserProperty) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: UserProperty) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: UserProperty) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: UserProperty) -> NameSpace """
        ...

    @property
    def Type(self) -> OlUserPropertyType:
        """ Get: Type(self: UserProperty) -> OlUserPropertyType """
        ...

    @property
    def ValidationFormula(self) -> str:
        """
        Get: ValidationFormula(self: UserProperty) -> str
        Set: ValidationFormula(self: UserProperty) = value
        """
        ...

    @property
    def ValidationText(self) -> str:
        """
        Get: ValidationText(self: UserProperty) -> str
        Set: ValidationText(self: UserProperty) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: UserProperty) -> object
        Set: Value(self: UserProperty) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: UserProperty) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class View: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: View) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: View) -> OlObjectClass """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: View) -> str
        Set: Filter(self: View) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: View) -> str
        Set: Language(self: View) = value
        """
        ...

    @property
    def LockUserChanges(self) -> bool:
        """
        Get: LockUserChanges(self: View) -> bool
        Set: LockUserChanges(self: View) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: View) -> str
        Set: Name(self: View) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: View) -> object """
        ...

    @property
    def SaveOption(self) -> OlViewSaveOption:
        """ Get: SaveOption(self: View) -> OlViewSaveOption """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: View) -> NameSpace """
        ...

    @property
    def Standard(self) -> bool:
        """ Get: Standard(self: View) -> bool """
        ...

    @property
    def ViewType(self) -> OlViewType:
        """ Get: ViewType(self: View) -> OlViewType """
        ...

    @property
    def XML(self) -> str:
        """
        Get: XML(self: View) -> str
        Set: XML(self: View) = value
        """
        ...


    def Apply(self): # -> 
        """ Apply(self: View) """
        ...

    def Copy(self, Name:str, SaveOption:OlViewSaveOption) -> View:
        """ Copy(self: View, Name: str, SaveOption: OlViewSaveOption) -> View """
        ...

    def Delete(self): # -> 
        """ Delete(self: View) """
        ...

    def GoToDate(self, Date:DateTime): # -> 
        """ GoToDate(self: View, Date: DateTime) """
        ...

    def Reset(self): # -> 
        """ Reset(self: View) """
        ...

    def Save(self): # -> 
        """ Save(self: View) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class _ViewField: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ViewField) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ViewField) -> OlObjectClass """
        ...

    @property
    def ColumnFormat(self) -> ColumnFormat:
        """ Get: ColumnFormat(self: _ViewField) -> ColumnFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ViewField) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ViewField) -> NameSpace """
        ...

    @property
    def ViewXMLSchemaName(self) -> str:
        """ Get: ViewXMLSchemaName(self: _ViewField) -> str """
        ...



class ViewField(_ViewField): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ViewFieldClass(__ComObject, ViewField): # skipped bases: <type '_ViewField'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ViewFieldClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ViewFieldClass) -> OlObjectClass """
        ...

    @property
    def ColumnFormat(self) -> ColumnFormat:
        """ Get: ColumnFormat(self: ViewFieldClass) -> ColumnFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ViewFieldClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ViewFieldClass) -> NameSpace """
        ...

    @property
    def ViewXMLSchemaName(self) -> str:
        """ Get: ViewXMLSchemaName(self: ViewFieldClass) -> str """
        ...



class _ViewFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ViewFields) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ViewFields) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _ViewFields) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ViewFields) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ViewFields) -> NameSpace """
        ...


    def Add(self, PropertyName:str) -> ViewField:
        """ Add(self: _ViewFields, PropertyName: str) -> ViewField """
        ...

    def Insert(self, PropertyName:str, Index:object) -> ViewField:
        """ Insert(self: _ViewFields, PropertyName: str, Index: object) -> ViewField """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: _ViewFields, Index: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ViewFields(_ViewFields): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class ViewFieldsClass(ViewFields, __ComObject): # skipped bases: <type 'IEnumerable'>, <type '_ViewFields'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ViewFieldsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ViewFieldsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ViewFieldsClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ViewFieldsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ViewFieldsClass) -> NameSpace """
        ...


    def Add(self, PropertyName:str) -> ViewField:
        """ Add(self: ViewFieldsClass, PropertyName: str) -> ViewField """
        ...

    def Insert(self, PropertyName:str, Index:object) -> ViewField:
        """ Insert(self: ViewFieldsClass, PropertyName: str, Index: object) -> ViewField """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: ViewFieldsClass, Index: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _ViewFont: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ViewFont) -> Application """
        ...

    @property
    def Bold(self) -> bool:
        """
        Get: Bold(self: _ViewFont) -> bool
        Set: Bold(self: _ViewFont) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _ViewFont) -> OlObjectClass """
        ...

    @property
    def Color(self) -> OlColor:
        """
        Get: Color(self: _ViewFont) -> OlColor
        Set: Color(self: _ViewFont) = value
        """
        ...

    @property
    def ExtendedColor(self) -> OlCategoryColor:
        """
        Get: ExtendedColor(self: _ViewFont) -> OlCategoryColor
        Set: ExtendedColor(self: _ViewFont) = value
        """
        ...

    @property
    def Italic(self) -> bool:
        """
        Get: Italic(self: _ViewFont) -> bool
        Set: Italic(self: _ViewFont) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _ViewFont) -> str
        Set: Name(self: _ViewFont) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ViewFont) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _ViewFont) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """
        Get: Size(self: _ViewFont) -> int
        Set: Size(self: _ViewFont) = value
        """
        ...

    @property
    def Strikethrough(self) -> bool:
        """
        Get: Strikethrough(self: _ViewFont) -> bool
        Set: Strikethrough(self: _ViewFont) = value
        """
        ...

    @property
    def Underline(self) -> bool:
        """
        Get: Underline(self: _ViewFont) -> bool
        Set: Underline(self: _ViewFont) = value
        """
        ...



class ViewFont(_ViewFont): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ViewFontClass(__ComObject, ViewFont): # skipped bases: <type '_ViewFont'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ViewFontClass) -> Application """
        ...

    @property
    def Bold(self) -> bool:
        """
        Get: Bold(self: ViewFontClass) -> bool
        Set: Bold(self: ViewFontClass) = value
        """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ViewFontClass) -> OlObjectClass """
        ...

    @property
    def Color(self) -> OlColor:
        """
        Get: Color(self: ViewFontClass) -> OlColor
        Set: Color(self: ViewFontClass) = value
        """
        ...

    @property
    def ExtendedColor(self) -> OlCategoryColor:
        """
        Get: ExtendedColor(self: ViewFontClass) -> OlCategoryColor
        Set: ExtendedColor(self: ViewFontClass) = value
        """
        ...

    @property
    def Italic(self) -> bool:
        """
        Get: Italic(self: ViewFontClass) -> bool
        Set: Italic(self: ViewFontClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ViewFontClass) -> str
        Set: Name(self: ViewFontClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ViewFontClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ViewFontClass) -> NameSpace """
        ...

    @property
    def Size(self) -> int:
        """
        Get: Size(self: ViewFontClass) -> int
        Set: Size(self: ViewFontClass) = value
        """
        ...

    @property
    def Strikethrough(self) -> bool:
        """
        Get: Strikethrough(self: ViewFontClass) -> bool
        Set: Strikethrough(self: ViewFontClass) = value
        """
        ...

    @property
    def Underline(self) -> bool:
        """
        Get: Underline(self: ViewFontClass) -> bool
        Set: Underline(self: ViewFontClass) = value
        """
        ...



class _Views(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Views) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: _Views) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: _Views) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Views) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: _Views) -> NameSpace """
        ...


    def Add(self, Name:str, ViewType:OlViewType, SaveOption:OlViewSaveOption) -> View:
        """ Add(self: _Views, Name: str, ViewType: OlViewType, SaveOption: OlViewSaveOption) -> View """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: _Views, Index: object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _ViewsEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_ViewAdd(self): # -> 
        """ add_ViewAdd(self: _ViewsEvents_Event, : _ViewsEvents_ViewAddEventHandler) """
        ...

    def add_ViewRemove(self): # -> 
        """ add_ViewRemove(self: _ViewsEvents_Event, : _ViewsEvents_ViewRemoveEventHandler) """
        ...

    def remove_ViewAdd(self): # -> 
        """ remove_ViewAdd(self: _ViewsEvents_Event, : _ViewsEvents_ViewAddEventHandler) """
        ...

    def remove_ViewRemove(self): # -> 
        """ remove_ViewRemove(self: _ViewsEvents_Event, : _ViewsEvents_ViewRemoveEventHandler) """
        ...

    ViewAdd = ...
    ViewRemove = ...


class Views(_ViewsEvents_Event, _Views): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    pass

class ViewsClass(Views, __ComObject): # skipped bases: <type 'IEnumerable'>, <type '_Views'>, <type '_ViewsEvents_Event'>, <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ViewsClass) -> Application """
        ...

    @property
    def Class(self) -> OlObjectClass:
        """ Get: Class(self: ViewsClass) -> OlObjectClass """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ViewsClass) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ViewsClass) -> object """
        ...

    @property
    def Session(self) -> NameSpace:
        """ Get: Session(self: ViewsClass) -> NameSpace """
        ...


    def Add(self, Name:str, ViewType:OlViewType, SaveOption:OlViewSaveOption) -> View:
        """ Add(self: ViewsClass, Name: str, ViewType: OlViewType, SaveOption: OlViewSaveOption) -> View """
        ...

    def add_ViewAdd(self): # -> 
        """ add_ViewAdd(self: ViewsClass, : _ViewsEvents_ViewAddEventHandler) """
        ...

    def add_ViewRemove(self): # -> 
        """ add_ViewRemove(self: ViewsClass, : _ViewsEvents_ViewRemoveEventHandler) """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: ViewsClass) -> IEnumerator """
        ...

    def Remove(self, Index:object): # -> 
        """ Remove(self: ViewsClass, Index: object) """
        ...

    def remove_ViewAdd(self): # -> 
        """ remove_ViewAdd(self: ViewsClass, : _ViewsEvents_ViewAddEventHandler) """
        ...

    def remove_ViewRemove(self): # -> 
        """ remove_ViewRemove(self: ViewsClass, : _ViewsEvents_ViewRemoveEventHandler) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    ViewAdd = ...
    ViewRemove = ...


class _DDocSiteControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ReadOnly(self) -> SByte:
        """
        Get: ReadOnly(self: _DDocSiteControl) -> SByte
        Set: ReadOnly(self: _DDocSiteControl) = value
        """
        ...

    @property
    def SuppressAttachments(self) -> SByte:
        """
        Get: SuppressAttachments(self: _DDocSiteControl) -> SByte
        Set: SuppressAttachments(self: _DDocSiteControl) = value
        """
        ...



class _DDocSiteControlEvents: # skipped bases: <type 'object'>
    """ no doc """
    pass

class _DDocSiteControlEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    pass

class _DDocSiteControlEvents_SinkHelper(_DDocSiteControlEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...


class _DocSiteControl(_DDocSiteControlEvents_Event, _DDocSiteControl): # skipped bases: <type 'object'>
    """ no doc """
    pass

class _DocSiteControlClass(_DocSiteControl, __ComObject): # skipped bases: <type '_DDocSiteControlEvents_Event'>, <type '_DDocSiteControl'>, <type 'object'>
    """ _DocSiteControlClass() """
    @property
    def ReadOnly(self) -> SByte:
        """
        Get: ReadOnly(self: _DocSiteControlClass) -> SByte
        Set: ReadOnly(self: _DocSiteControlClass) = value
        """
        ...

    @property
    def SuppressAttachments(self) -> SByte:
        """
        Get: SuppressAttachments(self: _DocSiteControlClass) -> SByte
        Set: SuppressAttachments(self: _DocSiteControlClass) = value
        """
        ...



class _DRecipientControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def BackColor(self) -> int:
        """
        Get: BackColor(self: _DRecipientControl) -> int
        Set: BackColor(self: _DRecipientControl) = value
        """
        ...

    @property
    def Enabled(self) -> SByte:
        """
        Get: Enabled(self: _DRecipientControl) -> SByte
        Set: Enabled(self: _DRecipientControl) = value
        """
        ...

    @property
    def Font(self) -> object:
        """
        Get: Font(self: _DRecipientControl) -> object
        Set: Font(self: _DRecipientControl) = value
        """
        ...

    @property
    def ForeColor(self) -> int:
        """
        Get: ForeColor(self: _DRecipientControl) -> int
        Set: ForeColor(self: _DRecipientControl) = value
        """
        ...

    @property
    def ReadOnly(self) -> SByte:
        """
        Get: ReadOnly(self: _DRecipientControl) -> SByte
        Set: ReadOnly(self: _DRecipientControl) = value
        """
        ...

    @property
    def SpecialEffect(self) -> int:
        """
        Get: SpecialEffect(self: _DRecipientControl) -> int
        Set: SpecialEffect(self: _DRecipientControl) = value
        """
        ...



class _DRecipientControlEvents: # skipped bases: <type 'object'>
    """ no doc """
    pass

class _DRecipientControlEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    pass

class _DRecipientControlEvents_SinkHelper(_DRecipientControlEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...


class _IDocSiteControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ReadOnly(self) -> SByte:
        """
        Get: ReadOnly(self: _IDocSiteControl) -> SByte
        Set: ReadOnly(self: _IDocSiteControl) = value
        """
        ...

    @property
    def SuppressAttachments(self) -> SByte:
        """
        Get: SuppressAttachments(self: _IDocSiteControl) -> SByte
        Set: SuppressAttachments(self: _IDocSiteControl) = value
        """
        ...



class _IRecipientControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def BackColor(self) -> int:
        """
        Get: BackColor(self: _IRecipientControl) -> int
        Set: BackColor(self: _IRecipientControl) = value
        """
        ...

    @property
    def Enabled(self) -> SByte:
        """
        Get: Enabled(self: _IRecipientControl) -> SByte
        Set: Enabled(self: _IRecipientControl) = value
        """
        ...

    @property
    def Font(self) -> object:
        """
        Get: Font(self: _IRecipientControl) -> object
        Set: Font(self: _IRecipientControl) = value
        """
        ...

    @property
    def ForeColor(self) -> int:
        """
        Get: ForeColor(self: _IRecipientControl) -> int
        Set: ForeColor(self: _IRecipientControl) = value
        """
        ...

    @property
    def ReadOnly(self) -> SByte:
        """
        Get: ReadOnly(self: _IRecipientControl) -> SByte
        Set: ReadOnly(self: _IRecipientControl) = value
        """
        ...

    @property
    def SpecialEffect(self) -> int:
        """
        Get: SpecialEffect(self: _IRecipientControl) -> int
        Set: SpecialEffect(self: _IRecipientControl) = value
        """
        ...



class _RecipientControl(_DRecipientControl, _DRecipientControlEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class _RecipientControlClass(__ComObject, _RecipientControl): # skipped bases: <type '_DRecipientControlEvents_Event'>, <type '_DRecipientControl'>, <type 'object'>
    """ _RecipientControlClass() """
    @property
    def BackColor(self) -> int:
        """
        Get: BackColor(self: _RecipientControlClass) -> int
        Set: BackColor(self: _RecipientControlClass) = value
        """
        ...

    @property
    def Enabled(self) -> SByte:
        """
        Get: Enabled(self: _RecipientControlClass) -> SByte
        Set: Enabled(self: _RecipientControlClass) = value
        """
        ...

    @property
    def Font(self) -> object:
        """
        Get: Font(self: _RecipientControlClass) -> object
        Set: Font(self: _RecipientControlClass) = value
        """
        ...

    @property
    def ForeColor(self) -> int:
        """
        Get: ForeColor(self: _RecipientControlClass) -> int
        Set: ForeColor(self: _RecipientControlClass) = value
        """
        ...

    @property
    def ReadOnly(self) -> SByte:
        """
        Get: ReadOnly(self: _RecipientControlClass) -> SByte
        Set: ReadOnly(self: _RecipientControlClass) = value
        """
        ...

    @property
    def SpecialEffect(self) -> int:
        """
        Get: SpecialEffect(self: _RecipientControlClass) -> int
        Set: SpecialEffect(self: _RecipientControlClass) = value
        """
        ...



class _ViewsEvents: # skipped bases: <type 'object'>
    """ no doc """
    def ViewAdd(self, View:View): # -> 
        """ ViewAdd(self: _ViewsEvents, View: View) """
        ...

    def ViewRemove(self, View:View): # -> 
        """ ViewRemove(self: _ViewsEvents, View: View) """
        ...


class _ViewsEvents_SinkHelper(_ViewsEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_ViewAddDelegate = ...
    m_ViewRemoveDelegate = ...


class _ViewsEvents_ViewAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ _ViewsEvents_ViewAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, View:View): # -> 
        """ Invoke(self: _ViewsEvents_ViewAddEventHandler, View: View) """
        ...


class _ViewsEvents_ViewRemoveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ _ViewsEvents_ViewRemoveEventHandler(: object, : UIntPtr) """
    def Invoke(self, View:View): # -> 
        """ Invoke(self: _ViewsEvents_ViewRemoveEventHandler, View: View) """
        ...


