# encoding: utf-8
# module Microsoft.Office.Interop.Word calls itself Word
# from Microsoft.Office.Interop.Word, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c
# by generator 1.145
""" no doc """
from __future__ import annotations
from Microsoft.Office.Interop.Excel import TextFrame2

from Microsoft.Office.Interop.Graph import XlChartType

from Microsoft.VisualStudio.CommandBars import CommandBars

from System import Array, DateTime, Enum, Int16, MulticastDelegate, Single

from System.Collections import IEnumerable

from typing import Tuple as Tuple_

"""The following names are not found in the module: (AnswerWizard, Assistant, 
    BoundEvent, COMAddIns, Crop, CustomXMLNode, CustomXMLPart, CustomXMLParts, 
    DocumentInspectors, DocumentLibraryVersions, FileSearch, GradientStops, 
    HTMLProject, IAssistance, IMsoDiagram, LanguageSettings, MetaProperties, 
    MsoAlignCmd, MsoArrowheadLength, MsoArrowheadStyle, MsoArrowheadWidth, 
    MsoAutoShapeType, MsoAutomationSecurity, MsoBackgroundStyleIndex, 
    MsoBevelType, MsoBroadcastState, MsoCalloutAngleType, MsoCalloutDropType, 
    MsoCalloutType, MsoChartElementType, MsoColorType, MsoConnectorType, 
    MsoDiagramNodeType, MsoDiagramType, MsoDistributeCmd, MsoEditingType, 
    MsoEncoding, MsoEnvelope, MsoExtrusionColorType, MsoFeatureInstall, 
    MsoFileValidationMode, MsoFillType, MsoFlipCmd, MsoGradientColorType, 
    MsoGradientStyle, MsoHorizontalAnchor, MsoHyperlinkType, MsoLanguageID, 
    MsoLightRigType, MsoLineDashStyle, MsoLineStyle, MsoOrgChartLayoutType, 
    MsoPathFormat, MsoPatternType, MsoPictureColorType, MsoPresetCamera, 
    MsoPresetExtrusionDirection, MsoPresetGradientType, 
    MsoPresetLightingDirection, MsoPresetLightingSoftness, MsoPresetMaterial, 
    MsoPresetTextEffect, MsoPresetTextEffectShape, MsoPresetTexture, 
    MsoPresetThreeDFormat, MsoReflectionType, MsoRelativeNodePosition, 
    MsoScaleFrom, MsoScreenSize, MsoSegmentType, MsoShadowStyle, 
    MsoShadowType, MsoShapeStyleIndex, MsoShapeType, MsoSoftEdgeType, 
    MsoSyncEventType, MsoTargetBrowser, MsoTextEffectAlignment, 
    MsoTextOrientation, MsoTextureAlignment, MsoTextureType, MsoTriState, 
    MsoVerticalAnchor, MsoWarpFormat, MsoZOrderCmd, NewFile, OfficeTheme, 
    Permission, PickerDialog, PictureEffects, Script, Scripts, ServerPolicy, 
    SharedWorkspace, SignatureSet, SmartArt, SmartArtColors, SmartArtLayout, 
    SmartArtLayouts, SmartArtQuickStyles, SmartDocument, Sync, TextColumn2, 
    VBE, VBProject, WebPageFonts, WorkflowTasks, WorkflowTemplates, 
    __ComObject, field#)
"""

# no functions
# classes

class AddIn: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AddIn) -> Application """
        ...

    @property
    def Autoload(self) -> bool:
        """ Get: Autoload(self: AddIn) -> bool """
        ...

    @property
    def Compiled(self) -> bool:
        """ Get: Compiled(self: AddIn) -> bool """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: AddIn) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: AddIn) -> int """
        ...

    @property
    def Installed(self) -> bool:
        """
        Get: Installed(self: AddIn) -> bool
        Set: Installed(self: AddIn) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: AddIn) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AddIn) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: AddIn) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: AddIn) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AddIns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AddIns) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: AddIns) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: AddIns) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AddIns) -> object """
        ...


    def Add(self, FileName:str, Install:object) -> Tuple_[AddIn, object]:
        """ Add(self: AddIns, FileName: str, Install: object) -> (AddIn, object) """
        ...

    def Unload(self, RemoveFromList:bool): # -> 
        """ Unload(self: AddIns, RemoveFromList: bool) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Adjustments: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Adjustments) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Adjustments) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Adjustments) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Adjustments) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ApplicationEvents4_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_DocumentBeforeClose(self): # -> 
        """ add_DocumentBeforeClose(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentBeforeCloseEventHandler) """
        ...

    def add_DocumentBeforePrint(self): # -> 
        """ add_DocumentBeforePrint(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentBeforePrintEventHandler) """
        ...

    def add_DocumentBeforeSave(self): # -> 
        """ add_DocumentBeforeSave(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentBeforeSaveEventHandler) """
        ...

    def add_DocumentChange(self): # -> 
        """ add_DocumentChange(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentChangeEventHandler) """
        ...

    def add_DocumentOpen(self): # -> 
        """ add_DocumentOpen(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentOpenEventHandler) """
        ...

    def add_DocumentSync(self): # -> 
        """ add_DocumentSync(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentSyncEventHandler) """
        ...

    def add_EPostageInsert(self): # -> 
        """ add_EPostageInsert(self: ApplicationEvents4_Event, : ApplicationEvents4_EPostageInsertEventHandler) """
        ...

    def add_EPostageInsertEx(self): # -> 
        """ add_EPostageInsertEx(self: ApplicationEvents4_Event, : ApplicationEvents4_EPostageInsertExEventHandler) """
        ...

    def add_EPostagePropertyDialog(self): # -> 
        """ add_EPostagePropertyDialog(self: ApplicationEvents4_Event, : ApplicationEvents4_EPostagePropertyDialogEventHandler) """
        ...

    def add_MailMergeAfterMerge(self): # -> 
        """ add_MailMergeAfterMerge(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeAfterMergeEventHandler) """
        ...

    def add_MailMergeAfterRecordMerge(self): # -> 
        """ add_MailMergeAfterRecordMerge(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeAfterRecordMergeEventHandler) """
        ...

    def add_MailMergeBeforeMerge(self): # -> 
        """ add_MailMergeBeforeMerge(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeBeforeMergeEventHandler) """
        ...

    def add_MailMergeBeforeRecordMerge(self): # -> 
        """ add_MailMergeBeforeRecordMerge(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeBeforeRecordMergeEventHandler) """
        ...

    def add_MailMergeDataSourceLoad(self): # -> 
        """ add_MailMergeDataSourceLoad(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeDataSourceLoadEventHandler) """
        ...

    def add_MailMergeDataSourceValidate(self): # -> 
        """ add_MailMergeDataSourceValidate(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeDataSourceValidateEventHandler) """
        ...

    def add_MailMergeDataSourceValidate2(self): # -> 
        """ add_MailMergeDataSourceValidate2(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeDataSourceValidate2EventHandler) """
        ...

    def add_MailMergeWizardSendToCustom(self): # -> 
        """ add_MailMergeWizardSendToCustom(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeWizardSendToCustomEventHandler) """
        ...

    def add_MailMergeWizardStateChange(self): # -> 
        """ add_MailMergeWizardStateChange(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeWizardStateChangeEventHandler) """
        ...

    def add_NewDocument(self): # -> 
        """ add_NewDocument(self: ApplicationEvents4_Event, : ApplicationEvents4_NewDocumentEventHandler) """
        ...

    def add_ProtectedViewWindowActivate(self): # -> 
        """ add_ProtectedViewWindowActivate(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowActivateEventHandler) """
        ...

    def add_ProtectedViewWindowBeforeClose(self): # -> 
        """ add_ProtectedViewWindowBeforeClose(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowBeforeCloseEventHandler) """
        ...

    def add_ProtectedViewWindowBeforeEdit(self): # -> 
        """ add_ProtectedViewWindowBeforeEdit(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowBeforeEditEventHandler) """
        ...

    def add_ProtectedViewWindowDeactivate(self): # -> 
        """ add_ProtectedViewWindowDeactivate(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowDeactivateEventHandler) """
        ...

    def add_ProtectedViewWindowOpen(self): # -> 
        """ add_ProtectedViewWindowOpen(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowOpenEventHandler) """
        ...

    def add_ProtectedViewWindowSize(self): # -> 
        """ add_ProtectedViewWindowSize(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowSizeEventHandler) """
        ...

    def add_Quit(self): # -> 
        """ add_Quit(self: ApplicationEvents4_Event, : ApplicationEvents4_QuitEventHandler) """
        ...

    def add_Startup(self): # -> 
        """ add_Startup(self: ApplicationEvents4_Event, : ApplicationEvents4_StartupEventHandler) """
        ...

    def add_WindowActivate(self): # -> 
        """ add_WindowActivate(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowActivateEventHandler) """
        ...

    def add_WindowBeforeDoubleClick(self): # -> 
        """ add_WindowBeforeDoubleClick(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowBeforeDoubleClickEventHandler) """
        ...

    def add_WindowBeforeRightClick(self): # -> 
        """ add_WindowBeforeRightClick(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowBeforeRightClickEventHandler) """
        ...

    def add_WindowDeactivate(self): # -> 
        """ add_WindowDeactivate(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowDeactivateEventHandler) """
        ...

    def add_WindowSelectionChange(self): # -> 
        """ add_WindowSelectionChange(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowSelectionChangeEventHandler) """
        ...

    def add_WindowSize(self): # -> 
        """ add_WindowSize(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowSizeEventHandler) """
        ...

    def add_XMLSelectionChange(self): # -> 
        """ add_XMLSelectionChange(self: ApplicationEvents4_Event, : ApplicationEvents4_XMLSelectionChangeEventHandler) """
        ...

    def add_XMLValidationError(self): # -> 
        """ add_XMLValidationError(self: ApplicationEvents4_Event, : ApplicationEvents4_XMLValidationErrorEventHandler) """
        ...

    def remove_DocumentBeforeClose(self): # -> 
        """ remove_DocumentBeforeClose(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentBeforeCloseEventHandler) """
        ...

    def remove_DocumentBeforePrint(self): # -> 
        """ remove_DocumentBeforePrint(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentBeforePrintEventHandler) """
        ...

    def remove_DocumentBeforeSave(self): # -> 
        """ remove_DocumentBeforeSave(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentBeforeSaveEventHandler) """
        ...

    def remove_DocumentChange(self): # -> 
        """ remove_DocumentChange(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentChangeEventHandler) """
        ...

    def remove_DocumentOpen(self): # -> 
        """ remove_DocumentOpen(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentOpenEventHandler) """
        ...

    def remove_DocumentSync(self): # -> 
        """ remove_DocumentSync(self: ApplicationEvents4_Event, : ApplicationEvents4_DocumentSyncEventHandler) """
        ...

    def remove_EPostageInsert(self): # -> 
        """ remove_EPostageInsert(self: ApplicationEvents4_Event, : ApplicationEvents4_EPostageInsertEventHandler) """
        ...

    def remove_EPostageInsertEx(self): # -> 
        """ remove_EPostageInsertEx(self: ApplicationEvents4_Event, : ApplicationEvents4_EPostageInsertExEventHandler) """
        ...

    def remove_EPostagePropertyDialog(self): # -> 
        """ remove_EPostagePropertyDialog(self: ApplicationEvents4_Event, : ApplicationEvents4_EPostagePropertyDialogEventHandler) """
        ...

    def remove_MailMergeAfterMerge(self): # -> 
        """ remove_MailMergeAfterMerge(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeAfterMergeEventHandler) """
        ...

    def remove_MailMergeAfterRecordMerge(self): # -> 
        """ remove_MailMergeAfterRecordMerge(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeAfterRecordMergeEventHandler) """
        ...

    def remove_MailMergeBeforeMerge(self): # -> 
        """ remove_MailMergeBeforeMerge(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeBeforeMergeEventHandler) """
        ...

    def remove_MailMergeBeforeRecordMerge(self): # -> 
        """ remove_MailMergeBeforeRecordMerge(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeBeforeRecordMergeEventHandler) """
        ...

    def remove_MailMergeDataSourceLoad(self): # -> 
        """ remove_MailMergeDataSourceLoad(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeDataSourceLoadEventHandler) """
        ...

    def remove_MailMergeDataSourceValidate(self): # -> 
        """ remove_MailMergeDataSourceValidate(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeDataSourceValidateEventHandler) """
        ...

    def remove_MailMergeDataSourceValidate2(self): # -> 
        """ remove_MailMergeDataSourceValidate2(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeDataSourceValidate2EventHandler) """
        ...

    def remove_MailMergeWizardSendToCustom(self): # -> 
        """ remove_MailMergeWizardSendToCustom(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeWizardSendToCustomEventHandler) """
        ...

    def remove_MailMergeWizardStateChange(self): # -> 
        """ remove_MailMergeWizardStateChange(self: ApplicationEvents4_Event, : ApplicationEvents4_MailMergeWizardStateChangeEventHandler) """
        ...

    def remove_NewDocument(self): # -> 
        """ remove_NewDocument(self: ApplicationEvents4_Event, : ApplicationEvents4_NewDocumentEventHandler) """
        ...

    def remove_ProtectedViewWindowActivate(self): # -> 
        """ remove_ProtectedViewWindowActivate(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowActivateEventHandler) """
        ...

    def remove_ProtectedViewWindowBeforeClose(self): # -> 
        """ remove_ProtectedViewWindowBeforeClose(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowBeforeCloseEventHandler) """
        ...

    def remove_ProtectedViewWindowBeforeEdit(self): # -> 
        """ remove_ProtectedViewWindowBeforeEdit(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowBeforeEditEventHandler) """
        ...

    def remove_ProtectedViewWindowDeactivate(self): # -> 
        """ remove_ProtectedViewWindowDeactivate(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowDeactivateEventHandler) """
        ...

    def remove_ProtectedViewWindowOpen(self): # -> 
        """ remove_ProtectedViewWindowOpen(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowOpenEventHandler) """
        ...

    def remove_ProtectedViewWindowSize(self): # -> 
        """ remove_ProtectedViewWindowSize(self: ApplicationEvents4_Event, : ApplicationEvents4_ProtectedViewWindowSizeEventHandler) """
        ...

    def remove_Quit(self): # -> 
        """ remove_Quit(self: ApplicationEvents4_Event, : ApplicationEvents4_QuitEventHandler) """
        ...

    def remove_Startup(self): # -> 
        """ remove_Startup(self: ApplicationEvents4_Event, : ApplicationEvents4_StartupEventHandler) """
        ...

    def remove_WindowActivate(self): # -> 
        """ remove_WindowActivate(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowActivateEventHandler) """
        ...

    def remove_WindowBeforeDoubleClick(self): # -> 
        """ remove_WindowBeforeDoubleClick(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowBeforeDoubleClickEventHandler) """
        ...

    def remove_WindowBeforeRightClick(self): # -> 
        """ remove_WindowBeforeRightClick(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowBeforeRightClickEventHandler) """
        ...

    def remove_WindowDeactivate(self): # -> 
        """ remove_WindowDeactivate(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowDeactivateEventHandler) """
        ...

    def remove_WindowSelectionChange(self): # -> 
        """ remove_WindowSelectionChange(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowSelectionChangeEventHandler) """
        ...

    def remove_WindowSize(self): # -> 
        """ remove_WindowSize(self: ApplicationEvents4_Event, : ApplicationEvents4_WindowSizeEventHandler) """
        ...

    def remove_XMLSelectionChange(self): # -> 
        """ remove_XMLSelectionChange(self: ApplicationEvents4_Event, : ApplicationEvents4_XMLSelectionChangeEventHandler) """
        ...

    def remove_XMLValidationError(self): # -> 
        """ remove_XMLValidationError(self: ApplicationEvents4_Event, : ApplicationEvents4_XMLValidationErrorEventHandler) """
        ...

    DocumentBeforeClose = ...
    DocumentBeforePrint = ...
    DocumentBeforeSave = ...
    DocumentChange = ...
    DocumentOpen = ...
    DocumentSync = ...
    EPostageInsert = ...
    EPostageInsertEx = ...
    EPostagePropertyDialog = ...
    MailMergeAfterMerge = ...
    MailMergeAfterRecordMerge = ...
    MailMergeBeforeMerge = ...
    MailMergeBeforeRecordMerge = ...
    MailMergeDataSourceLoad = ...
    MailMergeDataSourceValidate = ...
    MailMergeDataSourceValidate2 = ...
    MailMergeWizardSendToCustom = ...
    MailMergeWizardStateChange = ...
    NewDocument = ...
    ProtectedViewWindowActivate = ...
    ProtectedViewWindowBeforeClose = ...
    ProtectedViewWindowBeforeEdit = ...
    ProtectedViewWindowDeactivate = ...
    ProtectedViewWindowOpen = ...
    ProtectedViewWindowSize = ...
    Quit = ...
    Startup = ...
    WindowActivate = ...
    WindowBeforeDoubleClick = ...
    WindowBeforeRightClick = ...
    WindowDeactivate = ...
    WindowSelectionChange = ...
    WindowSize = ...
    XMLSelectionChange = ...
    XMLValidationError = ...


class _Application: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveDocument(self) -> Document:
        """ Get: ActiveDocument(self: _Application) -> Document """
        ...

    @property
    def ActiveEncryptionSession(self) -> int:
        """ Get: ActiveEncryptionSession(self: _Application) -> int """
        ...

    @property
    def ActivePrinter(self) -> str:
        """
        Get: ActivePrinter(self: _Application) -> str
        Set: ActivePrinter(self: _Application) = value
        """
        ...

    @property
    def ActiveProtectedViewWindow(self) -> ProtectedViewWindow:
        """ Get: ActiveProtectedViewWindow(self: _Application) -> ProtectedViewWindow """
        ...

    @property
    def ActiveWindow(self) -> Window:
        """ Get: ActiveWindow(self: _Application) -> Window """
        ...

    @property
    def AddIns(self) -> AddIns:
        """ Get: AddIns(self: _Application) -> AddIns """
        ...

    @property
    def AnswerWizard(self): # -> AnswerWizard
        """ Get: AnswerWizard(self: _Application) -> AnswerWizard """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Application) -> Application """
        ...

    @property
    def ArbitraryXMLSupportAvailable(self) -> bool:
        """ Get: ArbitraryXMLSupportAvailable(self: _Application) -> bool """
        ...

    @property
    def Assistance(self): # -> IAssistance
        """ Get: Assistance(self: _Application) -> IAssistance """
        ...

    @property
    def Assistant(self): # -> Assistant
        """ Get: Assistant(self: _Application) -> Assistant """
        ...

    @property
    def AutoCaptions(self) -> AutoCaptions:
        """ Get: AutoCaptions(self: _Application) -> AutoCaptions """
        ...

    @property
    def AutoCorrect(self) -> AutoCorrect:
        """ Get: AutoCorrect(self: _Application) -> AutoCorrect """
        ...

    @property
    def AutoCorrectEmail(self) -> AutoCorrect:
        """ Get: AutoCorrectEmail(self: _Application) -> AutoCorrect """
        ...

    @property
    def AutomationSecurity(self): # -> MsoAutomationSecurity
        """
        Get: AutomationSecurity(self: _Application) -> MsoAutomationSecurity
        Set: AutomationSecurity(self: _Application) = value
        """
        ...

    @property
    def BackgroundPrintingStatus(self) -> int:
        """ Get: BackgroundPrintingStatus(self: _Application) -> int """
        ...

    @property
    def BackgroundSavingStatus(self) -> int:
        """ Get: BackgroundSavingStatus(self: _Application) -> int """
        ...

    @property
    def Bibliography(self) -> Bibliography:
        """ Get: Bibliography(self: _Application) -> Bibliography """
        ...

    @property
    def BrowseExtraFileTypes(self) -> str:
        """
        Get: BrowseExtraFileTypes(self: _Application) -> str
        Set: BrowseExtraFileTypes(self: _Application) = value
        """
        ...

    @property
    def Browser(self) -> Browser:
        """ Get: Browser(self: _Application) -> Browser """
        ...

    @property
    def Build(self) -> str:
        """ Get: Build(self: _Application) -> str """
        ...

    @property
    def BuildFeatureCrew(self) -> str:
        """ Get: BuildFeatureCrew(self: _Application) -> str """
        ...

    @property
    def BuildFull(self) -> str:
        """ Get: BuildFull(self: _Application) -> str """
        ...

    @property
    def CapsLock(self) -> bool:
        """ Get: CapsLock(self: _Application) -> bool """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: _Application) -> str
        Set: Caption(self: _Application) = value
        """
        ...

    @property
    def CaptionLabels(self) -> CaptionLabels:
        """ Get: CaptionLabels(self: _Application) -> CaptionLabels """
        ...

    @property
    def ChartDataPointTrack(self) -> bool:
        """
        Get: ChartDataPointTrack(self: _Application) -> bool
        Set: ChartDataPointTrack(self: _Application) = value
        """
        ...

    @property
    def CheckLanguage(self) -> bool:
        """
        Get: CheckLanguage(self: _Application) -> bool
        Set: CheckLanguage(self: _Application) = value
        """
        ...

    @property
    def COMAddIns(self): # -> COMAddIns
        """ Get: COMAddIns(self: _Application) -> COMAddIns """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: _Application) -> CommandBars """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: _Application) -> int """
        ...

    @property
    def CustomDictionaries(self) -> Dictionaries:
        """ Get: CustomDictionaries(self: _Application) -> Dictionaries """
        ...

    @property
    def CustomizationContext(self) -> object:
        """
        Get: CustomizationContext(self: _Application) -> object
        Set: CustomizationContext(self: _Application) = value
        """
        ...

    @property
    def DefaultLegalBlackline(self) -> bool:
        """
        Get: DefaultLegalBlackline(self: _Application) -> bool
        Set: DefaultLegalBlackline(self: _Application) = value
        """
        ...

    @property
    def DefaultSaveFormat(self) -> str:
        """
        Get: DefaultSaveFormat(self: _Application) -> str
        Set: DefaultSaveFormat(self: _Application) = value
        """
        ...

    @property
    def DefaultTableSeparator(self) -> str:
        """
        Get: DefaultTableSeparator(self: _Application) -> str
        Set: DefaultTableSeparator(self: _Application) = value
        """
        ...

    @property
    def Dialogs(self) -> Dialogs:
        """ Get: Dialogs(self: _Application) -> Dialogs """
        ...

    @property
    def DisplayAlerts(self) -> WdAlertLevel:
        """
        Get: DisplayAlerts(self: _Application) -> WdAlertLevel
        Set: DisplayAlerts(self: _Application) = value
        """
        ...

    @property
    def DisplayAutoCompleteTips(self) -> bool:
        """
        Get: DisplayAutoCompleteTips(self: _Application) -> bool
        Set: DisplayAutoCompleteTips(self: _Application) = value
        """
        ...

    @property
    def DisplayDocumentInformationPanel(self) -> bool:
        """
        Get: DisplayDocumentInformationPanel(self: _Application) -> bool
        Set: DisplayDocumentInformationPanel(self: _Application) = value
        """
        ...

    @property
    def DisplayRecentFiles(self) -> bool:
        """
        Get: DisplayRecentFiles(self: _Application) -> bool
        Set: DisplayRecentFiles(self: _Application) = value
        """
        ...

    @property
    def DisplayScreenTips(self) -> bool:
        """
        Get: DisplayScreenTips(self: _Application) -> bool
        Set: DisplayScreenTips(self: _Application) = value
        """
        ...

    @property
    def DisplayScrollBars(self) -> bool:
        """
        Get: DisplayScrollBars(self: _Application) -> bool
        Set: DisplayScrollBars(self: _Application) = value
        """
        ...

    @property
    def DisplayStatusBar(self) -> bool:
        """
        Get: DisplayStatusBar(self: _Application) -> bool
        Set: DisplayStatusBar(self: _Application) = value
        """
        ...

    @property
    def Documents(self) -> Documents:
        """ Get: Documents(self: _Application) -> Documents """
        ...

    @property
    def DontResetInsertionPointProperties(self) -> bool:
        """
        Get: DontResetInsertionPointProperties(self: _Application) -> bool
        Set: DontResetInsertionPointProperties(self: _Application) = value
        """
        ...

    @property
    def Dummy1(self) -> bool:
        """ Get: Dummy1(self: _Application) -> bool """
        ...

    @property
    def EmailOptions(self) -> EmailOptions:
        """ Get: EmailOptions(self: _Application) -> EmailOptions """
        ...

    @property
    def EmailTemplate(self) -> str:
        """
        Get: EmailTemplate(self: _Application) -> str
        Set: EmailTemplate(self: _Application) = value
        """
        ...

    @property
    def EnableCancelKey(self) -> WdEnableCancelKey:
        """
        Get: EnableCancelKey(self: _Application) -> WdEnableCancelKey
        Set: EnableCancelKey(self: _Application) = value
        """
        ...

    @property
    def FeatureInstall(self): # -> MsoFeatureInstall
        """
        Get: FeatureInstall(self: _Application) -> MsoFeatureInstall
        Set: FeatureInstall(self: _Application) = value
        """
        ...

    @property
    def FileConverters(self) -> FileConverters:
        """ Get: FileConverters(self: _Application) -> FileConverters """
        ...

    @property
    def FileSearch(self): # -> FileSearch
        """ Get: FileSearch(self: _Application) -> FileSearch """
        ...

    @property
    def FileValidation(self): # -> MsoFileValidationMode
        """
        Get: FileValidation(self: _Application) -> MsoFileValidationMode
        Set: FileValidation(self: _Application) = value
        """
        ...

    @property
    def FocusInMailHeader(self) -> bool:
        """ Get: FocusInMailHeader(self: _Application) -> bool """
        ...

    @property
    def FontNames(self) -> FontNames:
        """ Get: FontNames(self: _Application) -> FontNames """
        ...

    @property
    def HangulHanjaDictionaries(self) -> HangulHanjaConversionDictionaries:
        """ Get: HangulHanjaDictionaries(self: _Application) -> HangulHanjaConversionDictionaries """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: _Application) -> int
        Set: Height(self: _Application) = value
        """
        ...

    @property
    def IsSandboxed(self) -> bool:
        """ Get: IsSandboxed(self: _Application) -> bool """
        ...

    @property
    def KeyBindings(self) -> KeyBindings:
        """ Get: KeyBindings(self: _Application) -> KeyBindings """
        ...

    @property
    def LandscapeFontNames(self) -> FontNames:
        """ Get: LandscapeFontNames(self: _Application) -> FontNames """
        ...

    @property
    def Language(self): # -> MsoLanguageID
        """ Get: Language(self: _Application) -> MsoLanguageID """
        ...

    @property
    def Languages(self) -> Languages:
        """ Get: Languages(self: _Application) -> Languages """
        ...

    @property
    def LanguageSettings(self): # -> LanguageSettings
        """ Get: LanguageSettings(self: _Application) -> LanguageSettings """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: _Application) -> int
        Set: Left(self: _Application) = value
        """
        ...

    @property
    def ListGalleries(self) -> ListGalleries:
        """ Get: ListGalleries(self: _Application) -> ListGalleries """
        ...

    @property
    def MacroContainer(self) -> object:
        """ Get: MacroContainer(self: _Application) -> object """
        ...

    @property
    def MailingLabel(self) -> MailingLabel:
        """ Get: MailingLabel(self: _Application) -> MailingLabel """
        ...

    @property
    def MailMessage(self) -> MailMessage:
        """ Get: MailMessage(self: _Application) -> MailMessage """
        ...

    @property
    def MailSystem(self) -> WdMailSystem:
        """ Get: MailSystem(self: _Application) -> WdMailSystem """
        ...

    @property
    def MAPIAvailable(self) -> bool:
        """ Get: MAPIAvailable(self: _Application) -> bool """
        ...

    @property
    def MathCoprocessorAvailable(self) -> bool:
        """ Get: MathCoprocessorAvailable(self: _Application) -> bool """
        ...

    @property
    def MouseAvailable(self) -> bool:
        """ Get: MouseAvailable(self: _Application) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _Application) -> str """
        ...

    @property
    def NewDocument(self): # -> NewFile
        """ Get: NewDocument(self: _Application) -> NewFile """
        ...

    @property
    def NormalTemplate(self) -> Template:
        """ Get: NormalTemplate(self: _Application) -> Template """
        ...

    @property
    def NumLock(self) -> bool:
        """ Get: NumLock(self: _Application) -> bool """
        ...

    @property
    def OMathAutoCorrect(self) -> OMathAutoCorrect:
        """ Get: OMathAutoCorrect(self: _Application) -> OMathAutoCorrect """
        ...

    @property
    def OpenAttachmentsInFullScreen(self) -> bool:
        """
        Get: OpenAttachmentsInFullScreen(self: _Application) -> bool
        Set: OpenAttachmentsInFullScreen(self: _Application) = value
        """
        ...

    @property
    def Options(self) -> Options:
        """ Get: Options(self: _Application) -> Options """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Application) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: _Application) -> str """
        ...

    @property
    def PathSeparator(self) -> str:
        """ Get: PathSeparator(self: _Application) -> str """
        ...

    @property
    def PickerDialog(self): # -> PickerDialog
        """ Get: PickerDialog(self: _Application) -> PickerDialog """
        ...

    @property
    def PortraitFontNames(self) -> FontNames:
        """ Get: PortraitFontNames(self: _Application) -> FontNames """
        ...

    @property
    def PrintPreview(self) -> bool:
        """
        Get: PrintPreview(self: _Application) -> bool
        Set: PrintPreview(self: _Application) = value
        """
        ...

    @property
    def ProtectedViewWindows(self) -> ProtectedViewWindows:
        """ Get: ProtectedViewWindows(self: _Application) -> ProtectedViewWindows """
        ...

    @property
    def RecentFiles(self) -> RecentFiles:
        """ Get: RecentFiles(self: _Application) -> RecentFiles """
        ...

    @property
    def RestrictLinkedStyles(self) -> bool:
        """
        Get: RestrictLinkedStyles(self: _Application) -> bool
        Set: RestrictLinkedStyles(self: _Application) = value
        """
        ...

    @property
    def ScreenUpdating(self) -> bool:
        """
        Get: ScreenUpdating(self: _Application) -> bool
        Set: ScreenUpdating(self: _Application) = value
        """
        ...

    @property
    def Selection(self) -> Selection:
        """ Get: Selection(self: _Application) -> Selection """
        ...

    @property
    def ShowAnimation(self) -> bool:
        """
        Get: ShowAnimation(self: _Application) -> bool
        Set: ShowAnimation(self: _Application) = value
        """
        ...

    @property
    def ShowStartupDialog(self) -> bool:
        """
        Get: ShowStartupDialog(self: _Application) -> bool
        Set: ShowStartupDialog(self: _Application) = value
        """
        ...

    @property
    def ShowStylePreviews(self) -> bool:
        """
        Get: ShowStylePreviews(self: _Application) -> bool
        Set: ShowStylePreviews(self: _Application) = value
        """
        ...

    @property
    def ShowVisualBasicEditor(self) -> bool:
        """
        Get: ShowVisualBasicEditor(self: _Application) -> bool
        Set: ShowVisualBasicEditor(self: _Application) = value
        """
        ...

    @property
    def ShowWindowsInTaskbar(self) -> bool:
        """
        Get: ShowWindowsInTaskbar(self: _Application) -> bool
        Set: ShowWindowsInTaskbar(self: _Application) = value
        """
        ...

    @property
    def SmartArtColors(self): # -> SmartArtColors
        """ Get: SmartArtColors(self: _Application) -> SmartArtColors """
        ...

    @property
    def SmartArtLayouts(self): # -> SmartArtLayouts
        """ Get: SmartArtLayouts(self: _Application) -> SmartArtLayouts """
        ...

    @property
    def SmartArtQuickStyles(self): # -> SmartArtQuickStyles
        """ Get: SmartArtQuickStyles(self: _Application) -> SmartArtQuickStyles """
        ...

    @property
    def SmartTagRecognizers(self) -> SmartTagRecognizers:
        """ Get: SmartTagRecognizers(self: _Application) -> SmartTagRecognizers """
        ...

    @property
    def SmartTagTypes(self) -> SmartTagTypes:
        """ Get: SmartTagTypes(self: _Application) -> SmartTagTypes """
        ...

    @property
    def SpecialMode(self) -> bool:
        """ Get: SpecialMode(self: _Application) -> bool """
        ...

    @property
    def StartupPath(self) -> str:
        """
        Get: StartupPath(self: _Application) -> str
        Set: StartupPath(self: _Application) = value
        """
        ...

    @property
    def StatusBar(self): # -> 
        """ Set: StatusBar(self: _Application) = value """
        ...

    @property
    def System(self) -> System:
        """ Get: System(self: _Application) -> System """
        ...

    @property
    def TaskPanes(self) -> TaskPanes:
        """ Get: TaskPanes(self: _Application) -> TaskPanes """
        ...

    @property
    def Tasks(self) -> Tasks:
        """ Get: Tasks(self: _Application) -> Tasks """
        ...

    @property
    def Templates(self) -> Templates:
        """ Get: Templates(self: _Application) -> Templates """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: _Application) -> int
        Set: Top(self: _Application) = value
        """
        ...

    @property
    def UndoRecord(self) -> UndoRecord:
        """ Get: UndoRecord(self: _Application) -> UndoRecord """
        ...

    @property
    def UsableHeight(self) -> int:
        """ Get: UsableHeight(self: _Application) -> int """
        ...

    @property
    def UsableWidth(self) -> int:
        """ Get: UsableWidth(self: _Application) -> int """
        ...

    @property
    def UserAddress(self) -> str:
        """
        Get: UserAddress(self: _Application) -> str
        Set: UserAddress(self: _Application) = value
        """
        ...

    @property
    def UserControl(self) -> bool:
        """ Get: UserControl(self: _Application) -> bool """
        ...

    @property
    def UserInitials(self) -> str:
        """
        Get: UserInitials(self: _Application) -> str
        Set: UserInitials(self: _Application) = value
        """
        ...

    @property
    def UserName(self) -> str:
        """
        Get: UserName(self: _Application) -> str
        Set: UserName(self: _Application) = value
        """
        ...

    @property
    def VBE(self): # -> VBE
        """ Get: VBE(self: _Application) -> VBE """
        ...

    @property
    def Version(self) -> str:
        """ Get: Version(self: _Application) -> str """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: _Application) -> bool
        Set: Visible(self: _Application) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: _Application) -> int
        Set: Width(self: _Application) = value
        """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: _Application) -> Windows """
        ...

    @property
    def WindowState(self) -> WdWindowState:
        """
        Get: WindowState(self: _Application) -> WdWindowState
        Set: WindowState(self: _Application) = value
        """
        ...

    @property
    def WordBasic(self) -> object:
        """ Get: WordBasic(self: _Application) -> object """
        ...

    @property
    def XMLNamespaces(self) -> XMLNamespaces:
        """ Get: XMLNamespaces(self: _Application) -> XMLNamespaces """
        ...


    def Activate(self): # -> 
        """ Activate(self: _Application) """
        ...

    def AddAddress(self, TagID:Array, Value:Array) -> Tuple_[Array, Array]:
        """ AddAddress(self: _Application, TagID: Array, Value: Array) -> (Array, Array) """
        ...

    def AutomaticChange(self): # -> 
        """ AutomaticChange(self: _Application) """
        ...

    def BuildKeyCode(self, Arg1:WdKey, Arg2:object, Arg3:object, Arg4:object) -> Tuple_[int, object, object, object]:
        """ BuildKeyCode(self: _Application, Arg1: WdKey, Arg2: object, Arg3: object, Arg4: object) -> (int, object, object, object) """
        ...

    def CentimetersToPoints(self, Centimeters:Single) -> Single:
        """ CentimetersToPoints(self: _Application, Centimeters: Single) -> Single """
        ...

    def ChangeFileOpenDirectory(self, Path:str): # -> 
        """ ChangeFileOpenDirectory(self: _Application, Path: str) """
        ...

    def CheckGrammar(self, String:str) -> bool:
        """ CheckGrammar(self: _Application, String: str) -> bool """
        ...

    def CheckSpelling(self, Word:str, CustomDictionary:object, IgnoreUppercase:object, MainDictionary:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[bool, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ CheckSpelling(self: _Application, Word: str, CustomDictionary: object, IgnoreUppercase: object, MainDictionary: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (bool, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def CleanString(self, String:str) -> str:
        """ CleanString(self: _Application, String: str) -> str """
        ...

    def CompareDocuments(self, OriginalDocument:Document, RevisedDocument:Document, Destination:WdCompareDestination, Granularity:WdGranularity, CompareFormatting:bool, CompareCaseChanges:bool, CompareWhitespace:bool, CompareTables:bool, CompareHeaders:bool, CompareFootnotes:bool, CompareTextboxes:bool, CompareFields:bool, CompareComments:bool, CompareMoves:bool, RevisedAuthor:str, IgnoreAllComparisonWarnings:bool) -> Document:
        """ CompareDocuments(self: _Application, OriginalDocument: Document, RevisedDocument: Document, Destination: WdCompareDestination, Granularity: WdGranularity, CompareFormatting: bool, CompareCaseChanges: bool, CompareWhitespace: bool, CompareTables: bool, CompareHeaders: bool, CompareFootnotes: bool, CompareTextboxes: bool, CompareFields: bool, CompareComments: bool, CompareMoves: bool, RevisedAuthor: str, IgnoreAllComparisonWarnings: bool) -> Document """
        ...

    def DDEExecute(self, Channel:int, Command:str): # -> 
        """ DDEExecute(self: _Application, Channel: int, Command: str) """
        ...

    def DDEInitiate(self, App:str, Topic:str) -> int:
        """ DDEInitiate(self: _Application, App: str, Topic: str) -> int """
        ...

    def DDEPoke(self, Channel:int, Item:str, Data:str): # -> 
        """ DDEPoke(self: _Application, Channel: int, Item: str, Data: str) """
        ...

    def DDERequest(self, Channel:int, Item:str) -> str:
        """ DDERequest(self: _Application, Channel: int, Item: str) -> str """
        ...

    def DDETerminate(self, Channel:int): # -> 
        """ DDETerminate(self: _Application, Channel: int) """
        ...

    def DDETerminateAll(self): # -> 
        """ DDETerminateAll(self: _Application) """
        ...

    def DefaultWebOptions(self) -> DefaultWebOptions:
        """ DefaultWebOptions(self: _Application) -> DefaultWebOptions """
        ...

    def DiscussionSupport(self, Range:object, cid:object, piCSE:object) -> Tuple_[object, object, object]:
        """ DiscussionSupport(self: _Application, Range: object, cid: object, piCSE: object) -> (object, object, object) """
        ...

    def Dummy2(self) -> bool:
        """ Dummy2(self: _Application) -> bool """
        ...

    def Dummy4(self): # -> 
        """ Dummy4(self: _Application) """
        ...

    def GetAddress(self, Name:object, AddressProperties:object, UseAutoText:object, DisplaySelectDialog:object, SelectDialog:object, CheckNamesDialog:object, RecentAddressesChoice:object, UpdateRecentAddresses:object) -> Tuple_[str, object, object, object, object, object, object, object, object]:
        """ GetAddress(self: _Application, Name: object, AddressProperties: object, UseAutoText: object, DisplaySelectDialog: object, SelectDialog: object, CheckNamesDialog: object, RecentAddressesChoice: object, UpdateRecentAddresses: object) -> (str, object, object, object, object, object, object, object, object) """
        ...

    def GetDefaultTheme(self, DocumentType:WdDocumentMedium) -> str:
        """ GetDefaultTheme(self: _Application, DocumentType: WdDocumentMedium) -> str """
        ...

    def GetSpellingSuggestions(self, Word:str, CustomDictionary:object, IgnoreUppercase:object, MainDictionary:object, SuggestionMode:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[SpellingSuggestions, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ GetSpellingSuggestions(self: _Application, Word: str, CustomDictionary: object, IgnoreUppercase: object, MainDictionary: object, SuggestionMode: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (SpellingSuggestions, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def GoBack(self): # -> 
        """ GoBack(self: _Application) """
        ...

    def GoForward(self): # -> 
        """ GoForward(self: _Application) """
        ...

    def Help(self, HelpType:object) -> object:
        """ Help(self: _Application, HelpType: object) -> object """
        ...

    def HelpTool(self): # -> 
        """ HelpTool(self: _Application) """
        ...

    def InchesToPoints(self, Inches:Single) -> Single:
        """ InchesToPoints(self: _Application, Inches: Single) -> Single """
        ...

    def Keyboard(self, LangId:int) -> int:
        """ Keyboard(self: _Application, LangId: int) -> int """
        ...

    def KeyboardBidi(self): # -> 
        """ KeyboardBidi(self: _Application) """
        ...

    def KeyboardLatin(self): # -> 
        """ KeyboardLatin(self: _Application) """
        ...

    def KeyString(self, KeyCode:int, KeyCode2:object) -> Tuple_[str, object]:
        """ KeyString(self: _Application, KeyCode: int, KeyCode2: object) -> (str, object) """
        ...

    def LinesToPoints(self, Lines:Single) -> Single:
        """ LinesToPoints(self: _Application, Lines: Single) -> Single """
        ...

    def ListCommands(self, ListAllCommands:bool): # -> 
        """ ListCommands(self: _Application, ListAllCommands: bool) """
        ...

    def LoadMasterList(self, FileName:str): # -> 
        """ LoadMasterList(self: _Application, FileName: str) """
        ...

    def LookupNameProperties(self, Name:str): # -> 
        """ LookupNameProperties(self: _Application, Name: str) """
        ...

    def MergeDocuments(self, OriginalDocument:Document, RevisedDocument:Document, Destination:WdCompareDestination, Granularity:WdGranularity, CompareFormatting:bool, CompareCaseChanges:bool, CompareWhitespace:bool, CompareTables:bool, CompareHeaders:bool, CompareFootnotes:bool, CompareTextboxes:bool, CompareFields:bool, CompareComments:bool, CompareMoves:bool, OriginalAuthor:str, RevisedAuthor:str, FormatFrom:WdMergeFormatFrom) -> Document:
        """ MergeDocuments(self: _Application, OriginalDocument: Document, RevisedDocument: Document, Destination: WdCompareDestination, Granularity: WdGranularity, CompareFormatting: bool, CompareCaseChanges: bool, CompareWhitespace: bool, CompareTables: bool, CompareHeaders: bool, CompareFootnotes: bool, CompareTextboxes: bool, CompareFields: bool, CompareComments: bool, CompareMoves: bool, OriginalAuthor: str, RevisedAuthor: str, FormatFrom: WdMergeFormatFrom) -> Document """
        ...

    def MillimetersToPoints(self, Millimeters:Single) -> Single:
        """ MillimetersToPoints(self: _Application, Millimeters: Single) -> Single """
        ...

    def MountVolume(self, Zone:str, Server:str, Volume:str, User:object, UserPassword:object, VolumePassword:object) -> Tuple_[Int16, object, object, object]:
        """ MountVolume(self: _Application, Zone: str, Server: str, Volume: str, User: object, UserPassword: object, VolumePassword: object) -> (Int16, object, object, object) """
        ...

    def Move(self, Left:int, Top:int): # -> 
        """ Move(self: _Application, Left: int, Top: int) """
        ...

    def NewWindow(self) -> Window:
        """ NewWindow(self: _Application) -> Window """
        ...

    def NextLetter(self): # -> 
        """ NextLetter(self: _Application) """
        ...

    def OnTime(self, When:object, Name:str, Tolerance:object) -> Tuple_[object, object]:
        """ OnTime(self: _Application, When: object, Name: str, Tolerance: object) -> (object, object) """
        ...

    def OrganizerCopy(self, Source:str, Destination:str, Name:str, Object:WdOrganizerObject): # -> 
        """ OrganizerCopy(self: _Application, Source: str, Destination: str, Name: str, Object: WdOrganizerObject) """
        ...

    def OrganizerDelete(self, Source:str, Name:str, Object:WdOrganizerObject): # -> 
        """ OrganizerDelete(self: _Application, Source: str, Name: str, Object: WdOrganizerObject) """
        ...

    def OrganizerRename(self, Source:str, Name:str, NewName:str, Object:WdOrganizerObject): # -> 
        """ OrganizerRename(self: _Application, Source: str, Name: str, NewName: str, Object: WdOrganizerObject) """
        ...

    def PicasToPoints(self, Picas:Single) -> Single:
        """ PicasToPoints(self: _Application, Picas: Single) -> Single """
        ...

    def PixelsToPoints(self, Pixels:Single, fVertical:object) -> Tuple_[Single, object]:
        """ PixelsToPoints(self: _Application, Pixels: Single, fVertical: object) -> (Single, object) """
        ...

    def PointsToCentimeters(self, Points:Single) -> Single:
        """ PointsToCentimeters(self: _Application, Points: Single) -> Single """
        ...

    def PointsToInches(self, Points:Single) -> Single:
        """ PointsToInches(self: _Application, Points: Single) -> Single """
        ...

    def PointsToLines(self, Points:Single) -> Single:
        """ PointsToLines(self: _Application, Points: Single) -> Single """
        ...

    def PointsToMillimeters(self, Points:Single) -> Single:
        """ PointsToMillimeters(self: _Application, Points: Single) -> Single """
        ...

    def PointsToPicas(self, Points:Single) -> Single:
        """ PointsToPicas(self: _Application, Points: Single) -> Single """
        ...

    def PointsToPixels(self, Points:Single, fVertical:object) -> Tuple_[Single, object]:
        """ PointsToPixels(self: _Application, Points: Single, fVertical: object) -> (Single, object) """
        ...

    def PrintOut(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, FileName:object, ActivePrinterMacGX:object, ManualDuplexPrint:object, PrintZoomColumn:object, PrintZoomRow:object, PrintZoomPaperWidth:object, PrintZoomPaperHeight:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut(self: _Application, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, FileName: object, ActivePrinterMacGX: object, ManualDuplexPrint: object, PrintZoomColumn: object, PrintZoomRow: object, PrintZoomPaperWidth: object, PrintZoomPaperHeight: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOut2000(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, FileName:object, ActivePrinterMacGX:object, ManualDuplexPrint:object, PrintZoomColumn:object, PrintZoomRow:object, PrintZoomPaperWidth:object, PrintZoomPaperHeight:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut2000(self: _Application, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, FileName: object, ActivePrinterMacGX: object, ManualDuplexPrint: object, PrintZoomColumn: object, PrintZoomRow: object, PrintZoomPaperWidth: object, PrintZoomPaperHeight: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOutOld(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, FileName:object, ActivePrinterMacGX:object, ManualDuplexPrint:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOutOld(self: _Application, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, FileName: object, ActivePrinterMacGX: object, ManualDuplexPrint: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def ProductCode(self) -> str:
        """ ProductCode(self: _Application) -> str """
        ...

    def PutFocusInMailHeader(self): # -> 
        """ PutFocusInMailHeader(self: _Application) """
        ...

    def Quit(self, SaveChanges:object, OriginalFormat:object, RouteDocument:object) -> Tuple_[object, object, object]:
        """ Quit(self: _Application, SaveChanges: object, OriginalFormat: object, RouteDocument: object) -> (object, object, object) """
        ...

    def Repeat(self, Times:object) -> Tuple_[bool, object]:
        """ Repeat(self: _Application, Times: object) -> (bool, object) """
        ...

    def ResetIgnoreAll(self): # -> 
        """ ResetIgnoreAll(self: _Application) """
        ...

    def Resize(self, Width:int, Height:int): # -> 
        """ Resize(self: _Application, Width: int, Height: int) """
        ...

    def Run(self, MacroName:str, varg1:object, varg2:object, varg3:object, varg4:object, varg5:object, varg6:object, varg7:object, varg8:object, varg9:object, varg10:object, varg11:object, varg12:object, varg13:object, varg14:object, varg15:object, varg16:object, varg17:object, varg18:object, varg19:object, varg20:object, varg21:object, varg22:object, varg23:object, varg24:object, varg25:object, varg26:object, varg27:object, varg28:object, varg29:object, varg30:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Run(self: _Application, MacroName: str, varg1: object, varg2: object, varg3: object, varg4: object, varg5: object, varg6: object, varg7: object, varg8: object, varg9: object, varg10: object, varg11: object, varg12: object, varg13: object, varg14: object, varg15: object, varg16: object, varg17: object, varg18: object, varg19: object, varg20: object, varg21: object, varg22: object, varg23: object, varg24: object, varg25: object, varg26: object, varg27: object, varg28: object, varg29: object, varg30: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def RunOld(self, MacroName:str): # -> 
        """ RunOld(self: _Application, MacroName: str) """
        ...

    def ScreenRefresh(self): # -> 
        """ ScreenRefresh(self: _Application) """
        ...

    def SendFax(self): # -> 
        """ SendFax(self: _Application) """
        ...

    def SetDefaultTheme(self, Name:str, DocumentType:WdDocumentMedium): # -> 
        """ SetDefaultTheme(self: _Application, Name: str, DocumentType: WdDocumentMedium) """
        ...

    def ShowClipboard(self): # -> 
        """ ShowClipboard(self: _Application) """
        ...

    def ShowMe(self): # -> 
        """ ShowMe(self: _Application) """
        ...

    def SubstituteFont(self, UnavailableFont:str, SubstituteFont:str): # -> 
        """ SubstituteFont(self: _Application, UnavailableFont: str, SubstituteFont: str) """
        ...

    def ThreeWayMerge(self, LocalDocument:Document, ServerDocument:Document, BaseDocument:Document, FavorSource:bool): # -> 
        """ ThreeWayMerge(self: _Application, LocalDocument: Document, ServerDocument: Document, BaseDocument: Document, FavorSource: bool) """
        ...

    def ToggleKeyboard(self): # -> 
        """ ToggleKeyboard(self: _Application) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Application(ApplicationEvents4_Event, _Application): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ApplicationClass(Application, ApplicationEvents2_Event, ApplicationEvents3_Event, __ComObject, ApplicationEvents_Event): # skipped bases: <type 'ApplicationEvents4_Event'>, <type '_Application'>, <type 'object'>
    """ ApplicationClass() """
    @property
    def ActiveDocument(self) -> Document:
        """ Get: ActiveDocument(self: ApplicationClass) -> Document """
        ...

    @property
    def ActiveEncryptionSession(self) -> int:
        """ Get: ActiveEncryptionSession(self: ApplicationClass) -> int """
        ...

    @property
    def ActivePrinter(self) -> str:
        """
        Get: ActivePrinter(self: ApplicationClass) -> str
        Set: ActivePrinter(self: ApplicationClass) = value
        """
        ...

    @property
    def ActiveProtectedViewWindow(self) -> ProtectedViewWindow:
        """ Get: ActiveProtectedViewWindow(self: ApplicationClass) -> ProtectedViewWindow """
        ...

    @property
    def ActiveWindow(self) -> Window:
        """ Get: ActiveWindow(self: ApplicationClass) -> Window """
        ...

    @property
    def AddIns(self) -> AddIns:
        """ Get: AddIns(self: ApplicationClass) -> AddIns """
        ...

    @property
    def AnswerWizard(self): # -> AnswerWizard
        """ Get: AnswerWizard(self: ApplicationClass) -> AnswerWizard """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ApplicationClass) -> Application """
        ...

    @property
    def ArbitraryXMLSupportAvailable(self) -> bool:
        """ Get: ArbitraryXMLSupportAvailable(self: ApplicationClass) -> bool """
        ...

    @property
    def Assistance(self): # -> IAssistance
        """ Get: Assistance(self: ApplicationClass) -> IAssistance """
        ...

    @property
    def Assistant(self): # -> Assistant
        """ Get: Assistant(self: ApplicationClass) -> Assistant """
        ...

    @property
    def AutoCaptions(self) -> AutoCaptions:
        """ Get: AutoCaptions(self: ApplicationClass) -> AutoCaptions """
        ...

    @property
    def AutoCorrect(self) -> AutoCorrect:
        """ Get: AutoCorrect(self: ApplicationClass) -> AutoCorrect """
        ...

    @property
    def AutoCorrectEmail(self) -> AutoCorrect:
        """ Get: AutoCorrectEmail(self: ApplicationClass) -> AutoCorrect """
        ...

    @property
    def AutomationSecurity(self): # -> MsoAutomationSecurity
        """
        Get: AutomationSecurity(self: ApplicationClass) -> MsoAutomationSecurity
        Set: AutomationSecurity(self: ApplicationClass) = value
        """
        ...

    @property
    def BackgroundPrintingStatus(self) -> int:
        """ Get: BackgroundPrintingStatus(self: ApplicationClass) -> int """
        ...

    @property
    def BackgroundSavingStatus(self) -> int:
        """ Get: BackgroundSavingStatus(self: ApplicationClass) -> int """
        ...

    @property
    def Bibliography(self) -> Bibliography:
        """ Get: Bibliography(self: ApplicationClass) -> Bibliography """
        ...

    @property
    def BrowseExtraFileTypes(self) -> str:
        """
        Get: BrowseExtraFileTypes(self: ApplicationClass) -> str
        Set: BrowseExtraFileTypes(self: ApplicationClass) = value
        """
        ...

    @property
    def Browser(self) -> Browser:
        """ Get: Browser(self: ApplicationClass) -> Browser """
        ...

    @property
    def Build(self) -> str:
        """ Get: Build(self: ApplicationClass) -> str """
        ...

    @property
    def BuildFeatureCrew(self) -> str:
        """ Get: BuildFeatureCrew(self: ApplicationClass) -> str """
        ...

    @property
    def BuildFull(self) -> str:
        """ Get: BuildFull(self: ApplicationClass) -> str """
        ...

    @property
    def CapsLock(self) -> bool:
        """ Get: CapsLock(self: ApplicationClass) -> bool """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ApplicationClass) -> str
        Set: Caption(self: ApplicationClass) = value
        """
        ...

    @property
    def CaptionLabels(self) -> CaptionLabels:
        """ Get: CaptionLabels(self: ApplicationClass) -> CaptionLabels """
        ...

    @property
    def ChartDataPointTrack(self) -> bool:
        """
        Get: ChartDataPointTrack(self: ApplicationClass) -> bool
        Set: ChartDataPointTrack(self: ApplicationClass) = value
        """
        ...

    @property
    def CheckLanguage(self) -> bool:
        """
        Get: CheckLanguage(self: ApplicationClass) -> bool
        Set: CheckLanguage(self: ApplicationClass) = value
        """
        ...

    @property
    def COMAddIns(self): # -> COMAddIns
        """ Get: COMAddIns(self: ApplicationClass) -> COMAddIns """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: ApplicationClass) -> CommandBars """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ApplicationClass) -> int """
        ...

    @property
    def CustomDictionaries(self) -> Dictionaries:
        """ Get: CustomDictionaries(self: ApplicationClass) -> Dictionaries """
        ...

    @property
    def CustomizationContext(self) -> object:
        """
        Get: CustomizationContext(self: ApplicationClass) -> object
        Set: CustomizationContext(self: ApplicationClass) = value
        """
        ...

    @property
    def DefaultLegalBlackline(self) -> bool:
        """
        Get: DefaultLegalBlackline(self: ApplicationClass) -> bool
        Set: DefaultLegalBlackline(self: ApplicationClass) = value
        """
        ...

    @property
    def DefaultSaveFormat(self) -> str:
        """
        Get: DefaultSaveFormat(self: ApplicationClass) -> str
        Set: DefaultSaveFormat(self: ApplicationClass) = value
        """
        ...

    @property
    def DefaultTableSeparator(self) -> str:
        """
        Get: DefaultTableSeparator(self: ApplicationClass) -> str
        Set: DefaultTableSeparator(self: ApplicationClass) = value
        """
        ...

    @property
    def Dialogs(self) -> Dialogs:
        """ Get: Dialogs(self: ApplicationClass) -> Dialogs """
        ...

    @property
    def DisplayAlerts(self) -> WdAlertLevel:
        """
        Get: DisplayAlerts(self: ApplicationClass) -> WdAlertLevel
        Set: DisplayAlerts(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayAutoCompleteTips(self) -> bool:
        """
        Get: DisplayAutoCompleteTips(self: ApplicationClass) -> bool
        Set: DisplayAutoCompleteTips(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayDocumentInformationPanel(self) -> bool:
        """
        Get: DisplayDocumentInformationPanel(self: ApplicationClass) -> bool
        Set: DisplayDocumentInformationPanel(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayRecentFiles(self) -> bool:
        """
        Get: DisplayRecentFiles(self: ApplicationClass) -> bool
        Set: DisplayRecentFiles(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayScreenTips(self) -> bool:
        """
        Get: DisplayScreenTips(self: ApplicationClass) -> bool
        Set: DisplayScreenTips(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayScrollBars(self) -> bool:
        """
        Get: DisplayScrollBars(self: ApplicationClass) -> bool
        Set: DisplayScrollBars(self: ApplicationClass) = value
        """
        ...

    @property
    def DisplayStatusBar(self) -> bool:
        """
        Get: DisplayStatusBar(self: ApplicationClass) -> bool
        Set: DisplayStatusBar(self: ApplicationClass) = value
        """
        ...

    @property
    def Documents(self) -> Documents:
        """ Get: Documents(self: ApplicationClass) -> Documents """
        ...

    @property
    def DontResetInsertionPointProperties(self) -> bool:
        """
        Get: DontResetInsertionPointProperties(self: ApplicationClass) -> bool
        Set: DontResetInsertionPointProperties(self: ApplicationClass) = value
        """
        ...

    @property
    def Dummy1(self) -> bool:
        """ Get: Dummy1(self: ApplicationClass) -> bool """
        ...

    @property
    def EmailOptions(self) -> EmailOptions:
        """ Get: EmailOptions(self: ApplicationClass) -> EmailOptions """
        ...

    @property
    def EmailTemplate(self) -> str:
        """
        Get: EmailTemplate(self: ApplicationClass) -> str
        Set: EmailTemplate(self: ApplicationClass) = value
        """
        ...

    @property
    def EnableCancelKey(self) -> WdEnableCancelKey:
        """
        Get: EnableCancelKey(self: ApplicationClass) -> WdEnableCancelKey
        Set: EnableCancelKey(self: ApplicationClass) = value
        """
        ...

    @property
    def FeatureInstall(self): # -> MsoFeatureInstall
        """
        Get: FeatureInstall(self: ApplicationClass) -> MsoFeatureInstall
        Set: FeatureInstall(self: ApplicationClass) = value
        """
        ...

    @property
    def FileConverters(self) -> FileConverters:
        """ Get: FileConverters(self: ApplicationClass) -> FileConverters """
        ...

    @property
    def FileSearch(self): # -> FileSearch
        """ Get: FileSearch(self: ApplicationClass) -> FileSearch """
        ...

    @property
    def FileValidation(self): # -> MsoFileValidationMode
        """
        Get: FileValidation(self: ApplicationClass) -> MsoFileValidationMode
        Set: FileValidation(self: ApplicationClass) = value
        """
        ...

    @property
    def FocusInMailHeader(self) -> bool:
        """ Get: FocusInMailHeader(self: ApplicationClass) -> bool """
        ...

    @property
    def FontNames(self) -> FontNames:
        """ Get: FontNames(self: ApplicationClass) -> FontNames """
        ...

    @property
    def HangulHanjaDictionaries(self) -> HangulHanjaConversionDictionaries:
        """ Get: HangulHanjaDictionaries(self: ApplicationClass) -> HangulHanjaConversionDictionaries """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: ApplicationClass) -> int
        Set: Height(self: ApplicationClass) = value
        """
        ...

    @property
    def IsSandboxed(self) -> bool:
        """ Get: IsSandboxed(self: ApplicationClass) -> bool """
        ...

    @property
    def KeyBindings(self) -> KeyBindings:
        """ Get: KeyBindings(self: ApplicationClass) -> KeyBindings """
        ...

    @property
    def LandscapeFontNames(self) -> FontNames:
        """ Get: LandscapeFontNames(self: ApplicationClass) -> FontNames """
        ...

    @property
    def Language(self): # -> MsoLanguageID
        """ Get: Language(self: ApplicationClass) -> MsoLanguageID """
        ...

    @property
    def Languages(self) -> Languages:
        """ Get: Languages(self: ApplicationClass) -> Languages """
        ...

    @property
    def LanguageSettings(self): # -> LanguageSettings
        """ Get: LanguageSettings(self: ApplicationClass) -> LanguageSettings """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: ApplicationClass) -> int
        Set: Left(self: ApplicationClass) = value
        """
        ...

    @property
    def ListGalleries(self) -> ListGalleries:
        """ Get: ListGalleries(self: ApplicationClass) -> ListGalleries """
        ...

    @property
    def MacroContainer(self) -> object:
        """ Get: MacroContainer(self: ApplicationClass) -> object """
        ...

    @property
    def MailingLabel(self) -> MailingLabel:
        """ Get: MailingLabel(self: ApplicationClass) -> MailingLabel """
        ...

    @property
    def MailMessage(self) -> MailMessage:
        """ Get: MailMessage(self: ApplicationClass) -> MailMessage """
        ...

    @property
    def MailSystem(self) -> WdMailSystem:
        """ Get: MailSystem(self: ApplicationClass) -> WdMailSystem """
        ...

    @property
    def MAPIAvailable(self) -> bool:
        """ Get: MAPIAvailable(self: ApplicationClass) -> bool """
        ...

    @property
    def MathCoprocessorAvailable(self) -> bool:
        """ Get: MathCoprocessorAvailable(self: ApplicationClass) -> bool """
        ...

    @property
    def MouseAvailable(self) -> bool:
        """ Get: MouseAvailable(self: ApplicationClass) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ApplicationClass) -> str """
        ...

    @property
    def NewDocument(self): # -> NewFile
        """ Get: NewDocument(self: ApplicationClass) -> NewFile """
        ...

    @property
    def NormalTemplate(self) -> Template:
        """ Get: NormalTemplate(self: ApplicationClass) -> Template """
        ...

    @property
    def NumLock(self) -> bool:
        """ Get: NumLock(self: ApplicationClass) -> bool """
        ...

    @property
    def OMathAutoCorrect(self) -> OMathAutoCorrect:
        """ Get: OMathAutoCorrect(self: ApplicationClass) -> OMathAutoCorrect """
        ...

    @property
    def OpenAttachmentsInFullScreen(self) -> bool:
        """
        Get: OpenAttachmentsInFullScreen(self: ApplicationClass) -> bool
        Set: OpenAttachmentsInFullScreen(self: ApplicationClass) = value
        """
        ...

    @property
    def Options(self) -> Options:
        """ Get: Options(self: ApplicationClass) -> Options """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ApplicationClass) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: ApplicationClass) -> str """
        ...

    @property
    def PathSeparator(self) -> str:
        """ Get: PathSeparator(self: ApplicationClass) -> str """
        ...

    @property
    def PickerDialog(self): # -> PickerDialog
        """ Get: PickerDialog(self: ApplicationClass) -> PickerDialog """
        ...

    @property
    def PortraitFontNames(self) -> FontNames:
        """ Get: PortraitFontNames(self: ApplicationClass) -> FontNames """
        ...

    @property
    def PrintPreview(self) -> bool:
        """
        Get: PrintPreview(self: ApplicationClass) -> bool
        Set: PrintPreview(self: ApplicationClass) = value
        """
        ...

    @property
    def ProtectedViewWindows(self) -> ProtectedViewWindows:
        """ Get: ProtectedViewWindows(self: ApplicationClass) -> ProtectedViewWindows """
        ...

    @property
    def RecentFiles(self) -> RecentFiles:
        """ Get: RecentFiles(self: ApplicationClass) -> RecentFiles """
        ...

    @property
    def RestrictLinkedStyles(self) -> bool:
        """
        Get: RestrictLinkedStyles(self: ApplicationClass) -> bool
        Set: RestrictLinkedStyles(self: ApplicationClass) = value
        """
        ...

    @property
    def ScreenUpdating(self) -> bool:
        """
        Get: ScreenUpdating(self: ApplicationClass) -> bool
        Set: ScreenUpdating(self: ApplicationClass) = value
        """
        ...

    @property
    def Selection(self) -> Selection:
        """ Get: Selection(self: ApplicationClass) -> Selection """
        ...

    @property
    def ShowAnimation(self) -> bool:
        """
        Get: ShowAnimation(self: ApplicationClass) -> bool
        Set: ShowAnimation(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowStartupDialog(self) -> bool:
        """
        Get: ShowStartupDialog(self: ApplicationClass) -> bool
        Set: ShowStartupDialog(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowStylePreviews(self) -> bool:
        """
        Get: ShowStylePreviews(self: ApplicationClass) -> bool
        Set: ShowStylePreviews(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowVisualBasicEditor(self) -> bool:
        """
        Get: ShowVisualBasicEditor(self: ApplicationClass) -> bool
        Set: ShowVisualBasicEditor(self: ApplicationClass) = value
        """
        ...

    @property
    def ShowWindowsInTaskbar(self) -> bool:
        """
        Get: ShowWindowsInTaskbar(self: ApplicationClass) -> bool
        Set: ShowWindowsInTaskbar(self: ApplicationClass) = value
        """
        ...

    @property
    def SmartArtColors(self): # -> SmartArtColors
        """ Get: SmartArtColors(self: ApplicationClass) -> SmartArtColors """
        ...

    @property
    def SmartArtLayouts(self): # -> SmartArtLayouts
        """ Get: SmartArtLayouts(self: ApplicationClass) -> SmartArtLayouts """
        ...

    @property
    def SmartArtQuickStyles(self): # -> SmartArtQuickStyles
        """ Get: SmartArtQuickStyles(self: ApplicationClass) -> SmartArtQuickStyles """
        ...

    @property
    def SmartTagRecognizers(self) -> SmartTagRecognizers:
        """ Get: SmartTagRecognizers(self: ApplicationClass) -> SmartTagRecognizers """
        ...

    @property
    def SmartTagTypes(self) -> SmartTagTypes:
        """ Get: SmartTagTypes(self: ApplicationClass) -> SmartTagTypes """
        ...

    @property
    def SpecialMode(self) -> bool:
        """ Get: SpecialMode(self: ApplicationClass) -> bool """
        ...

    @property
    def StartupPath(self) -> str:
        """
        Get: StartupPath(self: ApplicationClass) -> str
        Set: StartupPath(self: ApplicationClass) = value
        """
        ...

    @property
    def StatusBar(self): # -> 
        """ Set: StatusBar(self: ApplicationClass) = value """
        ...

    @property
    def System(self) -> System:
        """ Get: System(self: ApplicationClass) -> System """
        ...

    @property
    def TaskPanes(self) -> TaskPanes:
        """ Get: TaskPanes(self: ApplicationClass) -> TaskPanes """
        ...

    @property
    def Tasks(self) -> Tasks:
        """ Get: Tasks(self: ApplicationClass) -> Tasks """
        ...

    @property
    def Templates(self) -> Templates:
        """ Get: Templates(self: ApplicationClass) -> Templates """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: ApplicationClass) -> int
        Set: Top(self: ApplicationClass) = value
        """
        ...

    @property
    def UndoRecord(self) -> UndoRecord:
        """ Get: UndoRecord(self: ApplicationClass) -> UndoRecord """
        ...

    @property
    def UsableHeight(self) -> int:
        """ Get: UsableHeight(self: ApplicationClass) -> int """
        ...

    @property
    def UsableWidth(self) -> int:
        """ Get: UsableWidth(self: ApplicationClass) -> int """
        ...

    @property
    def UserAddress(self) -> str:
        """
        Get: UserAddress(self: ApplicationClass) -> str
        Set: UserAddress(self: ApplicationClass) = value
        """
        ...

    @property
    def UserControl(self) -> bool:
        """ Get: UserControl(self: ApplicationClass) -> bool """
        ...

    @property
    def UserInitials(self) -> str:
        """
        Get: UserInitials(self: ApplicationClass) -> str
        Set: UserInitials(self: ApplicationClass) = value
        """
        ...

    @property
    def UserName(self) -> str:
        """
        Get: UserName(self: ApplicationClass) -> str
        Set: UserName(self: ApplicationClass) = value
        """
        ...

    @property
    def VBE(self): # -> VBE
        """ Get: VBE(self: ApplicationClass) -> VBE """
        ...

    @property
    def Version(self) -> str:
        """ Get: Version(self: ApplicationClass) -> str """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ApplicationClass) -> bool
        Set: Visible(self: ApplicationClass) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: ApplicationClass) -> int
        Set: Width(self: ApplicationClass) = value
        """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: ApplicationClass) -> Windows """
        ...

    @property
    def WindowState(self) -> WdWindowState:
        """
        Get: WindowState(self: ApplicationClass) -> WdWindowState
        Set: WindowState(self: ApplicationClass) = value
        """
        ...

    @property
    def WordBasic(self) -> object:
        """ Get: WordBasic(self: ApplicationClass) -> object """
        ...

    @property
    def XMLNamespaces(self) -> XMLNamespaces:
        """ Get: XMLNamespaces(self: ApplicationClass) -> XMLNamespaces """
        ...


    def Activate(self): # -> 
        """ Activate(self: ApplicationClass) """
        ...

    def AddAddress(self, TagID:Array, Value:Array) -> Tuple_[Array, Array]:
        """ AddAddress(self: ApplicationClass, TagID: Array, Value: Array) -> (Array, Array) """
        ...

    def add_DocumentSync(self): # -> 
        """ add_DocumentSync(self: ApplicationClass, : ApplicationEvents4_DocumentSyncEventHandler) """
        ...

    def add_EPostageInsertEx(self): # -> 
        """ add_EPostageInsertEx(self: ApplicationClass, : ApplicationEvents4_EPostageInsertExEventHandler) """
        ...

    def add_MailMergeDataSourceValidate2(self): # -> 
        """ add_MailMergeDataSourceValidate2(self: ApplicationClass, : ApplicationEvents4_MailMergeDataSourceValidate2EventHandler) """
        ...

    def add_ProtectedViewWindowActivate(self): # -> 
        """ add_ProtectedViewWindowActivate(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowActivateEventHandler) """
        ...

    def add_ProtectedViewWindowBeforeClose(self): # -> 
        """ add_ProtectedViewWindowBeforeClose(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowBeforeCloseEventHandler) """
        ...

    def add_ProtectedViewWindowBeforeEdit(self): # -> 
        """ add_ProtectedViewWindowBeforeEdit(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowBeforeEditEventHandler) """
        ...

    def add_ProtectedViewWindowDeactivate(self): # -> 
        """ add_ProtectedViewWindowDeactivate(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowDeactivateEventHandler) """
        ...

    def add_ProtectedViewWindowOpen(self): # -> 
        """ add_ProtectedViewWindowOpen(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowOpenEventHandler) """
        ...

    def add_ProtectedViewWindowSize(self): # -> 
        """ add_ProtectedViewWindowSize(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowSizeEventHandler) """
        ...

    def add_XMLSelectionChange(self): # -> 
        """ add_XMLSelectionChange(self: ApplicationClass, : ApplicationEvents4_XMLSelectionChangeEventHandler) """
        ...

    def add_XMLValidationError(self): # -> 
        """ add_XMLValidationError(self: ApplicationClass, : ApplicationEvents4_XMLValidationErrorEventHandler) """
        ...

    def ApplicationEvents2_Event_add_DocumentBeforeClose(self): # -> 
        """ ApplicationEvents2_Event_add_DocumentBeforeClose(self: ApplicationClass, : ApplicationEvents2_DocumentBeforeCloseEventHandler) """
        ...

    def ApplicationEvents2_Event_add_DocumentBeforePrint(self): # -> 
        """ ApplicationEvents2_Event_add_DocumentBeforePrint(self: ApplicationClass, : ApplicationEvents2_DocumentBeforePrintEventHandler) """
        ...

    def ApplicationEvents2_Event_add_DocumentBeforeSave(self): # -> 
        """ ApplicationEvents2_Event_add_DocumentBeforeSave(self: ApplicationClass, : ApplicationEvents2_DocumentBeforeSaveEventHandler) """
        ...

    def ApplicationEvents2_Event_add_DocumentChange(self): # -> 
        """ ApplicationEvents2_Event_add_DocumentChange(self: ApplicationClass, : ApplicationEvents2_DocumentChangeEventHandler) """
        ...

    def ApplicationEvents2_Event_add_DocumentOpen(self): # -> 
        """ ApplicationEvents2_Event_add_DocumentOpen(self: ApplicationClass, : ApplicationEvents2_DocumentOpenEventHandler) """
        ...

    def ApplicationEvents2_Event_add_NewDocument(self): # -> 
        """ ApplicationEvents2_Event_add_NewDocument(self: ApplicationClass, : ApplicationEvents2_NewDocumentEventHandler) """
        ...

    def ApplicationEvents2_Event_add_Quit(self): # -> 
        """ ApplicationEvents2_Event_add_Quit(self: ApplicationClass, : ApplicationEvents2_QuitEventHandler) """
        ...

    def ApplicationEvents2_Event_add_Startup(self): # -> 
        """ ApplicationEvents2_Event_add_Startup(self: ApplicationClass, : ApplicationEvents2_StartupEventHandler) """
        ...

    def ApplicationEvents2_Event_add_WindowActivate(self): # -> 
        """ ApplicationEvents2_Event_add_WindowActivate(self: ApplicationClass, : ApplicationEvents2_WindowActivateEventHandler) """
        ...

    def ApplicationEvents2_Event_add_WindowBeforeDoubleClick(self): # -> 
        """ ApplicationEvents2_Event_add_WindowBeforeDoubleClick(self: ApplicationClass, : ApplicationEvents2_WindowBeforeDoubleClickEventHandler) """
        ...

    def ApplicationEvents2_Event_add_WindowBeforeRightClick(self): # -> 
        """ ApplicationEvents2_Event_add_WindowBeforeRightClick(self: ApplicationClass, : ApplicationEvents2_WindowBeforeRightClickEventHandler) """
        ...

    def ApplicationEvents2_Event_add_WindowDeactivate(self): # -> 
        """ ApplicationEvents2_Event_add_WindowDeactivate(self: ApplicationClass, : ApplicationEvents2_WindowDeactivateEventHandler) """
        ...

    def ApplicationEvents2_Event_add_WindowSelectionChange(self): # -> 
        """ ApplicationEvents2_Event_add_WindowSelectionChange(self: ApplicationClass, : ApplicationEvents2_WindowSelectionChangeEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_DocumentBeforeClose(self): # -> 
        """ ApplicationEvents2_Event_remove_DocumentBeforeClose(self: ApplicationClass, : ApplicationEvents2_DocumentBeforeCloseEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_DocumentBeforePrint(self): # -> 
        """ ApplicationEvents2_Event_remove_DocumentBeforePrint(self: ApplicationClass, : ApplicationEvents2_DocumentBeforePrintEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_DocumentBeforeSave(self): # -> 
        """ ApplicationEvents2_Event_remove_DocumentBeforeSave(self: ApplicationClass, : ApplicationEvents2_DocumentBeforeSaveEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_DocumentChange(self): # -> 
        """ ApplicationEvents2_Event_remove_DocumentChange(self: ApplicationClass, : ApplicationEvents2_DocumentChangeEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_DocumentOpen(self): # -> 
        """ ApplicationEvents2_Event_remove_DocumentOpen(self: ApplicationClass, : ApplicationEvents2_DocumentOpenEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_NewDocument(self): # -> 
        """ ApplicationEvents2_Event_remove_NewDocument(self: ApplicationClass, : ApplicationEvents2_NewDocumentEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_Quit(self): # -> 
        """ ApplicationEvents2_Event_remove_Quit(self: ApplicationClass, : ApplicationEvents2_QuitEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_Startup(self): # -> 
        """ ApplicationEvents2_Event_remove_Startup(self: ApplicationClass, : ApplicationEvents2_StartupEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_WindowActivate(self): # -> 
        """ ApplicationEvents2_Event_remove_WindowActivate(self: ApplicationClass, : ApplicationEvents2_WindowActivateEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_WindowBeforeDoubleClick(self): # -> 
        """ ApplicationEvents2_Event_remove_WindowBeforeDoubleClick(self: ApplicationClass, : ApplicationEvents2_WindowBeforeDoubleClickEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_WindowBeforeRightClick(self): # -> 
        """ ApplicationEvents2_Event_remove_WindowBeforeRightClick(self: ApplicationClass, : ApplicationEvents2_WindowBeforeRightClickEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_WindowDeactivate(self): # -> 
        """ ApplicationEvents2_Event_remove_WindowDeactivate(self: ApplicationClass, : ApplicationEvents2_WindowDeactivateEventHandler) """
        ...

    def ApplicationEvents2_Event_remove_WindowSelectionChange(self): # -> 
        """ ApplicationEvents2_Event_remove_WindowSelectionChange(self: ApplicationClass, : ApplicationEvents2_WindowSelectionChangeEventHandler) """
        ...

    def ApplicationEvents3_Event_add_DocumentBeforeClose(self): # -> 
        """ ApplicationEvents3_Event_add_DocumentBeforeClose(self: ApplicationClass, : ApplicationEvents3_DocumentBeforeCloseEventHandler) """
        ...

    def ApplicationEvents3_Event_add_DocumentBeforePrint(self): # -> 
        """ ApplicationEvents3_Event_add_DocumentBeforePrint(self: ApplicationClass, : ApplicationEvents3_DocumentBeforePrintEventHandler) """
        ...

    def ApplicationEvents3_Event_add_DocumentBeforeSave(self): # -> 
        """ ApplicationEvents3_Event_add_DocumentBeforeSave(self: ApplicationClass, : ApplicationEvents3_DocumentBeforeSaveEventHandler) """
        ...

    def ApplicationEvents3_Event_add_DocumentChange(self): # -> 
        """ ApplicationEvents3_Event_add_DocumentChange(self: ApplicationClass, : ApplicationEvents3_DocumentChangeEventHandler) """
        ...

    def ApplicationEvents3_Event_add_DocumentOpen(self): # -> 
        """ ApplicationEvents3_Event_add_DocumentOpen(self: ApplicationClass, : ApplicationEvents3_DocumentOpenEventHandler) """
        ...

    def ApplicationEvents3_Event_add_EPostageInsert(self): # -> 
        """ ApplicationEvents3_Event_add_EPostageInsert(self: ApplicationClass, : ApplicationEvents3_EPostageInsertEventHandler) """
        ...

    def ApplicationEvents3_Event_add_EPostagePropertyDialog(self): # -> 
        """ ApplicationEvents3_Event_add_EPostagePropertyDialog(self: ApplicationClass, : ApplicationEvents3_EPostagePropertyDialogEventHandler) """
        ...

    def ApplicationEvents3_Event_add_MailMergeAfterMerge(self): # -> 
        """ ApplicationEvents3_Event_add_MailMergeAfterMerge(self: ApplicationClass, : ApplicationEvents3_MailMergeAfterMergeEventHandler) """
        ...

    def ApplicationEvents3_Event_add_MailMergeAfterRecordMerge(self): # -> 
        """ ApplicationEvents3_Event_add_MailMergeAfterRecordMerge(self: ApplicationClass, : ApplicationEvents3_MailMergeAfterRecordMergeEventHandler) """
        ...

    def ApplicationEvents3_Event_add_MailMergeBeforeMerge(self): # -> 
        """ ApplicationEvents3_Event_add_MailMergeBeforeMerge(self: ApplicationClass, : ApplicationEvents3_MailMergeBeforeMergeEventHandler) """
        ...

    def ApplicationEvents3_Event_add_MailMergeBeforeRecordMerge(self): # -> 
        """ ApplicationEvents3_Event_add_MailMergeBeforeRecordMerge(self: ApplicationClass, : ApplicationEvents3_MailMergeBeforeRecordMergeEventHandler) """
        ...

    def ApplicationEvents3_Event_add_MailMergeDataSourceLoad(self): # -> 
        """ ApplicationEvents3_Event_add_MailMergeDataSourceLoad(self: ApplicationClass, : ApplicationEvents3_MailMergeDataSourceLoadEventHandler) """
        ...

    def ApplicationEvents3_Event_add_MailMergeDataSourceValidate(self): # -> 
        """ ApplicationEvents3_Event_add_MailMergeDataSourceValidate(self: ApplicationClass, : ApplicationEvents3_MailMergeDataSourceValidateEventHandler) """
        ...

    def ApplicationEvents3_Event_add_MailMergeWizardSendToCustom(self): # -> 
        """ ApplicationEvents3_Event_add_MailMergeWizardSendToCustom(self: ApplicationClass, : ApplicationEvents3_MailMergeWizardSendToCustomEventHandler) """
        ...

    def ApplicationEvents3_Event_add_MailMergeWizardStateChange(self): # -> 
        """ ApplicationEvents3_Event_add_MailMergeWizardStateChange(self: ApplicationClass, : ApplicationEvents3_MailMergeWizardStateChangeEventHandler) """
        ...

    def ApplicationEvents3_Event_add_NewDocument(self): # -> 
        """ ApplicationEvents3_Event_add_NewDocument(self: ApplicationClass, : ApplicationEvents3_NewDocumentEventHandler) """
        ...

    def ApplicationEvents3_Event_add_Quit(self): # -> 
        """ ApplicationEvents3_Event_add_Quit(self: ApplicationClass, : ApplicationEvents3_QuitEventHandler) """
        ...

    def ApplicationEvents3_Event_add_Startup(self): # -> 
        """ ApplicationEvents3_Event_add_Startup(self: ApplicationClass, : ApplicationEvents3_StartupEventHandler) """
        ...

    def ApplicationEvents3_Event_add_WindowActivate(self): # -> 
        """ ApplicationEvents3_Event_add_WindowActivate(self: ApplicationClass, : ApplicationEvents3_WindowActivateEventHandler) """
        ...

    def ApplicationEvents3_Event_add_WindowBeforeDoubleClick(self): # -> 
        """ ApplicationEvents3_Event_add_WindowBeforeDoubleClick(self: ApplicationClass, : ApplicationEvents3_WindowBeforeDoubleClickEventHandler) """
        ...

    def ApplicationEvents3_Event_add_WindowBeforeRightClick(self): # -> 
        """ ApplicationEvents3_Event_add_WindowBeforeRightClick(self: ApplicationClass, : ApplicationEvents3_WindowBeforeRightClickEventHandler) """
        ...

    def ApplicationEvents3_Event_add_WindowDeactivate(self): # -> 
        """ ApplicationEvents3_Event_add_WindowDeactivate(self: ApplicationClass, : ApplicationEvents3_WindowDeactivateEventHandler) """
        ...

    def ApplicationEvents3_Event_add_WindowSelectionChange(self): # -> 
        """ ApplicationEvents3_Event_add_WindowSelectionChange(self: ApplicationClass, : ApplicationEvents3_WindowSelectionChangeEventHandler) """
        ...

    def ApplicationEvents3_Event_add_WindowSize(self): # -> 
        """ ApplicationEvents3_Event_add_WindowSize(self: ApplicationClass, : ApplicationEvents3_WindowSizeEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_DocumentBeforeClose(self): # -> 
        """ ApplicationEvents3_Event_remove_DocumentBeforeClose(self: ApplicationClass, : ApplicationEvents3_DocumentBeforeCloseEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_DocumentBeforePrint(self): # -> 
        """ ApplicationEvents3_Event_remove_DocumentBeforePrint(self: ApplicationClass, : ApplicationEvents3_DocumentBeforePrintEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_DocumentBeforeSave(self): # -> 
        """ ApplicationEvents3_Event_remove_DocumentBeforeSave(self: ApplicationClass, : ApplicationEvents3_DocumentBeforeSaveEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_DocumentChange(self): # -> 
        """ ApplicationEvents3_Event_remove_DocumentChange(self: ApplicationClass, : ApplicationEvents3_DocumentChangeEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_DocumentOpen(self): # -> 
        """ ApplicationEvents3_Event_remove_DocumentOpen(self: ApplicationClass, : ApplicationEvents3_DocumentOpenEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_EPostageInsert(self): # -> 
        """ ApplicationEvents3_Event_remove_EPostageInsert(self: ApplicationClass, : ApplicationEvents3_EPostageInsertEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_EPostagePropertyDialog(self): # -> 
        """ ApplicationEvents3_Event_remove_EPostagePropertyDialog(self: ApplicationClass, : ApplicationEvents3_EPostagePropertyDialogEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_MailMergeAfterMerge(self): # -> 
        """ ApplicationEvents3_Event_remove_MailMergeAfterMerge(self: ApplicationClass, : ApplicationEvents3_MailMergeAfterMergeEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_MailMergeAfterRecordMerge(self): # -> 
        """ ApplicationEvents3_Event_remove_MailMergeAfterRecordMerge(self: ApplicationClass, : ApplicationEvents3_MailMergeAfterRecordMergeEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_MailMergeBeforeMerge(self): # -> 
        """ ApplicationEvents3_Event_remove_MailMergeBeforeMerge(self: ApplicationClass, : ApplicationEvents3_MailMergeBeforeMergeEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_MailMergeBeforeRecordMerge(self): # -> 
        """ ApplicationEvents3_Event_remove_MailMergeBeforeRecordMerge(self: ApplicationClass, : ApplicationEvents3_MailMergeBeforeRecordMergeEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_MailMergeDataSourceLoad(self): # -> 
        """ ApplicationEvents3_Event_remove_MailMergeDataSourceLoad(self: ApplicationClass, : ApplicationEvents3_MailMergeDataSourceLoadEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_MailMergeDataSourceValidate(self): # -> 
        """ ApplicationEvents3_Event_remove_MailMergeDataSourceValidate(self: ApplicationClass, : ApplicationEvents3_MailMergeDataSourceValidateEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_MailMergeWizardSendToCustom(self): # -> 
        """ ApplicationEvents3_Event_remove_MailMergeWizardSendToCustom(self: ApplicationClass, : ApplicationEvents3_MailMergeWizardSendToCustomEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_MailMergeWizardStateChange(self): # -> 
        """ ApplicationEvents3_Event_remove_MailMergeWizardStateChange(self: ApplicationClass, : ApplicationEvents3_MailMergeWizardStateChangeEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_NewDocument(self): # -> 
        """ ApplicationEvents3_Event_remove_NewDocument(self: ApplicationClass, : ApplicationEvents3_NewDocumentEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_Quit(self): # -> 
        """ ApplicationEvents3_Event_remove_Quit(self: ApplicationClass, : ApplicationEvents3_QuitEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_Startup(self): # -> 
        """ ApplicationEvents3_Event_remove_Startup(self: ApplicationClass, : ApplicationEvents3_StartupEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_WindowActivate(self): # -> 
        """ ApplicationEvents3_Event_remove_WindowActivate(self: ApplicationClass, : ApplicationEvents3_WindowActivateEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_WindowBeforeDoubleClick(self): # -> 
        """ ApplicationEvents3_Event_remove_WindowBeforeDoubleClick(self: ApplicationClass, : ApplicationEvents3_WindowBeforeDoubleClickEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_WindowBeforeRightClick(self): # -> 
        """ ApplicationEvents3_Event_remove_WindowBeforeRightClick(self: ApplicationClass, : ApplicationEvents3_WindowBeforeRightClickEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_WindowDeactivate(self): # -> 
        """ ApplicationEvents3_Event_remove_WindowDeactivate(self: ApplicationClass, : ApplicationEvents3_WindowDeactivateEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_WindowSelectionChange(self): # -> 
        """ ApplicationEvents3_Event_remove_WindowSelectionChange(self: ApplicationClass, : ApplicationEvents3_WindowSelectionChangeEventHandler) """
        ...

    def ApplicationEvents3_Event_remove_WindowSize(self): # -> 
        """ ApplicationEvents3_Event_remove_WindowSize(self: ApplicationClass, : ApplicationEvents3_WindowSizeEventHandler) """
        ...

    def AutomaticChange(self): # -> 
        """ AutomaticChange(self: ApplicationClass) """
        ...

    def BuildKeyCode(self, Arg1:WdKey, Arg2:object, Arg3:object, Arg4:object) -> Tuple_[int, object, object, object]:
        """ BuildKeyCode(self: ApplicationClass, Arg1: WdKey, Arg2: object, Arg3: object, Arg4: object) -> (int, object, object, object) """
        ...

    def CentimetersToPoints(self, Centimeters:Single) -> Single:
        """ CentimetersToPoints(self: ApplicationClass, Centimeters: Single) -> Single """
        ...

    def ChangeFileOpenDirectory(self, Path:str): # -> 
        """ ChangeFileOpenDirectory(self: ApplicationClass, Path: str) """
        ...

    def CheckGrammar(self, String:str) -> bool:
        """ CheckGrammar(self: ApplicationClass, String: str) -> bool """
        ...

    def CheckSpelling(self, Word:str, CustomDictionary:object, IgnoreUppercase:object, MainDictionary:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[bool, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ CheckSpelling(self: ApplicationClass, Word: str, CustomDictionary: object, IgnoreUppercase: object, MainDictionary: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (bool, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def CleanString(self, String:str) -> str:
        """ CleanString(self: ApplicationClass, String: str) -> str """
        ...

    def CompareDocuments(self, OriginalDocument:Document, RevisedDocument:Document, Destination:WdCompareDestination, Granularity:WdGranularity, CompareFormatting:bool, CompareCaseChanges:bool, CompareWhitespace:bool, CompareTables:bool, CompareHeaders:bool, CompareFootnotes:bool, CompareTextboxes:bool, CompareFields:bool, CompareComments:bool, CompareMoves:bool, RevisedAuthor:str, IgnoreAllComparisonWarnings:bool) -> Document:
        """ CompareDocuments(self: ApplicationClass, OriginalDocument: Document, RevisedDocument: Document, Destination: WdCompareDestination, Granularity: WdGranularity, CompareFormatting: bool, CompareCaseChanges: bool, CompareWhitespace: bool, CompareTables: bool, CompareHeaders: bool, CompareFootnotes: bool, CompareTextboxes: bool, CompareFields: bool, CompareComments: bool, CompareMoves: bool, RevisedAuthor: str, IgnoreAllComparisonWarnings: bool) -> Document """
        ...

    def DDEExecute(self, Channel:int, Command:str): # -> 
        """ DDEExecute(self: ApplicationClass, Channel: int, Command: str) """
        ...

    def DDEInitiate(self, App:str, Topic:str) -> int:
        """ DDEInitiate(self: ApplicationClass, App: str, Topic: str) -> int """
        ...

    def DDEPoke(self, Channel:int, Item:str, Data:str): # -> 
        """ DDEPoke(self: ApplicationClass, Channel: int, Item: str, Data: str) """
        ...

    def DDERequest(self, Channel:int, Item:str) -> str:
        """ DDERequest(self: ApplicationClass, Channel: int, Item: str) -> str """
        ...

    def DDETerminate(self, Channel:int): # -> 
        """ DDETerminate(self: ApplicationClass, Channel: int) """
        ...

    def DDETerminateAll(self): # -> 
        """ DDETerminateAll(self: ApplicationClass) """
        ...

    def DefaultWebOptions(self) -> DefaultWebOptions:
        """ DefaultWebOptions(self: ApplicationClass) -> DefaultWebOptions """
        ...

    def DiscussionSupport(self, Range:object, cid:object, piCSE:object) -> Tuple_[object, object, object]:
        """ DiscussionSupport(self: ApplicationClass, Range: object, cid: object, piCSE: object) -> (object, object, object) """
        ...

    def Dummy2(self) -> bool:
        """ Dummy2(self: ApplicationClass) -> bool """
        ...

    def Dummy4(self): # -> 
        """ Dummy4(self: ApplicationClass) """
        ...

    def GetAddress(self, Name:object, AddressProperties:object, UseAutoText:object, DisplaySelectDialog:object, SelectDialog:object, CheckNamesDialog:object, RecentAddressesChoice:object, UpdateRecentAddresses:object) -> Tuple_[str, object, object, object, object, object, object, object, object]:
        """ GetAddress(self: ApplicationClass, Name: object, AddressProperties: object, UseAutoText: object, DisplaySelectDialog: object, SelectDialog: object, CheckNamesDialog: object, RecentAddressesChoice: object, UpdateRecentAddresses: object) -> (str, object, object, object, object, object, object, object, object) """
        ...

    def GetDefaultTheme(self, DocumentType:WdDocumentMedium) -> str:
        """ GetDefaultTheme(self: ApplicationClass, DocumentType: WdDocumentMedium) -> str """
        ...

    def GetSpellingSuggestions(self, Word:str, CustomDictionary:object, IgnoreUppercase:object, MainDictionary:object, SuggestionMode:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[SpellingSuggestions, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ GetSpellingSuggestions(self: ApplicationClass, Word: str, CustomDictionary: object, IgnoreUppercase: object, MainDictionary: object, SuggestionMode: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (SpellingSuggestions, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def GoBack(self): # -> 
        """ GoBack(self: ApplicationClass) """
        ...

    def GoForward(self): # -> 
        """ GoForward(self: ApplicationClass) """
        ...

    def Help(self, HelpType:object) -> object:
        """ Help(self: ApplicationClass, HelpType: object) -> object """
        ...

    def HelpTool(self): # -> 
        """ HelpTool(self: ApplicationClass) """
        ...

    def InchesToPoints(self, Inches:Single) -> Single:
        """ InchesToPoints(self: ApplicationClass, Inches: Single) -> Single """
        ...

    def Keyboard(self, LangId:int) -> int:
        """ Keyboard(self: ApplicationClass, LangId: int) -> int """
        ...

    def KeyboardBidi(self): # -> 
        """ KeyboardBidi(self: ApplicationClass) """
        ...

    def KeyboardLatin(self): # -> 
        """ KeyboardLatin(self: ApplicationClass) """
        ...

    def KeyString(self, KeyCode:int, KeyCode2:object) -> Tuple_[str, object]:
        """ KeyString(self: ApplicationClass, KeyCode: int, KeyCode2: object) -> (str, object) """
        ...

    def LinesToPoints(self, Lines:Single) -> Single:
        """ LinesToPoints(self: ApplicationClass, Lines: Single) -> Single """
        ...

    def ListCommands(self, ListAllCommands:bool): # -> 
        """ ListCommands(self: ApplicationClass, ListAllCommands: bool) """
        ...

    def LoadMasterList(self, FileName:str): # -> 
        """ LoadMasterList(self: ApplicationClass, FileName: str) """
        ...

    def LookupNameProperties(self, Name:str): # -> 
        """ LookupNameProperties(self: ApplicationClass, Name: str) """
        ...

    def MergeDocuments(self, OriginalDocument:Document, RevisedDocument:Document, Destination:WdCompareDestination, Granularity:WdGranularity, CompareFormatting:bool, CompareCaseChanges:bool, CompareWhitespace:bool, CompareTables:bool, CompareHeaders:bool, CompareFootnotes:bool, CompareTextboxes:bool, CompareFields:bool, CompareComments:bool, CompareMoves:bool, OriginalAuthor:str, RevisedAuthor:str, FormatFrom:WdMergeFormatFrom) -> Document:
        """ MergeDocuments(self: ApplicationClass, OriginalDocument: Document, RevisedDocument: Document, Destination: WdCompareDestination, Granularity: WdGranularity, CompareFormatting: bool, CompareCaseChanges: bool, CompareWhitespace: bool, CompareTables: bool, CompareHeaders: bool, CompareFootnotes: bool, CompareTextboxes: bool, CompareFields: bool, CompareComments: bool, CompareMoves: bool, OriginalAuthor: str, RevisedAuthor: str, FormatFrom: WdMergeFormatFrom) -> Document """
        ...

    def MillimetersToPoints(self, Millimeters:Single) -> Single:
        """ MillimetersToPoints(self: ApplicationClass, Millimeters: Single) -> Single """
        ...

    def MountVolume(self, Zone:str, Server:str, Volume:str, User:object, UserPassword:object, VolumePassword:object) -> Tuple_[Int16, object, object, object]:
        """ MountVolume(self: ApplicationClass, Zone: str, Server: str, Volume: str, User: object, UserPassword: object, VolumePassword: object) -> (Int16, object, object, object) """
        ...

    def Move(self, Left:int, Top:int): # -> 
        """ Move(self: ApplicationClass, Left: int, Top: int) """
        ...

    def NewWindow(self) -> Window:
        """ NewWindow(self: ApplicationClass) -> Window """
        ...

    def NextLetter(self): # -> 
        """ NextLetter(self: ApplicationClass) """
        ...

    def OnTime(self, When:object, Name:str, Tolerance:object) -> Tuple_[object, object]:
        """ OnTime(self: ApplicationClass, When: object, Name: str, Tolerance: object) -> (object, object) """
        ...

    def OrganizerCopy(self, Source:str, Destination:str, Name:str, Object:WdOrganizerObject): # -> 
        """ OrganizerCopy(self: ApplicationClass, Source: str, Destination: str, Name: str, Object: WdOrganizerObject) """
        ...

    def OrganizerDelete(self, Source:str, Name:str, Object:WdOrganizerObject): # -> 
        """ OrganizerDelete(self: ApplicationClass, Source: str, Name: str, Object: WdOrganizerObject) """
        ...

    def OrganizerRename(self, Source:str, Name:str, NewName:str, Object:WdOrganizerObject): # -> 
        """ OrganizerRename(self: ApplicationClass, Source: str, Name: str, NewName: str, Object: WdOrganizerObject) """
        ...

    def PicasToPoints(self, Picas:Single) -> Single:
        """ PicasToPoints(self: ApplicationClass, Picas: Single) -> Single """
        ...

    def PixelsToPoints(self, Pixels:Single, fVertical:object) -> Tuple_[Single, object]:
        """ PixelsToPoints(self: ApplicationClass, Pixels: Single, fVertical: object) -> (Single, object) """
        ...

    def PointsToCentimeters(self, Points:Single) -> Single:
        """ PointsToCentimeters(self: ApplicationClass, Points: Single) -> Single """
        ...

    def PointsToInches(self, Points:Single) -> Single:
        """ PointsToInches(self: ApplicationClass, Points: Single) -> Single """
        ...

    def PointsToLines(self, Points:Single) -> Single:
        """ PointsToLines(self: ApplicationClass, Points: Single) -> Single """
        ...

    def PointsToMillimeters(self, Points:Single) -> Single:
        """ PointsToMillimeters(self: ApplicationClass, Points: Single) -> Single """
        ...

    def PointsToPicas(self, Points:Single) -> Single:
        """ PointsToPicas(self: ApplicationClass, Points: Single) -> Single """
        ...

    def PointsToPixels(self, Points:Single, fVertical:object) -> Tuple_[Single, object]:
        """ PointsToPixels(self: ApplicationClass, Points: Single, fVertical: object) -> (Single, object) """
        ...

    def PrintOut(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, FileName:object, ActivePrinterMacGX:object, ManualDuplexPrint:object, PrintZoomColumn:object, PrintZoomRow:object, PrintZoomPaperWidth:object, PrintZoomPaperHeight:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut(self: ApplicationClass, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, FileName: object, ActivePrinterMacGX: object, ManualDuplexPrint: object, PrintZoomColumn: object, PrintZoomRow: object, PrintZoomPaperWidth: object, PrintZoomPaperHeight: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOut2000(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, FileName:object, ActivePrinterMacGX:object, ManualDuplexPrint:object, PrintZoomColumn:object, PrintZoomRow:object, PrintZoomPaperWidth:object, PrintZoomPaperHeight:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut2000(self: ApplicationClass, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, FileName: object, ActivePrinterMacGX: object, ManualDuplexPrint: object, PrintZoomColumn: object, PrintZoomRow: object, PrintZoomPaperWidth: object, PrintZoomPaperHeight: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOutOld(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, FileName:object, ActivePrinterMacGX:object, ManualDuplexPrint:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOutOld(self: ApplicationClass, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, FileName: object, ActivePrinterMacGX: object, ManualDuplexPrint: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def ProductCode(self) -> str:
        """ ProductCode(self: ApplicationClass) -> str """
        ...

    def PutFocusInMailHeader(self): # -> 
        """ PutFocusInMailHeader(self: ApplicationClass) """
        ...

    def Quit(self, SaveChanges:object, OriginalFormat:object, RouteDocument:object) -> Tuple_[object, object, object]:
        """ Quit(self: ApplicationClass, SaveChanges: object, OriginalFormat: object, RouteDocument: object) -> (object, object, object) """
        ...

    def remove_DocumentSync(self): # -> 
        """ remove_DocumentSync(self: ApplicationClass, : ApplicationEvents4_DocumentSyncEventHandler) """
        ...

    def remove_EPostageInsertEx(self): # -> 
        """ remove_EPostageInsertEx(self: ApplicationClass, : ApplicationEvents4_EPostageInsertExEventHandler) """
        ...

    def remove_MailMergeDataSourceValidate2(self): # -> 
        """ remove_MailMergeDataSourceValidate2(self: ApplicationClass, : ApplicationEvents4_MailMergeDataSourceValidate2EventHandler) """
        ...

    def remove_ProtectedViewWindowActivate(self): # -> 
        """ remove_ProtectedViewWindowActivate(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowActivateEventHandler) """
        ...

    def remove_ProtectedViewWindowBeforeClose(self): # -> 
        """ remove_ProtectedViewWindowBeforeClose(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowBeforeCloseEventHandler) """
        ...

    def remove_ProtectedViewWindowBeforeEdit(self): # -> 
        """ remove_ProtectedViewWindowBeforeEdit(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowBeforeEditEventHandler) """
        ...

    def remove_ProtectedViewWindowDeactivate(self): # -> 
        """ remove_ProtectedViewWindowDeactivate(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowDeactivateEventHandler) """
        ...

    def remove_ProtectedViewWindowOpen(self): # -> 
        """ remove_ProtectedViewWindowOpen(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowOpenEventHandler) """
        ...

    def remove_ProtectedViewWindowSize(self): # -> 
        """ remove_ProtectedViewWindowSize(self: ApplicationClass, : ApplicationEvents4_ProtectedViewWindowSizeEventHandler) """
        ...

    def remove_XMLSelectionChange(self): # -> 
        """ remove_XMLSelectionChange(self: ApplicationClass, : ApplicationEvents4_XMLSelectionChangeEventHandler) """
        ...

    def remove_XMLValidationError(self): # -> 
        """ remove_XMLValidationError(self: ApplicationClass, : ApplicationEvents4_XMLValidationErrorEventHandler) """
        ...

    def Repeat(self, Times:object) -> Tuple_[bool, object]:
        """ Repeat(self: ApplicationClass, Times: object) -> (bool, object) """
        ...

    def ResetIgnoreAll(self): # -> 
        """ ResetIgnoreAll(self: ApplicationClass) """
        ...

    def Resize(self, Width:int, Height:int): # -> 
        """ Resize(self: ApplicationClass, Width: int, Height: int) """
        ...

    def Run(self, MacroName:str, varg1:object, varg2:object, varg3:object, varg4:object, varg5:object, varg6:object, varg7:object, varg8:object, varg9:object, varg10:object, varg11:object, varg12:object, varg13:object, varg14:object, varg15:object, varg16:object, varg17:object, varg18:object, varg19:object, varg20:object, varg21:object, varg22:object, varg23:object, varg24:object, varg25:object, varg26:object, varg27:object, varg28:object, varg29:object, varg30:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Run(self: ApplicationClass, MacroName: str, varg1: object, varg2: object, varg3: object, varg4: object, varg5: object, varg6: object, varg7: object, varg8: object, varg9: object, varg10: object, varg11: object, varg12: object, varg13: object, varg14: object, varg15: object, varg16: object, varg17: object, varg18: object, varg19: object, varg20: object, varg21: object, varg22: object, varg23: object, varg24: object, varg25: object, varg26: object, varg27: object, varg28: object, varg29: object, varg30: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def RunOld(self, MacroName:str): # -> 
        """ RunOld(self: ApplicationClass, MacroName: str) """
        ...

    def ScreenRefresh(self): # -> 
        """ ScreenRefresh(self: ApplicationClass) """
        ...

    def SendFax(self): # -> 
        """ SendFax(self: ApplicationClass) """
        ...

    def SetDefaultTheme(self, Name:str, DocumentType:WdDocumentMedium): # -> 
        """ SetDefaultTheme(self: ApplicationClass, Name: str, DocumentType: WdDocumentMedium) """
        ...

    def ShowClipboard(self): # -> 
        """ ShowClipboard(self: ApplicationClass) """
        ...

    def ShowMe(self): # -> 
        """ ShowMe(self: ApplicationClass) """
        ...

    def SubstituteFont(self, UnavailableFont:str, SubstituteFont:str): # -> 
        """ SubstituteFont(self: ApplicationClass, UnavailableFont: str, SubstituteFont: str) """
        ...

    def ThreeWayMerge(self, LocalDocument:Document, ServerDocument:Document, BaseDocument:Document, FavorSource:bool): # -> 
        """ ThreeWayMerge(self: ApplicationClass, LocalDocument: Document, ServerDocument: Document, BaseDocument: Document, FavorSource: bool) """
        ...

    def ToggleKeyboard(self): # -> 
        """ ToggleKeyboard(self: ApplicationClass) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    ApplicationEvents2_Event_DocumentBeforeClose = ...
    ApplicationEvents2_Event_DocumentBeforePrint = ...
    ApplicationEvents2_Event_DocumentBeforeSave = ...
    ApplicationEvents2_Event_DocumentChange = ...
    ApplicationEvents2_Event_DocumentOpen = ...
    ApplicationEvents2_Event_NewDocument = ...
    ApplicationEvents2_Event_Quit = ...
    ApplicationEvents2_Event_Startup = ...
    ApplicationEvents2_Event_WindowActivate = ...
    ApplicationEvents2_Event_WindowBeforeDoubleClick = ...
    ApplicationEvents2_Event_WindowBeforeRightClick = ...
    ApplicationEvents2_Event_WindowDeactivate = ...
    ApplicationEvents2_Event_WindowSelectionChange = ...
    ApplicationEvents3_Event_DocumentBeforeClose = ...
    ApplicationEvents3_Event_DocumentBeforePrint = ...
    ApplicationEvents3_Event_DocumentBeforeSave = ...
    ApplicationEvents3_Event_DocumentChange = ...
    ApplicationEvents3_Event_DocumentOpen = ...
    ApplicationEvents3_Event_EPostageInsert = ...
    ApplicationEvents3_Event_EPostagePropertyDialog = ...
    ApplicationEvents3_Event_MailMergeAfterMerge = ...
    ApplicationEvents3_Event_MailMergeAfterRecordMerge = ...
    ApplicationEvents3_Event_MailMergeBeforeMerge = ...
    ApplicationEvents3_Event_MailMergeBeforeRecordMerge = ...
    ApplicationEvents3_Event_MailMergeDataSourceLoad = ...
    ApplicationEvents3_Event_MailMergeDataSourceValidate = ...
    ApplicationEvents3_Event_MailMergeWizardSendToCustom = ...
    ApplicationEvents3_Event_MailMergeWizardStateChange = ...
    ApplicationEvents3_Event_NewDocument = ...
    ApplicationEvents3_Event_Quit = ...
    ApplicationEvents3_Event_Startup = ...
    ApplicationEvents3_Event_WindowActivate = ...
    ApplicationEvents3_Event_WindowBeforeDoubleClick = ...
    ApplicationEvents3_Event_WindowBeforeRightClick = ...
    ApplicationEvents3_Event_WindowDeactivate = ...
    ApplicationEvents3_Event_WindowSelectionChange = ...
    ApplicationEvents3_Event_WindowSize = ...
    ApplicationEvents4_Event_NewDocument = ...
    ApplicationEvents4_Event_Quit = ...
    DocumentBeforeClose = ...
    DocumentBeforePrint = ...
    DocumentBeforeSave = ...
    DocumentChange = ...
    DocumentOpen = ...
    DocumentSync = ...
    EPostageInsert = ...
    EPostageInsertEx = ...
    EPostagePropertyDialog = ...
    MailMergeAfterMerge = ...
    MailMergeAfterRecordMerge = ...
    MailMergeBeforeMerge = ...
    MailMergeBeforeRecordMerge = ...
    MailMergeDataSourceLoad = ...
    MailMergeDataSourceValidate = ...
    MailMergeDataSourceValidate2 = ...
    MailMergeWizardSendToCustom = ...
    MailMergeWizardStateChange = ...
    ProtectedViewWindowActivate = ...
    ProtectedViewWindowBeforeClose = ...
    ProtectedViewWindowBeforeEdit = ...
    ProtectedViewWindowDeactivate = ...
    ProtectedViewWindowOpen = ...
    ProtectedViewWindowSize = ...
    Startup = ...
    WindowActivate = ...
    WindowBeforeDoubleClick = ...
    WindowBeforeRightClick = ...
    WindowDeactivate = ...
    WindowSelectionChange = ...
    WindowSize = ...
    XMLSelectionChange = ...
    XMLValidationError = ...


class ApplicationEvents: # skipped bases: <type 'object'>
    """ no doc """
    pass

class ApplicationEvents2: # skipped bases: <type 'object'>
    """ no doc """
    def DocumentBeforeClose(self, Doc:Document, Cancel:bool) -> bool:
        """ DocumentBeforeClose(self: ApplicationEvents2, Doc: Document, Cancel: bool) -> bool """
        ...

    def DocumentBeforePrint(self, Doc:Document, Cancel:bool) -> bool:
        """ DocumentBeforePrint(self: ApplicationEvents2, Doc: Document, Cancel: bool) -> bool """
        ...

    def DocumentBeforeSave(self, Doc:Document, SaveAsUI:bool, Cancel:bool) -> Tuple_[bool, bool]:
        """ DocumentBeforeSave(self: ApplicationEvents2, Doc: Document, SaveAsUI: bool, Cancel: bool) -> (bool, bool) """
        ...

    def DocumentChange(self): # -> 
        """ DocumentChange(self: ApplicationEvents2) """
        ...

    def DocumentOpen(self, Doc:Document): # -> 
        """ DocumentOpen(self: ApplicationEvents2, Doc: Document) """
        ...

    def NewDocument(self, Doc:Document): # -> 
        """ NewDocument(self: ApplicationEvents2, Doc: Document) """
        ...

    def Quit(self): # -> 
        """ Quit(self: ApplicationEvents2) """
        ...

    def Startup(self): # -> 
        """ Startup(self: ApplicationEvents2) """
        ...

    def WindowActivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowActivate(self: ApplicationEvents2, Doc: Document, Wn: Window) """
        ...

    def WindowBeforeDoubleClick(self, Sel:Selection, Cancel:bool) -> bool:
        """ WindowBeforeDoubleClick(self: ApplicationEvents2, Sel: Selection, Cancel: bool) -> bool """
        ...

    def WindowBeforeRightClick(self, Sel:Selection, Cancel:bool) -> bool:
        """ WindowBeforeRightClick(self: ApplicationEvents2, Sel: Selection, Cancel: bool) -> bool """
        ...

    def WindowDeactivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowDeactivate(self: ApplicationEvents2, Doc: Document, Wn: Window) """
        ...

    def WindowSelectionChange(self, Sel:Selection): # -> 
        """ WindowSelectionChange(self: ApplicationEvents2, Sel: Selection) """
        ...


class ApplicationEvents2_DocumentBeforeCloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_DocumentBeforeCloseEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Cancel:bool) -> bool:
        """ Invoke(self: ApplicationEvents2_DocumentBeforeCloseEventHandler, Doc: Document, Cancel: bool) -> bool """
        ...


class ApplicationEvents2_DocumentBeforePrintEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_DocumentBeforePrintEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Cancel:bool) -> bool:
        """ Invoke(self: ApplicationEvents2_DocumentBeforePrintEventHandler, Doc: Document, Cancel: bool) -> bool """
        ...


class ApplicationEvents2_DocumentBeforeSaveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_DocumentBeforeSaveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, SaveAsUI:bool, Cancel:bool) -> Tuple_[bool, bool]:
        """ Invoke(self: ApplicationEvents2_DocumentBeforeSaveEventHandler, Doc: Document, SaveAsUI: bool, Cancel: bool) -> (bool, bool) """
        ...


class ApplicationEvents2_DocumentChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_DocumentChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents2_DocumentChangeEventHandler) """
        ...


class ApplicationEvents2_DocumentOpenEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_DocumentOpenEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents2_DocumentOpenEventHandler, Doc: Document) """
        ...


class ApplicationEvents2_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_DocumentBeforeClose(self): # -> 
        """ add_DocumentBeforeClose(self: ApplicationEvents2_Event, : ApplicationEvents2_DocumentBeforeCloseEventHandler) """
        ...

    def add_DocumentBeforePrint(self): # -> 
        """ add_DocumentBeforePrint(self: ApplicationEvents2_Event, : ApplicationEvents2_DocumentBeforePrintEventHandler) """
        ...

    def add_DocumentBeforeSave(self): # -> 
        """ add_DocumentBeforeSave(self: ApplicationEvents2_Event, : ApplicationEvents2_DocumentBeforeSaveEventHandler) """
        ...

    def add_DocumentChange(self): # -> 
        """ add_DocumentChange(self: ApplicationEvents2_Event, : ApplicationEvents2_DocumentChangeEventHandler) """
        ...

    def add_DocumentOpen(self): # -> 
        """ add_DocumentOpen(self: ApplicationEvents2_Event, : ApplicationEvents2_DocumentOpenEventHandler) """
        ...

    def add_NewDocument(self): # -> 
        """ add_NewDocument(self: ApplicationEvents2_Event, : ApplicationEvents2_NewDocumentEventHandler) """
        ...

    def add_Quit(self): # -> 
        """ add_Quit(self: ApplicationEvents2_Event, : ApplicationEvents2_QuitEventHandler) """
        ...

    def add_Startup(self): # -> 
        """ add_Startup(self: ApplicationEvents2_Event, : ApplicationEvents2_StartupEventHandler) """
        ...

    def add_WindowActivate(self): # -> 
        """ add_WindowActivate(self: ApplicationEvents2_Event, : ApplicationEvents2_WindowActivateEventHandler) """
        ...

    def add_WindowBeforeDoubleClick(self): # -> 
        """ add_WindowBeforeDoubleClick(self: ApplicationEvents2_Event, : ApplicationEvents2_WindowBeforeDoubleClickEventHandler) """
        ...

    def add_WindowBeforeRightClick(self): # -> 
        """ add_WindowBeforeRightClick(self: ApplicationEvents2_Event, : ApplicationEvents2_WindowBeforeRightClickEventHandler) """
        ...

    def add_WindowDeactivate(self): # -> 
        """ add_WindowDeactivate(self: ApplicationEvents2_Event, : ApplicationEvents2_WindowDeactivateEventHandler) """
        ...

    def add_WindowSelectionChange(self): # -> 
        """ add_WindowSelectionChange(self: ApplicationEvents2_Event, : ApplicationEvents2_WindowSelectionChangeEventHandler) """
        ...

    def remove_DocumentBeforeClose(self): # -> 
        """ remove_DocumentBeforeClose(self: ApplicationEvents2_Event, : ApplicationEvents2_DocumentBeforeCloseEventHandler) """
        ...

    def remove_DocumentBeforePrint(self): # -> 
        """ remove_DocumentBeforePrint(self: ApplicationEvents2_Event, : ApplicationEvents2_DocumentBeforePrintEventHandler) """
        ...

    def remove_DocumentBeforeSave(self): # -> 
        """ remove_DocumentBeforeSave(self: ApplicationEvents2_Event, : ApplicationEvents2_DocumentBeforeSaveEventHandler) """
        ...

    def remove_DocumentChange(self): # -> 
        """ remove_DocumentChange(self: ApplicationEvents2_Event, : ApplicationEvents2_DocumentChangeEventHandler) """
        ...

    def remove_DocumentOpen(self): # -> 
        """ remove_DocumentOpen(self: ApplicationEvents2_Event, : ApplicationEvents2_DocumentOpenEventHandler) """
        ...

    def remove_NewDocument(self): # -> 
        """ remove_NewDocument(self: ApplicationEvents2_Event, : ApplicationEvents2_NewDocumentEventHandler) """
        ...

    def remove_Quit(self): # -> 
        """ remove_Quit(self: ApplicationEvents2_Event, : ApplicationEvents2_QuitEventHandler) """
        ...

    def remove_Startup(self): # -> 
        """ remove_Startup(self: ApplicationEvents2_Event, : ApplicationEvents2_StartupEventHandler) """
        ...

    def remove_WindowActivate(self): # -> 
        """ remove_WindowActivate(self: ApplicationEvents2_Event, : ApplicationEvents2_WindowActivateEventHandler) """
        ...

    def remove_WindowBeforeDoubleClick(self): # -> 
        """ remove_WindowBeforeDoubleClick(self: ApplicationEvents2_Event, : ApplicationEvents2_WindowBeforeDoubleClickEventHandler) """
        ...

    def remove_WindowBeforeRightClick(self): # -> 
        """ remove_WindowBeforeRightClick(self: ApplicationEvents2_Event, : ApplicationEvents2_WindowBeforeRightClickEventHandler) """
        ...

    def remove_WindowDeactivate(self): # -> 
        """ remove_WindowDeactivate(self: ApplicationEvents2_Event, : ApplicationEvents2_WindowDeactivateEventHandler) """
        ...

    def remove_WindowSelectionChange(self): # -> 
        """ remove_WindowSelectionChange(self: ApplicationEvents2_Event, : ApplicationEvents2_WindowSelectionChangeEventHandler) """
        ...

    DocumentBeforeClose = ...
    DocumentBeforePrint = ...
    DocumentBeforeSave = ...
    DocumentChange = ...
    DocumentOpen = ...
    NewDocument = ...
    Quit = ...
    Startup = ...
    WindowActivate = ...
    WindowBeforeDoubleClick = ...
    WindowBeforeRightClick = ...
    WindowDeactivate = ...
    WindowSelectionChange = ...


class ApplicationEvents2_NewDocumentEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_NewDocumentEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents2_NewDocumentEventHandler, Doc: Document) """
        ...


class ApplicationEvents2_QuitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_QuitEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents2_QuitEventHandler) """
        ...


class ApplicationEvents2_SinkHelper(ApplicationEvents2): # skipped bases: <type 'object'>
    """ no doc """
    m_DocumentBeforeCloseDelegate = ...
    m_DocumentBeforePrintDelegate = ...
    m_DocumentBeforeSaveDelegate = ...
    m_DocumentChangeDelegate = ...
    m_DocumentOpenDelegate = ...
    m_dwCookie = ...
    m_NewDocumentDelegate = ...
    m_QuitDelegate = ...
    m_StartupDelegate = ...
    m_WindowActivateDelegate = ...
    m_WindowBeforeDoubleClickDelegate = ...
    m_WindowBeforeRightClickDelegate = ...
    m_WindowDeactivateDelegate = ...
    m_WindowSelectionChangeDelegate = ...


class ApplicationEvents2_StartupEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_StartupEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents2_StartupEventHandler) """
        ...


class ApplicationEvents2_WindowActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_WindowActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Wn:Window): # -> 
        """ Invoke(self: ApplicationEvents2_WindowActivateEventHandler, Doc: Document, Wn: Window) """
        ...


class ApplicationEvents2_WindowBeforeDoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_WindowBeforeDoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sel:Selection, Cancel:bool) -> bool:
        """ Invoke(self: ApplicationEvents2_WindowBeforeDoubleClickEventHandler, Sel: Selection, Cancel: bool) -> bool """
        ...


class ApplicationEvents2_WindowBeforeRightClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_WindowBeforeRightClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sel:Selection, Cancel:bool) -> bool:
        """ Invoke(self: ApplicationEvents2_WindowBeforeRightClickEventHandler, Sel: Selection, Cancel: bool) -> bool """
        ...


class ApplicationEvents2_WindowDeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_WindowDeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Wn:Window): # -> 
        """ Invoke(self: ApplicationEvents2_WindowDeactivateEventHandler, Doc: Document, Wn: Window) """
        ...


class ApplicationEvents2_WindowSelectionChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents2_WindowSelectionChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sel:Selection): # -> 
        """ Invoke(self: ApplicationEvents2_WindowSelectionChangeEventHandler, Sel: Selection) """
        ...


class ApplicationEvents3: # skipped bases: <type 'object'>
    """ no doc """
    def DocumentBeforeClose(self, Doc:Document, Cancel:bool) -> bool:
        """ DocumentBeforeClose(self: ApplicationEvents3, Doc: Document, Cancel: bool) -> bool """
        ...

    def DocumentBeforePrint(self, Doc:Document, Cancel:bool) -> bool:
        """ DocumentBeforePrint(self: ApplicationEvents3, Doc: Document, Cancel: bool) -> bool """
        ...

    def DocumentBeforeSave(self, Doc:Document, SaveAsUI:bool, Cancel:bool) -> Tuple_[bool, bool]:
        """ DocumentBeforeSave(self: ApplicationEvents3, Doc: Document, SaveAsUI: bool, Cancel: bool) -> (bool, bool) """
        ...

    def DocumentChange(self): # -> 
        """ DocumentChange(self: ApplicationEvents3) """
        ...

    def DocumentOpen(self, Doc:Document): # -> 
        """ DocumentOpen(self: ApplicationEvents3, Doc: Document) """
        ...

    def EPostageInsert(self, Doc:Document): # -> 
        """ EPostageInsert(self: ApplicationEvents3, Doc: Document) """
        ...

    def EPostagePropertyDialog(self, Doc:Document): # -> 
        """ EPostagePropertyDialog(self: ApplicationEvents3, Doc: Document) """
        ...

    def MailMergeAfterMerge(self, Doc:Document, DocResult:Document): # -> 
        """ MailMergeAfterMerge(self: ApplicationEvents3, Doc: Document, DocResult: Document) """
        ...

    def MailMergeAfterRecordMerge(self, Doc:Document): # -> 
        """ MailMergeAfterRecordMerge(self: ApplicationEvents3, Doc: Document) """
        ...

    def MailMergeBeforeMerge(self, Doc:Document, StartRecord:int, EndRecord:int, Cancel:bool) -> bool:
        """ MailMergeBeforeMerge(self: ApplicationEvents3, Doc: Document, StartRecord: int, EndRecord: int, Cancel: bool) -> bool """
        ...

    def MailMergeBeforeRecordMerge(self, Doc:Document, Cancel:bool) -> bool:
        """ MailMergeBeforeRecordMerge(self: ApplicationEvents3, Doc: Document, Cancel: bool) -> bool """
        ...

    def MailMergeDataSourceLoad(self, Doc:Document): # -> 
        """ MailMergeDataSourceLoad(self: ApplicationEvents3, Doc: Document) """
        ...

    def MailMergeDataSourceValidate(self, Doc:Document, Handled:bool) -> bool:
        """ MailMergeDataSourceValidate(self: ApplicationEvents3, Doc: Document, Handled: bool) -> bool """
        ...

    def MailMergeWizardSendToCustom(self, Doc:Document): # -> 
        """ MailMergeWizardSendToCustom(self: ApplicationEvents3, Doc: Document) """
        ...

    def MailMergeWizardStateChange(self, Doc:Document, FromState:int, ToState:int, Handled:bool) -> Tuple_[int, int, bool]:
        """ MailMergeWizardStateChange(self: ApplicationEvents3, Doc: Document, FromState: int, ToState: int, Handled: bool) -> (int, int, bool) """
        ...

    def NewDocument(self, Doc:Document): # -> 
        """ NewDocument(self: ApplicationEvents3, Doc: Document) """
        ...

    def Quit(self): # -> 
        """ Quit(self: ApplicationEvents3) """
        ...

    def Startup(self): # -> 
        """ Startup(self: ApplicationEvents3) """
        ...

    def WindowActivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowActivate(self: ApplicationEvents3, Doc: Document, Wn: Window) """
        ...

    def WindowBeforeDoubleClick(self, Sel:Selection, Cancel:bool) -> bool:
        """ WindowBeforeDoubleClick(self: ApplicationEvents3, Sel: Selection, Cancel: bool) -> bool """
        ...

    def WindowBeforeRightClick(self, Sel:Selection, Cancel:bool) -> bool:
        """ WindowBeforeRightClick(self: ApplicationEvents3, Sel: Selection, Cancel: bool) -> bool """
        ...

    def WindowDeactivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowDeactivate(self: ApplicationEvents3, Doc: Document, Wn: Window) """
        ...

    def WindowSelectionChange(self, Sel:Selection): # -> 
        """ WindowSelectionChange(self: ApplicationEvents3, Sel: Selection) """
        ...

    def WindowSize(self, Doc:Document, Wn:Window): # -> 
        """ WindowSize(self: ApplicationEvents3, Doc: Document, Wn: Window) """
        ...


class ApplicationEvents3_DocumentBeforeCloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_DocumentBeforeCloseEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Cancel:bool) -> bool:
        """ Invoke(self: ApplicationEvents3_DocumentBeforeCloseEventHandler, Doc: Document, Cancel: bool) -> bool """
        ...


class ApplicationEvents3_DocumentBeforePrintEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_DocumentBeforePrintEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Cancel:bool) -> bool:
        """ Invoke(self: ApplicationEvents3_DocumentBeforePrintEventHandler, Doc: Document, Cancel: bool) -> bool """
        ...


class ApplicationEvents3_DocumentBeforeSaveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_DocumentBeforeSaveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, SaveAsUI:bool, Cancel:bool) -> Tuple_[bool, bool]:
        """ Invoke(self: ApplicationEvents3_DocumentBeforeSaveEventHandler, Doc: Document, SaveAsUI: bool, Cancel: bool) -> (bool, bool) """
        ...


class ApplicationEvents3_DocumentChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_DocumentChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents3_DocumentChangeEventHandler) """
        ...


class ApplicationEvents3_DocumentOpenEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_DocumentOpenEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents3_DocumentOpenEventHandler, Doc: Document) """
        ...


class ApplicationEvents3_EPostageInsertEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_EPostageInsertEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents3_EPostageInsertEventHandler, Doc: Document) """
        ...


class ApplicationEvents3_EPostagePropertyDialogEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_EPostagePropertyDialogEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents3_EPostagePropertyDialogEventHandler, Doc: Document) """
        ...


class ApplicationEvents3_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_DocumentBeforeClose(self): # -> 
        """ add_DocumentBeforeClose(self: ApplicationEvents3_Event, : ApplicationEvents3_DocumentBeforeCloseEventHandler) """
        ...

    def add_DocumentBeforePrint(self): # -> 
        """ add_DocumentBeforePrint(self: ApplicationEvents3_Event, : ApplicationEvents3_DocumentBeforePrintEventHandler) """
        ...

    def add_DocumentBeforeSave(self): # -> 
        """ add_DocumentBeforeSave(self: ApplicationEvents3_Event, : ApplicationEvents3_DocumentBeforeSaveEventHandler) """
        ...

    def add_DocumentChange(self): # -> 
        """ add_DocumentChange(self: ApplicationEvents3_Event, : ApplicationEvents3_DocumentChangeEventHandler) """
        ...

    def add_DocumentOpen(self): # -> 
        """ add_DocumentOpen(self: ApplicationEvents3_Event, : ApplicationEvents3_DocumentOpenEventHandler) """
        ...

    def add_EPostageInsert(self): # -> 
        """ add_EPostageInsert(self: ApplicationEvents3_Event, : ApplicationEvents3_EPostageInsertEventHandler) """
        ...

    def add_EPostagePropertyDialog(self): # -> 
        """ add_EPostagePropertyDialog(self: ApplicationEvents3_Event, : ApplicationEvents3_EPostagePropertyDialogEventHandler) """
        ...

    def add_MailMergeAfterMerge(self): # -> 
        """ add_MailMergeAfterMerge(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeAfterMergeEventHandler) """
        ...

    def add_MailMergeAfterRecordMerge(self): # -> 
        """ add_MailMergeAfterRecordMerge(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeAfterRecordMergeEventHandler) """
        ...

    def add_MailMergeBeforeMerge(self): # -> 
        """ add_MailMergeBeforeMerge(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeBeforeMergeEventHandler) """
        ...

    def add_MailMergeBeforeRecordMerge(self): # -> 
        """ add_MailMergeBeforeRecordMerge(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeBeforeRecordMergeEventHandler) """
        ...

    def add_MailMergeDataSourceLoad(self): # -> 
        """ add_MailMergeDataSourceLoad(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeDataSourceLoadEventHandler) """
        ...

    def add_MailMergeDataSourceValidate(self): # -> 
        """ add_MailMergeDataSourceValidate(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeDataSourceValidateEventHandler) """
        ...

    def add_MailMergeWizardSendToCustom(self): # -> 
        """ add_MailMergeWizardSendToCustom(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeWizardSendToCustomEventHandler) """
        ...

    def add_MailMergeWizardStateChange(self): # -> 
        """ add_MailMergeWizardStateChange(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeWizardStateChangeEventHandler) """
        ...

    def add_NewDocument(self): # -> 
        """ add_NewDocument(self: ApplicationEvents3_Event, : ApplicationEvents3_NewDocumentEventHandler) """
        ...

    def add_Quit(self): # -> 
        """ add_Quit(self: ApplicationEvents3_Event, : ApplicationEvents3_QuitEventHandler) """
        ...

    def add_Startup(self): # -> 
        """ add_Startup(self: ApplicationEvents3_Event, : ApplicationEvents3_StartupEventHandler) """
        ...

    def add_WindowActivate(self): # -> 
        """ add_WindowActivate(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowActivateEventHandler) """
        ...

    def add_WindowBeforeDoubleClick(self): # -> 
        """ add_WindowBeforeDoubleClick(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowBeforeDoubleClickEventHandler) """
        ...

    def add_WindowBeforeRightClick(self): # -> 
        """ add_WindowBeforeRightClick(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowBeforeRightClickEventHandler) """
        ...

    def add_WindowDeactivate(self): # -> 
        """ add_WindowDeactivate(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowDeactivateEventHandler) """
        ...

    def add_WindowSelectionChange(self): # -> 
        """ add_WindowSelectionChange(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowSelectionChangeEventHandler) """
        ...

    def add_WindowSize(self): # -> 
        """ add_WindowSize(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowSizeEventHandler) """
        ...

    def remove_DocumentBeforeClose(self): # -> 
        """ remove_DocumentBeforeClose(self: ApplicationEvents3_Event, : ApplicationEvents3_DocumentBeforeCloseEventHandler) """
        ...

    def remove_DocumentBeforePrint(self): # -> 
        """ remove_DocumentBeforePrint(self: ApplicationEvents3_Event, : ApplicationEvents3_DocumentBeforePrintEventHandler) """
        ...

    def remove_DocumentBeforeSave(self): # -> 
        """ remove_DocumentBeforeSave(self: ApplicationEvents3_Event, : ApplicationEvents3_DocumentBeforeSaveEventHandler) """
        ...

    def remove_DocumentChange(self): # -> 
        """ remove_DocumentChange(self: ApplicationEvents3_Event, : ApplicationEvents3_DocumentChangeEventHandler) """
        ...

    def remove_DocumentOpen(self): # -> 
        """ remove_DocumentOpen(self: ApplicationEvents3_Event, : ApplicationEvents3_DocumentOpenEventHandler) """
        ...

    def remove_EPostageInsert(self): # -> 
        """ remove_EPostageInsert(self: ApplicationEvents3_Event, : ApplicationEvents3_EPostageInsertEventHandler) """
        ...

    def remove_EPostagePropertyDialog(self): # -> 
        """ remove_EPostagePropertyDialog(self: ApplicationEvents3_Event, : ApplicationEvents3_EPostagePropertyDialogEventHandler) """
        ...

    def remove_MailMergeAfterMerge(self): # -> 
        """ remove_MailMergeAfterMerge(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeAfterMergeEventHandler) """
        ...

    def remove_MailMergeAfterRecordMerge(self): # -> 
        """ remove_MailMergeAfterRecordMerge(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeAfterRecordMergeEventHandler) """
        ...

    def remove_MailMergeBeforeMerge(self): # -> 
        """ remove_MailMergeBeforeMerge(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeBeforeMergeEventHandler) """
        ...

    def remove_MailMergeBeforeRecordMerge(self): # -> 
        """ remove_MailMergeBeforeRecordMerge(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeBeforeRecordMergeEventHandler) """
        ...

    def remove_MailMergeDataSourceLoad(self): # -> 
        """ remove_MailMergeDataSourceLoad(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeDataSourceLoadEventHandler) """
        ...

    def remove_MailMergeDataSourceValidate(self): # -> 
        """ remove_MailMergeDataSourceValidate(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeDataSourceValidateEventHandler) """
        ...

    def remove_MailMergeWizardSendToCustom(self): # -> 
        """ remove_MailMergeWizardSendToCustom(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeWizardSendToCustomEventHandler) """
        ...

    def remove_MailMergeWizardStateChange(self): # -> 
        """ remove_MailMergeWizardStateChange(self: ApplicationEvents3_Event, : ApplicationEvents3_MailMergeWizardStateChangeEventHandler) """
        ...

    def remove_NewDocument(self): # -> 
        """ remove_NewDocument(self: ApplicationEvents3_Event, : ApplicationEvents3_NewDocumentEventHandler) """
        ...

    def remove_Quit(self): # -> 
        """ remove_Quit(self: ApplicationEvents3_Event, : ApplicationEvents3_QuitEventHandler) """
        ...

    def remove_Startup(self): # -> 
        """ remove_Startup(self: ApplicationEvents3_Event, : ApplicationEvents3_StartupEventHandler) """
        ...

    def remove_WindowActivate(self): # -> 
        """ remove_WindowActivate(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowActivateEventHandler) """
        ...

    def remove_WindowBeforeDoubleClick(self): # -> 
        """ remove_WindowBeforeDoubleClick(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowBeforeDoubleClickEventHandler) """
        ...

    def remove_WindowBeforeRightClick(self): # -> 
        """ remove_WindowBeforeRightClick(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowBeforeRightClickEventHandler) """
        ...

    def remove_WindowDeactivate(self): # -> 
        """ remove_WindowDeactivate(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowDeactivateEventHandler) """
        ...

    def remove_WindowSelectionChange(self): # -> 
        """ remove_WindowSelectionChange(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowSelectionChangeEventHandler) """
        ...

    def remove_WindowSize(self): # -> 
        """ remove_WindowSize(self: ApplicationEvents3_Event, : ApplicationEvents3_WindowSizeEventHandler) """
        ...

    DocumentBeforeClose = ...
    DocumentBeforePrint = ...
    DocumentBeforeSave = ...
    DocumentChange = ...
    DocumentOpen = ...
    EPostageInsert = ...
    EPostagePropertyDialog = ...
    MailMergeAfterMerge = ...
    MailMergeAfterRecordMerge = ...
    MailMergeBeforeMerge = ...
    MailMergeBeforeRecordMerge = ...
    MailMergeDataSourceLoad = ...
    MailMergeDataSourceValidate = ...
    MailMergeWizardSendToCustom = ...
    MailMergeWizardStateChange = ...
    NewDocument = ...
    Quit = ...
    Startup = ...
    WindowActivate = ...
    WindowBeforeDoubleClick = ...
    WindowBeforeRightClick = ...
    WindowDeactivate = ...
    WindowSelectionChange = ...
    WindowSize = ...


class ApplicationEvents3_MailMergeAfterMergeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_MailMergeAfterMergeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, DocResult:Document): # -> 
        """ Invoke(self: ApplicationEvents3_MailMergeAfterMergeEventHandler, Doc: Document, DocResult: Document) """
        ...


class ApplicationEvents3_MailMergeAfterRecordMergeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_MailMergeAfterRecordMergeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents3_MailMergeAfterRecordMergeEventHandler, Doc: Document) """
        ...


class ApplicationEvents3_MailMergeBeforeMergeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_MailMergeBeforeMergeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, StartRecord:int, EndRecord:int, Cancel:bool) -> bool:
        """ Invoke(self: ApplicationEvents3_MailMergeBeforeMergeEventHandler, Doc: Document, StartRecord: int, EndRecord: int, Cancel: bool) -> bool """
        ...


class ApplicationEvents3_MailMergeBeforeRecordMergeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_MailMergeBeforeRecordMergeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Cancel:bool) -> bool:
        """ Invoke(self: ApplicationEvents3_MailMergeBeforeRecordMergeEventHandler, Doc: Document, Cancel: bool) -> bool """
        ...


class ApplicationEvents3_MailMergeDataSourceLoadEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_MailMergeDataSourceLoadEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents3_MailMergeDataSourceLoadEventHandler, Doc: Document) """
        ...


class ApplicationEvents3_MailMergeDataSourceValidateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_MailMergeDataSourceValidateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Handled:bool) -> bool:
        """ Invoke(self: ApplicationEvents3_MailMergeDataSourceValidateEventHandler, Doc: Document, Handled: bool) -> bool """
        ...


class ApplicationEvents3_MailMergeWizardSendToCustomEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_MailMergeWizardSendToCustomEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents3_MailMergeWizardSendToCustomEventHandler, Doc: Document) """
        ...


class ApplicationEvents3_MailMergeWizardStateChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_MailMergeWizardStateChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, FromState:int, ToState:int, Handled:bool) -> Tuple_[int, int, bool]:
        """ Invoke(self: ApplicationEvents3_MailMergeWizardStateChangeEventHandler, Doc: Document, FromState: int, ToState: int, Handled: bool) -> (int, int, bool) """
        ...


class ApplicationEvents3_NewDocumentEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_NewDocumentEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents3_NewDocumentEventHandler, Doc: Document) """
        ...


class ApplicationEvents3_QuitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_QuitEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents3_QuitEventHandler) """
        ...


class ApplicationEvents3_SinkHelper(ApplicationEvents3): # skipped bases: <type 'object'>
    """ no doc """
    m_DocumentBeforeCloseDelegate = ...
    m_DocumentBeforePrintDelegate = ...
    m_DocumentBeforeSaveDelegate = ...
    m_DocumentChangeDelegate = ...
    m_DocumentOpenDelegate = ...
    m_dwCookie = ...
    m_EPostageInsertDelegate = ...
    m_EPostagePropertyDialogDelegate = ...
    m_MailMergeAfterMergeDelegate = ...
    m_MailMergeAfterRecordMergeDelegate = ...
    m_MailMergeBeforeMergeDelegate = ...
    m_MailMergeBeforeRecordMergeDelegate = ...
    m_MailMergeDataSourceLoadDelegate = ...
    m_MailMergeDataSourceValidateDelegate = ...
    m_MailMergeWizardSendToCustomDelegate = ...
    m_MailMergeWizardStateChangeDelegate = ...
    m_NewDocumentDelegate = ...
    m_QuitDelegate = ...
    m_StartupDelegate = ...
    m_WindowActivateDelegate = ...
    m_WindowBeforeDoubleClickDelegate = ...
    m_WindowBeforeRightClickDelegate = ...
    m_WindowDeactivateDelegate = ...
    m_WindowSelectionChangeDelegate = ...
    m_WindowSizeDelegate = ...


class ApplicationEvents3_StartupEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_StartupEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents3_StartupEventHandler) """
        ...


class ApplicationEvents3_WindowActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_WindowActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Wn:Window): # -> 
        """ Invoke(self: ApplicationEvents3_WindowActivateEventHandler, Doc: Document, Wn: Window) """
        ...


class ApplicationEvents3_WindowBeforeDoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_WindowBeforeDoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sel:Selection, Cancel:bool) -> bool:
        """ Invoke(self: ApplicationEvents3_WindowBeforeDoubleClickEventHandler, Sel: Selection, Cancel: bool) -> bool """
        ...


class ApplicationEvents3_WindowBeforeRightClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_WindowBeforeRightClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sel:Selection, Cancel:bool) -> bool:
        """ Invoke(self: ApplicationEvents3_WindowBeforeRightClickEventHandler, Sel: Selection, Cancel: bool) -> bool """
        ...


class ApplicationEvents3_WindowDeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_WindowDeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Wn:Window): # -> 
        """ Invoke(self: ApplicationEvents3_WindowDeactivateEventHandler, Doc: Document, Wn: Window) """
        ...


class ApplicationEvents3_WindowSelectionChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_WindowSelectionChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sel:Selection): # -> 
        """ Invoke(self: ApplicationEvents3_WindowSelectionChangeEventHandler, Sel: Selection) """
        ...


class ApplicationEvents3_WindowSizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents3_WindowSizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Wn:Window): # -> 
        """ Invoke(self: ApplicationEvents3_WindowSizeEventHandler, Doc: Document, Wn: Window) """
        ...


class ApplicationEvents4: # skipped bases: <type 'object'>
    """ no doc """
    def DocumentBeforeClose(self, Doc, Cancel) -> bool:
        """ DocumentBeforeClose(self: ApplicationEvents4, Doc: Document) -> bool """
        ...

    def DocumentBeforePrint(self, Doc, Cancel) -> bool:
        """ DocumentBeforePrint(self: ApplicationEvents4, Doc: Document) -> bool """
        ...

    def DocumentBeforeSave(self, Doc, SaveAsUI, Cancel) -> Tuple_[bool, bool]:
        """ DocumentBeforeSave(self: ApplicationEvents4, Doc: Document, SaveAsUI: bool) -> (bool, bool) """
        ...

    def DocumentChange(self): # -> 
        """ DocumentChange(self: ApplicationEvents4) """
        ...

    def DocumentOpen(self, Doc:Document): # -> 
        """ DocumentOpen(self: ApplicationEvents4, Doc: Document) """
        ...

    def DocumentSync(self, Doc:Document, SyncEventType): # ->  # Not found arg types: {'SyncEventType': 'MsoSyncEventType'}
        """ DocumentSync(self: ApplicationEvents4, Doc: Document, SyncEventType: MsoSyncEventType) """
        ...

    def EPostageInsert(self, Doc:Document): # -> 
        """ EPostageInsert(self: ApplicationEvents4, Doc: Document) """
        ...

    def EPostageInsertEx(self, Doc, cpDeliveryAddrStart, cpDeliveryAddrEnd, cpReturnAddrStart, cpReturnAddrEnd, xaWidth, yaHeight, bstrPrinterName, bstrPaperFeed, fPrint, fCancel) -> bool:
        """ EPostageInsertEx(self: ApplicationEvents4, Doc: Document, cpDeliveryAddrStart: int, cpDeliveryAddrEnd: int, cpReturnAddrStart: int, cpReturnAddrEnd: int, xaWidth: int, yaHeight: int, bstrPrinterName: str, bstrPaperFeed: str, fPrint: bool) -> bool """
        ...

    def EPostagePropertyDialog(self, Doc:Document): # -> 
        """ EPostagePropertyDialog(self: ApplicationEvents4, Doc: Document) """
        ...

    def MailMergeAfterMerge(self, Doc:Document, DocResult:Document): # -> 
        """ MailMergeAfterMerge(self: ApplicationEvents4, Doc: Document, DocResult: Document) """
        ...

    def MailMergeAfterRecordMerge(self, Doc:Document): # -> 
        """ MailMergeAfterRecordMerge(self: ApplicationEvents4, Doc: Document) """
        ...

    def MailMergeBeforeMerge(self, Doc, StartRecord, EndRecord, Cancel) -> bool:
        """ MailMergeBeforeMerge(self: ApplicationEvents4, Doc: Document, StartRecord: int, EndRecord: int) -> bool """
        ...

    def MailMergeBeforeRecordMerge(self, Doc, Cancel) -> bool:
        """ MailMergeBeforeRecordMerge(self: ApplicationEvents4, Doc: Document) -> bool """
        ...

    def MailMergeDataSourceLoad(self, Doc:Document): # -> 
        """ MailMergeDataSourceLoad(self: ApplicationEvents4, Doc: Document) """
        ...

    def MailMergeDataSourceValidate(self, Doc:Document, Handled:bool) -> bool:
        """ MailMergeDataSourceValidate(self: ApplicationEvents4, Doc: Document, Handled: bool) -> bool """
        ...

    def MailMergeDataSourceValidate2(self, Doc, Handled) -> bool:
        """ MailMergeDataSourceValidate2(self: ApplicationEvents4, Doc: Document) -> bool """
        ...

    def MailMergeWizardSendToCustom(self, Doc:Document): # -> 
        """ MailMergeWizardSendToCustom(self: ApplicationEvents4, Doc: Document) """
        ...

    def MailMergeWizardStateChange(self, Doc:Document, FromState:int, ToState:int, Handled:bool) -> Tuple_[int, int, bool]:
        """ MailMergeWizardStateChange(self: ApplicationEvents4, Doc: Document, FromState: int, ToState: int, Handled: bool) -> (int, int, bool) """
        ...

    def NewDocument(self, Doc:Document): # -> 
        """ NewDocument(self: ApplicationEvents4, Doc: Document) """
        ...

    def ProtectedViewWindowActivate(self, PvWindow:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowActivate(self: ApplicationEvents4, PvWindow: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowBeforeClose(self, PvWindow, CloseReason, Cancel) -> bool:
        """ ProtectedViewWindowBeforeClose(self: ApplicationEvents4, PvWindow: ProtectedViewWindow, CloseReason: int) -> bool """
        ...

    def ProtectedViewWindowBeforeEdit(self, PvWindow, Cancel) -> bool:
        """ ProtectedViewWindowBeforeEdit(self: ApplicationEvents4, PvWindow: ProtectedViewWindow) -> bool """
        ...

    def ProtectedViewWindowDeactivate(self, PvWindow:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowDeactivate(self: ApplicationEvents4, PvWindow: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowOpen(self, PvWindow:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowOpen(self: ApplicationEvents4, PvWindow: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowSize(self, PvWindow:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowSize(self: ApplicationEvents4, PvWindow: ProtectedViewWindow) """
        ...

    def Quit(self): # -> 
        """ Quit(self: ApplicationEvents4) """
        ...

    def Startup(self): # -> 
        """ Startup(self: ApplicationEvents4) """
        ...

    def WindowActivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowActivate(self: ApplicationEvents4, Doc: Document, Wn: Window) """
        ...

    def WindowBeforeDoubleClick(self, Sel, Cancel) -> bool:
        """ WindowBeforeDoubleClick(self: ApplicationEvents4, Sel: Selection) -> bool """
        ...

    def WindowBeforeRightClick(self, Sel, Cancel) -> bool:
        """ WindowBeforeRightClick(self: ApplicationEvents4, Sel: Selection) -> bool """
        ...

    def WindowDeactivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowDeactivate(self: ApplicationEvents4, Doc: Document, Wn: Window) """
        ...

    def WindowSelectionChange(self, Sel:Selection): # -> 
        """ WindowSelectionChange(self: ApplicationEvents4, Sel: Selection) """
        ...

    def WindowSize(self, Doc:Document, Wn:Window): # -> 
        """ WindowSize(self: ApplicationEvents4, Doc: Document, Wn: Window) """
        ...

    def XMLSelectionChange(self, Sel:Selection, OldXMLNode:XMLNode, NewXMLNode:XMLNode, Reason:int) -> int:
        """ XMLSelectionChange(self: ApplicationEvents4, Sel: Selection, OldXMLNode: XMLNode, NewXMLNode: XMLNode, Reason: int) -> int """
        ...

    def XMLValidationError(self, XMLNode:XMLNode): # -> 
        """ XMLValidationError(self: ApplicationEvents4, XMLNode: XMLNode) """
        ...


class ApplicationEvents4_DocumentBeforeCloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_DocumentBeforeCloseEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents4_DocumentBeforeCloseEventHandler, Doc: Document) -> bool """
        ...


class ApplicationEvents4_DocumentBeforePrintEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_DocumentBeforePrintEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents4_DocumentBeforePrintEventHandler, Doc: Document) -> bool """
        ...


class ApplicationEvents4_DocumentBeforeSaveEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_DocumentBeforeSaveEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc, SaveAsUI, Cancel) -> Tuple_[bool, bool]:
        """ Invoke(self: ApplicationEvents4_DocumentBeforeSaveEventHandler, Doc: Document, SaveAsUI: bool) -> (bool, bool) """
        ...


class ApplicationEvents4_DocumentChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_DocumentChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents4_DocumentChangeEventHandler) """
        ...


class ApplicationEvents4_DocumentOpenEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_DocumentOpenEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents4_DocumentOpenEventHandler, Doc: Document) """
        ...


class ApplicationEvents4_DocumentSyncEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_DocumentSyncEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, SyncEventType): # ->  # Not found arg types: {'SyncEventType': 'MsoSyncEventType'}
        """ Invoke(self: ApplicationEvents4_DocumentSyncEventHandler, Doc: Document, SyncEventType: MsoSyncEventType) """
        ...


class ApplicationEvents4_EPostageInsertEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_EPostageInsertEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents4_EPostageInsertEventHandler, Doc: Document) """
        ...


class ApplicationEvents4_EPostageInsertExEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_EPostageInsertExEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc, cpDeliveryAddrStart, cpDeliveryAddrEnd, cpReturnAddrStart, cpReturnAddrEnd, xaWidth, yaHeight, bstrPrinterName, bstrPaperFeed, fPrint, fCancel) -> bool:
        """ Invoke(self: ApplicationEvents4_EPostageInsertExEventHandler, Doc: Document, cpDeliveryAddrStart: int, cpDeliveryAddrEnd: int, cpReturnAddrStart: int, cpReturnAddrEnd: int, xaWidth: int, yaHeight: int, bstrPrinterName: str, bstrPaperFeed: str, fPrint: bool) -> bool """
        ...


class ApplicationEvents4_EPostagePropertyDialogEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_EPostagePropertyDialogEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents4_EPostagePropertyDialogEventHandler, Doc: Document) """
        ...


class ApplicationEvents4_MailMergeAfterMergeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_MailMergeAfterMergeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, DocResult:Document): # -> 
        """ Invoke(self: ApplicationEvents4_MailMergeAfterMergeEventHandler, Doc: Document, DocResult: Document) """
        ...


class ApplicationEvents4_MailMergeAfterRecordMergeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_MailMergeAfterRecordMergeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents4_MailMergeAfterRecordMergeEventHandler, Doc: Document) """
        ...


class ApplicationEvents4_MailMergeBeforeMergeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_MailMergeBeforeMergeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc, StartRecord, EndRecord, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents4_MailMergeBeforeMergeEventHandler, Doc: Document, StartRecord: int, EndRecord: int) -> bool """
        ...


class ApplicationEvents4_MailMergeBeforeRecordMergeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_MailMergeBeforeRecordMergeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents4_MailMergeBeforeRecordMergeEventHandler, Doc: Document) -> bool """
        ...


class ApplicationEvents4_MailMergeDataSourceLoadEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_MailMergeDataSourceLoadEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents4_MailMergeDataSourceLoadEventHandler, Doc: Document) """
        ...


class ApplicationEvents4_MailMergeDataSourceValidate2EventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_MailMergeDataSourceValidate2EventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc, Handled) -> bool:
        """ Invoke(self: ApplicationEvents4_MailMergeDataSourceValidate2EventHandler, Doc: Document) -> bool """
        ...


class ApplicationEvents4_MailMergeDataSourceValidateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_MailMergeDataSourceValidateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Handled:bool) -> bool:
        """ Invoke(self: ApplicationEvents4_MailMergeDataSourceValidateEventHandler, Doc: Document, Handled: bool) -> bool """
        ...


class ApplicationEvents4_MailMergeWizardSendToCustomEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_MailMergeWizardSendToCustomEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents4_MailMergeWizardSendToCustomEventHandler, Doc: Document) """
        ...


class ApplicationEvents4_MailMergeWizardStateChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_MailMergeWizardStateChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, FromState:int, ToState:int, Handled:bool) -> Tuple_[int, int, bool]:
        """ Invoke(self: ApplicationEvents4_MailMergeWizardStateChangeEventHandler, Doc: Document, FromState: int, ToState: int, Handled: bool) -> (int, int, bool) """
        ...


class ApplicationEvents4_NewDocumentEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_NewDocumentEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document): # -> 
        """ Invoke(self: ApplicationEvents4_NewDocumentEventHandler, Doc: Document) """
        ...


class ApplicationEvents4_ProtectedViewWindowActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_ProtectedViewWindowActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, PvWindow:ProtectedViewWindow): # -> 
        """ Invoke(self: ApplicationEvents4_ProtectedViewWindowActivateEventHandler, PvWindow: ProtectedViewWindow) """
        ...


class ApplicationEvents4_ProtectedViewWindowBeforeCloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_ProtectedViewWindowBeforeCloseEventHandler(: object, : UIntPtr) """
    def Invoke(self, PvWindow, CloseReason, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents4_ProtectedViewWindowBeforeCloseEventHandler, PvWindow: ProtectedViewWindow, CloseReason: int) -> bool """
        ...


class ApplicationEvents4_ProtectedViewWindowBeforeEditEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_ProtectedViewWindowBeforeEditEventHandler(: object, : UIntPtr) """
    def Invoke(self, PvWindow, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents4_ProtectedViewWindowBeforeEditEventHandler, PvWindow: ProtectedViewWindow) -> bool """
        ...


class ApplicationEvents4_ProtectedViewWindowDeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_ProtectedViewWindowDeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, PvWindow:ProtectedViewWindow): # -> 
        """ Invoke(self: ApplicationEvents4_ProtectedViewWindowDeactivateEventHandler, PvWindow: ProtectedViewWindow) """
        ...


class ApplicationEvents4_ProtectedViewWindowOpenEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_ProtectedViewWindowOpenEventHandler(: object, : UIntPtr) """
    def Invoke(self, PvWindow:ProtectedViewWindow): # -> 
        """ Invoke(self: ApplicationEvents4_ProtectedViewWindowOpenEventHandler, PvWindow: ProtectedViewWindow) """
        ...


class ApplicationEvents4_ProtectedViewWindowSizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_ProtectedViewWindowSizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, PvWindow:ProtectedViewWindow): # -> 
        """ Invoke(self: ApplicationEvents4_ProtectedViewWindowSizeEventHandler, PvWindow: ProtectedViewWindow) """
        ...


class ApplicationEvents4_QuitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_QuitEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents4_QuitEventHandler) """
        ...


class ApplicationEvents4_SinkHelper(ApplicationEvents4): # skipped bases: <type 'object'>
    """ no doc """
    m_DocumentBeforeCloseDelegate = ...
    m_DocumentBeforePrintDelegate = ...
    m_DocumentBeforeSaveDelegate = ...
    m_DocumentChangeDelegate = ...
    m_DocumentOpenDelegate = ...
    m_DocumentSyncDelegate = ...
    m_dwCookie = ...
    m_EPostageInsertDelegate = ...
    m_EPostageInsertExDelegate = ...
    m_EPostagePropertyDialogDelegate = ...
    m_MailMergeAfterMergeDelegate = ...
    m_MailMergeAfterRecordMergeDelegate = ...
    m_MailMergeBeforeMergeDelegate = ...
    m_MailMergeBeforeRecordMergeDelegate = ...
    m_MailMergeDataSourceLoadDelegate = ...
    m_MailMergeDataSourceValidate2Delegate = ...
    m_MailMergeDataSourceValidateDelegate = ...
    m_MailMergeWizardSendToCustomDelegate = ...
    m_MailMergeWizardStateChangeDelegate = ...
    m_NewDocumentDelegate = ...
    m_ProtectedViewWindowActivateDelegate = ...
    m_ProtectedViewWindowBeforeCloseDelegate = ...
    m_ProtectedViewWindowBeforeEditDelegate = ...
    m_ProtectedViewWindowDeactivateDelegate = ...
    m_ProtectedViewWindowOpenDelegate = ...
    m_ProtectedViewWindowSizeDelegate = ...
    m_QuitDelegate = ...
    m_StartupDelegate = ...
    m_WindowActivateDelegate = ...
    m_WindowBeforeDoubleClickDelegate = ...
    m_WindowBeforeRightClickDelegate = ...
    m_WindowDeactivateDelegate = ...
    m_WindowSelectionChangeDelegate = ...
    m_WindowSizeDelegate = ...
    m_XMLSelectionChangeDelegate = ...
    m_XMLValidationErrorDelegate = ...


class ApplicationEvents4_StartupEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_StartupEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: ApplicationEvents4_StartupEventHandler) """
        ...


class ApplicationEvents4_WindowActivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_WindowActivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Wn:Window): # -> 
        """ Invoke(self: ApplicationEvents4_WindowActivateEventHandler, Doc: Document, Wn: Window) """
        ...


class ApplicationEvents4_WindowBeforeDoubleClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_WindowBeforeDoubleClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sel, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents4_WindowBeforeDoubleClickEventHandler, Sel: Selection) -> bool """
        ...


class ApplicationEvents4_WindowBeforeRightClickEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_WindowBeforeRightClickEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sel, Cancel) -> bool:
        """ Invoke(self: ApplicationEvents4_WindowBeforeRightClickEventHandler, Sel: Selection) -> bool """
        ...


class ApplicationEvents4_WindowDeactivateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_WindowDeactivateEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Wn:Window): # -> 
        """ Invoke(self: ApplicationEvents4_WindowDeactivateEventHandler, Doc: Document, Wn: Window) """
        ...


class ApplicationEvents4_WindowSelectionChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_WindowSelectionChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sel:Selection): # -> 
        """ Invoke(self: ApplicationEvents4_WindowSelectionChangeEventHandler, Sel: Selection) """
        ...


class ApplicationEvents4_WindowSizeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_WindowSizeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Doc:Document, Wn:Window): # -> 
        """ Invoke(self: ApplicationEvents4_WindowSizeEventHandler, Doc: Document, Wn: Window) """
        ...


class ApplicationEvents4_XMLSelectionChangeEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_XMLSelectionChangeEventHandler(: object, : UIntPtr) """
    def Invoke(self, Sel:Selection, OldXMLNode:XMLNode, NewXMLNode:XMLNode, Reason:int) -> int:
        """ Invoke(self: ApplicationEvents4_XMLSelectionChangeEventHandler, Sel: Selection, OldXMLNode: XMLNode, NewXMLNode: XMLNode, Reason: int) -> int """
        ...


class ApplicationEvents4_XMLValidationErrorEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ApplicationEvents4_XMLValidationErrorEventHandler(: object, : UIntPtr) """
    def Invoke(self, XMLNode:XMLNode): # -> 
        """ Invoke(self: ApplicationEvents4_XMLValidationErrorEventHandler, XMLNode: XMLNode) """
        ...


class ApplicationEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    pass

class ApplicationEvents_SinkHelper(ApplicationEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...


class AutoCaption: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoCaption) -> Application """
        ...

    @property
    def AutoInsert(self) -> bool:
        """
        Get: AutoInsert(self: AutoCaption) -> bool
        Set: AutoInsert(self: AutoCaption) = value
        """
        ...

    @property
    def CaptionLabel(self) -> object:
        """
        Get: CaptionLabel(self: AutoCaption) -> object
        Set: CaptionLabel(self: AutoCaption) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: AutoCaption) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: AutoCaption) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: AutoCaption) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoCaption) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AutoCaptions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoCaptions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: AutoCaptions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: AutoCaptions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoCaptions) -> object """
        ...


    def CancelAutoInsert(self): # -> 
        """ CancelAutoInsert(self: AutoCaptions) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AutoCorrect: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoCorrect) -> Application """
        ...

    @property
    def CorrectCapsLock(self) -> bool:
        """
        Get: CorrectCapsLock(self: AutoCorrect) -> bool
        Set: CorrectCapsLock(self: AutoCorrect) = value
        """
        ...

    @property
    def CorrectDays(self) -> bool:
        """
        Get: CorrectDays(self: AutoCorrect) -> bool
        Set: CorrectDays(self: AutoCorrect) = value
        """
        ...

    @property
    def CorrectHangulAndAlphabet(self) -> bool:
        """
        Get: CorrectHangulAndAlphabet(self: AutoCorrect) -> bool
        Set: CorrectHangulAndAlphabet(self: AutoCorrect) = value
        """
        ...

    @property
    def CorrectInitialCaps(self) -> bool:
        """
        Get: CorrectInitialCaps(self: AutoCorrect) -> bool
        Set: CorrectInitialCaps(self: AutoCorrect) = value
        """
        ...

    @property
    def CorrectKeyboardSetting(self) -> bool:
        """
        Get: CorrectKeyboardSetting(self: AutoCorrect) -> bool
        Set: CorrectKeyboardSetting(self: AutoCorrect) = value
        """
        ...

    @property
    def CorrectSentenceCaps(self) -> bool:
        """
        Get: CorrectSentenceCaps(self: AutoCorrect) -> bool
        Set: CorrectSentenceCaps(self: AutoCorrect) = value
        """
        ...

    @property
    def CorrectTableCells(self) -> bool:
        """
        Get: CorrectTableCells(self: AutoCorrect) -> bool
        Set: CorrectTableCells(self: AutoCorrect) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: AutoCorrect) -> int """
        ...

    @property
    def DisplayAutoCorrectOptions(self) -> bool:
        """
        Get: DisplayAutoCorrectOptions(self: AutoCorrect) -> bool
        Set: DisplayAutoCorrectOptions(self: AutoCorrect) = value
        """
        ...

    @property
    def Entries(self) -> AutoCorrectEntries:
        """ Get: Entries(self: AutoCorrect) -> AutoCorrectEntries """
        ...

    @property
    def FirstLetterAutoAdd(self) -> bool:
        """
        Get: FirstLetterAutoAdd(self: AutoCorrect) -> bool
        Set: FirstLetterAutoAdd(self: AutoCorrect) = value
        """
        ...

    @property
    def FirstLetterExceptions(self) -> FirstLetterExceptions:
        """ Get: FirstLetterExceptions(self: AutoCorrect) -> FirstLetterExceptions """
        ...

    @property
    def HangulAndAlphabetAutoAdd(self) -> bool:
        """
        Get: HangulAndAlphabetAutoAdd(self: AutoCorrect) -> bool
        Set: HangulAndAlphabetAutoAdd(self: AutoCorrect) = value
        """
        ...

    @property
    def HangulAndAlphabetExceptions(self) -> HangulAndAlphabetExceptions:
        """ Get: HangulAndAlphabetExceptions(self: AutoCorrect) -> HangulAndAlphabetExceptions """
        ...

    @property
    def OtherCorrectionsAutoAdd(self) -> bool:
        """
        Get: OtherCorrectionsAutoAdd(self: AutoCorrect) -> bool
        Set: OtherCorrectionsAutoAdd(self: AutoCorrect) = value
        """
        ...

    @property
    def OtherCorrectionsExceptions(self) -> OtherCorrectionsExceptions:
        """ Get: OtherCorrectionsExceptions(self: AutoCorrect) -> OtherCorrectionsExceptions """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoCorrect) -> object """
        ...

    @property
    def ReplaceText(self) -> bool:
        """
        Get: ReplaceText(self: AutoCorrect) -> bool
        Set: ReplaceText(self: AutoCorrect) = value
        """
        ...

    @property
    def ReplaceTextFromSpellingChecker(self) -> bool:
        """
        Get: ReplaceTextFromSpellingChecker(self: AutoCorrect) -> bool
        Set: ReplaceTextFromSpellingChecker(self: AutoCorrect) = value
        """
        ...

    @property
    def TwoInitialCapsAutoAdd(self) -> bool:
        """
        Get: TwoInitialCapsAutoAdd(self: AutoCorrect) -> bool
        Set: TwoInitialCapsAutoAdd(self: AutoCorrect) = value
        """
        ...

    @property
    def TwoInitialCapsExceptions(self) -> TwoInitialCapsExceptions:
        """ Get: TwoInitialCapsExceptions(self: AutoCorrect) -> TwoInitialCapsExceptions """
        ...



class AutoCorrectEntries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoCorrectEntries) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: AutoCorrectEntries) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: AutoCorrectEntries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoCorrectEntries) -> object """
        ...


    def Add(self, Name:str, Value:str) -> AutoCorrectEntry:
        """ Add(self: AutoCorrectEntries, Name: str, Value: str) -> AutoCorrectEntry """
        ...

    def AddRichText(self, Name:str, Range:Range) -> AutoCorrectEntry:
        """ AddRichText(self: AutoCorrectEntries, Name: str, Range: Range) -> AutoCorrectEntry """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AutoCorrectEntry: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoCorrectEntry) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: AutoCorrectEntry) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: AutoCorrectEntry) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: AutoCorrectEntry) -> str
        Set: Name(self: AutoCorrectEntry) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoCorrectEntry) -> object """
        ...

    @property
    def RichText(self) -> bool:
        """ Get: RichText(self: AutoCorrectEntry) -> bool """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: AutoCorrectEntry) -> str
        Set: Value(self: AutoCorrectEntry) = value
        """
        ...


    def Apply(self, Range:Range): # -> 
        """ Apply(self: AutoCorrectEntry, Range: Range) """
        ...

    def Delete(self): # -> 
        """ Delete(self: AutoCorrectEntry) """
        ...


class AutoTextEntries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoTextEntries) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: AutoTextEntries) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: AutoTextEntries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoTextEntries) -> object """
        ...


    def Add(self, Name:str, Range:Range) -> AutoTextEntry:
        """ Add(self: AutoTextEntries, Name: str, Range: Range) -> AutoTextEntry """
        ...

    def AppendToSpike(self, Range:Range) -> AutoTextEntry:
        """ AppendToSpike(self: AutoTextEntries, Range: Range) -> AutoTextEntry """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class AutoTextEntry: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: AutoTextEntry) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: AutoTextEntry) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: AutoTextEntry) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: AutoTextEntry) -> str
        Set: Name(self: AutoTextEntry) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AutoTextEntry) -> object """
        ...

    @property
    def StyleName(self) -> str:
        """ Get: StyleName(self: AutoTextEntry) -> str """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: AutoTextEntry) -> str
        Set: Value(self: AutoTextEntry) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: AutoTextEntry) """
        ...

    def Insert(self, Where:Range, RichText:object) -> Tuple_[Range, object]:
        """ Insert(self: AutoTextEntry, Where: Range, RichText: object) -> (Range, object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Axes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Axes) -> object """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Axes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Axes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Axes) -> object """
        ...


    def _Default(self, Type:XlAxisType, AxisGroup:XlAxisGroup) -> Axis:
        """ _Default(self: Axes, Type: XlAxisType, AxisGroup: XlAxisGroup) -> Axis """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Axis: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Axis) -> object """
        ...

    @property
    def AxisBetweenCategories(self) -> bool:
        """
        Get: AxisBetweenCategories(self: Axis) -> bool
        Set: AxisBetweenCategories(self: Axis) = value
        """
        ...

    @property
    def AxisGroup(self) -> XlAxisGroup:
        """ Get: AxisGroup(self: Axis) -> XlAxisGroup """
        ...

    @property
    def AxisTitle(self) -> AxisTitle:
        """ Get: AxisTitle(self: Axis) -> AxisTitle """
        ...

    @property
    def BaseUnit(self) -> XlTimeUnit:
        """
        Get: BaseUnit(self: Axis) -> XlTimeUnit
        Set: BaseUnit(self: Axis) = value
        """
        ...

    @property
    def BaseUnitIsAuto(self) -> bool:
        """
        Get: BaseUnitIsAuto(self: Axis) -> bool
        Set: BaseUnitIsAuto(self: Axis) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: Axis) -> ChartBorder """
        ...

    @property
    def CategoryNames(self) -> object:
        """
        Get: CategoryNames(self: Axis) -> object
        Set: CategoryNames(self: Axis) = value
        """
        ...

    @property
    def CategoryType(self) -> XlCategoryType:
        """
        Get: CategoryType(self: Axis) -> XlCategoryType
        Set: CategoryType(self: Axis) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Axis) -> int """
        ...

    @property
    def Crosses(self) -> XlAxisCrosses:
        """
        Get: Crosses(self: Axis) -> XlAxisCrosses
        Set: Crosses(self: Axis) = value
        """
        ...

    @property
    def CrossesAt(self) -> float:
        """
        Get: CrossesAt(self: Axis) -> float
        Set: CrossesAt(self: Axis) = value
        """
        ...

    @property
    def DisplayUnit(self) -> XlDisplayUnit:
        """
        Get: DisplayUnit(self: Axis) -> XlDisplayUnit
        Set: DisplayUnit(self: Axis) = value
        """
        ...

    @property
    def DisplayUnitCustom(self) -> float:
        """
        Get: DisplayUnitCustom(self: Axis) -> float
        Set: DisplayUnitCustom(self: Axis) = value
        """
        ...

    @property
    def DisplayUnitLabel(self) -> DisplayUnitLabel:
        """ Get: DisplayUnitLabel(self: Axis) -> DisplayUnitLabel """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Axis) -> ChartFormat """
        ...

    @property
    def HasDisplayUnitLabel(self) -> bool:
        """
        Get: HasDisplayUnitLabel(self: Axis) -> bool
        Set: HasDisplayUnitLabel(self: Axis) = value
        """
        ...

    @property
    def HasMajorGridlines(self) -> bool:
        """
        Get: HasMajorGridlines(self: Axis) -> bool
        Set: HasMajorGridlines(self: Axis) = value
        """
        ...

    @property
    def HasMinorGridlines(self) -> bool:
        """
        Get: HasMinorGridlines(self: Axis) -> bool
        Set: HasMinorGridlines(self: Axis) = value
        """
        ...

    @property
    def HasTitle(self) -> bool:
        """
        Get: HasTitle(self: Axis) -> bool
        Set: HasTitle(self: Axis) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: Axis) -> float """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: Axis) -> float """
        ...

    @property
    def LogBase(self) -> float:
        """
        Get: LogBase(self: Axis) -> float
        Set: LogBase(self: Axis) = value
        """
        ...

    @property
    def MajorGridlines(self) -> Gridlines:
        """ Get: MajorGridlines(self: Axis) -> Gridlines """
        ...

    @property
    def MajorTickMark(self) -> XlTickMark:
        """
        Get: MajorTickMark(self: Axis) -> XlTickMark
        Set: MajorTickMark(self: Axis) = value
        """
        ...

    @property
    def MajorUnit(self) -> float:
        """
        Get: MajorUnit(self: Axis) -> float
        Set: MajorUnit(self: Axis) = value
        """
        ...

    @property
    def MajorUnitIsAuto(self) -> bool:
        """
        Get: MajorUnitIsAuto(self: Axis) -> bool
        Set: MajorUnitIsAuto(self: Axis) = value
        """
        ...

    @property
    def MajorUnitScale(self) -> XlTimeUnit:
        """
        Get: MajorUnitScale(self: Axis) -> XlTimeUnit
        Set: MajorUnitScale(self: Axis) = value
        """
        ...

    @property
    def MaximumScale(self) -> float:
        """
        Get: MaximumScale(self: Axis) -> float
        Set: MaximumScale(self: Axis) = value
        """
        ...

    @property
    def MaximumScaleIsAuto(self) -> bool:
        """
        Get: MaximumScaleIsAuto(self: Axis) -> bool
        Set: MaximumScaleIsAuto(self: Axis) = value
        """
        ...

    @property
    def MinimumScale(self) -> float:
        """
        Get: MinimumScale(self: Axis) -> float
        Set: MinimumScale(self: Axis) = value
        """
        ...

    @property
    def MinimumScaleIsAuto(self) -> bool:
        """
        Get: MinimumScaleIsAuto(self: Axis) -> bool
        Set: MinimumScaleIsAuto(self: Axis) = value
        """
        ...

    @property
    def MinorGridlines(self) -> Gridlines:
        """ Get: MinorGridlines(self: Axis) -> Gridlines """
        ...

    @property
    def MinorTickMark(self) -> XlTickMark:
        """
        Get: MinorTickMark(self: Axis) -> XlTickMark
        Set: MinorTickMark(self: Axis) = value
        """
        ...

    @property
    def MinorUnit(self) -> float:
        """
        Get: MinorUnit(self: Axis) -> float
        Set: MinorUnit(self: Axis) = value
        """
        ...

    @property
    def MinorUnitIsAuto(self) -> bool:
        """
        Get: MinorUnitIsAuto(self: Axis) -> bool
        Set: MinorUnitIsAuto(self: Axis) = value
        """
        ...

    @property
    def MinorUnitScale(self) -> XlTimeUnit:
        """
        Get: MinorUnitScale(self: Axis) -> XlTimeUnit
        Set: MinorUnitScale(self: Axis) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Axis) -> object """
        ...

    @property
    def ReversePlotOrder(self) -> bool:
        """
        Get: ReversePlotOrder(self: Axis) -> bool
        Set: ReversePlotOrder(self: Axis) = value
        """
        ...

    @property
    def ScaleType(self) -> XlScaleType:
        """
        Get: ScaleType(self: Axis) -> XlScaleType
        Set: ScaleType(self: Axis) = value
        """
        ...

    @property
    def TickLabelPosition(self) -> XlTickLabelPosition:
        """
        Get: TickLabelPosition(self: Axis) -> XlTickLabelPosition
        Set: TickLabelPosition(self: Axis) = value
        """
        ...

    @property
    def TickLabels(self) -> TickLabels:
        """ Get: TickLabels(self: Axis) -> TickLabels """
        ...

    @property
    def TickLabelSpacing(self) -> int:
        """
        Get: TickLabelSpacing(self: Axis) -> int
        Set: TickLabelSpacing(self: Axis) = value
        """
        ...

    @property
    def TickLabelSpacingIsAuto(self) -> bool:
        """
        Get: TickLabelSpacingIsAuto(self: Axis) -> bool
        Set: TickLabelSpacingIsAuto(self: Axis) = value
        """
        ...

    @property
    def TickMarkSpacing(self) -> int:
        """
        Get: TickMarkSpacing(self: Axis) -> int
        Set: TickMarkSpacing(self: Axis) = value
        """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: Axis) -> float """
        ...

    @property
    def Type(self) -> XlAxisType:
        """
        Get: Type(self: Axis) -> XlAxisType
        Set: Type(self: Axis) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: Axis) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: Axis) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: Axis) -> object """
        ...


class AxisTitle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: AxisTitle) -> object """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: AxisTitle) -> object
        Set: AutoScaleFont(self: AxisTitle) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: AxisTitle) -> ChartBorder """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: AxisTitle) -> str
        Set: Caption(self: AxisTitle) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: AxisTitle) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: AxisTitle) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> ChartFont:
        """ Get: Font(self: AxisTitle) -> ChartFont """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: AxisTitle) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: AxisTitle) -> str
        Set: Formula(self: AxisTitle) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: AxisTitle) -> str
        Set: FormulaLocal(self: AxisTitle) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: AxisTitle) -> str
        Set: FormulaR1C1(self: AxisTitle) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: AxisTitle) -> str
        Set: FormulaR1C1Local(self: AxisTitle) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: AxisTitle) -> float """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: AxisTitle) -> object
        Set: HorizontalAlignment(self: AxisTitle) = value
        """
        ...

    @property
    def IncludeInLayout(self) -> bool:
        """
        Get: IncludeInLayout(self: AxisTitle) -> bool
        Set: IncludeInLayout(self: AxisTitle) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: AxisTitle) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: AxisTitle) -> float
        Set: Left(self: AxisTitle) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: AxisTitle) -> str """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: AxisTitle) -> object
        Set: Orientation(self: AxisTitle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: AxisTitle) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: AxisTitle) -> XlChartElementPosition
        Set: Position(self: AxisTitle) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: AxisTitle) -> int
        Set: ReadingOrder(self: AxisTitle) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: AxisTitle) -> bool
        Set: Shadow(self: AxisTitle) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: AxisTitle) -> str
        Set: Text(self: AxisTitle) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: AxisTitle) -> float
        Set: Top(self: AxisTitle) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: AxisTitle) -> object
        Set: VerticalAlignment(self: AxisTitle) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: AxisTitle) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: AxisTitle) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: AxisTitle) -> object """
        ...


class Bibliography: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Bibliography) -> Application """
        ...

    @property
    def BibliographyStyle(self) -> str:
        """
        Get: BibliographyStyle(self: Bibliography) -> str
        Set: BibliographyStyle(self: Bibliography) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Bibliography) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Bibliography) -> object """
        ...

    @property
    def Sources(self) -> Sources:
        """ Get: Sources(self: Bibliography) -> Sources """
        ...


    def GenerateUniqueTag(self) -> str:
        """ GenerateUniqueTag(self: Bibliography) -> str """
        ...


class Bookmark: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Bookmark) -> Application """
        ...

    @property
    def Column(self) -> bool:
        """ Get: Column(self: Bookmark) -> bool """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Bookmark) -> int """
        ...

    @property
    def Empty(self) -> bool:
        """ Get: Empty(self: Bookmark) -> bool """
        ...

    @property
    def End(self) -> int:
        """
        Get: End(self: Bookmark) -> int
        Set: End(self: Bookmark) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Bookmark) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Bookmark) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Bookmark) -> Range """
        ...

    @property
    def Start(self) -> int:
        """
        Get: Start(self: Bookmark) -> int
        Set: Start(self: Bookmark) = value
        """
        ...

    @property
    def StoryType(self) -> WdStoryType:
        """ Get: StoryType(self: Bookmark) -> WdStoryType """
        ...


    def Copy(self, Name:str) -> Bookmark:
        """ Copy(self: Bookmark, Name: str) -> Bookmark """
        ...

    def Delete(self): # -> 
        """ Delete(self: Bookmark) """
        ...

    def Select(self): # -> 
        """ Select(self: Bookmark) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Bookmarks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Bookmarks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Bookmarks) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Bookmarks) -> int """
        ...

    @property
    def DefaultSorting(self) -> WdBookmarkSortBy:
        """
        Get: DefaultSorting(self: Bookmarks) -> WdBookmarkSortBy
        Set: DefaultSorting(self: Bookmarks) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Bookmarks) -> object """
        ...

    @property
    def ShowHidden(self) -> bool:
        """
        Get: ShowHidden(self: Bookmarks) -> bool
        Set: ShowHidden(self: Bookmarks) = value
        """
        ...


    def Add(self, Name:str, Range:object) -> Tuple_[Bookmark, object]:
        """ Add(self: Bookmarks, Name: str, Range: object) -> (Bookmark, object) """
        ...

    def Exists(self, Name:str) -> bool:
        """ Exists(self: Bookmarks, Name: str) -> bool """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Border: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Border) -> Application """
        ...

    @property
    def ArtStyle(self) -> WdPageBorderArt:
        """
        Get: ArtStyle(self: Border) -> WdPageBorderArt
        Set: ArtStyle(self: Border) = value
        """
        ...

    @property
    def ArtWidth(self) -> int:
        """
        Get: ArtWidth(self: Border) -> int
        Set: ArtWidth(self: Border) = value
        """
        ...

    @property
    def Color(self) -> WdColor:
        """
        Get: Color(self: Border) -> WdColor
        Set: Color(self: Border) = value
        """
        ...

    @property
    def ColorIndex(self) -> WdColorIndex:
        """
        Get: ColorIndex(self: Border) -> WdColorIndex
        Set: ColorIndex(self: Border) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Border) -> int """
        ...

    @property
    def Inside(self) -> bool:
        """ Get: Inside(self: Border) -> bool """
        ...

    @property
    def LineStyle(self) -> WdLineStyle:
        """
        Get: LineStyle(self: Border) -> WdLineStyle
        Set: LineStyle(self: Border) = value
        """
        ...

    @property
    def LineWidth(self) -> WdLineWidth:
        """
        Get: LineWidth(self: Border) -> WdLineWidth
        Set: LineWidth(self: Border) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Border) -> object """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Border) -> bool
        Set: Visible(self: Border) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Borders(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlwaysInFront(self) -> bool:
        """
        Get: AlwaysInFront(self: Borders) -> bool
        Set: AlwaysInFront(self: Borders) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Borders) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Borders) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Borders) -> int """
        ...

    @property
    def DistanceFrom(self) -> WdBorderDistanceFrom:
        """
        Get: DistanceFrom(self: Borders) -> WdBorderDistanceFrom
        Set: DistanceFrom(self: Borders) = value
        """
        ...

    @property
    def DistanceFromBottom(self) -> int:
        """
        Get: DistanceFromBottom(self: Borders) -> int
        Set: DistanceFromBottom(self: Borders) = value
        """
        ...

    @property
    def DistanceFromLeft(self) -> int:
        """
        Get: DistanceFromLeft(self: Borders) -> int
        Set: DistanceFromLeft(self: Borders) = value
        """
        ...

    @property
    def DistanceFromRight(self) -> int:
        """
        Get: DistanceFromRight(self: Borders) -> int
        Set: DistanceFromRight(self: Borders) = value
        """
        ...

    @property
    def DistanceFromTop(self) -> int:
        """
        Get: DistanceFromTop(self: Borders) -> int
        Set: DistanceFromTop(self: Borders) = value
        """
        ...

    @property
    def Enable(self) -> int:
        """
        Get: Enable(self: Borders) -> int
        Set: Enable(self: Borders) = value
        """
        ...

    @property
    def EnableFirstPageInSection(self) -> bool:
        """
        Get: EnableFirstPageInSection(self: Borders) -> bool
        Set: EnableFirstPageInSection(self: Borders) = value
        """
        ...

    @property
    def EnableOtherPagesInSection(self) -> bool:
        """
        Get: EnableOtherPagesInSection(self: Borders) -> bool
        Set: EnableOtherPagesInSection(self: Borders) = value
        """
        ...

    @property
    def HasHorizontal(self) -> bool:
        """ Get: HasHorizontal(self: Borders) -> bool """
        ...

    @property
    def HasVertical(self) -> bool:
        """ Get: HasVertical(self: Borders) -> bool """
        ...

    @property
    def InsideColor(self) -> WdColor:
        """
        Get: InsideColor(self: Borders) -> WdColor
        Set: InsideColor(self: Borders) = value
        """
        ...

    @property
    def InsideColorIndex(self) -> WdColorIndex:
        """
        Get: InsideColorIndex(self: Borders) -> WdColorIndex
        Set: InsideColorIndex(self: Borders) = value
        """
        ...

    @property
    def InsideLineStyle(self) -> WdLineStyle:
        """
        Get: InsideLineStyle(self: Borders) -> WdLineStyle
        Set: InsideLineStyle(self: Borders) = value
        """
        ...

    @property
    def InsideLineWidth(self) -> WdLineWidth:
        """
        Get: InsideLineWidth(self: Borders) -> WdLineWidth
        Set: InsideLineWidth(self: Borders) = value
        """
        ...

    @property
    def JoinBorders(self) -> bool:
        """
        Get: JoinBorders(self: Borders) -> bool
        Set: JoinBorders(self: Borders) = value
        """
        ...

    @property
    def OutsideColor(self) -> WdColor:
        """
        Get: OutsideColor(self: Borders) -> WdColor
        Set: OutsideColor(self: Borders) = value
        """
        ...

    @property
    def OutsideColorIndex(self) -> WdColorIndex:
        """
        Get: OutsideColorIndex(self: Borders) -> WdColorIndex
        Set: OutsideColorIndex(self: Borders) = value
        """
        ...

    @property
    def OutsideLineStyle(self) -> WdLineStyle:
        """
        Get: OutsideLineStyle(self: Borders) -> WdLineStyle
        Set: OutsideLineStyle(self: Borders) = value
        """
        ...

    @property
    def OutsideLineWidth(self) -> WdLineWidth:
        """
        Get: OutsideLineWidth(self: Borders) -> WdLineWidth
        Set: OutsideLineWidth(self: Borders) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Borders) -> object """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Borders) -> bool
        Set: Shadow(self: Borders) = value
        """
        ...

    @property
    def SurroundFooter(self) -> bool:
        """
        Get: SurroundFooter(self: Borders) -> bool
        Set: SurroundFooter(self: Borders) = value
        """
        ...

    @property
    def SurroundHeader(self) -> bool:
        """
        Get: SurroundHeader(self: Borders) -> bool
        Set: SurroundHeader(self: Borders) = value
        """
        ...


    def ApplyPageBordersToAllSections(self): # -> 
        """ ApplyPageBordersToAllSections(self: Borders) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Break: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Break) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Break) -> int """
        ...

    @property
    def PageIndex(self) -> int:
        """ Get: PageIndex(self: Break) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Break) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Break) -> Range """
        ...



class Breaks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Breaks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Breaks) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Breaks) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Breaks) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Broadcast: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Broadcast) -> Application """
        ...

    @property
    def AttendeeUrl(self) -> str:
        """ Get: AttendeeUrl(self: Broadcast) -> str """
        ...

    @property
    def Capabilities(self) -> int:
        """ Get: Capabilities(self: Broadcast) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Broadcast) -> object """
        ...

    @property
    def PresenterServiceUrl(self) -> str:
        """ Get: PresenterServiceUrl(self: Broadcast) -> str """
        ...

    @property
    def SessionID(self) -> str:
        """ Get: SessionID(self: Broadcast) -> str """
        ...

    @property
    def State(self): # -> MsoBroadcastState
        """ Get: State(self: Broadcast) -> MsoBroadcastState """
        ...


    def AddMeetingNotes(self, notesUrl:str, notesWacUrl:str): # -> 
        """ AddMeetingNotes(self: Broadcast, notesUrl: str, notesWacUrl: str) """
        ...

    def End(self): # -> 
        """ End(self: Broadcast) """
        ...

    def Pause(self): # -> 
        """ Pause(self: Broadcast) """
        ...

    def Resume(self): # -> 
        """ Resume(self: Broadcast) """
        ...

    def Start(self, serverUrl:str): # -> 
        """ Start(self: Broadcast, serverUrl: str) """
        ...


class Browser: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Browser) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Browser) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Browser) -> object """
        ...

    @property
    def Target(self) -> WdBrowseTarget:
        """
        Get: Target(self: Browser) -> WdBrowseTarget
        Set: Target(self: Browser) = value
        """
        ...


    def Next(self): # -> 
        """ Next(self: Browser) """
        ...

    def Previous(self): # -> 
        """ Previous(self: Browser) """
        ...


class BuildingBlock: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: BuildingBlock) -> Application """
        ...

    @property
    def Category(self) -> Category:
        """ Get: Category(self: BuildingBlock) -> Category """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: BuildingBlock) -> int """
        ...

    @property
    def Description(self) -> str:
        """
        Get: Description(self: BuildingBlock) -> str
        Set: Description(self: BuildingBlock) = value
        """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: BuildingBlock) -> str """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: BuildingBlock) -> int """
        ...

    @property
    def InsertOptions(self) -> int:
        """
        Get: InsertOptions(self: BuildingBlock) -> int
        Set: InsertOptions(self: BuildingBlock) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: BuildingBlock) -> str
        Set: Name(self: BuildingBlock) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: BuildingBlock) -> object """
        ...

    @property
    def Type(self) -> BuildingBlockType:
        """ Get: Type(self: BuildingBlock) -> BuildingBlockType """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: BuildingBlock) -> str
        Set: Value(self: BuildingBlock) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: BuildingBlock) """
        ...

    def Insert(self, Where:Range, RichText:object) -> Tuple_[Range, object]:
        """ Insert(self: BuildingBlock, Where: Range, RichText: object) -> (Range, object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class BuildingBlockEntries: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: BuildingBlockEntries) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: BuildingBlockEntries) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: BuildingBlockEntries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: BuildingBlockEntries) -> object """
        ...


    def Add(self, Name:str, Type:WdBuildingBlockTypes, Category:str, Range:Range, Description:object, InsertOptions:WdDocPartInsertOptions) -> Tuple_[BuildingBlock, object]:
        """ Add(self: BuildingBlockEntries, Name: str, Type: WdBuildingBlockTypes, Category: str, Range: Range, Description: object, InsertOptions: WdDocPartInsertOptions) -> (BuildingBlock, object) """
        ...

    def Item(self, Index:object) -> Tuple_[BuildingBlock, object]:
        """ Item(self: BuildingBlockEntries, Index: object) -> (BuildingBlock, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class BuildingBlocks: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: BuildingBlocks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: BuildingBlocks) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: BuildingBlocks) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: BuildingBlocks) -> object """
        ...


    def Add(self, Name:str, Range:Range, Description:object, InsertOptions:WdDocPartInsertOptions) -> Tuple_[BuildingBlock, object]:
        """ Add(self: BuildingBlocks, Name: str, Range: Range, Description: object, InsertOptions: WdDocPartInsertOptions) -> (BuildingBlock, object) """
        ...

    def Item(self, Index:object) -> Tuple_[BuildingBlock, object]:
        """ Item(self: BuildingBlocks, Index: object) -> (BuildingBlock, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class BuildingBlockType: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: BuildingBlockType) -> Application """
        ...

    @property
    def Categories(self) -> Categories:
        """ Get: Categories(self: BuildingBlockType) -> Categories """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: BuildingBlockType) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: BuildingBlockType) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: BuildingBlockType) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: BuildingBlockType) -> object """
        ...



class BuildingBlockTypes: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: BuildingBlockTypes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: BuildingBlockTypes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: BuildingBlockTypes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: BuildingBlockTypes) -> object """
        ...


    def Item(self, Index:WdBuildingBlockTypes) -> BuildingBlockType:
        """ Item(self: BuildingBlockTypes, Index: WdBuildingBlockTypes) -> BuildingBlockType """
        ...


class CalloutFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Accent(self): # -> MsoTriState
        """
        Get: Accent(self: CalloutFormat) -> MsoTriState
        Set: Accent(self: CalloutFormat) = value
        """
        ...

    @property
    def Angle(self): # -> MsoCalloutAngleType
        """
        Get: Angle(self: CalloutFormat) -> MsoCalloutAngleType
        Set: Angle(self: CalloutFormat) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: CalloutFormat) -> Application """
        ...

    @property
    def AutoAttach(self): # -> MsoTriState
        """
        Get: AutoAttach(self: CalloutFormat) -> MsoTriState
        Set: AutoAttach(self: CalloutFormat) = value
        """
        ...

    @property
    def AutoLength(self): # -> MsoTriState
        """ Get: AutoLength(self: CalloutFormat) -> MsoTriState """
        ...

    @property
    def Border(self): # -> MsoTriState
        """
        Get: Border(self: CalloutFormat) -> MsoTriState
        Set: Border(self: CalloutFormat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CalloutFormat) -> int """
        ...

    @property
    def Drop(self) -> Single:
        """ Get: Drop(self: CalloutFormat) -> Single """
        ...

    @property
    def DropType(self): # -> MsoCalloutDropType
        """ Get: DropType(self: CalloutFormat) -> MsoCalloutDropType """
        ...

    @property
    def Gap(self) -> Single:
        """
        Get: Gap(self: CalloutFormat) -> Single
        Set: Gap(self: CalloutFormat) = value
        """
        ...

    @property
    def Length(self) -> Single:
        """ Get: Length(self: CalloutFormat) -> Single """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CalloutFormat) -> object """
        ...

    @property
    def Type(self): # -> MsoCalloutType
        """
        Get: Type(self: CalloutFormat) -> MsoCalloutType
        Set: Type(self: CalloutFormat) = value
        """
        ...


    def AutomaticLength(self): # -> 
        """ AutomaticLength(self: CalloutFormat) """
        ...

    def CustomDrop(self, Drop:Single): # -> 
        """ CustomDrop(self: CalloutFormat, Drop: Single) """
        ...

    def CustomLength(self, Length:Single): # -> 
        """ CustomLength(self: CalloutFormat, Length: Single) """
        ...

    def PresetDrop(self, DropType): # ->  # Not found arg types: {'DropType': 'MsoCalloutDropType'}
        """ PresetDrop(self: CalloutFormat, DropType: MsoCalloutDropType) """
        ...


class CanvasShapes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CanvasShapes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CanvasShapes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CanvasShapes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CanvasShapes) -> object """
        ...


    def AddCallout(self, Type, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Type': 'MsoCalloutType'}
        """ AddCallout(self: CanvasShapes, Type: MsoCalloutType, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddConnector(self, Type, BeginX:Single, BeginY:Single, EndX:Single, EndY:Single) -> Shape: # Not found arg types: {'Type': 'MsoConnectorType'}
        """ AddConnector(self: CanvasShapes, Type: MsoConnectorType, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single) -> Shape """
        ...

    def AddCurve(self, SafeArrayOfPoints:object) -> Tuple_[Shape, object]:
        """ AddCurve(self: CanvasShapes, SafeArrayOfPoints: object) -> (Shape, object) """
        ...

    def AddLabel(self, Orientation, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Orientation': 'MsoTextOrientation'}
        """ AddLabel(self: CanvasShapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddLine(self, BeginX:Single, BeginY:Single, EndX:Single, EndY:Single) -> Shape:
        """ AddLine(self: CanvasShapes, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single) -> Shape """
        ...

    def AddPicture(self, FileName:str, LinkToFile:object, SaveWithDocument:object, Left:object, Top:object, Width:object, Height:object) -> Tuple_[Shape, object, object, object, object, object, object]:
        """ AddPicture(self: CanvasShapes, FileName: str, LinkToFile: object, SaveWithDocument: object, Left: object, Top: object, Width: object, Height: object) -> (Shape, object, object, object, object, object, object) """
        ...

    def AddPolyline(self, SafeArrayOfPoints:object) -> Tuple_[Shape, object]:
        """ AddPolyline(self: CanvasShapes, SafeArrayOfPoints: object) -> (Shape, object) """
        ...

    def AddShape(self, Type:int, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape:
        """ AddShape(self: CanvasShapes, Type: int, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddTextbox(self, Orientation, Left:Single, Top:Single, Width:Single, Height:Single) -> Shape: # Not found arg types: {'Orientation': 'MsoTextOrientation'}
        """ AddTextbox(self: CanvasShapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single) -> Shape """
        ...

    def AddTextEffect(self, PresetTextEffect, Text:str, FontName:str, FontSize:Single, FontBold, FontItalic, Left:Single, Top:Single) -> Shape: # Not found arg types: {'FontItalic': 'MsoTriState', 'FontBold': 'MsoTriState', 'PresetTextEffect': 'MsoPresetTextEffect'}
        """ AddTextEffect(self: CanvasShapes, PresetTextEffect: MsoPresetTextEffect, Text: str, FontName: str, FontSize: Single, FontBold: MsoTriState, FontItalic: MsoTriState, Left: Single, Top: Single) -> Shape """
        ...

    def BuildFreeform(self, EditingType, X1:Single, Y1:Single) -> FreeformBuilder: # Not found arg types: {'EditingType': 'MsoEditingType'}
        """ BuildFreeform(self: CanvasShapes, EditingType: MsoEditingType, X1: Single, Y1: Single) -> FreeformBuilder """
        ...

    def Range(self, Index:object) -> Tuple_[ShapeRange, object]:
        """ Range(self: CanvasShapes, Index: object) -> (ShapeRange, object) """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: CanvasShapes) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CaptionLabel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CaptionLabel) -> Application """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: CaptionLabel) -> bool """
        ...

    @property
    def ChapterStyleLevel(self) -> int:
        """
        Get: ChapterStyleLevel(self: CaptionLabel) -> int
        Set: ChapterStyleLevel(self: CaptionLabel) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CaptionLabel) -> int """
        ...

    @property
    def ID(self) -> WdCaptionLabelID:
        """ Get: ID(self: CaptionLabel) -> WdCaptionLabelID """
        ...

    @property
    def IncludeChapterNumber(self) -> bool:
        """
        Get: IncludeChapterNumber(self: CaptionLabel) -> bool
        Set: IncludeChapterNumber(self: CaptionLabel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: CaptionLabel) -> str """
        ...

    @property
    def NumberStyle(self) -> WdCaptionNumberStyle:
        """
        Get: NumberStyle(self: CaptionLabel) -> WdCaptionNumberStyle
        Set: NumberStyle(self: CaptionLabel) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CaptionLabel) -> object """
        ...

    @property
    def Position(self) -> WdCaptionPosition:
        """
        Get: Position(self: CaptionLabel) -> WdCaptionPosition
        Set: Position(self: CaptionLabel) = value
        """
        ...

    @property
    def Separator(self) -> WdSeparatorType:
        """
        Get: Separator(self: CaptionLabel) -> WdSeparatorType
        Set: Separator(self: CaptionLabel) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: CaptionLabel) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CaptionLabels(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CaptionLabels) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CaptionLabels) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CaptionLabels) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CaptionLabels) -> object """
        ...


    def Add(self, Name:str) -> CaptionLabel:
        """ Add(self: CaptionLabels, Name: str) -> CaptionLabel """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Categories: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Categories) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Categories) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Categories) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Categories) -> object """
        ...


    def Item(self, Index:object) -> Tuple_[Category, object]:
        """ Item(self: Categories, Index: object) -> (Category, object) """
        ...


class Category: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Category) -> Application """
        ...

    @property
    def BuildingBlocks(self) -> BuildingBlocks:
        """ Get: BuildingBlocks(self: Category) -> BuildingBlocks """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Category) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Category) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Category) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Category) -> object """
        ...

    @property
    def Type(self) -> BuildingBlockType:
        """ Get: Type(self: Category) -> BuildingBlockType """
        ...



class CategoryCollection(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: CategoryCollection) -> object """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CategoryCollection) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CategoryCollection) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CategoryCollection) -> object """
        ...


    def _Default(self, Index:object) -> ChartCategory:
        """ _Default(self: CategoryCollection, Index: object) -> ChartCategory """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Cell: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Cell) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Cell) -> Borders
        Set: Borders(self: Cell) = value
        """
        ...

    @property
    def BottomPadding(self) -> Single:
        """
        Get: BottomPadding(self: Cell) -> Single
        Set: BottomPadding(self: Cell) = value
        """
        ...

    @property
    def Column(self) -> Column:
        """ Get: Column(self: Cell) -> Column """
        ...

    @property
    def ColumnIndex(self) -> int:
        """ Get: ColumnIndex(self: Cell) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Cell) -> int """
        ...

    @property
    def FitText(self) -> bool:
        """
        Get: FitText(self: Cell) -> bool
        Set: FitText(self: Cell) = value
        """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: Cell) -> Single
        Set: Height(self: Cell) = value
        """
        ...

    @property
    def HeightRule(self) -> WdRowHeightRule:
        """
        Get: HeightRule(self: Cell) -> WdRowHeightRule
        Set: HeightRule(self: Cell) = value
        """
        ...

    @property
    def ID(self) -> str:
        """
        Get: ID(self: Cell) -> str
        Set: ID(self: Cell) = value
        """
        ...

    @property
    def LeftPadding(self) -> Single:
        """
        Get: LeftPadding(self: Cell) -> Single
        Set: LeftPadding(self: Cell) = value
        """
        ...

    @property
    def NestingLevel(self) -> int:
        """ Get: NestingLevel(self: Cell) -> int """
        ...

    @property
    def Next(self) -> Cell:
        """ Get: Next(self: Cell) -> Cell """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Cell) -> object """
        ...

    @property
    def PreferredWidth(self) -> Single:
        """
        Get: PreferredWidth(self: Cell) -> Single
        Set: PreferredWidth(self: Cell) = value
        """
        ...

    @property
    def PreferredWidthType(self) -> WdPreferredWidthType:
        """
        Get: PreferredWidthType(self: Cell) -> WdPreferredWidthType
        Set: PreferredWidthType(self: Cell) = value
        """
        ...

    @property
    def Previous(self) -> Cell:
        """ Get: Previous(self: Cell) -> Cell """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Cell) -> Range """
        ...

    @property
    def RightPadding(self) -> Single:
        """
        Get: RightPadding(self: Cell) -> Single
        Set: RightPadding(self: Cell) = value
        """
        ...

    @property
    def Row(self) -> Row:
        """ Get: Row(self: Cell) -> Row """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: Cell) -> int """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Cell) -> Shading """
        ...

    @property
    def Tables(self) -> Tables:
        """ Get: Tables(self: Cell) -> Tables """
        ...

    @property
    def TopPadding(self) -> Single:
        """
        Get: TopPadding(self: Cell) -> Single
        Set: TopPadding(self: Cell) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> WdCellVerticalAlignment:
        """
        Get: VerticalAlignment(self: Cell) -> WdCellVerticalAlignment
        Set: VerticalAlignment(self: Cell) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: Cell) -> Single
        Set: Width(self: Cell) = value
        """
        ...

    @property
    def WordWrap(self) -> bool:
        """
        Get: WordWrap(self: Cell) -> bool
        Set: WordWrap(self: Cell) = value
        """
        ...


    def AutoSum(self): # -> 
        """ AutoSum(self: Cell) """
        ...

    def Delete(self, ShiftCells:object) -> object:
        """ Delete(self: Cell, ShiftCells: object) -> object """
        ...

    def Formula(self, Formula:object, NumFormat:object) -> Tuple_[object, object]:
        """ Formula(self: Cell, Formula: object, NumFormat: object) -> (object, object) """
        ...

    def Merge(self, MergeTo:Cell): # -> 
        """ Merge(self: Cell, MergeTo: Cell) """
        ...

    def Select(self): # -> 
        """ Select(self: Cell) """
        ...

    def SetHeight(self, RowHeight:object, HeightRule:WdRowHeightRule) -> object:
        """ SetHeight(self: Cell, RowHeight: object, HeightRule: WdRowHeightRule) -> object """
        ...

    def SetWidth(self, ColumnWidth:Single, RulerStyle:WdRulerStyle): # -> 
        """ SetWidth(self: Cell, ColumnWidth: Single, RulerStyle: WdRulerStyle) """
        ...

    def Split(self, NumRows:object, NumColumns:object) -> Tuple_[object, object]:
        """ Split(self: Cell, NumRows: object, NumColumns: object) -> (object, object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Cells(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Cells) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Cells) -> Borders
        Set: Borders(self: Cells) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Cells) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Cells) -> int """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: Cells) -> Single
        Set: Height(self: Cells) = value
        """
        ...

    @property
    def HeightRule(self) -> WdRowHeightRule:
        """
        Get: HeightRule(self: Cells) -> WdRowHeightRule
        Set: HeightRule(self: Cells) = value
        """
        ...

    @property
    def NestingLevel(self) -> int:
        """ Get: NestingLevel(self: Cells) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Cells) -> object """
        ...

    @property
    def PreferredWidth(self) -> Single:
        """
        Get: PreferredWidth(self: Cells) -> Single
        Set: PreferredWidth(self: Cells) = value
        """
        ...

    @property
    def PreferredWidthType(self) -> WdPreferredWidthType:
        """
        Get: PreferredWidthType(self: Cells) -> WdPreferredWidthType
        Set: PreferredWidthType(self: Cells) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Cells) -> Shading """
        ...

    @property
    def VerticalAlignment(self) -> WdCellVerticalAlignment:
        """
        Get: VerticalAlignment(self: Cells) -> WdCellVerticalAlignment
        Set: VerticalAlignment(self: Cells) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: Cells) -> Single
        Set: Width(self: Cells) = value
        """
        ...


    def Add(self, BeforeCell:object) -> Tuple_[Cell, object]:
        """ Add(self: Cells, BeforeCell: object) -> (Cell, object) """
        ...

    def AutoFit(self): # -> 
        """ AutoFit(self: Cells) """
        ...

    def Delete(self, ShiftCells:object) -> object:
        """ Delete(self: Cells, ShiftCells: object) -> object """
        ...

    def DistributeHeight(self): # -> 
        """ DistributeHeight(self: Cells) """
        ...

    def DistributeWidth(self): # -> 
        """ DistributeWidth(self: Cells) """
        ...

    def Merge(self): # -> 
        """ Merge(self: Cells) """
        ...

    def SetHeight(self, RowHeight:object, HeightRule:WdRowHeightRule) -> object:
        """ SetHeight(self: Cells, RowHeight: object, HeightRule: WdRowHeightRule) -> object """
        ...

    def SetWidth(self, ColumnWidth:Single, RulerStyle:WdRulerStyle): # -> 
        """ SetWidth(self: Cells, ColumnWidth: Single, RulerStyle: WdRulerStyle) """
        ...

    def Split(self, NumRows:object, NumColumns:object, MergeBeforeSplit:object) -> Tuple_[object, object, object]:
        """ Split(self: Cells, NumRows: object, NumColumns: object, MergeBeforeSplit: object) -> (object, object, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Characters(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Characters) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Characters) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Characters) -> int """
        ...

    @property
    def First(self) -> Range:
        """ Get: First(self: Characters) -> Range """
        ...

    @property
    def Last(self) -> Range:
        """ Get: Last(self: Characters) -> Range """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Characters) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Chart: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Chart) -> object """
        ...

    @property
    def Area3DGroup(self) -> ChartGroup:
        """ Get: Area3DGroup(self: Chart) -> ChartGroup """
        ...

    @property
    def AutoScaling(self) -> bool:
        """
        Get: AutoScaling(self: Chart) -> bool
        Set: AutoScaling(self: Chart) = value
        """
        ...

    @property
    def BackWall(self) -> Walls:
        """ Get: BackWall(self: Chart) -> Walls """
        ...

    @property
    def Bar3DGroup(self) -> ChartGroup:
        """ Get: Bar3DGroup(self: Chart) -> ChartGroup """
        ...

    @property
    def BarShape(self) -> XlBarShape:
        """
        Get: BarShape(self: Chart) -> XlBarShape
        Set: BarShape(self: Chart) = value
        """
        ...

    @property
    def CategoryLabelLevel(self) -> XlCategoryLabelLevel:
        """
        Get: CategoryLabelLevel(self: Chart) -> XlCategoryLabelLevel
        Set: CategoryLabelLevel(self: Chart) = value
        """
        ...

    @property
    def ChartArea(self) -> ChartArea:
        """ Get: ChartArea(self: Chart) -> ChartArea """
        ...

    @property
    def ChartColor(self) -> object:
        """
        Get: ChartColor(self: Chart) -> object
        Set: ChartColor(self: Chart) = value
        """
        ...

    @property
    def ChartData(self) -> ChartData:
        """ Get: ChartData(self: Chart) -> ChartData """
        ...

    @property
    def ChartStyle(self) -> object:
        """
        Get: ChartStyle(self: Chart) -> object
        Set: ChartStyle(self: Chart) = value
        """
        ...

    @property
    def ChartTitle(self) -> ChartTitle:
        """ Get: ChartTitle(self: Chart) -> ChartTitle """
        ...

    @property
    def ChartType(self) -> XlChartType:
        """
        Get: ChartType(self: Chart) -> XlChartType
        Set: ChartType(self: Chart) = value
        """
        ...

    @property
    def Column3DGroup(self) -> ChartGroup:
        """ Get: Column3DGroup(self: Chart) -> ChartGroup """
        ...

    @property
    def Corners(self) -> Corners:
        """ Get: Corners(self: Chart) -> Corners """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Chart) -> int """
        ...

    @property
    def DataTable(self) -> DataTable:
        """ Get: DataTable(self: Chart) -> DataTable """
        ...

    @property
    def DepthPercent(self) -> int:
        """
        Get: DepthPercent(self: Chart) -> int
        Set: DepthPercent(self: Chart) = value
        """
        ...

    @property
    def DisplayBlanksAs(self) -> XlDisplayBlanksAs:
        """
        Get: DisplayBlanksAs(self: Chart) -> XlDisplayBlanksAs
        Set: DisplayBlanksAs(self: Chart) = value
        """
        ...

    @property
    def Elevation(self) -> int:
        """
        Get: Elevation(self: Chart) -> int
        Set: Elevation(self: Chart) = value
        """
        ...

    @property
    def Floor(self) -> Floor:
        """ Get: Floor(self: Chart) -> Floor """
        ...

    @property
    def GapDepth(self) -> int:
        """
        Get: GapDepth(self: Chart) -> int
        Set: GapDepth(self: Chart) = value
        """
        ...

    @property
    def HasDataTable(self) -> bool:
        """
        Get: HasDataTable(self: Chart) -> bool
        Set: HasDataTable(self: Chart) = value
        """
        ...

    @property
    def HasHiddenContent(self) -> bool:
        """ Get: HasHiddenContent(self: Chart) -> bool """
        ...

    @property
    def HasLegend(self) -> bool:
        """
        Get: HasLegend(self: Chart) -> bool
        Set: HasLegend(self: Chart) = value
        """
        ...

    @property
    def HasPivotFields(self) -> bool:
        """
        Get: HasPivotFields(self: Chart) -> bool
        Set: HasPivotFields(self: Chart) = value
        """
        ...

    @property
    def HasTitle(self) -> bool:
        """
        Get: HasTitle(self: Chart) -> bool
        Set: HasTitle(self: Chart) = value
        """
        ...

    @property
    def HeightPercent(self) -> int:
        """
        Get: HeightPercent(self: Chart) -> int
        Set: HeightPercent(self: Chart) = value
        """
        ...

    @property
    def Legend(self) -> Legend:
        """ Get: Legend(self: Chart) -> Legend """
        ...

    @property
    def Line3DGroup(self) -> ChartGroup:
        """ Get: Line3DGroup(self: Chart) -> ChartGroup """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Chart) -> object """
        ...

    @property
    def Perspective(self) -> int:
        """
        Get: Perspective(self: Chart) -> int
        Set: Perspective(self: Chart) = value
        """
        ...

    @property
    def Pie3DGroup(self) -> ChartGroup:
        """ Get: Pie3DGroup(self: Chart) -> ChartGroup """
        ...

    @property
    def PivotLayout(self) -> object:
        """ Get: PivotLayout(self: Chart) -> object """
        ...

    @property
    def PlotArea(self) -> PlotArea:
        """ Get: PlotArea(self: Chart) -> PlotArea """
        ...

    @property
    def PlotBy(self) -> XlRowCol:
        """
        Get: PlotBy(self: Chart) -> XlRowCol
        Set: PlotBy(self: Chart) = value
        """
        ...

    @property
    def PlotVisibleOnly(self) -> bool:
        """
        Get: PlotVisibleOnly(self: Chart) -> bool
        Set: PlotVisibleOnly(self: Chart) = value
        """
        ...

    @property
    def RightAngleAxes(self) -> object:
        """
        Get: RightAngleAxes(self: Chart) -> object
        Set: RightAngleAxes(self: Chart) = value
        """
        ...

    @property
    def Rotation(self) -> object:
        """
        Get: Rotation(self: Chart) -> object
        Set: Rotation(self: Chart) = value
        """
        ...

    @property
    def SeriesNameLevel(self) -> XlSeriesNameLevel:
        """
        Get: SeriesNameLevel(self: Chart) -> XlSeriesNameLevel
        Set: SeriesNameLevel(self: Chart) = value
        """
        ...

    @property
    def Shapes(self) -> object:
        """ Get: Shapes(self: Chart) -> object """
        ...

    @property
    def ShowAllFieldButtons(self) -> bool:
        """
        Get: ShowAllFieldButtons(self: Chart) -> bool
        Set: ShowAllFieldButtons(self: Chart) = value
        """
        ...

    @property
    def ShowAxisFieldButtons(self) -> bool:
        """
        Get: ShowAxisFieldButtons(self: Chart) -> bool
        Set: ShowAxisFieldButtons(self: Chart) = value
        """
        ...

    @property
    def ShowDataLabelsOverMaximum(self) -> bool:
        """
        Get: ShowDataLabelsOverMaximum(self: Chart) -> bool
        Set: ShowDataLabelsOverMaximum(self: Chart) = value
        """
        ...

    @property
    def ShowLegendFieldButtons(self) -> bool:
        """
        Get: ShowLegendFieldButtons(self: Chart) -> bool
        Set: ShowLegendFieldButtons(self: Chart) = value
        """
        ...

    @property
    def ShowReportFilterFieldButtons(self) -> bool:
        """
        Get: ShowReportFilterFieldButtons(self: Chart) -> bool
        Set: ShowReportFilterFieldButtons(self: Chart) = value
        """
        ...

    @property
    def ShowValueFieldButtons(self) -> bool:
        """
        Get: ShowValueFieldButtons(self: Chart) -> bool
        Set: ShowValueFieldButtons(self: Chart) = value
        """
        ...

    @property
    def SideWall(self) -> Walls:
        """ Get: SideWall(self: Chart) -> Walls """
        ...

    @property
    def SubType(self) -> int:
        """
        Get: SubType(self: Chart) -> int
        Set: SubType(self: Chart) = value
        """
        ...

    @property
    def SurfaceGroup(self) -> ChartGroup:
        """ Get: SurfaceGroup(self: Chart) -> ChartGroup """
        ...

    @property
    def Type(self) -> int:
        """
        Get: Type(self: Chart) -> int
        Set: Type(self: Chart) = value
        """
        ...

    @property
    def Walls(self) -> Walls:
        """ Get: Walls(self: Chart) -> Walls """
        ...


    def ApplyChartTemplate(self, FileName:str): # -> 
        """ ApplyChartTemplate(self: Chart, FileName: str) """
        ...

    def ApplyCustomType(self, ChartType:XlChartType, TypeName:object): # -> 
        """ ApplyCustomType(self: Chart, ChartType: XlChartType, TypeName: object) """
        ...

    def ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object, ShowSeriesName:object, ShowCategoryName:object, ShowValue:object, ShowPercentage:object, ShowBubbleSize:object, Separator:object): # -> 
        """ ApplyDataLabels(self: Chart, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) """
        ...

    def ApplyLayout(self, Layout:int, ChartType:object): # -> 
        """ ApplyLayout(self: Chart, Layout: int, ChartType: object) """
        ...

    def AreaGroups(self, Index:object) -> object:
        """ AreaGroups(self: Chart, Index: object) -> object """
        ...

    def AutoFormat(self, Gallery:int, Format:object): # -> 
        """ AutoFormat(self: Chart, Gallery: int, Format: object) """
        ...

    def Axes(self, Type:object, AxisGroup:XlAxisGroup) -> object:
        """ Axes(self: Chart, Type: object, AxisGroup: XlAxisGroup) -> object """
        ...

    def BarGroups(self, Index:object) -> object:
        """ BarGroups(self: Chart, Index: object) -> object """
        ...

    def ChartWizard(self, Source:object, Gallery:object, Format:object, PlotBy:object, CategoryLabels:object, SeriesLabels:object, HasLegend:object, Title:object, CategoryTitle:object, ValueTitle:object, ExtraTitle:object): # -> 
        """ ChartWizard(self: Chart, Source: object, Gallery: object, Format: object, PlotBy: object, CategoryLabels: object, SeriesLabels: object, HasLegend: object, Title: object, CategoryTitle: object, ValueTitle: object, ExtraTitle: object) """
        ...

    def ClearToMatchColorStyle(self): # -> 
        """ ClearToMatchColorStyle(self: Chart) """
        ...

    def ClearToMatchStyle(self): # -> 
        """ ClearToMatchStyle(self: Chart) """
        ...

    def ColumnGroups(self, Index:object) -> object:
        """ ColumnGroups(self: Chart, Index: object) -> object """
        ...

    def Copy(self, Before:object, After:object): # -> 
        """ Copy(self: Chart, Before: object, After: object) """
        ...

    def CopyPicture(self, Appearance:XlPictureAppearance, Format:XlCopyPictureFormat, Size:XlPictureAppearance): # -> 
        """ CopyPicture(self: Chart, Appearance: XlPictureAppearance, Format: XlCopyPictureFormat, Size: XlPictureAppearance) """
        ...

    def Delete(self) -> object:
        """ Delete(self: Chart) -> object """
        ...

    def DeleteHiddenContent(self): # -> 
        """ DeleteHiddenContent(self: Chart) """
        ...

    def DoughnutGroups(self, Index:object) -> object:
        """ DoughnutGroups(self: Chart, Index: object) -> object """
        ...

    def Export(self, FileName:str, FilterName:object, Interactive:object) -> bool:
        """ Export(self: Chart, FileName: str, FilterName: object, Interactive: object) -> bool """
        ...

    def FullSeriesCollection(self, Index:object) -> object:
        """ FullSeriesCollection(self: Chart, Index: object) -> object """
        ...

    def GetChartElement(self, x, y, ElementID, Arg1, Arg2) -> Tuple_[int, int, int]:
        """ GetChartElement(self: Chart, x: int, y: int) -> (int, int, int) """
        ...

    def LineGroups(self, Index:object) -> object:
        """ LineGroups(self: Chart, Index: object) -> object """
        ...

    def Paste(self, Type:object): # -> 
        """ Paste(self: Chart, Type: object) """
        ...

    def PieGroups(self, Index:object) -> object:
        """ PieGroups(self: Chart, Index: object) -> object """
        ...

    def RadarGroups(self, Index:object) -> object:
        """ RadarGroups(self: Chart, Index: object) -> object """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: Chart) """
        ...

    def SaveChartTemplate(self, FileName:str): # -> 
        """ SaveChartTemplate(self: Chart, FileName: str) """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Chart, Replace: object) -> object """
        ...

    def SeriesCollection(self, Index:object) -> object:
        """ SeriesCollection(self: Chart, Index: object) -> object """
        ...

    def SetBackgroundPicture(self, FileName:str): # -> 
        """ SetBackgroundPicture(self: Chart, FileName: str) """
        ...

    def SetDefaultChart(self, Name:object): # -> 
        """ SetDefaultChart(self: Chart, Name: object) """
        ...

    def SetElement(self, Element): # ->  # Not found arg types: {'Element': 'MsoChartElementType'}
        """ SetElement(self: Chart, Element: MsoChartElementType) """
        ...

    def SetSourceData(self, Source:str, PlotBy:object): # -> 
        """ SetSourceData(self: Chart, Source: str, PlotBy: object) """
        ...

    def XYGroups(self, Index:object) -> object:
        """ XYGroups(self: Chart, Index: object) -> object """
        ...


class ChartArea: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: ChartArea) -> object """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: ChartArea) -> object
        Set: AutoScaleFont(self: ChartArea) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: ChartArea) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ChartArea) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: ChartArea) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> ChartFont:
        """ Get: Font(self: ChartArea) -> ChartFont """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ChartArea) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: ChartArea) -> float
        Set: Height(self: ChartArea) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ChartArea) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ChartArea) -> float
        Set: Left(self: ChartArea) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ChartArea) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartArea) -> object """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: ChartArea) -> bool
        Set: Shadow(self: ChartArea) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ChartArea) -> float
        Set: Top(self: ChartArea) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: ChartArea) -> float
        Set: Width(self: ChartArea) = value
        """
        ...


    def Clear(self) -> object:
        """ Clear(self: ChartArea) -> object """
        ...

    def ClearContents(self) -> object:
        """ ClearContents(self: ChartArea) -> object """
        ...

    def ClearFormats(self) -> object:
        """ ClearFormats(self: ChartArea) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: ChartArea) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ChartArea) -> object """
        ...


class ChartBorder: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: ChartBorder) -> object """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: ChartBorder) -> object
        Set: Color(self: ChartBorder) = value
        """
        ...

    @property
    def ColorIndex(self) -> object:
        """
        Get: ColorIndex(self: ChartBorder) -> object
        Set: ColorIndex(self: ChartBorder) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ChartBorder) -> int """
        ...

    @property
    def LineStyle(self) -> object:
        """
        Get: LineStyle(self: ChartBorder) -> object
        Set: LineStyle(self: ChartBorder) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartBorder) -> object """
        ...

    @property
    def Weight(self) -> object:
        """
        Get: Weight(self: ChartBorder) -> object
        Set: Weight(self: ChartBorder) = value
        """
        ...



class ChartCategory: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def IsFiltered(self) -> bool:
        """
        Get: IsFiltered(self: ChartCategory) -> bool
        Set: IsFiltered(self: ChartCategory) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ChartCategory) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartCategory) -> object """
        ...



class ChartCharacters: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: ChartCharacters) -> object """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ChartCharacters) -> str
        Set: Caption(self: ChartCharacters) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ChartCharacters) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ChartCharacters) -> int """
        ...

    @property
    def Font(self) -> ChartFont:
        """ Get: Font(self: ChartCharacters) -> ChartFont """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartCharacters) -> object """
        ...

    @property
    def PhoneticCharacters(self) -> str:
        """
        Get: PhoneticCharacters(self: ChartCharacters) -> str
        Set: PhoneticCharacters(self: ChartCharacters) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ChartCharacters) -> str
        Set: Text(self: ChartCharacters) = value
        """
        ...


    def Delete(self) -> object:
        """ Delete(self: ChartCharacters) -> object """
        ...

    def Insert(self, String:str) -> object:
        """ Insert(self: ChartCharacters, String: str) -> object """
        ...


class ChartColorFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: ChartColorFormat) -> object """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ChartColorFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartColorFormat) -> object """
        ...

    @property
    def RGB(self) -> int:
        """ Get: RGB(self: ChartColorFormat) -> int """
        ...

    @property
    def SchemeColor(self) -> int:
        """
        Get: SchemeColor(self: ChartColorFormat) -> int
        Set: SchemeColor(self: ChartColorFormat) = value
        """
        ...

    @property
    def Type(self) -> int:
        """ Get: Type(self: ChartColorFormat) -> int """
        ...

    @property
    def _Default(self) -> int:
        """ Get: _Default(self: ChartColorFormat) -> int """
        ...



class ChartData: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def IsLinked(self) -> bool:
        """ Get: IsLinked(self: ChartData) -> bool """
        ...

    @property
    def Workbook(self) -> object:
        """ Get: Workbook(self: ChartData) -> object """
        ...


    def Activate(self): # -> 
        """ Activate(self: ChartData) """
        ...

    def ActivateChartDataWindow(self): # -> 
        """ ActivateChartDataWindow(self: ChartData) """
        ...

    def BreakLink(self): # -> 
        """ BreakLink(self: ChartData) """
        ...


class ChartFillFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: ChartFillFormat) -> object """
        ...

    @property
    def BackColor(self) -> ChartColorFormat:
        """ Get: BackColor(self: ChartFillFormat) -> ChartColorFormat """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ChartFillFormat) -> int """
        ...

    @property
    def ForeColor(self) -> ChartColorFormat:
        """ Get: ForeColor(self: ChartFillFormat) -> ChartColorFormat """
        ...

    @property
    def GradientColorType(self): # -> MsoGradientColorType
        """ Get: GradientColorType(self: ChartFillFormat) -> MsoGradientColorType """
        ...

    @property
    def GradientDegree(self) -> Single:
        """ Get: GradientDegree(self: ChartFillFormat) -> Single """
        ...

    @property
    def GradientStyle(self): # -> MsoGradientStyle
        """ Get: GradientStyle(self: ChartFillFormat) -> MsoGradientStyle """
        ...

    @property
    def GradientVariant(self) -> int:
        """ Get: GradientVariant(self: ChartFillFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartFillFormat) -> object """
        ...

    @property
    def Pattern(self): # -> MsoPatternType
        """ Get: Pattern(self: ChartFillFormat) -> MsoPatternType """
        ...

    @property
    def PresetGradientType(self): # -> MsoPresetGradientType
        """ Get: PresetGradientType(self: ChartFillFormat) -> MsoPresetGradientType """
        ...

    @property
    def PresetTexture(self): # -> MsoPresetTexture
        """ Get: PresetTexture(self: ChartFillFormat) -> MsoPresetTexture """
        ...

    @property
    def TextureName(self) -> str:
        """ Get: TextureName(self: ChartFillFormat) -> str """
        ...

    @property
    def TextureType(self): # -> MsoTextureType
        """ Get: TextureType(self: ChartFillFormat) -> MsoTextureType """
        ...

    @property
    def Type(self): # -> MsoFillType
        """ Get: Type(self: ChartFillFormat) -> MsoFillType """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: ChartFillFormat) -> MsoTriState
        Set: Visible(self: ChartFillFormat) = value
        """
        ...


    def OneColorGradient(self, Style, Variant:int, Degree:Single): # ->  # Not found arg types: {'Style': 'MsoGradientStyle'}
        """ OneColorGradient(self: ChartFillFormat, Style: MsoGradientStyle, Variant: int, Degree: Single) """
        ...

    def Patterned(self, Pattern): # ->  # Not found arg types: {'Pattern': 'MsoPatternType'}
        """ Patterned(self: ChartFillFormat, Pattern: MsoPatternType) """
        ...

    def PresetGradient(self, Style, Variant:int, PresetGradientType): # ->  # Not found arg types: {'Style': 'MsoGradientStyle', 'PresetGradientType': 'MsoPresetGradientType'}
        """ PresetGradient(self: ChartFillFormat, Style: MsoGradientStyle, Variant: int, PresetGradientType: MsoPresetGradientType) """
        ...

    def PresetTextured(self, PresetTexture): # ->  # Not found arg types: {'PresetTexture': 'MsoPresetTexture'}
        """ PresetTextured(self: ChartFillFormat, PresetTexture: MsoPresetTexture) """
        ...

    def Solid(self): # -> 
        """ Solid(self: ChartFillFormat) """
        ...

    def TwoColorGradient(self, Style, Variant:int): # ->  # Not found arg types: {'Style': 'MsoGradientStyle'}
        """ TwoColorGradient(self: ChartFillFormat, Style: MsoGradientStyle, Variant: int) """
        ...

    def UserPicture(self, PictureFile:object, PictureFormat:object, PictureStackUnit:object, PicturePlacement:object): # -> 
        """ UserPicture(self: ChartFillFormat, PictureFile: object, PictureFormat: object, PictureStackUnit: object, PicturePlacement: object) """
        ...

    def UserTextured(self, TextureFile:str): # -> 
        """ UserTextured(self: ChartFillFormat, TextureFile: str) """
        ...


class ChartFont: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: ChartFont) -> object """
        ...

    @property
    def Background(self) -> object:
        """
        Get: Background(self: ChartFont) -> object
        Set: Background(self: ChartFont) = value
        """
        ...

    @property
    def Bold(self) -> object:
        """
        Get: Bold(self: ChartFont) -> object
        Set: Bold(self: ChartFont) = value
        """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: ChartFont) -> object
        Set: Color(self: ChartFont) = value
        """
        ...

    @property
    def ColorIndex(self) -> object:
        """
        Get: ColorIndex(self: ChartFont) -> object
        Set: ColorIndex(self: ChartFont) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ChartFont) -> int """
        ...

    @property
    def FontStyle(self) -> object:
        """
        Get: FontStyle(self: ChartFont) -> object
        Set: FontStyle(self: ChartFont) = value
        """
        ...

    @property
    def Italic(self) -> object:
        """
        Get: Italic(self: ChartFont) -> object
        Set: Italic(self: ChartFont) = value
        """
        ...

    @property
    def Name(self) -> object:
        """
        Get: Name(self: ChartFont) -> object
        Set: Name(self: ChartFont) = value
        """
        ...

    @property
    def OutlineFont(self) -> object:
        """
        Get: OutlineFont(self: ChartFont) -> object
        Set: OutlineFont(self: ChartFont) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartFont) -> object """
        ...

    @property
    def Shadow(self) -> object:
        """
        Get: Shadow(self: ChartFont) -> object
        Set: Shadow(self: ChartFont) = value
        """
        ...

    @property
    def Size(self) -> object:
        """
        Get: Size(self: ChartFont) -> object
        Set: Size(self: ChartFont) = value
        """
        ...

    @property
    def StrikeThrough(self) -> object:
        """
        Get: StrikeThrough(self: ChartFont) -> object
        Set: StrikeThrough(self: ChartFont) = value
        """
        ...

    @property
    def Subscript(self) -> object:
        """
        Get: Subscript(self: ChartFont) -> object
        Set: Subscript(self: ChartFont) = value
        """
        ...

    @property
    def Superscript(self) -> object:
        """
        Get: Superscript(self: ChartFont) -> object
        Set: Superscript(self: ChartFont) = value
        """
        ...

    @property
    def Underline(self) -> object:
        """
        Get: Underline(self: ChartFont) -> object
        Set: Underline(self: ChartFont) = value
        """
        ...



class ChartFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Adjustments(self) -> Adjustments:
        """ Get: Adjustments(self: ChartFormat) -> Adjustments """
        ...

    @property
    def Application(self) -> object:
        """ Get: Application(self: ChartFormat) -> object """
        ...

    @property
    def AutoShapeType(self): # -> MsoAutoShapeType
        """
        Get: AutoShapeType(self: ChartFormat) -> MsoAutoShapeType
        Set: AutoShapeType(self: ChartFormat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ChartFormat) -> int """
        ...

    @property
    def Fill(self) -> FillFormat:
        """ Get: Fill(self: ChartFormat) -> FillFormat """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """ Get: Glow(self: ChartFormat) -> GlowFormat """
        ...

    @property
    def Line(self) -> LineFormat:
        """ Get: Line(self: ChartFormat) -> LineFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartFormat) -> object """
        ...

    @property
    def PictureFormat(self) -> PictureFormat:
        """ Get: PictureFormat(self: ChartFormat) -> PictureFormat """
        ...

    @property
    def Shadow(self) -> ShadowFormat:
        """ Get: Shadow(self: ChartFormat) -> ShadowFormat """
        ...

    @property
    def SoftEdge(self) -> SoftEdgeFormat:
        """ Get: SoftEdge(self: ChartFormat) -> SoftEdgeFormat """
        ...

    @property
    def TextFrame2(self) -> TextFrame2:
        """ Get: TextFrame2(self: ChartFormat) -> TextFrame2 """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """ Get: ThreeD(self: ChartFormat) -> ThreeDFormat """
        ...



class ChartGroup: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: ChartGroup) -> object """
        ...

    @property
    def AxisGroup(self) -> XlAxisGroup:
        """
        Get: AxisGroup(self: ChartGroup) -> XlAxisGroup
        Set: AxisGroup(self: ChartGroup) = value
        """
        ...

    @property
    def BubbleScale(self) -> int:
        """
        Get: BubbleScale(self: ChartGroup) -> int
        Set: BubbleScale(self: ChartGroup) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ChartGroup) -> int """
        ...

    @property
    def DoughnutHoleSize(self) -> int:
        """
        Get: DoughnutHoleSize(self: ChartGroup) -> int
        Set: DoughnutHoleSize(self: ChartGroup) = value
        """
        ...

    @property
    def DownBars(self) -> DownBars:
        """ Get: DownBars(self: ChartGroup) -> DownBars """
        ...

    @property
    def DropLines(self) -> DropLines:
        """ Get: DropLines(self: ChartGroup) -> DropLines """
        ...

    @property
    def FirstSliceAngle(self) -> int:
        """
        Get: FirstSliceAngle(self: ChartGroup) -> int
        Set: FirstSliceAngle(self: ChartGroup) = value
        """
        ...

    @property
    def GapWidth(self) -> int:
        """
        Get: GapWidth(self: ChartGroup) -> int
        Set: GapWidth(self: ChartGroup) = value
        """
        ...

    @property
    def Has3DShading(self) -> bool:
        """
        Get: Has3DShading(self: ChartGroup) -> bool
        Set: Has3DShading(self: ChartGroup) = value
        """
        ...

    @property
    def HasDropLines(self) -> bool:
        """
        Get: HasDropLines(self: ChartGroup) -> bool
        Set: HasDropLines(self: ChartGroup) = value
        """
        ...

    @property
    def HasHiLoLines(self) -> bool:
        """
        Get: HasHiLoLines(self: ChartGroup) -> bool
        Set: HasHiLoLines(self: ChartGroup) = value
        """
        ...

    @property
    def HasRadarAxisLabels(self) -> bool:
        """
        Get: HasRadarAxisLabels(self: ChartGroup) -> bool
        Set: HasRadarAxisLabels(self: ChartGroup) = value
        """
        ...

    @property
    def HasSeriesLines(self) -> bool:
        """
        Get: HasSeriesLines(self: ChartGroup) -> bool
        Set: HasSeriesLines(self: ChartGroup) = value
        """
        ...

    @property
    def HasUpDownBars(self) -> bool:
        """
        Get: HasUpDownBars(self: ChartGroup) -> bool
        Set: HasUpDownBars(self: ChartGroup) = value
        """
        ...

    @property
    def HiLoLines(self) -> HiLoLines:
        """ Get: HiLoLines(self: ChartGroup) -> HiLoLines """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ChartGroup) -> int """
        ...

    @property
    def Overlap(self) -> int:
        """
        Get: Overlap(self: ChartGroup) -> int
        Set: Overlap(self: ChartGroup) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartGroup) -> object """
        ...

    @property
    def RadarAxisLabels(self) -> TickLabels:
        """ Get: RadarAxisLabels(self: ChartGroup) -> TickLabels """
        ...

    @property
    def SecondPlotSize(self) -> int:
        """
        Get: SecondPlotSize(self: ChartGroup) -> int
        Set: SecondPlotSize(self: ChartGroup) = value
        """
        ...

    @property
    def SeriesLines(self) -> SeriesLines:
        """ Get: SeriesLines(self: ChartGroup) -> SeriesLines """
        ...

    @property
    def ShowNegativeBubbles(self) -> bool:
        """
        Get: ShowNegativeBubbles(self: ChartGroup) -> bool
        Set: ShowNegativeBubbles(self: ChartGroup) = value
        """
        ...

    @property
    def SizeRepresents(self) -> XlSizeRepresents:
        """
        Get: SizeRepresents(self: ChartGroup) -> XlSizeRepresents
        Set: SizeRepresents(self: ChartGroup) = value
        """
        ...

    @property
    def SplitType(self) -> XlChartSplitType:
        """
        Get: SplitType(self: ChartGroup) -> XlChartSplitType
        Set: SplitType(self: ChartGroup) = value
        """
        ...

    @property
    def SplitValue(self) -> object:
        """
        Get: SplitValue(self: ChartGroup) -> object
        Set: SplitValue(self: ChartGroup) = value
        """
        ...

    @property
    def SubType(self) -> int:
        """
        Get: SubType(self: ChartGroup) -> int
        Set: SubType(self: ChartGroup) = value
        """
        ...

    @property
    def Type(self) -> int:
        """
        Get: Type(self: ChartGroup) -> int
        Set: Type(self: ChartGroup) = value
        """
        ...

    @property
    def UpBars(self) -> UpBars:
        """ Get: UpBars(self: ChartGroup) -> UpBars """
        ...

    @property
    def VaryByCategories(self) -> bool:
        """
        Get: VaryByCategories(self: ChartGroup) -> bool
        Set: VaryByCategories(self: ChartGroup) = value
        """
        ...


    def CategoryCollection(self, Index:object) -> object:
        """ CategoryCollection(self: ChartGroup, Index: object) -> object """
        ...

    def FullCategoryCollection(self, Index:object) -> object:
        """ FullCategoryCollection(self: ChartGroup, Index: object) -> object """
        ...

    def SeriesCollection(self, Index:object) -> object:
        """ SeriesCollection(self: ChartGroup, Index: object) -> object """
        ...


class ChartGroups(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: ChartGroups) -> object """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ChartGroups) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ChartGroups) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartGroups) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ChartTitle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: ChartTitle) -> object """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: ChartTitle) -> object
        Set: AutoScaleFont(self: ChartTitle) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: ChartTitle) -> ChartBorder """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ChartTitle) -> str
        Set: Caption(self: ChartTitle) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ChartTitle) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: ChartTitle) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> ChartFont:
        """ Get: Font(self: ChartTitle) -> ChartFont """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ChartTitle) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: ChartTitle) -> str
        Set: Formula(self: ChartTitle) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: ChartTitle) -> str
        Set: FormulaLocal(self: ChartTitle) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: ChartTitle) -> str
        Set: FormulaR1C1(self: ChartTitle) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: ChartTitle) -> str
        Set: FormulaR1C1Local(self: ChartTitle) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: ChartTitle) -> float """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: ChartTitle) -> object
        Set: HorizontalAlignment(self: ChartTitle) = value
        """
        ...

    @property
    def IncludeInLayout(self) -> bool:
        """
        Get: IncludeInLayout(self: ChartTitle) -> bool
        Set: IncludeInLayout(self: ChartTitle) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: ChartTitle) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: ChartTitle) -> float
        Set: Left(self: ChartTitle) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ChartTitle) -> str """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: ChartTitle) -> object
        Set: Orientation(self: ChartTitle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ChartTitle) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: ChartTitle) -> XlChartElementPosition
        Set: Position(self: ChartTitle) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: ChartTitle) -> int
        Set: ReadingOrder(self: ChartTitle) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: ChartTitle) -> bool
        Set: Shadow(self: ChartTitle) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ChartTitle) -> str
        Set: Text(self: ChartTitle) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: ChartTitle) -> float
        Set: Top(self: ChartTitle) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: ChartTitle) -> object
        Set: VerticalAlignment(self: ChartTitle) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: ChartTitle) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: ChartTitle) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ChartTitle) -> object """
        ...


class CheckBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CheckBox) -> Application """
        ...

    @property
    def AutoSize(self) -> bool:
        """
        Get: AutoSize(self: CheckBox) -> bool
        Set: AutoSize(self: CheckBox) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CheckBox) -> int """
        ...

    @property
    def Default(self) -> bool:
        """
        Get: Default(self: CheckBox) -> bool
        Set: Default(self: CheckBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CheckBox) -> object """
        ...

    @property
    def Size(self) -> Single:
        """
        Get: Size(self: CheckBox) -> Single
        Set: Size(self: CheckBox) = value
        """
        ...

    @property
    def Valid(self) -> bool:
        """ Get: Valid(self: CheckBox) -> bool """
        ...

    @property
    def Value(self) -> bool:
        """
        Get: Value(self: CheckBox) -> bool
        Set: Value(self: CheckBox) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CoAuthLock: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CoAuthLock) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CoAuthLock) -> int """
        ...

    @property
    def HeaderFooter(self) -> bool:
        """ Get: HeaderFooter(self: CoAuthLock) -> bool """
        ...

    @property
    def Owner(self) -> CoAuthor:
        """ Get: Owner(self: CoAuthLock) -> CoAuthor """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CoAuthLock) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: CoAuthLock) -> Range """
        ...

    @property
    def Type(self) -> WdLockType:
        """ Get: Type(self: CoAuthLock) -> WdLockType """
        ...


    def Unlock(self): # -> 
        """ Unlock(self: CoAuthLock) """
        ...


class CoAuthLocks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CoAuthLocks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CoAuthLocks) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CoAuthLocks) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CoAuthLocks) -> object """
        ...


    def Add(self, Range:object, Type:WdLockType) -> CoAuthLock:
        """ Add(self: CoAuthLocks, Range: object, Type: WdLockType) -> CoAuthLock """
        ...

    def RemoveEphemeralLocks(self): # -> 
        """ RemoveEphemeralLocks(self: CoAuthLocks) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CoAuthor: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CoAuthor) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CoAuthor) -> int """
        ...

    @property
    def EmailAddress(self) -> str:
        """ Get: EmailAddress(self: CoAuthor) -> str """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: CoAuthor) -> str """
        ...

    @property
    def IsMe(self) -> bool:
        """ Get: IsMe(self: CoAuthor) -> bool """
        ...

    @property
    def Locks(self) -> CoAuthLocks:
        """ Get: Locks(self: CoAuthor) -> CoAuthLocks """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: CoAuthor) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CoAuthor) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CoAuthoring: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CoAuthoring) -> Application """
        ...

    @property
    def Authors(self) -> CoAuthors:
        """ Get: Authors(self: CoAuthoring) -> CoAuthors """
        ...

    @property
    def CanMerge(self) -> bool:
        """ Get: CanMerge(self: CoAuthoring) -> bool """
        ...

    @property
    def CanShare(self) -> bool:
        """ Get: CanShare(self: CoAuthoring) -> bool """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: CoAuthoring) -> Conflicts """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CoAuthoring) -> int """
        ...

    @property
    def Locks(self) -> CoAuthLocks:
        """ Get: Locks(self: CoAuthoring) -> CoAuthLocks """
        ...

    @property
    def Me(self) -> CoAuthor:
        """ Get: Me(self: CoAuthoring) -> CoAuthor """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CoAuthoring) -> object """
        ...

    @property
    def PendingUpdates(self) -> bool:
        """ Get: PendingUpdates(self: CoAuthoring) -> bool """
        ...

    @property
    def Updates(self) -> CoAuthUpdates:
        """ Get: Updates(self: CoAuthoring) -> CoAuthUpdates """
        ...



class CoAuthors(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CoAuthors) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CoAuthors) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CoAuthors) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CoAuthors) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CoAuthUpdate: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CoAuthUpdate) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CoAuthUpdate) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CoAuthUpdate) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: CoAuthUpdate) -> Range """
        ...



class CoAuthUpdates(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CoAuthUpdates) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CoAuthUpdates) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CoAuthUpdates) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CoAuthUpdates) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ColorFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ColorFormat) -> Application """
        ...

    @property
    def Black(self) -> int:
        """
        Get: Black(self: ColorFormat) -> int
        Set: Black(self: ColorFormat) = value
        """
        ...

    @property
    def Brightness(self) -> Single:
        """
        Get: Brightness(self: ColorFormat) -> Single
        Set: Brightness(self: ColorFormat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ColorFormat) -> int """
        ...

    @property
    def Cyan(self) -> int:
        """
        Get: Cyan(self: ColorFormat) -> int
        Set: Cyan(self: ColorFormat) = value
        """
        ...

    @property
    def Magenta(self) -> int:
        """
        Get: Magenta(self: ColorFormat) -> int
        Set: Magenta(self: ColorFormat) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ColorFormat) -> str
        Set: Name(self: ColorFormat) = value
        """
        ...

    @property
    def ObjectThemeColor(self) -> WdThemeColorIndex:
        """
        Get: ObjectThemeColor(self: ColorFormat) -> WdThemeColorIndex
        Set: ObjectThemeColor(self: ColorFormat) = value
        """
        ...

    @property
    def OverPrint(self): # -> MsoTriState
        """
        Get: OverPrint(self: ColorFormat) -> MsoTriState
        Set: OverPrint(self: ColorFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ColorFormat) -> object """
        ...

    @property
    def RGB(self) -> int:
        """
        Get: RGB(self: ColorFormat) -> int
        Set: RGB(self: ColorFormat) = value
        """
        ...

    @property
    def SchemeColor(self) -> int:
        """
        Get: SchemeColor(self: ColorFormat) -> int
        Set: SchemeColor(self: ColorFormat) = value
        """
        ...

    @property
    def TintAndShade(self) -> Single:
        """
        Get: TintAndShade(self: ColorFormat) -> Single
        Set: TintAndShade(self: ColorFormat) = value
        """
        ...

    @property
    def Type(self): # -> MsoColorType
        """ Get: Type(self: ColorFormat) -> MsoColorType """
        ...

    @property
    def Yellow(self) -> int:
        """
        Get: Yellow(self: ColorFormat) -> int
        Set: Yellow(self: ColorFormat) = value
        """
        ...


    def SetCMYK(self, Cyan:int, Magenta:int, Yellow:int, Black:int): # -> 
        """ SetCMYK(self: ColorFormat, Cyan: int, Magenta: int, Yellow: int, Black: int) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Column: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Column) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Column) -> Borders
        Set: Borders(self: Column) = value
        """
        ...

    @property
    def Cells(self) -> Cells:
        """ Get: Cells(self: Column) -> Cells """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Column) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Column) -> int """
        ...

    @property
    def IsFirst(self) -> bool:
        """ Get: IsFirst(self: Column) -> bool """
        ...

    @property
    def IsLast(self) -> bool:
        """ Get: IsLast(self: Column) -> bool """
        ...

    @property
    def NestingLevel(self) -> int:
        """ Get: NestingLevel(self: Column) -> int """
        ...

    @property
    def Next(self) -> Column:
        """ Get: Next(self: Column) -> Column """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Column) -> object """
        ...

    @property
    def PreferredWidth(self) -> Single:
        """
        Get: PreferredWidth(self: Column) -> Single
        Set: PreferredWidth(self: Column) = value
        """
        ...

    @property
    def PreferredWidthType(self) -> WdPreferredWidthType:
        """
        Get: PreferredWidthType(self: Column) -> WdPreferredWidthType
        Set: PreferredWidthType(self: Column) = value
        """
        ...

    @property
    def Previous(self) -> Column:
        """ Get: Previous(self: Column) -> Column """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Column) -> Shading """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: Column) -> Single
        Set: Width(self: Column) = value
        """
        ...


    def AutoFit(self): # -> 
        """ AutoFit(self: Column) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Column) """
        ...

    def Select(self): # -> 
        """ Select(self: Column) """
        ...

    def SetWidth(self, ColumnWidth:Single, RulerStyle:WdRulerStyle): # -> 
        """ SetWidth(self: Column, ColumnWidth: Single, RulerStyle: WdRulerStyle) """
        ...

    def Sort(self, ExcludeHeader:object, SortFieldType:object, SortOrder:object, CaseSensitive:object, BidiSort:object, IgnoreThe:object, IgnoreKashida:object, IgnoreDiacritics:object, IgnoreHe:object, LanguageID:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object]:
        """ Sort(self: Column, ExcludeHeader: object, SortFieldType: object, SortOrder: object, CaseSensitive: object, BidiSort: object, IgnoreThe: object, IgnoreKashida: object, IgnoreDiacritics: object, IgnoreHe: object, LanguageID: object) -> (object, object, object, object, object, object, object, object, object, object) """
        ...

    def SortOld(self, ExcludeHeader:object, SortFieldType:object, SortOrder:object, CaseSensitive:object, LanguageID:object) -> Tuple_[object, object, object, object, object]:
        """ SortOld(self: Column, ExcludeHeader: object, SortFieldType: object, SortOrder: object, CaseSensitive: object, LanguageID: object) -> (object, object, object, object, object) """
        ...


class Columns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Columns) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Columns) -> Borders
        Set: Borders(self: Columns) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Columns) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Columns) -> int """
        ...

    @property
    def First(self) -> Column:
        """ Get: First(self: Columns) -> Column """
        ...

    @property
    def Last(self) -> Column:
        """ Get: Last(self: Columns) -> Column """
        ...

    @property
    def NestingLevel(self) -> int:
        """ Get: NestingLevel(self: Columns) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Columns) -> object """
        ...

    @property
    def PreferredWidth(self) -> Single:
        """
        Get: PreferredWidth(self: Columns) -> Single
        Set: PreferredWidth(self: Columns) = value
        """
        ...

    @property
    def PreferredWidthType(self) -> WdPreferredWidthType:
        """
        Get: PreferredWidthType(self: Columns) -> WdPreferredWidthType
        Set: PreferredWidthType(self: Columns) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Columns) -> Shading """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: Columns) -> Single
        Set: Width(self: Columns) = value
        """
        ...


    def Add(self, BeforeColumn:object) -> Tuple_[Column, object]:
        """ Add(self: Columns, BeforeColumn: object) -> (Column, object) """
        ...

    def AutoFit(self): # -> 
        """ AutoFit(self: Columns) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Columns) """
        ...

    def DistributeWidth(self): # -> 
        """ DistributeWidth(self: Columns) """
        ...

    def Select(self): # -> 
        """ Select(self: Columns) """
        ...

    def SetWidth(self, ColumnWidth:Single, RulerStyle:WdRulerStyle): # -> 
        """ SetWidth(self: Columns, ColumnWidth: Single, RulerStyle: WdRulerStyle) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Comment: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Ancestor(self) -> Comment:
        """ Get: Ancestor(self: Comment) -> Comment """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Comment) -> Application """
        ...

    @property
    def Author(self) -> str:
        """
        Get: Author(self: Comment) -> str
        Set: Author(self: Comment) = value
        """
        ...

    @property
    def Contact(self) -> CoAuthor:
        """ Get: Contact(self: Comment) -> CoAuthor """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Comment) -> int """
        ...

    @property
    def Date(self) -> DateTime:
        """ Get: Date(self: Comment) -> DateTime """
        ...

    @property
    def Done(self) -> bool:
        """
        Get: Done(self: Comment) -> bool
        Set: Done(self: Comment) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Comment) -> int """
        ...

    @property
    def Initial(self) -> str:
        """
        Get: Initial(self: Comment) -> str
        Set: Initial(self: Comment) = value
        """
        ...

    @property
    def IsInk(self) -> bool:
        """ Get: IsInk(self: Comment) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Comment) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Comment) -> Range """
        ...

    @property
    def Reference(self) -> Range:
        """ Get: Reference(self: Comment) -> Range """
        ...

    @property
    def Replies(self) -> Comments:
        """ Get: Replies(self: Comment) -> Comments """
        ...

    @property
    def Scope(self) -> Range:
        """ Get: Scope(self: Comment) -> Range """
        ...

    @property
    def ShowTip(self) -> bool:
        """
        Get: ShowTip(self: Comment) -> bool
        Set: ShowTip(self: Comment) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: Comment) """
        ...

    def DeleteRecursively(self): # -> 
        """ DeleteRecursively(self: Comment) """
        ...

    def Edit(self): # -> 
        """ Edit(self: Comment) """
        ...


class Comments(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Comments) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Comments) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Comments) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Comments) -> object """
        ...

    @property
    def ShowBy(self) -> str:
        """
        Get: ShowBy(self: Comments) -> str
        Set: ShowBy(self: Comments) = value
        """
        ...


    def Add(self, Range:Range, Text:object) -> Tuple_[Comment, object]:
        """ Add(self: Comments, Range: Range, Text: object) -> (Comment, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ConditionalStyle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ConditionalStyle) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: ConditionalStyle) -> Borders
        Set: Borders(self: ConditionalStyle) = value
        """
        ...

    @property
    def BottomPadding(self) -> Single:
        """
        Get: BottomPadding(self: ConditionalStyle) -> Single
        Set: BottomPadding(self: ConditionalStyle) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ConditionalStyle) -> int """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: ConditionalStyle) -> Font
        Set: Font(self: ConditionalStyle) = value
        """
        ...

    @property
    def LeftPadding(self) -> Single:
        """
        Get: LeftPadding(self: ConditionalStyle) -> Single
        Set: LeftPadding(self: ConditionalStyle) = value
        """
        ...

    @property
    def ParagraphFormat(self) -> ParagraphFormat:
        """
        Get: ParagraphFormat(self: ConditionalStyle) -> ParagraphFormat
        Set: ParagraphFormat(self: ConditionalStyle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ConditionalStyle) -> object """
        ...

    @property
    def RightPadding(self) -> Single:
        """
        Get: RightPadding(self: ConditionalStyle) -> Single
        Set: RightPadding(self: ConditionalStyle) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: ConditionalStyle) -> Shading """
        ...

    @property
    def TopPadding(self) -> Single:
        """
        Get: TopPadding(self: ConditionalStyle) -> Single
        Set: TopPadding(self: ConditionalStyle) = value
        """
        ...



class Conflict: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Conflict) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Conflict) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Conflict) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Conflict) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Conflict) -> Range """
        ...

    @property
    def Type(self) -> WdRevisionType:
        """ Get: Type(self: Conflict) -> WdRevisionType """
        ...


    def Accept(self): # -> 
        """ Accept(self: Conflict) """
        ...

    def Reject(self): # -> 
        """ Reject(self: Conflict) """
        ...


class Conflicts(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Conflicts) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Conflicts) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Conflicts) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Conflicts) -> object """
        ...


    def AcceptAll(self): # -> 
        """ AcceptAll(self: Conflicts) """
        ...

    def RejectAll(self): # -> 
        """ RejectAll(self: Conflicts) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ConnectorFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ConnectorFormat) -> Application """
        ...

    @property
    def BeginConnected(self): # -> MsoTriState
        """ Get: BeginConnected(self: ConnectorFormat) -> MsoTriState """
        ...

    @property
    def BeginConnectedShape(self) -> Shape:
        """ Get: BeginConnectedShape(self: ConnectorFormat) -> Shape """
        ...

    @property
    def BeginConnectionSite(self) -> int:
        """ Get: BeginConnectionSite(self: ConnectorFormat) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ConnectorFormat) -> int """
        ...

    @property
    def EndConnected(self): # -> MsoTriState
        """ Get: EndConnected(self: ConnectorFormat) -> MsoTriState """
        ...

    @property
    def EndConnectedShape(self) -> Shape:
        """ Get: EndConnectedShape(self: ConnectorFormat) -> Shape """
        ...

    @property
    def EndConnectionSite(self) -> int:
        """ Get: EndConnectionSite(self: ConnectorFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ConnectorFormat) -> object """
        ...

    @property
    def Type(self): # -> MsoConnectorType
        """
        Get: Type(self: ConnectorFormat) -> MsoConnectorType
        Set: Type(self: ConnectorFormat) = value
        """
        ...


    def BeginConnect(self, ConnectedShape, ConnectionSite) -> Shape:
        """ BeginConnect(self: ConnectorFormat, ConnectionSite: int) -> Shape """
        ...

    def BeginDisconnect(self): # -> 
        """ BeginDisconnect(self: ConnectorFormat) """
        ...

    def EndConnect(self, ConnectedShape, ConnectionSite) -> Shape:
        """ EndConnect(self: ConnectorFormat, ConnectionSite: int) -> Shape """
        ...

    def EndDisconnect(self): # -> 
        """ EndDisconnect(self: ConnectorFormat) """
        ...


class ContentControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowInsertDeleteSection(self) -> bool:
        """
        Get: AllowInsertDeleteSection(self: ContentControl) -> bool
        Set: AllowInsertDeleteSection(self: ContentControl) = value
        """
        ...

    @property
    def Appearance(self) -> WdContentControlAppearance:
        """
        Get: Appearance(self: ContentControl) -> WdContentControlAppearance
        Set: Appearance(self: ContentControl) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ContentControl) -> Application """
        ...

    @property
    def BuildingBlockCategory(self) -> str:
        """
        Get: BuildingBlockCategory(self: ContentControl) -> str
        Set: BuildingBlockCategory(self: ContentControl) = value
        """
        ...

    @property
    def BuildingBlockType(self) -> WdBuildingBlockTypes:
        """
        Get: BuildingBlockType(self: ContentControl) -> WdBuildingBlockTypes
        Set: BuildingBlockType(self: ContentControl) = value
        """
        ...

    @property
    def Checked(self) -> bool:
        """
        Get: Checked(self: ContentControl) -> bool
        Set: Checked(self: ContentControl) = value
        """
        ...

    @property
    def Color(self) -> WdColor:
        """
        Get: Color(self: ContentControl) -> WdColor
        Set: Color(self: ContentControl) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ContentControl) -> int """
        ...

    @property
    def DateCalendarType(self) -> WdCalendarType:
        """
        Get: DateCalendarType(self: ContentControl) -> WdCalendarType
        Set: DateCalendarType(self: ContentControl) = value
        """
        ...

    @property
    def DateDisplayFormat(self) -> str:
        """
        Get: DateDisplayFormat(self: ContentControl) -> str
        Set: DateDisplayFormat(self: ContentControl) = value
        """
        ...

    @property
    def DateDisplayLocale(self) -> WdLanguageID:
        """
        Get: DateDisplayLocale(self: ContentControl) -> WdLanguageID
        Set: DateDisplayLocale(self: ContentControl) = value
        """
        ...

    @property
    def DateStorageFormat(self) -> WdContentControlDateStorageFormat:
        """
        Get: DateStorageFormat(self: ContentControl) -> WdContentControlDateStorageFormat
        Set: DateStorageFormat(self: ContentControl) = value
        """
        ...

    @property
    def DefaultTextStyle(self) -> object:
        """
        Get: DefaultTextStyle(self: ContentControl) -> object
        Set: DefaultTextStyle(self: ContentControl) = value
        """
        ...

    @property
    def DropdownListEntries(self) -> ContentControlListEntries:
        """ Get: DropdownListEntries(self: ContentControl) -> ContentControlListEntries """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: ContentControl) -> str """
        ...

    @property
    def Level(self) -> WdContentControlLevel:
        """ Get: Level(self: ContentControl) -> WdContentControlLevel """
        ...

    @property
    def LockContentControl(self) -> bool:
        """
        Get: LockContentControl(self: ContentControl) -> bool
        Set: LockContentControl(self: ContentControl) = value
        """
        ...

    @property
    def LockContents(self) -> bool:
        """
        Get: LockContents(self: ContentControl) -> bool
        Set: LockContents(self: ContentControl) = value
        """
        ...

    @property
    def MultiLine(self) -> bool:
        """
        Get: MultiLine(self: ContentControl) -> bool
        Set: MultiLine(self: ContentControl) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ContentControl) -> object """
        ...

    @property
    def ParentContentControl(self) -> ContentControl:
        """ Get: ParentContentControl(self: ContentControl) -> ContentControl """
        ...

    @property
    def PlaceholderText(self) -> BuildingBlock:
        """ Get: PlaceholderText(self: ContentControl) -> BuildingBlock """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: ContentControl) -> Range """
        ...

    @property
    def RepeatingSectionItems(self) -> RepeatingSectionItemColl:
        """ Get: RepeatingSectionItems(self: ContentControl) -> RepeatingSectionItemColl """
        ...

    @property
    def RepeatingSectionItemTitle(self) -> str:
        """
        Get: RepeatingSectionItemTitle(self: ContentControl) -> str
        Set: RepeatingSectionItemTitle(self: ContentControl) = value
        """
        ...

    @property
    def ShowingPlaceholderText(self) -> bool:
        """ Get: ShowingPlaceholderText(self: ContentControl) -> bool """
        ...

    @property
    def Tag(self) -> str:
        """
        Get: Tag(self: ContentControl) -> str
        Set: Tag(self: ContentControl) = value
        """
        ...

    @property
    def Temporary(self) -> bool:
        """
        Get: Temporary(self: ContentControl) -> bool
        Set: Temporary(self: ContentControl) = value
        """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: ContentControl) -> str
        Set: Title(self: ContentControl) = value
        """
        ...

    @property
    def Type(self) -> WdContentControlType:
        """
        Get: Type(self: ContentControl) -> WdContentControlType
        Set: Type(self: ContentControl) = value
        """
        ...

    @property
    def XMLMapping(self) -> XMLMapping:
        """ Get: XMLMapping(self: ContentControl) -> XMLMapping """
        ...


    def Copy(self): # -> 
        """ Copy(self: ContentControl) """
        ...

    def Cut(self): # -> 
        """ Cut(self: ContentControl) """
        ...

    def Delete(self, DeleteContents:bool): # -> 
        """ Delete(self: ContentControl, DeleteContents: bool) """
        ...

    def SetCheckedSymbol(self, CharacterNumber:int, Font:str): # -> 
        """ SetCheckedSymbol(self: ContentControl, CharacterNumber: int, Font: str) """
        ...

    def SetPlaceholderText(self, BuildingBlock:BuildingBlock, Range:Range, Text:str): # -> 
        """ SetPlaceholderText(self: ContentControl, BuildingBlock: BuildingBlock, Range: Range, Text: str) """
        ...

    def SetUncheckedSymbol(self, CharacterNumber:int, Font:str): # -> 
        """ SetUncheckedSymbol(self: ContentControl, CharacterNumber: int, Font: str) """
        ...

    def Ungroup(self): # -> 
        """ Ungroup(self: ContentControl) """
        ...


class ContentControlListEntries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ContentControlListEntries) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ContentControlListEntries) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ContentControlListEntries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ContentControlListEntries) -> object """
        ...


    def Add(self, Text:str, Value:str, Index:int) -> ContentControlListEntry:
        """ Add(self: ContentControlListEntries, Text: str, Value: str, Index: int) -> ContentControlListEntry """
        ...

    def Clear(self): # -> 
        """ Clear(self: ContentControlListEntries) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ContentControlListEntry: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ContentControlListEntry) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ContentControlListEntry) -> int """
        ...

    @property
    def Index(self) -> int:
        """
        Get: Index(self: ContentControlListEntry) -> int
        Set: Index(self: ContentControlListEntry) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ContentControlListEntry) -> object """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: ContentControlListEntry) -> str
        Set: Text(self: ContentControlListEntry) = value
        """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: ContentControlListEntry) -> str
        Set: Value(self: ContentControlListEntry) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: ContentControlListEntry) """
        ...

    def MoveDown(self): # -> 
        """ MoveDown(self: ContentControlListEntry) """
        ...

    def MoveUp(self): # -> 
        """ MoveUp(self: ContentControlListEntry) """
        ...

    def Select(self): # -> 
        """ Select(self: ContentControlListEntry) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ContentControls(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ContentControls) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ContentControls) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ContentControls) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ContentControls) -> object """
        ...


    def Add(self, Type:WdContentControlType, Range:object) -> Tuple_[ContentControl, object]:
        """ Add(self: ContentControls, Type: WdContentControlType, Range: object) -> (ContentControl, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Corners: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Corners) -> object """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Corners) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Corners) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Corners) -> object """
        ...


    def Select(self) -> object:
        """ Select(self: Corners) -> object """
        ...


class CustomLabel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CustomLabel) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CustomLabel) -> int """
        ...

    @property
    def DotMatrix(self) -> bool:
        """ Get: DotMatrix(self: CustomLabel) -> bool """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: CustomLabel) -> Single
        Set: Height(self: CustomLabel) = value
        """
        ...

    @property
    def HorizontalPitch(self) -> Single:
        """
        Get: HorizontalPitch(self: CustomLabel) -> Single
        Set: HorizontalPitch(self: CustomLabel) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: CustomLabel) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: CustomLabel) -> str
        Set: Name(self: CustomLabel) = value
        """
        ...

    @property
    def NumberAcross(self) -> int:
        """
        Get: NumberAcross(self: CustomLabel) -> int
        Set: NumberAcross(self: CustomLabel) = value
        """
        ...

    @property
    def NumberDown(self) -> int:
        """
        Get: NumberDown(self: CustomLabel) -> int
        Set: NumberDown(self: CustomLabel) = value
        """
        ...

    @property
    def PageSize(self) -> WdCustomLabelPageSize:
        """
        Get: PageSize(self: CustomLabel) -> WdCustomLabelPageSize
        Set: PageSize(self: CustomLabel) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CustomLabel) -> object """
        ...

    @property
    def SideMargin(self) -> Single:
        """
        Get: SideMargin(self: CustomLabel) -> Single
        Set: SideMargin(self: CustomLabel) = value
        """
        ...

    @property
    def TopMargin(self) -> Single:
        """
        Get: TopMargin(self: CustomLabel) -> Single
        Set: TopMargin(self: CustomLabel) = value
        """
        ...

    @property
    def Valid(self) -> bool:
        """ Get: Valid(self: CustomLabel) -> bool """
        ...

    @property
    def VerticalPitch(self) -> Single:
        """
        Get: VerticalPitch(self: CustomLabel) -> Single
        Set: VerticalPitch(self: CustomLabel) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: CustomLabel) -> Single
        Set: Width(self: CustomLabel) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: CustomLabel) """
        ...


class CustomLabels(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CustomLabels) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CustomLabels) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CustomLabels) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CustomLabels) -> object """
        ...


    def Add(self, Name:str, DotMatrix:object) -> Tuple_[CustomLabel, object]:
        """ Add(self: CustomLabels, Name: str, DotMatrix: object) -> (CustomLabel, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CustomProperties(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CustomProperties) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: CustomProperties) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CustomProperties) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CustomProperties) -> object """
        ...


    def Add(self, Name:str, Value:str) -> CustomProperty:
        """ Add(self: CustomProperties, Name: str, Value: str) -> CustomProperty """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class CustomProperty: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: CustomProperty) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: CustomProperty) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: CustomProperty) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: CustomProperty) -> object """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: CustomProperty) -> str
        Set: Value(self: CustomProperty) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: CustomProperty) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class DataLabel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: DataLabel) -> object """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: DataLabel) -> object
        Set: AutoScaleFont(self: DataLabel) = value
        """
        ...

    @property
    def AutoText(self) -> bool:
        """
        Get: AutoText(self: DataLabel) -> bool
        Set: AutoText(self: DataLabel) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: DataLabel) -> ChartBorder """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: DataLabel) -> str
        Set: Caption(self: DataLabel) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DataLabel) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: DataLabel) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> ChartFont:
        """ Get: Font(self: DataLabel) -> ChartFont """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DataLabel) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: DataLabel) -> str
        Set: Formula(self: DataLabel) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: DataLabel) -> str
        Set: FormulaLocal(self: DataLabel) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: DataLabel) -> str
        Set: FormulaR1C1(self: DataLabel) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: DataLabel) -> str
        Set: FormulaR1C1Local(self: DataLabel) = value
        """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: DataLabel) -> float
        Set: Height(self: DataLabel) = value
        """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: DataLabel) -> object
        Set: HorizontalAlignment(self: DataLabel) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: DataLabel) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: DataLabel) -> float
        Set: Left(self: DataLabel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DataLabel) -> str """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: DataLabel) -> str
        Set: NumberFormat(self: DataLabel) = value
        """
        ...

    @property
    def NumberFormatLinked(self) -> bool:
        """
        Get: NumberFormatLinked(self: DataLabel) -> bool
        Set: NumberFormatLinked(self: DataLabel) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: DataLabel) -> object
        Set: NumberFormatLocal(self: DataLabel) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: DataLabel) -> object
        Set: Orientation(self: DataLabel) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DataLabel) -> object """
        ...

    @property
    def Position(self) -> XlDataLabelPosition:
        """
        Get: Position(self: DataLabel) -> XlDataLabelPosition
        Set: Position(self: DataLabel) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: DataLabel) -> int
        Set: ReadingOrder(self: DataLabel) = value
        """
        ...

    @property
    def Separator(self) -> object:
        """
        Get: Separator(self: DataLabel) -> object
        Set: Separator(self: DataLabel) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: DataLabel) -> bool
        Set: Shadow(self: DataLabel) = value
        """
        ...

    @property
    def ShowBubbleSize(self) -> bool:
        """
        Get: ShowBubbleSize(self: DataLabel) -> bool
        Set: ShowBubbleSize(self: DataLabel) = value
        """
        ...

    @property
    def ShowCategoryName(self) -> bool:
        """
        Get: ShowCategoryName(self: DataLabel) -> bool
        Set: ShowCategoryName(self: DataLabel) = value
        """
        ...

    @property
    def ShowLegendKey(self) -> bool:
        """
        Get: ShowLegendKey(self: DataLabel) -> bool
        Set: ShowLegendKey(self: DataLabel) = value
        """
        ...

    @property
    def ShowPercentage(self) -> bool:
        """
        Get: ShowPercentage(self: DataLabel) -> bool
        Set: ShowPercentage(self: DataLabel) = value
        """
        ...

    @property
    def ShowRange(self) -> bool:
        """
        Get: ShowRange(self: DataLabel) -> bool
        Set: ShowRange(self: DataLabel) = value
        """
        ...

    @property
    def ShowSeriesName(self) -> bool:
        """
        Get: ShowSeriesName(self: DataLabel) -> bool
        Set: ShowSeriesName(self: DataLabel) = value
        """
        ...

    @property
    def ShowValue(self) -> bool:
        """
        Get: ShowValue(self: DataLabel) -> bool
        Set: ShowValue(self: DataLabel) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: DataLabel) -> str
        Set: Text(self: DataLabel) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: DataLabel) -> float
        Set: Top(self: DataLabel) = value
        """
        ...

    @property
    def Type(self) -> object:
        """
        Get: Type(self: DataLabel) -> object
        Set: Type(self: DataLabel) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: DataLabel) -> object
        Set: VerticalAlignment(self: DataLabel) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: DataLabel) -> float
        Set: Width(self: DataLabel) = value
        """
        ...

    @property
    def _Height(self) -> float:
        """ Get: _Height(self: DataLabel) -> float """
        ...

    @property
    def _Width(self) -> float:
        """ Get: _Width(self: DataLabel) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: DataLabel) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: DataLabel) -> object """
        ...


class DataLabels(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: DataLabels) -> object """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: DataLabels) -> object
        Set: AutoScaleFont(self: DataLabels) = value
        """
        ...

    @property
    def AutoText(self) -> bool:
        """
        Get: AutoText(self: DataLabels) -> bool
        Set: AutoText(self: DataLabels) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: DataLabels) -> ChartBorder """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: DataLabels) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DataLabels) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: DataLabels) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> ChartFont:
        """ Get: Font(self: DataLabels) -> ChartFont """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DataLabels) -> ChartFormat """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: DataLabels) -> object
        Set: HorizontalAlignment(self: DataLabels) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: DataLabels) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DataLabels) -> str """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: DataLabels) -> str
        Set: NumberFormat(self: DataLabels) = value
        """
        ...

    @property
    def NumberFormatLinked(self) -> bool:
        """
        Get: NumberFormatLinked(self: DataLabels) -> bool
        Set: NumberFormatLinked(self: DataLabels) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: DataLabels) -> object
        Set: NumberFormatLocal(self: DataLabels) = value
        """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: DataLabels) -> object
        Set: Orientation(self: DataLabels) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DataLabels) -> object """
        ...

    @property
    def Position(self) -> XlDataLabelPosition:
        """
        Get: Position(self: DataLabels) -> XlDataLabelPosition
        Set: Position(self: DataLabels) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: DataLabels) -> int
        Set: ReadingOrder(self: DataLabels) = value
        """
        ...

    @property
    def Separator(self) -> object:
        """
        Get: Separator(self: DataLabels) -> object
        Set: Separator(self: DataLabels) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: DataLabels) -> bool
        Set: Shadow(self: DataLabels) = value
        """
        ...

    @property
    def ShowBubbleSize(self) -> bool:
        """
        Get: ShowBubbleSize(self: DataLabels) -> bool
        Set: ShowBubbleSize(self: DataLabels) = value
        """
        ...

    @property
    def ShowCategoryName(self) -> bool:
        """
        Get: ShowCategoryName(self: DataLabels) -> bool
        Set: ShowCategoryName(self: DataLabels) = value
        """
        ...

    @property
    def ShowLegendKey(self) -> bool:
        """
        Get: ShowLegendKey(self: DataLabels) -> bool
        Set: ShowLegendKey(self: DataLabels) = value
        """
        ...

    @property
    def ShowPercentage(self) -> bool:
        """
        Get: ShowPercentage(self: DataLabels) -> bool
        Set: ShowPercentage(self: DataLabels) = value
        """
        ...

    @property
    def ShowRange(self) -> bool:
        """
        Get: ShowRange(self: DataLabels) -> bool
        Set: ShowRange(self: DataLabels) = value
        """
        ...

    @property
    def ShowSeriesName(self) -> bool:
        """
        Get: ShowSeriesName(self: DataLabels) -> bool
        Set: ShowSeriesName(self: DataLabels) = value
        """
        ...

    @property
    def ShowValue(self) -> bool:
        """
        Get: ShowValue(self: DataLabels) -> bool
        Set: ShowValue(self: DataLabels) = value
        """
        ...

    @property
    def Type(self) -> object:
        """
        Get: Type(self: DataLabels) -> object
        Set: Type(self: DataLabels) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: DataLabels) -> object
        Set: VerticalAlignment(self: DataLabels) = value
        """
        ...


    def Delete(self) -> object:
        """ Delete(self: DataLabels) -> object """
        ...

    def Propagate(self, Index:object): # -> 
        """ Propagate(self: DataLabels, Index: object) """
        ...

    def Select(self) -> object:
        """ Select(self: DataLabels) -> object """
        ...

    def _Default(self, Index:object) -> DataLabel:
        """ _Default(self: DataLabels, Index: object) -> DataLabel """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class DataTable: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: DataTable) -> object """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: DataTable) -> object
        Set: AutoScaleFont(self: DataTable) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: DataTable) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DataTable) -> int """
        ...

    @property
    def Font(self) -> ChartFont:
        """ Get: Font(self: DataTable) -> ChartFont """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DataTable) -> ChartFormat """
        ...

    @property
    def HasBorderHorizontal(self) -> bool:
        """
        Get: HasBorderHorizontal(self: DataTable) -> bool
        Set: HasBorderHorizontal(self: DataTable) = value
        """
        ...

    @property
    def HasBorderOutline(self) -> bool:
        """
        Get: HasBorderOutline(self: DataTable) -> bool
        Set: HasBorderOutline(self: DataTable) = value
        """
        ...

    @property
    def HasBorderVertical(self) -> bool:
        """
        Get: HasBorderVertical(self: DataTable) -> bool
        Set: HasBorderVertical(self: DataTable) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DataTable) -> object """
        ...

    @property
    def ShowLegendKey(self) -> bool:
        """
        Get: ShowLegendKey(self: DataTable) -> bool
        Set: ShowLegendKey(self: DataTable) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: DataTable) """
        ...

    def Select(self): # -> 
        """ Select(self: DataTable) """
        ...


class DefaultWebOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowPNG(self) -> bool:
        """
        Get: AllowPNG(self: DefaultWebOptions) -> bool
        Set: AllowPNG(self: DefaultWebOptions) = value
        """
        ...

    @property
    def AlwaysSaveInDefaultEncoding(self) -> bool:
        """
        Get: AlwaysSaveInDefaultEncoding(self: DefaultWebOptions) -> bool
        Set: AlwaysSaveInDefaultEncoding(self: DefaultWebOptions) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: DefaultWebOptions) -> Application """
        ...

    @property
    def BrowserLevel(self) -> WdBrowserLevel:
        """
        Get: BrowserLevel(self: DefaultWebOptions) -> WdBrowserLevel
        Set: BrowserLevel(self: DefaultWebOptions) = value
        """
        ...

    @property
    def CheckIfOfficeIsHTMLEditor(self) -> bool:
        """
        Get: CheckIfOfficeIsHTMLEditor(self: DefaultWebOptions) -> bool
        Set: CheckIfOfficeIsHTMLEditor(self: DefaultWebOptions) = value
        """
        ...

    @property
    def CheckIfWordIsDefaultHTMLEditor(self) -> bool:
        """
        Get: CheckIfWordIsDefaultHTMLEditor(self: DefaultWebOptions) -> bool
        Set: CheckIfWordIsDefaultHTMLEditor(self: DefaultWebOptions) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DefaultWebOptions) -> int """
        ...

    @property
    def Encoding(self): # -> MsoEncoding
        """
        Get: Encoding(self: DefaultWebOptions) -> MsoEncoding
        Set: Encoding(self: DefaultWebOptions) = value
        """
        ...

    @property
    def FolderSuffix(self) -> str:
        """ Get: FolderSuffix(self: DefaultWebOptions) -> str """
        ...

    @property
    def Fonts(self): # -> WebPageFonts
        """ Get: Fonts(self: DefaultWebOptions) -> WebPageFonts """
        ...

    @property
    def OptimizeForBrowser(self) -> bool:
        """
        Get: OptimizeForBrowser(self: DefaultWebOptions) -> bool
        Set: OptimizeForBrowser(self: DefaultWebOptions) = value
        """
        ...

    @property
    def OrganizeInFolder(self) -> bool:
        """
        Get: OrganizeInFolder(self: DefaultWebOptions) -> bool
        Set: OrganizeInFolder(self: DefaultWebOptions) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DefaultWebOptions) -> object """
        ...

    @property
    def PixelsPerInch(self) -> int:
        """
        Get: PixelsPerInch(self: DefaultWebOptions) -> int
        Set: PixelsPerInch(self: DefaultWebOptions) = value
        """
        ...

    @property
    def RelyOnCSS(self) -> bool:
        """
        Get: RelyOnCSS(self: DefaultWebOptions) -> bool
        Set: RelyOnCSS(self: DefaultWebOptions) = value
        """
        ...

    @property
    def RelyOnVML(self) -> bool:
        """
        Get: RelyOnVML(self: DefaultWebOptions) -> bool
        Set: RelyOnVML(self: DefaultWebOptions) = value
        """
        ...

    @property
    def SaveNewWebPagesAsWebArchives(self) -> bool:
        """
        Get: SaveNewWebPagesAsWebArchives(self: DefaultWebOptions) -> bool
        Set: SaveNewWebPagesAsWebArchives(self: DefaultWebOptions) = value
        """
        ...

    @property
    def ScreenSize(self): # -> MsoScreenSize
        """
        Get: ScreenSize(self: DefaultWebOptions) -> MsoScreenSize
        Set: ScreenSize(self: DefaultWebOptions) = value
        """
        ...

    @property
    def TargetBrowser(self): # -> MsoTargetBrowser
        """
        Get: TargetBrowser(self: DefaultWebOptions) -> MsoTargetBrowser
        Set: TargetBrowser(self: DefaultWebOptions) = value
        """
        ...

    @property
    def UpdateLinksOnSave(self) -> bool:
        """
        Get: UpdateLinksOnSave(self: DefaultWebOptions) -> bool
        Set: UpdateLinksOnSave(self: DefaultWebOptions) = value
        """
        ...

    @property
    def UseLongFileNames(self) -> bool:
        """
        Get: UseLongFileNames(self: DefaultWebOptions) -> bool
        Set: UseLongFileNames(self: DefaultWebOptions) = value
        """
        ...



class Diagram: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Diagram) -> Application """
        ...

    @property
    def AutoFormat(self): # -> MsoTriState
        """
        Get: AutoFormat(self: Diagram) -> MsoTriState
        Set: AutoFormat(self: Diagram) = value
        """
        ...

    @property
    def AutoLayout(self): # -> MsoTriState
        """
        Get: AutoLayout(self: Diagram) -> MsoTriState
        Set: AutoLayout(self: Diagram) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Diagram) -> int """
        ...

    @property
    def Nodes(self) -> DiagramNodes:
        """ Get: Nodes(self: Diagram) -> DiagramNodes """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Diagram) -> object """
        ...

    @property
    def Reverse(self): # -> MsoTriState
        """
        Get: Reverse(self: Diagram) -> MsoTriState
        Set: Reverse(self: Diagram) = value
        """
        ...

    @property
    def Type(self): # -> MsoDiagramType
        """ Get: Type(self: Diagram) -> MsoDiagramType """
        ...


    def Convert(self, Type): # ->  # Not found arg types: {'Type': 'MsoDiagramType'}
        """ Convert(self: Diagram, Type: MsoDiagramType) """
        ...

    def FitText(self): # -> 
        """ FitText(self: Diagram) """
        ...


class DiagramNode: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DiagramNode) -> Application """
        ...

    @property
    def Children(self) -> DiagramNodeChildren:
        """ Get: Children(self: DiagramNode) -> DiagramNodeChildren """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DiagramNode) -> int """
        ...

    @property
    def Diagram(self) -> Diagram:
        """ Get: Diagram(self: DiagramNode) -> Diagram """
        ...

    @property
    def Layout(self): # -> MsoOrgChartLayoutType
        """
        Get: Layout(self: DiagramNode) -> MsoOrgChartLayoutType
        Set: Layout(self: DiagramNode) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DiagramNode) -> object """
        ...

    @property
    def Root(self) -> DiagramNode:
        """ Get: Root(self: DiagramNode) -> DiagramNode """
        ...

    @property
    def Shape(self) -> Shape:
        """ Get: Shape(self: DiagramNode) -> Shape """
        ...

    @property
    def TextShape(self) -> Shape:
        """ Get: TextShape(self: DiagramNode) -> Shape """
        ...


    def AddNode(self, Pos, NodeType) -> DiagramNode: # Not found arg types: {'Pos': 'MsoRelativeNodePosition', 'NodeType': 'MsoDiagramNodeType'}
        """ AddNode(self: DiagramNode, Pos: MsoRelativeNodePosition, NodeType: MsoDiagramNodeType) -> DiagramNode """
        ...

    def CloneNode(self, copyChildren, TargetNode, Pos) -> Tuple_[DiagramNode, DiagramNode]:
        """ CloneNode(self: DiagramNode, copyChildren: bool, Pos: MsoRelativeNodePosition) -> (DiagramNode, DiagramNode) """
        ...

    def Delete(self): # -> 
        """ Delete(self: DiagramNode) """
        ...

    def MoveNode(self, TargetNode, Pos) -> DiagramNode:
        """ MoveNode(self: DiagramNode, Pos: MsoRelativeNodePosition) -> DiagramNode """
        ...

    def NextNode(self) -> DiagramNode:
        """ NextNode(self: DiagramNode) -> DiagramNode """
        ...

    def PrevNode(self) -> DiagramNode:
        """ PrevNode(self: DiagramNode) -> DiagramNode """
        ...

    def ReplaceNode(self, TargetNode) -> DiagramNode:
        """ ReplaceNode(self: DiagramNode) -> DiagramNode """
        ...

    def SwapNode(self, TargetNode, Pos) -> DiagramNode:
        """ SwapNode(self: DiagramNode, Pos: MsoRelativeNodePosition) -> DiagramNode """
        ...

    def TransferChildren(self, ReceivingNode) -> DiagramNode:
        """ TransferChildren(self: DiagramNode) -> DiagramNode """
        ...


class DiagramNodeChildren(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DiagramNodeChildren) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: DiagramNodeChildren) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DiagramNodeChildren) -> int """
        ...

    @property
    def FirstChild(self) -> DiagramNode:
        """ Get: FirstChild(self: DiagramNodeChildren) -> DiagramNode """
        ...

    @property
    def LastChild(self) -> DiagramNode:
        """ Get: LastChild(self: DiagramNodeChildren) -> DiagramNode """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DiagramNodeChildren) -> object """
        ...


    def AddNode(self, Index:object, NodeType) -> Tuple_[DiagramNode, object]: # Not found arg types: {'NodeType': 'MsoDiagramNodeType'}
        """ AddNode(self: DiagramNodeChildren, Index: object, NodeType: MsoDiagramNodeType) -> (DiagramNode, object) """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: DiagramNodeChildren) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class DiagramNodes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DiagramNodes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: DiagramNodes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DiagramNodes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DiagramNodes) -> object """
        ...


    def SelectAll(self): # -> 
        """ SelectAll(self: DiagramNodes) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Dialog: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Dialog) -> Application """
        ...

    @property
    def CommandBarId(self) -> int:
        """ Get: CommandBarId(self: Dialog) -> int """
        ...

    @property
    def CommandName(self) -> str:
        """ Get: CommandName(self: Dialog) -> str """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Dialog) -> int """
        ...

    @property
    def DefaultTab(self) -> WdWordDialogTab:
        """
        Get: DefaultTab(self: Dialog) -> WdWordDialogTab
        Set: DefaultTab(self: Dialog) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Dialog) -> object """
        ...

    @property
    def Type(self) -> WdWordDialog:
        """ Get: Type(self: Dialog) -> WdWordDialog """
        ...


    def Display(self, TimeOut:object) -> Tuple_[int, object]:
        """ Display(self: Dialog, TimeOut: object) -> (int, object) """
        ...

    def Execute(self): # -> 
        """ Execute(self: Dialog) """
        ...

    def Show(self, TimeOut:object) -> Tuple_[int, object]:
        """ Show(self: Dialog, TimeOut: object) -> (int, object) """
        ...

    def Update(self): # -> 
        """ Update(self: Dialog) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Dialogs(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Dialogs) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Dialogs) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Dialogs) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Dialogs) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Dictionaries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveCustomDictionary(self) -> Dictionary:
        """
        Get: ActiveCustomDictionary(self: Dictionaries) -> Dictionary
        Set: ActiveCustomDictionary(self: Dictionaries) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Dictionaries) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Dictionaries) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Dictionaries) -> int """
        ...

    @property
    def Maximum(self) -> int:
        """ Get: Maximum(self: Dictionaries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Dictionaries) -> object """
        ...


    def Add(self, FileName:str) -> Dictionary:
        """ Add(self: Dictionaries, FileName: str) -> Dictionary """
        ...

    def ClearAll(self): # -> 
        """ ClearAll(self: Dictionaries) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Dictionary: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Dictionary) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Dictionary) -> int """
        ...

    @property
    def LanguageID(self) -> WdLanguageID:
        """
        Get: LanguageID(self: Dictionary) -> WdLanguageID
        Set: LanguageID(self: Dictionary) = value
        """
        ...

    @property
    def LanguageSpecific(self) -> bool:
        """
        Get: LanguageSpecific(self: Dictionary) -> bool
        Set: LanguageSpecific(self: Dictionary) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Dictionary) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Dictionary) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: Dictionary) -> str """
        ...

    @property
    def ReadOnly(self) -> bool:
        """ Get: ReadOnly(self: Dictionary) -> bool """
        ...

    @property
    def Type(self) -> WdDictionaryType:
        """ Get: Type(self: Dictionary) -> WdDictionaryType """
        ...


    def Delete(self): # -> 
        """ Delete(self: Dictionary) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class DisplayUnitLabel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: DisplayUnitLabel) -> object """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: DisplayUnitLabel) -> object
        Set: AutoScaleFont(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: DisplayUnitLabel) -> ChartBorder """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: DisplayUnitLabel) -> str
        Set: Caption(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DisplayUnitLabel) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: DisplayUnitLabel) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> ChartFont:
        """ Get: Font(self: DisplayUnitLabel) -> ChartFont """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DisplayUnitLabel) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: DisplayUnitLabel) -> str
        Set: Formula(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: DisplayUnitLabel) -> str
        Set: FormulaLocal(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: DisplayUnitLabel) -> str
        Set: FormulaR1C1(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: DisplayUnitLabel) -> str
        Set: FormulaR1C1Local(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: DisplayUnitLabel) -> float """
        ...

    @property
    def HorizontalAlignment(self) -> object:
        """
        Get: HorizontalAlignment(self: DisplayUnitLabel) -> object
        Set: HorizontalAlignment(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def IncludeInLayout(self) -> bool:
        """
        Get: IncludeInLayout(self: DisplayUnitLabel) -> bool
        Set: IncludeInLayout(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: DisplayUnitLabel) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: DisplayUnitLabel) -> float
        Set: Left(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DisplayUnitLabel) -> str """
        ...

    @property
    def Orientation(self) -> object:
        """
        Get: Orientation(self: DisplayUnitLabel) -> object
        Set: Orientation(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DisplayUnitLabel) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: DisplayUnitLabel) -> XlChartElementPosition
        Set: Position(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: DisplayUnitLabel) -> int
        Set: ReadingOrder(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: DisplayUnitLabel) -> bool
        Set: Shadow(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: DisplayUnitLabel) -> str
        Set: Text(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: DisplayUnitLabel) -> float
        Set: Top(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> object:
        """
        Get: VerticalAlignment(self: DisplayUnitLabel) -> object
        Set: VerticalAlignment(self: DisplayUnitLabel) = value
        """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: DisplayUnitLabel) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: DisplayUnitLabel) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: DisplayUnitLabel) -> object """
        ...


class DocumentEvents2_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_BuildingBlockInsert(self): # -> 
        """ add_BuildingBlockInsert(self: DocumentEvents2_Event, : DocumentEvents2_BuildingBlockInsertEventHandler) """
        ...

    def add_Close(self): # -> 
        """ add_Close(self: DocumentEvents2_Event, : DocumentEvents2_CloseEventHandler) """
        ...

    def add_ContentControlAfterAdd(self): # -> 
        """ add_ContentControlAfterAdd(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlAfterAddEventHandler) """
        ...

    def add_ContentControlBeforeContentUpdate(self): # -> 
        """ add_ContentControlBeforeContentUpdate(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlBeforeContentUpdateEventHandler) """
        ...

    def add_ContentControlBeforeDelete(self): # -> 
        """ add_ContentControlBeforeDelete(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlBeforeDeleteEventHandler) """
        ...

    def add_ContentControlBeforeStoreUpdate(self): # -> 
        """ add_ContentControlBeforeStoreUpdate(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlBeforeStoreUpdateEventHandler) """
        ...

    def add_ContentControlOnEnter(self): # -> 
        """ add_ContentControlOnEnter(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlOnEnterEventHandler) """
        ...

    def add_ContentControlOnExit(self): # -> 
        """ add_ContentControlOnExit(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlOnExitEventHandler) """
        ...

    def add_New(self): # -> 
        """ add_New(self: DocumentEvents2_Event, : DocumentEvents2_NewEventHandler) """
        ...

    def add_Open(self): # -> 
        """ add_Open(self: DocumentEvents2_Event, : DocumentEvents2_OpenEventHandler) """
        ...

    def add_Sync(self): # -> 
        """ add_Sync(self: DocumentEvents2_Event, : DocumentEvents2_SyncEventHandler) """
        ...

    def add_XMLAfterInsert(self): # -> 
        """ add_XMLAfterInsert(self: DocumentEvents2_Event, : DocumentEvents2_XMLAfterInsertEventHandler) """
        ...

    def add_XMLBeforeDelete(self): # -> 
        """ add_XMLBeforeDelete(self: DocumentEvents2_Event, : DocumentEvents2_XMLBeforeDeleteEventHandler) """
        ...

    def remove_BuildingBlockInsert(self): # -> 
        """ remove_BuildingBlockInsert(self: DocumentEvents2_Event, : DocumentEvents2_BuildingBlockInsertEventHandler) """
        ...

    def remove_Close(self): # -> 
        """ remove_Close(self: DocumentEvents2_Event, : DocumentEvents2_CloseEventHandler) """
        ...

    def remove_ContentControlAfterAdd(self): # -> 
        """ remove_ContentControlAfterAdd(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlAfterAddEventHandler) """
        ...

    def remove_ContentControlBeforeContentUpdate(self): # -> 
        """ remove_ContentControlBeforeContentUpdate(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlBeforeContentUpdateEventHandler) """
        ...

    def remove_ContentControlBeforeDelete(self): # -> 
        """ remove_ContentControlBeforeDelete(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlBeforeDeleteEventHandler) """
        ...

    def remove_ContentControlBeforeStoreUpdate(self): # -> 
        """ remove_ContentControlBeforeStoreUpdate(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlBeforeStoreUpdateEventHandler) """
        ...

    def remove_ContentControlOnEnter(self): # -> 
        """ remove_ContentControlOnEnter(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlOnEnterEventHandler) """
        ...

    def remove_ContentControlOnExit(self): # -> 
        """ remove_ContentControlOnExit(self: DocumentEvents2_Event, : DocumentEvents2_ContentControlOnExitEventHandler) """
        ...

    def remove_New(self): # -> 
        """ remove_New(self: DocumentEvents2_Event, : DocumentEvents2_NewEventHandler) """
        ...

    def remove_Open(self): # -> 
        """ remove_Open(self: DocumentEvents2_Event, : DocumentEvents2_OpenEventHandler) """
        ...

    def remove_Sync(self): # -> 
        """ remove_Sync(self: DocumentEvents2_Event, : DocumentEvents2_SyncEventHandler) """
        ...

    def remove_XMLAfterInsert(self): # -> 
        """ remove_XMLAfterInsert(self: DocumentEvents2_Event, : DocumentEvents2_XMLAfterInsertEventHandler) """
        ...

    def remove_XMLBeforeDelete(self): # -> 
        """ remove_XMLBeforeDelete(self: DocumentEvents2_Event, : DocumentEvents2_XMLBeforeDeleteEventHandler) """
        ...

    BuildingBlockInsert = ...
    Close = ...
    ContentControlAfterAdd = ...
    ContentControlBeforeContentUpdate = ...
    ContentControlBeforeDelete = ...
    ContentControlBeforeStoreUpdate = ...
    ContentControlOnEnter = ...
    ContentControlOnExit = ...
    New = ...
    Open = ...
    Sync = ...
    XMLAfterInsert = ...
    XMLBeforeDelete = ...


class _Document: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveTheme(self) -> str:
        """ Get: ActiveTheme(self: _Document) -> str """
        ...

    @property
    def ActiveThemeDisplayName(self) -> str:
        """ Get: ActiveThemeDisplayName(self: _Document) -> str """
        ...

    @property
    def ActiveWindow(self) -> Window:
        """ Get: ActiveWindow(self: _Document) -> Window """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Document) -> Application """
        ...

    @property
    def AttachedTemplate(self) -> object:
        """
        Get: AttachedTemplate(self: _Document) -> object
        Set: AttachedTemplate(self: _Document) = value
        """
        ...

    @property
    def AutoFormatOverride(self) -> bool:
        """
        Get: AutoFormatOverride(self: _Document) -> bool
        Set: AutoFormatOverride(self: _Document) = value
        """
        ...

    @property
    def AutoHyphenation(self) -> bool:
        """
        Get: AutoHyphenation(self: _Document) -> bool
        Set: AutoHyphenation(self: _Document) = value
        """
        ...

    @property
    def Background(self) -> Shape:
        """
        Get: Background(self: _Document) -> Shape
        Set: Background(self: _Document) = value
        """
        ...

    @property
    def Bibliography(self) -> Bibliography:
        """ Get: Bibliography(self: _Document) -> Bibliography """
        ...

    @property
    def Bookmarks(self) -> Bookmarks:
        """ Get: Bookmarks(self: _Document) -> Bookmarks """
        ...

    @property
    def Broadcast(self) -> Broadcast:
        """ Get: Broadcast(self: _Document) -> Broadcast """
        ...

    @property
    def BuiltInDocumentProperties(self) -> object:
        """ Get: BuiltInDocumentProperties(self: _Document) -> object """
        ...

    @property
    def Characters(self) -> Characters:
        """ Get: Characters(self: _Document) -> Characters """
        ...

    @property
    def ChartDataPointTrack(self) -> bool:
        """
        Get: ChartDataPointTrack(self: _Document) -> bool
        Set: ChartDataPointTrack(self: _Document) = value
        """
        ...

    @property
    def ChildNodeSuggestions(self) -> XMLChildNodeSuggestions:
        """ Get: ChildNodeSuggestions(self: _Document) -> XMLChildNodeSuggestions """
        ...

    @property
    def ClickAndTypeParagraphStyle(self) -> object:
        """
        Get: ClickAndTypeParagraphStyle(self: _Document) -> object
        Set: ClickAndTypeParagraphStyle(self: _Document) = value
        """
        ...

    @property
    def CoAuthoring(self) -> CoAuthoring:
        """ Get: CoAuthoring(self: _Document) -> CoAuthoring """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: _Document) -> str """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: _Document) -> CommandBars """
        ...

    @property
    def Comments(self) -> Comments:
        """ Get: Comments(self: _Document) -> Comments """
        ...

    @property
    def CompatibilityMode(self) -> int:
        """ Get: CompatibilityMode(self: _Document) -> int """
        ...

    @property
    def ConsecutiveHyphensLimit(self) -> int:
        """
        Get: ConsecutiveHyphensLimit(self: _Document) -> int
        Set: ConsecutiveHyphensLimit(self: _Document) = value
        """
        ...

    @property
    def Container(self) -> object:
        """ Get: Container(self: _Document) -> object """
        ...

    @property
    def Content(self) -> Range:
        """ Get: Content(self: _Document) -> Range """
        ...

    @property
    def ContentControls(self) -> ContentControls:
        """ Get: ContentControls(self: _Document) -> ContentControls """
        ...

    @property
    def ContentTypeProperties(self): # -> MetaProperties
        """ Get: ContentTypeProperties(self: _Document) -> MetaProperties """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: _Document) -> int """
        ...

    @property
    def CurrentRsid(self) -> int:
        """ Get: CurrentRsid(self: _Document) -> int """
        ...

    @property
    def CustomDocumentProperties(self) -> object:
        """ Get: CustomDocumentProperties(self: _Document) -> object """
        ...

    @property
    def CustomXMLParts(self): # -> CustomXMLParts
        """ Get: CustomXMLParts(self: _Document) -> CustomXMLParts """
        ...

    @property
    def DefaultTableStyle(self) -> object:
        """ Get: DefaultTableStyle(self: _Document) -> object """
        ...

    @property
    def DefaultTabStop(self) -> Single:
        """
        Get: DefaultTabStop(self: _Document) -> Single
        Set: DefaultTabStop(self: _Document) = value
        """
        ...

    @property
    def DefaultTargetFrame(self) -> str:
        """
        Get: DefaultTargetFrame(self: _Document) -> str
        Set: DefaultTargetFrame(self: _Document) = value
        """
        ...

    @property
    def DisableFeatures(self) -> bool:
        """
        Get: DisableFeatures(self: _Document) -> bool
        Set: DisableFeatures(self: _Document) = value
        """
        ...

    @property
    def DisableFeaturesIntroducedAfter(self) -> WdDisableFeaturesIntroducedAfter:
        """
        Get: DisableFeaturesIntroducedAfter(self: _Document) -> WdDisableFeaturesIntroducedAfter
        Set: DisableFeaturesIntroducedAfter(self: _Document) = value
        """
        ...

    @property
    def DocID(self) -> int:
        """ Get: DocID(self: _Document) -> int """
        ...

    @property
    def DocumentInspectors(self): # -> DocumentInspectors
        """ Get: DocumentInspectors(self: _Document) -> DocumentInspectors """
        ...

    @property
    def DocumentLibraryVersions(self): # -> DocumentLibraryVersions
        """ Get: DocumentLibraryVersions(self: _Document) -> DocumentLibraryVersions """
        ...

    @property
    def DocumentTheme(self): # -> OfficeTheme
        """ Get: DocumentTheme(self: _Document) -> OfficeTheme """
        ...

    @property
    def DoNotEmbedSystemFonts(self) -> bool:
        """
        Get: DoNotEmbedSystemFonts(self: _Document) -> bool
        Set: DoNotEmbedSystemFonts(self: _Document) = value
        """
        ...

    @property
    def Email(self) -> Email:
        """ Get: Email(self: _Document) -> Email """
        ...

    @property
    def EmbedLinguisticData(self) -> bool:
        """
        Get: EmbedLinguisticData(self: _Document) -> bool
        Set: EmbedLinguisticData(self: _Document) = value
        """
        ...

    @property
    def EmbedSmartTags(self) -> bool:
        """
        Get: EmbedSmartTags(self: _Document) -> bool
        Set: EmbedSmartTags(self: _Document) = value
        """
        ...

    @property
    def EmbedTrueTypeFonts(self) -> bool:
        """
        Get: EmbedTrueTypeFonts(self: _Document) -> bool
        Set: EmbedTrueTypeFonts(self: _Document) = value
        """
        ...

    @property
    def EncryptionProvider(self) -> str:
        """
        Get: EncryptionProvider(self: _Document) -> str
        Set: EncryptionProvider(self: _Document) = value
        """
        ...

    @property
    def Endnotes(self) -> Endnotes:
        """ Get: Endnotes(self: _Document) -> Endnotes """
        ...

    @property
    def EnforceStyle(self) -> bool:
        """
        Get: EnforceStyle(self: _Document) -> bool
        Set: EnforceStyle(self: _Document) = value
        """
        ...

    @property
    def Envelope(self) -> Envelope:
        """ Get: Envelope(self: _Document) -> Envelope """
        ...

    @property
    def FarEastLineBreakLanguage(self) -> WdFarEastLineBreakLanguageID:
        """
        Get: FarEastLineBreakLanguage(self: _Document) -> WdFarEastLineBreakLanguageID
        Set: FarEastLineBreakLanguage(self: _Document) = value
        """
        ...

    @property
    def FarEastLineBreakLevel(self) -> WdFarEastLineBreakLevel:
        """
        Get: FarEastLineBreakLevel(self: _Document) -> WdFarEastLineBreakLevel
        Set: FarEastLineBreakLevel(self: _Document) = value
        """
        ...

    @property
    def Fields(self) -> Fields:
        """ Get: Fields(self: _Document) -> Fields """
        ...

    @property
    def Final(self) -> bool:
        """
        Get: Final(self: _Document) -> bool
        Set: Final(self: _Document) = value
        """
        ...

    @property
    def Footnotes(self) -> Footnotes:
        """ Get: Footnotes(self: _Document) -> Footnotes """
        ...

    @property
    def FormattingShowClear(self) -> bool:
        """
        Get: FormattingShowClear(self: _Document) -> bool
        Set: FormattingShowClear(self: _Document) = value
        """
        ...

    @property
    def FormattingShowFilter(self) -> WdShowFilter:
        """
        Get: FormattingShowFilter(self: _Document) -> WdShowFilter
        Set: FormattingShowFilter(self: _Document) = value
        """
        ...

    @property
    def FormattingShowFont(self) -> bool:
        """
        Get: FormattingShowFont(self: _Document) -> bool
        Set: FormattingShowFont(self: _Document) = value
        """
        ...

    @property
    def FormattingShowNextLevel(self) -> bool:
        """
        Get: FormattingShowNextLevel(self: _Document) -> bool
        Set: FormattingShowNextLevel(self: _Document) = value
        """
        ...

    @property
    def FormattingShowNumbering(self) -> bool:
        """
        Get: FormattingShowNumbering(self: _Document) -> bool
        Set: FormattingShowNumbering(self: _Document) = value
        """
        ...

    @property
    def FormattingShowParagraph(self) -> bool:
        """
        Get: FormattingShowParagraph(self: _Document) -> bool
        Set: FormattingShowParagraph(self: _Document) = value
        """
        ...

    @property
    def FormattingShowUserStyleName(self) -> bool:
        """
        Get: FormattingShowUserStyleName(self: _Document) -> bool
        Set: FormattingShowUserStyleName(self: _Document) = value
        """
        ...

    @property
    def FormFields(self) -> FormFields:
        """ Get: FormFields(self: _Document) -> FormFields """
        ...

    @property
    def FormsDesign(self) -> bool:
        """ Get: FormsDesign(self: _Document) -> bool """
        ...

    @property
    def Frames(self) -> Frames:
        """ Get: Frames(self: _Document) -> Frames """
        ...

    @property
    def Frameset(self) -> Frameset:
        """ Get: Frameset(self: _Document) -> Frameset """
        ...

    @property
    def FullName(self) -> str:
        """ Get: FullName(self: _Document) -> str """
        ...

    @property
    def GrammarChecked(self) -> bool:
        """
        Get: GrammarChecked(self: _Document) -> bool
        Set: GrammarChecked(self: _Document) = value
        """
        ...

    @property
    def GrammaticalErrors(self) -> ProofreadingErrors:
        """ Get: GrammaticalErrors(self: _Document) -> ProofreadingErrors """
        ...

    @property
    def GridDistanceHorizontal(self) -> Single:
        """
        Get: GridDistanceHorizontal(self: _Document) -> Single
        Set: GridDistanceHorizontal(self: _Document) = value
        """
        ...

    @property
    def GridDistanceVertical(self) -> Single:
        """
        Get: GridDistanceVertical(self: _Document) -> Single
        Set: GridDistanceVertical(self: _Document) = value
        """
        ...

    @property
    def GridOriginFromMargin(self) -> bool:
        """
        Get: GridOriginFromMargin(self: _Document) -> bool
        Set: GridOriginFromMargin(self: _Document) = value
        """
        ...

    @property
    def GridOriginHorizontal(self) -> Single:
        """
        Get: GridOriginHorizontal(self: _Document) -> Single
        Set: GridOriginHorizontal(self: _Document) = value
        """
        ...

    @property
    def GridOriginVertical(self) -> Single:
        """
        Get: GridOriginVertical(self: _Document) -> Single
        Set: GridOriginVertical(self: _Document) = value
        """
        ...

    @property
    def GridSpaceBetweenHorizontalLines(self) -> int:
        """
        Get: GridSpaceBetweenHorizontalLines(self: _Document) -> int
        Set: GridSpaceBetweenHorizontalLines(self: _Document) = value
        """
        ...

    @property
    def GridSpaceBetweenVerticalLines(self) -> int:
        """
        Get: GridSpaceBetweenVerticalLines(self: _Document) -> int
        Set: GridSpaceBetweenVerticalLines(self: _Document) = value
        """
        ...

    @property
    def HasMailer(self) -> bool:
        """
        Get: HasMailer(self: _Document) -> bool
        Set: HasMailer(self: _Document) = value
        """
        ...

    @property
    def HasPassword(self) -> bool:
        """ Get: HasPassword(self: _Document) -> bool """
        ...

    @property
    def HasRoutingSlip(self) -> bool:
        """
        Get: HasRoutingSlip(self: _Document) -> bool
        Set: HasRoutingSlip(self: _Document) = value
        """
        ...

    @property
    def HasVBProject(self) -> bool:
        """ Get: HasVBProject(self: _Document) -> bool """
        ...

    @property
    def HTMLDivisions(self) -> HTMLDivisions:
        """ Get: HTMLDivisions(self: _Document) -> HTMLDivisions """
        ...

    @property
    def HTMLProject(self): # -> HTMLProject
        """ Get: HTMLProject(self: _Document) -> HTMLProject """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: _Document) -> Hyperlinks """
        ...

    @property
    def HyphenateCaps(self) -> bool:
        """
        Get: HyphenateCaps(self: _Document) -> bool
        Set: HyphenateCaps(self: _Document) = value
        """
        ...

    @property
    def HyphenationZone(self) -> int:
        """
        Get: HyphenationZone(self: _Document) -> int
        Set: HyphenationZone(self: _Document) = value
        """
        ...

    @property
    def Indexes(self) -> Indexes:
        """ Get: Indexes(self: _Document) -> Indexes """
        ...

    @property
    def InlineShapes(self) -> InlineShapes:
        """ Get: InlineShapes(self: _Document) -> InlineShapes """
        ...

    @property
    def IsInAutosave(self) -> bool:
        """ Get: IsInAutosave(self: _Document) -> bool """
        ...

    @property
    def IsMasterDocument(self) -> bool:
        """ Get: IsMasterDocument(self: _Document) -> bool """
        ...

    @property
    def IsSubdocument(self) -> bool:
        """ Get: IsSubdocument(self: _Document) -> bool """
        ...

    @property
    def JustificationMode(self) -> WdJustificationMode:
        """
        Get: JustificationMode(self: _Document) -> WdJustificationMode
        Set: JustificationMode(self: _Document) = value
        """
        ...

    @property
    def KerningByAlgorithm(self) -> bool:
        """
        Get: KerningByAlgorithm(self: _Document) -> bool
        Set: KerningByAlgorithm(self: _Document) = value
        """
        ...

    @property
    def Kind(self) -> WdDocumentKind:
        """
        Get: Kind(self: _Document) -> WdDocumentKind
        Set: Kind(self: _Document) = value
        """
        ...

    @property
    def LanguageDetected(self) -> bool:
        """
        Get: LanguageDetected(self: _Document) -> bool
        Set: LanguageDetected(self: _Document) = value
        """
        ...

    @property
    def ListParagraphs(self) -> ListParagraphs:
        """ Get: ListParagraphs(self: _Document) -> ListParagraphs """
        ...

    @property
    def Lists(self) -> Lists:
        """ Get: Lists(self: _Document) -> Lists """
        ...

    @property
    def ListTemplates(self) -> ListTemplates:
        """ Get: ListTemplates(self: _Document) -> ListTemplates """
        ...

    @property
    def LockQuickStyleSet(self) -> bool:
        """
        Get: LockQuickStyleSet(self: _Document) -> bool
        Set: LockQuickStyleSet(self: _Document) = value
        """
        ...

    @property
    def LockTheme(self) -> bool:
        """
        Get: LockTheme(self: _Document) -> bool
        Set: LockTheme(self: _Document) = value
        """
        ...

    @property
    def MailEnvelope(self): # -> MsoEnvelope
        """ Get: MailEnvelope(self: _Document) -> MsoEnvelope """
        ...

    @property
    def Mailer(self) -> Mailer:
        """ Get: Mailer(self: _Document) -> Mailer """
        ...

    @property
    def MailMerge(self) -> MailMerge:
        """ Get: MailMerge(self: _Document) -> MailMerge """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _Document) -> str """
        ...

    @property
    def NoLineBreakAfter(self) -> str:
        """
        Get: NoLineBreakAfter(self: _Document) -> str
        Set: NoLineBreakAfter(self: _Document) = value
        """
        ...

    @property
    def NoLineBreakBefore(self) -> str:
        """
        Get: NoLineBreakBefore(self: _Document) -> str
        Set: NoLineBreakBefore(self: _Document) = value
        """
        ...

    @property
    def OMathBreakBin(self) -> WdOMathBreakBin:
        """
        Get: OMathBreakBin(self: _Document) -> WdOMathBreakBin
        Set: OMathBreakBin(self: _Document) = value
        """
        ...

    @property
    def OMathBreakSub(self) -> WdOMathBreakSub:
        """
        Get: OMathBreakSub(self: _Document) -> WdOMathBreakSub
        Set: OMathBreakSub(self: _Document) = value
        """
        ...

    @property
    def OMathFontName(self) -> str:
        """
        Get: OMathFontName(self: _Document) -> str
        Set: OMathFontName(self: _Document) = value
        """
        ...

    @property
    def OMathIntSubSupLim(self) -> bool:
        """
        Get: OMathIntSubSupLim(self: _Document) -> bool
        Set: OMathIntSubSupLim(self: _Document) = value
        """
        ...

    @property
    def OMathJc(self) -> WdOMathJc:
        """
        Get: OMathJc(self: _Document) -> WdOMathJc
        Set: OMathJc(self: _Document) = value
        """
        ...

    @property
    def OMathLeftMargin(self) -> Single:
        """
        Get: OMathLeftMargin(self: _Document) -> Single
        Set: OMathLeftMargin(self: _Document) = value
        """
        ...

    @property
    def OMathNarySupSubLim(self) -> bool:
        """
        Get: OMathNarySupSubLim(self: _Document) -> bool
        Set: OMathNarySupSubLim(self: _Document) = value
        """
        ...

    @property
    def OMathRightMargin(self) -> Single:
        """
        Get: OMathRightMargin(self: _Document) -> Single
        Set: OMathRightMargin(self: _Document) = value
        """
        ...

    @property
    def OMaths(self) -> OMaths:
        """ Get: OMaths(self: _Document) -> OMaths """
        ...

    @property
    def OMathSmallFrac(self) -> bool:
        """
        Get: OMathSmallFrac(self: _Document) -> bool
        Set: OMathSmallFrac(self: _Document) = value
        """
        ...

    @property
    def OMathWrap(self) -> Single:
        """
        Get: OMathWrap(self: _Document) -> Single
        Set: OMathWrap(self: _Document) = value
        """
        ...

    @property
    def OpenEncoding(self): # -> MsoEncoding
        """ Get: OpenEncoding(self: _Document) -> MsoEncoding """
        ...

    @property
    def OptimizeForWord97(self) -> bool:
        """
        Get: OptimizeForWord97(self: _Document) -> bool
        Set: OptimizeForWord97(self: _Document) = value
        """
        ...

    @property
    def OriginalDocumentTitle(self) -> str:
        """ Get: OriginalDocumentTitle(self: _Document) -> str """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """
        Get: PageSetup(self: _Document) -> PageSetup
        Set: PageSetup(self: _Document) = value
        """
        ...

    @property
    def Paragraphs(self) -> Paragraphs:
        """ Get: Paragraphs(self: _Document) -> Paragraphs """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Document) -> object """
        ...

    @property
    def Password(self): # -> 
        """ Set: Password(self: _Document) = value """
        ...

    @property
    def PasswordEncryptionAlgorithm(self) -> str:
        """ Get: PasswordEncryptionAlgorithm(self: _Document) -> str """
        ...

    @property
    def PasswordEncryptionFileProperties(self) -> bool:
        """ Get: PasswordEncryptionFileProperties(self: _Document) -> bool """
        ...

    @property
    def PasswordEncryptionKeyLength(self) -> int:
        """ Get: PasswordEncryptionKeyLength(self: _Document) -> int """
        ...

    @property
    def PasswordEncryptionProvider(self) -> str:
        """ Get: PasswordEncryptionProvider(self: _Document) -> str """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: _Document) -> str """
        ...

    @property
    def Permission(self): # -> Permission
        """ Get: Permission(self: _Document) -> Permission """
        ...

    @property
    def PrintFormsData(self) -> bool:
        """
        Get: PrintFormsData(self: _Document) -> bool
        Set: PrintFormsData(self: _Document) = value
        """
        ...

    @property
    def PrintFractionalWidths(self) -> bool:
        """
        Get: PrintFractionalWidths(self: _Document) -> bool
        Set: PrintFractionalWidths(self: _Document) = value
        """
        ...

    @property
    def PrintPostScriptOverText(self) -> bool:
        """
        Get: PrintPostScriptOverText(self: _Document) -> bool
        Set: PrintPostScriptOverText(self: _Document) = value
        """
        ...

    @property
    def PrintRevisions(self) -> bool:
        """
        Get: PrintRevisions(self: _Document) -> bool
        Set: PrintRevisions(self: _Document) = value
        """
        ...

    @property
    def ProtectionType(self) -> WdProtectionType:
        """ Get: ProtectionType(self: _Document) -> WdProtectionType """
        ...

    @property
    def ReadabilityStatistics(self) -> ReadabilityStatistics:
        """ Get: ReadabilityStatistics(self: _Document) -> ReadabilityStatistics """
        ...

    @property
    def ReadingLayoutSizeX(self) -> int:
        """
        Get: ReadingLayoutSizeX(self: _Document) -> int
        Set: ReadingLayoutSizeX(self: _Document) = value
        """
        ...

    @property
    def ReadingLayoutSizeY(self) -> int:
        """
        Get: ReadingLayoutSizeY(self: _Document) -> int
        Set: ReadingLayoutSizeY(self: _Document) = value
        """
        ...

    @property
    def ReadingModeLayoutFrozen(self) -> bool:
        """
        Get: ReadingModeLayoutFrozen(self: _Document) -> bool
        Set: ReadingModeLayoutFrozen(self: _Document) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """ Get: ReadOnly(self: _Document) -> bool """
        ...

    @property
    def ReadOnlyRecommended(self) -> bool:
        """
        Get: ReadOnlyRecommended(self: _Document) -> bool
        Set: ReadOnlyRecommended(self: _Document) = value
        """
        ...

    @property
    def RemoveDateAndTime(self) -> bool:
        """
        Get: RemoveDateAndTime(self: _Document) -> bool
        Set: RemoveDateAndTime(self: _Document) = value
        """
        ...

    @property
    def RemovePersonalInformation(self) -> bool:
        """
        Get: RemovePersonalInformation(self: _Document) -> bool
        Set: RemovePersonalInformation(self: _Document) = value
        """
        ...

    @property
    def Research(self) -> Research:
        """ Get: Research(self: _Document) -> Research """
        ...

    @property
    def RevisedDocumentTitle(self) -> str:
        """ Get: RevisedDocumentTitle(self: _Document) -> str """
        ...

    @property
    def Revisions(self) -> Revisions:
        """ Get: Revisions(self: _Document) -> Revisions """
        ...

    @property
    def Routed(self) -> bool:
        """ Get: Routed(self: _Document) -> bool """
        ...

    @property
    def RoutingSlip(self) -> RoutingSlip:
        """ Get: RoutingSlip(self: _Document) -> RoutingSlip """
        ...

    @property
    def Saved(self) -> bool:
        """
        Get: Saved(self: _Document) -> bool
        Set: Saved(self: _Document) = value
        """
        ...

    @property
    def SaveEncoding(self): # -> MsoEncoding
        """
        Get: SaveEncoding(self: _Document) -> MsoEncoding
        Set: SaveEncoding(self: _Document) = value
        """
        ...

    @property
    def SaveFormat(self) -> int:
        """ Get: SaveFormat(self: _Document) -> int """
        ...

    @property
    def SaveFormsData(self) -> bool:
        """
        Get: SaveFormsData(self: _Document) -> bool
        Set: SaveFormsData(self: _Document) = value
        """
        ...

    @property
    def SaveSubsetFonts(self) -> bool:
        """
        Get: SaveSubsetFonts(self: _Document) -> bool
        Set: SaveSubsetFonts(self: _Document) = value
        """
        ...

    @property
    def Scripts(self): # -> Scripts
        """ Get: Scripts(self: _Document) -> Scripts """
        ...

    @property
    def Sections(self) -> Sections:
        """ Get: Sections(self: _Document) -> Sections """
        ...

    @property
    def Sentences(self) -> Sentences:
        """ Get: Sentences(self: _Document) -> Sentences """
        ...

    @property
    def ServerPolicy(self): # -> ServerPolicy
        """ Get: ServerPolicy(self: _Document) -> ServerPolicy """
        ...

    @property
    def Shapes(self) -> Shapes:
        """ Get: Shapes(self: _Document) -> Shapes """
        ...

    @property
    def SharedWorkspace(self): # -> SharedWorkspace
        """ Get: SharedWorkspace(self: _Document) -> SharedWorkspace """
        ...

    @property
    def ShowGrammaticalErrors(self) -> bool:
        """
        Get: ShowGrammaticalErrors(self: _Document) -> bool
        Set: ShowGrammaticalErrors(self: _Document) = value
        """
        ...

    @property
    def ShowRevisions(self) -> bool:
        """
        Get: ShowRevisions(self: _Document) -> bool
        Set: ShowRevisions(self: _Document) = value
        """
        ...

    @property
    def ShowSpellingErrors(self) -> bool:
        """
        Get: ShowSpellingErrors(self: _Document) -> bool
        Set: ShowSpellingErrors(self: _Document) = value
        """
        ...

    @property
    def ShowSummary(self) -> bool:
        """
        Get: ShowSummary(self: _Document) -> bool
        Set: ShowSummary(self: _Document) = value
        """
        ...

    @property
    def Signatures(self): # -> SignatureSet
        """ Get: Signatures(self: _Document) -> SignatureSet """
        ...

    @property
    def SmartDocument(self): # -> SmartDocument
        """ Get: SmartDocument(self: _Document) -> SmartDocument """
        ...

    @property
    def SmartTags(self) -> SmartTags:
        """ Get: SmartTags(self: _Document) -> SmartTags """
        ...

    @property
    def SmartTagsAsXMLProps(self) -> bool:
        """
        Get: SmartTagsAsXMLProps(self: _Document) -> bool
        Set: SmartTagsAsXMLProps(self: _Document) = value
        """
        ...

    @property
    def SnapToGrid(self) -> bool:
        """
        Get: SnapToGrid(self: _Document) -> bool
        Set: SnapToGrid(self: _Document) = value
        """
        ...

    @property
    def SnapToShapes(self) -> bool:
        """
        Get: SnapToShapes(self: _Document) -> bool
        Set: SnapToShapes(self: _Document) = value
        """
        ...

    @property
    def SpellingChecked(self) -> bool:
        """
        Get: SpellingChecked(self: _Document) -> bool
        Set: SpellingChecked(self: _Document) = value
        """
        ...

    @property
    def SpellingErrors(self) -> ProofreadingErrors:
        """ Get: SpellingErrors(self: _Document) -> ProofreadingErrors """
        ...

    @property
    def StoryRanges(self) -> StoryRanges:
        """ Get: StoryRanges(self: _Document) -> StoryRanges """
        ...

    @property
    def Styles(self) -> Styles:
        """ Get: Styles(self: _Document) -> Styles """
        ...

    @property
    def StyleSheets(self) -> StyleSheets:
        """ Get: StyleSheets(self: _Document) -> StyleSheets """
        ...

    @property
    def StyleSortMethod(self) -> WdStyleSort:
        """
        Get: StyleSortMethod(self: _Document) -> WdStyleSort
        Set: StyleSortMethod(self: _Document) = value
        """
        ...

    @property
    def Subdocuments(self) -> Subdocuments:
        """ Get: Subdocuments(self: _Document) -> Subdocuments """
        ...

    @property
    def SummaryLength(self) -> int:
        """
        Get: SummaryLength(self: _Document) -> int
        Set: SummaryLength(self: _Document) = value
        """
        ...

    @property
    def SummaryViewMode(self) -> WdSummaryMode:
        """
        Get: SummaryViewMode(self: _Document) -> WdSummaryMode
        Set: SummaryViewMode(self: _Document) = value
        """
        ...

    @property
    def Sync(self): # -> Sync
        """ Get: Sync(self: _Document) -> Sync """
        ...

    @property
    def Tables(self) -> Tables:
        """ Get: Tables(self: _Document) -> Tables """
        ...

    @property
    def TablesOfAuthorities(self) -> TablesOfAuthorities:
        """ Get: TablesOfAuthorities(self: _Document) -> TablesOfAuthorities """
        ...

    @property
    def TablesOfAuthoritiesCategories(self) -> TablesOfAuthoritiesCategories:
        """ Get: TablesOfAuthoritiesCategories(self: _Document) -> TablesOfAuthoritiesCategories """
        ...

    @property
    def TablesOfContents(self) -> TablesOfContents:
        """ Get: TablesOfContents(self: _Document) -> TablesOfContents """
        ...

    @property
    def TablesOfFigures(self) -> TablesOfFigures:
        """ Get: TablesOfFigures(self: _Document) -> TablesOfFigures """
        ...

    @property
    def TextEncoding(self): # -> MsoEncoding
        """
        Get: TextEncoding(self: _Document) -> MsoEncoding
        Set: TextEncoding(self: _Document) = value
        """
        ...

    @property
    def TextLineEnding(self) -> WdLineEndingType:
        """
        Get: TextLineEnding(self: _Document) -> WdLineEndingType
        Set: TextLineEnding(self: _Document) = value
        """
        ...

    @property
    def TrackFormatting(self) -> bool:
        """
        Get: TrackFormatting(self: _Document) -> bool
        Set: TrackFormatting(self: _Document) = value
        """
        ...

    @property
    def TrackMoves(self) -> bool:
        """
        Get: TrackMoves(self: _Document) -> bool
        Set: TrackMoves(self: _Document) = value
        """
        ...

    @property
    def TrackRevisions(self) -> bool:
        """
        Get: TrackRevisions(self: _Document) -> bool
        Set: TrackRevisions(self: _Document) = value
        """
        ...

    @property
    def Type(self) -> WdDocumentType:
        """ Get: Type(self: _Document) -> WdDocumentType """
        ...

    @property
    def UpdateStylesOnOpen(self) -> bool:
        """
        Get: UpdateStylesOnOpen(self: _Document) -> bool
        Set: UpdateStylesOnOpen(self: _Document) = value
        """
        ...

    @property
    def UseMathDefaults(self) -> bool:
        """
        Get: UseMathDefaults(self: _Document) -> bool
        Set: UseMathDefaults(self: _Document) = value
        """
        ...

    @property
    def UserControl(self) -> bool:
        """
        Get: UserControl(self: _Document) -> bool
        Set: UserControl(self: _Document) = value
        """
        ...

    @property
    def Variables(self) -> Variables:
        """ Get: Variables(self: _Document) -> Variables """
        ...

    @property
    def VBASigned(self) -> bool:
        """ Get: VBASigned(self: _Document) -> bool """
        ...

    @property
    def VBProject(self): # -> VBProject
        """ Get: VBProject(self: _Document) -> VBProject """
        ...

    @property
    def Versions(self) -> Versions:
        """ Get: Versions(self: _Document) -> Versions """
        ...

    @property
    def WebOptions(self) -> WebOptions:
        """ Get: WebOptions(self: _Document) -> WebOptions """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: _Document) -> Windows """
        ...

    @property
    def WordOpenXML(self) -> str:
        """ Get: WordOpenXML(self: _Document) -> str """
        ...

    @property
    def Words(self) -> Words:
        """ Get: Words(self: _Document) -> Words """
        ...

    @property
    def WritePassword(self): # -> 
        """ Set: WritePassword(self: _Document) = value """
        ...

    @property
    def WriteReserved(self) -> bool:
        """ Get: WriteReserved(self: _Document) -> bool """
        ...

    @property
    def XMLHideNamespaces(self) -> bool:
        """
        Get: XMLHideNamespaces(self: _Document) -> bool
        Set: XMLHideNamespaces(self: _Document) = value
        """
        ...

    @property
    def XMLNodes(self) -> XMLNodes:
        """ Get: XMLNodes(self: _Document) -> XMLNodes """
        ...

    @property
    def XMLSaveDataOnly(self) -> bool:
        """
        Get: XMLSaveDataOnly(self: _Document) -> bool
        Set: XMLSaveDataOnly(self: _Document) = value
        """
        ...

    @property
    def XMLSaveThroughXSLT(self) -> str:
        """
        Get: XMLSaveThroughXSLT(self: _Document) -> str
        Set: XMLSaveThroughXSLT(self: _Document) = value
        """
        ...

    @property
    def XMLSchemaReferences(self) -> XMLSchemaReferences:
        """ Get: XMLSchemaReferences(self: _Document) -> XMLSchemaReferences """
        ...

    @property
    def XMLSchemaViolations(self) -> XMLNodes:
        """ Get: XMLSchemaViolations(self: _Document) -> XMLNodes """
        ...

    @property
    def XMLShowAdvancedErrors(self) -> bool:
        """
        Get: XMLShowAdvancedErrors(self: _Document) -> bool
        Set: XMLShowAdvancedErrors(self: _Document) = value
        """
        ...

    @property
    def XMLUseXSLTWhenSaving(self) -> bool:
        """
        Get: XMLUseXSLTWhenSaving(self: _Document) -> bool
        Set: XMLUseXSLTWhenSaving(self: _Document) = value
        """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: _Document) -> str
        Set: _CodeName(self: _Document) = value
        """
        ...


    def AcceptAllRevisions(self): # -> 
        """ AcceptAllRevisions(self: _Document) """
        ...

    def AcceptAllRevisionsShown(self): # -> 
        """ AcceptAllRevisionsShown(self: _Document) """
        ...

    def Activate(self): # -> 
        """ Activate(self: _Document) """
        ...

    def AddDocumentWorkspaceHeader(self, RichFormat:bool, Url:str, Title:str, Description:str, ID:str): # -> 
        """ AddDocumentWorkspaceHeader(self: _Document, RichFormat: bool, Url: str, Title: str, Description: str, ID: str) """
        ...

    def AddMeetingWorkspaceHeader(self, SkipIfAbsent:bool, Url:str, Title:str, Description:str, ID:str): # -> 
        """ AddMeetingWorkspaceHeader(self: _Document, SkipIfAbsent: bool, Url: str, Title: str, Description: str, ID: str) """
        ...

    def AddToFavorites(self): # -> 
        """ AddToFavorites(self: _Document) """
        ...

    def ApplyDocumentTheme(self, FileName:str): # -> 
        """ ApplyDocumentTheme(self: _Document, FileName: str) """
        ...

    def ApplyQuickStyleSet(self, Name:str): # -> 
        """ ApplyQuickStyleSet(self: _Document, Name: str) """
        ...

    def ApplyQuickStyleSet2(self, Style:object) -> object:
        """ ApplyQuickStyleSet2(self: _Document, Style: object) -> object """
        ...

    def ApplyTheme(self, Name:str): # -> 
        """ ApplyTheme(self: _Document, Name: str) """
        ...

    def AutoFormat(self): # -> 
        """ AutoFormat(self: _Document) """
        ...

    def AutoSummarize(self, Length:object, Mode:object, UpdateProperties:object) -> Tuple_[Range, object, object, object]:
        """ AutoSummarize(self: _Document, Length: object, Mode: object, UpdateProperties: object) -> (Range, object, object, object) """
        ...

    def CanCheckin(self) -> bool:
        """ CanCheckin(self: _Document) -> bool """
        ...

    def CheckConsistency(self): # -> 
        """ CheckConsistency(self: _Document) """
        ...

    def CheckGrammar(self): # -> 
        """ CheckGrammar(self: _Document) """
        ...

    def CheckIn(self, SaveChanges:bool, Comments:object, MakePublic:bool) -> object:
        """ CheckIn(self: _Document, SaveChanges: bool, Comments: object, MakePublic: bool) -> object """
        ...

    def CheckInWithVersion(self, SaveChanges:bool, Comments:object, MakePublic:bool, VersionType:object) -> Tuple_[object, object]:
        """ CheckInWithVersion(self: _Document, SaveChanges: bool, Comments: object, MakePublic: bool, VersionType: object) -> (object, object) """
        ...

    def CheckNewSmartTags(self): # -> 
        """ CheckNewSmartTags(self: _Document) """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object]:
        """ CheckSpelling(self: _Document, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Close(self, SaveChanges:object, OriginalFormat:object, RouteDocument:object) -> Tuple_[object, object, object]:
        """ Close(self: _Document, SaveChanges: object, OriginalFormat: object, RouteDocument: object) -> (object, object, object) """
        ...

    def ClosePrintPreview(self): # -> 
        """ ClosePrintPreview(self: _Document) """
        ...

    def Compare(self, Name:str, AuthorName:object, CompareTarget:object, DetectFormatChanges:object, IgnoreAllComparisonWarnings:object, AddToRecentFiles:object, RemovePersonalInformation:object, RemoveDateAndTime:object) -> Tuple_[object, object, object, object, object, object, object]:
        """ Compare(self: _Document, Name: str, AuthorName: object, CompareTarget: object, DetectFormatChanges: object, IgnoreAllComparisonWarnings: object, AddToRecentFiles: object, RemovePersonalInformation: object, RemoveDateAndTime: object) -> (object, object, object, object, object, object, object) """
        ...

    def Compare2000(self, Name:str): # -> 
        """ Compare2000(self: _Document, Name: str) """
        ...

    def Compare2002(self, Name:str, AuthorName:object, CompareTarget:object, DetectFormatChanges:object, IgnoreAllComparisonWarnings:object, AddToRecentFiles:object) -> Tuple_[object, object, object, object, object]:
        """ Compare2002(self: _Document, Name: str, AuthorName: object, CompareTarget: object, DetectFormatChanges: object, IgnoreAllComparisonWarnings: object, AddToRecentFiles: object) -> (object, object, object, object, object) """
        ...

    def ComputeStatistics(self, Statistic:WdStatistic, IncludeFootnotesAndEndnotes:object) -> Tuple_[int, object]:
        """ ComputeStatistics(self: _Document, Statistic: WdStatistic, IncludeFootnotesAndEndnotes: object) -> (int, object) """
        ...

    def Convert(self): # -> 
        """ Convert(self: _Document) """
        ...

    def ConvertAutoHyphens(self): # -> 
        """ ConvertAutoHyphens(self: _Document) """
        ...

    def ConvertNumbersToText(self, NumberType:object) -> object:
        """ ConvertNumbersToText(self: _Document, NumberType: object) -> object """
        ...

    def ConvertVietDoc(self, CodePageOrigin:int): # -> 
        """ ConvertVietDoc(self: _Document, CodePageOrigin: int) """
        ...

    def CopyStylesFromTemplate(self, Template:str): # -> 
        """ CopyStylesFromTemplate(self: _Document, Template: str) """
        ...

    def CountNumberedItems(self, NumberType:object, Level:object) -> Tuple_[int, object, object]:
        """ CountNumberedItems(self: _Document, NumberType: object, Level: object) -> (int, object, object) """
        ...

    def CreateLetterContent(self, DateFormat:str, IncludeHeaderFooter:bool, PageDesign:str, LetterStyle:WdLetterStyle, Letterhead:bool, LetterheadLocation:WdLetterheadLocation, LetterheadSize:Single, RecipientName:str, RecipientAddress:str, Salutation:str, SalutationType:WdSalutationType, RecipientReference:str, MailingInstructions:str, AttentionLine:str, Subject:str, CCList:str, ReturnAddress:str, SenderName:str, Closing:str, SenderCompany:str, SenderJobTitle:str, SenderInitials:str, EnclosureNumber:int, InfoBlock:object, RecipientCode:object, RecipientGender:object, ReturnAddressShortForm:object, SenderCity:object, SenderCode:object, SenderGender:object, SenderReference:object) -> Tuple_[LetterContent, object, object, object, object, object, object, object, object]:
        """ CreateLetterContent(self: _Document, DateFormat: str, IncludeHeaderFooter: bool, PageDesign: str, LetterStyle: WdLetterStyle, Letterhead: bool, LetterheadLocation: WdLetterheadLocation, LetterheadSize: Single, RecipientName: str, RecipientAddress: str, Salutation: str, SalutationType: WdSalutationType, RecipientReference: str, MailingInstructions: str, AttentionLine: str, Subject: str, CCList: str, ReturnAddress: str, SenderName: str, Closing: str, SenderCompany: str, SenderJobTitle: str, SenderInitials: str, EnclosureNumber: int, InfoBlock: object, RecipientCode: object, RecipientGender: object, ReturnAddressShortForm: object, SenderCity: object, SenderCode: object, SenderGender: object, SenderReference: object) -> (LetterContent, object, object, object, object, object, object, object, object) """
        ...

    def DataForm(self): # -> 
        """ DataForm(self: _Document) """
        ...

    def DeleteAllComments(self): # -> 
        """ DeleteAllComments(self: _Document) """
        ...

    def DeleteAllCommentsShown(self): # -> 
        """ DeleteAllCommentsShown(self: _Document) """
        ...

    def DeleteAllEditableRanges(self, EditorID:object) -> object:
        """ DeleteAllEditableRanges(self: _Document, EditorID: object) -> object """
        ...

    def DeleteAllInkAnnotations(self): # -> 
        """ DeleteAllInkAnnotations(self: _Document) """
        ...

    def DetectLanguage(self): # -> 
        """ DetectLanguage(self: _Document) """
        ...

    def DowngradeDocument(self): # -> 
        """ DowngradeDocument(self: _Document) """
        ...

    def Dummy1(self): # -> 
        """ Dummy1(self: _Document) """
        ...

    def Dummy2(self): # -> 
        """ Dummy2(self: _Document) """
        ...

    def Dummy3(self): # -> 
        """ Dummy3(self: _Document) """
        ...

    def Dummy4(self): # -> 
        """ Dummy4(self: _Document) """
        ...

    def EditionOptions(self, Type:WdEditionType, Option:WdEditionOption, Name:str, Format:object) -> object:
        """ EditionOptions(self: _Document, Type: WdEditionType, Option: WdEditionOption, Name: str, Format: object) -> object """
        ...

    def EndReview(self): # -> 
        """ EndReview(self: _Document) """
        ...

    def ExportAsFixedFormat(self, OutputFileName:str, ExportFormat:WdExportFormat, OpenAfterExport:bool, OptimizeFor:WdExportOptimizeFor, Range:WdExportRange, From:int, To:int, Item:WdExportItem, IncludeDocProps:bool, KeepIRM:bool, CreateBookmarks:WdExportCreateBookmarks, DocStructureTags:bool, BitmapMissingFonts:bool, UseISO19005_1:bool, FixedFormatExtClassPtr:object) -> object:
        """ ExportAsFixedFormat(self: _Document, OutputFileName: str, ExportFormat: WdExportFormat, OpenAfterExport: bool, OptimizeFor: WdExportOptimizeFor, Range: WdExportRange, From: int, To: int, Item: WdExportItem, IncludeDocProps: bool, KeepIRM: bool, CreateBookmarks: WdExportCreateBookmarks, DocStructureTags: bool, BitmapMissingFonts: bool, UseISO19005_1: bool, FixedFormatExtClassPtr: object) -> object """
        ...

    def FitToPages(self): # -> 
        """ FitToPages(self: _Document) """
        ...

    def FollowHyperlink(self, Address:object, SubAddress:object, NewWindow:object, AddHistory:object, ExtraInfo:object, Method:object, HeaderInfo:object) -> Tuple_[object, object, object, object, object, object, object]:
        """ FollowHyperlink(self: _Document, Address: object, SubAddress: object, NewWindow: object, AddHistory: object, ExtraInfo: object, Method: object, HeaderInfo: object) -> (object, object, object, object, object, object, object) """
        ...

    def ForwardMailer(self): # -> 
        """ ForwardMailer(self: _Document) """
        ...

    def FreezeLayout(self): # -> 
        """ FreezeLayout(self: _Document) """
        ...

    def GetCrossReferenceItems(self, ReferenceType:object) -> Tuple_[object, object]:
        """ GetCrossReferenceItems(self: _Document, ReferenceType: object) -> (object, object) """
        ...

    def GetLetterContent(self) -> LetterContent:
        """ GetLetterContent(self: _Document) -> LetterContent """
        ...

    def GetWorkflowTasks(self): # -> WorkflowTasks
        """ GetWorkflowTasks(self: _Document) -> WorkflowTasks """
        ...

    def GetWorkflowTemplates(self): # -> WorkflowTemplates
        """ GetWorkflowTemplates(self: _Document) -> WorkflowTemplates """
        ...

    def GoTo(self, What:object, Which:object, Count:object, Name:object) -> Tuple_[Range, object, object, object, object]:
        """ GoTo(self: _Document, What: object, Which: object, Count: object, Name: object) -> (Range, object, object, object, object) """
        ...

    def LockServerFile(self): # -> 
        """ LockServerFile(self: _Document) """
        ...

    def MakeCompatibilityDefault(self): # -> 
        """ MakeCompatibilityDefault(self: _Document) """
        ...

    def ManualHyphenation(self): # -> 
        """ ManualHyphenation(self: _Document) """
        ...

    def Merge(self, FileName:str, MergeTarget:object, DetectFormatChanges:object, UseFormattingFrom:object, AddToRecentFiles:object) -> Tuple_[object, object, object, object]:
        """ Merge(self: _Document, FileName: str, MergeTarget: object, DetectFormatChanges: object, UseFormattingFrom: object, AddToRecentFiles: object) -> (object, object, object, object) """
        ...

    def Merge2000(self, FileName:str): # -> 
        """ Merge2000(self: _Document, FileName: str) """
        ...

    def Post(self): # -> 
        """ Post(self: _Document) """
        ...

    def PresentIt(self): # -> 
        """ PresentIt(self: _Document) """
        ...

    def PrintOut(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, ActivePrinterMacGX:object, ManualDuplexPrint:object, PrintZoomColumn:object, PrintZoomRow:object, PrintZoomPaperWidth:object, PrintZoomPaperHeight:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut(self: _Document, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, ActivePrinterMacGX: object, ManualDuplexPrint: object, PrintZoomColumn: object, PrintZoomRow: object, PrintZoomPaperWidth: object, PrintZoomPaperHeight: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOut2000(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, ActivePrinterMacGX:object, ManualDuplexPrint:object, PrintZoomColumn:object, PrintZoomRow:object, PrintZoomPaperWidth:object, PrintZoomPaperHeight:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut2000(self: _Document, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, ActivePrinterMacGX: object, ManualDuplexPrint: object, PrintZoomColumn: object, PrintZoomRow: object, PrintZoomPaperWidth: object, PrintZoomPaperHeight: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOutOld(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, ActivePrinterMacGX:object, ManualDuplexPrint:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOutOld(self: _Document, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, ActivePrinterMacGX: object, ManualDuplexPrint: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintPreview(self): # -> 
        """ PrintPreview(self: _Document) """
        ...

    def Protect(self, Type:WdProtectionType, NoReset:object, Password:object, UseIRM:object, EnforceStyleLock:object) -> Tuple_[object, object, object, object]:
        """ Protect(self: _Document, Type: WdProtectionType, NoReset: object, Password: object, UseIRM: object, EnforceStyleLock: object) -> (object, object, object, object) """
        ...

    def Protect2002(self, Type:WdProtectionType, NoReset:object, Password:object) -> Tuple_[object, object]:
        """ Protect2002(self: _Document, Type: WdProtectionType, NoReset: object, Password: object) -> (object, object) """
        ...

    def Range(self, Start:object, End:object) -> Tuple_[Range, object, object]:
        """ Range(self: _Document, Start: object, End: object) -> (Range, object, object) """
        ...

    def RecheckSmartTags(self): # -> 
        """ RecheckSmartTags(self: _Document) """
        ...

    def Redo(self, Times:object) -> Tuple_[bool, object]:
        """ Redo(self: _Document, Times: object) -> (bool, object) """
        ...

    def RejectAllRevisions(self): # -> 
        """ RejectAllRevisions(self: _Document) """
        ...

    def RejectAllRevisionsShown(self): # -> 
        """ RejectAllRevisionsShown(self: _Document) """
        ...

    def Reload(self): # -> 
        """ Reload(self: _Document) """
        ...

    def ReloadAs(self, Encoding): # ->  # Not found arg types: {'Encoding': 'MsoEncoding'}
        """ ReloadAs(self: _Document, Encoding: MsoEncoding) """
        ...

    def RemoveDocumentInformation(self, RemoveDocInfoType:WdRemoveDocInfoType): # -> 
        """ RemoveDocumentInformation(self: _Document, RemoveDocInfoType: WdRemoveDocInfoType) """
        ...

    def RemoveDocumentWorkspaceHeader(self, ID:str): # -> 
        """ RemoveDocumentWorkspaceHeader(self: _Document, ID: str) """
        ...

    def RemoveLockedStyles(self): # -> 
        """ RemoveLockedStyles(self: _Document) """
        ...

    def RemoveNumbers(self, NumberType:object) -> object:
        """ RemoveNumbers(self: _Document, NumberType: object) -> object """
        ...

    def RemoveSmartTags(self): # -> 
        """ RemoveSmartTags(self: _Document) """
        ...

    def RemoveTheme(self): # -> 
        """ RemoveTheme(self: _Document) """
        ...

    def Repaginate(self): # -> 
        """ Repaginate(self: _Document) """
        ...

    def Reply(self): # -> 
        """ Reply(self: _Document) """
        ...

    def ReplyAll(self): # -> 
        """ ReplyAll(self: _Document) """
        ...

    def ReplyWithChanges(self, ShowMessage:object) -> object:
        """ ReplyWithChanges(self: _Document, ShowMessage: object) -> object """
        ...

    def ResetFormFields(self): # -> 
        """ ResetFormFields(self: _Document) """
        ...

    def ReturnToLastReadPosition(self) -> int:
        """ ReturnToLastReadPosition(self: _Document) -> int """
        ...

    def Route(self): # -> 
        """ Route(self: _Document) """
        ...

    def RunAutoMacro(self, Which:WdAutoMacros): # -> 
        """ RunAutoMacro(self: _Document, Which: WdAutoMacros) """
        ...

    def RunLetterWizard(self, LetterContent:object, WizardMode:object) -> Tuple_[object, object]:
        """ RunLetterWizard(self: _Document, LetterContent: object, WizardMode: object) -> (object, object) """
        ...

    def Save(self): # -> 
        """ Save(self: _Document) """
        ...

    def SaveAs(self, FileName:object, FileFormat:object, LockComments:object, Password:object, AddToRecentFiles:object, WritePassword:object, ReadOnlyRecommended:object, EmbedTrueTypeFonts:object, SaveNativePictureFormat:object, SaveFormsData:object, SaveAsAOCELetter:object, Encoding:object, InsertLineBreaks:object, AllowSubstitutions:object, LineEnding:object, AddBiDiMarks:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ SaveAs(self: _Document, FileName: object, FileFormat: object, LockComments: object, Password: object, AddToRecentFiles: object, WritePassword: object, ReadOnlyRecommended: object, EmbedTrueTypeFonts: object, SaveNativePictureFormat: object, SaveFormsData: object, SaveAsAOCELetter: object, Encoding: object, InsertLineBreaks: object, AllowSubstitutions: object, LineEnding: object, AddBiDiMarks: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def SaveAs2(self, FileName:object, FileFormat:object, LockComments:object, Password:object, AddToRecentFiles:object, WritePassword:object, ReadOnlyRecommended:object, EmbedTrueTypeFonts:object, SaveNativePictureFormat:object, SaveFormsData:object, SaveAsAOCELetter:object, Encoding:object, InsertLineBreaks:object, AllowSubstitutions:object, LineEnding:object, AddBiDiMarks:object, CompatibilityMode:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ SaveAs2(self: _Document, FileName: object, FileFormat: object, LockComments: object, Password: object, AddToRecentFiles: object, WritePassword: object, ReadOnlyRecommended: object, EmbedTrueTypeFonts: object, SaveNativePictureFormat: object, SaveFormsData: object, SaveAsAOCELetter: object, Encoding: object, InsertLineBreaks: object, AllowSubstitutions: object, LineEnding: object, AddBiDiMarks: object, CompatibilityMode: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def SaveAs2000(self, FileName:object, FileFormat:object, LockComments:object, Password:object, AddToRecentFiles:object, WritePassword:object, ReadOnlyRecommended:object, EmbedTrueTypeFonts:object, SaveNativePictureFormat:object, SaveFormsData:object, SaveAsAOCELetter:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object]:
        """ SaveAs2000(self: _Document, FileName: object, FileFormat: object, LockComments: object, Password: object, AddToRecentFiles: object, WritePassword: object, ReadOnlyRecommended: object, EmbedTrueTypeFonts: object, SaveNativePictureFormat: object, SaveFormsData: object, SaveAsAOCELetter: object) -> (object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def SaveAsQuickStyleSet(self, FileName:str): # -> 
        """ SaveAsQuickStyleSet(self: _Document, FileName: str) """
        ...

    def SaveCopyAs(self, FileName:object, FileFormat:object, LockComments:object, Password:object, AddToRecentFiles:object, WritePassword:object, ReadOnlyRecommended:object, EmbedTrueTypeFonts:object, SaveNativePictureFormat:object, SaveFormsData:object, SaveAsAOCELetter:object, Encoding:object, InsertLineBreaks:object, AllowSubstitutions:object, LineEnding:object, AddBiDiMarks:object, CompatibilityMode:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ SaveCopyAs(self: _Document, FileName: object, FileFormat: object, LockComments: object, Password: object, AddToRecentFiles: object, WritePassword: object, ReadOnlyRecommended: object, EmbedTrueTypeFonts: object, SaveNativePictureFormat: object, SaveFormsData: object, SaveAsAOCELetter: object, Encoding: object, InsertLineBreaks: object, AllowSubstitutions: object, LineEnding: object, AddBiDiMarks: object, CompatibilityMode: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def sblt(self, s:str): # -> 
        """ sblt(self: _Document, s: str) """
        ...

    def Select(self): # -> 
        """ Select(self: _Document) """
        ...

    def SelectAllEditableRanges(self, EditorID:object) -> object:
        """ SelectAllEditableRanges(self: _Document, EditorID: object) -> object """
        ...

    def SelectContentControlsByTag(self, Tag:str) -> ContentControls:
        """ SelectContentControlsByTag(self: _Document, Tag: str) -> ContentControls """
        ...

    def SelectContentControlsByTitle(self, Title:str) -> ContentControls:
        """ SelectContentControlsByTitle(self: _Document, Title: str) -> ContentControls """
        ...

    def SelectLinkedControls(self, Node) -> ContentControls: # Not found arg types: {'Node': 'CustomXMLNode'}
        """ SelectLinkedControls(self: _Document, Node: CustomXMLNode) -> ContentControls """
        ...

    def SelectNodes(self, XPath:str, PrefixMapping:str, FastSearchSkippingTextNodes:bool) -> XMLNodes:
        """ SelectNodes(self: _Document, XPath: str, PrefixMapping: str, FastSearchSkippingTextNodes: bool) -> XMLNodes """
        ...

    def SelectSingleNode(self, XPath:str, PrefixMapping:str, FastSearchSkippingTextNodes:bool) -> XMLNode:
        """ SelectSingleNode(self: _Document, XPath: str, PrefixMapping: str, FastSearchSkippingTextNodes: bool) -> XMLNode """
        ...

    def SelectUnlinkedControls(self, Stream) -> ContentControls: # Not found arg types: {'Stream': 'CustomXMLPart'}
        """ SelectUnlinkedControls(self: _Document, Stream: CustomXMLPart) -> ContentControls """
        ...

    def SendFax(self, Address:str, Subject:object) -> object:
        """ SendFax(self: _Document, Address: str, Subject: object) -> object """
        ...

    def SendFaxOverInternet(self, Recipients:object, Subject:object, ShowMessage:object) -> Tuple_[object, object, object]:
        """ SendFaxOverInternet(self: _Document, Recipients: object, Subject: object, ShowMessage: object) -> (object, object, object) """
        ...

    def SendForReview(self, Recipients:object, Subject:object, ShowMessage:object, IncludeAttachment:object) -> Tuple_[object, object, object, object]:
        """ SendForReview(self: _Document, Recipients: object, Subject: object, ShowMessage: object, IncludeAttachment: object) -> (object, object, object, object) """
        ...

    def SendMail(self): # -> 
        """ SendMail(self: _Document) """
        ...

    def SendMailer(self, FileFormat:object, Priority:object) -> Tuple_[object, object]:
        """ SendMailer(self: _Document, FileFormat: object, Priority: object) -> (object, object) """
        ...

    def SetCompatibilityMode(self, Mode:int): # -> 
        """ SetCompatibilityMode(self: _Document, Mode: int) """
        ...

    def SetDefaultTableStyle(self, Style:object, SetInTemplate:bool) -> object:
        """ SetDefaultTableStyle(self: _Document, Style: object, SetInTemplate: bool) -> object """
        ...

    def SetLetterContent(self, LetterContent:object) -> object:
        """ SetLetterContent(self: _Document, LetterContent: object) -> object """
        ...

    def SetPasswordEncryptionOptions(self, PasswordEncryptionProvider:str, PasswordEncryptionAlgorithm:str, PasswordEncryptionKeyLength:int, PasswordEncryptionFileProperties:object) -> object:
        """ SetPasswordEncryptionOptions(self: _Document, PasswordEncryptionProvider: str, PasswordEncryptionAlgorithm: str, PasswordEncryptionKeyLength: int, PasswordEncryptionFileProperties: object) -> object """
        ...

    def ToggleFormsDesign(self): # -> 
        """ ToggleFormsDesign(self: _Document) """
        ...

    def TransformDocument(self, Path:str, DataOnly:bool): # -> 
        """ TransformDocument(self: _Document, Path: str, DataOnly: bool) """
        ...

    def Undo(self, Times:object) -> Tuple_[bool, object]:
        """ Undo(self: _Document, Times: object) -> (bool, object) """
        ...

    def UndoClear(self): # -> 
        """ UndoClear(self: _Document) """
        ...

    def UnfreezeLayout(self): # -> 
        """ UnfreezeLayout(self: _Document) """
        ...

    def Unprotect(self, Password:object) -> object:
        """ Unprotect(self: _Document, Password: object) -> object """
        ...

    def UpdateStyles(self): # -> 
        """ UpdateStyles(self: _Document) """
        ...

    def UpdateSummaryProperties(self): # -> 
        """ UpdateSummaryProperties(self: _Document) """
        ...

    def ViewCode(self): # -> 
        """ ViewCode(self: _Document) """
        ...

    def ViewPropertyBrowser(self): # -> 
        """ ViewPropertyBrowser(self: _Document) """
        ...

    def WebPagePreview(self): # -> 
        """ WebPagePreview(self: _Document) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Document(DocumentEvents2_Event, _Document): # skipped bases: <type 'object'>
    """ no doc """
    pass

class DocumentClass(DocumentEvents_Event, __ComObject, Document): # skipped bases: <type '_Document'>, <type 'DocumentEvents2_Event'>, <type 'object'>
    """ DocumentClass() """
    @property
    def ActiveTheme(self) -> str:
        """ Get: ActiveTheme(self: DocumentClass) -> str """
        ...

    @property
    def ActiveThemeDisplayName(self) -> str:
        """ Get: ActiveThemeDisplayName(self: DocumentClass) -> str """
        ...

    @property
    def ActiveWindow(self) -> Window:
        """ Get: ActiveWindow(self: DocumentClass) -> Window """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: DocumentClass) -> Application """
        ...

    @property
    def AttachedTemplate(self) -> object:
        """
        Get: AttachedTemplate(self: DocumentClass) -> object
        Set: AttachedTemplate(self: DocumentClass) = value
        """
        ...

    @property
    def AutoFormatOverride(self) -> bool:
        """
        Get: AutoFormatOverride(self: DocumentClass) -> bool
        Set: AutoFormatOverride(self: DocumentClass) = value
        """
        ...

    @property
    def AutoHyphenation(self) -> bool:
        """
        Get: AutoHyphenation(self: DocumentClass) -> bool
        Set: AutoHyphenation(self: DocumentClass) = value
        """
        ...

    @property
    def Background(self) -> Shape:
        """
        Get: Background(self: DocumentClass) -> Shape
        Set: Background(self: DocumentClass) = value
        """
        ...

    @property
    def Bibliography(self) -> Bibliography:
        """ Get: Bibliography(self: DocumentClass) -> Bibliography """
        ...

    @property
    def Bookmarks(self) -> Bookmarks:
        """ Get: Bookmarks(self: DocumentClass) -> Bookmarks """
        ...

    @property
    def Broadcast(self) -> Broadcast:
        """ Get: Broadcast(self: DocumentClass) -> Broadcast """
        ...

    @property
    def BuiltInDocumentProperties(self) -> object:
        """ Get: BuiltInDocumentProperties(self: DocumentClass) -> object """
        ...

    @property
    def Characters(self) -> Characters:
        """ Get: Characters(self: DocumentClass) -> Characters """
        ...

    @property
    def ChartDataPointTrack(self) -> bool:
        """
        Get: ChartDataPointTrack(self: DocumentClass) -> bool
        Set: ChartDataPointTrack(self: DocumentClass) = value
        """
        ...

    @property
    def ChildNodeSuggestions(self) -> XMLChildNodeSuggestions:
        """ Get: ChildNodeSuggestions(self: DocumentClass) -> XMLChildNodeSuggestions """
        ...

    @property
    def ClickAndTypeParagraphStyle(self) -> object:
        """
        Get: ClickAndTypeParagraphStyle(self: DocumentClass) -> object
        Set: ClickAndTypeParagraphStyle(self: DocumentClass) = value
        """
        ...

    @property
    def CoAuthoring(self) -> CoAuthoring:
        """ Get: CoAuthoring(self: DocumentClass) -> CoAuthoring """
        ...

    @property
    def CodeName(self) -> str:
        """ Get: CodeName(self: DocumentClass) -> str """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: DocumentClass) -> CommandBars """
        ...

    @property
    def Comments(self) -> Comments:
        """ Get: Comments(self: DocumentClass) -> Comments """
        ...

    @property
    def CompatibilityMode(self) -> int:
        """ Get: CompatibilityMode(self: DocumentClass) -> int """
        ...

    @property
    def ConsecutiveHyphensLimit(self) -> int:
        """
        Get: ConsecutiveHyphensLimit(self: DocumentClass) -> int
        Set: ConsecutiveHyphensLimit(self: DocumentClass) = value
        """
        ...

    @property
    def Container(self) -> object:
        """ Get: Container(self: DocumentClass) -> object """
        ...

    @property
    def Content(self) -> Range:
        """ Get: Content(self: DocumentClass) -> Range """
        ...

    @property
    def ContentControls(self) -> ContentControls:
        """ Get: ContentControls(self: DocumentClass) -> ContentControls """
        ...

    @property
    def ContentTypeProperties(self): # -> MetaProperties
        """ Get: ContentTypeProperties(self: DocumentClass) -> MetaProperties """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DocumentClass) -> int """
        ...

    @property
    def CurrentRsid(self) -> int:
        """ Get: CurrentRsid(self: DocumentClass) -> int """
        ...

    @property
    def CustomDocumentProperties(self) -> object:
        """ Get: CustomDocumentProperties(self: DocumentClass) -> object """
        ...

    @property
    def CustomXMLParts(self): # -> CustomXMLParts
        """ Get: CustomXMLParts(self: DocumentClass) -> CustomXMLParts """
        ...

    @property
    def DefaultTableStyle(self) -> object:
        """ Get: DefaultTableStyle(self: DocumentClass) -> object """
        ...

    @property
    def DefaultTabStop(self) -> Single:
        """
        Get: DefaultTabStop(self: DocumentClass) -> Single
        Set: DefaultTabStop(self: DocumentClass) = value
        """
        ...

    @property
    def DefaultTargetFrame(self) -> str:
        """
        Get: DefaultTargetFrame(self: DocumentClass) -> str
        Set: DefaultTargetFrame(self: DocumentClass) = value
        """
        ...

    @property
    def DisableFeatures(self) -> bool:
        """
        Get: DisableFeatures(self: DocumentClass) -> bool
        Set: DisableFeatures(self: DocumentClass) = value
        """
        ...

    @property
    def DisableFeaturesIntroducedAfter(self) -> WdDisableFeaturesIntroducedAfter:
        """
        Get: DisableFeaturesIntroducedAfter(self: DocumentClass) -> WdDisableFeaturesIntroducedAfter
        Set: DisableFeaturesIntroducedAfter(self: DocumentClass) = value
        """
        ...

    @property
    def DocID(self) -> int:
        """ Get: DocID(self: DocumentClass) -> int """
        ...

    @property
    def DocumentInspectors(self): # -> DocumentInspectors
        """ Get: DocumentInspectors(self: DocumentClass) -> DocumentInspectors """
        ...

    @property
    def DocumentLibraryVersions(self): # -> DocumentLibraryVersions
        """ Get: DocumentLibraryVersions(self: DocumentClass) -> DocumentLibraryVersions """
        ...

    @property
    def DocumentTheme(self): # -> OfficeTheme
        """ Get: DocumentTheme(self: DocumentClass) -> OfficeTheme """
        ...

    @property
    def DoNotEmbedSystemFonts(self) -> bool:
        """
        Get: DoNotEmbedSystemFonts(self: DocumentClass) -> bool
        Set: DoNotEmbedSystemFonts(self: DocumentClass) = value
        """
        ...

    @property
    def Email(self) -> Email:
        """ Get: Email(self: DocumentClass) -> Email """
        ...

    @property
    def EmbedLinguisticData(self) -> bool:
        """
        Get: EmbedLinguisticData(self: DocumentClass) -> bool
        Set: EmbedLinguisticData(self: DocumentClass) = value
        """
        ...

    @property
    def EmbedSmartTags(self) -> bool:
        """
        Get: EmbedSmartTags(self: DocumentClass) -> bool
        Set: EmbedSmartTags(self: DocumentClass) = value
        """
        ...

    @property
    def EmbedTrueTypeFonts(self) -> bool:
        """
        Get: EmbedTrueTypeFonts(self: DocumentClass) -> bool
        Set: EmbedTrueTypeFonts(self: DocumentClass) = value
        """
        ...

    @property
    def EncryptionProvider(self) -> str:
        """
        Get: EncryptionProvider(self: DocumentClass) -> str
        Set: EncryptionProvider(self: DocumentClass) = value
        """
        ...

    @property
    def Endnotes(self) -> Endnotes:
        """ Get: Endnotes(self: DocumentClass) -> Endnotes """
        ...

    @property
    def EnforceStyle(self) -> bool:
        """
        Get: EnforceStyle(self: DocumentClass) -> bool
        Set: EnforceStyle(self: DocumentClass) = value
        """
        ...

    @property
    def Envelope(self) -> Envelope:
        """ Get: Envelope(self: DocumentClass) -> Envelope """
        ...

    @property
    def FarEastLineBreakLanguage(self) -> WdFarEastLineBreakLanguageID:
        """
        Get: FarEastLineBreakLanguage(self: DocumentClass) -> WdFarEastLineBreakLanguageID
        Set: FarEastLineBreakLanguage(self: DocumentClass) = value
        """
        ...

    @property
    def FarEastLineBreakLevel(self) -> WdFarEastLineBreakLevel:
        """
        Get: FarEastLineBreakLevel(self: DocumentClass) -> WdFarEastLineBreakLevel
        Set: FarEastLineBreakLevel(self: DocumentClass) = value
        """
        ...

    @property
    def Fields(self) -> Fields:
        """ Get: Fields(self: DocumentClass) -> Fields """
        ...

    @property
    def Final(self) -> bool:
        """
        Get: Final(self: DocumentClass) -> bool
        Set: Final(self: DocumentClass) = value
        """
        ...

    @property
    def Footnotes(self) -> Footnotes:
        """ Get: Footnotes(self: DocumentClass) -> Footnotes """
        ...

    @property
    def FormattingShowClear(self) -> bool:
        """
        Get: FormattingShowClear(self: DocumentClass) -> bool
        Set: FormattingShowClear(self: DocumentClass) = value
        """
        ...

    @property
    def FormattingShowFilter(self) -> WdShowFilter:
        """
        Get: FormattingShowFilter(self: DocumentClass) -> WdShowFilter
        Set: FormattingShowFilter(self: DocumentClass) = value
        """
        ...

    @property
    def FormattingShowFont(self) -> bool:
        """
        Get: FormattingShowFont(self: DocumentClass) -> bool
        Set: FormattingShowFont(self: DocumentClass) = value
        """
        ...

    @property
    def FormattingShowNextLevel(self) -> bool:
        """
        Get: FormattingShowNextLevel(self: DocumentClass) -> bool
        Set: FormattingShowNextLevel(self: DocumentClass) = value
        """
        ...

    @property
    def FormattingShowNumbering(self) -> bool:
        """
        Get: FormattingShowNumbering(self: DocumentClass) -> bool
        Set: FormattingShowNumbering(self: DocumentClass) = value
        """
        ...

    @property
    def FormattingShowParagraph(self) -> bool:
        """
        Get: FormattingShowParagraph(self: DocumentClass) -> bool
        Set: FormattingShowParagraph(self: DocumentClass) = value
        """
        ...

    @property
    def FormattingShowUserStyleName(self) -> bool:
        """
        Get: FormattingShowUserStyleName(self: DocumentClass) -> bool
        Set: FormattingShowUserStyleName(self: DocumentClass) = value
        """
        ...

    @property
    def FormFields(self) -> FormFields:
        """ Get: FormFields(self: DocumentClass) -> FormFields """
        ...

    @property
    def FormsDesign(self) -> bool:
        """ Get: FormsDesign(self: DocumentClass) -> bool """
        ...

    @property
    def Frames(self) -> Frames:
        """ Get: Frames(self: DocumentClass) -> Frames """
        ...

    @property
    def Frameset(self) -> Frameset:
        """ Get: Frameset(self: DocumentClass) -> Frameset """
        ...

    @property
    def FullName(self) -> str:
        """ Get: FullName(self: DocumentClass) -> str """
        ...

    @property
    def GrammarChecked(self) -> bool:
        """
        Get: GrammarChecked(self: DocumentClass) -> bool
        Set: GrammarChecked(self: DocumentClass) = value
        """
        ...

    @property
    def GrammaticalErrors(self) -> ProofreadingErrors:
        """ Get: GrammaticalErrors(self: DocumentClass) -> ProofreadingErrors """
        ...

    @property
    def GridDistanceHorizontal(self) -> Single:
        """
        Get: GridDistanceHorizontal(self: DocumentClass) -> Single
        Set: GridDistanceHorizontal(self: DocumentClass) = value
        """
        ...

    @property
    def GridDistanceVertical(self) -> Single:
        """
        Get: GridDistanceVertical(self: DocumentClass) -> Single
        Set: GridDistanceVertical(self: DocumentClass) = value
        """
        ...

    @property
    def GridOriginFromMargin(self) -> bool:
        """
        Get: GridOriginFromMargin(self: DocumentClass) -> bool
        Set: GridOriginFromMargin(self: DocumentClass) = value
        """
        ...

    @property
    def GridOriginHorizontal(self) -> Single:
        """
        Get: GridOriginHorizontal(self: DocumentClass) -> Single
        Set: GridOriginHorizontal(self: DocumentClass) = value
        """
        ...

    @property
    def GridOriginVertical(self) -> Single:
        """
        Get: GridOriginVertical(self: DocumentClass) -> Single
        Set: GridOriginVertical(self: DocumentClass) = value
        """
        ...

    @property
    def GridSpaceBetweenHorizontalLines(self) -> int:
        """
        Get: GridSpaceBetweenHorizontalLines(self: DocumentClass) -> int
        Set: GridSpaceBetweenHorizontalLines(self: DocumentClass) = value
        """
        ...

    @property
    def GridSpaceBetweenVerticalLines(self) -> int:
        """
        Get: GridSpaceBetweenVerticalLines(self: DocumentClass) -> int
        Set: GridSpaceBetweenVerticalLines(self: DocumentClass) = value
        """
        ...

    @property
    def HasMailer(self) -> bool:
        """
        Get: HasMailer(self: DocumentClass) -> bool
        Set: HasMailer(self: DocumentClass) = value
        """
        ...

    @property
    def HasPassword(self) -> bool:
        """ Get: HasPassword(self: DocumentClass) -> bool """
        ...

    @property
    def HasRoutingSlip(self) -> bool:
        """
        Get: HasRoutingSlip(self: DocumentClass) -> bool
        Set: HasRoutingSlip(self: DocumentClass) = value
        """
        ...

    @property
    def HasVBProject(self) -> bool:
        """ Get: HasVBProject(self: DocumentClass) -> bool """
        ...

    @property
    def HTMLDivisions(self) -> HTMLDivisions:
        """ Get: HTMLDivisions(self: DocumentClass) -> HTMLDivisions """
        ...

    @property
    def HTMLProject(self): # -> HTMLProject
        """ Get: HTMLProject(self: DocumentClass) -> HTMLProject """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: DocumentClass) -> Hyperlinks """
        ...

    @property
    def HyphenateCaps(self) -> bool:
        """
        Get: HyphenateCaps(self: DocumentClass) -> bool
        Set: HyphenateCaps(self: DocumentClass) = value
        """
        ...

    @property
    def HyphenationZone(self) -> int:
        """
        Get: HyphenationZone(self: DocumentClass) -> int
        Set: HyphenationZone(self: DocumentClass) = value
        """
        ...

    @property
    def Indexes(self) -> Indexes:
        """ Get: Indexes(self: DocumentClass) -> Indexes """
        ...

    @property
    def InlineShapes(self) -> InlineShapes:
        """ Get: InlineShapes(self: DocumentClass) -> InlineShapes """
        ...

    @property
    def IsInAutosave(self) -> bool:
        """ Get: IsInAutosave(self: DocumentClass) -> bool """
        ...

    @property
    def IsMasterDocument(self) -> bool:
        """ Get: IsMasterDocument(self: DocumentClass) -> bool """
        ...

    @property
    def IsSubdocument(self) -> bool:
        """ Get: IsSubdocument(self: DocumentClass) -> bool """
        ...

    @property
    def JustificationMode(self) -> WdJustificationMode:
        """
        Get: JustificationMode(self: DocumentClass) -> WdJustificationMode
        Set: JustificationMode(self: DocumentClass) = value
        """
        ...

    @property
    def KerningByAlgorithm(self) -> bool:
        """
        Get: KerningByAlgorithm(self: DocumentClass) -> bool
        Set: KerningByAlgorithm(self: DocumentClass) = value
        """
        ...

    @property
    def Kind(self) -> WdDocumentKind:
        """
        Get: Kind(self: DocumentClass) -> WdDocumentKind
        Set: Kind(self: DocumentClass) = value
        """
        ...

    @property
    def LanguageDetected(self) -> bool:
        """
        Get: LanguageDetected(self: DocumentClass) -> bool
        Set: LanguageDetected(self: DocumentClass) = value
        """
        ...

    @property
    def ListParagraphs(self) -> ListParagraphs:
        """ Get: ListParagraphs(self: DocumentClass) -> ListParagraphs """
        ...

    @property
    def Lists(self) -> Lists:
        """ Get: Lists(self: DocumentClass) -> Lists """
        ...

    @property
    def ListTemplates(self) -> ListTemplates:
        """ Get: ListTemplates(self: DocumentClass) -> ListTemplates """
        ...

    @property
    def LockQuickStyleSet(self) -> bool:
        """
        Get: LockQuickStyleSet(self: DocumentClass) -> bool
        Set: LockQuickStyleSet(self: DocumentClass) = value
        """
        ...

    @property
    def LockTheme(self) -> bool:
        """
        Get: LockTheme(self: DocumentClass) -> bool
        Set: LockTheme(self: DocumentClass) = value
        """
        ...

    @property
    def MailEnvelope(self): # -> MsoEnvelope
        """ Get: MailEnvelope(self: DocumentClass) -> MsoEnvelope """
        ...

    @property
    def Mailer(self) -> Mailer:
        """ Get: Mailer(self: DocumentClass) -> Mailer """
        ...

    @property
    def MailMerge(self) -> MailMerge:
        """ Get: MailMerge(self: DocumentClass) -> MailMerge """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DocumentClass) -> str """
        ...

    @property
    def NoLineBreakAfter(self) -> str:
        """
        Get: NoLineBreakAfter(self: DocumentClass) -> str
        Set: NoLineBreakAfter(self: DocumentClass) = value
        """
        ...

    @property
    def NoLineBreakBefore(self) -> str:
        """
        Get: NoLineBreakBefore(self: DocumentClass) -> str
        Set: NoLineBreakBefore(self: DocumentClass) = value
        """
        ...

    @property
    def OMathBreakBin(self) -> WdOMathBreakBin:
        """
        Get: OMathBreakBin(self: DocumentClass) -> WdOMathBreakBin
        Set: OMathBreakBin(self: DocumentClass) = value
        """
        ...

    @property
    def OMathBreakSub(self) -> WdOMathBreakSub:
        """
        Get: OMathBreakSub(self: DocumentClass) -> WdOMathBreakSub
        Set: OMathBreakSub(self: DocumentClass) = value
        """
        ...

    @property
    def OMathFontName(self) -> str:
        """
        Get: OMathFontName(self: DocumentClass) -> str
        Set: OMathFontName(self: DocumentClass) = value
        """
        ...

    @property
    def OMathIntSubSupLim(self) -> bool:
        """
        Get: OMathIntSubSupLim(self: DocumentClass) -> bool
        Set: OMathIntSubSupLim(self: DocumentClass) = value
        """
        ...

    @property
    def OMathJc(self) -> WdOMathJc:
        """
        Get: OMathJc(self: DocumentClass) -> WdOMathJc
        Set: OMathJc(self: DocumentClass) = value
        """
        ...

    @property
    def OMathLeftMargin(self) -> Single:
        """
        Get: OMathLeftMargin(self: DocumentClass) -> Single
        Set: OMathLeftMargin(self: DocumentClass) = value
        """
        ...

    @property
    def OMathNarySupSubLim(self) -> bool:
        """
        Get: OMathNarySupSubLim(self: DocumentClass) -> bool
        Set: OMathNarySupSubLim(self: DocumentClass) = value
        """
        ...

    @property
    def OMathRightMargin(self) -> Single:
        """
        Get: OMathRightMargin(self: DocumentClass) -> Single
        Set: OMathRightMargin(self: DocumentClass) = value
        """
        ...

    @property
    def OMaths(self) -> OMaths:
        """ Get: OMaths(self: DocumentClass) -> OMaths """
        ...

    @property
    def OMathSmallFrac(self) -> bool:
        """
        Get: OMathSmallFrac(self: DocumentClass) -> bool
        Set: OMathSmallFrac(self: DocumentClass) = value
        """
        ...

    @property
    def OMathWrap(self) -> Single:
        """
        Get: OMathWrap(self: DocumentClass) -> Single
        Set: OMathWrap(self: DocumentClass) = value
        """
        ...

    @property
    def OpenEncoding(self): # -> MsoEncoding
        """ Get: OpenEncoding(self: DocumentClass) -> MsoEncoding """
        ...

    @property
    def OptimizeForWord97(self) -> bool:
        """
        Get: OptimizeForWord97(self: DocumentClass) -> bool
        Set: OptimizeForWord97(self: DocumentClass) = value
        """
        ...

    @property
    def OriginalDocumentTitle(self) -> str:
        """ Get: OriginalDocumentTitle(self: DocumentClass) -> str """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """
        Get: PageSetup(self: DocumentClass) -> PageSetup
        Set: PageSetup(self: DocumentClass) = value
        """
        ...

    @property
    def Paragraphs(self) -> Paragraphs:
        """ Get: Paragraphs(self: DocumentClass) -> Paragraphs """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DocumentClass) -> object """
        ...

    @property
    def Password(self): # -> 
        """ Set: Password(self: DocumentClass) = value """
        ...

    @property
    def PasswordEncryptionAlgorithm(self) -> str:
        """ Get: PasswordEncryptionAlgorithm(self: DocumentClass) -> str """
        ...

    @property
    def PasswordEncryptionFileProperties(self) -> bool:
        """ Get: PasswordEncryptionFileProperties(self: DocumentClass) -> bool """
        ...

    @property
    def PasswordEncryptionKeyLength(self) -> int:
        """ Get: PasswordEncryptionKeyLength(self: DocumentClass) -> int """
        ...

    @property
    def PasswordEncryptionProvider(self) -> str:
        """ Get: PasswordEncryptionProvider(self: DocumentClass) -> str """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: DocumentClass) -> str """
        ...

    @property
    def Permission(self): # -> Permission
        """ Get: Permission(self: DocumentClass) -> Permission """
        ...

    @property
    def PrintFormsData(self) -> bool:
        """
        Get: PrintFormsData(self: DocumentClass) -> bool
        Set: PrintFormsData(self: DocumentClass) = value
        """
        ...

    @property
    def PrintFractionalWidths(self) -> bool:
        """
        Get: PrintFractionalWidths(self: DocumentClass) -> bool
        Set: PrintFractionalWidths(self: DocumentClass) = value
        """
        ...

    @property
    def PrintPostScriptOverText(self) -> bool:
        """
        Get: PrintPostScriptOverText(self: DocumentClass) -> bool
        Set: PrintPostScriptOverText(self: DocumentClass) = value
        """
        ...

    @property
    def PrintRevisions(self) -> bool:
        """
        Get: PrintRevisions(self: DocumentClass) -> bool
        Set: PrintRevisions(self: DocumentClass) = value
        """
        ...

    @property
    def ProtectionType(self) -> WdProtectionType:
        """ Get: ProtectionType(self: DocumentClass) -> WdProtectionType """
        ...

    @property
    def ReadabilityStatistics(self) -> ReadabilityStatistics:
        """ Get: ReadabilityStatistics(self: DocumentClass) -> ReadabilityStatistics """
        ...

    @property
    def ReadingLayoutSizeX(self) -> int:
        """
        Get: ReadingLayoutSizeX(self: DocumentClass) -> int
        Set: ReadingLayoutSizeX(self: DocumentClass) = value
        """
        ...

    @property
    def ReadingLayoutSizeY(self) -> int:
        """
        Get: ReadingLayoutSizeY(self: DocumentClass) -> int
        Set: ReadingLayoutSizeY(self: DocumentClass) = value
        """
        ...

    @property
    def ReadingModeLayoutFrozen(self) -> bool:
        """
        Get: ReadingModeLayoutFrozen(self: DocumentClass) -> bool
        Set: ReadingModeLayoutFrozen(self: DocumentClass) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """ Get: ReadOnly(self: DocumentClass) -> bool """
        ...

    @property
    def ReadOnlyRecommended(self) -> bool:
        """
        Get: ReadOnlyRecommended(self: DocumentClass) -> bool
        Set: ReadOnlyRecommended(self: DocumentClass) = value
        """
        ...

    @property
    def RemoveDateAndTime(self) -> bool:
        """
        Get: RemoveDateAndTime(self: DocumentClass) -> bool
        Set: RemoveDateAndTime(self: DocumentClass) = value
        """
        ...

    @property
    def RemovePersonalInformation(self) -> bool:
        """
        Get: RemovePersonalInformation(self: DocumentClass) -> bool
        Set: RemovePersonalInformation(self: DocumentClass) = value
        """
        ...

    @property
    def Research(self) -> Research:
        """ Get: Research(self: DocumentClass) -> Research """
        ...

    @property
    def RevisedDocumentTitle(self) -> str:
        """ Get: RevisedDocumentTitle(self: DocumentClass) -> str """
        ...

    @property
    def Revisions(self) -> Revisions:
        """ Get: Revisions(self: DocumentClass) -> Revisions """
        ...

    @property
    def Routed(self) -> bool:
        """ Get: Routed(self: DocumentClass) -> bool """
        ...

    @property
    def RoutingSlip(self) -> RoutingSlip:
        """ Get: RoutingSlip(self: DocumentClass) -> RoutingSlip """
        ...

    @property
    def Saved(self) -> bool:
        """
        Get: Saved(self: DocumentClass) -> bool
        Set: Saved(self: DocumentClass) = value
        """
        ...

    @property
    def SaveEncoding(self): # -> MsoEncoding
        """
        Get: SaveEncoding(self: DocumentClass) -> MsoEncoding
        Set: SaveEncoding(self: DocumentClass) = value
        """
        ...

    @property
    def SaveFormat(self) -> int:
        """ Get: SaveFormat(self: DocumentClass) -> int """
        ...

    @property
    def SaveFormsData(self) -> bool:
        """
        Get: SaveFormsData(self: DocumentClass) -> bool
        Set: SaveFormsData(self: DocumentClass) = value
        """
        ...

    @property
    def SaveSubsetFonts(self) -> bool:
        """
        Get: SaveSubsetFonts(self: DocumentClass) -> bool
        Set: SaveSubsetFonts(self: DocumentClass) = value
        """
        ...

    @property
    def Scripts(self): # -> Scripts
        """ Get: Scripts(self: DocumentClass) -> Scripts """
        ...

    @property
    def Sections(self) -> Sections:
        """ Get: Sections(self: DocumentClass) -> Sections """
        ...

    @property
    def Sentences(self) -> Sentences:
        """ Get: Sentences(self: DocumentClass) -> Sentences """
        ...

    @property
    def ServerPolicy(self): # -> ServerPolicy
        """ Get: ServerPolicy(self: DocumentClass) -> ServerPolicy """
        ...

    @property
    def Shapes(self) -> Shapes:
        """ Get: Shapes(self: DocumentClass) -> Shapes """
        ...

    @property
    def SharedWorkspace(self): # -> SharedWorkspace
        """ Get: SharedWorkspace(self: DocumentClass) -> SharedWorkspace """
        ...

    @property
    def ShowGrammaticalErrors(self) -> bool:
        """
        Get: ShowGrammaticalErrors(self: DocumentClass) -> bool
        Set: ShowGrammaticalErrors(self: DocumentClass) = value
        """
        ...

    @property
    def ShowRevisions(self) -> bool:
        """
        Get: ShowRevisions(self: DocumentClass) -> bool
        Set: ShowRevisions(self: DocumentClass) = value
        """
        ...

    @property
    def ShowSpellingErrors(self) -> bool:
        """
        Get: ShowSpellingErrors(self: DocumentClass) -> bool
        Set: ShowSpellingErrors(self: DocumentClass) = value
        """
        ...

    @property
    def ShowSummary(self) -> bool:
        """
        Get: ShowSummary(self: DocumentClass) -> bool
        Set: ShowSummary(self: DocumentClass) = value
        """
        ...

    @property
    def Signatures(self): # -> SignatureSet
        """ Get: Signatures(self: DocumentClass) -> SignatureSet """
        ...

    @property
    def SmartDocument(self): # -> SmartDocument
        """ Get: SmartDocument(self: DocumentClass) -> SmartDocument """
        ...

    @property
    def SmartTags(self) -> SmartTags:
        """ Get: SmartTags(self: DocumentClass) -> SmartTags """
        ...

    @property
    def SmartTagsAsXMLProps(self) -> bool:
        """
        Get: SmartTagsAsXMLProps(self: DocumentClass) -> bool
        Set: SmartTagsAsXMLProps(self: DocumentClass) = value
        """
        ...

    @property
    def SnapToGrid(self) -> bool:
        """
        Get: SnapToGrid(self: DocumentClass) -> bool
        Set: SnapToGrid(self: DocumentClass) = value
        """
        ...

    @property
    def SnapToShapes(self) -> bool:
        """
        Get: SnapToShapes(self: DocumentClass) -> bool
        Set: SnapToShapes(self: DocumentClass) = value
        """
        ...

    @property
    def SpellingChecked(self) -> bool:
        """
        Get: SpellingChecked(self: DocumentClass) -> bool
        Set: SpellingChecked(self: DocumentClass) = value
        """
        ...

    @property
    def SpellingErrors(self) -> ProofreadingErrors:
        """ Get: SpellingErrors(self: DocumentClass) -> ProofreadingErrors """
        ...

    @property
    def StoryRanges(self) -> StoryRanges:
        """ Get: StoryRanges(self: DocumentClass) -> StoryRanges """
        ...

    @property
    def Styles(self) -> Styles:
        """ Get: Styles(self: DocumentClass) -> Styles """
        ...

    @property
    def StyleSheets(self) -> StyleSheets:
        """ Get: StyleSheets(self: DocumentClass) -> StyleSheets """
        ...

    @property
    def StyleSortMethod(self) -> WdStyleSort:
        """
        Get: StyleSortMethod(self: DocumentClass) -> WdStyleSort
        Set: StyleSortMethod(self: DocumentClass) = value
        """
        ...

    @property
    def Subdocuments(self) -> Subdocuments:
        """ Get: Subdocuments(self: DocumentClass) -> Subdocuments """
        ...

    @property
    def SummaryLength(self) -> int:
        """
        Get: SummaryLength(self: DocumentClass) -> int
        Set: SummaryLength(self: DocumentClass) = value
        """
        ...

    @property
    def SummaryViewMode(self) -> WdSummaryMode:
        """
        Get: SummaryViewMode(self: DocumentClass) -> WdSummaryMode
        Set: SummaryViewMode(self: DocumentClass) = value
        """
        ...

    @property
    def Sync(self): # -> Sync
        """ Get: Sync(self: DocumentClass) -> Sync """
        ...

    @property
    def Tables(self) -> Tables:
        """ Get: Tables(self: DocumentClass) -> Tables """
        ...

    @property
    def TablesOfAuthorities(self) -> TablesOfAuthorities:
        """ Get: TablesOfAuthorities(self: DocumentClass) -> TablesOfAuthorities """
        ...

    @property
    def TablesOfAuthoritiesCategories(self) -> TablesOfAuthoritiesCategories:
        """ Get: TablesOfAuthoritiesCategories(self: DocumentClass) -> TablesOfAuthoritiesCategories """
        ...

    @property
    def TablesOfContents(self) -> TablesOfContents:
        """ Get: TablesOfContents(self: DocumentClass) -> TablesOfContents """
        ...

    @property
    def TablesOfFigures(self) -> TablesOfFigures:
        """ Get: TablesOfFigures(self: DocumentClass) -> TablesOfFigures """
        ...

    @property
    def TextEncoding(self): # -> MsoEncoding
        """
        Get: TextEncoding(self: DocumentClass) -> MsoEncoding
        Set: TextEncoding(self: DocumentClass) = value
        """
        ...

    @property
    def TextLineEnding(self) -> WdLineEndingType:
        """
        Get: TextLineEnding(self: DocumentClass) -> WdLineEndingType
        Set: TextLineEnding(self: DocumentClass) = value
        """
        ...

    @property
    def TrackFormatting(self) -> bool:
        """
        Get: TrackFormatting(self: DocumentClass) -> bool
        Set: TrackFormatting(self: DocumentClass) = value
        """
        ...

    @property
    def TrackMoves(self) -> bool:
        """
        Get: TrackMoves(self: DocumentClass) -> bool
        Set: TrackMoves(self: DocumentClass) = value
        """
        ...

    @property
    def TrackRevisions(self) -> bool:
        """
        Get: TrackRevisions(self: DocumentClass) -> bool
        Set: TrackRevisions(self: DocumentClass) = value
        """
        ...

    @property
    def Type(self) -> WdDocumentType:
        """ Get: Type(self: DocumentClass) -> WdDocumentType """
        ...

    @property
    def UpdateStylesOnOpen(self) -> bool:
        """
        Get: UpdateStylesOnOpen(self: DocumentClass) -> bool
        Set: UpdateStylesOnOpen(self: DocumentClass) = value
        """
        ...

    @property
    def UseMathDefaults(self) -> bool:
        """
        Get: UseMathDefaults(self: DocumentClass) -> bool
        Set: UseMathDefaults(self: DocumentClass) = value
        """
        ...

    @property
    def UserControl(self) -> bool:
        """
        Get: UserControl(self: DocumentClass) -> bool
        Set: UserControl(self: DocumentClass) = value
        """
        ...

    @property
    def Variables(self) -> Variables:
        """ Get: Variables(self: DocumentClass) -> Variables """
        ...

    @property
    def VBASigned(self) -> bool:
        """ Get: VBASigned(self: DocumentClass) -> bool """
        ...

    @property
    def VBProject(self): # -> VBProject
        """ Get: VBProject(self: DocumentClass) -> VBProject """
        ...

    @property
    def Versions(self) -> Versions:
        """ Get: Versions(self: DocumentClass) -> Versions """
        ...

    @property
    def WebOptions(self) -> WebOptions:
        """ Get: WebOptions(self: DocumentClass) -> WebOptions """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: DocumentClass) -> Windows """
        ...

    @property
    def WordOpenXML(self) -> str:
        """ Get: WordOpenXML(self: DocumentClass) -> str """
        ...

    @property
    def Words(self) -> Words:
        """ Get: Words(self: DocumentClass) -> Words """
        ...

    @property
    def WritePassword(self): # -> 
        """ Set: WritePassword(self: DocumentClass) = value """
        ...

    @property
    def WriteReserved(self) -> bool:
        """ Get: WriteReserved(self: DocumentClass) -> bool """
        ...

    @property
    def XMLHideNamespaces(self) -> bool:
        """
        Get: XMLHideNamespaces(self: DocumentClass) -> bool
        Set: XMLHideNamespaces(self: DocumentClass) = value
        """
        ...

    @property
    def XMLNodes(self) -> XMLNodes:
        """ Get: XMLNodes(self: DocumentClass) -> XMLNodes """
        ...

    @property
    def XMLSaveDataOnly(self) -> bool:
        """
        Get: XMLSaveDataOnly(self: DocumentClass) -> bool
        Set: XMLSaveDataOnly(self: DocumentClass) = value
        """
        ...

    @property
    def XMLSaveThroughXSLT(self) -> str:
        """
        Get: XMLSaveThroughXSLT(self: DocumentClass) -> str
        Set: XMLSaveThroughXSLT(self: DocumentClass) = value
        """
        ...

    @property
    def XMLSchemaReferences(self) -> XMLSchemaReferences:
        """ Get: XMLSchemaReferences(self: DocumentClass) -> XMLSchemaReferences """
        ...

    @property
    def XMLSchemaViolations(self) -> XMLNodes:
        """ Get: XMLSchemaViolations(self: DocumentClass) -> XMLNodes """
        ...

    @property
    def XMLShowAdvancedErrors(self) -> bool:
        """
        Get: XMLShowAdvancedErrors(self: DocumentClass) -> bool
        Set: XMLShowAdvancedErrors(self: DocumentClass) = value
        """
        ...

    @property
    def XMLUseXSLTWhenSaving(self) -> bool:
        """
        Get: XMLUseXSLTWhenSaving(self: DocumentClass) -> bool
        Set: XMLUseXSLTWhenSaving(self: DocumentClass) = value
        """
        ...

    @property
    def _CodeName(self) -> str:
        """
        Get: _CodeName(self: DocumentClass) -> str
        Set: _CodeName(self: DocumentClass) = value
        """
        ...


    def AcceptAllRevisions(self): # -> 
        """ AcceptAllRevisions(self: DocumentClass) """
        ...

    def AcceptAllRevisionsShown(self): # -> 
        """ AcceptAllRevisionsShown(self: DocumentClass) """
        ...

    def Activate(self): # -> 
        """ Activate(self: DocumentClass) """
        ...

    def AddDocumentWorkspaceHeader(self, RichFormat:bool, Url:str, Title:str, Description:str, ID:str): # -> 
        """ AddDocumentWorkspaceHeader(self: DocumentClass, RichFormat: bool, Url: str, Title: str, Description: str, ID: str) """
        ...

    def AddMeetingWorkspaceHeader(self, SkipIfAbsent:bool, Url:str, Title:str, Description:str, ID:str): # -> 
        """ AddMeetingWorkspaceHeader(self: DocumentClass, SkipIfAbsent: bool, Url: str, Title: str, Description: str, ID: str) """
        ...

    def AddToFavorites(self): # -> 
        """ AddToFavorites(self: DocumentClass) """
        ...

    def add_BuildingBlockInsert(self): # -> 
        """ add_BuildingBlockInsert(self: DocumentClass, : DocumentEvents2_BuildingBlockInsertEventHandler) """
        ...

    def add_ContentControlAfterAdd(self): # -> 
        """ add_ContentControlAfterAdd(self: DocumentClass, : DocumentEvents2_ContentControlAfterAddEventHandler) """
        ...

    def add_ContentControlBeforeContentUpdate(self): # -> 
        """ add_ContentControlBeforeContentUpdate(self: DocumentClass, : DocumentEvents2_ContentControlBeforeContentUpdateEventHandler) """
        ...

    def add_ContentControlBeforeDelete(self): # -> 
        """ add_ContentControlBeforeDelete(self: DocumentClass, : DocumentEvents2_ContentControlBeforeDeleteEventHandler) """
        ...

    def add_ContentControlBeforeStoreUpdate(self): # -> 
        """ add_ContentControlBeforeStoreUpdate(self: DocumentClass, : DocumentEvents2_ContentControlBeforeStoreUpdateEventHandler) """
        ...

    def add_ContentControlOnEnter(self): # -> 
        """ add_ContentControlOnEnter(self: DocumentClass, : DocumentEvents2_ContentControlOnEnterEventHandler) """
        ...

    def add_ContentControlOnExit(self): # -> 
        """ add_ContentControlOnExit(self: DocumentClass, : DocumentEvents2_ContentControlOnExitEventHandler) """
        ...

    def add_Sync(self): # -> 
        """ add_Sync(self: DocumentClass, : DocumentEvents2_SyncEventHandler) """
        ...

    def add_XMLAfterInsert(self): # -> 
        """ add_XMLAfterInsert(self: DocumentClass, : DocumentEvents2_XMLAfterInsertEventHandler) """
        ...

    def add_XMLBeforeDelete(self): # -> 
        """ add_XMLBeforeDelete(self: DocumentClass, : DocumentEvents2_XMLBeforeDeleteEventHandler) """
        ...

    def ApplyDocumentTheme(self, FileName:str): # -> 
        """ ApplyDocumentTheme(self: DocumentClass, FileName: str) """
        ...

    def ApplyQuickStyleSet(self, Name:str): # -> 
        """ ApplyQuickStyleSet(self: DocumentClass, Name: str) """
        ...

    def ApplyQuickStyleSet2(self, Style:object) -> object:
        """ ApplyQuickStyleSet2(self: DocumentClass, Style: object) -> object """
        ...

    def ApplyTheme(self, Name:str): # -> 
        """ ApplyTheme(self: DocumentClass, Name: str) """
        ...

    def AutoFormat(self): # -> 
        """ AutoFormat(self: DocumentClass) """
        ...

    def AutoSummarize(self, Length:object, Mode:object, UpdateProperties:object) -> Tuple_[Range, object, object, object]:
        """ AutoSummarize(self: DocumentClass, Length: object, Mode: object, UpdateProperties: object) -> (Range, object, object, object) """
        ...

    def CanCheckin(self) -> bool:
        """ CanCheckin(self: DocumentClass) -> bool """
        ...

    def CheckConsistency(self): # -> 
        """ CheckConsistency(self: DocumentClass) """
        ...

    def CheckGrammar(self): # -> 
        """ CheckGrammar(self: DocumentClass) """
        ...

    def CheckIn(self, SaveChanges:bool, Comments:object, MakePublic:bool) -> object:
        """ CheckIn(self: DocumentClass, SaveChanges: bool, Comments: object, MakePublic: bool) -> object """
        ...

    def CheckInWithVersion(self, SaveChanges:bool, Comments:object, MakePublic:bool, VersionType:object) -> Tuple_[object, object]:
        """ CheckInWithVersion(self: DocumentClass, SaveChanges: bool, Comments: object, MakePublic: bool, VersionType: object) -> (object, object) """
        ...

    def CheckNewSmartTags(self): # -> 
        """ CheckNewSmartTags(self: DocumentClass) """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object]:
        """ CheckSpelling(self: DocumentClass, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Close(self, SaveChanges:object, OriginalFormat:object, RouteDocument:object) -> Tuple_[object, object, object]:
        """ Close(self: DocumentClass, SaveChanges: object, OriginalFormat: object, RouteDocument: object) -> (object, object, object) """
        ...

    def ClosePrintPreview(self): # -> 
        """ ClosePrintPreview(self: DocumentClass) """
        ...

    def Compare(self, Name:str, AuthorName:object, CompareTarget:object, DetectFormatChanges:object, IgnoreAllComparisonWarnings:object, AddToRecentFiles:object, RemovePersonalInformation:object, RemoveDateAndTime:object) -> Tuple_[object, object, object, object, object, object, object]:
        """ Compare(self: DocumentClass, Name: str, AuthorName: object, CompareTarget: object, DetectFormatChanges: object, IgnoreAllComparisonWarnings: object, AddToRecentFiles: object, RemovePersonalInformation: object, RemoveDateAndTime: object) -> (object, object, object, object, object, object, object) """
        ...

    def Compare2000(self, Name:str): # -> 
        """ Compare2000(self: DocumentClass, Name: str) """
        ...

    def Compare2002(self, Name:str, AuthorName:object, CompareTarget:object, DetectFormatChanges:object, IgnoreAllComparisonWarnings:object, AddToRecentFiles:object) -> Tuple_[object, object, object, object, object]:
        """ Compare2002(self: DocumentClass, Name: str, AuthorName: object, CompareTarget: object, DetectFormatChanges: object, IgnoreAllComparisonWarnings: object, AddToRecentFiles: object) -> (object, object, object, object, object) """
        ...

    def ComputeStatistics(self, Statistic:WdStatistic, IncludeFootnotesAndEndnotes:object) -> Tuple_[int, object]:
        """ ComputeStatistics(self: DocumentClass, Statistic: WdStatistic, IncludeFootnotesAndEndnotes: object) -> (int, object) """
        ...

    def Convert(self): # -> 
        """ Convert(self: DocumentClass) """
        ...

    def ConvertAutoHyphens(self): # -> 
        """ ConvertAutoHyphens(self: DocumentClass) """
        ...

    def ConvertNumbersToText(self, NumberType:object) -> object:
        """ ConvertNumbersToText(self: DocumentClass, NumberType: object) -> object """
        ...

    def ConvertVietDoc(self, CodePageOrigin:int): # -> 
        """ ConvertVietDoc(self: DocumentClass, CodePageOrigin: int) """
        ...

    def CopyStylesFromTemplate(self, Template:str): # -> 
        """ CopyStylesFromTemplate(self: DocumentClass, Template: str) """
        ...

    def CountNumberedItems(self, NumberType:object, Level:object) -> Tuple_[int, object, object]:
        """ CountNumberedItems(self: DocumentClass, NumberType: object, Level: object) -> (int, object, object) """
        ...

    def CreateLetterContent(self, DateFormat:str, IncludeHeaderFooter:bool, PageDesign:str, LetterStyle:WdLetterStyle, Letterhead:bool, LetterheadLocation:WdLetterheadLocation, LetterheadSize:Single, RecipientName:str, RecipientAddress:str, Salutation:str, SalutationType:WdSalutationType, RecipientReference:str, MailingInstructions:str, AttentionLine:str, Subject:str, CCList:str, ReturnAddress:str, SenderName:str, Closing:str, SenderCompany:str, SenderJobTitle:str, SenderInitials:str, EnclosureNumber:int, InfoBlock:object, RecipientCode:object, RecipientGender:object, ReturnAddressShortForm:object, SenderCity:object, SenderCode:object, SenderGender:object, SenderReference:object) -> Tuple_[LetterContent, object, object, object, object, object, object, object, object]:
        """ CreateLetterContent(self: DocumentClass, DateFormat: str, IncludeHeaderFooter: bool, PageDesign: str, LetterStyle: WdLetterStyle, Letterhead: bool, LetterheadLocation: WdLetterheadLocation, LetterheadSize: Single, RecipientName: str, RecipientAddress: str, Salutation: str, SalutationType: WdSalutationType, RecipientReference: str, MailingInstructions: str, AttentionLine: str, Subject: str, CCList: str, ReturnAddress: str, SenderName: str, Closing: str, SenderCompany: str, SenderJobTitle: str, SenderInitials: str, EnclosureNumber: int, InfoBlock: object, RecipientCode: object, RecipientGender: object, ReturnAddressShortForm: object, SenderCity: object, SenderCode: object, SenderGender: object, SenderReference: object) -> (LetterContent, object, object, object, object, object, object, object, object) """
        ...

    def DataForm(self): # -> 
        """ DataForm(self: DocumentClass) """
        ...

    def DeleteAllComments(self): # -> 
        """ DeleteAllComments(self: DocumentClass) """
        ...

    def DeleteAllCommentsShown(self): # -> 
        """ DeleteAllCommentsShown(self: DocumentClass) """
        ...

    def DeleteAllEditableRanges(self, EditorID:object) -> object:
        """ DeleteAllEditableRanges(self: DocumentClass, EditorID: object) -> object """
        ...

    def DeleteAllInkAnnotations(self): # -> 
        """ DeleteAllInkAnnotations(self: DocumentClass) """
        ...

    def DetectLanguage(self): # -> 
        """ DetectLanguage(self: DocumentClass) """
        ...

    def DocumentEvents_Event_add_Close(self): # -> 
        """ DocumentEvents_Event_add_Close(self: DocumentClass, : DocumentEvents_CloseEventHandler) """
        ...

    def DocumentEvents_Event_add_New(self): # -> 
        """ DocumentEvents_Event_add_New(self: DocumentClass, : DocumentEvents_NewEventHandler) """
        ...

    def DocumentEvents_Event_add_Open(self): # -> 
        """ DocumentEvents_Event_add_Open(self: DocumentClass, : DocumentEvents_OpenEventHandler) """
        ...

    def DocumentEvents_Event_remove_Close(self): # -> 
        """ DocumentEvents_Event_remove_Close(self: DocumentClass, : DocumentEvents_CloseEventHandler) """
        ...

    def DocumentEvents_Event_remove_New(self): # -> 
        """ DocumentEvents_Event_remove_New(self: DocumentClass, : DocumentEvents_NewEventHandler) """
        ...

    def DocumentEvents_Event_remove_Open(self): # -> 
        """ DocumentEvents_Event_remove_Open(self: DocumentClass, : DocumentEvents_OpenEventHandler) """
        ...

    def DowngradeDocument(self): # -> 
        """ DowngradeDocument(self: DocumentClass) """
        ...

    def Dummy1(self): # -> 
        """ Dummy1(self: DocumentClass) """
        ...

    def Dummy2(self): # -> 
        """ Dummy2(self: DocumentClass) """
        ...

    def Dummy3(self): # -> 
        """ Dummy3(self: DocumentClass) """
        ...

    def Dummy4(self): # -> 
        """ Dummy4(self: DocumentClass) """
        ...

    def EditionOptions(self, Type:WdEditionType, Option:WdEditionOption, Name:str, Format:object) -> object:
        """ EditionOptions(self: DocumentClass, Type: WdEditionType, Option: WdEditionOption, Name: str, Format: object) -> object """
        ...

    def EndReview(self): # -> 
        """ EndReview(self: DocumentClass) """
        ...

    def ExportAsFixedFormat(self, OutputFileName:str, ExportFormat:WdExportFormat, OpenAfterExport:bool, OptimizeFor:WdExportOptimizeFor, Range:WdExportRange, From:int, To:int, Item:WdExportItem, IncludeDocProps:bool, KeepIRM:bool, CreateBookmarks:WdExportCreateBookmarks, DocStructureTags:bool, BitmapMissingFonts:bool, UseISO19005_1:bool, FixedFormatExtClassPtr:object) -> object:
        """ ExportAsFixedFormat(self: DocumentClass, OutputFileName: str, ExportFormat: WdExportFormat, OpenAfterExport: bool, OptimizeFor: WdExportOptimizeFor, Range: WdExportRange, From: int, To: int, Item: WdExportItem, IncludeDocProps: bool, KeepIRM: bool, CreateBookmarks: WdExportCreateBookmarks, DocStructureTags: bool, BitmapMissingFonts: bool, UseISO19005_1: bool, FixedFormatExtClassPtr: object) -> object """
        ...

    def FitToPages(self): # -> 
        """ FitToPages(self: DocumentClass) """
        ...

    def FollowHyperlink(self, Address:object, SubAddress:object, NewWindow:object, AddHistory:object, ExtraInfo:object, Method:object, HeaderInfo:object) -> Tuple_[object, object, object, object, object, object, object]:
        """ FollowHyperlink(self: DocumentClass, Address: object, SubAddress: object, NewWindow: object, AddHistory: object, ExtraInfo: object, Method: object, HeaderInfo: object) -> (object, object, object, object, object, object, object) """
        ...

    def ForwardMailer(self): # -> 
        """ ForwardMailer(self: DocumentClass) """
        ...

    def FreezeLayout(self): # -> 
        """ FreezeLayout(self: DocumentClass) """
        ...

    def GetCrossReferenceItems(self, ReferenceType:object) -> Tuple_[object, object]:
        """ GetCrossReferenceItems(self: DocumentClass, ReferenceType: object) -> (object, object) """
        ...

    def GetLetterContent(self) -> LetterContent:
        """ GetLetterContent(self: DocumentClass) -> LetterContent """
        ...

    def GetWorkflowTasks(self): # -> WorkflowTasks
        """ GetWorkflowTasks(self: DocumentClass) -> WorkflowTasks """
        ...

    def GetWorkflowTemplates(self): # -> WorkflowTemplates
        """ GetWorkflowTemplates(self: DocumentClass) -> WorkflowTemplates """
        ...

    def GoTo(self, What:object, Which:object, Count:object, Name:object) -> Tuple_[Range, object, object, object, object]:
        """ GoTo(self: DocumentClass, What: object, Which: object, Count: object, Name: object) -> (Range, object, object, object, object) """
        ...

    def LockServerFile(self): # -> 
        """ LockServerFile(self: DocumentClass) """
        ...

    def MakeCompatibilityDefault(self): # -> 
        """ MakeCompatibilityDefault(self: DocumentClass) """
        ...

    def ManualHyphenation(self): # -> 
        """ ManualHyphenation(self: DocumentClass) """
        ...

    def Merge(self, FileName:str, MergeTarget:object, DetectFormatChanges:object, UseFormattingFrom:object, AddToRecentFiles:object) -> Tuple_[object, object, object, object]:
        """ Merge(self: DocumentClass, FileName: str, MergeTarget: object, DetectFormatChanges: object, UseFormattingFrom: object, AddToRecentFiles: object) -> (object, object, object, object) """
        ...

    def Merge2000(self, FileName:str): # -> 
        """ Merge2000(self: DocumentClass, FileName: str) """
        ...

    def Post(self): # -> 
        """ Post(self: DocumentClass) """
        ...

    def PresentIt(self): # -> 
        """ PresentIt(self: DocumentClass) """
        ...

    def PrintOut(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, ActivePrinterMacGX:object, ManualDuplexPrint:object, PrintZoomColumn:object, PrintZoomRow:object, PrintZoomPaperWidth:object, PrintZoomPaperHeight:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut(self: DocumentClass, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, ActivePrinterMacGX: object, ManualDuplexPrint: object, PrintZoomColumn: object, PrintZoomRow: object, PrintZoomPaperWidth: object, PrintZoomPaperHeight: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOut2000(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, ActivePrinterMacGX:object, ManualDuplexPrint:object, PrintZoomColumn:object, PrintZoomRow:object, PrintZoomPaperWidth:object, PrintZoomPaperHeight:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut2000(self: DocumentClass, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, ActivePrinterMacGX: object, ManualDuplexPrint: object, PrintZoomColumn: object, PrintZoomRow: object, PrintZoomPaperWidth: object, PrintZoomPaperHeight: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOutOld(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, ActivePrinterMacGX:object, ManualDuplexPrint:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOutOld(self: DocumentClass, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, ActivePrinterMacGX: object, ManualDuplexPrint: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintPreview(self): # -> 
        """ PrintPreview(self: DocumentClass) """
        ...

    def Protect(self, Type:WdProtectionType, NoReset:object, Password:object, UseIRM:object, EnforceStyleLock:object) -> Tuple_[object, object, object, object]:
        """ Protect(self: DocumentClass, Type: WdProtectionType, NoReset: object, Password: object, UseIRM: object, EnforceStyleLock: object) -> (object, object, object, object) """
        ...

    def Protect2002(self, Type:WdProtectionType, NoReset:object, Password:object) -> Tuple_[object, object]:
        """ Protect2002(self: DocumentClass, Type: WdProtectionType, NoReset: object, Password: object) -> (object, object) """
        ...

    def Range(self, Start:object, End:object) -> Tuple_[Range, object, object]:
        """ Range(self: DocumentClass, Start: object, End: object) -> (Range, object, object) """
        ...

    def RecheckSmartTags(self): # -> 
        """ RecheckSmartTags(self: DocumentClass) """
        ...

    def Redo(self, Times:object) -> Tuple_[bool, object]:
        """ Redo(self: DocumentClass, Times: object) -> (bool, object) """
        ...

    def RejectAllRevisions(self): # -> 
        """ RejectAllRevisions(self: DocumentClass) """
        ...

    def RejectAllRevisionsShown(self): # -> 
        """ RejectAllRevisionsShown(self: DocumentClass) """
        ...

    def Reload(self): # -> 
        """ Reload(self: DocumentClass) """
        ...

    def ReloadAs(self, Encoding): # ->  # Not found arg types: {'Encoding': 'MsoEncoding'}
        """ ReloadAs(self: DocumentClass, Encoding: MsoEncoding) """
        ...

    def RemoveDocumentInformation(self, RemoveDocInfoType:WdRemoveDocInfoType): # -> 
        """ RemoveDocumentInformation(self: DocumentClass, RemoveDocInfoType: WdRemoveDocInfoType) """
        ...

    def RemoveDocumentWorkspaceHeader(self, ID:str): # -> 
        """ RemoveDocumentWorkspaceHeader(self: DocumentClass, ID: str) """
        ...

    def RemoveLockedStyles(self): # -> 
        """ RemoveLockedStyles(self: DocumentClass) """
        ...

    def RemoveNumbers(self, NumberType:object) -> object:
        """ RemoveNumbers(self: DocumentClass, NumberType: object) -> object """
        ...

    def RemoveSmartTags(self): # -> 
        """ RemoveSmartTags(self: DocumentClass) """
        ...

    def RemoveTheme(self): # -> 
        """ RemoveTheme(self: DocumentClass) """
        ...

    def remove_BuildingBlockInsert(self): # -> 
        """ remove_BuildingBlockInsert(self: DocumentClass, : DocumentEvents2_BuildingBlockInsertEventHandler) """
        ...

    def remove_ContentControlAfterAdd(self): # -> 
        """ remove_ContentControlAfterAdd(self: DocumentClass, : DocumentEvents2_ContentControlAfterAddEventHandler) """
        ...

    def remove_ContentControlBeforeContentUpdate(self): # -> 
        """ remove_ContentControlBeforeContentUpdate(self: DocumentClass, : DocumentEvents2_ContentControlBeforeContentUpdateEventHandler) """
        ...

    def remove_ContentControlBeforeDelete(self): # -> 
        """ remove_ContentControlBeforeDelete(self: DocumentClass, : DocumentEvents2_ContentControlBeforeDeleteEventHandler) """
        ...

    def remove_ContentControlBeforeStoreUpdate(self): # -> 
        """ remove_ContentControlBeforeStoreUpdate(self: DocumentClass, : DocumentEvents2_ContentControlBeforeStoreUpdateEventHandler) """
        ...

    def remove_ContentControlOnEnter(self): # -> 
        """ remove_ContentControlOnEnter(self: DocumentClass, : DocumentEvents2_ContentControlOnEnterEventHandler) """
        ...

    def remove_ContentControlOnExit(self): # -> 
        """ remove_ContentControlOnExit(self: DocumentClass, : DocumentEvents2_ContentControlOnExitEventHandler) """
        ...

    def remove_Sync(self): # -> 
        """ remove_Sync(self: DocumentClass, : DocumentEvents2_SyncEventHandler) """
        ...

    def remove_XMLAfterInsert(self): # -> 
        """ remove_XMLAfterInsert(self: DocumentClass, : DocumentEvents2_XMLAfterInsertEventHandler) """
        ...

    def remove_XMLBeforeDelete(self): # -> 
        """ remove_XMLBeforeDelete(self: DocumentClass, : DocumentEvents2_XMLBeforeDeleteEventHandler) """
        ...

    def Repaginate(self): # -> 
        """ Repaginate(self: DocumentClass) """
        ...

    def Reply(self): # -> 
        """ Reply(self: DocumentClass) """
        ...

    def ReplyAll(self): # -> 
        """ ReplyAll(self: DocumentClass) """
        ...

    def ReplyWithChanges(self, ShowMessage:object) -> object:
        """ ReplyWithChanges(self: DocumentClass, ShowMessage: object) -> object """
        ...

    def ResetFormFields(self): # -> 
        """ ResetFormFields(self: DocumentClass) """
        ...

    def ReturnToLastReadPosition(self) -> int:
        """ ReturnToLastReadPosition(self: DocumentClass) -> int """
        ...

    def Route(self): # -> 
        """ Route(self: DocumentClass) """
        ...

    def RunAutoMacro(self, Which:WdAutoMacros): # -> 
        """ RunAutoMacro(self: DocumentClass, Which: WdAutoMacros) """
        ...

    def RunLetterWizard(self, LetterContent:object, WizardMode:object) -> Tuple_[object, object]:
        """ RunLetterWizard(self: DocumentClass, LetterContent: object, WizardMode: object) -> (object, object) """
        ...

    def Save(self): # -> 
        """ Save(self: DocumentClass) """
        ...

    def SaveAs(self, FileName:object, FileFormat:object, LockComments:object, Password:object, AddToRecentFiles:object, WritePassword:object, ReadOnlyRecommended:object, EmbedTrueTypeFonts:object, SaveNativePictureFormat:object, SaveFormsData:object, SaveAsAOCELetter:object, Encoding:object, InsertLineBreaks:object, AllowSubstitutions:object, LineEnding:object, AddBiDiMarks:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ SaveAs(self: DocumentClass, FileName: object, FileFormat: object, LockComments: object, Password: object, AddToRecentFiles: object, WritePassword: object, ReadOnlyRecommended: object, EmbedTrueTypeFonts: object, SaveNativePictureFormat: object, SaveFormsData: object, SaveAsAOCELetter: object, Encoding: object, InsertLineBreaks: object, AllowSubstitutions: object, LineEnding: object, AddBiDiMarks: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def SaveAs2(self, FileName:object, FileFormat:object, LockComments:object, Password:object, AddToRecentFiles:object, WritePassword:object, ReadOnlyRecommended:object, EmbedTrueTypeFonts:object, SaveNativePictureFormat:object, SaveFormsData:object, SaveAsAOCELetter:object, Encoding:object, InsertLineBreaks:object, AllowSubstitutions:object, LineEnding:object, AddBiDiMarks:object, CompatibilityMode:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ SaveAs2(self: DocumentClass, FileName: object, FileFormat: object, LockComments: object, Password: object, AddToRecentFiles: object, WritePassword: object, ReadOnlyRecommended: object, EmbedTrueTypeFonts: object, SaveNativePictureFormat: object, SaveFormsData: object, SaveAsAOCELetter: object, Encoding: object, InsertLineBreaks: object, AllowSubstitutions: object, LineEnding: object, AddBiDiMarks: object, CompatibilityMode: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def SaveAs2000(self, FileName:object, FileFormat:object, LockComments:object, Password:object, AddToRecentFiles:object, WritePassword:object, ReadOnlyRecommended:object, EmbedTrueTypeFonts:object, SaveNativePictureFormat:object, SaveFormsData:object, SaveAsAOCELetter:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object]:
        """ SaveAs2000(self: DocumentClass, FileName: object, FileFormat: object, LockComments: object, Password: object, AddToRecentFiles: object, WritePassword: object, ReadOnlyRecommended: object, EmbedTrueTypeFonts: object, SaveNativePictureFormat: object, SaveFormsData: object, SaveAsAOCELetter: object) -> (object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def SaveAsQuickStyleSet(self, FileName:str): # -> 
        """ SaveAsQuickStyleSet(self: DocumentClass, FileName: str) """
        ...

    def SaveCopyAs(self, FileName:object, FileFormat:object, LockComments:object, Password:object, AddToRecentFiles:object, WritePassword:object, ReadOnlyRecommended:object, EmbedTrueTypeFonts:object, SaveNativePictureFormat:object, SaveFormsData:object, SaveAsAOCELetter:object, Encoding:object, InsertLineBreaks:object, AllowSubstitutions:object, LineEnding:object, AddBiDiMarks:object, CompatibilityMode:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ SaveCopyAs(self: DocumentClass, FileName: object, FileFormat: object, LockComments: object, Password: object, AddToRecentFiles: object, WritePassword: object, ReadOnlyRecommended: object, EmbedTrueTypeFonts: object, SaveNativePictureFormat: object, SaveFormsData: object, SaveAsAOCELetter: object, Encoding: object, InsertLineBreaks: object, AllowSubstitutions: object, LineEnding: object, AddBiDiMarks: object, CompatibilityMode: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def sblt(self, s:str): # -> 
        """ sblt(self: DocumentClass, s: str) """
        ...

    def Select(self): # -> 
        """ Select(self: DocumentClass) """
        ...

    def SelectAllEditableRanges(self, EditorID:object) -> object:
        """ SelectAllEditableRanges(self: DocumentClass, EditorID: object) -> object """
        ...

    def SelectContentControlsByTag(self, Tag:str) -> ContentControls:
        """ SelectContentControlsByTag(self: DocumentClass, Tag: str) -> ContentControls """
        ...

    def SelectContentControlsByTitle(self, Title:str) -> ContentControls:
        """ SelectContentControlsByTitle(self: DocumentClass, Title: str) -> ContentControls """
        ...

    def SelectLinkedControls(self, Node) -> ContentControls: # Not found arg types: {'Node': 'CustomXMLNode'}
        """ SelectLinkedControls(self: DocumentClass, Node: CustomXMLNode) -> ContentControls """
        ...

    def SelectNodes(self, XPath:str, PrefixMapping:str, FastSearchSkippingTextNodes:bool) -> XMLNodes:
        """ SelectNodes(self: DocumentClass, XPath: str, PrefixMapping: str, FastSearchSkippingTextNodes: bool) -> XMLNodes """
        ...

    def SelectSingleNode(self, XPath:str, PrefixMapping:str, FastSearchSkippingTextNodes:bool) -> XMLNode:
        """ SelectSingleNode(self: DocumentClass, XPath: str, PrefixMapping: str, FastSearchSkippingTextNodes: bool) -> XMLNode """
        ...

    def SelectUnlinkedControls(self, Stream) -> ContentControls: # Not found arg types: {'Stream': 'CustomXMLPart'}
        """ SelectUnlinkedControls(self: DocumentClass, Stream: CustomXMLPart) -> ContentControls """
        ...

    def SendFax(self, Address:str, Subject:object) -> object:
        """ SendFax(self: DocumentClass, Address: str, Subject: object) -> object """
        ...

    def SendFaxOverInternet(self, Recipients:object, Subject:object, ShowMessage:object) -> Tuple_[object, object, object]:
        """ SendFaxOverInternet(self: DocumentClass, Recipients: object, Subject: object, ShowMessage: object) -> (object, object, object) """
        ...

    def SendForReview(self, Recipients:object, Subject:object, ShowMessage:object, IncludeAttachment:object) -> Tuple_[object, object, object, object]:
        """ SendForReview(self: DocumentClass, Recipients: object, Subject: object, ShowMessage: object, IncludeAttachment: object) -> (object, object, object, object) """
        ...

    def SendMail(self): # -> 
        """ SendMail(self: DocumentClass) """
        ...

    def SendMailer(self, FileFormat:object, Priority:object) -> Tuple_[object, object]:
        """ SendMailer(self: DocumentClass, FileFormat: object, Priority: object) -> (object, object) """
        ...

    def SetCompatibilityMode(self, Mode:int): # -> 
        """ SetCompatibilityMode(self: DocumentClass, Mode: int) """
        ...

    def SetDefaultTableStyle(self, Style:object, SetInTemplate:bool) -> object:
        """ SetDefaultTableStyle(self: DocumentClass, Style: object, SetInTemplate: bool) -> object """
        ...

    def SetLetterContent(self, LetterContent:object) -> object:
        """ SetLetterContent(self: DocumentClass, LetterContent: object) -> object """
        ...

    def SetPasswordEncryptionOptions(self, PasswordEncryptionProvider:str, PasswordEncryptionAlgorithm:str, PasswordEncryptionKeyLength:int, PasswordEncryptionFileProperties:object) -> object:
        """ SetPasswordEncryptionOptions(self: DocumentClass, PasswordEncryptionProvider: str, PasswordEncryptionAlgorithm: str, PasswordEncryptionKeyLength: int, PasswordEncryptionFileProperties: object) -> object """
        ...

    def ToggleFormsDesign(self): # -> 
        """ ToggleFormsDesign(self: DocumentClass) """
        ...

    def TransformDocument(self, Path:str, DataOnly:bool): # -> 
        """ TransformDocument(self: DocumentClass, Path: str, DataOnly: bool) """
        ...

    def Undo(self, Times:object) -> Tuple_[bool, object]:
        """ Undo(self: DocumentClass, Times: object) -> (bool, object) """
        ...

    def UndoClear(self): # -> 
        """ UndoClear(self: DocumentClass) """
        ...

    def UnfreezeLayout(self): # -> 
        """ UnfreezeLayout(self: DocumentClass) """
        ...

    def Unprotect(self, Password:object) -> object:
        """ Unprotect(self: DocumentClass, Password: object) -> object """
        ...

    def UpdateStyles(self): # -> 
        """ UpdateStyles(self: DocumentClass) """
        ...

    def UpdateSummaryProperties(self): # -> 
        """ UpdateSummaryProperties(self: DocumentClass) """
        ...

    def ViewCode(self): # -> 
        """ ViewCode(self: DocumentClass) """
        ...

    def ViewPropertyBrowser(self): # -> 
        """ ViewPropertyBrowser(self: DocumentClass) """
        ...

    def WebPagePreview(self): # -> 
        """ WebPagePreview(self: DocumentClass) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BuildingBlockInsert = ...
    ContentControlAfterAdd = ...
    ContentControlBeforeContentUpdate = ...
    ContentControlBeforeDelete = ...
    ContentControlBeforeStoreUpdate = ...
    ContentControlOnEnter = ...
    ContentControlOnExit = ...
    DocumentEvents2_Event_Close = ...
    DocumentEvents2_Event_Sync = ...
    DocumentEvents_Event_Close = ...
    DocumentEvents_Event_New = ...
    DocumentEvents_Event_Open = ...
    New = ...
    Open = ...
    XMLAfterInsert = ...
    XMLBeforeDelete = ...


class DocumentEvents: # skipped bases: <type 'object'>
    """ no doc """
    def Close(self): # -> 
        """ Close(self: DocumentEvents) """
        ...

    def New(self): # -> 
        """ New(self: DocumentEvents) """
        ...

    def Open(self): # -> 
        """ Open(self: DocumentEvents) """
        ...


class DocumentEvents2: # skipped bases: <type 'object'>
    """ no doc """
    def BuildingBlockInsert(self, Range:Range, Name:str, Category:str, BlockType:str, Template:str): # -> 
        """ BuildingBlockInsert(self: DocumentEvents2, Range: Range, Name: str, Category: str, BlockType: str, Template: str) """
        ...

    def Close(self): # -> 
        """ Close(self: DocumentEvents2) """
        ...

    def ContentControlAfterAdd(self, NewContentControl:ContentControl, InUndoRedo:bool): # -> 
        """ ContentControlAfterAdd(self: DocumentEvents2, NewContentControl: ContentControl, InUndoRedo: bool) """
        ...

    def ContentControlBeforeContentUpdate(self, ContentControl, Content) -> str:
        """ ContentControlBeforeContentUpdate(self: DocumentEvents2, ContentControl: ContentControl) -> str """
        ...

    def ContentControlBeforeDelete(self, OldContentControl:ContentControl, InUndoRedo:bool): # -> 
        """ ContentControlBeforeDelete(self: DocumentEvents2, OldContentControl: ContentControl, InUndoRedo: bool) """
        ...

    def ContentControlBeforeStoreUpdate(self, ContentControl, Content) -> str:
        """ ContentControlBeforeStoreUpdate(self: DocumentEvents2, ContentControl: ContentControl) -> str """
        ...

    def ContentControlOnEnter(self, ContentControl:ContentControl): # -> 
        """ ContentControlOnEnter(self: DocumentEvents2, ContentControl: ContentControl) """
        ...

    def ContentControlOnExit(self, ContentControl, Cancel) -> bool:
        """ ContentControlOnExit(self: DocumentEvents2, ContentControl: ContentControl) -> bool """
        ...

    def New(self): # -> 
        """ New(self: DocumentEvents2) """
        ...

    def Open(self): # -> 
        """ Open(self: DocumentEvents2) """
        ...

    def Sync(self, SyncEventType): # ->  # Not found arg types: {'SyncEventType': 'MsoSyncEventType'}
        """ Sync(self: DocumentEvents2, SyncEventType: MsoSyncEventType) """
        ...

    def XMLAfterInsert(self, NewXMLNode:XMLNode, InUndoRedo:bool): # -> 
        """ XMLAfterInsert(self: DocumentEvents2, NewXMLNode: XMLNode, InUndoRedo: bool) """
        ...

    def XMLBeforeDelete(self, DeletedRange:Range, OldXMLNode:XMLNode, InUndoRedo:bool): # -> 
        """ XMLBeforeDelete(self: DocumentEvents2, DeletedRange: Range, OldXMLNode: XMLNode, InUndoRedo: bool) """
        ...


class DocumentEvents2_BuildingBlockInsertEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_BuildingBlockInsertEventHandler(: object, : UIntPtr) """
    def Invoke(self, Range:Range, Name:str, Category:str, BlockType:str, Template:str): # -> 
        """ Invoke(self: DocumentEvents2_BuildingBlockInsertEventHandler, Range: Range, Name: str, Category: str, BlockType: str, Template: str) """
        ...


class DocumentEvents2_CloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_CloseEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: DocumentEvents2_CloseEventHandler) """
        ...


class DocumentEvents2_ContentControlAfterAddEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_ContentControlAfterAddEventHandler(: object, : UIntPtr) """
    def Invoke(self, NewContentControl:ContentControl, InUndoRedo:bool): # -> 
        """ Invoke(self: DocumentEvents2_ContentControlAfterAddEventHandler, NewContentControl: ContentControl, InUndoRedo: bool) """
        ...


class DocumentEvents2_ContentControlBeforeContentUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_ContentControlBeforeContentUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, ContentControl, Content) -> str:
        """ Invoke(self: DocumentEvents2_ContentControlBeforeContentUpdateEventHandler, ContentControl: ContentControl) -> str """
        ...


class DocumentEvents2_ContentControlBeforeDeleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_ContentControlBeforeDeleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, OldContentControl:ContentControl, InUndoRedo:bool): # -> 
        """ Invoke(self: DocumentEvents2_ContentControlBeforeDeleteEventHandler, OldContentControl: ContentControl, InUndoRedo: bool) """
        ...


class DocumentEvents2_ContentControlBeforeStoreUpdateEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_ContentControlBeforeStoreUpdateEventHandler(: object, : UIntPtr) """
    def Invoke(self, ContentControl, Content) -> str:
        """ Invoke(self: DocumentEvents2_ContentControlBeforeStoreUpdateEventHandler, ContentControl: ContentControl) -> str """
        ...


class DocumentEvents2_ContentControlOnEnterEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_ContentControlOnEnterEventHandler(: object, : UIntPtr) """
    def Invoke(self, ContentControl:ContentControl): # -> 
        """ Invoke(self: DocumentEvents2_ContentControlOnEnterEventHandler, ContentControl: ContentControl) """
        ...


class DocumentEvents2_ContentControlOnExitEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_ContentControlOnExitEventHandler(: object, : UIntPtr) """
    def Invoke(self, ContentControl, Cancel) -> bool:
        """ Invoke(self: DocumentEvents2_ContentControlOnExitEventHandler, ContentControl: ContentControl) -> bool """
        ...


class DocumentEvents2_NewEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_NewEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: DocumentEvents2_NewEventHandler) """
        ...


class DocumentEvents2_OpenEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_OpenEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: DocumentEvents2_OpenEventHandler) """
        ...


class DocumentEvents2_SinkHelper(DocumentEvents2): # skipped bases: <type 'object'>
    """ no doc """
    m_BuildingBlockInsertDelegate = ...
    m_CloseDelegate = ...
    m_ContentControlAfterAddDelegate = ...
    m_ContentControlBeforeContentUpdateDelegate = ...
    m_ContentControlBeforeDeleteDelegate = ...
    m_ContentControlBeforeStoreUpdateDelegate = ...
    m_ContentControlOnEnterDelegate = ...
    m_ContentControlOnExitDelegate = ...
    m_dwCookie = ...
    m_NewDelegate = ...
    m_OpenDelegate = ...
    m_SyncDelegate = ...
    m_XMLAfterInsertDelegate = ...
    m_XMLBeforeDeleteDelegate = ...


class DocumentEvents2_SyncEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_SyncEventHandler(: object, : UIntPtr) """
    def Invoke(self, SyncEventType): # ->  # Not found arg types: {'SyncEventType': 'MsoSyncEventType'}
        """ Invoke(self: DocumentEvents2_SyncEventHandler, SyncEventType: MsoSyncEventType) """
        ...


class DocumentEvents2_XMLAfterInsertEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_XMLAfterInsertEventHandler(: object, : UIntPtr) """
    def Invoke(self, NewXMLNode:XMLNode, InUndoRedo:bool): # -> 
        """ Invoke(self: DocumentEvents2_XMLAfterInsertEventHandler, NewXMLNode: XMLNode, InUndoRedo: bool) """
        ...


class DocumentEvents2_XMLBeforeDeleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents2_XMLBeforeDeleteEventHandler(: object, : UIntPtr) """
    def Invoke(self, DeletedRange:Range, OldXMLNode:XMLNode, InUndoRedo:bool): # -> 
        """ Invoke(self: DocumentEvents2_XMLBeforeDeleteEventHandler, DeletedRange: Range, OldXMLNode: XMLNode, InUndoRedo: bool) """
        ...


class DocumentEvents_CloseEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents_CloseEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: DocumentEvents_CloseEventHandler) """
        ...


class DocumentEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_Close(self): # -> 
        """ add_Close(self: DocumentEvents_Event, : DocumentEvents_CloseEventHandler) """
        ...

    def add_New(self): # -> 
        """ add_New(self: DocumentEvents_Event, : DocumentEvents_NewEventHandler) """
        ...

    def add_Open(self): # -> 
        """ add_Open(self: DocumentEvents_Event, : DocumentEvents_OpenEventHandler) """
        ...

    def remove_Close(self): # -> 
        """ remove_Close(self: DocumentEvents_Event, : DocumentEvents_CloseEventHandler) """
        ...

    def remove_New(self): # -> 
        """ remove_New(self: DocumentEvents_Event, : DocumentEvents_NewEventHandler) """
        ...

    def remove_Open(self): # -> 
        """ remove_Open(self: DocumentEvents_Event, : DocumentEvents_OpenEventHandler) """
        ...

    Close = ...
    New = ...
    Open = ...


class DocumentEvents_NewEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents_NewEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: DocumentEvents_NewEventHandler) """
        ...


class DocumentEvents_OpenEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ DocumentEvents_OpenEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: DocumentEvents_OpenEventHandler) """
        ...


class DocumentEvents_SinkHelper(DocumentEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_CloseDelegate = ...
    m_dwCookie = ...
    m_NewDelegate = ...
    m_OpenDelegate = ...


class Documents(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Documents) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Documents) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Documents) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Documents) -> object """
        ...


    def Add(self, Template:object, NewTemplate:object, DocumentType:object, Visible:object) -> Tuple_[Document, object, object, object, object]:
        """ Add(self: Documents, Template: object, NewTemplate: object, DocumentType: object, Visible: object) -> (Document, object, object, object, object) """
        ...

    def AddBlogDocument(self, ProviderID:str, PostURL:str, BlogName:str, PostID:str) -> Document:
        """ AddBlogDocument(self: Documents, ProviderID: str, PostURL: str, BlogName: str, PostID: str) -> Document """
        ...

    def AddOld(self, Template:object, NewTemplate:object) -> Tuple_[Document, object, object]:
        """ AddOld(self: Documents, Template: object, NewTemplate: object) -> (Document, object, object) """
        ...

    def CanCheckOut(self, FileName:str) -> bool:
        """ CanCheckOut(self: Documents, FileName: str) -> bool """
        ...

    def CheckOut(self, FileName:str): # -> 
        """ CheckOut(self: Documents, FileName: str) """
        ...

    def Close(self, SaveChanges:object, OriginalFormat:object, RouteDocument:object) -> Tuple_[object, object, object]:
        """ Close(self: Documents, SaveChanges: object, OriginalFormat: object, RouteDocument: object) -> (object, object, object) """
        ...

    def Open(self, FileName:object, ConfirmConversions:object, ReadOnly:object, AddToRecentFiles:object, PasswordDocument:object, PasswordTemplate:object, Revert:object, WritePasswordDocument:object, WritePasswordTemplate:object, Format:object, Encoding:object, Visible:object, OpenAndRepair:object, DocumentDirection:object, NoEncodingDialog:object, XMLTransform:object) -> Tuple_[Document, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Open(self: Documents, FileName: object, ConfirmConversions: object, ReadOnly: object, AddToRecentFiles: object, PasswordDocument: object, PasswordTemplate: object, Revert: object, WritePasswordDocument: object, WritePasswordTemplate: object, Format: object, Encoding: object, Visible: object, OpenAndRepair: object, DocumentDirection: object, NoEncodingDialog: object, XMLTransform: object) -> (Document, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Open2000(self, FileName:object, ConfirmConversions:object, ReadOnly:object, AddToRecentFiles:object, PasswordDocument:object, PasswordTemplate:object, Revert:object, WritePasswordDocument:object, WritePasswordTemplate:object, Format:object, Encoding:object, Visible:object) -> Tuple_[Document, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Open2000(self: Documents, FileName: object, ConfirmConversions: object, ReadOnly: object, AddToRecentFiles: object, PasswordDocument: object, PasswordTemplate: object, Revert: object, WritePasswordDocument: object, WritePasswordTemplate: object, Format: object, Encoding: object, Visible: object) -> (Document, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Open2002(self, FileName:object, ConfirmConversions:object, ReadOnly:object, AddToRecentFiles:object, PasswordDocument:object, PasswordTemplate:object, Revert:object, WritePasswordDocument:object, WritePasswordTemplate:object, Format:object, Encoding:object, Visible:object, OpenAndRepair:object, DocumentDirection:object, NoEncodingDialog:object) -> Tuple_[Document, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Open2002(self: Documents, FileName: object, ConfirmConversions: object, ReadOnly: object, AddToRecentFiles: object, PasswordDocument: object, PasswordTemplate: object, Revert: object, WritePasswordDocument: object, WritePasswordTemplate: object, Format: object, Encoding: object, Visible: object, OpenAndRepair: object, DocumentDirection: object, NoEncodingDialog: object) -> (Document, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def OpenNoRepairDialog(self, FileName:object, ConfirmConversions:object, ReadOnly:object, AddToRecentFiles:object, PasswordDocument:object, PasswordTemplate:object, Revert:object, WritePasswordDocument:object, WritePasswordTemplate:object, Format:object, Encoding:object, Visible:object, OpenAndRepair:object, DocumentDirection:object, NoEncodingDialog:object, XMLTransform:object) -> Tuple_[Document, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ OpenNoRepairDialog(self: Documents, FileName: object, ConfirmConversions: object, ReadOnly: object, AddToRecentFiles: object, PasswordDocument: object, PasswordTemplate: object, Revert: object, WritePasswordDocument: object, WritePasswordTemplate: object, Format: object, Encoding: object, Visible: object, OpenAndRepair: object, DocumentDirection: object, NoEncodingDialog: object, XMLTransform: object) -> (Document, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def OpenOld(self, FileName:object, ConfirmConversions:object, ReadOnly:object, AddToRecentFiles:object, PasswordDocument:object, PasswordTemplate:object, Revert:object, WritePasswordDocument:object, WritePasswordTemplate:object, Format:object) -> Tuple_[Document, object, object, object, object, object, object, object, object, object, object]:
        """ OpenOld(self: Documents, FileName: object, ConfirmConversions: object, ReadOnly: object, AddToRecentFiles: object, PasswordDocument: object, PasswordTemplate: object, Revert: object, WritePasswordDocument: object, WritePasswordTemplate: object, Format: object) -> (Document, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Save(self, NoPrompt:object, OriginalFormat:object) -> Tuple_[object, object]:
        """ Save(self: Documents, NoPrompt: object, OriginalFormat: object) -> (object, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class DownBars: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: DownBars) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: DownBars) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DownBars) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: DownBars) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DownBars) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: DownBars) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DownBars) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DownBars) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: DownBars) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: DownBars) -> object """
        ...


class DropCap: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DropCap) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DropCap) -> int """
        ...

    @property
    def DistanceFromText(self) -> Single:
        """
        Get: DistanceFromText(self: DropCap) -> Single
        Set: DistanceFromText(self: DropCap) = value
        """
        ...

    @property
    def FontName(self) -> str:
        """
        Get: FontName(self: DropCap) -> str
        Set: FontName(self: DropCap) = value
        """
        ...

    @property
    def LinesToDrop(self) -> int:
        """
        Get: LinesToDrop(self: DropCap) -> int
        Set: LinesToDrop(self: DropCap) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DropCap) -> object """
        ...

    @property
    def Position(self) -> WdDropPosition:
        """
        Get: Position(self: DropCap) -> WdDropPosition
        Set: Position(self: DropCap) = value
        """
        ...


    def Clear(self): # -> 
        """ Clear(self: DropCap) """
        ...

    def Enable(self): # -> 
        """ Enable(self: DropCap) """
        ...


class DropDown: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: DropDown) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DropDown) -> int """
        ...

    @property
    def Default(self) -> int:
        """
        Get: Default(self: DropDown) -> int
        Set: Default(self: DropDown) = value
        """
        ...

    @property
    def ListEntries(self) -> ListEntries:
        """ Get: ListEntries(self: DropDown) -> ListEntries """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DropDown) -> object """
        ...

    @property
    def Valid(self) -> bool:
        """ Get: Valid(self: DropDown) -> bool """
        ...

    @property
    def Value(self) -> int:
        """
        Get: Value(self: DropDown) -> int
        Set: Value(self: DropDown) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class DropLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: DropLines) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: DropLines) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: DropLines) -> int """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: DropLines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DropLines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: DropLines) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: DropLines) """
        ...

    def Select(self): # -> 
        """ Select(self: DropLines) """
        ...


class Editor: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Editor) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Editor) -> int """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: Editor) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Editor) -> str """
        ...

    @property
    def NextRange(self) -> Range:
        """ Get: NextRange(self: Editor) -> Range """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Editor) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Editor) -> Range """
        ...


    def Delete(self): # -> 
        """ Delete(self: Editor) """
        ...

    def DeleteAll(self): # -> 
        """ DeleteAll(self: Editor) """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: Editor) """
        ...


class Editors: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Editors) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Editors) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Editors) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Editors) -> object """
        ...


    def Add(self, EditorID:object) -> Tuple_[Editor, object]:
        """ Add(self: Editors, EditorID: object) -> (Editor, object) """
        ...

    def Item(self, Index:object) -> Tuple_[Editor, object]:
        """ Item(self: Editors, Index: object) -> (Editor, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class Email: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Email) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Email) -> int """
        ...

    @property
    def CurrentEmailAuthor(self) -> EmailAuthor:
        """ Get: CurrentEmailAuthor(self: Email) -> EmailAuthor """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Email) -> object """
        ...



class EmailAuthor: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: EmailAuthor) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: EmailAuthor) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: EmailAuthor) -> object """
        ...

    @property
    def Style(self) -> Style:
        """ Get: Style(self: EmailAuthor) -> Style """
        ...



class EmailOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: EmailOptions) -> Application """
        ...

    @property
    def AutoFormatAsYouTypeApplyBorders(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyBorders(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeApplyBorders(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyBulletedLists(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyBulletedLists(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeApplyBulletedLists(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyClosings(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyClosings(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeApplyClosings(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyDates(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyDates(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeApplyDates(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyFirstIndents(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyFirstIndents(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeApplyFirstIndents(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyHeadings(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyHeadings(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeApplyHeadings(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyNumberedLists(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyNumberedLists(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeApplyNumberedLists(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyTables(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyTables(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeApplyTables(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeAutoLetterWizard(self) -> bool:
        """
        Get: AutoFormatAsYouTypeAutoLetterWizard(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeAutoLetterWizard(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeDefineStyles(self) -> bool:
        """
        Get: AutoFormatAsYouTypeDefineStyles(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeDefineStyles(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeDeleteAutoSpaces(self) -> bool:
        """
        Get: AutoFormatAsYouTypeDeleteAutoSpaces(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeDeleteAutoSpaces(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeFormatListItemBeginning(self) -> bool:
        """
        Get: AutoFormatAsYouTypeFormatListItemBeginning(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeFormatListItemBeginning(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeInsertClosings(self) -> bool:
        """
        Get: AutoFormatAsYouTypeInsertClosings(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeInsertClosings(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeInsertOvers(self) -> bool:
        """
        Get: AutoFormatAsYouTypeInsertOvers(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeInsertOvers(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeMatchParentheses(self) -> bool:
        """
        Get: AutoFormatAsYouTypeMatchParentheses(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeMatchParentheses(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceFarEastDashes(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceFarEastDashes(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeReplaceFarEastDashes(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceFractions(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceFractions(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeReplaceFractions(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceHyperlinks(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceHyperlinks(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeReplaceHyperlinks(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceOrdinals(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceOrdinals(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeReplaceOrdinals(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplacePlainTextEmphasis(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplacePlainTextEmphasis(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeReplacePlainTextEmphasis(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceQuotes(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceQuotes(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeReplaceQuotes(self: EmailOptions) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceSymbols(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceSymbols(self: EmailOptions) -> bool
        Set: AutoFormatAsYouTypeReplaceSymbols(self: EmailOptions) = value
        """
        ...

    @property
    def ComposeStyle(self) -> Style:
        """ Get: ComposeStyle(self: EmailOptions) -> Style """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: EmailOptions) -> int """
        ...

    @property
    def Dummy1(self) -> bool:
        """ Get: Dummy1(self: EmailOptions) -> bool """
        ...

    @property
    def Dummy2(self) -> bool:
        """ Get: Dummy2(self: EmailOptions) -> bool """
        ...

    @property
    def EmailSignature(self) -> EmailSignature:
        """ Get: EmailSignature(self: EmailOptions) -> EmailSignature """
        ...

    @property
    def EmbedSmartTag(self) -> bool:
        """
        Get: EmbedSmartTag(self: EmailOptions) -> bool
        Set: EmbedSmartTag(self: EmailOptions) = value
        """
        ...

    @property
    def HTMLFidelity(self) -> WdEmailHTMLFidelity:
        """
        Get: HTMLFidelity(self: EmailOptions) -> WdEmailHTMLFidelity
        Set: HTMLFidelity(self: EmailOptions) = value
        """
        ...

    @property
    def MarkComments(self) -> bool:
        """
        Get: MarkComments(self: EmailOptions) -> bool
        Set: MarkComments(self: EmailOptions) = value
        """
        ...

    @property
    def MarkCommentsWith(self) -> str:
        """
        Get: MarkCommentsWith(self: EmailOptions) -> str
        Set: MarkCommentsWith(self: EmailOptions) = value
        """
        ...

    @property
    def NewColorOnReply(self) -> bool:
        """
        Get: NewColorOnReply(self: EmailOptions) -> bool
        Set: NewColorOnReply(self: EmailOptions) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: EmailOptions) -> object """
        ...

    @property
    def PlainTextStyle(self) -> Style:
        """ Get: PlainTextStyle(self: EmailOptions) -> Style """
        ...

    @property
    def RelyOnCSS(self) -> bool:
        """
        Get: RelyOnCSS(self: EmailOptions) -> bool
        Set: RelyOnCSS(self: EmailOptions) = value
        """
        ...

    @property
    def ReplyStyle(self) -> Style:
        """ Get: ReplyStyle(self: EmailOptions) -> Style """
        ...

    @property
    def TabIndentKey(self) -> bool:
        """
        Get: TabIndentKey(self: EmailOptions) -> bool
        Set: TabIndentKey(self: EmailOptions) = value
        """
        ...

    @property
    def ThemeName(self) -> str:
        """
        Get: ThemeName(self: EmailOptions) -> str
        Set: ThemeName(self: EmailOptions) = value
        """
        ...

    @property
    def UseThemeStyle(self) -> bool:
        """
        Get: UseThemeStyle(self: EmailOptions) -> bool
        Set: UseThemeStyle(self: EmailOptions) = value
        """
        ...

    @property
    def UseThemeStyleOnReply(self) -> bool:
        """
        Get: UseThemeStyleOnReply(self: EmailOptions) -> bool
        Set: UseThemeStyleOnReply(self: EmailOptions) = value
        """
        ...


    def Dummy3(self): # -> 
        """ Dummy3(self: EmailOptions) """
        ...


class EmailSignature: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: EmailSignature) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: EmailSignature) -> int """
        ...

    @property
    def EmailSignatureEntries(self) -> EmailSignatureEntries:
        """ Get: EmailSignatureEntries(self: EmailSignature) -> EmailSignatureEntries """
        ...

    @property
    def NewMessageSignature(self) -> str:
        """
        Get: NewMessageSignature(self: EmailSignature) -> str
        Set: NewMessageSignature(self: EmailSignature) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: EmailSignature) -> object """
        ...

    @property
    def ReplyMessageSignature(self) -> str:
        """
        Get: ReplyMessageSignature(self: EmailSignature) -> str
        Set: ReplyMessageSignature(self: EmailSignature) = value
        """
        ...



class EmailSignatureEntries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: EmailSignatureEntries) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: EmailSignatureEntries) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: EmailSignatureEntries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: EmailSignatureEntries) -> object """
        ...


    def Add(self, Name:str, Range:Range) -> EmailSignatureEntry:
        """ Add(self: EmailSignatureEntries, Name: str, Range: Range) -> EmailSignatureEntry """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class EmailSignatureEntry: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: EmailSignatureEntry) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: EmailSignatureEntry) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: EmailSignatureEntry) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: EmailSignatureEntry) -> str
        Set: Name(self: EmailSignatureEntry) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: EmailSignatureEntry) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: EmailSignatureEntry) """
        ...


class Endnote: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Endnote) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Endnote) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Endnote) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Endnote) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Endnote) -> Range """
        ...

    @property
    def Reference(self) -> Range:
        """ Get: Reference(self: Endnote) -> Range """
        ...


    def Delete(self): # -> 
        """ Delete(self: Endnote) """
        ...


class EndnoteOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: EndnoteOptions) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: EndnoteOptions) -> int """
        ...

    @property
    def Location(self) -> WdEndnoteLocation:
        """
        Get: Location(self: EndnoteOptions) -> WdEndnoteLocation
        Set: Location(self: EndnoteOptions) = value
        """
        ...

    @property
    def NumberingRule(self) -> WdNumberingRule:
        """
        Get: NumberingRule(self: EndnoteOptions) -> WdNumberingRule
        Set: NumberingRule(self: EndnoteOptions) = value
        """
        ...

    @property
    def NumberStyle(self) -> WdNoteNumberStyle:
        """
        Get: NumberStyle(self: EndnoteOptions) -> WdNoteNumberStyle
        Set: NumberStyle(self: EndnoteOptions) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: EndnoteOptions) -> object """
        ...

    @property
    def StartingNumber(self) -> int:
        """
        Get: StartingNumber(self: EndnoteOptions) -> int
        Set: StartingNumber(self: EndnoteOptions) = value
        """
        ...



class Endnotes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Endnotes) -> Application """
        ...

    @property
    def ContinuationNotice(self) -> Range:
        """ Get: ContinuationNotice(self: Endnotes) -> Range """
        ...

    @property
    def ContinuationSeparator(self) -> Range:
        """ Get: ContinuationSeparator(self: Endnotes) -> Range """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Endnotes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Endnotes) -> int """
        ...

    @property
    def Location(self) -> WdEndnoteLocation:
        """
        Get: Location(self: Endnotes) -> WdEndnoteLocation
        Set: Location(self: Endnotes) = value
        """
        ...

    @property
    def NumberingRule(self) -> WdNumberingRule:
        """
        Get: NumberingRule(self: Endnotes) -> WdNumberingRule
        Set: NumberingRule(self: Endnotes) = value
        """
        ...

    @property
    def NumberStyle(self) -> WdNoteNumberStyle:
        """
        Get: NumberStyle(self: Endnotes) -> WdNoteNumberStyle
        Set: NumberStyle(self: Endnotes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Endnotes) -> object """
        ...

    @property
    def Separator(self) -> Range:
        """ Get: Separator(self: Endnotes) -> Range """
        ...

    @property
    def StartingNumber(self) -> int:
        """
        Get: StartingNumber(self: Endnotes) -> int
        Set: StartingNumber(self: Endnotes) = value
        """
        ...


    def Add(self, Range:Range, Reference:object, Text:object) -> Tuple_[Endnote, object, object]:
        """ Add(self: Endnotes, Range: Range, Reference: object, Text: object) -> (Endnote, object, object) """
        ...

    def Convert(self): # -> 
        """ Convert(self: Endnotes) """
        ...

    def ResetContinuationNotice(self): # -> 
        """ ResetContinuationNotice(self: Endnotes) """
        ...

    def ResetContinuationSeparator(self): # -> 
        """ ResetContinuationSeparator(self: Endnotes) """
        ...

    def ResetSeparator(self): # -> 
        """ ResetSeparator(self: Endnotes) """
        ...

    def SwapWithFootnotes(self): # -> 
        """ SwapWithFootnotes(self: Endnotes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Envelope: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Address(self) -> Range:
        """ Get: Address(self: Envelope) -> Range """
        ...

    @property
    def AddressFromLeft(self) -> Single:
        """
        Get: AddressFromLeft(self: Envelope) -> Single
        Set: AddressFromLeft(self: Envelope) = value
        """
        ...

    @property
    def AddressFromTop(self) -> Single:
        """
        Get: AddressFromTop(self: Envelope) -> Single
        Set: AddressFromTop(self: Envelope) = value
        """
        ...

    @property
    def AddressStyle(self) -> Style:
        """ Get: AddressStyle(self: Envelope) -> Style """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Envelope) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Envelope) -> int """
        ...

    @property
    def DefaultFaceUp(self) -> bool:
        """
        Get: DefaultFaceUp(self: Envelope) -> bool
        Set: DefaultFaceUp(self: Envelope) = value
        """
        ...

    @property
    def DefaultHeight(self) -> Single:
        """
        Get: DefaultHeight(self: Envelope) -> Single
        Set: DefaultHeight(self: Envelope) = value
        """
        ...

    @property
    def DefaultOmitReturnAddress(self) -> bool:
        """
        Get: DefaultOmitReturnAddress(self: Envelope) -> bool
        Set: DefaultOmitReturnAddress(self: Envelope) = value
        """
        ...

    @property
    def DefaultOrientation(self) -> WdEnvelopeOrientation:
        """
        Get: DefaultOrientation(self: Envelope) -> WdEnvelopeOrientation
        Set: DefaultOrientation(self: Envelope) = value
        """
        ...

    @property
    def DefaultPrintBarCode(self) -> bool:
        """
        Get: DefaultPrintBarCode(self: Envelope) -> bool
        Set: DefaultPrintBarCode(self: Envelope) = value
        """
        ...

    @property
    def DefaultPrintFIMA(self) -> bool:
        """
        Get: DefaultPrintFIMA(self: Envelope) -> bool
        Set: DefaultPrintFIMA(self: Envelope) = value
        """
        ...

    @property
    def DefaultSize(self) -> str:
        """
        Get: DefaultSize(self: Envelope) -> str
        Set: DefaultSize(self: Envelope) = value
        """
        ...

    @property
    def DefaultWidth(self) -> Single:
        """
        Get: DefaultWidth(self: Envelope) -> Single
        Set: DefaultWidth(self: Envelope) = value
        """
        ...

    @property
    def FeedSource(self) -> WdPaperTray:
        """
        Get: FeedSource(self: Envelope) -> WdPaperTray
        Set: FeedSource(self: Envelope) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Envelope) -> object """
        ...

    @property
    def RecipientNamefromLeft(self) -> Single:
        """
        Get: RecipientNamefromLeft(self: Envelope) -> Single
        Set: RecipientNamefromLeft(self: Envelope) = value
        """
        ...

    @property
    def RecipientNamefromTop(self) -> Single:
        """
        Get: RecipientNamefromTop(self: Envelope) -> Single
        Set: RecipientNamefromTop(self: Envelope) = value
        """
        ...

    @property
    def RecipientPostalfromLeft(self) -> Single:
        """
        Get: RecipientPostalfromLeft(self: Envelope) -> Single
        Set: RecipientPostalfromLeft(self: Envelope) = value
        """
        ...

    @property
    def RecipientPostalfromTop(self) -> Single:
        """
        Get: RecipientPostalfromTop(self: Envelope) -> Single
        Set: RecipientPostalfromTop(self: Envelope) = value
        """
        ...

    @property
    def ReturnAddress(self) -> Range:
        """ Get: ReturnAddress(self: Envelope) -> Range """
        ...

    @property
    def ReturnAddressFromLeft(self) -> Single:
        """
        Get: ReturnAddressFromLeft(self: Envelope) -> Single
        Set: ReturnAddressFromLeft(self: Envelope) = value
        """
        ...

    @property
    def ReturnAddressFromTop(self) -> Single:
        """
        Get: ReturnAddressFromTop(self: Envelope) -> Single
        Set: ReturnAddressFromTop(self: Envelope) = value
        """
        ...

    @property
    def ReturnAddressStyle(self) -> Style:
        """ Get: ReturnAddressStyle(self: Envelope) -> Style """
        ...

    @property
    def SenderNamefromLeft(self) -> Single:
        """
        Get: SenderNamefromLeft(self: Envelope) -> Single
        Set: SenderNamefromLeft(self: Envelope) = value
        """
        ...

    @property
    def SenderNamefromTop(self) -> Single:
        """
        Get: SenderNamefromTop(self: Envelope) -> Single
        Set: SenderNamefromTop(self: Envelope) = value
        """
        ...

    @property
    def SenderPostalfromLeft(self) -> Single:
        """
        Get: SenderPostalfromLeft(self: Envelope) -> Single
        Set: SenderPostalfromLeft(self: Envelope) = value
        """
        ...

    @property
    def SenderPostalfromTop(self) -> Single:
        """
        Get: SenderPostalfromTop(self: Envelope) -> Single
        Set: SenderPostalfromTop(self: Envelope) = value
        """
        ...

    @property
    def Vertical(self) -> bool:
        """
        Get: Vertical(self: Envelope) -> bool
        Set: Vertical(self: Envelope) = value
        """
        ...


    def Insert(self, ExtractAddress:object, Address:object, AutoText:object, OmitReturnAddress:object, ReturnAddress:object, ReturnAutoText:object, PrintBarCode:object, PrintFIMA:object, Size:object, Height:object, Width:object, FeedSource:object, AddressFromLeft:object, AddressFromTop:object, ReturnAddressFromLeft:object, ReturnAddressFromTop:object, DefaultFaceUp:object, DefaultOrientation:object, PrintEPostage:object, Vertical:object, RecipientNamefromLeft:object, RecipientNamefromTop:object, RecipientPostalfromLeft:object, RecipientPostalfromTop:object, SenderNamefromLeft:object, SenderNamefromTop:object, SenderPostalfromLeft:object, SenderPostalfromTop:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Insert(self: Envelope, ExtractAddress: object, Address: object, AutoText: object, OmitReturnAddress: object, ReturnAddress: object, ReturnAutoText: object, PrintBarCode: object, PrintFIMA: object, Size: object, Height: object, Width: object, FeedSource: object, AddressFromLeft: object, AddressFromTop: object, ReturnAddressFromLeft: object, ReturnAddressFromTop: object, DefaultFaceUp: object, DefaultOrientation: object, PrintEPostage: object, Vertical: object, RecipientNamefromLeft: object, RecipientNamefromTop: object, RecipientPostalfromLeft: object, RecipientPostalfromTop: object, SenderNamefromLeft: object, SenderNamefromTop: object, SenderPostalfromLeft: object, SenderPostalfromTop: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Insert2000(self, ExtractAddress:object, Address:object, AutoText:object, OmitReturnAddress:object, ReturnAddress:object, ReturnAutoText:object, PrintBarCode:object, PrintFIMA:object, Size:object, Height:object, Width:object, FeedSource:object, AddressFromLeft:object, AddressFromTop:object, ReturnAddressFromLeft:object, ReturnAddressFromTop:object, DefaultFaceUp:object, DefaultOrientation:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Insert2000(self: Envelope, ExtractAddress: object, Address: object, AutoText: object, OmitReturnAddress: object, ReturnAddress: object, ReturnAutoText: object, PrintBarCode: object, PrintFIMA: object, Size: object, Height: object, Width: object, FeedSource: object, AddressFromLeft: object, AddressFromTop: object, ReturnAddressFromLeft: object, ReturnAddressFromTop: object, DefaultFaceUp: object, DefaultOrientation: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Options(self): # -> 
        """ Options(self: Envelope) """
        ...

    def PrintOut(self, ExtractAddress:object, Address:object, AutoText:object, OmitReturnAddress:object, ReturnAddress:object, ReturnAutoText:object, PrintBarCode:object, PrintFIMA:object, Size:object, Height:object, Width:object, FeedSource:object, AddressFromLeft:object, AddressFromTop:object, ReturnAddressFromLeft:object, ReturnAddressFromTop:object, DefaultFaceUp:object, DefaultOrientation:object, PrintEPostage:object, Vertical:object, RecipientNamefromLeft:object, RecipientNamefromTop:object, RecipientPostalfromLeft:object, RecipientPostalfromTop:object, SenderNamefromLeft:object, SenderNamefromTop:object, SenderPostalfromLeft:object, SenderPostalfromTop:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut(self: Envelope, ExtractAddress: object, Address: object, AutoText: object, OmitReturnAddress: object, ReturnAddress: object, ReturnAutoText: object, PrintBarCode: object, PrintFIMA: object, Size: object, Height: object, Width: object, FeedSource: object, AddressFromLeft: object, AddressFromTop: object, ReturnAddressFromLeft: object, ReturnAddressFromTop: object, DefaultFaceUp: object, DefaultOrientation: object, PrintEPostage: object, Vertical: object, RecipientNamefromLeft: object, RecipientNamefromTop: object, RecipientPostalfromLeft: object, RecipientPostalfromTop: object, SenderNamefromLeft: object, SenderNamefromTop: object, SenderPostalfromLeft: object, SenderPostalfromTop: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOut2000(self, ExtractAddress:object, Address:object, AutoText:object, OmitReturnAddress:object, ReturnAddress:object, ReturnAutoText:object, PrintBarCode:object, PrintFIMA:object, Size:object, Height:object, Width:object, FeedSource:object, AddressFromLeft:object, AddressFromTop:object, ReturnAddressFromLeft:object, ReturnAddressFromTop:object, DefaultFaceUp:object, DefaultOrientation:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut2000(self: Envelope, ExtractAddress: object, Address: object, AutoText: object, OmitReturnAddress: object, ReturnAddress: object, ReturnAutoText: object, PrintBarCode: object, PrintFIMA: object, Size: object, Height: object, Width: object, FeedSource: object, AddressFromLeft: object, AddressFromTop: object, ReturnAddressFromLeft: object, ReturnAddressFromTop: object, DefaultFaceUp: object, DefaultOrientation: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def UpdateDocument(self): # -> 
        """ UpdateDocument(self: Envelope) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ErrorBars: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: ErrorBars) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: ErrorBars) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ErrorBars) -> int """
        ...

    @property
    def EndStyle(self) -> XlEndStyleCap:
        """
        Get: EndStyle(self: ErrorBars) -> XlEndStyleCap
        Set: EndStyle(self: ErrorBars) = value
        """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: ErrorBars) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ErrorBars) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ErrorBars) -> object """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: ErrorBars) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: ErrorBars) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: ErrorBars) -> object """
        ...


class Field: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Field) -> Application """
        ...

    @property
    def Code(self) -> Range:
        """
        Get: Code(self: Field) -> Range
        Set: Code(self: Field) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Field) -> int """
        ...

    @property
    def Data(self) -> str:
        """
        Get: Data(self: Field) -> str
        Set: Data(self: Field) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Field) -> int """
        ...

    @property
    def InlineShape(self) -> InlineShape:
        """ Get: InlineShape(self: Field) -> InlineShape """
        ...

    @property
    def Kind(self) -> WdFieldKind:
        """ Get: Kind(self: Field) -> WdFieldKind """
        ...

    @property
    def LinkFormat(self) -> LinkFormat:
        """ Get: LinkFormat(self: Field) -> LinkFormat """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Field) -> bool
        Set: Locked(self: Field) = value
        """
        ...

    @property
    def Next(self) -> Field:
        """ Get: Next(self: Field) -> Field """
        ...

    @property
    def OLEFormat(self) -> OLEFormat:
        """ Get: OLEFormat(self: Field) -> OLEFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Field) -> object """
        ...

    @property
    def Previous(self) -> Field:
        """ Get: Previous(self: Field) -> Field """
        ...

    @property
    def Result(self) -> Range:
        """
        Get: Result(self: Field) -> Range
        Set: Result(self: Field) = value
        """
        ...

    @property
    def ShowCodes(self) -> bool:
        """
        Get: ShowCodes(self: Field) -> bool
        Set: ShowCodes(self: Field) = value
        """
        ...

    @property
    def Type(self) -> WdFieldType:
        """ Get: Type(self: Field) -> WdFieldType """
        ...


    def Copy(self): # -> 
        """ Copy(self: Field) """
        ...

    def Cut(self): # -> 
        """ Cut(self: Field) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Field) """
        ...

    def DoClick(self): # -> 
        """ DoClick(self: Field) """
        ...

    def Select(self): # -> 
        """ Select(self: Field) """
        ...

    def Unlink(self): # -> 
        """ Unlink(self: Field) """
        ...

    def Update(self) -> bool:
        """ Update(self: Field) -> bool """
        ...

    def UpdateSource(self): # -> 
        """ UpdateSource(self: Field) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Fields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Fields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Fields) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Fields) -> int """
        ...

    @property
    def Locked(self) -> int:
        """
        Get: Locked(self: Fields) -> int
        Set: Locked(self: Fields) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Fields) -> object """
        ...


    def Add(self, Range:Range, Type:object, Text:object, PreserveFormatting:object) -> Tuple_[Field, object, object, object]:
        """ Add(self: Fields, Range: Range, Type: object, Text: object, PreserveFormatting: object) -> (Field, object, object, object) """
        ...

    def ToggleShowCodes(self): # -> 
        """ ToggleShowCodes(self: Fields) """
        ...

    def Unlink(self): # -> 
        """ Unlink(self: Fields) """
        ...

    def Update(self) -> int:
        """ Update(self: Fields) -> int """
        ...

    def UpdateSource(self): # -> 
        """ UpdateSource(self: Fields) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class FileConverter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FileConverter) -> Application """
        ...

    @property
    def CanOpen(self) -> bool:
        """ Get: CanOpen(self: FileConverter) -> bool """
        ...

    @property
    def CanSave(self) -> bool:
        """ Get: CanSave(self: FileConverter) -> bool """
        ...

    @property
    def ClassName(self) -> str:
        """ Get: ClassName(self: FileConverter) -> str """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FileConverter) -> int """
        ...

    @property
    def Extensions(self) -> str:
        """ Get: Extensions(self: FileConverter) -> str """
        ...

    @property
    def FormatName(self) -> str:
        """ Get: FormatName(self: FileConverter) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: FileConverter) -> str """
        ...

    @property
    def OpenFormat(self) -> int:
        """ Get: OpenFormat(self: FileConverter) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FileConverter) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: FileConverter) -> str """
        ...

    @property
    def SaveFormat(self) -> int:
        """ Get: SaveFormat(self: FileConverter) -> int """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class FileConverters(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FileConverters) -> Application """
        ...

    @property
    def ConvertMacWordChevrons(self) -> WdChevronConvertRule:
        """
        Get: ConvertMacWordChevrons(self: FileConverters) -> WdChevronConvertRule
        Set: ConvertMacWordChevrons(self: FileConverters) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: FileConverters) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FileConverters) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FileConverters) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class FillFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FillFormat) -> Application """
        ...

    @property
    def BackColor(self) -> ColorFormat:
        """ Get: BackColor(self: FillFormat) -> ColorFormat """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FillFormat) -> int """
        ...

    @property
    def ForeColor(self) -> ColorFormat:
        """ Get: ForeColor(self: FillFormat) -> ColorFormat """
        ...

    @property
    def GradientAngle(self) -> Single:
        """
        Get: GradientAngle(self: FillFormat) -> Single
        Set: GradientAngle(self: FillFormat) = value
        """
        ...

    @property
    def GradientColorType(self): # -> MsoGradientColorType
        """ Get: GradientColorType(self: FillFormat) -> MsoGradientColorType """
        ...

    @property
    def GradientDegree(self) -> Single:
        """ Get: GradientDegree(self: FillFormat) -> Single """
        ...

    @property
    def GradientStops(self): # -> GradientStops
        """ Get: GradientStops(self: FillFormat) -> GradientStops """
        ...

    @property
    def GradientStyle(self): # -> MsoGradientStyle
        """ Get: GradientStyle(self: FillFormat) -> MsoGradientStyle """
        ...

    @property
    def GradientVariant(self) -> int:
        """ Get: GradientVariant(self: FillFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FillFormat) -> object """
        ...

    @property
    def Pattern(self): # -> MsoPatternType
        """ Get: Pattern(self: FillFormat) -> MsoPatternType """
        ...

    @property
    def PictureEffects(self): # -> PictureEffects
        """ Get: PictureEffects(self: FillFormat) -> PictureEffects """
        ...

    @property
    def PresetGradientType(self): # -> MsoPresetGradientType
        """ Get: PresetGradientType(self: FillFormat) -> MsoPresetGradientType """
        ...

    @property
    def PresetTexture(self): # -> MsoPresetTexture
        """ Get: PresetTexture(self: FillFormat) -> MsoPresetTexture """
        ...

    @property
    def RotateWithObject(self): # -> MsoTriState
        """
        Get: RotateWithObject(self: FillFormat) -> MsoTriState
        Set: RotateWithObject(self: FillFormat) = value
        """
        ...

    @property
    def TextureAlignment(self): # -> MsoTextureAlignment
        """
        Get: TextureAlignment(self: FillFormat) -> MsoTextureAlignment
        Set: TextureAlignment(self: FillFormat) = value
        """
        ...

    @property
    def TextureHorizontalScale(self) -> Single:
        """
        Get: TextureHorizontalScale(self: FillFormat) -> Single
        Set: TextureHorizontalScale(self: FillFormat) = value
        """
        ...

    @property
    def TextureName(self) -> str:
        """ Get: TextureName(self: FillFormat) -> str """
        ...

    @property
    def TextureOffsetX(self) -> Single:
        """
        Get: TextureOffsetX(self: FillFormat) -> Single
        Set: TextureOffsetX(self: FillFormat) = value
        """
        ...

    @property
    def TextureOffsetY(self) -> Single:
        """
        Get: TextureOffsetY(self: FillFormat) -> Single
        Set: TextureOffsetY(self: FillFormat) = value
        """
        ...

    @property
    def TextureTile(self): # -> MsoTriState
        """
        Get: TextureTile(self: FillFormat) -> MsoTriState
        Set: TextureTile(self: FillFormat) = value
        """
        ...

    @property
    def TextureType(self): # -> MsoTextureType
        """ Get: TextureType(self: FillFormat) -> MsoTextureType """
        ...

    @property
    def TextureVerticalScale(self) -> Single:
        """
        Get: TextureVerticalScale(self: FillFormat) -> Single
        Set: TextureVerticalScale(self: FillFormat) = value
        """
        ...

    @property
    def Transparency(self) -> Single:
        """
        Get: Transparency(self: FillFormat) -> Single
        Set: Transparency(self: FillFormat) = value
        """
        ...

    @property
    def Type(self): # -> MsoFillType
        """ Get: Type(self: FillFormat) -> MsoFillType """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: FillFormat) -> MsoTriState
        Set: Visible(self: FillFormat) = value
        """
        ...


    def Background(self): # -> 
        """ Background(self: FillFormat) """
        ...

    def OneColorGradient(self, Style, Variant:int, Degree:Single): # ->  # Not found arg types: {'Style': 'MsoGradientStyle'}
        """ OneColorGradient(self: FillFormat, Style: MsoGradientStyle, Variant: int, Degree: Single) """
        ...

    def Patterned(self, Pattern): # ->  # Not found arg types: {'Pattern': 'MsoPatternType'}
        """ Patterned(self: FillFormat, Pattern: MsoPatternType) """
        ...

    def PresetGradient(self, Style, Variant:int, PresetGradientType): # ->  # Not found arg types: {'Style': 'MsoGradientStyle', 'PresetGradientType': 'MsoPresetGradientType'}
        """ PresetGradient(self: FillFormat, Style: MsoGradientStyle, Variant: int, PresetGradientType: MsoPresetGradientType) """
        ...

    def PresetTextured(self, PresetTexture): # ->  # Not found arg types: {'PresetTexture': 'MsoPresetTexture'}
        """ PresetTextured(self: FillFormat, PresetTexture: MsoPresetTexture) """
        ...

    def Solid(self): # -> 
        """ Solid(self: FillFormat) """
        ...

    def TwoColorGradient(self, Style, Variant:int): # ->  # Not found arg types: {'Style': 'MsoGradientStyle'}
        """ TwoColorGradient(self: FillFormat, Style: MsoGradientStyle, Variant: int) """
        ...

    def UserPicture(self, PictureFile:str): # -> 
        """ UserPicture(self: FillFormat, PictureFile: str) """
        ...

    def UserTextured(self, TextureFile:str): # -> 
        """ UserTextured(self: FillFormat, TextureFile: str) """
        ...


class Find: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Find) -> Application """
        ...

    @property
    def CorrectHangulEndings(self) -> bool:
        """
        Get: CorrectHangulEndings(self: Find) -> bool
        Set: CorrectHangulEndings(self: Find) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Find) -> int """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: Find) -> Font
        Set: Font(self: Find) = value
        """
        ...

    @property
    def Format(self) -> bool:
        """
        Get: Format(self: Find) -> bool
        Set: Format(self: Find) = value
        """
        ...

    @property
    def Forward(self) -> bool:
        """
        Get: Forward(self: Find) -> bool
        Set: Forward(self: Find) = value
        """
        ...

    @property
    def Found(self) -> bool:
        """ Get: Found(self: Find) -> bool """
        ...

    @property
    def Frame(self) -> Frame:
        """ Get: Frame(self: Find) -> Frame """
        ...

    @property
    def HanjaPhoneticHangul(self) -> bool:
        """
        Get: HanjaPhoneticHangul(self: Find) -> bool
        Set: HanjaPhoneticHangul(self: Find) = value
        """
        ...

    @property
    def Highlight(self) -> int:
        """
        Get: Highlight(self: Find) -> int
        Set: Highlight(self: Find) = value
        """
        ...

    @property
    def IgnorePunct(self) -> bool:
        """
        Get: IgnorePunct(self: Find) -> bool
        Set: IgnorePunct(self: Find) = value
        """
        ...

    @property
    def IgnoreSpace(self) -> bool:
        """
        Get: IgnoreSpace(self: Find) -> bool
        Set: IgnoreSpace(self: Find) = value
        """
        ...

    @property
    def LanguageID(self) -> WdLanguageID:
        """
        Get: LanguageID(self: Find) -> WdLanguageID
        Set: LanguageID(self: Find) = value
        """
        ...

    @property
    def LanguageIDFarEast(self) -> WdLanguageID:
        """
        Get: LanguageIDFarEast(self: Find) -> WdLanguageID
        Set: LanguageIDFarEast(self: Find) = value
        """
        ...

    @property
    def LanguageIDOther(self) -> WdLanguageID:
        """
        Get: LanguageIDOther(self: Find) -> WdLanguageID
        Set: LanguageIDOther(self: Find) = value
        """
        ...

    @property
    def MatchAlefHamza(self) -> bool:
        """
        Get: MatchAlefHamza(self: Find) -> bool
        Set: MatchAlefHamza(self: Find) = value
        """
        ...

    @property
    def MatchAllWordForms(self) -> bool:
        """
        Get: MatchAllWordForms(self: Find) -> bool
        Set: MatchAllWordForms(self: Find) = value
        """
        ...

    @property
    def MatchByte(self) -> bool:
        """
        Get: MatchByte(self: Find) -> bool
        Set: MatchByte(self: Find) = value
        """
        ...

    @property
    def MatchCase(self) -> bool:
        """
        Get: MatchCase(self: Find) -> bool
        Set: MatchCase(self: Find) = value
        """
        ...

    @property
    def MatchControl(self) -> bool:
        """
        Get: MatchControl(self: Find) -> bool
        Set: MatchControl(self: Find) = value
        """
        ...

    @property
    def MatchDiacritics(self) -> bool:
        """
        Get: MatchDiacritics(self: Find) -> bool
        Set: MatchDiacritics(self: Find) = value
        """
        ...

    @property
    def MatchFuzzy(self) -> bool:
        """
        Get: MatchFuzzy(self: Find) -> bool
        Set: MatchFuzzy(self: Find) = value
        """
        ...

    @property
    def MatchKashida(self) -> bool:
        """
        Get: MatchKashida(self: Find) -> bool
        Set: MatchKashida(self: Find) = value
        """
        ...

    @property
    def MatchPhrase(self) -> bool:
        """
        Get: MatchPhrase(self: Find) -> bool
        Set: MatchPhrase(self: Find) = value
        """
        ...

    @property
    def MatchPrefix(self) -> bool:
        """
        Get: MatchPrefix(self: Find) -> bool
        Set: MatchPrefix(self: Find) = value
        """
        ...

    @property
    def MatchSoundsLike(self) -> bool:
        """
        Get: MatchSoundsLike(self: Find) -> bool
        Set: MatchSoundsLike(self: Find) = value
        """
        ...

    @property
    def MatchSuffix(self) -> bool:
        """
        Get: MatchSuffix(self: Find) -> bool
        Set: MatchSuffix(self: Find) = value
        """
        ...

    @property
    def MatchWholeWord(self) -> bool:
        """
        Get: MatchWholeWord(self: Find) -> bool
        Set: MatchWholeWord(self: Find) = value
        """
        ...

    @property
    def MatchWildcards(self) -> bool:
        """
        Get: MatchWildcards(self: Find) -> bool
        Set: MatchWildcards(self: Find) = value
        """
        ...

    @property
    def NoProofing(self) -> int:
        """
        Get: NoProofing(self: Find) -> int
        Set: NoProofing(self: Find) = value
        """
        ...

    @property
    def ParagraphFormat(self) -> ParagraphFormat:
        """
        Get: ParagraphFormat(self: Find) -> ParagraphFormat
        Set: ParagraphFormat(self: Find) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Find) -> object """
        ...

    @property
    def Replacement(self) -> Replacement:
        """ Get: Replacement(self: Find) -> Replacement """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: Find) -> object
        Set: Style(self: Find) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Find) -> str
        Set: Text(self: Find) = value
        """
        ...

    @property
    def Wrap(self) -> WdFindWrap:
        """
        Get: Wrap(self: Find) -> WdFindWrap
        Set: Wrap(self: Find) = value
        """
        ...


    def ClearAllFuzzyOptions(self): # -> 
        """ ClearAllFuzzyOptions(self: Find) """
        ...

    def ClearFormatting(self): # -> 
        """ ClearFormatting(self: Find) """
        ...

    def ClearHitHighlight(self) -> bool:
        """ ClearHitHighlight(self: Find) -> bool """
        ...

    def Execute(self, FindText:object, MatchCase:object, MatchWholeWord:object, MatchWildcards:object, MatchSoundsLike:object, MatchAllWordForms:object, Forward:object, Wrap:object, Format:object, ReplaceWith:object, Replace:object, MatchKashida:object, MatchDiacritics:object, MatchAlefHamza:object, MatchControl:object) -> Tuple_[bool, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Execute(self: Find, FindText: object, MatchCase: object, MatchWholeWord: object, MatchWildcards: object, MatchSoundsLike: object, MatchAllWordForms: object, Forward: object, Wrap: object, Format: object, ReplaceWith: object, Replace: object, MatchKashida: object, MatchDiacritics: object, MatchAlefHamza: object, MatchControl: object) -> (bool, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Execute2007(self, FindText:object, MatchCase:object, MatchWholeWord:object, MatchWildcards:object, MatchSoundsLike:object, MatchAllWordForms:object, Forward:object, Wrap:object, Format:object, ReplaceWith:object, Replace:object, MatchKashida:object, MatchDiacritics:object, MatchAlefHamza:object, MatchControl:object, MatchPrefix:object, MatchSuffix:object, MatchPhrase:object, IgnoreSpace:object, IgnorePunct:object) -> Tuple_[bool, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Execute2007(self: Find, FindText: object, MatchCase: object, MatchWholeWord: object, MatchWildcards: object, MatchSoundsLike: object, MatchAllWordForms: object, Forward: object, Wrap: object, Format: object, ReplaceWith: object, Replace: object, MatchKashida: object, MatchDiacritics: object, MatchAlefHamza: object, MatchControl: object, MatchPrefix: object, MatchSuffix: object, MatchPhrase: object, IgnoreSpace: object, IgnorePunct: object) -> (bool, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def ExecuteOld(self, FindText:object, MatchCase:object, MatchWholeWord:object, MatchWildcards:object, MatchSoundsLike:object, MatchAllWordForms:object, Forward:object, Wrap:object, Format:object, ReplaceWith:object, Replace:object) -> Tuple_[bool, object, object, object, object, object, object, object, object, object, object, object]:
        """ ExecuteOld(self: Find, FindText: object, MatchCase: object, MatchWholeWord: object, MatchWildcards: object, MatchSoundsLike: object, MatchAllWordForms: object, Forward: object, Wrap: object, Format: object, ReplaceWith: object, Replace: object) -> (bool, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def HitHighlight(self, FindText:object, HighlightColor:object, TextColor:object, MatchCase:object, MatchWholeWord:object, MatchPrefix:object, MatchSuffix:object, MatchPhrase:object, MatchWildcards:object, MatchSoundsLike:object, MatchAllWordForms:object, MatchByte:object, MatchFuzzy:object, MatchKashida:object, MatchDiacritics:object, MatchAlefHamza:object, MatchControl:object, IgnoreSpace:object, IgnorePunct:object, HanjaPhoneticHangul:object) -> Tuple_[bool, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ HitHighlight(self: Find, FindText: object, HighlightColor: object, TextColor: object, MatchCase: object, MatchWholeWord: object, MatchPrefix: object, MatchSuffix: object, MatchPhrase: object, MatchWildcards: object, MatchSoundsLike: object, MatchAllWordForms: object, MatchByte: object, MatchFuzzy: object, MatchKashida: object, MatchDiacritics: object, MatchAlefHamza: object, MatchControl: object, IgnoreSpace: object, IgnorePunct: object, HanjaPhoneticHangul: object) -> (bool, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def SetAllFuzzyOptions(self): # -> 
        """ SetAllFuzzyOptions(self: Find) """
        ...


class FirstLetterException: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FirstLetterException) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FirstLetterException) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: FirstLetterException) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: FirstLetterException) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FirstLetterException) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: FirstLetterException) """
        ...


class FirstLetterExceptions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FirstLetterExceptions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: FirstLetterExceptions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FirstLetterExceptions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FirstLetterExceptions) -> object """
        ...


    def Add(self, Name:str) -> FirstLetterException:
        """ Add(self: FirstLetterExceptions, Name: str) -> FirstLetterException """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Floor: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Floor) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: Floor) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Floor) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: Floor) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Floor) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Floor) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Floor) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Floor) -> object """
        ...

    @property
    def PictureType(self) -> object:
        """
        Get: PictureType(self: Floor) -> object
        Set: PictureType(self: Floor) = value
        """
        ...

    @property
    def Thickness(self) -> int:
        """
        Get: Thickness(self: Floor) -> int
        Set: Thickness(self: Floor) = value
        """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: Floor) -> object """
        ...

    def Paste(self): # -> 
        """ Paste(self: Floor) """
        ...

    def Select(self) -> object:
        """ Select(self: Floor) -> object """
        ...


class _Font: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllCaps(self) -> int:
        """
        Get: AllCaps(self: _Font) -> int
        Set: AllCaps(self: _Font) = value
        """
        ...

    @property
    def Animation(self) -> WdAnimation:
        """
        Get: Animation(self: _Font) -> WdAnimation
        Set: Animation(self: _Font) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Font) -> Application """
        ...

    @property
    def Bold(self) -> int:
        """
        Get: Bold(self: _Font) -> int
        Set: Bold(self: _Font) = value
        """
        ...

    @property
    def BoldBi(self) -> int:
        """
        Get: BoldBi(self: _Font) -> int
        Set: BoldBi(self: _Font) = value
        """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: _Font) -> Borders
        Set: Borders(self: _Font) = value
        """
        ...

    @property
    def Color(self) -> WdColor:
        """
        Get: Color(self: _Font) -> WdColor
        Set: Color(self: _Font) = value
        """
        ...

    @property
    def ColorIndex(self) -> WdColorIndex:
        """
        Get: ColorIndex(self: _Font) -> WdColorIndex
        Set: ColorIndex(self: _Font) = value
        """
        ...

    @property
    def ColorIndexBi(self) -> WdColorIndex:
        """
        Get: ColorIndexBi(self: _Font) -> WdColorIndex
        Set: ColorIndexBi(self: _Font) = value
        """
        ...

    @property
    def ContextualAlternates(self) -> int:
        """
        Get: ContextualAlternates(self: _Font) -> int
        Set: ContextualAlternates(self: _Font) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: _Font) -> int """
        ...

    @property
    def DiacriticColor(self) -> WdColor:
        """
        Get: DiacriticColor(self: _Font) -> WdColor
        Set: DiacriticColor(self: _Font) = value
        """
        ...

    @property
    def DisableCharacterSpaceGrid(self) -> bool:
        """
        Get: DisableCharacterSpaceGrid(self: _Font) -> bool
        Set: DisableCharacterSpaceGrid(self: _Font) = value
        """
        ...

    @property
    def DoubleStrikeThrough(self) -> int:
        """
        Get: DoubleStrikeThrough(self: _Font) -> int
        Set: DoubleStrikeThrough(self: _Font) = value
        """
        ...

    @property
    def Duplicate(self) -> Font:
        """ Get: Duplicate(self: _Font) -> Font """
        ...

    @property
    def Emboss(self) -> int:
        """
        Get: Emboss(self: _Font) -> int
        Set: Emboss(self: _Font) = value
        """
        ...

    @property
    def EmphasisMark(self) -> WdEmphasisMark:
        """
        Get: EmphasisMark(self: _Font) -> WdEmphasisMark
        Set: EmphasisMark(self: _Font) = value
        """
        ...

    @property
    def Engrave(self) -> int:
        """
        Get: Engrave(self: _Font) -> int
        Set: Engrave(self: _Font) = value
        """
        ...

    @property
    def Fill(self) -> FillFormat:
        """
        Get: Fill(self: _Font) -> FillFormat
        Set: Fill(self: _Font) = value
        """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """
        Get: Glow(self: _Font) -> GlowFormat
        Set: Glow(self: _Font) = value
        """
        ...

    @property
    def Hidden(self) -> int:
        """
        Get: Hidden(self: _Font) -> int
        Set: Hidden(self: _Font) = value
        """
        ...

    @property
    def Italic(self) -> int:
        """
        Get: Italic(self: _Font) -> int
        Set: Italic(self: _Font) = value
        """
        ...

    @property
    def ItalicBi(self) -> int:
        """
        Get: ItalicBi(self: _Font) -> int
        Set: ItalicBi(self: _Font) = value
        """
        ...

    @property
    def Kerning(self) -> Single:
        """
        Get: Kerning(self: _Font) -> Single
        Set: Kerning(self: _Font) = value
        """
        ...

    @property
    def Ligatures(self) -> WdLigatures:
        """
        Get: Ligatures(self: _Font) -> WdLigatures
        Set: Ligatures(self: _Font) = value
        """
        ...

    @property
    def Line(self) -> LineFormat:
        """
        Get: Line(self: _Font) -> LineFormat
        Set: Line(self: _Font) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _Font) -> str
        Set: Name(self: _Font) = value
        """
        ...

    @property
    def NameAscii(self) -> str:
        """
        Get: NameAscii(self: _Font) -> str
        Set: NameAscii(self: _Font) = value
        """
        ...

    @property
    def NameBi(self) -> str:
        """
        Get: NameBi(self: _Font) -> str
        Set: NameBi(self: _Font) = value
        """
        ...

    @property
    def NameFarEast(self) -> str:
        """
        Get: NameFarEast(self: _Font) -> str
        Set: NameFarEast(self: _Font) = value
        """
        ...

    @property
    def NameOther(self) -> str:
        """
        Get: NameOther(self: _Font) -> str
        Set: NameOther(self: _Font) = value
        """
        ...

    @property
    def NumberForm(self) -> WdNumberForm:
        """
        Get: NumberForm(self: _Font) -> WdNumberForm
        Set: NumberForm(self: _Font) = value
        """
        ...

    @property
    def NumberSpacing(self) -> WdNumberSpacing:
        """
        Get: NumberSpacing(self: _Font) -> WdNumberSpacing
        Set: NumberSpacing(self: _Font) = value
        """
        ...

    @property
    def Outline(self) -> int:
        """
        Get: Outline(self: _Font) -> int
        Set: Outline(self: _Font) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Font) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: _Font) -> int
        Set: Position(self: _Font) = value
        """
        ...

    @property
    def Reflection(self) -> ReflectionFormat:
        """
        Get: Reflection(self: _Font) -> ReflectionFormat
        Set: Reflection(self: _Font) = value
        """
        ...

    @property
    def Scaling(self) -> int:
        """
        Get: Scaling(self: _Font) -> int
        Set: Scaling(self: _Font) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: _Font) -> Shading """
        ...

    @property
    def Shadow(self) -> int:
        """
        Get: Shadow(self: _Font) -> int
        Set: Shadow(self: _Font) = value
        """
        ...

    @property
    def Size(self) -> Single:
        """
        Get: Size(self: _Font) -> Single
        Set: Size(self: _Font) = value
        """
        ...

    @property
    def SizeBi(self) -> Single:
        """
        Get: SizeBi(self: _Font) -> Single
        Set: SizeBi(self: _Font) = value
        """
        ...

    @property
    def SmallCaps(self) -> int:
        """
        Get: SmallCaps(self: _Font) -> int
        Set: SmallCaps(self: _Font) = value
        """
        ...

    @property
    def Spacing(self) -> Single:
        """
        Get: Spacing(self: _Font) -> Single
        Set: Spacing(self: _Font) = value
        """
        ...

    @property
    def StrikeThrough(self) -> int:
        """
        Get: StrikeThrough(self: _Font) -> int
        Set: StrikeThrough(self: _Font) = value
        """
        ...

    @property
    def StylisticSet(self) -> WdStylisticSet:
        """
        Get: StylisticSet(self: _Font) -> WdStylisticSet
        Set: StylisticSet(self: _Font) = value
        """
        ...

    @property
    def Subscript(self) -> int:
        """
        Get: Subscript(self: _Font) -> int
        Set: Subscript(self: _Font) = value
        """
        ...

    @property
    def Superscript(self) -> int:
        """
        Get: Superscript(self: _Font) -> int
        Set: Superscript(self: _Font) = value
        """
        ...

    @property
    def TextColor(self) -> ColorFormat:
        """ Get: TextColor(self: _Font) -> ColorFormat """
        ...

    @property
    def TextShadow(self) -> ShadowFormat:
        """
        Get: TextShadow(self: _Font) -> ShadowFormat
        Set: TextShadow(self: _Font) = value
        """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """
        Get: ThreeD(self: _Font) -> ThreeDFormat
        Set: ThreeD(self: _Font) = value
        """
        ...

    @property
    def Underline(self) -> WdUnderline:
        """
        Get: Underline(self: _Font) -> WdUnderline
        Set: Underline(self: _Font) = value
        """
        ...

    @property
    def UnderlineColor(self) -> WdColor:
        """
        Get: UnderlineColor(self: _Font) -> WdColor
        Set: UnderlineColor(self: _Font) = value
        """
        ...


    def Grow(self): # -> 
        """ Grow(self: _Font) """
        ...

    def Reset(self): # -> 
        """ Reset(self: _Font) """
        ...

    def SetAsTemplateDefault(self): # -> 
        """ SetAsTemplateDefault(self: _Font) """
        ...

    def Shrink(self): # -> 
        """ Shrink(self: _Font) """
        ...


class Font(_Font): # skipped bases: <type 'object'>
    """ no doc """
    pass

class FontClass(Font, __ComObject): # skipped bases: <type '_Font'>, <type 'object'>
    """ FontClass() """
    @property
    def AllCaps(self) -> int:
        """
        Get: AllCaps(self: FontClass) -> int
        Set: AllCaps(self: FontClass) = value
        """
        ...

    @property
    def Animation(self) -> WdAnimation:
        """
        Get: Animation(self: FontClass) -> WdAnimation
        Set: Animation(self: FontClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: FontClass) -> Application """
        ...

    @property
    def Bold(self) -> int:
        """
        Get: Bold(self: FontClass) -> int
        Set: Bold(self: FontClass) = value
        """
        ...

    @property
    def BoldBi(self) -> int:
        """
        Get: BoldBi(self: FontClass) -> int
        Set: BoldBi(self: FontClass) = value
        """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: FontClass) -> Borders
        Set: Borders(self: FontClass) = value
        """
        ...

    @property
    def Color(self) -> WdColor:
        """
        Get: Color(self: FontClass) -> WdColor
        Set: Color(self: FontClass) = value
        """
        ...

    @property
    def ColorIndex(self) -> WdColorIndex:
        """
        Get: ColorIndex(self: FontClass) -> WdColorIndex
        Set: ColorIndex(self: FontClass) = value
        """
        ...

    @property
    def ColorIndexBi(self) -> WdColorIndex:
        """
        Get: ColorIndexBi(self: FontClass) -> WdColorIndex
        Set: ColorIndexBi(self: FontClass) = value
        """
        ...

    @property
    def ContextualAlternates(self) -> int:
        """
        Get: ContextualAlternates(self: FontClass) -> int
        Set: ContextualAlternates(self: FontClass) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FontClass) -> int """
        ...

    @property
    def DiacriticColor(self) -> WdColor:
        """
        Get: DiacriticColor(self: FontClass) -> WdColor
        Set: DiacriticColor(self: FontClass) = value
        """
        ...

    @property
    def DisableCharacterSpaceGrid(self) -> bool:
        """
        Get: DisableCharacterSpaceGrid(self: FontClass) -> bool
        Set: DisableCharacterSpaceGrid(self: FontClass) = value
        """
        ...

    @property
    def DoubleStrikeThrough(self) -> int:
        """
        Get: DoubleStrikeThrough(self: FontClass) -> int
        Set: DoubleStrikeThrough(self: FontClass) = value
        """
        ...

    @property
    def Duplicate(self) -> Font:
        """ Get: Duplicate(self: FontClass) -> Font """
        ...

    @property
    def Emboss(self) -> int:
        """
        Get: Emboss(self: FontClass) -> int
        Set: Emboss(self: FontClass) = value
        """
        ...

    @property
    def EmphasisMark(self) -> WdEmphasisMark:
        """
        Get: EmphasisMark(self: FontClass) -> WdEmphasisMark
        Set: EmphasisMark(self: FontClass) = value
        """
        ...

    @property
    def Engrave(self) -> int:
        """
        Get: Engrave(self: FontClass) -> int
        Set: Engrave(self: FontClass) = value
        """
        ...

    @property
    def Fill(self) -> FillFormat:
        """
        Get: Fill(self: FontClass) -> FillFormat
        Set: Fill(self: FontClass) = value
        """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """
        Get: Glow(self: FontClass) -> GlowFormat
        Set: Glow(self: FontClass) = value
        """
        ...

    @property
    def Hidden(self) -> int:
        """
        Get: Hidden(self: FontClass) -> int
        Set: Hidden(self: FontClass) = value
        """
        ...

    @property
    def Italic(self) -> int:
        """
        Get: Italic(self: FontClass) -> int
        Set: Italic(self: FontClass) = value
        """
        ...

    @property
    def ItalicBi(self) -> int:
        """
        Get: ItalicBi(self: FontClass) -> int
        Set: ItalicBi(self: FontClass) = value
        """
        ...

    @property
    def Kerning(self) -> Single:
        """
        Get: Kerning(self: FontClass) -> Single
        Set: Kerning(self: FontClass) = value
        """
        ...

    @property
    def Ligatures(self) -> WdLigatures:
        """
        Get: Ligatures(self: FontClass) -> WdLigatures
        Set: Ligatures(self: FontClass) = value
        """
        ...

    @property
    def Line(self) -> LineFormat:
        """
        Get: Line(self: FontClass) -> LineFormat
        Set: Line(self: FontClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: FontClass) -> str
        Set: Name(self: FontClass) = value
        """
        ...

    @property
    def NameAscii(self) -> str:
        """
        Get: NameAscii(self: FontClass) -> str
        Set: NameAscii(self: FontClass) = value
        """
        ...

    @property
    def NameBi(self) -> str:
        """
        Get: NameBi(self: FontClass) -> str
        Set: NameBi(self: FontClass) = value
        """
        ...

    @property
    def NameFarEast(self) -> str:
        """
        Get: NameFarEast(self: FontClass) -> str
        Set: NameFarEast(self: FontClass) = value
        """
        ...

    @property
    def NameOther(self) -> str:
        """
        Get: NameOther(self: FontClass) -> str
        Set: NameOther(self: FontClass) = value
        """
        ...

    @property
    def NumberForm(self) -> WdNumberForm:
        """
        Get: NumberForm(self: FontClass) -> WdNumberForm
        Set: NumberForm(self: FontClass) = value
        """
        ...

    @property
    def NumberSpacing(self) -> WdNumberSpacing:
        """
        Get: NumberSpacing(self: FontClass) -> WdNumberSpacing
        Set: NumberSpacing(self: FontClass) = value
        """
        ...

    @property
    def Outline(self) -> int:
        """
        Get: Outline(self: FontClass) -> int
        Set: Outline(self: FontClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FontClass) -> object """
        ...

    @property
    def Position(self) -> int:
        """
        Get: Position(self: FontClass) -> int
        Set: Position(self: FontClass) = value
        """
        ...

    @property
    def Reflection(self) -> ReflectionFormat:
        """
        Get: Reflection(self: FontClass) -> ReflectionFormat
        Set: Reflection(self: FontClass) = value
        """
        ...

    @property
    def Scaling(self) -> int:
        """
        Get: Scaling(self: FontClass) -> int
        Set: Scaling(self: FontClass) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: FontClass) -> Shading """
        ...

    @property
    def Shadow(self) -> int:
        """
        Get: Shadow(self: FontClass) -> int
        Set: Shadow(self: FontClass) = value
        """
        ...

    @property
    def Size(self) -> Single:
        """
        Get: Size(self: FontClass) -> Single
        Set: Size(self: FontClass) = value
        """
        ...

    @property
    def SizeBi(self) -> Single:
        """
        Get: SizeBi(self: FontClass) -> Single
        Set: SizeBi(self: FontClass) = value
        """
        ...

    @property
    def SmallCaps(self) -> int:
        """
        Get: SmallCaps(self: FontClass) -> int
        Set: SmallCaps(self: FontClass) = value
        """
        ...

    @property
    def Spacing(self) -> Single:
        """
        Get: Spacing(self: FontClass) -> Single
        Set: Spacing(self: FontClass) = value
        """
        ...

    @property
    def StrikeThrough(self) -> int:
        """
        Get: StrikeThrough(self: FontClass) -> int
        Set: StrikeThrough(self: FontClass) = value
        """
        ...

    @property
    def StylisticSet(self) -> WdStylisticSet:
        """
        Get: StylisticSet(self: FontClass) -> WdStylisticSet
        Set: StylisticSet(self: FontClass) = value
        """
        ...

    @property
    def Subscript(self) -> int:
        """
        Get: Subscript(self: FontClass) -> int
        Set: Subscript(self: FontClass) = value
        """
        ...

    @property
    def Superscript(self) -> int:
        """
        Get: Superscript(self: FontClass) -> int
        Set: Superscript(self: FontClass) = value
        """
        ...

    @property
    def TextColor(self) -> ColorFormat:
        """ Get: TextColor(self: FontClass) -> ColorFormat """
        ...

    @property
    def TextShadow(self) -> ShadowFormat:
        """
        Get: TextShadow(self: FontClass) -> ShadowFormat
        Set: TextShadow(self: FontClass) = value
        """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """
        Get: ThreeD(self: FontClass) -> ThreeDFormat
        Set: ThreeD(self: FontClass) = value
        """
        ...

    @property
    def Underline(self) -> WdUnderline:
        """
        Get: Underline(self: FontClass) -> WdUnderline
        Set: Underline(self: FontClass) = value
        """
        ...

    @property
    def UnderlineColor(self) -> WdColor:
        """
        Get: UnderlineColor(self: FontClass) -> WdColor
        Set: UnderlineColor(self: FontClass) = value
        """
        ...


    def Grow(self): # -> 
        """ Grow(self: FontClass) """
        ...

    def Reset(self): # -> 
        """ Reset(self: FontClass) """
        ...

    def SetAsTemplateDefault(self): # -> 
        """ SetAsTemplateDefault(self: FontClass) """
        ...

    def Shrink(self): # -> 
        """ Shrink(self: FontClass) """
        ...


class FontNames(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FontNames) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: FontNames) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FontNames) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FontNames) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Footnote: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Footnote) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Footnote) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Footnote) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Footnote) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Footnote) -> Range """
        ...

    @property
    def Reference(self) -> Range:
        """ Get: Reference(self: Footnote) -> Range """
        ...


    def Delete(self): # -> 
        """ Delete(self: Footnote) """
        ...


class FootnoteOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FootnoteOptions) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FootnoteOptions) -> int """
        ...

    @property
    def LayoutColumns(self) -> int:
        """
        Get: LayoutColumns(self: FootnoteOptions) -> int
        Set: LayoutColumns(self: FootnoteOptions) = value
        """
        ...

    @property
    def Location(self) -> WdFootnoteLocation:
        """
        Get: Location(self: FootnoteOptions) -> WdFootnoteLocation
        Set: Location(self: FootnoteOptions) = value
        """
        ...

    @property
    def NumberingRule(self) -> WdNumberingRule:
        """
        Get: NumberingRule(self: FootnoteOptions) -> WdNumberingRule
        Set: NumberingRule(self: FootnoteOptions) = value
        """
        ...

    @property
    def NumberStyle(self) -> WdNoteNumberStyle:
        """
        Get: NumberStyle(self: FootnoteOptions) -> WdNoteNumberStyle
        Set: NumberStyle(self: FootnoteOptions) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FootnoteOptions) -> object """
        ...

    @property
    def StartingNumber(self) -> int:
        """
        Get: StartingNumber(self: FootnoteOptions) -> int
        Set: StartingNumber(self: FootnoteOptions) = value
        """
        ...



class Footnotes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Footnotes) -> Application """
        ...

    @property
    def ContinuationNotice(self) -> Range:
        """ Get: ContinuationNotice(self: Footnotes) -> Range """
        ...

    @property
    def ContinuationSeparator(self) -> Range:
        """ Get: ContinuationSeparator(self: Footnotes) -> Range """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Footnotes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Footnotes) -> int """
        ...

    @property
    def Location(self) -> WdFootnoteLocation:
        """
        Get: Location(self: Footnotes) -> WdFootnoteLocation
        Set: Location(self: Footnotes) = value
        """
        ...

    @property
    def NumberingRule(self) -> WdNumberingRule:
        """
        Get: NumberingRule(self: Footnotes) -> WdNumberingRule
        Set: NumberingRule(self: Footnotes) = value
        """
        ...

    @property
    def NumberStyle(self) -> WdNoteNumberStyle:
        """
        Get: NumberStyle(self: Footnotes) -> WdNoteNumberStyle
        Set: NumberStyle(self: Footnotes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Footnotes) -> object """
        ...

    @property
    def Separator(self) -> Range:
        """ Get: Separator(self: Footnotes) -> Range """
        ...

    @property
    def StartingNumber(self) -> int:
        """
        Get: StartingNumber(self: Footnotes) -> int
        Set: StartingNumber(self: Footnotes) = value
        """
        ...


    def Add(self, Range:Range, Reference:object, Text:object) -> Tuple_[Footnote, object, object]:
        """ Add(self: Footnotes, Range: Range, Reference: object, Text: object) -> (Footnote, object, object) """
        ...

    def Convert(self): # -> 
        """ Convert(self: Footnotes) """
        ...

    def ResetContinuationNotice(self): # -> 
        """ ResetContinuationNotice(self: Footnotes) """
        ...

    def ResetContinuationSeparator(self): # -> 
        """ ResetContinuationSeparator(self: Footnotes) """
        ...

    def ResetSeparator(self): # -> 
        """ ResetSeparator(self: Footnotes) """
        ...

    def SwapWithEndnotes(self): # -> 
        """ SwapWithEndnotes(self: Footnotes) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class FormField: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FormField) -> Application """
        ...

    @property
    def CalculateOnExit(self) -> bool:
        """
        Get: CalculateOnExit(self: FormField) -> bool
        Set: CalculateOnExit(self: FormField) = value
        """
        ...

    @property
    def CheckBox(self) -> CheckBox:
        """ Get: CheckBox(self: FormField) -> CheckBox """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FormField) -> int """
        ...

    @property
    def DropDown(self) -> DropDown:
        """ Get: DropDown(self: FormField) -> DropDown """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: FormField) -> bool
        Set: Enabled(self: FormField) = value
        """
        ...

    @property
    def EntryMacro(self) -> str:
        """
        Get: EntryMacro(self: FormField) -> str
        Set: EntryMacro(self: FormField) = value
        """
        ...

    @property
    def ExitMacro(self) -> str:
        """
        Get: ExitMacro(self: FormField) -> str
        Set: ExitMacro(self: FormField) = value
        """
        ...

    @property
    def HelpText(self) -> str:
        """
        Get: HelpText(self: FormField) -> str
        Set: HelpText(self: FormField) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: FormField) -> str
        Set: Name(self: FormField) = value
        """
        ...

    @property
    def Next(self) -> FormField:
        """ Get: Next(self: FormField) -> FormField """
        ...

    @property
    def OwnHelp(self) -> bool:
        """
        Get: OwnHelp(self: FormField) -> bool
        Set: OwnHelp(self: FormField) = value
        """
        ...

    @property
    def OwnStatus(self) -> bool:
        """
        Get: OwnStatus(self: FormField) -> bool
        Set: OwnStatus(self: FormField) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FormField) -> object """
        ...

    @property
    def Previous(self) -> FormField:
        """ Get: Previous(self: FormField) -> FormField """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: FormField) -> Range """
        ...

    @property
    def Result(self) -> str:
        """
        Get: Result(self: FormField) -> str
        Set: Result(self: FormField) = value
        """
        ...

    @property
    def StatusText(self) -> str:
        """
        Get: StatusText(self: FormField) -> str
        Set: StatusText(self: FormField) = value
        """
        ...

    @property
    def TextInput(self) -> TextInput:
        """ Get: TextInput(self: FormField) -> TextInput """
        ...

    @property
    def Type(self) -> WdFieldType:
        """ Get: Type(self: FormField) -> WdFieldType """
        ...


    def Copy(self): # -> 
        """ Copy(self: FormField) """
        ...

    def Cut(self): # -> 
        """ Cut(self: FormField) """
        ...

    def Delete(self): # -> 
        """ Delete(self: FormField) """
        ...

    def Select(self): # -> 
        """ Select(self: FormField) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class FormFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FormFields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: FormFields) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FormFields) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FormFields) -> object """
        ...

    @property
    def Shaded(self) -> bool:
        """
        Get: Shaded(self: FormFields) -> bool
        Set: Shaded(self: FormFields) = value
        """
        ...


    def Add(self, Range:Range, Type:WdFieldType) -> FormField:
        """ Add(self: FormFields, Range: Range, Type: WdFieldType) -> FormField """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Frame: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Frame) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Frame) -> Borders
        Set: Borders(self: Frame) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Frame) -> int """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: Frame) -> Single
        Set: Height(self: Frame) = value
        """
        ...

    @property
    def HeightRule(self) -> WdFrameSizeRule:
        """
        Get: HeightRule(self: Frame) -> WdFrameSizeRule
        Set: HeightRule(self: Frame) = value
        """
        ...

    @property
    def HorizontalDistanceFromText(self) -> Single:
        """
        Get: HorizontalDistanceFromText(self: Frame) -> Single
        Set: HorizontalDistanceFromText(self: Frame) = value
        """
        ...

    @property
    def HorizontalPosition(self) -> Single:
        """
        Get: HorizontalPosition(self: Frame) -> Single
        Set: HorizontalPosition(self: Frame) = value
        """
        ...

    @property
    def LockAnchor(self) -> bool:
        """
        Get: LockAnchor(self: Frame) -> bool
        Set: LockAnchor(self: Frame) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Frame) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Frame) -> Range """
        ...

    @property
    def RelativeHorizontalPosition(self) -> WdRelativeHorizontalPosition:
        """
        Get: RelativeHorizontalPosition(self: Frame) -> WdRelativeHorizontalPosition
        Set: RelativeHorizontalPosition(self: Frame) = value
        """
        ...

    @property
    def RelativeVerticalPosition(self) -> WdRelativeVerticalPosition:
        """
        Get: RelativeVerticalPosition(self: Frame) -> WdRelativeVerticalPosition
        Set: RelativeVerticalPosition(self: Frame) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Frame) -> Shading """
        ...

    @property
    def TextWrap(self) -> bool:
        """
        Get: TextWrap(self: Frame) -> bool
        Set: TextWrap(self: Frame) = value
        """
        ...

    @property
    def VerticalDistanceFromText(self) -> Single:
        """
        Get: VerticalDistanceFromText(self: Frame) -> Single
        Set: VerticalDistanceFromText(self: Frame) = value
        """
        ...

    @property
    def VerticalPosition(self) -> Single:
        """
        Get: VerticalPosition(self: Frame) -> Single
        Set: VerticalPosition(self: Frame) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: Frame) -> Single
        Set: Width(self: Frame) = value
        """
        ...

    @property
    def WidthRule(self) -> WdFrameSizeRule:
        """
        Get: WidthRule(self: Frame) -> WdFrameSizeRule
        Set: WidthRule(self: Frame) = value
        """
        ...


    def Copy(self): # -> 
        """ Copy(self: Frame) """
        ...

    def Cut(self): # -> 
        """ Cut(self: Frame) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Frame) """
        ...

    def Select(self): # -> 
        """ Select(self: Frame) """
        ...


class Frames(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Frames) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Frames) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Frames) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Frames) -> object """
        ...


    def Add(self, Range:Range) -> Frame:
        """ Add(self: Frames, Range: Range) -> Frame """
        ...

    def Delete(self): # -> 
        """ Delete(self: Frames) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Frameset(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Frameset) -> Application """
        ...

    @property
    def ChildFramesetCount(self) -> int:
        """ Get: ChildFramesetCount(self: Frameset) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Frameset) -> int """
        ...

    @property
    def FrameDefaultURL(self) -> str:
        """
        Get: FrameDefaultURL(self: Frameset) -> str
        Set: FrameDefaultURL(self: Frameset) = value
        """
        ...

    @property
    def FrameDisplayBorders(self) -> bool:
        """
        Get: FrameDisplayBorders(self: Frameset) -> bool
        Set: FrameDisplayBorders(self: Frameset) = value
        """
        ...

    @property
    def FrameLinkToFile(self) -> bool:
        """
        Get: FrameLinkToFile(self: Frameset) -> bool
        Set: FrameLinkToFile(self: Frameset) = value
        """
        ...

    @property
    def FrameName(self) -> str:
        """
        Get: FrameName(self: Frameset) -> str
        Set: FrameName(self: Frameset) = value
        """
        ...

    @property
    def FrameResizable(self) -> bool:
        """
        Get: FrameResizable(self: Frameset) -> bool
        Set: FrameResizable(self: Frameset) = value
        """
        ...

    @property
    def FrameScrollbarType(self) -> WdScrollbarType:
        """
        Get: FrameScrollbarType(self: Frameset) -> WdScrollbarType
        Set: FrameScrollbarType(self: Frameset) = value
        """
        ...

    @property
    def FramesetBorderColor(self) -> WdColor:
        """
        Get: FramesetBorderColor(self: Frameset) -> WdColor
        Set: FramesetBorderColor(self: Frameset) = value
        """
        ...

    @property
    def FramesetBorderWidth(self) -> Single:
        """
        Get: FramesetBorderWidth(self: Frameset) -> Single
        Set: FramesetBorderWidth(self: Frameset) = value
        """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: Frameset) -> int
        Set: Height(self: Frameset) = value
        """
        ...

    @property
    def HeightType(self) -> WdFramesetSizeType:
        """
        Get: HeightType(self: Frameset) -> WdFramesetSizeType
        Set: HeightType(self: Frameset) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Frameset) -> object """
        ...

    @property
    def ParentFrameset(self) -> Frameset:
        """ Get: ParentFrameset(self: Frameset) -> Frameset """
        ...

    @property
    def Type(self) -> WdFramesetType:
        """ Get: Type(self: Frameset) -> WdFramesetType """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: Frameset) -> int
        Set: Width(self: Frameset) = value
        """
        ...

    @property
    def WidthType(self) -> WdFramesetSizeType:
        """
        Get: WidthType(self: Frameset) -> WdFramesetSizeType
        Set: WidthType(self: Frameset) = value
        """
        ...


    def AddNewFrame(self, Where:WdFramesetNewFrameLocation) -> Frameset:
        """ AddNewFrame(self: Frameset, Where: WdFramesetNewFrameLocation) -> Frameset """
        ...

    def Delete(self): # -> 
        """ Delete(self: Frameset) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class FreeformBuilder: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: FreeformBuilder) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FreeformBuilder) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FreeformBuilder) -> object """
        ...


    def AddNodes(self, SegmentType, EditingType, X1:Single, Y1:Single, X2:Single, Y2:Single, X3:Single, Y3:Single): # ->  # Not found arg types: {'EditingType': 'MsoEditingType', 'SegmentType': 'MsoSegmentType'}
        """ AddNodes(self: FreeformBuilder, SegmentType: MsoSegmentType, EditingType: MsoEditingType, X1: Single, Y1: Single, X2: Single, Y2: Single, X3: Single, Y3: Single) """
        ...

    def ConvertToShape(self, Anchor:object) -> Tuple_[Shape, object]:
        """ ConvertToShape(self: FreeformBuilder, Anchor: object) -> (Shape, object) """
        ...


class FullSeriesCollection(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: FullSeriesCollection) -> object """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: FullSeriesCollection) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: FullSeriesCollection) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: FullSeriesCollection) -> object """
        ...


    def _Default(self, Index:object) -> Series:
        """ _Default(self: FullSeriesCollection, Index: object) -> Series """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _Global: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveDocument(self) -> Document:
        """ Get: ActiveDocument(self: _Global) -> Document """
        ...

    @property
    def ActivePrinter(self) -> str:
        """
        Get: ActivePrinter(self: _Global) -> str
        Set: ActivePrinter(self: _Global) = value
        """
        ...

    @property
    def ActiveProtectedViewWindow(self) -> ProtectedViewWindow:
        """ Get: ActiveProtectedViewWindow(self: _Global) -> ProtectedViewWindow """
        ...

    @property
    def ActiveWindow(self) -> Window:
        """ Get: ActiveWindow(self: _Global) -> Window """
        ...

    @property
    def AddIns(self) -> AddIns:
        """ Get: AddIns(self: _Global) -> AddIns """
        ...

    @property
    def AnswerWizard(self): # -> AnswerWizard
        """ Get: AnswerWizard(self: _Global) -> AnswerWizard """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _Global) -> Application """
        ...

    @property
    def Assistant(self): # -> Assistant
        """ Get: Assistant(self: _Global) -> Assistant """
        ...

    @property
    def AutoCaptions(self) -> AutoCaptions:
        """ Get: AutoCaptions(self: _Global) -> AutoCaptions """
        ...

    @property
    def AutoCorrect(self) -> AutoCorrect:
        """ Get: AutoCorrect(self: _Global) -> AutoCorrect """
        ...

    @property
    def AutoCorrectEmail(self) -> AutoCorrect:
        """ Get: AutoCorrectEmail(self: _Global) -> AutoCorrect """
        ...

    @property
    def CaptionLabels(self) -> CaptionLabels:
        """ Get: CaptionLabels(self: _Global) -> CaptionLabels """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: _Global) -> CommandBars """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: _Global) -> int """
        ...

    @property
    def CustomDictionaries(self) -> Dictionaries:
        """ Get: CustomDictionaries(self: _Global) -> Dictionaries """
        ...

    @property
    def CustomizationContext(self) -> object:
        """
        Get: CustomizationContext(self: _Global) -> object
        Set: CustomizationContext(self: _Global) = value
        """
        ...

    @property
    def Dialogs(self) -> Dialogs:
        """ Get: Dialogs(self: _Global) -> Dialogs """
        ...

    @property
    def Documents(self) -> Documents:
        """ Get: Documents(self: _Global) -> Documents """
        ...

    @property
    def FileConverters(self) -> FileConverters:
        """ Get: FileConverters(self: _Global) -> FileConverters """
        ...

    @property
    def FontNames(self) -> FontNames:
        """ Get: FontNames(self: _Global) -> FontNames """
        ...

    @property
    def HangulHanjaDictionaries(self) -> HangulHanjaConversionDictionaries:
        """ Get: HangulHanjaDictionaries(self: _Global) -> HangulHanjaConversionDictionaries """
        ...

    @property
    def IsSandboxed(self) -> bool:
        """ Get: IsSandboxed(self: _Global) -> bool """
        ...

    @property
    def KeyBindings(self) -> KeyBindings:
        """ Get: KeyBindings(self: _Global) -> KeyBindings """
        ...

    @property
    def LandscapeFontNames(self) -> FontNames:
        """ Get: LandscapeFontNames(self: _Global) -> FontNames """
        ...

    @property
    def Languages(self) -> Languages:
        """ Get: Languages(self: _Global) -> Languages """
        ...

    @property
    def LanguageSettings(self): # -> LanguageSettings
        """ Get: LanguageSettings(self: _Global) -> LanguageSettings """
        ...

    @property
    def ListGalleries(self) -> ListGalleries:
        """ Get: ListGalleries(self: _Global) -> ListGalleries """
        ...

    @property
    def MacroContainer(self) -> object:
        """ Get: MacroContainer(self: _Global) -> object """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: _Global) -> str """
        ...

    @property
    def NormalTemplate(self) -> Template:
        """ Get: NormalTemplate(self: _Global) -> Template """
        ...

    @property
    def Options(self) -> Options:
        """ Get: Options(self: _Global) -> Options """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _Global) -> object """
        ...

    @property
    def PortraitFontNames(self) -> FontNames:
        """ Get: PortraitFontNames(self: _Global) -> FontNames """
        ...

    @property
    def PrintPreview(self) -> bool:
        """
        Get: PrintPreview(self: _Global) -> bool
        Set: PrintPreview(self: _Global) = value
        """
        ...

    @property
    def ProtectedViewWindows(self) -> ProtectedViewWindows:
        """ Get: ProtectedViewWindows(self: _Global) -> ProtectedViewWindows """
        ...

    @property
    def RecentFiles(self) -> RecentFiles:
        """ Get: RecentFiles(self: _Global) -> RecentFiles """
        ...

    @property
    def Selection(self) -> Selection:
        """ Get: Selection(self: _Global) -> Selection """
        ...

    @property
    def ShowVisualBasicEditor(self) -> bool:
        """
        Get: ShowVisualBasicEditor(self: _Global) -> bool
        Set: ShowVisualBasicEditor(self: _Global) = value
        """
        ...

    @property
    def StatusBar(self): # -> 
        """ Set: StatusBar(self: _Global) = value """
        ...

    @property
    def System(self) -> System:
        """ Get: System(self: _Global) -> System """
        ...

    @property
    def Tasks(self) -> Tasks:
        """ Get: Tasks(self: _Global) -> Tasks """
        ...

    @property
    def Templates(self) -> Templates:
        """ Get: Templates(self: _Global) -> Templates """
        ...

    @property
    def VBE(self): # -> VBE
        """ Get: VBE(self: _Global) -> VBE """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: _Global) -> Windows """
        ...

    @property
    def WordBasic(self) -> object:
        """ Get: WordBasic(self: _Global) -> object """
        ...


    def BuildKeyCode(self, Arg1:WdKey, Arg2:object, Arg3:object, Arg4:object) -> Tuple_[int, object, object, object]:
        """ BuildKeyCode(self: _Global, Arg1: WdKey, Arg2: object, Arg3: object, Arg4: object) -> (int, object, object, object) """
        ...

    def CentimetersToPoints(self, Centimeters:Single) -> Single:
        """ CentimetersToPoints(self: _Global, Centimeters: Single) -> Single """
        ...

    def ChangeFileOpenDirectory(self, Path:str): # -> 
        """ ChangeFileOpenDirectory(self: _Global, Path: str) """
        ...

    def CheckSpelling(self, Word:str, CustomDictionary:object, IgnoreUppercase:object, MainDictionary:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[bool, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ CheckSpelling(self: _Global, Word: str, CustomDictionary: object, IgnoreUppercase: object, MainDictionary: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (bool, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def CleanString(self, String:str) -> str:
        """ CleanString(self: _Global, String: str) -> str """
        ...

    def DDEExecute(self, Channel:int, Command:str): # -> 
        """ DDEExecute(self: _Global, Channel: int, Command: str) """
        ...

    def DDEInitiate(self, App:str, Topic:str) -> int:
        """ DDEInitiate(self: _Global, App: str, Topic: str) -> int """
        ...

    def DDEPoke(self, Channel:int, Item:str, Data:str): # -> 
        """ DDEPoke(self: _Global, Channel: int, Item: str, Data: str) """
        ...

    def DDERequest(self, Channel:int, Item:str) -> str:
        """ DDERequest(self: _Global, Channel: int, Item: str) -> str """
        ...

    def DDETerminate(self, Channel:int): # -> 
        """ DDETerminate(self: _Global, Channel: int) """
        ...

    def DDETerminateAll(self): # -> 
        """ DDETerminateAll(self: _Global) """
        ...

    def GetSpellingSuggestions(self, Word:str, CustomDictionary:object, IgnoreUppercase:object, MainDictionary:object, SuggestionMode:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[SpellingSuggestions, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ GetSpellingSuggestions(self: _Global, Word: str, CustomDictionary: object, IgnoreUppercase: object, MainDictionary: object, SuggestionMode: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (SpellingSuggestions, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Help(self, HelpType:object) -> object:
        """ Help(self: _Global, HelpType: object) -> object """
        ...

    def InchesToPoints(self, Inches:Single) -> Single:
        """ InchesToPoints(self: _Global, Inches: Single) -> Single """
        ...

    def KeyString(self, KeyCode:int, KeyCode2:object) -> Tuple_[str, object]:
        """ KeyString(self: _Global, KeyCode: int, KeyCode2: object) -> (str, object) """
        ...

    def LinesToPoints(self, Lines:Single) -> Single:
        """ LinesToPoints(self: _Global, Lines: Single) -> Single """
        ...

    def MillimetersToPoints(self, Millimeters:Single) -> Single:
        """ MillimetersToPoints(self: _Global, Millimeters: Single) -> Single """
        ...

    def NewWindow(self) -> Window:
        """ NewWindow(self: _Global) -> Window """
        ...

    def PicasToPoints(self, Picas:Single) -> Single:
        """ PicasToPoints(self: _Global, Picas: Single) -> Single """
        ...

    def PixelsToPoints(self, Pixels:Single, fVertical:object) -> Tuple_[Single, object]:
        """ PixelsToPoints(self: _Global, Pixels: Single, fVertical: object) -> (Single, object) """
        ...

    def PointsToCentimeters(self, Points:Single) -> Single:
        """ PointsToCentimeters(self: _Global, Points: Single) -> Single """
        ...

    def PointsToInches(self, Points:Single) -> Single:
        """ PointsToInches(self: _Global, Points: Single) -> Single """
        ...

    def PointsToLines(self, Points:Single) -> Single:
        """ PointsToLines(self: _Global, Points: Single) -> Single """
        ...

    def PointsToMillimeters(self, Points:Single) -> Single:
        """ PointsToMillimeters(self: _Global, Points: Single) -> Single """
        ...

    def PointsToPicas(self, Points:Single) -> Single:
        """ PointsToPicas(self: _Global, Points: Single) -> Single """
        ...

    def PointsToPixels(self, Points:Single, fVertical:object) -> Tuple_[Single, object]:
        """ PointsToPixels(self: _Global, Points: Single, fVertical: object) -> (Single, object) """
        ...

    def Repeat(self, Times:object) -> Tuple_[bool, object]:
        """ Repeat(self: _Global, Times: object) -> (bool, object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Global(_Global): # skipped bases: <type 'object'>
    """ no doc """
    pass

class GlobalClass(__ComObject, Global): # skipped bases: <type '_Global'>, <type 'object'>
    """ GlobalClass() """
    @property
    def ActiveDocument(self) -> Document:
        """ Get: ActiveDocument(self: GlobalClass) -> Document """
        ...

    @property
    def ActivePrinter(self) -> str:
        """
        Get: ActivePrinter(self: GlobalClass) -> str
        Set: ActivePrinter(self: GlobalClass) = value
        """
        ...

    @property
    def ActiveProtectedViewWindow(self) -> ProtectedViewWindow:
        """ Get: ActiveProtectedViewWindow(self: GlobalClass) -> ProtectedViewWindow """
        ...

    @property
    def ActiveWindow(self) -> Window:
        """ Get: ActiveWindow(self: GlobalClass) -> Window """
        ...

    @property
    def AddIns(self) -> AddIns:
        """ Get: AddIns(self: GlobalClass) -> AddIns """
        ...

    @property
    def AnswerWizard(self): # -> AnswerWizard
        """ Get: AnswerWizard(self: GlobalClass) -> AnswerWizard """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: GlobalClass) -> Application """
        ...

    @property
    def Assistant(self): # -> Assistant
        """ Get: Assistant(self: GlobalClass) -> Assistant """
        ...

    @property
    def AutoCaptions(self) -> AutoCaptions:
        """ Get: AutoCaptions(self: GlobalClass) -> AutoCaptions """
        ...

    @property
    def AutoCorrect(self) -> AutoCorrect:
        """ Get: AutoCorrect(self: GlobalClass) -> AutoCorrect """
        ...

    @property
    def AutoCorrectEmail(self) -> AutoCorrect:
        """ Get: AutoCorrectEmail(self: GlobalClass) -> AutoCorrect """
        ...

    @property
    def CaptionLabels(self) -> CaptionLabels:
        """ Get: CaptionLabels(self: GlobalClass) -> CaptionLabels """
        ...

    @property
    def CommandBars(self) -> CommandBars:
        """ Get: CommandBars(self: GlobalClass) -> CommandBars """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: GlobalClass) -> int """
        ...

    @property
    def CustomDictionaries(self) -> Dictionaries:
        """ Get: CustomDictionaries(self: GlobalClass) -> Dictionaries """
        ...

    @property
    def CustomizationContext(self) -> object:
        """
        Get: CustomizationContext(self: GlobalClass) -> object
        Set: CustomizationContext(self: GlobalClass) = value
        """
        ...

    @property
    def Dialogs(self) -> Dialogs:
        """ Get: Dialogs(self: GlobalClass) -> Dialogs """
        ...

    @property
    def Documents(self) -> Documents:
        """ Get: Documents(self: GlobalClass) -> Documents """
        ...

    @property
    def FileConverters(self) -> FileConverters:
        """ Get: FileConverters(self: GlobalClass) -> FileConverters """
        ...

    @property
    def FontNames(self) -> FontNames:
        """ Get: FontNames(self: GlobalClass) -> FontNames """
        ...

    @property
    def HangulHanjaDictionaries(self) -> HangulHanjaConversionDictionaries:
        """ Get: HangulHanjaDictionaries(self: GlobalClass) -> HangulHanjaConversionDictionaries """
        ...

    @property
    def IsSandboxed(self) -> bool:
        """ Get: IsSandboxed(self: GlobalClass) -> bool """
        ...

    @property
    def KeyBindings(self) -> KeyBindings:
        """ Get: KeyBindings(self: GlobalClass) -> KeyBindings """
        ...

    @property
    def LandscapeFontNames(self) -> FontNames:
        """ Get: LandscapeFontNames(self: GlobalClass) -> FontNames """
        ...

    @property
    def Languages(self) -> Languages:
        """ Get: Languages(self: GlobalClass) -> Languages """
        ...

    @property
    def LanguageSettings(self): # -> LanguageSettings
        """ Get: LanguageSettings(self: GlobalClass) -> LanguageSettings """
        ...

    @property
    def ListGalleries(self) -> ListGalleries:
        """ Get: ListGalleries(self: GlobalClass) -> ListGalleries """
        ...

    @property
    def MacroContainer(self) -> object:
        """ Get: MacroContainer(self: GlobalClass) -> object """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: GlobalClass) -> str """
        ...

    @property
    def NormalTemplate(self) -> Template:
        """ Get: NormalTemplate(self: GlobalClass) -> Template """
        ...

    @property
    def Options(self) -> Options:
        """ Get: Options(self: GlobalClass) -> Options """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: GlobalClass) -> object """
        ...

    @property
    def PortraitFontNames(self) -> FontNames:
        """ Get: PortraitFontNames(self: GlobalClass) -> FontNames """
        ...

    @property
    def PrintPreview(self) -> bool:
        """
        Get: PrintPreview(self: GlobalClass) -> bool
        Set: PrintPreview(self: GlobalClass) = value
        """
        ...

    @property
    def ProtectedViewWindows(self) -> ProtectedViewWindows:
        """ Get: ProtectedViewWindows(self: GlobalClass) -> ProtectedViewWindows """
        ...

    @property
    def RecentFiles(self) -> RecentFiles:
        """ Get: RecentFiles(self: GlobalClass) -> RecentFiles """
        ...

    @property
    def Selection(self) -> Selection:
        """ Get: Selection(self: GlobalClass) -> Selection """
        ...

    @property
    def ShowVisualBasicEditor(self) -> bool:
        """
        Get: ShowVisualBasicEditor(self: GlobalClass) -> bool
        Set: ShowVisualBasicEditor(self: GlobalClass) = value
        """
        ...

    @property
    def StatusBar(self): # -> 
        """ Set: StatusBar(self: GlobalClass) = value """
        ...

    @property
    def System(self) -> System:
        """ Get: System(self: GlobalClass) -> System """
        ...

    @property
    def Tasks(self) -> Tasks:
        """ Get: Tasks(self: GlobalClass) -> Tasks """
        ...

    @property
    def Templates(self) -> Templates:
        """ Get: Templates(self: GlobalClass) -> Templates """
        ...

    @property
    def VBE(self): # -> VBE
        """ Get: VBE(self: GlobalClass) -> VBE """
        ...

    @property
    def Windows(self) -> Windows:
        """ Get: Windows(self: GlobalClass) -> Windows """
        ...

    @property
    def WordBasic(self) -> object:
        """ Get: WordBasic(self: GlobalClass) -> object """
        ...


    def BuildKeyCode(self, Arg1:WdKey, Arg2:object, Arg3:object, Arg4:object) -> Tuple_[int, object, object, object]:
        """ BuildKeyCode(self: GlobalClass, Arg1: WdKey, Arg2: object, Arg3: object, Arg4: object) -> (int, object, object, object) """
        ...

    def CentimetersToPoints(self, Centimeters:Single) -> Single:
        """ CentimetersToPoints(self: GlobalClass, Centimeters: Single) -> Single """
        ...

    def ChangeFileOpenDirectory(self, Path:str): # -> 
        """ ChangeFileOpenDirectory(self: GlobalClass, Path: str) """
        ...

    def CheckSpelling(self, Word:str, CustomDictionary:object, IgnoreUppercase:object, MainDictionary:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[bool, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ CheckSpelling(self: GlobalClass, Word: str, CustomDictionary: object, IgnoreUppercase: object, MainDictionary: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (bool, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def CleanString(self, String:str) -> str:
        """ CleanString(self: GlobalClass, String: str) -> str """
        ...

    def DDEExecute(self, Channel:int, Command:str): # -> 
        """ DDEExecute(self: GlobalClass, Channel: int, Command: str) """
        ...

    def DDEInitiate(self, App:str, Topic:str) -> int:
        """ DDEInitiate(self: GlobalClass, App: str, Topic: str) -> int """
        ...

    def DDEPoke(self, Channel:int, Item:str, Data:str): # -> 
        """ DDEPoke(self: GlobalClass, Channel: int, Item: str, Data: str) """
        ...

    def DDERequest(self, Channel:int, Item:str) -> str:
        """ DDERequest(self: GlobalClass, Channel: int, Item: str) -> str """
        ...

    def DDETerminate(self, Channel:int): # -> 
        """ DDETerminate(self: GlobalClass, Channel: int) """
        ...

    def DDETerminateAll(self): # -> 
        """ DDETerminateAll(self: GlobalClass) """
        ...

    def GetSpellingSuggestions(self, Word:str, CustomDictionary:object, IgnoreUppercase:object, MainDictionary:object, SuggestionMode:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[SpellingSuggestions, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ GetSpellingSuggestions(self: GlobalClass, Word: str, CustomDictionary: object, IgnoreUppercase: object, MainDictionary: object, SuggestionMode: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (SpellingSuggestions, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Help(self, HelpType:object) -> object:
        """ Help(self: GlobalClass, HelpType: object) -> object """
        ...

    def InchesToPoints(self, Inches:Single) -> Single:
        """ InchesToPoints(self: GlobalClass, Inches: Single) -> Single """
        ...

    def KeyString(self, KeyCode:int, KeyCode2:object) -> Tuple_[str, object]:
        """ KeyString(self: GlobalClass, KeyCode: int, KeyCode2: object) -> (str, object) """
        ...

    def LinesToPoints(self, Lines:Single) -> Single:
        """ LinesToPoints(self: GlobalClass, Lines: Single) -> Single """
        ...

    def MillimetersToPoints(self, Millimeters:Single) -> Single:
        """ MillimetersToPoints(self: GlobalClass, Millimeters: Single) -> Single """
        ...

    def NewWindow(self) -> Window:
        """ NewWindow(self: GlobalClass) -> Window """
        ...

    def PicasToPoints(self, Picas:Single) -> Single:
        """ PicasToPoints(self: GlobalClass, Picas: Single) -> Single """
        ...

    def PixelsToPoints(self, Pixels:Single, fVertical:object) -> Tuple_[Single, object]:
        """ PixelsToPoints(self: GlobalClass, Pixels: Single, fVertical: object) -> (Single, object) """
        ...

    def PointsToCentimeters(self, Points:Single) -> Single:
        """ PointsToCentimeters(self: GlobalClass, Points: Single) -> Single """
        ...

    def PointsToInches(self, Points:Single) -> Single:
        """ PointsToInches(self: GlobalClass, Points: Single) -> Single """
        ...

    def PointsToLines(self, Points:Single) -> Single:
        """ PointsToLines(self: GlobalClass, Points: Single) -> Single """
        ...

    def PointsToMillimeters(self, Points:Single) -> Single:
        """ PointsToMillimeters(self: GlobalClass, Points: Single) -> Single """
        ...

    def PointsToPicas(self, Points:Single) -> Single:
        """ PointsToPicas(self: GlobalClass, Points: Single) -> Single """
        ...

    def PointsToPixels(self, Points:Single, fVertical:object) -> Tuple_[Single, object]:
        """ PointsToPixels(self: GlobalClass, Points: Single, fVertical: object) -> (Single, object) """
        ...

    def Repeat(self, Times:object) -> Tuple_[bool, object]:
        """ Repeat(self: GlobalClass, Times: object) -> (bool, object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class GlowFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: GlowFormat) -> Application """
        ...

    @property
    def Color(self) -> ColorFormat:
        """ Get: Color(self: GlowFormat) -> ColorFormat """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: GlowFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: GlowFormat) -> object """
        ...

    @property
    def Radius(self) -> Single:
        """
        Get: Radius(self: GlowFormat) -> Single
        Set: Radius(self: GlowFormat) = value
        """
        ...

    @property
    def Transparency(self) -> Single:
        """
        Get: Transparency(self: GlowFormat) -> Single
        Set: Transparency(self: GlowFormat) = value
        """
        ...



class Gridlines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Gridlines) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: Gridlines) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Gridlines) -> int """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Gridlines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Gridlines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Gridlines) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: Gridlines) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: Gridlines) -> object """
        ...


class GroupShapes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: GroupShapes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: GroupShapes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: GroupShapes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: GroupShapes) -> object """
        ...


    def Range(self, Index:object) -> Tuple_[ShapeRange, object]:
        """ Range(self: GroupShapes, Index: object) -> (ShapeRange, object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class HangulAndAlphabetException: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: HangulAndAlphabetException) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: HangulAndAlphabetException) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: HangulAndAlphabetException) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: HangulAndAlphabetException) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HangulAndAlphabetException) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: HangulAndAlphabetException) """
        ...


class HangulAndAlphabetExceptions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: HangulAndAlphabetExceptions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: HangulAndAlphabetExceptions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: HangulAndAlphabetExceptions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HangulAndAlphabetExceptions) -> object """
        ...


    def Add(self, Name:str) -> HangulAndAlphabetException:
        """ Add(self: HangulAndAlphabetExceptions, Name: str) -> HangulAndAlphabetException """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class HangulHanjaConversionDictionaries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveCustomDictionary(self) -> Dictionary:
        """
        Get: ActiveCustomDictionary(self: HangulHanjaConversionDictionaries) -> Dictionary
        Set: ActiveCustomDictionary(self: HangulHanjaConversionDictionaries) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: HangulHanjaConversionDictionaries) -> Application """
        ...

    @property
    def BuiltinDictionary(self) -> Dictionary:
        """ Get: BuiltinDictionary(self: HangulHanjaConversionDictionaries) -> Dictionary """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: HangulHanjaConversionDictionaries) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: HangulHanjaConversionDictionaries) -> int """
        ...

    @property
    def Maximum(self) -> int:
        """ Get: Maximum(self: HangulHanjaConversionDictionaries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HangulHanjaConversionDictionaries) -> object """
        ...


    def Add(self, FileName:str) -> Dictionary:
        """ Add(self: HangulHanjaConversionDictionaries, FileName: str) -> Dictionary """
        ...

    def ClearAll(self): # -> 
        """ ClearAll(self: HangulHanjaConversionDictionaries) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class HeaderFooter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: HeaderFooter) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: HeaderFooter) -> int """
        ...

    @property
    def Exists(self) -> bool:
        """
        Get: Exists(self: HeaderFooter) -> bool
        Set: Exists(self: HeaderFooter) = value
        """
        ...

    @property
    def Index(self) -> WdHeaderFooterIndex:
        """ Get: Index(self: HeaderFooter) -> WdHeaderFooterIndex """
        ...

    @property
    def IsHeader(self) -> bool:
        """ Get: IsHeader(self: HeaderFooter) -> bool """
        ...

    @property
    def LinkToPrevious(self) -> bool:
        """
        Get: LinkToPrevious(self: HeaderFooter) -> bool
        Set: LinkToPrevious(self: HeaderFooter) = value
        """
        ...

    @property
    def PageNumbers(self) -> PageNumbers:
        """ Get: PageNumbers(self: HeaderFooter) -> PageNumbers """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HeaderFooter) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: HeaderFooter) -> Range """
        ...

    @property
    def Shapes(self) -> Shapes:
        """ Get: Shapes(self: HeaderFooter) -> Shapes """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class HeadersFooters(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: HeadersFooters) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: HeadersFooters) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: HeadersFooters) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HeadersFooters) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class HeadingStyle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: HeadingStyle) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: HeadingStyle) -> int """
        ...

    @property
    def Level(self) -> Int16:
        """
        Get: Level(self: HeadingStyle) -> Int16
        Set: Level(self: HeadingStyle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HeadingStyle) -> object """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: HeadingStyle) -> object
        Set: Style(self: HeadingStyle) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: HeadingStyle) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class HeadingStyles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: HeadingStyles) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: HeadingStyles) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: HeadingStyles) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HeadingStyles) -> object """
        ...


    def Add(self, Style:object, Level:Int16) -> Tuple_[HeadingStyle, object]:
        """ Add(self: HeadingStyles, Style: object, Level: Int16) -> (HeadingStyle, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class HiLoLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: HiLoLines) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: HiLoLines) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: HiLoLines) -> int """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: HiLoLines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: HiLoLines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HiLoLines) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: HiLoLines) """
        ...

    def Select(self): # -> 
        """ Select(self: HiLoLines) """
        ...


class HorizontalLineFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> WdHorizontalLineAlignment:
        """
        Get: Alignment(self: HorizontalLineFormat) -> WdHorizontalLineAlignment
        Set: Alignment(self: HorizontalLineFormat) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: HorizontalLineFormat) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: HorizontalLineFormat) -> int """
        ...

    @property
    def NoShade(self) -> bool:
        """
        Get: NoShade(self: HorizontalLineFormat) -> bool
        Set: NoShade(self: HorizontalLineFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HorizontalLineFormat) -> object """
        ...

    @property
    def PercentWidth(self) -> Single:
        """
        Get: PercentWidth(self: HorizontalLineFormat) -> Single
        Set: PercentWidth(self: HorizontalLineFormat) = value
        """
        ...

    @property
    def WidthType(self) -> WdHorizontalLineWidthType:
        """
        Get: WidthType(self: HorizontalLineFormat) -> WdHorizontalLineWidthType
        Set: WidthType(self: HorizontalLineFormat) = value
        """
        ...



class HTMLDivision: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: HTMLDivision) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """ Get: Borders(self: HTMLDivision) -> Borders """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: HTMLDivision) -> int """
        ...

    @property
    def HTMLDivisions(self) -> HTMLDivisions:
        """ Get: HTMLDivisions(self: HTMLDivision) -> HTMLDivisions """
        ...

    @property
    def LeftIndent(self) -> Single:
        """
        Get: LeftIndent(self: HTMLDivision) -> Single
        Set: LeftIndent(self: HTMLDivision) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HTMLDivision) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: HTMLDivision) -> Range """
        ...

    @property
    def RightIndent(self) -> Single:
        """
        Get: RightIndent(self: HTMLDivision) -> Single
        Set: RightIndent(self: HTMLDivision) = value
        """
        ...

    @property
    def SpaceAfter(self) -> Single:
        """
        Get: SpaceAfter(self: HTMLDivision) -> Single
        Set: SpaceAfter(self: HTMLDivision) = value
        """
        ...

    @property
    def SpaceBefore(self) -> Single:
        """
        Get: SpaceBefore(self: HTMLDivision) -> Single
        Set: SpaceBefore(self: HTMLDivision) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: HTMLDivision) """
        ...

    def HTMLDivisionParent(self, LevelsUp:object) -> Tuple_[HTMLDivision, object]:
        """ HTMLDivisionParent(self: HTMLDivision, LevelsUp: object) -> (HTMLDivision, object) """
        ...


class HTMLDivisions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: HTMLDivisions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: HTMLDivisions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: HTMLDivisions) -> int """
        ...

    @property
    def NestingLevel(self) -> int:
        """ Get: NestingLevel(self: HTMLDivisions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: HTMLDivisions) -> object """
        ...


    def Add(self, Range:object) -> Tuple_[HTMLDivision, object]:
        """ Add(self: HTMLDivisions, Range: object) -> (HTMLDivision, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Hyperlink: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Address(self) -> str:
        """
        Get: Address(self: Hyperlink) -> str
        Set: Address(self: Hyperlink) = value
        """
        ...

    @property
    def AddressOld(self) -> str:
        """ Get: AddressOld(self: Hyperlink) -> str """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Hyperlink) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Hyperlink) -> int """
        ...

    @property
    def EmailSubject(self) -> str:
        """
        Get: EmailSubject(self: Hyperlink) -> str
        Set: EmailSubject(self: Hyperlink) = value
        """
        ...

    @property
    def ExtraInfoRequired(self) -> bool:
        """ Get: ExtraInfoRequired(self: Hyperlink) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Hyperlink) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Hyperlink) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Hyperlink) -> Range """
        ...

    @property
    def ScreenTip(self) -> str:
        """
        Get: ScreenTip(self: Hyperlink) -> str
        Set: ScreenTip(self: Hyperlink) = value
        """
        ...

    @property
    def Shape(self) -> Shape:
        """ Get: Shape(self: Hyperlink) -> Shape """
        ...

    @property
    def SubAddress(self) -> str:
        """
        Get: SubAddress(self: Hyperlink) -> str
        Set: SubAddress(self: Hyperlink) = value
        """
        ...

    @property
    def SubAddressOld(self) -> str:
        """ Get: SubAddressOld(self: Hyperlink) -> str """
        ...

    @property
    def Target(self) -> str:
        """
        Get: Target(self: Hyperlink) -> str
        Set: Target(self: Hyperlink) = value
        """
        ...

    @property
    def TextToDisplay(self) -> str:
        """
        Get: TextToDisplay(self: Hyperlink) -> str
        Set: TextToDisplay(self: Hyperlink) = value
        """
        ...

    @property
    def Type(self): # -> MsoHyperlinkType
        """ Get: Type(self: Hyperlink) -> MsoHyperlinkType """
        ...


    def AddToFavorites(self): # -> 
        """ AddToFavorites(self: Hyperlink) """
        ...

    def CreateNewDocument(self, FileName:str, EditNow:bool, Overwrite:bool): # -> 
        """ CreateNewDocument(self: Hyperlink, FileName: str, EditNow: bool, Overwrite: bool) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Hyperlink) """
        ...

    def Follow(self, NewWindow:object, AddHistory:object, ExtraInfo:object, Method:object, HeaderInfo:object) -> Tuple_[object, object, object, object, object]:
        """ Follow(self: Hyperlink, NewWindow: object, AddHistory: object, ExtraInfo: object, Method: object, HeaderInfo: object) -> (object, object, object, object, object) """
        ...


class Hyperlinks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Hyperlinks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Hyperlinks) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Hyperlinks) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Hyperlinks) -> object """
        ...


    def Add(self, Anchor:object, Address:object, SubAddress:object, ScreenTip:object, TextToDisplay:object, Target:object) -> Tuple_[Hyperlink, object, object, object, object, object]:
        """ Add(self: Hyperlinks, Anchor: object, Address: object, SubAddress: object, ScreenTip: object, TextToDisplay: object, Target: object) -> (Hyperlink, object, object, object, object, object) """
        ...

    def _Add(self, Anchor:object, Address:object, SubAddress:object) -> Tuple_[Hyperlink, object, object]:
        """ _Add(self: Hyperlinks, Anchor: object, Address: object, SubAddress: object) -> (Hyperlink, object, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class IApplicationEvents: # skipped bases: <type 'object'>
    """ no doc """
    def DocumentChange(self): # -> 
        """ DocumentChange(self: IApplicationEvents) """
        ...

    def Quit(self): # -> 
        """ Quit(self: IApplicationEvents) """
        ...

    def Startup(self): # -> 
        """ Startup(self: IApplicationEvents) """
        ...


class IApplicationEvents2: # skipped bases: <type 'object'>
    """ no doc """
    def DocumentBeforeClose(self, Doc:Document, Cancel:bool) -> bool:
        """ DocumentBeforeClose(self: IApplicationEvents2, Doc: Document, Cancel: bool) -> bool """
        ...

    def DocumentBeforePrint(self, Doc:Document, Cancel:bool) -> bool:
        """ DocumentBeforePrint(self: IApplicationEvents2, Doc: Document, Cancel: bool) -> bool """
        ...

    def DocumentBeforeSave(self, Doc:Document, SaveAsUI:bool, Cancel:bool) -> Tuple_[bool, bool]:
        """ DocumentBeforeSave(self: IApplicationEvents2, Doc: Document, SaveAsUI: bool, Cancel: bool) -> (bool, bool) """
        ...

    def DocumentChange(self): # -> 
        """ DocumentChange(self: IApplicationEvents2) """
        ...

    def DocumentOpen(self, Doc:Document): # -> 
        """ DocumentOpen(self: IApplicationEvents2, Doc: Document) """
        ...

    def NewDocument(self, Doc:Document): # -> 
        """ NewDocument(self: IApplicationEvents2, Doc: Document) """
        ...

    def Quit(self): # -> 
        """ Quit(self: IApplicationEvents2) """
        ...

    def Startup(self): # -> 
        """ Startup(self: IApplicationEvents2) """
        ...

    def WindowActivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowActivate(self: IApplicationEvents2, Doc: Document, Wn: Window) """
        ...

    def WindowBeforeDoubleClick(self, Sel:Selection, Cancel:bool) -> bool:
        """ WindowBeforeDoubleClick(self: IApplicationEvents2, Sel: Selection, Cancel: bool) -> bool """
        ...

    def WindowBeforeRightClick(self, Sel:Selection, Cancel:bool) -> bool:
        """ WindowBeforeRightClick(self: IApplicationEvents2, Sel: Selection, Cancel: bool) -> bool """
        ...

    def WindowDeactivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowDeactivate(self: IApplicationEvents2, Doc: Document, Wn: Window) """
        ...

    def WindowSelectionChange(self, Sel:Selection): # -> 
        """ WindowSelectionChange(self: IApplicationEvents2, Sel: Selection) """
        ...


class IApplicationEvents3: # skipped bases: <type 'object'>
    """ no doc """
    def DocumentBeforeClose(self, Doc:Document, Cancel:bool) -> bool:
        """ DocumentBeforeClose(self: IApplicationEvents3, Doc: Document, Cancel: bool) -> bool """
        ...

    def DocumentBeforePrint(self, Doc:Document, Cancel:bool) -> bool:
        """ DocumentBeforePrint(self: IApplicationEvents3, Doc: Document, Cancel: bool) -> bool """
        ...

    def DocumentBeforeSave(self, Doc:Document, SaveAsUI:bool, Cancel:bool) -> Tuple_[bool, bool]:
        """ DocumentBeforeSave(self: IApplicationEvents3, Doc: Document, SaveAsUI: bool, Cancel: bool) -> (bool, bool) """
        ...

    def DocumentChange(self): # -> 
        """ DocumentChange(self: IApplicationEvents3) """
        ...

    def DocumentOpen(self, Doc:Document): # -> 
        """ DocumentOpen(self: IApplicationEvents3, Doc: Document) """
        ...

    def EPostageInsert(self, Doc:Document): # -> 
        """ EPostageInsert(self: IApplicationEvents3, Doc: Document) """
        ...

    def EPostagePropertyDialog(self, Doc:Document): # -> 
        """ EPostagePropertyDialog(self: IApplicationEvents3, Doc: Document) """
        ...

    def MailMergeAfterMerge(self, Doc:Document, DocResult:Document): # -> 
        """ MailMergeAfterMerge(self: IApplicationEvents3, Doc: Document, DocResult: Document) """
        ...

    def MailMergeAfterRecordMerge(self, Doc:Document): # -> 
        """ MailMergeAfterRecordMerge(self: IApplicationEvents3, Doc: Document) """
        ...

    def MailMergeBeforeMerge(self, Doc:Document, StartRecord:int, EndRecord:int, Cancel:bool) -> bool:
        """ MailMergeBeforeMerge(self: IApplicationEvents3, Doc: Document, StartRecord: int, EndRecord: int, Cancel: bool) -> bool """
        ...

    def MailMergeBeforeRecordMerge(self, Doc:Document, Cancel:bool) -> bool:
        """ MailMergeBeforeRecordMerge(self: IApplicationEvents3, Doc: Document, Cancel: bool) -> bool """
        ...

    def MailMergeDataSourceLoad(self, Doc:Document): # -> 
        """ MailMergeDataSourceLoad(self: IApplicationEvents3, Doc: Document) """
        ...

    def MailMergeDataSourceValidate(self, Doc:Document, Handled:bool) -> bool:
        """ MailMergeDataSourceValidate(self: IApplicationEvents3, Doc: Document, Handled: bool) -> bool """
        ...

    def MailMergeWizardSendToCustom(self, Doc:Document): # -> 
        """ MailMergeWizardSendToCustom(self: IApplicationEvents3, Doc: Document) """
        ...

    def MailMergeWizardStateChange(self, Doc:Document, FromState:int, ToState:int, Handled:bool) -> Tuple_[int, int, bool]:
        """ MailMergeWizardStateChange(self: IApplicationEvents3, Doc: Document, FromState: int, ToState: int, Handled: bool) -> (int, int, bool) """
        ...

    def NewDocument(self, Doc:Document): # -> 
        """ NewDocument(self: IApplicationEvents3, Doc: Document) """
        ...

    def Quit(self): # -> 
        """ Quit(self: IApplicationEvents3) """
        ...

    def Startup(self): # -> 
        """ Startup(self: IApplicationEvents3) """
        ...

    def WindowActivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowActivate(self: IApplicationEvents3, Doc: Document, Wn: Window) """
        ...

    def WindowBeforeDoubleClick(self, Sel:Selection, Cancel:bool) -> bool:
        """ WindowBeforeDoubleClick(self: IApplicationEvents3, Sel: Selection, Cancel: bool) -> bool """
        ...

    def WindowBeforeRightClick(self, Sel:Selection, Cancel:bool) -> bool:
        """ WindowBeforeRightClick(self: IApplicationEvents3, Sel: Selection, Cancel: bool) -> bool """
        ...

    def WindowDeactivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowDeactivate(self: IApplicationEvents3, Doc: Document, Wn: Window) """
        ...

    def WindowSelectionChange(self, Sel:Selection): # -> 
        """ WindowSelectionChange(self: IApplicationEvents3, Sel: Selection) """
        ...

    def WindowSize(self, Doc:Document, Wn:Window): # -> 
        """ WindowSize(self: IApplicationEvents3, Doc: Document, Wn: Window) """
        ...


class IApplicationEvents4: # skipped bases: <type 'object'>
    """ no doc """
    def DocumentBeforeClose(self, Doc, Cancel) -> bool:
        """ DocumentBeforeClose(self: IApplicationEvents4, Doc: Document) -> bool """
        ...

    def DocumentBeforePrint(self, Doc, Cancel) -> bool:
        """ DocumentBeforePrint(self: IApplicationEvents4, Doc: Document) -> bool """
        ...

    def DocumentBeforeSave(self, Doc, SaveAsUI, Cancel) -> Tuple_[bool, bool]:
        """ DocumentBeforeSave(self: IApplicationEvents4, Doc: Document, SaveAsUI: bool) -> (bool, bool) """
        ...

    def DocumentChange(self): # -> 
        """ DocumentChange(self: IApplicationEvents4) """
        ...

    def DocumentOpen(self, Doc:Document): # -> 
        """ DocumentOpen(self: IApplicationEvents4, Doc: Document) """
        ...

    def DocumentSync(self, Doc:Document, SyncEventType): # ->  # Not found arg types: {'SyncEventType': 'MsoSyncEventType'}
        """ DocumentSync(self: IApplicationEvents4, Doc: Document, SyncEventType: MsoSyncEventType) """
        ...

    def EPostageInsert(self, Doc:Document): # -> 
        """ EPostageInsert(self: IApplicationEvents4, Doc: Document) """
        ...

    def EPostageInsertEx(self, Doc, cpDeliveryAddrStart, cpDeliveryAddrEnd, cpReturnAddrStart, cpReturnAddrEnd, xaWidth, yaHeight, bstrPrinterName, bstrPaperFeed, fPrint, fCancel) -> bool:
        """ EPostageInsertEx(self: IApplicationEvents4, Doc: Document, cpDeliveryAddrStart: int, cpDeliveryAddrEnd: int, cpReturnAddrStart: int, cpReturnAddrEnd: int, xaWidth: int, yaHeight: int, bstrPrinterName: str, bstrPaperFeed: str, fPrint: bool) -> bool """
        ...

    def EPostagePropertyDialog(self, Doc:Document): # -> 
        """ EPostagePropertyDialog(self: IApplicationEvents4, Doc: Document) """
        ...

    def MailMergeAfterMerge(self, Doc:Document, DocResult:Document): # -> 
        """ MailMergeAfterMerge(self: IApplicationEvents4, Doc: Document, DocResult: Document) """
        ...

    def MailMergeAfterRecordMerge(self, Doc:Document): # -> 
        """ MailMergeAfterRecordMerge(self: IApplicationEvents4, Doc: Document) """
        ...

    def MailMergeBeforeMerge(self, Doc, StartRecord, EndRecord, Cancel) -> bool:
        """ MailMergeBeforeMerge(self: IApplicationEvents4, Doc: Document, StartRecord: int, EndRecord: int) -> bool """
        ...

    def MailMergeBeforeRecordMerge(self, Doc, Cancel) -> bool:
        """ MailMergeBeforeRecordMerge(self: IApplicationEvents4, Doc: Document) -> bool """
        ...

    def MailMergeDataSourceLoad(self, Doc:Document): # -> 
        """ MailMergeDataSourceLoad(self: IApplicationEvents4, Doc: Document) """
        ...

    def MailMergeDataSourceValidate(self, Doc:Document, Handled:bool) -> bool:
        """ MailMergeDataSourceValidate(self: IApplicationEvents4, Doc: Document, Handled: bool) -> bool """
        ...

    def MailMergeDataSourceValidate2(self, Doc, Handled) -> bool:
        """ MailMergeDataSourceValidate2(self: IApplicationEvents4, Doc: Document) -> bool """
        ...

    def MailMergeWizardSendToCustom(self, Doc:Document): # -> 
        """ MailMergeWizardSendToCustom(self: IApplicationEvents4, Doc: Document) """
        ...

    def MailMergeWizardStateChange(self, Doc:Document, FromState:int, ToState:int, Handled:bool) -> Tuple_[int, int, bool]:
        """ MailMergeWizardStateChange(self: IApplicationEvents4, Doc: Document, FromState: int, ToState: int, Handled: bool) -> (int, int, bool) """
        ...

    def NewDocument(self, Doc:Document): # -> 
        """ NewDocument(self: IApplicationEvents4, Doc: Document) """
        ...

    def ProtectedViewWindowActivate(self, PvWindow:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowActivate(self: IApplicationEvents4, PvWindow: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowBeforeClose(self, PvWindow, CloseReason, Cancel) -> bool:
        """ ProtectedViewWindowBeforeClose(self: IApplicationEvents4, PvWindow: ProtectedViewWindow, CloseReason: int) -> bool """
        ...

    def ProtectedViewWindowBeforeEdit(self, PvWindow, Cancel) -> bool:
        """ ProtectedViewWindowBeforeEdit(self: IApplicationEvents4, PvWindow: ProtectedViewWindow) -> bool """
        ...

    def ProtectedViewWindowDeactivate(self, PvWindow:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowDeactivate(self: IApplicationEvents4, PvWindow: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowOpen(self, PvWindow:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowOpen(self: IApplicationEvents4, PvWindow: ProtectedViewWindow) """
        ...

    def ProtectedViewWindowSize(self, PvWindow:ProtectedViewWindow): # -> 
        """ ProtectedViewWindowSize(self: IApplicationEvents4, PvWindow: ProtectedViewWindow) """
        ...

    def Quit(self): # -> 
        """ Quit(self: IApplicationEvents4) """
        ...

    def Startup(self): # -> 
        """ Startup(self: IApplicationEvents4) """
        ...

    def WindowActivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowActivate(self: IApplicationEvents4, Doc: Document, Wn: Window) """
        ...

    def WindowBeforeDoubleClick(self, Sel, Cancel) -> bool:
        """ WindowBeforeDoubleClick(self: IApplicationEvents4, Sel: Selection) -> bool """
        ...

    def WindowBeforeRightClick(self, Sel, Cancel) -> bool:
        """ WindowBeforeRightClick(self: IApplicationEvents4, Sel: Selection) -> bool """
        ...

    def WindowDeactivate(self, Doc:Document, Wn:Window): # -> 
        """ WindowDeactivate(self: IApplicationEvents4, Doc: Document, Wn: Window) """
        ...

    def WindowSelectionChange(self, Sel:Selection): # -> 
        """ WindowSelectionChange(self: IApplicationEvents4, Sel: Selection) """
        ...

    def WindowSize(self, Doc:Document, Wn:Window): # -> 
        """ WindowSize(self: IApplicationEvents4, Doc: Document, Wn: Window) """
        ...

    def XMLSelectionChange(self, Sel:Selection, OldXMLNode:XMLNode, NewXMLNode:XMLNode, Reason:int) -> int:
        """ XMLSelectionChange(self: IApplicationEvents4, Sel: Selection, OldXMLNode: XMLNode, NewXMLNode: XMLNode, Reason: int) -> int """
        ...

    def XMLValidationError(self, XMLNode:XMLNode): # -> 
        """ XMLValidationError(self: IApplicationEvents4, XMLNode: XMLNode) """
        ...


class Index: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AccentedLetters(self) -> bool:
        """
        Get: AccentedLetters(self: Index) -> bool
        Set: AccentedLetters(self: Index) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Index) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Index) -> int """
        ...

    @property
    def Filter(self) -> WdIndexFilter:
        """
        Get: Filter(self: Index) -> WdIndexFilter
        Set: Filter(self: Index) = value
        """
        ...

    @property
    def HeadingSeparator(self) -> WdHeadingSeparator:
        """
        Get: HeadingSeparator(self: Index) -> WdHeadingSeparator
        Set: HeadingSeparator(self: Index) = value
        """
        ...

    @property
    def IndexLanguage(self) -> WdLanguageID:
        """
        Get: IndexLanguage(self: Index) -> WdLanguageID
        Set: IndexLanguage(self: Index) = value
        """
        ...

    @property
    def NumberOfColumns(self) -> int:
        """
        Get: NumberOfColumns(self: Index) -> int
        Set: NumberOfColumns(self: Index) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Index) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Index) -> Range """
        ...

    @property
    def RightAlignPageNumbers(self) -> bool:
        """
        Get: RightAlignPageNumbers(self: Index) -> bool
        Set: RightAlignPageNumbers(self: Index) = value
        """
        ...

    @property
    def SortBy(self) -> WdIndexSortBy:
        """
        Get: SortBy(self: Index) -> WdIndexSortBy
        Set: SortBy(self: Index) = value
        """
        ...

    @property
    def TabLeader(self) -> WdTabLeader:
        """
        Get: TabLeader(self: Index) -> WdTabLeader
        Set: TabLeader(self: Index) = value
        """
        ...

    @property
    def Type(self) -> WdIndexType:
        """
        Get: Type(self: Index) -> WdIndexType
        Set: Type(self: Index) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: Index) """
        ...

    def Update(self): # -> 
        """ Update(self: Index) """
        ...


class Indexes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Indexes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Indexes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Indexes) -> int """
        ...

    @property
    def Format(self) -> WdIndexFormat:
        """
        Get: Format(self: Indexes) -> WdIndexFormat
        Set: Format(self: Indexes) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Indexes) -> object """
        ...


    def Add(self, Range:Range, HeadingSeparator:object, RightAlignPageNumbers:object, Type:object, NumberOfColumns:object, AccentedLetters:object, SortBy:object, IndexLanguage:object) -> Tuple_[Index, object, object, object, object, object, object, object]:
        """ Add(self: Indexes, Range: Range, HeadingSeparator: object, RightAlignPageNumbers: object, Type: object, NumberOfColumns: object, AccentedLetters: object, SortBy: object, IndexLanguage: object) -> (Index, object, object, object, object, object, object, object) """
        ...

    def AddOld(self, Range:Range, HeadingSeparator:object, RightAlignPageNumbers:object, Type:object, NumberOfColumns:object, AccentedLetters:object) -> Tuple_[Index, object, object, object, object, object]:
        """ AddOld(self: Indexes, Range: Range, HeadingSeparator: object, RightAlignPageNumbers: object, Type: object, NumberOfColumns: object, AccentedLetters: object) -> (Index, object, object, object, object, object) """
        ...

    def AutoMarkEntries(self, ConcordanceFileName:str): # -> 
        """ AutoMarkEntries(self: Indexes, ConcordanceFileName: str) """
        ...

    def MarkAllEntries(self, Range:Range, Entry:object, EntryAutoText:object, CrossReference:object, CrossReferenceAutoText:object, BookmarkName:object, Bold:object, Italic:object) -> Tuple_[object, object, object, object, object, object, object]:
        """ MarkAllEntries(self: Indexes, Range: Range, Entry: object, EntryAutoText: object, CrossReference: object, CrossReferenceAutoText: object, BookmarkName: object, Bold: object, Italic: object) -> (object, object, object, object, object, object, object) """
        ...

    def MarkEntry(self, Range:Range, Entry:object, EntryAutoText:object, CrossReference:object, CrossReferenceAutoText:object, BookmarkName:object, Bold:object, Italic:object, Reading:object) -> Tuple_[Field, object, object, object, object, object, object, object, object]:
        """ MarkEntry(self: Indexes, Range: Range, Entry: object, EntryAutoText: object, CrossReference: object, CrossReferenceAutoText: object, BookmarkName: object, Bold: object, Italic: object, Reading: object) -> (Field, object, object, object, object, object, object, object, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class InlineShape: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlternativeText(self) -> str:
        """
        Get: AlternativeText(self: InlineShape) -> str
        Set: AlternativeText(self: InlineShape) = value
        """
        ...

    @property
    def AnchorID(self) -> int:
        """ Get: AnchorID(self: InlineShape) -> int """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: InlineShape) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: InlineShape) -> Borders
        Set: Borders(self: InlineShape) = value
        """
        ...

    @property
    def Chart(self) -> Chart:
        """ Get: Chart(self: InlineShape) -> Chart """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: InlineShape) -> int """
        ...

    @property
    def EditID(self) -> int:
        """ Get: EditID(self: InlineShape) -> int """
        ...

    @property
    def Field(self) -> Field:
        """ Get: Field(self: InlineShape) -> Field """
        ...

    @property
    def Fill(self) -> FillFormat:
        """ Get: Fill(self: InlineShape) -> FillFormat """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """ Get: Glow(self: InlineShape) -> GlowFormat """
        ...

    @property
    def GroupItems(self) -> GroupShapes:
        """ Get: GroupItems(self: InlineShape) -> GroupShapes """
        ...

    @property
    def HasChart(self): # -> MsoTriState
        """ Get: HasChart(self: InlineShape) -> MsoTriState """
        ...

    @property
    def HasSmartArt(self): # -> MsoTriState
        """ Get: HasSmartArt(self: InlineShape) -> MsoTriState """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: InlineShape) -> Single
        Set: Height(self: InlineShape) = value
        """
        ...

    @property
    def HorizontalLineFormat(self) -> HorizontalLineFormat:
        """ Get: HorizontalLineFormat(self: InlineShape) -> HorizontalLineFormat """
        ...

    @property
    def Hyperlink(self) -> Hyperlink:
        """ Get: Hyperlink(self: InlineShape) -> Hyperlink """
        ...

    @property
    def IsPictureBullet(self) -> bool:
        """ Get: IsPictureBullet(self: InlineShape) -> bool """
        ...

    @property
    def Line(self) -> LineFormat:
        """ Get: Line(self: InlineShape) -> LineFormat """
        ...

    @property
    def LinkFormat(self) -> LinkFormat:
        """ Get: LinkFormat(self: InlineShape) -> LinkFormat """
        ...

    @property
    def LockAspectRatio(self): # -> MsoTriState
        """
        Get: LockAspectRatio(self: InlineShape) -> MsoTriState
        Set: LockAspectRatio(self: InlineShape) = value
        """
        ...

    @property
    def OLEFormat(self) -> OLEFormat:
        """ Get: OLEFormat(self: InlineShape) -> OLEFormat """
        ...

    @property
    def OWSAnchor(self) -> int:
        """ Get: OWSAnchor(self: InlineShape) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: InlineShape) -> object """
        ...

    @property
    def PictureFormat(self) -> PictureFormat:
        """
        Get: PictureFormat(self: InlineShape) -> PictureFormat
        Set: PictureFormat(self: InlineShape) = value
        """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: InlineShape) -> Range """
        ...

    @property
    def Reflection(self) -> ReflectionFormat:
        """ Get: Reflection(self: InlineShape) -> ReflectionFormat """
        ...

    @property
    def ScaleHeight(self) -> Single:
        """
        Get: ScaleHeight(self: InlineShape) -> Single
        Set: ScaleHeight(self: InlineShape) = value
        """
        ...

    @property
    def ScaleWidth(self) -> Single:
        """
        Get: ScaleWidth(self: InlineShape) -> Single
        Set: ScaleWidth(self: InlineShape) = value
        """
        ...

    @property
    def Script(self): # -> Script
        """ Get: Script(self: InlineShape) -> Script """
        ...

    @property
    def Shadow(self) -> ShadowFormat:
        """ Get: Shadow(self: InlineShape) -> ShadowFormat """
        ...

    @property
    def SmartArt(self): # -> SmartArt
        """ Get: SmartArt(self: InlineShape) -> SmartArt """
        ...

    @property
    def SoftEdge(self) -> SoftEdgeFormat:
        """ Get: SoftEdge(self: InlineShape) -> SoftEdgeFormat """
        ...

    @property
    def TextEffect(self) -> TextEffectFormat:
        """
        Get: TextEffect(self: InlineShape) -> TextEffectFormat
        Set: TextEffect(self: InlineShape) = value
        """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: InlineShape) -> str
        Set: Title(self: InlineShape) = value
        """
        ...

    @property
    def Type(self) -> WdInlineShapeType:
        """ Get: Type(self: InlineShape) -> WdInlineShapeType """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: InlineShape) -> Single
        Set: Width(self: InlineShape) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: InlineShape) """
        ...

    def ConvertToShape(self) -> Shape:
        """ ConvertToShape(self: InlineShape) -> Shape """
        ...

    def Delete(self): # -> 
        """ Delete(self: InlineShape) """
        ...

    def Reset(self): # -> 
        """ Reset(self: InlineShape) """
        ...

    def Select(self): # -> 
        """ Select(self: InlineShape) """
        ...


class InlineShapes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: InlineShapes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: InlineShapes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: InlineShapes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: InlineShapes) -> object """
        ...


    def AddChart(self, Type:XlChartType, Range:object) -> Tuple_[InlineShape, object]:
        """ AddChart(self: InlineShapes, Type: XlChartType, Range: object) -> (InlineShape, object) """
        ...

    def AddChart2(self, Style:int, Type:XlChartType, Range:object, NewLayout:object) -> Tuple_[InlineShape, object, object]:
        """ AddChart2(self: InlineShapes, Style: int, Type: XlChartType, Range: object, NewLayout: object) -> (InlineShape, object, object) """
        ...

    def AddHorizontalLine(self, FileName:str, Range:object) -> Tuple_[InlineShape, object]:
        """ AddHorizontalLine(self: InlineShapes, FileName: str, Range: object) -> (InlineShape, object) """
        ...

    def AddHorizontalLineStandard(self, Range:object) -> Tuple_[InlineShape, object]:
        """ AddHorizontalLineStandard(self: InlineShapes, Range: object) -> (InlineShape, object) """
        ...

    def AddOLEControl(self, ClassType:object, Range:object) -> Tuple_[InlineShape, object, object]:
        """ AddOLEControl(self: InlineShapes, ClassType: object, Range: object) -> (InlineShape, object, object) """
        ...

    def AddOLEObject(self, ClassType:object, FileName:object, LinkToFile:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object, Range:object) -> Tuple_[InlineShape, object, object, object, object, object, object, object, object]:
        """ AddOLEObject(self: InlineShapes, ClassType: object, FileName: object, LinkToFile: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, Range: object) -> (InlineShape, object, object, object, object, object, object, object, object) """
        ...

    def AddPicture(self, FileName:str, LinkToFile:object, SaveWithDocument:object, Range:object) -> Tuple_[InlineShape, object, object, object]:
        """ AddPicture(self: InlineShapes, FileName: str, LinkToFile: object, SaveWithDocument: object, Range: object) -> (InlineShape, object, object, object) """
        ...

    def AddPictureBullet(self, FileName:str, Range:object) -> Tuple_[InlineShape, object]:
        """ AddPictureBullet(self: InlineShapes, FileName: str, Range: object) -> (InlineShape, object) """
        ...

    def AddSmartArt(self, Layout, Range:object) -> Tuple_[InlineShape, object]: # Not found arg types: {'Layout': 'SmartArtLayout'}
        """ AddSmartArt(self: InlineShapes, Layout: SmartArtLayout, Range: object) -> (InlineShape, object) """
        ...

    def AddWebVideo(self, EmbedCode:str, VideoWidth:object, VideoHeight:object, PosterFrameImage:object, Url:object, Range:object) -> Tuple_[InlineShape, object, object, object, object, object]:
        """ AddWebVideo(self: InlineShapes, EmbedCode: str, VideoWidth: object, VideoHeight: object, PosterFrameImage: object, Url: object, Range: object) -> (InlineShape, object, object, object, object, object) """
        ...

    def New(self, Range:Range) -> InlineShape:
        """ New(self: InlineShapes, Range: Range) -> InlineShape """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Interior: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Interior) -> object """
        ...

    @property
    def Color(self) -> object:
        """
        Get: Color(self: Interior) -> object
        Set: Color(self: Interior) = value
        """
        ...

    @property
    def ColorIndex(self) -> object:
        """
        Get: ColorIndex(self: Interior) -> object
        Set: ColorIndex(self: Interior) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Interior) -> int """
        ...

    @property
    def InvertIfNegative(self) -> object:
        """
        Get: InvertIfNegative(self: Interior) -> object
        Set: InvertIfNegative(self: Interior) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Interior) -> object """
        ...

    @property
    def Pattern(self) -> object:
        """
        Get: Pattern(self: Interior) -> object
        Set: Pattern(self: Interior) = value
        """
        ...

    @property
    def PatternColor(self) -> object:
        """
        Get: PatternColor(self: Interior) -> object
        Set: PatternColor(self: Interior) = value
        """
        ...

    @property
    def PatternColorIndex(self) -> object:
        """
        Get: PatternColorIndex(self: Interior) -> object
        Set: PatternColorIndex(self: Interior) = value
        """
        ...



class KeyBinding: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: KeyBinding) -> Application """
        ...

    @property
    def Command(self) -> str:
        """ Get: Command(self: KeyBinding) -> str """
        ...

    @property
    def CommandParameter(self) -> str:
        """ Get: CommandParameter(self: KeyBinding) -> str """
        ...

    @property
    def Context(self) -> object:
        """ Get: Context(self: KeyBinding) -> object """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: KeyBinding) -> int """
        ...

    @property
    def KeyCategory(self) -> WdKeyCategory:
        """ Get: KeyCategory(self: KeyBinding) -> WdKeyCategory """
        ...

    @property
    def KeyCode(self) -> int:
        """ Get: KeyCode(self: KeyBinding) -> int """
        ...

    @property
    def KeyCode2(self) -> int:
        """ Get: KeyCode2(self: KeyBinding) -> int """
        ...

    @property
    def KeyString(self) -> str:
        """ Get: KeyString(self: KeyBinding) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: KeyBinding) -> object """
        ...

    @property
    def Protected(self) -> bool:
        """ Get: Protected(self: KeyBinding) -> bool """
        ...


    def Clear(self): # -> 
        """ Clear(self: KeyBinding) """
        ...

    def Disable(self): # -> 
        """ Disable(self: KeyBinding) """
        ...

    def Execute(self): # -> 
        """ Execute(self: KeyBinding) """
        ...

    def Rebind(self, KeyCategory:WdKeyCategory, Command:str, CommandParameter:object) -> object:
        """ Rebind(self: KeyBinding, KeyCategory: WdKeyCategory, Command: str, CommandParameter: object) -> object """
        ...


class KeyBindings(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: KeyBindings) -> Application """
        ...

    @property
    def Context(self) -> object:
        """ Get: Context(self: KeyBindings) -> object """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: KeyBindings) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: KeyBindings) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: KeyBindings) -> object """
        ...


    def Add(self, KeyCategory:WdKeyCategory, Command:str, KeyCode:int, KeyCode2:object, CommandParameter:object) -> Tuple_[KeyBinding, object, object]:
        """ Add(self: KeyBindings, KeyCategory: WdKeyCategory, Command: str, KeyCode: int, KeyCode2: object, CommandParameter: object) -> (KeyBinding, object, object) """
        ...

    def ClearAll(self): # -> 
        """ ClearAll(self: KeyBindings) """
        ...

    def Key(self, KeyCode:int, KeyCode2:object) -> Tuple_[KeyBinding, object]:
        """ Key(self: KeyBindings, KeyCode: int, KeyCode2: object) -> (KeyBinding, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class KeysBoundTo(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: KeysBoundTo) -> Application """
        ...

    @property
    def Command(self) -> str:
        """ Get: Command(self: KeysBoundTo) -> str """
        ...

    @property
    def CommandParameter(self) -> str:
        """ Get: CommandParameter(self: KeysBoundTo) -> str """
        ...

    @property
    def Context(self) -> object:
        """ Get: Context(self: KeysBoundTo) -> object """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: KeysBoundTo) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: KeysBoundTo) -> int """
        ...

    @property
    def KeyCategory(self) -> WdKeyCategory:
        """ Get: KeyCategory(self: KeysBoundTo) -> WdKeyCategory """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: KeysBoundTo) -> object """
        ...


    def Key(self, KeyCode:int, KeyCode2:object) -> Tuple_[KeyBinding, object]:
        """ Key(self: KeysBoundTo, KeyCode: int, KeyCode2: object) -> (KeyBinding, object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Language: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveGrammarDictionary(self) -> Dictionary:
        """ Get: ActiveGrammarDictionary(self: Language) -> Dictionary """
        ...

    @property
    def ActiveHyphenationDictionary(self) -> Dictionary:
        """ Get: ActiveHyphenationDictionary(self: Language) -> Dictionary """
        ...

    @property
    def ActiveSpellingDictionary(self) -> Dictionary:
        """ Get: ActiveSpellingDictionary(self: Language) -> Dictionary """
        ...

    @property
    def ActiveThesaurusDictionary(self) -> Dictionary:
        """ Get: ActiveThesaurusDictionary(self: Language) -> Dictionary """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Language) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Language) -> int """
        ...

    @property
    def DefaultWritingStyle(self) -> str:
        """
        Get: DefaultWritingStyle(self: Language) -> str
        Set: DefaultWritingStyle(self: Language) = value
        """
        ...

    @property
    def ID(self) -> WdLanguageID:
        """ Get: ID(self: Language) -> WdLanguageID """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Language) -> str """
        ...

    @property
    def NameLocal(self) -> str:
        """ Get: NameLocal(self: Language) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Language) -> object """
        ...

    @property
    def SpellingDictionaryType(self) -> WdDictionaryType:
        """
        Get: SpellingDictionaryType(self: Language) -> WdDictionaryType
        Set: SpellingDictionaryType(self: Language) = value
        """
        ...

    @property
    def WritingStyleList(self) -> object:
        """ Get: WritingStyleList(self: Language) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Languages(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Languages) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Languages) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Languages) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Languages) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class LeaderLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: LeaderLines) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: LeaderLines) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: LeaderLines) -> int """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: LeaderLines) -> ChartFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LeaderLines) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: LeaderLines) """
        ...

    def Select(self): # -> 
        """ Select(self: LeaderLines) """
        ...


class Legend: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Legend) -> object """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: Legend) -> object
        Set: AutoScaleFont(self: Legend) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: Legend) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Legend) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: Legend) -> ChartFillFormat """
        ...

    @property
    def Font(self) -> ChartFont:
        """ Get: Font(self: Legend) -> ChartFont """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Legend) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: Legend) -> float
        Set: Height(self: Legend) = value
        """
        ...

    @property
    def IncludeInLayout(self) -> bool:
        """
        Get: IncludeInLayout(self: Legend) -> bool
        Set: IncludeInLayout(self: Legend) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Legend) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: Legend) -> float
        Set: Left(self: Legend) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Legend) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Legend) -> object """
        ...

    @property
    def Position(self) -> XlLegendPosition:
        """
        Get: Position(self: Legend) -> XlLegendPosition
        Set: Position(self: Legend) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Legend) -> bool
        Set: Shadow(self: Legend) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: Legend) -> float
        Set: Top(self: Legend) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: Legend) -> float
        Set: Width(self: Legend) = value
        """
        ...


    def Clear(self) -> object:
        """ Clear(self: Legend) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Legend) -> object """
        ...

    def LegendEntries(self, Index:object) -> object:
        """ LegendEntries(self: Legend, Index: object) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: Legend) -> object """
        ...


class LegendEntries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: LegendEntries) -> object """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: LegendEntries) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: LegendEntries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LegendEntries) -> object """
        ...


    def _Default(self, Index:object) -> LegendEntry:
        """ _Default(self: LegendEntries, Index: object) -> LegendEntry """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class LegendEntry: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: LegendEntry) -> object """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: LegendEntry) -> object
        Set: AutoScaleFont(self: LegendEntry) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: LegendEntry) -> int """
        ...

    @property
    def Font(self) -> ChartFont:
        """ Get: Font(self: LegendEntry) -> ChartFont """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: LegendEntry) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: LegendEntry) -> float """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: LegendEntry) -> int """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: LegendEntry) -> float """
        ...

    @property
    def LegendKey(self) -> LegendKey:
        """ Get: LegendKey(self: LegendEntry) -> LegendKey """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LegendEntry) -> object """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: LegendEntry) -> float """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: LegendEntry) -> float """
        ...


    def Delete(self) -> object:
        """ Delete(self: LegendEntry) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: LegendEntry) -> object """
        ...


class LegendKey: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: LegendKey) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: LegendKey) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: LegendKey) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: LegendKey) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: LegendKey) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: LegendKey) -> float """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: LegendKey) -> Interior """
        ...

    @property
    def InvertIfNegative(self) -> bool:
        """
        Get: InvertIfNegative(self: LegendKey) -> bool
        Set: InvertIfNegative(self: LegendKey) = value
        """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: LegendKey) -> float """
        ...

    @property
    def MarkerBackgroundColor(self) -> int:
        """
        Get: MarkerBackgroundColor(self: LegendKey) -> int
        Set: MarkerBackgroundColor(self: LegendKey) = value
        """
        ...

    @property
    def MarkerBackgroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerBackgroundColorIndex(self: LegendKey) -> XlColorIndex
        Set: MarkerBackgroundColorIndex(self: LegendKey) = value
        """
        ...

    @property
    def MarkerForegroundColor(self) -> int:
        """
        Get: MarkerForegroundColor(self: LegendKey) -> int
        Set: MarkerForegroundColor(self: LegendKey) = value
        """
        ...

    @property
    def MarkerForegroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerForegroundColorIndex(self: LegendKey) -> XlColorIndex
        Set: MarkerForegroundColorIndex(self: LegendKey) = value
        """
        ...

    @property
    def MarkerSize(self) -> int:
        """
        Get: MarkerSize(self: LegendKey) -> int
        Set: MarkerSize(self: LegendKey) = value
        """
        ...

    @property
    def MarkerStyle(self) -> XlMarkerStyle:
        """
        Get: MarkerStyle(self: LegendKey) -> XlMarkerStyle
        Set: MarkerStyle(self: LegendKey) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LegendKey) -> object """
        ...

    @property
    def PictureType(self) -> int:
        """
        Get: PictureType(self: LegendKey) -> int
        Set: PictureType(self: LegendKey) = value
        """
        ...

    @property
    def PictureUnit(self) -> float:
        """
        Get: PictureUnit(self: LegendKey) -> float
        Set: PictureUnit(self: LegendKey) = value
        """
        ...

    @property
    def PictureUnit2(self) -> float:
        """
        Get: PictureUnit2(self: LegendKey) -> float
        Set: PictureUnit2(self: LegendKey) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: LegendKey) -> bool
        Set: Shadow(self: LegendKey) = value
        """
        ...

    @property
    def Smooth(self) -> bool:
        """
        Get: Smooth(self: LegendKey) -> bool
        Set: Smooth(self: LegendKey) = value
        """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: LegendKey) -> float """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: LegendKey) -> float """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: LegendKey) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: LegendKey) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: LegendKey) -> object """
        ...


class _LetterContent: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: _LetterContent) -> Application """
        ...

    @property
    def AttentionLine(self) -> str:
        """
        Get: AttentionLine(self: _LetterContent) -> str
        Set: AttentionLine(self: _LetterContent) = value
        """
        ...

    @property
    def CCList(self) -> str:
        """
        Get: CCList(self: _LetterContent) -> str
        Set: CCList(self: _LetterContent) = value
        """
        ...

    @property
    def Closing(self) -> str:
        """
        Get: Closing(self: _LetterContent) -> str
        Set: Closing(self: _LetterContent) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: _LetterContent) -> int """
        ...

    @property
    def DateFormat(self) -> str:
        """
        Get: DateFormat(self: _LetterContent) -> str
        Set: DateFormat(self: _LetterContent) = value
        """
        ...

    @property
    def Duplicate(self) -> LetterContent:
        """ Get: Duplicate(self: _LetterContent) -> LetterContent """
        ...

    @property
    def EnclosureNumber(self) -> int:
        """
        Get: EnclosureNumber(self: _LetterContent) -> int
        Set: EnclosureNumber(self: _LetterContent) = value
        """
        ...

    @property
    def IncludeHeaderFooter(self) -> bool:
        """
        Get: IncludeHeaderFooter(self: _LetterContent) -> bool
        Set: IncludeHeaderFooter(self: _LetterContent) = value
        """
        ...

    @property
    def InfoBlock(self) -> bool:
        """
        Get: InfoBlock(self: _LetterContent) -> bool
        Set: InfoBlock(self: _LetterContent) = value
        """
        ...

    @property
    def Letterhead(self) -> bool:
        """
        Get: Letterhead(self: _LetterContent) -> bool
        Set: Letterhead(self: _LetterContent) = value
        """
        ...

    @property
    def LetterheadLocation(self) -> WdLetterheadLocation:
        """
        Get: LetterheadLocation(self: _LetterContent) -> WdLetterheadLocation
        Set: LetterheadLocation(self: _LetterContent) = value
        """
        ...

    @property
    def LetterheadSize(self) -> Single:
        """
        Get: LetterheadSize(self: _LetterContent) -> Single
        Set: LetterheadSize(self: _LetterContent) = value
        """
        ...

    @property
    def LetterStyle(self) -> WdLetterStyle:
        """
        Get: LetterStyle(self: _LetterContent) -> WdLetterStyle
        Set: LetterStyle(self: _LetterContent) = value
        """
        ...

    @property
    def MailingInstructions(self) -> str:
        """
        Get: MailingInstructions(self: _LetterContent) -> str
        Set: MailingInstructions(self: _LetterContent) = value
        """
        ...

    @property
    def PageDesign(self) -> str:
        """
        Get: PageDesign(self: _LetterContent) -> str
        Set: PageDesign(self: _LetterContent) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _LetterContent) -> object """
        ...

    @property
    def RecipientAddress(self) -> str:
        """
        Get: RecipientAddress(self: _LetterContent) -> str
        Set: RecipientAddress(self: _LetterContent) = value
        """
        ...

    @property
    def RecipientCode(self) -> str:
        """
        Get: RecipientCode(self: _LetterContent) -> str
        Set: RecipientCode(self: _LetterContent) = value
        """
        ...

    @property
    def RecipientGender(self) -> WdSalutationGender:
        """
        Get: RecipientGender(self: _LetterContent) -> WdSalutationGender
        Set: RecipientGender(self: _LetterContent) = value
        """
        ...

    @property
    def RecipientName(self) -> str:
        """
        Get: RecipientName(self: _LetterContent) -> str
        Set: RecipientName(self: _LetterContent) = value
        """
        ...

    @property
    def RecipientReference(self) -> str:
        """
        Get: RecipientReference(self: _LetterContent) -> str
        Set: RecipientReference(self: _LetterContent) = value
        """
        ...

    @property
    def ReturnAddress(self) -> str:
        """
        Get: ReturnAddress(self: _LetterContent) -> str
        Set: ReturnAddress(self: _LetterContent) = value
        """
        ...

    @property
    def ReturnAddressShortForm(self) -> str:
        """
        Get: ReturnAddressShortForm(self: _LetterContent) -> str
        Set: ReturnAddressShortForm(self: _LetterContent) = value
        """
        ...

    @property
    def Salutation(self) -> str:
        """
        Get: Salutation(self: _LetterContent) -> str
        Set: Salutation(self: _LetterContent) = value
        """
        ...

    @property
    def SalutationType(self) -> WdSalutationType:
        """
        Get: SalutationType(self: _LetterContent) -> WdSalutationType
        Set: SalutationType(self: _LetterContent) = value
        """
        ...

    @property
    def SenderCity(self) -> str:
        """
        Get: SenderCity(self: _LetterContent) -> str
        Set: SenderCity(self: _LetterContent) = value
        """
        ...

    @property
    def SenderCode(self) -> str:
        """
        Get: SenderCode(self: _LetterContent) -> str
        Set: SenderCode(self: _LetterContent) = value
        """
        ...

    @property
    def SenderCompany(self) -> str:
        """
        Get: SenderCompany(self: _LetterContent) -> str
        Set: SenderCompany(self: _LetterContent) = value
        """
        ...

    @property
    def SenderGender(self) -> WdSalutationGender:
        """
        Get: SenderGender(self: _LetterContent) -> WdSalutationGender
        Set: SenderGender(self: _LetterContent) = value
        """
        ...

    @property
    def SenderInitials(self) -> str:
        """
        Get: SenderInitials(self: _LetterContent) -> str
        Set: SenderInitials(self: _LetterContent) = value
        """
        ...

    @property
    def SenderJobTitle(self) -> str:
        """
        Get: SenderJobTitle(self: _LetterContent) -> str
        Set: SenderJobTitle(self: _LetterContent) = value
        """
        ...

    @property
    def SenderName(self) -> str:
        """
        Get: SenderName(self: _LetterContent) -> str
        Set: SenderName(self: _LetterContent) = value
        """
        ...

    @property
    def SenderReference(self) -> str:
        """
        Get: SenderReference(self: _LetterContent) -> str
        Set: SenderReference(self: _LetterContent) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: _LetterContent) -> str
        Set: Subject(self: _LetterContent) = value
        """
        ...



class LetterContent(_LetterContent): # skipped bases: <type 'object'>
    """ no doc """
    pass

class LetterContentClass(LetterContent, __ComObject): # skipped bases: <type '_LetterContent'>, <type 'object'>
    """ LetterContentClass() """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: LetterContentClass) -> Application """
        ...

    @property
    def AttentionLine(self) -> str:
        """
        Get: AttentionLine(self: LetterContentClass) -> str
        Set: AttentionLine(self: LetterContentClass) = value
        """
        ...

    @property
    def CCList(self) -> str:
        """
        Get: CCList(self: LetterContentClass) -> str
        Set: CCList(self: LetterContentClass) = value
        """
        ...

    @property
    def Closing(self) -> str:
        """
        Get: Closing(self: LetterContentClass) -> str
        Set: Closing(self: LetterContentClass) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: LetterContentClass) -> int """
        ...

    @property
    def DateFormat(self) -> str:
        """
        Get: DateFormat(self: LetterContentClass) -> str
        Set: DateFormat(self: LetterContentClass) = value
        """
        ...

    @property
    def Duplicate(self) -> LetterContent:
        """ Get: Duplicate(self: LetterContentClass) -> LetterContent """
        ...

    @property
    def EnclosureNumber(self) -> int:
        """
        Get: EnclosureNumber(self: LetterContentClass) -> int
        Set: EnclosureNumber(self: LetterContentClass) = value
        """
        ...

    @property
    def IncludeHeaderFooter(self) -> bool:
        """
        Get: IncludeHeaderFooter(self: LetterContentClass) -> bool
        Set: IncludeHeaderFooter(self: LetterContentClass) = value
        """
        ...

    @property
    def InfoBlock(self) -> bool:
        """
        Get: InfoBlock(self: LetterContentClass) -> bool
        Set: InfoBlock(self: LetterContentClass) = value
        """
        ...

    @property
    def Letterhead(self) -> bool:
        """
        Get: Letterhead(self: LetterContentClass) -> bool
        Set: Letterhead(self: LetterContentClass) = value
        """
        ...

    @property
    def LetterheadLocation(self) -> WdLetterheadLocation:
        """
        Get: LetterheadLocation(self: LetterContentClass) -> WdLetterheadLocation
        Set: LetterheadLocation(self: LetterContentClass) = value
        """
        ...

    @property
    def LetterheadSize(self) -> Single:
        """
        Get: LetterheadSize(self: LetterContentClass) -> Single
        Set: LetterheadSize(self: LetterContentClass) = value
        """
        ...

    @property
    def LetterStyle(self) -> WdLetterStyle:
        """
        Get: LetterStyle(self: LetterContentClass) -> WdLetterStyle
        Set: LetterStyle(self: LetterContentClass) = value
        """
        ...

    @property
    def MailingInstructions(self) -> str:
        """
        Get: MailingInstructions(self: LetterContentClass) -> str
        Set: MailingInstructions(self: LetterContentClass) = value
        """
        ...

    @property
    def PageDesign(self) -> str:
        """
        Get: PageDesign(self: LetterContentClass) -> str
        Set: PageDesign(self: LetterContentClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LetterContentClass) -> object """
        ...

    @property
    def RecipientAddress(self) -> str:
        """
        Get: RecipientAddress(self: LetterContentClass) -> str
        Set: RecipientAddress(self: LetterContentClass) = value
        """
        ...

    @property
    def RecipientCode(self) -> str:
        """
        Get: RecipientCode(self: LetterContentClass) -> str
        Set: RecipientCode(self: LetterContentClass) = value
        """
        ...

    @property
    def RecipientGender(self) -> WdSalutationGender:
        """
        Get: RecipientGender(self: LetterContentClass) -> WdSalutationGender
        Set: RecipientGender(self: LetterContentClass) = value
        """
        ...

    @property
    def RecipientName(self) -> str:
        """
        Get: RecipientName(self: LetterContentClass) -> str
        Set: RecipientName(self: LetterContentClass) = value
        """
        ...

    @property
    def RecipientReference(self) -> str:
        """
        Get: RecipientReference(self: LetterContentClass) -> str
        Set: RecipientReference(self: LetterContentClass) = value
        """
        ...

    @property
    def ReturnAddress(self) -> str:
        """
        Get: ReturnAddress(self: LetterContentClass) -> str
        Set: ReturnAddress(self: LetterContentClass) = value
        """
        ...

    @property
    def ReturnAddressShortForm(self) -> str:
        """
        Get: ReturnAddressShortForm(self: LetterContentClass) -> str
        Set: ReturnAddressShortForm(self: LetterContentClass) = value
        """
        ...

    @property
    def Salutation(self) -> str:
        """
        Get: Salutation(self: LetterContentClass) -> str
        Set: Salutation(self: LetterContentClass) = value
        """
        ...

    @property
    def SalutationType(self) -> WdSalutationType:
        """
        Get: SalutationType(self: LetterContentClass) -> WdSalutationType
        Set: SalutationType(self: LetterContentClass) = value
        """
        ...

    @property
    def SenderCity(self) -> str:
        """
        Get: SenderCity(self: LetterContentClass) -> str
        Set: SenderCity(self: LetterContentClass) = value
        """
        ...

    @property
    def SenderCode(self) -> str:
        """
        Get: SenderCode(self: LetterContentClass) -> str
        Set: SenderCode(self: LetterContentClass) = value
        """
        ...

    @property
    def SenderCompany(self) -> str:
        """
        Get: SenderCompany(self: LetterContentClass) -> str
        Set: SenderCompany(self: LetterContentClass) = value
        """
        ...

    @property
    def SenderGender(self) -> WdSalutationGender:
        """
        Get: SenderGender(self: LetterContentClass) -> WdSalutationGender
        Set: SenderGender(self: LetterContentClass) = value
        """
        ...

    @property
    def SenderInitials(self) -> str:
        """
        Get: SenderInitials(self: LetterContentClass) -> str
        Set: SenderInitials(self: LetterContentClass) = value
        """
        ...

    @property
    def SenderJobTitle(self) -> str:
        """
        Get: SenderJobTitle(self: LetterContentClass) -> str
        Set: SenderJobTitle(self: LetterContentClass) = value
        """
        ...

    @property
    def SenderName(self) -> str:
        """
        Get: SenderName(self: LetterContentClass) -> str
        Set: SenderName(self: LetterContentClass) = value
        """
        ...

    @property
    def SenderReference(self) -> str:
        """
        Get: SenderReference(self: LetterContentClass) -> str
        Set: SenderReference(self: LetterContentClass) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: LetterContentClass) -> str
        Set: Subject(self: LetterContentClass) = value
        """
        ...



class Line: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Line) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Line) -> int """
        ...

    @property
    def Height(self) -> int:
        """ Get: Height(self: Line) -> int """
        ...

    @property
    def Left(self) -> int:
        """ Get: Left(self: Line) -> int """
        ...

    @property
    def LineType(self) -> WdLineType:
        """ Get: LineType(self: Line) -> WdLineType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Line) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Line) -> Range """
        ...

    @property
    def Rectangles(self) -> Rectangles:
        """ Get: Rectangles(self: Line) -> Rectangles """
        ...

    @property
    def Top(self) -> int:
        """ Get: Top(self: Line) -> int """
        ...

    @property
    def Width(self) -> int:
        """ Get: Width(self: Line) -> int """
        ...



class LineFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: LineFormat) -> Application """
        ...

    @property
    def BackColor(self) -> ColorFormat:
        """ Get: BackColor(self: LineFormat) -> ColorFormat """
        ...

    @property
    def BeginArrowheadLength(self): # -> MsoArrowheadLength
        """
        Get: BeginArrowheadLength(self: LineFormat) -> MsoArrowheadLength
        Set: BeginArrowheadLength(self: LineFormat) = value
        """
        ...

    @property
    def BeginArrowheadStyle(self): # -> MsoArrowheadStyle
        """
        Get: BeginArrowheadStyle(self: LineFormat) -> MsoArrowheadStyle
        Set: BeginArrowheadStyle(self: LineFormat) = value
        """
        ...

    @property
    def BeginArrowheadWidth(self): # -> MsoArrowheadWidth
        """
        Get: BeginArrowheadWidth(self: LineFormat) -> MsoArrowheadWidth
        Set: BeginArrowheadWidth(self: LineFormat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: LineFormat) -> int """
        ...

    @property
    def DashStyle(self): # -> MsoLineDashStyle
        """
        Get: DashStyle(self: LineFormat) -> MsoLineDashStyle
        Set: DashStyle(self: LineFormat) = value
        """
        ...

    @property
    def EndArrowheadLength(self): # -> MsoArrowheadLength
        """
        Get: EndArrowheadLength(self: LineFormat) -> MsoArrowheadLength
        Set: EndArrowheadLength(self: LineFormat) = value
        """
        ...

    @property
    def EndArrowheadStyle(self): # -> MsoArrowheadStyle
        """
        Get: EndArrowheadStyle(self: LineFormat) -> MsoArrowheadStyle
        Set: EndArrowheadStyle(self: LineFormat) = value
        """
        ...

    @property
    def EndArrowheadWidth(self): # -> MsoArrowheadWidth
        """
        Get: EndArrowheadWidth(self: LineFormat) -> MsoArrowheadWidth
        Set: EndArrowheadWidth(self: LineFormat) = value
        """
        ...

    @property
    def ForeColor(self) -> ColorFormat:
        """ Get: ForeColor(self: LineFormat) -> ColorFormat """
        ...

    @property
    def InsetPen(self): # -> MsoTriState
        """
        Get: InsetPen(self: LineFormat) -> MsoTriState
        Set: InsetPen(self: LineFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LineFormat) -> object """
        ...

    @property
    def Pattern(self): # -> MsoPatternType
        """
        Get: Pattern(self: LineFormat) -> MsoPatternType
        Set: Pattern(self: LineFormat) = value
        """
        ...

    @property
    def Style(self): # -> MsoLineStyle
        """
        Get: Style(self: LineFormat) -> MsoLineStyle
        Set: Style(self: LineFormat) = value
        """
        ...

    @property
    def Transparency(self) -> Single:
        """
        Get: Transparency(self: LineFormat) -> Single
        Set: Transparency(self: LineFormat) = value
        """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: LineFormat) -> MsoTriState
        Set: Visible(self: LineFormat) = value
        """
        ...

    @property
    def Weight(self) -> Single:
        """
        Get: Weight(self: LineFormat) -> Single
        Set: Weight(self: LineFormat) = value
        """
        ...



class LineNumbering: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Active(self) -> int:
        """
        Get: Active(self: LineNumbering) -> int
        Set: Active(self: LineNumbering) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: LineNumbering) -> Application """
        ...

    @property
    def CountBy(self) -> int:
        """
        Get: CountBy(self: LineNumbering) -> int
        Set: CountBy(self: LineNumbering) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: LineNumbering) -> int """
        ...

    @property
    def DistanceFromText(self) -> Single:
        """
        Get: DistanceFromText(self: LineNumbering) -> Single
        Set: DistanceFromText(self: LineNumbering) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LineNumbering) -> object """
        ...

    @property
    def RestartMode(self) -> WdNumberingRule:
        """
        Get: RestartMode(self: LineNumbering) -> WdNumberingRule
        Set: RestartMode(self: LineNumbering) = value
        """
        ...

    @property
    def StartingNumber(self) -> int:
        """
        Get: StartingNumber(self: LineNumbering) -> int
        Set: StartingNumber(self: LineNumbering) = value
        """
        ...



class Lines(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Lines) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Lines) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Lines) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Lines) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class LinkFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: LinkFormat) -> Application """
        ...

    @property
    def AutoUpdate(self) -> bool:
        """
        Get: AutoUpdate(self: LinkFormat) -> bool
        Set: AutoUpdate(self: LinkFormat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: LinkFormat) -> int """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: LinkFormat) -> bool
        Set: Locked(self: LinkFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: LinkFormat) -> object """
        ...

    @property
    def SavePictureWithDocument(self) -> bool:
        """
        Get: SavePictureWithDocument(self: LinkFormat) -> bool
        Set: SavePictureWithDocument(self: LinkFormat) = value
        """
        ...

    @property
    def SourceFullName(self) -> str:
        """
        Get: SourceFullName(self: LinkFormat) -> str
        Set: SourceFullName(self: LinkFormat) = value
        """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: LinkFormat) -> str """
        ...

    @property
    def SourcePath(self) -> str:
        """ Get: SourcePath(self: LinkFormat) -> str """
        ...

    @property
    def Type(self) -> WdLinkType:
        """ Get: Type(self: LinkFormat) -> WdLinkType """
        ...


    def BreakLink(self): # -> 
        """ BreakLink(self: LinkFormat) """
        ...

    def Update(self): # -> 
        """ Update(self: LinkFormat) """
        ...


class List: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: List) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: List) -> int """
        ...

    @property
    def ListParagraphs(self) -> ListParagraphs:
        """ Get: ListParagraphs(self: List) -> ListParagraphs """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: List) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: List) -> Range """
        ...

    @property
    def SingleListTemplate(self) -> bool:
        """ Get: SingleListTemplate(self: List) -> bool """
        ...

    @property
    def StyleName(self) -> str:
        """ Get: StyleName(self: List) -> str """
        ...


    def ApplyListTemplate(self, ListTemplate:ListTemplate, ContinuePreviousList:object, DefaultListBehavior:object) -> Tuple_[object, object]:
        """ ApplyListTemplate(self: List, ListTemplate: ListTemplate, ContinuePreviousList: object, DefaultListBehavior: object) -> (object, object) """
        ...

    def ApplyListTemplateOld(self, ListTemplate:ListTemplate, ContinuePreviousList:object) -> object:
        """ ApplyListTemplateOld(self: List, ListTemplate: ListTemplate, ContinuePreviousList: object) -> object """
        ...

    def ApplyListTemplateWithLevel(self, ListTemplate:ListTemplate, ContinuePreviousList:object, DefaultListBehavior:object, ApplyLevel:object) -> Tuple_[object, object, object]:
        """ ApplyListTemplateWithLevel(self: List, ListTemplate: ListTemplate, ContinuePreviousList: object, DefaultListBehavior: object, ApplyLevel: object) -> (object, object, object) """
        ...

    def CanContinuePreviousList(self, ListTemplate:ListTemplate) -> WdContinue:
        """ CanContinuePreviousList(self: List, ListTemplate: ListTemplate) -> WdContinue """
        ...

    def ConvertNumbersToText(self, NumberType:object) -> object:
        """ ConvertNumbersToText(self: List, NumberType: object) -> object """
        ...

    def CountNumberedItems(self, NumberType:object, Level:object) -> Tuple_[int, object, object]:
        """ CountNumberedItems(self: List, NumberType: object, Level: object) -> (int, object, object) """
        ...

    def RemoveNumbers(self, NumberType:object) -> object:
        """ RemoveNumbers(self: List, NumberType: object) -> object """
        ...


class ListEntries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListEntries) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ListEntries) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ListEntries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListEntries) -> object """
        ...


    def Add(self, Name:str, Index:object) -> Tuple_[ListEntry, object]:
        """ Add(self: ListEntries, Name: str, Index: object) -> (ListEntry, object) """
        ...

    def Clear(self): # -> 
        """ Clear(self: ListEntries) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ListEntry: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListEntry) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ListEntry) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ListEntry) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ListEntry) -> str
        Set: Name(self: ListEntry) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListEntry) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: ListEntry) """
        ...


class ListFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListFormat) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ListFormat) -> int """
        ...

    @property
    def List(self) -> List:
        """ Get: List(self: ListFormat) -> List """
        ...

    @property
    def ListLevelNumber(self) -> int:
        """
        Get: ListLevelNumber(self: ListFormat) -> int
        Set: ListLevelNumber(self: ListFormat) = value
        """
        ...

    @property
    def ListPictureBullet(self) -> InlineShape:
        """ Get: ListPictureBullet(self: ListFormat) -> InlineShape """
        ...

    @property
    def ListString(self) -> str:
        """ Get: ListString(self: ListFormat) -> str """
        ...

    @property
    def ListTemplate(self) -> ListTemplate:
        """ Get: ListTemplate(self: ListFormat) -> ListTemplate """
        ...

    @property
    def ListType(self) -> WdListType:
        """ Get: ListType(self: ListFormat) -> WdListType """
        ...

    @property
    def ListValue(self) -> int:
        """ Get: ListValue(self: ListFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListFormat) -> object """
        ...

    @property
    def SingleList(self) -> bool:
        """ Get: SingleList(self: ListFormat) -> bool """
        ...

    @property
    def SingleListTemplate(self) -> bool:
        """ Get: SingleListTemplate(self: ListFormat) -> bool """
        ...


    def ApplyBulletDefault(self, DefaultListBehavior:object) -> object:
        """ ApplyBulletDefault(self: ListFormat, DefaultListBehavior: object) -> object """
        ...

    def ApplyBulletDefaultOld(self): # -> 
        """ ApplyBulletDefaultOld(self: ListFormat) """
        ...

    def ApplyListTemplate(self, ListTemplate:ListTemplate, ContinuePreviousList:object, ApplyTo:object, DefaultListBehavior:object) -> Tuple_[object, object, object]:
        """ ApplyListTemplate(self: ListFormat, ListTemplate: ListTemplate, ContinuePreviousList: object, ApplyTo: object, DefaultListBehavior: object) -> (object, object, object) """
        ...

    def ApplyListTemplateOld(self, ListTemplate:ListTemplate, ContinuePreviousList:object, ApplyTo:object) -> Tuple_[object, object]:
        """ ApplyListTemplateOld(self: ListFormat, ListTemplate: ListTemplate, ContinuePreviousList: object, ApplyTo: object) -> (object, object) """
        ...

    def ApplyListTemplateWithLevel(self, ListTemplate:ListTemplate, ContinuePreviousList:object, ApplyTo:object, DefaultListBehavior:object, ApplyLevel:object) -> Tuple_[object, object, object, object]:
        """ ApplyListTemplateWithLevel(self: ListFormat, ListTemplate: ListTemplate, ContinuePreviousList: object, ApplyTo: object, DefaultListBehavior: object, ApplyLevel: object) -> (object, object, object, object) """
        ...

    def ApplyNumberDefault(self, DefaultListBehavior:object) -> object:
        """ ApplyNumberDefault(self: ListFormat, DefaultListBehavior: object) -> object """
        ...

    def ApplyNumberDefaultOld(self): # -> 
        """ ApplyNumberDefaultOld(self: ListFormat) """
        ...

    def ApplyOutlineNumberDefault(self, DefaultListBehavior:object) -> object:
        """ ApplyOutlineNumberDefault(self: ListFormat, DefaultListBehavior: object) -> object """
        ...

    def ApplyOutlineNumberDefaultOld(self): # -> 
        """ ApplyOutlineNumberDefaultOld(self: ListFormat) """
        ...

    def CanContinuePreviousList(self, ListTemplate:ListTemplate) -> WdContinue:
        """ CanContinuePreviousList(self: ListFormat, ListTemplate: ListTemplate) -> WdContinue """
        ...

    def ConvertNumbersToText(self, NumberType:object) -> object:
        """ ConvertNumbersToText(self: ListFormat, NumberType: object) -> object """
        ...

    def CountNumberedItems(self, NumberType:object, Level:object) -> Tuple_[int, object, object]:
        """ CountNumberedItems(self: ListFormat, NumberType: object, Level: object) -> (int, object, object) """
        ...

    def ListIndent(self): # -> 
        """ ListIndent(self: ListFormat) """
        ...

    def ListOutdent(self): # -> 
        """ ListOutdent(self: ListFormat) """
        ...

    def RemoveNumbers(self, NumberType:object) -> object:
        """ RemoveNumbers(self: ListFormat, NumberType: object) -> object """
        ...


class ListGalleries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListGalleries) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ListGalleries) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ListGalleries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListGalleries) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ListGallery: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListGallery) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ListGallery) -> int """
        ...

    @property
    def ListTemplates(self) -> ListTemplates:
        """ Get: ListTemplates(self: ListGallery) -> ListTemplates """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListGallery) -> object """
        ...


    def Reset(self, Index:int): # -> 
        """ Reset(self: ListGallery, Index: int) """
        ...


class ListLevel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> WdListLevelAlignment:
        """
        Get: Alignment(self: ListLevel) -> WdListLevelAlignment
        Set: Alignment(self: ListLevel) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListLevel) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ListLevel) -> int """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: ListLevel) -> Font
        Set: Font(self: ListLevel) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ListLevel) -> int """
        ...

    @property
    def LinkedStyle(self) -> str:
        """
        Get: LinkedStyle(self: ListLevel) -> str
        Set: LinkedStyle(self: ListLevel) = value
        """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: ListLevel) -> str
        Set: NumberFormat(self: ListLevel) = value
        """
        ...

    @property
    def NumberPosition(self) -> Single:
        """
        Get: NumberPosition(self: ListLevel) -> Single
        Set: NumberPosition(self: ListLevel) = value
        """
        ...

    @property
    def NumberStyle(self) -> WdListNumberStyle:
        """
        Get: NumberStyle(self: ListLevel) -> WdListNumberStyle
        Set: NumberStyle(self: ListLevel) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListLevel) -> object """
        ...

    @property
    def PictureBullet(self) -> InlineShape:
        """ Get: PictureBullet(self: ListLevel) -> InlineShape """
        ...

    @property
    def ResetOnHigher(self) -> int:
        """
        Get: ResetOnHigher(self: ListLevel) -> int
        Set: ResetOnHigher(self: ListLevel) = value
        """
        ...

    @property
    def ResetOnHigherOld(self) -> bool:
        """
        Get: ResetOnHigherOld(self: ListLevel) -> bool
        Set: ResetOnHigherOld(self: ListLevel) = value
        """
        ...

    @property
    def StartAt(self) -> int:
        """
        Get: StartAt(self: ListLevel) -> int
        Set: StartAt(self: ListLevel) = value
        """
        ...

    @property
    def TabPosition(self) -> Single:
        """
        Get: TabPosition(self: ListLevel) -> Single
        Set: TabPosition(self: ListLevel) = value
        """
        ...

    @property
    def TextPosition(self) -> Single:
        """
        Get: TextPosition(self: ListLevel) -> Single
        Set: TextPosition(self: ListLevel) = value
        """
        ...

    @property
    def TrailingCharacter(self) -> WdTrailingCharacter:
        """
        Get: TrailingCharacter(self: ListLevel) -> WdTrailingCharacter
        Set: TrailingCharacter(self: ListLevel) = value
        """
        ...


    def ApplyPictureBullet(self, FileName:str) -> InlineShape:
        """ ApplyPictureBullet(self: ListLevel, FileName: str) -> InlineShape """
        ...


class ListLevels(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListLevels) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ListLevels) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ListLevels) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListLevels) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ListParagraphs(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListParagraphs) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ListParagraphs) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ListParagraphs) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListParagraphs) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Lists(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Lists) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Lists) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Lists) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Lists) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ListTemplate: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListTemplate) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ListTemplate) -> int """
        ...

    @property
    def ListLevels(self) -> ListLevels:
        """ Get: ListLevels(self: ListTemplate) -> ListLevels """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ListTemplate) -> str
        Set: Name(self: ListTemplate) = value
        """
        ...

    @property
    def OutlineNumbered(self) -> bool:
        """
        Get: OutlineNumbered(self: ListTemplate) -> bool
        Set: OutlineNumbered(self: ListTemplate) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListTemplate) -> object """
        ...


    def Convert(self, Level:object) -> Tuple_[ListTemplate, object]:
        """ Convert(self: ListTemplate, Level: object) -> (ListTemplate, object) """
        ...


class ListTemplates(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ListTemplates) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ListTemplates) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ListTemplates) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ListTemplates) -> object """
        ...


    def Add(self, OutlineNumbered:object, Name:object) -> Tuple_[ListTemplate, object, object]:
        """ Add(self: ListTemplates, OutlineNumbered: object, Name: object) -> (ListTemplate, object, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Mailer: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Mailer) -> Application """
        ...

    @property
    def BCCRecipients(self) -> object:
        """
        Get: BCCRecipients(self: Mailer) -> object
        Set: BCCRecipients(self: Mailer) = value
        """
        ...

    @property
    def CCRecipients(self) -> object:
        """
        Get: CCRecipients(self: Mailer) -> object
        Set: CCRecipients(self: Mailer) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Mailer) -> int """
        ...

    @property
    def Enclosures(self) -> object:
        """
        Get: Enclosures(self: Mailer) -> object
        Set: Enclosures(self: Mailer) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Mailer) -> object """
        ...

    @property
    def Received(self) -> bool:
        """ Get: Received(self: Mailer) -> bool """
        ...

    @property
    def Recipients(self) -> object:
        """
        Get: Recipients(self: Mailer) -> object
        Set: Recipients(self: Mailer) = value
        """
        ...

    @property
    def SendDateTime(self) -> DateTime:
        """ Get: SendDateTime(self: Mailer) -> DateTime """
        ...

    @property
    def Sender(self) -> str:
        """ Get: Sender(self: Mailer) -> str """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: Mailer) -> str
        Set: Subject(self: Mailer) = value
        """
        ...



class MailingLabel: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailingLabel) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MailingLabel) -> int """
        ...

    @property
    def CustomLabels(self) -> CustomLabels:
        """ Get: CustomLabels(self: MailingLabel) -> CustomLabels """
        ...

    @property
    def DefaultLabelName(self) -> str:
        """
        Get: DefaultLabelName(self: MailingLabel) -> str
        Set: DefaultLabelName(self: MailingLabel) = value
        """
        ...

    @property
    def DefaultLaserTray(self) -> WdPaperTray:
        """
        Get: DefaultLaserTray(self: MailingLabel) -> WdPaperTray
        Set: DefaultLaserTray(self: MailingLabel) = value
        """
        ...

    @property
    def DefaultPrintBarCode(self) -> bool:
        """
        Get: DefaultPrintBarCode(self: MailingLabel) -> bool
        Set: DefaultPrintBarCode(self: MailingLabel) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailingLabel) -> object """
        ...

    @property
    def Vertical(self) -> bool:
        """
        Get: Vertical(self: MailingLabel) -> bool
        Set: Vertical(self: MailingLabel) = value
        """
        ...


    def CreateNewDocument(self, Name:object, Address:object, AutoText:object, ExtractAddress:object, LaserTray:object, PrintEPostageLabel:object, Vertical:object) -> Tuple_[Document, object, object, object, object, object, object, object]:
        """ CreateNewDocument(self: MailingLabel, Name: object, Address: object, AutoText: object, ExtractAddress: object, LaserTray: object, PrintEPostageLabel: object, Vertical: object) -> (Document, object, object, object, object, object, object, object) """
        ...

    def CreateNewDocument2000(self, Name:object, Address:object, AutoText:object, ExtractAddress:object, LaserTray:object) -> Tuple_[Document, object, object, object, object, object]:
        """ CreateNewDocument2000(self: MailingLabel, Name: object, Address: object, AutoText: object, ExtractAddress: object, LaserTray: object) -> (Document, object, object, object, object, object) """
        ...

    def CreateNewDocumentByID(self, LabelID:object, Address:object, AutoText:object, ExtractAddress:object, LaserTray:object, PrintEPostageLabel:object, Vertical:object) -> Tuple_[Document, object, object, object, object, object, object, object]:
        """ CreateNewDocumentByID(self: MailingLabel, LabelID: object, Address: object, AutoText: object, ExtractAddress: object, LaserTray: object, PrintEPostageLabel: object, Vertical: object) -> (Document, object, object, object, object, object, object, object) """
        ...

    def LabelOptions(self): # -> 
        """ LabelOptions(self: MailingLabel) """
        ...

    def PrintOut(self, Name:object, Address:object, ExtractAddress:object, LaserTray:object, SingleLabel:object, Row:object, Column:object, PrintEPostageLabel:object, Vertical:object) -> Tuple_[object, object, object, object, object, object, object, object, object]:
        """ PrintOut(self: MailingLabel, Name: object, Address: object, ExtractAddress: object, LaserTray: object, SingleLabel: object, Row: object, Column: object, PrintEPostageLabel: object, Vertical: object) -> (object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOut2000(self, Name:object, Address:object, ExtractAddress:object, LaserTray:object, SingleLabel:object, Row:object, Column:object) -> Tuple_[object, object, object, object, object, object, object]:
        """ PrintOut2000(self: MailingLabel, Name: object, Address: object, ExtractAddress: object, LaserTray: object, SingleLabel: object, Row: object, Column: object) -> (object, object, object, object, object, object, object) """
        ...

    def PrintOutByID(self, LabelID:object, Address:object, ExtractAddress:object, LaserTray:object, SingleLabel:object, Row:object, Column:object, PrintEPostageLabel:object, Vertical:object) -> Tuple_[object, object, object, object, object, object, object, object, object]:
        """ PrintOutByID(self: MailingLabel, LabelID: object, Address: object, ExtractAddress: object, LaserTray: object, SingleLabel: object, Row: object, Column: object, PrintEPostageLabel: object, Vertical: object) -> (object, object, object, object, object, object, object, object, object) """
        ...


class MailMerge: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailMerge) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MailMerge) -> int """
        ...

    @property
    def DataSource(self) -> MailMergeDataSource:
        """ Get: DataSource(self: MailMerge) -> MailMergeDataSource """
        ...

    @property
    def Destination(self) -> WdMailMergeDestination:
        """
        Get: Destination(self: MailMerge) -> WdMailMergeDestination
        Set: Destination(self: MailMerge) = value
        """
        ...

    @property
    def Fields(self) -> MailMergeFields:
        """ Get: Fields(self: MailMerge) -> MailMergeFields """
        ...

    @property
    def HighlightMergeFields(self) -> bool:
        """
        Get: HighlightMergeFields(self: MailMerge) -> bool
        Set: HighlightMergeFields(self: MailMerge) = value
        """
        ...

    @property
    def MailAddressFieldName(self) -> str:
        """
        Get: MailAddressFieldName(self: MailMerge) -> str
        Set: MailAddressFieldName(self: MailMerge) = value
        """
        ...

    @property
    def MailAsAttachment(self) -> bool:
        """
        Get: MailAsAttachment(self: MailMerge) -> bool
        Set: MailAsAttachment(self: MailMerge) = value
        """
        ...

    @property
    def MailFormat(self) -> WdMailMergeMailFormat:
        """
        Get: MailFormat(self: MailMerge) -> WdMailMergeMailFormat
        Set: MailFormat(self: MailMerge) = value
        """
        ...

    @property
    def MailSubject(self) -> str:
        """
        Get: MailSubject(self: MailMerge) -> str
        Set: MailSubject(self: MailMerge) = value
        """
        ...

    @property
    def MainDocumentType(self) -> WdMailMergeMainDocType:
        """
        Get: MainDocumentType(self: MailMerge) -> WdMailMergeMainDocType
        Set: MainDocumentType(self: MailMerge) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailMerge) -> object """
        ...

    @property
    def ShowSendToCustom(self) -> str:
        """
        Get: ShowSendToCustom(self: MailMerge) -> str
        Set: ShowSendToCustom(self: MailMerge) = value
        """
        ...

    @property
    def State(self) -> WdMailMergeState:
        """ Get: State(self: MailMerge) -> WdMailMergeState """
        ...

    @property
    def SuppressBlankLines(self) -> bool:
        """
        Get: SuppressBlankLines(self: MailMerge) -> bool
        Set: SuppressBlankLines(self: MailMerge) = value
        """
        ...

    @property
    def ViewMailMergeFieldCodes(self) -> int:
        """
        Get: ViewMailMergeFieldCodes(self: MailMerge) -> int
        Set: ViewMailMergeFieldCodes(self: MailMerge) = value
        """
        ...

    @property
    def WizardState(self) -> int:
        """
        Get: WizardState(self: MailMerge) -> int
        Set: WizardState(self: MailMerge) = value
        """
        ...


    def Check(self): # -> 
        """ Check(self: MailMerge) """
        ...

    def CreateDataSource(self, Name:object, PasswordDocument:object, WritePasswordDocument:object, HeaderRecord:object, MSQuery:object, SQLStatement:object, SQLStatement1:object, Connection:object, LinkToSource:object) -> Tuple_[object, object, object, object, object, object, object, object, object]:
        """ CreateDataSource(self: MailMerge, Name: object, PasswordDocument: object, WritePasswordDocument: object, HeaderRecord: object, MSQuery: object, SQLStatement: object, SQLStatement1: object, Connection: object, LinkToSource: object) -> (object, object, object, object, object, object, object, object, object) """
        ...

    def CreateHeaderSource(self, Name:str, PasswordDocument:object, WritePasswordDocument:object, HeaderRecord:object) -> Tuple_[object, object, object]:
        """ CreateHeaderSource(self: MailMerge, Name: str, PasswordDocument: object, WritePasswordDocument: object, HeaderRecord: object) -> (object, object, object) """
        ...

    def EditDataSource(self): # -> 
        """ EditDataSource(self: MailMerge) """
        ...

    def EditHeaderSource(self): # -> 
        """ EditHeaderSource(self: MailMerge) """
        ...

    def EditMainDocument(self): # -> 
        """ EditMainDocument(self: MailMerge) """
        ...

    def Execute(self, Pause:object) -> object:
        """ Execute(self: MailMerge, Pause: object) -> object """
        ...

    def OpenDataSource(self, Name:str, Format:object, ConfirmConversions:object, ReadOnly:object, LinkToSource:object, AddToRecentFiles:object, PasswordDocument:object, PasswordTemplate:object, Revert:object, WritePasswordDocument:object, WritePasswordTemplate:object, Connection:object, SQLStatement:object, SQLStatement1:object, OpenExclusive:object, SubType:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ OpenDataSource(self: MailMerge, Name: str, Format: object, ConfirmConversions: object, ReadOnly: object, LinkToSource: object, AddToRecentFiles: object, PasswordDocument: object, PasswordTemplate: object, Revert: object, WritePasswordDocument: object, WritePasswordTemplate: object, Connection: object, SQLStatement: object, SQLStatement1: object, OpenExclusive: object, SubType: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def OpenDataSource2000(self, Name:str, Format:object, ConfirmConversions:object, ReadOnly:object, LinkToSource:object, AddToRecentFiles:object, PasswordDocument:object, PasswordTemplate:object, Revert:object, WritePasswordDocument:object, WritePasswordTemplate:object, Connection:object, SQLStatement:object, SQLStatement1:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ OpenDataSource2000(self: MailMerge, Name: str, Format: object, ConfirmConversions: object, ReadOnly: object, LinkToSource: object, AddToRecentFiles: object, PasswordDocument: object, PasswordTemplate: object, Revert: object, WritePasswordDocument: object, WritePasswordTemplate: object, Connection: object, SQLStatement: object, SQLStatement1: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def OpenHeaderSource(self, Name:str, Format:object, ConfirmConversions:object, ReadOnly:object, AddToRecentFiles:object, PasswordDocument:object, PasswordTemplate:object, Revert:object, WritePasswordDocument:object, WritePasswordTemplate:object, OpenExclusive:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object]:
        """ OpenHeaderSource(self: MailMerge, Name: str, Format: object, ConfirmConversions: object, ReadOnly: object, AddToRecentFiles: object, PasswordDocument: object, PasswordTemplate: object, Revert: object, WritePasswordDocument: object, WritePasswordTemplate: object, OpenExclusive: object) -> (object, object, object, object, object, object, object, object, object, object) """
        ...

    def OpenHeaderSource2000(self, Name:str, Format:object, ConfirmConversions:object, ReadOnly:object, AddToRecentFiles:object, PasswordDocument:object, PasswordTemplate:object, Revert:object, WritePasswordDocument:object, WritePasswordTemplate:object) -> Tuple_[object, object, object, object, object, object, object, object, object]:
        """ OpenHeaderSource2000(self: MailMerge, Name: str, Format: object, ConfirmConversions: object, ReadOnly: object, AddToRecentFiles: object, PasswordDocument: object, PasswordTemplate: object, Revert: object, WritePasswordDocument: object, WritePasswordTemplate: object) -> (object, object, object, object, object, object, object, object, object) """
        ...

    def ShowWizard(self, InitialState:object, ShowDocumentStep:object, ShowTemplateStep:object, ShowDataStep:object, ShowWriteStep:object, ShowPreviewStep:object, ShowMergeStep:object) -> Tuple_[object, object, object, object, object, object, object]:
        """ ShowWizard(self: MailMerge, InitialState: object, ShowDocumentStep: object, ShowTemplateStep: object, ShowDataStep: object, ShowWriteStep: object, ShowPreviewStep: object, ShowMergeStep: object) -> (object, object, object, object, object, object, object) """
        ...

    def UseAddressBook(self, Type:str): # -> 
        """ UseAddressBook(self: MailMerge, Type: str) """
        ...


class MailMergeDataField: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailMergeDataField) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MailMergeDataField) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: MailMergeDataField) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: MailMergeDataField) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailMergeDataField) -> object """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: MailMergeDataField) -> str """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class MailMergeDataFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailMergeDataFields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: MailMergeDataFields) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MailMergeDataFields) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailMergeDataFields) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class MailMergeDataSource: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveRecord(self) -> WdMailMergeActiveRecord:
        """
        Get: ActiveRecord(self: MailMergeDataSource) -> WdMailMergeActiveRecord
        Set: ActiveRecord(self: MailMergeDataSource) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailMergeDataSource) -> Application """
        ...

    @property
    def ConnectString(self) -> str:
        """ Get: ConnectString(self: MailMergeDataSource) -> str """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MailMergeDataSource) -> int """
        ...

    @property
    def DataFields(self) -> MailMergeDataFields:
        """ Get: DataFields(self: MailMergeDataSource) -> MailMergeDataFields """
        ...

    @property
    def FieldNames(self) -> MailMergeFieldNames:
        """ Get: FieldNames(self: MailMergeDataSource) -> MailMergeFieldNames """
        ...

    @property
    def FirstRecord(self) -> int:
        """
        Get: FirstRecord(self: MailMergeDataSource) -> int
        Set: FirstRecord(self: MailMergeDataSource) = value
        """
        ...

    @property
    def HeaderSourceName(self) -> str:
        """ Get: HeaderSourceName(self: MailMergeDataSource) -> str """
        ...

    @property
    def HeaderSourceType(self) -> WdMailMergeDataSource:
        """ Get: HeaderSourceType(self: MailMergeDataSource) -> WdMailMergeDataSource """
        ...

    @property
    def Included(self) -> bool:
        """
        Get: Included(self: MailMergeDataSource) -> bool
        Set: Included(self: MailMergeDataSource) = value
        """
        ...

    @property
    def InvalidAddress(self) -> bool:
        """
        Get: InvalidAddress(self: MailMergeDataSource) -> bool
        Set: InvalidAddress(self: MailMergeDataSource) = value
        """
        ...

    @property
    def InvalidComments(self) -> str:
        """
        Get: InvalidComments(self: MailMergeDataSource) -> str
        Set: InvalidComments(self: MailMergeDataSource) = value
        """
        ...

    @property
    def LastRecord(self) -> int:
        """
        Get: LastRecord(self: MailMergeDataSource) -> int
        Set: LastRecord(self: MailMergeDataSource) = value
        """
        ...

    @property
    def MappedDataFields(self) -> MappedDataFields:
        """ Get: MappedDataFields(self: MailMergeDataSource) -> MappedDataFields """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: MailMergeDataSource) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailMergeDataSource) -> object """
        ...

    @property
    def QueryString(self) -> str:
        """
        Get: QueryString(self: MailMergeDataSource) -> str
        Set: QueryString(self: MailMergeDataSource) = value
        """
        ...

    @property
    def RecordCount(self) -> int:
        """ Get: RecordCount(self: MailMergeDataSource) -> int """
        ...

    @property
    def TableName(self) -> str:
        """ Get: TableName(self: MailMergeDataSource) -> str """
        ...

    @property
    def Type(self) -> WdMailMergeDataSource:
        """ Get: Type(self: MailMergeDataSource) -> WdMailMergeDataSource """
        ...


    def Close(self): # -> 
        """ Close(self: MailMergeDataSource) """
        ...

    def FindRecord(self, FindText:str, Field:object) -> Tuple_[bool, object]:
        """ FindRecord(self: MailMergeDataSource, FindText: str, Field: object) -> (bool, object) """
        ...

    def FindRecord2000(self, FindText:str, Field:str) -> bool:
        """ FindRecord2000(self: MailMergeDataSource, FindText: str, Field: str) -> bool """
        ...

    def SetAllErrorFlags(self, Invalid:bool, InvalidComment:str): # -> 
        """ SetAllErrorFlags(self: MailMergeDataSource, Invalid: bool, InvalidComment: str) """
        ...

    def SetAllIncludedFlags(self, Included:bool): # -> 
        """ SetAllIncludedFlags(self: MailMergeDataSource, Included: bool) """
        ...


class MailMergeField: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailMergeField) -> Application """
        ...

    @property
    def Code(self) -> Range:
        """
        Get: Code(self: MailMergeField) -> Range
        Set: Code(self: MailMergeField) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MailMergeField) -> int """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: MailMergeField) -> bool
        Set: Locked(self: MailMergeField) = value
        """
        ...

    @property
    def Next(self) -> MailMergeField:
        """ Get: Next(self: MailMergeField) -> MailMergeField """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailMergeField) -> object """
        ...

    @property
    def Previous(self) -> MailMergeField:
        """ Get: Previous(self: MailMergeField) -> MailMergeField """
        ...

    @property
    def Type(self) -> WdFieldType:
        """ Get: Type(self: MailMergeField) -> WdFieldType """
        ...


    def Copy(self): # -> 
        """ Copy(self: MailMergeField) """
        ...

    def Cut(self): # -> 
        """ Cut(self: MailMergeField) """
        ...

    def Delete(self): # -> 
        """ Delete(self: MailMergeField) """
        ...

    def Select(self): # -> 
        """ Select(self: MailMergeField) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class MailMergeFieldName: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailMergeFieldName) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MailMergeFieldName) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: MailMergeFieldName) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: MailMergeFieldName) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailMergeFieldName) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class MailMergeFieldNames(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailMergeFieldNames) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: MailMergeFieldNames) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MailMergeFieldNames) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailMergeFieldNames) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class MailMergeFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailMergeFields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: MailMergeFields) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MailMergeFields) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailMergeFields) -> object """
        ...


    def Add(self, Range:Range, Name:str) -> MailMergeField:
        """ Add(self: MailMergeFields, Range: Range, Name: str) -> MailMergeField """
        ...

    def AddAsk(self, Range:Range, Name:str, Prompt:object, DefaultAskText:object, AskOnce:object) -> Tuple_[MailMergeField, object, object, object]:
        """ AddAsk(self: MailMergeFields, Range: Range, Name: str, Prompt: object, DefaultAskText: object, AskOnce: object) -> (MailMergeField, object, object, object) """
        ...

    def AddFillIn(self, Range:Range, Prompt:object, DefaultFillInText:object, AskOnce:object) -> Tuple_[MailMergeField, object, object, object]:
        """ AddFillIn(self: MailMergeFields, Range: Range, Prompt: object, DefaultFillInText: object, AskOnce: object) -> (MailMergeField, object, object, object) """
        ...

    def AddIf(self, Range:Range, MergeField:str, Comparison:WdMailMergeComparison, CompareTo:object, TrueAutoText:object, TrueText:object, FalseAutoText:object, FalseText:object) -> Tuple_[MailMergeField, object, object, object, object, object]:
        """ AddIf(self: MailMergeFields, Range: Range, MergeField: str, Comparison: WdMailMergeComparison, CompareTo: object, TrueAutoText: object, TrueText: object, FalseAutoText: object, FalseText: object) -> (MailMergeField, object, object, object, object, object) """
        ...

    def AddMergeRec(self, Range:Range) -> MailMergeField:
        """ AddMergeRec(self: MailMergeFields, Range: Range) -> MailMergeField """
        ...

    def AddMergeSeq(self, Range:Range) -> MailMergeField:
        """ AddMergeSeq(self: MailMergeFields, Range: Range) -> MailMergeField """
        ...

    def AddNext(self, Range:Range) -> MailMergeField:
        """ AddNext(self: MailMergeFields, Range: Range) -> MailMergeField """
        ...

    def AddNextIf(self, Range:Range, MergeField:str, Comparison:WdMailMergeComparison, CompareTo:object) -> Tuple_[MailMergeField, object]:
        """ AddNextIf(self: MailMergeFields, Range: Range, MergeField: str, Comparison: WdMailMergeComparison, CompareTo: object) -> (MailMergeField, object) """
        ...

    def AddSet(self, Range:Range, Name:str, ValueText:object, ValueAutoText:object) -> Tuple_[MailMergeField, object, object]:
        """ AddSet(self: MailMergeFields, Range: Range, Name: str, ValueText: object, ValueAutoText: object) -> (MailMergeField, object, object) """
        ...

    def AddSkipIf(self, Range:Range, MergeField:str, Comparison:WdMailMergeComparison, CompareTo:object) -> Tuple_[MailMergeField, object]:
        """ AddSkipIf(self: MailMergeFields, Range: Range, MergeField: str, Comparison: WdMailMergeComparison, CompareTo: object) -> (MailMergeField, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class MailMessage: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MailMessage) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MailMessage) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MailMessage) -> object """
        ...


    def CheckName(self): # -> 
        """ CheckName(self: MailMessage) """
        ...

    def Delete(self): # -> 
        """ Delete(self: MailMessage) """
        ...

    def DisplayMoveDialog(self): # -> 
        """ DisplayMoveDialog(self: MailMessage) """
        ...

    def DisplayProperties(self): # -> 
        """ DisplayProperties(self: MailMessage) """
        ...

    def DisplaySelectNamesDialog(self): # -> 
        """ DisplaySelectNamesDialog(self: MailMessage) """
        ...

    def Forward(self): # -> 
        """ Forward(self: MailMessage) """
        ...

    def GoToNext(self): # -> 
        """ GoToNext(self: MailMessage) """
        ...

    def GoToPrevious(self): # -> 
        """ GoToPrevious(self: MailMessage) """
        ...

    def Reply(self): # -> 
        """ Reply(self: MailMessage) """
        ...

    def ReplyAll(self): # -> 
        """ ReplyAll(self: MailMessage) """
        ...

    def ToggleHeader(self): # -> 
        """ ToggleHeader(self: MailMessage) """
        ...


class MappedDataField: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MappedDataField) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MappedDataField) -> int """
        ...

    @property
    def DataFieldIndex(self) -> int:
        """
        Get: DataFieldIndex(self: MappedDataField) -> int
        Set: DataFieldIndex(self: MappedDataField) = value
        """
        ...

    @property
    def DataFieldName(self) -> str:
        """ Get: DataFieldName(self: MappedDataField) -> str """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: MappedDataField) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: MappedDataField) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MappedDataField) -> object """
        ...

    @property
    def Value(self) -> str:
        """ Get: Value(self: MappedDataField) -> str """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class MappedDataFields(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: MappedDataFields) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: MappedDataFields) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: MappedDataFields) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: MappedDataFields) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OCXEvents: # skipped bases: <type 'object'>
    """ no doc """
    def GotFocus(self): # -> 
        """ GotFocus(self: OCXEvents) """
        ...

    def LostFocus(self): # -> 
        """ LostFocus(self: OCXEvents) """
        ...


class OCXEvents_Event: # skipped bases: <type 'object'>
    """ no doc """
    def add_GotFocus(self): # -> 
        """ add_GotFocus(self: OCXEvents_Event, : OCXEvents_GotFocusEventHandler) """
        ...

    def add_LostFocus(self): # -> 
        """ add_LostFocus(self: OCXEvents_Event, : OCXEvents_LostFocusEventHandler) """
        ...

    def remove_GotFocus(self): # -> 
        """ remove_GotFocus(self: OCXEvents_Event, : OCXEvents_GotFocusEventHandler) """
        ...

    def remove_LostFocus(self): # -> 
        """ remove_LostFocus(self: OCXEvents_Event, : OCXEvents_LostFocusEventHandler) """
        ...

    GotFocus = ...
    LostFocus = ...


class OCXEvents_GotFocusEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OCXEvents_GotFocusEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OCXEvents_GotFocusEventHandler) """
        ...


class OCXEvents_LostFocusEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ OCXEvents_LostFocusEventHandler(: object, : UIntPtr) """
    def Invoke(self): # -> 
        """ Invoke(self: OCXEvents_LostFocusEventHandler) """
        ...


class OCXEvents_SinkHelper(OCXEvents): # skipped bases: <type 'object'>
    """ no doc """
    m_dwCookie = ...
    m_GotFocusDelegate = ...
    m_LostFocusDelegate = ...


class _OLEControl: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AltHTML(self) -> str:
        """
        Get: AltHTML(self: _OLEControl) -> str
        Set: AltHTML(self: _OLEControl) = value
        """
        ...

    @property
    def Automation(self) -> object:
        """ Get: Automation(self: _OLEControl) -> object """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: _OLEControl) -> Single
        Set: Height(self: _OLEControl) = value
        """
        ...

    @property
    def Left(self) -> Single:
        """
        Get: Left(self: _OLEControl) -> Single
        Set: Left(self: _OLEControl) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: _OLEControl) -> str
        Set: Name(self: _OLEControl) = value
        """
        ...

    @property
    def Top(self) -> Single:
        """
        Get: Top(self: _OLEControl) -> Single
        Set: Top(self: _OLEControl) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: _OLEControl) -> Single
        Set: Width(self: _OLEControl) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: _OLEControl) """
        ...

    def Copy(self): # -> 
        """ Copy(self: _OLEControl) """
        ...

    def Cut(self): # -> 
        """ Cut(self: _OLEControl) """
        ...

    def Delete(self): # -> 
        """ Delete(self: _OLEControl) """
        ...

    def Select(self): # -> 
        """ Select(self: _OLEControl) """
        ...


class OLEControl(_OLEControl, OCXEvents_Event): # skipped bases: <type 'object'>
    """ no doc """
    pass

class OLEControlClass(OLEControl, __ComObject): # skipped bases: <type '_OLEControl'>, <type 'OCXEvents_Event'>, <type 'object'>
    """ OLEControlClass() """
    @property
    def AltHTML(self) -> str:
        """
        Get: AltHTML(self: OLEControlClass) -> str
        Set: AltHTML(self: OLEControlClass) = value
        """
        ...

    @property
    def Automation(self) -> object:
        """ Get: Automation(self: OLEControlClass) -> object """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: OLEControlClass) -> Single
        Set: Height(self: OLEControlClass) = value
        """
        ...

    @property
    def Left(self) -> Single:
        """
        Get: Left(self: OLEControlClass) -> Single
        Set: Left(self: OLEControlClass) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: OLEControlClass) -> str
        Set: Name(self: OLEControlClass) = value
        """
        ...

    @property
    def Top(self) -> Single:
        """
        Get: Top(self: OLEControlClass) -> Single
        Set: Top(self: OLEControlClass) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: OLEControlClass) -> Single
        Set: Width(self: OLEControlClass) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: OLEControlClass) """
        ...

    def add_GotFocus(self): # -> 
        """ add_GotFocus(self: OLEControlClass, : OCXEvents_GotFocusEventHandler) """
        ...

    def add_LostFocus(self): # -> 
        """ add_LostFocus(self: OLEControlClass, : OCXEvents_LostFocusEventHandler) """
        ...

    def Copy(self): # -> 
        """ Copy(self: OLEControlClass) """
        ...

    def Cut(self): # -> 
        """ Cut(self: OLEControlClass) """
        ...

    def Delete(self): # -> 
        """ Delete(self: OLEControlClass) """
        ...

    def remove_GotFocus(self): # -> 
        """ remove_GotFocus(self: OLEControlClass, : OCXEvents_GotFocusEventHandler) """
        ...

    def remove_LostFocus(self): # -> 
        """ remove_LostFocus(self: OLEControlClass, : OCXEvents_LostFocusEventHandler) """
        ...

    def Select(self): # -> 
        """ Select(self: OLEControlClass) """
        ...

    GotFocus = ...
    LostFocus = ...


class OLEFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OLEFormat) -> Application """
        ...

    @property
    def ClassType(self) -> str:
        """
        Get: ClassType(self: OLEFormat) -> str
        Set: ClassType(self: OLEFormat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OLEFormat) -> int """
        ...

    @property
    def DisplayAsIcon(self) -> bool:
        """
        Get: DisplayAsIcon(self: OLEFormat) -> bool
        Set: DisplayAsIcon(self: OLEFormat) = value
        """
        ...

    @property
    def IconIndex(self) -> int:
        """
        Get: IconIndex(self: OLEFormat) -> int
        Set: IconIndex(self: OLEFormat) = value
        """
        ...

    @property
    def IconLabel(self) -> str:
        """
        Get: IconLabel(self: OLEFormat) -> str
        Set: IconLabel(self: OLEFormat) = value
        """
        ...

    @property
    def IconName(self) -> str:
        """
        Get: IconName(self: OLEFormat) -> str
        Set: IconName(self: OLEFormat) = value
        """
        ...

    @property
    def IconPath(self) -> str:
        """ Get: IconPath(self: OLEFormat) -> str """
        ...

    @property
    def Label(self) -> str:
        """ Get: Label(self: OLEFormat) -> str """
        ...

    @property
    def Object(self) -> object:
        """ Get: Object(self: OLEFormat) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OLEFormat) -> object """
        ...

    @property
    def PreserveFormattingOnUpdate(self) -> bool:
        """
        Get: PreserveFormattingOnUpdate(self: OLEFormat) -> bool
        Set: PreserveFormattingOnUpdate(self: OLEFormat) = value
        """
        ...

    @property
    def ProgID(self) -> str:
        """ Get: ProgID(self: OLEFormat) -> str """
        ...


    def Activate(self): # -> 
        """ Activate(self: OLEFormat) """
        ...

    def ActivateAs(self, ClassType:str): # -> 
        """ ActivateAs(self: OLEFormat, ClassType: str) """
        ...

    def ConvertTo(self, ClassType:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object) -> Tuple_[object, object, object, object, object]:
        """ ConvertTo(self: OLEFormat, ClassType: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object) -> (object, object, object, object, object) """
        ...

    def DoVerb(self, VerbIndex:object) -> object:
        """ DoVerb(self: OLEFormat, VerbIndex: object) -> object """
        ...

    def Edit(self): # -> 
        """ Edit(self: OLEFormat) """
        ...

    def Open(self): # -> 
        """ Open(self: OLEFormat) """
        ...


class OMath: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlignPoint(self) -> int:
        """
        Get: AlignPoint(self: OMath) -> int
        Set: AlignPoint(self: OMath) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMath) -> Application """
        ...

    @property
    def ArgIndex(self) -> int:
        """ Get: ArgIndex(self: OMath) -> int """
        ...

    @property
    def ArgSize(self) -> int:
        """
        Get: ArgSize(self: OMath) -> int
        Set: ArgSize(self: OMath) = value
        """
        ...

    @property
    def Breaks(self) -> OMathBreaks:
        """ Get: Breaks(self: OMath) -> OMathBreaks """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMath) -> int """
        ...

    @property
    def Functions(self) -> OMathFunctions:
        """ Get: Functions(self: OMath) -> OMathFunctions """
        ...

    @property
    def Justification(self) -> WdOMathJc:
        """
        Get: Justification(self: OMath) -> WdOMathJc
        Set: Justification(self: OMath) = value
        """
        ...

    @property
    def NestingLevel(self) -> int:
        """ Get: NestingLevel(self: OMath) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMath) -> object """
        ...

    @property
    def ParentArg(self) -> OMath:
        """ Get: ParentArg(self: OMath) -> OMath """
        ...

    @property
    def ParentCol(self) -> OMathMatCol:
        """ Get: ParentCol(self: OMath) -> OMathMatCol """
        ...

    @property
    def ParentFunction(self) -> OMathFunction:
        """ Get: ParentFunction(self: OMath) -> OMathFunction """
        ...

    @property
    def ParentOMath(self) -> OMath:
        """ Get: ParentOMath(self: OMath) -> OMath """
        ...

    @property
    def ParentRow(self) -> OMathMatRow:
        """ Get: ParentRow(self: OMath) -> OMathMatRow """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: OMath) -> Range """
        ...

    @property
    def Type(self) -> WdOMathType:
        """
        Get: Type(self: OMath) -> WdOMathType
        Set: Type(self: OMath) = value
        """
        ...


    def BuildUp(self): # -> 
        """ BuildUp(self: OMath) """
        ...

    def ConvertToLiteralText(self): # -> 
        """ ConvertToLiteralText(self: OMath) """
        ...

    def ConvertToMathText(self): # -> 
        """ ConvertToMathText(self: OMath) """
        ...

    def ConvertToNormalText(self): # -> 
        """ ConvertToNormalText(self: OMath) """
        ...

    def Linearize(self): # -> 
        """ Linearize(self: OMath) """
        ...

    def Remove(self): # -> 
        """ Remove(self: OMath) """
        ...


class OMathAcc: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathAcc) -> Application """
        ...

    @property
    def Char(self) -> Int16:
        """
        Get: Char(self: OMathAcc) -> Int16
        Set: Char(self: OMathAcc) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathAcc) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathAcc) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathAcc) -> object """
        ...



class OMathArgs: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathArgs) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OMathArgs) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathArgs) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathArgs) -> object """
        ...


    def Add(self, BeforeArg:object) -> Tuple_[OMath, object]:
        """ Add(self: OMathArgs, BeforeArg: object) -> (OMath, object) """
        ...

    def Item(self, Index:int) -> OMath:
        """ Item(self: OMathArgs, Index: int) -> OMath """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class OMathAutoCorrect: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathAutoCorrect) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathAutoCorrect) -> int """
        ...

    @property
    def Entries(self) -> OMathAutoCorrectEntries:
        """ Get: Entries(self: OMathAutoCorrect) -> OMathAutoCorrectEntries """
        ...

    @property
    def Functions(self) -> OMathRecognizedFunctions:
        """ Get: Functions(self: OMathAutoCorrect) -> OMathRecognizedFunctions """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathAutoCorrect) -> object """
        ...

    @property
    def ReplaceText(self) -> bool:
        """
        Get: ReplaceText(self: OMathAutoCorrect) -> bool
        Set: ReplaceText(self: OMathAutoCorrect) = value
        """
        ...

    @property
    def UseOutsideOMath(self) -> bool:
        """
        Get: UseOutsideOMath(self: OMathAutoCorrect) -> bool
        Set: UseOutsideOMath(self: OMathAutoCorrect) = value
        """
        ...



class OMathAutoCorrectEntries(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathAutoCorrectEntries) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OMathAutoCorrectEntries) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathAutoCorrectEntries) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathAutoCorrectEntries) -> object """
        ...


    def Add(self, Name:str, Value:str) -> OMathAutoCorrectEntry:
        """ Add(self: OMathAutoCorrectEntries, Name: str, Value: str) -> OMathAutoCorrectEntry """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OMathAutoCorrectEntry: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathAutoCorrectEntry) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathAutoCorrectEntry) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: OMathAutoCorrectEntry) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: OMathAutoCorrectEntry) -> str
        Set: Name(self: OMathAutoCorrectEntry) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathAutoCorrectEntry) -> object """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: OMathAutoCorrectEntry) -> str
        Set: Value(self: OMathAutoCorrectEntry) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: OMathAutoCorrectEntry) """
        ...


class OMathBar: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathBar) -> Application """
        ...

    @property
    def BarTop(self) -> bool:
        """
        Get: BarTop(self: OMathBar) -> bool
        Set: BarTop(self: OMathBar) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathBar) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathBar) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathBar) -> object """
        ...



class OMathBorderBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathBorderBox) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathBorderBox) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathBorderBox) -> OMath """
        ...

    @property
    def HideBot(self) -> bool:
        """
        Get: HideBot(self: OMathBorderBox) -> bool
        Set: HideBot(self: OMathBorderBox) = value
        """
        ...

    @property
    def HideLeft(self) -> bool:
        """
        Get: HideLeft(self: OMathBorderBox) -> bool
        Set: HideLeft(self: OMathBorderBox) = value
        """
        ...

    @property
    def HideRight(self) -> bool:
        """
        Get: HideRight(self: OMathBorderBox) -> bool
        Set: HideRight(self: OMathBorderBox) = value
        """
        ...

    @property
    def HideTop(self) -> bool:
        """
        Get: HideTop(self: OMathBorderBox) -> bool
        Set: HideTop(self: OMathBorderBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathBorderBox) -> object """
        ...

    @property
    def StrikeBLTR(self) -> bool:
        """
        Get: StrikeBLTR(self: OMathBorderBox) -> bool
        Set: StrikeBLTR(self: OMathBorderBox) = value
        """
        ...

    @property
    def StrikeH(self) -> bool:
        """
        Get: StrikeH(self: OMathBorderBox) -> bool
        Set: StrikeH(self: OMathBorderBox) = value
        """
        ...

    @property
    def StrikeTLBR(self) -> bool:
        """
        Get: StrikeTLBR(self: OMathBorderBox) -> bool
        Set: StrikeTLBR(self: OMathBorderBox) = value
        """
        ...

    @property
    def StrikeV(self) -> bool:
        """
        Get: StrikeV(self: OMathBorderBox) -> bool
        Set: StrikeV(self: OMathBorderBox) = value
        """
        ...



class OMathBox: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathBox) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathBox) -> int """
        ...

    @property
    def Diff(self) -> bool:
        """
        Get: Diff(self: OMathBox) -> bool
        Set: Diff(self: OMathBox) = value
        """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathBox) -> OMath """
        ...

    @property
    def NoBreak(self) -> bool:
        """
        Get: NoBreak(self: OMathBox) -> bool
        Set: NoBreak(self: OMathBox) = value
        """
        ...

    @property
    def OpEmu(self) -> bool:
        """
        Get: OpEmu(self: OMathBox) -> bool
        Set: OpEmu(self: OMathBox) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathBox) -> object """
        ...



class OMathBreak: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlignAt(self) -> int:
        """
        Get: AlignAt(self: OMathBreak) -> int
        Set: AlignAt(self: OMathBreak) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathBreak) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathBreak) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathBreak) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: OMathBreak) -> Range """
        ...


    def Delete(self): # -> 
        """ Delete(self: OMathBreak) """
        ...


class OMathBreaks: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathBreaks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OMathBreaks) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathBreaks) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathBreaks) -> object """
        ...


    def Add(self, Range:Range) -> OMathBreak:
        """ Add(self: OMathBreaks, Range: Range) -> OMathBreak """
        ...

    def Item(self, Index:int) -> OMathBreak:
        """ Item(self: OMathBreaks, Index: int) -> OMathBreak """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class OMathDelim: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathDelim) -> Application """
        ...

    @property
    def BegChar(self) -> Int16:
        """
        Get: BegChar(self: OMathDelim) -> Int16
        Set: BegChar(self: OMathDelim) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathDelim) -> int """
        ...

    @property
    def E(self) -> OMathArgs:
        """ Get: E(self: OMathDelim) -> OMathArgs """
        ...

    @property
    def EndChar(self) -> Int16:
        """
        Get: EndChar(self: OMathDelim) -> Int16
        Set: EndChar(self: OMathDelim) = value
        """
        ...

    @property
    def Grow(self) -> bool:
        """
        Get: Grow(self: OMathDelim) -> bool
        Set: Grow(self: OMathDelim) = value
        """
        ...

    @property
    def NoLeftChar(self) -> bool:
        """
        Get: NoLeftChar(self: OMathDelim) -> bool
        Set: NoLeftChar(self: OMathDelim) = value
        """
        ...

    @property
    def NoRightChar(self) -> bool:
        """
        Get: NoRightChar(self: OMathDelim) -> bool
        Set: NoRightChar(self: OMathDelim) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathDelim) -> object """
        ...

    @property
    def SepChar(self) -> Int16:
        """
        Get: SepChar(self: OMathDelim) -> Int16
        Set: SepChar(self: OMathDelim) = value
        """
        ...

    @property
    def Shape(self) -> WdOMathShapeType:
        """
        Get: Shape(self: OMathDelim) -> WdOMathShapeType
        Set: Shape(self: OMathDelim) = value
        """
        ...



class OMathEqArray: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Align(self) -> WdOMathVertAlignType:
        """
        Get: Align(self: OMathEqArray) -> WdOMathVertAlignType
        Set: Align(self: OMathEqArray) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathEqArray) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathEqArray) -> int """
        ...

    @property
    def E(self) -> OMathArgs:
        """ Get: E(self: OMathEqArray) -> OMathArgs """
        ...

    @property
    def MaxDist(self) -> bool:
        """
        Get: MaxDist(self: OMathEqArray) -> bool
        Set: MaxDist(self: OMathEqArray) = value
        """
        ...

    @property
    def ObjDist(self) -> bool:
        """
        Get: ObjDist(self: OMathEqArray) -> bool
        Set: ObjDist(self: OMathEqArray) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathEqArray) -> object """
        ...

    @property
    def RowSpacing(self) -> int:
        """
        Get: RowSpacing(self: OMathEqArray) -> int
        Set: RowSpacing(self: OMathEqArray) = value
        """
        ...

    @property
    def RowSpacingRule(self) -> WdOMathSpacingRule:
        """
        Get: RowSpacingRule(self: OMathEqArray) -> WdOMathSpacingRule
        Set: RowSpacingRule(self: OMathEqArray) = value
        """
        ...



class OMathFrac: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathFrac) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathFrac) -> int """
        ...

    @property
    def Den(self) -> OMath:
        """ Get: Den(self: OMathFrac) -> OMath """
        ...

    @property
    def Num(self) -> OMath:
        """ Get: Num(self: OMathFrac) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathFrac) -> object """
        ...

    @property
    def Type(self) -> WdOMathFracType:
        """
        Get: Type(self: OMathFrac) -> WdOMathFracType
        Set: Type(self: OMathFrac) = value
        """
        ...



class OMathFunc: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathFunc) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathFunc) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathFunc) -> OMath """
        ...

    @property
    def FName(self) -> OMath:
        """ Get: FName(self: OMathFunc) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathFunc) -> object """
        ...



class OMathFunction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Acc(self) -> OMathAcc:
        """ Get: Acc(self: OMathFunction) -> OMathAcc """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathFunction) -> Application """
        ...

    @property
    def Args(self) -> OMathArgs:
        """ Get: Args(self: OMathFunction) -> OMathArgs """
        ...

    @property
    def Bar(self) -> OMathBar:
        """ Get: Bar(self: OMathFunction) -> OMathBar """
        ...

    @property
    def BorderBox(self) -> OMathBorderBox:
        """ Get: BorderBox(self: OMathFunction) -> OMathBorderBox """
        ...

    @property
    def Box(self) -> OMathBox:
        """ Get: Box(self: OMathFunction) -> OMathBox """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathFunction) -> int """
        ...

    @property
    def Delim(self) -> OMathDelim:
        """ Get: Delim(self: OMathFunction) -> OMathDelim """
        ...

    @property
    def EqArray(self) -> OMathEqArray:
        """ Get: EqArray(self: OMathFunction) -> OMathEqArray """
        ...

    @property
    def Frac(self) -> OMathFrac:
        """ Get: Frac(self: OMathFunction) -> OMathFrac """
        ...

    @property
    def Func(self) -> OMathFunc:
        """ Get: Func(self: OMathFunction) -> OMathFunc """
        ...

    @property
    def GroupChar(self) -> OMathGroupChar:
        """ Get: GroupChar(self: OMathFunction) -> OMathGroupChar """
        ...

    @property
    def LimLow(self) -> OMathLimLow:
        """ Get: LimLow(self: OMathFunction) -> OMathLimLow """
        ...

    @property
    def LimUpp(self) -> OMathLimUpp:
        """ Get: LimUpp(self: OMathFunction) -> OMathLimUpp """
        ...

    @property
    def Mat(self) -> OMathMat:
        """ Get: Mat(self: OMathFunction) -> OMathMat """
        ...

    @property
    def Nary(self) -> OMathNary:
        """ Get: Nary(self: OMathFunction) -> OMathNary """
        ...

    @property
    def OMath(self) -> OMath:
        """ Get: OMath(self: OMathFunction) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathFunction) -> object """
        ...

    @property
    def Phantom(self) -> OMathPhantom:
        """ Get: Phantom(self: OMathFunction) -> OMathPhantom """
        ...

    @property
    def Rad(self) -> OMathRad:
        """ Get: Rad(self: OMathFunction) -> OMathRad """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: OMathFunction) -> Range """
        ...

    @property
    def ScrPre(self) -> OMathScrPre:
        """ Get: ScrPre(self: OMathFunction) -> OMathScrPre """
        ...

    @property
    def ScrSub(self) -> OMathScrSub:
        """ Get: ScrSub(self: OMathFunction) -> OMathScrSub """
        ...

    @property
    def ScrSubSup(self) -> OMathScrSubSup:
        """ Get: ScrSubSup(self: OMathFunction) -> OMathScrSubSup """
        ...

    @property
    def ScrSup(self) -> OMathScrSup:
        """ Get: ScrSup(self: OMathFunction) -> OMathScrSup """
        ...

    @property
    def Type(self) -> WdOMathFunctionType:
        """ Get: Type(self: OMathFunction) -> WdOMathFunctionType """
        ...


    def Remove(self) -> OMathFunction:
        """ Remove(self: OMathFunction) -> OMathFunction """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OMathFunctions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathFunctions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OMathFunctions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathFunctions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathFunctions) -> object """
        ...


    def Add(self, Range:Range, Type:WdOMathFunctionType, NumArgs:object, NumCols:object) -> Tuple_[OMathFunction, object, object]:
        """ Add(self: OMathFunctions, Range: Range, Type: WdOMathFunctionType, NumArgs: object, NumCols: object) -> (OMathFunction, object, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OMathGroupChar: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlignTop(self) -> bool:
        """
        Get: AlignTop(self: OMathGroupChar) -> bool
        Set: AlignTop(self: OMathGroupChar) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathGroupChar) -> Application """
        ...

    @property
    def Char(self) -> Int16:
        """
        Get: Char(self: OMathGroupChar) -> Int16
        Set: Char(self: OMathGroupChar) = value
        """
        ...

    @property
    def CharTop(self) -> bool:
        """
        Get: CharTop(self: OMathGroupChar) -> bool
        Set: CharTop(self: OMathGroupChar) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathGroupChar) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathGroupChar) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathGroupChar) -> object """
        ...



class OMathLimLow: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathLimLow) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathLimLow) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathLimLow) -> OMath """
        ...

    @property
    def Lim(self) -> OMath:
        """ Get: Lim(self: OMathLimLow) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathLimLow) -> object """
        ...


    def ToLimUpp(self) -> OMathFunction:
        """ ToLimUpp(self: OMathLimLow) -> OMathFunction """
        ...


class OMathLimUpp: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathLimUpp) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathLimUpp) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathLimUpp) -> OMath """
        ...

    @property
    def Lim(self) -> OMath:
        """ Get: Lim(self: OMathLimUpp) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathLimUpp) -> object """
        ...


    def ToLimLow(self) -> OMathFunction:
        """ ToLimLow(self: OMathLimUpp) -> OMathFunction """
        ...


class OMathMat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Align(self) -> WdOMathVertAlignType:
        """
        Get: Align(self: OMathMat) -> WdOMathVertAlignType
        Set: Align(self: OMathMat) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathMat) -> Application """
        ...

    @property
    def ColGap(self) -> int:
        """
        Get: ColGap(self: OMathMat) -> int
        Set: ColGap(self: OMathMat) = value
        """
        ...

    @property
    def ColGapRule(self) -> WdOMathSpacingRule:
        """
        Get: ColGapRule(self: OMathMat) -> WdOMathSpacingRule
        Set: ColGapRule(self: OMathMat) = value
        """
        ...

    @property
    def Cols(self) -> OMathMatCols:
        """ Get: Cols(self: OMathMat) -> OMathMatCols """
        ...

    @property
    def ColSpacing(self) -> int:
        """
        Get: ColSpacing(self: OMathMat) -> int
        Set: ColSpacing(self: OMathMat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathMat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathMat) -> object """
        ...

    @property
    def PlcHoldHidden(self) -> bool:
        """
        Get: PlcHoldHidden(self: OMathMat) -> bool
        Set: PlcHoldHidden(self: OMathMat) = value
        """
        ...

    @property
    def Rows(self) -> OMathMatRows:
        """ Get: Rows(self: OMathMat) -> OMathMatRows """
        ...

    @property
    def RowSpacing(self) -> int:
        """
        Get: RowSpacing(self: OMathMat) -> int
        Set: RowSpacing(self: OMathMat) = value
        """
        ...

    @property
    def RowSpacingRule(self) -> WdOMathSpacingRule:
        """
        Get: RowSpacingRule(self: OMathMat) -> WdOMathSpacingRule
        Set: RowSpacingRule(self: OMathMat) = value
        """
        ...



class OMathMatCol: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Align(self) -> WdOMathHorizAlignType:
        """
        Get: Align(self: OMathMatCol) -> WdOMathHorizAlignType
        Set: Align(self: OMathMatCol) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathMatCol) -> Application """
        ...

    @property
    def Args(self) -> OMathArgs:
        """ Get: Args(self: OMathMatCol) -> OMathArgs """
        ...

    @property
    def ColIndex(self) -> int:
        """ Get: ColIndex(self: OMathMatCol) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathMatCol) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathMatCol) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: OMathMatCol) """
        ...


class OMathMatCols(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathMatCols) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OMathMatCols) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathMatCols) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathMatCols) -> object """
        ...


    def Add(self, BeforeCol:object) -> Tuple_[OMathMatCol, object]:
        """ Add(self: OMathMatCols, BeforeCol: object) -> (OMathMatCol, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OMathMatRow: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathMatRow) -> Application """
        ...

    @property
    def Args(self) -> OMathArgs:
        """ Get: Args(self: OMathMatRow) -> OMathArgs """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathMatRow) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathMatRow) -> object """
        ...

    @property
    def RowIndex(self) -> int:
        """ Get: RowIndex(self: OMathMatRow) -> int """
        ...


    def Delete(self): # -> 
        """ Delete(self: OMathMatRow) """
        ...


class OMathMatRows(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathMatRows) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OMathMatRows) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathMatRows) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathMatRows) -> object """
        ...


    def Add(self, BeforeRow:object) -> Tuple_[OMathMatRow, object]:
        """ Add(self: OMathMatRows, BeforeRow: object) -> (OMathMatRow, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OMathNary: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathNary) -> Application """
        ...

    @property
    def Char(self) -> Int16:
        """
        Get: Char(self: OMathNary) -> Int16
        Set: Char(self: OMathNary) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathNary) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathNary) -> OMath """
        ...

    @property
    def Grow(self) -> bool:
        """
        Get: Grow(self: OMathNary) -> bool
        Set: Grow(self: OMathNary) = value
        """
        ...

    @property
    def HideSub(self) -> bool:
        """
        Get: HideSub(self: OMathNary) -> bool
        Set: HideSub(self: OMathNary) = value
        """
        ...

    @property
    def HideSup(self) -> bool:
        """
        Get: HideSup(self: OMathNary) -> bool
        Set: HideSup(self: OMathNary) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathNary) -> object """
        ...

    @property
    def Sub(self) -> OMath:
        """ Get: Sub(self: OMathNary) -> OMath """
        ...

    @property
    def SubSupLim(self) -> bool:
        """
        Get: SubSupLim(self: OMathNary) -> bool
        Set: SubSupLim(self: OMathNary) = value
        """
        ...

    @property
    def Sup(self) -> OMath:
        """ Get: Sup(self: OMathNary) -> OMath """
        ...



class OMathPhantom: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathPhantom) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathPhantom) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathPhantom) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathPhantom) -> object """
        ...

    @property
    def Show(self) -> bool:
        """
        Get: Show(self: OMathPhantom) -> bool
        Set: Show(self: OMathPhantom) = value
        """
        ...

    @property
    def Smash(self) -> bool:
        """
        Get: Smash(self: OMathPhantom) -> bool
        Set: Smash(self: OMathPhantom) = value
        """
        ...

    @property
    def Transp(self) -> bool:
        """
        Get: Transp(self: OMathPhantom) -> bool
        Set: Transp(self: OMathPhantom) = value
        """
        ...

    @property
    def ZeroAsc(self) -> bool:
        """
        Get: ZeroAsc(self: OMathPhantom) -> bool
        Set: ZeroAsc(self: OMathPhantom) = value
        """
        ...

    @property
    def ZeroDesc(self) -> bool:
        """
        Get: ZeroDesc(self: OMathPhantom) -> bool
        Set: ZeroDesc(self: OMathPhantom) = value
        """
        ...

    @property
    def ZeroWid(self) -> bool:
        """
        Get: ZeroWid(self: OMathPhantom) -> bool
        Set: ZeroWid(self: OMathPhantom) = value
        """
        ...



class OMathRad: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathRad) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathRad) -> int """
        ...

    @property
    def Deg(self) -> OMath:
        """ Get: Deg(self: OMathRad) -> OMath """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathRad) -> OMath """
        ...

    @property
    def HideDeg(self) -> bool:
        """
        Get: HideDeg(self: OMathRad) -> bool
        Set: HideDeg(self: OMathRad) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathRad) -> object """
        ...



class OMathRecognizedFunction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathRecognizedFunction) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathRecognizedFunction) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: OMathRecognizedFunction) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: OMathRecognizedFunction) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathRecognizedFunction) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: OMathRecognizedFunction) """
        ...


class OMathRecognizedFunctions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathRecognizedFunctions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OMathRecognizedFunctions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathRecognizedFunctions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathRecognizedFunctions) -> object """
        ...


    def Add(self, Name:str) -> OMathRecognizedFunction:
        """ Add(self: OMathRecognizedFunctions, Name: str) -> OMathRecognizedFunction """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OMaths(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMaths) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OMaths) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMaths) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMaths) -> object """
        ...


    def Add(self, Range:Range) -> Range:
        """ Add(self: OMaths, Range: Range) -> Range """
        ...

    def BuildUp(self): # -> 
        """ BuildUp(self: OMaths) """
        ...

    def Linearize(self): # -> 
        """ Linearize(self: OMaths) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class OMathScrPre: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathScrPre) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathScrPre) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathScrPre) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathScrPre) -> object """
        ...

    @property
    def Sub(self) -> OMath:
        """ Get: Sub(self: OMathScrPre) -> OMath """
        ...

    @property
    def Sup(self) -> OMath:
        """ Get: Sup(self: OMathScrPre) -> OMath """
        ...


    def ToScrSubSup(self) -> OMathFunction:
        """ ToScrSubSup(self: OMathScrPre) -> OMathFunction """
        ...


class OMathScrSub: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathScrSub) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathScrSub) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathScrSub) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathScrSub) -> object """
        ...

    @property
    def Sub(self) -> OMath:
        """ Get: Sub(self: OMathScrSub) -> OMath """
        ...



class OMathScrSubSup: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AlignScripts(self) -> bool:
        """
        Get: AlignScripts(self: OMathScrSubSup) -> bool
        Set: AlignScripts(self: OMathScrSubSup) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathScrSubSup) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathScrSubSup) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathScrSubSup) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathScrSubSup) -> object """
        ...

    @property
    def Sub(self) -> OMath:
        """ Get: Sub(self: OMathScrSubSup) -> OMath """
        ...

    @property
    def Sup(self) -> OMath:
        """ Get: Sup(self: OMathScrSubSup) -> OMath """
        ...


    def RemoveSub(self) -> OMathFunction:
        """ RemoveSub(self: OMathScrSubSup) -> OMathFunction """
        ...

    def RemoveSup(self) -> OMathFunction:
        """ RemoveSup(self: OMathScrSubSup) -> OMathFunction """
        ...

    def ToScrPre(self) -> OMathFunction:
        """ ToScrPre(self: OMathScrSubSup) -> OMathFunction """
        ...


class OMathScrSup: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OMathScrSup) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OMathScrSup) -> int """
        ...

    @property
    def E(self) -> OMath:
        """ Get: E(self: OMathScrSup) -> OMath """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OMathScrSup) -> object """
        ...

    @property
    def Sup(self) -> OMath:
        """ Get: Sup(self: OMathScrSup) -> OMath """
        ...



class Options: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddBiDirectionalMarksWhenSavingTextFile(self) -> bool:
        """
        Get: AddBiDirectionalMarksWhenSavingTextFile(self: Options) -> bool
        Set: AddBiDirectionalMarksWhenSavingTextFile(self: Options) = value
        """
        ...

    @property
    def AddControlCharacters(self) -> bool:
        """
        Get: AddControlCharacters(self: Options) -> bool
        Set: AddControlCharacters(self: Options) = value
        """
        ...

    @property
    def AddHebDoubleQuote(self) -> bool:
        """
        Get: AddHebDoubleQuote(self: Options) -> bool
        Set: AddHebDoubleQuote(self: Options) = value
        """
        ...

    @property
    def AlertIfNotDefault(self) -> bool:
        """
        Get: AlertIfNotDefault(self: Options) -> bool
        Set: AlertIfNotDefault(self: Options) = value
        """
        ...

    @property
    def AllowAccentedUppercase(self) -> bool:
        """
        Get: AllowAccentedUppercase(self: Options) -> bool
        Set: AllowAccentedUppercase(self: Options) = value
        """
        ...

    @property
    def AllowClickAndTypeMouse(self) -> bool:
        """
        Get: AllowClickAndTypeMouse(self: Options) -> bool
        Set: AllowClickAndTypeMouse(self: Options) = value
        """
        ...

    @property
    def AllowCombinedAuxiliaryForms(self) -> bool:
        """
        Get: AllowCombinedAuxiliaryForms(self: Options) -> bool
        Set: AllowCombinedAuxiliaryForms(self: Options) = value
        """
        ...

    @property
    def AllowCompoundNounProcessing(self) -> bool:
        """
        Get: AllowCompoundNounProcessing(self: Options) -> bool
        Set: AllowCompoundNounProcessing(self: Options) = value
        """
        ...

    @property
    def AllowDragAndDrop(self) -> bool:
        """
        Get: AllowDragAndDrop(self: Options) -> bool
        Set: AllowDragAndDrop(self: Options) = value
        """
        ...

    @property
    def AllowFastSave(self) -> bool:
        """
        Get: AllowFastSave(self: Options) -> bool
        Set: AllowFastSave(self: Options) = value
        """
        ...

    @property
    def AllowOpenInDraftView(self) -> bool:
        """
        Get: AllowOpenInDraftView(self: Options) -> bool
        Set: AllowOpenInDraftView(self: Options) = value
        """
        ...

    @property
    def AllowPixelUnits(self) -> bool:
        """
        Get: AllowPixelUnits(self: Options) -> bool
        Set: AllowPixelUnits(self: Options) = value
        """
        ...

    @property
    def AllowReadingMode(self) -> bool:
        """
        Get: AllowReadingMode(self: Options) -> bool
        Set: AllowReadingMode(self: Options) = value
        """
        ...

    @property
    def AlwaysUseClearType(self) -> bool:
        """
        Get: AlwaysUseClearType(self: Options) -> bool
        Set: AlwaysUseClearType(self: Options) = value
        """
        ...

    @property
    def AnimateScreenMovements(self) -> bool:
        """
        Get: AnimateScreenMovements(self: Options) -> bool
        Set: AnimateScreenMovements(self: Options) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Options) -> Application """
        ...

    @property
    def ApplyFarEastFontsToAscii(self) -> bool:
        """
        Get: ApplyFarEastFontsToAscii(self: Options) -> bool
        Set: ApplyFarEastFontsToAscii(self: Options) = value
        """
        ...

    @property
    def ArabicMode(self) -> WdAraSpeller:
        """
        Get: ArabicMode(self: Options) -> WdAraSpeller
        Set: ArabicMode(self: Options) = value
        """
        ...

    @property
    def ArabicNumeral(self) -> WdArabicNumeral:
        """
        Get: ArabicNumeral(self: Options) -> WdArabicNumeral
        Set: ArabicNumeral(self: Options) = value
        """
        ...

    @property
    def AutoCreateNewDrawings(self) -> bool:
        """
        Get: AutoCreateNewDrawings(self: Options) -> bool
        Set: AutoCreateNewDrawings(self: Options) = value
        """
        ...

    @property
    def AutoFormatApplyBulletedLists(self) -> bool:
        """
        Get: AutoFormatApplyBulletedLists(self: Options) -> bool
        Set: AutoFormatApplyBulletedLists(self: Options) = value
        """
        ...

    @property
    def AutoFormatApplyFirstIndents(self) -> bool:
        """
        Get: AutoFormatApplyFirstIndents(self: Options) -> bool
        Set: AutoFormatApplyFirstIndents(self: Options) = value
        """
        ...

    @property
    def AutoFormatApplyHeadings(self) -> bool:
        """
        Get: AutoFormatApplyHeadings(self: Options) -> bool
        Set: AutoFormatApplyHeadings(self: Options) = value
        """
        ...

    @property
    def AutoFormatApplyLists(self) -> bool:
        """
        Get: AutoFormatApplyLists(self: Options) -> bool
        Set: AutoFormatApplyLists(self: Options) = value
        """
        ...

    @property
    def AutoFormatApplyOtherParas(self) -> bool:
        """
        Get: AutoFormatApplyOtherParas(self: Options) -> bool
        Set: AutoFormatApplyOtherParas(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyBorders(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyBorders(self: Options) -> bool
        Set: AutoFormatAsYouTypeApplyBorders(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyBulletedLists(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyBulletedLists(self: Options) -> bool
        Set: AutoFormatAsYouTypeApplyBulletedLists(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyClosings(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyClosings(self: Options) -> bool
        Set: AutoFormatAsYouTypeApplyClosings(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyDates(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyDates(self: Options) -> bool
        Set: AutoFormatAsYouTypeApplyDates(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyFirstIndents(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyFirstIndents(self: Options) -> bool
        Set: AutoFormatAsYouTypeApplyFirstIndents(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyHeadings(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyHeadings(self: Options) -> bool
        Set: AutoFormatAsYouTypeApplyHeadings(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyNumberedLists(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyNumberedLists(self: Options) -> bool
        Set: AutoFormatAsYouTypeApplyNumberedLists(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeApplyTables(self) -> bool:
        """
        Get: AutoFormatAsYouTypeApplyTables(self: Options) -> bool
        Set: AutoFormatAsYouTypeApplyTables(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeAutoLetterWizard(self) -> bool:
        """
        Get: AutoFormatAsYouTypeAutoLetterWizard(self: Options) -> bool
        Set: AutoFormatAsYouTypeAutoLetterWizard(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeDefineStyles(self) -> bool:
        """
        Get: AutoFormatAsYouTypeDefineStyles(self: Options) -> bool
        Set: AutoFormatAsYouTypeDefineStyles(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeDeleteAutoSpaces(self) -> bool:
        """
        Get: AutoFormatAsYouTypeDeleteAutoSpaces(self: Options) -> bool
        Set: AutoFormatAsYouTypeDeleteAutoSpaces(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeFormatListItemBeginning(self) -> bool:
        """
        Get: AutoFormatAsYouTypeFormatListItemBeginning(self: Options) -> bool
        Set: AutoFormatAsYouTypeFormatListItemBeginning(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeInsertClosings(self) -> bool:
        """
        Get: AutoFormatAsYouTypeInsertClosings(self: Options) -> bool
        Set: AutoFormatAsYouTypeInsertClosings(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeInsertOvers(self) -> bool:
        """
        Get: AutoFormatAsYouTypeInsertOvers(self: Options) -> bool
        Set: AutoFormatAsYouTypeInsertOvers(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeMatchParentheses(self) -> bool:
        """
        Get: AutoFormatAsYouTypeMatchParentheses(self: Options) -> bool
        Set: AutoFormatAsYouTypeMatchParentheses(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceFarEastDashes(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceFarEastDashes(self: Options) -> bool
        Set: AutoFormatAsYouTypeReplaceFarEastDashes(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceFractions(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceFractions(self: Options) -> bool
        Set: AutoFormatAsYouTypeReplaceFractions(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceHyperlinks(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceHyperlinks(self: Options) -> bool
        Set: AutoFormatAsYouTypeReplaceHyperlinks(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceOrdinals(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceOrdinals(self: Options) -> bool
        Set: AutoFormatAsYouTypeReplaceOrdinals(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplacePlainTextEmphasis(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplacePlainTextEmphasis(self: Options) -> bool
        Set: AutoFormatAsYouTypeReplacePlainTextEmphasis(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceQuotes(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceQuotes(self: Options) -> bool
        Set: AutoFormatAsYouTypeReplaceQuotes(self: Options) = value
        """
        ...

    @property
    def AutoFormatAsYouTypeReplaceSymbols(self) -> bool:
        """
        Get: AutoFormatAsYouTypeReplaceSymbols(self: Options) -> bool
        Set: AutoFormatAsYouTypeReplaceSymbols(self: Options) = value
        """
        ...

    @property
    def AutoFormatDeleteAutoSpaces(self) -> bool:
        """
        Get: AutoFormatDeleteAutoSpaces(self: Options) -> bool
        Set: AutoFormatDeleteAutoSpaces(self: Options) = value
        """
        ...

    @property
    def AutoFormatMatchParentheses(self) -> bool:
        """
        Get: AutoFormatMatchParentheses(self: Options) -> bool
        Set: AutoFormatMatchParentheses(self: Options) = value
        """
        ...

    @property
    def AutoFormatPlainTextWordMail(self) -> bool:
        """
        Get: AutoFormatPlainTextWordMail(self: Options) -> bool
        Set: AutoFormatPlainTextWordMail(self: Options) = value
        """
        ...

    @property
    def AutoFormatPreserveStyles(self) -> bool:
        """
        Get: AutoFormatPreserveStyles(self: Options) -> bool
        Set: AutoFormatPreserveStyles(self: Options) = value
        """
        ...

    @property
    def AutoFormatReplaceFarEastDashes(self) -> bool:
        """
        Get: AutoFormatReplaceFarEastDashes(self: Options) -> bool
        Set: AutoFormatReplaceFarEastDashes(self: Options) = value
        """
        ...

    @property
    def AutoFormatReplaceFractions(self) -> bool:
        """
        Get: AutoFormatReplaceFractions(self: Options) -> bool
        Set: AutoFormatReplaceFractions(self: Options) = value
        """
        ...

    @property
    def AutoFormatReplaceHyperlinks(self) -> bool:
        """
        Get: AutoFormatReplaceHyperlinks(self: Options) -> bool
        Set: AutoFormatReplaceHyperlinks(self: Options) = value
        """
        ...

    @property
    def AutoFormatReplaceOrdinals(self) -> bool:
        """
        Get: AutoFormatReplaceOrdinals(self: Options) -> bool
        Set: AutoFormatReplaceOrdinals(self: Options) = value
        """
        ...

    @property
    def AutoFormatReplacePlainTextEmphasis(self) -> bool:
        """
        Get: AutoFormatReplacePlainTextEmphasis(self: Options) -> bool
        Set: AutoFormatReplacePlainTextEmphasis(self: Options) = value
        """
        ...

    @property
    def AutoFormatReplaceQuotes(self) -> bool:
        """
        Get: AutoFormatReplaceQuotes(self: Options) -> bool
        Set: AutoFormatReplaceQuotes(self: Options) = value
        """
        ...

    @property
    def AutoFormatReplaceSymbols(self) -> bool:
        """
        Get: AutoFormatReplaceSymbols(self: Options) -> bool
        Set: AutoFormatReplaceSymbols(self: Options) = value
        """
        ...

    @property
    def AutoKeyboardSwitching(self) -> bool:
        """
        Get: AutoKeyboardSwitching(self: Options) -> bool
        Set: AutoKeyboardSwitching(self: Options) = value
        """
        ...

    @property
    def AutoWordSelection(self) -> bool:
        """
        Get: AutoWordSelection(self: Options) -> bool
        Set: AutoWordSelection(self: Options) = value
        """
        ...

    @property
    def BackgroundOpen(self) -> bool:
        """
        Get: BackgroundOpen(self: Options) -> bool
        Set: BackgroundOpen(self: Options) = value
        """
        ...

    @property
    def BackgroundSave(self) -> bool:
        """
        Get: BackgroundSave(self: Options) -> bool
        Set: BackgroundSave(self: Options) = value
        """
        ...

    @property
    def BibliographySort(self) -> str:
        """
        Get: BibliographySort(self: Options) -> str
        Set: BibliographySort(self: Options) = value
        """
        ...

    @property
    def BibliographyStyle(self) -> str:
        """
        Get: BibliographyStyle(self: Options) -> str
        Set: BibliographyStyle(self: Options) = value
        """
        ...

    @property
    def BlueScreen(self) -> bool:
        """
        Get: BlueScreen(self: Options) -> bool
        Set: BlueScreen(self: Options) = value
        """
        ...

    @property
    def BrazilReform(self) -> WdPortugueseReform:
        """
        Get: BrazilReform(self: Options) -> WdPortugueseReform
        Set: BrazilReform(self: Options) = value
        """
        ...

    @property
    def ButtonFieldClicks(self) -> int:
        """
        Get: ButtonFieldClicks(self: Options) -> int
        Set: ButtonFieldClicks(self: Options) = value
        """
        ...

    @property
    def CheckGrammarAsYouType(self) -> bool:
        """
        Get: CheckGrammarAsYouType(self: Options) -> bool
        Set: CheckGrammarAsYouType(self: Options) = value
        """
        ...

    @property
    def CheckGrammarWithSpelling(self) -> bool:
        """
        Get: CheckGrammarWithSpelling(self: Options) -> bool
        Set: CheckGrammarWithSpelling(self: Options) = value
        """
        ...

    @property
    def CheckHangulEndings(self) -> bool:
        """
        Get: CheckHangulEndings(self: Options) -> bool
        Set: CheckHangulEndings(self: Options) = value
        """
        ...

    @property
    def CheckSpellingAsYouType(self) -> bool:
        """
        Get: CheckSpellingAsYouType(self: Options) -> bool
        Set: CheckSpellingAsYouType(self: Options) = value
        """
        ...

    @property
    def CloudSignInOption(self) -> bool:
        """
        Get: CloudSignInOption(self: Options) -> bool
        Set: CloudSignInOption(self: Options) = value
        """
        ...

    @property
    def CommentsColor(self) -> WdColorIndex:
        """
        Get: CommentsColor(self: Options) -> WdColorIndex
        Set: CommentsColor(self: Options) = value
        """
        ...

    @property
    def ConfirmConversions(self) -> bool:
        """
        Get: ConfirmConversions(self: Options) -> bool
        Set: ConfirmConversions(self: Options) = value
        """
        ...

    @property
    def ContextualSpeller(self) -> bool:
        """
        Get: ContextualSpeller(self: Options) -> bool
        Set: ContextualSpeller(self: Options) = value
        """
        ...

    @property
    def ConvertHighAnsiToFarEast(self) -> bool:
        """
        Get: ConvertHighAnsiToFarEast(self: Options) -> bool
        Set: ConvertHighAnsiToFarEast(self: Options) = value
        """
        ...

    @property
    def CreateBackup(self) -> bool:
        """
        Get: CreateBackup(self: Options) -> bool
        Set: CreateBackup(self: Options) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Options) -> int """
        ...

    @property
    def CtrlClickHyperlinkToOpen(self) -> bool:
        """
        Get: CtrlClickHyperlinkToOpen(self: Options) -> bool
        Set: CtrlClickHyperlinkToOpen(self: Options) = value
        """
        ...

    @property
    def CursorMovement(self) -> WdCursorMovement:
        """
        Get: CursorMovement(self: Options) -> WdCursorMovement
        Set: CursorMovement(self: Options) = value
        """
        ...

    @property
    def DefaultBorderColor(self) -> WdColor:
        """
        Get: DefaultBorderColor(self: Options) -> WdColor
        Set: DefaultBorderColor(self: Options) = value
        """
        ...

    @property
    def DefaultBorderColorIndex(self) -> WdColorIndex:
        """
        Get: DefaultBorderColorIndex(self: Options) -> WdColorIndex
        Set: DefaultBorderColorIndex(self: Options) = value
        """
        ...

    @property
    def DefaultBorderLineStyle(self) -> WdLineStyle:
        """
        Get: DefaultBorderLineStyle(self: Options) -> WdLineStyle
        Set: DefaultBorderLineStyle(self: Options) = value
        """
        ...

    @property
    def DefaultBorderLineWidth(self) -> WdLineWidth:
        """
        Get: DefaultBorderLineWidth(self: Options) -> WdLineWidth
        Set: DefaultBorderLineWidth(self: Options) = value
        """
        ...

    @property
    def DefaultEPostageApp(self) -> str:
        """
        Get: DefaultEPostageApp(self: Options) -> str
        Set: DefaultEPostageApp(self: Options) = value
        """
        ...

    @property
    def DefaultHighlightColorIndex(self) -> WdColorIndex:
        """
        Get: DefaultHighlightColorIndex(self: Options) -> WdColorIndex
        Set: DefaultHighlightColorIndex(self: Options) = value
        """
        ...

    @property
    def DefaultOpenFormat(self) -> WdOpenFormat:
        """
        Get: DefaultOpenFormat(self: Options) -> WdOpenFormat
        Set: DefaultOpenFormat(self: Options) = value
        """
        ...

    @property
    def DefaultTextEncoding(self): # -> MsoEncoding
        """
        Get: DefaultTextEncoding(self: Options) -> MsoEncoding
        Set: DefaultTextEncoding(self: Options) = value
        """
        ...

    @property
    def DefaultTray(self) -> str:
        """
        Get: DefaultTray(self: Options) -> str
        Set: DefaultTray(self: Options) = value
        """
        ...

    @property
    def DefaultTrayID(self) -> int:
        """
        Get: DefaultTrayID(self: Options) -> int
        Set: DefaultTrayID(self: Options) = value
        """
        ...

    @property
    def DeletedCellColor(self) -> WdCellColor:
        """
        Get: DeletedCellColor(self: Options) -> WdCellColor
        Set: DeletedCellColor(self: Options) = value
        """
        ...

    @property
    def DeletedTextColor(self) -> WdColorIndex:
        """
        Get: DeletedTextColor(self: Options) -> WdColorIndex
        Set: DeletedTextColor(self: Options) = value
        """
        ...

    @property
    def DeletedTextMark(self) -> WdDeletedTextMark:
        """
        Get: DeletedTextMark(self: Options) -> WdDeletedTextMark
        Set: DeletedTextMark(self: Options) = value
        """
        ...

    @property
    def DiacriticColorVal(self) -> WdColor:
        """
        Get: DiacriticColorVal(self: Options) -> WdColor
        Set: DiacriticColorVal(self: Options) = value
        """
        ...

    @property
    def DisableFeaturesbyDefault(self) -> bool:
        """
        Get: DisableFeaturesbyDefault(self: Options) -> bool
        Set: DisableFeaturesbyDefault(self: Options) = value
        """
        ...

    @property
    def DisableFeaturesIntroducedAfterbyDefault(self) -> WdDisableFeaturesIntroducedAfter:
        """
        Get: DisableFeaturesIntroducedAfterbyDefault(self: Options) -> WdDisableFeaturesIntroducedAfter
        Set: DisableFeaturesIntroducedAfterbyDefault(self: Options) = value
        """
        ...

    @property
    def DisplayAlignmentGuides(self) -> bool:
        """
        Get: DisplayAlignmentGuides(self: Options) -> bool
        Set: DisplayAlignmentGuides(self: Options) = value
        """
        ...

    @property
    def DisplayGridLines(self) -> bool:
        """
        Get: DisplayGridLines(self: Options) -> bool
        Set: DisplayGridLines(self: Options) = value
        """
        ...

    @property
    def DisplayPasteOptions(self) -> bool:
        """
        Get: DisplayPasteOptions(self: Options) -> bool
        Set: DisplayPasteOptions(self: Options) = value
        """
        ...

    @property
    def DisplaySmartTagButtons(self) -> bool:
        """
        Get: DisplaySmartTagButtons(self: Options) -> bool
        Set: DisplaySmartTagButtons(self: Options) = value
        """
        ...

    @property
    def DocumentViewDirection(self) -> WdDocumentViewDirection:
        """
        Get: DocumentViewDirection(self: Options) -> WdDocumentViewDirection
        Set: DocumentViewDirection(self: Options) = value
        """
        ...

    @property
    def DoNotPromptForConvert(self) -> bool:
        """
        Get: DoNotPromptForConvert(self: Options) -> bool
        Set: DoNotPromptForConvert(self: Options) = value
        """
        ...

    @property
    def EnableHangulHanjaRecentOrdering(self) -> bool:
        """
        Get: EnableHangulHanjaRecentOrdering(self: Options) -> bool
        Set: EnableHangulHanjaRecentOrdering(self: Options) = value
        """
        ...

    @property
    def EnableLegacyIMEMode(self) -> bool:
        """
        Get: EnableLegacyIMEMode(self: Options) -> bool
        Set: EnableLegacyIMEMode(self: Options) = value
        """
        ...

    @property
    def EnableLiveDrag(self) -> bool:
        """
        Get: EnableLiveDrag(self: Options) -> bool
        Set: EnableLiveDrag(self: Options) = value
        """
        ...

    @property
    def EnableLivePreview(self) -> bool:
        """
        Get: EnableLivePreview(self: Options) -> bool
        Set: EnableLivePreview(self: Options) = value
        """
        ...

    @property
    def EnableMisusedWordsDictionary(self) -> bool:
        """
        Get: EnableMisusedWordsDictionary(self: Options) -> bool
        Set: EnableMisusedWordsDictionary(self: Options) = value
        """
        ...

    @property
    def EnableProofingToolsAdvertisement(self) -> bool:
        """
        Get: EnableProofingToolsAdvertisement(self: Options) -> bool
        Set: EnableProofingToolsAdvertisement(self: Options) = value
        """
        ...

    @property
    def EnableSound(self) -> bool:
        """
        Get: EnableSound(self: Options) -> bool
        Set: EnableSound(self: Options) = value
        """
        ...

    @property
    def EnvelopeFeederInstalled(self) -> bool:
        """ Get: EnvelopeFeederInstalled(self: Options) -> bool """
        ...

    @property
    def ExpandHeadingsOnOpen(self) -> bool:
        """
        Get: ExpandHeadingsOnOpen(self: Options) -> bool
        Set: ExpandHeadingsOnOpen(self: Options) = value
        """
        ...

    @property
    def FormatScanning(self) -> bool:
        """
        Get: FormatScanning(self: Options) -> bool
        Set: FormatScanning(self: Options) = value
        """
        ...

    @property
    def FrenchReform(self) -> WdFrenchSpeller:
        """
        Get: FrenchReform(self: Options) -> WdFrenchSpeller
        Set: FrenchReform(self: Options) = value
        """
        ...

    @property
    def GridDistanceHorizontal(self) -> Single:
        """
        Get: GridDistanceHorizontal(self: Options) -> Single
        Set: GridDistanceHorizontal(self: Options) = value
        """
        ...

    @property
    def GridDistanceVertical(self) -> Single:
        """
        Get: GridDistanceVertical(self: Options) -> Single
        Set: GridDistanceVertical(self: Options) = value
        """
        ...

    @property
    def GridOriginHorizontal(self) -> Single:
        """
        Get: GridOriginHorizontal(self: Options) -> Single
        Set: GridOriginHorizontal(self: Options) = value
        """
        ...

    @property
    def GridOriginVertical(self) -> Single:
        """
        Get: GridOriginVertical(self: Options) -> Single
        Set: GridOriginVertical(self: Options) = value
        """
        ...

    @property
    def HangulHanjaFastConversion(self) -> bool:
        """
        Get: HangulHanjaFastConversion(self: Options) -> bool
        Set: HangulHanjaFastConversion(self: Options) = value
        """
        ...

    @property
    def HebrewMode(self) -> WdHebSpellStart:
        """
        Get: HebrewMode(self: Options) -> WdHebSpellStart
        Set: HebrewMode(self: Options) = value
        """
        ...

    @property
    def IgnoreInternetAndFileAddresses(self) -> bool:
        """
        Get: IgnoreInternetAndFileAddresses(self: Options) -> bool
        Set: IgnoreInternetAndFileAddresses(self: Options) = value
        """
        ...

    @property
    def IgnoreMixedDigits(self) -> bool:
        """
        Get: IgnoreMixedDigits(self: Options) -> bool
        Set: IgnoreMixedDigits(self: Options) = value
        """
        ...

    @property
    def IgnoreUppercase(self) -> bool:
        """
        Get: IgnoreUppercase(self: Options) -> bool
        Set: IgnoreUppercase(self: Options) = value
        """
        ...

    @property
    def IMEAutomaticControl(self) -> bool:
        """
        Get: IMEAutomaticControl(self: Options) -> bool
        Set: IMEAutomaticControl(self: Options) = value
        """
        ...

    @property
    def InlineConversion(self) -> bool:
        """
        Get: InlineConversion(self: Options) -> bool
        Set: InlineConversion(self: Options) = value
        """
        ...

    @property
    def InsertedCellColor(self) -> WdCellColor:
        """
        Get: InsertedCellColor(self: Options) -> WdCellColor
        Set: InsertedCellColor(self: Options) = value
        """
        ...

    @property
    def InsertedTextColor(self) -> WdColorIndex:
        """
        Get: InsertedTextColor(self: Options) -> WdColorIndex
        Set: InsertedTextColor(self: Options) = value
        """
        ...

    @property
    def InsertedTextMark(self) -> WdInsertedTextMark:
        """
        Get: InsertedTextMark(self: Options) -> WdInsertedTextMark
        Set: InsertedTextMark(self: Options) = value
        """
        ...

    @property
    def INSKeyForOvertype(self) -> bool:
        """
        Get: INSKeyForOvertype(self: Options) -> bool
        Set: INSKeyForOvertype(self: Options) = value
        """
        ...

    @property
    def INSKeyForPaste(self) -> bool:
        """
        Get: INSKeyForPaste(self: Options) -> bool
        Set: INSKeyForPaste(self: Options) = value
        """
        ...

    @property
    def InterpretHighAnsi(self) -> WdHighAnsiText:
        """
        Get: InterpretHighAnsi(self: Options) -> WdHighAnsiText
        Set: InterpretHighAnsi(self: Options) = value
        """
        ...

    @property
    def LabelSmartTags(self) -> bool:
        """
        Get: LabelSmartTags(self: Options) -> bool
        Set: LabelSmartTags(self: Options) = value
        """
        ...

    @property
    def LocalNetworkFile(self) -> bool:
        """
        Get: LocalNetworkFile(self: Options) -> bool
        Set: LocalNetworkFile(self: Options) = value
        """
        ...

    @property
    def MapPaperSize(self) -> bool:
        """
        Get: MapPaperSize(self: Options) -> bool
        Set: MapPaperSize(self: Options) = value
        """
        ...

    @property
    def MarginAlignmentGuides(self) -> bool:
        """
        Get: MarginAlignmentGuides(self: Options) -> bool
        Set: MarginAlignmentGuides(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyAY(self) -> bool:
        """
        Get: MatchFuzzyAY(self: Options) -> bool
        Set: MatchFuzzyAY(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyBV(self) -> bool:
        """
        Get: MatchFuzzyBV(self: Options) -> bool
        Set: MatchFuzzyBV(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyByte(self) -> bool:
        """
        Get: MatchFuzzyByte(self: Options) -> bool
        Set: MatchFuzzyByte(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyCase(self) -> bool:
        """
        Get: MatchFuzzyCase(self: Options) -> bool
        Set: MatchFuzzyCase(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyDash(self) -> bool:
        """
        Get: MatchFuzzyDash(self: Options) -> bool
        Set: MatchFuzzyDash(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyDZ(self) -> bool:
        """
        Get: MatchFuzzyDZ(self: Options) -> bool
        Set: MatchFuzzyDZ(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyHF(self) -> bool:
        """
        Get: MatchFuzzyHF(self: Options) -> bool
        Set: MatchFuzzyHF(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyHiragana(self) -> bool:
        """
        Get: MatchFuzzyHiragana(self: Options) -> bool
        Set: MatchFuzzyHiragana(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyIterationMark(self) -> bool:
        """
        Get: MatchFuzzyIterationMark(self: Options) -> bool
        Set: MatchFuzzyIterationMark(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyKanji(self) -> bool:
        """
        Get: MatchFuzzyKanji(self: Options) -> bool
        Set: MatchFuzzyKanji(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyKiKu(self) -> bool:
        """
        Get: MatchFuzzyKiKu(self: Options) -> bool
        Set: MatchFuzzyKiKu(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyOldKana(self) -> bool:
        """
        Get: MatchFuzzyOldKana(self: Options) -> bool
        Set: MatchFuzzyOldKana(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyProlongedSoundMark(self) -> bool:
        """
        Get: MatchFuzzyProlongedSoundMark(self: Options) -> bool
        Set: MatchFuzzyProlongedSoundMark(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyPunctuation(self) -> bool:
        """
        Get: MatchFuzzyPunctuation(self: Options) -> bool
        Set: MatchFuzzyPunctuation(self: Options) = value
        """
        ...

    @property
    def MatchFuzzySmallKana(self) -> bool:
        """
        Get: MatchFuzzySmallKana(self: Options) -> bool
        Set: MatchFuzzySmallKana(self: Options) = value
        """
        ...

    @property
    def MatchFuzzySpace(self) -> bool:
        """
        Get: MatchFuzzySpace(self: Options) -> bool
        Set: MatchFuzzySpace(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyTC(self) -> bool:
        """
        Get: MatchFuzzyTC(self: Options) -> bool
        Set: MatchFuzzyTC(self: Options) = value
        """
        ...

    @property
    def MatchFuzzyZJ(self) -> bool:
        """
        Get: MatchFuzzyZJ(self: Options) -> bool
        Set: MatchFuzzyZJ(self: Options) = value
        """
        ...

    @property
    def MeasurementUnit(self) -> WdMeasurementUnits:
        """
        Get: MeasurementUnit(self: Options) -> WdMeasurementUnits
        Set: MeasurementUnit(self: Options) = value
        """
        ...

    @property
    def MergedCellColor(self) -> WdCellColor:
        """
        Get: MergedCellColor(self: Options) -> WdCellColor
        Set: MergedCellColor(self: Options) = value
        """
        ...

    @property
    def MonthNames(self) -> WdMonthNames:
        """
        Get: MonthNames(self: Options) -> WdMonthNames
        Set: MonthNames(self: Options) = value
        """
        ...

    @property
    def MoveFromTextColor(self) -> WdColorIndex:
        """
        Get: MoveFromTextColor(self: Options) -> WdColorIndex
        Set: MoveFromTextColor(self: Options) = value
        """
        ...

    @property
    def MoveFromTextMark(self) -> WdMoveFromTextMark:
        """
        Get: MoveFromTextMark(self: Options) -> WdMoveFromTextMark
        Set: MoveFromTextMark(self: Options) = value
        """
        ...

    @property
    def MoveToTextColor(self) -> WdColorIndex:
        """
        Get: MoveToTextColor(self: Options) -> WdColorIndex
        Set: MoveToTextColor(self: Options) = value
        """
        ...

    @property
    def MoveToTextMark(self) -> WdMoveToTextMark:
        """
        Get: MoveToTextMark(self: Options) -> WdMoveToTextMark
        Set: MoveToTextMark(self: Options) = value
        """
        ...

    @property
    def MultipleWordConversionsMode(self) -> WdMultipleWordConversionsMode:
        """
        Get: MultipleWordConversionsMode(self: Options) -> WdMultipleWordConversionsMode
        Set: MultipleWordConversionsMode(self: Options) = value
        """
        ...

    @property
    def OMathAutoBuildUp(self) -> bool:
        """
        Get: OMathAutoBuildUp(self: Options) -> bool
        Set: OMathAutoBuildUp(self: Options) = value
        """
        ...

    @property
    def OMathCopyLF(self) -> bool:
        """
        Get: OMathCopyLF(self: Options) -> bool
        Set: OMathCopyLF(self: Options) = value
        """
        ...

    @property
    def OptimizeForWord97byDefault(self) -> bool:
        """
        Get: OptimizeForWord97byDefault(self: Options) -> bool
        Set: OptimizeForWord97byDefault(self: Options) = value
        """
        ...

    @property
    def Overtype(self) -> bool:
        """
        Get: Overtype(self: Options) -> bool
        Set: Overtype(self: Options) = value
        """
        ...

    @property
    def PageAlignmentGuides(self) -> bool:
        """
        Get: PageAlignmentGuides(self: Options) -> bool
        Set: PageAlignmentGuides(self: Options) = value
        """
        ...

    @property
    def Pagination(self) -> bool:
        """
        Get: Pagination(self: Options) -> bool
        Set: Pagination(self: Options) = value
        """
        ...

    @property
    def ParagraphAlignmentGuides(self) -> bool:
        """
        Get: ParagraphAlignmentGuides(self: Options) -> bool
        Set: ParagraphAlignmentGuides(self: Options) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Options) -> object """
        ...

    @property
    def PasteAdjustParagraphSpacing(self) -> bool:
        """
        Get: PasteAdjustParagraphSpacing(self: Options) -> bool
        Set: PasteAdjustParagraphSpacing(self: Options) = value
        """
        ...

    @property
    def PasteAdjustTableFormatting(self) -> bool:
        """
        Get: PasteAdjustTableFormatting(self: Options) -> bool
        Set: PasteAdjustTableFormatting(self: Options) = value
        """
        ...

    @property
    def PasteAdjustWordSpacing(self) -> bool:
        """
        Get: PasteAdjustWordSpacing(self: Options) -> bool
        Set: PasteAdjustWordSpacing(self: Options) = value
        """
        ...

    @property
    def PasteFormatBetweenDocuments(self) -> WdPasteOptions:
        """
        Get: PasteFormatBetweenDocuments(self: Options) -> WdPasteOptions
        Set: PasteFormatBetweenDocuments(self: Options) = value
        """
        ...

    @property
    def PasteFormatBetweenStyledDocuments(self) -> WdPasteOptions:
        """
        Get: PasteFormatBetweenStyledDocuments(self: Options) -> WdPasteOptions
        Set: PasteFormatBetweenStyledDocuments(self: Options) = value
        """
        ...

    @property
    def PasteFormatFromExternalSource(self) -> WdPasteOptions:
        """
        Get: PasteFormatFromExternalSource(self: Options) -> WdPasteOptions
        Set: PasteFormatFromExternalSource(self: Options) = value
        """
        ...

    @property
    def PasteFormatWithinDocument(self) -> WdPasteOptions:
        """
        Get: PasteFormatWithinDocument(self: Options) -> WdPasteOptions
        Set: PasteFormatWithinDocument(self: Options) = value
        """
        ...

    @property
    def PasteMergeFromPPT(self) -> bool:
        """
        Get: PasteMergeFromPPT(self: Options) -> bool
        Set: PasteMergeFromPPT(self: Options) = value
        """
        ...

    @property
    def PasteMergeFromXL(self) -> bool:
        """
        Get: PasteMergeFromXL(self: Options) -> bool
        Set: PasteMergeFromXL(self: Options) = value
        """
        ...

    @property
    def PasteMergeLists(self) -> bool:
        """
        Get: PasteMergeLists(self: Options) -> bool
        Set: PasteMergeLists(self: Options) = value
        """
        ...

    @property
    def PasteOptionKeepBulletsAndNumbers(self) -> bool:
        """
        Get: PasteOptionKeepBulletsAndNumbers(self: Options) -> bool
        Set: PasteOptionKeepBulletsAndNumbers(self: Options) = value
        """
        ...

    @property
    def PasteSmartCutPaste(self) -> bool:
        """
        Get: PasteSmartCutPaste(self: Options) -> bool
        Set: PasteSmartCutPaste(self: Options) = value
        """
        ...

    @property
    def PasteSmartStyleBehavior(self) -> bool:
        """
        Get: PasteSmartStyleBehavior(self: Options) -> bool
        Set: PasteSmartStyleBehavior(self: Options) = value
        """
        ...

    @property
    def PictureEditor(self) -> str:
        """
        Get: PictureEditor(self: Options) -> str
        Set: PictureEditor(self: Options) = value
        """
        ...

    @property
    def PictureWrapType(self) -> WdWrapTypeMerged:
        """
        Get: PictureWrapType(self: Options) -> WdWrapTypeMerged
        Set: PictureWrapType(self: Options) = value
        """
        ...

    @property
    def PortugalReform(self) -> WdPortugueseReform:
        """
        Get: PortugalReform(self: Options) -> WdPortugueseReform
        Set: PortugalReform(self: Options) = value
        """
        ...

    @property
    def PrecisePositioning(self) -> bool:
        """
        Get: PrecisePositioning(self: Options) -> bool
        Set: PrecisePositioning(self: Options) = value
        """
        ...

    @property
    def PreferCloudSaveLocations(self) -> bool:
        """
        Get: PreferCloudSaveLocations(self: Options) -> bool
        Set: PreferCloudSaveLocations(self: Options) = value
        """
        ...

    @property
    def PrintBackground(self) -> bool:
        """
        Get: PrintBackground(self: Options) -> bool
        Set: PrintBackground(self: Options) = value
        """
        ...

    @property
    def PrintBackgrounds(self) -> bool:
        """
        Get: PrintBackgrounds(self: Options) -> bool
        Set: PrintBackgrounds(self: Options) = value
        """
        ...

    @property
    def PrintComments(self) -> bool:
        """
        Get: PrintComments(self: Options) -> bool
        Set: PrintComments(self: Options) = value
        """
        ...

    @property
    def PrintDraft(self) -> bool:
        """
        Get: PrintDraft(self: Options) -> bool
        Set: PrintDraft(self: Options) = value
        """
        ...

    @property
    def PrintDrawingObjects(self) -> bool:
        """
        Get: PrintDrawingObjects(self: Options) -> bool
        Set: PrintDrawingObjects(self: Options) = value
        """
        ...

    @property
    def PrintEvenPagesInAscendingOrder(self) -> bool:
        """
        Get: PrintEvenPagesInAscendingOrder(self: Options) -> bool
        Set: PrintEvenPagesInAscendingOrder(self: Options) = value
        """
        ...

    @property
    def PrintFieldCodes(self) -> bool:
        """
        Get: PrintFieldCodes(self: Options) -> bool
        Set: PrintFieldCodes(self: Options) = value
        """
        ...

    @property
    def PrintHiddenText(self) -> bool:
        """
        Get: PrintHiddenText(self: Options) -> bool
        Set: PrintHiddenText(self: Options) = value
        """
        ...

    @property
    def PrintOddPagesInAscendingOrder(self) -> bool:
        """
        Get: PrintOddPagesInAscendingOrder(self: Options) -> bool
        Set: PrintOddPagesInAscendingOrder(self: Options) = value
        """
        ...

    @property
    def PrintProperties(self) -> bool:
        """
        Get: PrintProperties(self: Options) -> bool
        Set: PrintProperties(self: Options) = value
        """
        ...

    @property
    def PrintReverse(self) -> bool:
        """
        Get: PrintReverse(self: Options) -> bool
        Set: PrintReverse(self: Options) = value
        """
        ...

    @property
    def PrintXMLTag(self) -> bool:
        """
        Get: PrintXMLTag(self: Options) -> bool
        Set: PrintXMLTag(self: Options) = value
        """
        ...

    @property
    def PromptUpdateStyle(self) -> bool:
        """
        Get: PromptUpdateStyle(self: Options) -> bool
        Set: PromptUpdateStyle(self: Options) = value
        """
        ...

    @property
    def RepeatWord(self) -> bool:
        """
        Get: RepeatWord(self: Options) -> bool
        Set: RepeatWord(self: Options) = value
        """
        ...

    @property
    def ReplaceSelection(self) -> bool:
        """
        Get: ReplaceSelection(self: Options) -> bool
        Set: ReplaceSelection(self: Options) = value
        """
        ...

    @property
    def RevisedLinesColor(self) -> WdColorIndex:
        """
        Get: RevisedLinesColor(self: Options) -> WdColorIndex
        Set: RevisedLinesColor(self: Options) = value
        """
        ...

    @property
    def RevisedLinesMark(self) -> WdRevisedLinesMark:
        """
        Get: RevisedLinesMark(self: Options) -> WdRevisedLinesMark
        Set: RevisedLinesMark(self: Options) = value
        """
        ...

    @property
    def RevisedPropertiesColor(self) -> WdColorIndex:
        """
        Get: RevisedPropertiesColor(self: Options) -> WdColorIndex
        Set: RevisedPropertiesColor(self: Options) = value
        """
        ...

    @property
    def RevisedPropertiesMark(self) -> WdRevisedPropertiesMark:
        """
        Get: RevisedPropertiesMark(self: Options) -> WdRevisedPropertiesMark
        Set: RevisedPropertiesMark(self: Options) = value
        """
        ...

    @property
    def RevisionsBalloonPrintOrientation(self) -> WdRevisionsBalloonPrintOrientation:
        """
        Get: RevisionsBalloonPrintOrientation(self: Options) -> WdRevisionsBalloonPrintOrientation
        Set: RevisionsBalloonPrintOrientation(self: Options) = value
        """
        ...

    @property
    def RTFInClipboard(self) -> bool:
        """
        Get: RTFInClipboard(self: Options) -> bool
        Set: RTFInClipboard(self: Options) = value
        """
        ...

    @property
    def SaveInterval(self) -> int:
        """
        Get: SaveInterval(self: Options) -> int
        Set: SaveInterval(self: Options) = value
        """
        ...

    @property
    def SaveNormalPrompt(self) -> bool:
        """
        Get: SaveNormalPrompt(self: Options) -> bool
        Set: SaveNormalPrompt(self: Options) = value
        """
        ...

    @property
    def SavePropertiesPrompt(self) -> bool:
        """
        Get: SavePropertiesPrompt(self: Options) -> bool
        Set: SavePropertiesPrompt(self: Options) = value
        """
        ...

    @property
    def SendMailAttach(self) -> bool:
        """
        Get: SendMailAttach(self: Options) -> bool
        Set: SendMailAttach(self: Options) = value
        """
        ...

    @property
    def SequenceCheck(self) -> bool:
        """
        Get: SequenceCheck(self: Options) -> bool
        Set: SequenceCheck(self: Options) = value
        """
        ...

    @property
    def ShortMenuNames(self) -> bool:
        """
        Get: ShortMenuNames(self: Options) -> bool
        Set: ShortMenuNames(self: Options) = value
        """
        ...

    @property
    def ShowControlCharacters(self) -> bool:
        """
        Get: ShowControlCharacters(self: Options) -> bool
        Set: ShowControlCharacters(self: Options) = value
        """
        ...

    @property
    def ShowDevTools(self) -> bool:
        """
        Get: ShowDevTools(self: Options) -> bool
        Set: ShowDevTools(self: Options) = value
        """
        ...

    @property
    def ShowDiacritics(self) -> bool:
        """
        Get: ShowDiacritics(self: Options) -> bool
        Set: ShowDiacritics(self: Options) = value
        """
        ...

    @property
    def ShowFormatError(self) -> bool:
        """
        Get: ShowFormatError(self: Options) -> bool
        Set: ShowFormatError(self: Options) = value
        """
        ...

    @property
    def ShowMarkupOpenSave(self) -> bool:
        """
        Get: ShowMarkupOpenSave(self: Options) -> bool
        Set: ShowMarkupOpenSave(self: Options) = value
        """
        ...

    @property
    def ShowMenuFloaties(self) -> bool:
        """
        Get: ShowMenuFloaties(self: Options) -> bool
        Set: ShowMenuFloaties(self: Options) = value
        """
        ...

    @property
    def ShowReadabilityStatistics(self) -> bool:
        """
        Get: ShowReadabilityStatistics(self: Options) -> bool
        Set: ShowReadabilityStatistics(self: Options) = value
        """
        ...

    @property
    def ShowSelectionFloaties(self) -> bool:
        """
        Get: ShowSelectionFloaties(self: Options) -> bool
        Set: ShowSelectionFloaties(self: Options) = value
        """
        ...

    @property
    def SkyDriveSignInOption(self) -> bool:
        """
        Get: SkyDriveSignInOption(self: Options) -> bool
        Set: SkyDriveSignInOption(self: Options) = value
        """
        ...

    @property
    def SmartCursoring(self) -> bool:
        """
        Get: SmartCursoring(self: Options) -> bool
        Set: SmartCursoring(self: Options) = value
        """
        ...

    @property
    def SmartCutPaste(self) -> bool:
        """
        Get: SmartCutPaste(self: Options) -> bool
        Set: SmartCutPaste(self: Options) = value
        """
        ...

    @property
    def SmartParaSelection(self) -> bool:
        """
        Get: SmartParaSelection(self: Options) -> bool
        Set: SmartParaSelection(self: Options) = value
        """
        ...

    @property
    def SnapToGrid(self) -> bool:
        """
        Get: SnapToGrid(self: Options) -> bool
        Set: SnapToGrid(self: Options) = value
        """
        ...

    @property
    def SnapToShapes(self) -> bool:
        """
        Get: SnapToShapes(self: Options) -> bool
        Set: SnapToShapes(self: Options) = value
        """
        ...

    @property
    def SpanishMode(self) -> WdSpanishSpeller:
        """
        Get: SpanishMode(self: Options) -> WdSpanishSpeller
        Set: SpanishMode(self: Options) = value
        """
        ...

    @property
    def SplitCellColor(self) -> WdCellColor:
        """
        Get: SplitCellColor(self: Options) -> WdCellColor
        Set: SplitCellColor(self: Options) = value
        """
        ...

    @property
    def StoreRSIDOnSave(self) -> bool:
        """
        Get: StoreRSIDOnSave(self: Options) -> bool
        Set: StoreRSIDOnSave(self: Options) = value
        """
        ...

    @property
    def StrictFinalYaa(self) -> bool:
        """
        Get: StrictFinalYaa(self: Options) -> bool
        Set: StrictFinalYaa(self: Options) = value
        """
        ...

    @property
    def StrictInitialAlefHamza(self) -> bool:
        """
        Get: StrictInitialAlefHamza(self: Options) -> bool
        Set: StrictInitialAlefHamza(self: Options) = value
        """
        ...

    @property
    def StrictRussianE(self) -> bool:
        """
        Get: StrictRussianE(self: Options) -> bool
        Set: StrictRussianE(self: Options) = value
        """
        ...

    @property
    def StrictTaaMarboota(self) -> bool:
        """
        Get: StrictTaaMarboota(self: Options) -> bool
        Set: StrictTaaMarboota(self: Options) = value
        """
        ...

    @property
    def SuggestFromMainDictionaryOnly(self) -> bool:
        """
        Get: SuggestFromMainDictionaryOnly(self: Options) -> bool
        Set: SuggestFromMainDictionaryOnly(self: Options) = value
        """
        ...

    @property
    def SuggestSpellingCorrections(self) -> bool:
        """
        Get: SuggestSpellingCorrections(self: Options) -> bool
        Set: SuggestSpellingCorrections(self: Options) = value
        """
        ...

    @property
    def TabIndentKey(self) -> bool:
        """
        Get: TabIndentKey(self: Options) -> bool
        Set: TabIndentKey(self: Options) = value
        """
        ...

    @property
    def TypeNReplace(self) -> bool:
        """
        Get: TypeNReplace(self: Options) -> bool
        Set: TypeNReplace(self: Options) = value
        """
        ...

    @property
    def UpdateFieldsAtPrint(self) -> bool:
        """
        Get: UpdateFieldsAtPrint(self: Options) -> bool
        Set: UpdateFieldsAtPrint(self: Options) = value
        """
        ...

    @property
    def UpdateFieldsWithTrackedChangesAtPrint(self) -> bool:
        """
        Get: UpdateFieldsWithTrackedChangesAtPrint(self: Options) -> bool
        Set: UpdateFieldsWithTrackedChangesAtPrint(self: Options) = value
        """
        ...

    @property
    def UpdateLinksAtOpen(self) -> bool:
        """
        Get: UpdateLinksAtOpen(self: Options) -> bool
        Set: UpdateLinksAtOpen(self: Options) = value
        """
        ...

    @property
    def UpdateLinksAtPrint(self) -> bool:
        """
        Get: UpdateLinksAtPrint(self: Options) -> bool
        Set: UpdateLinksAtPrint(self: Options) = value
        """
        ...

    @property
    def UpdateStyleListBehavior(self) -> WdUpdateStyleListBehavior:
        """
        Get: UpdateStyleListBehavior(self: Options) -> WdUpdateStyleListBehavior
        Set: UpdateStyleListBehavior(self: Options) = value
        """
        ...

    @property
    def UseCharacterUnit(self) -> bool:
        """
        Get: UseCharacterUnit(self: Options) -> bool
        Set: UseCharacterUnit(self: Options) = value
        """
        ...

    @property
    def UseDiffDiacColor(self) -> bool:
        """
        Get: UseDiffDiacColor(self: Options) -> bool
        Set: UseDiffDiacColor(self: Options) = value
        """
        ...

    @property
    def UseGermanSpellingReform(self) -> bool:
        """
        Get: UseGermanSpellingReform(self: Options) -> bool
        Set: UseGermanSpellingReform(self: Options) = value
        """
        ...

    @property
    def UseLocalUserInfo(self) -> bool:
        """
        Get: UseLocalUserInfo(self: Options) -> bool
        Set: UseLocalUserInfo(self: Options) = value
        """
        ...

    @property
    def UseNormalStyleForList(self) -> bool:
        """
        Get: UseNormalStyleForList(self: Options) -> bool
        Set: UseNormalStyleForList(self: Options) = value
        """
        ...

    @property
    def UseSubPixelPositioning(self) -> bool:
        """
        Get: UseSubPixelPositioning(self: Options) -> bool
        Set: UseSubPixelPositioning(self: Options) = value
        """
        ...

    @property
    def VirusProtection(self) -> bool:
        """
        Get: VirusProtection(self: Options) -> bool
        Set: VirusProtection(self: Options) = value
        """
        ...

    @property
    def VisualSelection(self) -> WdVisualSelection:
        """
        Get: VisualSelection(self: Options) -> WdVisualSelection
        Set: VisualSelection(self: Options) = value
        """
        ...

    @property
    def WarnBeforeSavingPrintingSendingMarkup(self) -> bool:
        """
        Get: WarnBeforeSavingPrintingSendingMarkup(self: Options) -> bool
        Set: WarnBeforeSavingPrintingSendingMarkup(self: Options) = value
        """
        ...

    @property
    def WPDocNavKeys(self) -> bool:
        """
        Get: WPDocNavKeys(self: Options) -> bool
        Set: WPDocNavKeys(self: Options) = value
        """
        ...

    @property
    def WPHelp(self) -> bool:
        """
        Get: WPHelp(self: Options) -> bool
        Set: WPHelp(self: Options) = value
        """
        ...


    def SetWPHelpOptions(self, CommandKeyHelp:object, DocNavigationKeys:object, MouseSimulation:object, DemoGuidance:object, DemoSpeed:object, HelpType:object) -> Tuple_[object, object, object, object, object, object]:
        """ SetWPHelpOptions(self: Options, CommandKeyHelp: object, DocNavigationKeys: object, MouseSimulation: object, DemoGuidance: object, DemoSpeed: object, HelpType: object) -> (object, object, object, object, object, object) """
        ...


class OtherCorrectionsException: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OtherCorrectionsException) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OtherCorrectionsException) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: OtherCorrectionsException) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: OtherCorrectionsException) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OtherCorrectionsException) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: OtherCorrectionsException) """
        ...


class OtherCorrectionsExceptions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: OtherCorrectionsExceptions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: OtherCorrectionsExceptions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: OtherCorrectionsExceptions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: OtherCorrectionsExceptions) -> object """
        ...


    def Add(self, Name:str) -> OtherCorrectionsException:
        """ Add(self: OtherCorrectionsExceptions, Name: str) -> OtherCorrectionsException """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Page: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Page) -> Application """
        ...

    @property
    def Breaks(self) -> Breaks:
        """ Get: Breaks(self: Page) -> Breaks """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Page) -> int """
        ...

    @property
    def EnhMetaFileBits(self) -> object:
        """ Get: EnhMetaFileBits(self: Page) -> object """
        ...

    @property
    def Height(self) -> int:
        """ Get: Height(self: Page) -> int """
        ...

    @property
    def Left(self) -> int:
        """ Get: Left(self: Page) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Page) -> object """
        ...

    @property
    def Rectangles(self) -> Rectangles:
        """ Get: Rectangles(self: Page) -> Rectangles """
        ...

    @property
    def Top(self) -> int:
        """ Get: Top(self: Page) -> int """
        ...

    @property
    def Width(self) -> int:
        """ Get: Width(self: Page) -> int """
        ...


    def SaveAsPNG(self, FileName:str): # -> 
        """ SaveAsPNG(self: Page, FileName: str) """
        ...


class PageNumber: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> WdPageNumberAlignment:
        """
        Get: Alignment(self: PageNumber) -> WdPageNumberAlignment
        Set: Alignment(self: PageNumber) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: PageNumber) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: PageNumber) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: PageNumber) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PageNumber) -> object """
        ...


    def Copy(self): # -> 
        """ Copy(self: PageNumber) """
        ...

    def Cut(self): # -> 
        """ Cut(self: PageNumber) """
        ...

    def Delete(self): # -> 
        """ Delete(self: PageNumber) """
        ...

    def Select(self): # -> 
        """ Select(self: PageNumber) """
        ...


class PageNumbers(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PageNumbers) -> Application """
        ...

    @property
    def ChapterPageSeparator(self) -> WdSeparatorType:
        """
        Get: ChapterPageSeparator(self: PageNumbers) -> WdSeparatorType
        Set: ChapterPageSeparator(self: PageNumbers) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: PageNumbers) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: PageNumbers) -> int """
        ...

    @property
    def DoubleQuote(self) -> bool:
        """
        Get: DoubleQuote(self: PageNumbers) -> bool
        Set: DoubleQuote(self: PageNumbers) = value
        """
        ...

    @property
    def HeadingLevelForChapter(self) -> int:
        """
        Get: HeadingLevelForChapter(self: PageNumbers) -> int
        Set: HeadingLevelForChapter(self: PageNumbers) = value
        """
        ...

    @property
    def IncludeChapterNumber(self) -> bool:
        """
        Get: IncludeChapterNumber(self: PageNumbers) -> bool
        Set: IncludeChapterNumber(self: PageNumbers) = value
        """
        ...

    @property
    def NumberStyle(self) -> WdPageNumberStyle:
        """
        Get: NumberStyle(self: PageNumbers) -> WdPageNumberStyle
        Set: NumberStyle(self: PageNumbers) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PageNumbers) -> object """
        ...

    @property
    def RestartNumberingAtSection(self) -> bool:
        """
        Get: RestartNumberingAtSection(self: PageNumbers) -> bool
        Set: RestartNumberingAtSection(self: PageNumbers) = value
        """
        ...

    @property
    def ShowFirstPageNumber(self) -> bool:
        """
        Get: ShowFirstPageNumber(self: PageNumbers) -> bool
        Set: ShowFirstPageNumber(self: PageNumbers) = value
        """
        ...

    @property
    def StartingNumber(self) -> int:
        """
        Get: StartingNumber(self: PageNumbers) -> int
        Set: StartingNumber(self: PageNumbers) = value
        """
        ...


    def Add(self, PageNumberAlignment:object, FirstPage:object) -> Tuple_[PageNumber, object, object]:
        """ Add(self: PageNumbers, PageNumberAlignment: object, FirstPage: object) -> (PageNumber, object, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Pages(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Pages) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Pages) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Pages) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Pages) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class PageSetup: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PageSetup) -> Application """
        ...

    @property
    def BookFoldPrinting(self) -> bool:
        """
        Get: BookFoldPrinting(self: PageSetup) -> bool
        Set: BookFoldPrinting(self: PageSetup) = value
        """
        ...

    @property
    def BookFoldPrintingSheets(self) -> int:
        """
        Get: BookFoldPrintingSheets(self: PageSetup) -> int
        Set: BookFoldPrintingSheets(self: PageSetup) = value
        """
        ...

    @property
    def BookFoldRevPrinting(self) -> bool:
        """
        Get: BookFoldRevPrinting(self: PageSetup) -> bool
        Set: BookFoldRevPrinting(self: PageSetup) = value
        """
        ...

    @property
    def BottomMargin(self) -> Single:
        """
        Get: BottomMargin(self: PageSetup) -> Single
        Set: BottomMargin(self: PageSetup) = value
        """
        ...

    @property
    def CharsLine(self) -> Single:
        """
        Get: CharsLine(self: PageSetup) -> Single
        Set: CharsLine(self: PageSetup) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: PageSetup) -> int """
        ...

    @property
    def DifferentFirstPageHeaderFooter(self) -> int:
        """
        Get: DifferentFirstPageHeaderFooter(self: PageSetup) -> int
        Set: DifferentFirstPageHeaderFooter(self: PageSetup) = value
        """
        ...

    @property
    def FirstPageTray(self) -> WdPaperTray:
        """
        Get: FirstPageTray(self: PageSetup) -> WdPaperTray
        Set: FirstPageTray(self: PageSetup) = value
        """
        ...

    @property
    def FooterDistance(self) -> Single:
        """
        Get: FooterDistance(self: PageSetup) -> Single
        Set: FooterDistance(self: PageSetup) = value
        """
        ...

    @property
    def Gutter(self) -> Single:
        """
        Get: Gutter(self: PageSetup) -> Single
        Set: Gutter(self: PageSetup) = value
        """
        ...

    @property
    def GutterOnTop(self) -> bool:
        """
        Get: GutterOnTop(self: PageSetup) -> bool
        Set: GutterOnTop(self: PageSetup) = value
        """
        ...

    @property
    def GutterPos(self) -> WdGutterStyle:
        """
        Get: GutterPos(self: PageSetup) -> WdGutterStyle
        Set: GutterPos(self: PageSetup) = value
        """
        ...

    @property
    def GutterStyle(self) -> WdGutterStyleOld:
        """
        Get: GutterStyle(self: PageSetup) -> WdGutterStyleOld
        Set: GutterStyle(self: PageSetup) = value
        """
        ...

    @property
    def HeaderDistance(self) -> Single:
        """
        Get: HeaderDistance(self: PageSetup) -> Single
        Set: HeaderDistance(self: PageSetup) = value
        """
        ...

    @property
    def LayoutMode(self) -> WdLayoutMode:
        """
        Get: LayoutMode(self: PageSetup) -> WdLayoutMode
        Set: LayoutMode(self: PageSetup) = value
        """
        ...

    @property
    def LeftMargin(self) -> Single:
        """
        Get: LeftMargin(self: PageSetup) -> Single
        Set: LeftMargin(self: PageSetup) = value
        """
        ...

    @property
    def LineNumbering(self) -> LineNumbering:
        """
        Get: LineNumbering(self: PageSetup) -> LineNumbering
        Set: LineNumbering(self: PageSetup) = value
        """
        ...

    @property
    def LinesPage(self) -> Single:
        """
        Get: LinesPage(self: PageSetup) -> Single
        Set: LinesPage(self: PageSetup) = value
        """
        ...

    @property
    def MirrorMargins(self) -> int:
        """
        Get: MirrorMargins(self: PageSetup) -> int
        Set: MirrorMargins(self: PageSetup) = value
        """
        ...

    @property
    def OddAndEvenPagesHeaderFooter(self) -> int:
        """
        Get: OddAndEvenPagesHeaderFooter(self: PageSetup) -> int
        Set: OddAndEvenPagesHeaderFooter(self: PageSetup) = value
        """
        ...

    @property
    def Orientation(self) -> WdOrientation:
        """
        Get: Orientation(self: PageSetup) -> WdOrientation
        Set: Orientation(self: PageSetup) = value
        """
        ...

    @property
    def OtherPagesTray(self) -> WdPaperTray:
        """
        Get: OtherPagesTray(self: PageSetup) -> WdPaperTray
        Set: OtherPagesTray(self: PageSetup) = value
        """
        ...

    @property
    def PageHeight(self) -> Single:
        """
        Get: PageHeight(self: PageSetup) -> Single
        Set: PageHeight(self: PageSetup) = value
        """
        ...

    @property
    def PageWidth(self) -> Single:
        """
        Get: PageWidth(self: PageSetup) -> Single
        Set: PageWidth(self: PageSetup) = value
        """
        ...

    @property
    def PaperSize(self) -> WdPaperSize:
        """
        Get: PaperSize(self: PageSetup) -> WdPaperSize
        Set: PaperSize(self: PageSetup) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PageSetup) -> object """
        ...

    @property
    def RightMargin(self) -> Single:
        """
        Get: RightMargin(self: PageSetup) -> Single
        Set: RightMargin(self: PageSetup) = value
        """
        ...

    @property
    def SectionDirection(self) -> WdSectionDirection:
        """
        Get: SectionDirection(self: PageSetup) -> WdSectionDirection
        Set: SectionDirection(self: PageSetup) = value
        """
        ...

    @property
    def SectionStart(self) -> WdSectionStart:
        """
        Get: SectionStart(self: PageSetup) -> WdSectionStart
        Set: SectionStart(self: PageSetup) = value
        """
        ...

    @property
    def ShowGrid(self) -> bool:
        """
        Get: ShowGrid(self: PageSetup) -> bool
        Set: ShowGrid(self: PageSetup) = value
        """
        ...

    @property
    def SuppressEndnotes(self) -> int:
        """
        Get: SuppressEndnotes(self: PageSetup) -> int
        Set: SuppressEndnotes(self: PageSetup) = value
        """
        ...

    @property
    def TextColumns(self) -> TextColumns:
        """
        Get: TextColumns(self: PageSetup) -> TextColumns
        Set: TextColumns(self: PageSetup) = value
        """
        ...

    @property
    def TopMargin(self) -> Single:
        """
        Get: TopMargin(self: PageSetup) -> Single
        Set: TopMargin(self: PageSetup) = value
        """
        ...

    @property
    def TwoPagesOnOne(self) -> bool:
        """
        Get: TwoPagesOnOne(self: PageSetup) -> bool
        Set: TwoPagesOnOne(self: PageSetup) = value
        """
        ...

    @property
    def VerticalAlignment(self) -> WdVerticalAlignment:
        """
        Get: VerticalAlignment(self: PageSetup) -> WdVerticalAlignment
        Set: VerticalAlignment(self: PageSetup) = value
        """
        ...


    def SetAsTemplateDefault(self): # -> 
        """ SetAsTemplateDefault(self: PageSetup) """
        ...

    def TogglePortrait(self): # -> 
        """ TogglePortrait(self: PageSetup) """
        ...


class Pane: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Pane) -> Application """
        ...

    @property
    def BrowseToWindow(self) -> bool:
        """
        Get: BrowseToWindow(self: Pane) -> bool
        Set: BrowseToWindow(self: Pane) = value
        """
        ...

    @property
    def BrowseWidth(self) -> int:
        """ Get: BrowseWidth(self: Pane) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Pane) -> int """
        ...

    @property
    def DisplayRulers(self) -> bool:
        """
        Get: DisplayRulers(self: Pane) -> bool
        Set: DisplayRulers(self: Pane) = value
        """
        ...

    @property
    def DisplayVerticalRuler(self) -> bool:
        """
        Get: DisplayVerticalRuler(self: Pane) -> bool
        Set: DisplayVerticalRuler(self: Pane) = value
        """
        ...

    @property
    def Document(self) -> Document:
        """ Get: Document(self: Pane) -> Document """
        ...

    @property
    def Frameset(self) -> Frameset:
        """ Get: Frameset(self: Pane) -> Frameset """
        ...

    @property
    def HorizontalPercentScrolled(self) -> int:
        """
        Get: HorizontalPercentScrolled(self: Pane) -> int
        Set: HorizontalPercentScrolled(self: Pane) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Pane) -> int """
        ...

    @property
    def MinimumFontSize(self) -> int:
        """
        Get: MinimumFontSize(self: Pane) -> int
        Set: MinimumFontSize(self: Pane) = value
        """
        ...

    @property
    def Next(self) -> Pane:
        """ Get: Next(self: Pane) -> Pane """
        ...

    @property
    def Pages(self) -> Pages:
        """ Get: Pages(self: Pane) -> Pages """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Pane) -> object """
        ...

    @property
    def Previous(self) -> Pane:
        """ Get: Previous(self: Pane) -> Pane """
        ...

    @property
    def Selection(self) -> Selection:
        """ Get: Selection(self: Pane) -> Selection """
        ...

    @property
    def VerticalPercentScrolled(self) -> int:
        """
        Get: VerticalPercentScrolled(self: Pane) -> int
        Set: VerticalPercentScrolled(self: Pane) = value
        """
        ...

    @property
    def View(self) -> View:
        """ Get: View(self: Pane) -> View """
        ...

    @property
    def Zooms(self) -> Zooms:
        """ Get: Zooms(self: Pane) -> Zooms """
        ...


    def Activate(self): # -> 
        """ Activate(self: Pane) """
        ...

    def AutoScroll(self, Velocity:int): # -> 
        """ AutoScroll(self: Pane, Velocity: int) """
        ...

    def Close(self): # -> 
        """ Close(self: Pane) """
        ...

    def LargeScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> Tuple_[object, object, object, object]:
        """ LargeScroll(self: Pane, Down: object, Up: object, ToRight: object, ToLeft: object) -> (object, object, object, object) """
        ...

    def NewFrameset(self): # -> 
        """ NewFrameset(self: Pane) """
        ...

    def PageScroll(self, Down:object, Up:object) -> Tuple_[object, object]:
        """ PageScroll(self: Pane, Down: object, Up: object) -> (object, object) """
        ...

    def SmallScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> Tuple_[object, object, object, object]:
        """ SmallScroll(self: Pane, Down: object, Up: object, ToRight: object, ToLeft: object) -> (object, object, object, object) """
        ...

    def TOCInFrameset(self): # -> 
        """ TOCInFrameset(self: Pane) """
        ...


class Panes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Panes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Panes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Panes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Panes) -> object """
        ...


    def Add(self, SplitVertical:object) -> Tuple_[Pane, object]:
        """ Add(self: Panes, SplitVertical: object) -> (Pane, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Paragraph: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddSpaceBetweenFarEastAndAlpha(self) -> int:
        """
        Get: AddSpaceBetweenFarEastAndAlpha(self: Paragraph) -> int
        Set: AddSpaceBetweenFarEastAndAlpha(self: Paragraph) = value
        """
        ...

    @property
    def AddSpaceBetweenFarEastAndDigit(self) -> int:
        """
        Get: AddSpaceBetweenFarEastAndDigit(self: Paragraph) -> int
        Set: AddSpaceBetweenFarEastAndDigit(self: Paragraph) = value
        """
        ...

    @property
    def Alignment(self) -> WdParagraphAlignment:
        """
        Get: Alignment(self: Paragraph) -> WdParagraphAlignment
        Set: Alignment(self: Paragraph) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Paragraph) -> Application """
        ...

    @property
    def AutoAdjustRightIndent(self) -> int:
        """
        Get: AutoAdjustRightIndent(self: Paragraph) -> int
        Set: AutoAdjustRightIndent(self: Paragraph) = value
        """
        ...

    @property
    def BaseLineAlignment(self) -> WdBaselineAlignment:
        """
        Get: BaseLineAlignment(self: Paragraph) -> WdBaselineAlignment
        Set: BaseLineAlignment(self: Paragraph) = value
        """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Paragraph) -> Borders
        Set: Borders(self: Paragraph) = value
        """
        ...

    @property
    def CharacterUnitFirstLineIndent(self) -> Single:
        """
        Get: CharacterUnitFirstLineIndent(self: Paragraph) -> Single
        Set: CharacterUnitFirstLineIndent(self: Paragraph) = value
        """
        ...

    @property
    def CharacterUnitLeftIndent(self) -> Single:
        """
        Get: CharacterUnitLeftIndent(self: Paragraph) -> Single
        Set: CharacterUnitLeftIndent(self: Paragraph) = value
        """
        ...

    @property
    def CharacterUnitRightIndent(self) -> Single:
        """
        Get: CharacterUnitRightIndent(self: Paragraph) -> Single
        Set: CharacterUnitRightIndent(self: Paragraph) = value
        """
        ...

    @property
    def CollapsedState(self) -> bool:
        """
        Get: CollapsedState(self: Paragraph) -> bool
        Set: CollapsedState(self: Paragraph) = value
        """
        ...

    @property
    def CollapseHeadingByDefault(self) -> bool:
        """
        Get: CollapseHeadingByDefault(self: Paragraph) -> bool
        Set: CollapseHeadingByDefault(self: Paragraph) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Paragraph) -> int """
        ...

    @property
    def DisableLineHeightGrid(self) -> int:
        """
        Get: DisableLineHeightGrid(self: Paragraph) -> int
        Set: DisableLineHeightGrid(self: Paragraph) = value
        """
        ...

    @property
    def DropCap(self) -> DropCap:
        """ Get: DropCap(self: Paragraph) -> DropCap """
        ...

    @property
    def FarEastLineBreakControl(self) -> int:
        """
        Get: FarEastLineBreakControl(self: Paragraph) -> int
        Set: FarEastLineBreakControl(self: Paragraph) = value
        """
        ...

    @property
    def FirstLineIndent(self) -> Single:
        """
        Get: FirstLineIndent(self: Paragraph) -> Single
        Set: FirstLineIndent(self: Paragraph) = value
        """
        ...

    @property
    def Format(self) -> ParagraphFormat:
        """
        Get: Format(self: Paragraph) -> ParagraphFormat
        Set: Format(self: Paragraph) = value
        """
        ...

    @property
    def HalfWidthPunctuationOnTopOfLine(self) -> int:
        """
        Get: HalfWidthPunctuationOnTopOfLine(self: Paragraph) -> int
        Set: HalfWidthPunctuationOnTopOfLine(self: Paragraph) = value
        """
        ...

    @property
    def HangingPunctuation(self) -> int:
        """
        Get: HangingPunctuation(self: Paragraph) -> int
        Set: HangingPunctuation(self: Paragraph) = value
        """
        ...

    @property
    def Hyphenation(self) -> int:
        """
        Get: Hyphenation(self: Paragraph) -> int
        Set: Hyphenation(self: Paragraph) = value
        """
        ...

    @property
    def ID(self) -> str:
        """
        Get: ID(self: Paragraph) -> str
        Set: ID(self: Paragraph) = value
        """
        ...

    @property
    def IsStyleSeparator(self) -> bool:
        """ Get: IsStyleSeparator(self: Paragraph) -> bool """
        ...

    @property
    def KeepTogether(self) -> int:
        """
        Get: KeepTogether(self: Paragraph) -> int
        Set: KeepTogether(self: Paragraph) = value
        """
        ...

    @property
    def KeepWithNext(self) -> int:
        """
        Get: KeepWithNext(self: Paragraph) -> int
        Set: KeepWithNext(self: Paragraph) = value
        """
        ...

    @property
    def LeftIndent(self) -> Single:
        """
        Get: LeftIndent(self: Paragraph) -> Single
        Set: LeftIndent(self: Paragraph) = value
        """
        ...

    @property
    def LineSpacing(self) -> Single:
        """
        Get: LineSpacing(self: Paragraph) -> Single
        Set: LineSpacing(self: Paragraph) = value
        """
        ...

    @property
    def LineSpacingRule(self) -> WdLineSpacing:
        """
        Get: LineSpacingRule(self: Paragraph) -> WdLineSpacing
        Set: LineSpacingRule(self: Paragraph) = value
        """
        ...

    @property
    def LineUnitAfter(self) -> Single:
        """
        Get: LineUnitAfter(self: Paragraph) -> Single
        Set: LineUnitAfter(self: Paragraph) = value
        """
        ...

    @property
    def LineUnitBefore(self) -> Single:
        """
        Get: LineUnitBefore(self: Paragraph) -> Single
        Set: LineUnitBefore(self: Paragraph) = value
        """
        ...

    @property
    def MirrorIndents(self) -> int:
        """
        Get: MirrorIndents(self: Paragraph) -> int
        Set: MirrorIndents(self: Paragraph) = value
        """
        ...

    @property
    def NoLineNumber(self) -> int:
        """
        Get: NoLineNumber(self: Paragraph) -> int
        Set: NoLineNumber(self: Paragraph) = value
        """
        ...

    @property
    def OutlineLevel(self) -> WdOutlineLevel:
        """
        Get: OutlineLevel(self: Paragraph) -> WdOutlineLevel
        Set: OutlineLevel(self: Paragraph) = value
        """
        ...

    @property
    def PageBreakBefore(self) -> int:
        """
        Get: PageBreakBefore(self: Paragraph) -> int
        Set: PageBreakBefore(self: Paragraph) = value
        """
        ...

    @property
    def ParaID(self) -> int:
        """ Get: ParaID(self: Paragraph) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Paragraph) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Paragraph) -> Range """
        ...

    @property
    def ReadingOrder(self) -> WdReadingOrder:
        """
        Get: ReadingOrder(self: Paragraph) -> WdReadingOrder
        Set: ReadingOrder(self: Paragraph) = value
        """
        ...

    @property
    def RightIndent(self) -> Single:
        """
        Get: RightIndent(self: Paragraph) -> Single
        Set: RightIndent(self: Paragraph) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Paragraph) -> Shading """
        ...

    @property
    def SpaceAfter(self) -> Single:
        """
        Get: SpaceAfter(self: Paragraph) -> Single
        Set: SpaceAfter(self: Paragraph) = value
        """
        ...

    @property
    def SpaceAfterAuto(self) -> int:
        """
        Get: SpaceAfterAuto(self: Paragraph) -> int
        Set: SpaceAfterAuto(self: Paragraph) = value
        """
        ...

    @property
    def SpaceBefore(self) -> Single:
        """
        Get: SpaceBefore(self: Paragraph) -> Single
        Set: SpaceBefore(self: Paragraph) = value
        """
        ...

    @property
    def SpaceBeforeAuto(self) -> int:
        """
        Get: SpaceBeforeAuto(self: Paragraph) -> int
        Set: SpaceBeforeAuto(self: Paragraph) = value
        """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: Paragraph) -> object
        Set: Style(self: Paragraph) = value
        """
        ...

    @property
    def TabStops(self) -> TabStops:
        """
        Get: TabStops(self: Paragraph) -> TabStops
        Set: TabStops(self: Paragraph) = value
        """
        ...

    @property
    def TextboxTightWrap(self) -> WdTextboxTightWrap:
        """
        Get: TextboxTightWrap(self: Paragraph) -> WdTextboxTightWrap
        Set: TextboxTightWrap(self: Paragraph) = value
        """
        ...

    @property
    def TextID(self) -> int:
        """ Get: TextID(self: Paragraph) -> int """
        ...

    @property
    def WidowControl(self) -> int:
        """
        Get: WidowControl(self: Paragraph) -> int
        Set: WidowControl(self: Paragraph) = value
        """
        ...

    @property
    def WordWrap(self) -> int:
        """
        Get: WordWrap(self: Paragraph) -> int
        Set: WordWrap(self: Paragraph) = value
        """
        ...


    def CloseUp(self): # -> 
        """ CloseUp(self: Paragraph) """
        ...

    def Indent(self): # -> 
        """ Indent(self: Paragraph) """
        ...

    def IndentCharWidth(self, Count:Int16): # -> 
        """ IndentCharWidth(self: Paragraph, Count: Int16) """
        ...

    def IndentFirstLineCharWidth(self, Count:Int16): # -> 
        """ IndentFirstLineCharWidth(self: Paragraph, Count: Int16) """
        ...

    def JoinList(self): # -> 
        """ JoinList(self: Paragraph) """
        ...

    def ListAdvanceTo(self, Level1:Int16, Level2:Int16, Level3:Int16, Level4:Int16, Level5:Int16, Level6:Int16, Level7:Int16, Level8:Int16, Level9:Int16): # -> 
        """ ListAdvanceTo(self: Paragraph, Level1: Int16, Level2: Int16, Level3: Int16, Level4: Int16, Level5: Int16, Level6: Int16, Level7: Int16, Level8: Int16, Level9: Int16) """
        ...

    def Next(self, Count:object) -> Tuple_[Paragraph, object]:
        """ Next(self: Paragraph, Count: object) -> (Paragraph, object) """
        ...

    def OpenOrCloseUp(self): # -> 
        """ OpenOrCloseUp(self: Paragraph) """
        ...

    def OpenUp(self): # -> 
        """ OpenUp(self: Paragraph) """
        ...

    def Outdent(self): # -> 
        """ Outdent(self: Paragraph) """
        ...

    def OutlineDemote(self): # -> 
        """ OutlineDemote(self: Paragraph) """
        ...

    def OutlineDemoteToBody(self): # -> 
        """ OutlineDemoteToBody(self: Paragraph) """
        ...

    def OutlinePromote(self): # -> 
        """ OutlinePromote(self: Paragraph) """
        ...

    def Previous(self, Count:object) -> Tuple_[Paragraph, object]:
        """ Previous(self: Paragraph, Count: object) -> (Paragraph, object) """
        ...

    def Reset(self): # -> 
        """ Reset(self: Paragraph) """
        ...

    def ResetAdvanceTo(self): # -> 
        """ ResetAdvanceTo(self: Paragraph) """
        ...

    def SelectNumber(self): # -> 
        """ SelectNumber(self: Paragraph) """
        ...

    def SeparateList(self): # -> 
        """ SeparateList(self: Paragraph) """
        ...

    def Space1(self): # -> 
        """ Space1(self: Paragraph) """
        ...

    def Space15(self): # -> 
        """ Space15(self: Paragraph) """
        ...

    def Space2(self): # -> 
        """ Space2(self: Paragraph) """
        ...

    def TabHangingIndent(self, Count:Int16): # -> 
        """ TabHangingIndent(self: Paragraph, Count: Int16) """
        ...

    def TabIndent(self, Count:Int16): # -> 
        """ TabIndent(self: Paragraph, Count: Int16) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class _ParagraphFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddSpaceBetweenFarEastAndAlpha(self) -> int:
        """
        Get: AddSpaceBetweenFarEastAndAlpha(self: _ParagraphFormat) -> int
        Set: AddSpaceBetweenFarEastAndAlpha(self: _ParagraphFormat) = value
        """
        ...

    @property
    def AddSpaceBetweenFarEastAndDigit(self) -> int:
        """
        Get: AddSpaceBetweenFarEastAndDigit(self: _ParagraphFormat) -> int
        Set: AddSpaceBetweenFarEastAndDigit(self: _ParagraphFormat) = value
        """
        ...

    @property
    def Alignment(self) -> WdParagraphAlignment:
        """
        Get: Alignment(self: _ParagraphFormat) -> WdParagraphAlignment
        Set: Alignment(self: _ParagraphFormat) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: _ParagraphFormat) -> Application """
        ...

    @property
    def AutoAdjustRightIndent(self) -> int:
        """
        Get: AutoAdjustRightIndent(self: _ParagraphFormat) -> int
        Set: AutoAdjustRightIndent(self: _ParagraphFormat) = value
        """
        ...

    @property
    def BaseLineAlignment(self) -> WdBaselineAlignment:
        """
        Get: BaseLineAlignment(self: _ParagraphFormat) -> WdBaselineAlignment
        Set: BaseLineAlignment(self: _ParagraphFormat) = value
        """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: _ParagraphFormat) -> Borders
        Set: Borders(self: _ParagraphFormat) = value
        """
        ...

    @property
    def CharacterUnitFirstLineIndent(self) -> Single:
        """
        Get: CharacterUnitFirstLineIndent(self: _ParagraphFormat) -> Single
        Set: CharacterUnitFirstLineIndent(self: _ParagraphFormat) = value
        """
        ...

    @property
    def CharacterUnitLeftIndent(self) -> Single:
        """
        Get: CharacterUnitLeftIndent(self: _ParagraphFormat) -> Single
        Set: CharacterUnitLeftIndent(self: _ParagraphFormat) = value
        """
        ...

    @property
    def CharacterUnitRightIndent(self) -> Single:
        """
        Get: CharacterUnitRightIndent(self: _ParagraphFormat) -> Single
        Set: CharacterUnitRightIndent(self: _ParagraphFormat) = value
        """
        ...

    @property
    def CollapsedByDefault(self) -> int:
        """
        Get: CollapsedByDefault(self: _ParagraphFormat) -> int
        Set: CollapsedByDefault(self: _ParagraphFormat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: _ParagraphFormat) -> int """
        ...

    @property
    def DisableLineHeightGrid(self) -> int:
        """
        Get: DisableLineHeightGrid(self: _ParagraphFormat) -> int
        Set: DisableLineHeightGrid(self: _ParagraphFormat) = value
        """
        ...

    @property
    def Duplicate(self) -> ParagraphFormat:
        """ Get: Duplicate(self: _ParagraphFormat) -> ParagraphFormat """
        ...

    @property
    def FarEastLineBreakControl(self) -> int:
        """
        Get: FarEastLineBreakControl(self: _ParagraphFormat) -> int
        Set: FarEastLineBreakControl(self: _ParagraphFormat) = value
        """
        ...

    @property
    def FirstLineIndent(self) -> Single:
        """
        Get: FirstLineIndent(self: _ParagraphFormat) -> Single
        Set: FirstLineIndent(self: _ParagraphFormat) = value
        """
        ...

    @property
    def HalfWidthPunctuationOnTopOfLine(self) -> int:
        """
        Get: HalfWidthPunctuationOnTopOfLine(self: _ParagraphFormat) -> int
        Set: HalfWidthPunctuationOnTopOfLine(self: _ParagraphFormat) = value
        """
        ...

    @property
    def HangingPunctuation(self) -> int:
        """
        Get: HangingPunctuation(self: _ParagraphFormat) -> int
        Set: HangingPunctuation(self: _ParagraphFormat) = value
        """
        ...

    @property
    def Hyphenation(self) -> int:
        """
        Get: Hyphenation(self: _ParagraphFormat) -> int
        Set: Hyphenation(self: _ParagraphFormat) = value
        """
        ...

    @property
    def KeepTogether(self) -> int:
        """
        Get: KeepTogether(self: _ParagraphFormat) -> int
        Set: KeepTogether(self: _ParagraphFormat) = value
        """
        ...

    @property
    def KeepWithNext(self) -> int:
        """
        Get: KeepWithNext(self: _ParagraphFormat) -> int
        Set: KeepWithNext(self: _ParagraphFormat) = value
        """
        ...

    @property
    def LeftIndent(self) -> Single:
        """
        Get: LeftIndent(self: _ParagraphFormat) -> Single
        Set: LeftIndent(self: _ParagraphFormat) = value
        """
        ...

    @property
    def LineSpacing(self) -> Single:
        """
        Get: LineSpacing(self: _ParagraphFormat) -> Single
        Set: LineSpacing(self: _ParagraphFormat) = value
        """
        ...

    @property
    def LineSpacingRule(self) -> WdLineSpacing:
        """
        Get: LineSpacingRule(self: _ParagraphFormat) -> WdLineSpacing
        Set: LineSpacingRule(self: _ParagraphFormat) = value
        """
        ...

    @property
    def LineUnitAfter(self) -> Single:
        """
        Get: LineUnitAfter(self: _ParagraphFormat) -> Single
        Set: LineUnitAfter(self: _ParagraphFormat) = value
        """
        ...

    @property
    def LineUnitBefore(self) -> Single:
        """
        Get: LineUnitBefore(self: _ParagraphFormat) -> Single
        Set: LineUnitBefore(self: _ParagraphFormat) = value
        """
        ...

    @property
    def MirrorIndents(self) -> int:
        """
        Get: MirrorIndents(self: _ParagraphFormat) -> int
        Set: MirrorIndents(self: _ParagraphFormat) = value
        """
        ...

    @property
    def NoLineNumber(self) -> int:
        """
        Get: NoLineNumber(self: _ParagraphFormat) -> int
        Set: NoLineNumber(self: _ParagraphFormat) = value
        """
        ...

    @property
    def OutlineLevel(self) -> WdOutlineLevel:
        """
        Get: OutlineLevel(self: _ParagraphFormat) -> WdOutlineLevel
        Set: OutlineLevel(self: _ParagraphFormat) = value
        """
        ...

    @property
    def PageBreakBefore(self) -> int:
        """
        Get: PageBreakBefore(self: _ParagraphFormat) -> int
        Set: PageBreakBefore(self: _ParagraphFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: _ParagraphFormat) -> object """
        ...

    @property
    def ReadingOrder(self) -> WdReadingOrder:
        """
        Get: ReadingOrder(self: _ParagraphFormat) -> WdReadingOrder
        Set: ReadingOrder(self: _ParagraphFormat) = value
        """
        ...

    @property
    def RightIndent(self) -> Single:
        """
        Get: RightIndent(self: _ParagraphFormat) -> Single
        Set: RightIndent(self: _ParagraphFormat) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: _ParagraphFormat) -> Shading """
        ...

    @property
    def SpaceAfter(self) -> Single:
        """
        Get: SpaceAfter(self: _ParagraphFormat) -> Single
        Set: SpaceAfter(self: _ParagraphFormat) = value
        """
        ...

    @property
    def SpaceAfterAuto(self) -> int:
        """
        Get: SpaceAfterAuto(self: _ParagraphFormat) -> int
        Set: SpaceAfterAuto(self: _ParagraphFormat) = value
        """
        ...

    @property
    def SpaceBefore(self) -> Single:
        """
        Get: SpaceBefore(self: _ParagraphFormat) -> Single
        Set: SpaceBefore(self: _ParagraphFormat) = value
        """
        ...

    @property
    def SpaceBeforeAuto(self) -> int:
        """
        Get: SpaceBeforeAuto(self: _ParagraphFormat) -> int
        Set: SpaceBeforeAuto(self: _ParagraphFormat) = value
        """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: _ParagraphFormat) -> object
        Set: Style(self: _ParagraphFormat) = value
        """
        ...

    @property
    def TabStops(self) -> TabStops:
        """
        Get: TabStops(self: _ParagraphFormat) -> TabStops
        Set: TabStops(self: _ParagraphFormat) = value
        """
        ...

    @property
    def TextboxTightWrap(self) -> WdTextboxTightWrap:
        """
        Get: TextboxTightWrap(self: _ParagraphFormat) -> WdTextboxTightWrap
        Set: TextboxTightWrap(self: _ParagraphFormat) = value
        """
        ...

    @property
    def WidowControl(self) -> int:
        """
        Get: WidowControl(self: _ParagraphFormat) -> int
        Set: WidowControl(self: _ParagraphFormat) = value
        """
        ...

    @property
    def WordWrap(self) -> int:
        """
        Get: WordWrap(self: _ParagraphFormat) -> int
        Set: WordWrap(self: _ParagraphFormat) = value
        """
        ...


    def CloseUp(self): # -> 
        """ CloseUp(self: _ParagraphFormat) """
        ...

    def IndentCharWidth(self, Count:Int16): # -> 
        """ IndentCharWidth(self: _ParagraphFormat, Count: Int16) """
        ...

    def IndentFirstLineCharWidth(self, Count:Int16): # -> 
        """ IndentFirstLineCharWidth(self: _ParagraphFormat, Count: Int16) """
        ...

    def OpenOrCloseUp(self): # -> 
        """ OpenOrCloseUp(self: _ParagraphFormat) """
        ...

    def OpenUp(self): # -> 
        """ OpenUp(self: _ParagraphFormat) """
        ...

    def Reset(self): # -> 
        """ Reset(self: _ParagraphFormat) """
        ...

    def Space1(self): # -> 
        """ Space1(self: _ParagraphFormat) """
        ...

    def Space15(self): # -> 
        """ Space15(self: _ParagraphFormat) """
        ...

    def Space2(self): # -> 
        """ Space2(self: _ParagraphFormat) """
        ...

    def TabHangingIndent(self, Count:Int16): # -> 
        """ TabHangingIndent(self: _ParagraphFormat, Count: Int16) """
        ...

    def TabIndent(self, Count:Int16): # -> 
        """ TabIndent(self: _ParagraphFormat, Count: Int16) """
        ...


class ParagraphFormat(_ParagraphFormat): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ParagraphFormatClass(ParagraphFormat, __ComObject): # skipped bases: <type '_ParagraphFormat'>, <type 'object'>
    """ ParagraphFormatClass() """
    @property
    def AddSpaceBetweenFarEastAndAlpha(self) -> int:
        """
        Get: AddSpaceBetweenFarEastAndAlpha(self: ParagraphFormatClass) -> int
        Set: AddSpaceBetweenFarEastAndAlpha(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def AddSpaceBetweenFarEastAndDigit(self) -> int:
        """
        Get: AddSpaceBetweenFarEastAndDigit(self: ParagraphFormatClass) -> int
        Set: AddSpaceBetweenFarEastAndDigit(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def Alignment(self) -> WdParagraphAlignment:
        """
        Get: Alignment(self: ParagraphFormatClass) -> WdParagraphAlignment
        Set: Alignment(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ParagraphFormatClass) -> Application """
        ...

    @property
    def AutoAdjustRightIndent(self) -> int:
        """
        Get: AutoAdjustRightIndent(self: ParagraphFormatClass) -> int
        Set: AutoAdjustRightIndent(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def BaseLineAlignment(self) -> WdBaselineAlignment:
        """
        Get: BaseLineAlignment(self: ParagraphFormatClass) -> WdBaselineAlignment
        Set: BaseLineAlignment(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: ParagraphFormatClass) -> Borders
        Set: Borders(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def CharacterUnitFirstLineIndent(self) -> Single:
        """
        Get: CharacterUnitFirstLineIndent(self: ParagraphFormatClass) -> Single
        Set: CharacterUnitFirstLineIndent(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def CharacterUnitLeftIndent(self) -> Single:
        """
        Get: CharacterUnitLeftIndent(self: ParagraphFormatClass) -> Single
        Set: CharacterUnitLeftIndent(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def CharacterUnitRightIndent(self) -> Single:
        """
        Get: CharacterUnitRightIndent(self: ParagraphFormatClass) -> Single
        Set: CharacterUnitRightIndent(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def CollapsedByDefault(self) -> int:
        """
        Get: CollapsedByDefault(self: ParagraphFormatClass) -> int
        Set: CollapsedByDefault(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ParagraphFormatClass) -> int """
        ...

    @property
    def DisableLineHeightGrid(self) -> int:
        """
        Get: DisableLineHeightGrid(self: ParagraphFormatClass) -> int
        Set: DisableLineHeightGrid(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def Duplicate(self) -> ParagraphFormat:
        """ Get: Duplicate(self: ParagraphFormatClass) -> ParagraphFormat """
        ...

    @property
    def FarEastLineBreakControl(self) -> int:
        """
        Get: FarEastLineBreakControl(self: ParagraphFormatClass) -> int
        Set: FarEastLineBreakControl(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def FirstLineIndent(self) -> Single:
        """
        Get: FirstLineIndent(self: ParagraphFormatClass) -> Single
        Set: FirstLineIndent(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def HalfWidthPunctuationOnTopOfLine(self) -> int:
        """
        Get: HalfWidthPunctuationOnTopOfLine(self: ParagraphFormatClass) -> int
        Set: HalfWidthPunctuationOnTopOfLine(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def HangingPunctuation(self) -> int:
        """
        Get: HangingPunctuation(self: ParagraphFormatClass) -> int
        Set: HangingPunctuation(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def Hyphenation(self) -> int:
        """
        Get: Hyphenation(self: ParagraphFormatClass) -> int
        Set: Hyphenation(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def KeepTogether(self) -> int:
        """
        Get: KeepTogether(self: ParagraphFormatClass) -> int
        Set: KeepTogether(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def KeepWithNext(self) -> int:
        """
        Get: KeepWithNext(self: ParagraphFormatClass) -> int
        Set: KeepWithNext(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def LeftIndent(self) -> Single:
        """
        Get: LeftIndent(self: ParagraphFormatClass) -> Single
        Set: LeftIndent(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def LineSpacing(self) -> Single:
        """
        Get: LineSpacing(self: ParagraphFormatClass) -> Single
        Set: LineSpacing(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def LineSpacingRule(self) -> WdLineSpacing:
        """
        Get: LineSpacingRule(self: ParagraphFormatClass) -> WdLineSpacing
        Set: LineSpacingRule(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def LineUnitAfter(self) -> Single:
        """
        Get: LineUnitAfter(self: ParagraphFormatClass) -> Single
        Set: LineUnitAfter(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def LineUnitBefore(self) -> Single:
        """
        Get: LineUnitBefore(self: ParagraphFormatClass) -> Single
        Set: LineUnitBefore(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def MirrorIndents(self) -> int:
        """
        Get: MirrorIndents(self: ParagraphFormatClass) -> int
        Set: MirrorIndents(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def NoLineNumber(self) -> int:
        """
        Get: NoLineNumber(self: ParagraphFormatClass) -> int
        Set: NoLineNumber(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def OutlineLevel(self) -> WdOutlineLevel:
        """
        Get: OutlineLevel(self: ParagraphFormatClass) -> WdOutlineLevel
        Set: OutlineLevel(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def PageBreakBefore(self) -> int:
        """
        Get: PageBreakBefore(self: ParagraphFormatClass) -> int
        Set: PageBreakBefore(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ParagraphFormatClass) -> object """
        ...

    @property
    def ReadingOrder(self) -> WdReadingOrder:
        """
        Get: ReadingOrder(self: ParagraphFormatClass) -> WdReadingOrder
        Set: ReadingOrder(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def RightIndent(self) -> Single:
        """
        Get: RightIndent(self: ParagraphFormatClass) -> Single
        Set: RightIndent(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: ParagraphFormatClass) -> Shading """
        ...

    @property
    def SpaceAfter(self) -> Single:
        """
        Get: SpaceAfter(self: ParagraphFormatClass) -> Single
        Set: SpaceAfter(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def SpaceAfterAuto(self) -> int:
        """
        Get: SpaceAfterAuto(self: ParagraphFormatClass) -> int
        Set: SpaceAfterAuto(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def SpaceBefore(self) -> Single:
        """
        Get: SpaceBefore(self: ParagraphFormatClass) -> Single
        Set: SpaceBefore(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def SpaceBeforeAuto(self) -> int:
        """
        Get: SpaceBeforeAuto(self: ParagraphFormatClass) -> int
        Set: SpaceBeforeAuto(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: ParagraphFormatClass) -> object
        Set: Style(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def TabStops(self) -> TabStops:
        """
        Get: TabStops(self: ParagraphFormatClass) -> TabStops
        Set: TabStops(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def TextboxTightWrap(self) -> WdTextboxTightWrap:
        """
        Get: TextboxTightWrap(self: ParagraphFormatClass) -> WdTextboxTightWrap
        Set: TextboxTightWrap(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def WidowControl(self) -> int:
        """
        Get: WidowControl(self: ParagraphFormatClass) -> int
        Set: WidowControl(self: ParagraphFormatClass) = value
        """
        ...

    @property
    def WordWrap(self) -> int:
        """
        Get: WordWrap(self: ParagraphFormatClass) -> int
        Set: WordWrap(self: ParagraphFormatClass) = value
        """
        ...


    def CloseUp(self): # -> 
        """ CloseUp(self: ParagraphFormatClass) """
        ...

    def IndentCharWidth(self, Count:Int16): # -> 
        """ IndentCharWidth(self: ParagraphFormatClass, Count: Int16) """
        ...

    def IndentFirstLineCharWidth(self, Count:Int16): # -> 
        """ IndentFirstLineCharWidth(self: ParagraphFormatClass, Count: Int16) """
        ...

    def OpenOrCloseUp(self): # -> 
        """ OpenOrCloseUp(self: ParagraphFormatClass) """
        ...

    def OpenUp(self): # -> 
        """ OpenUp(self: ParagraphFormatClass) """
        ...

    def Reset(self): # -> 
        """ Reset(self: ParagraphFormatClass) """
        ...

    def Space1(self): # -> 
        """ Space1(self: ParagraphFormatClass) """
        ...

    def Space15(self): # -> 
        """ Space15(self: ParagraphFormatClass) """
        ...

    def Space2(self): # -> 
        """ Space2(self: ParagraphFormatClass) """
        ...

    def TabHangingIndent(self, Count:Int16): # -> 
        """ TabHangingIndent(self: ParagraphFormatClass, Count: Int16) """
        ...

    def TabIndent(self, Count:Int16): # -> 
        """ TabIndent(self: ParagraphFormatClass, Count: Int16) """
        ...


class Paragraphs(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AddSpaceBetweenFarEastAndAlpha(self) -> int:
        """
        Get: AddSpaceBetweenFarEastAndAlpha(self: Paragraphs) -> int
        Set: AddSpaceBetweenFarEastAndAlpha(self: Paragraphs) = value
        """
        ...

    @property
    def AddSpaceBetweenFarEastAndDigit(self) -> int:
        """
        Get: AddSpaceBetweenFarEastAndDigit(self: Paragraphs) -> int
        Set: AddSpaceBetweenFarEastAndDigit(self: Paragraphs) = value
        """
        ...

    @property
    def Alignment(self) -> WdParagraphAlignment:
        """
        Get: Alignment(self: Paragraphs) -> WdParagraphAlignment
        Set: Alignment(self: Paragraphs) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Paragraphs) -> Application """
        ...

    @property
    def AutoAdjustRightIndent(self) -> int:
        """
        Get: AutoAdjustRightIndent(self: Paragraphs) -> int
        Set: AutoAdjustRightIndent(self: Paragraphs) = value
        """
        ...

    @property
    def BaseLineAlignment(self) -> WdBaselineAlignment:
        """
        Get: BaseLineAlignment(self: Paragraphs) -> WdBaselineAlignment
        Set: BaseLineAlignment(self: Paragraphs) = value
        """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Paragraphs) -> Borders
        Set: Borders(self: Paragraphs) = value
        """
        ...

    @property
    def CharacterUnitFirstLineIndent(self) -> Single:
        """
        Get: CharacterUnitFirstLineIndent(self: Paragraphs) -> Single
        Set: CharacterUnitFirstLineIndent(self: Paragraphs) = value
        """
        ...

    @property
    def CharacterUnitLeftIndent(self) -> Single:
        """
        Get: CharacterUnitLeftIndent(self: Paragraphs) -> Single
        Set: CharacterUnitLeftIndent(self: Paragraphs) = value
        """
        ...

    @property
    def CharacterUnitRightIndent(self) -> Single:
        """
        Get: CharacterUnitRightIndent(self: Paragraphs) -> Single
        Set: CharacterUnitRightIndent(self: Paragraphs) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Paragraphs) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Paragraphs) -> int """
        ...

    @property
    def DisableLineHeightGrid(self) -> int:
        """
        Get: DisableLineHeightGrid(self: Paragraphs) -> int
        Set: DisableLineHeightGrid(self: Paragraphs) = value
        """
        ...

    @property
    def FarEastLineBreakControl(self) -> int:
        """
        Get: FarEastLineBreakControl(self: Paragraphs) -> int
        Set: FarEastLineBreakControl(self: Paragraphs) = value
        """
        ...

    @property
    def First(self) -> Paragraph:
        """ Get: First(self: Paragraphs) -> Paragraph """
        ...

    @property
    def FirstLineIndent(self) -> Single:
        """
        Get: FirstLineIndent(self: Paragraphs) -> Single
        Set: FirstLineIndent(self: Paragraphs) = value
        """
        ...

    @property
    def Format(self) -> ParagraphFormat:
        """
        Get: Format(self: Paragraphs) -> ParagraphFormat
        Set: Format(self: Paragraphs) = value
        """
        ...

    @property
    def HalfWidthPunctuationOnTopOfLine(self) -> int:
        """
        Get: HalfWidthPunctuationOnTopOfLine(self: Paragraphs) -> int
        Set: HalfWidthPunctuationOnTopOfLine(self: Paragraphs) = value
        """
        ...

    @property
    def HangingPunctuation(self) -> int:
        """
        Get: HangingPunctuation(self: Paragraphs) -> int
        Set: HangingPunctuation(self: Paragraphs) = value
        """
        ...

    @property
    def Hyphenation(self) -> int:
        """
        Get: Hyphenation(self: Paragraphs) -> int
        Set: Hyphenation(self: Paragraphs) = value
        """
        ...

    @property
    def KeepTogether(self) -> int:
        """
        Get: KeepTogether(self: Paragraphs) -> int
        Set: KeepTogether(self: Paragraphs) = value
        """
        ...

    @property
    def KeepWithNext(self) -> int:
        """
        Get: KeepWithNext(self: Paragraphs) -> int
        Set: KeepWithNext(self: Paragraphs) = value
        """
        ...

    @property
    def Last(self) -> Paragraph:
        """ Get: Last(self: Paragraphs) -> Paragraph """
        ...

    @property
    def LeftIndent(self) -> Single:
        """
        Get: LeftIndent(self: Paragraphs) -> Single
        Set: LeftIndent(self: Paragraphs) = value
        """
        ...

    @property
    def LineSpacing(self) -> Single:
        """
        Get: LineSpacing(self: Paragraphs) -> Single
        Set: LineSpacing(self: Paragraphs) = value
        """
        ...

    @property
    def LineSpacingRule(self) -> WdLineSpacing:
        """
        Get: LineSpacingRule(self: Paragraphs) -> WdLineSpacing
        Set: LineSpacingRule(self: Paragraphs) = value
        """
        ...

    @property
    def LineUnitAfter(self) -> Single:
        """
        Get: LineUnitAfter(self: Paragraphs) -> Single
        Set: LineUnitAfter(self: Paragraphs) = value
        """
        ...

    @property
    def LineUnitBefore(self) -> Single:
        """
        Get: LineUnitBefore(self: Paragraphs) -> Single
        Set: LineUnitBefore(self: Paragraphs) = value
        """
        ...

    @property
    def NoLineNumber(self) -> int:
        """
        Get: NoLineNumber(self: Paragraphs) -> int
        Set: NoLineNumber(self: Paragraphs) = value
        """
        ...

    @property
    def OutlineLevel(self) -> WdOutlineLevel:
        """
        Get: OutlineLevel(self: Paragraphs) -> WdOutlineLevel
        Set: OutlineLevel(self: Paragraphs) = value
        """
        ...

    @property
    def PageBreakBefore(self) -> int:
        """
        Get: PageBreakBefore(self: Paragraphs) -> int
        Set: PageBreakBefore(self: Paragraphs) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Paragraphs) -> object """
        ...

    @property
    def ReadingOrder(self) -> WdReadingOrder:
        """
        Get: ReadingOrder(self: Paragraphs) -> WdReadingOrder
        Set: ReadingOrder(self: Paragraphs) = value
        """
        ...

    @property
    def RightIndent(self) -> Single:
        """
        Get: RightIndent(self: Paragraphs) -> Single
        Set: RightIndent(self: Paragraphs) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Paragraphs) -> Shading """
        ...

    @property
    def SpaceAfter(self) -> Single:
        """
        Get: SpaceAfter(self: Paragraphs) -> Single
        Set: SpaceAfter(self: Paragraphs) = value
        """
        ...

    @property
    def SpaceAfterAuto(self) -> int:
        """
        Get: SpaceAfterAuto(self: Paragraphs) -> int
        Set: SpaceAfterAuto(self: Paragraphs) = value
        """
        ...

    @property
    def SpaceBefore(self) -> Single:
        """
        Get: SpaceBefore(self: Paragraphs) -> Single
        Set: SpaceBefore(self: Paragraphs) = value
        """
        ...

    @property
    def SpaceBeforeAuto(self) -> int:
        """
        Get: SpaceBeforeAuto(self: Paragraphs) -> int
        Set: SpaceBeforeAuto(self: Paragraphs) = value
        """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: Paragraphs) -> object
        Set: Style(self: Paragraphs) = value
        """
        ...

    @property
    def TabStops(self) -> TabStops:
        """
        Get: TabStops(self: Paragraphs) -> TabStops
        Set: TabStops(self: Paragraphs) = value
        """
        ...

    @property
    def WidowControl(self) -> int:
        """
        Get: WidowControl(self: Paragraphs) -> int
        Set: WidowControl(self: Paragraphs) = value
        """
        ...

    @property
    def WordWrap(self) -> int:
        """
        Get: WordWrap(self: Paragraphs) -> int
        Set: WordWrap(self: Paragraphs) = value
        """
        ...


    def Add(self, Range:object) -> Tuple_[Paragraph, object]:
        """ Add(self: Paragraphs, Range: object) -> (Paragraph, object) """
        ...

    def CloseUp(self): # -> 
        """ CloseUp(self: Paragraphs) """
        ...

    def DecreaseSpacing(self): # -> 
        """ DecreaseSpacing(self: Paragraphs) """
        ...

    def IncreaseSpacing(self): # -> 
        """ IncreaseSpacing(self: Paragraphs) """
        ...

    def Indent(self): # -> 
        """ Indent(self: Paragraphs) """
        ...

    def IndentCharWidth(self, Count:Int16): # -> 
        """ IndentCharWidth(self: Paragraphs, Count: Int16) """
        ...

    def IndentFirstLineCharWidth(self, Count:Int16): # -> 
        """ IndentFirstLineCharWidth(self: Paragraphs, Count: Int16) """
        ...

    def OpenOrCloseUp(self): # -> 
        """ OpenOrCloseUp(self: Paragraphs) """
        ...

    def OpenUp(self): # -> 
        """ OpenUp(self: Paragraphs) """
        ...

    def Outdent(self): # -> 
        """ Outdent(self: Paragraphs) """
        ...

    def OutlineDemote(self): # -> 
        """ OutlineDemote(self: Paragraphs) """
        ...

    def OutlineDemoteToBody(self): # -> 
        """ OutlineDemoteToBody(self: Paragraphs) """
        ...

    def OutlinePromote(self): # -> 
        """ OutlinePromote(self: Paragraphs) """
        ...

    def Reset(self): # -> 
        """ Reset(self: Paragraphs) """
        ...

    def Space1(self): # -> 
        """ Space1(self: Paragraphs) """
        ...

    def Space15(self): # -> 
        """ Space15(self: Paragraphs) """
        ...

    def Space2(self): # -> 
        """ Space2(self: Paragraphs) """
        ...

    def TabHangingIndent(self, Count:Int16): # -> 
        """ TabHangingIndent(self: Paragraphs, Count: Int16) """
        ...

    def TabIndent(self, Count:Int16): # -> 
        """ TabIndent(self: Paragraphs, Count: Int16) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class PictureFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: PictureFormat) -> Application """
        ...

    @property
    def Brightness(self) -> Single:
        """
        Get: Brightness(self: PictureFormat) -> Single
        Set: Brightness(self: PictureFormat) = value
        """
        ...

    @property
    def ColorType(self): # -> MsoPictureColorType
        """
        Get: ColorType(self: PictureFormat) -> MsoPictureColorType
        Set: ColorType(self: PictureFormat) = value
        """
        ...

    @property
    def Contrast(self) -> Single:
        """
        Get: Contrast(self: PictureFormat) -> Single
        Set: Contrast(self: PictureFormat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: PictureFormat) -> int """
        ...

    @property
    def Crop(self): # -> Crop
        """
        Get: Crop(self: PictureFormat) -> Crop
        Set: Crop(self: PictureFormat) = value
        """
        ...

    @property
    def CropBottom(self) -> Single:
        """
        Get: CropBottom(self: PictureFormat) -> Single
        Set: CropBottom(self: PictureFormat) = value
        """
        ...

    @property
    def CropLeft(self) -> Single:
        """
        Get: CropLeft(self: PictureFormat) -> Single
        Set: CropLeft(self: PictureFormat) = value
        """
        ...

    @property
    def CropRight(self) -> Single:
        """
        Get: CropRight(self: PictureFormat) -> Single
        Set: CropRight(self: PictureFormat) = value
        """
        ...

    @property
    def CropTop(self) -> Single:
        """
        Get: CropTop(self: PictureFormat) -> Single
        Set: CropTop(self: PictureFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PictureFormat) -> object """
        ...

    @property
    def TransparencyColor(self) -> int:
        """
        Get: TransparencyColor(self: PictureFormat) -> int
        Set: TransparencyColor(self: PictureFormat) = value
        """
        ...

    @property
    def TransparentBackground(self): # -> MsoTriState
        """
        Get: TransparentBackground(self: PictureFormat) -> MsoTriState
        Set: TransparentBackground(self: PictureFormat) = value
        """
        ...


    def IncrementBrightness(self, Increment:Single): # -> 
        """ IncrementBrightness(self: PictureFormat, Increment: Single) """
        ...

    def IncrementContrast(self, Increment:Single): # -> 
        """ IncrementContrast(self: PictureFormat, Increment: Single) """
        ...


class PlotArea: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: PlotArea) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: PlotArea) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: PlotArea) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: PlotArea) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: PlotArea) -> ChartFormat """
        ...

    @property
    def Height(self) -> float:
        """
        Get: Height(self: PlotArea) -> float
        Set: Height(self: PlotArea) = value
        """
        ...

    @property
    def InsideHeight(self) -> float:
        """
        Get: InsideHeight(self: PlotArea) -> float
        Set: InsideHeight(self: PlotArea) = value
        """
        ...

    @property
    def InsideLeft(self) -> float:
        """
        Get: InsideLeft(self: PlotArea) -> float
        Set: InsideLeft(self: PlotArea) = value
        """
        ...

    @property
    def InsideTop(self) -> float:
        """
        Get: InsideTop(self: PlotArea) -> float
        Set: InsideTop(self: PlotArea) = value
        """
        ...

    @property
    def InsideWidth(self) -> float:
        """
        Get: InsideWidth(self: PlotArea) -> float
        Set: InsideWidth(self: PlotArea) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: PlotArea) -> Interior """
        ...

    @property
    def Left(self) -> float:
        """
        Get: Left(self: PlotArea) -> float
        Set: Left(self: PlotArea) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: PlotArea) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: PlotArea) -> object """
        ...

    @property
    def Position(self) -> XlChartElementPosition:
        """
        Get: Position(self: PlotArea) -> XlChartElementPosition
        Set: Position(self: PlotArea) = value
        """
        ...

    @property
    def Top(self) -> float:
        """
        Get: Top(self: PlotArea) -> float
        Set: Top(self: PlotArea) = value
        """
        ...

    @property
    def Width(self) -> float:
        """
        Get: Width(self: PlotArea) -> float
        Set: Width(self: PlotArea) = value
        """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: PlotArea) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: PlotArea) -> object """
        ...


class Point: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Point) -> object """
        ...

    @property
    def ApplyPictToEnd(self) -> bool:
        """
        Get: ApplyPictToEnd(self: Point) -> bool
        Set: ApplyPictToEnd(self: Point) = value
        """
        ...

    @property
    def ApplyPictToFront(self) -> bool:
        """
        Get: ApplyPictToFront(self: Point) -> bool
        Set: ApplyPictToFront(self: Point) = value
        """
        ...

    @property
    def ApplyPictToSides(self) -> bool:
        """
        Get: ApplyPictToSides(self: Point) -> bool
        Set: ApplyPictToSides(self: Point) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: Point) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Point) -> int """
        ...

    @property
    def DataLabel(self) -> DataLabel:
        """ Get: DataLabel(self: Point) -> DataLabel """
        ...

    @property
    def Explosion(self) -> int:
        """
        Get: Explosion(self: Point) -> int
        Set: Explosion(self: Point) = value
        """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: Point) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Point) -> ChartFormat """
        ...

    @property
    def Has3DEffect(self) -> bool:
        """
        Get: Has3DEffect(self: Point) -> bool
        Set: Has3DEffect(self: Point) = value
        """
        ...

    @property
    def HasDataLabel(self) -> bool:
        """
        Get: HasDataLabel(self: Point) -> bool
        Set: HasDataLabel(self: Point) = value
        """
        ...

    @property
    def Height(self) -> float:
        """ Get: Height(self: Point) -> float """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Point) -> Interior """
        ...

    @property
    def InvertIfNegative(self) -> bool:
        """
        Get: InvertIfNegative(self: Point) -> bool
        Set: InvertIfNegative(self: Point) = value
        """
        ...

    @property
    def Left(self) -> float:
        """ Get: Left(self: Point) -> float """
        ...

    @property
    def MarkerBackgroundColor(self) -> int:
        """
        Get: MarkerBackgroundColor(self: Point) -> int
        Set: MarkerBackgroundColor(self: Point) = value
        """
        ...

    @property
    def MarkerBackgroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerBackgroundColorIndex(self: Point) -> XlColorIndex
        Set: MarkerBackgroundColorIndex(self: Point) = value
        """
        ...

    @property
    def MarkerForegroundColor(self) -> int:
        """
        Get: MarkerForegroundColor(self: Point) -> int
        Set: MarkerForegroundColor(self: Point) = value
        """
        ...

    @property
    def MarkerForegroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerForegroundColorIndex(self: Point) -> XlColorIndex
        Set: MarkerForegroundColorIndex(self: Point) = value
        """
        ...

    @property
    def MarkerSize(self) -> int:
        """
        Get: MarkerSize(self: Point) -> int
        Set: MarkerSize(self: Point) = value
        """
        ...

    @property
    def MarkerStyle(self) -> XlMarkerStyle:
        """
        Get: MarkerStyle(self: Point) -> XlMarkerStyle
        Set: MarkerStyle(self: Point) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Point) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Point) -> object """
        ...

    @property
    def PictureType(self) -> XlChartPictureType:
        """
        Get: PictureType(self: Point) -> XlChartPictureType
        Set: PictureType(self: Point) = value
        """
        ...

    @property
    def PictureUnit(self) -> float:
        """
        Get: PictureUnit(self: Point) -> float
        Set: PictureUnit(self: Point) = value
        """
        ...

    @property
    def PictureUnit2(self) -> float:
        """
        Get: PictureUnit2(self: Point) -> float
        Set: PictureUnit2(self: Point) = value
        """
        ...

    @property
    def SecondaryPlot(self) -> bool:
        """
        Get: SecondaryPlot(self: Point) -> bool
        Set: SecondaryPlot(self: Point) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Point) -> bool
        Set: Shadow(self: Point) = value
        """
        ...

    @property
    def Top(self) -> float:
        """ Get: Top(self: Point) -> float """
        ...

    @property
    def Width(self) -> float:
        """ Get: Width(self: Point) -> float """
        ...


    def ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object, ShowSeriesName:object, ShowCategoryName:object, ShowValue:object, ShowPercentage:object, ShowBubbleSize:object, Separator:object) -> object:
        """ ApplyDataLabels(self: Point, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) -> object """
        ...

    def ClearFormats(self) -> object:
        """ ClearFormats(self: Point) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Point) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Point) -> object """
        ...

    def Paste(self) -> object:
        """ Paste(self: Point) -> object """
        ...

    def PieSliceLocation(self, loc:XlPieSliceLocation, Index:XlPieSliceIndex) -> float:
        """ PieSliceLocation(self: Point, loc: XlPieSliceLocation, Index: XlPieSliceIndex) -> float """
        ...

    def Select(self) -> object:
        """ Select(self: Point) -> object """
        ...


class Points(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Points) -> object """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Points) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Points) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Points) -> object """
        ...


    def _Default(self, Index:int) -> Point:
        """ _Default(self: Points, Index: int) -> Point """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ProofreadingErrors(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ProofreadingErrors) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ProofreadingErrors) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ProofreadingErrors) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ProofreadingErrors) -> object """
        ...

    @property
    def Type(self) -> WdProofreadingErrorType:
        """ Get: Type(self: ProofreadingErrors) -> WdProofreadingErrorType """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ProtectedViewWindow: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Active(self) -> bool:
        """ Get: Active(self: ProtectedViewWindow) -> bool """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ProtectedViewWindow) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: ProtectedViewWindow) -> str
        Set: Caption(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ProtectedViewWindow) -> int """
        ...

    @property
    def Document(self) -> Document:
        """ Get: Document(self: ProtectedViewWindow) -> Document """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: ProtectedViewWindow) -> int
        Set: Height(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: ProtectedViewWindow) -> int """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: ProtectedViewWindow) -> int
        Set: Left(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ProtectedViewWindow) -> object """
        ...

    @property
    def SourceName(self) -> str:
        """ Get: SourceName(self: ProtectedViewWindow) -> str """
        ...

    @property
    def SourcePath(self) -> str:
        """ Get: SourcePath(self: ProtectedViewWindow) -> str """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: ProtectedViewWindow) -> int
        Set: Top(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: ProtectedViewWindow) -> bool
        Set: Visible(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: ProtectedViewWindow) -> int
        Set: Width(self: ProtectedViewWindow) = value
        """
        ...

    @property
    def WindowState(self) -> WdWindowState:
        """
        Get: WindowState(self: ProtectedViewWindow) -> WdWindowState
        Set: WindowState(self: ProtectedViewWindow) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: ProtectedViewWindow) """
        ...

    def Close(self): # -> 
        """ Close(self: ProtectedViewWindow) """
        ...

    def Edit(self, PasswordTemplate:object, WritePasswordDocument:object, WritePasswordTemplate:object) -> Tuple_[Document, object, object, object]:
        """ Edit(self: ProtectedViewWindow, PasswordTemplate: object, WritePasswordDocument: object, WritePasswordTemplate: object) -> (Document, object, object, object) """
        ...

    def ToggleRibbon(self): # -> 
        """ ToggleRibbon(self: ProtectedViewWindow) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ProtectedViewWindows(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ProtectedViewWindows) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ProtectedViewWindows) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ProtectedViewWindows) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ProtectedViewWindows) -> object """
        ...


    def Open(self, FileName:object, AddToRecentFiles:object, PasswordDocument:object, Visible:object, OpenAndRepair:object) -> Tuple_[ProtectedViewWindow, object, object, object, object, object]:
        """ Open(self: ProtectedViewWindows, FileName: object, AddToRecentFiles: object, PasswordDocument: object, Visible: object, OpenAndRepair: object) -> (ProtectedViewWindow, object, object, object, object, object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Range: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Range) -> Application """
        ...

    @property
    def Bold(self) -> int:
        """
        Get: Bold(self: Range) -> int
        Set: Bold(self: Range) = value
        """
        ...

    @property
    def BoldBi(self) -> int:
        """
        Get: BoldBi(self: Range) -> int
        Set: BoldBi(self: Range) = value
        """
        ...

    @property
    def BookmarkID(self) -> int:
        """ Get: BookmarkID(self: Range) -> int """
        ...

    @property
    def Bookmarks(self) -> Bookmarks:
        """ Get: Bookmarks(self: Range) -> Bookmarks """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Range) -> Borders
        Set: Borders(self: Range) = value
        """
        ...

    @property
    def CanEdit(self) -> int:
        """ Get: CanEdit(self: Range) -> int """
        ...

    @property
    def CanPaste(self) -> int:
        """ Get: CanPaste(self: Range) -> int """
        ...

    @property
    def Case(self) -> WdCharacterCase:
        """
        Get: Case(self: Range) -> WdCharacterCase
        Set: Case(self: Range) = value
        """
        ...

    @property
    def Cells(self) -> Cells:
        """ Get: Cells(self: Range) -> Cells """
        ...

    @property
    def Characters(self) -> Characters:
        """ Get: Characters(self: Range) -> Characters """
        ...

    @property
    def CharacterStyle(self) -> object:
        """ Get: CharacterStyle(self: Range) -> object """
        ...

    @property
    def CharacterWidth(self) -> WdCharacterWidth:
        """
        Get: CharacterWidth(self: Range) -> WdCharacterWidth
        Set: CharacterWidth(self: Range) = value
        """
        ...

    @property
    def Columns(self) -> Columns:
        """ Get: Columns(self: Range) -> Columns """
        ...

    @property
    def CombineCharacters(self) -> bool:
        """
        Get: CombineCharacters(self: Range) -> bool
        Set: CombineCharacters(self: Range) = value
        """
        ...

    @property
    def Comments(self) -> Comments:
        """ Get: Comments(self: Range) -> Comments """
        ...

    @property
    def Conflicts(self) -> Conflicts:
        """ Get: Conflicts(self: Range) -> Conflicts """
        ...

    @property
    def ContentControls(self) -> ContentControls:
        """ Get: ContentControls(self: Range) -> ContentControls """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Range) -> int """
        ...

    @property
    def DisableCharacterSpaceGrid(self) -> bool:
        """
        Get: DisableCharacterSpaceGrid(self: Range) -> bool
        Set: DisableCharacterSpaceGrid(self: Range) = value
        """
        ...

    @property
    def Document(self) -> Document:
        """ Get: Document(self: Range) -> Document """
        ...

    @property
    def Duplicate(self) -> Range:
        """ Get: Duplicate(self: Range) -> Range """
        ...

    @property
    def Editors(self) -> Editors:
        """ Get: Editors(self: Range) -> Editors """
        ...

    @property
    def EmphasisMark(self) -> WdEmphasisMark:
        """
        Get: EmphasisMark(self: Range) -> WdEmphasisMark
        Set: EmphasisMark(self: Range) = value
        """
        ...

    @property
    def End(self) -> int:
        """
        Get: End(self: Range) -> int
        Set: End(self: Range) = value
        """
        ...

    @property
    def EndnoteOptions(self) -> EndnoteOptions:
        """ Get: EndnoteOptions(self: Range) -> EndnoteOptions """
        ...

    @property
    def Endnotes(self) -> Endnotes:
        """ Get: Endnotes(self: Range) -> Endnotes """
        ...

    @property
    def EnhMetaFileBits(self) -> object:
        """ Get: EnhMetaFileBits(self: Range) -> object """
        ...

    @property
    def Fields(self) -> Fields:
        """ Get: Fields(self: Range) -> Fields """
        ...

    @property
    def Find(self) -> Find:
        """ Get: Find(self: Range) -> Find """
        ...

    @property
    def FitTextWidth(self) -> Single:
        """
        Get: FitTextWidth(self: Range) -> Single
        Set: FitTextWidth(self: Range) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: Range) -> Font
        Set: Font(self: Range) = value
        """
        ...

    @property
    def FootnoteOptions(self) -> FootnoteOptions:
        """ Get: FootnoteOptions(self: Range) -> FootnoteOptions """
        ...

    @property
    def Footnotes(self) -> Footnotes:
        """ Get: Footnotes(self: Range) -> Footnotes """
        ...

    @property
    def FormattedText(self) -> Range:
        """
        Get: FormattedText(self: Range) -> Range
        Set: FormattedText(self: Range) = value
        """
        ...

    @property
    def FormFields(self) -> FormFields:
        """ Get: FormFields(self: Range) -> FormFields """
        ...

    @property
    def Frames(self) -> Frames:
        """ Get: Frames(self: Range) -> Frames """
        ...

    @property
    def GrammarChecked(self) -> bool:
        """
        Get: GrammarChecked(self: Range) -> bool
        Set: GrammarChecked(self: Range) = value
        """
        ...

    @property
    def GrammaticalErrors(self) -> ProofreadingErrors:
        """ Get: GrammaticalErrors(self: Range) -> ProofreadingErrors """
        ...

    @property
    def HighlightColorIndex(self) -> WdColorIndex:
        """
        Get: HighlightColorIndex(self: Range) -> WdColorIndex
        Set: HighlightColorIndex(self: Range) = value
        """
        ...

    @property
    def HorizontalInVertical(self) -> WdHorizontalInVerticalType:
        """
        Get: HorizontalInVertical(self: Range) -> WdHorizontalInVerticalType
        Set: HorizontalInVertical(self: Range) = value
        """
        ...

    @property
    def HTMLDivisions(self) -> HTMLDivisions:
        """ Get: HTMLDivisions(self: Range) -> HTMLDivisions """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: Range) -> Hyperlinks """
        ...

    @property
    def ID(self) -> str:
        """
        Get: ID(self: Range) -> str
        Set: ID(self: Range) = value
        """
        ...

    @property
    def InlineShapes(self) -> InlineShapes:
        """ Get: InlineShapes(self: Range) -> InlineShapes """
        ...

    @property
    def IsEndOfRowMark(self) -> bool:
        """ Get: IsEndOfRowMark(self: Range) -> bool """
        ...

    @property
    def Italic(self) -> int:
        """
        Get: Italic(self: Range) -> int
        Set: Italic(self: Range) = value
        """
        ...

    @property
    def ItalicBi(self) -> int:
        """
        Get: ItalicBi(self: Range) -> int
        Set: ItalicBi(self: Range) = value
        """
        ...

    @property
    def Kana(self) -> WdKana:
        """
        Get: Kana(self: Range) -> WdKana
        Set: Kana(self: Range) = value
        """
        ...

    @property
    def LanguageDetected(self) -> bool:
        """
        Get: LanguageDetected(self: Range) -> bool
        Set: LanguageDetected(self: Range) = value
        """
        ...

    @property
    def LanguageID(self) -> WdLanguageID:
        """
        Get: LanguageID(self: Range) -> WdLanguageID
        Set: LanguageID(self: Range) = value
        """
        ...

    @property
    def LanguageIDFarEast(self) -> WdLanguageID:
        """
        Get: LanguageIDFarEast(self: Range) -> WdLanguageID
        Set: LanguageIDFarEast(self: Range) = value
        """
        ...

    @property
    def LanguageIDOther(self) -> WdLanguageID:
        """
        Get: LanguageIDOther(self: Range) -> WdLanguageID
        Set: LanguageIDOther(self: Range) = value
        """
        ...

    @property
    def ListFormat(self) -> ListFormat:
        """ Get: ListFormat(self: Range) -> ListFormat """
        ...

    @property
    def ListParagraphs(self) -> ListParagraphs:
        """ Get: ListParagraphs(self: Range) -> ListParagraphs """
        ...

    @property
    def ListStyle(self) -> object:
        """ Get: ListStyle(self: Range) -> object """
        ...

    @property
    def Locks(self) -> CoAuthLocks:
        """ Get: Locks(self: Range) -> CoAuthLocks """
        ...

    @property
    def NextStoryRange(self) -> Range:
        """ Get: NextStoryRange(self: Range) -> Range """
        ...

    @property
    def NoProofing(self) -> int:
        """
        Get: NoProofing(self: Range) -> int
        Set: NoProofing(self: Range) = value
        """
        ...

    @property
    def OMaths(self) -> OMaths:
        """ Get: OMaths(self: Range) -> OMaths """
        ...

    @property
    def Orientation(self) -> WdTextOrientation:
        """
        Get: Orientation(self: Range) -> WdTextOrientation
        Set: Orientation(self: Range) = value
        """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """
        Get: PageSetup(self: Range) -> PageSetup
        Set: PageSetup(self: Range) = value
        """
        ...

    @property
    def ParagraphFormat(self) -> ParagraphFormat:
        """
        Get: ParagraphFormat(self: Range) -> ParagraphFormat
        Set: ParagraphFormat(self: Range) = value
        """
        ...

    @property
    def Paragraphs(self) -> Paragraphs:
        """ Get: Paragraphs(self: Range) -> Paragraphs """
        ...

    @property
    def ParagraphStyle(self) -> object:
        """ Get: ParagraphStyle(self: Range) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Range) -> object """
        ...

    @property
    def ParentContentControl(self) -> ContentControl:
        """ Get: ParentContentControl(self: Range) -> ContentControl """
        ...

    @property
    def PreviousBookmarkID(self) -> int:
        """ Get: PreviousBookmarkID(self: Range) -> int """
        ...

    @property
    def ReadabilityStatistics(self) -> ReadabilityStatistics:
        """ Get: ReadabilityStatistics(self: Range) -> ReadabilityStatistics """
        ...

    @property
    def Revisions(self) -> Revisions:
        """ Get: Revisions(self: Range) -> Revisions """
        ...

    @property
    def Rows(self) -> Rows:
        """ Get: Rows(self: Range) -> Rows """
        ...

    @property
    def Scripts(self): # -> Scripts
        """ Get: Scripts(self: Range) -> Scripts """
        ...

    @property
    def Sections(self) -> Sections:
        """ Get: Sections(self: Range) -> Sections """
        ...

    @property
    def Sentences(self) -> Sentences:
        """ Get: Sentences(self: Range) -> Sentences """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Range) -> Shading """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Range) -> ShapeRange """
        ...

    @property
    def ShowAll(self) -> bool:
        """
        Get: ShowAll(self: Range) -> bool
        Set: ShowAll(self: Range) = value
        """
        ...

    @property
    def SmartTags(self) -> SmartTags:
        """ Get: SmartTags(self: Range) -> SmartTags """
        ...

    @property
    def SpellingChecked(self) -> bool:
        """
        Get: SpellingChecked(self: Range) -> bool
        Set: SpellingChecked(self: Range) = value
        """
        ...

    @property
    def SpellingErrors(self) -> ProofreadingErrors:
        """ Get: SpellingErrors(self: Range) -> ProofreadingErrors """
        ...

    @property
    def Start(self) -> int:
        """
        Get: Start(self: Range) -> int
        Set: Start(self: Range) = value
        """
        ...

    @property
    def StoryLength(self) -> int:
        """ Get: StoryLength(self: Range) -> int """
        ...

    @property
    def StoryType(self) -> WdStoryType:
        """ Get: StoryType(self: Range) -> WdStoryType """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: Range) -> object
        Set: Style(self: Range) = value
        """
        ...

    @property
    def Subdocuments(self) -> Subdocuments:
        """ Get: Subdocuments(self: Range) -> Subdocuments """
        ...

    @property
    def SynonymInfo(self) -> SynonymInfo:
        """ Get: SynonymInfo(self: Range) -> SynonymInfo """
        ...

    @property
    def Tables(self) -> Tables:
        """ Get: Tables(self: Range) -> Tables """
        ...

    @property
    def TableStyle(self) -> object:
        """ Get: TableStyle(self: Range) -> object """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Range) -> str
        Set: Text(self: Range) = value
        """
        ...

    @property
    def TextRetrievalMode(self) -> TextRetrievalMode:
        """
        Get: TextRetrievalMode(self: Range) -> TextRetrievalMode
        Set: TextRetrievalMode(self: Range) = value
        """
        ...

    @property
    def TextVisibleOnScreen(self) -> int:
        """ Get: TextVisibleOnScreen(self: Range) -> int """
        ...

    @property
    def TopLevelTables(self) -> Tables:
        """ Get: TopLevelTables(self: Range) -> Tables """
        ...

    @property
    def TwoLinesInOne(self) -> WdTwoLinesInOneType:
        """
        Get: TwoLinesInOne(self: Range) -> WdTwoLinesInOneType
        Set: TwoLinesInOne(self: Range) = value
        """
        ...

    @property
    def Underline(self) -> WdUnderline:
        """
        Get: Underline(self: Range) -> WdUnderline
        Set: Underline(self: Range) = value
        """
        ...

    @property
    def Updates(self) -> CoAuthUpdates:
        """ Get: Updates(self: Range) -> CoAuthUpdates """
        ...

    @property
    def WordOpenXML(self) -> str:
        """ Get: WordOpenXML(self: Range) -> str """
        ...

    @property
    def Words(self) -> Words:
        """ Get: Words(self: Range) -> Words """
        ...

    @property
    def XMLNodes(self) -> XMLNodes:
        """ Get: XMLNodes(self: Range) -> XMLNodes """
        ...

    @property
    def XMLParentNode(self) -> XMLNode:
        """ Get: XMLParentNode(self: Range) -> XMLNode """
        ...


    def AutoFormat(self): # -> 
        """ AutoFormat(self: Range) """
        ...

    def Calculate(self) -> Single:
        """ Calculate(self: Range) -> Single """
        ...

    def CheckGrammar(self): # -> 
        """ CheckGrammar(self: Range) """
        ...

    def CheckSpelling(self, CustomDictionary:object, IgnoreUppercase:object, AlwaysSuggest:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object]:
        """ CheckSpelling(self: Range, CustomDictionary: object, IgnoreUppercase: object, AlwaysSuggest: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def CheckSynonyms(self): # -> 
        """ CheckSynonyms(self: Range) """
        ...

    def Collapse(self, Direction:object) -> object:
        """ Collapse(self: Range, Direction: object) -> object """
        ...

    def ComputeStatistics(self, Statistic:WdStatistic) -> int:
        """ ComputeStatistics(self: Range, Statistic: WdStatistic) -> int """
        ...

    def ConvertHangulAndHanja(self, ConversionsMode:object, FastConversion:object, CheckHangulEnding:object, EnableRecentOrdering:object, CustomDictionary:object) -> Tuple_[object, object, object, object, object]:
        """ ConvertHangulAndHanja(self: Range, ConversionsMode: object, FastConversion: object, CheckHangulEnding: object, EnableRecentOrdering: object, CustomDictionary: object) -> (object, object, object, object, object) """
        ...

    def ConvertToTable(self, Separator:object, NumRows:object, NumColumns:object, InitialColumnWidth:object, Format:object, ApplyBorders:object, ApplyShading:object, ApplyFont:object, ApplyColor:object, ApplyHeadingRows:object, ApplyLastRow:object, ApplyFirstColumn:object, ApplyLastColumn:object, AutoFit:object, AutoFitBehavior:object, DefaultTableBehavior:object) -> Tuple_[Table, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ ConvertToTable(self: Range, Separator: object, NumRows: object, NumColumns: object, InitialColumnWidth: object, Format: object, ApplyBorders: object, ApplyShading: object, ApplyFont: object, ApplyColor: object, ApplyHeadingRows: object, ApplyLastRow: object, ApplyFirstColumn: object, ApplyLastColumn: object, AutoFit: object, AutoFitBehavior: object, DefaultTableBehavior: object) -> (Table, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def ConvertToTableOld(self, Separator:object, NumRows:object, NumColumns:object, InitialColumnWidth:object, Format:object, ApplyBorders:object, ApplyShading:object, ApplyFont:object, ApplyColor:object, ApplyHeadingRows:object, ApplyLastRow:object, ApplyFirstColumn:object, ApplyLastColumn:object, AutoFit:object) -> Tuple_[Table, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ ConvertToTableOld(self: Range, Separator: object, NumRows: object, NumColumns: object, InitialColumnWidth: object, Format: object, ApplyBorders: object, ApplyShading: object, ApplyFont: object, ApplyColor: object, ApplyHeadingRows: object, ApplyLastRow: object, ApplyFirstColumn: object, ApplyLastColumn: object, AutoFit: object) -> (Table, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Copy(self): # -> 
        """ Copy(self: Range) """
        ...

    def CopyAsPicture(self): # -> 
        """ CopyAsPicture(self: Range) """
        ...

    def CreatePublisher(self, Edition:object, ContainsPICT:object, ContainsRTF:object, ContainsText:object) -> Tuple_[object, object, object, object]:
        """ CreatePublisher(self: Range, Edition: object, ContainsPICT: object, ContainsRTF: object, ContainsText: object) -> (object, object, object, object) """
        ...

    def Cut(self): # -> 
        """ Cut(self: Range) """
        ...

    def Delete(self, Unit:object, Count:object) -> Tuple_[int, object, object]:
        """ Delete(self: Range, Unit: object, Count: object) -> (int, object, object) """
        ...

    def DetectLanguage(self): # -> 
        """ DetectLanguage(self: Range) """
        ...

    def EndOf(self, Unit:object, Extend:object) -> Tuple_[int, object, object]:
        """ EndOf(self: Range, Unit: object, Extend: object) -> (int, object, object) """
        ...

    def Expand(self, Unit:object) -> Tuple_[int, object]:
        """ Expand(self: Range, Unit: object) -> (int, object) """
        ...

    def ExportAsFixedFormat(self, OutputFileName:str, ExportFormat:WdExportFormat, OpenAfterExport:bool, OptimizeFor:WdExportOptimizeFor, ExportCurrentPage:bool, Item:WdExportItem, IncludeDocProps:bool, KeepIRM:bool, CreateBookmarks:WdExportCreateBookmarks, DocStructureTags:bool, BitmapMissingFonts:bool, UseISO19005_1:bool, FixedFormatExtClassPtr:object) -> object:
        """ ExportAsFixedFormat(self: Range, OutputFileName: str, ExportFormat: WdExportFormat, OpenAfterExport: bool, OptimizeFor: WdExportOptimizeFor, ExportCurrentPage: bool, Item: WdExportItem, IncludeDocProps: bool, KeepIRM: bool, CreateBookmarks: WdExportCreateBookmarks, DocStructureTags: bool, BitmapMissingFonts: bool, UseISO19005_1: bool, FixedFormatExtClassPtr: object) -> object """
        ...

    def ExportFragment(self, FileName:str, Format:WdSaveFormat): # -> 
        """ ExportFragment(self: Range, FileName: str, Format: WdSaveFormat) """
        ...

    def GetSpellingSuggestions(self, CustomDictionary:object, IgnoreUppercase:object, MainDictionary:object, SuggestionMode:object, CustomDictionary2:object, CustomDictionary3:object, CustomDictionary4:object, CustomDictionary5:object, CustomDictionary6:object, CustomDictionary7:object, CustomDictionary8:object, CustomDictionary9:object, CustomDictionary10:object) -> Tuple_[SpellingSuggestions, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ GetSpellingSuggestions(self: Range, CustomDictionary: object, IgnoreUppercase: object, MainDictionary: object, SuggestionMode: object, CustomDictionary2: object, CustomDictionary3: object, CustomDictionary4: object, CustomDictionary5: object, CustomDictionary6: object, CustomDictionary7: object, CustomDictionary8: object, CustomDictionary9: object, CustomDictionary10: object) -> (SpellingSuggestions, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def GoTo(self, What:object, Which:object, Count:object, Name:object) -> Tuple_[Range, object, object, object, object]:
        """ GoTo(self: Range, What: object, Which: object, Count: object, Name: object) -> (Range, object, object, object, object) """
        ...

    def GoToEditableRange(self, EditorID:object) -> Tuple_[Range, object]:
        """ GoToEditableRange(self: Range, EditorID: object) -> (Range, object) """
        ...

    def GoToNext(self, What:WdGoToItem) -> Range:
        """ GoToNext(self: Range, What: WdGoToItem) -> Range """
        ...

    def GoToPrevious(self, What:WdGoToItem) -> Range:
        """ GoToPrevious(self: Range, What: WdGoToItem) -> Range """
        ...

    def ImportFragment(self, FileName:str, MatchDestination:bool): # -> 
        """ ImportFragment(self: Range, FileName: str, MatchDestination: bool) """
        ...

    def InRange(self, Range:Range) -> bool:
        """ InRange(self: Range, Range: Range) -> bool """
        ...

    def InsertAfter(self, Text:str): # -> 
        """ InsertAfter(self: Range, Text: str) """
        ...

    def InsertAlignmentTab(self, Alignment:int, RelativeTo:int): # -> 
        """ InsertAlignmentTab(self: Range, Alignment: int, RelativeTo: int) """
        ...

    def InsertAutoText(self): # -> 
        """ InsertAutoText(self: Range) """
        ...

    def InsertBefore(self, Text:str): # -> 
        """ InsertBefore(self: Range, Text: str) """
        ...

    def InsertBreak(self, Type:object) -> object:
        """ InsertBreak(self: Range, Type: object) -> object """
        ...

    def InsertCaption(self, Label:object, Title:object, TitleAutoText:object, Position:object, ExcludeLabel:object) -> Tuple_[object, object, object, object, object]:
        """ InsertCaption(self: Range, Label: object, Title: object, TitleAutoText: object, Position: object, ExcludeLabel: object) -> (object, object, object, object, object) """
        ...

    def InsertCaptionXP(self, Label:object, Title:object, TitleAutoText:object, Position:object) -> Tuple_[object, object, object, object]:
        """ InsertCaptionXP(self: Range, Label: object, Title: object, TitleAutoText: object, Position: object) -> (object, object, object, object) """
        ...

    def InsertCrossReference(self, ReferenceType:object, ReferenceKind:WdReferenceKind, ReferenceItem:object, InsertAsHyperlink:object, IncludePosition:object, SeparateNumbers:object, SeparatorString:object) -> Tuple_[object, object, object, object, object, object]:
        """ InsertCrossReference(self: Range, ReferenceType: object, ReferenceKind: WdReferenceKind, ReferenceItem: object, InsertAsHyperlink: object, IncludePosition: object, SeparateNumbers: object, SeparatorString: object) -> (object, object, object, object, object, object) """
        ...

    def InsertCrossReference_2002(self, ReferenceType:object, ReferenceKind:WdReferenceKind, ReferenceItem:object, InsertAsHyperlink:object, IncludePosition:object) -> Tuple_[object, object, object, object]:
        """ InsertCrossReference_2002(self: Range, ReferenceType: object, ReferenceKind: WdReferenceKind, ReferenceItem: object, InsertAsHyperlink: object, IncludePosition: object) -> (object, object, object, object) """
        ...

    def InsertDatabase(self, Format:object, Style:object, LinkToSource:object, Connection:object, SQLStatement:object, SQLStatement1:object, PasswordDocument:object, PasswordTemplate:object, WritePasswordDocument:object, WritePasswordTemplate:object, DataSource:object, From:object, To:object, IncludeFields:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ InsertDatabase(self: Range, Format: object, Style: object, LinkToSource: object, Connection: object, SQLStatement: object, SQLStatement1: object, PasswordDocument: object, PasswordTemplate: object, WritePasswordDocument: object, WritePasswordTemplate: object, DataSource: object, From: object, To: object, IncludeFields: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def InsertDateTime(self, DateTimeFormat:object, InsertAsField:object, InsertAsFullWidth:object, DateLanguage:object, CalendarType:object) -> Tuple_[object, object, object, object, object]:
        """ InsertDateTime(self: Range, DateTimeFormat: object, InsertAsField: object, InsertAsFullWidth: object, DateLanguage: object, CalendarType: object) -> (object, object, object, object, object) """
        ...

    def InsertDateTimeOld(self, DateTimeFormat:object, InsertAsField:object, InsertAsFullWidth:object) -> Tuple_[object, object, object]:
        """ InsertDateTimeOld(self: Range, DateTimeFormat: object, InsertAsField: object, InsertAsFullWidth: object) -> (object, object, object) """
        ...

    def InsertFile(self, FileName:str, Range:object, ConfirmConversions:object, Link:object, Attachment:object) -> Tuple_[object, object, object, object]:
        """ InsertFile(self: Range, FileName: str, Range: object, ConfirmConversions: object, Link: object, Attachment: object) -> (object, object, object, object) """
        ...

    def InsertParagraph(self): # -> 
        """ InsertParagraph(self: Range) """
        ...

    def InsertParagraphAfter(self): # -> 
        """ InsertParagraphAfter(self: Range) """
        ...

    def InsertParagraphBefore(self): # -> 
        """ InsertParagraphBefore(self: Range) """
        ...

    def InsertSymbol(self, CharacterNumber:int, Font:object, Unicode:object, Bias:object) -> Tuple_[object, object, object]:
        """ InsertSymbol(self: Range, CharacterNumber: int, Font: object, Unicode: object, Bias: object) -> (object, object, object) """
        ...

    def InsertXML(self, XML:str, Transform:object) -> object:
        """ InsertXML(self: Range, XML: str, Transform: object) -> object """
        ...

    def InStory(self, Range:Range) -> bool:
        """ InStory(self: Range, Range: Range) -> bool """
        ...

    def IsEqual(self, Range:Range) -> bool:
        """ IsEqual(self: Range, Range: Range) -> bool """
        ...

    def LookupNameProperties(self): # -> 
        """ LookupNameProperties(self: Range) """
        ...

    def ModifyEnclosure(self, Style:object, Symbol:object, EnclosedText:object) -> Tuple_[object, object, object]:
        """ ModifyEnclosure(self: Range, Style: object, Symbol: object, EnclosedText: object) -> (object, object, object) """
        ...

    def Move(self, Unit:object, Count:object) -> Tuple_[int, object, object]:
        """ Move(self: Range, Unit: object, Count: object) -> (int, object, object) """
        ...

    def MoveEnd(self, Unit:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveEnd(self: Range, Unit: object, Count: object) -> (int, object, object) """
        ...

    def MoveEndUntil(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveEndUntil(self: Range, Cset: object, Count: object) -> (int, object, object) """
        ...

    def MoveEndWhile(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveEndWhile(self: Range, Cset: object, Count: object) -> (int, object, object) """
        ...

    def MoveStart(self, Unit:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveStart(self: Range, Unit: object, Count: object) -> (int, object, object) """
        ...

    def MoveStartUntil(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveStartUntil(self: Range, Cset: object, Count: object) -> (int, object, object) """
        ...

    def MoveStartWhile(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveStartWhile(self: Range, Cset: object, Count: object) -> (int, object, object) """
        ...

    def MoveUntil(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveUntil(self: Range, Cset: object, Count: object) -> (int, object, object) """
        ...

    def MoveWhile(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveWhile(self: Range, Cset: object, Count: object) -> (int, object, object) """
        ...

    def Next(self, Unit:object, Count:object) -> Tuple_[Range, object, object]:
        """ Next(self: Range, Unit: object, Count: object) -> (Range, object, object) """
        ...

    def NextSubdocument(self): # -> 
        """ NextSubdocument(self: Range) """
        ...

    def Paste(self): # -> 
        """ Paste(self: Range) """
        ...

    def PasteAndFormat(self, Type:WdRecoveryType): # -> 
        """ PasteAndFormat(self: Range, Type: WdRecoveryType) """
        ...

    def PasteAppendTable(self): # -> 
        """ PasteAppendTable(self: Range) """
        ...

    def PasteAsNestedTable(self): # -> 
        """ PasteAsNestedTable(self: Range) """
        ...

    def PasteExcelTable(self, LinkedToExcel:bool, WordFormatting:bool, RTF:bool): # -> 
        """ PasteExcelTable(self: Range, LinkedToExcel: bool, WordFormatting: bool, RTF: bool) """
        ...

    def PasteSpecial(self, IconIndex:object, Link:object, Placement:object, DisplayAsIcon:object, DataType:object, IconFileName:object, IconLabel:object) -> Tuple_[object, object, object, object, object, object, object]:
        """ PasteSpecial(self: Range, IconIndex: object, Link: object, Placement: object, DisplayAsIcon: object, DataType: object, IconFileName: object, IconLabel: object) -> (object, object, object, object, object, object, object) """
        ...

    def PhoneticGuide(self, Text:str, Alignment:WdPhoneticGuideAlignmentType, Raise:int, FontSize:int, FontName:str): # -> 
        """ PhoneticGuide(self: Range, Text: str, Alignment: WdPhoneticGuideAlignmentType, Raise: int, FontSize: int, FontName: str) """
        ...

    def Previous(self, Unit:object, Count:object) -> Tuple_[Range, object, object]:
        """ Previous(self: Range, Unit: object, Count: object) -> (Range, object, object) """
        ...

    def PreviousSubdocument(self): # -> 
        """ PreviousSubdocument(self: Range) """
        ...

    def Relocate(self, Direction:int): # -> 
        """ Relocate(self: Range, Direction: int) """
        ...

    def Select(self): # -> 
        """ Select(self: Range) """
        ...

    def SetListLevel(self, Level:Int16): # -> 
        """ SetListLevel(self: Range, Level: Int16) """
        ...

    def SetRange(self, Start:int, End:int): # -> 
        """ SetRange(self: Range, Start: int, End: int) """
        ...

    def Sort(self, ExcludeHeader:object, FieldNumber:object, SortFieldType:object, SortOrder:object, FieldNumber2:object, SortFieldType2:object, SortOrder2:object, FieldNumber3:object, SortFieldType3:object, SortOrder3:object, SortColumn:object, Separator:object, CaseSensitive:object, BidiSort:object, IgnoreThe:object, IgnoreKashida:object, IgnoreDiacritics:object, IgnoreHe:object, LanguageID:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Sort(self: Range, ExcludeHeader: object, FieldNumber: object, SortFieldType: object, SortOrder: object, FieldNumber2: object, SortFieldType2: object, SortOrder2: object, FieldNumber3: object, SortFieldType3: object, SortOrder3: object, SortColumn: object, Separator: object, CaseSensitive: object, BidiSort: object, IgnoreThe: object, IgnoreKashida: object, IgnoreDiacritics: object, IgnoreHe: object, LanguageID: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def SortAscending(self): # -> 
        """ SortAscending(self: Range) """
        ...

    def SortByHeadings(self, SortFieldType:object, SortOrder:object, CaseSensitive:object, BidiSort:object, IgnoreThe:object, IgnoreKashida:object, IgnoreDiacritics:object, IgnoreHe:object, LanguageID:object) -> Tuple_[object, object, object, object, object, object, object, object, object]:
        """ SortByHeadings(self: Range, SortFieldType: object, SortOrder: object, CaseSensitive: object, BidiSort: object, IgnoreThe: object, IgnoreKashida: object, IgnoreDiacritics: object, IgnoreHe: object, LanguageID: object) -> (object, object, object, object, object, object, object, object, object) """
        ...

    def SortDescending(self): # -> 
        """ SortDescending(self: Range) """
        ...

    def SortOld(self, ExcludeHeader:object, FieldNumber:object, SortFieldType:object, SortOrder:object, FieldNumber2:object, SortFieldType2:object, SortOrder2:object, FieldNumber3:object, SortFieldType3:object, SortOrder3:object, SortColumn:object, Separator:object, CaseSensitive:object, LanguageID:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ SortOld(self: Range, ExcludeHeader: object, FieldNumber: object, SortFieldType: object, SortOrder: object, FieldNumber2: object, SortFieldType2: object, SortOrder2: object, FieldNumber3: object, SortFieldType3: object, SortOrder3: object, SortColumn: object, Separator: object, CaseSensitive: object, LanguageID: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def StartOf(self, Unit:object, Extend:object) -> Tuple_[int, object, object]:
        """ StartOf(self: Range, Unit: object, Extend: object) -> (int, object, object) """
        ...

    def SubscribeTo(self, Edition:str, Format:object) -> object:
        """ SubscribeTo(self: Range, Edition: str, Format: object) -> object """
        ...

    def TCSCConverter(self, WdTCSCConverterDirection:WdTCSCConverterDirection, CommonTerms:bool, UseVariants:bool): # -> 
        """ TCSCConverter(self: Range, WdTCSCConverterDirection: WdTCSCConverterDirection, CommonTerms: bool, UseVariants: bool) """
        ...

    def WholeStory(self): # -> 
        """ WholeStory(self: Range) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ReadabilityStatistic: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ReadabilityStatistic) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ReadabilityStatistic) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ReadabilityStatistic) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ReadabilityStatistic) -> object """
        ...

    @property
    def Value(self) -> Single:
        """ Get: Value(self: ReadabilityStatistic) -> Single """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ReadabilityStatistics(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ReadabilityStatistics) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ReadabilityStatistics) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ReadabilityStatistics) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ReadabilityStatistics) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class RecentFile: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RecentFile) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: RecentFile) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: RecentFile) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: RecentFile) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RecentFile) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: RecentFile) -> str """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: RecentFile) -> bool
        Set: ReadOnly(self: RecentFile) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: RecentFile) """
        ...

    def Open(self) -> Document:
        """ Open(self: RecentFile) -> Document """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class RecentFiles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RecentFiles) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: RecentFiles) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: RecentFiles) -> int """
        ...

    @property
    def Maximum(self) -> int:
        """
        Get: Maximum(self: RecentFiles) -> int
        Set: Maximum(self: RecentFiles) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RecentFiles) -> object """
        ...


    def Add(self, Document:object, ReadOnly:object) -> Tuple_[RecentFile, object, object]:
        """ Add(self: RecentFiles, Document: object, ReadOnly: object) -> (RecentFile, object, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Rectangle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Rectangle) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Rectangle) -> int """
        ...

    @property
    def Height(self) -> int:
        """ Get: Height(self: Rectangle) -> int """
        ...

    @property
    def Left(self) -> int:
        """ Get: Left(self: Rectangle) -> int """
        ...

    @property
    def Lines(self) -> Lines:
        """ Get: Lines(self: Rectangle) -> Lines """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Rectangle) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Rectangle) -> Range """
        ...

    @property
    def RectangleType(self) -> WdRectangleType:
        """ Get: RectangleType(self: Rectangle) -> WdRectangleType """
        ...

    @property
    def Top(self) -> int:
        """ Get: Top(self: Rectangle) -> int """
        ...

    @property
    def Width(self) -> int:
        """ Get: Width(self: Rectangle) -> int """
        ...



class Rectangles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Rectangles) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Rectangles) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Rectangles) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Rectangles) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ReflectionFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ReflectionFormat) -> Application """
        ...

    @property
    def Blur(self) -> Single:
        """
        Get: Blur(self: ReflectionFormat) -> Single
        Set: Blur(self: ReflectionFormat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ReflectionFormat) -> int """
        ...

    @property
    def Offset(self) -> Single:
        """
        Get: Offset(self: ReflectionFormat) -> Single
        Set: Offset(self: ReflectionFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ReflectionFormat) -> object """
        ...

    @property
    def Size(self) -> Single:
        """
        Get: Size(self: ReflectionFormat) -> Single
        Set: Size(self: ReflectionFormat) = value
        """
        ...

    @property
    def Transparency(self) -> Single:
        """
        Get: Transparency(self: ReflectionFormat) -> Single
        Set: Transparency(self: ReflectionFormat) = value
        """
        ...

    @property
    def Type(self): # -> MsoReflectionType
        """
        Get: Type(self: ReflectionFormat) -> MsoReflectionType
        Set: Type(self: ReflectionFormat) = value
        """
        ...



class RepeatingSectionItem: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RepeatingSectionItem) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: RepeatingSectionItem) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RepeatingSectionItem) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: RepeatingSectionItem) -> Range """
        ...


    def Delete(self): # -> 
        """ Delete(self: RepeatingSectionItem) """
        ...

    def InsertItemAfter(self) -> RepeatingSectionItem:
        """ InsertItemAfter(self: RepeatingSectionItem) -> RepeatingSectionItem """
        ...

    def InsertItemBefore(self) -> RepeatingSectionItem:
        """ InsertItemBefore(self: RepeatingSectionItem) -> RepeatingSectionItem """
        ...


class RepeatingSectionItemColl(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RepeatingSectionItemColl) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: RepeatingSectionItemColl) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: RepeatingSectionItemColl) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RepeatingSectionItemColl) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Replacement: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Replacement) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Replacement) -> int """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: Replacement) -> Font
        Set: Font(self: Replacement) = value
        """
        ...

    @property
    def Frame(self) -> Frame:
        """ Get: Frame(self: Replacement) -> Frame """
        ...

    @property
    def Highlight(self) -> int:
        """
        Get: Highlight(self: Replacement) -> int
        Set: Highlight(self: Replacement) = value
        """
        ...

    @property
    def LanguageID(self) -> WdLanguageID:
        """
        Get: LanguageID(self: Replacement) -> WdLanguageID
        Set: LanguageID(self: Replacement) = value
        """
        ...

    @property
    def LanguageIDFarEast(self) -> WdLanguageID:
        """
        Get: LanguageIDFarEast(self: Replacement) -> WdLanguageID
        Set: LanguageIDFarEast(self: Replacement) = value
        """
        ...

    @property
    def NoProofing(self) -> int:
        """
        Get: NoProofing(self: Replacement) -> int
        Set: NoProofing(self: Replacement) = value
        """
        ...

    @property
    def ParagraphFormat(self) -> ParagraphFormat:
        """
        Get: ParagraphFormat(self: Replacement) -> ParagraphFormat
        Set: ParagraphFormat(self: Replacement) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Replacement) -> object """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: Replacement) -> object
        Set: Style(self: Replacement) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Replacement) -> str
        Set: Text(self: Replacement) = value
        """
        ...


    def ClearFormatting(self): # -> 
        """ ClearFormatting(self: Replacement) """
        ...


class Research: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Research) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Research) -> int """
        ...

    @property
    def FavoriteService(self) -> str:
        """
        Get: FavoriteService(self: Research) -> str
        Set: FavoriteService(self: Research) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Research) -> object """
        ...


    def IsResearchService(self, ServiceID:str) -> bool:
        """ IsResearchService(self: Research, ServiceID: str) -> bool """
        ...

    def Query(self, ServiceID:str, QueryString:str, QueryLanguage:WdLanguageID, UseSelection:bool, LaunchQuery:bool) -> object:
        """ Query(self: Research, ServiceID: str, QueryString: str, QueryLanguage: WdLanguageID, UseSelection: bool, LaunchQuery: bool) -> object """
        ...

    def SetLanguagePair(self, LanguageFrom:WdLanguageID, LanguageTo:WdLanguageID) -> object:
        """ SetLanguagePair(self: Research, LanguageFrom: WdLanguageID, LanguageTo: WdLanguageID) -> object """
        ...


class Reviewer: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Reviewer) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Reviewer) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Reviewer) -> object """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Reviewer) -> bool
        Set: Visible(self: Reviewer) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Reviewers(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Reviewers) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Reviewers) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Reviewers) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Reviewers) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Revision: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Revision) -> Application """
        ...

    @property
    def Author(self) -> str:
        """ Get: Author(self: Revision) -> str """
        ...

    @property
    def Cells(self) -> Cells:
        """ Get: Cells(self: Revision) -> Cells """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Revision) -> int """
        ...

    @property
    def Date(self) -> DateTime:
        """ Get: Date(self: Revision) -> DateTime """
        ...

    @property
    def FormatDescription(self) -> str:
        """ Get: FormatDescription(self: Revision) -> str """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Revision) -> int """
        ...

    @property
    def MovedRange(self) -> Range:
        """ Get: MovedRange(self: Revision) -> Range """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Revision) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Revision) -> Range """
        ...

    @property
    def Style(self) -> Style:
        """ Get: Style(self: Revision) -> Style """
        ...

    @property
    def Type(self) -> WdRevisionType:
        """ Get: Type(self: Revision) -> WdRevisionType """
        ...


    def Accept(self): # -> 
        """ Accept(self: Revision) """
        ...

    def Reject(self): # -> 
        """ Reject(self: Revision) """
        ...


class Revisions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Revisions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Revisions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Revisions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Revisions) -> object """
        ...


    def AcceptAll(self): # -> 
        """ AcceptAll(self: Revisions) """
        ...

    def RejectAll(self): # -> 
        """ RejectAll(self: Revisions) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class RevisionsFilter: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Markup(self) -> WdRevisionsMarkup:
        """
        Get: Markup(self: RevisionsFilter) -> WdRevisionsMarkup
        Set: Markup(self: RevisionsFilter) = value
        """
        ...

    @property
    def Reviewers(self) -> Reviewers:
        """ Get: Reviewers(self: RevisionsFilter) -> Reviewers """
        ...

    @property
    def View(self) -> WdRevisionsView:
        """
        Get: View(self: RevisionsFilter) -> WdRevisionsView
        Set: View(self: RevisionsFilter) = value
        """
        ...


    def ToggleShowAllReviewers(self): # -> 
        """ ToggleShowAllReviewers(self: RevisionsFilter) """
        ...


class RoutingSlip: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: RoutingSlip) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: RoutingSlip) -> int """
        ...

    @property
    def Delivery(self) -> WdRoutingSlipDelivery:
        """
        Get: Delivery(self: RoutingSlip) -> WdRoutingSlipDelivery
        Set: Delivery(self: RoutingSlip) = value
        """
        ...

    @property
    def Message(self) -> str:
        """
        Get: Message(self: RoutingSlip) -> str
        Set: Message(self: RoutingSlip) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: RoutingSlip) -> object """
        ...

    @property
    def Protect(self) -> WdProtectionType:
        """
        Get: Protect(self: RoutingSlip) -> WdProtectionType
        Set: Protect(self: RoutingSlip) = value
        """
        ...

    @property
    def ReturnWhenDone(self) -> bool:
        """
        Get: ReturnWhenDone(self: RoutingSlip) -> bool
        Set: ReturnWhenDone(self: RoutingSlip) = value
        """
        ...

    @property
    def Status(self) -> WdRoutingSlipStatus:
        """ Get: Status(self: RoutingSlip) -> WdRoutingSlipStatus """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: RoutingSlip) -> str
        Set: Subject(self: RoutingSlip) = value
        """
        ...

    @property
    def TrackStatus(self) -> bool:
        """
        Get: TrackStatus(self: RoutingSlip) -> bool
        Set: TrackStatus(self: RoutingSlip) = value
        """
        ...


    def AddRecipient(self, Recipient:str): # -> 
        """ AddRecipient(self: RoutingSlip, Recipient: str) """
        ...

    def Reset(self): # -> 
        """ Reset(self: RoutingSlip) """
        ...


class Row: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> WdRowAlignment:
        """
        Get: Alignment(self: Row) -> WdRowAlignment
        Set: Alignment(self: Row) = value
        """
        ...

    @property
    def AllowBreakAcrossPages(self) -> int:
        """
        Get: AllowBreakAcrossPages(self: Row) -> int
        Set: AllowBreakAcrossPages(self: Row) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Row) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Row) -> Borders
        Set: Borders(self: Row) = value
        """
        ...

    @property
    def Cells(self) -> Cells:
        """ Get: Cells(self: Row) -> Cells """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Row) -> int """
        ...

    @property
    def HeadingFormat(self) -> int:
        """
        Get: HeadingFormat(self: Row) -> int
        Set: HeadingFormat(self: Row) = value
        """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: Row) -> Single
        Set: Height(self: Row) = value
        """
        ...

    @property
    def HeightRule(self) -> WdRowHeightRule:
        """
        Get: HeightRule(self: Row) -> WdRowHeightRule
        Set: HeightRule(self: Row) = value
        """
        ...

    @property
    def ID(self) -> str:
        """
        Get: ID(self: Row) -> str
        Set: ID(self: Row) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Row) -> int """
        ...

    @property
    def IsFirst(self) -> bool:
        """ Get: IsFirst(self: Row) -> bool """
        ...

    @property
    def IsLast(self) -> bool:
        """ Get: IsLast(self: Row) -> bool """
        ...

    @property
    def LeftIndent(self) -> Single:
        """
        Get: LeftIndent(self: Row) -> Single
        Set: LeftIndent(self: Row) = value
        """
        ...

    @property
    def NestingLevel(self) -> int:
        """ Get: NestingLevel(self: Row) -> int """
        ...

    @property
    def Next(self) -> Row:
        """ Get: Next(self: Row) -> Row """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Row) -> object """
        ...

    @property
    def Previous(self) -> Row:
        """ Get: Previous(self: Row) -> Row """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Row) -> Range """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Row) -> Shading """
        ...

    @property
    def SpaceBetweenColumns(self) -> Single:
        """
        Get: SpaceBetweenColumns(self: Row) -> Single
        Set: SpaceBetweenColumns(self: Row) = value
        """
        ...


    def ConvertToText(self, Separator:object, NestedTables:object) -> Tuple_[Range, object, object]:
        """ ConvertToText(self: Row, Separator: object, NestedTables: object) -> (Range, object, object) """
        ...

    def ConvertToTextOld(self, Separator:object) -> Tuple_[Range, object]:
        """ ConvertToTextOld(self: Row, Separator: object) -> (Range, object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Row) """
        ...

    def Select(self): # -> 
        """ Select(self: Row) """
        ...

    def SetHeight(self, RowHeight:Single, HeightRule:WdRowHeightRule): # -> 
        """ SetHeight(self: Row, RowHeight: Single, HeightRule: WdRowHeightRule) """
        ...

    def SetLeftIndent(self, LeftIndent:Single, RulerStyle:WdRulerStyle): # -> 
        """ SetLeftIndent(self: Row, LeftIndent: Single, RulerStyle: WdRulerStyle) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Rows(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> WdRowAlignment:
        """
        Get: Alignment(self: Rows) -> WdRowAlignment
        Set: Alignment(self: Rows) = value
        """
        ...

    @property
    def AllowBreakAcrossPages(self) -> int:
        """
        Get: AllowBreakAcrossPages(self: Rows) -> int
        Set: AllowBreakAcrossPages(self: Rows) = value
        """
        ...

    @property
    def AllowOverlap(self) -> int:
        """
        Get: AllowOverlap(self: Rows) -> int
        Set: AllowOverlap(self: Rows) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Rows) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Rows) -> Borders
        Set: Borders(self: Rows) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Rows) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Rows) -> int """
        ...

    @property
    def DistanceBottom(self) -> Single:
        """
        Get: DistanceBottom(self: Rows) -> Single
        Set: DistanceBottom(self: Rows) = value
        """
        ...

    @property
    def DistanceLeft(self) -> Single:
        """
        Get: DistanceLeft(self: Rows) -> Single
        Set: DistanceLeft(self: Rows) = value
        """
        ...

    @property
    def DistanceRight(self) -> Single:
        """
        Get: DistanceRight(self: Rows) -> Single
        Set: DistanceRight(self: Rows) = value
        """
        ...

    @property
    def DistanceTop(self) -> Single:
        """
        Get: DistanceTop(self: Rows) -> Single
        Set: DistanceTop(self: Rows) = value
        """
        ...

    @property
    def First(self) -> Row:
        """ Get: First(self: Rows) -> Row """
        ...

    @property
    def HeadingFormat(self) -> int:
        """
        Get: HeadingFormat(self: Rows) -> int
        Set: HeadingFormat(self: Rows) = value
        """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: Rows) -> Single
        Set: Height(self: Rows) = value
        """
        ...

    @property
    def HeightRule(self) -> WdRowHeightRule:
        """
        Get: HeightRule(self: Rows) -> WdRowHeightRule
        Set: HeightRule(self: Rows) = value
        """
        ...

    @property
    def HorizontalPosition(self) -> Single:
        """
        Get: HorizontalPosition(self: Rows) -> Single
        Set: HorizontalPosition(self: Rows) = value
        """
        ...

    @property
    def Last(self) -> Row:
        """ Get: Last(self: Rows) -> Row """
        ...

    @property
    def LeftIndent(self) -> Single:
        """
        Get: LeftIndent(self: Rows) -> Single
        Set: LeftIndent(self: Rows) = value
        """
        ...

    @property
    def NestingLevel(self) -> int:
        """ Get: NestingLevel(self: Rows) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Rows) -> object """
        ...

    @property
    def RelativeHorizontalPosition(self) -> WdRelativeHorizontalPosition:
        """
        Get: RelativeHorizontalPosition(self: Rows) -> WdRelativeHorizontalPosition
        Set: RelativeHorizontalPosition(self: Rows) = value
        """
        ...

    @property
    def RelativeVerticalPosition(self) -> WdRelativeVerticalPosition:
        """
        Get: RelativeVerticalPosition(self: Rows) -> WdRelativeVerticalPosition
        Set: RelativeVerticalPosition(self: Rows) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Rows) -> Shading """
        ...

    @property
    def SpaceBetweenColumns(self) -> Single:
        """
        Get: SpaceBetweenColumns(self: Rows) -> Single
        Set: SpaceBetweenColumns(self: Rows) = value
        """
        ...

    @property
    def TableDirection(self) -> WdTableDirection:
        """
        Get: TableDirection(self: Rows) -> WdTableDirection
        Set: TableDirection(self: Rows) = value
        """
        ...

    @property
    def VerticalPosition(self) -> Single:
        """
        Get: VerticalPosition(self: Rows) -> Single
        Set: VerticalPosition(self: Rows) = value
        """
        ...

    @property
    def WrapAroundText(self) -> int:
        """
        Get: WrapAroundText(self: Rows) -> int
        Set: WrapAroundText(self: Rows) = value
        """
        ...


    def Add(self, BeforeRow:object) -> Tuple_[Row, object]:
        """ Add(self: Rows, BeforeRow: object) -> (Row, object) """
        ...

    def ConvertToText(self, Separator:object, NestedTables:object) -> Tuple_[Range, object, object]:
        """ ConvertToText(self: Rows, Separator: object, NestedTables: object) -> (Range, object, object) """
        ...

    def ConvertToTextOld(self, Separator:object) -> Tuple_[Range, object]:
        """ ConvertToTextOld(self: Rows, Separator: object) -> (Range, object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Rows) """
        ...

    def DistributeHeight(self): # -> 
        """ DistributeHeight(self: Rows) """
        ...

    def Select(self): # -> 
        """ Select(self: Rows) """
        ...

    def SetHeight(self, RowHeight:Single, HeightRule:WdRowHeightRule): # -> 
        """ SetHeight(self: Rows, RowHeight: Single, HeightRule: WdRowHeightRule) """
        ...

    def SetLeftIndent(self, LeftIndent:Single, RulerStyle:WdRulerStyle): # -> 
        """ SetLeftIndent(self: Rows, LeftIndent: Single, RulerStyle: WdRulerStyle) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Section: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Section) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Section) -> Borders
        Set: Borders(self: Section) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Section) -> int """
        ...

    @property
    def Footers(self) -> HeadersFooters:
        """ Get: Footers(self: Section) -> HeadersFooters """
        ...

    @property
    def Headers(self) -> HeadersFooters:
        """ Get: Headers(self: Section) -> HeadersFooters """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Section) -> int """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """
        Get: PageSetup(self: Section) -> PageSetup
        Set: PageSetup(self: Section) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Section) -> object """
        ...

    @property
    def ProtectedForForms(self) -> bool:
        """
        Get: ProtectedForForms(self: Section) -> bool
        Set: ProtectedForForms(self: Section) = value
        """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Section) -> Range """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Sections(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Sections) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Sections) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Sections) -> int """
        ...

    @property
    def First(self) -> Section:
        """ Get: First(self: Sections) -> Section """
        ...

    @property
    def Last(self) -> Section:
        """ Get: Last(self: Sections) -> Section """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """
        Get: PageSetup(self: Sections) -> PageSetup
        Set: PageSetup(self: Sections) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Sections) -> object """
        ...


    def Add(self, Range:object, Start:object) -> Tuple_[Section, object, object]:
        """ Add(self: Sections, Range: object, Start: object) -> (Section, object, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Selection: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Active(self) -> bool:
        """ Get: Active(self: Selection) -> bool """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Selection) -> Application """
        ...

    @property
    def BookmarkID(self) -> int:
        """ Get: BookmarkID(self: Selection) -> int """
        ...

    @property
    def Bookmarks(self) -> Bookmarks:
        """ Get: Bookmarks(self: Selection) -> Bookmarks """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Selection) -> Borders
        Set: Borders(self: Selection) = value
        """
        ...

    @property
    def Cells(self) -> Cells:
        """ Get: Cells(self: Selection) -> Cells """
        ...

    @property
    def Characters(self) -> Characters:
        """ Get: Characters(self: Selection) -> Characters """
        ...

    @property
    def ChildShapeRange(self) -> ShapeRange:
        """ Get: ChildShapeRange(self: Selection) -> ShapeRange """
        ...

    @property
    def Columns(self) -> Columns:
        """ Get: Columns(self: Selection) -> Columns """
        ...

    @property
    def ColumnSelectMode(self) -> bool:
        """
        Get: ColumnSelectMode(self: Selection) -> bool
        Set: ColumnSelectMode(self: Selection) = value
        """
        ...

    @property
    def Comments(self) -> Comments:
        """ Get: Comments(self: Selection) -> Comments """
        ...

    @property
    def ContentControls(self) -> ContentControls:
        """ Get: ContentControls(self: Selection) -> ContentControls """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Selection) -> int """
        ...

    @property
    def Document(self) -> Document:
        """ Get: Document(self: Selection) -> Document """
        ...

    @property
    def Editors(self) -> Editors:
        """ Get: Editors(self: Selection) -> Editors """
        ...

    @property
    def End(self) -> int:
        """
        Get: End(self: Selection) -> int
        Set: End(self: Selection) = value
        """
        ...

    @property
    def EndnoteOptions(self) -> EndnoteOptions:
        """ Get: EndnoteOptions(self: Selection) -> EndnoteOptions """
        ...

    @property
    def Endnotes(self) -> Endnotes:
        """ Get: Endnotes(self: Selection) -> Endnotes """
        ...

    @property
    def EnhMetaFileBits(self) -> object:
        """ Get: EnhMetaFileBits(self: Selection) -> object """
        ...

    @property
    def ExtendMode(self) -> bool:
        """
        Get: ExtendMode(self: Selection) -> bool
        Set: ExtendMode(self: Selection) = value
        """
        ...

    @property
    def Fields(self) -> Fields:
        """ Get: Fields(self: Selection) -> Fields """
        ...

    @property
    def Find(self) -> Find:
        """ Get: Find(self: Selection) -> Find """
        ...

    @property
    def FitTextWidth(self) -> Single:
        """
        Get: FitTextWidth(self: Selection) -> Single
        Set: FitTextWidth(self: Selection) = value
        """
        ...

    @property
    def Flags(self) -> WdSelectionFlags:
        """
        Get: Flags(self: Selection) -> WdSelectionFlags
        Set: Flags(self: Selection) = value
        """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: Selection) -> Font
        Set: Font(self: Selection) = value
        """
        ...

    @property
    def FootnoteOptions(self) -> FootnoteOptions:
        """ Get: FootnoteOptions(self: Selection) -> FootnoteOptions """
        ...

    @property
    def Footnotes(self) -> Footnotes:
        """ Get: Footnotes(self: Selection) -> Footnotes """
        ...

    @property
    def FormattedText(self) -> Range:
        """
        Get: FormattedText(self: Selection) -> Range
        Set: FormattedText(self: Selection) = value
        """
        ...

    @property
    def FormFields(self) -> FormFields:
        """ Get: FormFields(self: Selection) -> FormFields """
        ...

    @property
    def Frames(self) -> Frames:
        """ Get: Frames(self: Selection) -> Frames """
        ...

    @property
    def HasChildShapeRange(self) -> bool:
        """ Get: HasChildShapeRange(self: Selection) -> bool """
        ...

    @property
    def HeaderFooter(self) -> HeaderFooter:
        """ Get: HeaderFooter(self: Selection) -> HeaderFooter """
        ...

    @property
    def HTMLDivisions(self) -> HTMLDivisions:
        """ Get: HTMLDivisions(self: Selection) -> HTMLDivisions """
        ...

    @property
    def Hyperlinks(self) -> Hyperlinks:
        """ Get: Hyperlinks(self: Selection) -> Hyperlinks """
        ...

    @property
    def InlineShapes(self) -> InlineShapes:
        """ Get: InlineShapes(self: Selection) -> InlineShapes """
        ...

    @property
    def IPAtEndOfLine(self) -> bool:
        """ Get: IPAtEndOfLine(self: Selection) -> bool """
        ...

    @property
    def IsEndOfRowMark(self) -> bool:
        """ Get: IsEndOfRowMark(self: Selection) -> bool """
        ...

    @property
    def LanguageDetected(self) -> bool:
        """
        Get: LanguageDetected(self: Selection) -> bool
        Set: LanguageDetected(self: Selection) = value
        """
        ...

    @property
    def LanguageID(self) -> WdLanguageID:
        """
        Get: LanguageID(self: Selection) -> WdLanguageID
        Set: LanguageID(self: Selection) = value
        """
        ...

    @property
    def LanguageIDFarEast(self) -> WdLanguageID:
        """
        Get: LanguageIDFarEast(self: Selection) -> WdLanguageID
        Set: LanguageIDFarEast(self: Selection) = value
        """
        ...

    @property
    def LanguageIDOther(self) -> WdLanguageID:
        """
        Get: LanguageIDOther(self: Selection) -> WdLanguageID
        Set: LanguageIDOther(self: Selection) = value
        """
        ...

    @property
    def NoProofing(self) -> int:
        """
        Get: NoProofing(self: Selection) -> int
        Set: NoProofing(self: Selection) = value
        """
        ...

    @property
    def OMaths(self) -> OMaths:
        """ Get: OMaths(self: Selection) -> OMaths """
        ...

    @property
    def Orientation(self) -> WdTextOrientation:
        """
        Get: Orientation(self: Selection) -> WdTextOrientation
        Set: Orientation(self: Selection) = value
        """
        ...

    @property
    def PageSetup(self) -> PageSetup:
        """
        Get: PageSetup(self: Selection) -> PageSetup
        Set: PageSetup(self: Selection) = value
        """
        ...

    @property
    def ParagraphFormat(self) -> ParagraphFormat:
        """
        Get: ParagraphFormat(self: Selection) -> ParagraphFormat
        Set: ParagraphFormat(self: Selection) = value
        """
        ...

    @property
    def Paragraphs(self) -> Paragraphs:
        """ Get: Paragraphs(self: Selection) -> Paragraphs """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Selection) -> object """
        ...

    @property
    def ParentContentControl(self) -> ContentControl:
        """ Get: ParentContentControl(self: Selection) -> ContentControl """
        ...

    @property
    def PreviousBookmarkID(self) -> int:
        """ Get: PreviousBookmarkID(self: Selection) -> int """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Selection) -> Range """
        ...

    @property
    def Rows(self) -> Rows:
        """ Get: Rows(self: Selection) -> Rows """
        ...

    @property
    def Sections(self) -> Sections:
        """ Get: Sections(self: Selection) -> Sections """
        ...

    @property
    def Sentences(self) -> Sentences:
        """ Get: Sentences(self: Selection) -> Sentences """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Selection) -> Shading """
        ...

    @property
    def ShapeRange(self) -> ShapeRange:
        """ Get: ShapeRange(self: Selection) -> ShapeRange """
        ...

    @property
    def SmartTags(self) -> SmartTags:
        """ Get: SmartTags(self: Selection) -> SmartTags """
        ...

    @property
    def Start(self) -> int:
        """
        Get: Start(self: Selection) -> int
        Set: Start(self: Selection) = value
        """
        ...

    @property
    def StartIsActive(self) -> bool:
        """
        Get: StartIsActive(self: Selection) -> bool
        Set: StartIsActive(self: Selection) = value
        """
        ...

    @property
    def StoryLength(self) -> int:
        """ Get: StoryLength(self: Selection) -> int """
        ...

    @property
    def StoryType(self) -> WdStoryType:
        """ Get: StoryType(self: Selection) -> WdStoryType """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: Selection) -> object
        Set: Style(self: Selection) = value
        """
        ...

    @property
    def Tables(self) -> Tables:
        """ Get: Tables(self: Selection) -> Tables """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Selection) -> str
        Set: Text(self: Selection) = value
        """
        ...

    @property
    def TopLevelTables(self) -> Tables:
        """ Get: TopLevelTables(self: Selection) -> Tables """
        ...

    @property
    def Type(self) -> WdSelectionType:
        """ Get: Type(self: Selection) -> WdSelectionType """
        ...

    @property
    def WordOpenXML(self) -> str:
        """ Get: WordOpenXML(self: Selection) -> str """
        ...

    @property
    def Words(self) -> Words:
        """ Get: Words(self: Selection) -> Words """
        ...

    @property
    def XMLNodes(self) -> XMLNodes:
        """ Get: XMLNodes(self: Selection) -> XMLNodes """
        ...

    @property
    def XMLParentNode(self) -> XMLNode:
        """ Get: XMLParentNode(self: Selection) -> XMLNode """
        ...


    def BoldRun(self): # -> 
        """ BoldRun(self: Selection) """
        ...

    def Calculate(self) -> Single:
        """ Calculate(self: Selection) -> Single """
        ...

    def ClearCharacterAllFormatting(self): # -> 
        """ ClearCharacterAllFormatting(self: Selection) """
        ...

    def ClearCharacterDirectFormatting(self): # -> 
        """ ClearCharacterDirectFormatting(self: Selection) """
        ...

    def ClearCharacterStyle(self): # -> 
        """ ClearCharacterStyle(self: Selection) """
        ...

    def ClearFormatting(self): # -> 
        """ ClearFormatting(self: Selection) """
        ...

    def ClearParagraphAllFormatting(self): # -> 
        """ ClearParagraphAllFormatting(self: Selection) """
        ...

    def ClearParagraphDirectFormatting(self): # -> 
        """ ClearParagraphDirectFormatting(self: Selection) """
        ...

    def ClearParagraphStyle(self): # -> 
        """ ClearParagraphStyle(self: Selection) """
        ...

    def Collapse(self, Direction:object) -> object:
        """ Collapse(self: Selection, Direction: object) -> object """
        ...

    def ConvertToTable(self, Separator:object, NumRows:object, NumColumns:object, InitialColumnWidth:object, Format:object, ApplyBorders:object, ApplyShading:object, ApplyFont:object, ApplyColor:object, ApplyHeadingRows:object, ApplyLastRow:object, ApplyFirstColumn:object, ApplyLastColumn:object, AutoFit:object, AutoFitBehavior:object, DefaultTableBehavior:object) -> Tuple_[Table, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ ConvertToTable(self: Selection, Separator: object, NumRows: object, NumColumns: object, InitialColumnWidth: object, Format: object, ApplyBorders: object, ApplyShading: object, ApplyFont: object, ApplyColor: object, ApplyHeadingRows: object, ApplyLastRow: object, ApplyFirstColumn: object, ApplyLastColumn: object, AutoFit: object, AutoFitBehavior: object, DefaultTableBehavior: object) -> (Table, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def ConvertToTableOld(self, Separator:object, NumRows:object, NumColumns:object, InitialColumnWidth:object, Format:object, ApplyBorders:object, ApplyShading:object, ApplyFont:object, ApplyColor:object, ApplyHeadingRows:object, ApplyLastRow:object, ApplyFirstColumn:object, ApplyLastColumn:object, AutoFit:object) -> Tuple_[Table, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ ConvertToTableOld(self: Selection, Separator: object, NumRows: object, NumColumns: object, InitialColumnWidth: object, Format: object, ApplyBorders: object, ApplyShading: object, ApplyFont: object, ApplyColor: object, ApplyHeadingRows: object, ApplyLastRow: object, ApplyFirstColumn: object, ApplyLastColumn: object, AutoFit: object) -> (Table, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Copy(self): # -> 
        """ Copy(self: Selection) """
        ...

    def CopyAsPicture(self): # -> 
        """ CopyAsPicture(self: Selection) """
        ...

    def CopyFormat(self): # -> 
        """ CopyFormat(self: Selection) """
        ...

    def CreateAutoTextEntry(self, Name:str, StyleName:str) -> AutoTextEntry:
        """ CreateAutoTextEntry(self: Selection, Name: str, StyleName: str) -> AutoTextEntry """
        ...

    def CreateTextbox(self): # -> 
        """ CreateTextbox(self: Selection) """
        ...

    def Cut(self): # -> 
        """ Cut(self: Selection) """
        ...

    def Delete(self, Unit:object, Count:object) -> Tuple_[int, object, object]:
        """ Delete(self: Selection, Unit: object, Count: object) -> (int, object, object) """
        ...

    def DetectLanguage(self): # -> 
        """ DetectLanguage(self: Selection) """
        ...

    def EndKey(self, Unit:object, Extend:object) -> Tuple_[int, object, object]:
        """ EndKey(self: Selection, Unit: object, Extend: object) -> (int, object, object) """
        ...

    def EndOf(self, Unit:object, Extend:object) -> Tuple_[int, object, object]:
        """ EndOf(self: Selection, Unit: object, Extend: object) -> (int, object, object) """
        ...

    def EscapeKey(self): # -> 
        """ EscapeKey(self: Selection) """
        ...

    def Expand(self, Unit:object) -> Tuple_[int, object]:
        """ Expand(self: Selection, Unit: object) -> (int, object) """
        ...

    def ExportAsFixedFormat(self, OutputFileName:str, ExportFormat:WdExportFormat, OpenAfterExport:bool, OptimizeFor:WdExportOptimizeFor, ExportCurrentPage:bool, Item:WdExportItem, IncludeDocProps:bool, KeepIRM:bool, CreateBookmarks:WdExportCreateBookmarks, DocStructureTags:bool, BitmapMissingFonts:bool, UseISO19005_1:bool, FixedFormatExtClassPtr:object) -> object:
        """ ExportAsFixedFormat(self: Selection, OutputFileName: str, ExportFormat: WdExportFormat, OpenAfterExport: bool, OptimizeFor: WdExportOptimizeFor, ExportCurrentPage: bool, Item: WdExportItem, IncludeDocProps: bool, KeepIRM: bool, CreateBookmarks: WdExportCreateBookmarks, DocStructureTags: bool, BitmapMissingFonts: bool, UseISO19005_1: bool, FixedFormatExtClassPtr: object) -> object """
        ...

    def Extend(self, Character:object) -> object:
        """ Extend(self: Selection, Character: object) -> object """
        ...

    def GoTo(self, What:object, Which:object, Count:object, Name:object) -> Tuple_[Range, object, object, object, object]:
        """ GoTo(self: Selection, What: object, Which: object, Count: object, Name: object) -> (Range, object, object, object, object) """
        ...

    def GoToEditableRange(self, EditorID:object) -> Tuple_[Range, object]:
        """ GoToEditableRange(self: Selection, EditorID: object) -> (Range, object) """
        ...

    def GoToNext(self, What:WdGoToItem) -> Range:
        """ GoToNext(self: Selection, What: WdGoToItem) -> Range """
        ...

    def GoToPrevious(self, What:WdGoToItem) -> Range:
        """ GoToPrevious(self: Selection, What: WdGoToItem) -> Range """
        ...

    def HomeKey(self, Unit:object, Extend:object) -> Tuple_[int, object, object]:
        """ HomeKey(self: Selection, Unit: object, Extend: object) -> (int, object, object) """
        ...

    def InRange(self, Range:Range) -> bool:
        """ InRange(self: Selection, Range: Range) -> bool """
        ...

    def InsertAfter(self, Text:str): # -> 
        """ InsertAfter(self: Selection, Text: str) """
        ...

    def InsertBefore(self, Text:str): # -> 
        """ InsertBefore(self: Selection, Text: str) """
        ...

    def InsertBreak(self, Type:object) -> object:
        """ InsertBreak(self: Selection, Type: object) -> object """
        ...

    def InsertCaption(self, Label:object, Title:object, TitleAutoText:object, Position:object, ExcludeLabel:object) -> Tuple_[object, object, object, object, object]:
        """ InsertCaption(self: Selection, Label: object, Title: object, TitleAutoText: object, Position: object, ExcludeLabel: object) -> (object, object, object, object, object) """
        ...

    def InsertCaptionXP(self, Label:object, Title:object, TitleAutoText:object, Position:object) -> Tuple_[object, object, object, object]:
        """ InsertCaptionXP(self: Selection, Label: object, Title: object, TitleAutoText: object, Position: object) -> (object, object, object, object) """
        ...

    def InsertCells(self, ShiftCells:object) -> object:
        """ InsertCells(self: Selection, ShiftCells: object) -> object """
        ...

    def InsertColumns(self): # -> 
        """ InsertColumns(self: Selection) """
        ...

    def InsertColumnsRight(self): # -> 
        """ InsertColumnsRight(self: Selection) """
        ...

    def InsertCrossReference(self, ReferenceType:object, ReferenceKind:WdReferenceKind, ReferenceItem:object, InsertAsHyperlink:object, IncludePosition:object, SeparateNumbers:object, SeparatorString:object) -> Tuple_[object, object, object, object, object, object]:
        """ InsertCrossReference(self: Selection, ReferenceType: object, ReferenceKind: WdReferenceKind, ReferenceItem: object, InsertAsHyperlink: object, IncludePosition: object, SeparateNumbers: object, SeparatorString: object) -> (object, object, object, object, object, object) """
        ...

    def InsertCrossReference_2002(self, ReferenceType:object, ReferenceKind:WdReferenceKind, ReferenceItem:object, InsertAsHyperlink:object, IncludePosition:object) -> Tuple_[object, object, object, object]:
        """ InsertCrossReference_2002(self: Selection, ReferenceType: object, ReferenceKind: WdReferenceKind, ReferenceItem: object, InsertAsHyperlink: object, IncludePosition: object) -> (object, object, object, object) """
        ...

    def InsertDateTime(self, DateTimeFormat:object, InsertAsField:object, InsertAsFullWidth:object, DateLanguage:object, CalendarType:object) -> Tuple_[object, object, object, object, object]:
        """ InsertDateTime(self: Selection, DateTimeFormat: object, InsertAsField: object, InsertAsFullWidth: object, DateLanguage: object, CalendarType: object) -> (object, object, object, object, object) """
        ...

    def InsertDateTimeOld(self, DateTimeFormat:object, InsertAsField:object, InsertAsFullWidth:object) -> Tuple_[object, object, object]:
        """ InsertDateTimeOld(self: Selection, DateTimeFormat: object, InsertAsField: object, InsertAsFullWidth: object) -> (object, object, object) """
        ...

    def InsertFile(self, FileName:str, Range:object, ConfirmConversions:object, Link:object, Attachment:object) -> Tuple_[object, object, object, object]:
        """ InsertFile(self: Selection, FileName: str, Range: object, ConfirmConversions: object, Link: object, Attachment: object) -> (object, object, object, object) """
        ...

    def InsertFormula(self, Formula:object, NumberFormat:object) -> Tuple_[object, object]:
        """ InsertFormula(self: Selection, Formula: object, NumberFormat: object) -> (object, object) """
        ...

    def InsertNewPage(self): # -> 
        """ InsertNewPage(self: Selection) """
        ...

    def InsertParagraph(self): # -> 
        """ InsertParagraph(self: Selection) """
        ...

    def InsertParagraphAfter(self): # -> 
        """ InsertParagraphAfter(self: Selection) """
        ...

    def InsertParagraphBefore(self): # -> 
        """ InsertParagraphBefore(self: Selection) """
        ...

    def InsertRows(self, NumRows:object) -> object:
        """ InsertRows(self: Selection, NumRows: object) -> object """
        ...

    def InsertRowsAbove(self, NumRows:object) -> object:
        """ InsertRowsAbove(self: Selection, NumRows: object) -> object """
        ...

    def InsertRowsBelow(self, NumRows:object) -> object:
        """ InsertRowsBelow(self: Selection, NumRows: object) -> object """
        ...

    def InsertStyleSeparator(self): # -> 
        """ InsertStyleSeparator(self: Selection) """
        ...

    def InsertSymbol(self, CharacterNumber:int, Font:object, Unicode:object, Bias:object) -> Tuple_[object, object, object]:
        """ InsertSymbol(self: Selection, CharacterNumber: int, Font: object, Unicode: object, Bias: object) -> (object, object, object) """
        ...

    def InsertXML(self, XML:str, Transform:object) -> object:
        """ InsertXML(self: Selection, XML: str, Transform: object) -> object """
        ...

    def InStory(self, Range:Range) -> bool:
        """ InStory(self: Selection, Range: Range) -> bool """
        ...

    def IsEqual(self, Range:Range) -> bool:
        """ IsEqual(self: Selection, Range: Range) -> bool """
        ...

    def ItalicRun(self): # -> 
        """ ItalicRun(self: Selection) """
        ...

    def LtrPara(self): # -> 
        """ LtrPara(self: Selection) """
        ...

    def LtrRun(self): # -> 
        """ LtrRun(self: Selection) """
        ...

    def Move(self, Unit:object, Count:object) -> Tuple_[int, object, object]:
        """ Move(self: Selection, Unit: object, Count: object) -> (int, object, object) """
        ...

    def MoveDown(self, Unit:object, Count:object, Extend:object) -> Tuple_[int, object, object, object]:
        """ MoveDown(self: Selection, Unit: object, Count: object, Extend: object) -> (int, object, object, object) """
        ...

    def MoveEnd(self, Unit:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveEnd(self: Selection, Unit: object, Count: object) -> (int, object, object) """
        ...

    def MoveEndUntil(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveEndUntil(self: Selection, Cset: object, Count: object) -> (int, object, object) """
        ...

    def MoveEndWhile(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveEndWhile(self: Selection, Cset: object, Count: object) -> (int, object, object) """
        ...

    def MoveLeft(self, Unit:object, Count:object, Extend:object) -> Tuple_[int, object, object, object]:
        """ MoveLeft(self: Selection, Unit: object, Count: object, Extend: object) -> (int, object, object, object) """
        ...

    def MoveRight(self, Unit:object, Count:object, Extend:object) -> Tuple_[int, object, object, object]:
        """ MoveRight(self: Selection, Unit: object, Count: object, Extend: object) -> (int, object, object, object) """
        ...

    def MoveStart(self, Unit:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveStart(self: Selection, Unit: object, Count: object) -> (int, object, object) """
        ...

    def MoveStartUntil(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveStartUntil(self: Selection, Cset: object, Count: object) -> (int, object, object) """
        ...

    def MoveStartWhile(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveStartWhile(self: Selection, Cset: object, Count: object) -> (int, object, object) """
        ...

    def MoveUntil(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveUntil(self: Selection, Cset: object, Count: object) -> (int, object, object) """
        ...

    def MoveUp(self, Unit:object, Count:object, Extend:object) -> Tuple_[int, object, object, object]:
        """ MoveUp(self: Selection, Unit: object, Count: object, Extend: object) -> (int, object, object, object) """
        ...

    def MoveWhile(self, Cset:object, Count:object) -> Tuple_[int, object, object]:
        """ MoveWhile(self: Selection, Cset: object, Count: object) -> (int, object, object) """
        ...

    def Next(self, Unit:object, Count:object) -> Tuple_[Range, object, object]:
        """ Next(self: Selection, Unit: object, Count: object) -> (Range, object, object) """
        ...

    def NextField(self) -> Field:
        """ NextField(self: Selection) -> Field """
        ...

    def NextRevision(self, Wrap:object) -> Tuple_[Revision, object]:
        """ NextRevision(self: Selection, Wrap: object) -> (Revision, object) """
        ...

    def NextSubdocument(self): # -> 
        """ NextSubdocument(self: Selection) """
        ...

    def Paste(self): # -> 
        """ Paste(self: Selection) """
        ...

    def PasteAndFormat(self, Type:WdRecoveryType): # -> 
        """ PasteAndFormat(self: Selection, Type: WdRecoveryType) """
        ...

    def PasteAppendTable(self): # -> 
        """ PasteAppendTable(self: Selection) """
        ...

    def PasteAsNestedTable(self): # -> 
        """ PasteAsNestedTable(self: Selection) """
        ...

    def PasteExcelTable(self, LinkedToExcel:bool, WordFormatting:bool, RTF:bool): # -> 
        """ PasteExcelTable(self: Selection, LinkedToExcel: bool, WordFormatting: bool, RTF: bool) """
        ...

    def PasteFormat(self): # -> 
        """ PasteFormat(self: Selection) """
        ...

    def PasteSpecial(self, IconIndex:object, Link:object, Placement:object, DisplayAsIcon:object, DataType:object, IconFileName:object, IconLabel:object) -> Tuple_[object, object, object, object, object, object, object]:
        """ PasteSpecial(self: Selection, IconIndex: object, Link: object, Placement: object, DisplayAsIcon: object, DataType: object, IconFileName: object, IconLabel: object) -> (object, object, object, object, object, object, object) """
        ...

    def Previous(self, Unit:object, Count:object) -> Tuple_[Range, object, object]:
        """ Previous(self: Selection, Unit: object, Count: object) -> (Range, object, object) """
        ...

    def PreviousField(self) -> Field:
        """ PreviousField(self: Selection) -> Field """
        ...

    def PreviousRevision(self, Wrap:object) -> Tuple_[Revision, object]:
        """ PreviousRevision(self: Selection, Wrap: object) -> (Revision, object) """
        ...

    def PreviousSubdocument(self): # -> 
        """ PreviousSubdocument(self: Selection) """
        ...

    def ReadingModeGrowFont(self): # -> 
        """ ReadingModeGrowFont(self: Selection) """
        ...

    def ReadingModeShrinkFont(self): # -> 
        """ ReadingModeShrinkFont(self: Selection) """
        ...

    def RtlPara(self): # -> 
        """ RtlPara(self: Selection) """
        ...

    def RtlRun(self): # -> 
        """ RtlRun(self: Selection) """
        ...

    def Select(self): # -> 
        """ Select(self: Selection) """
        ...

    def SelectCell(self): # -> 
        """ SelectCell(self: Selection) """
        ...

    def SelectColumn(self): # -> 
        """ SelectColumn(self: Selection) """
        ...

    def SelectCurrentAlignment(self): # -> 
        """ SelectCurrentAlignment(self: Selection) """
        ...

    def SelectCurrentColor(self): # -> 
        """ SelectCurrentColor(self: Selection) """
        ...

    def SelectCurrentFont(self): # -> 
        """ SelectCurrentFont(self: Selection) """
        ...

    def SelectCurrentIndent(self): # -> 
        """ SelectCurrentIndent(self: Selection) """
        ...

    def SelectCurrentSpacing(self): # -> 
        """ SelectCurrentSpacing(self: Selection) """
        ...

    def SelectCurrentTabs(self): # -> 
        """ SelectCurrentTabs(self: Selection) """
        ...

    def SelectRow(self): # -> 
        """ SelectRow(self: Selection) """
        ...

    def SetRange(self, Start:int, End:int): # -> 
        """ SetRange(self: Selection, Start: int, End: int) """
        ...

    def Shrink(self): # -> 
        """ Shrink(self: Selection) """
        ...

    def ShrinkDiscontiguousSelection(self): # -> 
        """ ShrinkDiscontiguousSelection(self: Selection) """
        ...

    def Sort(self, ExcludeHeader:object, FieldNumber:object, SortFieldType:object, SortOrder:object, FieldNumber2:object, SortFieldType2:object, SortOrder2:object, FieldNumber3:object, SortFieldType3:object, SortOrder3:object, SortColumn:object, Separator:object, CaseSensitive:object, BidiSort:object, IgnoreThe:object, IgnoreKashida:object, IgnoreDiacritics:object, IgnoreHe:object, LanguageID:object, SubFieldNumber:object, SubFieldNumber2:object, SubFieldNumber3:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Sort(self: Selection, ExcludeHeader: object, FieldNumber: object, SortFieldType: object, SortOrder: object, FieldNumber2: object, SortFieldType2: object, SortOrder2: object, FieldNumber3: object, SortFieldType3: object, SortOrder3: object, SortColumn: object, Separator: object, CaseSensitive: object, BidiSort: object, IgnoreThe: object, IgnoreKashida: object, IgnoreDiacritics: object, IgnoreHe: object, LanguageID: object, SubFieldNumber: object, SubFieldNumber2: object, SubFieldNumber3: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Sort2000(self, ExcludeHeader:object, FieldNumber:object, SortFieldType:object, SortOrder:object, FieldNumber2:object, SortFieldType2:object, SortOrder2:object, FieldNumber3:object, SortFieldType3:object, SortOrder3:object, SortColumn:object, Separator:object, CaseSensitive:object, BidiSort:object, IgnoreThe:object, IgnoreKashida:object, IgnoreDiacritics:object, IgnoreHe:object, LanguageID:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Sort2000(self: Selection, ExcludeHeader: object, FieldNumber: object, SortFieldType: object, SortOrder: object, FieldNumber2: object, SortFieldType2: object, SortOrder2: object, FieldNumber3: object, SortFieldType3: object, SortOrder3: object, SortColumn: object, Separator: object, CaseSensitive: object, BidiSort: object, IgnoreThe: object, IgnoreKashida: object, IgnoreDiacritics: object, IgnoreHe: object, LanguageID: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def SortAscending(self): # -> 
        """ SortAscending(self: Selection) """
        ...

    def SortByHeadings(self, SortFieldType:object, SortOrder:object, CaseSensitive:object, BidiSort:object, IgnoreThe:object, IgnoreKashida:object, IgnoreDiacritics:object, IgnoreHe:object, LanguageID:object) -> Tuple_[object, object, object, object, object, object, object, object, object]:
        """ SortByHeadings(self: Selection, SortFieldType: object, SortOrder: object, CaseSensitive: object, BidiSort: object, IgnoreThe: object, IgnoreKashida: object, IgnoreDiacritics: object, IgnoreHe: object, LanguageID: object) -> (object, object, object, object, object, object, object, object, object) """
        ...

    def SortDescending(self): # -> 
        """ SortDescending(self: Selection) """
        ...

    def SortOld(self, ExcludeHeader:object, FieldNumber:object, SortFieldType:object, SortOrder:object, FieldNumber2:object, SortFieldType2:object, SortOrder2:object, FieldNumber3:object, SortFieldType3:object, SortOrder3:object, SortColumn:object, Separator:object, CaseSensitive:object, LanguageID:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ SortOld(self: Selection, ExcludeHeader: object, FieldNumber: object, SortFieldType: object, SortOrder: object, FieldNumber2: object, SortFieldType2: object, SortOrder2: object, FieldNumber3: object, SortFieldType3: object, SortOrder3: object, SortColumn: object, Separator: object, CaseSensitive: object, LanguageID: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def SplitTable(self): # -> 
        """ SplitTable(self: Selection) """
        ...

    def StartOf(self, Unit:object, Extend:object) -> Tuple_[int, object, object]:
        """ StartOf(self: Selection, Unit: object, Extend: object) -> (int, object, object) """
        ...

    def ToggleCharacterCode(self): # -> 
        """ ToggleCharacterCode(self: Selection) """
        ...

    def TypeBackspace(self): # -> 
        """ TypeBackspace(self: Selection) """
        ...

    def TypeParagraph(self): # -> 
        """ TypeParagraph(self: Selection) """
        ...

    def TypeText(self, Text:str): # -> 
        """ TypeText(self: Selection, Text: str) """
        ...

    def WholeStory(self): # -> 
        """ WholeStory(self: Selection) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Sentences(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Sentences) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Sentences) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Sentences) -> int """
        ...

    @property
    def First(self) -> Range:
        """ Get: First(self: Sentences) -> Range """
        ...

    @property
    def Last(self) -> Range:
        """ Get: Last(self: Sentences) -> Range """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Sentences) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Series: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Series) -> object """
        ...

    @property
    def ApplyPictToEnd(self) -> bool:
        """
        Get: ApplyPictToEnd(self: Series) -> bool
        Set: ApplyPictToEnd(self: Series) = value
        """
        ...

    @property
    def ApplyPictToFront(self) -> bool:
        """
        Get: ApplyPictToFront(self: Series) -> bool
        Set: ApplyPictToFront(self: Series) = value
        """
        ...

    @property
    def ApplyPictToSides(self) -> bool:
        """
        Get: ApplyPictToSides(self: Series) -> bool
        Set: ApplyPictToSides(self: Series) = value
        """
        ...

    @property
    def AxisGroup(self) -> XlAxisGroup:
        """
        Get: AxisGroup(self: Series) -> XlAxisGroup
        Set: AxisGroup(self: Series) = value
        """
        ...

    @property
    def BarShape(self) -> XlBarShape:
        """
        Get: BarShape(self: Series) -> XlBarShape
        Set: BarShape(self: Series) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: Series) -> ChartBorder """
        ...

    @property
    def BubbleSizes(self) -> object:
        """
        Get: BubbleSizes(self: Series) -> object
        Set: BubbleSizes(self: Series) = value
        """
        ...

    @property
    def ChartType(self) -> XlChartType:
        """
        Get: ChartType(self: Series) -> XlChartType
        Set: ChartType(self: Series) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Series) -> int """
        ...

    @property
    def ErrorBars(self) -> ErrorBars:
        """ Get: ErrorBars(self: Series) -> ErrorBars """
        ...

    @property
    def Explosion(self) -> int:
        """
        Get: Explosion(self: Series) -> int
        Set: Explosion(self: Series) = value
        """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: Series) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Series) -> ChartFormat """
        ...

    @property
    def Formula(self) -> str:
        """
        Get: Formula(self: Series) -> str
        Set: Formula(self: Series) = value
        """
        ...

    @property
    def FormulaLocal(self) -> str:
        """
        Get: FormulaLocal(self: Series) -> str
        Set: FormulaLocal(self: Series) = value
        """
        ...

    @property
    def FormulaR1C1(self) -> str:
        """
        Get: FormulaR1C1(self: Series) -> str
        Set: FormulaR1C1(self: Series) = value
        """
        ...

    @property
    def FormulaR1C1Local(self) -> str:
        """
        Get: FormulaR1C1Local(self: Series) -> str
        Set: FormulaR1C1Local(self: Series) = value
        """
        ...

    @property
    def Has3DEffect(self) -> bool:
        """
        Get: Has3DEffect(self: Series) -> bool
        Set: Has3DEffect(self: Series) = value
        """
        ...

    @property
    def HasDataLabels(self) -> bool:
        """
        Get: HasDataLabels(self: Series) -> bool
        Set: HasDataLabels(self: Series) = value
        """
        ...

    @property
    def HasErrorBars(self) -> bool:
        """
        Get: HasErrorBars(self: Series) -> bool
        Set: HasErrorBars(self: Series) = value
        """
        ...

    @property
    def HasLeaderLines(self) -> bool:
        """
        Get: HasLeaderLines(self: Series) -> bool
        Set: HasLeaderLines(self: Series) = value
        """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Series) -> Interior """
        ...

    @property
    def InvertColor(self) -> int:
        """
        Get: InvertColor(self: Series) -> int
        Set: InvertColor(self: Series) = value
        """
        ...

    @property
    def InvertColorIndex(self) -> XlColorIndex:
        """
        Get: InvertColorIndex(self: Series) -> XlColorIndex
        Set: InvertColorIndex(self: Series) = value
        """
        ...

    @property
    def InvertIfNegative(self) -> bool:
        """
        Get: InvertIfNegative(self: Series) -> bool
        Set: InvertIfNegative(self: Series) = value
        """
        ...

    @property
    def IsFiltered(self) -> bool:
        """
        Get: IsFiltered(self: Series) -> bool
        Set: IsFiltered(self: Series) = value
        """
        ...

    @property
    def LeaderLines(self) -> LeaderLines:
        """ Get: LeaderLines(self: Series) -> LeaderLines """
        ...

    @property
    def MarkerBackgroundColor(self) -> int:
        """
        Get: MarkerBackgroundColor(self: Series) -> int
        Set: MarkerBackgroundColor(self: Series) = value
        """
        ...

    @property
    def MarkerBackgroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerBackgroundColorIndex(self: Series) -> XlColorIndex
        Set: MarkerBackgroundColorIndex(self: Series) = value
        """
        ...

    @property
    def MarkerForegroundColor(self) -> int:
        """
        Get: MarkerForegroundColor(self: Series) -> int
        Set: MarkerForegroundColor(self: Series) = value
        """
        ...

    @property
    def MarkerForegroundColorIndex(self) -> XlColorIndex:
        """
        Get: MarkerForegroundColorIndex(self: Series) -> XlColorIndex
        Set: MarkerForegroundColorIndex(self: Series) = value
        """
        ...

    @property
    def MarkerSize(self) -> int:
        """
        Get: MarkerSize(self: Series) -> int
        Set: MarkerSize(self: Series) = value
        """
        ...

    @property
    def MarkerStyle(self) -> XlMarkerStyle:
        """
        Get: MarkerStyle(self: Series) -> XlMarkerStyle
        Set: MarkerStyle(self: Series) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Series) -> str
        Set: Name(self: Series) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Series) -> object """
        ...

    @property
    def PictureType(self) -> XlChartPictureType:
        """
        Get: PictureType(self: Series) -> XlChartPictureType
        Set: PictureType(self: Series) = value
        """
        ...

    @property
    def PictureUnit(self) -> float:
        """
        Get: PictureUnit(self: Series) -> float
        Set: PictureUnit(self: Series) = value
        """
        ...

    @property
    def PictureUnit2(self) -> float:
        """
        Get: PictureUnit2(self: Series) -> float
        Set: PictureUnit2(self: Series) = value
        """
        ...

    @property
    def PlotColorIndex(self) -> int:
        """ Get: PlotColorIndex(self: Series) -> int """
        ...

    @property
    def PlotOrder(self) -> int:
        """
        Get: PlotOrder(self: Series) -> int
        Set: PlotOrder(self: Series) = value
        """
        ...

    @property
    def Shadow(self) -> bool:
        """
        Get: Shadow(self: Series) -> bool
        Set: Shadow(self: Series) = value
        """
        ...

    @property
    def Smooth(self) -> bool:
        """
        Get: Smooth(self: Series) -> bool
        Set: Smooth(self: Series) = value
        """
        ...

    @property
    def Type(self) -> int:
        """
        Get: Type(self: Series) -> int
        Set: Type(self: Series) = value
        """
        ...

    @property
    def Values(self) -> object:
        """
        Get: Values(self: Series) -> object
        Set: Values(self: Series) = value
        """
        ...

    @property
    def XValues(self) -> object:
        """
        Get: XValues(self: Series) -> object
        Set: XValues(self: Series) = value
        """
        ...


    def ApplyCustomType(self, ChartType:XlChartType): # -> 
        """ ApplyCustomType(self: Series, ChartType: XlChartType) """
        ...

    def ApplyDataLabels(self, Type:XlDataLabelsType, LegendKey:object, AutoText:object, HasLeaderLines:object, ShowSeriesName:object, ShowCategoryName:object, ShowValue:object, ShowPercentage:object, ShowBubbleSize:object, Separator:object) -> object:
        """ ApplyDataLabels(self: Series, Type: XlDataLabelsType, LegendKey: object, AutoText: object, HasLeaderLines: object, ShowSeriesName: object, ShowCategoryName: object, ShowValue: object, ShowPercentage: object, ShowBubbleSize: object, Separator: object) -> object """
        ...

    def ClearFormats(self) -> object:
        """ ClearFormats(self: Series) -> object """
        ...

    def Copy(self) -> object:
        """ Copy(self: Series) -> object """
        ...

    def DataLabels(self, Index:object) -> object:
        """ DataLabels(self: Series, Index: object) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Series) -> object """
        ...

    def ErrorBar(self, Direction:XlErrorBarDirection, Include:XlErrorBarInclude, Type:XlErrorBarType, Amount:object, MinusValues:object) -> object:
        """ ErrorBar(self: Series, Direction: XlErrorBarDirection, Include: XlErrorBarInclude, Type: XlErrorBarType, Amount: object, MinusValues: object) -> object """
        ...

    def Paste(self) -> object:
        """ Paste(self: Series) -> object """
        ...

    def Points(self, Index:object) -> object:
        """ Points(self: Series, Index: object) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: Series) -> object """
        ...

    def Trendlines(self, Index:object) -> object:
        """ Trendlines(self: Series, Index: object) -> object """
        ...


class SeriesCollection(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: SeriesCollection) -> object """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SeriesCollection) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SeriesCollection) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SeriesCollection) -> object """
        ...


    def Add(self, Source:object, Rowcol:XlRowCol, SeriesLabels:object, CategoryLabels:object, Replace:object) -> Series:
        """ Add(self: SeriesCollection, Source: object, Rowcol: XlRowCol, SeriesLabels: object, CategoryLabels: object, Replace: object) -> Series """
        ...

    def Extend(self, Source:object, Rowcol:object, CategoryLabels:object) -> object:
        """ Extend(self: SeriesCollection, Source: object, Rowcol: object, CategoryLabels: object) -> object """
        ...

    def NewSeries(self) -> Series:
        """ NewSeries(self: SeriesCollection) -> Series """
        ...

    def _Default(self, Index:object) -> Series:
        """ _Default(self: SeriesCollection, Index: object) -> Series """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SeriesLines: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: SeriesLines) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: SeriesLines) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SeriesLines) -> int """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: SeriesLines) -> ChartFormat """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SeriesLines) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SeriesLines) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: SeriesLines) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: SeriesLines) -> object """
        ...


class Shading: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Shading) -> Application """
        ...

    @property
    def BackgroundPatternColor(self) -> WdColor:
        """
        Get: BackgroundPatternColor(self: Shading) -> WdColor
        Set: BackgroundPatternColor(self: Shading) = value
        """
        ...

    @property
    def BackgroundPatternColorIndex(self) -> WdColorIndex:
        """
        Get: BackgroundPatternColorIndex(self: Shading) -> WdColorIndex
        Set: BackgroundPatternColorIndex(self: Shading) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Shading) -> int """
        ...

    @property
    def ForegroundPatternColor(self) -> WdColor:
        """
        Get: ForegroundPatternColor(self: Shading) -> WdColor
        Set: ForegroundPatternColor(self: Shading) = value
        """
        ...

    @property
    def ForegroundPatternColorIndex(self) -> WdColorIndex:
        """
        Get: ForegroundPatternColorIndex(self: Shading) -> WdColorIndex
        Set: ForegroundPatternColorIndex(self: Shading) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Shading) -> object """
        ...

    @property
    def Texture(self) -> WdTextureIndex:
        """
        Get: Texture(self: Shading) -> WdTextureIndex
        Set: Texture(self: Shading) = value
        """
        ...



class ShadowFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ShadowFormat) -> Application """
        ...

    @property
    def Blur(self) -> Single:
        """
        Get: Blur(self: ShadowFormat) -> Single
        Set: Blur(self: ShadowFormat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ShadowFormat) -> int """
        ...

    @property
    def ForeColor(self) -> ColorFormat:
        """ Get: ForeColor(self: ShadowFormat) -> ColorFormat """
        ...

    @property
    def Obscured(self): # -> MsoTriState
        """
        Get: Obscured(self: ShadowFormat) -> MsoTriState
        Set: Obscured(self: ShadowFormat) = value
        """
        ...

    @property
    def OffsetX(self) -> Single:
        """
        Get: OffsetX(self: ShadowFormat) -> Single
        Set: OffsetX(self: ShadowFormat) = value
        """
        ...

    @property
    def OffsetY(self) -> Single:
        """
        Get: OffsetY(self: ShadowFormat) -> Single
        Set: OffsetY(self: ShadowFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ShadowFormat) -> object """
        ...

    @property
    def RotateWithShape(self): # -> MsoTriState
        """
        Get: RotateWithShape(self: ShadowFormat) -> MsoTriState
        Set: RotateWithShape(self: ShadowFormat) = value
        """
        ...

    @property
    def Size(self) -> Single:
        """
        Get: Size(self: ShadowFormat) -> Single
        Set: Size(self: ShadowFormat) = value
        """
        ...

    @property
    def Style(self): # -> MsoShadowStyle
        """
        Get: Style(self: ShadowFormat) -> MsoShadowStyle
        Set: Style(self: ShadowFormat) = value
        """
        ...

    @property
    def Transparency(self) -> Single:
        """
        Get: Transparency(self: ShadowFormat) -> Single
        Set: Transparency(self: ShadowFormat) = value
        """
        ...

    @property
    def Type(self): # -> MsoShadowType
        """
        Get: Type(self: ShadowFormat) -> MsoShadowType
        Set: Type(self: ShadowFormat) = value
        """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: ShadowFormat) -> MsoTriState
        Set: Visible(self: ShadowFormat) = value
        """
        ...


    def IncrementOffsetX(self, Increment:Single): # -> 
        """ IncrementOffsetX(self: ShadowFormat, Increment: Single) """
        ...

    def IncrementOffsetY(self, Increment:Single): # -> 
        """ IncrementOffsetY(self: ShadowFormat, Increment: Single) """
        ...


class Shape: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Adjustments(self) -> Adjustments:
        """ Get: Adjustments(self: Shape) -> Adjustments """
        ...

    @property
    def AlternativeText(self) -> str:
        """
        Get: AlternativeText(self: Shape) -> str
        Set: AlternativeText(self: Shape) = value
        """
        ...

    @property
    def Anchor(self) -> Range:
        """ Get: Anchor(self: Shape) -> Range """
        ...

    @property
    def AnchorID(self) -> int:
        """ Get: AnchorID(self: Shape) -> int """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Shape) -> Application """
        ...

    @property
    def AutoShapeType(self): # -> MsoAutoShapeType
        """
        Get: AutoShapeType(self: Shape) -> MsoAutoShapeType
        Set: AutoShapeType(self: Shape) = value
        """
        ...

    @property
    def BackgroundStyle(self): # -> MsoBackgroundStyleIndex
        """
        Get: BackgroundStyle(self: Shape) -> MsoBackgroundStyleIndex
        Set: BackgroundStyle(self: Shape) = value
        """
        ...

    @property
    def Callout(self) -> CalloutFormat:
        """ Get: Callout(self: Shape) -> CalloutFormat """
        ...

    @property
    def CanvasItems(self) -> CanvasShapes:
        """ Get: CanvasItems(self: Shape) -> CanvasShapes """
        ...

    @property
    def Chart(self) -> Chart:
        """ Get: Chart(self: Shape) -> Chart """
        ...

    @property
    def Child(self): # -> MsoTriState
        """ Get: Child(self: Shape) -> MsoTriState """
        ...

    @property
    def ConnectionSiteCount(self) -> int:
        """ Get: ConnectionSiteCount(self: Shape) -> int """
        ...

    @property
    def Connector(self): # -> MsoTriState
        """ Get: Connector(self: Shape) -> MsoTriState """
        ...

    @property
    def ConnectorFormat(self) -> ConnectorFormat:
        """ Get: ConnectorFormat(self: Shape) -> ConnectorFormat """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Shape) -> int """
        ...

    @property
    def Diagram(self): # -> IMsoDiagram
        """ Get: Diagram(self: Shape) -> IMsoDiagram """
        ...

    @property
    def DiagramNode(self) -> DiagramNode:
        """ Get: DiagramNode(self: Shape) -> DiagramNode """
        ...

    @property
    def EditID(self) -> int:
        """ Get: EditID(self: Shape) -> int """
        ...

    @property
    def Fill(self) -> FillFormat:
        """ Get: Fill(self: Shape) -> FillFormat """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """ Get: Glow(self: Shape) -> GlowFormat """
        ...

    @property
    def GroupItems(self) -> GroupShapes:
        """ Get: GroupItems(self: Shape) -> GroupShapes """
        ...

    @property
    def HasChart(self): # -> MsoTriState
        """ Get: HasChart(self: Shape) -> MsoTriState """
        ...

    @property
    def HasDiagram(self): # -> MsoTriState
        """ Get: HasDiagram(self: Shape) -> MsoTriState """
        ...

    @property
    def HasDiagramNode(self): # -> MsoTriState
        """ Get: HasDiagramNode(self: Shape) -> MsoTriState """
        ...

    @property
    def HasSmartArt(self): # -> MsoTriState
        """ Get: HasSmartArt(self: Shape) -> MsoTriState """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: Shape) -> Single
        Set: Height(self: Shape) = value
        """
        ...

    @property
    def HeightRelative(self) -> Single:
        """
        Get: HeightRelative(self: Shape) -> Single
        Set: HeightRelative(self: Shape) = value
        """
        ...

    @property
    def HorizontalFlip(self): # -> MsoTriState
        """ Get: HorizontalFlip(self: Shape) -> MsoTriState """
        ...

    @property
    def Hyperlink(self) -> Hyperlink:
        """ Get: Hyperlink(self: Shape) -> Hyperlink """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Shape) -> int """
        ...

    @property
    def LayoutInCell(self) -> int:
        """
        Get: LayoutInCell(self: Shape) -> int
        Set: LayoutInCell(self: Shape) = value
        """
        ...

    @property
    def Left(self) -> Single:
        """
        Get: Left(self: Shape) -> Single
        Set: Left(self: Shape) = value
        """
        ...

    @property
    def LeftRelative(self) -> Single:
        """
        Get: LeftRelative(self: Shape) -> Single
        Set: LeftRelative(self: Shape) = value
        """
        ...

    @property
    def Line(self) -> LineFormat:
        """ Get: Line(self: Shape) -> LineFormat """
        ...

    @property
    def LinkFormat(self) -> LinkFormat:
        """ Get: LinkFormat(self: Shape) -> LinkFormat """
        ...

    @property
    def LockAnchor(self) -> int:
        """
        Get: LockAnchor(self: Shape) -> int
        Set: LockAnchor(self: Shape) = value
        """
        ...

    @property
    def LockAspectRatio(self): # -> MsoTriState
        """
        Get: LockAspectRatio(self: Shape) -> MsoTriState
        Set: LockAspectRatio(self: Shape) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Shape) -> str
        Set: Name(self: Shape) = value
        """
        ...

    @property
    def Nodes(self) -> ShapeNodes:
        """ Get: Nodes(self: Shape) -> ShapeNodes """
        ...

    @property
    def OLEFormat(self) -> OLEFormat:
        """ Get: OLEFormat(self: Shape) -> OLEFormat """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Shape) -> object """
        ...

    @property
    def ParentGroup(self) -> Shape:
        """ Get: ParentGroup(self: Shape) -> Shape """
        ...

    @property
    def PictureFormat(self) -> PictureFormat:
        """ Get: PictureFormat(self: Shape) -> PictureFormat """
        ...

    @property
    def Reflection(self) -> ReflectionFormat:
        """ Get: Reflection(self: Shape) -> ReflectionFormat """
        ...

    @property
    def RelativeHorizontalPosition(self) -> WdRelativeHorizontalPosition:
        """
        Get: RelativeHorizontalPosition(self: Shape) -> WdRelativeHorizontalPosition
        Set: RelativeHorizontalPosition(self: Shape) = value
        """
        ...

    @property
    def RelativeHorizontalSize(self) -> WdRelativeHorizontalSize:
        """
        Get: RelativeHorizontalSize(self: Shape) -> WdRelativeHorizontalSize
        Set: RelativeHorizontalSize(self: Shape) = value
        """
        ...

    @property
    def RelativeVerticalPosition(self) -> WdRelativeVerticalPosition:
        """
        Get: RelativeVerticalPosition(self: Shape) -> WdRelativeVerticalPosition
        Set: RelativeVerticalPosition(self: Shape) = value
        """
        ...

    @property
    def RelativeVerticalSize(self) -> WdRelativeVerticalSize:
        """
        Get: RelativeVerticalSize(self: Shape) -> WdRelativeVerticalSize
        Set: RelativeVerticalSize(self: Shape) = value
        """
        ...

    @property
    def Rotation(self) -> Single:
        """
        Get: Rotation(self: Shape) -> Single
        Set: Rotation(self: Shape) = value
        """
        ...

    @property
    def RTF(self): # -> 
        """ Set: RTF(self: Shape) = value """
        ...

    @property
    def Script(self): # -> Script
        """ Get: Script(self: Shape) -> Script """
        ...

    @property
    def Shadow(self) -> ShadowFormat:
        """ Get: Shadow(self: Shape) -> ShadowFormat """
        ...

    @property
    def ShapeStyle(self): # -> MsoShapeStyleIndex
        """
        Get: ShapeStyle(self: Shape) -> MsoShapeStyleIndex
        Set: ShapeStyle(self: Shape) = value
        """
        ...

    @property
    def SmartArt(self): # -> SmartArt
        """ Get: SmartArt(self: Shape) -> SmartArt """
        ...

    @property
    def SoftEdge(self) -> SoftEdgeFormat:
        """ Get: SoftEdge(self: Shape) -> SoftEdgeFormat """
        ...

    @property
    def TextEffect(self) -> TextEffectFormat:
        """ Get: TextEffect(self: Shape) -> TextEffectFormat """
        ...

    @property
    def TextFrame(self) -> TextFrame:
        """ Get: TextFrame(self: Shape) -> TextFrame """
        ...

    @property
    def TextFrame2(self) -> TextFrame2:
        """ Get: TextFrame2(self: Shape) -> TextFrame2 """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """ Get: ThreeD(self: Shape) -> ThreeDFormat """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: Shape) -> str
        Set: Title(self: Shape) = value
        """
        ...

    @property
    def Top(self) -> Single:
        """
        Get: Top(self: Shape) -> Single
        Set: Top(self: Shape) = value
        """
        ...

    @property
    def TopRelative(self) -> Single:
        """
        Get: TopRelative(self: Shape) -> Single
        Set: TopRelative(self: Shape) = value
        """
        ...

    @property
    def Type(self): # -> MsoShapeType
        """ Get: Type(self: Shape) -> MsoShapeType """
        ...

    @property
    def VerticalFlip(self): # -> MsoTriState
        """ Get: VerticalFlip(self: Shape) -> MsoTriState """
        ...

    @property
    def Vertices(self) -> object:
        """ Get: Vertices(self: Shape) -> object """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: Shape) -> MsoTriState
        Set: Visible(self: Shape) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: Shape) -> Single
        Set: Width(self: Shape) = value
        """
        ...

    @property
    def WidthRelative(self) -> Single:
        """
        Get: WidthRelative(self: Shape) -> Single
        Set: WidthRelative(self: Shape) = value
        """
        ...

    @property
    def WrapFormat(self) -> WrapFormat:
        """ Get: WrapFormat(self: Shape) -> WrapFormat """
        ...

    @property
    def ZOrderPosition(self) -> int:
        """ Get: ZOrderPosition(self: Shape) -> int """
        ...


    def Activate(self): # -> 
        """ Activate(self: Shape) """
        ...

    def Apply(self): # -> 
        """ Apply(self: Shape) """
        ...

    def CanvasCropBottom(self, Increment:Single): # -> 
        """ CanvasCropBottom(self: Shape, Increment: Single) """
        ...

    def CanvasCropLeft(self, Increment:Single): # -> 
        """ CanvasCropLeft(self: Shape, Increment: Single) """
        ...

    def CanvasCropRight(self, Increment:Single): # -> 
        """ CanvasCropRight(self: Shape, Increment: Single) """
        ...

    def CanvasCropTop(self, Increment:Single): # -> 
        """ CanvasCropTop(self: Shape, Increment: Single) """
        ...

    def ConvertToFrame(self) -> Frame:
        """ ConvertToFrame(self: Shape) -> Frame """
        ...

    def ConvertToInlineShape(self) -> InlineShape:
        """ ConvertToInlineShape(self: Shape) -> InlineShape """
        ...

    def Delete(self): # -> 
        """ Delete(self: Shape) """
        ...

    def Duplicate(self) -> Shape:
        """ Duplicate(self: Shape) -> Shape """
        ...

    def Flip(self, FlipCmd): # ->  # Not found arg types: {'FlipCmd': 'MsoFlipCmd'}
        """ Flip(self: Shape, FlipCmd: MsoFlipCmd) """
        ...

    def IncrementLeft(self, Increment:Single): # -> 
        """ IncrementLeft(self: Shape, Increment: Single) """
        ...

    def IncrementRotation(self, Increment:Single): # -> 
        """ IncrementRotation(self: Shape, Increment: Single) """
        ...

    def IncrementTop(self, Increment:Single): # -> 
        """ IncrementTop(self: Shape, Increment: Single) """
        ...

    def PickUp(self): # -> 
        """ PickUp(self: Shape) """
        ...

    def RerouteConnections(self): # -> 
        """ RerouteConnections(self: Shape) """
        ...

    def ScaleHeight(self, Factor:Single, RelativeToOriginalSize, Scale): # ->  # Not found arg types: {'Scale': 'MsoScaleFrom', 'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleHeight(self: Shape, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: MsoScaleFrom) """
        ...

    def ScaleWidth(self, Factor:Single, RelativeToOriginalSize, Scale): # ->  # Not found arg types: {'Scale': 'MsoScaleFrom', 'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleWidth(self: Shape, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: MsoScaleFrom) """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: Shape, Replace: object) -> object """
        ...

    def SetShapesDefaultProperties(self): # -> 
        """ SetShapesDefaultProperties(self: Shape) """
        ...

    def Ungroup(self) -> ShapeRange:
        """ Ungroup(self: Shape) -> ShapeRange """
        ...

    def ZOrder(self, ZOrderCmd): # ->  # Not found arg types: {'ZOrderCmd': 'MsoZOrderCmd'}
        """ ZOrder(self: Shape, ZOrderCmd: MsoZOrderCmd) """
        ...


class ShapeNode: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ShapeNode) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ShapeNode) -> int """
        ...

    @property
    def EditingType(self): # -> MsoEditingType
        """ Get: EditingType(self: ShapeNode) -> MsoEditingType """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ShapeNode) -> object """
        ...

    @property
    def Points(self) -> object:
        """ Get: Points(self: ShapeNode) -> object """
        ...

    @property
    def SegmentType(self): # -> MsoSegmentType
        """ Get: SegmentType(self: ShapeNode) -> MsoSegmentType """
        ...



class ShapeNodes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ShapeNodes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ShapeNodes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ShapeNodes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ShapeNodes) -> object """
        ...


    def Delete(self, Index:int): # -> 
        """ Delete(self: ShapeNodes, Index: int) """
        ...

    def Insert(self, Index:int, SegmentType, EditingType, X1:Single, Y1:Single, X2:Single, Y2:Single, X3:Single, Y3:Single): # ->  # Not found arg types: {'EditingType': 'MsoEditingType', 'SegmentType': 'MsoSegmentType'}
        """ Insert(self: ShapeNodes, Index: int, SegmentType: MsoSegmentType, EditingType: MsoEditingType, X1: Single, Y1: Single, X2: Single, Y2: Single, X3: Single, Y3: Single) """
        ...

    def SetEditingType(self, Index:int, EditingType): # ->  # Not found arg types: {'EditingType': 'MsoEditingType'}
        """ SetEditingType(self: ShapeNodes, Index: int, EditingType: MsoEditingType) """
        ...

    def SetPosition(self, Index:int, X1:Single, Y1:Single): # -> 
        """ SetPosition(self: ShapeNodes, Index: int, X1: Single, Y1: Single) """
        ...

    def SetSegmentType(self, Index:int, SegmentType): # ->  # Not found arg types: {'SegmentType': 'MsoSegmentType'}
        """ SetSegmentType(self: ShapeNodes, Index: int, SegmentType: MsoSegmentType) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class ShapeRange(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Adjustments(self) -> Adjustments:
        """ Get: Adjustments(self: ShapeRange) -> Adjustments """
        ...

    @property
    def AlternativeText(self) -> str:
        """
        Get: AlternativeText(self: ShapeRange) -> str
        Set: AlternativeText(self: ShapeRange) = value
        """
        ...

    @property
    def Anchor(self) -> Range:
        """ Get: Anchor(self: ShapeRange) -> Range """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: ShapeRange) -> Application """
        ...

    @property
    def AutoShapeType(self): # -> MsoAutoShapeType
        """
        Get: AutoShapeType(self: ShapeRange) -> MsoAutoShapeType
        Set: AutoShapeType(self: ShapeRange) = value
        """
        ...

    @property
    def BackgroundStyle(self): # -> MsoBackgroundStyleIndex
        """
        Get: BackgroundStyle(self: ShapeRange) -> MsoBackgroundStyleIndex
        Set: BackgroundStyle(self: ShapeRange) = value
        """
        ...

    @property
    def Callout(self) -> CalloutFormat:
        """ Get: Callout(self: ShapeRange) -> CalloutFormat """
        ...

    @property
    def CanvasItems(self) -> CanvasShapes:
        """ Get: CanvasItems(self: ShapeRange) -> CanvasShapes """
        ...

    @property
    def Child(self): # -> MsoTriState
        """ Get: Child(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def ConnectionSiteCount(self) -> int:
        """ Get: ConnectionSiteCount(self: ShapeRange) -> int """
        ...

    @property
    def Connector(self): # -> MsoTriState
        """ Get: Connector(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def ConnectorFormat(self) -> ConnectorFormat:
        """ Get: ConnectorFormat(self: ShapeRange) -> ConnectorFormat """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: ShapeRange) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ShapeRange) -> int """
        ...

    @property
    def Diagram(self): # -> IMsoDiagram
        """ Get: Diagram(self: ShapeRange) -> IMsoDiagram """
        ...

    @property
    def DiagramNode(self) -> DiagramNode:
        """ Get: DiagramNode(self: ShapeRange) -> DiagramNode """
        ...

    @property
    def Fill(self) -> FillFormat:
        """ Get: Fill(self: ShapeRange) -> FillFormat """
        ...

    @property
    def Glow(self) -> GlowFormat:
        """ Get: Glow(self: ShapeRange) -> GlowFormat """
        ...

    @property
    def GroupItems(self) -> GroupShapes:
        """ Get: GroupItems(self: ShapeRange) -> GroupShapes """
        ...

    @property
    def HasDiagram(self): # -> MsoTriState
        """ Get: HasDiagram(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def HasDiagramNode(self): # -> MsoTriState
        """ Get: HasDiagramNode(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def Height(self) -> Single:
        """
        Get: Height(self: ShapeRange) -> Single
        Set: Height(self: ShapeRange) = value
        """
        ...

    @property
    def HeightRelative(self) -> Single:
        """
        Get: HeightRelative(self: ShapeRange) -> Single
        Set: HeightRelative(self: ShapeRange) = value
        """
        ...

    @property
    def HorizontalFlip(self): # -> MsoTriState
        """ Get: HorizontalFlip(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def Hyperlink(self) -> Hyperlink:
        """ Get: Hyperlink(self: ShapeRange) -> Hyperlink """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ShapeRange) -> int """
        ...

    @property
    def LayoutInCell(self) -> int:
        """
        Get: LayoutInCell(self: ShapeRange) -> int
        Set: LayoutInCell(self: ShapeRange) = value
        """
        ...

    @property
    def Left(self) -> Single:
        """
        Get: Left(self: ShapeRange) -> Single
        Set: Left(self: ShapeRange) = value
        """
        ...

    @property
    def LeftRelative(self) -> Single:
        """
        Get: LeftRelative(self: ShapeRange) -> Single
        Set: LeftRelative(self: ShapeRange) = value
        """
        ...

    @property
    def Line(self) -> LineFormat:
        """ Get: Line(self: ShapeRange) -> LineFormat """
        ...

    @property
    def LockAnchor(self) -> int:
        """
        Get: LockAnchor(self: ShapeRange) -> int
        Set: LockAnchor(self: ShapeRange) = value
        """
        ...

    @property
    def LockAspectRatio(self): # -> MsoTriState
        """
        Get: LockAspectRatio(self: ShapeRange) -> MsoTriState
        Set: LockAspectRatio(self: ShapeRange) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ShapeRange) -> str
        Set: Name(self: ShapeRange) = value
        """
        ...

    @property
    def Nodes(self) -> ShapeNodes:
        """ Get: Nodes(self: ShapeRange) -> ShapeNodes """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ShapeRange) -> object """
        ...

    @property
    def ParentGroup(self) -> Shape:
        """ Get: ParentGroup(self: ShapeRange) -> Shape """
        ...

    @property
    def PictureFormat(self) -> PictureFormat:
        """ Get: PictureFormat(self: ShapeRange) -> PictureFormat """
        ...

    @property
    def Reflection(self) -> ReflectionFormat:
        """ Get: Reflection(self: ShapeRange) -> ReflectionFormat """
        ...

    @property
    def RelativeHorizontalPosition(self) -> WdRelativeHorizontalPosition:
        """
        Get: RelativeHorizontalPosition(self: ShapeRange) -> WdRelativeHorizontalPosition
        Set: RelativeHorizontalPosition(self: ShapeRange) = value
        """
        ...

    @property
    def RelativeHorizontalSize(self) -> WdRelativeHorizontalSize:
        """
        Get: RelativeHorizontalSize(self: ShapeRange) -> WdRelativeHorizontalSize
        Set: RelativeHorizontalSize(self: ShapeRange) = value
        """
        ...

    @property
    def RelativeVerticalPosition(self) -> WdRelativeVerticalPosition:
        """
        Get: RelativeVerticalPosition(self: ShapeRange) -> WdRelativeVerticalPosition
        Set: RelativeVerticalPosition(self: ShapeRange) = value
        """
        ...

    @property
    def RelativeVerticalSize(self) -> WdRelativeVerticalSize:
        """
        Get: RelativeVerticalSize(self: ShapeRange) -> WdRelativeVerticalSize
        Set: RelativeVerticalSize(self: ShapeRange) = value
        """
        ...

    @property
    def Rotation(self) -> Single:
        """
        Get: Rotation(self: ShapeRange) -> Single
        Set: Rotation(self: ShapeRange) = value
        """
        ...

    @property
    def RTF(self): # -> 
        """ Set: RTF(self: ShapeRange) = value """
        ...

    @property
    def Shadow(self) -> ShadowFormat:
        """ Get: Shadow(self: ShapeRange) -> ShadowFormat """
        ...

    @property
    def ShapeStyle(self): # -> MsoShapeStyleIndex
        """
        Get: ShapeStyle(self: ShapeRange) -> MsoShapeStyleIndex
        Set: ShapeStyle(self: ShapeRange) = value
        """
        ...

    @property
    def SoftEdge(self) -> SoftEdgeFormat:
        """ Get: SoftEdge(self: ShapeRange) -> SoftEdgeFormat """
        ...

    @property
    def TextEffect(self) -> TextEffectFormat:
        """ Get: TextEffect(self: ShapeRange) -> TextEffectFormat """
        ...

    @property
    def TextFrame(self) -> TextFrame:
        """ Get: TextFrame(self: ShapeRange) -> TextFrame """
        ...

    @property
    def TextFrame2(self) -> TextFrame2:
        """ Get: TextFrame2(self: ShapeRange) -> TextFrame2 """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """ Get: ThreeD(self: ShapeRange) -> ThreeDFormat """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: ShapeRange) -> str
        Set: Title(self: ShapeRange) = value
        """
        ...

    @property
    def Top(self) -> Single:
        """
        Get: Top(self: ShapeRange) -> Single
        Set: Top(self: ShapeRange) = value
        """
        ...

    @property
    def TopRelative(self) -> Single:
        """
        Get: TopRelative(self: ShapeRange) -> Single
        Set: TopRelative(self: ShapeRange) = value
        """
        ...

    @property
    def Type(self): # -> MsoShapeType
        """ Get: Type(self: ShapeRange) -> MsoShapeType """
        ...

    @property
    def VerticalFlip(self): # -> MsoTriState
        """ Get: VerticalFlip(self: ShapeRange) -> MsoTriState """
        ...

    @property
    def Vertices(self) -> object:
        """ Get: Vertices(self: ShapeRange) -> object """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: ShapeRange) -> MsoTriState
        Set: Visible(self: ShapeRange) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: ShapeRange) -> Single
        Set: Width(self: ShapeRange) = value
        """
        ...

    @property
    def WidthRelative(self) -> Single:
        """
        Get: WidthRelative(self: ShapeRange) -> Single
        Set: WidthRelative(self: ShapeRange) = value
        """
        ...

    @property
    def WrapFormat(self) -> WrapFormat:
        """ Get: WrapFormat(self: ShapeRange) -> WrapFormat """
        ...

    @property
    def ZOrderPosition(self) -> int:
        """ Get: ZOrderPosition(self: ShapeRange) -> int """
        ...


    def Activate(self): # -> 
        """ Activate(self: ShapeRange) """
        ...

    def Align(self, Align, RelativeTo:int): # ->  # Not found arg types: {'Align': 'MsoAlignCmd'}
        """ Align(self: ShapeRange, Align: MsoAlignCmd, RelativeTo: int) """
        ...

    def Apply(self): # -> 
        """ Apply(self: ShapeRange) """
        ...

    def CanvasCropBottom(self, Increment:Single): # -> 
        """ CanvasCropBottom(self: ShapeRange, Increment: Single) """
        ...

    def CanvasCropLeft(self, Increment:Single): # -> 
        """ CanvasCropLeft(self: ShapeRange, Increment: Single) """
        ...

    def CanvasCropRight(self, Increment:Single): # -> 
        """ CanvasCropRight(self: ShapeRange, Increment: Single) """
        ...

    def CanvasCropTop(self, Increment:Single): # -> 
        """ CanvasCropTop(self: ShapeRange, Increment: Single) """
        ...

    def ConvertToFrame(self) -> Frame:
        """ ConvertToFrame(self: ShapeRange) -> Frame """
        ...

    def ConvertToInlineShape(self) -> InlineShape:
        """ ConvertToInlineShape(self: ShapeRange) -> InlineShape """
        ...

    def Delete(self): # -> 
        """ Delete(self: ShapeRange) """
        ...

    def Distribute(self, Distribute, RelativeTo:int): # ->  # Not found arg types: {'Distribute': 'MsoDistributeCmd'}
        """ Distribute(self: ShapeRange, Distribute: MsoDistributeCmd, RelativeTo: int) """
        ...

    def Duplicate(self) -> ShapeRange:
        """ Duplicate(self: ShapeRange) -> ShapeRange """
        ...

    def Flip(self, FlipCmd): # ->  # Not found arg types: {'FlipCmd': 'MsoFlipCmd'}
        """ Flip(self: ShapeRange, FlipCmd: MsoFlipCmd) """
        ...

    def Group(self) -> Shape:
        """ Group(self: ShapeRange) -> Shape """
        ...

    def IncrementLeft(self, Increment:Single): # -> 
        """ IncrementLeft(self: ShapeRange, Increment: Single) """
        ...

    def IncrementRotation(self, Increment:Single): # -> 
        """ IncrementRotation(self: ShapeRange, Increment: Single) """
        ...

    def IncrementTop(self, Increment:Single): # -> 
        """ IncrementTop(self: ShapeRange, Increment: Single) """
        ...

    def PickUp(self): # -> 
        """ PickUp(self: ShapeRange) """
        ...

    def Regroup(self) -> Shape:
        """ Regroup(self: ShapeRange) -> Shape """
        ...

    def RerouteConnections(self): # -> 
        """ RerouteConnections(self: ShapeRange) """
        ...

    def ScaleHeight(self, Factor:Single, RelativeToOriginalSize, Scale): # ->  # Not found arg types: {'Scale': 'MsoScaleFrom', 'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleHeight(self: ShapeRange, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: MsoScaleFrom) """
        ...

    def ScaleWidth(self, Factor:Single, RelativeToOriginalSize, Scale): # ->  # Not found arg types: {'Scale': 'MsoScaleFrom', 'RelativeToOriginalSize': 'MsoTriState'}
        """ ScaleWidth(self: ShapeRange, Factor: Single, RelativeToOriginalSize: MsoTriState, Scale: MsoScaleFrom) """
        ...

    def Select(self, Replace:object) -> object:
        """ Select(self: ShapeRange, Replace: object) -> object """
        ...

    def SetShapesDefaultProperties(self): # -> 
        """ SetShapesDefaultProperties(self: ShapeRange) """
        ...

    def Ungroup(self) -> ShapeRange:
        """ Ungroup(self: ShapeRange) -> ShapeRange """
        ...

    def ZOrder(self, ZOrderCmd): # ->  # Not found arg types: {'ZOrderCmd': 'MsoZOrderCmd'}
        """ ZOrder(self: ShapeRange, ZOrderCmd: MsoZOrderCmd) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Shapes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Shapes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Shapes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Shapes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Shapes) -> object """
        ...


    def AddCallout(self, Type, Left:Single, Top:Single, Width:Single, Height:Single, Anchor:object) -> Tuple_[Shape, object]: # Not found arg types: {'Type': 'MsoCalloutType'}
        """ AddCallout(self: Shapes, Type: MsoCalloutType, Left: Single, Top: Single, Width: Single, Height: Single, Anchor: object) -> (Shape, object) """
        ...

    def AddCanvas(self, Left:Single, Top:Single, Width:Single, Height:Single, Anchor:object) -> Tuple_[Shape, object]:
        """ AddCanvas(self: Shapes, Left: Single, Top: Single, Width: Single, Height: Single, Anchor: object) -> (Shape, object) """
        ...

    def AddChart(self, Type:XlChartType, Left:object, Top:object, Width:object, Height:object, Anchor:object) -> Tuple_[Shape, object, object, object, object, object]:
        """ AddChart(self: Shapes, Type: XlChartType, Left: object, Top: object, Width: object, Height: object, Anchor: object) -> (Shape, object, object, object, object, object) """
        ...

    def AddChart2(self, Style:int, Type:XlChartType, Left:object, Top:object, Width:object, Height:object, Anchor:object, NewLayout:object) -> Tuple_[Shape, object, object, object, object, object, object]:
        """ AddChart2(self: Shapes, Style: int, Type: XlChartType, Left: object, Top: object, Width: object, Height: object, Anchor: object, NewLayout: object) -> (Shape, object, object, object, object, object, object) """
        ...

    def AddConnector(self, Type, BeginX:Single, BeginY:Single, EndX:Single, EndY:Single) -> Shape: # Not found arg types: {'Type': 'MsoConnectorType'}
        """ AddConnector(self: Shapes, Type: MsoConnectorType, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single) -> Shape """
        ...

    def AddCurve(self, SafeArrayOfPoints:object, Anchor:object) -> Tuple_[Shape, object, object]:
        """ AddCurve(self: Shapes, SafeArrayOfPoints: object, Anchor: object) -> (Shape, object, object) """
        ...

    def AddDiagram(self, Type, Left:Single, Top:Single, Width:Single, Height:Single, Anchor:object) -> Tuple_[Shape, object]: # Not found arg types: {'Type': 'MsoDiagramType'}
        """ AddDiagram(self: Shapes, Type: MsoDiagramType, Left: Single, Top: Single, Width: Single, Height: Single, Anchor: object) -> (Shape, object) """
        ...

    def AddLabel(self, Orientation, Left:Single, Top:Single, Width:Single, Height:Single, Anchor:object) -> Tuple_[Shape, object]: # Not found arg types: {'Orientation': 'MsoTextOrientation'}
        """ AddLabel(self: Shapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single, Anchor: object) -> (Shape, object) """
        ...

    def AddLine(self, BeginX:Single, BeginY:Single, EndX:Single, EndY:Single, Anchor:object) -> Tuple_[Shape, object]:
        """ AddLine(self: Shapes, BeginX: Single, BeginY: Single, EndX: Single, EndY: Single, Anchor: object) -> (Shape, object) """
        ...

    def AddOLEControl(self, ClassType:object, Left:object, Top:object, Width:object, Height:object, Anchor:object) -> Tuple_[Shape, object, object, object, object, object, object]:
        """ AddOLEControl(self: Shapes, ClassType: object, Left: object, Top: object, Width: object, Height: object, Anchor: object) -> (Shape, object, object, object, object, object, object) """
        ...

    def AddOLEObject(self, ClassType:object, FileName:object, LinkToFile:object, DisplayAsIcon:object, IconFileName:object, IconIndex:object, IconLabel:object, Left:object, Top:object, Width:object, Height:object, Anchor:object) -> Tuple_[Shape, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ AddOLEObject(self: Shapes, ClassType: object, FileName: object, LinkToFile: object, DisplayAsIcon: object, IconFileName: object, IconIndex: object, IconLabel: object, Left: object, Top: object, Width: object, Height: object, Anchor: object) -> (Shape, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def AddPicture(self, FileName:str, LinkToFile:object, SaveWithDocument:object, Left:object, Top:object, Width:object, Height:object, Anchor:object) -> Tuple_[Shape, object, object, object, object, object, object, object]:
        """ AddPicture(self: Shapes, FileName: str, LinkToFile: object, SaveWithDocument: object, Left: object, Top: object, Width: object, Height: object, Anchor: object) -> (Shape, object, object, object, object, object, object, object) """
        ...

    def AddPolyline(self, SafeArrayOfPoints:object, Anchor:object) -> Tuple_[Shape, object, object]:
        """ AddPolyline(self: Shapes, SafeArrayOfPoints: object, Anchor: object) -> (Shape, object, object) """
        ...

    def AddShape(self, Type:int, Left:Single, Top:Single, Width:Single, Height:Single, Anchor:object) -> Tuple_[Shape, object]:
        """ AddShape(self: Shapes, Type: int, Left: Single, Top: Single, Width: Single, Height: Single, Anchor: object) -> (Shape, object) """
        ...

    def AddSmartArt(self, Layout, Left:object, Top:object, Width:object, Height:object, Anchor:object) -> Tuple_[Shape, object, object, object, object, object]: # Not found arg types: {'Layout': 'SmartArtLayout'}
        """ AddSmartArt(self: Shapes, Layout: SmartArtLayout, Left: object, Top: object, Width: object, Height: object, Anchor: object) -> (Shape, object, object, object, object, object) """
        ...

    def AddTextbox(self, Orientation, Left:Single, Top:Single, Width:Single, Height:Single, Anchor:object) -> Tuple_[Shape, object]: # Not found arg types: {'Orientation': 'MsoTextOrientation'}
        """ AddTextbox(self: Shapes, Orientation: MsoTextOrientation, Left: Single, Top: Single, Width: Single, Height: Single, Anchor: object) -> (Shape, object) """
        ...

    def AddTextEffect(self, PresetTextEffect, Text:str, FontName:str, FontSize:Single, FontBold, FontItalic, Left:Single, Top:Single, Anchor:object) -> Tuple_[Shape, object]: # Not found arg types: {'FontItalic': 'MsoTriState', 'FontBold': 'MsoTriState', 'PresetTextEffect': 'MsoPresetTextEffect'}
        """ AddTextEffect(self: Shapes, PresetTextEffect: MsoPresetTextEffect, Text: str, FontName: str, FontSize: Single, FontBold: MsoTriState, FontItalic: MsoTriState, Left: Single, Top: Single, Anchor: object) -> (Shape, object) """
        ...

    def AddWebVideo(self, EmbedCode:str, VideoWidth:object, VideoHeight:object, PosterFrameImage:object, Url:object, Left:object, Top:object, Width:object, Height:object, Anchor:object) -> Tuple_[Shape, object, object, object, object, object, object, object, object, object]:
        """ AddWebVideo(self: Shapes, EmbedCode: str, VideoWidth: object, VideoHeight: object, PosterFrameImage: object, Url: object, Left: object, Top: object, Width: object, Height: object, Anchor: object) -> (Shape, object, object, object, object, object, object, object, object, object) """
        ...

    def BuildFreeform(self, EditingType, X1:Single, Y1:Single) -> FreeformBuilder: # Not found arg types: {'EditingType': 'MsoEditingType'}
        """ BuildFreeform(self: Shapes, EditingType: MsoEditingType, X1: Single, Y1: Single) -> FreeformBuilder """
        ...

    def Range(self, Index:object) -> Tuple_[ShapeRange, object]:
        """ Range(self: Shapes, Index: object) -> (ShapeRange, object) """
        ...

    def SelectAll(self): # -> 
        """ SelectAll(self: Shapes) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTag: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTag) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SmartTag) -> int """
        ...

    @property
    def DownloadURL(self) -> str:
        """ Get: DownloadURL(self: SmartTag) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SmartTag) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTag) -> object """
        ...

    @property
    def Properties(self) -> CustomProperties:
        """ Get: Properties(self: SmartTag) -> CustomProperties """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: SmartTag) -> Range """
        ...

    @property
    def SmartTagActions(self) -> SmartTagActions:
        """ Get: SmartTagActions(self: SmartTag) -> SmartTagActions """
        ...

    @property
    def XML(self) -> str:
        """ Get: XML(self: SmartTag) -> str """
        ...

    @property
    def XMLNode(self) -> XMLNode:
        """ Get: XMLNode(self: SmartTag) -> XMLNode """
        ...


    def Delete(self): # -> 
        """ Delete(self: SmartTag) """
        ...

    def Select(self): # -> 
        """ Select(self: SmartTag) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTagAction: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ActiveXControl(self) -> object:
        """ Get: ActiveXControl(self: SmartTagAction) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTagAction) -> Application """
        ...

    @property
    def CheckboxState(self) -> bool:
        """
        Get: CheckboxState(self: SmartTagAction) -> bool
        Set: CheckboxState(self: SmartTagAction) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SmartTagAction) -> int """
        ...

    @property
    def ExpandDocumentFragment(self) -> bool:
        """
        Get: ExpandDocumentFragment(self: SmartTagAction) -> bool
        Set: ExpandDocumentFragment(self: SmartTagAction) = value
        """
        ...

    @property
    def ExpandHelp(self) -> bool:
        """
        Get: ExpandHelp(self: SmartTagAction) -> bool
        Set: ExpandHelp(self: SmartTagAction) = value
        """
        ...

    @property
    def ListSelection(self) -> int:
        """
        Get: ListSelection(self: SmartTagAction) -> int
        Set: ListSelection(self: SmartTagAction) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SmartTagAction) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTagAction) -> object """
        ...

    @property
    def PresentInPane(self) -> bool:
        """ Get: PresentInPane(self: SmartTagAction) -> bool """
        ...

    @property
    def RadioGroupSelection(self) -> int:
        """
        Get: RadioGroupSelection(self: SmartTagAction) -> int
        Set: RadioGroupSelection(self: SmartTagAction) = value
        """
        ...

    @property
    def TextboxText(self) -> str:
        """
        Get: TextboxText(self: SmartTagAction) -> str
        Set: TextboxText(self: SmartTagAction) = value
        """
        ...

    @property
    def Type(self) -> WdSmartTagControlType:
        """ Get: Type(self: SmartTagAction) -> WdSmartTagControlType """
        ...


    def Execute(self): # -> 
        """ Execute(self: SmartTagAction) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTagActions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTagActions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SmartTagActions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SmartTagActions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTagActions) -> object """
        ...


    def ReloadActions(self): # -> 
        """ ReloadActions(self: SmartTagActions) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTagRecognizer: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTagRecognizer) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """ Get: Caption(self: SmartTagRecognizer) -> str """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SmartTagRecognizer) -> int """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: SmartTagRecognizer) -> bool
        Set: Enabled(self: SmartTagRecognizer) = value
        """
        ...

    @property
    def FullName(self) -> str:
        """ Get: FullName(self: SmartTagRecognizer) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTagRecognizer) -> object """
        ...

    @property
    def ProgID(self) -> str:
        """ Get: ProgID(self: SmartTagRecognizer) -> str """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTagRecognizers(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTagRecognizers) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SmartTagRecognizers) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SmartTagRecognizers) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTagRecognizers) -> object """
        ...


    def ReloadRecognizers(self): # -> 
        """ ReloadRecognizers(self: SmartTagRecognizers) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTags(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTags) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SmartTags) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SmartTags) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTags) -> object """
        ...


    def Add(self, Name:str, Range:object, Properties:object) -> Tuple_[SmartTag, object, object]:
        """ Add(self: SmartTags, Name: str, Range: object, Properties: object) -> (SmartTag, object, object) """
        ...

    def SmartTagsByType(self, Name:str) -> SmartTags:
        """ SmartTagsByType(self: SmartTags, Name: str) -> SmartTags """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTagType: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTagType) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SmartTagType) -> int """
        ...

    @property
    def FriendlyName(self) -> str:
        """ Get: FriendlyName(self: SmartTagType) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SmartTagType) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTagType) -> object """
        ...

    @property
    def SmartTagActions(self) -> SmartTagActions:
        """ Get: SmartTagActions(self: SmartTagType) -> SmartTagActions """
        ...

    @property
    def SmartTagRecognizers(self) -> SmartTagRecognizers:
        """ Get: SmartTagRecognizers(self: SmartTagType) -> SmartTagRecognizers """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SmartTagTypes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SmartTagTypes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SmartTagTypes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SmartTagTypes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SmartTagTypes) -> object """
        ...


    def ReloadAll(self): # -> 
        """ ReloadAll(self: SmartTagTypes) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SoftEdgeFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SoftEdgeFormat) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SoftEdgeFormat) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SoftEdgeFormat) -> object """
        ...

    @property
    def Radius(self) -> Single:
        """
        Get: Radius(self: SoftEdgeFormat) -> Single
        Set: Radius(self: SoftEdgeFormat) = value
        """
        ...

    @property
    def Type(self): # -> MsoSoftEdgeType
        """
        Get: Type(self: SoftEdgeFormat) -> MsoSoftEdgeType
        Set: Type(self: SoftEdgeFormat) = value
        """
        ...



class Source: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Source) -> Application """
        ...

    @property
    def Cited(self) -> bool:
        """ Get: Cited(self: Source) -> bool """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Source) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Source) -> object """
        ...

    @property
    def Tag(self) -> str:
        """ Get: Tag(self: Source) -> str """
        ...

    @property
    def XML(self) -> str:
        """ Get: XML(self: Source) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: Source) """
        ...


class Sources(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Sources) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Sources) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Sources) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Sources) -> object """
        ...


    def Add(self, Data:str): # -> 
        """ Add(self: Sources, Data: str) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SpellingSuggestion: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SpellingSuggestion) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SpellingSuggestion) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SpellingSuggestion) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SpellingSuggestion) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SpellingSuggestions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: SpellingSuggestions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: SpellingSuggestions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SpellingSuggestions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SpellingSuggestions) -> object """
        ...

    @property
    def SpellingErrorType(self) -> WdSpellingErrorType:
        """ Get: SpellingErrorType(self: SpellingSuggestions) -> WdSpellingErrorType """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class StoryRanges(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: StoryRanges) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: StoryRanges) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: StoryRanges) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: StoryRanges) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Style: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Style) -> Application """
        ...

    @property
    def AutomaticallyUpdate(self) -> bool:
        """
        Get: AutomaticallyUpdate(self: Style) -> bool
        Set: AutomaticallyUpdate(self: Style) = value
        """
        ...

    @property
    def BaseStyle(self) -> object:
        """
        Get: BaseStyle(self: Style) -> object
        Set: BaseStyle(self: Style) = value
        """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Style) -> Borders
        Set: Borders(self: Style) = value
        """
        ...

    @property
    def BuiltIn(self) -> bool:
        """ Get: BuiltIn(self: Style) -> bool """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Style) -> int """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description(self: Style) -> str """
        ...

    @property
    def Font(self) -> Font:
        """
        Get: Font(self: Style) -> Font
        Set: Font(self: Style) = value
        """
        ...

    @property
    def Frame(self) -> Frame:
        """ Get: Frame(self: Style) -> Frame """
        ...

    @property
    def Hidden(self) -> bool:
        """
        Get: Hidden(self: Style) -> bool
        Set: Hidden(self: Style) = value
        """
        ...

    @property
    def InUse(self) -> bool:
        """ Get: InUse(self: Style) -> bool """
        ...

    @property
    def LanguageID(self) -> WdLanguageID:
        """
        Get: LanguageID(self: Style) -> WdLanguageID
        Set: LanguageID(self: Style) = value
        """
        ...

    @property
    def LanguageIDFarEast(self) -> WdLanguageID:
        """
        Get: LanguageIDFarEast(self: Style) -> WdLanguageID
        Set: LanguageIDFarEast(self: Style) = value
        """
        ...

    @property
    def Linked(self) -> bool:
        """ Get: Linked(self: Style) -> bool """
        ...

    @property
    def LinkStyle(self) -> object:
        """
        Get: LinkStyle(self: Style) -> object
        Set: LinkStyle(self: Style) = value
        """
        ...

    @property
    def ListLevelNumber(self) -> int:
        """ Get: ListLevelNumber(self: Style) -> int """
        ...

    @property
    def ListTemplate(self) -> ListTemplate:
        """ Get: ListTemplate(self: Style) -> ListTemplate """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Style) -> bool
        Set: Locked(self: Style) = value
        """
        ...

    @property
    def NameLocal(self) -> str:
        """
        Get: NameLocal(self: Style) -> str
        Set: NameLocal(self: Style) = value
        """
        ...

    @property
    def NextParagraphStyle(self) -> object:
        """
        Get: NextParagraphStyle(self: Style) -> object
        Set: NextParagraphStyle(self: Style) = value
        """
        ...

    @property
    def NoProofing(self) -> int:
        """
        Get: NoProofing(self: Style) -> int
        Set: NoProofing(self: Style) = value
        """
        ...

    @property
    def NoSpaceBetweenParagraphsOfSameStyle(self) -> bool:
        """
        Get: NoSpaceBetweenParagraphsOfSameStyle(self: Style) -> bool
        Set: NoSpaceBetweenParagraphsOfSameStyle(self: Style) = value
        """
        ...

    @property
    def ParagraphFormat(self) -> ParagraphFormat:
        """
        Get: ParagraphFormat(self: Style) -> ParagraphFormat
        Set: ParagraphFormat(self: Style) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Style) -> object """
        ...

    @property
    def Priority(self) -> int:
        """
        Get: Priority(self: Style) -> int
        Set: Priority(self: Style) = value
        """
        ...

    @property
    def QuickStyle(self) -> bool:
        """
        Get: QuickStyle(self: Style) -> bool
        Set: QuickStyle(self: Style) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Style) -> Shading """
        ...

    @property
    def Table(self) -> TableStyle:
        """ Get: Table(self: Style) -> TableStyle """
        ...

    @property
    def Type(self) -> WdStyleType:
        """ Get: Type(self: Style) -> WdStyleType """
        ...

    @property
    def UnhideWhenUsed(self) -> bool:
        """
        Get: UnhideWhenUsed(self: Style) -> bool
        Set: UnhideWhenUsed(self: Style) = value
        """
        ...

    @property
    def Visibility(self) -> bool:
        """
        Get: Visibility(self: Style) -> bool
        Set: Visibility(self: Style) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: Style) """
        ...

    def LinkToListTemplate(self, ListTemplate:ListTemplate, ListLevelNumber:object) -> object:
        """ LinkToListTemplate(self: Style, ListTemplate: ListTemplate, ListLevelNumber: object) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Styles(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Styles) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Styles) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Styles) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Styles) -> object """
        ...


    def Add(self, Name:str, Type:object) -> Tuple_[Style, object]:
        """ Add(self: Styles, Name: str, Type: object) -> (Style, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class StyleSheet: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: StyleSheet) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: StyleSheet) -> int """
        ...

    @property
    def FullName(self) -> str:
        """ Get: FullName(self: StyleSheet) -> str """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: StyleSheet) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: StyleSheet) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: StyleSheet) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: StyleSheet) -> str """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: StyleSheet) -> str
        Set: Title(self: StyleSheet) = value
        """
        ...

    @property
    def Type(self) -> WdStyleSheetLinkType:
        """
        Get: Type(self: StyleSheet) -> WdStyleSheetLinkType
        Set: Type(self: StyleSheet) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: StyleSheet) """
        ...

    def Move(self, Precedence:WdStyleSheetPrecedence): # -> 
        """ Move(self: StyleSheet, Precedence: WdStyleSheetPrecedence) """
        ...


class StyleSheets(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: StyleSheets) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: StyleSheets) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: StyleSheets) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: StyleSheets) -> object """
        ...


    def Add(self, FileName:str, LinkType:WdStyleSheetLinkType, Title:str, Precedence:WdStyleSheetPrecedence) -> StyleSheet:
        """ Add(self: StyleSheets, FileName: str, LinkType: WdStyleSheetLinkType, Title: str, Precedence: WdStyleSheetPrecedence) -> StyleSheet """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Subdocument: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Subdocument) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Subdocument) -> int """
        ...

    @property
    def HasFile(self) -> bool:
        """ Get: HasFile(self: Subdocument) -> bool """
        ...

    @property
    def Level(self) -> int:
        """ Get: Level(self: Subdocument) -> int """
        ...

    @property
    def Locked(self) -> bool:
        """
        Get: Locked(self: Subdocument) -> bool
        Set: Locked(self: Subdocument) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Subdocument) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Subdocument) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: Subdocument) -> str """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Subdocument) -> Range """
        ...


    def Delete(self): # -> 
        """ Delete(self: Subdocument) """
        ...

    def Open(self) -> Document:
        """ Open(self: Subdocument) -> Document """
        ...

    def Split(self, Range:Range): # -> 
        """ Split(self: Subdocument, Range: Range) """
        ...


class Subdocuments(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Subdocuments) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Subdocuments) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Subdocuments) -> int """
        ...

    @property
    def Expanded(self) -> bool:
        """
        Get: Expanded(self: Subdocuments) -> bool
        Set: Expanded(self: Subdocuments) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Subdocuments) -> object """
        ...


    def AddFromFile(self, Name:object, ConfirmConversions:object, ReadOnly:object, PasswordDocument:object, PasswordTemplate:object, Revert:object, WritePasswordDocument:object, WritePasswordTemplate:object) -> Tuple_[Subdocument, object, object, object, object, object, object, object, object]:
        """ AddFromFile(self: Subdocuments, Name: object, ConfirmConversions: object, ReadOnly: object, PasswordDocument: object, PasswordTemplate: object, Revert: object, WritePasswordDocument: object, WritePasswordTemplate: object) -> (Subdocument, object, object, object, object, object, object, object, object) """
        ...

    def AddFromRange(self, Range:Range) -> Subdocument:
        """ AddFromRange(self: Subdocuments, Range: Range) -> Subdocument """
        ...

    def Delete(self): # -> 
        """ Delete(self: Subdocuments) """
        ...

    def Merge(self, FirstSubdocument:object, LastSubdocument:object) -> Tuple_[object, object]:
        """ Merge(self: Subdocuments, FirstSubdocument: object, LastSubdocument: object) -> (object, object) """
        ...

    def Select(self): # -> 
        """ Select(self: Subdocuments) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class SynonymInfo: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AntonymList(self) -> object:
        """ Get: AntonymList(self: SynonymInfo) -> object """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: SynonymInfo) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: SynonymInfo) -> int """
        ...

    @property
    def Found(self) -> bool:
        """ Get: Found(self: SynonymInfo) -> bool """
        ...

    @property
    def MeaningCount(self) -> int:
        """ Get: MeaningCount(self: SynonymInfo) -> int """
        ...

    @property
    def MeaningList(self) -> object:
        """ Get: MeaningList(self: SynonymInfo) -> object """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: SynonymInfo) -> object """
        ...

    @property
    def PartOfSpeechList(self) -> object:
        """ Get: PartOfSpeechList(self: SynonymInfo) -> object """
        ...

    @property
    def RelatedExpressionList(self) -> object:
        """ Get: RelatedExpressionList(self: SynonymInfo) -> object """
        ...

    @property
    def RelatedWordList(self) -> object:
        """ Get: RelatedWordList(self: SynonymInfo) -> object """
        ...

    @property
    def Word(self) -> str:
        """ Get: Word(self: SynonymInfo) -> str """
        ...



class System: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: System) -> Application """
        ...

    @property
    def ComputerType(self) -> str:
        """ Get: ComputerType(self: System) -> str """
        ...

    @property
    def Country(self) -> WdCountry:
        """ Get: Country(self: System) -> WdCountry """
        ...

    @property
    def CountryRegion(self) -> WdCountry:
        """ Get: CountryRegion(self: System) -> WdCountry """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: System) -> int """
        ...

    @property
    def Cursor(self) -> WdCursorType:
        """
        Get: Cursor(self: System) -> WdCursorType
        Set: Cursor(self: System) = value
        """
        ...

    @property
    def FreeDiskSpace(self) -> int:
        """ Get: FreeDiskSpace(self: System) -> int """
        ...

    @property
    def HorizontalResolution(self) -> int:
        """ Get: HorizontalResolution(self: System) -> int """
        ...

    @property
    def LanguageDesignation(self) -> str:
        """ Get: LanguageDesignation(self: System) -> str """
        ...

    @property
    def MacintoshName(self) -> str:
        """ Get: MacintoshName(self: System) -> str """
        ...

    @property
    def MathCoprocessorInstalled(self) -> bool:
        """ Get: MathCoprocessorInstalled(self: System) -> bool """
        ...

    @property
    def OperatingSystem(self) -> str:
        """ Get: OperatingSystem(self: System) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: System) -> object """
        ...

    @property
    def ProcessorType(self) -> str:
        """ Get: ProcessorType(self: System) -> str """
        ...

    @property
    def QuickDrawInstalled(self) -> bool:
        """ Get: QuickDrawInstalled(self: System) -> bool """
        ...

    @property
    def Version(self) -> str:
        """ Get: Version(self: System) -> str """
        ...

    @property
    def VerticalResolution(self) -> int:
        """ Get: VerticalResolution(self: System) -> int """
        ...


    def Connect(self, Path:str, Drive:object, Password:object) -> Tuple_[object, object]:
        """ Connect(self: System, Path: str, Drive: object, Password: object) -> (object, object) """
        ...

    def MSInfo(self): # -> 
        """ MSInfo(self: System) """
        ...


class Table: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowAutoFit(self) -> bool:
        """
        Get: AllowAutoFit(self: Table) -> bool
        Set: AllowAutoFit(self: Table) = value
        """
        ...

    @property
    def AllowPageBreaks(self) -> bool:
        """
        Get: AllowPageBreaks(self: Table) -> bool
        Set: AllowPageBreaks(self: Table) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Table) -> Application """
        ...

    @property
    def ApplyStyleColumnBands(self) -> bool:
        """
        Get: ApplyStyleColumnBands(self: Table) -> bool
        Set: ApplyStyleColumnBands(self: Table) = value
        """
        ...

    @property
    def ApplyStyleFirstColumn(self) -> bool:
        """
        Get: ApplyStyleFirstColumn(self: Table) -> bool
        Set: ApplyStyleFirstColumn(self: Table) = value
        """
        ...

    @property
    def ApplyStyleHeadingRows(self) -> bool:
        """
        Get: ApplyStyleHeadingRows(self: Table) -> bool
        Set: ApplyStyleHeadingRows(self: Table) = value
        """
        ...

    @property
    def ApplyStyleLastColumn(self) -> bool:
        """
        Get: ApplyStyleLastColumn(self: Table) -> bool
        Set: ApplyStyleLastColumn(self: Table) = value
        """
        ...

    @property
    def ApplyStyleLastRow(self) -> bool:
        """
        Get: ApplyStyleLastRow(self: Table) -> bool
        Set: ApplyStyleLastRow(self: Table) = value
        """
        ...

    @property
    def ApplyStyleRowBands(self) -> bool:
        """
        Get: ApplyStyleRowBands(self: Table) -> bool
        Set: ApplyStyleRowBands(self: Table) = value
        """
        ...

    @property
    def AutoFormatType(self) -> int:
        """ Get: AutoFormatType(self: Table) -> int """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: Table) -> Borders
        Set: Borders(self: Table) = value
        """
        ...

    @property
    def BottomPadding(self) -> Single:
        """
        Get: BottomPadding(self: Table) -> Single
        Set: BottomPadding(self: Table) = value
        """
        ...

    @property
    def Columns(self) -> Columns:
        """ Get: Columns(self: Table) -> Columns """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Table) -> int """
        ...

    @property
    def Descr(self) -> str:
        """
        Get: Descr(self: Table) -> str
        Set: Descr(self: Table) = value
        """
        ...

    @property
    def ID(self) -> str:
        """
        Get: ID(self: Table) -> str
        Set: ID(self: Table) = value
        """
        ...

    @property
    def LeftPadding(self) -> Single:
        """
        Get: LeftPadding(self: Table) -> Single
        Set: LeftPadding(self: Table) = value
        """
        ...

    @property
    def NestingLevel(self) -> int:
        """ Get: NestingLevel(self: Table) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Table) -> object """
        ...

    @property
    def PreferredWidth(self) -> Single:
        """
        Get: PreferredWidth(self: Table) -> Single
        Set: PreferredWidth(self: Table) = value
        """
        ...

    @property
    def PreferredWidthType(self) -> WdPreferredWidthType:
        """
        Get: PreferredWidthType(self: Table) -> WdPreferredWidthType
        Set: PreferredWidthType(self: Table) = value
        """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: Table) -> Range """
        ...

    @property
    def RightPadding(self) -> Single:
        """
        Get: RightPadding(self: Table) -> Single
        Set: RightPadding(self: Table) = value
        """
        ...

    @property
    def Rows(self) -> Rows:
        """ Get: Rows(self: Table) -> Rows """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: Table) -> Shading """
        ...

    @property
    def Spacing(self) -> Single:
        """
        Get: Spacing(self: Table) -> Single
        Set: Spacing(self: Table) = value
        """
        ...

    @property
    def Style(self) -> object:
        """
        Get: Style(self: Table) -> object
        Set: Style(self: Table) = value
        """
        ...

    @property
    def TableDirection(self) -> WdTableDirection:
        """
        Get: TableDirection(self: Table) -> WdTableDirection
        Set: TableDirection(self: Table) = value
        """
        ...

    @property
    def Tables(self) -> Tables:
        """ Get: Tables(self: Table) -> Tables """
        ...

    @property
    def Title(self) -> str:
        """
        Get: Title(self: Table) -> str
        Set: Title(self: Table) = value
        """
        ...

    @property
    def TopPadding(self) -> Single:
        """
        Get: TopPadding(self: Table) -> Single
        Set: TopPadding(self: Table) = value
        """
        ...

    @property
    def Uniform(self) -> bool:
        """ Get: Uniform(self: Table) -> bool """
        ...


    def ApplyStyleDirectFormatting(self, StyleName:str): # -> 
        """ ApplyStyleDirectFormatting(self: Table, StyleName: str) """
        ...

    def AutoFitBehavior(self, Behavior:WdAutoFitBehavior): # -> 
        """ AutoFitBehavior(self: Table, Behavior: WdAutoFitBehavior) """
        ...

    def AutoFormat(self, Format:object, ApplyBorders:object, ApplyShading:object, ApplyFont:object, ApplyColor:object, ApplyHeadingRows:object, ApplyLastRow:object, ApplyFirstColumn:object, ApplyLastColumn:object, AutoFit:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object]:
        """ AutoFormat(self: Table, Format: object, ApplyBorders: object, ApplyShading: object, ApplyFont: object, ApplyColor: object, ApplyHeadingRows: object, ApplyLastRow: object, ApplyFirstColumn: object, ApplyLastColumn: object, AutoFit: object) -> (object, object, object, object, object, object, object, object, object, object) """
        ...

    def Cell(self, Row:int, Column:int) -> Cell:
        """ Cell(self: Table, Row: int, Column: int) -> Cell """
        ...

    def ConvertToText(self, Separator:object, NestedTables:object) -> Tuple_[Range, object, object]:
        """ ConvertToText(self: Table, Separator: object, NestedTables: object) -> (Range, object, object) """
        ...

    def ConvertToTextOld(self, Separator:object) -> Tuple_[Range, object]:
        """ ConvertToTextOld(self: Table, Separator: object) -> (Range, object) """
        ...

    def Delete(self): # -> 
        """ Delete(self: Table) """
        ...

    def Select(self): # -> 
        """ Select(self: Table) """
        ...

    def Sort(self, ExcludeHeader:object, FieldNumber:object, SortFieldType:object, SortOrder:object, FieldNumber2:object, SortFieldType2:object, SortOrder2:object, FieldNumber3:object, SortFieldType3:object, SortOrder3:object, CaseSensitive:object, BidiSort:object, IgnoreThe:object, IgnoreKashida:object, IgnoreDiacritics:object, IgnoreHe:object, LanguageID:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Sort(self: Table, ExcludeHeader: object, FieldNumber: object, SortFieldType: object, SortOrder: object, FieldNumber2: object, SortFieldType2: object, SortOrder2: object, FieldNumber3: object, SortFieldType3: object, SortOrder3: object, CaseSensitive: object, BidiSort: object, IgnoreThe: object, IgnoreKashida: object, IgnoreDiacritics: object, IgnoreHe: object, LanguageID: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def SortAscending(self): # -> 
        """ SortAscending(self: Table) """
        ...

    def SortDescending(self): # -> 
        """ SortDescending(self: Table) """
        ...

    def SortOld(self, ExcludeHeader:object, FieldNumber:object, SortFieldType:object, SortOrder:object, FieldNumber2:object, SortFieldType2:object, SortOrder2:object, FieldNumber3:object, SortFieldType3:object, SortOrder3:object, CaseSensitive:object, LanguageID:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object]:
        """ SortOld(self: Table, ExcludeHeader: object, FieldNumber: object, SortFieldType: object, SortOrder: object, FieldNumber2: object, SortFieldType2: object, SortOrder2: object, FieldNumber3: object, SortFieldType3: object, SortOrder3: object, CaseSensitive: object, LanguageID: object) -> (object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Split(self, BeforeRow:object) -> Tuple_[Table, object]:
        """ Split(self: Table, BeforeRow: object) -> (Table, object) """
        ...

    def UpdateAutoFormat(self): # -> 
        """ UpdateAutoFormat(self: Table) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TableOfAuthorities: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableOfAuthorities) -> Application """
        ...

    @property
    def Bookmark(self) -> str:
        """
        Get: Bookmark(self: TableOfAuthorities) -> str
        Set: Bookmark(self: TableOfAuthorities) = value
        """
        ...

    @property
    def Category(self) -> int:
        """
        Get: Category(self: TableOfAuthorities) -> int
        Set: Category(self: TableOfAuthorities) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TableOfAuthorities) -> int """
        ...

    @property
    def EntrySeparator(self) -> str:
        """
        Get: EntrySeparator(self: TableOfAuthorities) -> str
        Set: EntrySeparator(self: TableOfAuthorities) = value
        """
        ...

    @property
    def IncludeCategoryHeader(self) -> bool:
        """
        Get: IncludeCategoryHeader(self: TableOfAuthorities) -> bool
        Set: IncludeCategoryHeader(self: TableOfAuthorities) = value
        """
        ...

    @property
    def IncludeSequenceName(self) -> str:
        """
        Get: IncludeSequenceName(self: TableOfAuthorities) -> str
        Set: IncludeSequenceName(self: TableOfAuthorities) = value
        """
        ...

    @property
    def KeepEntryFormatting(self) -> bool:
        """
        Get: KeepEntryFormatting(self: TableOfAuthorities) -> bool
        Set: KeepEntryFormatting(self: TableOfAuthorities) = value
        """
        ...

    @property
    def PageNumberSeparator(self) -> str:
        """
        Get: PageNumberSeparator(self: TableOfAuthorities) -> str
        Set: PageNumberSeparator(self: TableOfAuthorities) = value
        """
        ...

    @property
    def PageRangeSeparator(self) -> str:
        """
        Get: PageRangeSeparator(self: TableOfAuthorities) -> str
        Set: PageRangeSeparator(self: TableOfAuthorities) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableOfAuthorities) -> object """
        ...

    @property
    def Passim(self) -> bool:
        """
        Get: Passim(self: TableOfAuthorities) -> bool
        Set: Passim(self: TableOfAuthorities) = value
        """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: TableOfAuthorities) -> Range """
        ...

    @property
    def Separator(self) -> str:
        """
        Get: Separator(self: TableOfAuthorities) -> str
        Set: Separator(self: TableOfAuthorities) = value
        """
        ...

    @property
    def TabLeader(self) -> WdTabLeader:
        """
        Get: TabLeader(self: TableOfAuthorities) -> WdTabLeader
        Set: TabLeader(self: TableOfAuthorities) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: TableOfAuthorities) """
        ...

    def Update(self): # -> 
        """ Update(self: TableOfAuthorities) """
        ...


class TableOfAuthoritiesCategory: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableOfAuthoritiesCategory) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TableOfAuthoritiesCategory) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: TableOfAuthoritiesCategory) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: TableOfAuthoritiesCategory) -> str
        Set: Name(self: TableOfAuthoritiesCategory) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableOfAuthoritiesCategory) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class TableOfContents: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableOfContents) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TableOfContents) -> int """
        ...

    @property
    def HeadingStyles(self) -> HeadingStyles:
        """ Get: HeadingStyles(self: TableOfContents) -> HeadingStyles """
        ...

    @property
    def HidePageNumbersInWeb(self) -> bool:
        """
        Get: HidePageNumbersInWeb(self: TableOfContents) -> bool
        Set: HidePageNumbersInWeb(self: TableOfContents) = value
        """
        ...

    @property
    def IncludePageNumbers(self) -> bool:
        """
        Get: IncludePageNumbers(self: TableOfContents) -> bool
        Set: IncludePageNumbers(self: TableOfContents) = value
        """
        ...

    @property
    def LowerHeadingLevel(self) -> int:
        """
        Get: LowerHeadingLevel(self: TableOfContents) -> int
        Set: LowerHeadingLevel(self: TableOfContents) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableOfContents) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: TableOfContents) -> Range """
        ...

    @property
    def RightAlignPageNumbers(self) -> bool:
        """
        Get: RightAlignPageNumbers(self: TableOfContents) -> bool
        Set: RightAlignPageNumbers(self: TableOfContents) = value
        """
        ...

    @property
    def TabLeader(self) -> WdTabLeader:
        """
        Get: TabLeader(self: TableOfContents) -> WdTabLeader
        Set: TabLeader(self: TableOfContents) = value
        """
        ...

    @property
    def TableID(self) -> str:
        """
        Get: TableID(self: TableOfContents) -> str
        Set: TableID(self: TableOfContents) = value
        """
        ...

    @property
    def UpperHeadingLevel(self) -> int:
        """
        Get: UpperHeadingLevel(self: TableOfContents) -> int
        Set: UpperHeadingLevel(self: TableOfContents) = value
        """
        ...

    @property
    def UseFields(self) -> bool:
        """
        Get: UseFields(self: TableOfContents) -> bool
        Set: UseFields(self: TableOfContents) = value
        """
        ...

    @property
    def UseHeadingStyles(self) -> bool:
        """
        Get: UseHeadingStyles(self: TableOfContents) -> bool
        Set: UseHeadingStyles(self: TableOfContents) = value
        """
        ...

    @property
    def UseHyperlinks(self) -> bool:
        """
        Get: UseHyperlinks(self: TableOfContents) -> bool
        Set: UseHyperlinks(self: TableOfContents) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: TableOfContents) """
        ...

    def Update(self): # -> 
        """ Update(self: TableOfContents) """
        ...

    def UpdatePageNumbers(self): # -> 
        """ UpdatePageNumbers(self: TableOfContents) """
        ...


class TableOfFigures: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableOfFigures) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: TableOfFigures) -> str
        Set: Caption(self: TableOfFigures) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TableOfFigures) -> int """
        ...

    @property
    def HeadingStyles(self) -> HeadingStyles:
        """ Get: HeadingStyles(self: TableOfFigures) -> HeadingStyles """
        ...

    @property
    def HidePageNumbersInWeb(self) -> bool:
        """
        Get: HidePageNumbersInWeb(self: TableOfFigures) -> bool
        Set: HidePageNumbersInWeb(self: TableOfFigures) = value
        """
        ...

    @property
    def IncludeLabel(self) -> bool:
        """
        Get: IncludeLabel(self: TableOfFigures) -> bool
        Set: IncludeLabel(self: TableOfFigures) = value
        """
        ...

    @property
    def IncludePageNumbers(self) -> bool:
        """
        Get: IncludePageNumbers(self: TableOfFigures) -> bool
        Set: IncludePageNumbers(self: TableOfFigures) = value
        """
        ...

    @property
    def LowerHeadingLevel(self) -> int:
        """
        Get: LowerHeadingLevel(self: TableOfFigures) -> int
        Set: LowerHeadingLevel(self: TableOfFigures) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableOfFigures) -> object """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: TableOfFigures) -> Range """
        ...

    @property
    def RightAlignPageNumbers(self) -> bool:
        """
        Get: RightAlignPageNumbers(self: TableOfFigures) -> bool
        Set: RightAlignPageNumbers(self: TableOfFigures) = value
        """
        ...

    @property
    def TabLeader(self) -> WdTabLeader:
        """
        Get: TabLeader(self: TableOfFigures) -> WdTabLeader
        Set: TabLeader(self: TableOfFigures) = value
        """
        ...

    @property
    def TableID(self) -> str:
        """
        Get: TableID(self: TableOfFigures) -> str
        Set: TableID(self: TableOfFigures) = value
        """
        ...

    @property
    def UpperHeadingLevel(self) -> int:
        """
        Get: UpperHeadingLevel(self: TableOfFigures) -> int
        Set: UpperHeadingLevel(self: TableOfFigures) = value
        """
        ...

    @property
    def UseFields(self) -> bool:
        """
        Get: UseFields(self: TableOfFigures) -> bool
        Set: UseFields(self: TableOfFigures) = value
        """
        ...

    @property
    def UseHeadingStyles(self) -> bool:
        """
        Get: UseHeadingStyles(self: TableOfFigures) -> bool
        Set: UseHeadingStyles(self: TableOfFigures) = value
        """
        ...

    @property
    def UseHyperlinks(self) -> bool:
        """
        Get: UseHyperlinks(self: TableOfFigures) -> bool
        Set: UseHyperlinks(self: TableOfFigures) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: TableOfFigures) """
        ...

    def Update(self): # -> 
        """ Update(self: TableOfFigures) """
        ...

    def UpdatePageNumbers(self): # -> 
        """ UpdatePageNumbers(self: TableOfFigures) """
        ...


class Tables(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Tables) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Tables) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Tables) -> int """
        ...

    @property
    def NestingLevel(self) -> int:
        """ Get: NestingLevel(self: Tables) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Tables) -> object """
        ...


    def Add(self, Range:Range, NumRows:int, NumColumns:int, DefaultTableBehavior:object, AutoFitBehavior:object) -> Tuple_[Table, object, object]:
        """ Add(self: Tables, Range: Range, NumRows: int, NumColumns: int, DefaultTableBehavior: object, AutoFitBehavior: object) -> (Table, object, object) """
        ...

    def AddOld(self, Range:Range, NumRows:int, NumColumns:int) -> Table:
        """ AddOld(self: Tables, Range: Range, NumRows: int, NumColumns: int) -> Table """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TablesOfAuthorities(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TablesOfAuthorities) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TablesOfAuthorities) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TablesOfAuthorities) -> int """
        ...

    @property
    def Format(self) -> WdToaFormat:
        """
        Get: Format(self: TablesOfAuthorities) -> WdToaFormat
        Set: Format(self: TablesOfAuthorities) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TablesOfAuthorities) -> object """
        ...


    def Add(self, Range:Range, Category:object, Bookmark:object, Passim:object, KeepEntryFormatting:object, Separator:object, IncludeSequenceName:object, EntrySeparator:object, PageRangeSeparator:object, IncludeCategoryHeader:object, PageNumberSeparator:object) -> Tuple_[TableOfAuthorities, object, object, object, object, object, object, object, object, object, object]:
        """ Add(self: TablesOfAuthorities, Range: Range, Category: object, Bookmark: object, Passim: object, KeepEntryFormatting: object, Separator: object, IncludeSequenceName: object, EntrySeparator: object, PageRangeSeparator: object, IncludeCategoryHeader: object, PageNumberSeparator: object) -> (TableOfAuthorities, object, object, object, object, object, object, object, object, object, object) """
        ...

    def MarkAllCitations(self, ShortCitation:str, LongCitation:object, LongCitationAutoText:object, Category:object) -> Tuple_[object, object, object]:
        """ MarkAllCitations(self: TablesOfAuthorities, ShortCitation: str, LongCitation: object, LongCitationAutoText: object, Category: object) -> (object, object, object) """
        ...

    def MarkCitation(self, Range:Range, ShortCitation:str, LongCitation:object, LongCitationAutoText:object, Category:object) -> Tuple_[Field, object, object, object]:
        """ MarkCitation(self: TablesOfAuthorities, Range: Range, ShortCitation: str, LongCitation: object, LongCitationAutoText: object, Category: object) -> (Field, object, object, object) """
        ...

    def NextCitation(self, ShortCitation:str): # -> 
        """ NextCitation(self: TablesOfAuthorities, ShortCitation: str) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TablesOfAuthoritiesCategories(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TablesOfAuthoritiesCategories) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TablesOfAuthoritiesCategories) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TablesOfAuthoritiesCategories) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TablesOfAuthoritiesCategories) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TablesOfContents(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TablesOfContents) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TablesOfContents) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TablesOfContents) -> int """
        ...

    @property
    def Format(self) -> WdTocFormat:
        """
        Get: Format(self: TablesOfContents) -> WdTocFormat
        Set: Format(self: TablesOfContents) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TablesOfContents) -> object """
        ...


    def Add(self, Range:Range, UseHeadingStyles:object, UpperHeadingLevel:object, LowerHeadingLevel:object, UseFields:object, TableID:object, RightAlignPageNumbers:object, IncludePageNumbers:object, AddedStyles:object, UseHyperlinks:object, HidePageNumbersInWeb:object, UseOutlineLevels:object) -> Tuple_[TableOfContents, object, object, object, object, object, object, object, object, object, object, object]:
        """ Add(self: TablesOfContents, Range: Range, UseHeadingStyles: object, UpperHeadingLevel: object, LowerHeadingLevel: object, UseFields: object, TableID: object, RightAlignPageNumbers: object, IncludePageNumbers: object, AddedStyles: object, UseHyperlinks: object, HidePageNumbersInWeb: object, UseOutlineLevels: object) -> (TableOfContents, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def Add2000(self, Range:Range, UseHeadingStyles:object, UpperHeadingLevel:object, LowerHeadingLevel:object, UseFields:object, TableID:object, RightAlignPageNumbers:object, IncludePageNumbers:object, AddedStyles:object, UseHyperlinks:object, HidePageNumbersInWeb:object) -> Tuple_[TableOfContents, object, object, object, object, object, object, object, object, object, object]:
        """ Add2000(self: TablesOfContents, Range: Range, UseHeadingStyles: object, UpperHeadingLevel: object, LowerHeadingLevel: object, UseFields: object, TableID: object, RightAlignPageNumbers: object, IncludePageNumbers: object, AddedStyles: object, UseHyperlinks: object, HidePageNumbersInWeb: object) -> (TableOfContents, object, object, object, object, object, object, object, object, object, object) """
        ...

    def AddOld(self, Range:Range, UseHeadingStyles:object, UpperHeadingLevel:object, LowerHeadingLevel:object, UseFields:object, TableID:object, RightAlignPageNumbers:object, IncludePageNumbers:object, AddedStyles:object) -> Tuple_[TableOfContents, object, object, object, object, object, object, object, object]:
        """ AddOld(self: TablesOfContents, Range: Range, UseHeadingStyles: object, UpperHeadingLevel: object, LowerHeadingLevel: object, UseFields: object, TableID: object, RightAlignPageNumbers: object, IncludePageNumbers: object, AddedStyles: object) -> (TableOfContents, object, object, object, object, object, object, object, object) """
        ...

    def MarkEntry(self, Range:Range, Entry:object, EntryAutoText:object, TableID:object, Level:object) -> Tuple_[Field, object, object, object, object]:
        """ MarkEntry(self: TablesOfContents, Range: Range, Entry: object, EntryAutoText: object, TableID: object, Level: object) -> (Field, object, object, object, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TablesOfFigures(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TablesOfFigures) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TablesOfFigures) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TablesOfFigures) -> int """
        ...

    @property
    def Format(self) -> WdTofFormat:
        """
        Get: Format(self: TablesOfFigures) -> WdTofFormat
        Set: Format(self: TablesOfFigures) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TablesOfFigures) -> object """
        ...


    def Add(self, Range:Range, Caption:object, IncludeLabel:object, UseHeadingStyles:object, UpperHeadingLevel:object, LowerHeadingLevel:object, UseFields:object, TableID:object, RightAlignPageNumbers:object, IncludePageNumbers:object, AddedStyles:object, UseHyperlinks:object, HidePageNumbersInWeb:object) -> Tuple_[TableOfFigures, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ Add(self: TablesOfFigures, Range: Range, Caption: object, IncludeLabel: object, UseHeadingStyles: object, UpperHeadingLevel: object, LowerHeadingLevel: object, UseFields: object, TableID: object, RightAlignPageNumbers: object, IncludePageNumbers: object, AddedStyles: object, UseHyperlinks: object, HidePageNumbersInWeb: object) -> (TableOfFigures, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def AddOld(self, Range:Range, Caption:object, IncludeLabel:object, UseHeadingStyles:object, UpperHeadingLevel:object, LowerHeadingLevel:object, UseFields:object, TableID:object, RightAlignPageNumbers:object, IncludePageNumbers:object, AddedStyles:object) -> Tuple_[TableOfFigures, object, object, object, object, object, object, object, object, object, object]:
        """ AddOld(self: TablesOfFigures, Range: Range, Caption: object, IncludeLabel: object, UseHeadingStyles: object, UpperHeadingLevel: object, LowerHeadingLevel: object, UseFields: object, TableID: object, RightAlignPageNumbers: object, IncludePageNumbers: object, AddedStyles: object) -> (TableOfFigures, object, object, object, object, object, object, object, object, object, object) """
        ...

    def MarkEntry(self, Range:Range, Entry:object, EntryAutoText:object, TableID:object, Level:object) -> Tuple_[Field, object, object, object, object]:
        """ MarkEntry(self: TablesOfFigures, Range: Range, Entry: object, EntryAutoText: object, TableID: object, Level: object) -> (Field, object, object, object, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TableStyle: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> WdRowAlignment:
        """
        Get: Alignment(self: TableStyle) -> WdRowAlignment
        Set: Alignment(self: TableStyle) = value
        """
        ...

    @property
    def AllowBreakAcrossPage(self) -> int:
        """
        Get: AllowBreakAcrossPage(self: TableStyle) -> int
        Set: AllowBreakAcrossPage(self: TableStyle) = value
        """
        ...

    @property
    def AllowPageBreaks(self) -> bool:
        """
        Get: AllowPageBreaks(self: TableStyle) -> bool
        Set: AllowPageBreaks(self: TableStyle) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TableStyle) -> Application """
        ...

    @property
    def Borders(self) -> Borders:
        """
        Get: Borders(self: TableStyle) -> Borders
        Set: Borders(self: TableStyle) = value
        """
        ...

    @property
    def BottomPadding(self) -> Single:
        """
        Get: BottomPadding(self: TableStyle) -> Single
        Set: BottomPadding(self: TableStyle) = value
        """
        ...

    @property
    def ColumnStripe(self) -> int:
        """
        Get: ColumnStripe(self: TableStyle) -> int
        Set: ColumnStripe(self: TableStyle) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TableStyle) -> int """
        ...

    @property
    def LeftIndent(self) -> Single:
        """
        Get: LeftIndent(self: TableStyle) -> Single
        Set: LeftIndent(self: TableStyle) = value
        """
        ...

    @property
    def LeftPadding(self) -> Single:
        """
        Get: LeftPadding(self: TableStyle) -> Single
        Set: LeftPadding(self: TableStyle) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TableStyle) -> object """
        ...

    @property
    def RightPadding(self) -> Single:
        """
        Get: RightPadding(self: TableStyle) -> Single
        Set: RightPadding(self: TableStyle) = value
        """
        ...

    @property
    def RowStripe(self) -> int:
        """
        Get: RowStripe(self: TableStyle) -> int
        Set: RowStripe(self: TableStyle) = value
        """
        ...

    @property
    def Shading(self) -> Shading:
        """ Get: Shading(self: TableStyle) -> Shading """
        ...

    @property
    def Spacing(self) -> Single:
        """
        Get: Spacing(self: TableStyle) -> Single
        Set: Spacing(self: TableStyle) = value
        """
        ...

    @property
    def TableDirection(self) -> WdTableDirection:
        """
        Get: TableDirection(self: TableStyle) -> WdTableDirection
        Set: TableDirection(self: TableStyle) = value
        """
        ...

    @property
    def TopPadding(self) -> Single:
        """
        Get: TopPadding(self: TableStyle) -> Single
        Set: TopPadding(self: TableStyle) = value
        """
        ...


    def Condition(self, ConditionCode:WdConditionCode) -> ConditionalStyle:
        """ Condition(self: TableStyle, ConditionCode: WdConditionCode) -> ConditionalStyle """
        ...


class TabStop: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> WdTabAlignment:
        """
        Get: Alignment(self: TabStop) -> WdTabAlignment
        Set: Alignment(self: TabStop) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TabStop) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TabStop) -> int """
        ...

    @property
    def CustomTab(self) -> bool:
        """ Get: CustomTab(self: TabStop) -> bool """
        ...

    @property
    def Leader(self) -> WdTabLeader:
        """
        Get: Leader(self: TabStop) -> WdTabLeader
        Set: Leader(self: TabStop) = value
        """
        ...

    @property
    def Next(self) -> TabStop:
        """ Get: Next(self: TabStop) -> TabStop """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TabStop) -> object """
        ...

    @property
    def Position(self) -> Single:
        """
        Get: Position(self: TabStop) -> Single
        Set: Position(self: TabStop) = value
        """
        ...

    @property
    def Previous(self) -> TabStop:
        """ Get: Previous(self: TabStop) -> TabStop """
        ...


    def Clear(self): # -> 
        """ Clear(self: TabStop) """
        ...


class TabStops(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TabStops) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TabStops) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TabStops) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TabStops) -> object """
        ...


    def Add(self, Position:Single, Alignment:object, Leader:object) -> Tuple_[TabStop, object, object]:
        """ Add(self: TabStops, Position: Single, Alignment: object, Leader: object) -> (TabStop, object, object) """
        ...

    def After(self, Position:Single) -> TabStop:
        """ After(self: TabStops, Position: Single) -> TabStop """
        ...

    def Before(self, Position:Single) -> TabStop:
        """ Before(self: TabStops, Position: Single) -> TabStop """
        ...

    def ClearAll(self): # -> 
        """ ClearAll(self: TabStops) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Task: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Task) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Task) -> int """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: Task) -> int
        Set: Height(self: Task) = value
        """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: Task) -> int
        Set: Left(self: Task) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Task) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Task) -> object """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: Task) -> int
        Set: Top(self: Task) = value
        """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Task) -> bool
        Set: Visible(self: Task) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: Task) -> int
        Set: Width(self: Task) = value
        """
        ...

    @property
    def WindowState(self) -> WdWindowState:
        """
        Get: WindowState(self: Task) -> WdWindowState
        Set: WindowState(self: Task) = value
        """
        ...


    def Activate(self, Wait:object) -> object:
        """ Activate(self: Task, Wait: object) -> object """
        ...

    def Close(self): # -> 
        """ Close(self: Task) """
        ...

    def Move(self, Left:int, Top:int): # -> 
        """ Move(self: Task, Left: int, Top: int) """
        ...

    def Resize(self, Width:int, Height:int): # -> 
        """ Resize(self: Task, Width: int, Height: int) """
        ...

    def SendWindowMessage(self, Message:int, wParam:int, lParam:int): # -> 
        """ SendWindowMessage(self: Task, Message: int, wParam: int, lParam: int) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TaskPane: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TaskPane) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TaskPane) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TaskPane) -> object """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: TaskPane) -> bool
        Set: Visible(self: TaskPane) = value
        """
        ...



class TaskPanes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TaskPanes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TaskPanes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TaskPanes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TaskPanes) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Tasks(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Tasks) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Tasks) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Tasks) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Tasks) -> object """
        ...


    def Exists(self, Name:str) -> bool:
        """ Exists(self: Tasks, Name: str) -> bool """
        ...

    def ExitWindows(self): # -> 
        """ ExitWindows(self: Tasks) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Template: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Template) -> Application """
        ...

    @property
    def AutoTextEntries(self) -> AutoTextEntries:
        """ Get: AutoTextEntries(self: Template) -> AutoTextEntries """
        ...

    @property
    def BuildingBlockEntries(self) -> BuildingBlockEntries:
        """ Get: BuildingBlockEntries(self: Template) -> BuildingBlockEntries """
        ...

    @property
    def BuildingBlockTypes(self) -> BuildingBlockTypes:
        """ Get: BuildingBlockTypes(self: Template) -> BuildingBlockTypes """
        ...

    @property
    def BuiltInDocumentProperties(self) -> object:
        """ Get: BuiltInDocumentProperties(self: Template) -> object """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Template) -> int """
        ...

    @property
    def CustomDocumentProperties(self) -> object:
        """ Get: CustomDocumentProperties(self: Template) -> object """
        ...

    @property
    def FarEastLineBreakLanguage(self) -> WdFarEastLineBreakLanguageID:
        """
        Get: FarEastLineBreakLanguage(self: Template) -> WdFarEastLineBreakLanguageID
        Set: FarEastLineBreakLanguage(self: Template) = value
        """
        ...

    @property
    def FarEastLineBreakLevel(self) -> WdFarEastLineBreakLevel:
        """
        Get: FarEastLineBreakLevel(self: Template) -> WdFarEastLineBreakLevel
        Set: FarEastLineBreakLevel(self: Template) = value
        """
        ...

    @property
    def FullName(self) -> str:
        """ Get: FullName(self: Template) -> str """
        ...

    @property
    def JustificationMode(self) -> WdJustificationMode:
        """
        Get: JustificationMode(self: Template) -> WdJustificationMode
        Set: JustificationMode(self: Template) = value
        """
        ...

    @property
    def KerningByAlgorithm(self) -> bool:
        """
        Get: KerningByAlgorithm(self: Template) -> bool
        Set: KerningByAlgorithm(self: Template) = value
        """
        ...

    @property
    def LanguageID(self) -> WdLanguageID:
        """
        Get: LanguageID(self: Template) -> WdLanguageID
        Set: LanguageID(self: Template) = value
        """
        ...

    @property
    def LanguageIDFarEast(self) -> WdLanguageID:
        """
        Get: LanguageIDFarEast(self: Template) -> WdLanguageID
        Set: LanguageIDFarEast(self: Template) = value
        """
        ...

    @property
    def ListTemplates(self) -> ListTemplates:
        """ Get: ListTemplates(self: Template) -> ListTemplates """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Template) -> str """
        ...

    @property
    def NoLineBreakAfter(self) -> str:
        """
        Get: NoLineBreakAfter(self: Template) -> str
        Set: NoLineBreakAfter(self: Template) = value
        """
        ...

    @property
    def NoLineBreakBefore(self) -> str:
        """
        Get: NoLineBreakBefore(self: Template) -> str
        Set: NoLineBreakBefore(self: Template) = value
        """
        ...

    @property
    def NoProofing(self) -> int:
        """
        Get: NoProofing(self: Template) -> int
        Set: NoProofing(self: Template) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Template) -> object """
        ...

    @property
    def Path(self) -> str:
        """ Get: Path(self: Template) -> str """
        ...

    @property
    def Saved(self) -> bool:
        """
        Get: Saved(self: Template) -> bool
        Set: Saved(self: Template) = value
        """
        ...

    @property
    def Type(self) -> WdTemplateType:
        """ Get: Type(self: Template) -> WdTemplateType """
        ...

    @property
    def VBProject(self): # -> VBProject
        """ Get: VBProject(self: Template) -> VBProject """
        ...


    def OpenAsDocument(self) -> Document:
        """ OpenAsDocument(self: Template) -> Document """
        ...

    def Save(self): # -> 
        """ Save(self: Template) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Templates(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Templates) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Templates) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Templates) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Templates) -> object """
        ...


    def LoadBuildingBlocks(self): # -> 
        """ LoadBuildingBlocks(self: Templates) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TextColumn: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TextColumn) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TextColumn) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextColumn) -> object """
        ...

    @property
    def SpaceAfter(self) -> Single:
        """
        Get: SpaceAfter(self: TextColumn) -> Single
        Set: SpaceAfter(self: TextColumn) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: TextColumn) -> Single
        Set: Width(self: TextColumn) = value
        """
        ...



class TextColumns(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TextColumns) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TextColumns) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TextColumns) -> int """
        ...

    @property
    def EvenlySpaced(self) -> int:
        """
        Get: EvenlySpaced(self: TextColumns) -> int
        Set: EvenlySpaced(self: TextColumns) = value
        """
        ...

    @property
    def FlowDirection(self) -> WdFlowDirection:
        """
        Get: FlowDirection(self: TextColumns) -> WdFlowDirection
        Set: FlowDirection(self: TextColumns) = value
        """
        ...

    @property
    def LineBetween(self) -> int:
        """
        Get: LineBetween(self: TextColumns) -> int
        Set: LineBetween(self: TextColumns) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextColumns) -> object """
        ...

    @property
    def Spacing(self) -> Single:
        """
        Get: Spacing(self: TextColumns) -> Single
        Set: Spacing(self: TextColumns) = value
        """
        ...

    @property
    def Width(self) -> Single:
        """
        Get: Width(self: TextColumns) -> Single
        Set: Width(self: TextColumns) = value
        """
        ...


    def Add(self, Width:object, Spacing:object, EvenlySpaced:object) -> Tuple_[TextColumn, object, object, object]:
        """ Add(self: TextColumns, Width: object, Spacing: object, EvenlySpaced: object) -> (TextColumn, object, object, object) """
        ...

    def SetCount(self, NumColumns:int): # -> 
        """ SetCount(self: TextColumns, NumColumns: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TextEffectFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self): # -> MsoTextEffectAlignment
        """
        Get: Alignment(self: TextEffectFormat) -> MsoTextEffectAlignment
        Set: Alignment(self: TextEffectFormat) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: TextEffectFormat) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TextEffectFormat) -> int """
        ...

    @property
    def FontBold(self): # -> MsoTriState
        """
        Get: FontBold(self: TextEffectFormat) -> MsoTriState
        Set: FontBold(self: TextEffectFormat) = value
        """
        ...

    @property
    def FontItalic(self): # -> MsoTriState
        """
        Get: FontItalic(self: TextEffectFormat) -> MsoTriState
        Set: FontItalic(self: TextEffectFormat) = value
        """
        ...

    @property
    def FontName(self) -> str:
        """
        Get: FontName(self: TextEffectFormat) -> str
        Set: FontName(self: TextEffectFormat) = value
        """
        ...

    @property
    def FontSize(self) -> Single:
        """
        Get: FontSize(self: TextEffectFormat) -> Single
        Set: FontSize(self: TextEffectFormat) = value
        """
        ...

    @property
    def KernedPairs(self): # -> MsoTriState
        """
        Get: KernedPairs(self: TextEffectFormat) -> MsoTriState
        Set: KernedPairs(self: TextEffectFormat) = value
        """
        ...

    @property
    def NormalizedHeight(self): # -> MsoTriState
        """
        Get: NormalizedHeight(self: TextEffectFormat) -> MsoTriState
        Set: NormalizedHeight(self: TextEffectFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextEffectFormat) -> object """
        ...

    @property
    def PresetShape(self): # -> MsoPresetTextEffectShape
        """
        Get: PresetShape(self: TextEffectFormat) -> MsoPresetTextEffectShape
        Set: PresetShape(self: TextEffectFormat) = value
        """
        ...

    @property
    def PresetTextEffect(self): # -> MsoPresetTextEffect
        """
        Get: PresetTextEffect(self: TextEffectFormat) -> MsoPresetTextEffect
        Set: PresetTextEffect(self: TextEffectFormat) = value
        """
        ...

    @property
    def RotatedChars(self): # -> MsoTriState
        """
        Get: RotatedChars(self: TextEffectFormat) -> MsoTriState
        Set: RotatedChars(self: TextEffectFormat) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: TextEffectFormat) -> str
        Set: Text(self: TextEffectFormat) = value
        """
        ...

    @property
    def Tracking(self) -> Single:
        """
        Get: Tracking(self: TextEffectFormat) -> Single
        Set: Tracking(self: TextEffectFormat) = value
        """
        ...


    def ToggleVerticalText(self): # -> 
        """ ToggleVerticalText(self: TextEffectFormat) """
        ...


class TextFrame: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TextFrame) -> Application """
        ...

    @property
    def AutoSize(self) -> int:
        """
        Get: AutoSize(self: TextFrame) -> int
        Set: AutoSize(self: TextFrame) = value
        """
        ...

    @property
    def Column(self): # -> TextColumn2
        """ Get: Column(self: TextFrame) -> TextColumn2 """
        ...

    @property
    def ContainingRange(self) -> Range:
        """ Get: ContainingRange(self: TextFrame) -> Range """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TextFrame) -> int """
        ...

    @property
    def HasText(self) -> int:
        """ Get: HasText(self: TextFrame) -> int """
        ...

    @property
    def HorizontalAnchor(self): # -> MsoHorizontalAnchor
        """
        Get: HorizontalAnchor(self: TextFrame) -> MsoHorizontalAnchor
        Set: HorizontalAnchor(self: TextFrame) = value
        """
        ...

    @property
    def MarginBottom(self) -> Single:
        """
        Get: MarginBottom(self: TextFrame) -> Single
        Set: MarginBottom(self: TextFrame) = value
        """
        ...

    @property
    def MarginLeft(self) -> Single:
        """
        Get: MarginLeft(self: TextFrame) -> Single
        Set: MarginLeft(self: TextFrame) = value
        """
        ...

    @property
    def MarginRight(self) -> Single:
        """
        Get: MarginRight(self: TextFrame) -> Single
        Set: MarginRight(self: TextFrame) = value
        """
        ...

    @property
    def MarginTop(self) -> Single:
        """
        Get: MarginTop(self: TextFrame) -> Single
        Set: MarginTop(self: TextFrame) = value
        """
        ...

    @property
    def Next(self) -> TextFrame:
        """
        Get: Next(self: TextFrame) -> TextFrame
        Set: Next(self: TextFrame) = value
        """
        ...

    @property
    def NoTextRotation(self): # -> MsoTriState
        """
        Get: NoTextRotation(self: TextFrame) -> MsoTriState
        Set: NoTextRotation(self: TextFrame) = value
        """
        ...

    @property
    def Orientation(self): # -> MsoTextOrientation
        """
        Get: Orientation(self: TextFrame) -> MsoTextOrientation
        Set: Orientation(self: TextFrame) = value
        """
        ...

    @property
    def Overflowing(self) -> bool:
        """ Get: Overflowing(self: TextFrame) -> bool """
        ...

    @property
    def Parent(self) -> Shape:
        """ Get: Parent(self: TextFrame) -> Shape """
        ...

    @property
    def PathFormat(self): # -> MsoPathFormat
        """
        Get: PathFormat(self: TextFrame) -> MsoPathFormat
        Set: PathFormat(self: TextFrame) = value
        """
        ...

    @property
    def Previous(self) -> TextFrame:
        """
        Get: Previous(self: TextFrame) -> TextFrame
        Set: Previous(self: TextFrame) = value
        """
        ...

    @property
    def TextRange(self) -> Range:
        """ Get: TextRange(self: TextFrame) -> Range """
        ...

    @property
    def ThreeD(self) -> ThreeDFormat:
        """ Get: ThreeD(self: TextFrame) -> ThreeDFormat """
        ...

    @property
    def VerticalAnchor(self): # -> MsoVerticalAnchor
        """
        Get: VerticalAnchor(self: TextFrame) -> MsoVerticalAnchor
        Set: VerticalAnchor(self: TextFrame) = value
        """
        ...

    @property
    def WarpFormat(self): # -> MsoWarpFormat
        """
        Get: WarpFormat(self: TextFrame) -> MsoWarpFormat
        Set: WarpFormat(self: TextFrame) = value
        """
        ...

    @property
    def WordWrap(self) -> int:
        """
        Get: WordWrap(self: TextFrame) -> int
        Set: WordWrap(self: TextFrame) = value
        """
        ...


    def BreakForwardLink(self): # -> 
        """ BreakForwardLink(self: TextFrame) """
        ...

    def DeleteText(self): # -> 
        """ DeleteText(self: TextFrame) """
        ...

    def ValidLinkTarget(self, TargetTextFrame:TextFrame) -> bool:
        """ ValidLinkTarget(self: TextFrame, TargetTextFrame: TextFrame) -> bool """
        ...


class TextInput: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TextInput) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TextInput) -> int """
        ...

    @property
    def Default(self) -> str:
        """
        Get: Default(self: TextInput) -> str
        Set: Default(self: TextInput) = value
        """
        ...

    @property
    def Format(self) -> str:
        """ Get: Format(self: TextInput) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextInput) -> object """
        ...

    @property
    def Type(self) -> WdTextFormFieldType:
        """ Get: Type(self: TextInput) -> WdTextFormFieldType """
        ...

    @property
    def Valid(self) -> bool:
        """ Get: Valid(self: TextInput) -> bool """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: TextInput) -> int
        Set: Width(self: TextInput) = value
        """
        ...


    def Clear(self): # -> 
        """ Clear(self: TextInput) """
        ...

    def EditType(self, Type:WdTextFormFieldType, Default:object, Format:object, Enabled:object) -> Tuple_[object, object, object]:
        """ EditType(self: TextInput, Type: WdTextFormFieldType, Default: object, Format: object, Enabled: object) -> (object, object, object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TextRetrievalMode: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TextRetrievalMode) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TextRetrievalMode) -> int """
        ...

    @property
    def Duplicate(self) -> TextRetrievalMode:
        """ Get: Duplicate(self: TextRetrievalMode) -> TextRetrievalMode """
        ...

    @property
    def IncludeFieldCodes(self) -> bool:
        """
        Get: IncludeFieldCodes(self: TextRetrievalMode) -> bool
        Set: IncludeFieldCodes(self: TextRetrievalMode) = value
        """
        ...

    @property
    def IncludeHiddenText(self) -> bool:
        """
        Get: IncludeHiddenText(self: TextRetrievalMode) -> bool
        Set: IncludeHiddenText(self: TextRetrievalMode) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TextRetrievalMode) -> object """
        ...

    @property
    def ViewType(self) -> WdViewType:
        """
        Get: ViewType(self: TextRetrievalMode) -> WdViewType
        Set: ViewType(self: TextRetrievalMode) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ThreeDFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: ThreeDFormat) -> Application """
        ...

    @property
    def BevelBottomDepth(self) -> Single:
        """
        Get: BevelBottomDepth(self: ThreeDFormat) -> Single
        Set: BevelBottomDepth(self: ThreeDFormat) = value
        """
        ...

    @property
    def BevelBottomInset(self) -> Single:
        """
        Get: BevelBottomInset(self: ThreeDFormat) -> Single
        Set: BevelBottomInset(self: ThreeDFormat) = value
        """
        ...

    @property
    def BevelBottomType(self): # -> MsoBevelType
        """
        Get: BevelBottomType(self: ThreeDFormat) -> MsoBevelType
        Set: BevelBottomType(self: ThreeDFormat) = value
        """
        ...

    @property
    def BevelTopDepth(self) -> Single:
        """
        Get: BevelTopDepth(self: ThreeDFormat) -> Single
        Set: BevelTopDepth(self: ThreeDFormat) = value
        """
        ...

    @property
    def BevelTopInset(self) -> Single:
        """
        Get: BevelTopInset(self: ThreeDFormat) -> Single
        Set: BevelTopInset(self: ThreeDFormat) = value
        """
        ...

    @property
    def BevelTopType(self): # -> MsoBevelType
        """
        Get: BevelTopType(self: ThreeDFormat) -> MsoBevelType
        Set: BevelTopType(self: ThreeDFormat) = value
        """
        ...

    @property
    def ContourColor(self) -> ColorFormat:
        """ Get: ContourColor(self: ThreeDFormat) -> ColorFormat """
        ...

    @property
    def ContourWidth(self) -> Single:
        """
        Get: ContourWidth(self: ThreeDFormat) -> Single
        Set: ContourWidth(self: ThreeDFormat) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: ThreeDFormat) -> int """
        ...

    @property
    def Depth(self) -> Single:
        """
        Get: Depth(self: ThreeDFormat) -> Single
        Set: Depth(self: ThreeDFormat) = value
        """
        ...

    @property
    def ExtrusionColor(self) -> ColorFormat:
        """ Get: ExtrusionColor(self: ThreeDFormat) -> ColorFormat """
        ...

    @property
    def ExtrusionColorType(self): # -> MsoExtrusionColorType
        """
        Get: ExtrusionColorType(self: ThreeDFormat) -> MsoExtrusionColorType
        Set: ExtrusionColorType(self: ThreeDFormat) = value
        """
        ...

    @property
    def FieldOfView(self) -> Single:
        """
        Get: FieldOfView(self: ThreeDFormat) -> Single
        Set: FieldOfView(self: ThreeDFormat) = value
        """
        ...

    @property
    def LightAngle(self) -> Single:
        """
        Get: LightAngle(self: ThreeDFormat) -> Single
        Set: LightAngle(self: ThreeDFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: ThreeDFormat) -> object """
        ...

    @property
    def Perspective(self): # -> MsoTriState
        """
        Get: Perspective(self: ThreeDFormat) -> MsoTriState
        Set: Perspective(self: ThreeDFormat) = value
        """
        ...

    @property
    def PresetCamera(self): # -> MsoPresetCamera
        """ Get: PresetCamera(self: ThreeDFormat) -> MsoPresetCamera """
        ...

    @property
    def PresetExtrusionDirection(self): # -> MsoPresetExtrusionDirection
        """ Get: PresetExtrusionDirection(self: ThreeDFormat) -> MsoPresetExtrusionDirection """
        ...

    @property
    def PresetLighting(self): # -> MsoLightRigType
        """
        Get: PresetLighting(self: ThreeDFormat) -> MsoLightRigType
        Set: PresetLighting(self: ThreeDFormat) = value
        """
        ...

    @property
    def PresetLightingDirection(self): # -> MsoPresetLightingDirection
        """
        Get: PresetLightingDirection(self: ThreeDFormat) -> MsoPresetLightingDirection
        Set: PresetLightingDirection(self: ThreeDFormat) = value
        """
        ...

    @property
    def PresetLightingSoftness(self): # -> MsoPresetLightingSoftness
        """
        Get: PresetLightingSoftness(self: ThreeDFormat) -> MsoPresetLightingSoftness
        Set: PresetLightingSoftness(self: ThreeDFormat) = value
        """
        ...

    @property
    def PresetMaterial(self): # -> MsoPresetMaterial
        """
        Get: PresetMaterial(self: ThreeDFormat) -> MsoPresetMaterial
        Set: PresetMaterial(self: ThreeDFormat) = value
        """
        ...

    @property
    def PresetThreeDFormat(self): # -> MsoPresetThreeDFormat
        """ Get: PresetThreeDFormat(self: ThreeDFormat) -> MsoPresetThreeDFormat """
        ...

    @property
    def ProjectText(self): # -> MsoTriState
        """
        Get: ProjectText(self: ThreeDFormat) -> MsoTriState
        Set: ProjectText(self: ThreeDFormat) = value
        """
        ...

    @property
    def RotationX(self) -> Single:
        """
        Get: RotationX(self: ThreeDFormat) -> Single
        Set: RotationX(self: ThreeDFormat) = value
        """
        ...

    @property
    def RotationY(self) -> Single:
        """
        Get: RotationY(self: ThreeDFormat) -> Single
        Set: RotationY(self: ThreeDFormat) = value
        """
        ...

    @property
    def RotationZ(self) -> Single:
        """
        Get: RotationZ(self: ThreeDFormat) -> Single
        Set: RotationZ(self: ThreeDFormat) = value
        """
        ...

    @property
    def Visible(self): # -> MsoTriState
        """
        Get: Visible(self: ThreeDFormat) -> MsoTriState
        Set: Visible(self: ThreeDFormat) = value
        """
        ...

    @property
    def Z(self) -> Single:
        """
        Get: Z(self: ThreeDFormat) -> Single
        Set: Z(self: ThreeDFormat) = value
        """
        ...


    def IncrementRotationHorizontal(self, Increment:Single): # -> 
        """ IncrementRotationHorizontal(self: ThreeDFormat, Increment: Single) """
        ...

    def IncrementRotationVertical(self, Increment:Single): # -> 
        """ IncrementRotationVertical(self: ThreeDFormat, Increment: Single) """
        ...

    def IncrementRotationX(self, Increment:Single): # -> 
        """ IncrementRotationX(self: ThreeDFormat, Increment: Single) """
        ...

    def IncrementRotationY(self, Increment:Single): # -> 
        """ IncrementRotationY(self: ThreeDFormat, Increment: Single) """
        ...

    def IncrementRotationZ(self, Increment:Single): # -> 
        """ IncrementRotationZ(self: ThreeDFormat, Increment: Single) """
        ...

    def ResetRotation(self): # -> 
        """ ResetRotation(self: ThreeDFormat) """
        ...

    def SetExtrusionDirection(self, PresetExtrusionDirection): # ->  # Not found arg types: {'PresetExtrusionDirection': 'MsoPresetExtrusionDirection'}
        """ SetExtrusionDirection(self: ThreeDFormat, PresetExtrusionDirection: MsoPresetExtrusionDirection) """
        ...

    def SetPresetCamera(self, PresetCamera): # ->  # Not found arg types: {'PresetCamera': 'MsoPresetCamera'}
        """ SetPresetCamera(self: ThreeDFormat, PresetCamera: MsoPresetCamera) """
        ...

    def SetThreeDFormat(self, PresetThreeDFormat): # ->  # Not found arg types: {'PresetThreeDFormat': 'MsoPresetThreeDFormat'}
        """ SetThreeDFormat(self: ThreeDFormat, PresetThreeDFormat: MsoPresetThreeDFormat) """
        ...


class TickLabels: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Alignment(self) -> int:
        """
        Get: Alignment(self: TickLabels) -> int
        Set: Alignment(self: TickLabels) = value
        """
        ...

    @property
    def Application(self) -> object:
        """ Get: Application(self: TickLabels) -> object """
        ...

    @property
    def AutoScaleFont(self) -> object:
        """
        Get: AutoScaleFont(self: TickLabels) -> object
        Set: AutoScaleFont(self: TickLabels) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TickLabels) -> int """
        ...

    @property
    def Depth(self) -> int:
        """ Get: Depth(self: TickLabels) -> int """
        ...

    @property
    def Font(self) -> ChartFont:
        """ Get: Font(self: TickLabels) -> ChartFont """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: TickLabels) -> ChartFormat """
        ...

    @property
    def MultiLevel(self) -> bool:
        """
        Get: MultiLevel(self: TickLabels) -> bool
        Set: MultiLevel(self: TickLabels) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: TickLabels) -> str """
        ...

    @property
    def NumberFormat(self) -> str:
        """
        Get: NumberFormat(self: TickLabels) -> str
        Set: NumberFormat(self: TickLabels) = value
        """
        ...

    @property
    def NumberFormatLinked(self) -> bool:
        """
        Get: NumberFormatLinked(self: TickLabels) -> bool
        Set: NumberFormatLinked(self: TickLabels) = value
        """
        ...

    @property
    def NumberFormatLocal(self) -> object:
        """
        Get: NumberFormatLocal(self: TickLabels) -> object
        Set: NumberFormatLocal(self: TickLabels) = value
        """
        ...

    @property
    def Offset(self) -> int:
        """
        Get: Offset(self: TickLabels) -> int
        Set: Offset(self: TickLabels) = value
        """
        ...

    @property
    def Orientation(self) -> XlTickLabelOrientation:
        """
        Get: Orientation(self: TickLabels) -> XlTickLabelOrientation
        Set: Orientation(self: TickLabels) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TickLabels) -> object """
        ...

    @property
    def ReadingOrder(self) -> int:
        """
        Get: ReadingOrder(self: TickLabels) -> int
        Set: ReadingOrder(self: TickLabels) = value
        """
        ...


    def Delete(self) -> object:
        """ Delete(self: TickLabels) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: TickLabels) -> object """
        ...


class Trendline: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Trendline) -> object """
        ...

    @property
    def Backward(self) -> float:
        """
        Get: Backward(self: Trendline) -> float
        Set: Backward(self: Trendline) = value
        """
        ...

    @property
    def Backward2(self) -> float:
        """
        Get: Backward2(self: Trendline) -> float
        Set: Backward2(self: Trendline) = value
        """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: Trendline) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Trendline) -> int """
        ...

    @property
    def DataLabel(self) -> DataLabel:
        """ Get: DataLabel(self: Trendline) -> DataLabel """
        ...

    @property
    def DisplayEquation(self) -> bool:
        """
        Get: DisplayEquation(self: Trendline) -> bool
        Set: DisplayEquation(self: Trendline) = value
        """
        ...

    @property
    def DisplayRSquared(self) -> bool:
        """
        Get: DisplayRSquared(self: Trendline) -> bool
        Set: DisplayRSquared(self: Trendline) = value
        """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Trendline) -> ChartFormat """
        ...

    @property
    def Forward(self) -> float:
        """
        Get: Forward(self: Trendline) -> float
        Set: Forward(self: Trendline) = value
        """
        ...

    @property
    def Forward2(self) -> float:
        """
        Get: Forward2(self: Trendline) -> float
        Set: Forward2(self: Trendline) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Trendline) -> int """
        ...

    @property
    def Intercept(self) -> float:
        """
        Get: Intercept(self: Trendline) -> float
        Set: Intercept(self: Trendline) = value
        """
        ...

    @property
    def InterceptIsAuto(self) -> bool:
        """
        Get: InterceptIsAuto(self: Trendline) -> bool
        Set: InterceptIsAuto(self: Trendline) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Trendline) -> str
        Set: Name(self: Trendline) = value
        """
        ...

    @property
    def NameIsAuto(self) -> bool:
        """
        Get: NameIsAuto(self: Trendline) -> bool
        Set: NameIsAuto(self: Trendline) = value
        """
        ...

    @property
    def Order(self) -> int:
        """
        Get: Order(self: Trendline) -> int
        Set: Order(self: Trendline) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Trendline) -> object """
        ...

    @property
    def Period(self) -> int:
        """
        Get: Period(self: Trendline) -> int
        Set: Period(self: Trendline) = value
        """
        ...

    @property
    def Type(self) -> XlTrendlineType:
        """
        Get: Type(self: Trendline) -> XlTrendlineType
        Set: Type(self: Trendline) = value
        """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: Trendline) -> object """
        ...

    def Delete(self) -> object:
        """ Delete(self: Trendline) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: Trendline) -> object """
        ...


class Trendlines(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Trendlines) -> object """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Trendlines) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Trendlines) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Trendlines) -> object """
        ...


    def Add(self, Type:XlTrendlineType, Order:object, Period:object, Forward:object, Backward:object, Intercept:object, DisplayEquation:object, DisplayRSquared:object, Name:object) -> Trendline:
        """ Add(self: Trendlines, Type: XlTrendlineType, Order: object, Period: object, Forward: object, Backward: object, Intercept: object, DisplayEquation: object, DisplayRSquared: object, Name: object) -> Trendline """
        ...

    def _Default(self, Index:object) -> Trendline:
        """ _Default(self: Trendlines, Index: object) -> Trendline """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class TwoInitialCapsException: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TwoInitialCapsException) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TwoInitialCapsException) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: TwoInitialCapsException) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: TwoInitialCapsException) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TwoInitialCapsException) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: TwoInitialCapsException) """
        ...


class TwoInitialCapsExceptions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: TwoInitialCapsExceptions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: TwoInitialCapsExceptions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: TwoInitialCapsExceptions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: TwoInitialCapsExceptions) -> object """
        ...


    def Add(self, Name:str) -> TwoInitialCapsException:
        """ Add(self: TwoInitialCapsExceptions, Name: str) -> TwoInitialCapsException """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class UndoRecord: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: UndoRecord) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: UndoRecord) -> int """
        ...

    @property
    def CustomRecordLevel(self) -> int:
        """ Get: CustomRecordLevel(self: UndoRecord) -> int """
        ...

    @property
    def CustomRecordName(self) -> str:
        """ Get: CustomRecordName(self: UndoRecord) -> str """
        ...

    @property
    def IsRecordingCustomRecord(self) -> bool:
        """ Get: IsRecordingCustomRecord(self: UndoRecord) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: UndoRecord) -> object """
        ...


    def EndCustomRecord(self): # -> 
        """ EndCustomRecord(self: UndoRecord) """
        ...

    def StartCustomRecord(self, Name:str): # -> 
        """ StartCustomRecord(self: UndoRecord, Name: str) """
        ...


class UpBars: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: UpBars) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: UpBars) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: UpBars) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: UpBars) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: UpBars) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: UpBars) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: UpBars) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: UpBars) -> object """
        ...


    def Delete(self) -> object:
        """ Delete(self: UpBars) -> object """
        ...

    def Select(self) -> object:
        """ Select(self: UpBars) -> object """
        ...


class Variable: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Variable) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Variable) -> int """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Variable) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Variable) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Variable) -> object """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: Variable) -> str
        Set: Value(self: Variable) = value
        """
        ...


    def Delete(self): # -> 
        """ Delete(self: Variable) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Variables(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Variables) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Variables) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Variables) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Variables) -> object """
        ...


    def Add(self, Name:str, Value:object) -> Tuple_[Variable, object]:
        """ Add(self: Variables, Name: str, Value: object) -> (Variable, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Version: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Version) -> Application """
        ...

    @property
    def Comment(self) -> str:
        """ Get: Comment(self: Version) -> str """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Version) -> int """
        ...

    @property
    def Date(self) -> DateTime:
        """ Get: Date(self: Version) -> DateTime """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Version) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Version) -> object """
        ...

    @property
    def SavedBy(self) -> str:
        """ Get: SavedBy(self: Version) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: Version) """
        ...

    def Open(self) -> Document:
        """ Open(self: Version) -> Document """
        ...

    def OpenOld(self): # -> 
        """ OpenOld(self: Version) """
        ...


class Versions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Versions) -> Application """
        ...

    @property
    def AutoVersion(self) -> WdAutoVersions:
        """
        Get: AutoVersion(self: Versions) -> WdAutoVersions
        Set: AutoVersion(self: Versions) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Versions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Versions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Versions) -> object """
        ...


    def Save(self, Comment:object) -> object:
        """ Save(self: Versions, Comment: object) -> object """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class View: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: View) -> Application """
        ...

    @property
    def BrowseToWindow(self) -> int:
        """
        Get: BrowseToWindow(self: View) -> int
        Set: BrowseToWindow(self: View) = value
        """
        ...

    @property
    def ColumnWidth(self) -> WdColumnWidth:
        """
        Get: ColumnWidth(self: View) -> WdColumnWidth
        Set: ColumnWidth(self: View) = value
        """
        ...

    @property
    def ConflictMode(self) -> bool:
        """
        Get: ConflictMode(self: View) -> bool
        Set: ConflictMode(self: View) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: View) -> int """
        ...

    @property
    def DisplayBackgrounds(self) -> bool:
        """
        Get: DisplayBackgrounds(self: View) -> bool
        Set: DisplayBackgrounds(self: View) = value
        """
        ...

    @property
    def DisplayPageBoundaries(self) -> bool:
        """
        Get: DisplayPageBoundaries(self: View) -> bool
        Set: DisplayPageBoundaries(self: View) = value
        """
        ...

    @property
    def DisplaySmartTags(self) -> bool:
        """
        Get: DisplaySmartTags(self: View) -> bool
        Set: DisplaySmartTags(self: View) = value
        """
        ...

    @property
    def Draft(self) -> bool:
        """
        Get: Draft(self: View) -> bool
        Set: Draft(self: View) = value
        """
        ...

    @property
    def EnlargeFontsLessThan(self) -> int:
        """
        Get: EnlargeFontsLessThan(self: View) -> int
        Set: EnlargeFontsLessThan(self: View) = value
        """
        ...

    @property
    def FieldShading(self) -> WdFieldShading:
        """
        Get: FieldShading(self: View) -> WdFieldShading
        Set: FieldShading(self: View) = value
        """
        ...

    @property
    def FullScreen(self) -> bool:
        """
        Get: FullScreen(self: View) -> bool
        Set: FullScreen(self: View) = value
        """
        ...

    @property
    def Magnifier(self) -> bool:
        """
        Get: Magnifier(self: View) -> bool
        Set: Magnifier(self: View) = value
        """
        ...

    @property
    def MailMergeDataView(self) -> bool:
        """
        Get: MailMergeDataView(self: View) -> bool
        Set: MailMergeDataView(self: View) = value
        """
        ...

    @property
    def MarkupMode(self) -> WdRevisionsMode:
        """
        Get: MarkupMode(self: View) -> WdRevisionsMode
        Set: MarkupMode(self: View) = value
        """
        ...

    @property
    def PageColor(self) -> WdPageColor:
        """
        Get: PageColor(self: View) -> WdPageColor
        Set: PageColor(self: View) = value
        """
        ...

    @property
    def Panning(self) -> bool:
        """
        Get: Panning(self: View) -> bool
        Set: Panning(self: View) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: View) -> object """
        ...

    @property
    def ReadingLayout(self) -> bool:
        """
        Get: ReadingLayout(self: View) -> bool
        Set: ReadingLayout(self: View) = value
        """
        ...

    @property
    def ReadingLayoutActualView(self) -> bool:
        """
        Get: ReadingLayoutActualView(self: View) -> bool
        Set: ReadingLayoutActualView(self: View) = value
        """
        ...

    @property
    def ReadingLayoutAllowEditing(self) -> bool:
        """
        Get: ReadingLayoutAllowEditing(self: View) -> bool
        Set: ReadingLayoutAllowEditing(self: View) = value
        """
        ...

    @property
    def ReadingLayoutAllowMultiplePages(self) -> bool:
        """
        Get: ReadingLayoutAllowMultiplePages(self: View) -> bool
        Set: ReadingLayoutAllowMultiplePages(self: View) = value
        """
        ...

    @property
    def ReadingLayoutTruncateMargins(self) -> WdReadingLayoutMargin:
        """
        Get: ReadingLayoutTruncateMargins(self: View) -> WdReadingLayoutMargin
        Set: ReadingLayoutTruncateMargins(self: View) = value
        """
        ...

    @property
    def Reviewers(self) -> Reviewers:
        """ Get: Reviewers(self: View) -> Reviewers """
        ...

    @property
    def RevisionsBalloonShowConnectingLines(self) -> bool:
        """
        Get: RevisionsBalloonShowConnectingLines(self: View) -> bool
        Set: RevisionsBalloonShowConnectingLines(self: View) = value
        """
        ...

    @property
    def RevisionsBalloonSide(self) -> WdRevisionsBalloonMargin:
        """
        Get: RevisionsBalloonSide(self: View) -> WdRevisionsBalloonMargin
        Set: RevisionsBalloonSide(self: View) = value
        """
        ...

    @property
    def RevisionsBalloonWidth(self) -> Single:
        """
        Get: RevisionsBalloonWidth(self: View) -> Single
        Set: RevisionsBalloonWidth(self: View) = value
        """
        ...

    @property
    def RevisionsBalloonWidthType(self) -> WdRevisionsBalloonWidthType:
        """
        Get: RevisionsBalloonWidthType(self: View) -> WdRevisionsBalloonWidthType
        Set: RevisionsBalloonWidthType(self: View) = value
        """
        ...

    @property
    def RevisionsFilter(self) -> RevisionsFilter:
        """ Get: RevisionsFilter(self: View) -> RevisionsFilter """
        ...

    @property
    def RevisionsMode(self) -> WdRevisionsMode:
        """
        Get: RevisionsMode(self: View) -> WdRevisionsMode
        Set: RevisionsMode(self: View) = value
        """
        ...

    @property
    def RevisionsView(self) -> WdRevisionsView:
        """
        Get: RevisionsView(self: View) -> WdRevisionsView
        Set: RevisionsView(self: View) = value
        """
        ...

    @property
    def SeekView(self) -> WdSeekView:
        """
        Get: SeekView(self: View) -> WdSeekView
        Set: SeekView(self: View) = value
        """
        ...

    @property
    def ShadeEditableRanges(self) -> int:
        """
        Get: ShadeEditableRanges(self: View) -> int
        Set: ShadeEditableRanges(self: View) = value
        """
        ...

    @property
    def ShowAll(self) -> bool:
        """
        Get: ShowAll(self: View) -> bool
        Set: ShowAll(self: View) = value
        """
        ...

    @property
    def ShowAnimation(self) -> bool:
        """
        Get: ShowAnimation(self: View) -> bool
        Set: ShowAnimation(self: View) = value
        """
        ...

    @property
    def ShowBookmarks(self) -> bool:
        """
        Get: ShowBookmarks(self: View) -> bool
        Set: ShowBookmarks(self: View) = value
        """
        ...

    @property
    def ShowComments(self) -> bool:
        """
        Get: ShowComments(self: View) -> bool
        Set: ShowComments(self: View) = value
        """
        ...

    @property
    def ShowCropMarks(self) -> bool:
        """
        Get: ShowCropMarks(self: View) -> bool
        Set: ShowCropMarks(self: View) = value
        """
        ...

    @property
    def ShowDrawings(self) -> bool:
        """
        Get: ShowDrawings(self: View) -> bool
        Set: ShowDrawings(self: View) = value
        """
        ...

    @property
    def ShowFieldCodes(self) -> bool:
        """
        Get: ShowFieldCodes(self: View) -> bool
        Set: ShowFieldCodes(self: View) = value
        """
        ...

    @property
    def ShowFirstLineOnly(self) -> bool:
        """
        Get: ShowFirstLineOnly(self: View) -> bool
        Set: ShowFirstLineOnly(self: View) = value
        """
        ...

    @property
    def ShowFormat(self) -> bool:
        """
        Get: ShowFormat(self: View) -> bool
        Set: ShowFormat(self: View) = value
        """
        ...

    @property
    def ShowFormatChanges(self) -> bool:
        """
        Get: ShowFormatChanges(self: View) -> bool
        Set: ShowFormatChanges(self: View) = value
        """
        ...

    @property
    def ShowHiddenText(self) -> bool:
        """
        Get: ShowHiddenText(self: View) -> bool
        Set: ShowHiddenText(self: View) = value
        """
        ...

    @property
    def ShowHighlight(self) -> bool:
        """
        Get: ShowHighlight(self: View) -> bool
        Set: ShowHighlight(self: View) = value
        """
        ...

    @property
    def ShowHyphens(self) -> bool:
        """
        Get: ShowHyphens(self: View) -> bool
        Set: ShowHyphens(self: View) = value
        """
        ...

    @property
    def ShowInkAnnotations(self) -> bool:
        """
        Get: ShowInkAnnotations(self: View) -> bool
        Set: ShowInkAnnotations(self: View) = value
        """
        ...

    @property
    def ShowInsertionsAndDeletions(self) -> bool:
        """
        Get: ShowInsertionsAndDeletions(self: View) -> bool
        Set: ShowInsertionsAndDeletions(self: View) = value
        """
        ...

    @property
    def ShowMainTextLayer(self) -> bool:
        """
        Get: ShowMainTextLayer(self: View) -> bool
        Set: ShowMainTextLayer(self: View) = value
        """
        ...

    @property
    def ShowMarkupAreaHighlight(self) -> bool:
        """
        Get: ShowMarkupAreaHighlight(self: View) -> bool
        Set: ShowMarkupAreaHighlight(self: View) = value
        """
        ...

    @property
    def ShowObjectAnchors(self) -> bool:
        """
        Get: ShowObjectAnchors(self: View) -> bool
        Set: ShowObjectAnchors(self: View) = value
        """
        ...

    @property
    def ShowOptionalBreaks(self) -> bool:
        """
        Get: ShowOptionalBreaks(self: View) -> bool
        Set: ShowOptionalBreaks(self: View) = value
        """
        ...

    @property
    def ShowOtherAuthors(self) -> bool:
        """
        Get: ShowOtherAuthors(self: View) -> bool
        Set: ShowOtherAuthors(self: View) = value
        """
        ...

    @property
    def ShowParagraphs(self) -> bool:
        """
        Get: ShowParagraphs(self: View) -> bool
        Set: ShowParagraphs(self: View) = value
        """
        ...

    @property
    def ShowPicturePlaceHolders(self) -> bool:
        """
        Get: ShowPicturePlaceHolders(self: View) -> bool
        Set: ShowPicturePlaceHolders(self: View) = value
        """
        ...

    @property
    def ShowRevisionsAndComments(self) -> bool:
        """
        Get: ShowRevisionsAndComments(self: View) -> bool
        Set: ShowRevisionsAndComments(self: View) = value
        """
        ...

    @property
    def ShowSpaces(self) -> bool:
        """
        Get: ShowSpaces(self: View) -> bool
        Set: ShowSpaces(self: View) = value
        """
        ...

    @property
    def ShowTabs(self) -> bool:
        """
        Get: ShowTabs(self: View) -> bool
        Set: ShowTabs(self: View) = value
        """
        ...

    @property
    def ShowTextBoundaries(self) -> bool:
        """
        Get: ShowTextBoundaries(self: View) -> bool
        Set: ShowTextBoundaries(self: View) = value
        """
        ...

    @property
    def ShowXMLMarkup(self) -> int:
        """
        Get: ShowXMLMarkup(self: View) -> int
        Set: ShowXMLMarkup(self: View) = value
        """
        ...

    @property
    def SplitSpecial(self) -> WdSpecialPane:
        """
        Get: SplitSpecial(self: View) -> WdSpecialPane
        Set: SplitSpecial(self: View) = value
        """
        ...

    @property
    def TableGridlines(self) -> bool:
        """
        Get: TableGridlines(self: View) -> bool
        Set: TableGridlines(self: View) = value
        """
        ...

    @property
    def Type(self) -> WdViewType:
        """
        Get: Type(self: View) -> WdViewType
        Set: Type(self: View) = value
        """
        ...

    @property
    def WrapToWindow(self) -> bool:
        """
        Get: WrapToWindow(self: View) -> bool
        Set: WrapToWindow(self: View) = value
        """
        ...

    @property
    def Zoom(self) -> Zoom:
        """ Get: Zoom(self: View) -> Zoom """
        ...


    def CollapseAllHeadings(self): # -> 
        """ CollapseAllHeadings(self: View) """
        ...

    def CollapseOutline(self, Range:object) -> object:
        """ CollapseOutline(self: View, Range: object) -> object """
        ...

    def ExpandAllHeadings(self): # -> 
        """ ExpandAllHeadings(self: View) """
        ...

    def ExpandOutline(self, Range:object) -> object:
        """ ExpandOutline(self: View, Range: object) -> object """
        ...

    def NextHeaderFooter(self): # -> 
        """ NextHeaderFooter(self: View) """
        ...

    def PreviousHeaderFooter(self): # -> 
        """ PreviousHeaderFooter(self: View) """
        ...

    def ShowAllHeadings(self): # -> 
        """ ShowAllHeadings(self: View) """
        ...

    def ShowHeading(self, Level:int): # -> 
        """ ShowHeading(self: View, Level: int) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Walls: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> object:
        """ Get: Application(self: Walls) -> object """
        ...

    @property
    def Border(self) -> ChartBorder:
        """ Get: Border(self: Walls) -> ChartBorder """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Walls) -> int """
        ...

    @property
    def Fill(self) -> ChartFillFormat:
        """ Get: Fill(self: Walls) -> ChartFillFormat """
        ...

    @property
    def Format(self) -> ChartFormat:
        """ Get: Format(self: Walls) -> ChartFormat """
        ...

    @property
    def Interior(self) -> Interior:
        """ Get: Interior(self: Walls) -> Interior """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: Walls) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Walls) -> object """
        ...

    @property
    def PictureType(self) -> object:
        """
        Get: PictureType(self: Walls) -> object
        Set: PictureType(self: Walls) = value
        """
        ...

    @property
    def PictureUnit(self) -> object:
        """
        Get: PictureUnit(self: Walls) -> object
        Set: PictureUnit(self: Walls) = value
        """
        ...

    @property
    def Thickness(self) -> int:
        """
        Get: Thickness(self: Walls) -> int
        Set: Thickness(self: Walls) = value
        """
        ...


    def ClearFormats(self) -> object:
        """ ClearFormats(self: Walls) -> object """
        ...

    def Paste(self): # -> 
        """ Paste(self: Walls) """
        ...

    def Select(self) -> object:
        """ Select(self: Walls) -> object """
        ...


class WdAlertLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdAlertLevel, values: wdAlertsAll (-1), wdAlertsMessageBox (-2), wdAlertsNone (0) """
    value__ = ...
    wdAlertsAll: WdAlertLevel = ...
    wdAlertsMessageBox: WdAlertLevel = ...
    wdAlertsNone: WdAlertLevel = ...


class WdAlignmentTabAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdAlignmentTabAlignment, values: wdCenter (1), wdLeft (0), wdRight (2) """
    value__ = ...
    wdCenter: WdAlignmentTabAlignment = ...
    wdLeft: WdAlignmentTabAlignment = ...
    wdRight: WdAlignmentTabAlignment = ...


class WdAlignmentTabRelative(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdAlignmentTabRelative, values: wdIndent (1), wdMargin (0) """
    value__ = ...
    wdIndent: WdAlignmentTabRelative = ...
    wdMargin: WdAlignmentTabRelative = ...


class WdAnimation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdAnimation, values: wdAnimationBlinkingBackground (2), wdAnimationLasVegasLights (1), wdAnimationMarchingBlackAnts (4), wdAnimationMarchingRedAnts (5), wdAnimationNone (0), wdAnimationShimmer (6), wdAnimationSparkleText (3) """
    value__ = ...
    wdAnimationBlinkingBackground: WdAnimation = ...
    wdAnimationLasVegasLights: WdAnimation = ...
    wdAnimationMarchingBlackAnts: WdAnimation = ...
    wdAnimationMarchingRedAnts: WdAnimation = ...
    wdAnimationNone: WdAnimation = ...
    wdAnimationShimmer: WdAnimation = ...
    wdAnimationSparkleText: WdAnimation = ...


class WdApplyQuickStyleSets(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdApplyQuickStyleSets, values: wdSessionStartSet (1), wdTemplateSet (2) """
    value__ = ...
    wdSessionStartSet: WdApplyQuickStyleSets = ...
    wdTemplateSet: WdApplyQuickStyleSets = ...


class WdArabicNumeral(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdArabicNumeral, values: wdNumeralArabic (0), wdNumeralContext (2), wdNumeralHindi (1), wdNumeralSystem (3) """
    value__ = ...
    wdNumeralArabic: WdArabicNumeral = ...
    wdNumeralContext: WdArabicNumeral = ...
    wdNumeralHindi: WdArabicNumeral = ...
    wdNumeralSystem: WdArabicNumeral = ...


class WdAraSpeller(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdAraSpeller, values: wdBoth (3), wdFinalYaa (2), wdInitialAlef (1), wdNone (0) """
    value__ = ...
    wdBoth: WdAraSpeller = ...
    wdFinalYaa: WdAraSpeller = ...
    wdInitialAlef: WdAraSpeller = ...
    wdNone: WdAraSpeller = ...


class WdArrangeStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdArrangeStyle, values: wdIcons (1), wdTiled (0) """
    value__ = ...
    wdIcons: WdArrangeStyle = ...
    wdTiled: WdArrangeStyle = ...


class WdAutoFitBehavior(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdAutoFitBehavior, values: wdAutoFitContent (1), wdAutoFitFixed (0), wdAutoFitWindow (2) """
    value__ = ...
    wdAutoFitContent: WdAutoFitBehavior = ...
    wdAutoFitFixed: WdAutoFitBehavior = ...
    wdAutoFitWindow: WdAutoFitBehavior = ...


class WdAutoMacros(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdAutoMacros, values: wdAutoClose (3), wdAutoExec (0), wdAutoExit (4), wdAutoNew (1), wdAutoOpen (2), wdAutoSync (5) """
    value__ = ...
    wdAutoClose: WdAutoMacros = ...
    wdAutoExec: WdAutoMacros = ...
    wdAutoExit: WdAutoMacros = ...
    wdAutoNew: WdAutoMacros = ...
    wdAutoOpen: WdAutoMacros = ...
    wdAutoSync: WdAutoMacros = ...


class WdAutoVersions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdAutoVersions, values: wdAutoVersionOff (0), wdAutoVersionOnClose (1) """
    value__ = ...
    wdAutoVersionOff: WdAutoVersions = ...
    wdAutoVersionOnClose: WdAutoVersions = ...


class WdBaselineAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdBaselineAlignment, values: wdBaselineAlignAuto (4), wdBaselineAlignBaseline (2), wdBaselineAlignCenter (1), wdBaselineAlignFarEast50 (3), wdBaselineAlignTop (0) """
    value__ = ...
    wdBaselineAlignAuto: WdBaselineAlignment = ...
    wdBaselineAlignBaseline: WdBaselineAlignment = ...
    wdBaselineAlignCenter: WdBaselineAlignment = ...
    wdBaselineAlignFarEast50: WdBaselineAlignment = ...
    wdBaselineAlignTop: WdBaselineAlignment = ...


class WdBookmarkSortBy(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdBookmarkSortBy, values: wdSortByLocation (1), wdSortByName (0) """
    value__ = ...
    wdSortByLocation: WdBookmarkSortBy = ...
    wdSortByName: WdBookmarkSortBy = ...


class WdBorderDistanceFrom(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdBorderDistanceFrom, values: wdBorderDistanceFromPageEdge (1), wdBorderDistanceFromText (0) """
    value__ = ...
    wdBorderDistanceFromPageEdge: WdBorderDistanceFrom = ...
    wdBorderDistanceFromText: WdBorderDistanceFrom = ...


class WdBorderType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdBorderType, values: wdBorderBottom (-3), wdBorderDiagonalDown (-7), wdBorderDiagonalUp (-8), wdBorderHorizontal (-5), wdBorderLeft (-2), wdBorderRight (-4), wdBorderTop (-1), wdBorderVertical (-6) """
    value__ = ...
    wdBorderBottom: WdBorderType = ...
    wdBorderDiagonalDown: WdBorderType = ...
    wdBorderDiagonalUp: WdBorderType = ...
    wdBorderHorizontal: WdBorderType = ...
    wdBorderLeft: WdBorderType = ...
    wdBorderRight: WdBorderType = ...
    wdBorderTop: WdBorderType = ...
    wdBorderVertical: WdBorderType = ...


class WdBorderTypeHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdBorderTypeHID, values: emptyenum (0) """
    emptyenum: WdBorderTypeHID = ...
    value__ = ...


class WdBreakType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdBreakType, values: wdColumnBreak (8), wdLineBreak (6), wdLineBreakClearLeft (9), wdLineBreakClearRight (10), wdPageBreak (7), wdSectionBreakContinuous (3), wdSectionBreakEvenPage (4), wdSectionBreakNextPage (2), wdSectionBreakOddPage (5), wdTextWrappingBreak (11) """
    value__ = ...
    wdColumnBreak: WdBreakType = ...
    wdLineBreak: WdBreakType = ...
    wdLineBreakClearLeft: WdBreakType = ...
    wdLineBreakClearRight: WdBreakType = ...
    wdPageBreak: WdBreakType = ...
    wdSectionBreakContinuous: WdBreakType = ...
    wdSectionBreakEvenPage: WdBreakType = ...
    wdSectionBreakNextPage: WdBreakType = ...
    wdSectionBreakOddPage: WdBreakType = ...
    wdTextWrappingBreak: WdBreakType = ...


class WdBrowserLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdBrowserLevel, values: wdBrowserLevelMicrosoftInternetExplorer5 (1), wdBrowserLevelMicrosoftInternetExplorer6 (2), wdBrowserLevelV4 (0) """
    value__ = ...
    wdBrowserLevelMicrosoftInternetExplorer5: WdBrowserLevel = ...
    wdBrowserLevelMicrosoftInternetExplorer6: WdBrowserLevel = ...
    wdBrowserLevelV4: WdBrowserLevel = ...


class WdBrowseTarget(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdBrowseTarget, values: wdBrowseComment (3), wdBrowseEdit (10), wdBrowseEndnote (5), wdBrowseField (6), wdBrowseFind (11), wdBrowseFootnote (4), wdBrowseGoTo (12), wdBrowseGraphic (8), wdBrowseHeading (9), wdBrowsePage (1), wdBrowseSection (2), wdBrowseTable (7) """
    value__ = ...
    wdBrowseComment: WdBrowseTarget = ...
    wdBrowseEdit: WdBrowseTarget = ...
    wdBrowseEndnote: WdBrowseTarget = ...
    wdBrowseField: WdBrowseTarget = ...
    wdBrowseFind: WdBrowseTarget = ...
    wdBrowseFootnote: WdBrowseTarget = ...
    wdBrowseGoTo: WdBrowseTarget = ...
    wdBrowseGraphic: WdBrowseTarget = ...
    wdBrowseHeading: WdBrowseTarget = ...
    wdBrowsePage: WdBrowseTarget = ...
    wdBrowseSection: WdBrowseTarget = ...
    wdBrowseTable: WdBrowseTarget = ...


class WdBuildingBlockTypes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdBuildingBlockTypes, values: wdTypeAutoText (9), wdTypeBibliography (34), wdTypeCoverPage (2), wdTypeCustom1 (29), wdTypeCustom2 (30), wdTypeCustom3 (31), wdTypeCustom4 (32), wdTypeCustom5 (33), wdTypeCustomAutoText (23), wdTypeCustomBibliography (35), wdTypeCustomCoverPage (16), wdTypeCustomEquations (17), wdTypeCustomFooters (18), wdTypeCustomHeaders (19), wdTypeCustomPageNumber (20), wdTypeCustomPageNumberBottom (26), wdTypeCustomPageNumberPage (27), wdTypeCustomPageNumberTop (25), wdTypeCustomQuickParts (15), wdTypeCustomTableOfContents (28), wdTypeCustomTables (21), wdTypeCustomTextBox (24), wdTypeCustomWatermarks (22), wdTypeEquations (3), wdTypeFooters (4), wdTypeHeaders (5), wdTypePageNumber (6), wdTypePageNumberBottom (12), wdTypePageNumberPage (13), wdTypePageNumberTop (11), wdTypeQuickParts (1), wdTypeTableOfContents (14), wdTypeTables (7), wdTypeTextBox (10), wdTypeWatermarks (8) """
    value__ = ...
    wdTypeAutoText: WdBuildingBlockTypes = ...
    wdTypeBibliography: WdBuildingBlockTypes = ...
    wdTypeCoverPage: WdBuildingBlockTypes = ...
    wdTypeCustom1: WdBuildingBlockTypes = ...
    wdTypeCustom2: WdBuildingBlockTypes = ...
    wdTypeCustom3: WdBuildingBlockTypes = ...
    wdTypeCustom4: WdBuildingBlockTypes = ...
    wdTypeCustom5: WdBuildingBlockTypes = ...
    wdTypeCustomAutoText: WdBuildingBlockTypes = ...
    wdTypeCustomBibliography: WdBuildingBlockTypes = ...
    wdTypeCustomCoverPage: WdBuildingBlockTypes = ...
    wdTypeCustomEquations: WdBuildingBlockTypes = ...
    wdTypeCustomFooters: WdBuildingBlockTypes = ...
    wdTypeCustomHeaders: WdBuildingBlockTypes = ...
    wdTypeCustomPageNumber: WdBuildingBlockTypes = ...
    wdTypeCustomPageNumberBottom: WdBuildingBlockTypes = ...
    wdTypeCustomPageNumberPage: WdBuildingBlockTypes = ...
    wdTypeCustomPageNumberTop: WdBuildingBlockTypes = ...
    wdTypeCustomQuickParts: WdBuildingBlockTypes = ...
    wdTypeCustomTableOfContents: WdBuildingBlockTypes = ...
    wdTypeCustomTables: WdBuildingBlockTypes = ...
    wdTypeCustomTextBox: WdBuildingBlockTypes = ...
    wdTypeCustomWatermarks: WdBuildingBlockTypes = ...
    wdTypeEquations: WdBuildingBlockTypes = ...
    wdTypeFooters: WdBuildingBlockTypes = ...
    wdTypeHeaders: WdBuildingBlockTypes = ...
    wdTypePageNumber: WdBuildingBlockTypes = ...
    wdTypePageNumberBottom: WdBuildingBlockTypes = ...
    wdTypePageNumberPage: WdBuildingBlockTypes = ...
    wdTypePageNumberTop: WdBuildingBlockTypes = ...
    wdTypeQuickParts: WdBuildingBlockTypes = ...
    wdTypeTableOfContents: WdBuildingBlockTypes = ...
    wdTypeTables: WdBuildingBlockTypes = ...
    wdTypeTextBox: WdBuildingBlockTypes = ...
    wdTypeWatermarks: WdBuildingBlockTypes = ...


class WdBuiltInProperty(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdBuiltInProperty, values: wdPropertyAppName (9), wdPropertyAuthor (3), wdPropertyBytes (22), wdPropertyCategory (18), wdPropertyCharacters (16), wdPropertyCharsWSpaces (30), wdPropertyComments (5), wdPropertyCompany (21), wdPropertyFormat (19), wdPropertyHiddenSlides (27), wdPropertyHyperlinkBase (29), wdPropertyKeywords (4), wdPropertyLastAuthor (7), wdPropertyLines (23), wdPropertyManager (20), wdPropertyMMClips (28), wdPropertyNotes (26), wdPropertyPages (14), wdPropertyParas (24), wdPropertyRevision (8), wdPropertySecurity (17), wdPropertySlides (25), wdPropertySubject (2), wdPropertyTemplate (6), wdPropertyTimeCreated (11), wdPropertyTimeLastPrinted (10), wdPropertyTimeLastSaved (12), wdPropertyTitle (1), wdPropertyVBATotalEdit (13), wdPropertyWords (15) """
    value__ = ...
    wdPropertyAppName: WdBuiltInProperty = ...
    wdPropertyAuthor: WdBuiltInProperty = ...
    wdPropertyBytes: WdBuiltInProperty = ...
    wdPropertyCategory: WdBuiltInProperty = ...
    wdPropertyCharacters: WdBuiltInProperty = ...
    wdPropertyCharsWSpaces: WdBuiltInProperty = ...
    wdPropertyComments: WdBuiltInProperty = ...
    wdPropertyCompany: WdBuiltInProperty = ...
    wdPropertyFormat: WdBuiltInProperty = ...
    wdPropertyHiddenSlides: WdBuiltInProperty = ...
    wdPropertyHyperlinkBase: WdBuiltInProperty = ...
    wdPropertyKeywords: WdBuiltInProperty = ...
    wdPropertyLastAuthor: WdBuiltInProperty = ...
    wdPropertyLines: WdBuiltInProperty = ...
    wdPropertyManager: WdBuiltInProperty = ...
    wdPropertyMMClips: WdBuiltInProperty = ...
    wdPropertyNotes: WdBuiltInProperty = ...
    wdPropertyPages: WdBuiltInProperty = ...
    wdPropertyParas: WdBuiltInProperty = ...
    wdPropertyRevision: WdBuiltInProperty = ...
    wdPropertySecurity: WdBuiltInProperty = ...
    wdPropertySlides: WdBuiltInProperty = ...
    wdPropertySubject: WdBuiltInProperty = ...
    wdPropertyTemplate: WdBuiltInProperty = ...
    wdPropertyTimeCreated: WdBuiltInProperty = ...
    wdPropertyTimeLastPrinted: WdBuiltInProperty = ...
    wdPropertyTimeLastSaved: WdBuiltInProperty = ...
    wdPropertyTitle: WdBuiltInProperty = ...
    wdPropertyVBATotalEdit: WdBuiltInProperty = ...
    wdPropertyWords: WdBuiltInProperty = ...


class WdBuiltinStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdBuiltinStyle, values: wdStyleBibliography (-266), wdStyleBlockQuotation (-85), wdStyleBodyText (-67), wdStyleBodyText2 (-81), wdStyleBodyText3 (-82), wdStyleBodyTextFirstIndent (-78), wdStyleBodyTextFirstIndent2 (-79), wdStyleBodyTextIndent (-68), wdStyleBodyTextIndent2 (-83), wdStyleBodyTextIndent3 (-84), wdStyleBookTitle (-265), wdStyleCaption (-35), wdStyleClosing (-64), wdStyleCommentReference (-40), wdStyleCommentText (-31), wdStyleDate (-77), wdStyleDefaultParagraphFont (-66), wdStyleEmphasis (-89), wdStyleEndnoteReference (-43), wdStyleEndnoteText (-44), wdStyleEnvelopeAddress (-37), wdStyleEnvelopeReturn (-38), wdStyleFooter (-33), wdStyleFootnoteReference (-39), wdStyleFootnoteText (-30), wdStyleHeader (-32), wdStyleHeading1 (-2), wdStyleHeading2 (-3), wdStyleHeading3 (-4), wdStyleHeading4 (-5), wdStyleHeading5 (-6), wdStyleHeading6 (-7), wdStyleHeading7 (-8), wdStyleHeading8 (-9), wdStyleHeading9 (-10), wdStyleHtmlAcronym (-96), wdStyleHtmlAddress (-97), wdStyleHtmlCite (-98), wdStyleHtmlCode (-99), wdStyleHtmlDfn (-100), wdStyleHtmlKbd (-101), wdStyleHtmlNormal (-95), wdStyleHtmlPre (-102), wdStyleHtmlSamp (-103), wdStyleHtmlTt (-104), wdStyleHtmlVar (-105), wdStyleHyperlink (-86), wdStyleHyperlinkFollowed (-87), wdStyleIndex1 (-11), wdStyleIndex2 (-12), wdStyleIndex3 (-13), wdStyleIndex4 (-14), wdStyleIndex5 (-15), wdStyleIndex6 (-16), wdStyleIndex7 (-17), wdStyleIndex8 (-18), wdStyleIndex9 (-19), wdStyleIndexHeading (-34), wdStyleIntenseEmphasis (-262), wdStyleIntenseQuote (-182), wdStyleIntenseReference (-264), wdStyleLineNumber (-41), wdStyleList (-48), wdStyleList2 (-51), wdStyleList3 (-52), wdStyleList4 (-53), wdStyleList5 (-54), wdStyleListBullet (-49), wdStyleListBullet2 (-55), wdStyleListBullet3 (-56), wdStyleListBullet4 (-57), wdStyleListBullet5 (-58), wdStyleListContinue (-69), wdStyleListContinue2 (-70), wdStyleListContinue3 (-71), wdStyleListContinue4 (-72), wdStyleListContinue5 (-73), wdStyleListNumber (-50), wdStyleListNumber2 (-59), wdStyleListNumber3 (-60), wdStyleListNumber4 (-61), wdStyleListNumber5 (-62), wdStyleListParagraph (-180), wdStyleMacroText (-46), wdStyleMessageHeader (-74), wdStyleNavPane (-90), wdStyleNormal (-1), wdStyleNormalIndent (-29), wdStyleNormalObject (-158), wdStyleNormalTable (-106), wdStyleNoteHeading (-80), wdStylePageNumber (-42), wdStylePlainText (-91), wdStyleQuote (-181), wdStyleSalutation (-76), wdStyleSignature (-65), wdStyleStrong (-88), wdStyleSubtitle (-75), wdStyleSubtleEmphasis (-261), wdStyleSubtleReference (-263), wdStyleTableColorfulGrid (-172), wdStyleTableColorfulList (-171), wdStyleTableColorfulShading (-170), wdStyleTableDarkList (-169), wdStyleTableLightGrid (-161), wdStyleTableLightGridAccent1 (-175), wdStyleTableLightList (-160), wdStyleTableLightListAccent1 (-174), wdStyleTableLightShading (-159), wdStyleTableLightShadingAccent1 (-173), wdStyleTableMediumGrid1 (-166), wdStyleTableMediumGrid2 (-167), wdStyleTableMediumGrid3 (-168), wdStyleTableMediumList1 (-164), wdStyleTableMediumList1Accent1 (-178), wdStyleTableMediumList2 (-165), wdStyleTableMediumShading1 (-162), wdStyleTableMediumShading1Accent1 (-176), wdStyleTableMediumShading2 (-163), wdStyleTableMediumShading2Accent1 (-177), wdStyleTableOfAuthorities (-45), wdStyleTableOfFigures (-36), wdStyleTitle (-63), wdStyleTOAHeading (-47), wdStyleTOC1 (-20), wdStyleTOC2 (-21), wdStyleTOC3 (-22), wdStyleTOC4 (-23), wdStyleTOC5 (-24), wdStyleTOC6 (-25), wdStyleTOC7 (-26), wdStyleTOC8 (-27), wdStyleTOC9 (-28), wdStyleTocHeading (-267) """
    value__ = ...
    wdStyleBibliography: WdBuiltinStyle = ...
    wdStyleBlockQuotation: WdBuiltinStyle = ...
    wdStyleBodyText: WdBuiltinStyle = ...
    wdStyleBodyText2: WdBuiltinStyle = ...
    wdStyleBodyText3: WdBuiltinStyle = ...
    wdStyleBodyTextFirstIndent: WdBuiltinStyle = ...
    wdStyleBodyTextFirstIndent2: WdBuiltinStyle = ...
    wdStyleBodyTextIndent: WdBuiltinStyle = ...
    wdStyleBodyTextIndent2: WdBuiltinStyle = ...
    wdStyleBodyTextIndent3: WdBuiltinStyle = ...
    wdStyleBookTitle: WdBuiltinStyle = ...
    wdStyleCaption: WdBuiltinStyle = ...
    wdStyleClosing: WdBuiltinStyle = ...
    wdStyleCommentReference: WdBuiltinStyle = ...
    wdStyleCommentText: WdBuiltinStyle = ...
    wdStyleDate: WdBuiltinStyle = ...
    wdStyleDefaultParagraphFont: WdBuiltinStyle = ...
    wdStyleEmphasis: WdBuiltinStyle = ...
    wdStyleEndnoteReference: WdBuiltinStyle = ...
    wdStyleEndnoteText: WdBuiltinStyle = ...
    wdStyleEnvelopeAddress: WdBuiltinStyle = ...
    wdStyleEnvelopeReturn: WdBuiltinStyle = ...
    wdStyleFooter: WdBuiltinStyle = ...
    wdStyleFootnoteReference: WdBuiltinStyle = ...
    wdStyleFootnoteText: WdBuiltinStyle = ...
    wdStyleHeader: WdBuiltinStyle = ...
    wdStyleHeading1: WdBuiltinStyle = ...
    wdStyleHeading2: WdBuiltinStyle = ...
    wdStyleHeading3: WdBuiltinStyle = ...
    wdStyleHeading4: WdBuiltinStyle = ...
    wdStyleHeading5: WdBuiltinStyle = ...
    wdStyleHeading6: WdBuiltinStyle = ...
    wdStyleHeading7: WdBuiltinStyle = ...
    wdStyleHeading8: WdBuiltinStyle = ...
    wdStyleHeading9: WdBuiltinStyle = ...
    wdStyleHtmlAcronym: WdBuiltinStyle = ...
    wdStyleHtmlAddress: WdBuiltinStyle = ...
    wdStyleHtmlCite: WdBuiltinStyle = ...
    wdStyleHtmlCode: WdBuiltinStyle = ...
    wdStyleHtmlDfn: WdBuiltinStyle = ...
    wdStyleHtmlKbd: WdBuiltinStyle = ...
    wdStyleHtmlNormal: WdBuiltinStyle = ...
    wdStyleHtmlPre: WdBuiltinStyle = ...
    wdStyleHtmlSamp: WdBuiltinStyle = ...
    wdStyleHtmlTt: WdBuiltinStyle = ...
    wdStyleHtmlVar: WdBuiltinStyle = ...
    wdStyleHyperlink: WdBuiltinStyle = ...
    wdStyleHyperlinkFollowed: WdBuiltinStyle = ...
    wdStyleIndex1: WdBuiltinStyle = ...
    wdStyleIndex2: WdBuiltinStyle = ...
    wdStyleIndex3: WdBuiltinStyle = ...
    wdStyleIndex4: WdBuiltinStyle = ...
    wdStyleIndex5: WdBuiltinStyle = ...
    wdStyleIndex6: WdBuiltinStyle = ...
    wdStyleIndex7: WdBuiltinStyle = ...
    wdStyleIndex8: WdBuiltinStyle = ...
    wdStyleIndex9: WdBuiltinStyle = ...
    wdStyleIndexHeading: WdBuiltinStyle = ...
    wdStyleIntenseEmphasis: WdBuiltinStyle = ...
    wdStyleIntenseQuote: WdBuiltinStyle = ...
    wdStyleIntenseReference: WdBuiltinStyle = ...
    wdStyleLineNumber: WdBuiltinStyle = ...
    wdStyleList: WdBuiltinStyle = ...
    wdStyleList2: WdBuiltinStyle = ...
    wdStyleList3: WdBuiltinStyle = ...
    wdStyleList4: WdBuiltinStyle = ...
    wdStyleList5: WdBuiltinStyle = ...
    wdStyleListBullet: WdBuiltinStyle = ...
    wdStyleListBullet2: WdBuiltinStyle = ...
    wdStyleListBullet3: WdBuiltinStyle = ...
    wdStyleListBullet4: WdBuiltinStyle = ...
    wdStyleListBullet5: WdBuiltinStyle = ...
    wdStyleListContinue: WdBuiltinStyle = ...
    wdStyleListContinue2: WdBuiltinStyle = ...
    wdStyleListContinue3: WdBuiltinStyle = ...
    wdStyleListContinue4: WdBuiltinStyle = ...
    wdStyleListContinue5: WdBuiltinStyle = ...
    wdStyleListNumber: WdBuiltinStyle = ...
    wdStyleListNumber2: WdBuiltinStyle = ...
    wdStyleListNumber3: WdBuiltinStyle = ...
    wdStyleListNumber4: WdBuiltinStyle = ...
    wdStyleListNumber5: WdBuiltinStyle = ...
    wdStyleListParagraph: WdBuiltinStyle = ...
    wdStyleMacroText: WdBuiltinStyle = ...
    wdStyleMessageHeader: WdBuiltinStyle = ...
    wdStyleNavPane: WdBuiltinStyle = ...
    wdStyleNormal: WdBuiltinStyle = ...
    wdStyleNormalIndent: WdBuiltinStyle = ...
    wdStyleNormalObject: WdBuiltinStyle = ...
    wdStyleNormalTable: WdBuiltinStyle = ...
    wdStyleNoteHeading: WdBuiltinStyle = ...
    wdStylePageNumber: WdBuiltinStyle = ...
    wdStylePlainText: WdBuiltinStyle = ...
    wdStyleQuote: WdBuiltinStyle = ...
    wdStyleSalutation: WdBuiltinStyle = ...
    wdStyleSignature: WdBuiltinStyle = ...
    wdStyleStrong: WdBuiltinStyle = ...
    wdStyleSubtitle: WdBuiltinStyle = ...
    wdStyleSubtleEmphasis: WdBuiltinStyle = ...
    wdStyleSubtleReference: WdBuiltinStyle = ...
    wdStyleTableColorfulGrid: WdBuiltinStyle = ...
    wdStyleTableColorfulList: WdBuiltinStyle = ...
    wdStyleTableColorfulShading: WdBuiltinStyle = ...
    wdStyleTableDarkList: WdBuiltinStyle = ...
    wdStyleTableLightGrid: WdBuiltinStyle = ...
    wdStyleTableLightGridAccent1: WdBuiltinStyle = ...
    wdStyleTableLightList: WdBuiltinStyle = ...
    wdStyleTableLightListAccent1: WdBuiltinStyle = ...
    wdStyleTableLightShading: WdBuiltinStyle = ...
    wdStyleTableLightShadingAccent1: WdBuiltinStyle = ...
    wdStyleTableMediumGrid1: WdBuiltinStyle = ...
    wdStyleTableMediumGrid2: WdBuiltinStyle = ...
    wdStyleTableMediumGrid3: WdBuiltinStyle = ...
    wdStyleTableMediumList1: WdBuiltinStyle = ...
    wdStyleTableMediumList1Accent1: WdBuiltinStyle = ...
    wdStyleTableMediumList2: WdBuiltinStyle = ...
    wdStyleTableMediumShading1: WdBuiltinStyle = ...
    wdStyleTableMediumShading1Accent1: WdBuiltinStyle = ...
    wdStyleTableMediumShading2: WdBuiltinStyle = ...
    wdStyleTableMediumShading2Accent1: WdBuiltinStyle = ...
    wdStyleTableOfAuthorities: WdBuiltinStyle = ...
    wdStyleTableOfFigures: WdBuiltinStyle = ...
    wdStyleTitle: WdBuiltinStyle = ...
    wdStyleTOAHeading: WdBuiltinStyle = ...
    wdStyleTOC1: WdBuiltinStyle = ...
    wdStyleTOC2: WdBuiltinStyle = ...
    wdStyleTOC3: WdBuiltinStyle = ...
    wdStyleTOC4: WdBuiltinStyle = ...
    wdStyleTOC5: WdBuiltinStyle = ...
    wdStyleTOC6: WdBuiltinStyle = ...
    wdStyleTOC7: WdBuiltinStyle = ...
    wdStyleTOC8: WdBuiltinStyle = ...
    wdStyleTOC9: WdBuiltinStyle = ...
    wdStyleTocHeading: WdBuiltinStyle = ...


class WdCalendarType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCalendarType, values: wdCalendarArabic (1), wdCalendarHebrew (2), wdCalendarJapan (4), wdCalendarKorean (6), wdCalendarSakaEra (7), wdCalendarTaiwan (3), wdCalendarThai (5), wdCalendarTranslitEnglish (8), wdCalendarTranslitFrench (9), wdCalendarUmalqura (13), wdCalendarWestern (0) """
    value__ = ...
    wdCalendarArabic: WdCalendarType = ...
    wdCalendarHebrew: WdCalendarType = ...
    wdCalendarJapan: WdCalendarType = ...
    wdCalendarKorean: WdCalendarType = ...
    wdCalendarSakaEra: WdCalendarType = ...
    wdCalendarTaiwan: WdCalendarType = ...
    wdCalendarThai: WdCalendarType = ...
    wdCalendarTranslitEnglish: WdCalendarType = ...
    wdCalendarTranslitFrench: WdCalendarType = ...
    wdCalendarUmalqura: WdCalendarType = ...
    wdCalendarWestern: WdCalendarType = ...


class WdCalendarTypeBi(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCalendarTypeBi, values: wdCalendarTypeBidi (99), wdCalendarTypeGregorian (100) """
    value__ = ...
    wdCalendarTypeBidi: WdCalendarTypeBi = ...
    wdCalendarTypeGregorian: WdCalendarTypeBi = ...


class WdCaptionLabelID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCaptionLabelID, values: wdCaptionEquation (-3), wdCaptionFigure (-1), wdCaptionTable (-2) """
    value__ = ...
    wdCaptionEquation: WdCaptionLabelID = ...
    wdCaptionFigure: WdCaptionLabelID = ...
    wdCaptionTable: WdCaptionLabelID = ...


class WdCaptionNumberStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCaptionNumberStyle, values: wdCaptionNumberStyleArabic (0), wdCaptionNumberStyleArabicFullWidth (14), wdCaptionNumberStyleArabicLetter1 (46), wdCaptionNumberStyleArabicLetter2 (48), wdCaptionNumberStyleChosung (25), wdCaptionNumberStyleGanada (24), wdCaptionNumberStyleHanjaRead (41), wdCaptionNumberStyleHanjaReadDigit (42), wdCaptionNumberStyleHebrewLetter1 (45), wdCaptionNumberStyleHebrewLetter2 (47), wdCaptionNumberStyleHindiArabic (51), wdCaptionNumberStyleHindiCardinalText (52), wdCaptionNumberStyleHindiLetter1 (49), wdCaptionNumberStyleHindiLetter2 (50), wdCaptionNumberStyleKanji (10), wdCaptionNumberStyleKanjiDigit (11), wdCaptionNumberStyleKanjiTraditional (16), wdCaptionNumberStyleLowercaseLetter (4), wdCaptionNumberStyleLowercaseRoman (2), wdCaptionNumberStyleNumberInCircle (18), wdCaptionNumberStyleSimpChinNum2 (38), wdCaptionNumberStyleSimpChinNum3 (39), wdCaptionNumberStyleThaiArabic (54), wdCaptionNumberStyleThaiCardinalText (55), wdCaptionNumberStyleThaiLetter (53), wdCaptionNumberStyleTradChinNum2 (34), wdCaptionNumberStyleTradChinNum3 (35), wdCaptionNumberStyleUppercaseLetter (3), wdCaptionNumberStyleUppercaseRoman (1), wdCaptionNumberStyleVietCardinalText (56), wdCaptionNumberStyleZodiac1 (30), wdCaptionNumberStyleZodiac2 (31) """
    value__ = ...
    wdCaptionNumberStyleArabic: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleArabicFullWidth: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleArabicLetter1: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleArabicLetter2: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleChosung: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleGanada: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleHanjaRead: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleHanjaReadDigit: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleHebrewLetter1: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleHebrewLetter2: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleHindiArabic: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleHindiCardinalText: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleHindiLetter1: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleHindiLetter2: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleKanji: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleKanjiDigit: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleKanjiTraditional: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleLowercaseLetter: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleLowercaseRoman: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleNumberInCircle: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleSimpChinNum2: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleSimpChinNum3: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleThaiArabic: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleThaiCardinalText: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleThaiLetter: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleTradChinNum2: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleTradChinNum3: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleUppercaseLetter: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleUppercaseRoman: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleVietCardinalText: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleZodiac1: WdCaptionNumberStyle = ...
    wdCaptionNumberStyleZodiac2: WdCaptionNumberStyle = ...


class WdCaptionNumberStyleHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCaptionNumberStyleHID, values: emptyenum (0) """
    emptyenum: WdCaptionNumberStyleHID = ...
    value__ = ...


class WdCaptionPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCaptionPosition, values: wdCaptionPositionAbove (0), wdCaptionPositionBelow (1) """
    value__ = ...
    wdCaptionPositionAbove: WdCaptionPosition = ...
    wdCaptionPositionBelow: WdCaptionPosition = ...


class WdCellColor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCellColor, values: wdCellColorByAuthor (-1), wdCellColorLightBlue (2), wdCellColorLightGray (7), wdCellColorLightGreen (6), wdCellColorLightOrange (5), wdCellColorLightPurple (4), wdCellColorLightYellow (3), wdCellColorNoHighlight (0), wdCellColorPink (1) """
    value__ = ...
    wdCellColorByAuthor: WdCellColor = ...
    wdCellColorLightBlue: WdCellColor = ...
    wdCellColorLightGray: WdCellColor = ...
    wdCellColorLightGreen: WdCellColor = ...
    wdCellColorLightOrange: WdCellColor = ...
    wdCellColorLightPurple: WdCellColor = ...
    wdCellColorLightYellow: WdCellColor = ...
    wdCellColorNoHighlight: WdCellColor = ...
    wdCellColorPink: WdCellColor = ...


class WdCellVerticalAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCellVerticalAlignment, values: wdCellAlignVerticalBottom (3), wdCellAlignVerticalCenter (1), wdCellAlignVerticalTop (0) """
    value__ = ...
    wdCellAlignVerticalBottom: WdCellVerticalAlignment = ...
    wdCellAlignVerticalCenter: WdCellVerticalAlignment = ...
    wdCellAlignVerticalTop: WdCellVerticalAlignment = ...


class WdCharacterCase(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCharacterCase, values: wdFullWidth (7), wdHalfWidth (6), wdHiragana (9), wdKatakana (8), wdLowerCase (0), wdNextCase (-1), wdTitleSentence (4), wdTitleWord (2), wdToggleCase (5), wdUpperCase (1) """
    value__ = ...
    wdFullWidth: WdCharacterCase = ...
    wdHalfWidth: WdCharacterCase = ...
    wdHiragana: WdCharacterCase = ...
    wdKatakana: WdCharacterCase = ...
    wdLowerCase: WdCharacterCase = ...
    wdNextCase: WdCharacterCase = ...
    wdTitleSentence: WdCharacterCase = ...
    wdTitleWord: WdCharacterCase = ...
    wdToggleCase: WdCharacterCase = ...
    wdUpperCase: WdCharacterCase = ...


class WdCharacterCaseHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCharacterCaseHID, values: emptyenum (0) """
    emptyenum: WdCharacterCaseHID = ...
    value__ = ...


class WdCharacterWidth(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCharacterWidth, values: wdWidthFullWidth (7), wdWidthHalfWidth (6) """
    value__ = ...
    wdWidthFullWidth: WdCharacterWidth = ...
    wdWidthHalfWidth: WdCharacterWidth = ...


class WdCheckInVersionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCheckInVersionType, values: wdCheckInMajorVersion (1), wdCheckInMinorVersion (0), wdCheckInOverwriteVersion (2) """
    value__ = ...
    wdCheckInMajorVersion: WdCheckInVersionType = ...
    wdCheckInMinorVersion: WdCheckInVersionType = ...
    wdCheckInOverwriteVersion: WdCheckInVersionType = ...


class WdChevronConvertRule(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdChevronConvertRule, values: wdAlwaysConvert (1), wdAskToConvert (3), wdAskToNotConvert (2), wdNeverConvert (0) """
    value__ = ...
    wdAlwaysConvert: WdChevronConvertRule = ...
    wdAskToConvert: WdChevronConvertRule = ...
    wdAskToNotConvert: WdChevronConvertRule = ...
    wdNeverConvert: WdChevronConvertRule = ...


class WdCollapseDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCollapseDirection, values: wdCollapseEnd (0), wdCollapseStart (1) """
    value__ = ...
    wdCollapseEnd: WdCollapseDirection = ...
    wdCollapseStart: WdCollapseDirection = ...


class WdColor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdColor, values: wdColorAqua (13421619), wdColorAutomatic (-16777216), wdColorBlack (0), wdColorBlue (16711680), wdColorBlueGray (10053222), wdColorBrightGreen (65280), wdColorBrown (13209), wdColorDarkBlue (8388608), wdColorDarkGreen (13056), wdColorDarkRed (128), wdColorDarkTeal (6697728), wdColorDarkYellow (32896), wdColorGold (52479), wdColorGray05 (15987699), wdColorGray10 (15132390), wdColorGray125 (14737632), wdColorGray15 (14277081), wdColorGray20 (13421772), wdColorGray25 (12632256), wdColorGray30 (11776947), wdColorGray35 (10921638), wdColorGray375 (10526880), wdColorGray40 (10066329), wdColorGray45 (9211020), wdColorGray50 (8421504), wdColorGray55 (7566195), wdColorGray60 (6710886), wdColorGray625 (6316128), wdColorGray65 (5855577), wdColorGray70 (5000268), wdColorGray75 (4210752), wdColorGray80 (3355443), wdColorGray85 (2500134), wdColorGray875 (2105376), wdColorGray90 (1644825), wdColorGray95 (789516), wdColorGreen (32768), wdColorIndigo (10040115), wdColorLavender (16751052), wdColorLightBlue (16737843), wdColorLightGreen (13434828), wdColorLightOrange (39423), wdColorLightTurquoise (16777164), wdColorLightYellow (10092543), wdColorLime (52377), wdColorOliveGreen (13107), wdColorOrange (26367), wdColorPaleBlue (16764057), wdColorPink (16711935), wdColorPlum (6697881), wdColorRed (255), wdColorRose (13408767), wdColorSeaGreen (6723891), wdColorSkyBlue (16763904), wdColorTan (10079487), wdColorTeal (8421376), wdColorTurquoise (16776960), wdColorViolet (8388736), wdColorWhite (16777215), wdColorYellow (65535) """
    value__ = ...
    wdColorAqua: WdColor = ...
    wdColorAutomatic: WdColor = ...
    wdColorBlack: WdColor = ...
    wdColorBlue: WdColor = ...
    wdColorBlueGray: WdColor = ...
    wdColorBrightGreen: WdColor = ...
    wdColorBrown: WdColor = ...
    wdColorDarkBlue: WdColor = ...
    wdColorDarkGreen: WdColor = ...
    wdColorDarkRed: WdColor = ...
    wdColorDarkTeal: WdColor = ...
    wdColorDarkYellow: WdColor = ...
    wdColorGold: WdColor = ...
    wdColorGray05: WdColor = ...
    wdColorGray10: WdColor = ...
    wdColorGray125: WdColor = ...
    wdColorGray15: WdColor = ...
    wdColorGray20: WdColor = ...
    wdColorGray25: WdColor = ...
    wdColorGray30: WdColor = ...
    wdColorGray35: WdColor = ...
    wdColorGray375: WdColor = ...
    wdColorGray40: WdColor = ...
    wdColorGray45: WdColor = ...
    wdColorGray50: WdColor = ...
    wdColorGray55: WdColor = ...
    wdColorGray60: WdColor = ...
    wdColorGray625: WdColor = ...
    wdColorGray65: WdColor = ...
    wdColorGray70: WdColor = ...
    wdColorGray75: WdColor = ...
    wdColorGray80: WdColor = ...
    wdColorGray85: WdColor = ...
    wdColorGray875: WdColor = ...
    wdColorGray90: WdColor = ...
    wdColorGray95: WdColor = ...
    wdColorGreen: WdColor = ...
    wdColorIndigo: WdColor = ...
    wdColorLavender: WdColor = ...
    wdColorLightBlue: WdColor = ...
    wdColorLightGreen: WdColor = ...
    wdColorLightOrange: WdColor = ...
    wdColorLightTurquoise: WdColor = ...
    wdColorLightYellow: WdColor = ...
    wdColorLime: WdColor = ...
    wdColorOliveGreen: WdColor = ...
    wdColorOrange: WdColor = ...
    wdColorPaleBlue: WdColor = ...
    wdColorPink: WdColor = ...
    wdColorPlum: WdColor = ...
    wdColorRed: WdColor = ...
    wdColorRose: WdColor = ...
    wdColorSeaGreen: WdColor = ...
    wdColorSkyBlue: WdColor = ...
    wdColorTan: WdColor = ...
    wdColorTeal: WdColor = ...
    wdColorTurquoise: WdColor = ...
    wdColorViolet: WdColor = ...
    wdColorWhite: WdColor = ...
    wdColorYellow: WdColor = ...


class WdColorIndex(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdColorIndex, values: wdAuto (0), wdBlack (1), wdBlue (2), wdBrightGreen (4), wdByAuthor (-1), wdDarkBlue (9), wdDarkRed (13), wdDarkYellow (14), wdGray25 (16), wdGray50 (15), wdGreen (11), wdNoHighlight (0), wdPink (5), wdRed (6), wdTeal (10), wdTurquoise (3), wdViolet (12), wdWhite (8), wdYellow (7) """
    value__ = ...
    wdAuto: WdColorIndex = ...
    wdBlack: WdColorIndex = ...
    wdBlue: WdColorIndex = ...
    wdBrightGreen: WdColorIndex = ...
    wdByAuthor: WdColorIndex = ...
    wdDarkBlue: WdColorIndex = ...
    wdDarkRed: WdColorIndex = ...
    wdDarkYellow: WdColorIndex = ...
    wdGray25: WdColorIndex = ...
    wdGray50: WdColorIndex = ...
    wdGreen: WdColorIndex = ...
    wdNoHighlight: WdColorIndex = ...
    wdPink: WdColorIndex = ...
    wdRed: WdColorIndex = ...
    wdTeal: WdColorIndex = ...
    wdTurquoise: WdColorIndex = ...
    wdViolet: WdColorIndex = ...
    wdWhite: WdColorIndex = ...
    wdYellow: WdColorIndex = ...


class WdColumnWidth(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdColumnWidth, values: wdColumnWidthDefault (2), wdColumnWidthNarrow (1), wdColumnWidthWide (3) """
    value__ = ...
    wdColumnWidthDefault: WdColumnWidth = ...
    wdColumnWidthNarrow: WdColumnWidth = ...
    wdColumnWidthWide: WdColumnWidth = ...


class WdCompareDestination(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCompareDestination, values: wdCompareDestinationNew (2), wdCompareDestinationOriginal (0), wdCompareDestinationRevised (1) """
    value__ = ...
    wdCompareDestinationNew: WdCompareDestination = ...
    wdCompareDestinationOriginal: WdCompareDestination = ...
    wdCompareDestinationRevised: WdCompareDestination = ...


class WdCompareTarget(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCompareTarget, values: wdCompareTargetCurrent (1), wdCompareTargetNew (2), wdCompareTargetSelected (0) """
    value__ = ...
    wdCompareTargetCurrent: WdCompareTarget = ...
    wdCompareTargetNew: WdCompareTarget = ...
    wdCompareTargetSelected: WdCompareTarget = ...


class WdCompatibility(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCompatibility, values: wdAlignTablesRowByRow (39), wdAllowSpaceOfSameStyleInTable (54), wdApplyBreakingRules (46), wdAutofitLikeWW11 (57), wdAutospaceLikeWW7 (38), wdCachedColBalance (65), wdConvMailMergeEsc (6), wdDisableOTKerning (66), wdDontAdjustLineHeightInTable (36), wdDontAutofitConstrainedTables (56), wdDontBalanceSingleByteDoubleByteWidth (16), wdDontBreakConstrainedForcedTables (62), wdDontBreakWrappedTables (43), wdDontOverrideTableStyleFontSzAndJustification (68), wdDontSnapTextToGridInTableWithObjects (44), wdDontULTrailSpace (15), wdDontUseAsianBreakRulesInGrid (48), wdDontUseHTMLParagraphAutoSpacing (35), wdDontUseIndentAsNumberingTabStop (52), wdDontVertAlignCellWithShape (61), wdDontVertAlignInTextbox (63), wdDontWrapTextWithPunctuation (47), wdExactOnTop (28), wdExpandShiftReturn (14), wdFELineBreak11 (53), wdFlipMirrorIndents (67), wdFootnoteLayoutLikeWW8 (34), wdForgetLastTabAlignment (37), wdGrowAutofit (50), wdHangulWidthLikeWW11 (59), wdLayoutRawTableWidth (40), wdLayoutTableRowsApart (41), wdLeaveBackslashAlone (13), wdLineWrapLikeWord6 (32), wdMWSmallCaps (22), wdNoColumnBalance (5), wdNoExtraLineSpacing (23), wdNoLeading (20), wdNoSpaceForUL (21), wdNoSpaceRaiseLower (2), wdNoTabHangIndent (1), wdOrigWordTableRules (9), wdPrintBodyTextBeforeHeader (19), wdPrintColBlack (3), wdSelectFieldWithFirstOrLastCharacter (45), wdShapeLayoutLikeWW8 (33), wdShowBreaksInFrames (11), wdSpacingInWholePoints (18), wdSplitPgBreakAndParaMark (60), wdSubFontBySize (25), wdSuppressBottomSpacing (29), wdSuppressSpBfAfterPgBrk (7), wdSuppressTopSpacing (8), wdSuppressTopSpacingMac5 (17), wdSwapBordersFacingPages (12), wdTransparentMetafiles (10), wdTruncateFontHeight (24), wdUnderlineTabInNumList (58), wdUseNormalStyleForList (51), wdUsePrinterMetrics (26), wdUseWord2002TableStyleRules (49), wdUseWord2010TableStyleRules (69), wdUseWord97LineBreakingRules (42), wdWord11KerningPairs (64), wdWPJustification (31), wdWPSpaceWidth (30), wdWrapTrailSpaces (4), wdWW11IndentRules (55), wdWW6BorderRules (27) """
    value__ = ...
    wdAlignTablesRowByRow: WdCompatibility = ...
    wdAllowSpaceOfSameStyleInTable: WdCompatibility = ...
    wdApplyBreakingRules: WdCompatibility = ...
    wdAutofitLikeWW11: WdCompatibility = ...
    wdAutospaceLikeWW7: WdCompatibility = ...
    wdCachedColBalance: WdCompatibility = ...
    wdConvMailMergeEsc: WdCompatibility = ...
    wdDisableOTKerning: WdCompatibility = ...
    wdDontAdjustLineHeightInTable: WdCompatibility = ...
    wdDontAutofitConstrainedTables: WdCompatibility = ...
    wdDontBalanceSingleByteDoubleByteWidth: WdCompatibility = ...
    wdDontBreakConstrainedForcedTables: WdCompatibility = ...
    wdDontBreakWrappedTables: WdCompatibility = ...
    wdDontOverrideTableStyleFontSzAndJustification: WdCompatibility = ...
    wdDontSnapTextToGridInTableWithObjects: WdCompatibility = ...
    wdDontULTrailSpace: WdCompatibility = ...
    wdDontUseAsianBreakRulesInGrid: WdCompatibility = ...
    wdDontUseHTMLParagraphAutoSpacing: WdCompatibility = ...
    wdDontUseIndentAsNumberingTabStop: WdCompatibility = ...
    wdDontVertAlignCellWithShape: WdCompatibility = ...
    wdDontVertAlignInTextbox: WdCompatibility = ...
    wdDontWrapTextWithPunctuation: WdCompatibility = ...
    wdExactOnTop: WdCompatibility = ...
    wdExpandShiftReturn: WdCompatibility = ...
    wdFELineBreak11: WdCompatibility = ...
    wdFlipMirrorIndents: WdCompatibility = ...
    wdFootnoteLayoutLikeWW8: WdCompatibility = ...
    wdForgetLastTabAlignment: WdCompatibility = ...
    wdGrowAutofit: WdCompatibility = ...
    wdHangulWidthLikeWW11: WdCompatibility = ...
    wdLayoutRawTableWidth: WdCompatibility = ...
    wdLayoutTableRowsApart: WdCompatibility = ...
    wdLeaveBackslashAlone: WdCompatibility = ...
    wdLineWrapLikeWord6: WdCompatibility = ...
    wdMWSmallCaps: WdCompatibility = ...
    wdNoColumnBalance: WdCompatibility = ...
    wdNoExtraLineSpacing: WdCompatibility = ...
    wdNoLeading: WdCompatibility = ...
    wdNoSpaceForUL: WdCompatibility = ...
    wdNoSpaceRaiseLower: WdCompatibility = ...
    wdNoTabHangIndent: WdCompatibility = ...
    wdOrigWordTableRules: WdCompatibility = ...
    wdPrintBodyTextBeforeHeader: WdCompatibility = ...
    wdPrintColBlack: WdCompatibility = ...
    wdSelectFieldWithFirstOrLastCharacter: WdCompatibility = ...
    wdShapeLayoutLikeWW8: WdCompatibility = ...
    wdShowBreaksInFrames: WdCompatibility = ...
    wdSpacingInWholePoints: WdCompatibility = ...
    wdSplitPgBreakAndParaMark: WdCompatibility = ...
    wdSubFontBySize: WdCompatibility = ...
    wdSuppressBottomSpacing: WdCompatibility = ...
    wdSuppressSpBfAfterPgBrk: WdCompatibility = ...
    wdSuppressTopSpacing: WdCompatibility = ...
    wdSuppressTopSpacingMac5: WdCompatibility = ...
    wdSwapBordersFacingPages: WdCompatibility = ...
    wdTransparentMetafiles: WdCompatibility = ...
    wdTruncateFontHeight: WdCompatibility = ...
    wdUnderlineTabInNumList: WdCompatibility = ...
    wdUseNormalStyleForList: WdCompatibility = ...
    wdUsePrinterMetrics: WdCompatibility = ...
    wdUseWord2002TableStyleRules: WdCompatibility = ...
    wdUseWord2010TableStyleRules: WdCompatibility = ...
    wdUseWord97LineBreakingRules: WdCompatibility = ...
    wdWord11KerningPairs: WdCompatibility = ...
    wdWPJustification: WdCompatibility = ...
    wdWPSpaceWidth: WdCompatibility = ...
    wdWrapTrailSpaces: WdCompatibility = ...
    wdWW11IndentRules: WdCompatibility = ...
    wdWW6BorderRules: WdCompatibility = ...


class WdCompatibilityMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCompatibilityMode, values: wdCurrent (65535), wdWord2003 (11), wdWord2007 (12), wdWord2010 (14), wdWord2013 (15) """
    value__ = ...
    wdCurrent: WdCompatibilityMode = ...
    wdWord2003: WdCompatibilityMode = ...
    wdWord2007: WdCompatibilityMode = ...
    wdWord2010: WdCompatibilityMode = ...
    wdWord2013: WdCompatibilityMode = ...


class WdConditionCode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdConditionCode, values: wdEvenColumnBanding (7), wdEvenRowBanding (3), wdFirstColumn (4), wdFirstRow (0), wdLastColumn (5), wdLastRow (1), wdNECell (8), wdNWCell (9), wdOddColumnBanding (6), wdOddRowBanding (2), wdSECell (10), wdSWCell (11) """
    value__ = ...
    wdEvenColumnBanding: WdConditionCode = ...
    wdEvenRowBanding: WdConditionCode = ...
    wdFirstColumn: WdConditionCode = ...
    wdFirstRow: WdConditionCode = ...
    wdLastColumn: WdConditionCode = ...
    wdLastRow: WdConditionCode = ...
    wdNECell: WdConditionCode = ...
    wdNWCell: WdConditionCode = ...
    wdOddColumnBanding: WdConditionCode = ...
    wdOddRowBanding: WdConditionCode = ...
    wdSECell: WdConditionCode = ...
    wdSWCell: WdConditionCode = ...


class WdConstants(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdConstants, values: wdAutoPosition (0), wdBackward (-1073741823), wdCreatorCode (1297307460), wdFirst (1), wdForward (1073741823), wdToggle (9999998), wdUndefined (9999999) """
    value__ = ...
    wdAutoPosition: WdConstants = ...
    wdBackward: WdConstants = ...
    wdCreatorCode: WdConstants = ...
    wdFirst: WdConstants = ...
    wdForward: WdConstants = ...
    wdToggle: WdConstants = ...
    wdUndefined: WdConstants = ...


class WdContentControlAppearance(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdContentControlAppearance, values: wdContentControlBoundingBox (0), wdContentControlHidden (2), wdContentControlTags (1) """
    value__ = ...
    wdContentControlBoundingBox: WdContentControlAppearance = ...
    wdContentControlHidden: WdContentControlAppearance = ...
    wdContentControlTags: WdContentControlAppearance = ...


class WdContentControlDateStorageFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdContentControlDateStorageFormat, values: wdContentControlDateStorageDate (1), wdContentControlDateStorageDateTime (2), wdContentControlDateStorageText (0) """
    value__ = ...
    wdContentControlDateStorageDate: WdContentControlDateStorageFormat = ...
    wdContentControlDateStorageDateTime: WdContentControlDateStorageFormat = ...
    wdContentControlDateStorageText: WdContentControlDateStorageFormat = ...


class WdContentControlLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdContentControlLevel, values: wdContentControlLevelCell (3), wdContentControlLevelInline (0), wdContentControlLevelParagraph (1), wdContentControlLevelRow (2) """
    value__ = ...
    wdContentControlLevelCell: WdContentControlLevel = ...
    wdContentControlLevelInline: WdContentControlLevel = ...
    wdContentControlLevelParagraph: WdContentControlLevel = ...
    wdContentControlLevelRow: WdContentControlLevel = ...


class WdContentControlType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdContentControlType, values: wdContentControlBuildingBlockGallery (5), wdContentControlCheckBox (8), wdContentControlComboBox (3), wdContentControlDate (6), wdContentControlDropdownList (4), wdContentControlGroup (7), wdContentControlPicture (2), wdContentControlRepeatingSection (9), wdContentControlRichText (0), wdContentControlText (1) """
    value__ = ...
    wdContentControlBuildingBlockGallery: WdContentControlType = ...
    wdContentControlCheckBox: WdContentControlType = ...
    wdContentControlComboBox: WdContentControlType = ...
    wdContentControlDate: WdContentControlType = ...
    wdContentControlDropdownList: WdContentControlType = ...
    wdContentControlGroup: WdContentControlType = ...
    wdContentControlPicture: WdContentControlType = ...
    wdContentControlRepeatingSection: WdContentControlType = ...
    wdContentControlRichText: WdContentControlType = ...
    wdContentControlText: WdContentControlType = ...


class WdContinue(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdContinue, values: wdContinueDisabled (0), wdContinueList (2), wdResetList (1) """
    value__ = ...
    wdContinueDisabled: WdContinue = ...
    wdContinueList: WdContinue = ...
    wdResetList: WdContinue = ...


class WdCountry(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCountry, values: wdArgentina (54), wdBrazil (55), wdCanada (2), wdChile (56), wdChina (86), wdDenmark (45), wdFinland (358), wdFrance (33), wdGermany (49), wdIceland (354), wdItaly (39), wdJapan (81), wdKorea (82), wdLatinAmerica (3), wdMexico (52), wdNetherlands (31), wdNorway (47), wdPeru (51), wdSpain (34), wdSweden (46), wdTaiwan (886), wdUK (44), wdUS (1), wdVenezuela (58) """
    value__ = ...
    wdArgentina: WdCountry = ...
    wdBrazil: WdCountry = ...
    wdCanada: WdCountry = ...
    wdChile: WdCountry = ...
    wdChina: WdCountry = ...
    wdDenmark: WdCountry = ...
    wdFinland: WdCountry = ...
    wdFrance: WdCountry = ...
    wdGermany: WdCountry = ...
    wdIceland: WdCountry = ...
    wdItaly: WdCountry = ...
    wdJapan: WdCountry = ...
    wdKorea: WdCountry = ...
    wdLatinAmerica: WdCountry = ...
    wdMexico: WdCountry = ...
    wdNetherlands: WdCountry = ...
    wdNorway: WdCountry = ...
    wdPeru: WdCountry = ...
    wdSpain: WdCountry = ...
    wdSweden: WdCountry = ...
    wdTaiwan: WdCountry = ...
    wdUK: WdCountry = ...
    wdUS: WdCountry = ...
    wdVenezuela: WdCountry = ...


class WdCursorMovement(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCursorMovement, values: wdCursorMovementLogical (0), wdCursorMovementVisual (1) """
    value__ = ...
    wdCursorMovementLogical: WdCursorMovement = ...
    wdCursorMovementVisual: WdCursorMovement = ...


class WdCursorType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCursorType, values: wdCursorIBeam (1), wdCursorNormal (2), wdCursorNorthwestArrow (3), wdCursorWait (0) """
    value__ = ...
    wdCursorIBeam: WdCursorType = ...
    wdCursorNormal: WdCursorType = ...
    wdCursorNorthwestArrow: WdCursorType = ...
    wdCursorWait: WdCursorType = ...


class WdCustomLabelPageSize(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdCustomLabelPageSize, values: wdCustomLabelA4 (2), wdCustomLabelA4LS (3), wdCustomLabelA5 (4), wdCustomLabelA5LS (5), wdCustomLabelB4JIS (13), wdCustomLabelB5 (6), wdCustomLabelFanfold (8), wdCustomLabelHigaki (11), wdCustomLabelHigakiLS (12), wdCustomLabelLetter (0), wdCustomLabelLetterLS (1), wdCustomLabelMini (7), wdCustomLabelVertHalfSheet (9), wdCustomLabelVertHalfSheetLS (10) """
    value__ = ...
    wdCustomLabelA4: WdCustomLabelPageSize = ...
    wdCustomLabelA4LS: WdCustomLabelPageSize = ...
    wdCustomLabelA5: WdCustomLabelPageSize = ...
    wdCustomLabelA5LS: WdCustomLabelPageSize = ...
    wdCustomLabelB4JIS: WdCustomLabelPageSize = ...
    wdCustomLabelB5: WdCustomLabelPageSize = ...
    wdCustomLabelFanfold: WdCustomLabelPageSize = ...
    wdCustomLabelHigaki: WdCustomLabelPageSize = ...
    wdCustomLabelHigakiLS: WdCustomLabelPageSize = ...
    wdCustomLabelLetter: WdCustomLabelPageSize = ...
    wdCustomLabelLetterLS: WdCustomLabelPageSize = ...
    wdCustomLabelMini: WdCustomLabelPageSize = ...
    wdCustomLabelVertHalfSheet: WdCustomLabelPageSize = ...
    wdCustomLabelVertHalfSheetLS: WdCustomLabelPageSize = ...


class WdDateLanguage(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDateLanguage, values: wdDateLanguageBidi (10), wdDateLanguageLatin (1033) """
    value__ = ...
    wdDateLanguageBidi: WdDateLanguage = ...
    wdDateLanguageLatin: WdDateLanguage = ...


class WdDefaultFilePath(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDefaultFilePath, values: wdAutoRecoverPath (5), wdBorderArtPath (19), wdCurrentFolderPath (14), wdDocumentsPath (0), wdGraphicsFiltersPath (10), wdPicturesPath (1), wdProgramPath (9), wdProofingToolsPath (12), wdStartupPath (8), wdStyleGalleryPath (15), wdTempFilePath (13), wdTextConvertersPath (11), wdToolsPath (6), wdTutorialPath (7), wdUserOptionsPath (4), wdUserTemplatesPath (2), wdWorkgroupTemplatesPath (3) """
    value__ = ...
    wdAutoRecoverPath: WdDefaultFilePath = ...
    wdBorderArtPath: WdDefaultFilePath = ...
    wdCurrentFolderPath: WdDefaultFilePath = ...
    wdDocumentsPath: WdDefaultFilePath = ...
    wdGraphicsFiltersPath: WdDefaultFilePath = ...
    wdPicturesPath: WdDefaultFilePath = ...
    wdProgramPath: WdDefaultFilePath = ...
    wdProofingToolsPath: WdDefaultFilePath = ...
    wdStartupPath: WdDefaultFilePath = ...
    wdStyleGalleryPath: WdDefaultFilePath = ...
    wdTempFilePath: WdDefaultFilePath = ...
    wdTextConvertersPath: WdDefaultFilePath = ...
    wdToolsPath: WdDefaultFilePath = ...
    wdTutorialPath: WdDefaultFilePath = ...
    wdUserOptionsPath: WdDefaultFilePath = ...
    wdUserTemplatesPath: WdDefaultFilePath = ...
    wdWorkgroupTemplatesPath: WdDefaultFilePath = ...


class WdDefaultListBehavior(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDefaultListBehavior, values: wdWord10ListBehavior (2), wdWord8ListBehavior (0), wdWord9ListBehavior (1) """
    value__ = ...
    wdWord10ListBehavior: WdDefaultListBehavior = ...
    wdWord8ListBehavior: WdDefaultListBehavior = ...
    wdWord9ListBehavior: WdDefaultListBehavior = ...


class WdDefaultTableBehavior(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDefaultTableBehavior, values: wdWord8TableBehavior (0), wdWord9TableBehavior (1) """
    value__ = ...
    wdWord8TableBehavior: WdDefaultTableBehavior = ...
    wdWord9TableBehavior: WdDefaultTableBehavior = ...


class WdDeleteCells(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDeleteCells, values: wdDeleteCellsEntireColumn (3), wdDeleteCellsEntireRow (2), wdDeleteCellsShiftLeft (0), wdDeleteCellsShiftUp (1) """
    value__ = ...
    wdDeleteCellsEntireColumn: WdDeleteCells = ...
    wdDeleteCellsEntireRow: WdDeleteCells = ...
    wdDeleteCellsShiftLeft: WdDeleteCells = ...
    wdDeleteCellsShiftUp: WdDeleteCells = ...


class WdDeletedTextMark(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDeletedTextMark, values: wdDeletedTextMarkBold (5), wdDeletedTextMarkCaret (2), wdDeletedTextMarkColorOnly (9), wdDeletedTextMarkDoubleStrikeThrough (10), wdDeletedTextMarkDoubleUnderline (8), wdDeletedTextMarkHidden (0), wdDeletedTextMarkItalic (6), wdDeletedTextMarkNone (4), wdDeletedTextMarkPound (3), wdDeletedTextMarkStrikeThrough (1), wdDeletedTextMarkUnderline (7) """
    value__ = ...
    wdDeletedTextMarkBold: WdDeletedTextMark = ...
    wdDeletedTextMarkCaret: WdDeletedTextMark = ...
    wdDeletedTextMarkColorOnly: WdDeletedTextMark = ...
    wdDeletedTextMarkDoubleStrikeThrough: WdDeletedTextMark = ...
    wdDeletedTextMarkDoubleUnderline: WdDeletedTextMark = ...
    wdDeletedTextMarkHidden: WdDeletedTextMark = ...
    wdDeletedTextMarkItalic: WdDeletedTextMark = ...
    wdDeletedTextMarkNone: WdDeletedTextMark = ...
    wdDeletedTextMarkPound: WdDeletedTextMark = ...
    wdDeletedTextMarkStrikeThrough: WdDeletedTextMark = ...
    wdDeletedTextMarkUnderline: WdDeletedTextMark = ...


class WdDiacriticColor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDiacriticColor, values: wdDiacriticColorBidi (0), wdDiacriticColorLatin (1) """
    value__ = ...
    wdDiacriticColorBidi: WdDiacriticColor = ...
    wdDiacriticColorLatin: WdDiacriticColor = ...


class WdDictionaryType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDictionaryType, values: wdGrammar (1), wdHangulHanjaConversion (8), wdHangulHanjaConversionCustom (9), wdHyphenation (3), wdSpelling (0), wdSpellingComplete (4), wdSpellingCustom (5), wdSpellingLegal (6), wdSpellingMedical (7), wdThesaurus (2) """
    value__ = ...
    wdGrammar: WdDictionaryType = ...
    wdHangulHanjaConversion: WdDictionaryType = ...
    wdHangulHanjaConversionCustom: WdDictionaryType = ...
    wdHyphenation: WdDictionaryType = ...
    wdSpelling: WdDictionaryType = ...
    wdSpellingComplete: WdDictionaryType = ...
    wdSpellingCustom: WdDictionaryType = ...
    wdSpellingLegal: WdDictionaryType = ...
    wdSpellingMedical: WdDictionaryType = ...
    wdThesaurus: WdDictionaryType = ...


class WdDictionaryTypeHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDictionaryTypeHID, values: emptyenum (0) """
    emptyenum: WdDictionaryTypeHID = ...
    value__ = ...


class WdDisableFeaturesIntroducedAfter(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDisableFeaturesIntroducedAfter, values: wd70 (0), wd70FE (1), wd80 (2) """
    value__ = ...
    wd70: WdDisableFeaturesIntroducedAfter = ...
    wd70FE: WdDisableFeaturesIntroducedAfter = ...
    wd80: WdDisableFeaturesIntroducedAfter = ...


class WdDocPartInsertOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDocPartInsertOptions, values: wdInsertContent (0), wdInsertPage (2), wdInsertParagraph (1) """
    value__ = ...
    wdInsertContent: WdDocPartInsertOptions = ...
    wdInsertPage: WdDocPartInsertOptions = ...
    wdInsertParagraph: WdDocPartInsertOptions = ...


class WdDocumentDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDocumentDirection, values: wdLeftToRight (0), wdRightToLeft (1) """
    value__ = ...
    wdLeftToRight: WdDocumentDirection = ...
    wdRightToLeft: WdDocumentDirection = ...


class WdDocumentKind(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDocumentKind, values: wdDocumentEmail (2), wdDocumentLetter (1), wdDocumentNotSpecified (0) """
    value__ = ...
    wdDocumentEmail: WdDocumentKind = ...
    wdDocumentLetter: WdDocumentKind = ...
    wdDocumentNotSpecified: WdDocumentKind = ...


class WdDocumentMedium(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDocumentMedium, values: wdDocument (1), wdEmailMessage (0), wdWebPage (2) """
    value__ = ...
    wdDocument: WdDocumentMedium = ...
    wdEmailMessage: WdDocumentMedium = ...
    wdWebPage: WdDocumentMedium = ...


class WdDocumentType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDocumentType, values: wdTypeDocument (0), wdTypeFrameset (2), wdTypeTemplate (1) """
    value__ = ...
    wdTypeDocument: WdDocumentType = ...
    wdTypeFrameset: WdDocumentType = ...
    wdTypeTemplate: WdDocumentType = ...


class WdDocumentViewDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDocumentViewDirection, values: wdDocumentViewLtr (1), wdDocumentViewRtl (0) """
    value__ = ...
    wdDocumentViewLtr: WdDocumentViewDirection = ...
    wdDocumentViewRtl: WdDocumentViewDirection = ...


class WdDropPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdDropPosition, values: wdDropMargin (2), wdDropNone (0), wdDropNormal (1) """
    value__ = ...
    wdDropMargin: WdDropPosition = ...
    wdDropNone: WdDropPosition = ...
    wdDropNormal: WdDropPosition = ...


class WdEditionOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdEditionOption, values: wdAutomaticUpdate (3), wdCancelPublisher (0), wdChangeAttributes (5), wdManualUpdate (4), wdOpenSource (7), wdSelectPublisher (2), wdSendPublisher (1), wdUpdateSubscriber (6) """
    value__ = ...
    wdAutomaticUpdate: WdEditionOption = ...
    wdCancelPublisher: WdEditionOption = ...
    wdChangeAttributes: WdEditionOption = ...
    wdManualUpdate: WdEditionOption = ...
    wdOpenSource: WdEditionOption = ...
    wdSelectPublisher: WdEditionOption = ...
    wdSendPublisher: WdEditionOption = ...
    wdUpdateSubscriber: WdEditionOption = ...


class WdEditionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdEditionType, values: wdPublisher (0), wdSubscriber (1) """
    value__ = ...
    wdPublisher: WdEditionType = ...
    wdSubscriber: WdEditionType = ...


class WdEditorType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdEditorType, values: wdEditorCurrent (-6), wdEditorEditors (-5), wdEditorEveryone (-1), wdEditorOwners (-4) """
    value__ = ...
    wdEditorCurrent: WdEditorType = ...
    wdEditorEditors: WdEditorType = ...
    wdEditorEveryone: WdEditorType = ...
    wdEditorOwners: WdEditorType = ...


class WdEmailHTMLFidelity(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdEmailHTMLFidelity, values: wdEmailHTMLFidelityHigh (3), wdEmailHTMLFidelityLow (1), wdEmailHTMLFidelityMedium (2) """
    value__ = ...
    wdEmailHTMLFidelityHigh: WdEmailHTMLFidelity = ...
    wdEmailHTMLFidelityLow: WdEmailHTMLFidelity = ...
    wdEmailHTMLFidelityMedium: WdEmailHTMLFidelity = ...


class WdEmphasisMark(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdEmphasisMark, values: wdEmphasisMarkNone (0), wdEmphasisMarkOverComma (2), wdEmphasisMarkOverSolidCircle (1), wdEmphasisMarkOverWhiteCircle (3), wdEmphasisMarkUnderSolidCircle (4) """
    value__ = ...
    wdEmphasisMarkNone: WdEmphasisMark = ...
    wdEmphasisMarkOverComma: WdEmphasisMark = ...
    wdEmphasisMarkOverSolidCircle: WdEmphasisMark = ...
    wdEmphasisMarkOverWhiteCircle: WdEmphasisMark = ...
    wdEmphasisMarkUnderSolidCircle: WdEmphasisMark = ...


class WdEnableCancelKey(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdEnableCancelKey, values: wdCancelDisabled (0), wdCancelInterrupt (1) """
    value__ = ...
    wdCancelDisabled: WdEnableCancelKey = ...
    wdCancelInterrupt: WdEnableCancelKey = ...


class WdEncloseStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdEncloseStyle, values: wdEncloseStyleLarge (2), wdEncloseStyleNone (0), wdEncloseStyleSmall (1) """
    value__ = ...
    wdEncloseStyleLarge: WdEncloseStyle = ...
    wdEncloseStyleNone: WdEncloseStyle = ...
    wdEncloseStyleSmall: WdEncloseStyle = ...


class WdEnclosureType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdEnclosureType, values: wdEnclosureCircle (0), wdEnclosureDiamond (3), wdEnclosureSquare (1), wdEnclosureTriangle (2) """
    value__ = ...
    wdEnclosureCircle: WdEnclosureType = ...
    wdEnclosureDiamond: WdEnclosureType = ...
    wdEnclosureSquare: WdEnclosureType = ...
    wdEnclosureTriangle: WdEnclosureType = ...


class WdEndnoteLocation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdEndnoteLocation, values: wdEndOfDocument (1), wdEndOfSection (0) """
    value__ = ...
    wdEndOfDocument: WdEndnoteLocation = ...
    wdEndOfSection: WdEndnoteLocation = ...


class WdEnvelopeOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdEnvelopeOrientation, values: wdCenterClockwise (7), wdCenterLandscape (4), wdCenterPortrait (1), wdLeftClockwise (6), wdLeftLandscape (3), wdLeftPortrait (0), wdRightClockwise (8), wdRightLandscape (5), wdRightPortrait (2) """
    value__ = ...
    wdCenterClockwise: WdEnvelopeOrientation = ...
    wdCenterLandscape: WdEnvelopeOrientation = ...
    wdCenterPortrait: WdEnvelopeOrientation = ...
    wdLeftClockwise: WdEnvelopeOrientation = ...
    wdLeftLandscape: WdEnvelopeOrientation = ...
    wdLeftPortrait: WdEnvelopeOrientation = ...
    wdRightClockwise: WdEnvelopeOrientation = ...
    wdRightLandscape: WdEnvelopeOrientation = ...
    wdRightPortrait: WdEnvelopeOrientation = ...


class WdExportCreateBookmarks(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdExportCreateBookmarks, values: wdExportCreateHeadingBookmarks (1), wdExportCreateNoBookmarks (0), wdExportCreateWordBookmarks (2) """
    value__ = ...
    wdExportCreateHeadingBookmarks: WdExportCreateBookmarks = ...
    wdExportCreateNoBookmarks: WdExportCreateBookmarks = ...
    wdExportCreateWordBookmarks: WdExportCreateBookmarks = ...


class WdExportFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdExportFormat, values: wdExportFormatPDF (17), wdExportFormatXPS (18) """
    value__ = ...
    wdExportFormatPDF: WdExportFormat = ...
    wdExportFormatXPS: WdExportFormat = ...


class WdExportItem(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdExportItem, values: wdExportDocumentContent (0), wdExportDocumentWithMarkup (7) """
    value__ = ...
    wdExportDocumentContent: WdExportItem = ...
    wdExportDocumentWithMarkup: WdExportItem = ...


class WdExportOptimizeFor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdExportOptimizeFor, values: wdExportOptimizeForOnScreen (1), wdExportOptimizeForPrint (0) """
    value__ = ...
    wdExportOptimizeForOnScreen: WdExportOptimizeFor = ...
    wdExportOptimizeForPrint: WdExportOptimizeFor = ...


class WdExportRange(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdExportRange, values: wdExportAllDocument (0), wdExportCurrentPage (2), wdExportFromTo (3), wdExportSelection (1) """
    value__ = ...
    wdExportAllDocument: WdExportRange = ...
    wdExportCurrentPage: WdExportRange = ...
    wdExportFromTo: WdExportRange = ...
    wdExportSelection: WdExportRange = ...


class WdFarEastLineBreakLanguageID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFarEastLineBreakLanguageID, values: wdLineBreakJapanese (1041), wdLineBreakKorean (1042), wdLineBreakSimplifiedChinese (2052), wdLineBreakTraditionalChinese (1028) """
    value__ = ...
    wdLineBreakJapanese: WdFarEastLineBreakLanguageID = ...
    wdLineBreakKorean: WdFarEastLineBreakLanguageID = ...
    wdLineBreakSimplifiedChinese: WdFarEastLineBreakLanguageID = ...
    wdLineBreakTraditionalChinese: WdFarEastLineBreakLanguageID = ...


class WdFarEastLineBreakLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFarEastLineBreakLevel, values: wdFarEastLineBreakLevelCustom (2), wdFarEastLineBreakLevelNormal (0), wdFarEastLineBreakLevelStrict (1) """
    value__ = ...
    wdFarEastLineBreakLevelCustom: WdFarEastLineBreakLevel = ...
    wdFarEastLineBreakLevelNormal: WdFarEastLineBreakLevel = ...
    wdFarEastLineBreakLevelStrict: WdFarEastLineBreakLevel = ...


class WdFieldKind(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFieldKind, values: wdFieldKindCold (3), wdFieldKindHot (1), wdFieldKindNone (0), wdFieldKindWarm (2) """
    value__ = ...
    wdFieldKindCold: WdFieldKind = ...
    wdFieldKindHot: WdFieldKind = ...
    wdFieldKindNone: WdFieldKind = ...
    wdFieldKindWarm: WdFieldKind = ...


class WdFieldShading(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFieldShading, values: wdFieldShadingAlways (1), wdFieldShadingNever (0), wdFieldShadingWhenSelected (2) """
    value__ = ...
    wdFieldShadingAlways: WdFieldShading = ...
    wdFieldShadingNever: WdFieldShading = ...
    wdFieldShadingWhenSelected: WdFieldShading = ...


class WdFieldType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFieldType, values: wdFieldAddin (81), wdFieldAddressBlock (93), wdFieldAdvance (84), wdFieldAsk (38), wdFieldAuthor (17), wdFieldAutoNum (54), wdFieldAutoNumLegal (53), wdFieldAutoNumOutline (52), wdFieldAutoText (79), wdFieldAutoTextList (89), wdFieldBarCode (63), wdFieldBibliography (97), wdFieldBidiOutline (92), wdFieldCitation (96), wdFieldComments (19), wdFieldCompare (80), wdFieldCreateDate (21), wdFieldData (40), wdFieldDatabase (78), wdFieldDate (31), wdFieldDDE (45), wdFieldDDEAuto (46), wdFieldDisplayBarcode (99), wdFieldDocProperty (85), wdFieldDocVariable (64), wdFieldEditTime (25), wdFieldEmbed (58), wdFieldEmpty (-1), wdFieldExpression (34), wdFieldFileName (29), wdFieldFileSize (69), wdFieldFillIn (39), wdFieldFootnoteRef (5), wdFieldFormCheckBox (71), wdFieldFormDropDown (83), wdFieldFormTextInput (70), wdFieldFormula (49), wdFieldGlossary (47), wdFieldGoToButton (50), wdFieldGreetingLine (94), wdFieldHTMLActiveX (91), wdFieldHyperlink (88), wdFieldIf (7), wdFieldImport (55), wdFieldInclude (36), wdFieldIncludePicture (67), wdFieldIncludeText (68), wdFieldIndex (8), wdFieldIndexEntry (4), wdFieldInfo (14), wdFieldKeyWord (18), wdFieldLastSavedBy (20), wdFieldLink (56), wdFieldListNum (90), wdFieldMacroButton (51), wdFieldMergeBarcode (98), wdFieldMergeField (59), wdFieldMergeRec (44), wdFieldMergeSeq (75), wdFieldNext (41), wdFieldNextIf (42), wdFieldNoteRef (72), wdFieldNumChars (28), wdFieldNumPages (26), wdFieldNumWords (27), wdFieldOCX (87), wdFieldPage (33), wdFieldPageRef (37), wdFieldPrint (48), wdFieldPrintDate (23), wdFieldPrivate (77), wdFieldQuote (35), wdFieldRef (3), wdFieldRefDoc (11), wdFieldRevisionNum (24), wdFieldSaveDate (22), wdFieldSection (65), wdFieldSectionPages (66), wdFieldSequence (12), wdFieldSet (6), wdFieldShape (95), wdFieldSkipIf (43), wdFieldStyleRef (10), wdFieldSubject (16), wdFieldSubscriber (82), wdFieldSymbol (57), wdFieldTemplate (30), wdFieldTime (32), wdFieldTitle (15), wdFieldTOA (73), wdFieldTOAEntry (74), wdFieldTOC (13), wdFieldTOCEntry (9), wdFieldUserAddress (62), wdFieldUserInitials (61), wdFieldUserName (60) """
    value__ = ...
    wdFieldAddin: WdFieldType = ...
    wdFieldAddressBlock: WdFieldType = ...
    wdFieldAdvance: WdFieldType = ...
    wdFieldAsk: WdFieldType = ...
    wdFieldAuthor: WdFieldType = ...
    wdFieldAutoNum: WdFieldType = ...
    wdFieldAutoNumLegal: WdFieldType = ...
    wdFieldAutoNumOutline: WdFieldType = ...
    wdFieldAutoText: WdFieldType = ...
    wdFieldAutoTextList: WdFieldType = ...
    wdFieldBarCode: WdFieldType = ...
    wdFieldBibliography: WdFieldType = ...
    wdFieldBidiOutline: WdFieldType = ...
    wdFieldCitation: WdFieldType = ...
    wdFieldComments: WdFieldType = ...
    wdFieldCompare: WdFieldType = ...
    wdFieldCreateDate: WdFieldType = ...
    wdFieldData: WdFieldType = ...
    wdFieldDatabase: WdFieldType = ...
    wdFieldDate: WdFieldType = ...
    wdFieldDDE: WdFieldType = ...
    wdFieldDDEAuto: WdFieldType = ...
    wdFieldDisplayBarcode: WdFieldType = ...
    wdFieldDocProperty: WdFieldType = ...
    wdFieldDocVariable: WdFieldType = ...
    wdFieldEditTime: WdFieldType = ...
    wdFieldEmbed: WdFieldType = ...
    wdFieldEmpty: WdFieldType = ...
    wdFieldExpression: WdFieldType = ...
    wdFieldFileName: WdFieldType = ...
    wdFieldFileSize: WdFieldType = ...
    wdFieldFillIn: WdFieldType = ...
    wdFieldFootnoteRef: WdFieldType = ...
    wdFieldFormCheckBox: WdFieldType = ...
    wdFieldFormDropDown: WdFieldType = ...
    wdFieldFormTextInput: WdFieldType = ...
    wdFieldFormula: WdFieldType = ...
    wdFieldGlossary: WdFieldType = ...
    wdFieldGoToButton: WdFieldType = ...
    wdFieldGreetingLine: WdFieldType = ...
    wdFieldHTMLActiveX: WdFieldType = ...
    wdFieldHyperlink: WdFieldType = ...
    wdFieldIf: WdFieldType = ...
    wdFieldImport: WdFieldType = ...
    wdFieldInclude: WdFieldType = ...
    wdFieldIncludePicture: WdFieldType = ...
    wdFieldIncludeText: WdFieldType = ...
    wdFieldIndex: WdFieldType = ...
    wdFieldIndexEntry: WdFieldType = ...
    wdFieldInfo: WdFieldType = ...
    wdFieldKeyWord: WdFieldType = ...
    wdFieldLastSavedBy: WdFieldType = ...
    wdFieldLink: WdFieldType = ...
    wdFieldListNum: WdFieldType = ...
    wdFieldMacroButton: WdFieldType = ...
    wdFieldMergeBarcode: WdFieldType = ...
    wdFieldMergeField: WdFieldType = ...
    wdFieldMergeRec: WdFieldType = ...
    wdFieldMergeSeq: WdFieldType = ...
    wdFieldNext: WdFieldType = ...
    wdFieldNextIf: WdFieldType = ...
    wdFieldNoteRef: WdFieldType = ...
    wdFieldNumChars: WdFieldType = ...
    wdFieldNumPages: WdFieldType = ...
    wdFieldNumWords: WdFieldType = ...
    wdFieldOCX: WdFieldType = ...
    wdFieldPage: WdFieldType = ...
    wdFieldPageRef: WdFieldType = ...
    wdFieldPrint: WdFieldType = ...
    wdFieldPrintDate: WdFieldType = ...
    wdFieldPrivate: WdFieldType = ...
    wdFieldQuote: WdFieldType = ...
    wdFieldRef: WdFieldType = ...
    wdFieldRefDoc: WdFieldType = ...
    wdFieldRevisionNum: WdFieldType = ...
    wdFieldSaveDate: WdFieldType = ...
    wdFieldSection: WdFieldType = ...
    wdFieldSectionPages: WdFieldType = ...
    wdFieldSequence: WdFieldType = ...
    wdFieldSet: WdFieldType = ...
    wdFieldShape: WdFieldType = ...
    wdFieldSkipIf: WdFieldType = ...
    wdFieldStyleRef: WdFieldType = ...
    wdFieldSubject: WdFieldType = ...
    wdFieldSubscriber: WdFieldType = ...
    wdFieldSymbol: WdFieldType = ...
    wdFieldTemplate: WdFieldType = ...
    wdFieldTime: WdFieldType = ...
    wdFieldTitle: WdFieldType = ...
    wdFieldTOA: WdFieldType = ...
    wdFieldTOAEntry: WdFieldType = ...
    wdFieldTOC: WdFieldType = ...
    wdFieldTOCEntry: WdFieldType = ...
    wdFieldUserAddress: WdFieldType = ...
    wdFieldUserInitials: WdFieldType = ...
    wdFieldUserName: WdFieldType = ...


class WdFindMatch(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFindMatch, values: wdMatchAnyCharacter (65599), wdMatchAnyDigit (65567), wdMatchAnyLetter (65583), wdMatchCaretCharacter (11), wdMatchColumnBreak (14), wdMatchCommentMark (5), wdMatchEmDash (8212), wdMatchEnDash (8211), wdMatchEndnoteMark (65555), wdMatchField (19), wdMatchFootnoteMark (65554), wdMatchGraphic (1), wdMatchManualLineBreak (65551), wdMatchManualPageBreak (65564), wdMatchNonbreakingHyphen (30), wdMatchNonbreakingSpace (160), wdMatchOptionalHyphen (31), wdMatchParagraphMark (65551), wdMatchSectionBreak (65580), wdMatchTabCharacter (9), wdMatchWhiteSpace (65655) """
    value__ = ...
    wdMatchAnyCharacter: WdFindMatch = ...
    wdMatchAnyDigit: WdFindMatch = ...
    wdMatchAnyLetter: WdFindMatch = ...
    wdMatchCaretCharacter: WdFindMatch = ...
    wdMatchColumnBreak: WdFindMatch = ...
    wdMatchCommentMark: WdFindMatch = ...
    wdMatchEmDash: WdFindMatch = ...
    wdMatchEnDash: WdFindMatch = ...
    wdMatchEndnoteMark: WdFindMatch = ...
    wdMatchField: WdFindMatch = ...
    wdMatchFootnoteMark: WdFindMatch = ...
    wdMatchGraphic: WdFindMatch = ...
    wdMatchManualLineBreak: WdFindMatch = ...
    wdMatchManualPageBreak: WdFindMatch = ...
    wdMatchNonbreakingHyphen: WdFindMatch = ...
    wdMatchNonbreakingSpace: WdFindMatch = ...
    wdMatchOptionalHyphen: WdFindMatch = ...
    wdMatchParagraphMark: WdFindMatch = ...
    wdMatchSectionBreak: WdFindMatch = ...
    wdMatchTabCharacter: WdFindMatch = ...
    wdMatchWhiteSpace: WdFindMatch = ...


class WdFindWrap(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFindWrap, values: wdFindAsk (2), wdFindContinue (1), wdFindStop (0) """
    value__ = ...
    wdFindAsk: WdFindWrap = ...
    wdFindContinue: WdFindWrap = ...
    wdFindStop: WdFindWrap = ...


class WdFlowDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFlowDirection, values: wdFlowLtr (0), wdFlowRtl (1) """
    value__ = ...
    wdFlowLtr: WdFlowDirection = ...
    wdFlowRtl: WdFlowDirection = ...


class WdFontBias(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFontBias, values: wdFontBiasDefault (0), wdFontBiasDontCare (255), wdFontBiasFareast (1) """
    value__ = ...
    wdFontBiasDefault: WdFontBias = ...
    wdFontBiasDontCare: WdFontBias = ...
    wdFontBiasFareast: WdFontBias = ...


class WdFootnoteLocation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFootnoteLocation, values: wdBeneathText (1), wdBottomOfPage (0) """
    value__ = ...
    wdBeneathText: WdFootnoteLocation = ...
    wdBottomOfPage: WdFootnoteLocation = ...


class WdFramePosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFramePosition, values: wdFrameBottom (-999997), wdFrameCenter (-999995), wdFrameInside (-999994), wdFrameLeft (-999998), wdFrameOutside (-999993), wdFrameRight (-999996), wdFrameTop (-999999) """
    value__ = ...
    wdFrameBottom: WdFramePosition = ...
    wdFrameCenter: WdFramePosition = ...
    wdFrameInside: WdFramePosition = ...
    wdFrameLeft: WdFramePosition = ...
    wdFrameOutside: WdFramePosition = ...
    wdFrameRight: WdFramePosition = ...
    wdFrameTop: WdFramePosition = ...


class WdFramesetNewFrameLocation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFramesetNewFrameLocation, values: wdFramesetNewFrameAbove (0), wdFramesetNewFrameBelow (1), wdFramesetNewFrameLeft (3), wdFramesetNewFrameRight (2) """
    value__ = ...
    wdFramesetNewFrameAbove: WdFramesetNewFrameLocation = ...
    wdFramesetNewFrameBelow: WdFramesetNewFrameLocation = ...
    wdFramesetNewFrameLeft: WdFramesetNewFrameLocation = ...
    wdFramesetNewFrameRight: WdFramesetNewFrameLocation = ...


class WdFramesetSizeType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFramesetSizeType, values: wdFramesetSizeTypeFixed (1), wdFramesetSizeTypePercent (0), wdFramesetSizeTypeRelative (2) """
    value__ = ...
    wdFramesetSizeTypeFixed: WdFramesetSizeType = ...
    wdFramesetSizeTypePercent: WdFramesetSizeType = ...
    wdFramesetSizeTypeRelative: WdFramesetSizeType = ...


class WdFramesetType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFramesetType, values: wdFramesetTypeFrame (1), wdFramesetTypeFrameset (0) """
    value__ = ...
    wdFramesetTypeFrame: WdFramesetType = ...
    wdFramesetTypeFrameset: WdFramesetType = ...


class WdFrameSizeRule(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFrameSizeRule, values: wdFrameAtLeast (1), wdFrameAuto (0), wdFrameExact (2) """
    value__ = ...
    wdFrameAtLeast: WdFrameSizeRule = ...
    wdFrameAuto: WdFrameSizeRule = ...
    wdFrameExact: WdFrameSizeRule = ...


class WdFrenchSpeller(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdFrenchSpeller, values: wdFrenchBoth (0), wdFrenchPostReform (2), wdFrenchPreReform (1) """
    value__ = ...
    wdFrenchBoth: WdFrenchSpeller = ...
    wdFrenchPostReform: WdFrenchSpeller = ...
    wdFrenchPreReform: WdFrenchSpeller = ...


class WdGoToDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdGoToDirection, values: wdGoToAbsolute (1), wdGoToFirst (1), wdGoToLast (-1), wdGoToNext (2), wdGoToPrevious (3), wdGoToRelative (2) """
    value__ = ...
    wdGoToAbsolute: WdGoToDirection = ...
    wdGoToFirst: WdGoToDirection = ...
    wdGoToLast: WdGoToDirection = ...
    wdGoToNext: WdGoToDirection = ...
    wdGoToPrevious: WdGoToDirection = ...
    wdGoToRelative: WdGoToDirection = ...


class WdGoToItem(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdGoToItem, values: wdGoToBookmark (-1), wdGoToComment (6), wdGoToEndnote (5), wdGoToEquation (10), wdGoToField (7), wdGoToFootnote (4), wdGoToGrammaticalError (14), wdGoToGraphic (8), wdGoToHeading (11), wdGoToLine (3), wdGoToObject (9), wdGoToPage (1), wdGoToPercent (12), wdGoToProofreadingError (15), wdGoToSection (0), wdGoToSpellingError (13), wdGoToTable (2) """
    value__ = ...
    wdGoToBookmark: WdGoToItem = ...
    wdGoToComment: WdGoToItem = ...
    wdGoToEndnote: WdGoToItem = ...
    wdGoToEquation: WdGoToItem = ...
    wdGoToField: WdGoToItem = ...
    wdGoToFootnote: WdGoToItem = ...
    wdGoToGrammaticalError: WdGoToItem = ...
    wdGoToGraphic: WdGoToItem = ...
    wdGoToHeading: WdGoToItem = ...
    wdGoToLine: WdGoToItem = ...
    wdGoToObject: WdGoToItem = ...
    wdGoToPage: WdGoToItem = ...
    wdGoToPercent: WdGoToItem = ...
    wdGoToProofreadingError: WdGoToItem = ...
    wdGoToSection: WdGoToItem = ...
    wdGoToSpellingError: WdGoToItem = ...
    wdGoToTable: WdGoToItem = ...


class WdGranularity(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdGranularity, values: wdGranularityCharLevel (0), wdGranularityWordLevel (1) """
    value__ = ...
    wdGranularityCharLevel: WdGranularity = ...
    wdGranularityWordLevel: WdGranularity = ...


class WdGutterStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdGutterStyle, values: wdGutterPosLeft (0), wdGutterPosRight (2), wdGutterPosTop (1) """
    value__ = ...
    wdGutterPosLeft: WdGutterStyle = ...
    wdGutterPosRight: WdGutterStyle = ...
    wdGutterPosTop: WdGutterStyle = ...


class WdGutterStyleOld(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdGutterStyleOld, values: wdGutterStyleBidi (2), wdGutterStyleLatin (-10) """
    value__ = ...
    wdGutterStyleBidi: WdGutterStyleOld = ...
    wdGutterStyleLatin: WdGutterStyleOld = ...


class WdHeaderFooterIndex(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdHeaderFooterIndex, values: wdHeaderFooterEvenPages (3), wdHeaderFooterFirstPage (2), wdHeaderFooterPrimary (1) """
    value__ = ...
    wdHeaderFooterEvenPages: WdHeaderFooterIndex = ...
    wdHeaderFooterFirstPage: WdHeaderFooterIndex = ...
    wdHeaderFooterPrimary: WdHeaderFooterIndex = ...


class WdHeadingSeparator(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdHeadingSeparator, values: wdHeadingSeparatorBlankLine (1), wdHeadingSeparatorLetter (2), wdHeadingSeparatorLetterFull (4), wdHeadingSeparatorLetterLow (3), wdHeadingSeparatorNone (0) """
    value__ = ...
    wdHeadingSeparatorBlankLine: WdHeadingSeparator = ...
    wdHeadingSeparatorLetter: WdHeadingSeparator = ...
    wdHeadingSeparatorLetterFull: WdHeadingSeparator = ...
    wdHeadingSeparatorLetterLow: WdHeadingSeparator = ...
    wdHeadingSeparatorNone: WdHeadingSeparator = ...


class WdHebSpellStart(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdHebSpellStart, values: wdFullScript (0), wdMixedAuthorizedScript (3), wdMixedScript (2), wdPartialScript (1) """
    value__ = ...
    wdFullScript: WdHebSpellStart = ...
    wdMixedAuthorizedScript: WdHebSpellStart = ...
    wdMixedScript: WdHebSpellStart = ...
    wdPartialScript: WdHebSpellStart = ...


class WdHelpType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdHelpType, values: wdHelp (0), wdHelpAbout (1), wdHelpActiveWindow (2), wdHelpContents (3), wdHelpExamplesAndDemos (4), wdHelpHWP (13), wdHelpIchitaro (11), wdHelpIndex (5), wdHelpKeyboard (6), wdHelpPE2 (12), wdHelpPSSHelp (7), wdHelpQuickPreview (8), wdHelpSearch (9), wdHelpUsingHelp (10) """
    value__ = ...
    wdHelp: WdHelpType = ...
    wdHelpAbout: WdHelpType = ...
    wdHelpActiveWindow: WdHelpType = ...
    wdHelpContents: WdHelpType = ...
    wdHelpExamplesAndDemos: WdHelpType = ...
    wdHelpHWP: WdHelpType = ...
    wdHelpIchitaro: WdHelpType = ...
    wdHelpIndex: WdHelpType = ...
    wdHelpKeyboard: WdHelpType = ...
    wdHelpPE2: WdHelpType = ...
    wdHelpPSSHelp: WdHelpType = ...
    wdHelpQuickPreview: WdHelpType = ...
    wdHelpSearch: WdHelpType = ...
    wdHelpUsingHelp: WdHelpType = ...


class WdHelpTypeHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdHelpTypeHID, values: emptyenum (0) """
    emptyenum: WdHelpTypeHID = ...
    value__ = ...


class WdHighAnsiText(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdHighAnsiText, values: wdAutoDetectHighAnsiFarEast (2), wdHighAnsiIsFarEast (0), wdHighAnsiIsHighAnsi (1) """
    value__ = ...
    wdAutoDetectHighAnsiFarEast: WdHighAnsiText = ...
    wdHighAnsiIsFarEast: WdHighAnsiText = ...
    wdHighAnsiIsHighAnsi: WdHighAnsiText = ...


class WdHorizontalInVerticalType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdHorizontalInVerticalType, values: wdHorizontalInVerticalFitInLine (1), wdHorizontalInVerticalNone (0), wdHorizontalInVerticalResizeLine (2) """
    value__ = ...
    wdHorizontalInVerticalFitInLine: WdHorizontalInVerticalType = ...
    wdHorizontalInVerticalNone: WdHorizontalInVerticalType = ...
    wdHorizontalInVerticalResizeLine: WdHorizontalInVerticalType = ...


class WdHorizontalLineAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdHorizontalLineAlignment, values: wdHorizontalLineAlignCenter (1), wdHorizontalLineAlignLeft (0), wdHorizontalLineAlignRight (2) """
    value__ = ...
    wdHorizontalLineAlignCenter: WdHorizontalLineAlignment = ...
    wdHorizontalLineAlignLeft: WdHorizontalLineAlignment = ...
    wdHorizontalLineAlignRight: WdHorizontalLineAlignment = ...


class WdHorizontalLineWidthType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdHorizontalLineWidthType, values: wdHorizontalLineFixedWidth (-2), wdHorizontalLinePercentWidth (-1) """
    value__ = ...
    wdHorizontalLineFixedWidth: WdHorizontalLineWidthType = ...
    wdHorizontalLinePercentWidth: WdHorizontalLineWidthType = ...


class WdIMEMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdIMEMode, values: wdIMEModeAlpha (8), wdIMEModeAlphaFull (7), wdIMEModeHangul (10), wdIMEModeHangulFull (9), wdIMEModeHiragana (4), wdIMEModeKatakana (5), wdIMEModeKatakanaHalf (6), wdIMEModeNoControl (0), wdIMEModeOff (2), wdIMEModeOn (1) """
    value__ = ...
    wdIMEModeAlpha: WdIMEMode = ...
    wdIMEModeAlphaFull: WdIMEMode = ...
    wdIMEModeHangul: WdIMEMode = ...
    wdIMEModeHangulFull: WdIMEMode = ...
    wdIMEModeHiragana: WdIMEMode = ...
    wdIMEModeKatakana: WdIMEMode = ...
    wdIMEModeKatakanaHalf: WdIMEMode = ...
    wdIMEModeNoControl: WdIMEMode = ...
    wdIMEModeOff: WdIMEMode = ...
    wdIMEModeOn: WdIMEMode = ...


class WdIndexFilter(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdIndexFilter, values: wdIndexFilterAiueo (1), wdIndexFilterAkasatana (2), wdIndexFilterChosung (3), wdIndexFilterFull (6), wdIndexFilterLow (4), wdIndexFilterMedium (5), wdIndexFilterNone (0) """
    value__ = ...
    wdIndexFilterAiueo: WdIndexFilter = ...
    wdIndexFilterAkasatana: WdIndexFilter = ...
    wdIndexFilterChosung: WdIndexFilter = ...
    wdIndexFilterFull: WdIndexFilter = ...
    wdIndexFilterLow: WdIndexFilter = ...
    wdIndexFilterMedium: WdIndexFilter = ...
    wdIndexFilterNone: WdIndexFilter = ...


class WdIndexFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdIndexFormat, values: wdIndexBulleted (4), wdIndexClassic (1), wdIndexFancy (2), wdIndexFormal (5), wdIndexModern (3), wdIndexSimple (6), wdIndexTemplate (0) """
    value__ = ...
    wdIndexBulleted: WdIndexFormat = ...
    wdIndexClassic: WdIndexFormat = ...
    wdIndexFancy: WdIndexFormat = ...
    wdIndexFormal: WdIndexFormat = ...
    wdIndexModern: WdIndexFormat = ...
    wdIndexSimple: WdIndexFormat = ...
    wdIndexTemplate: WdIndexFormat = ...


class WdIndexSortBy(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdIndexSortBy, values: wdIndexSortByStroke (0), wdIndexSortBySyllable (1) """
    value__ = ...
    wdIndexSortByStroke: WdIndexSortBy = ...
    wdIndexSortBySyllable: WdIndexSortBy = ...


class WdIndexType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdIndexType, values: wdIndexIndent (0), wdIndexRunin (1) """
    value__ = ...
    wdIndexIndent: WdIndexType = ...
    wdIndexRunin: WdIndexType = ...


class WdInformation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdInformation, values: wdActiveEndAdjustedPageNumber (1), wdActiveEndPageNumber (3), wdActiveEndSectionNumber (2), wdAtEndOfRowMarker (31), wdCapsLock (21), wdEndOfRangeColumnNumber (17), wdEndOfRangeRowNumber (14), wdFirstCharacterColumnNumber (9), wdFirstCharacterLineNumber (10), wdFrameIsSelected (11), wdHeaderFooterType (33), wdHorizontalPositionRelativeToPage (5), wdHorizontalPositionRelativeToTextBoundary (7), wdInBibliography (42), wdInCitation (43), wdInClipboard (38), wdInCommentPane (26), wdInContentControl (46), wdInCoverPage (41), wdInEndnote (36), wdInFieldCode (44), wdInFieldResult (45), wdInFootnote (35), wdInFootnoteEndnotePane (25), wdInHeaderFooter (28), wdInMasterDocument (34), wdInWordMail (37), wdMaximumNumberOfColumns (18), wdMaximumNumberOfRows (15), wdNumberOfPagesInDocument (4), wdNumLock (22), wdOverType (23), wdReferenceOfType (32), wdRevisionMarking (24), wdSelectionMode (20), wdStartOfRangeColumnNumber (16), wdStartOfRangeRowNumber (13), wdVerticalPositionRelativeToPage (6), wdVerticalPositionRelativeToTextBoundary (8), wdWithInTable (12), wdZoomPercentage (19) """
    value__ = ...
    wdActiveEndAdjustedPageNumber: WdInformation = ...
    wdActiveEndPageNumber: WdInformation = ...
    wdActiveEndSectionNumber: WdInformation = ...
    wdAtEndOfRowMarker: WdInformation = ...
    wdCapsLock: WdInformation = ...
    wdEndOfRangeColumnNumber: WdInformation = ...
    wdEndOfRangeRowNumber: WdInformation = ...
    wdFirstCharacterColumnNumber: WdInformation = ...
    wdFirstCharacterLineNumber: WdInformation = ...
    wdFrameIsSelected: WdInformation = ...
    wdHeaderFooterType: WdInformation = ...
    wdHorizontalPositionRelativeToPage: WdInformation = ...
    wdHorizontalPositionRelativeToTextBoundary: WdInformation = ...
    wdInBibliography: WdInformation = ...
    wdInCitation: WdInformation = ...
    wdInClipboard: WdInformation = ...
    wdInCommentPane: WdInformation = ...
    wdInContentControl: WdInformation = ...
    wdInCoverPage: WdInformation = ...
    wdInEndnote: WdInformation = ...
    wdInFieldCode: WdInformation = ...
    wdInFieldResult: WdInformation = ...
    wdInFootnote: WdInformation = ...
    wdInFootnoteEndnotePane: WdInformation = ...
    wdInHeaderFooter: WdInformation = ...
    wdInMasterDocument: WdInformation = ...
    wdInWordMail: WdInformation = ...
    wdMaximumNumberOfColumns: WdInformation = ...
    wdMaximumNumberOfRows: WdInformation = ...
    wdNumberOfPagesInDocument: WdInformation = ...
    wdNumLock: WdInformation = ...
    wdOverType: WdInformation = ...
    wdReferenceOfType: WdInformation = ...
    wdRevisionMarking: WdInformation = ...
    wdSelectionMode: WdInformation = ...
    wdStartOfRangeColumnNumber: WdInformation = ...
    wdStartOfRangeRowNumber: WdInformation = ...
    wdVerticalPositionRelativeToPage: WdInformation = ...
    wdVerticalPositionRelativeToTextBoundary: WdInformation = ...
    wdWithInTable: WdInformation = ...
    wdZoomPercentage: WdInformation = ...


class WdInlineShapeType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdInlineShapeType, values: wdInlineShapeChart (12), wdInlineShapeDiagram (13), wdInlineShapeEmbeddedOLEObject (1), wdInlineShapeHorizontalLine (6), wdInlineShapeLinkedOLEObject (2), wdInlineShapeLinkedPicture (4), wdInlineShapeLinkedPictureHorizontalLine (8), wdInlineShapeLockedCanvas (14), wdInlineShapeOLEControlObject (5), wdInlineShapeOWSAnchor (11), wdInlineShapePicture (3), wdInlineShapePictureBullet (9), wdInlineShapePictureHorizontalLine (7), wdInlineShapeScriptAnchor (10), wdInlineShapeSmartArt (15), wdInlineShapeWebVideo (16) """
    value__ = ...
    wdInlineShapeChart: WdInlineShapeType = ...
    wdInlineShapeDiagram: WdInlineShapeType = ...
    wdInlineShapeEmbeddedOLEObject: WdInlineShapeType = ...
    wdInlineShapeHorizontalLine: WdInlineShapeType = ...
    wdInlineShapeLinkedOLEObject: WdInlineShapeType = ...
    wdInlineShapeLinkedPicture: WdInlineShapeType = ...
    wdInlineShapeLinkedPictureHorizontalLine: WdInlineShapeType = ...
    wdInlineShapeLockedCanvas: WdInlineShapeType = ...
    wdInlineShapeOLEControlObject: WdInlineShapeType = ...
    wdInlineShapeOWSAnchor: WdInlineShapeType = ...
    wdInlineShapePicture: WdInlineShapeType = ...
    wdInlineShapePictureBullet: WdInlineShapeType = ...
    wdInlineShapePictureHorizontalLine: WdInlineShapeType = ...
    wdInlineShapeScriptAnchor: WdInlineShapeType = ...
    wdInlineShapeSmartArt: WdInlineShapeType = ...
    wdInlineShapeWebVideo: WdInlineShapeType = ...


class WdInsertCells(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdInsertCells, values: wdInsertCellsEntireColumn (3), wdInsertCellsEntireRow (2), wdInsertCellsShiftDown (1), wdInsertCellsShiftRight (0) """
    value__ = ...
    wdInsertCellsEntireColumn: WdInsertCells = ...
    wdInsertCellsEntireRow: WdInsertCells = ...
    wdInsertCellsShiftDown: WdInsertCells = ...
    wdInsertCellsShiftRight: WdInsertCells = ...


class WdInsertedTextMark(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdInsertedTextMark, values: wdInsertedTextMarkBold (1), wdInsertedTextMarkColorOnly (5), wdInsertedTextMarkDoubleStrikeThrough (7), wdInsertedTextMarkDoubleUnderline (4), wdInsertedTextMarkItalic (2), wdInsertedTextMarkNone (0), wdInsertedTextMarkStrikeThrough (6), wdInsertedTextMarkUnderline (3) """
    value__ = ...
    wdInsertedTextMarkBold: WdInsertedTextMark = ...
    wdInsertedTextMarkColorOnly: WdInsertedTextMark = ...
    wdInsertedTextMarkDoubleStrikeThrough: WdInsertedTextMark = ...
    wdInsertedTextMarkDoubleUnderline: WdInsertedTextMark = ...
    wdInsertedTextMarkItalic: WdInsertedTextMark = ...
    wdInsertedTextMarkNone: WdInsertedTextMark = ...
    wdInsertedTextMarkStrikeThrough: WdInsertedTextMark = ...
    wdInsertedTextMarkUnderline: WdInsertedTextMark = ...


class WdInternationalIndex(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdInternationalIndex, values: wd24HourClock (21), wdCurrencyCode (20), wdDateSeparator (25), wdDecimalSeparator (18), wdInternationalAM (22), wdInternationalPM (23), wdListSeparator (17), wdProductLanguageID (26), wdThousandsSeparator (19), wdTimeSeparator (24) """
    value__ = ...
    wd24HourClock: WdInternationalIndex = ...
    wdCurrencyCode: WdInternationalIndex = ...
    wdDateSeparator: WdInternationalIndex = ...
    wdDecimalSeparator: WdInternationalIndex = ...
    wdInternationalAM: WdInternationalIndex = ...
    wdInternationalPM: WdInternationalIndex = ...
    wdListSeparator: WdInternationalIndex = ...
    wdProductLanguageID: WdInternationalIndex = ...
    wdThousandsSeparator: WdInternationalIndex = ...
    wdTimeSeparator: WdInternationalIndex = ...


class WdJustificationMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdJustificationMode, values: wdJustificationModeCompress (1), wdJustificationModeCompressKana (2), wdJustificationModeExpand (0) """
    value__ = ...
    wdJustificationModeCompress: WdJustificationMode = ...
    wdJustificationModeCompressKana: WdJustificationMode = ...
    wdJustificationModeExpand: WdJustificationMode = ...


class WdKana(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdKana, values: wdKanaHiragana (9), wdKanaKatakana (8) """
    value__ = ...
    wdKanaHiragana: WdKana = ...
    wdKanaKatakana: WdKana = ...


class WdKey(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdKey, values: wdKey0 (48), wdKey1 (49), wdKey2 (50), wdKey3 (51), wdKey4 (52), wdKey5 (53), wdKey6 (54), wdKey7 (55), wdKey8 (56), wdKey9 (57), wdKeyA (65), wdKeyAlt (1024), wdKeyB (66), wdKeyBackSingleQuote (192), wdKeyBackSlash (220), wdKeyBackspace (8), wdKeyC (67), wdKeyCloseSquareBrace (221), wdKeyComma (188), wdKeyCommand (512), wdKeyControl (512), wdKeyD (68), wdKeyDelete (46), wdKeyE (69), wdKeyEnd (35), wdKeyEquals (187), wdKeyEsc (27), wdKeyF (70), wdKeyF1 (112), wdKeyF10 (121), wdKeyF11 (122), wdKeyF12 (123), wdKeyF13 (124), wdKeyF14 (125), wdKeyF15 (126), wdKeyF16 (127), wdKeyF2 (113), wdKeyF3 (114), wdKeyF4 (115), wdKeyF5 (116), wdKeyF6 (117), wdKeyF7 (118), wdKeyF8 (119), wdKeyF9 (120), wdKeyG (71), wdKeyH (72), wdKeyHome (36), wdKeyHyphen (189), wdKeyI (73), wdKeyInsert (45), wdKeyJ (74), wdKeyK (75), wdKeyL (76), wdKeyM (77), wdKeyN (78), wdKeyNumeric0 (96), wdKeyNumeric1 (97), wdKeyNumeric2 (98), wdKeyNumeric3 (99), wdKeyNumeric4 (100), wdKeyNumeric5 (101), wdKeyNumeric5Special (12), wdKeyNumeric6 (102), wdKeyNumeric7 (103), wdKeyNumeric8 (104), wdKeyNumeric9 (105), wdKeyNumericAdd (107), wdKeyNumericDecimal (110), wdKeyNumericDivide (111), wdKeyNumericMultiply (106), wdKeyNumericSubtract (109), wdKeyO (79), wdKeyOpenSquareBrace (219), wdKeyOption (1024), wdKeyP (80), wdKeyPageDown (34), wdKeyPageUp (33), wdKeyPause (19), wdKeyPeriod (190), wdKeyQ (81), wdKeyR (82), wdKeyReturn (13), wdKeyS (83), wdKeyScrollLock (145), wdKeySemiColon (186), wdKeyShift (256), wdKeySingleQuote (222), wdKeySlash (191), wdKeySpacebar (32), wdKeyT (84), wdKeyTab (9), wdKeyU (85), wdKeyV (86), wdKeyW (87), wdKeyX (88), wdKeyY (89), wdKeyZ (90), wdNoKey (255) """
    value__ = ...
    wdKey0: WdKey = ...
    wdKey1: WdKey = ...
    wdKey2: WdKey = ...
    wdKey3: WdKey = ...
    wdKey4: WdKey = ...
    wdKey5: WdKey = ...
    wdKey6: WdKey = ...
    wdKey7: WdKey = ...
    wdKey8: WdKey = ...
    wdKey9: WdKey = ...
    wdKeyA: WdKey = ...
    wdKeyAlt: WdKey = ...
    wdKeyB: WdKey = ...
    wdKeyBackSingleQuote: WdKey = ...
    wdKeyBackSlash: WdKey = ...
    wdKeyBackspace: WdKey = ...
    wdKeyC: WdKey = ...
    wdKeyCloseSquareBrace: WdKey = ...
    wdKeyComma: WdKey = ...
    wdKeyCommand: WdKey = ...
    wdKeyControl: WdKey = ...
    wdKeyD: WdKey = ...
    wdKeyDelete: WdKey = ...
    wdKeyE: WdKey = ...
    wdKeyEnd: WdKey = ...
    wdKeyEquals: WdKey = ...
    wdKeyEsc: WdKey = ...
    wdKeyF: WdKey = ...
    wdKeyF1: WdKey = ...
    wdKeyF10: WdKey = ...
    wdKeyF11: WdKey = ...
    wdKeyF12: WdKey = ...
    wdKeyF13: WdKey = ...
    wdKeyF14: WdKey = ...
    wdKeyF15: WdKey = ...
    wdKeyF16: WdKey = ...
    wdKeyF2: WdKey = ...
    wdKeyF3: WdKey = ...
    wdKeyF4: WdKey = ...
    wdKeyF5: WdKey = ...
    wdKeyF6: WdKey = ...
    wdKeyF7: WdKey = ...
    wdKeyF8: WdKey = ...
    wdKeyF9: WdKey = ...
    wdKeyG: WdKey = ...
    wdKeyH: WdKey = ...
    wdKeyHome: WdKey = ...
    wdKeyHyphen: WdKey = ...
    wdKeyI: WdKey = ...
    wdKeyInsert: WdKey = ...
    wdKeyJ: WdKey = ...
    wdKeyK: WdKey = ...
    wdKeyL: WdKey = ...
    wdKeyM: WdKey = ...
    wdKeyN: WdKey = ...
    wdKeyNumeric0: WdKey = ...
    wdKeyNumeric1: WdKey = ...
    wdKeyNumeric2: WdKey = ...
    wdKeyNumeric3: WdKey = ...
    wdKeyNumeric4: WdKey = ...
    wdKeyNumeric5: WdKey = ...
    wdKeyNumeric5Special: WdKey = ...
    wdKeyNumeric6: WdKey = ...
    wdKeyNumeric7: WdKey = ...
    wdKeyNumeric8: WdKey = ...
    wdKeyNumeric9: WdKey = ...
    wdKeyNumericAdd: WdKey = ...
    wdKeyNumericDecimal: WdKey = ...
    wdKeyNumericDivide: WdKey = ...
    wdKeyNumericMultiply: WdKey = ...
    wdKeyNumericSubtract: WdKey = ...
    wdKeyO: WdKey = ...
    wdKeyOpenSquareBrace: WdKey = ...
    wdKeyOption: WdKey = ...
    wdKeyP: WdKey = ...
    wdKeyPageDown: WdKey = ...
    wdKeyPageUp: WdKey = ...
    wdKeyPause: WdKey = ...
    wdKeyPeriod: WdKey = ...
    wdKeyQ: WdKey = ...
    wdKeyR: WdKey = ...
    wdKeyReturn: WdKey = ...
    wdKeyS: WdKey = ...
    wdKeyScrollLock: WdKey = ...
    wdKeySemiColon: WdKey = ...
    wdKeyShift: WdKey = ...
    wdKeySingleQuote: WdKey = ...
    wdKeySlash: WdKey = ...
    wdKeySpacebar: WdKey = ...
    wdKeyT: WdKey = ...
    wdKeyTab: WdKey = ...
    wdKeyU: WdKey = ...
    wdKeyV: WdKey = ...
    wdKeyW: WdKey = ...
    wdKeyX: WdKey = ...
    wdKeyY: WdKey = ...
    wdKeyZ: WdKey = ...
    wdNoKey: WdKey = ...


class WdKeyCategory(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdKeyCategory, values: wdKeyCategoryAutoText (4), wdKeyCategoryCommand (1), wdKeyCategoryDisable (0), wdKeyCategoryFont (3), wdKeyCategoryMacro (2), wdKeyCategoryNil (-1), wdKeyCategoryPrefix (7), wdKeyCategoryStyle (5), wdKeyCategorySymbol (6) """
    value__ = ...
    wdKeyCategoryAutoText: WdKeyCategory = ...
    wdKeyCategoryCommand: WdKeyCategory = ...
    wdKeyCategoryDisable: WdKeyCategory = ...
    wdKeyCategoryFont: WdKeyCategory = ...
    wdKeyCategoryMacro: WdKeyCategory = ...
    wdKeyCategoryNil: WdKeyCategory = ...
    wdKeyCategoryPrefix: WdKeyCategory = ...
    wdKeyCategoryStyle: WdKeyCategory = ...
    wdKeyCategorySymbol: WdKeyCategory = ...


class WdLanguageID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLanguageID, values: wdAfrikaans (1078), wdAlbanian (1052), wdAmharic (1118), wdArabic (1025), wdArabicAlgeria (5121), wdArabicBahrain (15361), wdArabicEgypt (3073), wdArabicIraq (2049), wdArabicJordan (11265), wdArabicKuwait (13313), wdArabicLebanon (12289), wdArabicLibya (4097), wdArabicMorocco (6145), wdArabicOman (8193), wdArabicQatar (16385), wdArabicSyria (10241), wdArabicTunisia (7169), wdArabicUAE (14337), wdArabicYemen (9217), wdArmenian (1067), wdAssamese (1101), wdAzeriCyrillic (2092), wdAzeriLatin (1068), wdBasque (1069), wdBelgianDutch (2067), wdBelgianFrench (2060), wdBengali (1093), wdBulgarian (1026), wdBurmese (1109), wdByelorussian (1059), wdCatalan (1027), wdCherokee (1116), wdChineseHongKongSAR (3076), wdChineseMacaoSAR (5124), wdChineseSingapore (4100), wdCroatian (1050), wdCzech (1029), wdDanish (1030), wdDivehi (1125), wdDutch (1043), wdEdo (1126), wdEnglishAUS (3081), wdEnglishBelize (10249), wdEnglishCanadian (4105), wdEnglishCaribbean (9225), wdEnglishIndonesia (14345), wdEnglishIreland (6153), wdEnglishJamaica (8201), wdEnglishNewZealand (5129), wdEnglishPhilippines (13321), wdEnglishSouthAfrica (7177), wdEnglishTrinidadTobago (11273), wdEnglishUK (2057), wdEnglishUS (1033), wdEnglishZimbabwe (12297), wdEstonian (1061), wdFaeroese (1080), wdFilipino (1124), wdFinnish (1035), wdFrench (1036), wdFrenchCameroon (11276), wdFrenchCanadian (3084), wdFrenchCongoDRC (9228), wdFrenchCotedIvoire (12300), wdFrenchHaiti (15372), wdFrenchLuxembourg (5132), wdFrenchMali (13324), wdFrenchMonaco (6156), wdFrenchMorocco (14348), wdFrenchReunion (8204), wdFrenchSenegal (10252), wdFrenchWestIndies (7180), wdFrisianNetherlands (1122), wdFulfulde (1127), wdGaelicIreland (2108), wdGaelicScotland (1084), wdGalician (1110), wdGeorgian (1079), wdGerman (1031), wdGermanAustria (3079), wdGermanLiechtenstein (5127), wdGermanLuxembourg (4103), wdGreek (1032), wdGuarani (1140), wdGujarati (1095), wdHausa (1128), wdHawaiian (1141), wdHebrew (1037), wdHindi (1081), wdHungarian (1038), wdIbibio (1129), wdIcelandic (1039), wdIgbo (1136), wdIndonesian (1057), wdInuktitut (1117), wdItalian (1040), wdJapanese (1041), wdKannada (1099), wdKanuri (1137), wdKashmiri (1120), wdKazakh (1087), wdKhmer (1107), wdKirghiz (1088), wdKonkani (1111), wdKorean (1042), wdKyrgyz (1088), wdLanguageNone (0), wdLao (1108), wdLatin (1142), wdLatvian (1062), wdLithuanian (1063), wdMacedonianFYROM (1071), wdMalayalam (1100), wdMalayBruneiDarussalam (2110), wdMalaysian (1086), wdMaltese (1082), wdManipuri (1112), wdMarathi (1102), wdMexicanSpanish (2058), wdMongolian (1104), wdNepali (1121), wdNoProofing (1024), wdNorwegianBokmol (1044), wdNorwegianNynorsk (2068), wdOriya (1096), wdOromo (1138), wdPashto (1123), wdPersian (1065), wdPolish (1045), wdPortuguese (2070), wdPortugueseBrazil (1046), wdPunjabi (1094), wdRhaetoRomanic (1047), wdRomanian (1048), wdRomanianMoldova (2072), wdRussian (1049), wdRussianMoldova (2073), wdSamiLappish (1083), wdSanskrit (1103), wdSerbianCyrillic (3098), wdSerbianLatin (2074), wdSesotho (1072), wdSimplifiedChinese (2052), wdSindhi (1113), wdSindhiPakistan (2137), wdSinhalese (1115), wdSlovak (1051), wdSlovenian (1060), wdSomali (1143), wdSorbian (1070), wdSpanish (1034), wdSpanishArgentina (11274), wdSpanishBolivia (16394), wdSpanishChile (13322), wdSpanishColombia (9226), wdSpanishCostaRica (5130), wdSpanishDominicanRepublic (7178), wdSpanishEcuador (12298), wdSpanishElSalvador (17418), wdSpanishGuatemala (4106), wdSpanishHonduras (18442), wdSpanishModernSort (3082), wdSpanishNicaragua (19466), wdSpanishPanama (6154), wdSpanishParaguay (15370), wdSpanishPeru (10250), wdSpanishPuertoRico (20490), wdSpanishUruguay (14346), wdSpanishVenezuela (8202), wdSutu (1072), wdSwahili (1089), wdSwedish (1053), wdSwedishFinland (2077), wdSwissFrench (4108), wdSwissGerman (2055), wdSwissItalian (2064), wdSyriac (1114), wdTajik (1064), wdTamazight (1119), wdTamazightLatin (2143), wdTamil (1097), wdTatar (1092), wdTelugu (1098), wdThai (1054), wdTibetan (1105), wdTigrignaEritrea (2163), wdTigrignaEthiopic (1139), wdTraditionalChinese (1028), wdTsonga (1073), wdTswana (1074), wdTurkish (1055), wdTurkmen (1090), wdUkrainian (1058), wdUrdu (1056), wdUzbekCyrillic (2115), wdUzbekLatin (1091), wdVenda (1075), wdVietnamese (1066), wdWelsh (1106), wdXhosa (1076), wdYi (1144), wdYiddish (1085), wdYoruba (1130), wdZulu (1077) """
    value__ = ...
    wdAfrikaans: WdLanguageID = ...
    wdAlbanian: WdLanguageID = ...
    wdAmharic: WdLanguageID = ...
    wdArabic: WdLanguageID = ...
    wdArabicAlgeria: WdLanguageID = ...
    wdArabicBahrain: WdLanguageID = ...
    wdArabicEgypt: WdLanguageID = ...
    wdArabicIraq: WdLanguageID = ...
    wdArabicJordan: WdLanguageID = ...
    wdArabicKuwait: WdLanguageID = ...
    wdArabicLebanon: WdLanguageID = ...
    wdArabicLibya: WdLanguageID = ...
    wdArabicMorocco: WdLanguageID = ...
    wdArabicOman: WdLanguageID = ...
    wdArabicQatar: WdLanguageID = ...
    wdArabicSyria: WdLanguageID = ...
    wdArabicTunisia: WdLanguageID = ...
    wdArabicUAE: WdLanguageID = ...
    wdArabicYemen: WdLanguageID = ...
    wdArmenian: WdLanguageID = ...
    wdAssamese: WdLanguageID = ...
    wdAzeriCyrillic: WdLanguageID = ...
    wdAzeriLatin: WdLanguageID = ...
    wdBasque: WdLanguageID = ...
    wdBelgianDutch: WdLanguageID = ...
    wdBelgianFrench: WdLanguageID = ...
    wdBengali: WdLanguageID = ...
    wdBulgarian: WdLanguageID = ...
    wdBurmese: WdLanguageID = ...
    wdByelorussian: WdLanguageID = ...
    wdCatalan: WdLanguageID = ...
    wdCherokee: WdLanguageID = ...
    wdChineseHongKongSAR: WdLanguageID = ...
    wdChineseMacaoSAR: WdLanguageID = ...
    wdChineseSingapore: WdLanguageID = ...
    wdCroatian: WdLanguageID = ...
    wdCzech: WdLanguageID = ...
    wdDanish: WdLanguageID = ...
    wdDivehi: WdLanguageID = ...
    wdDutch: WdLanguageID = ...
    wdEdo: WdLanguageID = ...
    wdEnglishAUS: WdLanguageID = ...
    wdEnglishBelize: WdLanguageID = ...
    wdEnglishCanadian: WdLanguageID = ...
    wdEnglishCaribbean: WdLanguageID = ...
    wdEnglishIndonesia: WdLanguageID = ...
    wdEnglishIreland: WdLanguageID = ...
    wdEnglishJamaica: WdLanguageID = ...
    wdEnglishNewZealand: WdLanguageID = ...
    wdEnglishPhilippines: WdLanguageID = ...
    wdEnglishSouthAfrica: WdLanguageID = ...
    wdEnglishTrinidadTobago: WdLanguageID = ...
    wdEnglishUK: WdLanguageID = ...
    wdEnglishUS: WdLanguageID = ...
    wdEnglishZimbabwe: WdLanguageID = ...
    wdEstonian: WdLanguageID = ...
    wdFaeroese: WdLanguageID = ...
    wdFilipino: WdLanguageID = ...
    wdFinnish: WdLanguageID = ...
    wdFrench: WdLanguageID = ...
    wdFrenchCameroon: WdLanguageID = ...
    wdFrenchCanadian: WdLanguageID = ...
    wdFrenchCongoDRC: WdLanguageID = ...
    wdFrenchCotedIvoire: WdLanguageID = ...
    wdFrenchHaiti: WdLanguageID = ...
    wdFrenchLuxembourg: WdLanguageID = ...
    wdFrenchMali: WdLanguageID = ...
    wdFrenchMonaco: WdLanguageID = ...
    wdFrenchMorocco: WdLanguageID = ...
    wdFrenchReunion: WdLanguageID = ...
    wdFrenchSenegal: WdLanguageID = ...
    wdFrenchWestIndies: WdLanguageID = ...
    wdFrisianNetherlands: WdLanguageID = ...
    wdFulfulde: WdLanguageID = ...
    wdGaelicIreland: WdLanguageID = ...
    wdGaelicScotland: WdLanguageID = ...
    wdGalician: WdLanguageID = ...
    wdGeorgian: WdLanguageID = ...
    wdGerman: WdLanguageID = ...
    wdGermanAustria: WdLanguageID = ...
    wdGermanLiechtenstein: WdLanguageID = ...
    wdGermanLuxembourg: WdLanguageID = ...
    wdGreek: WdLanguageID = ...
    wdGuarani: WdLanguageID = ...
    wdGujarati: WdLanguageID = ...
    wdHausa: WdLanguageID = ...
    wdHawaiian: WdLanguageID = ...
    wdHebrew: WdLanguageID = ...
    wdHindi: WdLanguageID = ...
    wdHungarian: WdLanguageID = ...
    wdIbibio: WdLanguageID = ...
    wdIcelandic: WdLanguageID = ...
    wdIgbo: WdLanguageID = ...
    wdIndonesian: WdLanguageID = ...
    wdInuktitut: WdLanguageID = ...
    wdItalian: WdLanguageID = ...
    wdJapanese: WdLanguageID = ...
    wdKannada: WdLanguageID = ...
    wdKanuri: WdLanguageID = ...
    wdKashmiri: WdLanguageID = ...
    wdKazakh: WdLanguageID = ...
    wdKhmer: WdLanguageID = ...
    wdKirghiz: WdLanguageID = ...
    wdKonkani: WdLanguageID = ...
    wdKorean: WdLanguageID = ...
    wdKyrgyz: WdLanguageID = ...
    wdLanguageNone: WdLanguageID = ...
    wdLao: WdLanguageID = ...
    wdLatin: WdLanguageID = ...
    wdLatvian: WdLanguageID = ...
    wdLithuanian: WdLanguageID = ...
    wdMacedonianFYROM: WdLanguageID = ...
    wdMalayalam: WdLanguageID = ...
    wdMalayBruneiDarussalam: WdLanguageID = ...
    wdMalaysian: WdLanguageID = ...
    wdMaltese: WdLanguageID = ...
    wdManipuri: WdLanguageID = ...
    wdMarathi: WdLanguageID = ...
    wdMexicanSpanish: WdLanguageID = ...
    wdMongolian: WdLanguageID = ...
    wdNepali: WdLanguageID = ...
    wdNoProofing: WdLanguageID = ...
    wdNorwegianBokmol: WdLanguageID = ...
    wdNorwegianNynorsk: WdLanguageID = ...
    wdOriya: WdLanguageID = ...
    wdOromo: WdLanguageID = ...
    wdPashto: WdLanguageID = ...
    wdPersian: WdLanguageID = ...
    wdPolish: WdLanguageID = ...
    wdPortuguese: WdLanguageID = ...
    wdPortugueseBrazil: WdLanguageID = ...
    wdPunjabi: WdLanguageID = ...
    wdRhaetoRomanic: WdLanguageID = ...
    wdRomanian: WdLanguageID = ...
    wdRomanianMoldova: WdLanguageID = ...
    wdRussian: WdLanguageID = ...
    wdRussianMoldova: WdLanguageID = ...
    wdSamiLappish: WdLanguageID = ...
    wdSanskrit: WdLanguageID = ...
    wdSerbianCyrillic: WdLanguageID = ...
    wdSerbianLatin: WdLanguageID = ...
    wdSesotho: WdLanguageID = ...
    wdSimplifiedChinese: WdLanguageID = ...
    wdSindhi: WdLanguageID = ...
    wdSindhiPakistan: WdLanguageID = ...
    wdSinhalese: WdLanguageID = ...
    wdSlovak: WdLanguageID = ...
    wdSlovenian: WdLanguageID = ...
    wdSomali: WdLanguageID = ...
    wdSorbian: WdLanguageID = ...
    wdSpanish: WdLanguageID = ...
    wdSpanishArgentina: WdLanguageID = ...
    wdSpanishBolivia: WdLanguageID = ...
    wdSpanishChile: WdLanguageID = ...
    wdSpanishColombia: WdLanguageID = ...
    wdSpanishCostaRica: WdLanguageID = ...
    wdSpanishDominicanRepublic: WdLanguageID = ...
    wdSpanishEcuador: WdLanguageID = ...
    wdSpanishElSalvador: WdLanguageID = ...
    wdSpanishGuatemala: WdLanguageID = ...
    wdSpanishHonduras: WdLanguageID = ...
    wdSpanishModernSort: WdLanguageID = ...
    wdSpanishNicaragua: WdLanguageID = ...
    wdSpanishPanama: WdLanguageID = ...
    wdSpanishParaguay: WdLanguageID = ...
    wdSpanishPeru: WdLanguageID = ...
    wdSpanishPuertoRico: WdLanguageID = ...
    wdSpanishUruguay: WdLanguageID = ...
    wdSpanishVenezuela: WdLanguageID = ...
    wdSutu: WdLanguageID = ...
    wdSwahili: WdLanguageID = ...
    wdSwedish: WdLanguageID = ...
    wdSwedishFinland: WdLanguageID = ...
    wdSwissFrench: WdLanguageID = ...
    wdSwissGerman: WdLanguageID = ...
    wdSwissItalian: WdLanguageID = ...
    wdSyriac: WdLanguageID = ...
    wdTajik: WdLanguageID = ...
    wdTamazight: WdLanguageID = ...
    wdTamazightLatin: WdLanguageID = ...
    wdTamil: WdLanguageID = ...
    wdTatar: WdLanguageID = ...
    wdTelugu: WdLanguageID = ...
    wdThai: WdLanguageID = ...
    wdTibetan: WdLanguageID = ...
    wdTigrignaEritrea: WdLanguageID = ...
    wdTigrignaEthiopic: WdLanguageID = ...
    wdTraditionalChinese: WdLanguageID = ...
    wdTsonga: WdLanguageID = ...
    wdTswana: WdLanguageID = ...
    wdTurkish: WdLanguageID = ...
    wdTurkmen: WdLanguageID = ...
    wdUkrainian: WdLanguageID = ...
    wdUrdu: WdLanguageID = ...
    wdUzbekCyrillic: WdLanguageID = ...
    wdUzbekLatin: WdLanguageID = ...
    wdVenda: WdLanguageID = ...
    wdVietnamese: WdLanguageID = ...
    wdWelsh: WdLanguageID = ...
    wdXhosa: WdLanguageID = ...
    wdYi: WdLanguageID = ...
    wdYiddish: WdLanguageID = ...
    wdYoruba: WdLanguageID = ...
    wdZulu: WdLanguageID = ...


class WdLanguageID2000(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLanguageID2000, values: wdChineseHongKong (3076), wdChineseMacao (5124), wdEnglishTrinidad (11273) """
    value__ = ...
    wdChineseHongKong: WdLanguageID2000 = ...
    wdChineseMacao: WdLanguageID2000 = ...
    wdEnglishTrinidad: WdLanguageID2000 = ...


class WdLayoutMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLayoutMode, values: wdLayoutModeDefault (0), wdLayoutModeGenko (3), wdLayoutModeGrid (1), wdLayoutModeLineGrid (2) """
    value__ = ...
    wdLayoutModeDefault: WdLayoutMode = ...
    wdLayoutModeGenko: WdLayoutMode = ...
    wdLayoutModeGrid: WdLayoutMode = ...
    wdLayoutModeLineGrid: WdLayoutMode = ...


class WdLetterheadLocation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLetterheadLocation, values: wdLetterBottom (1), wdLetterLeft (2), wdLetterRight (3), wdLetterTop (0) """
    value__ = ...
    wdLetterBottom: WdLetterheadLocation = ...
    wdLetterLeft: WdLetterheadLocation = ...
    wdLetterRight: WdLetterheadLocation = ...
    wdLetterTop: WdLetterheadLocation = ...


class WdLetterStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLetterStyle, values: wdFullBlock (0), wdModifiedBlock (1), wdSemiBlock (2) """
    value__ = ...
    wdFullBlock: WdLetterStyle = ...
    wdModifiedBlock: WdLetterStyle = ...
    wdSemiBlock: WdLetterStyle = ...


class WdLigatures(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLigatures, values: wdLigaturesAll (15), wdLigaturesContextual (2), wdLigaturesContextualDiscretional (10), wdLigaturesContextualHistorical (6), wdLigaturesContextualHistoricalDiscretional (14), wdLigaturesDiscretional (8), wdLigaturesHistorical (4), wdLigaturesHistoricalDiscretional (12), wdLigaturesNone (0), wdLigaturesStandard (1), wdLigaturesStandardContextual (3), wdLigaturesStandardContextualDiscretional (11), wdLigaturesStandardContextualHistorical (7), wdLigaturesStandardDiscretional (9), wdLigaturesStandardHistorical (5), wdLigaturesStandardHistoricalDiscretional (13) """
    value__ = ...
    wdLigaturesAll: WdLigatures = ...
    wdLigaturesContextual: WdLigatures = ...
    wdLigaturesContextualDiscretional: WdLigatures = ...
    wdLigaturesContextualHistorical: WdLigatures = ...
    wdLigaturesContextualHistoricalDiscretional: WdLigatures = ...
    wdLigaturesDiscretional: WdLigatures = ...
    wdLigaturesHistorical: WdLigatures = ...
    wdLigaturesHistoricalDiscretional: WdLigatures = ...
    wdLigaturesNone: WdLigatures = ...
    wdLigaturesStandard: WdLigatures = ...
    wdLigaturesStandardContextual: WdLigatures = ...
    wdLigaturesStandardContextualDiscretional: WdLigatures = ...
    wdLigaturesStandardContextualHistorical: WdLigatures = ...
    wdLigaturesStandardDiscretional: WdLigatures = ...
    wdLigaturesStandardHistorical: WdLigatures = ...
    wdLigaturesStandardHistoricalDiscretional: WdLigatures = ...


class WdLineEndingType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLineEndingType, values: wdCRLF (0), wdCROnly (1), wdLFCR (3), wdLFOnly (2), wdLSPS (4) """
    value__ = ...
    wdCRLF: WdLineEndingType = ...
    wdCROnly: WdLineEndingType = ...
    wdLFCR: WdLineEndingType = ...
    wdLFOnly: WdLineEndingType = ...
    wdLSPS: WdLineEndingType = ...


class WdLineSpacing(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLineSpacing, values: wdLineSpace1pt5 (1), wdLineSpaceAtLeast (3), wdLineSpaceDouble (2), wdLineSpaceExactly (4), wdLineSpaceMultiple (5), wdLineSpaceSingle (0) """
    value__ = ...
    wdLineSpace1pt5: WdLineSpacing = ...
    wdLineSpaceAtLeast: WdLineSpacing = ...
    wdLineSpaceDouble: WdLineSpacing = ...
    wdLineSpaceExactly: WdLineSpacing = ...
    wdLineSpaceMultiple: WdLineSpacing = ...
    wdLineSpaceSingle: WdLineSpacing = ...


class WdLineStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLineStyle, values: wdLineStyleDashDot (5), wdLineStyleDashDotDot (6), wdLineStyleDashDotStroked (20), wdLineStyleDashLargeGap (4), wdLineStyleDashSmallGap (3), wdLineStyleDot (2), wdLineStyleDouble (7), wdLineStyleDoubleWavy (19), wdLineStyleEmboss3D (21), wdLineStyleEngrave3D (22), wdLineStyleInset (24), wdLineStyleNone (0), wdLineStyleOutset (23), wdLineStyleSingle (1), wdLineStyleSingleWavy (18), wdLineStyleThickThinLargeGap (16), wdLineStyleThickThinMedGap (13), wdLineStyleThickThinSmallGap (10), wdLineStyleThinThickLargeGap (15), wdLineStyleThinThickMedGap (12), wdLineStyleThinThickSmallGap (9), wdLineStyleThinThickThinLargeGap (17), wdLineStyleThinThickThinMedGap (14), wdLineStyleThinThickThinSmallGap (11), wdLineStyleTriple (8) """
    value__ = ...
    wdLineStyleDashDot: WdLineStyle = ...
    wdLineStyleDashDotDot: WdLineStyle = ...
    wdLineStyleDashDotStroked: WdLineStyle = ...
    wdLineStyleDashLargeGap: WdLineStyle = ...
    wdLineStyleDashSmallGap: WdLineStyle = ...
    wdLineStyleDot: WdLineStyle = ...
    wdLineStyleDouble: WdLineStyle = ...
    wdLineStyleDoubleWavy: WdLineStyle = ...
    wdLineStyleEmboss3D: WdLineStyle = ...
    wdLineStyleEngrave3D: WdLineStyle = ...
    wdLineStyleInset: WdLineStyle = ...
    wdLineStyleNone: WdLineStyle = ...
    wdLineStyleOutset: WdLineStyle = ...
    wdLineStyleSingle: WdLineStyle = ...
    wdLineStyleSingleWavy: WdLineStyle = ...
    wdLineStyleThickThinLargeGap: WdLineStyle = ...
    wdLineStyleThickThinMedGap: WdLineStyle = ...
    wdLineStyleThickThinSmallGap: WdLineStyle = ...
    wdLineStyleThinThickLargeGap: WdLineStyle = ...
    wdLineStyleThinThickMedGap: WdLineStyle = ...
    wdLineStyleThinThickSmallGap: WdLineStyle = ...
    wdLineStyleThinThickThinLargeGap: WdLineStyle = ...
    wdLineStyleThinThickThinMedGap: WdLineStyle = ...
    wdLineStyleThinThickThinSmallGap: WdLineStyle = ...
    wdLineStyleTriple: WdLineStyle = ...


class WdLineType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLineType, values: wdTableRow (1), wdTextLine (0) """
    value__ = ...
    wdTableRow: WdLineType = ...
    wdTextLine: WdLineType = ...


class WdLineWidth(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLineWidth, values: wdLineWidth025pt (2), wdLineWidth050pt (4), wdLineWidth075pt (6), wdLineWidth100pt (8), wdLineWidth150pt (12), wdLineWidth225pt (18), wdLineWidth300pt (24), wdLineWidth450pt (36), wdLineWidth600pt (48) """
    value__ = ...
    wdLineWidth025pt: WdLineWidth = ...
    wdLineWidth050pt: WdLineWidth = ...
    wdLineWidth075pt: WdLineWidth = ...
    wdLineWidth100pt: WdLineWidth = ...
    wdLineWidth150pt: WdLineWidth = ...
    wdLineWidth225pt: WdLineWidth = ...
    wdLineWidth300pt: WdLineWidth = ...
    wdLineWidth450pt: WdLineWidth = ...
    wdLineWidth600pt: WdLineWidth = ...


class WdLinkType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLinkType, values: wdLinkTypeChart (8), wdLinkTypeDDE (6), wdLinkTypeDDEAuto (7), wdLinkTypeImport (5), wdLinkTypeInclude (4), wdLinkTypeOLE (0), wdLinkTypePicture (1), wdLinkTypeReference (3), wdLinkTypeText (2) """
    value__ = ...
    wdLinkTypeChart: WdLinkType = ...
    wdLinkTypeDDE: WdLinkType = ...
    wdLinkTypeDDEAuto: WdLinkType = ...
    wdLinkTypeImport: WdLinkType = ...
    wdLinkTypeInclude: WdLinkType = ...
    wdLinkTypeOLE: WdLinkType = ...
    wdLinkTypePicture: WdLinkType = ...
    wdLinkTypeReference: WdLinkType = ...
    wdLinkTypeText: WdLinkType = ...


class WdListApplyTo(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdListApplyTo, values: wdListApplyToSelection (2), wdListApplyToThisPointForward (1), wdListApplyToWholeList (0) """
    value__ = ...
    wdListApplyToSelection: WdListApplyTo = ...
    wdListApplyToThisPointForward: WdListApplyTo = ...
    wdListApplyToWholeList: WdListApplyTo = ...


class WdListGalleryType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdListGalleryType, values: wdBulletGallery (1), wdNumberGallery (2), wdOutlineNumberGallery (3) """
    value__ = ...
    wdBulletGallery: WdListGalleryType = ...
    wdNumberGallery: WdListGalleryType = ...
    wdOutlineNumberGallery: WdListGalleryType = ...


class WdListLevelAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdListLevelAlignment, values: wdListLevelAlignCenter (1), wdListLevelAlignLeft (0), wdListLevelAlignRight (2) """
    value__ = ...
    wdListLevelAlignCenter: WdListLevelAlignment = ...
    wdListLevelAlignLeft: WdListLevelAlignment = ...
    wdListLevelAlignRight: WdListLevelAlignment = ...


class WdListNumberStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdListNumberStyle, values: wdListNumberStyleAiueo (20), wdListNumberStyleAiueoHalfWidth (12), wdListNumberStyleArabic (0), wdListNumberStyleArabic1 (46), wdListNumberStyleArabic2 (48), wdListNumberStyleArabicFullWidth (14), wdListNumberStyleArabicLZ (22), wdListNumberStyleArabicLZ2 (62), wdListNumberStyleArabicLZ3 (63), wdListNumberStyleArabicLZ4 (64), wdListNumberStyleBullet (23), wdListNumberStyleCardinalText (6), wdListNumberStyleChosung (25), wdListNumberStyleGanada (24), wdListNumberStyleGBNum1 (26), wdListNumberStyleGBNum2 (27), wdListNumberStyleGBNum3 (28), wdListNumberStyleGBNum4 (29), wdListNumberStyleHangul (43), wdListNumberStyleHanja (44), wdListNumberStyleHanjaRead (41), wdListNumberStyleHanjaReadDigit (42), wdListNumberStyleHebrew1 (45), wdListNumberStyleHebrew2 (47), wdListNumberStyleHindiArabic (51), wdListNumberStyleHindiCardinalText (52), wdListNumberStyleHindiLetter1 (49), wdListNumberStyleHindiLetter2 (50), wdListNumberStyleIroha (21), wdListNumberStyleIrohaHalfWidth (13), wdListNumberStyleKanji (10), wdListNumberStyleKanjiDigit (11), wdListNumberStyleKanjiTraditional (16), wdListNumberStyleKanjiTraditional2 (17), wdListNumberStyleLegal (253), wdListNumberStyleLegalLZ (254), wdListNumberStyleLowercaseBulgarian (67), wdListNumberStyleLowercaseGreek (60), wdListNumberStyleLowercaseLetter (4), wdListNumberStyleLowercaseRoman (2), wdListNumberStyleLowercaseRussian (58), wdListNumberStyleLowercaseTurkish (65), wdListNumberStyleNone (255), wdListNumberStyleNumberInCircle (18), wdListNumberStyleOrdinal (5), wdListNumberStyleOrdinalText (7), wdListNumberStylePictureBullet (249), wdListNumberStyleSimpChinNum1 (37), wdListNumberStyleSimpChinNum2 (38), wdListNumberStyleSimpChinNum3 (39), wdListNumberStyleSimpChinNum4 (40), wdListNumberStyleThaiArabic (54), wdListNumberStyleThaiCardinalText (55), wdListNumberStyleThaiLetter (53), wdListNumberStyleTradChinNum1 (33), wdListNumberStyleTradChinNum2 (34), wdListNumberStyleTradChinNum3 (35), wdListNumberStyleTradChinNum4 (36), wdListNumberStyleUppercaseBulgarian (68), wdListNumberStyleUppercaseGreek (61), wdListNumberStyleUppercaseLetter (3), wdListNumberStyleUppercaseRoman (1), wdListNumberStyleUppercaseRussian (59), wdListNumberStyleUppercaseTurkish (66), wdListNumberStyleVietCardinalText (56), wdListNumberStyleZodiac1 (30), wdListNumberStyleZodiac2 (31), wdListNumberStyleZodiac3 (32) """
    value__ = ...
    wdListNumberStyleAiueo: WdListNumberStyle = ...
    wdListNumberStyleAiueoHalfWidth: WdListNumberStyle = ...
    wdListNumberStyleArabic: WdListNumberStyle = ...
    wdListNumberStyleArabic1: WdListNumberStyle = ...
    wdListNumberStyleArabic2: WdListNumberStyle = ...
    wdListNumberStyleArabicFullWidth: WdListNumberStyle = ...
    wdListNumberStyleArabicLZ: WdListNumberStyle = ...
    wdListNumberStyleArabicLZ2: WdListNumberStyle = ...
    wdListNumberStyleArabicLZ3: WdListNumberStyle = ...
    wdListNumberStyleArabicLZ4: WdListNumberStyle = ...
    wdListNumberStyleBullet: WdListNumberStyle = ...
    wdListNumberStyleCardinalText: WdListNumberStyle = ...
    wdListNumberStyleChosung: WdListNumberStyle = ...
    wdListNumberStyleGanada: WdListNumberStyle = ...
    wdListNumberStyleGBNum1: WdListNumberStyle = ...
    wdListNumberStyleGBNum2: WdListNumberStyle = ...
    wdListNumberStyleGBNum3: WdListNumberStyle = ...
    wdListNumberStyleGBNum4: WdListNumberStyle = ...
    wdListNumberStyleHangul: WdListNumberStyle = ...
    wdListNumberStyleHanja: WdListNumberStyle = ...
    wdListNumberStyleHanjaRead: WdListNumberStyle = ...
    wdListNumberStyleHanjaReadDigit: WdListNumberStyle = ...
    wdListNumberStyleHebrew1: WdListNumberStyle = ...
    wdListNumberStyleHebrew2: WdListNumberStyle = ...
    wdListNumberStyleHindiArabic: WdListNumberStyle = ...
    wdListNumberStyleHindiCardinalText: WdListNumberStyle = ...
    wdListNumberStyleHindiLetter1: WdListNumberStyle = ...
    wdListNumberStyleHindiLetter2: WdListNumberStyle = ...
    wdListNumberStyleIroha: WdListNumberStyle = ...
    wdListNumberStyleIrohaHalfWidth: WdListNumberStyle = ...
    wdListNumberStyleKanji: WdListNumberStyle = ...
    wdListNumberStyleKanjiDigit: WdListNumberStyle = ...
    wdListNumberStyleKanjiTraditional: WdListNumberStyle = ...
    wdListNumberStyleKanjiTraditional2: WdListNumberStyle = ...
    wdListNumberStyleLegal: WdListNumberStyle = ...
    wdListNumberStyleLegalLZ: WdListNumberStyle = ...
    wdListNumberStyleLowercaseBulgarian: WdListNumberStyle = ...
    wdListNumberStyleLowercaseGreek: WdListNumberStyle = ...
    wdListNumberStyleLowercaseLetter: WdListNumberStyle = ...
    wdListNumberStyleLowercaseRoman: WdListNumberStyle = ...
    wdListNumberStyleLowercaseRussian: WdListNumberStyle = ...
    wdListNumberStyleLowercaseTurkish: WdListNumberStyle = ...
    wdListNumberStyleNone: WdListNumberStyle = ...
    wdListNumberStyleNumberInCircle: WdListNumberStyle = ...
    wdListNumberStyleOrdinal: WdListNumberStyle = ...
    wdListNumberStyleOrdinalText: WdListNumberStyle = ...
    wdListNumberStylePictureBullet: WdListNumberStyle = ...
    wdListNumberStyleSimpChinNum1: WdListNumberStyle = ...
    wdListNumberStyleSimpChinNum2: WdListNumberStyle = ...
    wdListNumberStyleSimpChinNum3: WdListNumberStyle = ...
    wdListNumberStyleSimpChinNum4: WdListNumberStyle = ...
    wdListNumberStyleThaiArabic: WdListNumberStyle = ...
    wdListNumberStyleThaiCardinalText: WdListNumberStyle = ...
    wdListNumberStyleThaiLetter: WdListNumberStyle = ...
    wdListNumberStyleTradChinNum1: WdListNumberStyle = ...
    wdListNumberStyleTradChinNum2: WdListNumberStyle = ...
    wdListNumberStyleTradChinNum3: WdListNumberStyle = ...
    wdListNumberStyleTradChinNum4: WdListNumberStyle = ...
    wdListNumberStyleUppercaseBulgarian: WdListNumberStyle = ...
    wdListNumberStyleUppercaseGreek: WdListNumberStyle = ...
    wdListNumberStyleUppercaseLetter: WdListNumberStyle = ...
    wdListNumberStyleUppercaseRoman: WdListNumberStyle = ...
    wdListNumberStyleUppercaseRussian: WdListNumberStyle = ...
    wdListNumberStyleUppercaseTurkish: WdListNumberStyle = ...
    wdListNumberStyleVietCardinalText: WdListNumberStyle = ...
    wdListNumberStyleZodiac1: WdListNumberStyle = ...
    wdListNumberStyleZodiac2: WdListNumberStyle = ...
    wdListNumberStyleZodiac3: WdListNumberStyle = ...


class WdListNumberStyleHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdListNumberStyleHID, values: emptyenum (0) """
    emptyenum: WdListNumberStyleHID = ...
    value__ = ...


class WdListType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdListType, values: wdListBullet (2), wdListListNumOnly (1), wdListMixedNumbering (5), wdListNoNumbering (0), wdListOutlineNumbering (4), wdListPictureBullet (6), wdListSimpleNumbering (3) """
    value__ = ...
    wdListBullet: WdListType = ...
    wdListListNumOnly: WdListType = ...
    wdListMixedNumbering: WdListType = ...
    wdListNoNumbering: WdListType = ...
    wdListOutlineNumbering: WdListType = ...
    wdListPictureBullet: WdListType = ...
    wdListSimpleNumbering: WdListType = ...


class WdLockType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdLockType, values: wdLockChanged (3), wdLockEphemeral (2), wdLockNone (0), wdLockReservation (1) """
    value__ = ...
    wdLockChanged: WdLockType = ...
    wdLockEphemeral: WdLockType = ...
    wdLockNone: WdLockType = ...
    wdLockReservation: WdLockType = ...


class WdMailerPriority(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMailerPriority, values: wdPriorityHigh (3), wdPriorityLow (2), wdPriorityNormal (1) """
    value__ = ...
    wdPriorityHigh: WdMailerPriority = ...
    wdPriorityLow: WdMailerPriority = ...
    wdPriorityNormal: WdMailerPriority = ...


class WdMailMergeActiveRecord(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMailMergeActiveRecord, values: wdFirstDataSourceRecord (-6), wdFirstRecord (-4), wdLastDataSourceRecord (-7), wdLastRecord (-5), wdNextDataSourceRecord (-8), wdNextRecord (-2), wdNoActiveRecord (-1), wdPreviousDataSourceRecord (-9), wdPreviousRecord (-3) """
    value__ = ...
    wdFirstDataSourceRecord: WdMailMergeActiveRecord = ...
    wdFirstRecord: WdMailMergeActiveRecord = ...
    wdLastDataSourceRecord: WdMailMergeActiveRecord = ...
    wdLastRecord: WdMailMergeActiveRecord = ...
    wdNextDataSourceRecord: WdMailMergeActiveRecord = ...
    wdNextRecord: WdMailMergeActiveRecord = ...
    wdNoActiveRecord: WdMailMergeActiveRecord = ...
    wdPreviousDataSourceRecord: WdMailMergeActiveRecord = ...
    wdPreviousRecord: WdMailMergeActiveRecord = ...


class WdMailMergeComparison(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMailMergeComparison, values: wdMergeIfEqual (0), wdMergeIfGreaterThan (3), wdMergeIfGreaterThanOrEqual (5), wdMergeIfIsBlank (6), wdMergeIfIsNotBlank (7), wdMergeIfLessThan (2), wdMergeIfLessThanOrEqual (4), wdMergeIfNotEqual (1) """
    value__ = ...
    wdMergeIfEqual: WdMailMergeComparison = ...
    wdMergeIfGreaterThan: WdMailMergeComparison = ...
    wdMergeIfGreaterThanOrEqual: WdMailMergeComparison = ...
    wdMergeIfIsBlank: WdMailMergeComparison = ...
    wdMergeIfIsNotBlank: WdMailMergeComparison = ...
    wdMergeIfLessThan: WdMailMergeComparison = ...
    wdMergeIfLessThanOrEqual: WdMailMergeComparison = ...
    wdMergeIfNotEqual: WdMailMergeComparison = ...


class WdMailMergeDataSource(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMailMergeDataSource, values: wdMergeInfoFromAccessDDE (1), wdMergeInfoFromExcelDDE (2), wdMergeInfoFromMSQueryDDE (3), wdMergeInfoFromODBC (4), wdMergeInfoFromODSO (5), wdMergeInfoFromWord (0), wdNoMergeInfo (-1) """
    value__ = ...
    wdMergeInfoFromAccessDDE: WdMailMergeDataSource = ...
    wdMergeInfoFromExcelDDE: WdMailMergeDataSource = ...
    wdMergeInfoFromMSQueryDDE: WdMailMergeDataSource = ...
    wdMergeInfoFromODBC: WdMailMergeDataSource = ...
    wdMergeInfoFromODSO: WdMailMergeDataSource = ...
    wdMergeInfoFromWord: WdMailMergeDataSource = ...
    wdNoMergeInfo: WdMailMergeDataSource = ...


class WdMailMergeDefaultRecord(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMailMergeDefaultRecord, values: wdDefaultFirstRecord (1), wdDefaultLastRecord (-16) """
    value__ = ...
    wdDefaultFirstRecord: WdMailMergeDefaultRecord = ...
    wdDefaultLastRecord: WdMailMergeDefaultRecord = ...


class WdMailMergeDestination(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMailMergeDestination, values: wdSendToEmail (2), wdSendToFax (3), wdSendToNewDocument (0), wdSendToPrinter (1) """
    value__ = ...
    wdSendToEmail: WdMailMergeDestination = ...
    wdSendToFax: WdMailMergeDestination = ...
    wdSendToNewDocument: WdMailMergeDestination = ...
    wdSendToPrinter: WdMailMergeDestination = ...


class WdMailMergeMailFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMailMergeMailFormat, values: wdMailFormatHTML (1), wdMailFormatPlainText (0) """
    value__ = ...
    wdMailFormatHTML: WdMailMergeMailFormat = ...
    wdMailFormatPlainText: WdMailMergeMailFormat = ...


class WdMailMergeMainDocType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMailMergeMainDocType, values: wdCatalog (3), wdDirectory (3), wdEMail (4), wdEnvelopes (2), wdFax (5), wdFormLetters (0), wdMailingLabels (1), wdNotAMergeDocument (-1) """
    value__ = ...
    wdCatalog: WdMailMergeMainDocType = ...
    wdDirectory: WdMailMergeMainDocType = ...
    wdEMail: WdMailMergeMainDocType = ...
    wdEnvelopes: WdMailMergeMainDocType = ...
    wdFax: WdMailMergeMainDocType = ...
    wdFormLetters: WdMailMergeMainDocType = ...
    wdMailingLabels: WdMailMergeMainDocType = ...
    wdNotAMergeDocument: WdMailMergeMainDocType = ...


class WdMailMergeState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMailMergeState, values: wdDataSource (5), wdMainAndDataSource (2), wdMainAndHeader (3), wdMainAndSourceAndHeader (4), wdMainDocumentOnly (1), wdNormalDocument (0) """
    value__ = ...
    wdDataSource: WdMailMergeState = ...
    wdMainAndDataSource: WdMailMergeState = ...
    wdMainAndHeader: WdMailMergeState = ...
    wdMainAndSourceAndHeader: WdMailMergeState = ...
    wdMainDocumentOnly: WdMailMergeState = ...
    wdNormalDocument: WdMailMergeState = ...


class WdMailSystem(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMailSystem, values: wdMAPI (1), wdMAPIandPowerTalk (3), wdNoMailSystem (0), wdPowerTalk (2) """
    value__ = ...
    wdMAPI: WdMailSystem = ...
    wdMAPIandPowerTalk: WdMailSystem = ...
    wdNoMailSystem: WdMailSystem = ...
    wdPowerTalk: WdMailSystem = ...


class WdMappedDataFields(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMappedDataFields, values: wdAddress1 (10), wdAddress2 (11), wdAddress3 (29), wdBusinessFax (17), wdBusinessPhone (16), wdCity (12), wdCompany (9), wdCountryRegion (15), wdCourtesyTitle (2), wdDepartment (30), wdEmailAddress (20), wdFirstName (3), wdHomeFax (19), wdHomePhone (18), wdJobTitle (8), wdLastName (5), wdMiddleName (4), wdNickname (7), wdPostalCode (14), wdRubyFirstName (27), wdRubyLastName (28), wdSpouseCourtesyTitle (22), wdSpouseFirstName (23), wdSpouseLastName (25), wdSpouseMiddleName (24), wdSpouseNickname (26), wdState (13), wdSuffix (6), wdUniqueIdentifier (1), wdWebPageURL (21) """
    value__ = ...
    wdAddress1: WdMappedDataFields = ...
    wdAddress2: WdMappedDataFields = ...
    wdAddress3: WdMappedDataFields = ...
    wdBusinessFax: WdMappedDataFields = ...
    wdBusinessPhone: WdMappedDataFields = ...
    wdCity: WdMappedDataFields = ...
    wdCompany: WdMappedDataFields = ...
    wdCountryRegion: WdMappedDataFields = ...
    wdCourtesyTitle: WdMappedDataFields = ...
    wdDepartment: WdMappedDataFields = ...
    wdEmailAddress: WdMappedDataFields = ...
    wdFirstName: WdMappedDataFields = ...
    wdHomeFax: WdMappedDataFields = ...
    wdHomePhone: WdMappedDataFields = ...
    wdJobTitle: WdMappedDataFields = ...
    wdLastName: WdMappedDataFields = ...
    wdMiddleName: WdMappedDataFields = ...
    wdNickname: WdMappedDataFields = ...
    wdPostalCode: WdMappedDataFields = ...
    wdRubyFirstName: WdMappedDataFields = ...
    wdRubyLastName: WdMappedDataFields = ...
    wdSpouseCourtesyTitle: WdMappedDataFields = ...
    wdSpouseFirstName: WdMappedDataFields = ...
    wdSpouseLastName: WdMappedDataFields = ...
    wdSpouseMiddleName: WdMappedDataFields = ...
    wdSpouseNickname: WdMappedDataFields = ...
    wdState: WdMappedDataFields = ...
    wdSuffix: WdMappedDataFields = ...
    wdUniqueIdentifier: WdMappedDataFields = ...
    wdWebPageURL: WdMappedDataFields = ...


class WdMeasurementUnits(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMeasurementUnits, values: wdCentimeters (1), wdInches (0), wdMillimeters (2), wdPicas (4), wdPoints (3) """
    value__ = ...
    wdCentimeters: WdMeasurementUnits = ...
    wdInches: WdMeasurementUnits = ...
    wdMillimeters: WdMeasurementUnits = ...
    wdPicas: WdMeasurementUnits = ...
    wdPoints: WdMeasurementUnits = ...


class WdMeasurementUnitsHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMeasurementUnitsHID, values: emptyenum (0) """
    emptyenum: WdMeasurementUnitsHID = ...
    value__ = ...


class WdMergeFormatFrom(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMergeFormatFrom, values: wdMergeFormatFromOriginal (0), wdMergeFormatFromPrompt (2), wdMergeFormatFromRevised (1) """
    value__ = ...
    wdMergeFormatFromOriginal: WdMergeFormatFrom = ...
    wdMergeFormatFromPrompt: WdMergeFormatFrom = ...
    wdMergeFormatFromRevised: WdMergeFormatFrom = ...


class WdMergeSubType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMergeSubType, values: wdMergeSubTypeAccess (1), wdMergeSubTypeOAL (2), wdMergeSubTypeOLEDBText (5), wdMergeSubTypeOLEDBWord (3), wdMergeSubTypeOther (0), wdMergeSubTypeOutlook (6), wdMergeSubTypeWord (7), wdMergeSubTypeWord2000 (8), wdMergeSubTypeWorks (4) """
    value__ = ...
    wdMergeSubTypeAccess: WdMergeSubType = ...
    wdMergeSubTypeOAL: WdMergeSubType = ...
    wdMergeSubTypeOLEDBText: WdMergeSubType = ...
    wdMergeSubTypeOLEDBWord: WdMergeSubType = ...
    wdMergeSubTypeOther: WdMergeSubType = ...
    wdMergeSubTypeOutlook: WdMergeSubType = ...
    wdMergeSubTypeWord: WdMergeSubType = ...
    wdMergeSubTypeWord2000: WdMergeSubType = ...
    wdMergeSubTypeWorks: WdMergeSubType = ...


class WdMergeTarget(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMergeTarget, values: wdMergeTargetCurrent (1), wdMergeTargetNew (2), wdMergeTargetSelected (0) """
    value__ = ...
    wdMergeTargetCurrent: WdMergeTarget = ...
    wdMergeTargetNew: WdMergeTarget = ...
    wdMergeTargetSelected: WdMergeTarget = ...


class WdMonthNames(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMonthNames, values: wdMonthNamesArabic (0), wdMonthNamesEnglish (1), wdMonthNamesFrench (2) """
    value__ = ...
    wdMonthNamesArabic: WdMonthNames = ...
    wdMonthNamesEnglish: WdMonthNames = ...
    wdMonthNamesFrench: WdMonthNames = ...


class WdMoveFromTextMark(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMoveFromTextMark, values: wdMoveFromTextMarkBold (6), wdMoveFromTextMarkCaret (3), wdMoveFromTextMarkColorOnly (10), wdMoveFromTextMarkDoubleStrikeThrough (1), wdMoveFromTextMarkDoubleUnderline (9), wdMoveFromTextMarkHidden (0), wdMoveFromTextMarkItalic (7), wdMoveFromTextMarkNone (5), wdMoveFromTextMarkPound (4), wdMoveFromTextMarkStrikeThrough (2), wdMoveFromTextMarkUnderline (8) """
    value__ = ...
    wdMoveFromTextMarkBold: WdMoveFromTextMark = ...
    wdMoveFromTextMarkCaret: WdMoveFromTextMark = ...
    wdMoveFromTextMarkColorOnly: WdMoveFromTextMark = ...
    wdMoveFromTextMarkDoubleStrikeThrough: WdMoveFromTextMark = ...
    wdMoveFromTextMarkDoubleUnderline: WdMoveFromTextMark = ...
    wdMoveFromTextMarkHidden: WdMoveFromTextMark = ...
    wdMoveFromTextMarkItalic: WdMoveFromTextMark = ...
    wdMoveFromTextMarkNone: WdMoveFromTextMark = ...
    wdMoveFromTextMarkPound: WdMoveFromTextMark = ...
    wdMoveFromTextMarkStrikeThrough: WdMoveFromTextMark = ...
    wdMoveFromTextMarkUnderline: WdMoveFromTextMark = ...


class WdMovementType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMovementType, values: wdExtend (1), wdMove (0) """
    value__ = ...
    wdExtend: WdMovementType = ...
    wdMove: WdMovementType = ...


class WdMoveToTextMark(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMoveToTextMark, values: wdMoveToTextMarkBold (1), wdMoveToTextMarkColorOnly (5), wdMoveToTextMarkDoubleStrikeThrough (7), wdMoveToTextMarkDoubleUnderline (4), wdMoveToTextMarkItalic (2), wdMoveToTextMarkNone (0), wdMoveToTextMarkStrikeThrough (6), wdMoveToTextMarkUnderline (3) """
    value__ = ...
    wdMoveToTextMarkBold: WdMoveToTextMark = ...
    wdMoveToTextMarkColorOnly: WdMoveToTextMark = ...
    wdMoveToTextMarkDoubleStrikeThrough: WdMoveToTextMark = ...
    wdMoveToTextMarkDoubleUnderline: WdMoveToTextMark = ...
    wdMoveToTextMarkItalic: WdMoveToTextMark = ...
    wdMoveToTextMarkNone: WdMoveToTextMark = ...
    wdMoveToTextMarkStrikeThrough: WdMoveToTextMark = ...
    wdMoveToTextMarkUnderline: WdMoveToTextMark = ...


class WdMultipleWordConversionsMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdMultipleWordConversionsMode, values: wdHangulToHanja (0), wdHanjaToHangul (1) """
    value__ = ...
    wdHangulToHanja: WdMultipleWordConversionsMode = ...
    wdHanjaToHangul: WdMultipleWordConversionsMode = ...


class WdNewDocumentType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdNewDocumentType, values: wdNewBlankDocument (0), wdNewEmailMessage (2), wdNewFrameset (3), wdNewWebPage (1), wdNewXMLDocument (4) """
    value__ = ...
    wdNewBlankDocument: WdNewDocumentType = ...
    wdNewEmailMessage: WdNewDocumentType = ...
    wdNewFrameset: WdNewDocumentType = ...
    wdNewWebPage: WdNewDocumentType = ...
    wdNewXMLDocument: WdNewDocumentType = ...


class WdNoteNumberStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdNoteNumberStyle, values: wdNoteNumberStyleArabic (0), wdNoteNumberStyleArabicFullWidth (14), wdNoteNumberStyleArabicLetter1 (46), wdNoteNumberStyleArabicLetter2 (48), wdNoteNumberStyleHanjaRead (41), wdNoteNumberStyleHanjaReadDigit (42), wdNoteNumberStyleHebrewLetter1 (45), wdNoteNumberStyleHebrewLetter2 (47), wdNoteNumberStyleHindiArabic (51), wdNoteNumberStyleHindiCardinalText (52), wdNoteNumberStyleHindiLetter1 (49), wdNoteNumberStyleHindiLetter2 (50), wdNoteNumberStyleKanji (10), wdNoteNumberStyleKanjiDigit (11), wdNoteNumberStyleKanjiTraditional (16), wdNoteNumberStyleLowercaseLetter (4), wdNoteNumberStyleLowercaseRoman (2), wdNoteNumberStyleNumberInCircle (18), wdNoteNumberStyleSimpChinNum1 (37), wdNoteNumberStyleSimpChinNum2 (38), wdNoteNumberStyleSymbol (9), wdNoteNumberStyleThaiArabic (54), wdNoteNumberStyleThaiCardinalText (55), wdNoteNumberStyleThaiLetter (53), wdNoteNumberStyleTradChinNum1 (33), wdNoteNumberStyleTradChinNum2 (34), wdNoteNumberStyleUppercaseLetter (3), wdNoteNumberStyleUppercaseRoman (1), wdNoteNumberStyleVietCardinalText (56) """
    value__ = ...
    wdNoteNumberStyleArabic: WdNoteNumberStyle = ...
    wdNoteNumberStyleArabicFullWidth: WdNoteNumberStyle = ...
    wdNoteNumberStyleArabicLetter1: WdNoteNumberStyle = ...
    wdNoteNumberStyleArabicLetter2: WdNoteNumberStyle = ...
    wdNoteNumberStyleHanjaRead: WdNoteNumberStyle = ...
    wdNoteNumberStyleHanjaReadDigit: WdNoteNumberStyle = ...
    wdNoteNumberStyleHebrewLetter1: WdNoteNumberStyle = ...
    wdNoteNumberStyleHebrewLetter2: WdNoteNumberStyle = ...
    wdNoteNumberStyleHindiArabic: WdNoteNumberStyle = ...
    wdNoteNumberStyleHindiCardinalText: WdNoteNumberStyle = ...
    wdNoteNumberStyleHindiLetter1: WdNoteNumberStyle = ...
    wdNoteNumberStyleHindiLetter2: WdNoteNumberStyle = ...
    wdNoteNumberStyleKanji: WdNoteNumberStyle = ...
    wdNoteNumberStyleKanjiDigit: WdNoteNumberStyle = ...
    wdNoteNumberStyleKanjiTraditional: WdNoteNumberStyle = ...
    wdNoteNumberStyleLowercaseLetter: WdNoteNumberStyle = ...
    wdNoteNumberStyleLowercaseRoman: WdNoteNumberStyle = ...
    wdNoteNumberStyleNumberInCircle: WdNoteNumberStyle = ...
    wdNoteNumberStyleSimpChinNum1: WdNoteNumberStyle = ...
    wdNoteNumberStyleSimpChinNum2: WdNoteNumberStyle = ...
    wdNoteNumberStyleSymbol: WdNoteNumberStyle = ...
    wdNoteNumberStyleThaiArabic: WdNoteNumberStyle = ...
    wdNoteNumberStyleThaiCardinalText: WdNoteNumberStyle = ...
    wdNoteNumberStyleThaiLetter: WdNoteNumberStyle = ...
    wdNoteNumberStyleTradChinNum1: WdNoteNumberStyle = ...
    wdNoteNumberStyleTradChinNum2: WdNoteNumberStyle = ...
    wdNoteNumberStyleUppercaseLetter: WdNoteNumberStyle = ...
    wdNoteNumberStyleUppercaseRoman: WdNoteNumberStyle = ...
    wdNoteNumberStyleVietCardinalText: WdNoteNumberStyle = ...


class WdNoteNumberStyleHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdNoteNumberStyleHID, values: emptyenum (0) """
    emptyenum: WdNoteNumberStyleHID = ...
    value__ = ...


class WdNumberForm(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdNumberForm, values: wdNumberFormDefault (0), wdNumberFormLining (1), wdNumberFormOldStyle (2) """
    value__ = ...
    wdNumberFormDefault: WdNumberForm = ...
    wdNumberFormLining: WdNumberForm = ...
    wdNumberFormOldStyle: WdNumberForm = ...


class WdNumberingRule(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdNumberingRule, values: wdRestartContinuous (0), wdRestartPage (2), wdRestartSection (1) """
    value__ = ...
    wdRestartContinuous: WdNumberingRule = ...
    wdRestartPage: WdNumberingRule = ...
    wdRestartSection: WdNumberingRule = ...


class WdNumberSpacing(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdNumberSpacing, values: wdNumberSpacingDefault (0), wdNumberSpacingProportional (1), wdNumberSpacingTabular (2) """
    value__ = ...
    wdNumberSpacingDefault: WdNumberSpacing = ...
    wdNumberSpacingProportional: WdNumberSpacing = ...
    wdNumberSpacingTabular: WdNumberSpacing = ...


class WdNumberStyleWordBasicBiDi(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdNumberStyleWordBasicBiDi, values: wdCaptionNumberStyleBidiLetter1 (49), wdCaptionNumberStyleBidiLetter2 (50), wdListNumberStyleBidi1 (49), wdListNumberStyleBidi2 (50), wdNoteNumberStyleBidiLetter1 (49), wdNoteNumberStyleBidiLetter2 (50), wdPageNumberStyleBidiLetter1 (49), wdPageNumberStyleBidiLetter2 (50) """
    value__ = ...
    wdCaptionNumberStyleBidiLetter1: WdNumberStyleWordBasicBiDi = ...
    wdCaptionNumberStyleBidiLetter2: WdNumberStyleWordBasicBiDi = ...
    wdListNumberStyleBidi1: WdNumberStyleWordBasicBiDi = ...
    wdListNumberStyleBidi2: WdNumberStyleWordBasicBiDi = ...
    wdNoteNumberStyleBidiLetter1: WdNumberStyleWordBasicBiDi = ...
    wdNoteNumberStyleBidiLetter2: WdNumberStyleWordBasicBiDi = ...
    wdPageNumberStyleBidiLetter1: WdNumberStyleWordBasicBiDi = ...
    wdPageNumberStyleBidiLetter2: WdNumberStyleWordBasicBiDi = ...


class WdNumberType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdNumberType, values: wdNumberAllNumbers (3), wdNumberListNum (2), wdNumberParagraph (1) """
    value__ = ...
    wdNumberAllNumbers: WdNumberType = ...
    wdNumberListNum: WdNumberType = ...
    wdNumberParagraph: WdNumberType = ...


class WdOLEPlacement(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOLEPlacement, values: wdFloatOverText (1), wdInLine (0) """
    value__ = ...
    wdFloatOverText: WdOLEPlacement = ...
    wdInLine: WdOLEPlacement = ...


class WdOLEType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOLEType, values: wdOLEControl (2), wdOLEEmbed (1), wdOLELink (0) """
    value__ = ...
    wdOLEControl: WdOLEType = ...
    wdOLEEmbed: WdOLEType = ...
    wdOLELink: WdOLEType = ...


class WdOLEVerb(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOLEVerb, values: wdOLEVerbDiscardUndoState (-6), wdOLEVerbHide (-3), wdOLEVerbInPlaceActivate (-5), wdOLEVerbOpen (-2), wdOLEVerbPrimary (0), wdOLEVerbShow (-1), wdOLEVerbUIActivate (-4) """
    value__ = ...
    wdOLEVerbDiscardUndoState: WdOLEVerb = ...
    wdOLEVerbHide: WdOLEVerb = ...
    wdOLEVerbInPlaceActivate: WdOLEVerb = ...
    wdOLEVerbOpen: WdOLEVerb = ...
    wdOLEVerbPrimary: WdOLEVerb = ...
    wdOLEVerbShow: WdOLEVerb = ...
    wdOLEVerbUIActivate: WdOLEVerb = ...


class WdOMathBreakBin(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOMathBreakBin, values: wdOMathBreakBinAfter (1), wdOMathBreakBinBefore (0), wdOMathBreakBinRepeat (2) """
    value__ = ...
    wdOMathBreakBinAfter: WdOMathBreakBin = ...
    wdOMathBreakBinBefore: WdOMathBreakBin = ...
    wdOMathBreakBinRepeat: WdOMathBreakBin = ...


class WdOMathBreakSub(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOMathBreakSub, values: wdOMathBreakSubMinusMinus (0), wdOMathBreakSubMinusPlus (2), wdOMathBreakSubPlusMinus (1) """
    value__ = ...
    wdOMathBreakSubMinusMinus: WdOMathBreakSub = ...
    wdOMathBreakSubMinusPlus: WdOMathBreakSub = ...
    wdOMathBreakSubPlusMinus: WdOMathBreakSub = ...


class WdOMathFracType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOMathFracType, values: wdOMathFracBar (0), wdOMathFracLin (3), wdOMathFracNoBar (1), wdOMathFracSkw (2) """
    value__ = ...
    wdOMathFracBar: WdOMathFracType = ...
    wdOMathFracLin: WdOMathFracType = ...
    wdOMathFracNoBar: WdOMathFracType = ...
    wdOMathFracSkw: WdOMathFracType = ...


class WdOMathFunctionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOMathFunctionType, values: wdOMathFunctionAcc (1), wdOMathFunctionBar (2), wdOMathFunctionBorderBox (4), wdOMathFunctionBox (3), wdOMathFunctionDelim (5), wdOMathFunctionEqArray (6), wdOMathFunctionFrac (7), wdOMathFunctionFunc (8), wdOMathFunctionGroupChar (9), wdOMathFunctionLimLow (10), wdOMathFunctionLimUpp (11), wdOMathFunctionLiteralText (22), wdOMathFunctionMat (12), wdOMathFunctionNary (13), wdOMathFunctionNormalText (21), wdOMathFunctionPhantom (14), wdOMathFunctionRad (16), wdOMathFunctionScrPre (15), wdOMathFunctionScrSub (17), wdOMathFunctionScrSubSup (18), wdOMathFunctionScrSup (19), wdOMathFunctionText (20) """
    value__ = ...
    wdOMathFunctionAcc: WdOMathFunctionType = ...
    wdOMathFunctionBar: WdOMathFunctionType = ...
    wdOMathFunctionBorderBox: WdOMathFunctionType = ...
    wdOMathFunctionBox: WdOMathFunctionType = ...
    wdOMathFunctionDelim: WdOMathFunctionType = ...
    wdOMathFunctionEqArray: WdOMathFunctionType = ...
    wdOMathFunctionFrac: WdOMathFunctionType = ...
    wdOMathFunctionFunc: WdOMathFunctionType = ...
    wdOMathFunctionGroupChar: WdOMathFunctionType = ...
    wdOMathFunctionLimLow: WdOMathFunctionType = ...
    wdOMathFunctionLimUpp: WdOMathFunctionType = ...
    wdOMathFunctionLiteralText: WdOMathFunctionType = ...
    wdOMathFunctionMat: WdOMathFunctionType = ...
    wdOMathFunctionNary: WdOMathFunctionType = ...
    wdOMathFunctionNormalText: WdOMathFunctionType = ...
    wdOMathFunctionPhantom: WdOMathFunctionType = ...
    wdOMathFunctionRad: WdOMathFunctionType = ...
    wdOMathFunctionScrPre: WdOMathFunctionType = ...
    wdOMathFunctionScrSub: WdOMathFunctionType = ...
    wdOMathFunctionScrSubSup: WdOMathFunctionType = ...
    wdOMathFunctionScrSup: WdOMathFunctionType = ...
    wdOMathFunctionText: WdOMathFunctionType = ...


class WdOMathHorizAlignType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOMathHorizAlignType, values: wdOMathHorizAlignCenter (0), wdOMathHorizAlignLeft (1), wdOMathHorizAlignRight (2) """
    value__ = ...
    wdOMathHorizAlignCenter: WdOMathHorizAlignType = ...
    wdOMathHorizAlignLeft: WdOMathHorizAlignType = ...
    wdOMathHorizAlignRight: WdOMathHorizAlignType = ...


class WdOMathJc(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOMathJc, values: wdOMathJcCenter (2), wdOMathJcCenterGroup (1), wdOMathJcInline (7), wdOMathJcLeft (3), wdOMathJcRight (4) """
    value__ = ...
    wdOMathJcCenter: WdOMathJc = ...
    wdOMathJcCenterGroup: WdOMathJc = ...
    wdOMathJcInline: WdOMathJc = ...
    wdOMathJcLeft: WdOMathJc = ...
    wdOMathJcRight: WdOMathJc = ...


class WdOMathShapeType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOMathShapeType, values: wdOMathShapeCentered (0), wdOMathShapeMatch (1) """
    value__ = ...
    wdOMathShapeCentered: WdOMathShapeType = ...
    wdOMathShapeMatch: WdOMathShapeType = ...


class WdOMathSpacingRule(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOMathSpacingRule, values: wdOMathSpacing1pt5 (1), wdOMathSpacingDouble (2), wdOMathSpacingExactly (3), wdOMathSpacingMultiple (4), wdOMathSpacingSingle (0) """
    value__ = ...
    wdOMathSpacing1pt5: WdOMathSpacingRule = ...
    wdOMathSpacingDouble: WdOMathSpacingRule = ...
    wdOMathSpacingExactly: WdOMathSpacingRule = ...
    wdOMathSpacingMultiple: WdOMathSpacingRule = ...
    wdOMathSpacingSingle: WdOMathSpacingRule = ...


class WdOMathType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOMathType, values: wdOMathDisplay (0), wdOMathInline (1) """
    value__ = ...
    wdOMathDisplay: WdOMathType = ...
    wdOMathInline: WdOMathType = ...


class WdOMathVertAlignType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOMathVertAlignType, values: wdOMathVertAlignBottom (2), wdOMathVertAlignCenter (0), wdOMathVertAlignTop (1) """
    value__ = ...
    wdOMathVertAlignBottom: WdOMathVertAlignType = ...
    wdOMathVertAlignCenter: WdOMathVertAlignType = ...
    wdOMathVertAlignTop: WdOMathVertAlignType = ...


class WdOpenFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOpenFormat, values: wdOpenFormatAllWord (6), wdOpenFormatAllWordTemplates (13), wdOpenFormatAuto (0), wdOpenFormatDocument (1), wdOpenFormatDocument97 (1), wdOpenFormatEncodedText (5), wdOpenFormatOpenDocumentText (18), wdOpenFormatRTF (3), wdOpenFormatTemplate (2), wdOpenFormatTemplate97 (2), wdOpenFormatText (4), wdOpenFormatUnicodeText (5), wdOpenFormatWebPages (7), wdOpenFormatXML (8), wdOpenFormatXMLDocument (9), wdOpenFormatXMLDocumentMacroEnabled (10), wdOpenFormatXMLDocumentMacroEnabledSerialized (15), wdOpenFormatXMLDocumentSerialized (14), wdOpenFormatXMLTemplate (11), wdOpenFormatXMLTemplateMacroEnabled (12), wdOpenFormatXMLTemplateMacroEnabledSerialized (17), wdOpenFormatXMLTemplateSerialized (16) """
    value__ = ...
    wdOpenFormatAllWord: WdOpenFormat = ...
    wdOpenFormatAllWordTemplates: WdOpenFormat = ...
    wdOpenFormatAuto: WdOpenFormat = ...
    wdOpenFormatDocument: WdOpenFormat = ...
    wdOpenFormatDocument97: WdOpenFormat = ...
    wdOpenFormatEncodedText: WdOpenFormat = ...
    wdOpenFormatOpenDocumentText: WdOpenFormat = ...
    wdOpenFormatRTF: WdOpenFormat = ...
    wdOpenFormatTemplate: WdOpenFormat = ...
    wdOpenFormatTemplate97: WdOpenFormat = ...
    wdOpenFormatText: WdOpenFormat = ...
    wdOpenFormatUnicodeText: WdOpenFormat = ...
    wdOpenFormatWebPages: WdOpenFormat = ...
    wdOpenFormatXML: WdOpenFormat = ...
    wdOpenFormatXMLDocument: WdOpenFormat = ...
    wdOpenFormatXMLDocumentMacroEnabled: WdOpenFormat = ...
    wdOpenFormatXMLDocumentMacroEnabledSerialized: WdOpenFormat = ...
    wdOpenFormatXMLDocumentSerialized: WdOpenFormat = ...
    wdOpenFormatXMLTemplate: WdOpenFormat = ...
    wdOpenFormatXMLTemplateMacroEnabled: WdOpenFormat = ...
    wdOpenFormatXMLTemplateMacroEnabledSerialized: WdOpenFormat = ...
    wdOpenFormatXMLTemplateSerialized: WdOpenFormat = ...


class WdOrganizerObject(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOrganizerObject, values: wdOrganizerObjectAutoText (1), wdOrganizerObjectCommandBars (2), wdOrganizerObjectProjectItems (3), wdOrganizerObjectStyles (0) """
    value__ = ...
    wdOrganizerObjectAutoText: WdOrganizerObject = ...
    wdOrganizerObjectCommandBars: WdOrganizerObject = ...
    wdOrganizerObjectProjectItems: WdOrganizerObject = ...
    wdOrganizerObjectStyles: WdOrganizerObject = ...


class WdOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOrientation, values: wdOrientLandscape (1), wdOrientPortrait (0) """
    value__ = ...
    wdOrientLandscape: WdOrientation = ...
    wdOrientPortrait: WdOrientation = ...


class WdOriginalFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOriginalFormat, values: wdOriginalDocumentFormat (1), wdPromptUser (2), wdWordDocument (0) """
    value__ = ...
    wdOriginalDocumentFormat: WdOriginalFormat = ...
    wdPromptUser: WdOriginalFormat = ...
    wdWordDocument: WdOriginalFormat = ...


class WdOutlineLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdOutlineLevel, values: wdOutlineLevel1 (1), wdOutlineLevel2 (2), wdOutlineLevel3 (3), wdOutlineLevel4 (4), wdOutlineLevel5 (5), wdOutlineLevel6 (6), wdOutlineLevel7 (7), wdOutlineLevel8 (8), wdOutlineLevel9 (9), wdOutlineLevelBodyText (10) """
    value__ = ...
    wdOutlineLevel1: WdOutlineLevel = ...
    wdOutlineLevel2: WdOutlineLevel = ...
    wdOutlineLevel3: WdOutlineLevel = ...
    wdOutlineLevel4: WdOutlineLevel = ...
    wdOutlineLevel5: WdOutlineLevel = ...
    wdOutlineLevel6: WdOutlineLevel = ...
    wdOutlineLevel7: WdOutlineLevel = ...
    wdOutlineLevel8: WdOutlineLevel = ...
    wdOutlineLevel9: WdOutlineLevel = ...
    wdOutlineLevelBodyText: WdOutlineLevel = ...


class WdPageBorderArt(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPageBorderArt, values: wdArtApples (1), wdArtArchedScallops (97), wdArtBabyPacifier (70), wdArtBabyRattle (71), wdArtBalloons3Colors (11), wdArtBalloonsHotAir (12), wdArtBasicBlackDashes (155), wdArtBasicBlackDots (156), wdArtBasicBlackSquares (154), wdArtBasicThinLines (151), wdArtBasicWhiteDashes (152), wdArtBasicWhiteDots (147), wdArtBasicWhiteSquares (153), wdArtBasicWideInline (150), wdArtBasicWideMidline (148), wdArtBasicWideOutline (149), wdArtBats (37), wdArtBirds (102), wdArtBirdsFlight (35), wdArtCabins (72), wdArtCakeSlice (3), wdArtCandyCorn (4), wdArtCelticKnotwork (99), wdArtCertificateBanner (158), wdArtChainLink (128), wdArtChampagneBottle (6), wdArtCheckedBarBlack (145), wdArtCheckedBarColor (61), wdArtCheckered (144), wdArtChristmasTree (8), wdArtCirclesLines (91), wdArtCirclesRectangles (140), wdArtClassicalWave (56), wdArtClocks (27), wdArtCompass (54), wdArtConfetti (31), wdArtConfettiGrays (115), wdArtConfettiOutline (116), wdArtConfettiStreamers (14), wdArtConfettiWhite (117), wdArtCornerTriangles (141), wdArtCouponCutoutDashes (163), wdArtCouponCutoutDots (164), wdArtCrazyMaze (100), wdArtCreaturesButterfly (32), wdArtCreaturesFish (34), wdArtCreaturesInsects (142), wdArtCreaturesLadyBug (33), wdArtCrossStitch (138), wdArtCup (67), wdArtDecoArch (89), wdArtDecoArchColor (50), wdArtDecoBlocks (90), wdArtDiamondsGray (88), wdArtDoubleD (55), wdArtDoubleDiamonds (127), wdArtEarth1 (22), wdArtEarth2 (21), wdArtEclipsingSquares1 (101), wdArtEclipsingSquares2 (86), wdArtEggsBlack (66), wdArtFans (51), wdArtFilm (52), wdArtFirecrackers (28), wdArtFlowersBlockPrint (49), wdArtFlowersDaisies (48), wdArtFlowersModern1 (45), wdArtFlowersModern2 (44), wdArtFlowersPansy (43), wdArtFlowersRedRose (39), wdArtFlowersRoses (38), wdArtFlowersTeacup (103), wdArtFlowersTiny (42), wdArtGems (139), wdArtGingerbreadMan (69), wdArtGradient (122), wdArtHandmade1 (159), wdArtHandmade2 (160), wdArtHeartBalloon (16), wdArtHeartGray (68), wdArtHearts (15), wdArtHeebieJeebies (120), wdArtHolly (41), wdArtHouseFunky (73), wdArtHypnotic (87), wdArtIceCreamCones (5), wdArtLightBulb (121), wdArtLightning1 (53), wdArtLightning2 (119), wdArtMapleLeaf (81), wdArtMapleMuffins (2), wdArtMapPins (30), wdArtMarquee (146), wdArtMarqueeToothed (131), wdArtMoons (125), wdArtMosaic (118), wdArtMusicNotes (79), wdArtNorthwest (104), wdArtOvals (126), wdArtPackages (26), wdArtPalmsBlack (80), wdArtPalmsColor (10), wdArtPaperClips (82), wdArtPapyrus (92), wdArtPartyFavor (13), wdArtPartyGlass (7), wdArtPencils (25), wdArtPeople (84), wdArtPeopleHats (23), wdArtPeopleWaving (85), wdArtPoinsettias (40), wdArtPostageStamp (135), wdArtPumpkin1 (65), wdArtPushPinNote1 (63), wdArtPushPinNote2 (64), wdArtPyramids (113), wdArtPyramidsAbove (114), wdArtQuadrants (60), wdArtRings (29), wdArtSafari (98), wdArtSawtooth (133), wdArtSawtoothGray (134), wdArtScaredCat (36), wdArtSeattle (78), wdArtShadowedSquares (57), wdArtSharksTeeth (132), wdArtShorebirdTracks (83), wdArtSkyrocket (77), wdArtSnowflakeFancy (76), wdArtSnowflakes (75), wdArtSombrero (24), wdArtSouthwest (105), wdArtStars (19), wdArtStars3D (17), wdArtStarsBlack (74), wdArtStarsShadowed (18), wdArtStarsTop (157), wdArtSun (20), wdArtSwirligig (62), wdArtTornPaper (161), wdArtTornPaperBlack (162), wdArtTrees (9), wdArtTriangleParty (123), wdArtTriangles (129), wdArtTribal1 (130), wdArtTribal2 (109), wdArtTribal3 (108), wdArtTribal4 (107), wdArtTribal5 (110), wdArtTribal6 (106), wdArtTwistedLines1 (58), wdArtTwistedLines2 (124), wdArtVine (47), wdArtWaveline (59), wdArtWeavingAngles (96), wdArtWeavingBraid (94), wdArtWeavingRibbon (95), wdArtWeavingStrips (136), wdArtWhiteFlowers (46), wdArtWoodwork (93), wdArtXIllusions (111), wdArtZanyTriangles (112), wdArtZigZag (137), wdArtZigZagStitch (143) """
    value__ = ...
    wdArtApples: WdPageBorderArt = ...
    wdArtArchedScallops: WdPageBorderArt = ...
    wdArtBabyPacifier: WdPageBorderArt = ...
    wdArtBabyRattle: WdPageBorderArt = ...
    wdArtBalloons3Colors: WdPageBorderArt = ...
    wdArtBalloonsHotAir: WdPageBorderArt = ...
    wdArtBasicBlackDashes: WdPageBorderArt = ...
    wdArtBasicBlackDots: WdPageBorderArt = ...
    wdArtBasicBlackSquares: WdPageBorderArt = ...
    wdArtBasicThinLines: WdPageBorderArt = ...
    wdArtBasicWhiteDashes: WdPageBorderArt = ...
    wdArtBasicWhiteDots: WdPageBorderArt = ...
    wdArtBasicWhiteSquares: WdPageBorderArt = ...
    wdArtBasicWideInline: WdPageBorderArt = ...
    wdArtBasicWideMidline: WdPageBorderArt = ...
    wdArtBasicWideOutline: WdPageBorderArt = ...
    wdArtBats: WdPageBorderArt = ...
    wdArtBirds: WdPageBorderArt = ...
    wdArtBirdsFlight: WdPageBorderArt = ...
    wdArtCabins: WdPageBorderArt = ...
    wdArtCakeSlice: WdPageBorderArt = ...
    wdArtCandyCorn: WdPageBorderArt = ...
    wdArtCelticKnotwork: WdPageBorderArt = ...
    wdArtCertificateBanner: WdPageBorderArt = ...
    wdArtChainLink: WdPageBorderArt = ...
    wdArtChampagneBottle: WdPageBorderArt = ...
    wdArtCheckedBarBlack: WdPageBorderArt = ...
    wdArtCheckedBarColor: WdPageBorderArt = ...
    wdArtCheckered: WdPageBorderArt = ...
    wdArtChristmasTree: WdPageBorderArt = ...
    wdArtCirclesLines: WdPageBorderArt = ...
    wdArtCirclesRectangles: WdPageBorderArt = ...
    wdArtClassicalWave: WdPageBorderArt = ...
    wdArtClocks: WdPageBorderArt = ...
    wdArtCompass: WdPageBorderArt = ...
    wdArtConfetti: WdPageBorderArt = ...
    wdArtConfettiGrays: WdPageBorderArt = ...
    wdArtConfettiOutline: WdPageBorderArt = ...
    wdArtConfettiStreamers: WdPageBorderArt = ...
    wdArtConfettiWhite: WdPageBorderArt = ...
    wdArtCornerTriangles: WdPageBorderArt = ...
    wdArtCouponCutoutDashes: WdPageBorderArt = ...
    wdArtCouponCutoutDots: WdPageBorderArt = ...
    wdArtCrazyMaze: WdPageBorderArt = ...
    wdArtCreaturesButterfly: WdPageBorderArt = ...
    wdArtCreaturesFish: WdPageBorderArt = ...
    wdArtCreaturesInsects: WdPageBorderArt = ...
    wdArtCreaturesLadyBug: WdPageBorderArt = ...
    wdArtCrossStitch: WdPageBorderArt = ...
    wdArtCup: WdPageBorderArt = ...
    wdArtDecoArch: WdPageBorderArt = ...
    wdArtDecoArchColor: WdPageBorderArt = ...
    wdArtDecoBlocks: WdPageBorderArt = ...
    wdArtDiamondsGray: WdPageBorderArt = ...
    wdArtDoubleD: WdPageBorderArt = ...
    wdArtDoubleDiamonds: WdPageBorderArt = ...
    wdArtEarth1: WdPageBorderArt = ...
    wdArtEarth2: WdPageBorderArt = ...
    wdArtEclipsingSquares1: WdPageBorderArt = ...
    wdArtEclipsingSquares2: WdPageBorderArt = ...
    wdArtEggsBlack: WdPageBorderArt = ...
    wdArtFans: WdPageBorderArt = ...
    wdArtFilm: WdPageBorderArt = ...
    wdArtFirecrackers: WdPageBorderArt = ...
    wdArtFlowersBlockPrint: WdPageBorderArt = ...
    wdArtFlowersDaisies: WdPageBorderArt = ...
    wdArtFlowersModern1: WdPageBorderArt = ...
    wdArtFlowersModern2: WdPageBorderArt = ...
    wdArtFlowersPansy: WdPageBorderArt = ...
    wdArtFlowersRedRose: WdPageBorderArt = ...
    wdArtFlowersRoses: WdPageBorderArt = ...
    wdArtFlowersTeacup: WdPageBorderArt = ...
    wdArtFlowersTiny: WdPageBorderArt = ...
    wdArtGems: WdPageBorderArt = ...
    wdArtGingerbreadMan: WdPageBorderArt = ...
    wdArtGradient: WdPageBorderArt = ...
    wdArtHandmade1: WdPageBorderArt = ...
    wdArtHandmade2: WdPageBorderArt = ...
    wdArtHeartBalloon: WdPageBorderArt = ...
    wdArtHeartGray: WdPageBorderArt = ...
    wdArtHearts: WdPageBorderArt = ...
    wdArtHeebieJeebies: WdPageBorderArt = ...
    wdArtHolly: WdPageBorderArt = ...
    wdArtHouseFunky: WdPageBorderArt = ...
    wdArtHypnotic: WdPageBorderArt = ...
    wdArtIceCreamCones: WdPageBorderArt = ...
    wdArtLightBulb: WdPageBorderArt = ...
    wdArtLightning1: WdPageBorderArt = ...
    wdArtLightning2: WdPageBorderArt = ...
    wdArtMapleLeaf: WdPageBorderArt = ...
    wdArtMapleMuffins: WdPageBorderArt = ...
    wdArtMapPins: WdPageBorderArt = ...
    wdArtMarquee: WdPageBorderArt = ...
    wdArtMarqueeToothed: WdPageBorderArt = ...
    wdArtMoons: WdPageBorderArt = ...
    wdArtMosaic: WdPageBorderArt = ...
    wdArtMusicNotes: WdPageBorderArt = ...
    wdArtNorthwest: WdPageBorderArt = ...
    wdArtOvals: WdPageBorderArt = ...
    wdArtPackages: WdPageBorderArt = ...
    wdArtPalmsBlack: WdPageBorderArt = ...
    wdArtPalmsColor: WdPageBorderArt = ...
    wdArtPaperClips: WdPageBorderArt = ...
    wdArtPapyrus: WdPageBorderArt = ...
    wdArtPartyFavor: WdPageBorderArt = ...
    wdArtPartyGlass: WdPageBorderArt = ...
    wdArtPencils: WdPageBorderArt = ...
    wdArtPeople: WdPageBorderArt = ...
    wdArtPeopleHats: WdPageBorderArt = ...
    wdArtPeopleWaving: WdPageBorderArt = ...
    wdArtPoinsettias: WdPageBorderArt = ...
    wdArtPostageStamp: WdPageBorderArt = ...
    wdArtPumpkin1: WdPageBorderArt = ...
    wdArtPushPinNote1: WdPageBorderArt = ...
    wdArtPushPinNote2: WdPageBorderArt = ...
    wdArtPyramids: WdPageBorderArt = ...
    wdArtPyramidsAbove: WdPageBorderArt = ...
    wdArtQuadrants: WdPageBorderArt = ...
    wdArtRings: WdPageBorderArt = ...
    wdArtSafari: WdPageBorderArt = ...
    wdArtSawtooth: WdPageBorderArt = ...
    wdArtSawtoothGray: WdPageBorderArt = ...
    wdArtScaredCat: WdPageBorderArt = ...
    wdArtSeattle: WdPageBorderArt = ...
    wdArtShadowedSquares: WdPageBorderArt = ...
    wdArtSharksTeeth: WdPageBorderArt = ...
    wdArtShorebirdTracks: WdPageBorderArt = ...
    wdArtSkyrocket: WdPageBorderArt = ...
    wdArtSnowflakeFancy: WdPageBorderArt = ...
    wdArtSnowflakes: WdPageBorderArt = ...
    wdArtSombrero: WdPageBorderArt = ...
    wdArtSouthwest: WdPageBorderArt = ...
    wdArtStars: WdPageBorderArt = ...
    wdArtStars3D: WdPageBorderArt = ...
    wdArtStarsBlack: WdPageBorderArt = ...
    wdArtStarsShadowed: WdPageBorderArt = ...
    wdArtStarsTop: WdPageBorderArt = ...
    wdArtSun: WdPageBorderArt = ...
    wdArtSwirligig: WdPageBorderArt = ...
    wdArtTornPaper: WdPageBorderArt = ...
    wdArtTornPaperBlack: WdPageBorderArt = ...
    wdArtTrees: WdPageBorderArt = ...
    wdArtTriangleParty: WdPageBorderArt = ...
    wdArtTriangles: WdPageBorderArt = ...
    wdArtTribal1: WdPageBorderArt = ...
    wdArtTribal2: WdPageBorderArt = ...
    wdArtTribal3: WdPageBorderArt = ...
    wdArtTribal4: WdPageBorderArt = ...
    wdArtTribal5: WdPageBorderArt = ...
    wdArtTribal6: WdPageBorderArt = ...
    wdArtTwistedLines1: WdPageBorderArt = ...
    wdArtTwistedLines2: WdPageBorderArt = ...
    wdArtVine: WdPageBorderArt = ...
    wdArtWaveline: WdPageBorderArt = ...
    wdArtWeavingAngles: WdPageBorderArt = ...
    wdArtWeavingBraid: WdPageBorderArt = ...
    wdArtWeavingRibbon: WdPageBorderArt = ...
    wdArtWeavingStrips: WdPageBorderArt = ...
    wdArtWhiteFlowers: WdPageBorderArt = ...
    wdArtWoodwork: WdPageBorderArt = ...
    wdArtXIllusions: WdPageBorderArt = ...
    wdArtZanyTriangles: WdPageBorderArt = ...
    wdArtZigZag: WdPageBorderArt = ...
    wdArtZigZagStitch: WdPageBorderArt = ...


class WdPageColor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPageColor, values: wdPageColorInverse (2), wdPageColorNone (0), wdPageColorSepia (1) """
    value__ = ...
    wdPageColorInverse: WdPageColor = ...
    wdPageColorNone: WdPageColor = ...
    wdPageColorSepia: WdPageColor = ...


class WdPageFit(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPageFit, values: wdPageFitBestFit (2), wdPageFitFullPage (1), wdPageFitNone (0), wdPageFitTextFit (3) """
    value__ = ...
    wdPageFitBestFit: WdPageFit = ...
    wdPageFitFullPage: WdPageFit = ...
    wdPageFitNone: WdPageFit = ...
    wdPageFitTextFit: WdPageFit = ...


class WdPageNumberAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPageNumberAlignment, values: wdAlignPageNumberCenter (1), wdAlignPageNumberInside (3), wdAlignPageNumberLeft (0), wdAlignPageNumberOutside (4), wdAlignPageNumberRight (2) """
    value__ = ...
    wdAlignPageNumberCenter: WdPageNumberAlignment = ...
    wdAlignPageNumberInside: WdPageNumberAlignment = ...
    wdAlignPageNumberLeft: WdPageNumberAlignment = ...
    wdAlignPageNumberOutside: WdPageNumberAlignment = ...
    wdAlignPageNumberRight: WdPageNumberAlignment = ...


class WdPageNumberStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPageNumberStyle, values: wdPageNumberStyleArabic (0), wdPageNumberStyleArabicFullWidth (14), wdPageNumberStyleArabicLetter1 (46), wdPageNumberStyleArabicLetter2 (48), wdPageNumberStyleHanjaRead (41), wdPageNumberStyleHanjaReadDigit (42), wdPageNumberStyleHebrewLetter1 (45), wdPageNumberStyleHebrewLetter2 (47), wdPageNumberStyleHindiArabic (51), wdPageNumberStyleHindiCardinalText (52), wdPageNumberStyleHindiLetter1 (49), wdPageNumberStyleHindiLetter2 (50), wdPageNumberStyleKanji (10), wdPageNumberStyleKanjiDigit (11), wdPageNumberStyleKanjiTraditional (16), wdPageNumberStyleLowercaseLetter (4), wdPageNumberStyleLowercaseRoman (2), wdPageNumberStyleNumberInCircle (18), wdPageNumberStyleNumberInDash (57), wdPageNumberStyleSimpChinNum1 (37), wdPageNumberStyleSimpChinNum2 (38), wdPageNumberStyleThaiArabic (54), wdPageNumberStyleThaiCardinalText (55), wdPageNumberStyleThaiLetter (53), wdPageNumberStyleTradChinNum1 (33), wdPageNumberStyleTradChinNum2 (34), wdPageNumberStyleUppercaseLetter (3), wdPageNumberStyleUppercaseRoman (1), wdPageNumberStyleVietCardinalText (56) """
    value__ = ...
    wdPageNumberStyleArabic: WdPageNumberStyle = ...
    wdPageNumberStyleArabicFullWidth: WdPageNumberStyle = ...
    wdPageNumberStyleArabicLetter1: WdPageNumberStyle = ...
    wdPageNumberStyleArabicLetter2: WdPageNumberStyle = ...
    wdPageNumberStyleHanjaRead: WdPageNumberStyle = ...
    wdPageNumberStyleHanjaReadDigit: WdPageNumberStyle = ...
    wdPageNumberStyleHebrewLetter1: WdPageNumberStyle = ...
    wdPageNumberStyleHebrewLetter2: WdPageNumberStyle = ...
    wdPageNumberStyleHindiArabic: WdPageNumberStyle = ...
    wdPageNumberStyleHindiCardinalText: WdPageNumberStyle = ...
    wdPageNumberStyleHindiLetter1: WdPageNumberStyle = ...
    wdPageNumberStyleHindiLetter2: WdPageNumberStyle = ...
    wdPageNumberStyleKanji: WdPageNumberStyle = ...
    wdPageNumberStyleKanjiDigit: WdPageNumberStyle = ...
    wdPageNumberStyleKanjiTraditional: WdPageNumberStyle = ...
    wdPageNumberStyleLowercaseLetter: WdPageNumberStyle = ...
    wdPageNumberStyleLowercaseRoman: WdPageNumberStyle = ...
    wdPageNumberStyleNumberInCircle: WdPageNumberStyle = ...
    wdPageNumberStyleNumberInDash: WdPageNumberStyle = ...
    wdPageNumberStyleSimpChinNum1: WdPageNumberStyle = ...
    wdPageNumberStyleSimpChinNum2: WdPageNumberStyle = ...
    wdPageNumberStyleThaiArabic: WdPageNumberStyle = ...
    wdPageNumberStyleThaiCardinalText: WdPageNumberStyle = ...
    wdPageNumberStyleThaiLetter: WdPageNumberStyle = ...
    wdPageNumberStyleTradChinNum1: WdPageNumberStyle = ...
    wdPageNumberStyleTradChinNum2: WdPageNumberStyle = ...
    wdPageNumberStyleUppercaseLetter: WdPageNumberStyle = ...
    wdPageNumberStyleUppercaseRoman: WdPageNumberStyle = ...
    wdPageNumberStyleVietCardinalText: WdPageNumberStyle = ...


class WdPageNumberStyleHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPageNumberStyleHID, values: emptyenum (0) """
    emptyenum: WdPageNumberStyleHID = ...
    value__ = ...


class WdPaperSize(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPaperSize, values: wdPaper10x14 (0), wdPaper11x17 (1), wdPaperA3 (6), wdPaperA4 (7), wdPaperA4Small (8), wdPaperA5 (9), wdPaperB4 (10), wdPaperB5 (11), wdPaperCSheet (12), wdPaperCustom (41), wdPaperDSheet (13), wdPaperEnvelope10 (25), wdPaperEnvelope11 (26), wdPaperEnvelope12 (27), wdPaperEnvelope14 (28), wdPaperEnvelope9 (24), wdPaperEnvelopeB4 (29), wdPaperEnvelopeB5 (30), wdPaperEnvelopeB6 (31), wdPaperEnvelopeC3 (32), wdPaperEnvelopeC4 (33), wdPaperEnvelopeC5 (34), wdPaperEnvelopeC6 (35), wdPaperEnvelopeC65 (36), wdPaperEnvelopeDL (37), wdPaperEnvelopeItaly (38), wdPaperEnvelopeMonarch (39), wdPaperEnvelopePersonal (40), wdPaperESheet (14), wdPaperExecutive (5), wdPaperFanfoldLegalGerman (15), wdPaperFanfoldStdGerman (16), wdPaperFanfoldUS (17), wdPaperFolio (18), wdPaperLedger (19), wdPaperLegal (4), wdPaperLetter (2), wdPaperLetterSmall (3), wdPaperNote (20), wdPaperQuarto (21), wdPaperStatement (22), wdPaperTabloid (23) """
    value__ = ...
    wdPaper10x14: WdPaperSize = ...
    wdPaper11x17: WdPaperSize = ...
    wdPaperA3: WdPaperSize = ...
    wdPaperA4: WdPaperSize = ...
    wdPaperA4Small: WdPaperSize = ...
    wdPaperA5: WdPaperSize = ...
    wdPaperB4: WdPaperSize = ...
    wdPaperB5: WdPaperSize = ...
    wdPaperCSheet: WdPaperSize = ...
    wdPaperCustom: WdPaperSize = ...
    wdPaperDSheet: WdPaperSize = ...
    wdPaperEnvelope10: WdPaperSize = ...
    wdPaperEnvelope11: WdPaperSize = ...
    wdPaperEnvelope12: WdPaperSize = ...
    wdPaperEnvelope14: WdPaperSize = ...
    wdPaperEnvelope9: WdPaperSize = ...
    wdPaperEnvelopeB4: WdPaperSize = ...
    wdPaperEnvelopeB5: WdPaperSize = ...
    wdPaperEnvelopeB6: WdPaperSize = ...
    wdPaperEnvelopeC3: WdPaperSize = ...
    wdPaperEnvelopeC4: WdPaperSize = ...
    wdPaperEnvelopeC5: WdPaperSize = ...
    wdPaperEnvelopeC6: WdPaperSize = ...
    wdPaperEnvelopeC65: WdPaperSize = ...
    wdPaperEnvelopeDL: WdPaperSize = ...
    wdPaperEnvelopeItaly: WdPaperSize = ...
    wdPaperEnvelopeMonarch: WdPaperSize = ...
    wdPaperEnvelopePersonal: WdPaperSize = ...
    wdPaperESheet: WdPaperSize = ...
    wdPaperExecutive: WdPaperSize = ...
    wdPaperFanfoldLegalGerman: WdPaperSize = ...
    wdPaperFanfoldStdGerman: WdPaperSize = ...
    wdPaperFanfoldUS: WdPaperSize = ...
    wdPaperFolio: WdPaperSize = ...
    wdPaperLedger: WdPaperSize = ...
    wdPaperLegal: WdPaperSize = ...
    wdPaperLetter: WdPaperSize = ...
    wdPaperLetterSmall: WdPaperSize = ...
    wdPaperNote: WdPaperSize = ...
    wdPaperQuarto: WdPaperSize = ...
    wdPaperStatement: WdPaperSize = ...
    wdPaperTabloid: WdPaperSize = ...


class WdPaperTray(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPaperTray, values: wdPrinterAutomaticSheetFeed (7), wdPrinterDefaultBin (0), wdPrinterEnvelopeFeed (5), wdPrinterFormSource (15), wdPrinterLargeCapacityBin (11), wdPrinterLargeFormatBin (10), wdPrinterLowerBin (2), wdPrinterManualEnvelopeFeed (6), wdPrinterManualFeed (4), wdPrinterMiddleBin (3), wdPrinterOnlyBin (1), wdPrinterPaperCassette (14), wdPrinterSmallFormatBin (9), wdPrinterTractorFeed (8), wdPrinterUpperBin (1) """
    value__ = ...
    wdPrinterAutomaticSheetFeed: WdPaperTray = ...
    wdPrinterDefaultBin: WdPaperTray = ...
    wdPrinterEnvelopeFeed: WdPaperTray = ...
    wdPrinterFormSource: WdPaperTray = ...
    wdPrinterLargeCapacityBin: WdPaperTray = ...
    wdPrinterLargeFormatBin: WdPaperTray = ...
    wdPrinterLowerBin: WdPaperTray = ...
    wdPrinterManualEnvelopeFeed: WdPaperTray = ...
    wdPrinterManualFeed: WdPaperTray = ...
    wdPrinterMiddleBin: WdPaperTray = ...
    wdPrinterOnlyBin: WdPaperTray = ...
    wdPrinterPaperCassette: WdPaperTray = ...
    wdPrinterSmallFormatBin: WdPaperTray = ...
    wdPrinterTractorFeed: WdPaperTray = ...
    wdPrinterUpperBin: WdPaperTray = ...


class WdParagraphAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdParagraphAlignment, values: wdAlignParagraphCenter (1), wdAlignParagraphDistribute (4), wdAlignParagraphJustify (3), wdAlignParagraphJustifyHi (7), wdAlignParagraphJustifyLow (8), wdAlignParagraphJustifyMed (5), wdAlignParagraphLeft (0), wdAlignParagraphRight (2), wdAlignParagraphThaiJustify (9) """
    value__ = ...
    wdAlignParagraphCenter: WdParagraphAlignment = ...
    wdAlignParagraphDistribute: WdParagraphAlignment = ...
    wdAlignParagraphJustify: WdParagraphAlignment = ...
    wdAlignParagraphJustifyHi: WdParagraphAlignment = ...
    wdAlignParagraphJustifyLow: WdParagraphAlignment = ...
    wdAlignParagraphJustifyMed: WdParagraphAlignment = ...
    wdAlignParagraphLeft: WdParagraphAlignment = ...
    wdAlignParagraphRight: WdParagraphAlignment = ...
    wdAlignParagraphThaiJustify: WdParagraphAlignment = ...


class WdParagraphAlignmentHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdParagraphAlignmentHID, values: emptyenum (0) """
    emptyenum: WdParagraphAlignmentHID = ...
    value__ = ...


class WdPartOfSpeech(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPartOfSpeech, values: wdAdjective (0), wdAdverb (2), wdConjunction (5), wdIdiom (8), wdInterjection (7), wdNoun (1), wdOther (9), wdPreposition (6), wdPronoun (4), wdVerb (3) """
    value__ = ...
    wdAdjective: WdPartOfSpeech = ...
    wdAdverb: WdPartOfSpeech = ...
    wdConjunction: WdPartOfSpeech = ...
    wdIdiom: WdPartOfSpeech = ...
    wdInterjection: WdPartOfSpeech = ...
    wdNoun: WdPartOfSpeech = ...
    wdOther: WdPartOfSpeech = ...
    wdPreposition: WdPartOfSpeech = ...
    wdPronoun: WdPartOfSpeech = ...
    wdVerb: WdPartOfSpeech = ...


class WdPasteDataType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPasteDataType, values: wdPasteBitmap (4), wdPasteDeviceIndependentBitmap (5), wdPasteEnhancedMetafile (9), wdPasteHTML (10), wdPasteHyperlink (7), wdPasteMetafilePicture (3), wdPasteOLEObject (0), wdPasteRTF (1), wdPasteShape (8), wdPasteText (2) """
    value__ = ...
    wdPasteBitmap: WdPasteDataType = ...
    wdPasteDeviceIndependentBitmap: WdPasteDataType = ...
    wdPasteEnhancedMetafile: WdPasteDataType = ...
    wdPasteHTML: WdPasteDataType = ...
    wdPasteHyperlink: WdPasteDataType = ...
    wdPasteMetafilePicture: WdPasteDataType = ...
    wdPasteOLEObject: WdPasteDataType = ...
    wdPasteRTF: WdPasteDataType = ...
    wdPasteShape: WdPasteDataType = ...
    wdPasteText: WdPasteDataType = ...


class WdPasteOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPasteOptions, values: wdKeepSourceFormatting (0), wdKeepTextOnly (2), wdMatchDestinationFormatting (1), wdUseDestinationStyles (3) """
    value__ = ...
    wdKeepSourceFormatting: WdPasteOptions = ...
    wdKeepTextOnly: WdPasteOptions = ...
    wdMatchDestinationFormatting: WdPasteOptions = ...
    wdUseDestinationStyles: WdPasteOptions = ...


class WdPhoneticGuideAlignmentType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPhoneticGuideAlignmentType, values: wdPhoneticGuideAlignmentCenter (0), wdPhoneticGuideAlignmentLeft (3), wdPhoneticGuideAlignmentOneTwoOne (2), wdPhoneticGuideAlignmentRight (4), wdPhoneticGuideAlignmentRightVertical (5), wdPhoneticGuideAlignmentZeroOneZero (1) """
    value__ = ...
    wdPhoneticGuideAlignmentCenter: WdPhoneticGuideAlignmentType = ...
    wdPhoneticGuideAlignmentLeft: WdPhoneticGuideAlignmentType = ...
    wdPhoneticGuideAlignmentOneTwoOne: WdPhoneticGuideAlignmentType = ...
    wdPhoneticGuideAlignmentRight: WdPhoneticGuideAlignmentType = ...
    wdPhoneticGuideAlignmentRightVertical: WdPhoneticGuideAlignmentType = ...
    wdPhoneticGuideAlignmentZeroOneZero: WdPhoneticGuideAlignmentType = ...


class WdPictureLinkType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPictureLinkType, values: wdLinkDataInDoc (1), wdLinkDataOnDisk (2), wdLinkNone (0) """
    value__ = ...
    wdLinkDataInDoc: WdPictureLinkType = ...
    wdLinkDataOnDisk: WdPictureLinkType = ...
    wdLinkNone: WdPictureLinkType = ...


class WdPortugueseReform(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPortugueseReform, values: wdPortugueseBoth (3), wdPortuguesePostReform (2), wdPortuguesePreReform (1) """
    value__ = ...
    wdPortugueseBoth: WdPortugueseReform = ...
    wdPortuguesePostReform: WdPortugueseReform = ...
    wdPortuguesePreReform: WdPortugueseReform = ...


class WdPreferredWidthType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPreferredWidthType, values: wdPreferredWidthAuto (1), wdPreferredWidthPercent (2), wdPreferredWidthPoints (3) """
    value__ = ...
    wdPreferredWidthAuto: WdPreferredWidthType = ...
    wdPreferredWidthPercent: WdPreferredWidthType = ...
    wdPreferredWidthPoints: WdPreferredWidthType = ...


class WdPrintOutItem(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPrintOutItem, values: wdPrintAutoTextEntries (4), wdPrintComments (2), wdPrintDocumentContent (0), wdPrintDocumentWithMarkup (7), wdPrintEnvelope (6), wdPrintKeyAssignments (5), wdPrintMarkup (2), wdPrintProperties (1), wdPrintStyles (3) """
    value__ = ...
    wdPrintAutoTextEntries: WdPrintOutItem = ...
    wdPrintComments: WdPrintOutItem = ...
    wdPrintDocumentContent: WdPrintOutItem = ...
    wdPrintDocumentWithMarkup: WdPrintOutItem = ...
    wdPrintEnvelope: WdPrintOutItem = ...
    wdPrintKeyAssignments: WdPrintOutItem = ...
    wdPrintMarkup: WdPrintOutItem = ...
    wdPrintProperties: WdPrintOutItem = ...
    wdPrintStyles: WdPrintOutItem = ...


class WdPrintOutPages(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPrintOutPages, values: wdPrintAllPages (0), wdPrintEvenPagesOnly (2), wdPrintOddPagesOnly (1) """
    value__ = ...
    wdPrintAllPages: WdPrintOutPages = ...
    wdPrintEvenPagesOnly: WdPrintOutPages = ...
    wdPrintOddPagesOnly: WdPrintOutPages = ...


class WdPrintOutRange(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdPrintOutRange, values: wdPrintAllDocument (0), wdPrintCurrentPage (2), wdPrintFromTo (3), wdPrintRangeOfPages (4), wdPrintSelection (1) """
    value__ = ...
    wdPrintAllDocument: WdPrintOutRange = ...
    wdPrintCurrentPage: WdPrintOutRange = ...
    wdPrintFromTo: WdPrintOutRange = ...
    wdPrintRangeOfPages: WdPrintOutRange = ...
    wdPrintSelection: WdPrintOutRange = ...


class WdProofreadingErrorType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdProofreadingErrorType, values: wdGrammaticalError (1), wdSpellingError (0) """
    value__ = ...
    wdGrammaticalError: WdProofreadingErrorType = ...
    wdSpellingError: WdProofreadingErrorType = ...


class WdProtectedViewCloseReason(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdProtectedViewCloseReason, values: wdProtectedViewCloseEdit (1), wdProtectedViewCloseForced (2), wdProtectedViewCloseNormal (0) """
    value__ = ...
    wdProtectedViewCloseEdit: WdProtectedViewCloseReason = ...
    wdProtectedViewCloseForced: WdProtectedViewCloseReason = ...
    wdProtectedViewCloseNormal: WdProtectedViewCloseReason = ...


class WdProtectionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdProtectionType, values: wdAllowOnlyComments (1), wdAllowOnlyFormFields (2), wdAllowOnlyReading (3), wdAllowOnlyRevisions (0), wdNoProtection (-1) """
    value__ = ...
    wdAllowOnlyComments: WdProtectionType = ...
    wdAllowOnlyFormFields: WdProtectionType = ...
    wdAllowOnlyReading: WdProtectionType = ...
    wdAllowOnlyRevisions: WdProtectionType = ...
    wdNoProtection: WdProtectionType = ...


class WdReadingLayoutMargin(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdReadingLayoutMargin, values: wdAutomaticMargin (0), wdFullMargin (2), wdSuppressMargin (1) """
    value__ = ...
    wdAutomaticMargin: WdReadingLayoutMargin = ...
    wdFullMargin: WdReadingLayoutMargin = ...
    wdSuppressMargin: WdReadingLayoutMargin = ...


class WdReadingOrder(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdReadingOrder, values: wdReadingOrderLtr (1), wdReadingOrderRtl (0) """
    value__ = ...
    wdReadingOrderLtr: WdReadingOrder = ...
    wdReadingOrderRtl: WdReadingOrder = ...


class WdRecoveryType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRecoveryType, values: wdChart (14), wdChartLinked (15), wdChartPicture (13), wdFormatOriginalFormatting (16), wdFormatPlainText (22), wdFormatSurroundingFormattingWithEmphasis (20), wdListCombineWithExistingList (24), wdListContinueNumbering (7), wdListDontMerge (25), wdListRestartNumbering (8), wdPasteDefault (0), wdSingleCellTable (6), wdSingleCellText (5), wdTableAppendTable (10), wdTableInsertAsRows (11), wdTableOriginalFormatting (12), wdTableOverwriteCells (23), wdUseDestinationStylesRecovery (19) """
    value__ = ...
    wdChart: WdRecoveryType = ...
    wdChartLinked: WdRecoveryType = ...
    wdChartPicture: WdRecoveryType = ...
    wdFormatOriginalFormatting: WdRecoveryType = ...
    wdFormatPlainText: WdRecoveryType = ...
    wdFormatSurroundingFormattingWithEmphasis: WdRecoveryType = ...
    wdListCombineWithExistingList: WdRecoveryType = ...
    wdListContinueNumbering: WdRecoveryType = ...
    wdListDontMerge: WdRecoveryType = ...
    wdListRestartNumbering: WdRecoveryType = ...
    wdPasteDefault: WdRecoveryType = ...
    wdSingleCellTable: WdRecoveryType = ...
    wdSingleCellText: WdRecoveryType = ...
    wdTableAppendTable: WdRecoveryType = ...
    wdTableInsertAsRows: WdRecoveryType = ...
    wdTableOriginalFormatting: WdRecoveryType = ...
    wdTableOverwriteCells: WdRecoveryType = ...
    wdUseDestinationStylesRecovery: WdRecoveryType = ...


class WdRectangleType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRectangleType, values: wdDocumentControlRectangle (13), wdLineBetweenColumnRectangle (5), wdMailNavArea (12), wdMarkupRectangle (2), wdMarkupRectangleArea (8), wdMarkupRectangleButton (3), wdMarkupRectangleMoveMatch (10), wdPageBorderRectangle (4), wdReadingModeNavigation (9), wdReadingModePanningArea (11), wdSelection (6), wdShapeRectangle (1), wdSystem (7), wdTextRectangle (0) """
    value__ = ...
    wdDocumentControlRectangle: WdRectangleType = ...
    wdLineBetweenColumnRectangle: WdRectangleType = ...
    wdMailNavArea: WdRectangleType = ...
    wdMarkupRectangle: WdRectangleType = ...
    wdMarkupRectangleArea: WdRectangleType = ...
    wdMarkupRectangleButton: WdRectangleType = ...
    wdMarkupRectangleMoveMatch: WdRectangleType = ...
    wdPageBorderRectangle: WdRectangleType = ...
    wdReadingModeNavigation: WdRectangleType = ...
    wdReadingModePanningArea: WdRectangleType = ...
    wdSelection: WdRectangleType = ...
    wdShapeRectangle: WdRectangleType = ...
    wdSystem: WdRectangleType = ...
    wdTextRectangle: WdRectangleType = ...


class WdReferenceKind(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdReferenceKind, values: wdContentText (-1), wdEndnoteNumber (6), wdEndnoteNumberFormatted (17), wdEntireCaption (2), wdFootnoteNumber (5), wdFootnoteNumberFormatted (16), wdNumberFullContext (-4), wdNumberNoContext (-3), wdNumberRelativeContext (-2), wdOnlyCaptionText (4), wdOnlyLabelAndNumber (3), wdPageNumber (7), wdPosition (15) """
    value__ = ...
    wdContentText: WdReferenceKind = ...
    wdEndnoteNumber: WdReferenceKind = ...
    wdEndnoteNumberFormatted: WdReferenceKind = ...
    wdEntireCaption: WdReferenceKind = ...
    wdFootnoteNumber: WdReferenceKind = ...
    wdFootnoteNumberFormatted: WdReferenceKind = ...
    wdNumberFullContext: WdReferenceKind = ...
    wdNumberNoContext: WdReferenceKind = ...
    wdNumberRelativeContext: WdReferenceKind = ...
    wdOnlyCaptionText: WdReferenceKind = ...
    wdOnlyLabelAndNumber: WdReferenceKind = ...
    wdPageNumber: WdReferenceKind = ...
    wdPosition: WdReferenceKind = ...


class WdReferenceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdReferenceType, values: wdRefTypeBookmark (2), wdRefTypeEndnote (4), wdRefTypeFootnote (3), wdRefTypeHeading (1), wdRefTypeNumberedItem (0) """
    value__ = ...
    wdRefTypeBookmark: WdReferenceType = ...
    wdRefTypeEndnote: WdReferenceType = ...
    wdRefTypeFootnote: WdReferenceType = ...
    wdRefTypeHeading: WdReferenceType = ...
    wdRefTypeNumberedItem: WdReferenceType = ...


class WdRelativeHorizontalPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRelativeHorizontalPosition, values: wdRelativeHorizontalPositionCharacter (3), wdRelativeHorizontalPositionColumn (2), wdRelativeHorizontalPositionInnerMarginArea (6), wdRelativeHorizontalPositionLeftMarginArea (4), wdRelativeHorizontalPositionMargin (0), wdRelativeHorizontalPositionOuterMarginArea (7), wdRelativeHorizontalPositionPage (1), wdRelativeHorizontalPositionRightMarginArea (5) """
    value__ = ...
    wdRelativeHorizontalPositionCharacter: WdRelativeHorizontalPosition = ...
    wdRelativeHorizontalPositionColumn: WdRelativeHorizontalPosition = ...
    wdRelativeHorizontalPositionInnerMarginArea: WdRelativeHorizontalPosition = ...
    wdRelativeHorizontalPositionLeftMarginArea: WdRelativeHorizontalPosition = ...
    wdRelativeHorizontalPositionMargin: WdRelativeHorizontalPosition = ...
    wdRelativeHorizontalPositionOuterMarginArea: WdRelativeHorizontalPosition = ...
    wdRelativeHorizontalPositionPage: WdRelativeHorizontalPosition = ...
    wdRelativeHorizontalPositionRightMarginArea: WdRelativeHorizontalPosition = ...


class WdRelativeHorizontalSize(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRelativeHorizontalSize, values: wdRelativeHorizontalSizeInnerMarginArea (4), wdRelativeHorizontalSizeLeftMarginArea (2), wdRelativeHorizontalSizeMargin (0), wdRelativeHorizontalSizeOuterMarginArea (5), wdRelativeHorizontalSizePage (1), wdRelativeHorizontalSizeRightMarginArea (3) """
    value__ = ...
    wdRelativeHorizontalSizeInnerMarginArea: WdRelativeHorizontalSize = ...
    wdRelativeHorizontalSizeLeftMarginArea: WdRelativeHorizontalSize = ...
    wdRelativeHorizontalSizeMargin: WdRelativeHorizontalSize = ...
    wdRelativeHorizontalSizeOuterMarginArea: WdRelativeHorizontalSize = ...
    wdRelativeHorizontalSizePage: WdRelativeHorizontalSize = ...
    wdRelativeHorizontalSizeRightMarginArea: WdRelativeHorizontalSize = ...


class WdRelativeVerticalPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRelativeVerticalPosition, values: wdRelativeVerticalPositionBottomMarginArea (5), wdRelativeVerticalPositionInnerMarginArea (6), wdRelativeVerticalPositionLine (3), wdRelativeVerticalPositionMargin (0), wdRelativeVerticalPositionOuterMarginArea (7), wdRelativeVerticalPositionPage (1), wdRelativeVerticalPositionParagraph (2), wdRelativeVerticalPositionTopMarginArea (4) """
    value__ = ...
    wdRelativeVerticalPositionBottomMarginArea: WdRelativeVerticalPosition = ...
    wdRelativeVerticalPositionInnerMarginArea: WdRelativeVerticalPosition = ...
    wdRelativeVerticalPositionLine: WdRelativeVerticalPosition = ...
    wdRelativeVerticalPositionMargin: WdRelativeVerticalPosition = ...
    wdRelativeVerticalPositionOuterMarginArea: WdRelativeVerticalPosition = ...
    wdRelativeVerticalPositionPage: WdRelativeVerticalPosition = ...
    wdRelativeVerticalPositionParagraph: WdRelativeVerticalPosition = ...
    wdRelativeVerticalPositionTopMarginArea: WdRelativeVerticalPosition = ...


class WdRelativeVerticalSize(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRelativeVerticalSize, values: wdRelativeVerticalSizeBottomMarginArea (3), wdRelativeVerticalSizeInnerMarginArea (4), wdRelativeVerticalSizeMargin (0), wdRelativeVerticalSizeOuterMarginArea (5), wdRelativeVerticalSizePage (1), wdRelativeVerticalSizeTopMarginArea (2) """
    value__ = ...
    wdRelativeVerticalSizeBottomMarginArea: WdRelativeVerticalSize = ...
    wdRelativeVerticalSizeInnerMarginArea: WdRelativeVerticalSize = ...
    wdRelativeVerticalSizeMargin: WdRelativeVerticalSize = ...
    wdRelativeVerticalSizeOuterMarginArea: WdRelativeVerticalSize = ...
    wdRelativeVerticalSizePage: WdRelativeVerticalSize = ...
    wdRelativeVerticalSizeTopMarginArea: WdRelativeVerticalSize = ...


class WdRelocate(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRelocate, values: wdRelocateDown (1), wdRelocateUp (0) """
    value__ = ...
    wdRelocateDown: WdRelocate = ...
    wdRelocateUp: WdRelocate = ...


class WdRemoveDocInfoType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRemoveDocInfoType, values: wdRDIAll (99), wdRDIComments (1), wdRDIContentType (16), wdRDIDocumentManagementPolicy (15), wdRDIDocumentProperties (8), wdRDIDocumentServerProperties (14), wdRDIDocumentWorkspace (10), wdRDIEmailHeader (5), wdRDIInkAnnotations (11), wdRDIRemovePersonalInformation (4), wdRDIRevisions (2), wdRDIRoutingSlip (6), wdRDISendForReview (7), wdRDITaskpaneWebExtensions (17), wdRDITemplate (9), wdRDIVersions (3) """
    value__ = ...
    wdRDIAll: WdRemoveDocInfoType = ...
    wdRDIComments: WdRemoveDocInfoType = ...
    wdRDIContentType: WdRemoveDocInfoType = ...
    wdRDIDocumentManagementPolicy: WdRemoveDocInfoType = ...
    wdRDIDocumentProperties: WdRemoveDocInfoType = ...
    wdRDIDocumentServerProperties: WdRemoveDocInfoType = ...
    wdRDIDocumentWorkspace: WdRemoveDocInfoType = ...
    wdRDIEmailHeader: WdRemoveDocInfoType = ...
    wdRDIInkAnnotations: WdRemoveDocInfoType = ...
    wdRDIRemovePersonalInformation: WdRemoveDocInfoType = ...
    wdRDIRevisions: WdRemoveDocInfoType = ...
    wdRDIRoutingSlip: WdRemoveDocInfoType = ...
    wdRDISendForReview: WdRemoveDocInfoType = ...
    wdRDITaskpaneWebExtensions: WdRemoveDocInfoType = ...
    wdRDITemplate: WdRemoveDocInfoType = ...
    wdRDIVersions: WdRemoveDocInfoType = ...


class WdReplace(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdReplace, values: wdReplaceAll (2), wdReplaceNone (0), wdReplaceOne (1) """
    value__ = ...
    wdReplaceAll: WdReplace = ...
    wdReplaceNone: WdReplace = ...
    wdReplaceOne: WdReplace = ...


class WdRevisedLinesMark(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRevisedLinesMark, values: wdRevisedLinesMarkLeftBorder (1), wdRevisedLinesMarkNone (0), wdRevisedLinesMarkOutsideBorder (3), wdRevisedLinesMarkRightBorder (2) """
    value__ = ...
    wdRevisedLinesMarkLeftBorder: WdRevisedLinesMark = ...
    wdRevisedLinesMarkNone: WdRevisedLinesMark = ...
    wdRevisedLinesMarkOutsideBorder: WdRevisedLinesMark = ...
    wdRevisedLinesMarkRightBorder: WdRevisedLinesMark = ...


class WdRevisedPropertiesMark(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRevisedPropertiesMark, values: wdRevisedPropertiesMarkBold (1), wdRevisedPropertiesMarkColorOnly (5), wdRevisedPropertiesMarkDoubleStrikeThrough (7), wdRevisedPropertiesMarkDoubleUnderline (4), wdRevisedPropertiesMarkItalic (2), wdRevisedPropertiesMarkNone (0), wdRevisedPropertiesMarkStrikeThrough (6), wdRevisedPropertiesMarkUnderline (3) """
    value__ = ...
    wdRevisedPropertiesMarkBold: WdRevisedPropertiesMark = ...
    wdRevisedPropertiesMarkColorOnly: WdRevisedPropertiesMark = ...
    wdRevisedPropertiesMarkDoubleStrikeThrough: WdRevisedPropertiesMark = ...
    wdRevisedPropertiesMarkDoubleUnderline: WdRevisedPropertiesMark = ...
    wdRevisedPropertiesMarkItalic: WdRevisedPropertiesMark = ...
    wdRevisedPropertiesMarkNone: WdRevisedPropertiesMark = ...
    wdRevisedPropertiesMarkStrikeThrough: WdRevisedPropertiesMark = ...
    wdRevisedPropertiesMarkUnderline: WdRevisedPropertiesMark = ...


class WdRevisionsBalloonMargin(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRevisionsBalloonMargin, values: wdLeftMargin (0), wdRightMargin (1) """
    value__ = ...
    wdLeftMargin: WdRevisionsBalloonMargin = ...
    wdRightMargin: WdRevisionsBalloonMargin = ...


class WdRevisionsBalloonPrintOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRevisionsBalloonPrintOrientation, values: wdBalloonPrintOrientationAuto (0), wdBalloonPrintOrientationForceLandscape (2), wdBalloonPrintOrientationPreserve (1) """
    value__ = ...
    wdBalloonPrintOrientationAuto: WdRevisionsBalloonPrintOrientation = ...
    wdBalloonPrintOrientationForceLandscape: WdRevisionsBalloonPrintOrientation = ...
    wdBalloonPrintOrientationPreserve: WdRevisionsBalloonPrintOrientation = ...


class WdRevisionsBalloonWidthType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRevisionsBalloonWidthType, values: wdBalloonWidthPercent (0), wdBalloonWidthPoints (1) """
    value__ = ...
    wdBalloonWidthPercent: WdRevisionsBalloonWidthType = ...
    wdBalloonWidthPoints: WdRevisionsBalloonWidthType = ...


class WdRevisionsMarkup(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRevisionsMarkup, values: wdRevisionsMarkupAll (2), wdRevisionsMarkupNone (0), wdRevisionsMarkupSimple (1) """
    value__ = ...
    wdRevisionsMarkupAll: WdRevisionsMarkup = ...
    wdRevisionsMarkupNone: WdRevisionsMarkup = ...
    wdRevisionsMarkupSimple: WdRevisionsMarkup = ...


class WdRevisionsMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRevisionsMode, values: wdBalloonRevisions (0), wdInLineRevisions (1), wdMixedRevisions (2) """
    value__ = ...
    wdBalloonRevisions: WdRevisionsMode = ...
    wdInLineRevisions: WdRevisionsMode = ...
    wdMixedRevisions: WdRevisionsMode = ...


class WdRevisionsView(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRevisionsView, values: wdRevisionsViewFinal (0), wdRevisionsViewOriginal (1) """
    value__ = ...
    wdRevisionsViewFinal: WdRevisionsView = ...
    wdRevisionsViewOriginal: WdRevisionsView = ...


class WdRevisionsWrap(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRevisionsWrap, values: wdWrapAlways (1), wdWrapAsk (2), wdWrapNever (0) """
    value__ = ...
    wdWrapAlways: WdRevisionsWrap = ...
    wdWrapAsk: WdRevisionsWrap = ...
    wdWrapNever: WdRevisionsWrap = ...


class WdRevisionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRevisionType, values: wdNoRevision (0), wdRevisionCellDeletion (17), wdRevisionCellInsertion (16), wdRevisionCellMerge (18), wdRevisionCellSplit (19), wdRevisionConflict (7), wdRevisionConflictDelete (21), wdRevisionConflictInsert (20), wdRevisionDelete (2), wdRevisionDisplayField (5), wdRevisionInsert (1), wdRevisionMovedFrom (14), wdRevisionMovedTo (15), wdRevisionParagraphNumber (4), wdRevisionParagraphProperty (10), wdRevisionProperty (3), wdRevisionReconcile (6), wdRevisionReplace (9), wdRevisionSectionProperty (12), wdRevisionStyle (8), wdRevisionStyleDefinition (13), wdRevisionTableProperty (11) """
    value__ = ...
    wdNoRevision: WdRevisionType = ...
    wdRevisionCellDeletion: WdRevisionType = ...
    wdRevisionCellInsertion: WdRevisionType = ...
    wdRevisionCellMerge: WdRevisionType = ...
    wdRevisionCellSplit: WdRevisionType = ...
    wdRevisionConflict: WdRevisionType = ...
    wdRevisionConflictDelete: WdRevisionType = ...
    wdRevisionConflictInsert: WdRevisionType = ...
    wdRevisionDelete: WdRevisionType = ...
    wdRevisionDisplayField: WdRevisionType = ...
    wdRevisionInsert: WdRevisionType = ...
    wdRevisionMovedFrom: WdRevisionType = ...
    wdRevisionMovedTo: WdRevisionType = ...
    wdRevisionParagraphNumber: WdRevisionType = ...
    wdRevisionParagraphProperty: WdRevisionType = ...
    wdRevisionProperty: WdRevisionType = ...
    wdRevisionReconcile: WdRevisionType = ...
    wdRevisionReplace: WdRevisionType = ...
    wdRevisionSectionProperty: WdRevisionType = ...
    wdRevisionStyle: WdRevisionType = ...
    wdRevisionStyleDefinition: WdRevisionType = ...
    wdRevisionTableProperty: WdRevisionType = ...


class WdRoutingSlipDelivery(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRoutingSlipDelivery, values: wdAllAtOnce (1), wdOneAfterAnother (0) """
    value__ = ...
    wdAllAtOnce: WdRoutingSlipDelivery = ...
    wdOneAfterAnother: WdRoutingSlipDelivery = ...


class WdRoutingSlipStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRoutingSlipStatus, values: wdNotYetRouted (0), wdRouteComplete (2), wdRouteInProgress (1) """
    value__ = ...
    wdNotYetRouted: WdRoutingSlipStatus = ...
    wdRouteComplete: WdRoutingSlipStatus = ...
    wdRouteInProgress: WdRoutingSlipStatus = ...


class WdRowAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRowAlignment, values: wdAlignRowCenter (1), wdAlignRowLeft (0), wdAlignRowRight (2) """
    value__ = ...
    wdAlignRowCenter: WdRowAlignment = ...
    wdAlignRowLeft: WdRowAlignment = ...
    wdAlignRowRight: WdRowAlignment = ...


class WdRowHeightRule(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRowHeightRule, values: wdRowHeightAtLeast (1), wdRowHeightAuto (0), wdRowHeightExactly (2) """
    value__ = ...
    wdRowHeightAtLeast: WdRowHeightRule = ...
    wdRowHeightAuto: WdRowHeightRule = ...
    wdRowHeightExactly: WdRowHeightRule = ...


class WdRulerStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdRulerStyle, values: wdAdjustFirstColumn (2), wdAdjustNone (0), wdAdjustProportional (1), wdAdjustSameWidth (3) """
    value__ = ...
    wdAdjustFirstColumn: WdRulerStyle = ...
    wdAdjustNone: WdRulerStyle = ...
    wdAdjustProportional: WdRulerStyle = ...
    wdAdjustSameWidth: WdRulerStyle = ...


class WdSalutationGender(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSalutationGender, values: wdGenderFemale (0), wdGenderMale (1), wdGenderNeutral (2), wdGenderUnknown (3) """
    value__ = ...
    wdGenderFemale: WdSalutationGender = ...
    wdGenderMale: WdSalutationGender = ...
    wdGenderNeutral: WdSalutationGender = ...
    wdGenderUnknown: WdSalutationGender = ...


class WdSalutationType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSalutationType, values: wdSalutationBusiness (2), wdSalutationFormal (1), wdSalutationInformal (0), wdSalutationOther (3) """
    value__ = ...
    wdSalutationBusiness: WdSalutationType = ...
    wdSalutationFormal: WdSalutationType = ...
    wdSalutationInformal: WdSalutationType = ...
    wdSalutationOther: WdSalutationType = ...


class WdSaveFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSaveFormat, values: wdFormatDocument (0), wdFormatDocument97 (0), wdFormatDocumentDefault (16), wdFormatDOSText (4), wdFormatDOSTextLineBreaks (5), wdFormatEncodedText (7), wdFormatFilteredHTML (10), wdFormatFlatXML (19), wdFormatFlatXMLMacroEnabled (20), wdFormatFlatXMLTemplate (21), wdFormatFlatXMLTemplateMacroEnabled (22), wdFormatHTML (8), wdFormatOpenDocumentText (23), wdFormatPDF (17), wdFormatRTF (6), wdFormatStrictOpenXMLDocument (24), wdFormatTemplate (1), wdFormatTemplate97 (1), wdFormatText (2), wdFormatTextLineBreaks (3), wdFormatUnicodeText (7), wdFormatWebArchive (9), wdFormatXML (11), wdFormatXMLDocument (12), wdFormatXMLDocumentMacroEnabled (13), wdFormatXMLTemplate (14), wdFormatXMLTemplateMacroEnabled (15), wdFormatXPS (18) """
    value__ = ...
    wdFormatDocument: WdSaveFormat = ...
    wdFormatDocument97: WdSaveFormat = ...
    wdFormatDocumentDefault: WdSaveFormat = ...
    wdFormatDOSText: WdSaveFormat = ...
    wdFormatDOSTextLineBreaks: WdSaveFormat = ...
    wdFormatEncodedText: WdSaveFormat = ...
    wdFormatFilteredHTML: WdSaveFormat = ...
    wdFormatFlatXML: WdSaveFormat = ...
    wdFormatFlatXMLMacroEnabled: WdSaveFormat = ...
    wdFormatFlatXMLTemplate: WdSaveFormat = ...
    wdFormatFlatXMLTemplateMacroEnabled: WdSaveFormat = ...
    wdFormatHTML: WdSaveFormat = ...
    wdFormatOpenDocumentText: WdSaveFormat = ...
    wdFormatPDF: WdSaveFormat = ...
    wdFormatRTF: WdSaveFormat = ...
    wdFormatStrictOpenXMLDocument: WdSaveFormat = ...
    wdFormatTemplate: WdSaveFormat = ...
    wdFormatTemplate97: WdSaveFormat = ...
    wdFormatText: WdSaveFormat = ...
    wdFormatTextLineBreaks: WdSaveFormat = ...
    wdFormatUnicodeText: WdSaveFormat = ...
    wdFormatWebArchive: WdSaveFormat = ...
    wdFormatXML: WdSaveFormat = ...
    wdFormatXMLDocument: WdSaveFormat = ...
    wdFormatXMLDocumentMacroEnabled: WdSaveFormat = ...
    wdFormatXMLTemplate: WdSaveFormat = ...
    wdFormatXMLTemplateMacroEnabled: WdSaveFormat = ...
    wdFormatXPS: WdSaveFormat = ...


class WdSaveOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSaveOptions, values: wdDoNotSaveChanges (0), wdPromptToSaveChanges (-2), wdSaveChanges (-1) """
    value__ = ...
    wdDoNotSaveChanges: WdSaveOptions = ...
    wdPromptToSaveChanges: WdSaveOptions = ...
    wdSaveChanges: WdSaveOptions = ...


class WdScrollbarType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdScrollbarType, values: wdScrollbarTypeAuto (0), wdScrollbarTypeNo (2), wdScrollbarTypeYes (1) """
    value__ = ...
    wdScrollbarTypeAuto: WdScrollbarType = ...
    wdScrollbarTypeNo: WdScrollbarType = ...
    wdScrollbarTypeYes: WdScrollbarType = ...


class WdSectionDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSectionDirection, values: wdSectionDirectionLtr (1), wdSectionDirectionRtl (0) """
    value__ = ...
    wdSectionDirectionLtr: WdSectionDirection = ...
    wdSectionDirectionRtl: WdSectionDirection = ...


class WdSectionStart(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSectionStart, values: wdSectionContinuous (0), wdSectionEvenPage (3), wdSectionNewColumn (1), wdSectionNewPage (2), wdSectionOddPage (4) """
    value__ = ...
    wdSectionContinuous: WdSectionStart = ...
    wdSectionEvenPage: WdSectionStart = ...
    wdSectionNewColumn: WdSectionStart = ...
    wdSectionNewPage: WdSectionStart = ...
    wdSectionOddPage: WdSectionStart = ...


class WdSeekView(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSeekView, values: wdSeekCurrentPageFooter (10), wdSeekCurrentPageHeader (9), wdSeekEndnotes (8), wdSeekEvenPagesFooter (6), wdSeekEvenPagesHeader (3), wdSeekFirstPageFooter (5), wdSeekFirstPageHeader (2), wdSeekFootnotes (7), wdSeekMainDocument (0), wdSeekPrimaryFooter (4), wdSeekPrimaryHeader (1) """
    value__ = ...
    wdSeekCurrentPageFooter: WdSeekView = ...
    wdSeekCurrentPageHeader: WdSeekView = ...
    wdSeekEndnotes: WdSeekView = ...
    wdSeekEvenPagesFooter: WdSeekView = ...
    wdSeekEvenPagesHeader: WdSeekView = ...
    wdSeekFirstPageFooter: WdSeekView = ...
    wdSeekFirstPageHeader: WdSeekView = ...
    wdSeekFootnotes: WdSeekView = ...
    wdSeekMainDocument: WdSeekView = ...
    wdSeekPrimaryFooter: WdSeekView = ...
    wdSeekPrimaryHeader: WdSeekView = ...


class WdSelectionFlags(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSelectionFlags, values: wdSelActive (8), wdSelAtEOL (2), wdSelOvertype (4), wdSelReplace (16), wdSelStartActive (1) """
    value__ = ...
    wdSelActive: WdSelectionFlags = ...
    wdSelAtEOL: WdSelectionFlags = ...
    wdSelOvertype: WdSelectionFlags = ...
    wdSelReplace: WdSelectionFlags = ...
    wdSelStartActive: WdSelectionFlags = ...


class WdSelectionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSelectionType, values: wdNoSelection (0), wdSelectionBlock (6), wdSelectionColumn (4), wdSelectionFrame (3), wdSelectionInlineShape (7), wdSelectionIP (1), wdSelectionNormal (2), wdSelectionRow (5), wdSelectionShape (8) """
    value__ = ...
    wdNoSelection: WdSelectionType = ...
    wdSelectionBlock: WdSelectionType = ...
    wdSelectionColumn: WdSelectionType = ...
    wdSelectionFrame: WdSelectionType = ...
    wdSelectionInlineShape: WdSelectionType = ...
    wdSelectionIP: WdSelectionType = ...
    wdSelectionNormal: WdSelectionType = ...
    wdSelectionRow: WdSelectionType = ...
    wdSelectionShape: WdSelectionType = ...


class WdSeparatorType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSeparatorType, values: wdSeparatorColon (2), wdSeparatorEmDash (3), wdSeparatorEnDash (4), wdSeparatorHyphen (0), wdSeparatorPeriod (1) """
    value__ = ...
    wdSeparatorColon: WdSeparatorType = ...
    wdSeparatorEmDash: WdSeparatorType = ...
    wdSeparatorEnDash: WdSeparatorType = ...
    wdSeparatorHyphen: WdSeparatorType = ...
    wdSeparatorPeriod: WdSeparatorType = ...


class WdShapePosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdShapePosition, values: wdShapeBottom (-999997), wdShapeCenter (-999995), wdShapeInside (-999994), wdShapeLeft (-999998), wdShapeOutside (-999993), wdShapeRight (-999996), wdShapeTop (-999999) """
    value__ = ...
    wdShapeBottom: WdShapePosition = ...
    wdShapeCenter: WdShapePosition = ...
    wdShapeInside: WdShapePosition = ...
    wdShapeLeft: WdShapePosition = ...
    wdShapeOutside: WdShapePosition = ...
    wdShapeRight: WdShapePosition = ...
    wdShapeTop: WdShapePosition = ...


class WdShapePositionRelative(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdShapePositionRelative, values: wdShapePositionRelativeNone (-999999) """
    value__ = ...
    wdShapePositionRelativeNone: WdShapePositionRelative = ...


class WdShapeSizeRelative(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdShapeSizeRelative, values: wdShapeSizeRelativeNone (-999999) """
    value__ = ...
    wdShapeSizeRelativeNone: WdShapeSizeRelative = ...


class WdShowFilter(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdShowFilter, values: wdShowFilterFormattingAvailable (4), wdShowFilterFormattingInUse (3), wdShowFilterFormattingRecommended (5), wdShowFilterStylesAll (2), wdShowFilterStylesAvailable (0), wdShowFilterStylesInUse (1) """
    value__ = ...
    wdShowFilterFormattingAvailable: WdShowFilter = ...
    wdShowFilterFormattingInUse: WdShowFilter = ...
    wdShowFilterFormattingRecommended: WdShowFilter = ...
    wdShowFilterStylesAll: WdShowFilter = ...
    wdShowFilterStylesAvailable: WdShowFilter = ...
    wdShowFilterStylesInUse: WdShowFilter = ...


class WdShowSourceDocuments(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdShowSourceDocuments, values: wdShowSourceDocumentsBoth (3), wdShowSourceDocumentsNone (0), wdShowSourceDocumentsOriginal (1), wdShowSourceDocumentsRevised (2) """
    value__ = ...
    wdShowSourceDocumentsBoth: WdShowSourceDocuments = ...
    wdShowSourceDocumentsNone: WdShowSourceDocuments = ...
    wdShowSourceDocumentsOriginal: WdShowSourceDocuments = ...
    wdShowSourceDocumentsRevised: WdShowSourceDocuments = ...


class WdSmartTagControlType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSmartTagControlType, values: wdControlActiveX (13), wdControlButton (6), wdControlCheckbox (9), wdControlCombo (12), wdControlDocumentFragment (14), wdControlDocumentFragmentURL (15), wdControlHelp (3), wdControlHelpURL (4), wdControlImage (8), wdControlLabel (7), wdControlLink (2), wdControlListbox (11), wdControlRadioGroup (16), wdControlSeparator (5), wdControlSmartTag (1), wdControlTextbox (10) """
    value__ = ...
    wdControlActiveX: WdSmartTagControlType = ...
    wdControlButton: WdSmartTagControlType = ...
    wdControlCheckbox: WdSmartTagControlType = ...
    wdControlCombo: WdSmartTagControlType = ...
    wdControlDocumentFragment: WdSmartTagControlType = ...
    wdControlDocumentFragmentURL: WdSmartTagControlType = ...
    wdControlHelp: WdSmartTagControlType = ...
    wdControlHelpURL: WdSmartTagControlType = ...
    wdControlImage: WdSmartTagControlType = ...
    wdControlLabel: WdSmartTagControlType = ...
    wdControlLink: WdSmartTagControlType = ...
    wdControlListbox: WdSmartTagControlType = ...
    wdControlRadioGroup: WdSmartTagControlType = ...
    wdControlSeparator: WdSmartTagControlType = ...
    wdControlSmartTag: WdSmartTagControlType = ...
    wdControlTextbox: WdSmartTagControlType = ...


class WdSortFieldType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSortFieldType, values: wdSortFieldAlphanumeric (0), wdSortFieldDate (2), wdSortFieldJapanJIS (4), wdSortFieldKoreaKS (6), wdSortFieldNumeric (1), wdSortFieldStroke (5), wdSortFieldSyllable (3) """
    value__ = ...
    wdSortFieldAlphanumeric: WdSortFieldType = ...
    wdSortFieldDate: WdSortFieldType = ...
    wdSortFieldJapanJIS: WdSortFieldType = ...
    wdSortFieldKoreaKS: WdSortFieldType = ...
    wdSortFieldNumeric: WdSortFieldType = ...
    wdSortFieldStroke: WdSortFieldType = ...
    wdSortFieldSyllable: WdSortFieldType = ...


class WdSortFieldTypeHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSortFieldTypeHID, values: emptyenum (0) """
    emptyenum: WdSortFieldTypeHID = ...
    value__ = ...


class WdSortOrder(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSortOrder, values: wdSortOrderAscending (0), wdSortOrderDescending (1) """
    value__ = ...
    wdSortOrderAscending: WdSortOrder = ...
    wdSortOrderDescending: WdSortOrder = ...


class WdSortSeparator(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSortSeparator, values: wdSortSeparateByCommas (1), wdSortSeparateByDefaultTableSeparator (2), wdSortSeparateByTabs (0) """
    value__ = ...
    wdSortSeparateByCommas: WdSortSeparator = ...
    wdSortSeparateByDefaultTableSeparator: WdSortSeparator = ...
    wdSortSeparateByTabs: WdSortSeparator = ...


class WdSpanishSpeller(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSpanishSpeller, values: wdSpanishTuteoAndVoseo (1), wdSpanishTuteoOnly (0), wdSpanishVoseoOnly (2) """
    value__ = ...
    wdSpanishTuteoAndVoseo: WdSpanishSpeller = ...
    wdSpanishTuteoOnly: WdSpanishSpeller = ...
    wdSpanishVoseoOnly: WdSpanishSpeller = ...


class WdSpecialPane(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSpecialPane, values: wdPaneComments (15), wdPaneCurrentPageFooter (17), wdPaneCurrentPageHeader (16), wdPaneEndnoteContinuationNotice (12), wdPaneEndnoteContinuationSeparator (13), wdPaneEndnotes (8), wdPaneEndnoteSeparator (14), wdPaneEvenPagesFooter (6), wdPaneEvenPagesHeader (3), wdPaneFirstPageFooter (5), wdPaneFirstPageHeader (2), wdPaneFootnoteContinuationNotice (9), wdPaneFootnoteContinuationSeparator (10), wdPaneFootnotes (7), wdPaneFootnoteSeparator (11), wdPaneNone (0), wdPanePrimaryFooter (4), wdPanePrimaryHeader (1), wdPaneRevisions (18), wdPaneRevisionsHoriz (19), wdPaneRevisionsVert (20) """
    value__ = ...
    wdPaneComments: WdSpecialPane = ...
    wdPaneCurrentPageFooter: WdSpecialPane = ...
    wdPaneCurrentPageHeader: WdSpecialPane = ...
    wdPaneEndnoteContinuationNotice: WdSpecialPane = ...
    wdPaneEndnoteContinuationSeparator: WdSpecialPane = ...
    wdPaneEndnotes: WdSpecialPane = ...
    wdPaneEndnoteSeparator: WdSpecialPane = ...
    wdPaneEvenPagesFooter: WdSpecialPane = ...
    wdPaneEvenPagesHeader: WdSpecialPane = ...
    wdPaneFirstPageFooter: WdSpecialPane = ...
    wdPaneFirstPageHeader: WdSpecialPane = ...
    wdPaneFootnoteContinuationNotice: WdSpecialPane = ...
    wdPaneFootnoteContinuationSeparator: WdSpecialPane = ...
    wdPaneFootnotes: WdSpecialPane = ...
    wdPaneFootnoteSeparator: WdSpecialPane = ...
    wdPaneNone: WdSpecialPane = ...
    wdPanePrimaryFooter: WdSpecialPane = ...
    wdPanePrimaryHeader: WdSpecialPane = ...
    wdPaneRevisions: WdSpecialPane = ...
    wdPaneRevisionsHoriz: WdSpecialPane = ...
    wdPaneRevisionsVert: WdSpecialPane = ...


class WdSpellingErrorType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSpellingErrorType, values: wdSpellingCapitalization (2), wdSpellingCorrect (0), wdSpellingNotInDictionary (1) """
    value__ = ...
    wdSpellingCapitalization: WdSpellingErrorType = ...
    wdSpellingCorrect: WdSpellingErrorType = ...
    wdSpellingNotInDictionary: WdSpellingErrorType = ...


class WdSpellingWordType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSpellingWordType, values: wdAnagram (2), wdSpellword (0), wdWildcard (1) """
    value__ = ...
    wdAnagram: WdSpellingWordType = ...
    wdSpellword: WdSpellingWordType = ...
    wdWildcard: WdSpellingWordType = ...


class WdStatistic(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdStatistic, values: wdStatisticCharacters (3), wdStatisticCharactersWithSpaces (5), wdStatisticFarEastCharacters (6), wdStatisticLines (1), wdStatisticPages (2), wdStatisticParagraphs (4), wdStatisticWords (0) """
    value__ = ...
    wdStatisticCharacters: WdStatistic = ...
    wdStatisticCharactersWithSpaces: WdStatistic = ...
    wdStatisticFarEastCharacters: WdStatistic = ...
    wdStatisticLines: WdStatistic = ...
    wdStatisticPages: WdStatistic = ...
    wdStatisticParagraphs: WdStatistic = ...
    wdStatisticWords: WdStatistic = ...


class WdStatisticHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdStatisticHID, values: emptyenum (0) """
    emptyenum: WdStatisticHID = ...
    value__ = ...


class WdStoryType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdStoryType, values: wdCommentsStory (4), wdEndnoteContinuationNoticeStory (17), wdEndnoteContinuationSeparatorStory (16), wdEndnoteSeparatorStory (15), wdEndnotesStory (3), wdEvenPagesFooterStory (8), wdEvenPagesHeaderStory (6), wdFirstPageFooterStory (11), wdFirstPageHeaderStory (10), wdFootnoteContinuationNoticeStory (14), wdFootnoteContinuationSeparatorStory (13), wdFootnoteSeparatorStory (12), wdFootnotesStory (2), wdMainTextStory (1), wdPrimaryFooterStory (9), wdPrimaryHeaderStory (7), wdTextFrameStory (5) """
    value__ = ...
    wdCommentsStory: WdStoryType = ...
    wdEndnoteContinuationNoticeStory: WdStoryType = ...
    wdEndnoteContinuationSeparatorStory: WdStoryType = ...
    wdEndnoteSeparatorStory: WdStoryType = ...
    wdEndnotesStory: WdStoryType = ...
    wdEvenPagesFooterStory: WdStoryType = ...
    wdEvenPagesHeaderStory: WdStoryType = ...
    wdFirstPageFooterStory: WdStoryType = ...
    wdFirstPageHeaderStory: WdStoryType = ...
    wdFootnoteContinuationNoticeStory: WdStoryType = ...
    wdFootnoteContinuationSeparatorStory: WdStoryType = ...
    wdFootnoteSeparatorStory: WdStoryType = ...
    wdFootnotesStory: WdStoryType = ...
    wdMainTextStory: WdStoryType = ...
    wdPrimaryFooterStory: WdStoryType = ...
    wdPrimaryHeaderStory: WdStoryType = ...
    wdTextFrameStory: WdStoryType = ...


class WdStyleSheetLinkType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdStyleSheetLinkType, values: wdStyleSheetLinkTypeImported (1), wdStyleSheetLinkTypeLinked (0) """
    value__ = ...
    wdStyleSheetLinkTypeImported: WdStyleSheetLinkType = ...
    wdStyleSheetLinkTypeLinked: WdStyleSheetLinkType = ...


class WdStyleSheetPrecedence(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdStyleSheetPrecedence, values: wdStyleSheetPrecedenceHigher (-1), wdStyleSheetPrecedenceHighest (1), wdStyleSheetPrecedenceLower (-2), wdStyleSheetPrecedenceLowest (0) """
    value__ = ...
    wdStyleSheetPrecedenceHigher: WdStyleSheetPrecedence = ...
    wdStyleSheetPrecedenceHighest: WdStyleSheetPrecedence = ...
    wdStyleSheetPrecedenceLower: WdStyleSheetPrecedence = ...
    wdStyleSheetPrecedenceLowest: WdStyleSheetPrecedence = ...


class WdStyleSort(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdStyleSort, values: wdStyleSortByBasedOn (3), wdStyleSortByFont (2), wdStyleSortByName (0), wdStyleSortByType (4), wdStyleSortRecommended (1) """
    value__ = ...
    wdStyleSortByBasedOn: WdStyleSort = ...
    wdStyleSortByFont: WdStyleSort = ...
    wdStyleSortByName: WdStyleSort = ...
    wdStyleSortByType: WdStyleSort = ...
    wdStyleSortRecommended: WdStyleSort = ...


class WdStyleType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdStyleType, values: wdStyleTypeCharacter (2), wdStyleTypeLinked (6), wdStyleTypeList (4), wdStyleTypeParagraph (1), wdStyleTypeParagraphOnly (5), wdStyleTypeTable (3) """
    value__ = ...
    wdStyleTypeCharacter: WdStyleType = ...
    wdStyleTypeLinked: WdStyleType = ...
    wdStyleTypeList: WdStyleType = ...
    wdStyleTypeParagraph: WdStyleType = ...
    wdStyleTypeParagraphOnly: WdStyleType = ...
    wdStyleTypeTable: WdStyleType = ...


class WdStylisticSet(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdStylisticSet, values: wdStylisticSet01 (1), wdStylisticSet02 (2), wdStylisticSet03 (4), wdStylisticSet04 (8), wdStylisticSet05 (16), wdStylisticSet06 (32), wdStylisticSet07 (64), wdStylisticSet08 (128), wdStylisticSet09 (256), wdStylisticSet10 (512), wdStylisticSet11 (1024), wdStylisticSet12 (2048), wdStylisticSet13 (4096), wdStylisticSet14 (8192), wdStylisticSet15 (16384), wdStylisticSet16 (32768), wdStylisticSet17 (65536), wdStylisticSet18 (131072), wdStylisticSet19 (262144), wdStylisticSet20 (524288), wdStylisticSetDefault (0) """
    value__ = ...
    wdStylisticSet01: WdStylisticSet = ...
    wdStylisticSet02: WdStylisticSet = ...
    wdStylisticSet03: WdStylisticSet = ...
    wdStylisticSet04: WdStylisticSet = ...
    wdStylisticSet05: WdStylisticSet = ...
    wdStylisticSet06: WdStylisticSet = ...
    wdStylisticSet07: WdStylisticSet = ...
    wdStylisticSet08: WdStylisticSet = ...
    wdStylisticSet09: WdStylisticSet = ...
    wdStylisticSet10: WdStylisticSet = ...
    wdStylisticSet11: WdStylisticSet = ...
    wdStylisticSet12: WdStylisticSet = ...
    wdStylisticSet13: WdStylisticSet = ...
    wdStylisticSet14: WdStylisticSet = ...
    wdStylisticSet15: WdStylisticSet = ...
    wdStylisticSet16: WdStylisticSet = ...
    wdStylisticSet17: WdStylisticSet = ...
    wdStylisticSet18: WdStylisticSet = ...
    wdStylisticSet19: WdStylisticSet = ...
    wdStylisticSet20: WdStylisticSet = ...
    wdStylisticSetDefault: WdStylisticSet = ...


class WdSubscriberFormats(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSubscriberFormats, values: wdSubscriberBestFormat (0), wdSubscriberPict (4), wdSubscriberRTF (1), wdSubscriberText (2) """
    value__ = ...
    wdSubscriberBestFormat: WdSubscriberFormats = ...
    wdSubscriberPict: WdSubscriberFormats = ...
    wdSubscriberRTF: WdSubscriberFormats = ...
    wdSubscriberText: WdSubscriberFormats = ...


class WdSummaryLength(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSummaryLength, values: wd100Words (-4), wd10Percent (-6), wd10Sentences (-2), wd20Sentences (-3), wd25Percent (-7), wd500Words (-5), wd50Percent (-8), wd75Percent (-9) """
    value__ = ...
    wd100Words: WdSummaryLength = ...
    wd10Percent: WdSummaryLength = ...
    wd10Sentences: WdSummaryLength = ...
    wd20Sentences: WdSummaryLength = ...
    wd25Percent: WdSummaryLength = ...
    wd500Words: WdSummaryLength = ...
    wd50Percent: WdSummaryLength = ...
    wd75Percent: WdSummaryLength = ...


class WdSummaryMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdSummaryMode, values: wdSummaryModeCreateNew (3), wdSummaryModeHideAllButSummary (1), wdSummaryModeHighlight (0), wdSummaryModeInsert (2) """
    value__ = ...
    wdSummaryModeCreateNew: WdSummaryMode = ...
    wdSummaryModeHideAllButSummary: WdSummaryMode = ...
    wdSummaryModeHighlight: WdSummaryMode = ...
    wdSummaryModeInsert: WdSummaryMode = ...


class WdTabAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTabAlignment, values: wdAlignTabBar (4), wdAlignTabCenter (1), wdAlignTabDecimal (3), wdAlignTabLeft (0), wdAlignTabList (6), wdAlignTabRight (2) """
    value__ = ...
    wdAlignTabBar: WdTabAlignment = ...
    wdAlignTabCenter: WdTabAlignment = ...
    wdAlignTabDecimal: WdTabAlignment = ...
    wdAlignTabLeft: WdTabAlignment = ...
    wdAlignTabList: WdTabAlignment = ...
    wdAlignTabRight: WdTabAlignment = ...


class WdTabLeader(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTabLeader, values: wdTabLeaderDashes (2), wdTabLeaderDots (1), wdTabLeaderHeavy (4), wdTabLeaderLines (3), wdTabLeaderMiddleDot (5), wdTabLeaderSpaces (0) """
    value__ = ...
    wdTabLeaderDashes: WdTabLeader = ...
    wdTabLeaderDots: WdTabLeader = ...
    wdTabLeaderHeavy: WdTabLeader = ...
    wdTabLeaderLines: WdTabLeader = ...
    wdTabLeaderMiddleDot: WdTabLeader = ...
    wdTabLeaderSpaces: WdTabLeader = ...


class WdTabLeaderHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTabLeaderHID, values: emptyenum (0) """
    emptyenum: WdTabLeaderHID = ...
    value__ = ...


class WdTableDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTableDirection, values: wdTableDirectionLtr (1), wdTableDirectionRtl (0) """
    value__ = ...
    wdTableDirectionLtr: WdTableDirection = ...
    wdTableDirectionRtl: WdTableDirection = ...


class WdTableFieldSeparator(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTableFieldSeparator, values: wdSeparateByCommas (2), wdSeparateByDefaultListSeparator (3), wdSeparateByParagraphs (0), wdSeparateByTabs (1) """
    value__ = ...
    wdSeparateByCommas: WdTableFieldSeparator = ...
    wdSeparateByDefaultListSeparator: WdTableFieldSeparator = ...
    wdSeparateByParagraphs: WdTableFieldSeparator = ...
    wdSeparateByTabs: WdTableFieldSeparator = ...


class WdTableFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTableFormat, values: wdTableFormat3DEffects1 (32), wdTableFormat3DEffects2 (33), wdTableFormat3DEffects3 (34), wdTableFormatClassic1 (4), wdTableFormatClassic2 (5), wdTableFormatClassic3 (6), wdTableFormatClassic4 (7), wdTableFormatColorful1 (8), wdTableFormatColorful2 (9), wdTableFormatColorful3 (10), wdTableFormatColumns1 (11), wdTableFormatColumns2 (12), wdTableFormatColumns3 (13), wdTableFormatColumns4 (14), wdTableFormatColumns5 (15), wdTableFormatContemporary (35), wdTableFormatElegant (36), wdTableFormatGrid1 (16), wdTableFormatGrid2 (17), wdTableFormatGrid3 (18), wdTableFormatGrid4 (19), wdTableFormatGrid5 (20), wdTableFormatGrid6 (21), wdTableFormatGrid7 (22), wdTableFormatGrid8 (23), wdTableFormatList1 (24), wdTableFormatList2 (25), wdTableFormatList3 (26), wdTableFormatList4 (27), wdTableFormatList5 (28), wdTableFormatList6 (29), wdTableFormatList7 (30), wdTableFormatList8 (31), wdTableFormatNone (0), wdTableFormatProfessional (37), wdTableFormatSimple1 (1), wdTableFormatSimple2 (2), wdTableFormatSimple3 (3), wdTableFormatSubtle1 (38), wdTableFormatSubtle2 (39), wdTableFormatWeb1 (40), wdTableFormatWeb2 (41), wdTableFormatWeb3 (42) """
    value__ = ...
    wdTableFormat3DEffects1: WdTableFormat = ...
    wdTableFormat3DEffects2: WdTableFormat = ...
    wdTableFormat3DEffects3: WdTableFormat = ...
    wdTableFormatClassic1: WdTableFormat = ...
    wdTableFormatClassic2: WdTableFormat = ...
    wdTableFormatClassic3: WdTableFormat = ...
    wdTableFormatClassic4: WdTableFormat = ...
    wdTableFormatColorful1: WdTableFormat = ...
    wdTableFormatColorful2: WdTableFormat = ...
    wdTableFormatColorful3: WdTableFormat = ...
    wdTableFormatColumns1: WdTableFormat = ...
    wdTableFormatColumns2: WdTableFormat = ...
    wdTableFormatColumns3: WdTableFormat = ...
    wdTableFormatColumns4: WdTableFormat = ...
    wdTableFormatColumns5: WdTableFormat = ...
    wdTableFormatContemporary: WdTableFormat = ...
    wdTableFormatElegant: WdTableFormat = ...
    wdTableFormatGrid1: WdTableFormat = ...
    wdTableFormatGrid2: WdTableFormat = ...
    wdTableFormatGrid3: WdTableFormat = ...
    wdTableFormatGrid4: WdTableFormat = ...
    wdTableFormatGrid5: WdTableFormat = ...
    wdTableFormatGrid6: WdTableFormat = ...
    wdTableFormatGrid7: WdTableFormat = ...
    wdTableFormatGrid8: WdTableFormat = ...
    wdTableFormatList1: WdTableFormat = ...
    wdTableFormatList2: WdTableFormat = ...
    wdTableFormatList3: WdTableFormat = ...
    wdTableFormatList4: WdTableFormat = ...
    wdTableFormatList5: WdTableFormat = ...
    wdTableFormatList6: WdTableFormat = ...
    wdTableFormatList7: WdTableFormat = ...
    wdTableFormatList8: WdTableFormat = ...
    wdTableFormatNone: WdTableFormat = ...
    wdTableFormatProfessional: WdTableFormat = ...
    wdTableFormatSimple1: WdTableFormat = ...
    wdTableFormatSimple2: WdTableFormat = ...
    wdTableFormatSimple3: WdTableFormat = ...
    wdTableFormatSubtle1: WdTableFormat = ...
    wdTableFormatSubtle2: WdTableFormat = ...
    wdTableFormatWeb1: WdTableFormat = ...
    wdTableFormatWeb2: WdTableFormat = ...
    wdTableFormatWeb3: WdTableFormat = ...


class WdTableFormatApply(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTableFormatApply, values: wdTableFormatApplyAutoFit (16), wdTableFormatApplyBorders (1), wdTableFormatApplyColor (8), wdTableFormatApplyFirstColumn (128), wdTableFormatApplyFont (4), wdTableFormatApplyHeadingRows (32), wdTableFormatApplyLastColumn (256), wdTableFormatApplyLastRow (64), wdTableFormatApplyShading (2) """
    value__ = ...
    wdTableFormatApplyAutoFit: WdTableFormatApply = ...
    wdTableFormatApplyBorders: WdTableFormatApply = ...
    wdTableFormatApplyColor: WdTableFormatApply = ...
    wdTableFormatApplyFirstColumn: WdTableFormatApply = ...
    wdTableFormatApplyFont: WdTableFormatApply = ...
    wdTableFormatApplyHeadingRows: WdTableFormatApply = ...
    wdTableFormatApplyLastColumn: WdTableFormatApply = ...
    wdTableFormatApplyLastRow: WdTableFormatApply = ...
    wdTableFormatApplyShading: WdTableFormatApply = ...


class WdTablePosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTablePosition, values: wdTableBottom (-999997), wdTableCenter (-999995), wdTableInside (-999994), wdTableLeft (-999998), wdTableOutside (-999993), wdTableRight (-999996), wdTableTop (-999999) """
    value__ = ...
    wdTableBottom: WdTablePosition = ...
    wdTableCenter: WdTablePosition = ...
    wdTableInside: WdTablePosition = ...
    wdTableLeft: WdTablePosition = ...
    wdTableOutside: WdTablePosition = ...
    wdTableRight: WdTablePosition = ...
    wdTableTop: WdTablePosition = ...


class WdTaskPanes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTaskPanes, values: wdTaskPaneApplyStyles (17), wdTaskPaneDocumentActions (7), wdTaskPaneDocumentManagement (16), wdTaskPaneDocumentProtection (6), wdTaskPaneDocumentUpdates (13), wdTaskPaneFaxService (11), wdTaskPaneFormatting (0), wdTaskPaneHelp (9), wdTaskPaneMailMerge (2), wdTaskPaneNav (18), wdTaskPaneProofing (20), wdTaskPaneResearch (10), wdTaskPaneRevealFormatting (1), wdTaskPaneRevPaneFlex (22), wdTaskPaneSearch (4), wdTaskPaneSelection (19), wdTaskPaneSharedWorkspace (8), wdTaskPaneSignature (14), wdTaskPaneStyleInspector (15), wdTaskPaneThesaurus (23), wdTaskPaneTranslate (3), wdTaskPaneXMLDocument (12), wdTaskPaneXMLMapping (21), wdTaskPaneXMLStructure (5) """
    value__ = ...
    wdTaskPaneApplyStyles: WdTaskPanes = ...
    wdTaskPaneDocumentActions: WdTaskPanes = ...
    wdTaskPaneDocumentManagement: WdTaskPanes = ...
    wdTaskPaneDocumentProtection: WdTaskPanes = ...
    wdTaskPaneDocumentUpdates: WdTaskPanes = ...
    wdTaskPaneFaxService: WdTaskPanes = ...
    wdTaskPaneFormatting: WdTaskPanes = ...
    wdTaskPaneHelp: WdTaskPanes = ...
    wdTaskPaneMailMerge: WdTaskPanes = ...
    wdTaskPaneNav: WdTaskPanes = ...
    wdTaskPaneProofing: WdTaskPanes = ...
    wdTaskPaneResearch: WdTaskPanes = ...
    wdTaskPaneRevealFormatting: WdTaskPanes = ...
    wdTaskPaneRevPaneFlex: WdTaskPanes = ...
    wdTaskPaneSearch: WdTaskPanes = ...
    wdTaskPaneSelection: WdTaskPanes = ...
    wdTaskPaneSharedWorkspace: WdTaskPanes = ...
    wdTaskPaneSignature: WdTaskPanes = ...
    wdTaskPaneStyleInspector: WdTaskPanes = ...
    wdTaskPaneThesaurus: WdTaskPanes = ...
    wdTaskPaneTranslate: WdTaskPanes = ...
    wdTaskPaneXMLDocument: WdTaskPanes = ...
    wdTaskPaneXMLMapping: WdTaskPanes = ...
    wdTaskPaneXMLStructure: WdTaskPanes = ...


class WdTCSCConverterDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTCSCConverterDirection, values: wdTCSCConverterDirectionAuto (2), wdTCSCConverterDirectionSCTC (0), wdTCSCConverterDirectionTCSC (1) """
    value__ = ...
    wdTCSCConverterDirectionAuto: WdTCSCConverterDirection = ...
    wdTCSCConverterDirectionSCTC: WdTCSCConverterDirection = ...
    wdTCSCConverterDirectionTCSC: WdTCSCConverterDirection = ...


class WdTemplateType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTemplateType, values: wdAttachedTemplate (2), wdGlobalTemplate (1), wdNormalTemplate (0) """
    value__ = ...
    wdAttachedTemplate: WdTemplateType = ...
    wdGlobalTemplate: WdTemplateType = ...
    wdNormalTemplate: WdTemplateType = ...


class WdTextboxTightWrap(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTextboxTightWrap, values: wdTightAll (1), wdTightFirstAndLastLines (2), wdTightFirstLineOnly (3), wdTightLastLineOnly (4), wdTightNone (0) """
    value__ = ...
    wdTightAll: WdTextboxTightWrap = ...
    wdTightFirstAndLastLines: WdTextboxTightWrap = ...
    wdTightFirstLineOnly: WdTextboxTightWrap = ...
    wdTightLastLineOnly: WdTextboxTightWrap = ...
    wdTightNone: WdTextboxTightWrap = ...


class WdTextFormFieldType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTextFormFieldType, values: wdCalculationText (5), wdCurrentDateText (3), wdCurrentTimeText (4), wdDateText (2), wdNumberText (1), wdRegularText (0) """
    value__ = ...
    wdCalculationText: WdTextFormFieldType = ...
    wdCurrentDateText: WdTextFormFieldType = ...
    wdCurrentTimeText: WdTextFormFieldType = ...
    wdDateText: WdTextFormFieldType = ...
    wdNumberText: WdTextFormFieldType = ...
    wdRegularText: WdTextFormFieldType = ...


class WdTextOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTextOrientation, values: wdTextOrientationDownward (3), wdTextOrientationHorizontal (0), wdTextOrientationHorizontalRotatedFarEast (4), wdTextOrientationUpward (2), wdTextOrientationVertical (5), wdTextOrientationVerticalFarEast (1) """
    value__ = ...
    wdTextOrientationDownward: WdTextOrientation = ...
    wdTextOrientationHorizontal: WdTextOrientation = ...
    wdTextOrientationHorizontalRotatedFarEast: WdTextOrientation = ...
    wdTextOrientationUpward: WdTextOrientation = ...
    wdTextOrientationVertical: WdTextOrientation = ...
    wdTextOrientationVerticalFarEast: WdTextOrientation = ...


class WdTextOrientationHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTextOrientationHID, values: emptyenum (0) """
    emptyenum: WdTextOrientationHID = ...
    value__ = ...


class WdTextureIndex(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTextureIndex, values: wdTexture10Percent (100), wdTexture12Pt5Percent (125), wdTexture15Percent (150), wdTexture17Pt5Percent (175), wdTexture20Percent (200), wdTexture22Pt5Percent (225), wdTexture25Percent (250), wdTexture27Pt5Percent (275), wdTexture2Pt5Percent (25), wdTexture30Percent (300), wdTexture32Pt5Percent (325), wdTexture35Percent (350), wdTexture37Pt5Percent (375), wdTexture40Percent (400), wdTexture42Pt5Percent (425), wdTexture45Percent (450), wdTexture47Pt5Percent (475), wdTexture50Percent (500), wdTexture52Pt5Percent (525), wdTexture55Percent (550), wdTexture57Pt5Percent (575), wdTexture5Percent (50), wdTexture60Percent (600), wdTexture62Pt5Percent (625), wdTexture65Percent (650), wdTexture67Pt5Percent (675), wdTexture70Percent (700), wdTexture72Pt5Percent (725), wdTexture75Percent (750), wdTexture77Pt5Percent (775), wdTexture7Pt5Percent (75), wdTexture80Percent (800), wdTexture82Pt5Percent (825), wdTexture85Percent (850), wdTexture87Pt5Percent (875), wdTexture90Percent (900), wdTexture92Pt5Percent (925), wdTexture95Percent (950), wdTexture97Pt5Percent (975), wdTextureCross (-11), wdTextureDarkCross (-5), wdTextureDarkDiagonalCross (-6), wdTextureDarkDiagonalDown (-3), wdTextureDarkDiagonalUp (-4), wdTextureDarkHorizontal (-1), wdTextureDarkVertical (-2), wdTextureDiagonalCross (-12), wdTextureDiagonalDown (-9), wdTextureDiagonalUp (-10), wdTextureHorizontal (-7), wdTextureNone (0), wdTextureSolid (1000), wdTextureVertical (-8) """
    value__ = ...
    wdTexture10Percent: WdTextureIndex = ...
    wdTexture12Pt5Percent: WdTextureIndex = ...
    wdTexture15Percent: WdTextureIndex = ...
    wdTexture17Pt5Percent: WdTextureIndex = ...
    wdTexture20Percent: WdTextureIndex = ...
    wdTexture22Pt5Percent: WdTextureIndex = ...
    wdTexture25Percent: WdTextureIndex = ...
    wdTexture27Pt5Percent: WdTextureIndex = ...
    wdTexture2Pt5Percent: WdTextureIndex = ...
    wdTexture30Percent: WdTextureIndex = ...
    wdTexture32Pt5Percent: WdTextureIndex = ...
    wdTexture35Percent: WdTextureIndex = ...
    wdTexture37Pt5Percent: WdTextureIndex = ...
    wdTexture40Percent: WdTextureIndex = ...
    wdTexture42Pt5Percent: WdTextureIndex = ...
    wdTexture45Percent: WdTextureIndex = ...
    wdTexture47Pt5Percent: WdTextureIndex = ...
    wdTexture50Percent: WdTextureIndex = ...
    wdTexture52Pt5Percent: WdTextureIndex = ...
    wdTexture55Percent: WdTextureIndex = ...
    wdTexture57Pt5Percent: WdTextureIndex = ...
    wdTexture5Percent: WdTextureIndex = ...
    wdTexture60Percent: WdTextureIndex = ...
    wdTexture62Pt5Percent: WdTextureIndex = ...
    wdTexture65Percent: WdTextureIndex = ...
    wdTexture67Pt5Percent: WdTextureIndex = ...
    wdTexture70Percent: WdTextureIndex = ...
    wdTexture72Pt5Percent: WdTextureIndex = ...
    wdTexture75Percent: WdTextureIndex = ...
    wdTexture77Pt5Percent: WdTextureIndex = ...
    wdTexture7Pt5Percent: WdTextureIndex = ...
    wdTexture80Percent: WdTextureIndex = ...
    wdTexture82Pt5Percent: WdTextureIndex = ...
    wdTexture85Percent: WdTextureIndex = ...
    wdTexture87Pt5Percent: WdTextureIndex = ...
    wdTexture90Percent: WdTextureIndex = ...
    wdTexture92Pt5Percent: WdTextureIndex = ...
    wdTexture95Percent: WdTextureIndex = ...
    wdTexture97Pt5Percent: WdTextureIndex = ...
    wdTextureCross: WdTextureIndex = ...
    wdTextureDarkCross: WdTextureIndex = ...
    wdTextureDarkDiagonalCross: WdTextureIndex = ...
    wdTextureDarkDiagonalDown: WdTextureIndex = ...
    wdTextureDarkDiagonalUp: WdTextureIndex = ...
    wdTextureDarkHorizontal: WdTextureIndex = ...
    wdTextureDarkVertical: WdTextureIndex = ...
    wdTextureDiagonalCross: WdTextureIndex = ...
    wdTextureDiagonalDown: WdTextureIndex = ...
    wdTextureDiagonalUp: WdTextureIndex = ...
    wdTextureHorizontal: WdTextureIndex = ...
    wdTextureNone: WdTextureIndex = ...
    wdTextureSolid: WdTextureIndex = ...
    wdTextureVertical: WdTextureIndex = ...


class WdThemeColorIndex(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdThemeColorIndex, values: wdNotThemeColor (-1), wdThemeColorAccent1 (4), wdThemeColorAccent2 (5), wdThemeColorAccent3 (6), wdThemeColorAccent4 (7), wdThemeColorAccent5 (8), wdThemeColorAccent6 (9), wdThemeColorBackground1 (12), wdThemeColorBackground2 (14), wdThemeColorHyperlink (10), wdThemeColorHyperlinkFollowed (11), wdThemeColorMainDark1 (0), wdThemeColorMainDark2 (2), wdThemeColorMainLight1 (1), wdThemeColorMainLight2 (3), wdThemeColorText1 (13), wdThemeColorText2 (15) """
    value__ = ...
    wdNotThemeColor: WdThemeColorIndex = ...
    wdThemeColorAccent1: WdThemeColorIndex = ...
    wdThemeColorAccent2: WdThemeColorIndex = ...
    wdThemeColorAccent3: WdThemeColorIndex = ...
    wdThemeColorAccent4: WdThemeColorIndex = ...
    wdThemeColorAccent5: WdThemeColorIndex = ...
    wdThemeColorAccent6: WdThemeColorIndex = ...
    wdThemeColorBackground1: WdThemeColorIndex = ...
    wdThemeColorBackground2: WdThemeColorIndex = ...
    wdThemeColorHyperlink: WdThemeColorIndex = ...
    wdThemeColorHyperlinkFollowed: WdThemeColorIndex = ...
    wdThemeColorMainDark1: WdThemeColorIndex = ...
    wdThemeColorMainDark2: WdThemeColorIndex = ...
    wdThemeColorMainLight1: WdThemeColorIndex = ...
    wdThemeColorMainLight2: WdThemeColorIndex = ...
    wdThemeColorText1: WdThemeColorIndex = ...
    wdThemeColorText2: WdThemeColorIndex = ...


class WdToaFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdToaFormat, values: wdTOAClassic (1), wdTOADistinctive (2), wdTOAFormal (3), wdTOASimple (4), wdTOATemplate (0) """
    value__ = ...
    wdTOAClassic: WdToaFormat = ...
    wdTOADistinctive: WdToaFormat = ...
    wdTOAFormal: WdToaFormat = ...
    wdTOASimple: WdToaFormat = ...
    wdTOATemplate: WdToaFormat = ...


class WdTocFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTocFormat, values: wdTOCClassic (1), wdTOCDistinctive (2), wdTOCFancy (3), wdTOCFormal (5), wdTOCModern (4), wdTOCSimple (6), wdTOCTemplate (0) """
    value__ = ...
    wdTOCClassic: WdTocFormat = ...
    wdTOCDistinctive: WdTocFormat = ...
    wdTOCFancy: WdTocFormat = ...
    wdTOCFormal: WdTocFormat = ...
    wdTOCModern: WdTocFormat = ...
    wdTOCSimple: WdTocFormat = ...
    wdTOCTemplate: WdTocFormat = ...


class WdTofFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTofFormat, values: wdTOFCentered (3), wdTOFClassic (1), wdTOFDistinctive (2), wdTOFFormal (4), wdTOFSimple (5), wdTOFTemplate (0) """
    value__ = ...
    wdTOFCentered: WdTofFormat = ...
    wdTOFClassic: WdTofFormat = ...
    wdTOFDistinctive: WdTofFormat = ...
    wdTOFFormal: WdTofFormat = ...
    wdTOFSimple: WdTofFormat = ...
    wdTOFTemplate: WdTofFormat = ...


class WdTrailingCharacter(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTrailingCharacter, values: wdTrailingNone (2), wdTrailingSpace (1), wdTrailingTab (0) """
    value__ = ...
    wdTrailingNone: WdTrailingCharacter = ...
    wdTrailingSpace: WdTrailingCharacter = ...
    wdTrailingTab: WdTrailingCharacter = ...


class WdTwoLinesInOneType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdTwoLinesInOneType, values: wdTwoLinesInOneAngleBrackets (4), wdTwoLinesInOneCurlyBrackets (5), wdTwoLinesInOneNoBrackets (1), wdTwoLinesInOneNone (0), wdTwoLinesInOneParentheses (2), wdTwoLinesInOneSquareBrackets (3) """
    value__ = ...
    wdTwoLinesInOneAngleBrackets: WdTwoLinesInOneType = ...
    wdTwoLinesInOneCurlyBrackets: WdTwoLinesInOneType = ...
    wdTwoLinesInOneNoBrackets: WdTwoLinesInOneType = ...
    wdTwoLinesInOneNone: WdTwoLinesInOneType = ...
    wdTwoLinesInOneParentheses: WdTwoLinesInOneType = ...
    wdTwoLinesInOneSquareBrackets: WdTwoLinesInOneType = ...


class WdUnderline(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdUnderline, values: wdUnderlineDash (7), wdUnderlineDashHeavy (23), wdUnderlineDashLong (39), wdUnderlineDashLongHeavy (55), wdUnderlineDotDash (9), wdUnderlineDotDashHeavy (25), wdUnderlineDotDotDash (10), wdUnderlineDotDotDashHeavy (26), wdUnderlineDotted (4), wdUnderlineDottedHeavy (20), wdUnderlineDouble (3), wdUnderlineNone (0), wdUnderlineSingle (1), wdUnderlineThick (6), wdUnderlineWavy (11), wdUnderlineWavyDouble (43), wdUnderlineWavyHeavy (27), wdUnderlineWords (2) """
    value__ = ...
    wdUnderlineDash: WdUnderline = ...
    wdUnderlineDashHeavy: WdUnderline = ...
    wdUnderlineDashLong: WdUnderline = ...
    wdUnderlineDashLongHeavy: WdUnderline = ...
    wdUnderlineDotDash: WdUnderline = ...
    wdUnderlineDotDashHeavy: WdUnderline = ...
    wdUnderlineDotDotDash: WdUnderline = ...
    wdUnderlineDotDotDashHeavy: WdUnderline = ...
    wdUnderlineDotted: WdUnderline = ...
    wdUnderlineDottedHeavy: WdUnderline = ...
    wdUnderlineDouble: WdUnderline = ...
    wdUnderlineNone: WdUnderline = ...
    wdUnderlineSingle: WdUnderline = ...
    wdUnderlineThick: WdUnderline = ...
    wdUnderlineWavy: WdUnderline = ...
    wdUnderlineWavyDouble: WdUnderline = ...
    wdUnderlineWavyHeavy: WdUnderline = ...
    wdUnderlineWords: WdUnderline = ...


class WdUnits(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdUnits, values: wdCell (12), wdCharacter (1), wdCharacterFormatting (13), wdColumn (9), wdItem (16), wdLine (5), wdParagraph (4), wdParagraphFormatting (14), wdRow (10), wdScreen (7), wdSection (8), wdSentence (3), wdStory (6), wdTable (15), wdWindow (11), wdWord (2) """
    value__ = ...
    wdCell: WdUnits = ...
    wdCharacter: WdUnits = ...
    wdCharacterFormatting: WdUnits = ...
    wdColumn: WdUnits = ...
    wdItem: WdUnits = ...
    wdLine: WdUnits = ...
    wdParagraph: WdUnits = ...
    wdParagraphFormatting: WdUnits = ...
    wdRow: WdUnits = ...
    wdScreen: WdUnits = ...
    wdSection: WdUnits = ...
    wdSentence: WdUnits = ...
    wdStory: WdUnits = ...
    wdTable: WdUnits = ...
    wdWindow: WdUnits = ...
    wdWord: WdUnits = ...


class WdUpdateStyleListBehavior(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdUpdateStyleListBehavior, values: wdListBehaviorAddBulletsNumbering (1), wdListBehaviorKeepPreviousPattern (0) """
    value__ = ...
    wdListBehaviorAddBulletsNumbering: WdUpdateStyleListBehavior = ...
    wdListBehaviorKeepPreviousPattern: WdUpdateStyleListBehavior = ...


class WdUseFormattingFrom(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdUseFormattingFrom, values: wdFormattingFromCurrent (0), wdFormattingFromPrompt (2), wdFormattingFromSelected (1) """
    value__ = ...
    wdFormattingFromCurrent: WdUseFormattingFrom = ...
    wdFormattingFromPrompt: WdUseFormattingFrom = ...
    wdFormattingFromSelected: WdUseFormattingFrom = ...


class WdVerticalAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdVerticalAlignment, values: wdAlignVerticalBottom (3), wdAlignVerticalCenter (1), wdAlignVerticalJustify (2), wdAlignVerticalTop (0) """
    value__ = ...
    wdAlignVerticalBottom: WdVerticalAlignment = ...
    wdAlignVerticalCenter: WdVerticalAlignment = ...
    wdAlignVerticalJustify: WdVerticalAlignment = ...
    wdAlignVerticalTop: WdVerticalAlignment = ...


class WdViewType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdViewType, values: wdConflictView (8), wdMasterView (5), wdNormalView (1), wdOutlineView (2), wdPrintPreview (4), wdPrintView (3), wdReadingView (7), wdWebView (6) """
    value__ = ...
    wdConflictView: WdViewType = ...
    wdMasterView: WdViewType = ...
    wdNormalView: WdViewType = ...
    wdOutlineView: WdViewType = ...
    wdPrintPreview: WdViewType = ...
    wdPrintView: WdViewType = ...
    wdReadingView: WdViewType = ...
    wdWebView: WdViewType = ...


class WdViewTypeOld(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdViewTypeOld, values: wdOnlineView (6), wdPageView (3) """
    value__ = ...
    wdOnlineView: WdViewTypeOld = ...
    wdPageView: WdViewTypeOld = ...


class WdVisualSelection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdVisualSelection, values: wdVisualSelectionBlock (0), wdVisualSelectionContinuous (1) """
    value__ = ...
    wdVisualSelectionBlock: WdVisualSelection = ...
    wdVisualSelectionContinuous: WdVisualSelection = ...


class WdWindowState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdWindowState, values: wdWindowStateMaximize (1), wdWindowStateMinimize (2), wdWindowStateNormal (0) """
    value__ = ...
    wdWindowStateMaximize: WdWindowState = ...
    wdWindowStateMinimize: WdWindowState = ...
    wdWindowStateNormal: WdWindowState = ...


class WdWindowType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdWindowType, values: wdWindowDocument (0), wdWindowTemplate (1) """
    value__ = ...
    wdWindowDocument: WdWindowType = ...
    wdWindowTemplate: WdWindowType = ...


class WdWordDialog(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdWordDialog, values: wdDialogBuildingBlockOrganizer (2067), wdDialogCompatibilityChecker (2439), wdDialogConnect (420), wdDialogConsistencyChecker (1121), wdDialogContentControlProperties (2394), wdDialogControlRun (235), wdDialogConvertObject (392), wdDialogCopyFile (300), wdDialogCreateAutoText (872), wdDialogCreateSource (1922), wdDialogCSSLinks (1261), wdDialogDocumentInspector (1482), wdDialogDocumentStatistics (78), wdDialogDrawAlign (634), wdDialogDrawSnapToGrid (633), wdDialogEditAutoText (985), wdDialogEditCreatePublisher (732), wdDialogEditFind (112), wdDialogEditFrame (458), wdDialogEditGoTo (896), wdDialogEditGoToOld (811), wdDialogEditLinks (124), wdDialogEditObject (125), wdDialogEditPasteSpecial (111), wdDialogEditPublishOptions (735), wdDialogEditReplace (117), wdDialogEditStyle (120), wdDialogEditSubscribeOptions (736), wdDialogEditSubscribeTo (733), wdDialogEditTOACategory (625), wdDialogEmailOptions (863), wdDialogExportAsFixedFormat (2349), wdDialogFileDocumentLayout (178), wdDialogFileFind (99), wdDialogFileMacCustomPageSetupGX (737), wdDialogFileMacPageSetup (685), wdDialogFileMacPageSetupGX (444), wdDialogFileNew (79), wdDialogFileNew2007 (1116), wdDialogFileOpen (80), wdDialogFilePageSetup (178), wdDialogFilePrint (88), wdDialogFilePrintOneCopy (445), wdDialogFilePrintSetup (97), wdDialogFileRoutingSlip (624), wdDialogFileSaveAs (84), wdDialogFileSaveVersion (1007), wdDialogFileSummaryInfo (86), wdDialogFileVersions (945), wdDialogFitText (983), wdDialogFontSubstitution (581), wdDialogFormatAddrFonts (103), wdDialogFormatBordersAndShading (189), wdDialogFormatBulletsAndNumbering (824), wdDialogFormatCallout (610), wdDialogFormatChangeCase (322), wdDialogFormatColumns (177), wdDialogFormatDefineStyleBorders (185), wdDialogFormatDefineStyleFont (181), wdDialogFormatDefineStyleFrame (184), wdDialogFormatDefineStyleLang (186), wdDialogFormatDefineStylePara (182), wdDialogFormatDefineStyleTabs (183), wdDialogFormatDrawingObject (960), wdDialogFormatDropCap (488), wdDialogFormatEncloseCharacters (1162), wdDialogFormatFont (174), wdDialogFormatFrame (190), wdDialogFormatPageNumber (298), wdDialogFormatParagraph (175), wdDialogFormatPicture (187), wdDialogFormatRetAddrFonts (221), wdDialogFormatSectionLayout (176), wdDialogFormatStyle (180), wdDialogFormatStyleGallery (505), wdDialogFormatStylesCustom (1248), wdDialogFormatTabs (179), wdDialogFormatTheme (855), wdDialogFormattingRestrictions (1427), wdDialogFormFieldHelp (361), wdDialogFormFieldOptions (353), wdDialogFrameSetProperties (1074), wdDialogHelpAbout (9), wdDialogHelpWordPerfectHelp (10), wdDialogHelpWordPerfectHelpOptions (511), wdDialogHorizontalInVertical (1160), wdDialogIMESetDefault (1094), wdDialogInsertAddCaption (402), wdDialogInsertAutoCaption (359), wdDialogInsertBookmark (168), wdDialogInsertBreak (159), wdDialogInsertCaption (357), wdDialogInsertCaptionNumbering (358), wdDialogInsertCrossReference (367), wdDialogInsertDatabase (341), wdDialogInsertDateTime (165), wdDialogInsertField (166), wdDialogInsertFile (164), wdDialogInsertFootnote (370), wdDialogInsertFormField (483), wdDialogInsertHyperlink (925), wdDialogInsertIndex (170), wdDialogInsertIndexAndTables (473), wdDialogInsertMergeField (167), wdDialogInsertNumber (812), wdDialogInsertObject (172), wdDialogInsertPageNumbers (294), wdDialogInsertPicture (163), wdDialogInsertPlaceholder (2348), wdDialogInsertSource (2120), wdDialogInsertSubdocument (583), wdDialogInsertSymbol (162), wdDialogInsertTableOfAuthorities (471), wdDialogInsertTableOfContents (171), wdDialogInsertTableOfFigures (472), wdDialogInsertWebComponent (1324), wdDialogLabelOptions (1367), wdDialogLetterWizard (821), wdDialogListCommands (723), wdDialogMailMerge (676), wdDialogMailMergeCheck (677), wdDialogMailMergeCreateDataSource (642), wdDialogMailMergeCreateHeaderSource (643), wdDialogMailMergeFieldMapping (1304), wdDialogMailMergeFindRecipient (1326), wdDialogMailMergeFindRecord (569), wdDialogMailMergeHelper (680), wdDialogMailMergeInsertAddressBlock (1305), wdDialogMailMergeInsertAsk (4047), wdDialogMailMergeInsertFields (1307), wdDialogMailMergeInsertFillIn (4048), wdDialogMailMergeInsertGreetingLine (1306), wdDialogMailMergeInsertIf (4049), wdDialogMailMergeInsertNextIf (4053), wdDialogMailMergeInsertSet (4054), wdDialogMailMergeInsertSkipIf (4055), wdDialogMailMergeOpenDataSource (81), wdDialogMailMergeOpenHeaderSource (82), wdDialogMailMergeQueryOptions (681), wdDialogMailMergeRecipients (1308), wdDialogMailMergeSetDocumentType (1339), wdDialogMailMergeUseAddressBook (779), wdDialogMarkCitation (463), wdDialogMarkIndexEntry (169), wdDialogMarkTableOfContentsEntry (442), wdDialogMyPermission (1437), wdDialogNewToolbar (586), wdDialogNoteOptions (373), wdDialogOMathRecognizedFunctions (2165), wdDialogOrganizer (222), wdDialogPermission (1469), wdDialogPhoneticGuide (986), wdDialogReviewAfmtRevisions (570), wdDialogSchemaLibrary (1417), wdDialogSearch (1363), wdDialogShowRepairs (1381), wdDialogSourceManager (1920), wdDialogStyleManagement (1948), wdDialogTableAutoFormat (563), wdDialogTableCellOptions (1081), wdDialogTableColumnWidth (143), wdDialogTableDeleteCells (133), wdDialogTableFormatCell (612), wdDialogTableFormula (348), wdDialogTableInsertCells (130), wdDialogTableInsertRow (131), wdDialogTableInsertTable (129), wdDialogTableOfCaptionsOptions (551), wdDialogTableOfContentsOptions (470), wdDialogTableProperties (861), wdDialogTableRowHeight (142), wdDialogTableSort (199), wdDialogTableSplitCells (137), wdDialogTableTableOptions (1080), wdDialogTableToText (128), wdDialogTableWrapping (854), wdDialogTCSCTranslator (1156), wdDialogTextToTable (127), wdDialogToolsAcceptRejectChanges (506), wdDialogToolsAdvancedSettings (206), wdDialogToolsAutoCorrect (378), wdDialogToolsAutoCorrectExceptions (762), wdDialogToolsAutoManager (915), wdDialogToolsAutoSummarize (874), wdDialogToolsBulletsNumbers (196), wdDialogToolsCompareDocuments (198), wdDialogToolsCreateDirectory (833), wdDialogToolsCreateEnvelope (173), wdDialogToolsCreateLabels (489), wdDialogToolsCustomize (152), wdDialogToolsCustomizeKeyboard (432), wdDialogToolsCustomizeMenuBar (615), wdDialogToolsCustomizeMenus (433), wdDialogToolsDictionary (989), wdDialogToolsEnvelopesAndLabels (607), wdDialogToolsGrammarSettings (885), wdDialogToolsHangulHanjaConversion (784), wdDialogToolsHighlightChanges (197), wdDialogToolsHyphenation (195), wdDialogToolsLanguage (188), wdDialogToolsMacro (215), wdDialogToolsMacroRecord (214), wdDialogToolsManageFields (631), wdDialogToolsMergeDocuments (435), wdDialogToolsOptions (974), wdDialogToolsOptionsAutoFormat (959), wdDialogToolsOptionsAutoFormatAsYouType (778), wdDialogToolsOptionsBidi (1029), wdDialogToolsOptionsCompatibility (525), wdDialogToolsOptionsEdit (224), wdDialogToolsOptionsEditCopyPaste (1356), wdDialogToolsOptionsFileLocations (225), wdDialogToolsOptionsFuzzy (790), wdDialogToolsOptionsGeneral (203), wdDialogToolsOptionsPrint (208), wdDialogToolsOptionsSave (209), wdDialogToolsOptionsSecurity (1361), wdDialogToolsOptionsSmartTag (1395), wdDialogToolsOptionsSpellingAndGrammar (211), wdDialogToolsOptionsTrackChanges (386), wdDialogToolsOptionsTypography (739), wdDialogToolsOptionsUserInfo (213), wdDialogToolsOptionsView (204), wdDialogToolsProtectDocument (503), wdDialogToolsProtectSection (578), wdDialogToolsRevisions (197), wdDialogToolsSpellingAndGrammar (828), wdDialogToolsTemplates (87), wdDialogToolsThesaurus (194), wdDialogToolsUnprotectDocument (521), wdDialogToolsWordCount (228), wdDialogTwoLinesInOne (1161), wdDialogUpdateTOC (331), wdDialogViewZoom (577), wdDialogWebOptions (898), wdDialogWindowActivate (220), wdDialogXMLElementAttributes (1460), wdDialogXMLOptions (1425) """
    value__ = ...
    wdDialogBuildingBlockOrganizer: WdWordDialog = ...
    wdDialogCompatibilityChecker: WdWordDialog = ...
    wdDialogConnect: WdWordDialog = ...
    wdDialogConsistencyChecker: WdWordDialog = ...
    wdDialogContentControlProperties: WdWordDialog = ...
    wdDialogControlRun: WdWordDialog = ...
    wdDialogConvertObject: WdWordDialog = ...
    wdDialogCopyFile: WdWordDialog = ...
    wdDialogCreateAutoText: WdWordDialog = ...
    wdDialogCreateSource: WdWordDialog = ...
    wdDialogCSSLinks: WdWordDialog = ...
    wdDialogDocumentInspector: WdWordDialog = ...
    wdDialogDocumentStatistics: WdWordDialog = ...
    wdDialogDrawAlign: WdWordDialog = ...
    wdDialogDrawSnapToGrid: WdWordDialog = ...
    wdDialogEditAutoText: WdWordDialog = ...
    wdDialogEditCreatePublisher: WdWordDialog = ...
    wdDialogEditFind: WdWordDialog = ...
    wdDialogEditFrame: WdWordDialog = ...
    wdDialogEditGoTo: WdWordDialog = ...
    wdDialogEditGoToOld: WdWordDialog = ...
    wdDialogEditLinks: WdWordDialog = ...
    wdDialogEditObject: WdWordDialog = ...
    wdDialogEditPasteSpecial: WdWordDialog = ...
    wdDialogEditPublishOptions: WdWordDialog = ...
    wdDialogEditReplace: WdWordDialog = ...
    wdDialogEditStyle: WdWordDialog = ...
    wdDialogEditSubscribeOptions: WdWordDialog = ...
    wdDialogEditSubscribeTo: WdWordDialog = ...
    wdDialogEditTOACategory: WdWordDialog = ...
    wdDialogEmailOptions: WdWordDialog = ...
    wdDialogExportAsFixedFormat: WdWordDialog = ...
    wdDialogFileDocumentLayout: WdWordDialog = ...
    wdDialogFileFind: WdWordDialog = ...
    wdDialogFileMacCustomPageSetupGX: WdWordDialog = ...
    wdDialogFileMacPageSetup: WdWordDialog = ...
    wdDialogFileMacPageSetupGX: WdWordDialog = ...
    wdDialogFileNew: WdWordDialog = ...
    wdDialogFileNew2007: WdWordDialog = ...
    wdDialogFileOpen: WdWordDialog = ...
    wdDialogFilePageSetup: WdWordDialog = ...
    wdDialogFilePrint: WdWordDialog = ...
    wdDialogFilePrintOneCopy: WdWordDialog = ...
    wdDialogFilePrintSetup: WdWordDialog = ...
    wdDialogFileRoutingSlip: WdWordDialog = ...
    wdDialogFileSaveAs: WdWordDialog = ...
    wdDialogFileSaveVersion: WdWordDialog = ...
    wdDialogFileSummaryInfo: WdWordDialog = ...
    wdDialogFileVersions: WdWordDialog = ...
    wdDialogFitText: WdWordDialog = ...
    wdDialogFontSubstitution: WdWordDialog = ...
    wdDialogFormatAddrFonts: WdWordDialog = ...
    wdDialogFormatBordersAndShading: WdWordDialog = ...
    wdDialogFormatBulletsAndNumbering: WdWordDialog = ...
    wdDialogFormatCallout: WdWordDialog = ...
    wdDialogFormatChangeCase: WdWordDialog = ...
    wdDialogFormatColumns: WdWordDialog = ...
    wdDialogFormatDefineStyleBorders: WdWordDialog = ...
    wdDialogFormatDefineStyleFont: WdWordDialog = ...
    wdDialogFormatDefineStyleFrame: WdWordDialog = ...
    wdDialogFormatDefineStyleLang: WdWordDialog = ...
    wdDialogFormatDefineStylePara: WdWordDialog = ...
    wdDialogFormatDefineStyleTabs: WdWordDialog = ...
    wdDialogFormatDrawingObject: WdWordDialog = ...
    wdDialogFormatDropCap: WdWordDialog = ...
    wdDialogFormatEncloseCharacters: WdWordDialog = ...
    wdDialogFormatFont: WdWordDialog = ...
    wdDialogFormatFrame: WdWordDialog = ...
    wdDialogFormatPageNumber: WdWordDialog = ...
    wdDialogFormatParagraph: WdWordDialog = ...
    wdDialogFormatPicture: WdWordDialog = ...
    wdDialogFormatRetAddrFonts: WdWordDialog = ...
    wdDialogFormatSectionLayout: WdWordDialog = ...
    wdDialogFormatStyle: WdWordDialog = ...
    wdDialogFormatStyleGallery: WdWordDialog = ...
    wdDialogFormatStylesCustom: WdWordDialog = ...
    wdDialogFormatTabs: WdWordDialog = ...
    wdDialogFormatTheme: WdWordDialog = ...
    wdDialogFormattingRestrictions: WdWordDialog = ...
    wdDialogFormFieldHelp: WdWordDialog = ...
    wdDialogFormFieldOptions: WdWordDialog = ...
    wdDialogFrameSetProperties: WdWordDialog = ...
    wdDialogHelpAbout: WdWordDialog = ...
    wdDialogHelpWordPerfectHelp: WdWordDialog = ...
    wdDialogHelpWordPerfectHelpOptions: WdWordDialog = ...
    wdDialogHorizontalInVertical: WdWordDialog = ...
    wdDialogIMESetDefault: WdWordDialog = ...
    wdDialogInsertAddCaption: WdWordDialog = ...
    wdDialogInsertAutoCaption: WdWordDialog = ...
    wdDialogInsertBookmark: WdWordDialog = ...
    wdDialogInsertBreak: WdWordDialog = ...
    wdDialogInsertCaption: WdWordDialog = ...
    wdDialogInsertCaptionNumbering: WdWordDialog = ...
    wdDialogInsertCrossReference: WdWordDialog = ...
    wdDialogInsertDatabase: WdWordDialog = ...
    wdDialogInsertDateTime: WdWordDialog = ...
    wdDialogInsertField: WdWordDialog = ...
    wdDialogInsertFile: WdWordDialog = ...
    wdDialogInsertFootnote: WdWordDialog = ...
    wdDialogInsertFormField: WdWordDialog = ...
    wdDialogInsertHyperlink: WdWordDialog = ...
    wdDialogInsertIndex: WdWordDialog = ...
    wdDialogInsertIndexAndTables: WdWordDialog = ...
    wdDialogInsertMergeField: WdWordDialog = ...
    wdDialogInsertNumber: WdWordDialog = ...
    wdDialogInsertObject: WdWordDialog = ...
    wdDialogInsertPageNumbers: WdWordDialog = ...
    wdDialogInsertPicture: WdWordDialog = ...
    wdDialogInsertPlaceholder: WdWordDialog = ...
    wdDialogInsertSource: WdWordDialog = ...
    wdDialogInsertSubdocument: WdWordDialog = ...
    wdDialogInsertSymbol: WdWordDialog = ...
    wdDialogInsertTableOfAuthorities: WdWordDialog = ...
    wdDialogInsertTableOfContents: WdWordDialog = ...
    wdDialogInsertTableOfFigures: WdWordDialog = ...
    wdDialogInsertWebComponent: WdWordDialog = ...
    wdDialogLabelOptions: WdWordDialog = ...
    wdDialogLetterWizard: WdWordDialog = ...
    wdDialogListCommands: WdWordDialog = ...
    wdDialogMailMerge: WdWordDialog = ...
    wdDialogMailMergeCheck: WdWordDialog = ...
    wdDialogMailMergeCreateDataSource: WdWordDialog = ...
    wdDialogMailMergeCreateHeaderSource: WdWordDialog = ...
    wdDialogMailMergeFieldMapping: WdWordDialog = ...
    wdDialogMailMergeFindRecipient: WdWordDialog = ...
    wdDialogMailMergeFindRecord: WdWordDialog = ...
    wdDialogMailMergeHelper: WdWordDialog = ...
    wdDialogMailMergeInsertAddressBlock: WdWordDialog = ...
    wdDialogMailMergeInsertAsk: WdWordDialog = ...
    wdDialogMailMergeInsertFields: WdWordDialog = ...
    wdDialogMailMergeInsertFillIn: WdWordDialog = ...
    wdDialogMailMergeInsertGreetingLine: WdWordDialog = ...
    wdDialogMailMergeInsertIf: WdWordDialog = ...
    wdDialogMailMergeInsertNextIf: WdWordDialog = ...
    wdDialogMailMergeInsertSet: WdWordDialog = ...
    wdDialogMailMergeInsertSkipIf: WdWordDialog = ...
    wdDialogMailMergeOpenDataSource: WdWordDialog = ...
    wdDialogMailMergeOpenHeaderSource: WdWordDialog = ...
    wdDialogMailMergeQueryOptions: WdWordDialog = ...
    wdDialogMailMergeRecipients: WdWordDialog = ...
    wdDialogMailMergeSetDocumentType: WdWordDialog = ...
    wdDialogMailMergeUseAddressBook: WdWordDialog = ...
    wdDialogMarkCitation: WdWordDialog = ...
    wdDialogMarkIndexEntry: WdWordDialog = ...
    wdDialogMarkTableOfContentsEntry: WdWordDialog = ...
    wdDialogMyPermission: WdWordDialog = ...
    wdDialogNewToolbar: WdWordDialog = ...
    wdDialogNoteOptions: WdWordDialog = ...
    wdDialogOMathRecognizedFunctions: WdWordDialog = ...
    wdDialogOrganizer: WdWordDialog = ...
    wdDialogPermission: WdWordDialog = ...
    wdDialogPhoneticGuide: WdWordDialog = ...
    wdDialogReviewAfmtRevisions: WdWordDialog = ...
    wdDialogSchemaLibrary: WdWordDialog = ...
    wdDialogSearch: WdWordDialog = ...
    wdDialogShowRepairs: WdWordDialog = ...
    wdDialogSourceManager: WdWordDialog = ...
    wdDialogStyleManagement: WdWordDialog = ...
    wdDialogTableAutoFormat: WdWordDialog = ...
    wdDialogTableCellOptions: WdWordDialog = ...
    wdDialogTableColumnWidth: WdWordDialog = ...
    wdDialogTableDeleteCells: WdWordDialog = ...
    wdDialogTableFormatCell: WdWordDialog = ...
    wdDialogTableFormula: WdWordDialog = ...
    wdDialogTableInsertCells: WdWordDialog = ...
    wdDialogTableInsertRow: WdWordDialog = ...
    wdDialogTableInsertTable: WdWordDialog = ...
    wdDialogTableOfCaptionsOptions: WdWordDialog = ...
    wdDialogTableOfContentsOptions: WdWordDialog = ...
    wdDialogTableProperties: WdWordDialog = ...
    wdDialogTableRowHeight: WdWordDialog = ...
    wdDialogTableSort: WdWordDialog = ...
    wdDialogTableSplitCells: WdWordDialog = ...
    wdDialogTableTableOptions: WdWordDialog = ...
    wdDialogTableToText: WdWordDialog = ...
    wdDialogTableWrapping: WdWordDialog = ...
    wdDialogTCSCTranslator: WdWordDialog = ...
    wdDialogTextToTable: WdWordDialog = ...
    wdDialogToolsAcceptRejectChanges: WdWordDialog = ...
    wdDialogToolsAdvancedSettings: WdWordDialog = ...
    wdDialogToolsAutoCorrect: WdWordDialog = ...
    wdDialogToolsAutoCorrectExceptions: WdWordDialog = ...
    wdDialogToolsAutoManager: WdWordDialog = ...
    wdDialogToolsAutoSummarize: WdWordDialog = ...
    wdDialogToolsBulletsNumbers: WdWordDialog = ...
    wdDialogToolsCompareDocuments: WdWordDialog = ...
    wdDialogToolsCreateDirectory: WdWordDialog = ...
    wdDialogToolsCreateEnvelope: WdWordDialog = ...
    wdDialogToolsCreateLabels: WdWordDialog = ...
    wdDialogToolsCustomize: WdWordDialog = ...
    wdDialogToolsCustomizeKeyboard: WdWordDialog = ...
    wdDialogToolsCustomizeMenuBar: WdWordDialog = ...
    wdDialogToolsCustomizeMenus: WdWordDialog = ...
    wdDialogToolsDictionary: WdWordDialog = ...
    wdDialogToolsEnvelopesAndLabels: WdWordDialog = ...
    wdDialogToolsGrammarSettings: WdWordDialog = ...
    wdDialogToolsHangulHanjaConversion: WdWordDialog = ...
    wdDialogToolsHighlightChanges: WdWordDialog = ...
    wdDialogToolsHyphenation: WdWordDialog = ...
    wdDialogToolsLanguage: WdWordDialog = ...
    wdDialogToolsMacro: WdWordDialog = ...
    wdDialogToolsMacroRecord: WdWordDialog = ...
    wdDialogToolsManageFields: WdWordDialog = ...
    wdDialogToolsMergeDocuments: WdWordDialog = ...
    wdDialogToolsOptions: WdWordDialog = ...
    wdDialogToolsOptionsAutoFormat: WdWordDialog = ...
    wdDialogToolsOptionsAutoFormatAsYouType: WdWordDialog = ...
    wdDialogToolsOptionsBidi: WdWordDialog = ...
    wdDialogToolsOptionsCompatibility: WdWordDialog = ...
    wdDialogToolsOptionsEdit: WdWordDialog = ...
    wdDialogToolsOptionsEditCopyPaste: WdWordDialog = ...
    wdDialogToolsOptionsFileLocations: WdWordDialog = ...
    wdDialogToolsOptionsFuzzy: WdWordDialog = ...
    wdDialogToolsOptionsGeneral: WdWordDialog = ...
    wdDialogToolsOptionsPrint: WdWordDialog = ...
    wdDialogToolsOptionsSave: WdWordDialog = ...
    wdDialogToolsOptionsSecurity: WdWordDialog = ...
    wdDialogToolsOptionsSmartTag: WdWordDialog = ...
    wdDialogToolsOptionsSpellingAndGrammar: WdWordDialog = ...
    wdDialogToolsOptionsTrackChanges: WdWordDialog = ...
    wdDialogToolsOptionsTypography: WdWordDialog = ...
    wdDialogToolsOptionsUserInfo: WdWordDialog = ...
    wdDialogToolsOptionsView: WdWordDialog = ...
    wdDialogToolsProtectDocument: WdWordDialog = ...
    wdDialogToolsProtectSection: WdWordDialog = ...
    wdDialogToolsRevisions: WdWordDialog = ...
    wdDialogToolsSpellingAndGrammar: WdWordDialog = ...
    wdDialogToolsTemplates: WdWordDialog = ...
    wdDialogToolsThesaurus: WdWordDialog = ...
    wdDialogToolsUnprotectDocument: WdWordDialog = ...
    wdDialogToolsWordCount: WdWordDialog = ...
    wdDialogTwoLinesInOne: WdWordDialog = ...
    wdDialogUpdateTOC: WdWordDialog = ...
    wdDialogViewZoom: WdWordDialog = ...
    wdDialogWebOptions: WdWordDialog = ...
    wdDialogWindowActivate: WdWordDialog = ...
    wdDialogXMLElementAttributes: WdWordDialog = ...
    wdDialogXMLOptions: WdWordDialog = ...


class WdWordDialogHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdWordDialogHID, values: emptyenum (0) """
    emptyenum: WdWordDialogHID = ...
    value__ = ...


class WdWordDialogTab(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdWordDialogTab, values: wdDialogEmailOptionsTabQuoting (1900002), wdDialogEmailOptionsTabSignature (1900000), wdDialogEmailOptionsTabStationary (1900001), wdDialogFilePageSetupTabCharsLines (150004), wdDialogFilePageSetupTabLayout (150003), wdDialogFilePageSetupTabMargins (150000), wdDialogFilePageSetupTabPaper (150001), wdDialogFormatBordersAndShadingTabBorders (700000), wdDialogFormatBordersAndShadingTabPageBorder (700001), wdDialogFormatBordersAndShadingTabShading (700002), wdDialogFormatBulletsAndNumberingTabBulleted (1500000), wdDialogFormatBulletsAndNumberingTabNumbered (1500001), wdDialogFormatBulletsAndNumberingTabOutlineNumbered (1500002), wdDialogFormatDrawingObjectTabColorsAndLines (1200000), wdDialogFormatDrawingObjectTabHR (1200007), wdDialogFormatDrawingObjectTabPicture (1200004), wdDialogFormatDrawingObjectTabPosition (1200002), wdDialogFormatDrawingObjectTabSize (1200001), wdDialogFormatDrawingObjectTabTextbox (1200005), wdDialogFormatDrawingObjectTabWeb (1200006), wdDialogFormatDrawingObjectTabWrapping (1200003), wdDialogFormatFontTabAnimation (600002), wdDialogFormatFontTabCharacterSpacing (600001), wdDialogFormatFontTabFont (600000), wdDialogFormatParagraphTabIndentsAndSpacing (1000000), wdDialogFormatParagraphTabTeisai (1000002), wdDialogFormatParagraphTabTextFlow (1000001), wdDialogInsertIndexAndTablesTabIndex (400000), wdDialogInsertIndexAndTablesTabTableOfAuthorities (400003), wdDialogInsertIndexAndTablesTabTableOfContents (400001), wdDialogInsertIndexAndTablesTabTableOfFigures (400002), wdDialogInsertSymbolTabSpecialCharacters (200001), wdDialogInsertSymbolTabSymbols (200000), wdDialogLetterWizardTabLetterFormat (1600000), wdDialogLetterWizardTabOtherElements (1600002), wdDialogLetterWizardTabRecipientInfo (1600001), wdDialogLetterWizardTabSenderInfo (1600003), wdDialogNoteOptionsTabAllEndnotes (300001), wdDialogNoteOptionsTabAllFootnotes (300000), wdDialogOrganizerTabAutoText (500001), wdDialogOrganizerTabCommandBars (500002), wdDialogOrganizerTabMacros (500003), wdDialogOrganizerTabStyles (500000), wdDialogStyleManagementTabEdit (2200000), wdDialogStyleManagementTabRecommend (2200001), wdDialogStyleManagementTabRestrict (2200002), wdDialogTablePropertiesTabCell (1800003), wdDialogTablePropertiesTabColumn (1800002), wdDialogTablePropertiesTabRow (1800001), wdDialogTablePropertiesTabTable (1800000), wdDialogTemplates (2100000), wdDialogTemplatesLinkedCSS (2100003), wdDialogTemplatesXMLExpansionPacks (2100002), wdDialogTemplatesXMLSchema (2100001), wdDialogToolsAutoCorrectExceptionsTabFirstLetter (1400000), wdDialogToolsAutoCorrectExceptionsTabHangulAndAlphabet (1400002), wdDialogToolsAutoCorrectExceptionsTabIac (1400003), wdDialogToolsAutoCorrectExceptionsTabInitialCaps (1400001), wdDialogToolsAutoManagerTabAutoCorrect (1700000), wdDialogToolsAutoManagerTabAutoFormat (1700003), wdDialogToolsAutoManagerTabAutoFormatAsYouType (1700001), wdDialogToolsAutoManagerTabAutoText (1700002), wdDialogToolsAutoManagerTabSmartTags (1700004), wdDialogToolsEnvelopesAndLabelsTabEnvelopes (800000), wdDialogToolsEnvelopesAndLabelsTabLabels (800001), wdDialogToolsOptionsTabAcetate (1266), wdDialogToolsOptionsTabBidi (1029), wdDialogToolsOptionsTabCompatibility (525), wdDialogToolsOptionsTabEdit (224), wdDialogToolsOptionsTabFileLocations (225), wdDialogToolsOptionsTabFuzzy (790), wdDialogToolsOptionsTabGeneral (203), wdDialogToolsOptionsTabHangulHanjaConversion (786), wdDialogToolsOptionsTabPrint (208), wdDialogToolsOptionsTabProofread (211), wdDialogToolsOptionsTabSave (209), wdDialogToolsOptionsTabSecurity (1361), wdDialogToolsOptionsTabTrackChanges (386), wdDialogToolsOptionsTabTypography (739), wdDialogToolsOptionsTabUserInfo (213), wdDialogToolsOptionsTabView (204), wdDialogWebOptionsBrowsers (2000000), wdDialogWebOptionsEncoding (2000003), wdDialogWebOptionsFiles (2000001), wdDialogWebOptionsFonts (2000004), wdDialogWebOptionsGeneral (2000000), wdDialogWebOptionsPictures (2000002) """
    value__ = ...
    wdDialogEmailOptionsTabQuoting: WdWordDialogTab = ...
    wdDialogEmailOptionsTabSignature: WdWordDialogTab = ...
    wdDialogEmailOptionsTabStationary: WdWordDialogTab = ...
    wdDialogFilePageSetupTabCharsLines: WdWordDialogTab = ...
    wdDialogFilePageSetupTabLayout: WdWordDialogTab = ...
    wdDialogFilePageSetupTabMargins: WdWordDialogTab = ...
    wdDialogFilePageSetupTabPaper: WdWordDialogTab = ...
    wdDialogFormatBordersAndShadingTabBorders: WdWordDialogTab = ...
    wdDialogFormatBordersAndShadingTabPageBorder: WdWordDialogTab = ...
    wdDialogFormatBordersAndShadingTabShading: WdWordDialogTab = ...
    wdDialogFormatBulletsAndNumberingTabBulleted: WdWordDialogTab = ...
    wdDialogFormatBulletsAndNumberingTabNumbered: WdWordDialogTab = ...
    wdDialogFormatBulletsAndNumberingTabOutlineNumbered: WdWordDialogTab = ...
    wdDialogFormatDrawingObjectTabColorsAndLines: WdWordDialogTab = ...
    wdDialogFormatDrawingObjectTabHR: WdWordDialogTab = ...
    wdDialogFormatDrawingObjectTabPicture: WdWordDialogTab = ...
    wdDialogFormatDrawingObjectTabPosition: WdWordDialogTab = ...
    wdDialogFormatDrawingObjectTabSize: WdWordDialogTab = ...
    wdDialogFormatDrawingObjectTabTextbox: WdWordDialogTab = ...
    wdDialogFormatDrawingObjectTabWeb: WdWordDialogTab = ...
    wdDialogFormatDrawingObjectTabWrapping: WdWordDialogTab = ...
    wdDialogFormatFontTabAnimation: WdWordDialogTab = ...
    wdDialogFormatFontTabCharacterSpacing: WdWordDialogTab = ...
    wdDialogFormatFontTabFont: WdWordDialogTab = ...
    wdDialogFormatParagraphTabIndentsAndSpacing: WdWordDialogTab = ...
    wdDialogFormatParagraphTabTeisai: WdWordDialogTab = ...
    wdDialogFormatParagraphTabTextFlow: WdWordDialogTab = ...
    wdDialogInsertIndexAndTablesTabIndex: WdWordDialogTab = ...
    wdDialogInsertIndexAndTablesTabTableOfAuthorities: WdWordDialogTab = ...
    wdDialogInsertIndexAndTablesTabTableOfContents: WdWordDialogTab = ...
    wdDialogInsertIndexAndTablesTabTableOfFigures: WdWordDialogTab = ...
    wdDialogInsertSymbolTabSpecialCharacters: WdWordDialogTab = ...
    wdDialogInsertSymbolTabSymbols: WdWordDialogTab = ...
    wdDialogLetterWizardTabLetterFormat: WdWordDialogTab = ...
    wdDialogLetterWizardTabOtherElements: WdWordDialogTab = ...
    wdDialogLetterWizardTabRecipientInfo: WdWordDialogTab = ...
    wdDialogLetterWizardTabSenderInfo: WdWordDialogTab = ...
    wdDialogNoteOptionsTabAllEndnotes: WdWordDialogTab = ...
    wdDialogNoteOptionsTabAllFootnotes: WdWordDialogTab = ...
    wdDialogOrganizerTabAutoText: WdWordDialogTab = ...
    wdDialogOrganizerTabCommandBars: WdWordDialogTab = ...
    wdDialogOrganizerTabMacros: WdWordDialogTab = ...
    wdDialogOrganizerTabStyles: WdWordDialogTab = ...
    wdDialogStyleManagementTabEdit: WdWordDialogTab = ...
    wdDialogStyleManagementTabRecommend: WdWordDialogTab = ...
    wdDialogStyleManagementTabRestrict: WdWordDialogTab = ...
    wdDialogTablePropertiesTabCell: WdWordDialogTab = ...
    wdDialogTablePropertiesTabColumn: WdWordDialogTab = ...
    wdDialogTablePropertiesTabRow: WdWordDialogTab = ...
    wdDialogTablePropertiesTabTable: WdWordDialogTab = ...
    wdDialogTemplates: WdWordDialogTab = ...
    wdDialogTemplatesLinkedCSS: WdWordDialogTab = ...
    wdDialogTemplatesXMLExpansionPacks: WdWordDialogTab = ...
    wdDialogTemplatesXMLSchema: WdWordDialogTab = ...
    wdDialogToolsAutoCorrectExceptionsTabFirstLetter: WdWordDialogTab = ...
    wdDialogToolsAutoCorrectExceptionsTabHangulAndAlphabet: WdWordDialogTab = ...
    wdDialogToolsAutoCorrectExceptionsTabIac: WdWordDialogTab = ...
    wdDialogToolsAutoCorrectExceptionsTabInitialCaps: WdWordDialogTab = ...
    wdDialogToolsAutoManagerTabAutoCorrect: WdWordDialogTab = ...
    wdDialogToolsAutoManagerTabAutoFormat: WdWordDialogTab = ...
    wdDialogToolsAutoManagerTabAutoFormatAsYouType: WdWordDialogTab = ...
    wdDialogToolsAutoManagerTabAutoText: WdWordDialogTab = ...
    wdDialogToolsAutoManagerTabSmartTags: WdWordDialogTab = ...
    wdDialogToolsEnvelopesAndLabelsTabEnvelopes: WdWordDialogTab = ...
    wdDialogToolsEnvelopesAndLabelsTabLabels: WdWordDialogTab = ...
    wdDialogToolsOptionsTabAcetate: WdWordDialogTab = ...
    wdDialogToolsOptionsTabBidi: WdWordDialogTab = ...
    wdDialogToolsOptionsTabCompatibility: WdWordDialogTab = ...
    wdDialogToolsOptionsTabEdit: WdWordDialogTab = ...
    wdDialogToolsOptionsTabFileLocations: WdWordDialogTab = ...
    wdDialogToolsOptionsTabFuzzy: WdWordDialogTab = ...
    wdDialogToolsOptionsTabGeneral: WdWordDialogTab = ...
    wdDialogToolsOptionsTabHangulHanjaConversion: WdWordDialogTab = ...
    wdDialogToolsOptionsTabPrint: WdWordDialogTab = ...
    wdDialogToolsOptionsTabProofread: WdWordDialogTab = ...
    wdDialogToolsOptionsTabSave: WdWordDialogTab = ...
    wdDialogToolsOptionsTabSecurity: WdWordDialogTab = ...
    wdDialogToolsOptionsTabTrackChanges: WdWordDialogTab = ...
    wdDialogToolsOptionsTabTypography: WdWordDialogTab = ...
    wdDialogToolsOptionsTabUserInfo: WdWordDialogTab = ...
    wdDialogToolsOptionsTabView: WdWordDialogTab = ...
    wdDialogWebOptionsBrowsers: WdWordDialogTab = ...
    wdDialogWebOptionsEncoding: WdWordDialogTab = ...
    wdDialogWebOptionsFiles: WdWordDialogTab = ...
    wdDialogWebOptionsFonts: WdWordDialogTab = ...
    wdDialogWebOptionsGeneral: WdWordDialogTab = ...
    wdDialogWebOptionsPictures: WdWordDialogTab = ...


class WdWordDialogTabHID(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdWordDialogTabHID, values: wdDialogFilePageSetupTabPaperSize (150001), wdDialogFilePageSetupTabPaperSource (150002) """
    value__ = ...
    wdDialogFilePageSetupTabPaperSize: WdWordDialogTabHID = ...
    wdDialogFilePageSetupTabPaperSource: WdWordDialogTabHID = ...


class WdWrapSideType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdWrapSideType, values: wdWrapBoth (0), wdWrapLargest (3), wdWrapLeft (1), wdWrapRight (2) """
    value__ = ...
    wdWrapBoth: WdWrapSideType = ...
    wdWrapLargest: WdWrapSideType = ...
    wdWrapLeft: WdWrapSideType = ...
    wdWrapRight: WdWrapSideType = ...


class WdWrapType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdWrapType, values: wdWrapBehind (5), wdWrapFront (3), wdWrapInline (7), wdWrapNone (3), wdWrapSquare (0), wdWrapThrough (2), wdWrapTight (1), wdWrapTopBottom (4) """
    value__ = ...
    wdWrapBehind: WdWrapType = ...
    wdWrapFront: WdWrapType = ...
    wdWrapInline: WdWrapType = ...
    wdWrapNone: WdWrapType = ...
    wdWrapSquare: WdWrapType = ...
    wdWrapThrough: WdWrapType = ...
    wdWrapTight: WdWrapType = ...
    wdWrapTopBottom: WdWrapType = ...


class WdWrapTypeMerged(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdWrapTypeMerged, values: wdWrapMergeBehind (3), wdWrapMergeFront (4), wdWrapMergeInline (0), wdWrapMergeSquare (1), wdWrapMergeThrough (5), wdWrapMergeTight (2), wdWrapMergeTopBottom (6) """
    value__ = ...
    wdWrapMergeBehind: WdWrapTypeMerged = ...
    wdWrapMergeFront: WdWrapTypeMerged = ...
    wdWrapMergeInline: WdWrapTypeMerged = ...
    wdWrapMergeSquare: WdWrapTypeMerged = ...
    wdWrapMergeThrough: WdWrapTypeMerged = ...
    wdWrapMergeTight: WdWrapTypeMerged = ...
    wdWrapMergeTopBottom: WdWrapTypeMerged = ...


class WdXMLNodeLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdXMLNodeLevel, values: wdXMLNodeLevelCell (3), wdXMLNodeLevelInline (0), wdXMLNodeLevelParagraph (1), wdXMLNodeLevelRow (2) """
    value__ = ...
    wdXMLNodeLevelCell: WdXMLNodeLevel = ...
    wdXMLNodeLevelInline: WdXMLNodeLevel = ...
    wdXMLNodeLevelParagraph: WdXMLNodeLevel = ...
    wdXMLNodeLevelRow: WdXMLNodeLevel = ...


class WdXMLNodeType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdXMLNodeType, values: wdXMLNodeAttribute (2), wdXMLNodeElement (1) """
    value__ = ...
    wdXMLNodeAttribute: WdXMLNodeType = ...
    wdXMLNodeElement: WdXMLNodeType = ...


class WdXMLSelectionChangeReason(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdXMLSelectionChangeReason, values: wdXMLSelectionChangeReasonDelete (2), wdXMLSelectionChangeReasonInsert (1), wdXMLSelectionChangeReasonMove (0) """
    value__ = ...
    wdXMLSelectionChangeReasonDelete: WdXMLSelectionChangeReason = ...
    wdXMLSelectionChangeReasonInsert: WdXMLSelectionChangeReason = ...
    wdXMLSelectionChangeReasonMove: WdXMLSelectionChangeReason = ...


class WdXMLValidationStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WdXMLValidationStatus, values: wdXMLValidationStatusCustom (-1072898048), wdXMLValidationStatusOK (0) """
    value__ = ...
    wdXMLValidationStatusCustom: WdXMLValidationStatus = ...
    wdXMLValidationStatusOK: WdXMLValidationStatus = ...


class WebOptions: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowPNG(self) -> bool:
        """
        Get: AllowPNG(self: WebOptions) -> bool
        Set: AllowPNG(self: WebOptions) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: WebOptions) -> Application """
        ...

    @property
    def BrowserLevel(self) -> WdBrowserLevel:
        """
        Get: BrowserLevel(self: WebOptions) -> WdBrowserLevel
        Set: BrowserLevel(self: WebOptions) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: WebOptions) -> int """
        ...

    @property
    def Encoding(self): # -> MsoEncoding
        """
        Get: Encoding(self: WebOptions) -> MsoEncoding
        Set: Encoding(self: WebOptions) = value
        """
        ...

    @property
    def FolderSuffix(self) -> str:
        """ Get: FolderSuffix(self: WebOptions) -> str """
        ...

    @property
    def OptimizeForBrowser(self) -> bool:
        """
        Get: OptimizeForBrowser(self: WebOptions) -> bool
        Set: OptimizeForBrowser(self: WebOptions) = value
        """
        ...

    @property
    def OrganizeInFolder(self) -> bool:
        """
        Get: OrganizeInFolder(self: WebOptions) -> bool
        Set: OrganizeInFolder(self: WebOptions) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: WebOptions) -> object """
        ...

    @property
    def PixelsPerInch(self) -> int:
        """
        Get: PixelsPerInch(self: WebOptions) -> int
        Set: PixelsPerInch(self: WebOptions) = value
        """
        ...

    @property
    def RelyOnCSS(self) -> bool:
        """
        Get: RelyOnCSS(self: WebOptions) -> bool
        Set: RelyOnCSS(self: WebOptions) = value
        """
        ...

    @property
    def RelyOnVML(self) -> bool:
        """
        Get: RelyOnVML(self: WebOptions) -> bool
        Set: RelyOnVML(self: WebOptions) = value
        """
        ...

    @property
    def ScreenSize(self): # -> MsoScreenSize
        """
        Get: ScreenSize(self: WebOptions) -> MsoScreenSize
        Set: ScreenSize(self: WebOptions) = value
        """
        ...

    @property
    def TargetBrowser(self): # -> MsoTargetBrowser
        """
        Get: TargetBrowser(self: WebOptions) -> MsoTargetBrowser
        Set: TargetBrowser(self: WebOptions) = value
        """
        ...

    @property
    def UseLongFileNames(self) -> bool:
        """
        Get: UseLongFileNames(self: WebOptions) -> bool
        Set: UseLongFileNames(self: WebOptions) = value
        """
        ...


    def UseDefaultFolderSuffix(self): # -> 
        """ UseDefaultFolderSuffix(self: WebOptions) """
        ...


class Window: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Active(self) -> bool:
        """ Get: Active(self: Window) -> bool """
        ...

    @property
    def ActivePane(self) -> Pane:
        """ Get: ActivePane(self: Window) -> Pane """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: Window) -> Application """
        ...

    @property
    def Caption(self) -> str:
        """
        Get: Caption(self: Window) -> str
        Set: Caption(self: Window) = value
        """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Window) -> int """
        ...

    @property
    def DisplayHorizontalScrollBar(self) -> bool:
        """
        Get: DisplayHorizontalScrollBar(self: Window) -> bool
        Set: DisplayHorizontalScrollBar(self: Window) = value
        """
        ...

    @property
    def DisplayLeftScrollBar(self) -> bool:
        """
        Get: DisplayLeftScrollBar(self: Window) -> bool
        Set: DisplayLeftScrollBar(self: Window) = value
        """
        ...

    @property
    def DisplayRightRuler(self) -> bool:
        """
        Get: DisplayRightRuler(self: Window) -> bool
        Set: DisplayRightRuler(self: Window) = value
        """
        ...

    @property
    def DisplayRulers(self) -> bool:
        """
        Get: DisplayRulers(self: Window) -> bool
        Set: DisplayRulers(self: Window) = value
        """
        ...

    @property
    def DisplayScreenTips(self) -> bool:
        """
        Get: DisplayScreenTips(self: Window) -> bool
        Set: DisplayScreenTips(self: Window) = value
        """
        ...

    @property
    def DisplayVerticalRuler(self) -> bool:
        """
        Get: DisplayVerticalRuler(self: Window) -> bool
        Set: DisplayVerticalRuler(self: Window) = value
        """
        ...

    @property
    def DisplayVerticalScrollBar(self) -> bool:
        """
        Get: DisplayVerticalScrollBar(self: Window) -> bool
        Set: DisplayVerticalScrollBar(self: Window) = value
        """
        ...

    @property
    def Document(self) -> Document:
        """ Get: Document(self: Window) -> Document """
        ...

    @property
    def DocumentMap(self) -> bool:
        """
        Get: DocumentMap(self: Window) -> bool
        Set: DocumentMap(self: Window) = value
        """
        ...

    @property
    def DocumentMapPercentWidth(self) -> int:
        """
        Get: DocumentMapPercentWidth(self: Window) -> int
        Set: DocumentMapPercentWidth(self: Window) = value
        """
        ...

    @property
    def EnvelopeVisible(self) -> bool:
        """
        Get: EnvelopeVisible(self: Window) -> bool
        Set: EnvelopeVisible(self: Window) = value
        """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: Window) -> int
        Set: Height(self: Window) = value
        """
        ...

    @property
    def HorizontalPercentScrolled(self) -> int:
        """
        Get: HorizontalPercentScrolled(self: Window) -> int
        Set: HorizontalPercentScrolled(self: Window) = value
        """
        ...

    @property
    def Hwnd(self) -> int:
        """ Get: Hwnd(self: Window) -> int """
        ...

    @property
    def IMEMode(self) -> WdIMEMode:
        """
        Get: IMEMode(self: Window) -> WdIMEMode
        Set: IMEMode(self: Window) = value
        """
        ...

    @property
    def Index(self) -> int:
        """ Get: Index(self: Window) -> int """
        ...

    @property
    def Left(self) -> int:
        """
        Get: Left(self: Window) -> int
        Set: Left(self: Window) = value
        """
        ...

    @property
    def Next(self) -> Window:
        """ Get: Next(self: Window) -> Window """
        ...

    @property
    def Panes(self) -> Panes:
        """ Get: Panes(self: Window) -> Panes """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Window) -> object """
        ...

    @property
    def Previous(self) -> Window:
        """ Get: Previous(self: Window) -> Window """
        ...

    @property
    def Selection(self) -> Selection:
        """ Get: Selection(self: Window) -> Selection """
        ...

    @property
    def ShowSourceDocuments(self) -> WdShowSourceDocuments:
        """
        Get: ShowSourceDocuments(self: Window) -> WdShowSourceDocuments
        Set: ShowSourceDocuments(self: Window) = value
        """
        ...

    @property
    def Split(self) -> bool:
        """
        Get: Split(self: Window) -> bool
        Set: Split(self: Window) = value
        """
        ...

    @property
    def SplitVertical(self) -> int:
        """
        Get: SplitVertical(self: Window) -> int
        Set: SplitVertical(self: Window) = value
        """
        ...

    @property
    def StyleAreaWidth(self) -> Single:
        """
        Get: StyleAreaWidth(self: Window) -> Single
        Set: StyleAreaWidth(self: Window) = value
        """
        ...

    @property
    def Thumbnails(self) -> bool:
        """
        Get: Thumbnails(self: Window) -> bool
        Set: Thumbnails(self: Window) = value
        """
        ...

    @property
    def Top(self) -> int:
        """
        Get: Top(self: Window) -> int
        Set: Top(self: Window) = value
        """
        ...

    @property
    def Type(self) -> WdWindowType:
        """ Get: Type(self: Window) -> WdWindowType """
        ...

    @property
    def UsableHeight(self) -> int:
        """ Get: UsableHeight(self: Window) -> int """
        ...

    @property
    def UsableWidth(self) -> int:
        """ Get: UsableWidth(self: Window) -> int """
        ...

    @property
    def VerticalPercentScrolled(self) -> int:
        """
        Get: VerticalPercentScrolled(self: Window) -> int
        Set: VerticalPercentScrolled(self: Window) = value
        """
        ...

    @property
    def View(self) -> View:
        """ Get: View(self: Window) -> View """
        ...

    @property
    def Visible(self) -> bool:
        """
        Get: Visible(self: Window) -> bool
        Set: Visible(self: Window) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: Window) -> int
        Set: Width(self: Window) = value
        """
        ...

    @property
    def WindowNumber(self) -> int:
        """ Get: WindowNumber(self: Window) -> int """
        ...

    @property
    def WindowState(self) -> WdWindowState:
        """
        Get: WindowState(self: Window) -> WdWindowState
        Set: WindowState(self: Window) = value
        """
        ...


    def Activate(self): # -> 
        """ Activate(self: Window) """
        ...

    def Close(self, SaveChanges:object, RouteDocument:object) -> Tuple_[object, object]:
        """ Close(self: Window, SaveChanges: object, RouteDocument: object) -> (object, object) """
        ...

    def GetPoint(self, ScreenPixelsLeft, ScreenPixelsTop, ScreenPixelsWidth, ScreenPixelsHeight, obj) -> Tuple_[int, int, int, int]:
        """ GetPoint(self: Window, obj: object) -> (int, int, int, int) """
        ...

    def LargeScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> Tuple_[object, object, object, object]:
        """ LargeScroll(self: Window, Down: object, Up: object, ToRight: object, ToLeft: object) -> (object, object, object, object) """
        ...

    def NewWindow(self) -> Window:
        """ NewWindow(self: Window) -> Window """
        ...

    def PageScroll(self, Down:object, Up:object) -> Tuple_[object, object]:
        """ PageScroll(self: Window, Down: object, Up: object) -> (object, object) """
        ...

    def PrintOut(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, ActivePrinterMacGX:object, ManualDuplexPrint:object, PrintZoomColumn:object, PrintZoomRow:object, PrintZoomPaperWidth:object, PrintZoomPaperHeight:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut(self: Window, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, ActivePrinterMacGX: object, ManualDuplexPrint: object, PrintZoomColumn: object, PrintZoomRow: object, PrintZoomPaperWidth: object, PrintZoomPaperHeight: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOut2000(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, ActivePrinterMacGX:object, ManualDuplexPrint:object, PrintZoomColumn:object, PrintZoomRow:object, PrintZoomPaperWidth:object, PrintZoomPaperHeight:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOut2000(self: Window, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, ActivePrinterMacGX: object, ManualDuplexPrint: object, PrintZoomColumn: object, PrintZoomRow: object, PrintZoomPaperWidth: object, PrintZoomPaperHeight: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def PrintOutOld(self, Background:object, Append:object, Range:object, OutputFileName:object, From:object, To:object, Item:object, Copies:object, Pages:object, PageType:object, PrintToFile:object, Collate:object, ActivePrinterMacGX:object, ManualDuplexPrint:object) -> Tuple_[object, object, object, object, object, object, object, object, object, object, object, object, object, object]:
        """ PrintOutOld(self: Window, Background: object, Append: object, Range: object, OutputFileName: object, From: object, To: object, Item: object, Copies: object, Pages: object, PageType: object, PrintToFile: object, Collate: object, ActivePrinterMacGX: object, ManualDuplexPrint: object) -> (object, object, object, object, object, object, object, object, object, object, object, object, object, object) """
        ...

    def RangeFromPoint(self, x:int, y:int) -> object:
        """ RangeFromPoint(self: Window, x: int, y: int) -> object """
        ...

    def ScrollIntoView(self, obj:object, Start:object) -> object:
        """ ScrollIntoView(self: Window, obj: object, Start: object) -> object """
        ...

    def SetFocus(self): # -> 
        """ SetFocus(self: Window) """
        ...

    def SmallScroll(self, Down:object, Up:object, ToRight:object, ToLeft:object) -> Tuple_[object, object, object, object]:
        """ SmallScroll(self: Window, Down: object, Up: object, ToRight: object, ToLeft: object) -> (object, object, object, object) """
        ...

    def ToggleRibbon(self): # -> 
        """ ToggleRibbon(self: Window) """
        ...

    def ToggleShowAllReviewers(self): # -> 
        """ ToggleShowAllReviewers(self: Window) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Windows(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Windows) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Windows) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Windows) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Windows) -> object """
        ...

    @property
    def SyncScrollingSideBySide(self) -> bool:
        """
        Get: SyncScrollingSideBySide(self: Windows) -> bool
        Set: SyncScrollingSideBySide(self: Windows) = value
        """
        ...


    def Add(self, Window:object) -> Tuple_[Window, object]:
        """ Add(self: Windows, Window: object) -> (Window, object) """
        ...

    def Arrange(self, ArrangeStyle:object) -> object:
        """ Arrange(self: Windows, ArrangeStyle: object) -> object """
        ...

    def BreakSideBySide(self) -> bool:
        """ BreakSideBySide(self: Windows) -> bool """
        ...

    def CompareSideBySideWith(self, Document:object) -> Tuple_[bool, object]:
        """ CompareSideBySideWith(self: Windows, Document: object) -> (bool, object) """
        ...

    def ResetPositionsSideBySide(self): # -> 
        """ ResetPositionsSideBySide(self: Windows) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Words(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Words) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: Words) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Words) -> int """
        ...

    @property
    def First(self) -> Range:
        """ Get: First(self: Words) -> Range """
        ...

    @property
    def Last(self) -> Range:
        """ Get: Last(self: Words) -> Range """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Words) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class WrapFormat: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowOverlap(self) -> int:
        """
        Get: AllowOverlap(self: WrapFormat) -> int
        Set: AllowOverlap(self: WrapFormat) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: WrapFormat) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: WrapFormat) -> int """
        ...

    @property
    def DistanceBottom(self) -> Single:
        """
        Get: DistanceBottom(self: WrapFormat) -> Single
        Set: DistanceBottom(self: WrapFormat) = value
        """
        ...

    @property
    def DistanceLeft(self) -> Single:
        """
        Get: DistanceLeft(self: WrapFormat) -> Single
        Set: DistanceLeft(self: WrapFormat) = value
        """
        ...

    @property
    def DistanceRight(self) -> Single:
        """
        Get: DistanceRight(self: WrapFormat) -> Single
        Set: DistanceRight(self: WrapFormat) = value
        """
        ...

    @property
    def DistanceTop(self) -> Single:
        """
        Get: DistanceTop(self: WrapFormat) -> Single
        Set: DistanceTop(self: WrapFormat) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: WrapFormat) -> object """
        ...

    @property
    def Side(self) -> WdWrapSideType:
        """
        Get: Side(self: WrapFormat) -> WdWrapSideType
        Set: Side(self: WrapFormat) = value
        """
        ...

    @property
    def Type(self) -> WdWrapType:
        """
        Get: Type(self: WrapFormat) -> WdWrapType
        Set: Type(self: WrapFormat) = value
        """
        ...



class XlAxisCrosses(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAxisCrosses, values: xlAxisCrossesAutomatic (-4105), xlAxisCrossesCustom (-4114), xlAxisCrossesMaximum (2), xlAxisCrossesMinimum (4) """
    value__ = ...
    xlAxisCrossesAutomatic: XlAxisCrosses = ...
    xlAxisCrossesCustom: XlAxisCrosses = ...
    xlAxisCrossesMaximum: XlAxisCrosses = ...
    xlAxisCrossesMinimum: XlAxisCrosses = ...


class XlAxisGroup(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAxisGroup, values: xlPrimary (1), xlSecondary (2) """
    value__ = ...
    xlPrimary: XlAxisGroup = ...
    xlSecondary: XlAxisGroup = ...


class XlAxisType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlAxisType, values: xlCategory (1), xlSeriesAxis (3), xlValue (2) """
    value__ = ...
    xlCategory: XlAxisType = ...
    xlSeriesAxis: XlAxisType = ...
    xlValue: XlAxisType = ...


class XlBackground(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlBackground, values: xlBackgroundAutomatic (-4105), xlBackgroundOpaque (3), xlBackgroundTransparent (2) """
    value__ = ...
    xlBackgroundAutomatic: XlBackground = ...
    xlBackgroundOpaque: XlBackground = ...
    xlBackgroundTransparent: XlBackground = ...


class XlBarShape(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlBarShape, values: xlBox (0), xlConeToMax (5), xlConeToPoint (4), xlCylinder (3), xlPyramidToMax (2), xlPyramidToPoint (1) """
    value__ = ...
    xlBox: XlBarShape = ...
    xlConeToMax: XlBarShape = ...
    xlConeToPoint: XlBarShape = ...
    xlCylinder: XlBarShape = ...
    xlPyramidToMax: XlBarShape = ...
    xlPyramidToPoint: XlBarShape = ...


class XlBorderWeight(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlBorderWeight, values: xlHairline (1), xlMedium (-4138), xlThick (4), xlThin (2) """
    value__ = ...
    xlHairline: XlBorderWeight = ...
    xlMedium: XlBorderWeight = ...
    xlThick: XlBorderWeight = ...
    xlThin: XlBorderWeight = ...


class XlCategoryLabelLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCategoryLabelLevel, values: xlCategoryLabelLevelAll (-1), xlCategoryLabelLevelCustom (-2), xlCategoryLabelLevelNone (-3) """
    value__ = ...
    xlCategoryLabelLevelAll: XlCategoryLabelLevel = ...
    xlCategoryLabelLevelCustom: XlCategoryLabelLevel = ...
    xlCategoryLabelLevelNone: XlCategoryLabelLevel = ...


class XlCategoryType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCategoryType, values: xlAutomaticScale (-4105), xlCategoryScale (2), xlTimeScale (3) """
    value__ = ...
    xlAutomaticScale: XlCategoryType = ...
    xlCategoryScale: XlCategoryType = ...
    xlTimeScale: XlCategoryType = ...


class XlChartElementPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartElementPosition, values: xlChartElementPositionAutomatic (-4105), xlChartElementPositionCustom (-4114) """
    value__ = ...
    xlChartElementPositionAutomatic: XlChartElementPosition = ...
    xlChartElementPositionCustom: XlChartElementPosition = ...


class XlChartGallery(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartGallery, values: xlAnyGallery (23), xlBuiltIn (21), xlUserDefined (22) """
    value__ = ...
    xlAnyGallery: XlChartGallery = ...
    xlBuiltIn: XlChartGallery = ...
    xlUserDefined: XlChartGallery = ...


class XlChartItem(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartItem, values: xlAxis (21), xlAxisTitle (17), xlChartArea (2), xlChartTitle (4), xlCorners (6), xlDataLabel (0), xlDataTable (7), xlDisplayUnitLabel (30), xlDownBars (20), xlDropLines (26), xlErrorBars (9), xlFloor (23), xlHiLoLines (25), xlLeaderLines (29), xlLegend (24), xlLegendEntry (12), xlLegendKey (13), xlMajorGridlines (15), xlMinorGridlines (16), xlNothing (28), xlPivotChartDropZone (32), xlPivotChartFieldButton (31), xlPlotArea (19), xlRadarAxisLabels (27), xlSeries (3), xlSeriesLines (22), xlShape (14), xlTrendline (8), xlUpBars (18), xlWalls (5), xlXErrorBars (10), xlYErrorBars (11) """
    value__ = ...
    xlAxis: XlChartItem = ...
    xlAxisTitle: XlChartItem = ...
    xlChartArea: XlChartItem = ...
    xlChartTitle: XlChartItem = ...
    xlCorners: XlChartItem = ...
    xlDataLabel: XlChartItem = ...
    xlDataTable: XlChartItem = ...
    xlDisplayUnitLabel: XlChartItem = ...
    xlDownBars: XlChartItem = ...
    xlDropLines: XlChartItem = ...
    xlErrorBars: XlChartItem = ...
    xlFloor: XlChartItem = ...
    xlHiLoLines: XlChartItem = ...
    xlLeaderLines: XlChartItem = ...
    xlLegend: XlChartItem = ...
    xlLegendEntry: XlChartItem = ...
    xlLegendKey: XlChartItem = ...
    xlMajorGridlines: XlChartItem = ...
    xlMinorGridlines: XlChartItem = ...
    xlNothing: XlChartItem = ...
    xlPivotChartDropZone: XlChartItem = ...
    xlPivotChartFieldButton: XlChartItem = ...
    xlPlotArea: XlChartItem = ...
    xlRadarAxisLabels: XlChartItem = ...
    xlSeries: XlChartItem = ...
    xlSeriesLines: XlChartItem = ...
    xlShape: XlChartItem = ...
    xlTrendline: XlChartItem = ...
    xlUpBars: XlChartItem = ...
    xlWalls: XlChartItem = ...
    xlXErrorBars: XlChartItem = ...
    xlYErrorBars: XlChartItem = ...


class XlChartPicturePlacement(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartPicturePlacement, values: xlAllFaces (7), xlEnd (2), xlEndSides (3), xlFront (4), xlFrontEnd (6), xlFrontSides (5), xlSides (1) """
    value__ = ...
    xlAllFaces: XlChartPicturePlacement = ...
    xlEnd: XlChartPicturePlacement = ...
    xlEndSides: XlChartPicturePlacement = ...
    xlFront: XlChartPicturePlacement = ...
    xlFrontEnd: XlChartPicturePlacement = ...
    xlFrontSides: XlChartPicturePlacement = ...
    xlSides: XlChartPicturePlacement = ...


class XlChartPictureType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartPictureType, values: xlStack (2), xlStackScale (3), xlStretch (1) """
    value__ = ...
    xlStack: XlChartPictureType = ...
    xlStackScale: XlChartPictureType = ...
    xlStretch: XlChartPictureType = ...


class XlChartSplitType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlChartSplitType, values: xlSplitByCustomSplit (4), xlSplitByPercentValue (3), xlSplitByPosition (1), xlSplitByValue (2) """
    value__ = ...
    xlSplitByCustomSplit: XlChartSplitType = ...
    xlSplitByPercentValue: XlChartSplitType = ...
    xlSplitByPosition: XlChartSplitType = ...
    xlSplitByValue: XlChartSplitType = ...


class XlColorIndex(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlColorIndex, values: xlColorIndexAutomatic (-4105), xlColorIndexNone (-4142) """
    value__ = ...
    xlColorIndexAutomatic: XlColorIndex = ...
    xlColorIndexNone: XlColorIndex = ...


class XlConstants(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlConstants, values: xl3DBar (-4099), xl3DSurface (-4103), xlAbove (0), xlAutomatic (-4105), xlBar (2), xlBelow (1), xlBoth (1), xlBottom (-4107), xlCenter (-4108), xlChecker (9), xlCircle (8), xlColumn (3), xlCombination (-4111), xlCorner (2), xlCrissCross (16), xlCross (4), xlCustom (-4114), xlDefaultAutoFormat (-1), xlDiamond (2), xlDistributed (-4117), xlFill (5), xlFixedValue (1), xlGeneral (1), xlGray16 (17), xlGray25 (-4124), xlGray50 (-4125), xlGray75 (-4126), xlGray8 (18), xlGrid (15), xlHigh (-4127), xlInside (2), xlJustify (-4130), xlLeft (-4131), xlLightDown (13), xlLightHorizontal (11), xlLightUp (14), xlLightVertical (12), xlLow (-4134), xlMaximum (2), xlMinimum (4), xlMinusValues (3), xlNextToAxis (4), xlNone (-4142), xlOpaque (3), xlOutside (3), xlPercent (2), xlPlus (9), xlPlusValues (2), xlRight (-4152), xlScale (3), xlSemiGray75 (10), xlShowLabel (4), xlShowLabelAndPercent (5), xlShowPercent (3), xlShowValue (2), xlSingle (2), xlSolid (1), xlSquare (1), xlStar (5), xlStError (4), xlTop (-4160), xlTransparent (2), xlTriangle (3) """
    value__ = ...
    xl3DBar: XlConstants = ...
    xl3DSurface: XlConstants = ...
    xlAbove: XlConstants = ...
    xlAutomatic: XlConstants = ...
    xlBar: XlConstants = ...
    xlBelow: XlConstants = ...
    xlBoth: XlConstants = ...
    xlBottom: XlConstants = ...
    xlCenter: XlConstants = ...
    xlChecker: XlConstants = ...
    xlCircle: XlConstants = ...
    xlColumn: XlConstants = ...
    xlCombination: XlConstants = ...
    xlCorner: XlConstants = ...
    xlCrissCross: XlConstants = ...
    xlCross: XlConstants = ...
    xlCustom: XlConstants = ...
    xlDefaultAutoFormat: XlConstants = ...
    xlDiamond: XlConstants = ...
    xlDistributed: XlConstants = ...
    xlFill: XlConstants = ...
    xlFixedValue: XlConstants = ...
    xlGeneral: XlConstants = ...
    xlGray16: XlConstants = ...
    xlGray25: XlConstants = ...
    xlGray50: XlConstants = ...
    xlGray75: XlConstants = ...
    xlGray8: XlConstants = ...
    xlGrid: XlConstants = ...
    xlHigh: XlConstants = ...
    xlInside: XlConstants = ...
    xlJustify: XlConstants = ...
    xlLeft: XlConstants = ...
    xlLightDown: XlConstants = ...
    xlLightHorizontal: XlConstants = ...
    xlLightUp: XlConstants = ...
    xlLightVertical: XlConstants = ...
    xlLow: XlConstants = ...
    xlMaximum: XlConstants = ...
    xlMinimum: XlConstants = ...
    xlMinusValues: XlConstants = ...
    xlNextToAxis: XlConstants = ...
    xlNone: XlConstants = ...
    xlOpaque: XlConstants = ...
    xlOutside: XlConstants = ...
    xlPercent: XlConstants = ...
    xlPlus: XlConstants = ...
    xlPlusValues: XlConstants = ...
    xlRight: XlConstants = ...
    xlScale: XlConstants = ...
    xlSemiGray75: XlConstants = ...
    xlShowLabel: XlConstants = ...
    xlShowLabelAndPercent: XlConstants = ...
    xlShowPercent: XlConstants = ...
    xlShowValue: XlConstants = ...
    xlSingle: XlConstants = ...
    xlSolid: XlConstants = ...
    xlSquare: XlConstants = ...
    xlStar: XlConstants = ...
    xlStError: XlConstants = ...
    xlTop: XlConstants = ...
    xlTransparent: XlConstants = ...
    xlTriangle: XlConstants = ...


class XlCopyPictureFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlCopyPictureFormat, values: xlBitmap (2), xlPicture (-4147) """
    value__ = ...
    xlBitmap: XlCopyPictureFormat = ...
    xlPicture: XlCopyPictureFormat = ...


class XlDataLabelPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataLabelPosition, values: xlLabelPositionAbove (0), xlLabelPositionBelow (1), xlLabelPositionBestFit (5), xlLabelPositionCenter (-4108), xlLabelPositionCustom (7), xlLabelPositionInsideBase (4), xlLabelPositionInsideEnd (3), xlLabelPositionLeft (-4131), xlLabelPositionMixed (6), xlLabelPositionOutsideEnd (2), xlLabelPositionRight (-4152) """
    value__ = ...
    xlLabelPositionAbove: XlDataLabelPosition = ...
    xlLabelPositionBelow: XlDataLabelPosition = ...
    xlLabelPositionBestFit: XlDataLabelPosition = ...
    xlLabelPositionCenter: XlDataLabelPosition = ...
    xlLabelPositionCustom: XlDataLabelPosition = ...
    xlLabelPositionInsideBase: XlDataLabelPosition = ...
    xlLabelPositionInsideEnd: XlDataLabelPosition = ...
    xlLabelPositionLeft: XlDataLabelPosition = ...
    xlLabelPositionMixed: XlDataLabelPosition = ...
    xlLabelPositionOutsideEnd: XlDataLabelPosition = ...
    xlLabelPositionRight: XlDataLabelPosition = ...


class XlDataLabelSeparator(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataLabelSeparator, values: xlDataLabelSeparatorDefault (1) """
    value__ = ...
    xlDataLabelSeparatorDefault: XlDataLabelSeparator = ...


class XlDataLabelsType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDataLabelsType, values: xlDataLabelsShowBubbleSizes (6), xlDataLabelsShowLabel (4), xlDataLabelsShowLabelAndPercent (5), xlDataLabelsShowNone (-4142), xlDataLabelsShowPercent (3), xlDataLabelsShowValue (2) """
    value__ = ...
    xlDataLabelsShowBubbleSizes: XlDataLabelsType = ...
    xlDataLabelsShowLabel: XlDataLabelsType = ...
    xlDataLabelsShowLabelAndPercent: XlDataLabelsType = ...
    xlDataLabelsShowNone: XlDataLabelsType = ...
    xlDataLabelsShowPercent: XlDataLabelsType = ...
    xlDataLabelsShowValue: XlDataLabelsType = ...


class XlDisplayBlanksAs(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDisplayBlanksAs, values: xlInterpolated (3), xlNotPlotted (1), xlZero (2) """
    value__ = ...
    xlInterpolated: XlDisplayBlanksAs = ...
    xlNotPlotted: XlDisplayBlanksAs = ...
    xlZero: XlDisplayBlanksAs = ...


class XlDisplayUnit(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlDisplayUnit, values: xlHundredMillions (-8), xlHundreds (-2), xlHundredThousands (-5), xlMillionMillions (-10), xlMillions (-6), xlTenMillions (-7), xlTenThousands (-4), xlThousandMillions (-9), xlThousands (-3) """
    value__ = ...
    xlHundredMillions: XlDisplayUnit = ...
    xlHundreds: XlDisplayUnit = ...
    xlHundredThousands: XlDisplayUnit = ...
    xlMillionMillions: XlDisplayUnit = ...
    xlMillions: XlDisplayUnit = ...
    xlTenMillions: XlDisplayUnit = ...
    xlTenThousands: XlDisplayUnit = ...
    xlThousandMillions: XlDisplayUnit = ...
    xlThousands: XlDisplayUnit = ...


class XlEndStyleCap(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlEndStyleCap, values: xlCap (1), xlNoCap (2) """
    value__ = ...
    xlCap: XlEndStyleCap = ...
    xlNoCap: XlEndStyleCap = ...


class XlErrorBarDirection(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlErrorBarDirection, values: xlChartX (-4168), xlChartY (1) """
    value__ = ...
    xlChartX: XlErrorBarDirection = ...
    xlChartY: XlErrorBarDirection = ...


class XlErrorBarInclude(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlErrorBarInclude, values: xlErrorBarIncludeBoth (1), xlErrorBarIncludeMinusValues (3), xlErrorBarIncludeNone (-4142), xlErrorBarIncludePlusValues (2) """
    value__ = ...
    xlErrorBarIncludeBoth: XlErrorBarInclude = ...
    xlErrorBarIncludeMinusValues: XlErrorBarInclude = ...
    xlErrorBarIncludeNone: XlErrorBarInclude = ...
    xlErrorBarIncludePlusValues: XlErrorBarInclude = ...


class XlErrorBarType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlErrorBarType, values: xlErrorBarTypeCustom (-4114), xlErrorBarTypeFixedValue (1), xlErrorBarTypePercent (2), xlErrorBarTypeStDev (-4155), xlErrorBarTypeStError (4) """
    value__ = ...
    xlErrorBarTypeCustom: XlErrorBarType = ...
    xlErrorBarTypeFixedValue: XlErrorBarType = ...
    xlErrorBarTypePercent: XlErrorBarType = ...
    xlErrorBarTypeStDev: XlErrorBarType = ...
    xlErrorBarTypeStError: XlErrorBarType = ...


class XlHAlign(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlHAlign, values: xlHAlignCenter (-4108), xlHAlignCenterAcrossSelection (7), xlHAlignDistributed (-4117), xlHAlignFill (5), xlHAlignGeneral (1), xlHAlignJustify (-4130), xlHAlignLeft (-4131), xlHAlignRight (-4152) """
    value__ = ...
    xlHAlignCenter: XlHAlign = ...
    xlHAlignCenterAcrossSelection: XlHAlign = ...
    xlHAlignDistributed: XlHAlign = ...
    xlHAlignFill: XlHAlign = ...
    xlHAlignGeneral: XlHAlign = ...
    xlHAlignJustify: XlHAlign = ...
    xlHAlignLeft: XlHAlign = ...
    xlHAlignRight: XlHAlign = ...


class XlLegendPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLegendPosition, values: xlLegendPositionBottom (-4107), xlLegendPositionCorner (2), xlLegendPositionCustom (-4161), xlLegendPositionLeft (-4131), xlLegendPositionRight (-4152), xlLegendPositionTop (-4160) """
    value__ = ...
    xlLegendPositionBottom: XlLegendPosition = ...
    xlLegendPositionCorner: XlLegendPosition = ...
    xlLegendPositionCustom: XlLegendPosition = ...
    xlLegendPositionLeft: XlLegendPosition = ...
    xlLegendPositionRight: XlLegendPosition = ...
    xlLegendPositionTop: XlLegendPosition = ...


class XlLineStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlLineStyle, values: xlContinuous (1), xlDash (-4115), xlDashDot (4), xlDashDotDot (5), xlDot (-4118), xlDouble (-4119), xlLineStyleNone (-4142), xlSlantDashDot (13) """
    value__ = ...
    xlContinuous: XlLineStyle = ...
    xlDash: XlLineStyle = ...
    xlDashDot: XlLineStyle = ...
    xlDashDotDot: XlLineStyle = ...
    xlDot: XlLineStyle = ...
    xlDouble: XlLineStyle = ...
    xlLineStyleNone: XlLineStyle = ...
    xlSlantDashDot: XlLineStyle = ...


class XlMarkerStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlMarkerStyle, values: xlMarkerStyleAutomatic (-4105), xlMarkerStyleCircle (8), xlMarkerStyleDash (-4115), xlMarkerStyleDiamond (2), xlMarkerStyleDot (-4118), xlMarkerStyleNone (-4142), xlMarkerStylePicture (-4147), xlMarkerStylePlus (9), xlMarkerStyleSquare (1), xlMarkerStyleStar (5), xlMarkerStyleTriangle (3), xlMarkerStyleX (-4168) """
    value__ = ...
    xlMarkerStyleAutomatic: XlMarkerStyle = ...
    xlMarkerStyleCircle: XlMarkerStyle = ...
    xlMarkerStyleDash: XlMarkerStyle = ...
    xlMarkerStyleDiamond: XlMarkerStyle = ...
    xlMarkerStyleDot: XlMarkerStyle = ...
    xlMarkerStyleNone: XlMarkerStyle = ...
    xlMarkerStylePicture: XlMarkerStyle = ...
    xlMarkerStylePlus: XlMarkerStyle = ...
    xlMarkerStyleSquare: XlMarkerStyle = ...
    xlMarkerStyleStar: XlMarkerStyle = ...
    xlMarkerStyleTriangle: XlMarkerStyle = ...
    xlMarkerStyleX: XlMarkerStyle = ...


class XlOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlOrientation, values: xlDownward (-4170), xlHorizontal (-4128), xlUpward (-4171), xlVertical (-4166) """
    value__ = ...
    xlDownward: XlOrientation = ...
    xlHorizontal: XlOrientation = ...
    xlUpward: XlOrientation = ...
    xlVertical: XlOrientation = ...


class XlPattern(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPattern, values: xlPatternAutomatic (-4105), xlPatternChecker (9), xlPatternCrissCross (16), xlPatternDown (-4121), xlPatternGray16 (17), xlPatternGray25 (-4124), xlPatternGray50 (-4125), xlPatternGray75 (-4126), xlPatternGray8 (18), xlPatternGrid (15), xlPatternHorizontal (-4128), xlPatternLightDown (13), xlPatternLightHorizontal (11), xlPatternLightUp (14), xlPatternLightVertical (12), xlPatternLinearGradient (4000), xlPatternNone (-4142), xlPatternRectangularGradient (4001), xlPatternSemiGray75 (10), xlPatternSolid (1), xlPatternUp (-4162), xlPatternVertical (-4166) """
    value__ = ...
    xlPatternAutomatic: XlPattern = ...
    xlPatternChecker: XlPattern = ...
    xlPatternCrissCross: XlPattern = ...
    xlPatternDown: XlPattern = ...
    xlPatternGray16: XlPattern = ...
    xlPatternGray25: XlPattern = ...
    xlPatternGray50: XlPattern = ...
    xlPatternGray75: XlPattern = ...
    xlPatternGray8: XlPattern = ...
    xlPatternGrid: XlPattern = ...
    xlPatternHorizontal: XlPattern = ...
    xlPatternLightDown: XlPattern = ...
    xlPatternLightHorizontal: XlPattern = ...
    xlPatternLightUp: XlPattern = ...
    xlPatternLightVertical: XlPattern = ...
    xlPatternLinearGradient: XlPattern = ...
    xlPatternNone: XlPattern = ...
    xlPatternRectangularGradient: XlPattern = ...
    xlPatternSemiGray75: XlPattern = ...
    xlPatternSolid: XlPattern = ...
    xlPatternUp: XlPattern = ...
    xlPatternVertical: XlPattern = ...


class XlPictureAppearance(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPictureAppearance, values: xlPrinter (2), xlScreen (1) """
    value__ = ...
    xlPrinter: XlPictureAppearance = ...
    xlScreen: XlPictureAppearance = ...


class XlPieSliceIndex(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPieSliceIndex, values: xlCenterPoint (5), xlInnerCenterPoint (8), xlInnerClockwisePoint (7), xlInnerCounterClockwisePoint (9), xlMidClockwiseRadiusPoint (4), xlMidCounterClockwiseRadiusPoint (6), xlOuterCenterPoint (2), xlOuterClockwisePoint (3), xlOuterCounterClockwisePoint (1) """
    value__ = ...
    xlCenterPoint: XlPieSliceIndex = ...
    xlInnerCenterPoint: XlPieSliceIndex = ...
    xlInnerClockwisePoint: XlPieSliceIndex = ...
    xlInnerCounterClockwisePoint: XlPieSliceIndex = ...
    xlMidClockwiseRadiusPoint: XlPieSliceIndex = ...
    xlMidCounterClockwiseRadiusPoint: XlPieSliceIndex = ...
    xlOuterCenterPoint: XlPieSliceIndex = ...
    xlOuterClockwisePoint: XlPieSliceIndex = ...
    xlOuterCounterClockwisePoint: XlPieSliceIndex = ...


class XlPieSliceLocation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPieSliceLocation, values: xlHorizontalCoordinate (1), xlVerticalCoordinate (2) """
    value__ = ...
    xlHorizontalCoordinate: XlPieSliceLocation = ...
    xlVerticalCoordinate: XlPieSliceLocation = ...


class XlPivotFieldOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlPivotFieldOrientation, values: xlColumnField (2), xlDataField (4), xlHidden (0), xlPageField (3), xlRowField (1) """
    value__ = ...
    xlColumnField: XlPivotFieldOrientation = ...
    xlDataField: XlPivotFieldOrientation = ...
    xlHidden: XlPivotFieldOrientation = ...
    xlPageField: XlPivotFieldOrientation = ...
    xlRowField: XlPivotFieldOrientation = ...


class XlReadingOrder(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlReadingOrder, values: xlContext (-5002), xlLTR (-5003), xlRTL (-5004) """
    value__ = ...
    xlContext: XlReadingOrder = ...
    xlLTR: XlReadingOrder = ...
    xlRTL: XlReadingOrder = ...


class XlRgbColor(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlRgbColor, values: xlAliceBlue (16775408), xlAntiqueWhite (14150650), xlAqua (16776960), xlAquamarine (13959039), xlAzure (16777200), xlBeige (14480885), xlBisque (12903679), xlBlack (0), xlBlanchedAlmond (13495295), xlBlue (16711680), xlBlueViolet (14822282), xlBrown (2763429), xlBurlyWood (8894686), xlCadetBlue (10526303), xlChartreuse (65407), xlCoral (5275647), xlCornflowerBlue (15570276), xlCornsilk (14481663), xlCrimson (3937500), xlDarkBlue (9109504), xlDarkCyan (9145088), xlDarkGoldenrod (755384), xlDarkGray (11119017), xlDarkGreen (25600), xlDarkGrey (11119017), xlDarkKhaki (7059389), xlDarkMagenta (9109643), xlDarkOliveGreen (3107669), xlDarkOrange (36095), xlDarkOrchid (13382297), xlDarkRed (139), xlDarkSalmon (8034025), xlDarkSeaGreen (9419919), xlDarkSlateBlue (9125192), xlDarkSlateGray (5197615), xlDarkSlateGrey (5197615), xlDarkTurquoise (13749760), xlDarkViolet (13828244), xlDeepPink (9639167), xlDeepSkyBlue (16760576), xlDimGray (6908265), xlDimGrey (6908265), xlDodgerBlue (16748574), xlFireBrick (2237106), xlFloralWhite (15792895), xlForestGreen (2263842), xlFuchsia (16711935), xlGainsboro (14474460), xlGhostWhite (16775416), xlGold (55295), xlGoldenrod (2139610), xlGray (8421504), xlGreen (32768), xlGreenYellow (3145645), xlGrey (8421504), xlHoneydew (15794160), xlHotPink (11823615), xlIndianRed (6053069), xlIndigo (8519755), xlIvory (15794175), xlKhaki (9234160), xlLavender (16443110), xlLavenderBlush (16118015), xlLawnGreen (64636), xlLemonChiffon (13499135), xlLightBlue (15128749), xlLightCoral (8421616), xlLightCyan (9145088), xlLightGoldenrodYellow (13826810), xlLightGray (13882323), xlLightGreen (9498256), xlLightGrey (13882323), xlLightPink (12695295), xlLightSalmon (8036607), xlLightSeaGreen (11186720), xlLightSkyBlue (16436871), xlLightSlateGray (10061943), xlLightSlateGrey (10061943), xlLightSteelBlue (14599344), xlLightYellow (14745599), xlLime (65280), xlLimeGreen (3329330), xlLinen (15134970), xlMaroon (128), xlMediumAquamarine (11206502), xlMediumBlue (13434880), xlMediumOrchid (13850042), xlMediumPurple (14381203), xlMediumSeaGreen (7451452), xlMediumSlateBlue (15624315), xlMediumSpringGreen (10156544), xlMediumTurquoise (13422920), xlMediumVioletRed (8721863), xlMidnightBlue (7346457), xlMintCream (16449525), xlMistyRose (14804223), xlMoccasin (11920639), xlNavajoWhite (11394815), xlNavy (8388608), xlNavyBlue (8388608), xlOldLace (15136253), xlOlive (32896), xlOliveDrab (2330219), xlOrange (42495), xlOrangeRed (17919), xlOrchid (14053594), xlPaleGoldenrod (7071982), xlPaleGreen (10025880), xlPaleTurquoise (15658671), xlPaleVioletRed (9662683), xlPapayaWhip (14020607), xlPeachPuff (12180223), xlPeru (4163021), xlPink (13353215), xlPlum (14524637), xlPowderBlue (15130800), xlPurple (8388736), xlRed (255), xlRosyBrown (9408444), xlRoyalBlue (14772545), xlSalmon (7504122), xlSandyBrown (6333684), xlSeaGreen (5737262), xlSeashell (15660543), xlSienna (2970272), xlSilver (12632256), xlSkyBlue (15453831), xlSlateBlue (13458026), xlSlateGray (9470064), xlSlateGrey (9470064), xlSnow (16448255), xlSpringGreen (8388352), xlSteelBlue (11829830), xlTan (9221330), xlTeal (8421376), xlThistle (14204888), xlTomato (4678655), xlTurquoise (13688896), xlViolet (15631086), xlWheat (11788021), xlWhite (16777215), xlWhiteSmoke (16119285), xlYellow (65535), xlYellowGreen (3329434) """
    value__ = ...
    xlAliceBlue: XlRgbColor = ...
    xlAntiqueWhite: XlRgbColor = ...
    xlAqua: XlRgbColor = ...
    xlAquamarine: XlRgbColor = ...
    xlAzure: XlRgbColor = ...
    xlBeige: XlRgbColor = ...
    xlBisque: XlRgbColor = ...
    xlBlack: XlRgbColor = ...
    xlBlanchedAlmond: XlRgbColor = ...
    xlBlue: XlRgbColor = ...
    xlBlueViolet: XlRgbColor = ...
    xlBrown: XlRgbColor = ...
    xlBurlyWood: XlRgbColor = ...
    xlCadetBlue: XlRgbColor = ...
    xlChartreuse: XlRgbColor = ...
    xlCoral: XlRgbColor = ...
    xlCornflowerBlue: XlRgbColor = ...
    xlCornsilk: XlRgbColor = ...
    xlCrimson: XlRgbColor = ...
    xlDarkBlue: XlRgbColor = ...
    xlDarkCyan: XlRgbColor = ...
    xlDarkGoldenrod: XlRgbColor = ...
    xlDarkGray: XlRgbColor = ...
    xlDarkGreen: XlRgbColor = ...
    xlDarkGrey: XlRgbColor = ...
    xlDarkKhaki: XlRgbColor = ...
    xlDarkMagenta: XlRgbColor = ...
    xlDarkOliveGreen: XlRgbColor = ...
    xlDarkOrange: XlRgbColor = ...
    xlDarkOrchid: XlRgbColor = ...
    xlDarkRed: XlRgbColor = ...
    xlDarkSalmon: XlRgbColor = ...
    xlDarkSeaGreen: XlRgbColor = ...
    xlDarkSlateBlue: XlRgbColor = ...
    xlDarkSlateGray: XlRgbColor = ...
    xlDarkSlateGrey: XlRgbColor = ...
    xlDarkTurquoise: XlRgbColor = ...
    xlDarkViolet: XlRgbColor = ...
    xlDeepPink: XlRgbColor = ...
    xlDeepSkyBlue: XlRgbColor = ...
    xlDimGray: XlRgbColor = ...
    xlDimGrey: XlRgbColor = ...
    xlDodgerBlue: XlRgbColor = ...
    xlFireBrick: XlRgbColor = ...
    xlFloralWhite: XlRgbColor = ...
    xlForestGreen: XlRgbColor = ...
    xlFuchsia: XlRgbColor = ...
    xlGainsboro: XlRgbColor = ...
    xlGhostWhite: XlRgbColor = ...
    xlGold: XlRgbColor = ...
    xlGoldenrod: XlRgbColor = ...
    xlGray: XlRgbColor = ...
    xlGreen: XlRgbColor = ...
    xlGreenYellow: XlRgbColor = ...
    xlGrey: XlRgbColor = ...
    xlHoneydew: XlRgbColor = ...
    xlHotPink: XlRgbColor = ...
    xlIndianRed: XlRgbColor = ...
    xlIndigo: XlRgbColor = ...
    xlIvory: XlRgbColor = ...
    xlKhaki: XlRgbColor = ...
    xlLavender: XlRgbColor = ...
    xlLavenderBlush: XlRgbColor = ...
    xlLawnGreen: XlRgbColor = ...
    xlLemonChiffon: XlRgbColor = ...
    xlLightBlue: XlRgbColor = ...
    xlLightCoral: XlRgbColor = ...
    xlLightCyan: XlRgbColor = ...
    xlLightGoldenrodYellow: XlRgbColor = ...
    xlLightGray: XlRgbColor = ...
    xlLightGreen: XlRgbColor = ...
    xlLightGrey: XlRgbColor = ...
    xlLightPink: XlRgbColor = ...
    xlLightSalmon: XlRgbColor = ...
    xlLightSeaGreen: XlRgbColor = ...
    xlLightSkyBlue: XlRgbColor = ...
    xlLightSlateGray: XlRgbColor = ...
    xlLightSlateGrey: XlRgbColor = ...
    xlLightSteelBlue: XlRgbColor = ...
    xlLightYellow: XlRgbColor = ...
    xlLime: XlRgbColor = ...
    xlLimeGreen: XlRgbColor = ...
    xlLinen: XlRgbColor = ...
    xlMaroon: XlRgbColor = ...
    xlMediumAquamarine: XlRgbColor = ...
    xlMediumBlue: XlRgbColor = ...
    xlMediumOrchid: XlRgbColor = ...
    xlMediumPurple: XlRgbColor = ...
    xlMediumSeaGreen: XlRgbColor = ...
    xlMediumSlateBlue: XlRgbColor = ...
    xlMediumSpringGreen: XlRgbColor = ...
    xlMediumTurquoise: XlRgbColor = ...
    xlMediumVioletRed: XlRgbColor = ...
    xlMidnightBlue: XlRgbColor = ...
    xlMintCream: XlRgbColor = ...
    xlMistyRose: XlRgbColor = ...
    xlMoccasin: XlRgbColor = ...
    xlNavajoWhite: XlRgbColor = ...
    xlNavy: XlRgbColor = ...
    xlNavyBlue: XlRgbColor = ...
    xlOldLace: XlRgbColor = ...
    xlOlive: XlRgbColor = ...
    xlOliveDrab: XlRgbColor = ...
    xlOrange: XlRgbColor = ...
    xlOrangeRed: XlRgbColor = ...
    xlOrchid: XlRgbColor = ...
    xlPaleGoldenrod: XlRgbColor = ...
    xlPaleGreen: XlRgbColor = ...
    xlPaleTurquoise: XlRgbColor = ...
    xlPaleVioletRed: XlRgbColor = ...
    xlPapayaWhip: XlRgbColor = ...
    xlPeachPuff: XlRgbColor = ...
    xlPeru: XlRgbColor = ...
    xlPink: XlRgbColor = ...
    xlPlum: XlRgbColor = ...
    xlPowderBlue: XlRgbColor = ...
    xlPurple: XlRgbColor = ...
    xlRed: XlRgbColor = ...
    xlRosyBrown: XlRgbColor = ...
    xlRoyalBlue: XlRgbColor = ...
    xlSalmon: XlRgbColor = ...
    xlSandyBrown: XlRgbColor = ...
    xlSeaGreen: XlRgbColor = ...
    xlSeashell: XlRgbColor = ...
    xlSienna: XlRgbColor = ...
    xlSilver: XlRgbColor = ...
    xlSkyBlue: XlRgbColor = ...
    xlSlateBlue: XlRgbColor = ...
    xlSlateGray: XlRgbColor = ...
    xlSlateGrey: XlRgbColor = ...
    xlSnow: XlRgbColor = ...
    xlSpringGreen: XlRgbColor = ...
    xlSteelBlue: XlRgbColor = ...
    xlTan: XlRgbColor = ...
    xlTeal: XlRgbColor = ...
    xlThistle: XlRgbColor = ...
    xlTomato: XlRgbColor = ...
    xlTurquoise: XlRgbColor = ...
    xlViolet: XlRgbColor = ...
    xlWheat: XlRgbColor = ...
    xlWhite: XlRgbColor = ...
    xlWhiteSmoke: XlRgbColor = ...
    xlYellow: XlRgbColor = ...
    xlYellowGreen: XlRgbColor = ...


class XlRowCol(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlRowCol, values: xlColumns (2), xlRows (1) """
    value__ = ...
    xlColumns: XlRowCol = ...
    xlRows: XlRowCol = ...


class XlScaleType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlScaleType, values: xlScaleLinear (-4132), xlScaleLogarithmic (-4133) """
    value__ = ...
    xlScaleLinear: XlScaleType = ...
    xlScaleLogarithmic: XlScaleType = ...


class XlSeriesNameLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSeriesNameLevel, values: xlSeriesNameLevelAll (-1), xlSeriesNameLevelCustom (-2), xlSeriesNameLevelNone (-3) """
    value__ = ...
    xlSeriesNameLevelAll: XlSeriesNameLevel = ...
    xlSeriesNameLevelCustom: XlSeriesNameLevel = ...
    xlSeriesNameLevelNone: XlSeriesNameLevel = ...


class XlSizeRepresents(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlSizeRepresents, values: xlSizeIsArea (1), xlSizeIsWidth (2) """
    value__ = ...
    xlSizeIsArea: XlSizeRepresents = ...
    xlSizeIsWidth: XlSizeRepresents = ...


class XlTickLabelOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTickLabelOrientation, values: xlTickLabelOrientationAutomatic (-4105), xlTickLabelOrientationDownward (-4170), xlTickLabelOrientationHorizontal (-4128), xlTickLabelOrientationUpward (-4171), xlTickLabelOrientationVertical (-4166) """
    value__ = ...
    xlTickLabelOrientationAutomatic: XlTickLabelOrientation = ...
    xlTickLabelOrientationDownward: XlTickLabelOrientation = ...
    xlTickLabelOrientationHorizontal: XlTickLabelOrientation = ...
    xlTickLabelOrientationUpward: XlTickLabelOrientation = ...
    xlTickLabelOrientationVertical: XlTickLabelOrientation = ...


class XlTickLabelPosition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTickLabelPosition, values: xlTickLabelPositionHigh (-4127), xlTickLabelPositionLow (-4134), xlTickLabelPositionNextToAxis (4), xlTickLabelPositionNone (-4142) """
    value__ = ...
    xlTickLabelPositionHigh: XlTickLabelPosition = ...
    xlTickLabelPositionLow: XlTickLabelPosition = ...
    xlTickLabelPositionNextToAxis: XlTickLabelPosition = ...
    xlTickLabelPositionNone: XlTickLabelPosition = ...


class XlTickMark(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTickMark, values: xlTickMarkCross (4), xlTickMarkInside (2), xlTickMarkNone (-4142), xlTickMarkOutside (3) """
    value__ = ...
    xlTickMarkCross: XlTickMark = ...
    xlTickMarkInside: XlTickMark = ...
    xlTickMarkNone: XlTickMark = ...
    xlTickMarkOutside: XlTickMark = ...


class XlTimeUnit(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTimeUnit, values: xlDays (0), xlMonths (1), xlYears (2) """
    value__ = ...
    xlDays: XlTimeUnit = ...
    xlMonths: XlTimeUnit = ...
    xlYears: XlTimeUnit = ...


class XlTrendlineType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlTrendlineType, values: xlExponential (5), xlLinear (-4132), xlLogarithmic (-4133), xlMovingAvg (6), xlPolynomial (3), xlPower (4) """
    value__ = ...
    xlExponential: XlTrendlineType = ...
    xlLinear: XlTrendlineType = ...
    xlLogarithmic: XlTrendlineType = ...
    xlMovingAvg: XlTrendlineType = ...
    xlPolynomial: XlTrendlineType = ...
    xlPower: XlTrendlineType = ...


class XlUnderlineStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlUnderlineStyle, values: xlUnderlineStyleDouble (-4119), xlUnderlineStyleDoubleAccounting (5), xlUnderlineStyleNone (-4142), xlUnderlineStyleSingle (2), xlUnderlineStyleSingleAccounting (4) """
    value__ = ...
    xlUnderlineStyleDouble: XlUnderlineStyle = ...
    xlUnderlineStyleDoubleAccounting: XlUnderlineStyle = ...
    xlUnderlineStyleNone: XlUnderlineStyle = ...
    xlUnderlineStyleSingle: XlUnderlineStyle = ...
    xlUnderlineStyleSingleAccounting: XlUnderlineStyle = ...


class XlVAlign(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XlVAlign, values: xlVAlignBottom (-4107), xlVAlignCenter (-4108), xlVAlignDistributed (-4117), xlVAlignJustify (-4130), xlVAlignTop (-4160) """
    value__ = ...
    xlVAlignBottom: XlVAlign = ...
    xlVAlignCenter: XlVAlign = ...
    xlVAlignDistributed: XlVAlign = ...
    xlVAlignJustify: XlVAlign = ...
    xlVAlignTop: XlVAlign = ...


class XMLChildNodeSuggestion: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XMLChildNodeSuggestion) -> Application """
        ...

    @property
    def BaseName(self) -> str:
        """ Get: BaseName(self: XMLChildNodeSuggestion) -> str """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: XMLChildNodeSuggestion) -> int """
        ...

    @property
    def NamespaceURI(self) -> str:
        """ Get: NamespaceURI(self: XMLChildNodeSuggestion) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XMLChildNodeSuggestion) -> object """
        ...

    @property
    def XMLSchemaReference(self) -> XMLSchemaReference:
        """ Get: XMLSchemaReference(self: XMLChildNodeSuggestion) -> XMLSchemaReference """
        ...


    def Insert(self, Range:object) -> Tuple_[XMLNode, object]:
        """ Insert(self: XMLChildNodeSuggestion, Range: object) -> (XMLNode, object) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XMLChildNodeSuggestions(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XMLChildNodeSuggestions) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: XMLChildNodeSuggestions) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: XMLChildNodeSuggestions) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XMLChildNodeSuggestions) -> object """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XMLMapping: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XMLMapping) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: XMLMapping) -> int """
        ...

    @property
    def CustomXMLNode(self): # -> CustomXMLNode
        """ Get: CustomXMLNode(self: XMLMapping) -> CustomXMLNode """
        ...

    @property
    def CustomXMLPart(self): # -> CustomXMLPart
        """ Get: CustomXMLPart(self: XMLMapping) -> CustomXMLPart """
        ...

    @property
    def IsMapped(self) -> bool:
        """ Get: IsMapped(self: XMLMapping) -> bool """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XMLMapping) -> object """
        ...

    @property
    def PrefixMappings(self) -> str:
        """ Get: PrefixMappings(self: XMLMapping) -> str """
        ...

    @property
    def XPath(self) -> str:
        """ Get: XPath(self: XMLMapping) -> str """
        ...


    def Delete(self): # -> 
        """ Delete(self: XMLMapping) """
        ...

    def SetMapping(self, XPath:str, PrefixMapping:str, Source) -> bool: # Not found arg types: {'Source': 'CustomXMLPart'}
        """ SetMapping(self: XMLMapping, XPath: str, PrefixMapping: str, Source: CustomXMLPart) -> bool """
        ...

    def SetMappingByNode(self, Node) -> bool: # Not found arg types: {'Node': 'CustomXMLNode'}
        """ SetMappingByNode(self: XMLMapping, Node: CustomXMLNode) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XMLNamespace: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XMLNamespace) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: XMLNamespace) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XMLNamespace) -> object """
        ...

    @property
    def URI(self) -> str:
        """ Get: URI(self: XMLNamespace) -> str """
        ...

    @property
    def XSLTransforms(self) -> XSLTransforms:
        """ Get: XSLTransforms(self: XMLNamespace) -> XSLTransforms """
        ...


    def AttachToDocument(self, Document:object) -> object:
        """ AttachToDocument(self: XMLNamespace, Document: object) -> object """
        ...

    def Delete(self): # -> 
        """ Delete(self: XMLNamespace) """
        ...


class XMLNamespaces(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XMLNamespaces) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: XMLNamespaces) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: XMLNamespaces) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XMLNamespaces) -> object """
        ...


    def Add(self, Path:str, NamespaceURI:object, Alias:object, InstallForAllUsers:bool) -> Tuple_[XMLNamespace, object, object]:
        """ Add(self: XMLNamespaces, Path: str, NamespaceURI: object, Alias: object, InstallForAllUsers: bool) -> (XMLNamespace, object, object) """
        ...

    def InstallManifest(self, Path:str, InstallForAllUsers:bool): # -> 
        """ InstallManifest(self: XMLNamespaces, Path: str, InstallForAllUsers: bool) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XMLNode: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XMLNode) -> Application """
        ...

    @property
    def Attributes(self) -> XMLNodes:
        """ Get: Attributes(self: XMLNode) -> XMLNodes """
        ...

    @property
    def BaseName(self) -> str:
        """ Get: BaseName(self: XMLNode) -> str """
        ...

    @property
    def ChildNodes(self) -> XMLNodes:
        """ Get: ChildNodes(self: XMLNode) -> XMLNodes """
        ...

    @property
    def ChildNodeSuggestions(self) -> XMLChildNodeSuggestions:
        """ Get: ChildNodeSuggestions(self: XMLNode) -> XMLChildNodeSuggestions """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: XMLNode) -> int """
        ...

    @property
    def FirstChild(self) -> XMLNode:
        """ Get: FirstChild(self: XMLNode) -> XMLNode """
        ...

    @property
    def HasChildNodes(self) -> bool:
        """ Get: HasChildNodes(self: XMLNode) -> bool """
        ...

    @property
    def LastChild(self) -> XMLNode:
        """ Get: LastChild(self: XMLNode) -> XMLNode """
        ...

    @property
    def Level(self) -> WdXMLNodeLevel:
        """ Get: Level(self: XMLNode) -> WdXMLNodeLevel """
        ...

    @property
    def NamespaceURI(self) -> str:
        """ Get: NamespaceURI(self: XMLNode) -> str """
        ...

    @property
    def NextSibling(self) -> XMLNode:
        """ Get: NextSibling(self: XMLNode) -> XMLNode """
        ...

    @property
    def NodeType(self) -> WdXMLNodeType:
        """ Get: NodeType(self: XMLNode) -> WdXMLNodeType """
        ...

    @property
    def NodeValue(self) -> str:
        """
        Get: NodeValue(self: XMLNode) -> str
        Set: NodeValue(self: XMLNode) = value
        """
        ...

    @property
    def OwnerDocument(self) -> Document:
        """ Get: OwnerDocument(self: XMLNode) -> Document """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XMLNode) -> object """
        ...

    @property
    def ParentNode(self) -> XMLNode:
        """ Get: ParentNode(self: XMLNode) -> XMLNode """
        ...

    @property
    def PlaceholderText(self) -> str:
        """
        Get: PlaceholderText(self: XMLNode) -> str
        Set: PlaceholderText(self: XMLNode) = value
        """
        ...

    @property
    def PreviousSibling(self) -> XMLNode:
        """ Get: PreviousSibling(self: XMLNode) -> XMLNode """
        ...

    @property
    def Range(self) -> Range:
        """ Get: Range(self: XMLNode) -> Range """
        ...

    @property
    def SmartTag(self) -> SmartTag:
        """ Get: SmartTag(self: XMLNode) -> SmartTag """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: XMLNode) -> str
        Set: Text(self: XMLNode) = value
        """
        ...

    @property
    def ValidationStatus(self) -> WdXMLValidationStatus:
        """ Get: ValidationStatus(self: XMLNode) -> WdXMLValidationStatus """
        ...

    @property
    def WordOpenXML(self) -> str:
        """ Get: WordOpenXML(self: XMLNode) -> str """
        ...


    def Copy(self): # -> 
        """ Copy(self: XMLNode) """
        ...

    def Cut(self): # -> 
        """ Cut(self: XMLNode) """
        ...

    def Delete(self): # -> 
        """ Delete(self: XMLNode) """
        ...

    def RemoveChild(self, ChildElement:XMLNode): # -> 
        """ RemoveChild(self: XMLNode, ChildElement: XMLNode) """
        ...

    def SelectNodes(self, XPath:str, PrefixMapping:str, FastSearchSkippingTextNodes:bool) -> XMLNodes:
        """ SelectNodes(self: XMLNode, XPath: str, PrefixMapping: str, FastSearchSkippingTextNodes: bool) -> XMLNodes """
        ...

    def SelectSingleNode(self, XPath:str, PrefixMapping:str, FastSearchSkippingTextNodes:bool) -> XMLNode:
        """ SelectSingleNode(self: XMLNode, XPath: str, PrefixMapping: str, FastSearchSkippingTextNodes: bool) -> XMLNode """
        ...

    def SetValidationError(self, Status:WdXMLValidationStatus, ErrorText:object, ClearedAutomatically:bool) -> object:
        """ SetValidationError(self: XMLNode, Status: WdXMLValidationStatus, ErrorText: object, ClearedAutomatically: bool) -> object """
        ...

    def Validate(self): # -> 
        """ Validate(self: XMLNode) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XMLNodes(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XMLNodes) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: XMLNodes) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: XMLNodes) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XMLNodes) -> object """
        ...


    def Add(self, Name:str, Namespace:str, Range:object) -> Tuple_[XMLNode, object]:
        """ Add(self: XMLNodes, Name: str, Namespace: str, Range: object) -> (XMLNode, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XMLSchemaReference: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XMLSchemaReference) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: XMLSchemaReference) -> int """
        ...

    @property
    def Location(self) -> str:
        """ Get: Location(self: XMLSchemaReference) -> str """
        ...

    @property
    def NamespaceURI(self) -> str:
        """ Get: NamespaceURI(self: XMLSchemaReference) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XMLSchemaReference) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: XMLSchemaReference) """
        ...

    def Reload(self): # -> 
        """ Reload(self: XMLSchemaReference) """
        ...


class XMLSchemaReferences(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AllowSaveAsXMLWithoutValidation(self) -> bool:
        """
        Get: AllowSaveAsXMLWithoutValidation(self: XMLSchemaReferences) -> bool
        Set: AllowSaveAsXMLWithoutValidation(self: XMLSchemaReferences) = value
        """
        ...

    @property
    def Application(self) -> Application:
        """ Get: Application(self: XMLSchemaReferences) -> Application """
        ...

    @property
    def AutomaticValidation(self) -> bool:
        """
        Get: AutomaticValidation(self: XMLSchemaReferences) -> bool
        Set: AutomaticValidation(self: XMLSchemaReferences) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: XMLSchemaReferences) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: XMLSchemaReferences) -> int """
        ...

    @property
    def HideValidationErrors(self) -> bool:
        """
        Get: HideValidationErrors(self: XMLSchemaReferences) -> bool
        Set: HideValidationErrors(self: XMLSchemaReferences) = value
        """
        ...

    @property
    def IgnoreMixedContent(self) -> bool:
        """
        Get: IgnoreMixedContent(self: XMLSchemaReferences) -> bool
        Set: IgnoreMixedContent(self: XMLSchemaReferences) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XMLSchemaReferences) -> object """
        ...

    @property
    def ShowPlaceholderText(self) -> bool:
        """
        Get: ShowPlaceholderText(self: XMLSchemaReferences) -> bool
        Set: ShowPlaceholderText(self: XMLSchemaReferences) = value
        """
        ...


    def Add(self, NamespaceURI:object, Alias:object, FileName:object, InstallForAllUsers:bool) -> Tuple_[XMLSchemaReference, object, object, object]:
        """ Add(self: XMLSchemaReferences, NamespaceURI: object, Alias: object, FileName: object, InstallForAllUsers: bool) -> (XMLSchemaReference, object, object, object) """
        ...

    def Validate(self): # -> 
        """ Validate(self: XMLSchemaReferences) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class XSLTransform: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XSLTransform) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: XSLTransform) -> int """
        ...

    @property
    def ID(self) -> str:
        """ Get: ID(self: XSLTransform) -> str """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XSLTransform) -> object """
        ...


    def Delete(self): # -> 
        """ Delete(self: XSLTransform) """
        ...


class XSLTransforms(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: XSLTransforms) -> Application """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: XSLTransforms) -> int """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: XSLTransforms) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: XSLTransforms) -> object """
        ...


    def Add(self, Location:str, Alias:object, InstallForAllUsers:bool) -> Tuple_[XSLTransform, object]:
        """ Add(self: XSLTransforms, Location: str, Alias: object, InstallForAllUsers: bool) -> (XSLTransform, object) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class Zoom: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Zoom) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Zoom) -> int """
        ...

    @property
    def PageColumns(self) -> int:
        """
        Get: PageColumns(self: Zoom) -> int
        Set: PageColumns(self: Zoom) = value
        """
        ...

    @property
    def PageFit(self) -> WdPageFit:
        """
        Get: PageFit(self: Zoom) -> WdPageFit
        Set: PageFit(self: Zoom) = value
        """
        ...

    @property
    def PageRows(self) -> int:
        """
        Get: PageRows(self: Zoom) -> int
        Set: PageRows(self: Zoom) = value
        """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Zoom) -> object """
        ...

    @property
    def Percentage(self) -> int:
        """
        Get: Percentage(self: Zoom) -> int
        Set: Percentage(self: Zoom) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class Zooms: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Application(self) -> Application:
        """ Get: Application(self: Zooms) -> Application """
        ...

    @property
    def Creator(self) -> int:
        """ Get: Creator(self: Zooms) -> int """
        ...

    @property
    def Parent(self) -> object:
        """ Get: Parent(self: Zooms) -> object """
        ...


    def Item(self, Index:WdViewType) -> Zoom:
        """ Item(self: Zooms, Index: WdViewType) -> Zoom """
        ...


