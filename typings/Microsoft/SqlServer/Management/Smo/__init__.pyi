# encoding: utf-8
# module Microsoft.SqlServer.Management.Smo calls itself Smo
# from Microsoft.SqlServer.SmoExtended, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, Microsoft.SqlServer.SqlWmiManagement, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, Microsoft.SqlServer.WmiEnum, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, Microsoft.SqlServer.SqlEnum, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, Microsoft.SqlServer.Smo, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, Microsoft.SqlServer.ServiceBrokerEnum, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, Microsoft.SqlServer.RegSvrEnum, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91
# by generator 1.145
""" no doc """
from __future__ import annotations
from Babel import Parameter

from Microsoft.AnalysisServices.AdomdClient import Property

from Microsoft.Build.Framework.XamlTypes import Rule

from Microsoft.Ink import ExtendedProperty

from Microsoft.Office.Interop.Access.Dao import Database

from Microsoft.Office.Interop.Graph import DataTable

from Microsoft.Office.Interop.Publisher import Column, View

from Microsoft.Office.Interop.Word import Index, Language

from Microsoft.SqlServer.Dts.Tasks.TransferObjectsTask import DatabaseFile

from Microsoft.SqlServer.Management.Common import (DatabaseEngineEdition, 
    DatabaseEngineType, IAlterable, ICreatable, ICreateOrAlterable, 
    IDataTransferProvider, IDropIfExists, IDroppable, IMarkForDrop, 
    IRefreshable, IRenamable, ISafeRenamable, ITransferMetadataProvider, 
    ServerConnection, ServerMessageEventArgs, ServerVersion, 
    SqlExecutionModes, SqlServerManagementException)

from Microsoft.SqlServer.Management.Facets import IDmfAdapter

from Microsoft.SqlServer.Management.RegisteredServers import (
    RegisteredServerCollection, ServerGroupCollection)

from Microsoft.SqlServer.Management.Sdk.Sfc import (IAlienObject, IAlienRoot, 
    IDmfFacet, ISfcDomainLite, ISfcProperty, ISfcPropertyProvider, 
    ISfcPropertySet, ISfcSupportsDesignMode, ISfcValidate, 
    IXmlSerializationAdapter, LinkFieldType, SfcObjectExtender, Urn, 
    ValidationState)

from Microsoft.SqlServer.Management.Smo.Broker import ServiceBroker

from Microsoft.SqlServer.Management.Smo.Mail import SqlMail

from Microsoft.SqlServer.Management.SqlParser.Binder import DependencyType

from Microsoft.SqlServer.Management.SqlParser.Metadata import (
    ActivationOrder, ForeignKeyAction, IndexType, LoginType, SynonymBaseType, 
    UserType)

from Microsoft.SqlServer.Management.SqlParser.MetadataProvider import (
    ApplicationRoleCollection, AsymmetricKeyCollection, CertificateCollection, 
    ColumnCollection, CredentialCollection, DatabaseCollection, 
    DatabaseDdlTriggerCollection, DatabaseRoleCollection, 
    ExtendedStoredProcedureCollection, ForeignKeyColumnCollection, 
    IndexCollection, IndexedColumnCollection, LoginCollection, 
    SchemaCollection, ServerDdlTriggerCollection, StoredProcedureCollection, 
    SynonymCollection, TableCollection, UserCollection, 
    UserDefinedAggregateCollection, UserDefinedDataTypeCollection, 
    UserDefinedTableTypeCollection, ViewCollection)

from Microsoft.SqlServer.Management.SqlParser.SqlCodeDom import SqlDataType

from Microsoft.VisualBasic.ApplicationServices import User

from System import (Action, Array, AsyncCallback, Byte, Char, DateTime, 
    DayOfWeek, Decimal, Enum, EventArgs, Guid, IAsyncResult, IComparable, 
    Int16, Int64, MulticastDelegate, Nullable, TimeSpan, Type, Version)

from System.Activities.Statements import Sequence

from System.Collections import (ArrayList, Hashtable, ICollection, IComparer, 
    IEnumerable, IEnumerator, IList)

from System.Collections.Generic import Dictionary, List

from System.Collections.ObjectModel import ReadOnlyCollection

from System.Collections.Specialized import StringCollection

from System.ComponentModel import EnumConverter

from System.ComponentModel.DataAnnotations import DataType

from System.Configuration import Configuration

from System.Data.Linq import Table

from System.Data.SqlClient import SortOrder

from System.DirectoryServices import PropertyCollection

from System.EnterpriseServices import ResourcePool

from System.Net import IPAddress

from System.Net.Sockets import ProtocolType

from System.Runtime.DurableInstancing import InstanceState

from System.Runtime.Serialization import SerializationInfo, StreamingContext

from System.Security.Permissions import PermissionState

from System.ServiceModel import Endpoint

from System.ServiceProcess import ServiceStartMode

from System.Text import Encoding

from System.Threading import ExecutionContext

from System.Web.UI.MobileControls import ArrayListCollectionBase

from System.Web.UI.WebControls.Expressions import RangeType

from System.Xml.Schema import XmlSchemaCollection

from System.Xml.Serialization import IXmlSerializable

from typing import Self

"""The following names are not found in the module: (AffinityType, 
    ApplicationRoleEvents, AsymmetricKeyEncryptionAlgorithm, 
    AuditDestinationType, AuditFileSizeUnit, AuditSpecificationDetail, 
    AvailabilityDatabaseSynchronizationState, AvailabilityGroup, 
    AvailabilityGroupAutomatedBackupPreference, AvailabilityGroupClusterType, 
    AvailabilityGroupFailureConditionLevel, 
    AvailabilityGroupListenerCollection, 
    AvailabilityGroupListenerIPAddressCollection, 
    AvailabilityGroupListenerIPState, AvailabilityReplicaAvailabilityMode, 
    AvailabilityReplicaCollection, 
    AvailabilityReplicaConnectionModeInPrimaryRole, 
    AvailabilityReplicaConnectionModeInSecondaryRole, 
    AvailabilityReplicaConnectionState, AvailabilityReplicaFailoverMode, 
    AvailabilityReplicaJoinState, AvailabilityReplicaOperationalState, 
    AvailabilityReplicaRole, AvailabilityReplicaRollupRecoveryState, 
    AvailabilityReplicaRollupSynchronizationState, 
    AvailabilityReplicaSeedingMode, BackupDeviceType, BackupSetType, 
    BoundEvent, CertificateEvents, ClusterMemberState, 
    ColumnEncryptionKeyValueCollection, ColumnEncryptionType, ColumnMasterKey, 
    CpuCollection, DataSet, DatabaseActiveDirectory, 
    DatabaseAuditSpecificationCollection, DatabaseDdlTriggerEventSet, 
    DatabaseDdlTriggerExecutionContext, DatabaseEncryptionKey, 
    DatabaseEncryptionState, DatabaseEncryptionType, DatabaseEventSet, 
    DatabaseEventType, DatabaseEvents, DatabaseObjectTypes, DatabaseOptions, 
    DatabasePermissionSet, DatabaseReplicaStateCollection, 
    DatabaseReplicaSuspendReason, DatabaseScopedConfigurationCollection, 
    DatabaseScopedConfigurationOnOff, DatabaseScopedCredentialCollection, 
    DatabaseStatus, DatabaseUserAccess, DefaultCollection, DefaultConstraint, 
    DefaultLanguage, DelayedDurability, DependencyCollectionNode, DeviceType, 
    EndpointAuthenticationOrder, EndpointEncryption, 
    EndpointEncryptionAlgorithm, EndpointState, EndpointType, 
    ExecutionManager, ExecutionStatus, ExtendedPropertyCollection, 
    ExternalDataSourceCollection, ExternalDataSourceType, 
    ExternalFileFormatCollection, ExternalFileFormatType, 
    ExternalResourcePoolAffinityInfo, FederationCollection, FileGroup, 
    FileGroupCollection, FileGroupType, FileGrowthType, 
    FilestreamNonTransactedAccessType, FullTextCatalogCollection, 
    FullTextIndexColumnCollection, FullTextStopListCollection, 
    GeneratedAlwaysType, GraphType, IAvailabilityGroupState, 
    IDatabaseMaintenanceFacet, IDatabasePerformanceFacet, 
    IDatabaseSecurityFacet, IPropertyDataDispatch, IScriptable, 
    ISqlSmoObjectInitialize, ImplementationType, IndexEnableAction, 
    IndexEvents, IndexKeyType, IndexPopulationAction, IndexPopulationStatus, 
    IndexedXmlPathCollection, IndexedXmlPathNamespaceCollection, 
    IndexedXmlPathType, JobServer, LinkedServerLoginCollection, 
    LinkedTableType, LockEscalationType, LogFileCollection, 
    LogReuseWaitStatus, LoginEvents, MappedClassType, MasterKey, 
    MirroringOption, MirroringSafetyLevel, MirroringStatus, 
    MirroringWitnessStatus, Month, NumaNodeAffinity, NumaNodeCollection, 
    NumberedStoredProcedureParameterCollection, ObjectClass, ObjectEventSet, 
    ObjectPermissionSet, OnFailureAction, PageVerify, 
    PartitionFunctionCollection, PartitionFunctionEvents, 
    PartitionFunctionParameterCollection, PartitionSchemeCollection, 
    PartitionSchemeEvents, PartitionSchemeParameterCollection, 
    PasswordHashAlgorithm, Payload, PerfMonMode, PhysicalPartitionCollection, 
    PlanGuideCollection, PlanGuideType, PrincipalType, 
    PrivateKeyEncryptionType, Protocol, ProviderAuthenticationType, 
    QueryStoreOptions, QueryStoreSizeBasedCleanupMode, RecoveryModel, 
    RemoteDataArchiveMigrationState, RemoteDatabaseMigrationStatistics, 
    RepairOptions, RepairStructure, RepairType, ReplicationOptions, 
    ResourceGovernor, ResourcePoolAffinityInfo, ResourcePoolCollection, 
    ResourceUsage, ResumableOperationStateType, RetentionPeriodUnits, 
    RuleCollection, SchedulerCollection, SchemaEvents, ScriptOption, 
    ScriptingFilter, ScriptingOptions, SearchPropertyList, 
    SearchPropertyListCollection, SecondaryXmlIndexType, 
    SecurityPolicyCollection, SecurityPredicateCollection, 
    SecurityPredicateOperation, SecurityPredicateType, SequenceCacheType, 
    SequenceCollection, SequenceEvents, Server, ServerActiveDirectory, 
    ServerAuditSpecificationCollection, ServerDdlTriggerEventSet, 
    ServerDdlTriggerExecutionContext, ServerEventHandler, ServerEventSet, 
    ServerEvents, ServerLoginMode, ServerMirroringRole, ServerPermissionSet, 
    ServerProxyAccount, ServerRoleCollection, ServerRoleEvents, ServerStatus, 
    ServerTraceEventSet, ServiceBrokerPayload, ServiceMasterKey, 
    ServiceQueueEventSet, Settings, ShrinkMethod, SmartAdmin, 
    SmoExceptionType, SmoObjectExtender, SnapshotIsolationState, SoapPayload, 
    SoapPayloadMethodCollection, SpatialGeoLevelSize, SpatialIndexType, 
    SqlAssemblyCollection, SqlAssemblyEventSet, SqlAssemblyEvents, 
    SqlAssemblyFileCollection, SqlPropertyCollection, SqlPropertyInfo, 
    SqlServerVersion, SqlServerVersions, SqlSmoState, 
    StatisticColumnCollection, StatisticEvents, StatisticsScanType, 
    StopListOption, StoredProcedure, StoredProcedureEventSet, 
    StoredProcedureEvents, StoredProcedureParameterCollection, 
    SymmetricKeyCollection, SymmetricKeyEncryption, 
    SymmetricKeyEncryptionAlgorithm, SynonymEvents, SystemDataTypeCollection, 
    SystemMessageCollection, TableEventSet, TableEvents, TableTemporalType, 
    TableViewBase, TcpProtocol, TemporalHistoryRetentionPeriodUnit, 
    TransactionTypes, TriggerCollection, TriggerEvents, UrnCollection, 
    UserDefinedAggregateParameterCollection, UserDefinedFunction, 
    UserDefinedFunctionCollection, UserDefinedFunctionEventSet, 
    UserDefinedFunctionEvents, UserDefinedFunctionParameterCollection, 
    UserDefinedFunctionType, UserDefinedMessageCollection, 
    UserDefinedTypeCollection, UserDefinedTypeEvents, UserDefinedTypeFormat, 
    UserEvents, UserOptions, ViewEventSet, ViewEvents, WindowsLoginAccessType, 
    WorkloadGroupCollection, WorkloadGroupImportance, WsdlGeneratorOption, 
    XmlDocumentConstraint, XmlFormatOption, XmlSchemaCollectionCollection, 
    XsdSchemaOption, field#)
"""

# no functions
# classes

class AbortAfterWait(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AbortAfterWait, values: Blockers (1), None (0), Self (2) """
    Blockers: AbortAfterWait = ...
    Self: AbortAfterWait = ...
    value__ = ...


class EnumToDisplayNameConverter(EnumConverter): # skipped bases: <type 'object'>
    """ no doc """
    pass

class AbortAfterWaitConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ AbortAfterWaitConverter() """
    pass

class AbstractCollectionBase: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def AddExisting(self, *args): #cannot find CLR method
        """ AddExisting(self: AbstractCollectionBase, smoObj: SqlSmoObject) """
        ...

    def ImplAddExisting(self, *args): #cannot find CLR method
        """ ImplAddExisting(self: AbstractCollectionBase, smoObj: SqlSmoObject) """
        ...

    initialized = ...


class ActivationExecutionContext(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ActivationExecutionContext, values: ExecuteAsUser (3), Owner (2), Self (4) """
    ExecuteAsUser: ActivationExecutionContext = ...
    Owner: ActivationExecutionContext = ...
    Self: ActivationExecutionContext = ...
    value__ = ...


class AffinityInfoBase(IAlterable, IScriptable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AffinityType(self): # -> AffinityType
        """
        Get: AffinityType(self: AffinityInfoBase) -> AffinityType
        Set: AffinityType(self: AffinityInfoBase) = value
        """
        ...

    @property
    def ExecutionManager(self): # -> ExecutionManager
        """ Get: ExecutionManager(self: AffinityInfoBase) -> ExecutionManager """
        ...

    @property
    def NumaNodes(self): # -> NumaNodeCollection
        """ Get: NumaNodes(self: AffinityInfoBase) -> NumaNodeCollection """
        ...


    def Refresh(self): # -> 
        """ Refresh(self: AffinityInfoBase) """
        ...


class AffinityInfo(AffinityInfoBase): # skipped bases: <type 'IScriptable'>, <type 'IAlterable'>, <type 'object'>
    """ no doc """
    @property
    def Cpus(self): # -> CpuCollection
        """ Get: Cpus(self: AffinityInfo) -> CpuCollection """
        ...

    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: AffinityInfo) -> Server """
        ...



class AffinityType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AffinityType, values: Auto (0), Manual (1) """
    Auto: AffinityType = ...
    Manual: AffinityType = ...
    value__ = ...


class AgentSubSystemTypeConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ AgentSubSystemTypeConverter() """
    pass

class IExtendedProperties: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def ExtendedProperties(self): # -> ExtendedPropertyCollection
        """ Get: ExtendedProperties(self: IExtendedProperties) -> ExtendedPropertyCollection """
        ...



class IObjectPermission: # skipped bases: <type 'object'>
    """ no doc """
    def Deny(self, permissions, *__args:Array): # ->  # Not found arg types: {'permissions': 'ObjectPermissionSet'}
        """ Deny(self: IObjectPermission, permissions: ObjectPermissionSet, granteeNames: Array[str])Deny(self: IObjectPermission, permissions: ObjectPermissionSet, granteeName: str)Deny(self: IObjectPermission, permissions: ObjectPermissionSet, granteeNames: Array[str], cascade: bool)Deny(self: IObjectPermission, permissions: ObjectPermissionSet, granteeName: str, cascade: bool) """
        ...

    def EnumObjectPermissions(self, *__args:str) -> Array:
        """
        EnumObjectPermissions(self: IObjectPermission) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: IObjectPermission, granteeName: str) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: IObjectPermission, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: IObjectPermission, granteeName: str, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        """
        ...

    def Grant(self, permissions, *__args:Array): # ->  # Not found arg types: {'permissions': 'ObjectPermissionSet'}
        """ Grant(self: IObjectPermission, permissions: ObjectPermissionSet, granteeNames: Array[str])Grant(self: IObjectPermission, permissions: ObjectPermissionSet, granteeName: str)Grant(self: IObjectPermission, permissions: ObjectPermissionSet, granteeNames: Array[str], grantGrant: bool)Grant(self: IObjectPermission, permissions: ObjectPermissionSet, granteeName: str, grantGrant: bool)Grant(self: IObjectPermission, permissions: ObjectPermissionSet, granteeNames: Array[str], grantGrant: bool, asRole: str)Grant(self: IObjectPermission, permissions: ObjectPermissionSet, granteeName: str, grantGrant: bool, asRole: str) """
        ...

    def Revoke(self, permissions, *__args:Array): # ->  # Not found arg types: {'permissions': 'ObjectPermissionSet'}
        """ Revoke(self: IObjectPermission, permissions: ObjectPermissionSet, granteeNames: Array[str])Revoke(self: IObjectPermission, permissions: ObjectPermissionSet, granteeName: str)Revoke(self: IObjectPermission, permissions: ObjectPermissionSet, granteeNames: Array[str], revokeGrant: bool, cascade: bool)Revoke(self: IObjectPermission, permissions: ObjectPermissionSet, granteeName: str, revokeGrant: bool, cascade: bool, asRole: str) """
        ...


class IScriptable: # skipped bases: <type 'object'>
    """ no doc """
    def Script(self, scriptingOptions = ...) -> StringCollection: # Not found arg types: {'scriptingOptions': 'ScriptingOptions'}
        """
        Script(self: IScriptable) -> StringCollection
        Script(self: IScriptable, scriptingOptions: ScriptingOptions) -> StringCollection
        """
        ...


class SmoObjectBase(ISfcValidate): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def State(self): # -> SqlSmoState
        """ Get: State(self: SmoObjectBase) -> SqlSmoState """
        ...

    @property
    def UserData(self) -> object:
        """
        Get: UserData(self: SmoObjectBase) -> object
        Set: UserData(self: SmoObjectBase) = value
        """
        ...



class SqlSmoObject(SmoObjectBase, IAlienObject, IRefreshable, ISfcPropertyProvider, ISqlSmoObjectInitialize): # skipped bases: <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'object'>
    """ no doc """
    @property
    def DatabaseEngineEdition(self) -> DatabaseEngineEdition:
        """ Get: DatabaseEngineEdition(self: SqlSmoObject) -> DatabaseEngineEdition """
        ...

    @property
    def DatabaseEngineType(self) -> DatabaseEngineType:
        """ Get: DatabaseEngineType(self: SqlSmoObject) -> DatabaseEngineType """
        ...

    @property
    def ExecuteForScalar(self):
        ...

    @property
    def ExecutionManager(self): # -> ExecutionManager
        """ Get: ExecutionManager(self: SqlSmoObject) -> ExecutionManager """
        ...

    @property
    def IsTouched(self):
        ...

    @property
    def ObjectInSpace(self):
        ...

    @property
    def Properties(self): # -> SqlPropertyCollection
        """ Get: Properties(self: SqlSmoObject) -> SqlPropertyCollection """
        ...

    @property
    def ScalarResult(self):
        ...

    @property
    def Urn(self) -> Urn:
        """ Get: Urn(self: SqlSmoObject) -> Urn """
        ...


    def AddDatabaseContext(self, *args): #cannot find CLR method
        """ AddDatabaseContext(self: SqlSmoObject, queries: StringCollection) """
        ...

    def AlterImpl(self, *args): #cannot find CLR method
        """ AlterImpl(self: SqlSmoObject) """
        ...

    def AlterImplWorker(self, *args): #cannot find CLR method
        """ AlterImplWorker(self: SqlSmoObject) """
        ...

    def BindDefaultImpl(self, *args): #cannot find CLR method
        """ BindDefaultImpl(self: SqlSmoObject, defaultSchema: str, defaultName: str, bindColumns: bool) """
        ...

    def BindRuleImpl(self, *args): #cannot find CLR method
        """ BindRuleImpl(self: SqlSmoObject, ruleSchema: str, rule: str, bindColumns: bool) """
        ...

    def CheckObjectState(self, *args): #cannot find CLR method
        """ CheckObjectState(self: SqlSmoObject)CheckObjectState(self: SqlSmoObject, throwIfNotCreated: bool) """
        ...

    def CheckObjectStateImpl(self, *args): #cannot find CLR method
        """ CheckObjectStateImpl(self: SqlSmoObject, throwIfNotCreated: bool) """
        ...

    def CleanObject(self, *args): #cannot find CLR method
        """ CleanObject(self: SqlSmoObject) """
        ...

    def CreateImpl(self, *args): #cannot find CLR method
        """ CreateImpl(self: SqlSmoObject) """
        ...

    def CreateOrAlterImpl(self, *args): #cannot find CLR method
        """ CreateOrAlterImpl(self: SqlSmoObject) """
        ...

    def DropImpl(self, *args): #cannot find CLR method
        """ DropImpl(self: SqlSmoObject, isDropIfExists: bool) """
        ...

    def DropImplWorker(self, *args): #cannot find CLR method
        """ DropImplWorker(self: SqlSmoObject, urn: Urn, isDropIfExists: bool) -> Urn """
        ...

    def ExecuteNonQuery(self, *args): #cannot find CLR method
        """ ExecuteNonQuery(self: SqlSmoObject, queries: StringCollection, includeDbContext: bool, executeForAlter: bool) """
        ...

    def ExecuteWithModes(self, modes:SqlExecutionModes, action:Action): # -> 
        """ ExecuteWithModes(self: SqlSmoObject, modes: SqlExecutionModes, action: Action) """
        ...

    def FormatSqlVariant(self, *args): #cannot find CLR method
        """ FormatSqlVariant(self: SqlSmoObject, sqlVariant: object) -> str """
        ...

    def GenerateAlterEvent(self, *args): #cannot find CLR method
        """ GenerateAlterEvent(self: SqlSmoObject, urn: Urn, innerObject: object)GenerateAlterEvent(self: SqlSmoObject) """
        ...

    @staticmethod
    def GetChildType(objectName:str, parentName:str) -> Type:
        """ GetChildType(objectName: str, parentName: str) -> Type """
        ...

    def GetContextDB(self, *args): #cannot find CLR method
        """ GetContextDB(self: SqlSmoObject) -> Database """
        ...

    def GetDBName(self, *args): #cannot find CLR method
        """ GetDBName(self: SqlSmoObject) -> str """
        ...

    def GetFragOptionString(self, *args): #cannot find CLR method
        """ GetFragOptionString(self: SqlSmoObject, fragmentationOption: FragmentationOption) -> str """
        ...

    def GetPropValue(self, *args): #cannot find CLR method
        """ GetPropValue(self: SqlSmoObject, propName: str) -> object """
        ...

    def GetPropValueOptional(self, *args): #cannot find CLR method
        """ GetPropValueOptional(self: SqlSmoObject, propName: str) -> object """
        ...

    def GetPropValueOptionalAllowNull(self, *args): #cannot find CLR method
        """ GetPropValueOptionalAllowNull(self: SqlSmoObject, propName: str) -> object """
        ...

    def GetRealValue(self, *args): #cannot find CLR method
        """ GetRealValue(self: SqlSmoObject, prop: Property, oldValue: object) -> object """
        ...

    def GetServerName(self, *args): #cannot find CLR method
        """ GetServerName(self: SqlSmoObject) -> str """
        ...

    def GetServerObject(self, *args): #cannot find CLR method
        """ GetServerObject(self: SqlSmoObject) -> Server """
        ...

    def GetSqlServerVersionName(self, *args): #cannot find CLR method
        """ GetSqlServerVersionName(self: SqlSmoObject) -> str """
        ...

    @staticmethod
    def GetTypeFromUrnSkeleton(urn:Urn) -> Type:
        """ GetTypeFromUrnSkeleton(urn: Urn) -> Type """
        ...

    def GetUrnRecursive(self, *args): #cannot find CLR method
        """ GetUrnRecursive(self: SqlSmoObject, urnbuilder: StringBuilder)GetUrnRecursive(self: SqlSmoObject, urnbuilder: StringBuilder, idOption: UrnIdOption) """
        ...

    def ImplInitialize(self, *args): #cannot find CLR method
        """ ImplInitialize(self: SqlSmoObject, fields: Array[str], orderby: Array[OrderBy]) -> bool """
        ...

    def Initialize(self, allProperties:bool = ...) -> bool:
        """
        Initialize(self: SqlSmoObject) -> bool
        Initialize(self: SqlSmoObject, allProperties: bool) -> bool
        """
        ...

    def IsCollectionDirty(self, *args): #cannot find CLR method
        """ IsCollectionDirty(col: ICollection) -> bool """
        ...

    def IsExpressSku(self) -> bool:
        """ IsExpressSku(self: SqlSmoObject) -> bool """
        ...

    def IsObjectDirty(self, *args): #cannot find CLR method
        """ IsObjectDirty(self: SqlSmoObject) -> bool """
        ...

    def IsObjectInitialized(self, *args): #cannot find CLR method
        """ IsObjectInitialized(self: SqlSmoObject) -> bool """
        ...

    def IsObjectInSpace(self, *args): #cannot find CLR method
        """ IsObjectInSpace(self: SqlSmoObject) -> bool """
        ...

    @staticmethod
    def IsSupportedOnSqlAzure(type:Type) -> bool:
        """ IsSupportedOnSqlAzure(type: Type) -> bool """
        ...

    def IsSupportedProperty(self, propertyName:str) -> bool:
        """ IsSupportedProperty(self: SqlSmoObject, propertyName: str) -> bool """
        ...

    def IsVersion80SP3(self, *args): #cannot find CLR method
        """ IsVersion80SP3(self: SqlSmoObject) -> bool """
        ...

    def IsVersion90AndAbove(self, *args): #cannot find CLR method
        """ IsVersion90AndAbove(self: SqlSmoObject) -> bool """
        ...

    @staticmethod
    def MakeSqlString(s:str) -> str:
        """ MakeSqlString(s: str) -> str """
        ...

    def MarkDropped(self, *args): #cannot find CLR method
        """ MarkDropped(self: SqlSmoObject) """
        ...

    def MarkForDropImpl(self, *args): #cannot find CLR method
        """ MarkForDropImpl(self: SqlSmoObject, dropOnAlter: bool) """
        ...

    def PostAlter(self, *args): #cannot find CLR method
        """ PostAlter(self: SqlSmoObject) """
        ...

    def PostCreate(self, *args): #cannot find CLR method
        """ PostCreate(self: SqlSmoObject) """
        ...

    def PostDrop(self, *args): #cannot find CLR method
        """ PostDrop(self: SqlSmoObject) """
        ...

    @staticmethod
    def QuoteString(name:str, cStart:Char, cEnd:Char) -> str:
        """ QuoteString(name: str, cStart: Char, cEnd: Char) -> str """
        ...

    def ScriptImpl(self, *args): #cannot find CLR method
        """
        ScriptImpl(self: SqlSmoObject) -> StringCollection
        ScriptImpl(self: SqlSmoObject, so: ScriptingOptions) -> StringCollection
        """
        ...

    def SetParentImpl(self, *args): #cannot find CLR method
        """ SetParentImpl(self: SqlSmoObject, newParent: SqlSmoObject) """
        ...

    @staticmethod
    def SqlString(s:str) -> str:
        """ SqlString(s: str) -> str """
        ...

    def ThrowIfAboveVersion100(self, *args): #cannot find CLR method
        """ ThrowIfAboveVersion100(self: SqlSmoObject, exceptionMessage: str) """
        ...

    def ThrowIfAboveVersion80(self, *args): #cannot find CLR method
        """ ThrowIfAboveVersion80(self: SqlSmoObject, exceptionMessage: str) """
        ...

    def ThrowIfBelowVersion100(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion100(self: SqlSmoObject, exceptionMessage: str) """
        ...

    def ThrowIfBelowVersion110(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion110(self: SqlSmoObject, exceptionMessage: str) """
        ...

    def ThrowIfBelowVersion110Prop(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion110Prop(self: SqlSmoObject, propertyName: str) """
        ...

    def ThrowIfBelowVersion120(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion120(self: SqlSmoObject, exceptionMessage: str) """
        ...

    def ThrowIfBelowVersion120Prop(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion120Prop(self: SqlSmoObject, propertyName: str) """
        ...

    def ThrowIfBelowVersion130(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion130(self: SqlSmoObject, exceptionMessage: str) """
        ...

    def ThrowIfBelowVersion130Prop(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion130Prop(self: SqlSmoObject, propertyName: str) """
        ...

    def ThrowIfBelowVersion140(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion140(self: SqlSmoObject, exceptionMessage: str) """
        ...

    def ThrowIfBelowVersion140Prop(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion140Prop(self: SqlSmoObject, propertyName: str) """
        ...

    def ThrowIfBelowVersion80(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion80(self: SqlSmoObject, exceptionMessage: str) """
        ...

    def ThrowIfBelowVersion80SP3(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion80SP3(self: SqlSmoObject) """
        ...

    def ThrowIfBelowVersion90(self, *args): #cannot find CLR method
        """ ThrowIfBelowVersion90(self: SqlSmoObject, exceptionMessage: str) """
        ...

    def ToString(self) -> str:
        """ ToString(self: SqlSmoObject) -> str """
        ...

    def TouchImpl(self, *args): #cannot find CLR method
        """ TouchImpl(self: SqlSmoObject) """
        ...

    def Trace(self, *args): #cannot find CLR method
        """ Trace(traceText: str) """
        ...

    def UnbindDefaultImpl(self, *args): #cannot find CLR method
        """ UnbindDefaultImpl(self: SqlSmoObject, bindColumns: bool) """
        ...

    def UnbindRuleImpl(self, *args): #cannot find CLR method
        """ UnbindRuleImpl(self: SqlSmoObject, bindColumns: bool) """
        ...

    def UpdateCollectionState2(self, *args): #cannot find CLR method
        """ UpdateCollectionState2(col: ICollection) """
        ...

    def __str__(self, *args): #cannot find CLR method
        ...

    m_ExtendedProperties = ...
    PropertyChanged = ...
    PropertyMetadataChanged = ...
    singletonParent = ...


class NamedSmoObject(SqlSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Name(self) -> str:
        """
        Get: Name(self: NamedSmoObject) -> str
        Set: Name(self: NamedSmoObject) = value
        """
        ...


    def ExecuteRenameQuery(self, *args): #cannot find CLR method
        """ ExecuteRenameQuery(self: NamedSmoObject, newName: str) """
        ...

    def RenameImpl(self, *args): #cannot find CLR method
        """ RenameImpl(self: NamedSmoObject, newName: str) """
        ...

    def RenameImplWorker(self, *args): #cannot find CLR method
        """ RenameImplWorker(self: NamedSmoObject, newName: str) """
        ...

    def SetSchemaOwned(self, *args): #cannot find CLR method
        """ SetSchemaOwned(self: NamedSmoObject) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ScriptNameObjectBase(NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    def AppendCommaText(self, *args): #cannot find CLR method
        """ AppendCommaText(self: ScriptNameObjectBase, sb: StringBuilder, optionText: str, needsComma: bool, beginWord: str) -> bool """
        ...

    def AppendWithCommaText(self, *args): #cannot find CLR method
        """ AppendWithCommaText(self: ScriptNameObjectBase, sb: StringBuilder, optionText: str, needsComma: bool) -> bool """
        ...

    def AppendWithOption(self, *args): #cannot find CLR method
        """ AppendWithOption(self: ScriptNameObjectBase, sb: StringBuilder, propName: str, optionText: str, needsComma: bool) -> bool """
        ...

    def AutoGenerateName(self, *args): #cannot find CLR method
        """ AutoGenerateName(self: ScriptNameObjectBase) """
        ...

    def CheckObjectDirty(self, *args): #cannot find CLR method
        """ CheckObjectDirty(self: ScriptNameObjectBase) -> bool """
        ...

    def CheckTextCorrectness(self, *args): #cannot find CLR method
        """
        CheckTextCorrectness(self: ScriptNameObjectBase, ddlText: str, enforceCreate: bool, checkName: bool, expectedObjectTypes: Array[str]) -> DdlTextParserHeaderInfo
        CheckTextCorrectness(self: ScriptNameObjectBase, ddlText: str, enforceCreate: bool, checkName: bool, isOrAlterSupported: bool, expectedObjectTypes: Array[str]) -> DdlTextParserHeaderInfo
        """
        ...

    def CheckTextModeSupport(self, *args): #cannot find CLR method
        """ CheckTextModeSupport(self: ScriptNameObjectBase) -> bool """
        ...

    def ForceTextModeOnTextBody(self, *args): #cannot find CLR method
        """ ForceTextModeOnTextBody(self: ScriptNameObjectBase) -> bool """
        ...

    def GetBraketNameForText(self, *args): #cannot find CLR method
        """ GetBraketNameForText(self: ScriptNameObjectBase) -> str """
        ...

    def GetIsSystemNamed(self, *args): #cannot find CLR method
        """ GetIsSystemNamed(self: ScriptNameObjectBase) -> bool """
        ...

    def GetIsTextDirty(self, *args): #cannot find CLR method
        """ GetIsTextDirty(self: ScriptNameObjectBase) -> bool """
        ...

    def GetTextBody(self, *args): #cannot find CLR method
        """
        GetTextBody(self: ScriptNameObjectBase) -> str
        GetTextBody(self: ScriptNameObjectBase, forScripting: bool) -> str
        """
        ...

    def GetTextHeader(self, *args): #cannot find CLR method
        """
        GetTextHeader(self: ScriptNameObjectBase, forAlter: bool) -> str
        GetTextHeader(self: ScriptNameObjectBase, scriptHeaderType: ScriptHeaderType) -> str
        """
        ...

    def GetTextMode(self, *args): #cannot find CLR method
        """ GetTextMode(self: ScriptNameObjectBase) -> bool """
        ...

    def GetTextProperty(self, *args): #cannot find CLR method
        """ GetTextProperty(self: ScriptNameObjectBase, requestingProperty: str) -> str """
        ...

    def ScriptHeaderType(self, *args): #cannot find CLR method
        """ enum ScriptHeaderType, values: ScriptHeaderForAlter (0), ScriptHeaderForCreate (1), ScriptHeaderForCreateOrAlter (2) """
        ...

    def SetCollectionTextMode(self, *args): #cannot find CLR method
        """ SetCollectionTextMode(self: ScriptNameObjectBase, newTextModeValue: bool, coll: SmoCollectionBase) """
        ...

    def SetIsSystemNamed(self, *args): #cannot find CLR method
        """ SetIsSystemNamed(self: ScriptNameObjectBase, flag: bool) """
        ...

    def SetTextBody(self, *args): #cannot find CLR method
        """ SetTextBody(self: ScriptNameObjectBase, textBody: str) """
        ...

    def SetTextHeader(self, *args): #cannot find CLR method
        """ SetTextHeader(self: ScriptNameObjectBase, textHeader: str) """
        ...

    def SetTextMode(self, *args): #cannot find CLR method
        """ SetTextMode(self: ScriptNameObjectBase, textMode: bool, collList: Array[SmoCollectionBase]) """
        ...

    def SwitchTextMode(self, *args): #cannot find CLR method
        """ SwitchTextMode(self: ScriptNameObjectBase, newTextModeValue: bool, collList: Array[SmoCollectionBase]) """
        ...

    def ThrowIfTextIsDirtyForAlter(self, *args): #cannot find CLR method
        """ ThrowIfTextIsDirtyForAlter(self: ScriptNameObjectBase) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ApplicationRole(IDroppable, IAlterable, IScriptable, IRenamable, IObjectPermission, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ApplicationRole()
    ApplicationRole(database: Database, name: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: ApplicationRole) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: ApplicationRole) -> DateTime """
        ...

    @property
    def DefaultSchema(self) -> str:
        """
        Get: DefaultSchema(self: ApplicationRole) -> str
        Set: DefaultSchema(self: ApplicationRole) = value
        """
        ...

    @property
    def Events(self): # -> ApplicationRoleEvents
        """ Get: Events(self: ApplicationRole) -> ApplicationRoleEvents """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ApplicationRole) -> int """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: ApplicationRole) -> Database
        Set: Parent(self: ApplicationRole) = value
        """
        ...


    def ChangePassword(self, password:str): # -> 
        """ ChangePassword(self: ApplicationRole, password: str)ChangePassword(self: ApplicationRole, password: SecureString) """
        ...

    def Create(self, password:str): # -> 
        """ Create(self: ApplicationRole, password: str)Create(self: ApplicationRole, password: SecureString) """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SmoCollectionBase(ICollection, AbstractCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetCollectionElementType(self, *args): #cannot find CLR method
        """ GetCollectionElementType(self: SmoCollectionBase) -> Type """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: SmoCollectionBase) -> IEnumerator """
        ...

    def GetItemById(self, *args): #cannot find CLR method
        """
        GetItemById(self: SmoCollectionBase, id: int) -> SqlSmoObject
        GetItemById(self: SmoCollectionBase, id: int, idPropName: str) -> SqlSmoObject
        """
        ...

    def GetObjectByIndex(self, *args): #cannot find CLR method
        """ GetObjectByIndex(self: SmoCollectionBase, index: int) -> SqlSmoObject """
        ...

    def InitializeChildCollection(self, *args): #cannot find CLR method
        """ InitializeChildCollection(self: SmoCollectionBase)InitializeChildCollection(self: SmoCollectionBase, refresh: bool) """
        ...

    def InitInnerCollection(self, *args): #cannot find CLR method
        """ InitInnerCollection(self: SmoCollectionBase) """
        ...

    def Refresh(self, refreshChildObjects:bool = ...): # -> 
        """ Refresh(self: SmoCollectionBase)Refresh(self: SmoCollectionBase, refreshChildObjects: bool) """
        ...

    def ValidateParentObject(self, *args): #cannot find CLR method
        """ ValidateParentObject(self: SmoCollectionBase, obj: SqlSmoObject) """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...

    initialized = ...


class SortedListCollectionBase(SmoCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def AddImpl(self, *args): #cannot find CLR method
        """ AddImpl(self: SortedListCollectionBase, obj: SqlSmoObject) """
        ...

    initialized = ...


class SimpleObjectCollectionBase(SortedListCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Contains(self, name:str) -> bool:
        """ Contains(self: SimpleObjectCollectionBase, name: str) -> bool """
        ...

    initialized = ...


class ApplicationRoleCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: ApplicationRoleCollection) -> Database """
        ...


    def Add(self, applicationRole:ApplicationRole): # -> 
        """ Add(self: ApplicationRoleCollection, applicationRole: ApplicationRole) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ApplicationRoleCollection, array: Array[ApplicationRole], index: int) """
        ...

    def ItemById(self, id:int) -> ApplicationRole:
        """ ItemById(self: ApplicationRoleCollection, id: int) -> ApplicationRole """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ApplicationRoleEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self): # -> ObjectEventSet
        """ GetEventSelection(self: ApplicationRoleEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: ApplicationRoleEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: ApplicationRoleEvents) """
        ...

    def SubscribeToEvents(self, events, eventHandler = ...): # ->  # Not found arg types: {'events': 'ObjectEventSet', 'eventHandler': 'ServerEventHandler'}
        """ SubscribeToEvents(self: ApplicationRoleEvents, events: ObjectEventSet)SubscribeToEvents(self: ApplicationRoleEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: ApplicationRoleEvents) """
        ...

    def UnsubscribeFromEvents(self, events): # ->  # Not found arg types: {'events': 'ObjectEventSet'}
        """ UnsubscribeFromEvents(self: ApplicationRoleEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class ArrayListCollectionBase(SmoCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def AddImpl(self, *args): #cannot find CLR method
        """ AddImpl(self: ArrayListCollectionBase, obj: SqlSmoObject, insertAtPosition: int) """
        ...

    initialized = ...


class AssemblyAlterOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) AssemblyAlterOptions, values: NoChecks (2), None (0) """
    NoChecks: AssemblyAlterOptions = ...
    value__ = ...


class AssemblySecurityLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AssemblySecurityLevel, values: External (2), Safe (1), Unrestricted (3) """
    External: AssemblySecurityLevel = ...
    Safe: AssemblySecurityLevel = ...
    Unrestricted: AssemblySecurityLevel = ...
    value__ = ...


class AsymmetricKey(ISfcSupportsDesignMode, IObjectPermission, IAlterable, IDroppable, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    AsymmetricKey()
    AsymmetricKey(database: Database, name: str)
    """
    @property
    def ID(self) -> int:
        """ Get: ID(self: AsymmetricKey) -> int """
        ...

    @property
    def KeyEncryptionAlgorithm(self): # -> AsymmetricKeyEncryptionAlgorithm
        """ Get: KeyEncryptionAlgorithm(self: AsymmetricKey) -> AsymmetricKeyEncryptionAlgorithm """
        ...

    @property
    def KeyLength(self) -> int:
        """ Get: KeyLength(self: AsymmetricKey) -> int """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: AsymmetricKey) -> str
        Set: Owner(self: AsymmetricKey) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: AsymmetricKey) -> Database
        Set: Parent(self: AsymmetricKey) = value
        """
        ...

    @property
    def PrivateKeyEncryptionType(self): # -> PrivateKeyEncryptionType
        """ Get: PrivateKeyEncryptionType(self: AsymmetricKey) -> PrivateKeyEncryptionType """
        ...

    @property
    def ProviderName(self) -> str:
        """
        Get: ProviderName(self: AsymmetricKey) -> str
        Set: ProviderName(self: AsymmetricKey) = value
        """
        ...

    @property
    def PublicKey(self) -> Array:
        """ Get: PublicKey(self: AsymmetricKey) -> Array[Byte] """
        ...

    @property
    def Sid(self) -> Array:
        """ Get: Sid(self: AsymmetricKey) -> Array[Byte] """
        ...

    @property
    def Thumbprint(self) -> Array:
        """ Get: Thumbprint(self: AsymmetricKey) -> Array[Byte] """
        ...


    def AddPrivateKey(self, password:str): # -> 
        """ AddPrivateKey(self: AsymmetricKey, password: str) """
        ...

    def ChangePrivateKeyPassword(self, oldPassword:str, newPassword:str): # -> 
        """ ChangePrivateKeyPassword(self: AsymmetricKey, oldPassword: str, newPassword: str) """
        ...

    def Create(self, *__args): # ->  # Not found arg types: {'*__args': 'AsymmetricKeyEncryptionAlgorithm'}
        """ Create(self: AsymmetricKey, encryptionAlgorithm: AsymmetricKeyEncryptionAlgorithm)Create(self: AsymmetricKey, encryptionAlgorithm: AsymmetricKeyEncryptionAlgorithm, password: str)Create(self: AsymmetricKey, keySource: str, sourceType: AsymmetricKeySourceType)Create(self: AsymmetricKey, keySource: str, sourceType: AsymmetricKeySourceType, password: str)Create(self: AsymmetricKey, providerAlgorithm: str, providerKeyName: str, createDispositionType: CreateDispositionType, sourceType: AsymmetricKeySourceType) """
        ...

    def RemovePrivateKey(self): # -> 
        """ RemovePrivateKey(self: AsymmetricKey) """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class AsymmetricKeyCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: AsymmetricKeyCollection) -> Database """
        ...


    def Add(self, asymmetricKey:AsymmetricKey): # -> 
        """ Add(self: AsymmetricKeyCollection, asymmetricKey: AsymmetricKey) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: AsymmetricKeyCollection, array: Array[AsymmetricKey], index: int) """
        ...

    def ItemById(self, id:int) -> AsymmetricKey:
        """ ItemById(self: AsymmetricKeyCollection, id: int) -> AsymmetricKey """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class AsymmetricKeyEncryptionAlgorithm(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AsymmetricKeyEncryptionAlgorithm, values: CryptographicProviderDefined (-1), Rsa1024 (1), Rsa2048 (2), Rsa3072 (3), Rsa4096 (4), Rsa512 (0) """
    CryptographicProviderDefined: AsymmetricKeyEncryptionAlgorithm = ...
    Rsa1024: AsymmetricKeyEncryptionAlgorithm = ...
    Rsa2048: AsymmetricKeyEncryptionAlgorithm = ...
    Rsa3072: AsymmetricKeyEncryptionAlgorithm = ...
    Rsa4096: AsymmetricKeyEncryptionAlgorithm = ...
    Rsa512: AsymmetricKeyEncryptionAlgorithm = ...
    value__ = ...


class AsymmetricKeySourceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AsymmetricKeySourceType, values: Executable (2), File (1), Provider (4), SqlAssembly (3) """
    Executable: AsymmetricKeySourceType = ...
    File: AsymmetricKeySourceType = ...
    Provider: AsymmetricKeySourceType = ...
    SqlAssembly: AsymmetricKeySourceType = ...
    value__ = ...


class AsyncStatus: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ExecutionStatus(self): # -> ExecutionStatus
        """ Get: ExecutionStatus(self: AsyncStatus) -> ExecutionStatus """
        ...

    @property
    def LastException(self) -> Exception:
        """ Get: LastException(self: AsyncStatus) -> Exception """
        ...



class AttachOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AttachOptions, values: EnableBroker (1), ErrorBrokerConversations (3), NewBroker (2), None (0), RebuildLog (4) """
    EnableBroker: AttachOptions = ...
    ErrorBrokerConversations: AttachOptions = ...
    NewBroker: AttachOptions = ...
    RebuildLog: AttachOptions = ...
    value__ = ...


class Audit(IDroppable, IAlterable, ICreatable, IScriptable, IRenamable, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Audit()
    Audit(server: Server, name: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: Audit) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: Audit) -> DateTime """
        ...

    @property
    def DestinationType(self): # -> AuditDestinationType
        """
        Get: DestinationType(self: Audit) -> AuditDestinationType
        Set: DestinationType(self: Audit) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """ Get: Enabled(self: Audit) -> bool """
        ...

    @property
    def FileName(self) -> str:
        """ Get: FileName(self: Audit) -> str """
        ...

    @property
    def FilePath(self) -> str:
        """
        Get: FilePath(self: Audit) -> str
        Set: FilePath(self: Audit) = value
        """
        ...

    @property
    def Filter(self) -> str:
        """
        Get: Filter(self: Audit) -> str
        Set: Filter(self: Audit) = value
        """
        ...

    @property
    def Guid(self) -> Guid:
        """
        Get: Guid(self: Audit) -> Guid
        Set: Guid(self: Audit) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Audit) -> int """
        ...

    @property
    def MaximumFiles(self) -> int:
        """
        Get: MaximumFiles(self: Audit) -> int
        Set: MaximumFiles(self: Audit) = value
        """
        ...

    @property
    def MaximumFileSize(self) -> int:
        """
        Get: MaximumFileSize(self: Audit) -> int
        Set: MaximumFileSize(self: Audit) = value
        """
        ...

    @property
    def MaximumFileSizeUnit(self): # -> AuditFileSizeUnit
        """
        Get: MaximumFileSizeUnit(self: Audit) -> AuditFileSizeUnit
        Set: MaximumFileSizeUnit(self: Audit) = value
        """
        ...

    @property
    def MaximumRolloverFiles(self) -> Int64:
        """
        Get: MaximumRolloverFiles(self: Audit) -> Int64
        Set: MaximumRolloverFiles(self: Audit) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Audit) -> str
        Set: Name(self: Audit) = value
        """
        ...

    @property
    def OnFailure(self): # -> OnFailureAction
        """
        Get: OnFailure(self: Audit) -> OnFailureAction
        Set: OnFailure(self: Audit) = value
        """
        ...

    @property
    def Parent(self): # -> Server
        """
        Get: Parent(self: Audit) -> Server
        Set: Parent(self: Audit) = value
        """
        ...

    @property
    def QueueDelay(self) -> int:
        """
        Get: QueueDelay(self: Audit) -> int
        Set: QueueDelay(self: Audit) = value
        """
        ...

    @property
    def ReserveDiskSpace(self) -> bool:
        """
        Get: ReserveDiskSpace(self: Audit) -> bool
        Set: ReserveDiskSpace(self: Audit) = value
        """
        ...


    def Disable(self): # -> 
        """ Disable(self: Audit) """
        ...

    def Enable(self): # -> 
        """ Enable(self: Audit) """
        ...

    def EnumDatabaseAuditSpecification(self) -> DataTable:
        """ EnumDatabaseAuditSpecification(self: Audit) -> DataTable """
        ...

    def EnumServerAuditSpecification(self) -> str:
        """ EnumServerAuditSpecification(self: Audit) -> str """
        ...

    def __new__(cls, server = ..., name:str = ...) -> Self: # Not found arg types: {'server': 'Server'}
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class AuditActionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AuditActionType, values: ApplicationRoleChangePasswordGroup (0), AuditChangeGroup (1), BackupRestoreGroup (2), BrokerLoginGroup (3), DatabaseChangeGroup (4), DatabaseLogoutGroup (5), DatabaseMirroringLoginGroup (6), DatabaseObjectAccessGroup (7), DatabaseObjectChangeGroup (8), DatabaseObjectOwnershipChangeGroup (9), DatabaseObjectPermissionChangeGroup (10), DatabaseOperationGroup (11), DatabaseOwnershipChangeGroup (12), DatabasePermissionChangeGroup (13), DatabasePrincipalChangeGroup (14), DatabasePrincipalImpersonationGroup (15), DatabaseRoleMemberChangeGroup (16), DbccGroup (17), Delete (18), Execute (19), FailedDatabaseAuthenticationGroup (20), FailedLoginGroup (21), FullTextGroup (22), GlobalTransactionsLoginGroup (23), Insert (24), LoginChangePasswordGroup (25), LogoutGroup (26), Receive (27), References (28), SchemaObjectAccessGroup (29), SchemaObjectChangeGroup (30), SchemaObjectOwnershipChangeGroup (31), SchemaObjectPermissionChangeGroup (32), Select (33), ServerObjectChangeGroup (34), ServerObjectOwnershipChangeGroup (35), ServerObjectPermissionChangeGroup (36), ServerOperationGroup (37), ServerPermissionChangeGroup (38), ServerPrincipalChangeGroup (39), ServerPrincipalImpersonationGroup (40), ServerRoleMemberChangeGroup (41), ServerStateChangeGroup (42), SuccessfulDatabaseAuthenticationGroup (43), SuccessfulLoginGroup (44), TraceChangeGroup (45), TransactionGroup (49), Update (46), UserChangePasswordGroup (47), UserDefinedAuditGroup (48) """
    ApplicationRoleChangePasswordGroup: AuditActionType = ...
    AuditChangeGroup: AuditActionType = ...
    BackupRestoreGroup: AuditActionType = ...
    BrokerLoginGroup: AuditActionType = ...
    DatabaseChangeGroup: AuditActionType = ...
    DatabaseLogoutGroup: AuditActionType = ...
    DatabaseMirroringLoginGroup: AuditActionType = ...
    DatabaseObjectAccessGroup: AuditActionType = ...
    DatabaseObjectChangeGroup: AuditActionType = ...
    DatabaseObjectOwnershipChangeGroup: AuditActionType = ...
    DatabaseObjectPermissionChangeGroup: AuditActionType = ...
    DatabaseOperationGroup: AuditActionType = ...
    DatabaseOwnershipChangeGroup: AuditActionType = ...
    DatabasePermissionChangeGroup: AuditActionType = ...
    DatabasePrincipalChangeGroup: AuditActionType = ...
    DatabasePrincipalImpersonationGroup: AuditActionType = ...
    DatabaseRoleMemberChangeGroup: AuditActionType = ...
    DbccGroup: AuditActionType = ...
    Delete: AuditActionType = ...
    Execute: AuditActionType = ...
    FailedDatabaseAuthenticationGroup: AuditActionType = ...
    FailedLoginGroup: AuditActionType = ...
    FullTextGroup: AuditActionType = ...
    GlobalTransactionsLoginGroup: AuditActionType = ...
    Insert: AuditActionType = ...
    LoginChangePasswordGroup: AuditActionType = ...
    LogoutGroup: AuditActionType = ...
    Receive: AuditActionType = ...
    References: AuditActionType = ...
    SchemaObjectAccessGroup: AuditActionType = ...
    SchemaObjectChangeGroup: AuditActionType = ...
    SchemaObjectOwnershipChangeGroup: AuditActionType = ...
    SchemaObjectPermissionChangeGroup: AuditActionType = ...
    Select: AuditActionType = ...
    ServerObjectChangeGroup: AuditActionType = ...
    ServerObjectOwnershipChangeGroup: AuditActionType = ...
    ServerObjectPermissionChangeGroup: AuditActionType = ...
    ServerOperationGroup: AuditActionType = ...
    ServerPermissionChangeGroup: AuditActionType = ...
    ServerPrincipalChangeGroup: AuditActionType = ...
    ServerPrincipalImpersonationGroup: AuditActionType = ...
    ServerRoleMemberChangeGroup: AuditActionType = ...
    ServerStateChangeGroup: AuditActionType = ...
    SuccessfulDatabaseAuthenticationGroup: AuditActionType = ...
    SuccessfulLoginGroup: AuditActionType = ...
    TraceChangeGroup: AuditActionType = ...
    TransactionGroup: AuditActionType = ...
    Update: AuditActionType = ...
    UserChangePasswordGroup: AuditActionType = ...
    UserDefinedAuditGroup: AuditActionType = ...
    value__ = ...


class AuditCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: AuditCollection) -> Server """
        ...


    def Add(self, audit:Audit): # -> 
        """ Add(self: AuditCollection, audit: Audit) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: AuditCollection, array: Array[Audit], index: int) """
        ...

    def ItemById(self, id:int) -> Audit:
        """ ItemById(self: AuditCollection, id: int) -> Audit """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class AuditDestinationType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AuditDestinationType, values: ApplicationLog (2), File (0), SecurityLog (1) """
    ApplicationLog: AuditDestinationType = ...
    File: AuditDestinationType = ...
    SecurityLog: AuditDestinationType = ...
    value__ = ...


class AuditExtender(SmoObjectExtender, ISfcValidate): # skipped bases: <type 'INotifyPropertyChanged'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcPropertyProvider'>, <type 'object'>
    """
    AuditExtender()
    AuditExtender(audit: Audit)
    """
    @property
    def ConnectionContext(self) -> ServerConnection:
        """ Get: ConnectionContext(self: AuditExtender) -> ServerConnection """
        ...

    @property
    def State(self): # -> SqlSmoState
        """ Get: State(self: AuditExtender) -> SqlSmoState """
        ...



class AuditFileSizeUnit(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AuditFileSizeUnit, values: Gb (1), Mb (0), Tb (2) """
    Gb: AuditFileSizeUnit = ...
    Mb: AuditFileSizeUnit = ...
    Tb: AuditFileSizeUnit = ...
    value__ = ...


class AuditLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) AuditLevel, values: All (3), Failure (2), None (0), Success (1) """
    All: AuditLevel = ...
    Failure: AuditLevel = ...
    Success: AuditLevel = ...
    value__ = ...


class AuditSpecification(IDroppable, IAlterable, ICreatable, IScriptable, ScriptNameObjectBase, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Name(self) -> str:
        """
        Get: Name(self: AuditSpecification) -> str
        Set: Name(self: AuditSpecification) = value
        """
        ...


    def AddAuditSpecificationDetail(self, *__args): # ->  # Not found arg types: {'*__args': 'AuditSpecificationDetail'}
        """ AddAuditSpecificationDetail(self: AuditSpecification, auditSpecificationDetail: AuditSpecificationDetail)AddAuditSpecificationDetail(self: AuditSpecification, auditSpecificationDetails: ICollection[AuditSpecificationDetail]) """
        ...

    def Disable(self): # -> 
        """ Disable(self: AuditSpecification) """
        ...

    def Enable(self): # -> 
        """ Enable(self: AuditSpecification) """
        ...

    def EnumAuditSpecificationDetails(self) -> ICollection:
        """ EnumAuditSpecificationDetails(self: AuditSpecification) -> ICollection[AuditSpecificationDetail] """
        ...

    def RemoveAuditSpecificationDetail(self, *__args): # ->  # Not found arg types: {'*__args': 'AuditSpecificationDetail'}
        """ RemoveAuditSpecificationDetail(self: AuditSpecification, auditSpecificationDetail: AuditSpecificationDetail)RemoveAuditSpecificationDetail(self: AuditSpecification, auditSpecificationDetails: ICollection[AuditSpecificationDetail]) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class AuditSpecificationDetail: # skipped bases: <type 'object'>, <type 'object'>
    """
    AuditSpecificationDetail(action: AuditActionType, objectClass: str, objectSchema: str, objectName: str, principal: str)
    AuditSpecificationDetail(action: AuditActionType, objectSchema: str, objectName: str, principal: str)
    AuditSpecificationDetail(action: AuditActionType, objectName: str, principal: str)
    AuditSpecificationDetail(action: AuditActionType)
    """
    @property
    def Action(self) -> AuditActionType:
        """ Get: Action(self: AuditSpecificationDetail) -> AuditActionType """
        ...

    @property
    def ObjectClass(self) -> str:
        """ Get: ObjectClass(self: AuditSpecificationDetail) -> str """
        ...

    @property
    def ObjectName(self) -> str:
        """ Get: ObjectName(self: AuditSpecificationDetail) -> str """
        ...

    @property
    def ObjectSchema(self) -> str:
        """ Get: ObjectSchema(self: AuditSpecificationDetail) -> str """
        ...

    @property
    def Principal(self) -> str:
        """ Get: Principal(self: AuditSpecificationDetail) -> str """
        ...



class AuditStatusType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AuditStatusType, values: Failed (2), Started (0), Stopped (1) """
    Failed: AuditStatusType = ...
    Started: AuditStatusType = ...
    Stopped: AuditStatusType = ...
    value__ = ...


class AuthenticationType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AuthenticationType, values: Database (2), External (4), Instance (1), None (0), Windows (3) """
    Database: AuthenticationType = ...
    External: AuthenticationType = ...
    Instance: AuthenticationType = ...
    value__ = ...
    Windows: AuthenticationType = ...


class AvailabilityDatabase(IDroppable, ICreatable, IDropIfExists, IScriptable, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    AvailabilityDatabase()
    AvailabilityDatabase(availabilityGroup: AvailabilityGroup, name: str)
    """
    @property
    def IsFailoverReady(self) -> bool:
        """ Get: IsFailoverReady(self: AvailabilityDatabase) -> bool """
        ...

    @property
    def IsJoined(self) -> bool:
        """ Get: IsJoined(self: AvailabilityDatabase) -> bool """
        ...

    @property
    def IsPendingSecondarySuspend(self) -> bool:
        """ Get: IsPendingSecondarySuspend(self: AvailabilityDatabase) -> bool """
        ...

    @property
    def IsSuspended(self) -> bool:
        """ Get: IsSuspended(self: AvailabilityDatabase) -> bool """
        ...

    @property
    def Parent(self): # -> AvailabilityGroup
        """
        Get: Parent(self: AvailabilityDatabase) -> AvailabilityGroup
        Set: Parent(self: AvailabilityDatabase) = value
        """
        ...

    @property
    def RecoveryLSN(self) -> Decimal:
        """ Get: RecoveryLSN(self: AvailabilityDatabase) -> Decimal """
        ...

    @property
    def SynchronizationState(self): # -> AvailabilityDatabaseSynchronizationState
        """ Get: SynchronizationState(self: AvailabilityDatabase) -> AvailabilityDatabaseSynchronizationState """
        ...

    @property
    def TruncationLSN(self) -> Decimal:
        """ Get: TruncationLSN(self: AvailabilityDatabase) -> Decimal """
        ...

    @property
    def UniqueId(self) -> Guid:
        """ Get: UniqueId(self: AvailabilityDatabase) -> Guid """
        ...


    def JoinAvailablityGroup(self): # -> 
        """ JoinAvailablityGroup(self: AvailabilityDatabase) """
        ...

    def LeaveAvailabilityGroup(self): # -> 
        """ LeaveAvailabilityGroup(self: AvailabilityDatabase) """
        ...

    def ResumeDataMovement(self): # -> 
        """ ResumeDataMovement(self: AvailabilityDatabase) """
        ...

    def SuspendDataMovement(self): # -> 
        """ SuspendDataMovement(self: AvailabilityDatabase) """
        ...

    def __new__(cls, availabilityGroup = ..., name:str = ...) -> Self: # Not found arg types: {'availabilityGroup': 'AvailabilityGroup'}
        """
        __new__(cls: type)
        __new__(cls: type, availabilityGroup: AvailabilityGroup, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class AvailabilityDatabaseCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> AvailabilityGroup
        """ Get: Parent(self: AvailabilityDatabaseCollection) -> AvailabilityGroup """
        ...


    def Add(self, AvailabilityDatabase:AvailabilityDatabase): # -> 
        """ Add(self: AvailabilityDatabaseCollection, AvailabilityDatabase: AvailabilityDatabase) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: AvailabilityDatabaseCollection, array: Array[AvailabilityDatabase], index: int) """
        ...

    def ItemById(self, id:int) -> AvailabilityDatabase:
        """ ItemById(self: AvailabilityDatabaseCollection, id: int) -> AvailabilityDatabase """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: AvailabilityDatabaseCollection, name: str)Remove(self: AvailabilityDatabaseCollection, AvailabilityDatabase: AvailabilityDatabase) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class AvailabilityDatabaseSynchronizationState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityDatabaseSynchronizationState, values: Initializing (4), NotSynchronizing (0), Reverting (3), Synchronized (2), Synchronizing (1) """
    Initializing: AvailabilityDatabaseSynchronizationState = ...
    NotSynchronizing: AvailabilityDatabaseSynchronizationState = ...
    Reverting: AvailabilityDatabaseSynchronizationState = ...
    Synchronized: AvailabilityDatabaseSynchronizationState = ...
    Synchronizing: AvailabilityDatabaseSynchronizationState = ...
    value__ = ...


class AvailabilityGroup(IDroppable, IAlterable, ICreatable, IScriptable, IObjectPermission, IDropIfExists, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    AvailabilityGroup()
    AvailabilityGroup(server: Server, name: str)
    """
    @property
    def AutomatedBackupPreference(self): # -> AvailabilityGroupAutomatedBackupPreference
        """
        Get: AutomatedBackupPreference(self: AvailabilityGroup) -> AvailabilityGroupAutomatedBackupPreference
        Set: AutomatedBackupPreference(self: AvailabilityGroup) = value
        """
        ...

    @property
    def AvailabilityDatabases(self) -> AvailabilityDatabaseCollection:
        """ Get: AvailabilityDatabases(self: AvailabilityGroup) -> AvailabilityDatabaseCollection """
        ...

    @property
    def AvailabilityGroupListeners(self): # -> AvailabilityGroupListenerCollection
        """ Get: AvailabilityGroupListeners(self: AvailabilityGroup) -> AvailabilityGroupListenerCollection """
        ...

    @property
    def AvailabilityReplicas(self): # -> AvailabilityReplicaCollection
        """ Get: AvailabilityReplicas(self: AvailabilityGroup) -> AvailabilityReplicaCollection """
        ...

    @property
    def BasicAvailabilityGroup(self) -> bool:
        """
        Get: BasicAvailabilityGroup(self: AvailabilityGroup) -> bool
        Set: BasicAvailabilityGroup(self: AvailabilityGroup) = value
        """
        ...

    @property
    def ClusterType(self): # -> AvailabilityGroupClusterType
        """
        Get: ClusterType(self: AvailabilityGroup) -> AvailabilityGroupClusterType
        Set: ClusterType(self: AvailabilityGroup) = value
        """
        ...

    @property
    def ClusterTypeWithDefault(self): # -> AvailabilityGroupClusterType
        """ Get: ClusterTypeWithDefault(self: AvailabilityGroup) -> AvailabilityGroupClusterType """
        ...

    @property
    def DatabaseHealthTrigger(self) -> bool:
        """
        Get: DatabaseHealthTrigger(self: AvailabilityGroup) -> bool
        Set: DatabaseHealthTrigger(self: AvailabilityGroup) = value
        """
        ...

    @property
    def DatabaseReplicaStates(self): # -> DatabaseReplicaStateCollection
        """ Get: DatabaseReplicaStates(self: AvailabilityGroup) -> DatabaseReplicaStateCollection """
        ...

    @property
    def DtcSupportEnabled(self) -> bool:
        """
        Get: DtcSupportEnabled(self: AvailabilityGroup) -> bool
        Set: DtcSupportEnabled(self: AvailabilityGroup) = value
        """
        ...

    @property
    def FailureConditionLevel(self): # -> AvailabilityGroupFailureConditionLevel
        """
        Get: FailureConditionLevel(self: AvailabilityGroup) -> AvailabilityGroupFailureConditionLevel
        Set: FailureConditionLevel(self: AvailabilityGroup) = value
        """
        ...

    @property
    def HealthCheckTimeout(self) -> int:
        """
        Get: HealthCheckTimeout(self: AvailabilityGroup) -> int
        Set: HealthCheckTimeout(self: AvailabilityGroup) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: AvailabilityGroup) -> int """
        ...

    @property
    def IsDistributedAvailabilityGroup(self) -> bool:
        """
        Get: IsDistributedAvailabilityGroup(self: AvailabilityGroup) -> bool
        Set: IsDistributedAvailabilityGroup(self: AvailabilityGroup) = value
        """
        ...

    @property
    def LocalReplicaRole(self): # -> AvailabilityReplicaRole
        """ Get: LocalReplicaRole(self: AvailabilityGroup) -> AvailabilityReplicaRole """
        ...

    @property
    def Parent(self): # -> Server
        """
        Get: Parent(self: AvailabilityGroup) -> Server
        Set: Parent(self: AvailabilityGroup) = value
        """
        ...

    @property
    def PrimaryReplicaServerName(self) -> str:
        """ Get: PrimaryReplicaServerName(self: AvailabilityGroup) -> str """
        ...

    @property
    def RequiredCopiesToCommit(self) -> int:
        """
        Get: RequiredCopiesToCommit(self: AvailabilityGroup) -> int
        Set: RequiredCopiesToCommit(self: AvailabilityGroup) = value
        """
        ...

    @property
    def UniqueId(self) -> Guid:
        """ Get: UniqueId(self: AvailabilityGroup) -> Guid """
        ...


    def DemoteAsSecondary(self): # -> 
        """ DemoteAsSecondary(self: AvailabilityGroup) """
        ...

    def EnumReplicaClusterNodes(self) -> DataTable:
        """ EnumReplicaClusterNodes(self: AvailabilityGroup) -> DataTable """
        ...

    def Failover(self): # -> 
        """ Failover(self: AvailabilityGroup) """
        ...

    def FailoverWithPotentialDataLoss(self): # -> 
        """ FailoverWithPotentialDataLoss(self: AvailabilityGroup) """
        ...

    def __new__(cls, server = ..., name:str = ...) -> Self: # Not found arg types: {'server': 'Server'}
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class AvailabilityGroupAutomatedBackupPreference(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityGroupAutomatedBackupPreference, values: None (3), Primary (0), Secondary (2), SecondaryOnly (1), Unknown (4) """
    Primary: AvailabilityGroupAutomatedBackupPreference = ...
    Secondary: AvailabilityGroupAutomatedBackupPreference = ...
    SecondaryOnly: AvailabilityGroupAutomatedBackupPreference = ...
    Unknown: AvailabilityGroupAutomatedBackupPreference = ...
    value__ = ...


class AvailabilityGroupClusterType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityGroupClusterType, values: External (2), None (1), Wsfc (0) """
    External: AvailabilityGroupClusterType = ...
    value__ = ...
    Wsfc: AvailabilityGroupClusterType = ...


class AvailabilityGroupCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: AvailabilityGroupCollection) -> Server """
        ...


    def Add(self, availabilityGroup:AvailabilityGroup): # -> 
        """ Add(self: AvailabilityGroupCollection, availabilityGroup: AvailabilityGroup) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: AvailabilityGroupCollection, array: Array[AvailabilityGroup], index: int) """
        ...

    def ItemById(self, id:int) -> AvailabilityGroup:
        """ ItemById(self: AvailabilityGroupCollection, id: int) -> AvailabilityGroup """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: AvailabilityGroupCollection, name: str)Remove(self: AvailabilityGroupCollection, availabilityGroup: AvailabilityGroup) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class AvailabilityGroupFailureConditionLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityGroupFailureConditionLevel, values: OnAnyQualifiedFailureCondition (5), OnCriticalServerErrors (3), OnModerateServerErrors (4), OnServerDown (1), OnServerUnresponsive (2), Unknown (6) """
    OnAnyQualifiedFailureCondition: AvailabilityGroupFailureConditionLevel = ...
    OnCriticalServerErrors: AvailabilityGroupFailureConditionLevel = ...
    OnModerateServerErrors: AvailabilityGroupFailureConditionLevel = ...
    OnServerDown: AvailabilityGroupFailureConditionLevel = ...
    OnServerUnresponsive: AvailabilityGroupFailureConditionLevel = ...
    Unknown: AvailabilityGroupFailureConditionLevel = ...
    value__ = ...


class AvailabilityGroupListener(IDroppable, IAlterable, ICreatable, IScriptable, IDropIfExists, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    AvailabilityGroupListener()
    AvailabilityGroupListener(availabilityGroup: AvailabilityGroup, name: str)
    """
    @property
    def AvailabilityGroupListenerIPAddresses(self): # -> AvailabilityGroupListenerIPAddressCollection
        """ Get: AvailabilityGroupListenerIPAddresses(self: AvailabilityGroupListener) -> AvailabilityGroupListenerIPAddressCollection """
        ...

    @property
    def ClusterIPConfiguration(self) -> str:
        """ Get: ClusterIPConfiguration(self: AvailabilityGroupListener) -> str """
        ...

    @property
    def IsConformant(self) -> bool:
        """ Get: IsConformant(self: AvailabilityGroupListener) -> bool """
        ...

    @property
    def Parent(self) -> AvailabilityGroup:
        """
        Get: Parent(self: AvailabilityGroupListener) -> AvailabilityGroup
        Set: Parent(self: AvailabilityGroupListener) = value
        """
        ...

    @property
    def PortNumber(self) -> int:
        """
        Get: PortNumber(self: AvailabilityGroupListener) -> int
        Set: PortNumber(self: AvailabilityGroupListener) = value
        """
        ...

    @property
    def UniqueId(self) -> str:
        """ Get: UniqueId(self: AvailabilityGroupListener) -> str """
        ...


    def RestartListener(self): # -> 
        """ RestartListener(self: AvailabilityGroupListener) """
        ...

    def __new__(cls, availabilityGroup:AvailabilityGroup = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, availabilityGroup: AvailabilityGroup, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class AvailabilityGroupListenerCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> AvailabilityGroup:
        """ Get: Parent(self: AvailabilityGroupListenerCollection) -> AvailabilityGroup """
        ...


    def Add(self, AvailabilityGroupListener:AvailabilityGroupListener): # -> 
        """ Add(self: AvailabilityGroupListenerCollection, AvailabilityGroupListener: AvailabilityGroupListener) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: AvailabilityGroupListenerCollection, array: Array[AvailabilityGroupListener], index: int) """
        ...

    def ItemById(self, id:int) -> AvailabilityGroupListener:
        """ ItemById(self: AvailabilityGroupListenerCollection, id: int) -> AvailabilityGroupListener """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class AvailabilityGroupListenerIPAddress(SqlSmoObject, ICreatable, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    AvailabilityGroupListenerIPAddress()
    AvailabilityGroupListenerIPAddress(availabilityGroupListener: AvailabilityGroupListener)
    """
    @property
    def IPAddress(self) -> str:
        """
        Get: IPAddress(self: AvailabilityGroupListenerIPAddress) -> str
        Set: IPAddress(self: AvailabilityGroupListenerIPAddress) = value
        """
        ...

    @property
    def IPAddressState(self): # -> AvailabilityGroupListenerIPState
        """ Get: IPAddressState(self: AvailabilityGroupListenerIPAddress) -> AvailabilityGroupListenerIPState """
        ...

    @property
    def IPAddressStateDescription(self) -> str:
        """ Get: IPAddressStateDescription(self: AvailabilityGroupListenerIPAddress) -> str """
        ...

    @property
    def IsDHCP(self) -> bool:
        """
        Get: IsDHCP(self: AvailabilityGroupListenerIPAddress) -> bool
        Set: IsDHCP(self: AvailabilityGroupListenerIPAddress) = value
        """
        ...

    @property
    def IsIPv6(self) -> bool:
        """ Get: IsIPv6(self: AvailabilityGroupListenerIPAddress) -> bool """
        ...

    @property
    def Parent(self) -> AvailabilityGroupListener:
        """
        Get: Parent(self: AvailabilityGroupListenerIPAddress) -> AvailabilityGroupListener
        Set: Parent(self: AvailabilityGroupListenerIPAddress) = value
        """
        ...

    @property
    def SubnetIP(self) -> str:
        """
        Get: SubnetIP(self: AvailabilityGroupListenerIPAddress) -> str
        Set: SubnetIP(self: AvailabilityGroupListenerIPAddress) = value
        """
        ...

    @property
    def SubnetIPv4Mask(self) -> str:
        """ Get: SubnetIPv4Mask(self: AvailabilityGroupListenerIPAddress) -> str """
        ...

    @property
    def SubnetMask(self) -> str:
        """
        Get: SubnetMask(self: AvailabilityGroupListenerIPAddress) -> str
        Set: SubnetMask(self: AvailabilityGroupListenerIPAddress) = value
        """
        ...

    @property
    def SubnetPrefixLength(self) -> int:
        """ Get: SubnetPrefixLength(self: AvailabilityGroupListenerIPAddress) -> int """
        ...


    def __new__(cls, availabilityGroupListener:AvailabilityGroupListener = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, availabilityGroupListener: AvailabilityGroupListener)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class AvailabilityGroupListenerIPAddressCollectionBase(SortedListCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    initialized = ...


class AvailabilityGroupListenerIPAddressCollection(AvailabilityGroupListenerIPAddressCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> AvailabilityGroupListener:
        """ Get: Parent(self: AvailabilityGroupListenerIPAddressCollection) -> AvailabilityGroupListener """
        ...


    def Add(self, AvailabilityGroupListenerIPAddress:AvailabilityGroupListenerIPAddress): # -> 
        """ Add(self: AvailabilityGroupListenerIPAddressCollection, AvailabilityGroupListenerIPAddress: AvailabilityGroupListenerIPAddress) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: AvailabilityGroupListenerIPAddressCollection, array: Array[AvailabilityGroupListenerIPAddress], index: int) """
        ...

    def ItemById(self, id:int) -> AvailabilityGroupListenerIPAddress:
        """ ItemById(self: AvailabilityGroupListenerIPAddressCollection, id: int) -> AvailabilityGroupListenerIPAddress """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class AvailabilityGroupListenerIPState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityGroupListenerIPState, values: Failure (3), Offline (0), Online (1), OnlinePending (2), Unknown (4) """
    Failure: AvailabilityGroupListenerIPState = ...
    Offline: AvailabilityGroupListenerIPState = ...
    Online: AvailabilityGroupListenerIPState = ...
    OnlinePending: AvailabilityGroupListenerIPState = ...
    Unknown: AvailabilityGroupListenerIPState = ...
    value__ = ...


class AvailabilityGroupRollupSynchronizationState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityGroupRollupSynchronizationState, values: AllSynchronized (3), AllSynchronizing (2), NoneSynchronizing (0), PartiallySynchronizing (1), Unknown (4) """
    AllSynchronized: AvailabilityGroupRollupSynchronizationState = ...
    AllSynchronizing: AvailabilityGroupRollupSynchronizationState = ...
    NoneSynchronizing: AvailabilityGroupRollupSynchronizationState = ...
    PartiallySynchronizing: AvailabilityGroupRollupSynchronizationState = ...
    Unknown: AvailabilityGroupRollupSynchronizationState = ...
    value__ = ...


class AvailabilityGroupState(IAvailabilityGroupState, IDmfAdapter): # skipped bases: <type 'IDmfFacet'>, <type 'IRefreshable'>, <type 'object'>
    """ AvailabilityGroupState(ag: AvailabilityGroup) """
    def Refresh(self): # -> 
        """ Refresh(self: AvailabilityGroupState) """
        ...


class AvailabilityReplica(IDroppable, IAlterable, ICreatable, IScriptable, IDropIfExists, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    AvailabilityReplica()
    AvailabilityReplica(availabilityGroup: AvailabilityGroup, name: str)
    """
    @property
    def AvailabilityMode(self): # -> AvailabilityReplicaAvailabilityMode
        """
        Get: AvailabilityMode(self: AvailabilityReplica) -> AvailabilityReplicaAvailabilityMode
        Set: AvailabilityMode(self: AvailabilityReplica) = value
        """
        ...

    @property
    def BackupPriority(self) -> int:
        """
        Get: BackupPriority(self: AvailabilityReplica) -> int
        Set: BackupPriority(self: AvailabilityReplica) = value
        """
        ...

    @property
    def ConnectionModeInPrimaryRole(self): # -> AvailabilityReplicaConnectionModeInPrimaryRole
        """
        Get: ConnectionModeInPrimaryRole(self: AvailabilityReplica) -> AvailabilityReplicaConnectionModeInPrimaryRole
        Set: ConnectionModeInPrimaryRole(self: AvailabilityReplica) = value
        """
        ...

    @property
    def ConnectionModeInSecondaryRole(self): # -> AvailabilityReplicaConnectionModeInSecondaryRole
        """
        Get: ConnectionModeInSecondaryRole(self: AvailabilityReplica) -> AvailabilityReplicaConnectionModeInSecondaryRole
        Set: ConnectionModeInSecondaryRole(self: AvailabilityReplica) = value
        """
        ...

    @property
    def ConnectionState(self): # -> AvailabilityReplicaConnectionState
        """ Get: ConnectionState(self: AvailabilityReplica) -> AvailabilityReplicaConnectionState """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: AvailabilityReplica) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: AvailabilityReplica) -> DateTime """
        ...

    @property
    def EndpointUrl(self) -> str:
        """
        Get: EndpointUrl(self: AvailabilityReplica) -> str
        Set: EndpointUrl(self: AvailabilityReplica) = value
        """
        ...

    @property
    def FailoverMode(self): # -> AvailabilityReplicaFailoverMode
        """
        Get: FailoverMode(self: AvailabilityReplica) -> AvailabilityReplicaFailoverMode
        Set: FailoverMode(self: AvailabilityReplica) = value
        """
        ...

    @property
    def IsSeedingModeSupported(self) -> bool:
        """ Get: IsSeedingModeSupported(self: AvailabilityReplica) -> bool """
        ...

    @property
    def JoinState(self): # -> AvailabilityReplicaJoinState
        """ Get: JoinState(self: AvailabilityReplica) -> AvailabilityReplicaJoinState """
        ...

    @property
    def LastConnectErrorDescription(self) -> str:
        """ Get: LastConnectErrorDescription(self: AvailabilityReplica) -> str """
        ...

    @property
    def LastConnectErrorNumber(self) -> int:
        """ Get: LastConnectErrorNumber(self: AvailabilityReplica) -> int """
        ...

    @property
    def LastConnectErrorTimestamp(self) -> DateTime:
        """ Get: LastConnectErrorTimestamp(self: AvailabilityReplica) -> DateTime """
        ...

    @property
    def MemberState(self): # -> ClusterMemberState
        """ Get: MemberState(self: AvailabilityReplica) -> ClusterMemberState """
        ...

    @property
    def OperationalState(self): # -> AvailabilityReplicaOperationalState
        """ Get: OperationalState(self: AvailabilityReplica) -> AvailabilityReplicaOperationalState """
        ...

    @property
    def Owner(self) -> str:
        """ Get: Owner(self: AvailabilityReplica) -> str """
        ...

    @property
    def Parent(self) -> AvailabilityGroup:
        """
        Get: Parent(self: AvailabilityReplica) -> AvailabilityGroup
        Set: Parent(self: AvailabilityReplica) = value
        """
        ...

    @property
    def QuorumVoteCount(self) -> int:
        """ Get: QuorumVoteCount(self: AvailabilityReplica) -> int """
        ...

    @property
    def ReadonlyRoutingConnectionUrl(self) -> str:
        """
        Get: ReadonlyRoutingConnectionUrl(self: AvailabilityReplica) -> str
        Set: ReadonlyRoutingConnectionUrl(self: AvailabilityReplica) = value
        """
        ...

    @property
    def ReadonlyRoutingList(self) -> StringCollection:
        """ Get: ReadonlyRoutingList(self: AvailabilityReplica) -> StringCollection """
        ...

    @property
    def Role(self): # -> AvailabilityReplicaRole
        """ Get: Role(self: AvailabilityReplica) -> AvailabilityReplicaRole """
        ...

    @property
    def RollupRecoveryState(self): # -> AvailabilityReplicaRollupRecoveryState
        """ Get: RollupRecoveryState(self: AvailabilityReplica) -> AvailabilityReplicaRollupRecoveryState """
        ...

    @property
    def RollupSynchronizationState(self): # -> AvailabilityReplicaRollupSynchronizationState
        """ Get: RollupSynchronizationState(self: AvailabilityReplica) -> AvailabilityReplicaRollupSynchronizationState """
        ...

    @property
    def SeedingMode(self): # -> AvailabilityReplicaSeedingMode
        """
        Get: SeedingMode(self: AvailabilityReplica) -> AvailabilityReplicaSeedingMode
        Set: SeedingMode(self: AvailabilityReplica) = value
        """
        ...

    @property
    def SessionTimeout(self) -> int:
        """
        Get: SessionTimeout(self: AvailabilityReplica) -> int
        Set: SessionTimeout(self: AvailabilityReplica) = value
        """
        ...

    @property
    def UniqueId(self) -> Guid:
        """ Get: UniqueId(self: AvailabilityReplica) -> Guid """
        ...


    def __new__(cls, availabilityGroup:AvailabilityGroup = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, availabilityGroup: AvailabilityGroup, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class AvailabilityReplicaAvailabilityMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityReplicaAvailabilityMode, values: AsynchronousCommit (0), SynchronousCommit (1), Unknown (2) """
    AsynchronousCommit: AvailabilityReplicaAvailabilityMode = ...
    SynchronousCommit: AvailabilityReplicaAvailabilityMode = ...
    Unknown: AvailabilityReplicaAvailabilityMode = ...
    value__ = ...


class AvailabilityReplicaCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> AvailabilityGroup:
        """ Get: Parent(self: AvailabilityReplicaCollection) -> AvailabilityGroup """
        ...


    def Add(self, availabilityReplica:AvailabilityReplica): # -> 
        """ Add(self: AvailabilityReplicaCollection, availabilityReplica: AvailabilityReplica) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: AvailabilityReplicaCollection, array: Array[AvailabilityReplica], index: int) """
        ...

    def ItemById(self, id:int) -> AvailabilityReplica:
        """ ItemById(self: AvailabilityReplicaCollection, id: int) -> AvailabilityReplica """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: AvailabilityReplicaCollection, name: str)Remove(self: AvailabilityReplicaCollection, availabilityReplica: AvailabilityReplica) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class AvailabilityReplicaConnectionModeInPrimaryRole(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityReplicaConnectionModeInPrimaryRole, values: AllowAllConnections (2), AllowReadWriteConnections (3), Unknown (4) """
    AllowAllConnections: AvailabilityReplicaConnectionModeInPrimaryRole = ...
    AllowReadWriteConnections: AvailabilityReplicaConnectionModeInPrimaryRole = ...
    Unknown: AvailabilityReplicaConnectionModeInPrimaryRole = ...
    value__ = ...


class AvailabilityReplicaConnectionModeInSecondaryRole(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityReplicaConnectionModeInSecondaryRole, values: AllowAllConnections (2), AllowNoConnections (0), AllowReadIntentConnectionsOnly (1), Unknown (3) """
    AllowAllConnections: AvailabilityReplicaConnectionModeInSecondaryRole = ...
    AllowNoConnections: AvailabilityReplicaConnectionModeInSecondaryRole = ...
    AllowReadIntentConnectionsOnly: AvailabilityReplicaConnectionModeInSecondaryRole = ...
    Unknown: AvailabilityReplicaConnectionModeInSecondaryRole = ...
    value__ = ...


class AvailabilityReplicaConnectionState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityReplicaConnectionState, values: Connected (1), Disconnected (0), Unknown (2) """
    Connected: AvailabilityReplicaConnectionState = ...
    Disconnected: AvailabilityReplicaConnectionState = ...
    Unknown: AvailabilityReplicaConnectionState = ...
    value__ = ...


class AvailabilityReplicaFailoverMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityReplicaFailoverMode, values: Automatic (0), External (2), Manual (1), Unknown (3) """
    Automatic: AvailabilityReplicaFailoverMode = ...
    External: AvailabilityReplicaFailoverMode = ...
    Manual: AvailabilityReplicaFailoverMode = ...
    Unknown: AvailabilityReplicaFailoverMode = ...
    value__ = ...


class AvailabilityReplicaJoinState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityReplicaJoinState, values: JoinedFailoverClusterInstance (2), JoinedStandaloneInstance (1), NotJoined (0), Unknown (99) """
    JoinedFailoverClusterInstance: AvailabilityReplicaJoinState = ...
    JoinedStandaloneInstance: AvailabilityReplicaJoinState = ...
    NotJoined: AvailabilityReplicaJoinState = ...
    Unknown: AvailabilityReplicaJoinState = ...
    value__ = ...


class AvailabilityReplicaOperationalState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityReplicaOperationalState, values: Failed (4), FailedNoQuorum (5), Offline (3), Online (2), Pending (1), PendingFailover (0), Unknown (6) """
    Failed: AvailabilityReplicaOperationalState = ...
    FailedNoQuorum: AvailabilityReplicaOperationalState = ...
    Offline: AvailabilityReplicaOperationalState = ...
    Online: AvailabilityReplicaOperationalState = ...
    Pending: AvailabilityReplicaOperationalState = ...
    PendingFailover: AvailabilityReplicaOperationalState = ...
    Unknown: AvailabilityReplicaOperationalState = ...
    value__ = ...


class AvailabilityReplicaRole(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityReplicaRole, values: Primary (1), Resolving (0), Secondary (2), Unknown (3) """
    Primary: AvailabilityReplicaRole = ...
    Resolving: AvailabilityReplicaRole = ...
    Secondary: AvailabilityReplicaRole = ...
    Unknown: AvailabilityReplicaRole = ...
    value__ = ...


class AvailabilityReplicaRollupRecoveryState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityReplicaRollupRecoveryState, values: InProgress (0), Online (1), Unknown (2) """
    InProgress: AvailabilityReplicaRollupRecoveryState = ...
    Online: AvailabilityReplicaRollupRecoveryState = ...
    Unknown: AvailabilityReplicaRollupRecoveryState = ...
    value__ = ...


class AvailabilityReplicaRollupSynchronizationState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityReplicaRollupSynchronizationState, values: NotSynchronizing (0), Synchronized (2), Synchronizing (1), Unknown (3) """
    NotSynchronizing: AvailabilityReplicaRollupSynchronizationState = ...
    Synchronized: AvailabilityReplicaRollupSynchronizationState = ...
    Synchronizing: AvailabilityReplicaRollupSynchronizationState = ...
    Unknown: AvailabilityReplicaRollupSynchronizationState = ...
    value__ = ...


class AvailabilityReplicaSeedingMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum AvailabilityReplicaSeedingMode, values: Automatic (0), Manual (1) """
    Automatic: AvailabilityReplicaSeedingMode = ...
    Manual: AvailabilityReplicaSeedingMode = ...
    value__ = ...


class BackupRestoreBase: # skipped bases: <type 'object'>, <type 'object'>
    """ BackupRestoreBase() """
    @property
    def AsyncStatus(self) -> AsyncStatus:
        """ Get: AsyncStatus(self: BackupRestoreBase) -> AsyncStatus """
        ...

    @property
    def BlockSize(self) -> int:
        """
        Get: BlockSize(self: BackupRestoreBase) -> int
        Set: BlockSize(self: BackupRestoreBase) = value
        """
        ...

    @property
    def BufferCount(self) -> int:
        """
        Get: BufferCount(self: BackupRestoreBase) -> int
        Set: BufferCount(self: BackupRestoreBase) = value
        """
        ...

    @property
    def Checksum(self) -> bool:
        """
        Get: Checksum(self: BackupRestoreBase) -> bool
        Set: Checksum(self: BackupRestoreBase) = value
        """
        ...

    @property
    def ContinueAfterError(self) -> bool:
        """
        Get: ContinueAfterError(self: BackupRestoreBase) -> bool
        Set: ContinueAfterError(self: BackupRestoreBase) = value
        """
        ...

    @property
    def CredentialName(self) -> str:
        """
        Get: CredentialName(self: BackupRestoreBase) -> str
        Set: CredentialName(self: BackupRestoreBase) = value
        """
        ...

    @property
    def Database(self) -> str:
        """
        Get: Database(self: BackupRestoreBase) -> str
        Set: Database(self: BackupRestoreBase) = value
        """
        ...

    @property
    def DatabaseFileGroups(self) -> StringCollection:
        """ Get: DatabaseFileGroups(self: BackupRestoreBase) -> StringCollection """
        ...

    @property
    def DatabaseFiles(self) -> StringCollection:
        """ Get: DatabaseFiles(self: BackupRestoreBase) -> StringCollection """
        ...

    @property
    def Devices(self) -> BackupDeviceList:
        """ Get: Devices(self: BackupRestoreBase) -> BackupDeviceList """
        ...

    @property
    def MaxTransferSize(self) -> int:
        """
        Get: MaxTransferSize(self: BackupRestoreBase) -> int
        Set: MaxTransferSize(self: BackupRestoreBase) = value
        """
        ...

    @property
    def MediaName(self) -> str:
        """
        Get: MediaName(self: BackupRestoreBase) -> str
        Set: MediaName(self: BackupRestoreBase) = value
        """
        ...

    @property
    def NoRecovery(self) -> bool:
        """
        Get: NoRecovery(self: BackupRestoreBase) -> bool
        Set: NoRecovery(self: BackupRestoreBase) = value
        """
        ...

    @property
    def NoRewind(self) -> bool:
        """
        Get: NoRewind(self: BackupRestoreBase) -> bool
        Set: NoRewind(self: BackupRestoreBase) = value
        """
        ...

    @property
    def PercentCompleteNotification(self) -> int:
        """
        Get: PercentCompleteNotification(self: BackupRestoreBase) -> int
        Set: PercentCompleteNotification(self: BackupRestoreBase) = value
        """
        ...

    @property
    def Restart(self) -> bool:
        """
        Get: Restart(self: BackupRestoreBase) -> bool
        Set: Restart(self: BackupRestoreBase) = value
        """
        ...

    @property
    def RetryFailedQueries(self) -> bool:
        """
        Get: RetryFailedQueries(self: BackupRestoreBase) -> bool
        Set: RetryFailedQueries(self: BackupRestoreBase) = value
        """
        ...

    @property
    def UnloadTapeAfter(self) -> bool:
        """
        Get: UnloadTapeAfter(self: BackupRestoreBase) -> bool
        Set: UnloadTapeAfter(self: BackupRestoreBase) = value
        """
        ...


    def Abort(self): # -> 
        """ Abort(self: BackupRestoreBase) """
        ...

    def AsyncOperation(self, *args): #cannot find CLR method
        """ enum AsyncOperation, values: Backup (1), None (0), Restore (2) """
        ...

    def CheckForHADRMaintPlan(self, *args): #cannot find CLR method
        """ CheckForHADRMaintPlan(self: BackupRestoreBase, targetServer: Server, sb: StringBuilder) -> StringBuilder """
        ...

    def ExecuteSql(self, *args): #cannot find CLR method
        """ ExecuteSql(self: BackupRestoreBase, server: Server, queries: StringCollection) """
        ...

    def ExecuteSqlAsync(self, *args): #cannot find CLR method
        """ ExecuteSqlAsync(self: BackupRestoreBase, server: Server, queries: StringCollection) """
        ...

    def ExecuteSqlWithResults(self, *args): #cannot find CLR method
        """ ExecuteSqlWithResults(self: BackupRestoreBase, server: Server, cmd: str) -> DataSet """
        ...

    def GetDevicesScript(self, *args): #cannot find CLR method
        """ GetDevicesScript(self: BackupRestoreBase, query: StringBuilder, devices: BackupDeviceList, targetVersion: ServerVersion) """
        ...

    @staticmethod
    def IsBackupUrlDeviceSupported(currentServerVersion:ServerVersion) -> bool:
        """ IsBackupUrlDeviceSupported(currentServerVersion: ServerVersion) -> bool """
        ...

    def IsStringValid(self, *args): #cannot find CLR method
        """ IsStringValid(self: BackupRestoreBase, s: str) -> bool """
        ...

    def SetMediaPassword(self, value:str): # -> 
        """ SetMediaPassword(self: BackupRestoreBase, value: str)SetMediaPassword(self: BackupRestoreBase, value: SecureString) """
        ...

    def SetPassword(self, value:str): # -> 
        """ SetPassword(self: BackupRestoreBase, value: str)SetPassword(self: BackupRestoreBase, value: SecureString) """
        ...

    def Wait(self): # -> 
        """ Wait(self: BackupRestoreBase) """
        ...

    Complete = ...
    currentAsyncOperation = ...
    Information = ...
    m_BackupAction = ...
    m_LogTruncation = ...
    m_RestoreAction = ...
    NextMedia = ...
    PercentComplete = ...


class Backup(BackupRestoreBase): # skipped bases: <type 'object'>
    """ Backup() """
    @property
    def Action(self) -> BackupActionType:
        """
        Get: Action(self: Backup) -> BackupActionType
        Set: Action(self: Backup) = value
        """
        ...

    @property
    def BackupSetDescription(self) -> str:
        """
        Get: BackupSetDescription(self: Backup) -> str
        Set: BackupSetDescription(self: Backup) = value
        """
        ...

    @property
    def BackupSetName(self) -> str:
        """
        Get: BackupSetName(self: Backup) -> str
        Set: BackupSetName(self: Backup) = value
        """
        ...

    @property
    def CompressionOption(self) -> BackupCompressionOptions:
        """
        Get: CompressionOption(self: Backup) -> BackupCompressionOptions
        Set: CompressionOption(self: Backup) = value
        """
        ...

    @property
    def CopyOnly(self) -> bool:
        """
        Get: CopyOnly(self: Backup) -> bool
        Set: CopyOnly(self: Backup) = value
        """
        ...

    @property
    def EncryptionOption(self) -> BackupEncryptionOptions:
        """
        Get: EncryptionOption(self: Backup) -> BackupEncryptionOptions
        Set: EncryptionOption(self: Backup) = value
        """
        ...

    @property
    def ExpirationDate(self) -> DateTime:
        """
        Get: ExpirationDate(self: Backup) -> DateTime
        Set: ExpirationDate(self: Backup) = value
        """
        ...

    @property
    def FormatMedia(self) -> bool:
        """
        Get: FormatMedia(self: Backup) -> bool
        Set: FormatMedia(self: Backup) = value
        """
        ...

    @property
    def Incremental(self) -> bool:
        """
        Get: Incremental(self: Backup) -> bool
        Set: Incremental(self: Backup) = value
        """
        ...

    @property
    def Initialize(self) -> bool:
        """
        Get: Initialize(self: Backup) -> bool
        Set: Initialize(self: Backup) = value
        """
        ...

    @property
    def LogTruncation(self) -> BackupTruncateLogType:
        """
        Get: LogTruncation(self: Backup) -> BackupTruncateLogType
        Set: LogTruncation(self: Backup) = value
        """
        ...

    @property
    def MediaDescription(self) -> str:
        """
        Get: MediaDescription(self: Backup) -> str
        Set: MediaDescription(self: Backup) = value
        """
        ...

    @property
    def Mirrors(self) -> Array:
        """
        Get: Mirrors(self: Backup) -> Array[BackupDeviceList]
        Set: Mirrors(self: Backup) = value
        """
        ...

    @property
    def RetainDays(self) -> int:
        """
        Get: RetainDays(self: Backup) -> int
        Set: RetainDays(self: Backup) = value
        """
        ...

    @property
    def SkipTapeHeader(self) -> bool:
        """
        Get: SkipTapeHeader(self: Backup) -> bool
        Set: SkipTapeHeader(self: Backup) = value
        """
        ...

    @property
    def UndoFileName(self) -> str:
        """
        Get: UndoFileName(self: Backup) -> str
        Set: UndoFileName(self: Backup) = value
        """
        ...


    def Script(self, targetServer) -> str: # Not found arg types: {'targetServer': 'Server'}
        """ Script(self: Backup, targetServer: Server) -> str """
        ...

    def SqlBackup(self, srv): # ->  # Not found arg types: {'srv': 'Server'}
        """ SqlBackup(self: Backup, srv: Server) """
        ...

    def SqlBackupAsync(self, srv): # ->  # Not found arg types: {'srv': 'Server'}
        """ SqlBackupAsync(self: Backup, srv: Server) """
        ...

    currentAsyncOperation = ...
    m_BackupAction = ...
    m_LogTruncation = ...
    m_RestoreAction = ...


class BackupActionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BackupActionType, values: Database (0), Files (1), Log (2) """
    Database: BackupActionType = ...
    Files: BackupActionType = ...
    Log: BackupActionType = ...
    value__ = ...


class BackupCompressionOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BackupCompressionOptions, values: Default (0), Off (2), On (1) """
    Default: BackupCompressionOptions = ...
    Off: BackupCompressionOptions = ...
    On: BackupCompressionOptions = ...
    value__ = ...


class BackupDevice(ScriptNameObjectBase, IDroppable, ICreatable, IDropIfExists, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    BackupDevice()
    BackupDevice(server: Server, name: str)
    """
    @property
    def BackupDeviceType(self): # -> BackupDeviceType
        """
        Get: BackupDeviceType(self: BackupDevice) -> BackupDeviceType
        Set: BackupDeviceType(self: BackupDevice) = value
        """
        ...

    @property
    def Parent(self): # -> Server
        """
        Get: Parent(self: BackupDevice) -> Server
        Set: Parent(self: BackupDevice) = value
        """
        ...

    @property
    def PhysicalLocation(self) -> str:
        """
        Get: PhysicalLocation(self: BackupDevice) -> str
        Set: PhysicalLocation(self: BackupDevice) = value
        """
        ...

    @property
    def SkipTapeLabel(self) -> bool:
        """
        Get: SkipTapeLabel(self: BackupDevice) -> bool
        Set: SkipTapeLabel(self: BackupDevice) = value
        """
        ...


    def ReadBackupHeader(self) -> DataTable:
        """ ReadBackupHeader(self: BackupDevice) -> DataTable """
        ...

    def ReadMediaHeader(self) -> DataTable:
        """ ReadMediaHeader(self: BackupDevice) -> DataTable """
        ...

    def __new__(cls, server = ..., name:str = ...) -> Self: # Not found arg types: {'server': 'Server'}
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class BackupDeviceCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: BackupDeviceCollection) -> Server """
        ...


    def Add(self, backupDevice:BackupDevice): # -> 
        """ Add(self: BackupDeviceCollection, backupDevice: BackupDevice) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: BackupDeviceCollection, array: Array[BackupDevice], index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class BackupDeviceItem(IComparable): # skipped bases: <type 'object'>
    """
    BackupDeviceItem()
    BackupDeviceItem(name: str, deviceType: DeviceType)
    BackupDeviceItem(name: str, deviceType: DeviceType, credentialName: str)
    """
    @property
    def CredentialName(self) -> str:
        """
        Get: CredentialName(self: BackupDeviceItem) -> str
        Set: CredentialName(self: BackupDeviceItem) = value
        """
        ...

    @property
    def DeviceType(self): # -> DeviceType
        """
        Get: DeviceType(self: BackupDeviceItem) -> DeviceType
        Set: DeviceType(self: BackupDeviceItem) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: BackupDeviceItem) -> str
        Set: Name(self: BackupDeviceItem) = value
        """
        ...


    def Equals(self, obj:object) -> bool:
        """ Equals(self: BackupDeviceItem, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: BackupDeviceItem) -> int """
        ...


class BackupDeviceList(List): # skipped bases: <type 'IReadOnlyList[BackupDeviceItem]'>, <type 'ICollection[BackupDeviceItem]'>, <type 'IList[BackupDeviceItem]'>, <type 'IEnumerable'>, <type 'IReadOnlyCollection[BackupDeviceItem]'>, <type 'IList'>, <type 'ICollection'>, <type 'IEnumerable[BackupDeviceItem]'>, <type 'object'>
    """
    BackupDeviceList()
    BackupDeviceList(collection: IEnumerable[BackupDeviceItem])
    BackupDeviceList(capacity: int)
    """
    def AddDevice(self, name:str, deviceType): # ->  # Not found arg types: {'deviceType': 'DeviceType'}
        """ AddDevice(self: BackupDeviceList, name: str, deviceType: DeviceType) """
        ...


class BackupDeviceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BackupDeviceType, values: CDRom (7), Disk (2), FloppyA (3), FloppyB (4), Pipe (6), Tape (5), Unknown (100), Url (9) """
    CDRom: BackupDeviceType = ...
    Disk: BackupDeviceType = ...
    FloppyA: BackupDeviceType = ...
    FloppyB: BackupDeviceType = ...
    Pipe: BackupDeviceType = ...
    Tape: BackupDeviceType = ...
    Unknown: BackupDeviceType = ...
    Url: BackupDeviceType = ...
    value__ = ...


class BackupEncryptionAlgorithm(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BackupEncryptionAlgorithm, values: Aes128 (0), Aes192 (1), Aes256 (2), TripleDes (3) """
    Aes128: BackupEncryptionAlgorithm = ...
    Aes192: BackupEncryptionAlgorithm = ...
    Aes256: BackupEncryptionAlgorithm = ...
    TripleDes: BackupEncryptionAlgorithm = ...
    value__ = ...


class BackupEncryptionOptions: # skipped bases: <type 'object'>, <type 'object'>
    """
    BackupEncryptionOptions()
    BackupEncryptionOptions(algorithm: BackupEncryptionAlgorithm, encryptorType: BackupEncryptorType, encryptorName: str)
    """
    @property
    def Algorithm(self) -> Nullable:
        """
        Get: Algorithm(self: BackupEncryptionOptions) -> Nullable[BackupEncryptionAlgorithm]
        Set: Algorithm(self: BackupEncryptionOptions) = value
        """
        ...

    @property
    def EncryptorName(self) -> str:
        """
        Get: EncryptorName(self: BackupEncryptionOptions) -> str
        Set: EncryptorName(self: BackupEncryptionOptions) = value
        """
        ...

    @property
    def EncryptorType(self) -> Nullable:
        """
        Get: EncryptorType(self: BackupEncryptionOptions) -> Nullable[BackupEncryptorType]
        Set: EncryptorType(self: BackupEncryptionOptions) = value
        """
        ...

    @property
    def NoEncryption(self) -> bool:
        """
        Get: NoEncryption(self: BackupEncryptionOptions) -> bool
        Set: NoEncryption(self: BackupEncryptionOptions) = value
        """
        ...


    @staticmethod
    def GetAlgorithmString(algorithm:BackupEncryptionAlgorithm) -> str:
        """ GetAlgorithmString(algorithm: BackupEncryptionAlgorithm) -> str """
        ...


class BackupEncryptorType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BackupEncryptorType, values: ServerAsymmetricKey (1), ServerCertificate (0) """
    ServerAsymmetricKey: BackupEncryptorType = ...
    ServerCertificate: BackupEncryptorType = ...
    value__ = ...


class BackupMedia: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def CredentialName(self) -> str:
        """
        Get: CredentialName(self: BackupMedia) -> str
        Set: CredentialName(self: BackupMedia) = value
        """
        ...

    @property
    def FamilySequenceNumber(self) -> Byte:
        """ Get: FamilySequenceNumber(self: BackupMedia) -> Byte """
        ...

    @property
    def MediaName(self) -> str:
        """ Get: MediaName(self: BackupMedia) -> str """
        ...

    @property
    def MediaType(self): # -> DeviceType
        """ Get: MediaType(self: BackupMedia) -> DeviceType """
        ...

    @property
    def MirrorSequenceNumber(self) -> Byte:
        """ Get: MirrorSequenceNumber(self: BackupMedia) -> Byte """
        ...



class BackupMediaSet: # skipped bases: <type 'object'>, <type 'object'>
    """ BackupMediaSet(server: Server, backupMediaList: List[BackupMedia]) """
    @property
    def BackupMediaList(self) -> IEnumerable:
        """ Get: BackupMediaList(self: BackupMediaSet) -> IEnumerable[BackupMedia] """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description(self: BackupMediaSet) -> str """
        ...

    @property
    def FamilyCount(self) -> Byte:
        """ Get: FamilyCount(self: BackupMediaSet) -> Byte """
        ...

    @property
    def MediaType(self): # -> DeviceType
        """ Get: MediaType(self: BackupMediaSet) -> DeviceType """
        ...

    @property
    def MirrorCount(self) -> int:
        """ Get: MirrorCount(self: BackupMediaSet) -> int """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: BackupMediaSet) -> str """
        ...


    def IncompleteBackupMediaSetException(self, *args): #cannot find CLR method
        """ no doc """
        ...



class BackupSet: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def BackupFinishDate(self) -> DateTime:
        """ Get: BackupFinishDate(self: BackupSet) -> DateTime """
        ...

    @property
    def BackupMediaSet(self) -> BackupMediaSet:
        """ Get: BackupMediaSet(self: BackupSet) -> BackupMediaSet """
        ...

    @property
    def BackupSetGuid(self) -> Guid:
        """ Get: BackupSetGuid(self: BackupSet) -> Guid """
        ...

    @property
    def BackupSetType(self): # -> BackupSetType
        """ Get: BackupSetType(self: BackupSet) -> BackupSetType """
        ...

    @property
    def BackupSize(self) -> Decimal:
        """ Get: BackupSize(self: BackupSet) -> Decimal """
        ...

    @property
    def BackupStartDate(self) -> DateTime:
        """ Get: BackupStartDate(self: BackupSet) -> DateTime """
        ...

    @property
    def BeginsLogChain(self) -> bool:
        """ Get: BeginsLogChain(self: BackupSet) -> bool """
        ...

    @property
    def CheckpointLsn(self) -> Decimal:
        """ Get: CheckpointLsn(self: BackupSet) -> Decimal """
        ...

    @property
    def CompressedBackupSize(self) -> Decimal:
        """ Get: CompressedBackupSize(self: BackupSet) -> Decimal """
        ...

    @property
    def DatabaseBackupLsn(self) -> Decimal:
        """ Get: DatabaseBackupLsn(self: BackupSet) -> Decimal """
        ...

    @property
    def DatabaseGuid(self) -> Guid:
        """ Get: DatabaseGuid(self: BackupSet) -> Guid """
        ...

    @property
    def DatabaseName(self) -> str:
        """ Get: DatabaseName(self: BackupSet) -> str """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description(self: BackupSet) -> str """
        ...

    @property
    def DifferentialBaseGuid(self) -> Guid:
        """ Get: DifferentialBaseGuid(self: BackupSet) -> Guid """
        ...

    @property
    def DifferentialBaseLsn(self) -> Decimal:
        """ Get: DifferentialBaseLsn(self: BackupSet) -> Decimal """
        ...

    @property
    def ExpirationDate(self) -> DateTime:
        """ Get: ExpirationDate(self: BackupSet) -> DateTime """
        ...

    @property
    def FamilyGuid(self) -> Guid:
        """ Get: FamilyGuid(self: BackupSet) -> Guid """
        ...

    @property
    def FirstLsn(self) -> Decimal:
        """ Get: FirstLsn(self: BackupSet) -> Decimal """
        ...

    @property
    def FirstRecoveryForkID(self) -> Guid:
        """ Get: FirstRecoveryForkID(self: BackupSet) -> Guid """
        ...

    @property
    def ForkPointLsn(self) -> Decimal:
        """ Get: ForkPointLsn(self: BackupSet) -> Decimal """
        ...

    @property
    def HasBulkLoggedData(self) -> bool:
        """ Get: HasBulkLoggedData(self: BackupSet) -> bool """
        ...

    @property
    def HasIncompleteMetaData(self) -> bool:
        """ Get: HasIncompleteMetaData(self: BackupSet) -> bool """
        ...

    @property
    def IsCopyOnly(self) -> bool:
        """ Get: IsCopyOnly(self: BackupSet) -> bool """
        ...

    @property
    def IsDamaged(self) -> bool:
        """ Get: IsDamaged(self: BackupSet) -> bool """
        ...

    @property
    def IsForceOffline(self) -> bool:
        """ Get: IsForceOffline(self: BackupSet) -> bool """
        ...

    @property
    def IsReadOnly(self) -> bool:
        """ Get: IsReadOnly(self: BackupSet) -> bool """
        ...

    @property
    def IsSnapshot(self) -> bool:
        """ Get: IsSnapshot(self: BackupSet) -> bool """
        ...

    @property
    def LastLsn(self) -> Decimal:
        """ Get: LastLsn(self: BackupSet) -> Decimal """
        ...

    @property
    def MachineName(self) -> str:
        """ Get: MachineName(self: BackupSet) -> str """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: BackupSet) -> str """
        ...

    @property
    def Position(self) -> int:
        """ Get: Position(self: BackupSet) -> int """
        ...

    @property
    def RecoveryForkID(self) -> Guid:
        """ Get: RecoveryForkID(self: BackupSet) -> Guid """
        ...

    @property
    def ServerName(self) -> str:
        """ Get: ServerName(self: BackupSet) -> str """
        ...

    @property
    def ServerVersion(self) -> ServerVersion:
        """ Get: ServerVersion(self: BackupSet) -> ServerVersion """
        ...

    @property
    def SoftwareVendorId(self) -> int:
        """ Get: SoftwareVendorId(self: BackupSet) -> int """
        ...

    @property
    def UserName(self) -> str:
        """ Get: UserName(self: BackupSet) -> str """
        ...


    def Verify(self): # -> 
        """ Verify(self: BackupSet) """
        ...


class BackupSetCollection(ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: BackupSetCollection) -> IEnumerator """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...


class BackupSetFlag(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BackupSetFlag, values: MinimalLogData (1), ReadOnlyDatabase (4), SingleUserModeDatabase (8), WithSnapshot (2) """
    MinimalLogData: BackupSetFlag = ...
    ReadOnlyDatabase: BackupSetFlag = ...
    SingleUserModeDatabase: BackupSetFlag = ...
    value__ = ...
    WithSnapshot: BackupSetFlag = ...


class BackupSetType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BackupSetType, values: Database (1), Differential (2), FileOrFileGroup (4), FileOrFileGroupDifferential (5), Incremental (2), Log (3) """
    Database: BackupSetType = ...
    Differential: BackupSetType = ...
    FileOrFileGroup: BackupSetType = ...
    FileOrFileGroupDifferential: BackupSetType = ...
    Incremental: BackupSetType = ...
    Log: BackupSetType = ...
    value__ = ...


class BackupTruncateLogType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BackupTruncateLogType, values: NoTruncate (1), Truncate (2), TruncateOnly (0) """
    NoTruncate: BackupTruncateLogType = ...
    Truncate: BackupTruncateLogType = ...
    TruncateOnly: BackupTruncateLogType = ...
    value__ = ...


class CatalogPopulationAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CatalogPopulationAction, values: Full (1), Incremental (2) """
    Full: CatalogPopulationAction = ...
    Incremental: CatalogPopulationAction = ...
    value__ = ...


class CatalogPopulationStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CatalogPopulationStatus, values: CrawlinProgress (1), DiskFullPause (8), Idle (0), Incremental (6), Notification (9), Paused (2), Recovering (4), Shutdown (5), Throttled (3), UpdatingIndex (7) """
    CrawlinProgress: CatalogPopulationStatus = ...
    DiskFullPause: CatalogPopulationStatus = ...
    Idle: CatalogPopulationStatus = ...
    Incremental: CatalogPopulationStatus = ...
    Notification: CatalogPopulationStatus = ...
    Paused: CatalogPopulationStatus = ...
    Recovering: CatalogPopulationStatus = ...
    Shutdown: CatalogPopulationStatus = ...
    Throttled: CatalogPopulationStatus = ...
    UpdatingIndex: CatalogPopulationStatus = ...
    value__ = ...


class Certificate(IDroppable, IAlterable, ICreatable, IObjectPermission, ISfcSupportsDesignMode, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Certificate()
    Certificate(database: Database, name: str)
    """
    @property
    def ActiveForServiceBrokerDialog(self) -> bool:
        """
        Get: ActiveForServiceBrokerDialog(self: Certificate) -> bool
        Set: ActiveForServiceBrokerDialog(self: Certificate) = value
        """
        ...

    @property
    def Events(self): # -> CertificateEvents
        """ Get: Events(self: Certificate) -> CertificateEvents """
        ...

    @property
    def ExpirationDate(self) -> DateTime:
        """
        Get: ExpirationDate(self: Certificate) -> DateTime
        Set: ExpirationDate(self: Certificate) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Certificate) -> int """
        ...

    @property
    def Issuer(self) -> str:
        """ Get: Issuer(self: Certificate) -> str """
        ...

    @property
    def LastBackupDate(self) -> DateTime:
        """ Get: LastBackupDate(self: Certificate) -> DateTime """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: Certificate) -> str
        Set: Owner(self: Certificate) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: Certificate) -> Database
        Set: Parent(self: Certificate) = value
        """
        ...

    @property
    def PrivateKeyEncryptionType(self): # -> PrivateKeyEncryptionType
        """ Get: PrivateKeyEncryptionType(self: Certificate) -> PrivateKeyEncryptionType """
        ...

    @property
    def Serial(self) -> str:
        """ Get: Serial(self: Certificate) -> str """
        ...

    @property
    def Sid(self) -> Array:
        """ Get: Sid(self: Certificate) -> Array[Byte] """
        ...

    @property
    def StartDate(self) -> DateTime:
        """
        Get: StartDate(self: Certificate) -> DateTime
        Set: StartDate(self: Certificate) = value
        """
        ...

    @property
    def Subject(self) -> str:
        """
        Get: Subject(self: Certificate) -> str
        Set: Subject(self: Certificate) = value
        """
        ...

    @property
    def Thumbprint(self) -> Array:
        """ Get: Thumbprint(self: Certificate) -> Array[Byte] """
        ...


    def AddPrivateKey(self, privateKeyPath:str, decryptionPassword:str, encryptionPassword:str = ...): # -> 
        """ AddPrivateKey(self: Certificate, privateKeyPath: str, decryptionPassword: str)AddPrivateKey(self: Certificate, privateKeyPath: str, decryptionPassword: str, encryptionPassword: str) """
        ...

    def ChangePrivateKeyPassword(self, oldPassword:str, newPassword:str): # -> 
        """ ChangePrivateKeyPassword(self: Certificate, oldPassword: str, newPassword: str) """
        ...

    def Export(self, certificatePath:str, privateKeyPath:str = ..., encryptionPassword:str = ..., decryptionPassword:str = ...): # -> 
        """ Export(self: Certificate, certificatePath: str)Export(self: Certificate, certificatePath: str, privateKeyPath: str, encryptionPassword: str)Export(self: Certificate, certificatePath: str, privateKeyPath: str, encryptionPassword: str, decryptionPassword: str) """
        ...

    def RemovePrivateKey(self): # -> 
        """ RemovePrivateKey(self: Certificate) """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class CertificateCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: CertificateCollection) -> Database """
        ...


    def Add(self, certificate:Certificate): # -> 
        """ Add(self: CertificateCollection, certificate: Certificate) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: CertificateCollection, array: Array[Certificate], index: int) """
        ...

    def ItemById(self, id:int) -> Certificate:
        """ ItemById(self: CertificateCollection, id: int) -> Certificate """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class CertificateEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self): # -> ObjectEventSet
        """ GetEventSelection(self: CertificateEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: CertificateEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: CertificateEvents) """
        ...

    def SubscribeToEvents(self, events, eventHandler = ...): # ->  # Not found arg types: {'events': 'ObjectEventSet', 'eventHandler': 'ServerEventHandler'}
        """ SubscribeToEvents(self: CertificateEvents, events: ObjectEventSet)SubscribeToEvents(self: CertificateEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: CertificateEvents) """
        ...

    def UnsubscribeFromEvents(self, events): # ->  # Not found arg types: {'events': 'ObjectEventSet'}
        """ UnsubscribeFromEvents(self: CertificateEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class CertificateSourceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CertificateSourceType, values: Executable (2), File (1), SqlAssembly (3) """
    Executable: CertificateSourceType = ...
    File: CertificateSourceType = ...
    SqlAssembly: CertificateSourceType = ...
    value__ = ...


class ChangeTracking(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ChangeTracking, values: Automatic (2), Manual (1), Off (0) """
    Automatic: ChangeTracking = ...
    Manual: ChangeTracking = ...
    Off: ChangeTracking = ...
    value__ = ...


class Check(IDroppable, IAlterable, ICreatable, IScriptable, IRenamable, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IMarkForDrop, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Check()
    Check(parent: SqlSmoObject, name: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: Check) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: Check) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Check) -> int """
        ...

    @property
    def IsChecked(self) -> bool:
        """
        Get: IsChecked(self: Check) -> bool
        Set: IsChecked(self: Check) = value
        """
        ...

    @property
    def IsEnabled(self) -> bool:
        """
        Get: IsEnabled(self: Check) -> bool
        Set: IsEnabled(self: Check) = value
        """
        ...

    @property
    def IsFileTableDefined(self) -> bool:
        """ Get: IsFileTableDefined(self: Check) -> bool """
        ...

    @property
    def IsSystemNamed(self) -> bool:
        """ Get: IsSystemNamed(self: Check) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Check) -> str
        Set: Name(self: Check) = value
        """
        ...

    @property
    def NotForReplication(self) -> bool:
        """
        Get: NotForReplication(self: Check) -> bool
        Set: NotForReplication(self: Check) = value
        """
        ...

    @property
    def Parent(self) -> SqlSmoObject:
        """
        Get: Parent(self: Check) -> SqlSmoObject
        Set: Parent(self: Check) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: Check) -> str
        Set: Text(self: Check) = value
        """
        ...


    def __new__(cls, parent:SqlSmoObject = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, parent: SqlSmoObject, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class CheckCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> SqlSmoObject:
        """ Get: Parent(self: CheckCollection) -> SqlSmoObject """
        ...


    def Add(self, check:Check): # -> 
        """ Add(self: CheckCollection, check: Check) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: CheckCollection, array: Array[Check], index: int) """
        ...

    def ItemById(self, id:int) -> Check:
        """ ItemById(self: CheckCollection, id: int) -> Check """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: CheckCollection, name: str)Remove(self: CheckCollection, check: Check) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ClusterMemberState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ClusterMemberState, values: Offline (0), Online (1), PartiallyOnline (2), Unknown (3) """
    Offline: ClusterMemberState = ...
    Online: ClusterMemberState = ...
    PartiallyOnline: ClusterMemberState = ...
    Unknown: ClusterMemberState = ...
    value__ = ...


class ClusterMemberType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ClusterMemberType, values: DiskWitness (1), FileshareWitness (2), Node (0) """
    DiskWitness: ClusterMemberType = ...
    FileshareWitness: ClusterMemberType = ...
    Node: ClusterMemberType = ...
    value__ = ...


class ClusterQuorumState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ClusterQuorumState, values: ForcedQuorum (2), NormalQuorum (1), NotApplicable (3), UnknownQuorumState (0) """
    ForcedQuorum: ClusterQuorumState = ...
    NormalQuorum: ClusterQuorumState = ...
    NotApplicable: ClusterQuorumState = ...
    UnknownQuorumState: ClusterQuorumState = ...
    value__ = ...


class ClusterQuorumType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ClusterQuorumType, values: DiskOnly (3), NodeAndDiskMajority (1), NodeAndFileshareMajority (2), NodeMajority (0), NotApplicable (4) """
    DiskOnly: ClusterQuorumType = ...
    NodeAndDiskMajority: ClusterQuorumType = ...
    NodeAndFileshareMajority: ClusterQuorumType = ...
    NodeMajority: ClusterQuorumType = ...
    NotApplicable: ClusterQuorumType = ...
    value__ = ...


class CollationVersion(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CollationVersion, values: Version100 (2), Version105 (3), Version110 (4), Version120 (5), Version130 (6), Version140 (7), Version80 (0), Version90 (1) """
    value__ = ...
    Version100: CollationVersion = ...
    Version105: CollationVersion = ...
    Version110: CollationVersion = ...
    Version120: CollationVersion = ...
    Version130: CollationVersion = ...
    Version140: CollationVersion = ...
    Version80: CollationVersion = ...
    Version90: CollationVersion = ...


class SmoException(SqlServerManagementException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    SmoException()
    SmoException(message: str)
    SmoException(message: str, innerException: Exception)
    """
    @property
    def ProdVer(self):
        ...

    @property
    def SmoExceptionType(self): # -> SmoExceptionType
        """ Get: SmoExceptionType(self: SmoException) -> SmoExceptionType """
        ...


    def SetHelpContext(self, *args): #cannot find CLR method
        """ SetHelpContext(self: SmoException, resource: str) -> SmoException """
        ...

    def __reduce_ex__(self, *args): #cannot find CLR method
        ...

    SerializeObjectState = ...


class CollectionNotAvailableException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    CollectionNotAvailableException()
    CollectionNotAvailableException(message: str)
    CollectionNotAvailableException(message: str, innerException: Exception)
    CollectionNotAvailableException(colname: str, serverVersion: ServerVersion)
    """
    @property
    def CollectionName(self) -> str:
        """ Get: CollectionName(self: CollectionNotAvailableException) -> str """
        ...

    @property
    def Message(self) -> str:
        """ Get: Message(self: CollectionNotAvailableException) -> str """
        ...

    @property
    def ServerVersion(self) -> ServerVersion:
        """ Get: ServerVersion(self: CollectionNotAvailableException) -> ServerVersion """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: CollectionNotAvailableException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class Column(IDroppable, IAlterable, ICreatable, IRenamable, IPropertyDataDispatch, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IMarkForDrop, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Column()
    Column(parent: SqlSmoObject, name: str)
    Column(parent: SqlSmoObject, name: str, dataType: DataType)
    Column(parent: SqlSmoObject, name: str, dataType: DataType, isFileStream: bool)
    """
    @property
    def AnsiPaddingStatus(self) -> bool:
        """ Get: AnsiPaddingStatus(self: Column) -> bool """
        ...

    @property
    def Collation(self) -> str:
        """
        Get: Collation(self: Column) -> str
        Set: Collation(self: Column) = value
        """
        ...

    @property
    def ColumnEncryptionKeyID(self) -> int:
        """
        Get: ColumnEncryptionKeyID(self: Column) -> int
        Set: ColumnEncryptionKeyID(self: Column) = value
        """
        ...

    @property
    def ColumnEncryptionKeyName(self) -> str:
        """
        Get: ColumnEncryptionKeyName(self: Column) -> str
        Set: ColumnEncryptionKeyName(self: Column) = value
        """
        ...

    @property
    def Computed(self) -> bool:
        """
        Get: Computed(self: Column) -> bool
        Set: Computed(self: Column) = value
        """
        ...

    @property
    def ComputedText(self) -> str:
        """
        Get: ComputedText(self: Column) -> str
        Set: ComputedText(self: Column) = value
        """
        ...

    @property
    def DataType(self) -> DataType:
        """
        Get: DataType(self: Column) -> DataType
        Set: DataType(self: Column) = value
        """
        ...

    @property
    def Default(self) -> str:
        """
        Get: Default(self: Column) -> str
        Set: Default(self: Column) = value
        """
        ...

    @property
    def DefaultConstraint(self): # -> DefaultConstraint
        """ Get: DefaultConstraint(self: Column) -> DefaultConstraint """
        ...

    @property
    def DefaultSchema(self) -> str:
        """
        Get: DefaultSchema(self: Column) -> str
        Set: DefaultSchema(self: Column) = value
        """
        ...

    @property
    def DistributionColumnName(self) -> str:
        """
        Get: DistributionColumnName(self: Column) -> str
        Set: DistributionColumnName(self: Column) = value
        """
        ...

    @property
    def EncryptionAlgorithm(self) -> str:
        """
        Get: EncryptionAlgorithm(self: Column) -> str
        Set: EncryptionAlgorithm(self: Column) = value
        """
        ...

    @property
    def EncryptionType(self): # -> ColumnEncryptionType
        """
        Get: EncryptionType(self: Column) -> ColumnEncryptionType
        Set: EncryptionType(self: Column) = value
        """
        ...

    @property
    def GeneratedAlwaysType(self): # -> GeneratedAlwaysType
        """
        Get: GeneratedAlwaysType(self: Column) -> GeneratedAlwaysType
        Set: GeneratedAlwaysType(self: Column) = value
        """
        ...

    @property
    def GraphType(self): # -> GraphType
        """
        Get: GraphType(self: Column) -> GraphType
        Set: GraphType(self: Column) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Column) -> int """
        ...

    @property
    def Identity(self) -> bool:
        """
        Get: Identity(self: Column) -> bool
        Set: Identity(self: Column) = value
        """
        ...

    @property
    def IdentityIncrement(self) -> Int64:
        """
        Get: IdentityIncrement(self: Column) -> Int64
        Set: IdentityIncrement(self: Column) = value
        """
        ...

    @property
    def IdentitySeed(self) -> Int64:
        """
        Get: IdentitySeed(self: Column) -> Int64
        Set: IdentitySeed(self: Column) = value
        """
        ...

    @property
    def InPrimaryKey(self) -> bool:
        """ Get: InPrimaryKey(self: Column) -> bool """
        ...

    @property
    def IsColumnSet(self) -> bool:
        """
        Get: IsColumnSet(self: Column) -> bool
        Set: IsColumnSet(self: Column) = value
        """
        ...

    @property
    def IsDeterministic(self) -> bool:
        """ Get: IsDeterministic(self: Column) -> bool """
        ...

    @property
    def IsDistributedColumn(self) -> bool:
        """
        Get: IsDistributedColumn(self: Column) -> bool
        Set: IsDistributedColumn(self: Column) = value
        """
        ...

    @property
    def IsEncrypted(self) -> bool:
        """ Get: IsEncrypted(self: Column) -> bool """
        ...

    @property
    def IsFileStream(self) -> bool:
        """
        Get: IsFileStream(self: Column) -> bool
        Set: IsFileStream(self: Column) = value
        """
        ...

    @property
    def IsForeignKey(self) -> bool:
        """ Get: IsForeignKey(self: Column) -> bool """
        ...

    @property
    def IsFullTextIndexed(self) -> bool:
        """ Get: IsFullTextIndexed(self: Column) -> bool """
        ...

    @property
    def IsHidden(self) -> bool:
        """
        Get: IsHidden(self: Column) -> bool
        Set: IsHidden(self: Column) = value
        """
        ...

    @property
    def IsMasked(self) -> bool:
        """
        Get: IsMasked(self: Column) -> bool
        Set: IsMasked(self: Column) = value
        """
        ...

    @property
    def IsPersisted(self) -> bool:
        """
        Get: IsPersisted(self: Column) -> bool
        Set: IsPersisted(self: Column) = value
        """
        ...

    @property
    def IsPrecise(self) -> bool:
        """ Get: IsPrecise(self: Column) -> bool """
        ...

    @property
    def IsSparse(self) -> bool:
        """
        Get: IsSparse(self: Column) -> bool
        Set: IsSparse(self: Column) = value
        """
        ...

    @property
    def MaskingFunction(self) -> str:
        """
        Get: MaskingFunction(self: Column) -> str
        Set: MaskingFunction(self: Column) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Column) -> str
        Set: Name(self: Column) = value
        """
        ...

    @property
    def NotForReplication(self) -> bool:
        """
        Get: NotForReplication(self: Column) -> bool
        Set: NotForReplication(self: Column) = value
        """
        ...

    @property
    def Nullable(self) -> bool:
        """
        Get: Nullable(self: Column) -> bool
        Set: Nullable(self: Column) = value
        """
        ...

    @property
    def Parent(self) -> SqlSmoObject:
        """
        Get: Parent(self: Column) -> SqlSmoObject
        Set: Parent(self: Column) = value
        """
        ...

    @property
    def RowGuidCol(self) -> bool:
        """
        Get: RowGuidCol(self: Column) -> bool
        Set: RowGuidCol(self: Column) = value
        """
        ...

    @property
    def Rule(self) -> str:
        """
        Get: Rule(self: Column) -> str
        Set: Rule(self: Column) = value
        """
        ...

    @property
    def RuleSchema(self) -> str:
        """
        Get: RuleSchema(self: Column) -> str
        Set: RuleSchema(self: Column) = value
        """
        ...

    @property
    def StatisticalSemantics(self) -> int:
        """ Get: StatisticalSemantics(self: Column) -> int """
        ...


    def AddDefaultConstraint(self, name:str = ...): # -> DefaultConstraint
        """
        AddDefaultConstraint(self: Column) -> DefaultConstraint
        AddDefaultConstraint(self: Column, name: str) -> DefaultConstraint
        """
        ...

    def BindDefault(self, defaultSchema:str, defaultName:str): # -> 
        """ BindDefault(self: Column, defaultSchema: str, defaultName: str) """
        ...

    def BindRule(self, ruleSchema:str, ruleName:str): # -> 
        """ BindRule(self: Column, ruleSchema: str, ruleName: str) """
        ...

    def EnumForeignKeys(self) -> DataTable:
        """ EnumForeignKeys(self: Column) -> DataTable """
        ...

    def EnumIndexes(self) -> DataTable:
        """ EnumIndexes(self: Column) -> DataTable """
        ...

    def EnumUserPermissions(self, username:str) -> DataTable:
        """ EnumUserPermissions(self: Column, username: str) -> DataTable """
        ...

    def UnbindDefault(self): # -> 
        """ UnbindDefault(self: Column) """
        ...

    def UnbindRule(self): # -> 
        """ UnbindRule(self: Column) """
        ...

    def UpdateStatistics(self, scanType = ..., sampleValue:int = ..., recompute:bool = ...): # ->  # Not found arg types: {'scanType': 'StatisticsScanType'}
        """ UpdateStatistics(self: Column)UpdateStatistics(self: Column, scanType: StatisticsScanType)UpdateStatistics(self: Column, scanType: StatisticsScanType, sampleValue: int)UpdateStatistics(self: Column, scanType: StatisticsScanType, sampleValue: int, recompute: bool) """
        ...

    def __new__(cls, parent:SqlSmoObject = ..., name:str = ..., dataType:DataType = ..., isFileStream:bool = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, parent: SqlSmoObject, name: str)
        __new__(cls: type, parent: SqlSmoObject, name: str, dataType: DataType)
        __new__(cls: type, parent: SqlSmoObject, name: str, dataType: DataType, isFileStream: bool)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ParameterCollectionBase(ArrayListCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Contains(self, name:str) -> bool:
        """ Contains(self: ParameterCollectionBase, name: str) -> bool """
        ...

    def Remove(self, name:str): # -> 
        """ Remove(self: ParameterCollectionBase, name: str) """
        ...

    initialized = ...


class ColumnCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> SqlSmoObject:
        """ Get: Parent(self: ColumnCollection) -> SqlSmoObject """
        ...


    def Add(self, column:Column, *__args:str): # -> 
        """ Add(self: ColumnCollection, column: Column)Add(self: ColumnCollection, column: Column, insertAtColumnName: str)Add(self: ColumnCollection, column: Column, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ColumnCollection, array: Array[Column], index: int) """
        ...

    def ItemById(self, id:int) -> Column:
        """ ItemById(self: ColumnCollection, id: int) -> Column """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ColumnEncryptionKey(IDroppable, IAlterable, ICreatable, IScriptable, ScriptNameObjectBase, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ColumnEncryptionKey()
    ColumnEncryptionKey(database: Database, name: str)
    """
    @property
    def ColumnEncryptionKeyValues(self): # -> ColumnEncryptionKeyValueCollection
        """ Get: ColumnEncryptionKeyValues(self: ColumnEncryptionKey) -> ColumnEncryptionKeyValueCollection """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: ColumnEncryptionKey) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """
        Get: DateLastModified(self: ColumnEncryptionKey) -> DateTime
        Set: DateLastModified(self: ColumnEncryptionKey) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ColumnEncryptionKey) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ColumnEncryptionKey) -> str
        Set: Name(self: ColumnEncryptionKey) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: ColumnEncryptionKey) -> Database
        Set: Parent(self: ColumnEncryptionKey) = value
        """
        ...


    def GetColumnsEncrypted(self) -> IList:
        """ GetColumnsEncrypted(self: ColumnEncryptionKey) -> IList[Column] """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ColumnEncryptionKeyCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: ColumnEncryptionKeyCollection) -> Database """
        ...


    def Add(self, columnEncryptionKey:ColumnEncryptionKey): # -> 
        """ Add(self: ColumnEncryptionKeyCollection, columnEncryptionKey: ColumnEncryptionKey) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ColumnEncryptionKeyCollection, array: Array[ColumnEncryptionKey], index: int) """
        ...

    def ItemById(self, id:int) -> ColumnEncryptionKey:
        """ ItemById(self: ColumnEncryptionKeyCollection, id: int) -> ColumnEncryptionKey """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ColumnEncryptionKeyValue(SqlSmoObject, IDroppable, ICreatable, IDropIfExists, IMarkForDrop): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ ColumnEncryptionKeyValue(parent: ColumnEncryptionKey, cmk: ColumnMasterKey, encryptionAlgorithm: str, encryptedValue: Array[Byte]) """
    @property
    def ColumnEncryptionKeyName(self) -> str:
        """
        Get: ColumnEncryptionKeyName(self: ColumnEncryptionKeyValue) -> str
        Set: ColumnEncryptionKeyName(self: ColumnEncryptionKeyValue) = value
        """
        ...

    @property
    def ColumnMasterKeyID(self) -> int:
        """
        Get: ColumnMasterKeyID(self: ColumnEncryptionKeyValue) -> int
        Set: ColumnMasterKeyID(self: ColumnEncryptionKeyValue) = value
        """
        ...

    @property
    def ColumnMasterKeyName(self) -> str:
        """
        Get: ColumnMasterKeyName(self: ColumnEncryptionKeyValue) -> str
        Set: ColumnMasterKeyName(self: ColumnEncryptionKeyValue) = value
        """
        ...

    @property
    def EncryptedValue(self) -> Array:
        """
        Get: EncryptedValue(self: ColumnEncryptionKeyValue) -> Array[Byte]
        Set: EncryptedValue(self: ColumnEncryptionKeyValue) = value
        """
        ...

    @property
    def EncryptionAlgorithm(self) -> str:
        """
        Get: EncryptionAlgorithm(self: ColumnEncryptionKeyValue) -> str
        Set: EncryptionAlgorithm(self: ColumnEncryptionKeyValue) = value
        """
        ...

    @property
    def Parent(self) -> ColumnEncryptionKey:
        """ Get: Parent(self: ColumnEncryptionKeyValue) -> ColumnEncryptionKey """
        ...


    def __new__(cls, parent:ColumnEncryptionKey, cmk, encryptionAlgorithm:str, encryptedValue:Array) -> Self: # Not found arg types: {'cmk': 'ColumnMasterKey'}
        """ __new__(cls: type, parent: ColumnEncryptionKey, cmk: ColumnMasterKey, encryptionAlgorithm: str, encryptedValue: Array[Byte]) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ColumnEncryptionKeyValueCollectionBase(SortedListCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Contains(self, ColumnMasterKeyID:int) -> bool:
        """ Contains(self: ColumnEncryptionKeyValueCollectionBase, ColumnMasterKeyID: int) -> bool """
        ...

    initialized = ...


class ColumnEncryptionKeyValueCollection(ColumnEncryptionKeyValueCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> ColumnEncryptionKey:
        """ Get: Parent(self: ColumnEncryptionKeyValueCollection) -> ColumnEncryptionKey """
        ...


    def Add(self, columnEncryptionKeyValue:ColumnEncryptionKeyValue): # -> 
        """ Add(self: ColumnEncryptionKeyValueCollection, columnEncryptionKeyValue: ColumnEncryptionKeyValue) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ColumnEncryptionKeyValueCollection, array: Array[ColumnEncryptionKeyValue], index: int) """
        ...

    def GetItemByColumnMasterKeyID(self, ColumnMasterKeyID:int) -> ColumnEncryptionKeyValue:
        """ GetItemByColumnMasterKeyID(self: ColumnEncryptionKeyValueCollection, ColumnMasterKeyID: int) -> ColumnEncryptionKeyValue """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ColumnEncryptionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ColumnEncryptionType, values: Deterministic (1), Randomized (2) """
    Deterministic: ColumnEncryptionType = ...
    Randomized: ColumnEncryptionType = ...
    value__ = ...


class ColumnMasterKey(ScriptNameObjectBase, IDroppable, ICreatable, IDropIfExists, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ColumnMasterKey()
    ColumnMasterKey(database: Database, name: str)
    ColumnMasterKey(parent: Database, name: str, keyStoreProviderName: str, keyPath: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: ColumnMasterKey) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """
        Get: DateLastModified(self: ColumnMasterKey) -> DateTime
        Set: DateLastModified(self: ColumnMasterKey) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ColumnMasterKey) -> int """
        ...

    @property
    def KeyPath(self) -> str:
        """
        Get: KeyPath(self: ColumnMasterKey) -> str
        Set: KeyPath(self: ColumnMasterKey) = value
        """
        ...

    @property
    def KeyStoreProviderName(self) -> str:
        """
        Get: KeyStoreProviderName(self: ColumnMasterKey) -> str
        Set: KeyStoreProviderName(self: ColumnMasterKey) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ColumnMasterKey) -> str
        Set: Name(self: ColumnMasterKey) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: ColumnMasterKey) -> Database
        Set: Parent(self: ColumnMasterKey) = value
        """
        ...


    def GetColumnEncryptionKeyValuesEncrypted(self) -> IList:
        """ GetColumnEncryptionKeyValuesEncrypted(self: ColumnMasterKey) -> IList[ColumnEncryptionKeyValue] """
        ...

    def __new__(cls, *__args) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, parent: Database, name: str, keyStoreProviderName: str, keyPath: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ColumnMasterKeyCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: ColumnMasterKeyCollection) -> Database """
        ...


    def Add(self, columnMasterKey:ColumnMasterKey): # -> 
        """ Add(self: ColumnMasterKeyCollection, columnMasterKey: ColumnMasterKey) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ColumnMasterKeyCollection, array: Array[ColumnMasterKey], index: int) """
        ...

    def ItemById(self, id:int) -> ColumnMasterKey:
        """ ItemById(self: ColumnMasterKeyCollection, id: int) -> ColumnMasterKey """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class CompatibilityLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CompatibilityLevel, values: Version100 (100), Version110 (110), Version120 (120), Version130 (130), Version140 (140), Version60 (60), Version65 (65), Version70 (70), Version80 (80), Version90 (90) """
    value__ = ...
    Version100: CompatibilityLevel = ...
    Version110: CompatibilityLevel = ...
    Version120: CompatibilityLevel = ...
    Version130: CompatibilityLevel = ...
    Version140: CompatibilityLevel = ...
    Version60: CompatibilityLevel = ...
    Version65: CompatibilityLevel = ...
    Version70: CompatibilityLevel = ...
    Version80: CompatibilityLevel = ...
    Version90: CompatibilityLevel = ...


class ConfigProperty: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ConfigValue(self) -> int:
        """
        Get: ConfigValue(self: ConfigProperty) -> int
        Set: ConfigValue(self: ConfigProperty) = value
        """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description(self: ConfigProperty) -> str """
        ...

    @property
    def DisplayName(self) -> str:
        """ Get: DisplayName(self: ConfigProperty) -> str """
        ...

    @property
    def IsAdvanced(self) -> bool:
        """ Get: IsAdvanced(self: ConfigProperty) -> bool """
        ...

    @property
    def IsDynamic(self) -> bool:
        """ Get: IsDynamic(self: ConfigProperty) -> bool """
        ...

    @property
    def Maximum(self) -> int:
        """ Get: Maximum(self: ConfigProperty) -> int """
        ...

    @property
    def Minimum(self) -> int:
        """ Get: Minimum(self: ConfigProperty) -> int """
        ...

    @property
    def Number(self) -> int:
        """ Get: Number(self: ConfigProperty) -> int """
        ...

    @property
    def RunValue(self) -> int:
        """ Get: RunValue(self: ConfigProperty) -> int """
        ...



class ConfigPropertyCollection(ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: ConfigPropertyCollection) -> IEnumerator """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...


class ConfigurationBase: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: ConfigurationBase) -> Server """
        ...


    def Alter(self, overrideValueChecking:bool = ...): # -> 
        """ Alter(self: ConfigurationBase)Alter(self: ConfigurationBase, overrideValueChecking: bool) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: ConfigurationBase) """
        ...


class Configuration(ConfigurationBase): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AdHocDistributedQueriesEnabled(self) -> ConfigProperty:
        """ Get: AdHocDistributedQueriesEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def Affinity64IOMask(self) -> ConfigProperty:
        """ Get: Affinity64IOMask(self: Configuration) -> ConfigProperty """
        ...

    @property
    def Affinity64Mask(self) -> ConfigProperty:
        """ Get: Affinity64Mask(self: Configuration) -> ConfigProperty """
        ...

    @property
    def AffinityIOMask(self) -> ConfigProperty:
        """ Get: AffinityIOMask(self: Configuration) -> ConfigProperty """
        ...

    @property
    def AffinityMask(self) -> ConfigProperty:
        """ Get: AffinityMask(self: Configuration) -> ConfigProperty """
        ...

    @property
    def AgentXPsEnabled(self) -> ConfigProperty:
        """ Get: AgentXPsEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def AllowUpdates(self) -> ConfigProperty:
        """ Get: AllowUpdates(self: Configuration) -> ConfigProperty """
        ...

    @property
    def AweEnabled(self) -> ConfigProperty:
        """ Get: AweEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def BlockedProcessThreshold(self) -> ConfigProperty:
        """ Get: BlockedProcessThreshold(self: Configuration) -> ConfigProperty """
        ...

    @property
    def C2AuditMode(self) -> ConfigProperty:
        """ Get: C2AuditMode(self: Configuration) -> ConfigProperty """
        ...

    @property
    def CommonCriteriaComplianceEnabled(self) -> ConfigProperty:
        """ Get: CommonCriteriaComplianceEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def ContainmentEnabled(self) -> ConfigProperty:
        """ Get: ContainmentEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def CostThresholdForParallelism(self) -> ConfigProperty:
        """ Get: CostThresholdForParallelism(self: Configuration) -> ConfigProperty """
        ...

    @property
    def CrossDBOwnershipChaining(self) -> ConfigProperty:
        """ Get: CrossDBOwnershipChaining(self: Configuration) -> ConfigProperty """
        ...

    @property
    def CursorThreshold(self) -> ConfigProperty:
        """ Get: CursorThreshold(self: Configuration) -> ConfigProperty """
        ...

    @property
    def DatabaseMailEnabled(self) -> ConfigProperty:
        """ Get: DatabaseMailEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def DefaultBackupCompression(self) -> ConfigProperty:
        """ Get: DefaultBackupCompression(self: Configuration) -> ConfigProperty """
        ...

    @property
    def DefaultFullTextLanguage(self) -> ConfigProperty:
        """ Get: DefaultFullTextLanguage(self: Configuration) -> ConfigProperty """
        ...

    @property
    def DefaultLanguage(self) -> ConfigProperty:
        """ Get: DefaultLanguage(self: Configuration) -> ConfigProperty """
        ...

    @property
    def DefaultTraceEnabled(self) -> ConfigProperty:
        """ Get: DefaultTraceEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def DisallowResultsFromTriggers(self) -> ConfigProperty:
        """ Get: DisallowResultsFromTriggers(self: Configuration) -> ConfigProperty """
        ...

    @property
    def ExtensibleKeyManagementEnabled(self) -> ConfigProperty:
        """ Get: ExtensibleKeyManagementEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def FilestreamAccessLevel(self) -> ConfigProperty:
        """ Get: FilestreamAccessLevel(self: Configuration) -> ConfigProperty """
        ...

    @property
    def FillFactor(self) -> ConfigProperty:
        """ Get: FillFactor(self: Configuration) -> ConfigProperty """
        ...

    @property
    def FullTextCrawlBandwidthMax(self) -> ConfigProperty:
        """ Get: FullTextCrawlBandwidthMax(self: Configuration) -> ConfigProperty """
        ...

    @property
    def FullTextCrawlBandwidthMin(self) -> ConfigProperty:
        """ Get: FullTextCrawlBandwidthMin(self: Configuration) -> ConfigProperty """
        ...

    @property
    def FullTextCrawlRangeMax(self) -> ConfigProperty:
        """ Get: FullTextCrawlRangeMax(self: Configuration) -> ConfigProperty """
        ...

    @property
    def FullTextNotifyBandwidthMax(self) -> ConfigProperty:
        """ Get: FullTextNotifyBandwidthMax(self: Configuration) -> ConfigProperty """
        ...

    @property
    def FullTextNotifyBandwidthMin(self) -> ConfigProperty:
        """ Get: FullTextNotifyBandwidthMin(self: Configuration) -> ConfigProperty """
        ...

    @property
    def IndexCreateMemory(self) -> ConfigProperty:
        """ Get: IndexCreateMemory(self: Configuration) -> ConfigProperty """
        ...

    @property
    def InDoubtTransactionResolution(self) -> ConfigProperty:
        """ Get: InDoubtTransactionResolution(self: Configuration) -> ConfigProperty """
        ...

    @property
    def IsSqlClrEnabled(self) -> ConfigProperty:
        """ Get: IsSqlClrEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def LightweightPooling(self) -> ConfigProperty:
        """ Get: LightweightPooling(self: Configuration) -> ConfigProperty """
        ...

    @property
    def Locks(self) -> ConfigProperty:
        """ Get: Locks(self: Configuration) -> ConfigProperty """
        ...

    @property
    def MaxDegreeOfParallelism(self) -> ConfigProperty:
        """ Get: MaxDegreeOfParallelism(self: Configuration) -> ConfigProperty """
        ...

    @property
    def MaxServerMemory(self) -> ConfigProperty:
        """ Get: MaxServerMemory(self: Configuration) -> ConfigProperty """
        ...

    @property
    def MaxWorkerThreads(self) -> ConfigProperty:
        """ Get: MaxWorkerThreads(self: Configuration) -> ConfigProperty """
        ...

    @property
    def MediaRetention(self) -> ConfigProperty:
        """ Get: MediaRetention(self: Configuration) -> ConfigProperty """
        ...

    @property
    def MinMemoryPerQuery(self) -> ConfigProperty:
        """ Get: MinMemoryPerQuery(self: Configuration) -> ConfigProperty """
        ...

    @property
    def MinServerMemory(self) -> ConfigProperty:
        """ Get: MinServerMemory(self: Configuration) -> ConfigProperty """
        ...

    @property
    def NestedTriggers(self) -> ConfigProperty:
        """ Get: NestedTriggers(self: Configuration) -> ConfigProperty """
        ...

    @property
    def NetworkPacketSize(self) -> ConfigProperty:
        """ Get: NetworkPacketSize(self: Configuration) -> ConfigProperty """
        ...

    @property
    def OleAutomationProceduresEnabled(self) -> ConfigProperty:
        """ Get: OleAutomationProceduresEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def OpenObjects(self) -> ConfigProperty:
        """ Get: OpenObjects(self: Configuration) -> ConfigProperty """
        ...

    @property
    def OptimizeAdhocWorkloads(self) -> ConfigProperty:
        """ Get: OptimizeAdhocWorkloads(self: Configuration) -> ConfigProperty """
        ...

    @property
    def PrecomputeRank(self) -> ConfigProperty:
        """ Get: PrecomputeRank(self: Configuration) -> ConfigProperty """
        ...

    @property
    def PriorityBoost(self) -> ConfigProperty:
        """ Get: PriorityBoost(self: Configuration) -> ConfigProperty """
        ...

    @property
    def Properties(self) -> ConfigPropertyCollection:
        """ Get: Properties(self: Configuration) -> ConfigPropertyCollection """
        ...

    @property
    def ProtocolHandlerTimeout(self) -> ConfigProperty:
        """ Get: ProtocolHandlerTimeout(self: Configuration) -> ConfigProperty """
        ...

    @property
    def QueryGovernorCostLimit(self) -> ConfigProperty:
        """ Get: QueryGovernorCostLimit(self: Configuration) -> ConfigProperty """
        ...

    @property
    def QueryWait(self) -> ConfigProperty:
        """ Get: QueryWait(self: Configuration) -> ConfigProperty """
        ...

    @property
    def RecoveryInterval(self) -> ConfigProperty:
        """ Get: RecoveryInterval(self: Configuration) -> ConfigProperty """
        ...

    @property
    def RemoteAccess(self) -> ConfigProperty:
        """ Get: RemoteAccess(self: Configuration) -> ConfigProperty """
        ...

    @property
    def RemoteDacConnectionsEnabled(self) -> ConfigProperty:
        """ Get: RemoteDacConnectionsEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def RemoteDataArchiveEnabled(self) -> ConfigProperty:
        """ Get: RemoteDataArchiveEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def RemoteLoginTimeout(self) -> ConfigProperty:
        """ Get: RemoteLoginTimeout(self: Configuration) -> ConfigProperty """
        ...

    @property
    def RemoteProcTrans(self) -> ConfigProperty:
        """ Get: RemoteProcTrans(self: Configuration) -> ConfigProperty """
        ...

    @property
    def RemoteQueryTimeout(self) -> ConfigProperty:
        """ Get: RemoteQueryTimeout(self: Configuration) -> ConfigProperty """
        ...

    @property
    def ReplicationMaxTextSize(self) -> ConfigProperty:
        """ Get: ReplicationMaxTextSize(self: Configuration) -> ConfigProperty """
        ...

    @property
    def ReplicationXPsEnabled(self) -> ConfigProperty:
        """ Get: ReplicationXPsEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def ScanForStartupProcedures(self) -> ConfigProperty:
        """ Get: ScanForStartupProcedures(self: Configuration) -> ConfigProperty """
        ...

    @property
    def ServerTriggerRecursionEnabled(self) -> ConfigProperty:
        """ Get: ServerTriggerRecursionEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def SetWorkingSetSize(self) -> ConfigProperty:
        """ Get: SetWorkingSetSize(self: Configuration) -> ConfigProperty """
        ...

    @property
    def ShowAdvancedOptions(self) -> ConfigProperty:
        """ Get: ShowAdvancedOptions(self: Configuration) -> ConfigProperty """
        ...

    @property
    def SmoAndDmoXPsEnabled(self) -> ConfigProperty:
        """ Get: SmoAndDmoXPsEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def SqlMailXPsEnabled(self) -> ConfigProperty:
        """ Get: SqlMailXPsEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def TransformNoiseWords(self) -> ConfigProperty:
        """ Get: TransformNoiseWords(self: Configuration) -> ConfigProperty """
        ...

    @property
    def TwoDigitYearCutoff(self) -> ConfigProperty:
        """ Get: TwoDigitYearCutoff(self: Configuration) -> ConfigProperty """
        ...

    @property
    def UserConnections(self) -> ConfigProperty:
        """ Get: UserConnections(self: Configuration) -> ConfigProperty """
        ...

    @property
    def UserInstancesEnabled(self) -> ConfigProperty:
        """ Get: UserInstancesEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def UserInstanceTimeout(self) -> ConfigProperty:
        """ Get: UserInstanceTimeout(self: Configuration) -> ConfigProperty """
        ...

    @property
    def UserOptions(self) -> ConfigProperty:
        """ Get: UserOptions(self: Configuration) -> ConfigProperty """
        ...

    @property
    def WebXPsEnabled(self) -> ConfigProperty:
        """ Get: WebXPsEnabled(self: Configuration) -> ConfigProperty """
        ...

    @property
    def XPCmdShellEnabled(self) -> ConfigProperty:
        """ Get: XPCmdShellEnabled(self: Configuration) -> ConfigProperty """
        ...



class ContainmentType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ContainmentType, values: None (0), Partial (1) """
    Partial: ContainmentType = ...
    value__ = ...


class Cpu: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AffinityMask(self) -> bool:
        """
        Get: AffinityMask(self: Cpu) -> bool
        Set: AffinityMask(self: Cpu) = value
        """
        ...

    @property
    def GroupID(self) -> int:
        """ Get: GroupID(self: Cpu) -> int """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Cpu) -> int """
        ...

    @property
    def NumaNodeID(self) -> int:
        """ Get: NumaNodeID(self: Cpu) -> int """
        ...



class CpuCollection(ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    @property
    def AffitinizedCPUs(self) -> IEnumerable:
        """ Get: AffitinizedCPUs(self: CpuCollection) -> IEnumerable """
        ...


    def GetByID(self, cpuId:int) -> Cpu:
        """ GetByID(self: CpuCollection, cpuId: int) -> Cpu """
        ...

    def GetElementAt(self, position:int) -> Cpu:
        """ GetElementAt(self: CpuCollection, position: int) -> Cpu """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: CpuCollection) -> IEnumerator """
        ...

    def SetAffinityToAll(self, affinityMask:bool): # -> 
        """ SetAffinityToAll(self: CpuCollection, affinityMask: bool) """
        ...

    def SetAffinityToRange(self, startCpuId:int, endCpuId:int, affinityMask:bool, ignoreMissingIds:bool = ...): # -> 
        """ SetAffinityToRange(self: CpuCollection, startCpuId: int, endCpuId: int, affinityMask: bool)SetAffinityToRange(self: CpuCollection, startCpuId: int, endCpuId: int, affinityMask: bool, ignoreMissingIds: bool) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...


class CreateDispositionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CreateDispositionType, values: CreateNew (1), OpenExisting (2) """
    CreateNew: CreateDispositionType = ...
    OpenExisting: CreateDispositionType = ...
    value__ = ...


class CreateRestorePlanEventArgs: # skipped bases: <type 'object'>, <type 'object'>
    """ CreateRestorePlanEventArgs(status: str) """
    Status = ...


class Credential(IDroppable, IAlterable, ICreatable, ISfcSupportsDesignMode, IDropIfExists, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Credential()
    Credential(server: Server, name: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: Credential) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: Credential) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Credential) -> int """
        ...

    @property
    def Identity(self) -> str:
        """
        Get: Identity(self: Credential) -> str
        Set: Identity(self: Credential) = value
        """
        ...

    @property
    def MappedClassType(self): # -> MappedClassType
        """
        Get: MappedClassType(self: Credential) -> MappedClassType
        Set: MappedClassType(self: Credential) = value
        """
        ...

    @property
    def Parent(self): # -> Server
        """
        Get: Parent(self: Credential) -> Server
        Set: Parent(self: Credential) = value
        """
        ...

    @property
    def ProviderName(self) -> str:
        """
        Get: ProviderName(self: Credential) -> str
        Set: ProviderName(self: Credential) = value
        """
        ...


    def EnumLogins(self) -> StringCollection:
        """ EnumLogins(self: Credential) -> StringCollection """
        ...

    def __new__(cls, server = ..., name:str = ...) -> Self: # Not found arg types: {'server': 'Server'}
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class CredentialCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: CredentialCollection) -> Server """
        ...


    def Add(self, credential:Credential): # -> 
        """ Add(self: CredentialCollection, credential: Credential) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: CredentialCollection, array: Array[Credential], index: int) """
        ...

    def ItemById(self, id:int) -> Credential:
        """ ItemById(self: CredentialCollection, id: int) -> Credential """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class CryptographicProvider(IDroppable, IAlterable, ICreatable, IScriptable, ISfcSupportsDesignMode, IDropIfExists, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    CryptographicProvider()
    CryptographicProvider(server: Server, name: str)
    """
    @property
    def AsymmetricKeyExportable(self) -> bool:
        """ Get: AsymmetricKeyExportable(self: CryptographicProvider) -> bool """
        ...

    @property
    def AsymmetricKeyImportable(self) -> bool:
        """ Get: AsymmetricKeyImportable(self: CryptographicProvider) -> bool """
        ...

    @property
    def AsymmetricKeyPersistable(self) -> bool:
        """ Get: AsymmetricKeyPersistable(self: CryptographicProvider) -> bool """
        ...

    @property
    def AsymmetricKeySupported(self) -> bool:
        """ Get: AsymmetricKeySupported(self: CryptographicProvider) -> bool """
        ...

    @property
    def AuthenticationType(self): # -> ProviderAuthenticationType
        """ Get: AuthenticationType(self: CryptographicProvider) -> ProviderAuthenticationType """
        ...

    @property
    def DllPath(self) -> str:
        """
        Get: DllPath(self: CryptographicProvider) -> str
        Set: DllPath(self: CryptographicProvider) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: CryptographicProvider) -> bool
        Set: Enabled(self: CryptographicProvider) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: CryptographicProvider) -> int """
        ...

    @property
    def Parent(self): # -> Server
        """
        Get: Parent(self: CryptographicProvider) -> Server
        Set: Parent(self: CryptographicProvider) = value
        """
        ...

    @property
    def ProviderGuid(self) -> Guid:
        """ Get: ProviderGuid(self: CryptographicProvider) -> Guid """
        ...

    @property
    def SqlCryptographicVersion(self) -> Version:
        """ Get: SqlCryptographicVersion(self: CryptographicProvider) -> Version """
        ...

    @property
    def SymmetricKeyExportable(self) -> bool:
        """ Get: SymmetricKeyExportable(self: CryptographicProvider) -> bool """
        ...

    @property
    def SymmetricKeyImportable(self) -> bool:
        """ Get: SymmetricKeyImportable(self: CryptographicProvider) -> bool """
        ...

    @property
    def SymmetricKeyPersistable(self) -> bool:
        """ Get: SymmetricKeyPersistable(self: CryptographicProvider) -> bool """
        ...

    @property
    def SymmetricKeySupported(self) -> bool:
        """ Get: SymmetricKeySupported(self: CryptographicProvider) -> bool """
        ...

    @property
    def Version(self) -> Version:
        """ Get: Version(self: CryptographicProvider) -> Version """
        ...


    def Disable(self): # -> 
        """ Disable(self: CryptographicProvider) """
        ...

    def Enable(self): # -> 
        """ Enable(self: CryptographicProvider) """
        ...

    def EnumEncryptionAlgorithms(self) -> DataTable:
        """ EnumEncryptionAlgorithms(self: CryptographicProvider) -> DataTable """
        ...

    def EnumProviderKeys(self) -> DataTable:
        """ EnumProviderKeys(self: CryptographicProvider) -> DataTable """
        ...

    def Upgrade(self, pathToDll:str): # -> 
        """ Upgrade(self: CryptographicProvider, pathToDll: str) """
        ...

    def __new__(cls, server = ..., name:str = ...) -> Self: # Not found arg types: {'server': 'Server'}
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class CryptographicProviderCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: CryptographicProviderCollection) -> Server """
        ...


    def Add(self, cryptographicProvider:CryptographicProvider): # -> 
        """ Add(self: CryptographicProviderCollection, cryptographicProvider: CryptographicProvider) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: CryptographicProviderCollection, array: Array[CryptographicProvider], index: int) """
        ...

    def ItemById(self, id:int) -> CryptographicProvider:
        """ ItemById(self: CryptographicProviderCollection, id: int) -> CryptographicProvider """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class IDatabaseOptions(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AnsiNullDefault(self) -> bool:
        """
        Get: AnsiNullDefault(self: IDatabaseOptions) -> bool
        Set: AnsiNullDefault(self: IDatabaseOptions) = value
        """
        ...

    @property
    def AnsiNullsEnabled(self) -> bool:
        """
        Get: AnsiNullsEnabled(self: IDatabaseOptions) -> bool
        Set: AnsiNullsEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def AnsiPaddingEnabled(self) -> bool:
        """
        Get: AnsiPaddingEnabled(self: IDatabaseOptions) -> bool
        Set: AnsiPaddingEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def AnsiWarningsEnabled(self) -> bool:
        """
        Get: AnsiWarningsEnabled(self: IDatabaseOptions) -> bool
        Set: AnsiWarningsEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def ArithmeticAbortEnabled(self) -> bool:
        """
        Get: ArithmeticAbortEnabled(self: IDatabaseOptions) -> bool
        Set: ArithmeticAbortEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def AutoClose(self) -> bool:
        """
        Get: AutoClose(self: IDatabaseOptions) -> bool
        Set: AutoClose(self: IDatabaseOptions) = value
        """
        ...

    @property
    def AutoCreateIncrementalStatisticsEnabled(self) -> bool:
        """
        Get: AutoCreateIncrementalStatisticsEnabled(self: IDatabaseOptions) -> bool
        Set: AutoCreateIncrementalStatisticsEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def AutoCreateStatisticsEnabled(self) -> bool:
        """
        Get: AutoCreateStatisticsEnabled(self: IDatabaseOptions) -> bool
        Set: AutoCreateStatisticsEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def AutoShrink(self) -> bool:
        """
        Get: AutoShrink(self: IDatabaseOptions) -> bool
        Set: AutoShrink(self: IDatabaseOptions) = value
        """
        ...

    @property
    def AutoUpdateStatisticsAsync(self) -> bool:
        """
        Get: AutoUpdateStatisticsAsync(self: IDatabaseOptions) -> bool
        Set: AutoUpdateStatisticsAsync(self: IDatabaseOptions) = value
        """
        ...

    @property
    def AutoUpdateStatisticsEnabled(self) -> bool:
        """
        Get: AutoUpdateStatisticsEnabled(self: IDatabaseOptions) -> bool
        Set: AutoUpdateStatisticsEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def BrokerEnabled(self) -> bool:
        """
        Get: BrokerEnabled(self: IDatabaseOptions) -> bool
        Set: BrokerEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def ChangeTrackingAutoCleanUp(self) -> bool:
        """
        Get: ChangeTrackingAutoCleanUp(self: IDatabaseOptions) -> bool
        Set: ChangeTrackingAutoCleanUp(self: IDatabaseOptions) = value
        """
        ...

    @property
    def ChangeTrackingEnabled(self) -> bool:
        """
        Get: ChangeTrackingEnabled(self: IDatabaseOptions) -> bool
        Set: ChangeTrackingEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def ChangeTrackingRetentionPeriod(self) -> int:
        """
        Get: ChangeTrackingRetentionPeriod(self: IDatabaseOptions) -> int
        Set: ChangeTrackingRetentionPeriod(self: IDatabaseOptions) = value
        """
        ...

    @property
    def ChangeTrackingRetentionPeriodUnits(self): # -> RetentionPeriodUnits
        """
        Get: ChangeTrackingRetentionPeriodUnits(self: IDatabaseOptions) -> RetentionPeriodUnits
        Set: ChangeTrackingRetentionPeriodUnits(self: IDatabaseOptions) = value
        """
        ...

    @property
    def CloseCursorsOnCommitEnabled(self) -> bool:
        """
        Get: CloseCursorsOnCommitEnabled(self: IDatabaseOptions) -> bool
        Set: CloseCursorsOnCommitEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def Collation(self) -> str:
        """
        Get: Collation(self: IDatabaseOptions) -> str
        Set: Collation(self: IDatabaseOptions) = value
        """
        ...

    @property
    def CompatibilityLevel(self) -> CompatibilityLevel:
        """
        Get: CompatibilityLevel(self: IDatabaseOptions) -> CompatibilityLevel
        Set: CompatibilityLevel(self: IDatabaseOptions) = value
        """
        ...

    @property
    def ConcatenateNullYieldsNull(self) -> bool:
        """
        Get: ConcatenateNullYieldsNull(self: IDatabaseOptions) -> bool
        Set: ConcatenateNullYieldsNull(self: IDatabaseOptions) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: IDatabaseOptions) -> DateTime """
        ...

    @property
    def DatabaseOwnershipChaining(self) -> bool:
        """
        Get: DatabaseOwnershipChaining(self: IDatabaseOptions) -> bool
        Set: DatabaseOwnershipChaining(self: IDatabaseOptions) = value
        """
        ...

    @property
    def DatabaseSnapshotBaseName(self) -> str:
        """ Get: DatabaseSnapshotBaseName(self: IDatabaseOptions) -> str """
        ...

    @property
    def DateCorrelationOptimization(self) -> bool:
        """
        Get: DateCorrelationOptimization(self: IDatabaseOptions) -> bool
        Set: DateCorrelationOptimization(self: IDatabaseOptions) = value
        """
        ...

    @property
    def DefaultFileGroup(self) -> str:
        """ Get: DefaultFileGroup(self: IDatabaseOptions) -> str """
        ...

    @property
    def DefaultFileStreamFileGroup(self) -> str:
        """ Get: DefaultFileStreamFileGroup(self: IDatabaseOptions) -> str """
        ...

    @property
    def DelayedDurability(self): # -> DelayedDurability
        """
        Get: DelayedDurability(self: IDatabaseOptions) -> DelayedDurability
        Set: DelayedDurability(self: IDatabaseOptions) = value
        """
        ...

    @property
    def EncryptionEnabled(self) -> bool:
        """
        Get: EncryptionEnabled(self: IDatabaseOptions) -> bool
        Set: EncryptionEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def HonorBrokerPriority(self) -> bool:
        """
        Get: HonorBrokerPriority(self: IDatabaseOptions) -> bool
        Set: HonorBrokerPriority(self: IDatabaseOptions) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: IDatabaseOptions) -> int """
        ...

    @property
    def IsParameterizationForced(self) -> bool:
        """
        Get: IsParameterizationForced(self: IDatabaseOptions) -> bool
        Set: IsParameterizationForced(self: IDatabaseOptions) = value
        """
        ...

    @property
    def IsReadCommittedSnapshotOn(self) -> bool:
        """
        Get: IsReadCommittedSnapshotOn(self: IDatabaseOptions) -> bool
        Set: IsReadCommittedSnapshotOn(self: IDatabaseOptions) = value
        """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: IDatabaseOptions) -> bool """
        ...

    @property
    def IsUpdateable(self) -> bool:
        """ Get: IsUpdateable(self: IDatabaseOptions) -> bool """
        ...

    @property
    def LocalCursorsDefault(self) -> bool:
        """
        Get: LocalCursorsDefault(self: IDatabaseOptions) -> bool
        Set: LocalCursorsDefault(self: IDatabaseOptions) = value
        """
        ...

    @property
    def MirroringTimeout(self) -> int:
        """
        Get: MirroringTimeout(self: IDatabaseOptions) -> int
        Set: MirroringTimeout(self: IDatabaseOptions) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IDatabaseOptions) -> str """
        ...

    @property
    def NumericRoundAbortEnabled(self) -> bool:
        """
        Get: NumericRoundAbortEnabled(self: IDatabaseOptions) -> bool
        Set: NumericRoundAbortEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def Owner(self) -> str:
        """ Get: Owner(self: IDatabaseOptions) -> str """
        ...

    @property
    def PageVerify(self): # -> PageVerify
        """
        Get: PageVerify(self: IDatabaseOptions) -> PageVerify
        Set: PageVerify(self: IDatabaseOptions) = value
        """
        ...

    @property
    def PrimaryFilePath(self) -> str:
        """ Get: PrimaryFilePath(self: IDatabaseOptions) -> str """
        ...

    @property
    def QuotedIdentifiersEnabled(self) -> bool:
        """
        Get: QuotedIdentifiersEnabled(self: IDatabaseOptions) -> bool
        Set: QuotedIdentifiersEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: IDatabaseOptions) -> bool
        Set: ReadOnly(self: IDatabaseOptions) = value
        """
        ...

    @property
    def RecoveryModel(self): # -> RecoveryModel
        """
        Get: RecoveryModel(self: IDatabaseOptions) -> RecoveryModel
        Set: RecoveryModel(self: IDatabaseOptions) = value
        """
        ...

    @property
    def RecursiveTriggersEnabled(self) -> bool:
        """
        Get: RecursiveTriggersEnabled(self: IDatabaseOptions) -> bool
        Set: RecursiveTriggersEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def RemoteDataArchiveCredential(self) -> str:
        """ Get: RemoteDataArchiveCredential(self: IDatabaseOptions) -> str """
        ...

    @property
    def RemoteDataArchiveEnabled(self) -> bool:
        """
        Get: RemoteDataArchiveEnabled(self: IDatabaseOptions) -> bool
        Set: RemoteDataArchiveEnabled(self: IDatabaseOptions) = value
        """
        ...

    @property
    def RemoteDataArchiveEndpoint(self) -> str:
        """
        Get: RemoteDataArchiveEndpoint(self: IDatabaseOptions) -> str
        Set: RemoteDataArchiveEndpoint(self: IDatabaseOptions) = value
        """
        ...

    @property
    def RemoteDataArchiveLinkedServer(self) -> str:
        """ Get: RemoteDataArchiveLinkedServer(self: IDatabaseOptions) -> str """
        ...

    @property
    def RemoteDataArchiveUseFederatedServiceAccount(self) -> bool:
        """ Get: RemoteDataArchiveUseFederatedServiceAccount(self: IDatabaseOptions) -> bool """
        ...

    @property
    def RemoteDatabaseName(self) -> str:
        """ Get: RemoteDatabaseName(self: IDatabaseOptions) -> str """
        ...

    @property
    def TargetRecoveryTime(self) -> int:
        """
        Get: TargetRecoveryTime(self: IDatabaseOptions) -> int
        Set: TargetRecoveryTime(self: IDatabaseOptions) = value
        """
        ...

    @property
    def Trustworthy(self) -> bool:
        """
        Get: Trustworthy(self: IDatabaseOptions) -> bool
        Set: Trustworthy(self: IDatabaseOptions) = value
        """
        ...

    @property
    def UserAccess(self): # -> DatabaseUserAccess
        """
        Get: UserAccess(self: IDatabaseOptions) -> DatabaseUserAccess
        Set: UserAccess(self: IDatabaseOptions) = value
        """
        ...



class Database(IDroppable, IAlterable, ICreatable, IExtendedProperties, IScriptable, IPropertyDataDispatch, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IDatabaseOptions, ISafeRenamable): # skipped bases: <type 'IDmfFacet'>, <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'IRenamable'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Database()
    Database(server: Server, name: str)
    Database(server: Server, name: str, edition: DatabaseEngineEdition)
    """
    @property
    def ActiveConnections(self) -> int:
        """ Get: ActiveConnections(self: Database) -> int """
        ...

    @property
    def ActiveDirectory(self): # -> DatabaseActiveDirectory
        """ Get: ActiveDirectory(self: Database) -> DatabaseActiveDirectory """
        ...

    @property
    def ApplicationRoles(self) -> ApplicationRoleCollection:
        """ Get: ApplicationRoles(self: Database) -> ApplicationRoleCollection """
        ...

    @property
    def Assemblies(self): # -> SqlAssemblyCollection
        """ Get: Assemblies(self: Database) -> SqlAssemblyCollection """
        ...

    @property
    def AsymmetricKeys(self) -> AsymmetricKeyCollection:
        """ Get: AsymmetricKeys(self: Database) -> AsymmetricKeyCollection """
        ...

    @property
    def AvailabilityDatabaseSynchronizationState(self) -> AvailabilityDatabaseSynchronizationState:
        """ Get: AvailabilityDatabaseSynchronizationState(self: Database) -> AvailabilityDatabaseSynchronizationState """
        ...

    @property
    def AvailabilityGroupName(self) -> str:
        """ Get: AvailabilityGroupName(self: Database) -> str """
        ...

    @property
    def AzureEdition(self) -> str:
        """
        Get: AzureEdition(self: Database) -> str
        Set: AzureEdition(self: Database) = value
        """
        ...

    @property
    def AzureServiceObjective(self) -> str:
        """
        Get: AzureServiceObjective(self: Database) -> str
        Set: AzureServiceObjective(self: Database) = value
        """
        ...

    @property
    def CaseSensitive(self) -> bool:
        """ Get: CaseSensitive(self: Database) -> bool """
        ...

    @property
    def Certificates(self) -> CertificateCollection:
        """ Get: Certificates(self: Database) -> CertificateCollection """
        ...

    @property
    def ColumnEncryptionKeys(self) -> ColumnEncryptionKeyCollection:
        """ Get: ColumnEncryptionKeys(self: Database) -> ColumnEncryptionKeyCollection """
        ...

    @property
    def ColumnMasterKeys(self) -> ColumnMasterKeyCollection:
        """ Get: ColumnMasterKeys(self: Database) -> ColumnMasterKeyCollection """
        ...

    @property
    def ContainmentType(self) -> ContainmentType:
        """
        Get: ContainmentType(self: Database) -> ContainmentType
        Set: ContainmentType(self: Database) = value
        """
        ...

    @property
    def DatabaseAuditSpecifications(self): # -> DatabaseAuditSpecificationCollection
        """ Get: DatabaseAuditSpecifications(self: Database) -> DatabaseAuditSpecificationCollection """
        ...

    @property
    def DatabaseEncryptionKey(self): # -> DatabaseEncryptionKey
        """ Get: DatabaseEncryptionKey(self: Database) -> DatabaseEncryptionKey """
        ...

    @property
    def DatabaseEngineEdition(self) -> DatabaseEngineEdition:
        """ Get: DatabaseEngineEdition(self: Database) -> DatabaseEngineEdition """
        ...

    @property
    def DatabaseEngineType(self) -> DatabaseEngineType:
        """ Get: DatabaseEngineType(self: Database) -> DatabaseEngineType """
        ...

    @property
    def DatabaseGuid(self) -> Guid:
        """ Get: DatabaseGuid(self: Database) -> Guid """
        ...

    @property
    def DatabaseOptions(self): # -> DatabaseOptions
        """ Get: DatabaseOptions(self: Database) -> DatabaseOptions """
        ...

    @property
    def DatabaseScopedConfigurations(self): # -> DatabaseScopedConfigurationCollection
        """ Get: DatabaseScopedConfigurations(self: Database) -> DatabaseScopedConfigurationCollection """
        ...

    @property
    def DatabaseScopedCredentials(self): # -> DatabaseScopedCredentialCollection
        """ Get: DatabaseScopedCredentials(self: Database) -> DatabaseScopedCredentialCollection """
        ...

    @property
    def DataSpaceUsage(self) -> float:
        """ Get: DataSpaceUsage(self: Database) -> float """
        ...

    @property
    def DboLogin(self) -> bool:
        """ Get: DboLogin(self: Database) -> bool """
        ...

    @property
    def DefaultFullTextCatalog(self) -> str:
        """
        Get: DefaultFullTextCatalog(self: Database) -> str
        Set: DefaultFullTextCatalog(self: Database) = value
        """
        ...

    @property
    def DefaultFullTextLanguage(self): # -> DefaultLanguage
        """ Get: DefaultFullTextLanguage(self: Database) -> DefaultLanguage """
        ...

    @property
    def DefaultLanguage(self): # -> DefaultLanguage
        """ Get: DefaultLanguage(self: Database) -> DefaultLanguage """
        ...

    @property
    def Defaults(self): # -> DefaultCollection
        """ Get: Defaults(self: Database) -> DefaultCollection """
        ...

    @property
    def DefaultSchema(self) -> str:
        """
        Get: DefaultSchema(self: Database) -> str
        Set: DefaultSchema(self: Database) = value
        """
        ...

    @property
    def Events(self): # -> DatabaseEvents
        """ Get: Events(self: Database) -> DatabaseEvents """
        ...

    @property
    def ExecutionManager(self): # -> ExecutionManager
        """ Get: ExecutionManager(self: Database) -> ExecutionManager """
        ...

    @property
    def ExtendedStoredProcedures(self) -> ExtendedStoredProcedureCollection:
        """ Get: ExtendedStoredProcedures(self: Database) -> ExtendedStoredProcedureCollection """
        ...

    @property
    def ExternalDataSources(self): # -> ExternalDataSourceCollection
        """ Get: ExternalDataSources(self: Database) -> ExternalDataSourceCollection """
        ...

    @property
    def ExternalFileFormats(self): # -> ExternalFileFormatCollection
        """ Get: ExternalFileFormats(self: Database) -> ExternalFileFormatCollection """
        ...

    @property
    def Federations(self): # -> FederationCollection
        """ Get: Federations(self: Database) -> FederationCollection """
        ...

    @property
    def FileGroups(self): # -> FileGroupCollection
        """ Get: FileGroups(self: Database) -> FileGroupCollection """
        ...

    @property
    def FilestreamDirectoryName(self) -> str:
        """
        Get: FilestreamDirectoryName(self: Database) -> str
        Set: FilestreamDirectoryName(self: Database) = value
        """
        ...

    @property
    def FilestreamNonTransactedAccess(self): # -> FilestreamNonTransactedAccessType
        """
        Get: FilestreamNonTransactedAccess(self: Database) -> FilestreamNonTransactedAccessType
        Set: FilestreamNonTransactedAccess(self: Database) = value
        """
        ...

    @property
    def FullTextCatalogs(self): # -> FullTextCatalogCollection
        """ Get: FullTextCatalogs(self: Database) -> FullTextCatalogCollection """
        ...

    @property
    def FullTextStopLists(self): # -> FullTextStopListCollection
        """ Get: FullTextStopLists(self: Database) -> FullTextStopListCollection """
        ...

    @property
    def HasFileInCloud(self) -> bool:
        """ Get: HasFileInCloud(self: Database) -> bool """
        ...

    @property
    def HasMemoryOptimizedObjects(self) -> bool:
        """ Get: HasMemoryOptimizedObjects(self: Database) -> bool """
        ...

    @property
    def IndexSpaceUsage(self) -> float:
        """ Get: IndexSpaceUsage(self: Database) -> float """
        ...

    @property
    def IsAccessible(self) -> bool:
        """ Get: IsAccessible(self: Database) -> bool """
        ...

    @property
    def IsDatabaseSnapshot(self) -> bool:
        """ Get: IsDatabaseSnapshot(self: Database) -> bool """
        ...

    @property
    def IsDatabaseSnapshotBase(self) -> bool:
        """ Get: IsDatabaseSnapshotBase(self: Database) -> bool """
        ...

    @property
    def IsDbAccessAdmin(self) -> bool:
        """ Get: IsDbAccessAdmin(self: Database) -> bool """
        ...

    @property
    def IsDbBackupOperator(self) -> bool:
        """ Get: IsDbBackupOperator(self: Database) -> bool """
        ...

    @property
    def IsDbDatareader(self) -> bool:
        """ Get: IsDbDatareader(self: Database) -> bool """
        ...

    @property
    def IsDbDatawriter(self) -> bool:
        """ Get: IsDbDatawriter(self: Database) -> bool """
        ...

    @property
    def IsDbDdlAdmin(self) -> bool:
        """ Get: IsDbDdlAdmin(self: Database) -> bool """
        ...

    @property
    def IsDbDenyDatareader(self) -> bool:
        """ Get: IsDbDenyDatareader(self: Database) -> bool """
        ...

    @property
    def IsDbDenyDatawriter(self) -> bool:
        """ Get: IsDbDenyDatawriter(self: Database) -> bool """
        ...

    @property
    def IsDbManager(self) -> bool:
        """ Get: IsDbManager(self: Database) -> bool """
        ...

    @property
    def IsDbOwner(self) -> bool:
        """ Get: IsDbOwner(self: Database) -> bool """
        ...

    @property
    def IsDbSecurityAdmin(self) -> bool:
        """ Get: IsDbSecurityAdmin(self: Database) -> bool """
        ...

    @property
    def IsFederationMember(self) -> bool:
        """ Get: IsFederationMember(self: Database) -> bool """
        ...

    @property
    def IsFullTextEnabled(self) -> bool:
        """
        Get: IsFullTextEnabled(self: Database) -> bool
        Set: IsFullTextEnabled(self: Database) = value
        """
        ...

    @property
    def IsLoginManager(self) -> bool:
        """ Get: IsLoginManager(self: Database) -> bool """
        ...

    @property
    def IsMailHost(self) -> bool:
        """ Get: IsMailHost(self: Database) -> bool """
        ...

    @property
    def IsManagementDataWarehouse(self) -> bool:
        """ Get: IsManagementDataWarehouse(self: Database) -> bool """
        ...

    @property
    def IsMirroringEnabled(self) -> bool:
        """ Get: IsMirroringEnabled(self: Database) -> bool """
        ...

    @property
    def IsSqlDw(self) -> bool:
        """
        Get: IsSqlDw(self: Database) -> bool
        Set: IsSqlDw(self: Database) = value
        """
        ...

    @property
    def IsSqlDwEdition(self) -> bool:
        """ Get: IsSqlDwEdition(self: Database) -> bool """
        ...

    @property
    def IsVarDecimalStorageFormatEnabled(self) -> bool:
        """
        Get: IsVarDecimalStorageFormatEnabled(self: Database) -> bool
        Set: IsVarDecimalStorageFormatEnabled(self: Database) = value
        """
        ...

    @property
    def LastBackupDate(self) -> DateTime:
        """ Get: LastBackupDate(self: Database) -> DateTime """
        ...

    @property
    def LastDifferentialBackupDate(self) -> DateTime:
        """ Get: LastDifferentialBackupDate(self: Database) -> DateTime """
        ...

    @property
    def LastLogBackupDate(self) -> DateTime:
        """ Get: LastLogBackupDate(self: Database) -> DateTime """
        ...

    @property
    def LegacyCardinalityEstimation(self): # -> DatabaseScopedConfigurationOnOff
        """
        Get: LegacyCardinalityEstimation(self: Database) -> DatabaseScopedConfigurationOnOff
        Set: LegacyCardinalityEstimation(self: Database) = value
        """
        ...

    @property
    def LegacyCardinalityEstimationForSecondary(self): # -> DatabaseScopedConfigurationOnOff
        """
        Get: LegacyCardinalityEstimationForSecondary(self: Database) -> DatabaseScopedConfigurationOnOff
        Set: LegacyCardinalityEstimationForSecondary(self: Database) = value
        """
        ...

    @property
    def LogFiles(self): # -> LogFileCollection
        """ Get: LogFiles(self: Database) -> LogFileCollection """
        ...

    @property
    def LogReuseWaitStatus(self): # -> LogReuseWaitStatus
        """ Get: LogReuseWaitStatus(self: Database) -> LogReuseWaitStatus """
        ...

    @property
    def MasterKey(self): # -> MasterKey
        """ Get: MasterKey(self: Database) -> MasterKey """
        ...

    @property
    def MaxDop(self) -> int:
        """
        Get: MaxDop(self: Database) -> int
        Set: MaxDop(self: Database) = value
        """
        ...

    @property
    def MaxDopForSecondary(self) -> Nullable:
        """
        Get: MaxDopForSecondary(self: Database) -> Nullable[int]
        Set: MaxDopForSecondary(self: Database) = value
        """
        ...

    @property
    def MaxSizeInBytes(self) -> float:
        """
        Get: MaxSizeInBytes(self: Database) -> float
        Set: MaxSizeInBytes(self: Database) = value
        """
        ...

    @property
    def MemoryAllocatedToMemoryOptimizedObjectsInKB(self) -> float:
        """ Get: MemoryAllocatedToMemoryOptimizedObjectsInKB(self: Database) -> float """
        ...

    @property
    def MemoryUsedByMemoryOptimizedObjectsInKB(self) -> float:
        """ Get: MemoryUsedByMemoryOptimizedObjectsInKB(self: Database) -> float """
        ...

    @property
    def MirroringFailoverLogSequenceNumber(self) -> Decimal:
        """ Get: MirroringFailoverLogSequenceNumber(self: Database) -> Decimal """
        ...

    @property
    def MirroringID(self) -> Guid:
        """ Get: MirroringID(self: Database) -> Guid """
        ...

    @property
    def MirroringPartner(self) -> str:
        """
        Get: MirroringPartner(self: Database) -> str
        Set: MirroringPartner(self: Database) = value
        """
        ...

    @property
    def MirroringPartnerInstance(self) -> str:
        """ Get: MirroringPartnerInstance(self: Database) -> str """
        ...

    @property
    def MirroringRedoQueueMaxSize(self) -> int:
        """ Get: MirroringRedoQueueMaxSize(self: Database) -> int """
        ...

    @property
    def MirroringRoleSequence(self) -> int:
        """ Get: MirroringRoleSequence(self: Database) -> int """
        ...

    @property
    def MirroringSafetyLevel(self): # -> MirroringSafetyLevel
        """
        Get: MirroringSafetyLevel(self: Database) -> MirroringSafetyLevel
        Set: MirroringSafetyLevel(self: Database) = value
        """
        ...

    @property
    def MirroringSafetySequence(self) -> int:
        """ Get: MirroringSafetySequence(self: Database) -> int """
        ...

    @property
    def MirroringStatus(self): # -> MirroringStatus
        """ Get: MirroringStatus(self: Database) -> MirroringStatus """
        ...

    @property
    def MirroringWitness(self) -> str:
        """
        Get: MirroringWitness(self: Database) -> str
        Set: MirroringWitness(self: Database) = value
        """
        ...

    @property
    def MirroringWitnessStatus(self): # -> MirroringWitnessStatus
        """ Get: MirroringWitnessStatus(self: Database) -> MirroringWitnessStatus """
        ...

    @property
    def NestedTriggersEnabled(self) -> bool:
        """
        Get: NestedTriggersEnabled(self: Database) -> bool
        Set: NestedTriggersEnabled(self: Database) = value
        """
        ...

    @property
    def ParameterSniffing(self): # -> DatabaseScopedConfigurationOnOff
        """
        Get: ParameterSniffing(self: Database) -> DatabaseScopedConfigurationOnOff
        Set: ParameterSniffing(self: Database) = value
        """
        ...

    @property
    def ParameterSniffingForSecondary(self): # -> DatabaseScopedConfigurationOnOff
        """
        Get: ParameterSniffingForSecondary(self: Database) -> DatabaseScopedConfigurationOnOff
        Set: ParameterSniffingForSecondary(self: Database) = value
        """
        ...

    @property
    def Parent(self): # -> Server
        """
        Get: Parent(self: Database) -> Server
        Set: Parent(self: Database) = value
        """
        ...

    @property
    def PartitionFunctions(self): # -> PartitionFunctionCollection
        """ Get: PartitionFunctions(self: Database) -> PartitionFunctionCollection """
        ...

    @property
    def PartitionSchemes(self): # -> PartitionSchemeCollection
        """ Get: PartitionSchemes(self: Database) -> PartitionSchemeCollection """
        ...

    @property
    def PlanGuides(self): # -> PlanGuideCollection
        """ Get: PlanGuides(self: Database) -> PlanGuideCollection """
        ...

    @property
    def QueryOptimizerHotfixes(self): # -> DatabaseScopedConfigurationOnOff
        """
        Get: QueryOptimizerHotfixes(self: Database) -> DatabaseScopedConfigurationOnOff
        Set: QueryOptimizerHotfixes(self: Database) = value
        """
        ...

    @property
    def QueryOptimizerHotfixesForSecondary(self): # -> DatabaseScopedConfigurationOnOff
        """
        Get: QueryOptimizerHotfixesForSecondary(self: Database) -> DatabaseScopedConfigurationOnOff
        Set: QueryOptimizerHotfixesForSecondary(self: Database) = value
        """
        ...

    @property
    def QueryStoreOptions(self): # -> QueryStoreOptions
        """ Get: QueryStoreOptions(self: Database) -> QueryStoreOptions """
        ...

    @property
    def RecoveryForkGuid(self) -> Guid:
        """ Get: RecoveryForkGuid(self: Database) -> Guid """
        ...

    @property
    def ReplicationOptions(self): # -> ReplicationOptions
        """ Get: ReplicationOptions(self: Database) -> ReplicationOptions """
        ...

    @property
    def Roles(self) -> DatabaseRoleCollection:
        """ Get: Roles(self: Database) -> DatabaseRoleCollection """
        ...

    @property
    def Rules(self): # -> RuleCollection
        """ Get: Rules(self: Database) -> RuleCollection """
        ...

    @property
    def Schemas(self) -> SchemaCollection:
        """ Get: Schemas(self: Database) -> SchemaCollection """
        ...

    @property
    def SearchPropertyLists(self): # -> SearchPropertyListCollection
        """ Get: SearchPropertyLists(self: Database) -> SearchPropertyListCollection """
        ...

    @property
    def SecurityPolicies(self): # -> SecurityPolicyCollection
        """ Get: SecurityPolicies(self: Database) -> SecurityPolicyCollection """
        ...

    @property
    def Sequences(self): # -> SequenceCollection
        """ Get: Sequences(self: Database) -> SequenceCollection """
        ...

    @property
    def ServiceBroker(self) -> ServiceBroker:
        """ Get: ServiceBroker(self: Database) -> ServiceBroker """
        ...

    @property
    def ServiceBrokerGuid(self) -> Guid:
        """ Get: ServiceBrokerGuid(self: Database) -> Guid """
        ...

    @property
    def Size(self) -> float:
        """ Get: Size(self: Database) -> float """
        ...

    @property
    def SnapshotIsolationState(self): # -> SnapshotIsolationState
        """ Get: SnapshotIsolationState(self: Database) -> SnapshotIsolationState """
        ...

    @property
    def SpaceAvailable(self) -> float:
        """ Get: SpaceAvailable(self: Database) -> float """
        ...

    @property
    def Status(self): # -> DatabaseStatus
        """ Get: Status(self: Database) -> DatabaseStatus """
        ...

    @property
    def StoredProcedures(self) -> StoredProcedureCollection:
        """ Get: StoredProcedures(self: Database) -> StoredProcedureCollection """
        ...

    @property
    def SymmetricKeys(self): # -> SymmetricKeyCollection
        """ Get: SymmetricKeys(self: Database) -> SymmetricKeyCollection """
        ...

    @property
    def Synonyms(self) -> SynonymCollection:
        """ Get: Synonyms(self: Database) -> SynonymCollection """
        ...

    @property
    def Tables(self) -> TableCollection:
        """ Get: Tables(self: Database) -> TableCollection """
        ...

    @property
    def TemporalHistoryRetentionEnabled(self) -> bool:
        """
        Get: TemporalHistoryRetentionEnabled(self: Database) -> bool
        Set: TemporalHistoryRetentionEnabled(self: Database) = value
        """
        ...

    @property
    def TransformNoiseWords(self) -> bool:
        """
        Get: TransformNoiseWords(self: Database) -> bool
        Set: TransformNoiseWords(self: Database) = value
        """
        ...

    @property
    def Triggers(self) -> DatabaseDdlTriggerCollection:
        """ Get: Triggers(self: Database) -> DatabaseDdlTriggerCollection """
        ...

    @property
    def TwoDigitYearCutoff(self) -> int:
        """
        Get: TwoDigitYearCutoff(self: Database) -> int
        Set: TwoDigitYearCutoff(self: Database) = value
        """
        ...

    @property
    def UserDefinedAggregates(self) -> UserDefinedAggregateCollection:
        """ Get: UserDefinedAggregates(self: Database) -> UserDefinedAggregateCollection """
        ...

    @property
    def UserDefinedDataTypes(self) -> UserDefinedDataTypeCollection:
        """ Get: UserDefinedDataTypes(self: Database) -> UserDefinedDataTypeCollection """
        ...

    @property
    def UserDefinedFunctions(self): # -> UserDefinedFunctionCollection
        """ Get: UserDefinedFunctions(self: Database) -> UserDefinedFunctionCollection """
        ...

    @property
    def UserDefinedTableTypes(self) -> UserDefinedTableTypeCollection:
        """ Get: UserDefinedTableTypes(self: Database) -> UserDefinedTableTypeCollection """
        ...

    @property
    def UserDefinedTypes(self): # -> UserDefinedTypeCollection
        """ Get: UserDefinedTypes(self: Database) -> UserDefinedTypeCollection """
        ...

    @property
    def UserName(self) -> str:
        """ Get: UserName(self: Database) -> str """
        ...

    @property
    def Users(self) -> UserCollection:
        """ Get: Users(self: Database) -> UserCollection """
        ...

    @property
    def Version(self) -> int:
        """ Get: Version(self: Database) -> int """
        ...

    @property
    def Views(self) -> ViewCollection:
        """ Get: Views(self: Database) -> ViewCollection """
        ...

    @property
    def XmlSchemaCollections(self): # -> XmlSchemaCollectionCollection
        """ Get: XmlSchemaCollections(self: Database) -> XmlSchemaCollectionCollection """
        ...


    def ChangeMirroringState(self, mirroringOption): # ->  # Not found arg types: {'mirroringOption': 'MirroringOption'}
        """ ChangeMirroringState(self: Database, mirroringOption: MirroringOption) """
        ...

    def CheckAllocations(self, repairType) -> StringCollection: # Not found arg types: {'repairType': 'RepairType'}
        """ CheckAllocations(self: Database, repairType: RepairType) -> StringCollection """
        ...

    def CheckAllocationsDataOnly(self) -> StringCollection:
        """ CheckAllocationsDataOnly(self: Database) -> StringCollection """
        ...

    def CheckCatalog(self) -> StringCollection:
        """ CheckCatalog(self: Database) -> StringCollection """
        ...

    def CheckIdentityValues(self): # -> 
        """ CheckIdentityValues(self: Database) """
        ...

    def Checkpoint(self): # -> 
        """ Checkpoint(self: Database) """
        ...

    def CheckTables(self, repairType, *__args) -> StringCollection: # Not found arg types: {'repairType': 'RepairType', '*__args': 'RepairStructure'}
        """
        CheckTables(self: Database, repairType: RepairType) -> StringCollection
        CheckTables(self: Database, repairType: RepairType, repairOptions: RepairOptions, repairStructure: RepairStructure, maxDOP: Nullable[Int64]) -> StringCollection
        CheckTables(self: Database, repairType: RepairType, repairStructure: RepairStructure) -> StringCollection
        CheckTables(self: Database, repairType: RepairType, repairOptions: RepairOptions) -> StringCollection
        """
        ...

    def CheckTablesDataOnly(self, *__args) -> StringCollection: # Not found arg types: {'*__args': 'RepairOptions'}
        """
        CheckTablesDataOnly(self: Database) -> StringCollection
        CheckTablesDataOnly(self: Database, repairOptions: RepairOptions) -> StringCollection
        CheckTablesDataOnly(self: Database, repairStructure: RepairStructure) -> StringCollection
        CheckTablesDataOnly(self: Database, repairOptions: RepairOptions, repairStructure: RepairStructure, maxDOP: Nullable[Int64]) -> StringCollection
        """
        ...

    def Deny(self, permission, *__args:Array): # ->  # Not found arg types: {'permission': 'DatabasePermissionSet'}
        """ Deny(self: Database, permission: DatabasePermissionSet, granteeNames: Array[str])Deny(self: Database, permission: DatabasePermissionSet, granteeNames: Array[str], cascade: bool)Deny(self: Database, permission: DatabasePermissionSet, granteeName: str)Deny(self: Database, permission: DatabasePermissionSet, granteeName: str, cascade: bool) """
        ...

    def DisableAllPlanGuides(self): # -> 
        """ DisableAllPlanGuides(self: Database) """
        ...

    def DropAllPlanGuides(self): # -> 
        """ DropAllPlanGuides(self: Database) """
        ...

    def DropBackupHistory(self): # -> 
        """ DropBackupHistory(self: Database) """
        ...

    def EnableAllPlanGuides(self): # -> 
        """ EnableAllPlanGuides(self: Database) """
        ...

    def EnumBackupSetFiles(self, backupSetID:int = ...) -> DataTable:
        """
        EnumBackupSetFiles(self: Database, backupSetID: int) -> DataTable
        EnumBackupSetFiles(self: Database) -> DataTable
        """
        ...

    def EnumBackupSets(self) -> DataTable:
        """ EnumBackupSets(self: Database) -> DataTable """
        ...

    def EnumCandidateKeys(self) -> DataTable:
        """ EnumCandidateKeys(self: Database) -> DataTable """
        ...

    def EnumDatabasePermissions(self, *__args:str) -> Array:
        """
        EnumDatabasePermissions(self: Database) -> Array[DatabasePermissionInfo]
        EnumDatabasePermissions(self: Database, granteeName: str) -> Array[DatabasePermissionInfo]
        EnumDatabasePermissions(self: Database, permissions: DatabasePermissionSet) -> Array[DatabasePermissionInfo]
        EnumDatabasePermissions(self: Database, granteeName: str, permissions: DatabasePermissionSet) -> Array[DatabasePermissionInfo]
        """
        ...

    def EnumLocks(self, processId:int = ...) -> DataTable:
        """
        EnumLocks(self: Database, processId: int) -> DataTable
        EnumLocks(self: Database) -> DataTable
        """
        ...

    def EnumLoginMappings(self) -> DataTable:
        """ EnumLoginMappings(self: Database) -> DataTable """
        ...

    def EnumMatchingSPs(self, description:str, includeSystem:bool = ...): # -> UrnCollection
        """
        EnumMatchingSPs(self: Database, description: str, includeSystem: bool) -> UrnCollection
        EnumMatchingSPs(self: Database, description: str) -> UrnCollection
        """
        ...

    def EnumObjectPermissions(self, *__args:str) -> Array:
        """
        EnumObjectPermissions(self: Database) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: Database, granteeName: str) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: Database, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: Database, granteeName: str, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        """
        ...

    def EnumObjects(self, types = ..., order:SortOrder = ...) -> DataTable: # Not found arg types: {'types': 'DatabaseObjectTypes'}
        """
        EnumObjects(self: Database, types: DatabaseObjectTypes, order: SortOrder) -> DataTable
        EnumObjects(self: Database) -> DataTable
        EnumObjects(self: Database, types: DatabaseObjectTypes) -> DataTable
        """
        ...

    def EnumTransactions(self, transactionType = ...) -> DataTable: # Not found arg types: {'transactionType': 'TransactionTypes'}
        """
        EnumTransactions(self: Database) -> DataTable
        EnumTransactions(self: Database, transactionType: TransactionTypes) -> DataTable
        """
        ...

    def EnumWindowsGroups(self, groupName:str = ...) -> DataTable:
        """
        EnumWindowsGroups(self: Database) -> DataTable
        EnumWindowsGroups(self: Database, groupName: str) -> DataTable
        """
        ...

    def ExecuteWithResults(self, *__args:StringCollection): # -> DataSet
        """
        ExecuteWithResults(self: Database, sqlCommands: StringCollection) -> DataSet
        ExecuteWithResults(self: Database, sqlCommand: str) -> DataSet
        """
        ...

    def GetRemoteDataArchiveMigrationStatusReports(self, migrationStartTime:DateTime, statusReportCount:int, tableName:str) -> IEnumerable:
        """ GetRemoteDataArchiveMigrationStatusReports(self: Database, migrationStartTime: DateTime, statusReportCount: int, tableName: str) -> IEnumerable[RemoteDataArchiveMigrationStatusReport] """
        ...

    def GetRemoteDatabaseMigrationStatistics(self): # -> RemoteDatabaseMigrationStatistics
        """ GetRemoteDatabaseMigrationStatistics(self: Database) -> RemoteDatabaseMigrationStatistics """
        ...

    def GetTransactionCount(self, transactionType = ...) -> int: # Not found arg types: {'transactionType': 'TransactionTypes'}
        """
        GetTransactionCount(self: Database) -> int
        GetTransactionCount(self: Database, transactionType: TransactionTypes) -> int
        """
        ...

    def Grant(self, permission, *__args:Array): # ->  # Not found arg types: {'permission': 'DatabasePermissionSet'}
        """ Grant(self: Database, permission: DatabasePermissionSet, granteeNames: Array[str])Grant(self: Database, permission: DatabasePermissionSet, granteeNames: Array[str], grantGrant: bool)Grant(self: Database, permission: DatabasePermissionSet, granteeNames: Array[str], grantGrant: bool, asRole: str)Grant(self: Database, permission: DatabasePermissionSet, granteeName: str)Grant(self: Database, permission: DatabasePermissionSet, granteeName: str, grantGrant: bool)Grant(self: Database, permission: DatabasePermissionSet, granteeName: str, grantGrant: bool, asRole: str) """
        ...

    def IsMember(self, groupOrRole:str) -> bool:
        """ IsMember(self: Database, groupOrRole: str) -> bool """
        ...

    def PrefetchObjects(self, objectType:Type = ..., scriptingOptions = ...): # ->  # Not found arg types: {'scriptingOptions': 'ScriptingOptions'}
        """ PrefetchObjects(self: Database)PrefetchObjects(self: Database, objectType: Type)PrefetchObjects(self: Database, objectType: Type, scriptingOptions: ScriptingOptions) """
        ...

    def ReauthorizeRemoteDataArchiveConnection(self, credentialName:str, withCopy:bool): # -> 
        """ ReauthorizeRemoteDataArchiveConnection(self: Database, credentialName: str, withCopy: bool) """
        ...

    def RecalculateSpaceUsage(self): # -> 
        """ RecalculateSpaceUsage(self: Database) """
        ...

    def RemoveFullTextCatalogs(self): # -> 
        """ RemoveFullTextCatalogs(self: Database) """
        ...

    def Rename(self, newName:str): # -> 
        """ Rename(self: Database, newName: str) """
        ...

    def Revoke(self, permission, *__args:Array): # ->  # Not found arg types: {'permission': 'DatabasePermissionSet'}
        """ Revoke(self: Database, permission: DatabasePermissionSet, granteeNames: Array[str])Revoke(self: Database, permission: DatabasePermissionSet, granteeNames: Array[str], revokeGrant: bool, cascade: bool)Revoke(self: Database, permission: DatabasePermissionSet, granteeNames: Array[str], revokeGrant: bool, cascade: bool, asRole: str)Revoke(self: Database, permission: DatabasePermissionSet, granteeName: str)Revoke(self: Database, permission: DatabasePermissionSet, granteeName: str, revokeGrant: bool, cascade: bool)Revoke(self: Database, permission: DatabasePermissionSet, granteeName: str, revokeGrant: bool, cascade: bool, asRole: str) """
        ...

    def SetDefaultFileGroup(self, fileGroupName:str): # -> 
        """ SetDefaultFileGroup(self: Database, fileGroupName: str) """
        ...

    def SetDefaultFileStreamFileGroup(self, fileGroupName:str): # -> 
        """ SetDefaultFileStreamFileGroup(self: Database, fileGroupName: str) """
        ...

    def SetDefaultFullTextCatalog(self, catalog:str): # -> 
        """ SetDefaultFullTextCatalog(self: Database, catalog: str) """
        ...

    def SetOffline(self): # -> 
        """ SetOffline(self: Database) """
        ...

    def SetOnline(self): # -> 
        """ SetOnline(self: Database) """
        ...

    def SetOwner(self, loginName:str, overrideIfAlreadyUser:bool = ...): # -> 
        """ SetOwner(self: Database, loginName: str)SetOwner(self: Database, loginName: str, overrideIfAlreadyUser: bool) """
        ...

    def SetSnapshotIsolation(self, enabled:bool): # -> 
        """ SetSnapshotIsolation(self: Database, enabled: bool) """
        ...

    def Shrink(self, percentFreeSpace:int, shrinkMethod): # ->  # Not found arg types: {'shrinkMethod': 'ShrinkMethod'}
        """ Shrink(self: Database, percentFreeSpace: int, shrinkMethod: ShrinkMethod) """
        ...

    def TruncateLog(self): # -> 
        """ TruncateLog(self: Database) """
        ...

    def UpdateIndexStatistics(self): # -> 
        """ UpdateIndexStatistics(self: Database) """
        ...

    def ValidateAllPlanGuides(self, errorInfo=None) -> bool:
        """
        ValidateAllPlanGuides(self: Database) -> bool
        ValidateAllPlanGuides(self: Database) -> (bool, DataTable)
        """
        ...

    def __new__(cls, server = ..., name:str = ..., edition:DatabaseEngineEdition = ...) -> Self: # Not found arg types: {'server': 'Server'}
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        __new__(cls: type, server: Server, name: str, edition: DatabaseEngineEdition)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseActiveDirectory(SqlSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Alias(self) -> str:
        """
        Get: Alias(self: DatabaseActiveDirectory) -> str
        Set: Alias(self: DatabaseActiveDirectory) = value
        """
        ...

    @property
    def Contact(self) -> str:
        """
        Get: Contact(self: DatabaseActiveDirectory) -> str
        Set: Contact(self: DatabaseActiveDirectory) = value
        """
        ...

    @property
    def Description(self) -> str:
        """
        Get: Description(self: DatabaseActiveDirectory) -> str
        Set: Description(self: DatabaseActiveDirectory) = value
        """
        ...

    @property
    def InformationUrl(self) -> str:
        """
        Get: InformationUrl(self: DatabaseActiveDirectory) -> str
        Set: InformationUrl(self: DatabaseActiveDirectory) = value
        """
        ...

    @property
    def IsRegistered(self) -> bool:
        """ Get: IsRegistered(self: DatabaseActiveDirectory) -> bool """
        ...

    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: DatabaseActiveDirectory) -> Database """
        ...


    def Register(self): # -> 
        """ Register(self: DatabaseActiveDirectory) """
        ...

    def Unregister(self): # -> 
        """ Unregister(self: DatabaseActiveDirectory) """
        ...

    def UpdateRegistration(self): # -> 
        """ UpdateRegistration(self: DatabaseActiveDirectory) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseAdapterBase(IAlterable, IRefreshable): # skipped bases: <type 'object'>
    """ DatabaseAdapterBase(obj: Database) """
    @property
    def AutoClose(self) -> bool:
        """
        Get: AutoClose(self: DatabaseAdapterBase) -> bool
        Set: AutoClose(self: DatabaseAdapterBase) = value
        """
        ...

    @property
    def AutoShrink(self) -> bool:
        """
        Get: AutoShrink(self: DatabaseAdapterBase) -> bool
        Set: AutoShrink(self: DatabaseAdapterBase) = value
        """
        ...

    @property
    def Database(self):
        ...

    @property
    def DelayedDurability(self): # -> DelayedDurability
        """
        Get: DelayedDurability(self: DatabaseAdapterBase) -> DelayedDurability
        Set: DelayedDurability(self: DatabaseAdapterBase) = value
        """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: DatabaseAdapterBase) -> bool """
        ...

    @property
    def LastBackupDate(self) -> DateTime:
        """ Get: LastBackupDate(self: DatabaseAdapterBase) -> DateTime """
        ...

    @property
    def LastLogBackupDate(self) -> DateTime:
        """ Get: LastLogBackupDate(self: DatabaseAdapterBase) -> DateTime """
        ...

    @property
    def PageVerify(self): # -> PageVerify
        """
        Get: PageVerify(self: DatabaseAdapterBase) -> PageVerify
        Set: PageVerify(self: DatabaseAdapterBase) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: DatabaseAdapterBase) -> bool
        Set: ReadOnly(self: DatabaseAdapterBase) = value
        """
        ...

    @property
    def RecoveryModel(self): # -> RecoveryModel
        """
        Get: RecoveryModel(self: DatabaseAdapterBase) -> RecoveryModel
        Set: RecoveryModel(self: DatabaseAdapterBase) = value
        """
        ...

    @property
    def Size(self) -> float:
        """ Get: Size(self: DatabaseAdapterBase) -> float """
        ...

    @property
    def Status(self): # -> DatabaseStatus
        """ Get: Status(self: DatabaseAdapterBase) -> DatabaseStatus """
        ...

    @property
    def TargetRecoveryTime(self) -> int:
        """
        Get: TargetRecoveryTime(self: DatabaseAdapterBase) -> int
        Set: TargetRecoveryTime(self: DatabaseAdapterBase) = value
        """
        ...

    @property
    def Trustworthy(self) -> bool:
        """
        Get: Trustworthy(self: DatabaseAdapterBase) -> bool
        Set: Trustworthy(self: DatabaseAdapterBase) = value
        """
        ...


    def DataFileVolumeNotIn(self, *args): #cannot find CLR method
        """ DataFileVolumeNotIn(self: DatabaseAdapterBase, checkVolumes: List[str]) -> bool """
        ...

    def GetVolume(self, file:str) -> str:
        """ GetVolume(self: DatabaseAdapterBase, file: str) -> str """
        ...


class DatabaseAdapter(DatabaseAdapterBase, IDmfAdapter, IDmfFacet): # skipped bases: <type 'IAlterable'>, <type 'IRefreshable'>, <type 'object'>
    """ DatabaseAdapter(obj: Database) """
    pass

class DatabaseAuditSpecification(ISfcSupportsDesignMode, AuditSpecification): # skipped bases: <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IScriptable'>, <type 'ISqlSmoObjectInitialize'>, <type 'IDroppable'>, <type 'ICreatable'>, <type 'IAlienObject'>, <type 'IAlterable'>, <type 'IDropIfExists'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'object'>
    """
    DatabaseAuditSpecification()
    DatabaseAuditSpecification(database: Database, name: str)
    """
    @property
    def AuditName(self) -> str:
        """
        Get: AuditName(self: DatabaseAuditSpecification) -> str
        Set: AuditName(self: DatabaseAuditSpecification) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: DatabaseAuditSpecification) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: DatabaseAuditSpecification) -> DateTime """
        ...

    @property
    def Enabled(self) -> bool:
        """ Get: Enabled(self: DatabaseAuditSpecification) -> bool """
        ...

    @property
    def Guid(self) -> Guid:
        """ Get: Guid(self: DatabaseAuditSpecification) -> Guid """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: DatabaseAuditSpecification) -> int """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: DatabaseAuditSpecification) -> Database
        Set: Parent(self: DatabaseAuditSpecification) = value
        """
        ...


    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseAuditSpecificationCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: DatabaseAuditSpecificationCollection) -> Database """
        ...


    def Add(self, databaseAuditSpecification:DatabaseAuditSpecification): # -> 
        """ Add(self: DatabaseAuditSpecificationCollection, databaseAuditSpecification: DatabaseAuditSpecification) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: DatabaseAuditSpecificationCollection, array: Array[DatabaseAuditSpecification], index: int) """
        ...

    def ItemById(self, id:int) -> DatabaseAuditSpecification:
        """ ItemById(self: DatabaseAuditSpecificationCollection, id: int) -> DatabaseAuditSpecification """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class DatabaseAuditSpecificationExtender(SmoObjectExtender, ISfcValidate): # skipped bases: <type 'INotifyPropertyChanged'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcPropertyProvider'>, <type 'object'>
    """
    DatabaseAuditSpecificationExtender()
    DatabaseAuditSpecificationExtender(databaseAuditSpecification: DatabaseAuditSpecification)
    """
    @property
    def Audits(self) -> StringCollection:
        """ Get: Audits(self: DatabaseAuditSpecificationExtender) -> StringCollection """
        ...

    @property
    def AuditSpecificationDetails(self) -> DataTable:
        """
        Get: AuditSpecificationDetails(self: DatabaseAuditSpecificationExtender) -> DataTable
        Set: AuditSpecificationDetails(self: DatabaseAuditSpecificationExtender) = value
        """
        ...

    @property
    def ConnectionContext(self) -> ServerConnection:
        """ Get: ConnectionContext(self: DatabaseAuditSpecificationExtender) -> ServerConnection """
        ...

    @property
    def DatabaseName(self) -> str:
        """ Get: DatabaseName(self: DatabaseAuditSpecificationExtender) -> str """
        ...

    @property
    def GridValidationState(self) -> ValidationState:
        """
        Get: GridValidationState(self: DatabaseAuditSpecificationExtender) -> ValidationState
        Set: GridValidationState(self: DatabaseAuditSpecificationExtender) = value
        """
        ...

    @property
    def State(self): # -> SqlSmoState
        """ Get: State(self: DatabaseAuditSpecificationExtender) -> SqlSmoState """
        ...

    @property
    def Type(self) -> str:
        """ Get: Type(self: DatabaseAuditSpecificationExtender) -> str """
        ...



class DatabaseCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: DatabaseCollection) -> Server """
        ...


    def Add(self, database:Database): # -> 
        """ Add(self: DatabaseCollection, database: Database) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: DatabaseCollection, array: Array[Database], index: int) """
        ...

    def ItemById(self, id:int) -> Database:
        """ ItemById(self: DatabaseCollection, id: int) -> Database """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ITextObject: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def TextBody(self) -> str:
        """
        Get: TextBody(self: ITextObject) -> str
        Set: TextBody(self: ITextObject) = value
        """
        ...

    @property
    def TextHeader(self) -> str:
        """
        Get: TextHeader(self: ITextObject) -> str
        Set: TextHeader(self: ITextObject) = value
        """
        ...

    @property
    def TextMode(self) -> bool:
        """
        Get: TextMode(self: ITextObject) -> bool
        Set: TextMode(self: ITextObject) = value
        """
        ...


    def ScriptHeader(self, *__args:bool) -> str:
        """
        ScriptHeader(self: ITextObject, forAlter: bool) -> str
        ScriptHeader(self: ITextObject, scriptHeaderType: ScriptHeaderType) -> str
        """
        ...


class DdlTriggerBase(IDroppable, IAlterable, ICreatable, IScriptable, ICreateOrAlterable, ScriptNameObjectBase, ITextObject, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    def IsEventSetDirty(self, *args): #cannot find CLR method
        """ IsEventSetDirty(self: DdlTriggerBase) -> bool """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseDdlTrigger(ISfcSupportsDesignMode, DdlTriggerBase, IExtendedProperties): # skipped bases: <type 'ICreateOrAlterable'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IScriptable'>, <type 'ISqlSmoObjectInitialize'>, <type 'IDroppable'>, <type 'ICreatable'>, <type 'IAlienObject'>, <type 'IAlterable'>, <type 'IDropIfExists'>, <type 'ITextObject'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'object'>
    """
    DatabaseDdlTrigger()
    DatabaseDdlTrigger(database: Database, name: str)
    DatabaseDdlTrigger(parent: Database, name: str, events: DatabaseDdlTriggerEventSet, textBody: str)
    DatabaseDdlTrigger(parent: Database, name: str, events: DatabaseDdlTriggerEventSet, assemblyName: str, className: str, method: str)
    """
    @property
    def AnsiNullsStatus(self) -> bool:
        """
        Get: AnsiNullsStatus(self: DatabaseDdlTrigger) -> bool
        Set: AnsiNullsStatus(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def AssemblyName(self) -> str:
        """
        Get: AssemblyName(self: DatabaseDdlTrigger) -> str
        Set: AssemblyName(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def BodyStartIndex(self) -> int:
        """ Get: BodyStartIndex(self: DatabaseDdlTrigger) -> int """
        ...

    @property
    def ClassName(self) -> str:
        """
        Get: ClassName(self: DatabaseDdlTrigger) -> str
        Set: ClassName(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: DatabaseDdlTrigger) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: DatabaseDdlTrigger) -> DateTime """
        ...

    @property
    def DdlTriggerEvents(self): # -> DatabaseDdlTriggerEventSet
        """
        Get: DdlTriggerEvents(self: DatabaseDdlTrigger) -> DatabaseDdlTriggerEventSet
        Set: DdlTriggerEvents(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def ExecutionContext(self): # -> DatabaseDdlTriggerExecutionContext
        """
        Get: ExecutionContext(self: DatabaseDdlTrigger) -> DatabaseDdlTriggerExecutionContext
        Set: ExecutionContext(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def ExecutionContextUser(self) -> str:
        """
        Get: ExecutionContextUser(self: DatabaseDdlTrigger) -> str
        Set: ExecutionContextUser(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: DatabaseDdlTrigger) -> int """
        ...

    @property
    def ImplementationType(self): # -> ImplementationType
        """
        Get: ImplementationType(self: DatabaseDdlTrigger) -> ImplementationType
        Set: ImplementationType(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def IsEnabled(self) -> bool:
        """
        Get: IsEnabled(self: DatabaseDdlTrigger) -> bool
        Set: IsEnabled(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def IsEncrypted(self) -> bool:
        """
        Get: IsEncrypted(self: DatabaseDdlTrigger) -> bool
        Set: IsEncrypted(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: DatabaseDdlTrigger) -> bool """
        ...

    @property
    def MethodName(self) -> str:
        """
        Get: MethodName(self: DatabaseDdlTrigger) -> str
        Set: MethodName(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: DatabaseDdlTrigger) -> str
        Set: Name(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def NotForReplication(self) -> bool:
        """
        Get: NotForReplication(self: DatabaseDdlTrigger) -> bool
        Set: NotForReplication(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: DatabaseDdlTrigger) -> Database
        Set: Parent(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def QuotedIdentifierStatus(self) -> bool:
        """
        Get: QuotedIdentifierStatus(self: DatabaseDdlTrigger) -> bool
        Set: QuotedIdentifierStatus(self: DatabaseDdlTrigger) = value
        """
        ...

    @property
    def Text(self) -> str:
        """ Get: Text(self: DatabaseDdlTrigger) -> str """
        ...


    def __new__(cls, *__args) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, parent: Database, name: str, events: DatabaseDdlTriggerEventSet, textBody: str)
        __new__(cls: type, parent: Database, name: str, events: DatabaseDdlTriggerEventSet, assemblyName: str, className: str, method: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseDdlTriggerCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: DatabaseDdlTriggerCollection) -> Database """
        ...


    def Add(self, databaseDdlTrigger:DatabaseDdlTrigger): # -> 
        """ Add(self: DatabaseDdlTriggerCollection, databaseDdlTrigger: DatabaseDdlTrigger) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: DatabaseDdlTriggerCollection, array: Array[DatabaseDdlTrigger], index: int) """
        ...

    def ItemById(self, id:int) -> DatabaseDdlTrigger:
        """ ItemById(self: DatabaseDdlTriggerCollection, id: int) -> DatabaseDdlTrigger """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class DatabaseDdlTriggerEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AddRoleMember(self) -> DatabaseDdlTriggerEvent:
        """ Get: AddRoleMember() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AddSignature(self) -> DatabaseDdlTriggerEvent:
        """ Get: AddSignature() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AddSignatureSchemaObject(self) -> DatabaseDdlTriggerEvent:
        """ Get: AddSignatureSchemaObject() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterApplicationRole(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterApplicationRole() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterAssembly(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterAssembly() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterAsymmetricKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterAsymmetricKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterAudit(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterAudit() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterAuthorizationDatabase(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterAuthorizationDatabase() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterBrokerPriority(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterBrokerPriority() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterCertificate(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterCertificate() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterColumnEncryptionKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterColumnEncryptionKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterDatabaseAuditSpecification(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterDatabaseAuditSpecification() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterDatabaseEncryptionKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterDatabaseEncryptionKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterExtendedProperty(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterExtendedProperty() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterFulltextCatalog(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterFulltextCatalog() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterFulltextIndex(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterFulltextIndex() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterFulltextStoplist(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterFulltextStoplist() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterFunction(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterFunction() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterIndex(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterIndex() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterMasterKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterMasterKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterMessageType(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterMessageType() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterPartitionFunction(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterPartitionFunction() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterPartitionScheme(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterPartitionScheme() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterPlanGuide(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterPlanGuide() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterProcedure(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterProcedure() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterQueue(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterQueue() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterRemoteServiceBinding(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterRemoteServiceBinding() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterRole(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterRole() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterRoute(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterRoute() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterSchema(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterSchema() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterSearchPropertyList(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterSearchPropertyList() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterSecurityPolicy(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterSecurityPolicy() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterSequence(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterSequence() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterService(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterService() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterSymmetricKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterSymmetricKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterTable(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterTable() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterTrigger(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterTrigger() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterUser(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterUser() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterView(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterView() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def AlterXmlSchemaCollection(self) -> DatabaseDdlTriggerEvent:
        """ Get: AlterXmlSchemaCollection() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def BindDefault(self) -> DatabaseDdlTriggerEvent:
        """ Get: BindDefault() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def BindRule(self) -> DatabaseDdlTriggerEvent:
        """ Get: BindRule() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateApplicationRole(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateApplicationRole() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateAssembly(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateAssembly() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateAsymmetricKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateAsymmetricKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateAudit(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateAudit() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateBrokerPriority(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateBrokerPriority() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateCertificate(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateCertificate() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateColumnEncryptionKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateColumnEncryptionKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateColumnMasterKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateColumnMasterKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateContract(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateContract() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateDatabaseAuditSpecification(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateDatabaseAuditSpecification() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateDatabaseEncryptionKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateDatabaseEncryptionKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateDefault(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateDefault() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateEventNotification(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateEventNotification() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateExtendedProperty(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateExtendedProperty() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateFulltextCatalog(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateFulltextCatalog() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateFulltextIndex(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateFulltextIndex() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateFulltextStoplist(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateFulltextStoplist() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateFunction(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateFunction() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateIndex(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateIndex() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateMasterKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateMasterKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateMessageType(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateMessageType() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreatePartitionFunction(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreatePartitionFunction() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreatePartitionScheme(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreatePartitionScheme() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreatePlanGuide(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreatePlanGuide() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateProcedure(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateProcedure() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateQueue(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateQueue() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateRemoteServiceBinding(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateRemoteServiceBinding() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateRole(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateRole() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateRoute(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateRoute() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateRule(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateRule() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateSchema(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateSchema() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateSearchPropertyList(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateSearchPropertyList() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateSecurityPolicy(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateSecurityPolicy() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateSequence(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateSequence() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateService(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateService() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateSpatialIndex(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateSpatialIndex() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateStatistics(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateStatistics() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateSymmetricKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateSymmetricKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateSynonym(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateSynonym() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateTable(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateTable() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateTrigger(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateTrigger() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateType(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateType() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateUser(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateUser() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateView(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateView() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateXmlIndex(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateXmlIndex() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def CreateXmlSchemaCollection(self) -> DatabaseDdlTriggerEvent:
        """ Get: CreateXmlSchemaCollection() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DenyDatabase(self) -> DatabaseDdlTriggerEvent:
        """ Get: DenyDatabase() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropApplicationRole(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropApplicationRole() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropAssembly(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropAssembly() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropAsymmetricKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropAsymmetricKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropAudit(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropAudit() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropBrokerPriority(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropBrokerPriority() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropCertificate(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropCertificate() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropColumnEncryptionKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropColumnEncryptionKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropColumnMasterKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropColumnMasterKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropContract(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropContract() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropDatabaseAuditSpecification(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropDatabaseAuditSpecification() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropDatabaseEncryptionKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropDatabaseEncryptionKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropDefault(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropDefault() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropEventNotification(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropEventNotification() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropExtendedProperty(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropExtendedProperty() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropFulltextCatalog(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropFulltextCatalog() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropFulltextIndex(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropFulltextIndex() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropFulltextStoplist(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropFulltextStoplist() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropFunction(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropFunction() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropIndex(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropIndex() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropMasterKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropMasterKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropMessageType(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropMessageType() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropPartitionFunction(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropPartitionFunction() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropPartitionScheme(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropPartitionScheme() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropPlanGuide(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropPlanGuide() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropProcedure(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropProcedure() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropQueue(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropQueue() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropRemoteServiceBinding(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropRemoteServiceBinding() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropRole(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropRole() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropRoleMember(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropRoleMember() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropRoute(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropRoute() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropRule(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropRule() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropSchema(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropSchema() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropSearchPropertyList(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropSearchPropertyList() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropSecurityPolicy(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropSecurityPolicy() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropSequence(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropSequence() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropService(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropService() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropSignature(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropSignature() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropSignatureSchemaObject(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropSignatureSchemaObject() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropStatistics(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropStatistics() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropSymmetricKey(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropSymmetricKey() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropSynonym(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropSynonym() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropTable(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropTable() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropTrigger(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropTrigger() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropType(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropType() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropUser(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropUser() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropView(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropView() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def DropXmlSchemaCollection(self) -> DatabaseDdlTriggerEvent:
        """ Get: DropXmlSchemaCollection() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def GrantDatabase(self) -> DatabaseDdlTriggerEvent:
        """ Get: GrantDatabase() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def Rename(self) -> DatabaseDdlTriggerEvent:
        """ Get: Rename() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def RevokeDatabase(self) -> DatabaseDdlTriggerEvent:
        """ Get: RevokeDatabase() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def UnbindDefault(self) -> DatabaseDdlTriggerEvent:
        """ Get: UnbindDefault() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def UnbindRule(self) -> DatabaseDdlTriggerEvent:
        """ Get: UnbindRule() -> DatabaseDdlTriggerEvent """
        ...

    @property
    def UpdateStatistics(self) -> DatabaseDdlTriggerEvent:
        """ Get: UpdateStatistics() -> DatabaseDdlTriggerEvent """
        ...


    @staticmethod
    def Add(eventLeft:DatabaseDdlTriggerEvent, eventRight:DatabaseDdlTriggerEvent): # -> DatabaseDdlTriggerEventSet
        """ Add(eventLeft: DatabaseDdlTriggerEvent, eventRight: DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:DatabaseDdlTriggerEvent, eventRight:DatabaseDdlTriggerEvent): # -> DatabaseDdlTriggerEventSet
        """ BitwiseOr(eventLeft: DatabaseDdlTriggerEvent, eventRight: DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: DatabaseDdlTriggerEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: DatabaseDdlTriggerEvent, eventRight: DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: DatabaseDdlTriggerEvent, eventRight: DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: DatabaseDdlTriggerEvent, eventRight: DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet """
        ...



class EventSetBase: # skipped bases: <type 'object'>, <type 'object'>
    """
    EventSetBase()
    EventSetBase(eventSetBase: EventSetBase)
    """
    @property
    def NumberOfElements(self) -> int:
        """ Get: NumberOfElements(self: EventSetBase) -> int """
        ...

    @property
    def Storage(self):
        ...


    def Copy(self) -> EventSetBase:
        """ Copy(self: EventSetBase) -> EventSetBase """
        ...

    def FitsMask(self, *args): #cannot find CLR method
        """ FitsMask(self: EventSetBase, mask: EventSetBase) -> bool """
        ...

    def HasCommonBits(self, *args): #cannot find CLR method
        """ HasCommonBits(self: EventSetBase, optionsCompare: EventSetBase) -> bool """
        ...

    def SetValue(self, *args): #cannot find CLR method
        """ SetValue(self: EventSetBase, options: EventSetBase, value: bool) """
        ...


class DatabaseDdlTriggerEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    DatabaseDdlTriggerEventSet()
    DatabaseDdlTriggerEventSet(eventSet: DatabaseDdlTriggerEventSet)
    DatabaseDdlTriggerEventSet(anEvent: DatabaseDdlTriggerEvent)
    DatabaseDdlTriggerEventSet(*events: Array[DatabaseDdlTriggerEvent])
    """
    @property
    def AddRoleMember(self) -> bool:
        """
        Get: AddRoleMember(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AddRoleMember(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AddSignature(self) -> bool:
        """
        Get: AddSignature(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AddSignature(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AddSignatureSchemaObject(self) -> bool:
        """
        Get: AddSignatureSchemaObject(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AddSignatureSchemaObject(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterApplicationRole(self) -> bool:
        """
        Get: AlterApplicationRole(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterApplicationRole(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterAssembly(self) -> bool:
        """
        Get: AlterAssembly(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterAssembly(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterAsymmetricKey(self) -> bool:
        """
        Get: AlterAsymmetricKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterAsymmetricKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterAudit(self) -> bool:
        """
        Get: AlterAudit(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterAudit(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterAuthorizationDatabase(self) -> bool:
        """
        Get: AlterAuthorizationDatabase(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterAuthorizationDatabase(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterBrokerPriority(self) -> bool:
        """
        Get: AlterBrokerPriority(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterBrokerPriority(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterCertificate(self) -> bool:
        """
        Get: AlterCertificate(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterCertificate(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterColumnEncryptionKey(self) -> bool:
        """
        Get: AlterColumnEncryptionKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterColumnEncryptionKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterDatabaseAuditSpecification(self) -> bool:
        """
        Get: AlterDatabaseAuditSpecification(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterDatabaseAuditSpecification(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterDatabaseEncryptionKey(self) -> bool:
        """
        Get: AlterDatabaseEncryptionKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterDatabaseEncryptionKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterExtendedProperty(self) -> bool:
        """
        Get: AlterExtendedProperty(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterExtendedProperty(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterFulltextCatalog(self) -> bool:
        """
        Get: AlterFulltextCatalog(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterFulltextCatalog(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterFulltextIndex(self) -> bool:
        """
        Get: AlterFulltextIndex(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterFulltextIndex(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterFulltextStoplist(self) -> bool:
        """
        Get: AlterFulltextStoplist(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterFulltextStoplist(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterFunction(self) -> bool:
        """
        Get: AlterFunction(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterFunction(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterIndex(self) -> bool:
        """
        Get: AlterIndex(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterIndex(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterMasterKey(self) -> bool:
        """
        Get: AlterMasterKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterMasterKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterMessageType(self) -> bool:
        """
        Get: AlterMessageType(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterMessageType(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterPartitionFunction(self) -> bool:
        """
        Get: AlterPartitionFunction(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterPartitionFunction(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterPartitionScheme(self) -> bool:
        """
        Get: AlterPartitionScheme(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterPartitionScheme(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterPlanGuide(self) -> bool:
        """
        Get: AlterPlanGuide(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterPlanGuide(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterProcedure(self) -> bool:
        """
        Get: AlterProcedure(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterProcedure(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterQueue(self) -> bool:
        """
        Get: AlterQueue(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterQueue(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterRemoteServiceBinding(self) -> bool:
        """
        Get: AlterRemoteServiceBinding(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterRemoteServiceBinding(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterRole(self) -> bool:
        """
        Get: AlterRole(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterRole(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterRoute(self) -> bool:
        """
        Get: AlterRoute(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterRoute(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterSchema(self) -> bool:
        """
        Get: AlterSchema(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterSchema(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterSearchPropertyList(self) -> bool:
        """
        Get: AlterSearchPropertyList(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterSearchPropertyList(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterSecurityPolicy(self) -> bool:
        """
        Get: AlterSecurityPolicy(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterSecurityPolicy(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterSequence(self) -> bool:
        """
        Get: AlterSequence(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterSequence(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterService(self) -> bool:
        """
        Get: AlterService(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterService(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterSymmetricKey(self) -> bool:
        """
        Get: AlterSymmetricKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterSymmetricKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterTable(self) -> bool:
        """
        Get: AlterTable(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterTable(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterTrigger(self) -> bool:
        """
        Get: AlterTrigger(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterTrigger(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterUser(self) -> bool:
        """
        Get: AlterUser(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterUser(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterView(self) -> bool:
        """
        Get: AlterView(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterView(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterXmlSchemaCollection(self) -> bool:
        """
        Get: AlterXmlSchemaCollection(self: DatabaseDdlTriggerEventSet) -> bool
        Set: AlterXmlSchemaCollection(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def BindDefault(self) -> bool:
        """
        Get: BindDefault(self: DatabaseDdlTriggerEventSet) -> bool
        Set: BindDefault(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def BindRule(self) -> bool:
        """
        Get: BindRule(self: DatabaseDdlTriggerEventSet) -> bool
        Set: BindRule(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateApplicationRole(self) -> bool:
        """
        Get: CreateApplicationRole(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateApplicationRole(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateAssembly(self) -> bool:
        """
        Get: CreateAssembly(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateAssembly(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateAsymmetricKey(self) -> bool:
        """
        Get: CreateAsymmetricKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateAsymmetricKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateAudit(self) -> bool:
        """
        Get: CreateAudit(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateAudit(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateBrokerPriority(self) -> bool:
        """
        Get: CreateBrokerPriority(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateBrokerPriority(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateCertificate(self) -> bool:
        """
        Get: CreateCertificate(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateCertificate(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateColumnEncryptionKey(self) -> bool:
        """
        Get: CreateColumnEncryptionKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateColumnEncryptionKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateColumnMasterKey(self) -> bool:
        """
        Get: CreateColumnMasterKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateColumnMasterKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateContract(self) -> bool:
        """
        Get: CreateContract(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateContract(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateDatabaseAuditSpecification(self) -> bool:
        """
        Get: CreateDatabaseAuditSpecification(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateDatabaseAuditSpecification(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateDatabaseEncryptionKey(self) -> bool:
        """
        Get: CreateDatabaseEncryptionKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateDatabaseEncryptionKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateDefault(self) -> bool:
        """
        Get: CreateDefault(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateDefault(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateEventNotification(self) -> bool:
        """
        Get: CreateEventNotification(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateEventNotification(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateExtendedProperty(self) -> bool:
        """
        Get: CreateExtendedProperty(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateExtendedProperty(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateFulltextCatalog(self) -> bool:
        """
        Get: CreateFulltextCatalog(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateFulltextCatalog(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateFulltextIndex(self) -> bool:
        """
        Get: CreateFulltextIndex(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateFulltextIndex(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateFulltextStoplist(self) -> bool:
        """
        Get: CreateFulltextStoplist(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateFulltextStoplist(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateFunction(self) -> bool:
        """
        Get: CreateFunction(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateFunction(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateIndex(self) -> bool:
        """
        Get: CreateIndex(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateIndex(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateMasterKey(self) -> bool:
        """
        Get: CreateMasterKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateMasterKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateMessageType(self) -> bool:
        """
        Get: CreateMessageType(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateMessageType(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreatePartitionFunction(self) -> bool:
        """
        Get: CreatePartitionFunction(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreatePartitionFunction(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreatePartitionScheme(self) -> bool:
        """
        Get: CreatePartitionScheme(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreatePartitionScheme(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreatePlanGuide(self) -> bool:
        """
        Get: CreatePlanGuide(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreatePlanGuide(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateProcedure(self) -> bool:
        """
        Get: CreateProcedure(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateProcedure(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateQueue(self) -> bool:
        """
        Get: CreateQueue(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateQueue(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateRemoteServiceBinding(self) -> bool:
        """
        Get: CreateRemoteServiceBinding(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateRemoteServiceBinding(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateRole(self) -> bool:
        """
        Get: CreateRole(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateRole(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateRoute(self) -> bool:
        """
        Get: CreateRoute(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateRoute(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateRule(self) -> bool:
        """
        Get: CreateRule(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateRule(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSchema(self) -> bool:
        """
        Get: CreateSchema(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateSchema(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSearchPropertyList(self) -> bool:
        """
        Get: CreateSearchPropertyList(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateSearchPropertyList(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSecurityPolicy(self) -> bool:
        """
        Get: CreateSecurityPolicy(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateSecurityPolicy(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSequence(self) -> bool:
        """
        Get: CreateSequence(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateSequence(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateService(self) -> bool:
        """
        Get: CreateService(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateService(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSpatialIndex(self) -> bool:
        """
        Get: CreateSpatialIndex(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateSpatialIndex(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateStatistics(self) -> bool:
        """
        Get: CreateStatistics(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateStatistics(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSymmetricKey(self) -> bool:
        """
        Get: CreateSymmetricKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateSymmetricKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSynonym(self) -> bool:
        """
        Get: CreateSynonym(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateSynonym(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateTable(self) -> bool:
        """
        Get: CreateTable(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateTable(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateTrigger(self) -> bool:
        """
        Get: CreateTrigger(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateTrigger(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateType(self) -> bool:
        """
        Get: CreateType(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateType(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateUser(self) -> bool:
        """
        Get: CreateUser(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateUser(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateView(self) -> bool:
        """
        Get: CreateView(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateView(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateXmlIndex(self) -> bool:
        """
        Get: CreateXmlIndex(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateXmlIndex(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateXmlSchemaCollection(self) -> bool:
        """
        Get: CreateXmlSchemaCollection(self: DatabaseDdlTriggerEventSet) -> bool
        Set: CreateXmlSchemaCollection(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlApplicationRoleEventsEvents(self) -> bool:
        """
        Get: DdlApplicationRoleEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlApplicationRoleEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlAssemblyEventsEvents(self) -> bool:
        """
        Get: DdlAssemblyEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlAssemblyEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlAsymmetricKeyEventsEvents(self) -> bool:
        """
        Get: DdlAsymmetricKeyEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlAsymmetricKeyEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlAuthorizationDatabaseEventsEvents(self) -> bool:
        """
        Get: DdlAuthorizationDatabaseEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlAuthorizationDatabaseEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlBrokerPriorityEventsEvents(self) -> bool:
        """
        Get: DdlBrokerPriorityEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlBrokerPriorityEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlCertificateEventsEvents(self) -> bool:
        """
        Get: DdlCertificateEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlCertificateEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlColumnEncryptionKeyEventsEvents(self) -> bool:
        """
        Get: DdlColumnEncryptionKeyEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlColumnEncryptionKeyEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlColumnMasterKeyEventsEvents(self) -> bool:
        """
        Get: DdlColumnMasterKeyEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlColumnMasterKeyEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlContractEventsEvents(self) -> bool:
        """
        Get: DdlContractEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlContractEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlCryptoSignatureEventsEvents(self) -> bool:
        """
        Get: DdlCryptoSignatureEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlCryptoSignatureEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlDatabaseAuditEventsEvents(self) -> bool:
        """
        Get: DdlDatabaseAuditEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlDatabaseAuditEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlDatabaseAuditSpecificationEventsEvents(self) -> bool:
        """
        Get: DdlDatabaseAuditSpecificationEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlDatabaseAuditSpecificationEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlDatabaseEncryptionKeyEventsEvents(self) -> bool:
        """
        Get: DdlDatabaseEncryptionKeyEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlDatabaseEncryptionKeyEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlDatabaseLevelEventsEvents(self) -> bool:
        """
        Get: DdlDatabaseLevelEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlDatabaseLevelEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlDatabaseSecurityEventsEvents(self) -> bool:
        """
        Get: DdlDatabaseSecurityEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlDatabaseSecurityEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlDefaultEventsEvents(self) -> bool:
        """
        Get: DdlDefaultEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlDefaultEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlEventNotificationEventsEvents(self) -> bool:
        """
        Get: DdlEventNotificationEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlEventNotificationEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlExtendedPropertyEventsEvents(self) -> bool:
        """
        Get: DdlExtendedPropertyEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlExtendedPropertyEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlFulltextCatalogEventsEvents(self) -> bool:
        """
        Get: DdlFulltextCatalogEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlFulltextCatalogEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlFulltextStoplistEventsEvents(self) -> bool:
        """
        Get: DdlFulltextStoplistEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlFulltextStoplistEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlFunctionEventsEvents(self) -> bool:
        """
        Get: DdlFunctionEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlFunctionEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlGdrDatabaseEventsEvents(self) -> bool:
        """
        Get: DdlGdrDatabaseEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlGdrDatabaseEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlIndexEventsEvents(self) -> bool:
        """
        Get: DdlIndexEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlIndexEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlMasterKeyEventsEvents(self) -> bool:
        """
        Get: DdlMasterKeyEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlMasterKeyEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlMessageTypeEventsEvents(self) -> bool:
        """
        Get: DdlMessageTypeEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlMessageTypeEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlPartitionEventsEvents(self) -> bool:
        """
        Get: DdlPartitionEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlPartitionEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlPartitionFunctionEventsEvents(self) -> bool:
        """
        Get: DdlPartitionFunctionEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlPartitionFunctionEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlPartitionSchemeEventsEvents(self) -> bool:
        """
        Get: DdlPartitionSchemeEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlPartitionSchemeEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlPlanGuideEventsEvents(self) -> bool:
        """
        Get: DdlPlanGuideEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlPlanGuideEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlProcedureEventsEvents(self) -> bool:
        """
        Get: DdlProcedureEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlProcedureEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlQueueEventsEvents(self) -> bool:
        """
        Get: DdlQueueEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlQueueEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlRemoteServiceBindingEventsEvents(self) -> bool:
        """
        Get: DdlRemoteServiceBindingEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlRemoteServiceBindingEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlRoleEventsEvents(self) -> bool:
        """
        Get: DdlRoleEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlRoleEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlRouteEventsEvents(self) -> bool:
        """
        Get: DdlRouteEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlRouteEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlRuleEventsEvents(self) -> bool:
        """
        Get: DdlRuleEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlRuleEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlSchemaEventsEvents(self) -> bool:
        """
        Get: DdlSchemaEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlSchemaEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlSearchPropertyListEventsEvents(self) -> bool:
        """
        Get: DdlSearchPropertyListEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlSearchPropertyListEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlSecurityPolicyEventsEvents(self) -> bool:
        """
        Get: DdlSecurityPolicyEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlSecurityPolicyEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlSequenceEventsEvents(self) -> bool:
        """
        Get: DdlSequenceEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlSequenceEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlServiceEventsEvents(self) -> bool:
        """
        Get: DdlServiceEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlServiceEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlSsbEventsEvents(self) -> bool:
        """
        Get: DdlSsbEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlSsbEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlStatisticsEventsEvents(self) -> bool:
        """
        Get: DdlStatisticsEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlStatisticsEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlSymmetricKeyEventsEvents(self) -> bool:
        """
        Get: DdlSymmetricKeyEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlSymmetricKeyEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlSynonymEventsEvents(self) -> bool:
        """
        Get: DdlSynonymEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlSynonymEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlTableEventsEvents(self) -> bool:
        """
        Get: DdlTableEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlTableEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlTableViewEventsEvents(self) -> bool:
        """
        Get: DdlTableViewEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlTableViewEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlTriggerEventsEvents(self) -> bool:
        """
        Get: DdlTriggerEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlTriggerEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlTypeEventsEvents(self) -> bool:
        """
        Get: DdlTypeEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlTypeEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlUserEventsEvents(self) -> bool:
        """
        Get: DdlUserEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlUserEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlViewEventsEvents(self) -> bool:
        """
        Get: DdlViewEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlViewEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlXmlSchemaCollectionEventsEvents(self) -> bool:
        """
        Get: DdlXmlSchemaCollectionEventsEvents(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DdlXmlSchemaCollectionEventsEvents(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DenyDatabase(self) -> bool:
        """
        Get: DenyDatabase(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DenyDatabase(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def Dirty(self) -> bool:
        """
        Get: Dirty(self: DatabaseDdlTriggerEventSet) -> bool
        Set: Dirty(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropApplicationRole(self) -> bool:
        """
        Get: DropApplicationRole(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropApplicationRole(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropAssembly(self) -> bool:
        """
        Get: DropAssembly(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropAssembly(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropAsymmetricKey(self) -> bool:
        """
        Get: DropAsymmetricKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropAsymmetricKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropAudit(self) -> bool:
        """
        Get: DropAudit(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropAudit(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropBrokerPriority(self) -> bool:
        """
        Get: DropBrokerPriority(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropBrokerPriority(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropCertificate(self) -> bool:
        """
        Get: DropCertificate(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropCertificate(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropColumnEncryptionKey(self) -> bool:
        """
        Get: DropColumnEncryptionKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropColumnEncryptionKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropColumnMasterKey(self) -> bool:
        """
        Get: DropColumnMasterKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropColumnMasterKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropContract(self) -> bool:
        """
        Get: DropContract(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropContract(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropDatabaseAuditSpecification(self) -> bool:
        """
        Get: DropDatabaseAuditSpecification(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropDatabaseAuditSpecification(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropDatabaseEncryptionKey(self) -> bool:
        """
        Get: DropDatabaseEncryptionKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropDatabaseEncryptionKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropDefault(self) -> bool:
        """
        Get: DropDefault(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropDefault(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropEventNotification(self) -> bool:
        """
        Get: DropEventNotification(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropEventNotification(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropExtendedProperty(self) -> bool:
        """
        Get: DropExtendedProperty(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropExtendedProperty(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropFulltextCatalog(self) -> bool:
        """
        Get: DropFulltextCatalog(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropFulltextCatalog(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropFulltextIndex(self) -> bool:
        """
        Get: DropFulltextIndex(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropFulltextIndex(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropFulltextStoplist(self) -> bool:
        """
        Get: DropFulltextStoplist(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropFulltextStoplist(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropFunction(self) -> bool:
        """
        Get: DropFunction(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropFunction(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropIndex(self) -> bool:
        """
        Get: DropIndex(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropIndex(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropMasterKey(self) -> bool:
        """
        Get: DropMasterKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropMasterKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropMessageType(self) -> bool:
        """
        Get: DropMessageType(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropMessageType(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropPartitionFunction(self) -> bool:
        """
        Get: DropPartitionFunction(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropPartitionFunction(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropPartitionScheme(self) -> bool:
        """
        Get: DropPartitionScheme(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropPartitionScheme(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropPlanGuide(self) -> bool:
        """
        Get: DropPlanGuide(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropPlanGuide(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropProcedure(self) -> bool:
        """
        Get: DropProcedure(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropProcedure(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropQueue(self) -> bool:
        """
        Get: DropQueue(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropQueue(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropRemoteServiceBinding(self) -> bool:
        """
        Get: DropRemoteServiceBinding(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropRemoteServiceBinding(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropRole(self) -> bool:
        """
        Get: DropRole(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropRole(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropRoleMember(self) -> bool:
        """
        Get: DropRoleMember(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropRoleMember(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropRoute(self) -> bool:
        """
        Get: DropRoute(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropRoute(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropRule(self) -> bool:
        """
        Get: DropRule(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropRule(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSchema(self) -> bool:
        """
        Get: DropSchema(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropSchema(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSearchPropertyList(self) -> bool:
        """
        Get: DropSearchPropertyList(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropSearchPropertyList(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSecurityPolicy(self) -> bool:
        """
        Get: DropSecurityPolicy(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropSecurityPolicy(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSequence(self) -> bool:
        """
        Get: DropSequence(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropSequence(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropService(self) -> bool:
        """
        Get: DropService(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropService(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSignature(self) -> bool:
        """
        Get: DropSignature(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropSignature(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSignatureSchemaObject(self) -> bool:
        """
        Get: DropSignatureSchemaObject(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropSignatureSchemaObject(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropStatistics(self) -> bool:
        """
        Get: DropStatistics(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropStatistics(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSymmetricKey(self) -> bool:
        """
        Get: DropSymmetricKey(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropSymmetricKey(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSynonym(self) -> bool:
        """
        Get: DropSynonym(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropSynonym(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropTable(self) -> bool:
        """
        Get: DropTable(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropTable(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropTrigger(self) -> bool:
        """
        Get: DropTrigger(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropTrigger(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropType(self) -> bool:
        """
        Get: DropType(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropType(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropUser(self) -> bool:
        """
        Get: DropUser(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropUser(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropView(self) -> bool:
        """
        Get: DropView(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropView(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropXmlSchemaCollection(self) -> bool:
        """
        Get: DropXmlSchemaCollection(self: DatabaseDdlTriggerEventSet) -> bool
        Set: DropXmlSchemaCollection(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def GrantDatabase(self) -> bool:
        """
        Get: GrantDatabase(self: DatabaseDdlTriggerEventSet) -> bool
        Set: GrantDatabase(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def Rename(self) -> bool:
        """
        Get: Rename(self: DatabaseDdlTriggerEventSet) -> bool
        Set: Rename(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def RevokeDatabase(self) -> bool:
        """
        Get: RevokeDatabase(self: DatabaseDdlTriggerEventSet) -> bool
        Set: RevokeDatabase(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def UnbindDefault(self) -> bool:
        """
        Get: UnbindDefault(self: DatabaseDdlTriggerEventSet) -> bool
        Set: UnbindDefault(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def UnbindRule(self) -> bool:
        """
        Get: UnbindRule(self: DatabaseDdlTriggerEventSet) -> bool
        Set: UnbindRule(self: DatabaseDdlTriggerEventSet) = value
        """
        ...

    @property
    def UpdateStatistics(self) -> bool:
        """
        Get: UpdateStatistics(self: DatabaseDdlTriggerEventSet) -> bool
        Set: UpdateStatistics(self: DatabaseDdlTriggerEventSet) = value
        """
        ...


    def Add(self, *__args:DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet:
        """
        Add(self: DatabaseDdlTriggerEventSet, anEvent: DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet
        Add(eventSet: DatabaseDdlTriggerEventSet, anEvent: DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet
        """
        ...

    def Remove(self, anEvent:DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet:
        """ Remove(self: DatabaseDdlTriggerEventSet, anEvent: DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:DatabaseDdlTriggerEventSet, anEvent:DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet:
        """ Subtract(eventSet: DatabaseDdlTriggerEventSet, anEvent: DatabaseDdlTriggerEvent) -> DatabaseDdlTriggerEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: DatabaseDdlTriggerEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class DatabaseDdlTriggerExecutionContext(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DatabaseDdlTriggerExecutionContext, values: Caller (1), ExecuteAsUser (2), Self (3) """
    Caller: DatabaseDdlTriggerExecutionContext = ...
    ExecuteAsUser: DatabaseDdlTriggerExecutionContext = ...
    Self: DatabaseDdlTriggerExecutionContext = ...
    value__ = ...


class DatabaseEncryptionAlgorithm(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DatabaseEncryptionAlgorithm, values: Aes128 (0), Aes192 (1), Aes256 (2), TripleDes (3) """
    Aes128: DatabaseEncryptionAlgorithm = ...
    Aes192: DatabaseEncryptionAlgorithm = ...
    Aes256: DatabaseEncryptionAlgorithm = ...
    TripleDes: DatabaseEncryptionAlgorithm = ...
    value__ = ...


class DatabaseEncryptionKey(IDroppable, IAlterable, ICreatable, IScriptable, SqlSmoObject, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ DatabaseEncryptionKey() """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: DatabaseEncryptionKey) -> DateTime """
        ...

    @property
    def EncryptionAlgorithm(self) -> DatabaseEncryptionAlgorithm:
        """
        Get: EncryptionAlgorithm(self: DatabaseEncryptionKey) -> DatabaseEncryptionAlgorithm
        Set: EncryptionAlgorithm(self: DatabaseEncryptionKey) = value
        """
        ...

    @property
    def EncryptionState(self): # -> DatabaseEncryptionState
        """ Get: EncryptionState(self: DatabaseEncryptionKey) -> DatabaseEncryptionState """
        ...

    @property
    def EncryptionType(self): # -> DatabaseEncryptionType
        """
        Get: EncryptionType(self: DatabaseEncryptionKey) -> DatabaseEncryptionType
        Set: EncryptionType(self: DatabaseEncryptionKey) = value
        """
        ...

    @property
    def EncryptorName(self) -> str:
        """
        Get: EncryptorName(self: DatabaseEncryptionKey) -> str
        Set: EncryptorName(self: DatabaseEncryptionKey) = value
        """
        ...

    @property
    def ModifyDate(self) -> DateTime:
        """ Get: ModifyDate(self: DatabaseEncryptionKey) -> DateTime """
        ...

    @property
    def OpenedDate(self) -> DateTime:
        """ Get: OpenedDate(self: DatabaseEncryptionKey) -> DateTime """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: DatabaseEncryptionKey) -> Database
        Set: Parent(self: DatabaseEncryptionKey) = value
        """
        ...

    @property
    def RegenerateDate(self) -> DateTime:
        """ Get: RegenerateDate(self: DatabaseEncryptionKey) -> DateTime """
        ...

    @property
    def SetDate(self) -> DateTime:
        """ Get: SetDate(self: DatabaseEncryptionKey) -> DateTime """
        ...

    @property
    def Thumbprint(self) -> Array:
        """ Get: Thumbprint(self: DatabaseEncryptionKey) -> Array[Byte] """
        ...


    def Reencrypt(self, encryptorName:str, encryptionType): # ->  # Not found arg types: {'encryptionType': 'DatabaseEncryptionType'}
        """ Reencrypt(self: DatabaseEncryptionKey, encryptorName: str, encryptionType: DatabaseEncryptionType) """
        ...

    def Regenerate(self, encryptAlgo:DatabaseEncryptionAlgorithm): # -> 
        """ Regenerate(self: DatabaseEncryptionKey, encryptAlgo: DatabaseEncryptionAlgorithm) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseEncryptionKeyExtender(SmoObjectExtender, ISfcValidate): # skipped bases: <type 'INotifyPropertyChanged'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcPropertyProvider'>, <type 'object'>
    """
    DatabaseEncryptionKeyExtender()
    DatabaseEncryptionKeyExtender(dek: DatabaseEncryptionKey)
    """
    @property
    def AsymmetricKeyName(self) -> str:
        """
        Get: AsymmetricKeyName(self: DatabaseEncryptionKeyExtender) -> str
        Set: AsymmetricKeyName(self: DatabaseEncryptionKeyExtender) = value
        """
        ...

    @property
    def AsymmetricKeyNames(self) -> StringCollection:
        """ Get: AsymmetricKeyNames(self: DatabaseEncryptionKeyExtender) -> StringCollection """
        ...

    @property
    def CertificateName(self) -> str:
        """
        Get: CertificateName(self: DatabaseEncryptionKeyExtender) -> str
        Set: CertificateName(self: DatabaseEncryptionKeyExtender) = value
        """
        ...

    @property
    def CertificateNames(self) -> StringCollection:
        """ Get: CertificateNames(self: DatabaseEncryptionKeyExtender) -> StringCollection """
        ...

    @property
    def DatabaseEncryptionEnabled(self) -> bool:
        """
        Get: DatabaseEncryptionEnabled(self: DatabaseEncryptionKeyExtender) -> bool
        Set: DatabaseEncryptionEnabled(self: DatabaseEncryptionKeyExtender) = value
        """
        ...

    @property
    def EncryptionState(self): # -> DatabaseEncryptionState
        """ Get: EncryptionState(self: DatabaseEncryptionKeyExtender) -> DatabaseEncryptionState """
        ...

    @property
    def ReEncrypt(self) -> bool:
        """
        Get: ReEncrypt(self: DatabaseEncryptionKeyExtender) -> bool
        Set: ReEncrypt(self: DatabaseEncryptionKeyExtender) = value
        """
        ...

    @property
    def Regenerate(self) -> bool:
        """
        Get: Regenerate(self: DatabaseEncryptionKeyExtender) -> bool
        Set: Regenerate(self: DatabaseEncryptionKeyExtender) = value
        """
        ...

    @property
    def State(self): # -> SqlSmoState
        """ Get: State(self: DatabaseEncryptionKeyExtender) -> SqlSmoState """
        ...



class DatabaseEncryptionState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DatabaseEncryptionState, values: DecryptionInProgress (5), Encrypted (3), EncryptionInProgress (2), EncryptionKeyChangesInProgress (4), None (0), Unencrypted (1) """
    DecryptionInProgress: DatabaseEncryptionState = ...
    Encrypted: DatabaseEncryptionState = ...
    EncryptionInProgress: DatabaseEncryptionState = ...
    EncryptionKeyChangesInProgress: DatabaseEncryptionState = ...
    Unencrypted: DatabaseEncryptionState = ...
    value__ = ...


class DatabaseEncryptionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DatabaseEncryptionType, values: ServerAsymmetricKey (1), ServerCertificate (0) """
    ServerAsymmetricKey: DatabaseEncryptionType = ...
    ServerCertificate: DatabaseEncryptionType = ...
    value__ = ...


class DatabaseEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AddRoleMember(self) -> DatabaseEvent:
        """ Get: AddRoleMember() -> DatabaseEvent """
        ...

    @property
    def AddSignature(self) -> DatabaseEvent:
        """ Get: AddSignature() -> DatabaseEvent """
        ...

    @property
    def AddSignatureSchemaObject(self) -> DatabaseEvent:
        """ Get: AddSignatureSchemaObject() -> DatabaseEvent """
        ...

    @property
    def AlterApplicationRole(self) -> DatabaseEvent:
        """ Get: AlterApplicationRole() -> DatabaseEvent """
        ...

    @property
    def AlterAssembly(self) -> DatabaseEvent:
        """ Get: AlterAssembly() -> DatabaseEvent """
        ...

    @property
    def AlterAsymmetricKey(self) -> DatabaseEvent:
        """ Get: AlterAsymmetricKey() -> DatabaseEvent """
        ...

    @property
    def AlterAudit(self) -> DatabaseEvent:
        """ Get: AlterAudit() -> DatabaseEvent """
        ...

    @property
    def AlterAuthorizationDatabase(self) -> DatabaseEvent:
        """ Get: AlterAuthorizationDatabase() -> DatabaseEvent """
        ...

    @property
    def AlterBrokerPriority(self) -> DatabaseEvent:
        """ Get: AlterBrokerPriority() -> DatabaseEvent """
        ...

    @property
    def AlterCertificate(self) -> DatabaseEvent:
        """ Get: AlterCertificate() -> DatabaseEvent """
        ...

    @property
    def AlterColumnEncryptionKey(self) -> DatabaseEvent:
        """ Get: AlterColumnEncryptionKey() -> DatabaseEvent """
        ...

    @property
    def AlterDatabaseAuditSpecification(self) -> DatabaseEvent:
        """ Get: AlterDatabaseAuditSpecification() -> DatabaseEvent """
        ...

    @property
    def AlterDatabaseEncryptionKey(self) -> DatabaseEvent:
        """ Get: AlterDatabaseEncryptionKey() -> DatabaseEvent """
        ...

    @property
    def AlterExtendedProperty(self) -> DatabaseEvent:
        """ Get: AlterExtendedProperty() -> DatabaseEvent """
        ...

    @property
    def AlterFulltextCatalog(self) -> DatabaseEvent:
        """ Get: AlterFulltextCatalog() -> DatabaseEvent """
        ...

    @property
    def AlterFulltextIndex(self) -> DatabaseEvent:
        """ Get: AlterFulltextIndex() -> DatabaseEvent """
        ...

    @property
    def AlterFulltextStoplist(self) -> DatabaseEvent:
        """ Get: AlterFulltextStoplist() -> DatabaseEvent """
        ...

    @property
    def AlterFunction(self) -> DatabaseEvent:
        """ Get: AlterFunction() -> DatabaseEvent """
        ...

    @property
    def AlterIndex(self) -> DatabaseEvent:
        """ Get: AlterIndex() -> DatabaseEvent """
        ...

    @property
    def AlterMasterKey(self) -> DatabaseEvent:
        """ Get: AlterMasterKey() -> DatabaseEvent """
        ...

    @property
    def AlterMessageType(self) -> DatabaseEvent:
        """ Get: AlterMessageType() -> DatabaseEvent """
        ...

    @property
    def AlterPartitionFunction(self) -> DatabaseEvent:
        """ Get: AlterPartitionFunction() -> DatabaseEvent """
        ...

    @property
    def AlterPartitionScheme(self) -> DatabaseEvent:
        """ Get: AlterPartitionScheme() -> DatabaseEvent """
        ...

    @property
    def AlterPlanGuide(self) -> DatabaseEvent:
        """ Get: AlterPlanGuide() -> DatabaseEvent """
        ...

    @property
    def AlterProcedure(self) -> DatabaseEvent:
        """ Get: AlterProcedure() -> DatabaseEvent """
        ...

    @property
    def AlterQueue(self) -> DatabaseEvent:
        """ Get: AlterQueue() -> DatabaseEvent """
        ...

    @property
    def AlterRemoteServiceBinding(self) -> DatabaseEvent:
        """ Get: AlterRemoteServiceBinding() -> DatabaseEvent """
        ...

    @property
    def AlterRole(self) -> DatabaseEvent:
        """ Get: AlterRole() -> DatabaseEvent """
        ...

    @property
    def AlterRoute(self) -> DatabaseEvent:
        """ Get: AlterRoute() -> DatabaseEvent """
        ...

    @property
    def AlterSchema(self) -> DatabaseEvent:
        """ Get: AlterSchema() -> DatabaseEvent """
        ...

    @property
    def AlterSearchPropertyList(self) -> DatabaseEvent:
        """ Get: AlterSearchPropertyList() -> DatabaseEvent """
        ...

    @property
    def AlterSecurityPolicy(self) -> DatabaseEvent:
        """ Get: AlterSecurityPolicy() -> DatabaseEvent """
        ...

    @property
    def AlterSequence(self) -> DatabaseEvent:
        """ Get: AlterSequence() -> DatabaseEvent """
        ...

    @property
    def AlterService(self) -> DatabaseEvent:
        """ Get: AlterService() -> DatabaseEvent """
        ...

    @property
    def AlterSymmetricKey(self) -> DatabaseEvent:
        """ Get: AlterSymmetricKey() -> DatabaseEvent """
        ...

    @property
    def AlterTable(self) -> DatabaseEvent:
        """ Get: AlterTable() -> DatabaseEvent """
        ...

    @property
    def AlterTrigger(self) -> DatabaseEvent:
        """ Get: AlterTrigger() -> DatabaseEvent """
        ...

    @property
    def AlterUser(self) -> DatabaseEvent:
        """ Get: AlterUser() -> DatabaseEvent """
        ...

    @property
    def AlterView(self) -> DatabaseEvent:
        """ Get: AlterView() -> DatabaseEvent """
        ...

    @property
    def AlterXmlSchemaCollection(self) -> DatabaseEvent:
        """ Get: AlterXmlSchemaCollection() -> DatabaseEvent """
        ...

    @property
    def BindDefault(self) -> DatabaseEvent:
        """ Get: BindDefault() -> DatabaseEvent """
        ...

    @property
    def BindRule(self) -> DatabaseEvent:
        """ Get: BindRule() -> DatabaseEvent """
        ...

    @property
    def CreateApplicationRole(self) -> DatabaseEvent:
        """ Get: CreateApplicationRole() -> DatabaseEvent """
        ...

    @property
    def CreateAssembly(self) -> DatabaseEvent:
        """ Get: CreateAssembly() -> DatabaseEvent """
        ...

    @property
    def CreateAsymmetricKey(self) -> DatabaseEvent:
        """ Get: CreateAsymmetricKey() -> DatabaseEvent """
        ...

    @property
    def CreateAudit(self) -> DatabaseEvent:
        """ Get: CreateAudit() -> DatabaseEvent """
        ...

    @property
    def CreateBrokerPriority(self) -> DatabaseEvent:
        """ Get: CreateBrokerPriority() -> DatabaseEvent """
        ...

    @property
    def CreateCertificate(self) -> DatabaseEvent:
        """ Get: CreateCertificate() -> DatabaseEvent """
        ...

    @property
    def CreateColumnEncryptionKey(self) -> DatabaseEvent:
        """ Get: CreateColumnEncryptionKey() -> DatabaseEvent """
        ...

    @property
    def CreateColumnMasterKey(self) -> DatabaseEvent:
        """ Get: CreateColumnMasterKey() -> DatabaseEvent """
        ...

    @property
    def CreateContract(self) -> DatabaseEvent:
        """ Get: CreateContract() -> DatabaseEvent """
        ...

    @property
    def CreateDatabaseAuditSpecification(self) -> DatabaseEvent:
        """ Get: CreateDatabaseAuditSpecification() -> DatabaseEvent """
        ...

    @property
    def CreateDatabaseEncryptionKey(self) -> DatabaseEvent:
        """ Get: CreateDatabaseEncryptionKey() -> DatabaseEvent """
        ...

    @property
    def CreateDefault(self) -> DatabaseEvent:
        """ Get: CreateDefault() -> DatabaseEvent """
        ...

    @property
    def CreateEventNotification(self) -> DatabaseEvent:
        """ Get: CreateEventNotification() -> DatabaseEvent """
        ...

    @property
    def CreateExtendedProperty(self) -> DatabaseEvent:
        """ Get: CreateExtendedProperty() -> DatabaseEvent """
        ...

    @property
    def CreateFulltextCatalog(self) -> DatabaseEvent:
        """ Get: CreateFulltextCatalog() -> DatabaseEvent """
        ...

    @property
    def CreateFulltextIndex(self) -> DatabaseEvent:
        """ Get: CreateFulltextIndex() -> DatabaseEvent """
        ...

    @property
    def CreateFulltextStoplist(self) -> DatabaseEvent:
        """ Get: CreateFulltextStoplist() -> DatabaseEvent """
        ...

    @property
    def CreateFunction(self) -> DatabaseEvent:
        """ Get: CreateFunction() -> DatabaseEvent """
        ...

    @property
    def CreateIndex(self) -> DatabaseEvent:
        """ Get: CreateIndex() -> DatabaseEvent """
        ...

    @property
    def CreateMasterKey(self) -> DatabaseEvent:
        """ Get: CreateMasterKey() -> DatabaseEvent """
        ...

    @property
    def CreateMessageType(self) -> DatabaseEvent:
        """ Get: CreateMessageType() -> DatabaseEvent """
        ...

    @property
    def CreatePartitionFunction(self) -> DatabaseEvent:
        """ Get: CreatePartitionFunction() -> DatabaseEvent """
        ...

    @property
    def CreatePartitionScheme(self) -> DatabaseEvent:
        """ Get: CreatePartitionScheme() -> DatabaseEvent """
        ...

    @property
    def CreatePlanGuide(self) -> DatabaseEvent:
        """ Get: CreatePlanGuide() -> DatabaseEvent """
        ...

    @property
    def CreateProcedure(self) -> DatabaseEvent:
        """ Get: CreateProcedure() -> DatabaseEvent """
        ...

    @property
    def CreateQueue(self) -> DatabaseEvent:
        """ Get: CreateQueue() -> DatabaseEvent """
        ...

    @property
    def CreateRemoteServiceBinding(self) -> DatabaseEvent:
        """ Get: CreateRemoteServiceBinding() -> DatabaseEvent """
        ...

    @property
    def CreateRole(self) -> DatabaseEvent:
        """ Get: CreateRole() -> DatabaseEvent """
        ...

    @property
    def CreateRoute(self) -> DatabaseEvent:
        """ Get: CreateRoute() -> DatabaseEvent """
        ...

    @property
    def CreateRule(self) -> DatabaseEvent:
        """ Get: CreateRule() -> DatabaseEvent """
        ...

    @property
    def CreateSchema(self) -> DatabaseEvent:
        """ Get: CreateSchema() -> DatabaseEvent """
        ...

    @property
    def CreateSearchPropertyList(self) -> DatabaseEvent:
        """ Get: CreateSearchPropertyList() -> DatabaseEvent """
        ...

    @property
    def CreateSecurityPolicy(self) -> DatabaseEvent:
        """ Get: CreateSecurityPolicy() -> DatabaseEvent """
        ...

    @property
    def CreateSequence(self) -> DatabaseEvent:
        """ Get: CreateSequence() -> DatabaseEvent """
        ...

    @property
    def CreateService(self) -> DatabaseEvent:
        """ Get: CreateService() -> DatabaseEvent """
        ...

    @property
    def CreateSpatialIndex(self) -> DatabaseEvent:
        """ Get: CreateSpatialIndex() -> DatabaseEvent """
        ...

    @property
    def CreateStatistics(self) -> DatabaseEvent:
        """ Get: CreateStatistics() -> DatabaseEvent """
        ...

    @property
    def CreateSymmetricKey(self) -> DatabaseEvent:
        """ Get: CreateSymmetricKey() -> DatabaseEvent """
        ...

    @property
    def CreateSynonym(self) -> DatabaseEvent:
        """ Get: CreateSynonym() -> DatabaseEvent """
        ...

    @property
    def CreateTable(self) -> DatabaseEvent:
        """ Get: CreateTable() -> DatabaseEvent """
        ...

    @property
    def CreateTrigger(self) -> DatabaseEvent:
        """ Get: CreateTrigger() -> DatabaseEvent """
        ...

    @property
    def CreateType(self) -> DatabaseEvent:
        """ Get: CreateType() -> DatabaseEvent """
        ...

    @property
    def CreateUser(self) -> DatabaseEvent:
        """ Get: CreateUser() -> DatabaseEvent """
        ...

    @property
    def CreateView(self) -> DatabaseEvent:
        """ Get: CreateView() -> DatabaseEvent """
        ...

    @property
    def CreateXmlIndex(self) -> DatabaseEvent:
        """ Get: CreateXmlIndex() -> DatabaseEvent """
        ...

    @property
    def CreateXmlSchemaCollection(self) -> DatabaseEvent:
        """ Get: CreateXmlSchemaCollection() -> DatabaseEvent """
        ...

    @property
    def DenyDatabase(self) -> DatabaseEvent:
        """ Get: DenyDatabase() -> DatabaseEvent """
        ...

    @property
    def DropApplicationRole(self) -> DatabaseEvent:
        """ Get: DropApplicationRole() -> DatabaseEvent """
        ...

    @property
    def DropAssembly(self) -> DatabaseEvent:
        """ Get: DropAssembly() -> DatabaseEvent """
        ...

    @property
    def DropAsymmetricKey(self) -> DatabaseEvent:
        """ Get: DropAsymmetricKey() -> DatabaseEvent """
        ...

    @property
    def DropAudit(self) -> DatabaseEvent:
        """ Get: DropAudit() -> DatabaseEvent """
        ...

    @property
    def DropBrokerPriority(self) -> DatabaseEvent:
        """ Get: DropBrokerPriority() -> DatabaseEvent """
        ...

    @property
    def DropCertificate(self) -> DatabaseEvent:
        """ Get: DropCertificate() -> DatabaseEvent """
        ...

    @property
    def DropColumnEncryptionKey(self) -> DatabaseEvent:
        """ Get: DropColumnEncryptionKey() -> DatabaseEvent """
        ...

    @property
    def DropColumnMasterKey(self) -> DatabaseEvent:
        """ Get: DropColumnMasterKey() -> DatabaseEvent """
        ...

    @property
    def DropContract(self) -> DatabaseEvent:
        """ Get: DropContract() -> DatabaseEvent """
        ...

    @property
    def DropDatabase(self) -> DatabaseEvent:
        """ Get: DropDatabase() -> DatabaseEvent """
        ...

    @property
    def DropDatabaseAuditSpecification(self) -> DatabaseEvent:
        """ Get: DropDatabaseAuditSpecification() -> DatabaseEvent """
        ...

    @property
    def DropDatabaseEncryptionKey(self) -> DatabaseEvent:
        """ Get: DropDatabaseEncryptionKey() -> DatabaseEvent """
        ...

    @property
    def DropDefault(self) -> DatabaseEvent:
        """ Get: DropDefault() -> DatabaseEvent """
        ...

    @property
    def DropEventNotification(self) -> DatabaseEvent:
        """ Get: DropEventNotification() -> DatabaseEvent """
        ...

    @property
    def DropExtendedProperty(self) -> DatabaseEvent:
        """ Get: DropExtendedProperty() -> DatabaseEvent """
        ...

    @property
    def DropFulltextCatalog(self) -> DatabaseEvent:
        """ Get: DropFulltextCatalog() -> DatabaseEvent """
        ...

    @property
    def DropFulltextIndex(self) -> DatabaseEvent:
        """ Get: DropFulltextIndex() -> DatabaseEvent """
        ...

    @property
    def DropFulltextStoplist(self) -> DatabaseEvent:
        """ Get: DropFulltextStoplist() -> DatabaseEvent """
        ...

    @property
    def DropFunction(self) -> DatabaseEvent:
        """ Get: DropFunction() -> DatabaseEvent """
        ...

    @property
    def DropIndex(self) -> DatabaseEvent:
        """ Get: DropIndex() -> DatabaseEvent """
        ...

    @property
    def DropMasterKey(self) -> DatabaseEvent:
        """ Get: DropMasterKey() -> DatabaseEvent """
        ...

    @property
    def DropMessageType(self) -> DatabaseEvent:
        """ Get: DropMessageType() -> DatabaseEvent """
        ...

    @property
    def DropPartitionFunction(self) -> DatabaseEvent:
        """ Get: DropPartitionFunction() -> DatabaseEvent """
        ...

    @property
    def DropPartitionScheme(self) -> DatabaseEvent:
        """ Get: DropPartitionScheme() -> DatabaseEvent """
        ...

    @property
    def DropPlanGuide(self) -> DatabaseEvent:
        """ Get: DropPlanGuide() -> DatabaseEvent """
        ...

    @property
    def DropProcedure(self) -> DatabaseEvent:
        """ Get: DropProcedure() -> DatabaseEvent """
        ...

    @property
    def DropQueue(self) -> DatabaseEvent:
        """ Get: DropQueue() -> DatabaseEvent """
        ...

    @property
    def DropRemoteServiceBinding(self) -> DatabaseEvent:
        """ Get: DropRemoteServiceBinding() -> DatabaseEvent """
        ...

    @property
    def DropRole(self) -> DatabaseEvent:
        """ Get: DropRole() -> DatabaseEvent """
        ...

    @property
    def DropRoleMember(self) -> DatabaseEvent:
        """ Get: DropRoleMember() -> DatabaseEvent """
        ...

    @property
    def DropRoute(self) -> DatabaseEvent:
        """ Get: DropRoute() -> DatabaseEvent """
        ...

    @property
    def DropRule(self) -> DatabaseEvent:
        """ Get: DropRule() -> DatabaseEvent """
        ...

    @property
    def DropSchema(self) -> DatabaseEvent:
        """ Get: DropSchema() -> DatabaseEvent """
        ...

    @property
    def DropSearchPropertyList(self) -> DatabaseEvent:
        """ Get: DropSearchPropertyList() -> DatabaseEvent """
        ...

    @property
    def DropSecurityPolicy(self) -> DatabaseEvent:
        """ Get: DropSecurityPolicy() -> DatabaseEvent """
        ...

    @property
    def DropSequence(self) -> DatabaseEvent:
        """ Get: DropSequence() -> DatabaseEvent """
        ...

    @property
    def DropService(self) -> DatabaseEvent:
        """ Get: DropService() -> DatabaseEvent """
        ...

    @property
    def DropSignature(self) -> DatabaseEvent:
        """ Get: DropSignature() -> DatabaseEvent """
        ...

    @property
    def DropSignatureSchemaObject(self) -> DatabaseEvent:
        """ Get: DropSignatureSchemaObject() -> DatabaseEvent """
        ...

    @property
    def DropStatistics(self) -> DatabaseEvent:
        """ Get: DropStatistics() -> DatabaseEvent """
        ...

    @property
    def DropSymmetricKey(self) -> DatabaseEvent:
        """ Get: DropSymmetricKey() -> DatabaseEvent """
        ...

    @property
    def DropSynonym(self) -> DatabaseEvent:
        """ Get: DropSynonym() -> DatabaseEvent """
        ...

    @property
    def DropTable(self) -> DatabaseEvent:
        """ Get: DropTable() -> DatabaseEvent """
        ...

    @property
    def DropTrigger(self) -> DatabaseEvent:
        """ Get: DropTrigger() -> DatabaseEvent """
        ...

    @property
    def DropType(self) -> DatabaseEvent:
        """ Get: DropType() -> DatabaseEvent """
        ...

    @property
    def DropUser(self) -> DatabaseEvent:
        """ Get: DropUser() -> DatabaseEvent """
        ...

    @property
    def DropView(self) -> DatabaseEvent:
        """ Get: DropView() -> DatabaseEvent """
        ...

    @property
    def DropXmlSchemaCollection(self) -> DatabaseEvent:
        """ Get: DropXmlSchemaCollection() -> DatabaseEvent """
        ...

    @property
    def GrantDatabase(self) -> DatabaseEvent:
        """ Get: GrantDatabase() -> DatabaseEvent """
        ...

    @property
    def Rename(self) -> DatabaseEvent:
        """ Get: Rename() -> DatabaseEvent """
        ...

    @property
    def RevokeDatabase(self) -> DatabaseEvent:
        """ Get: RevokeDatabase() -> DatabaseEvent """
        ...

    @property
    def UnbindDefault(self) -> DatabaseEvent:
        """ Get: UnbindDefault() -> DatabaseEvent """
        ...

    @property
    def UnbindRule(self) -> DatabaseEvent:
        """ Get: UnbindRule() -> DatabaseEvent """
        ...

    @property
    def UpdateStatistics(self) -> DatabaseEvent:
        """ Get: UpdateStatistics() -> DatabaseEvent """
        ...


    @staticmethod
    def Add(eventLeft:DatabaseEvent, eventRight:DatabaseEvent): # -> DatabaseEventSet
        """ Add(eventLeft: DatabaseEvent, eventRight: DatabaseEvent) -> DatabaseEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:DatabaseEvent, eventRight:DatabaseEvent): # -> DatabaseEventSet
        """ BitwiseOr(eventLeft: DatabaseEvent, eventRight: DatabaseEvent) -> DatabaseEventSet """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: DatabaseEvent, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: DatabaseEvent) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: DatabaseEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: DatabaseEvent, eventRight: DatabaseEvent) -> DatabaseEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: DatabaseEvent, eventRight: DatabaseEvent) -> DatabaseEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: DatabaseEvent, eventRight: DatabaseEvent) -> DatabaseEventSet """
        ...



class SmoEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ SmoEventArgs(urn: Urn) """
    @property
    def Urn(self) -> Urn:
        """ Get: Urn(self: SmoEventArgs) -> Urn """
        ...


    def __new__(cls, urn:Urn) -> Self:
        """ __new__(cls: type, urn: Urn) """
        ...


class DatabaseEventArgs(SmoEventArgs): # skipped bases: <type 'object'>
    """ DatabaseEventArgs(urn: Urn, obj: object, name: str, databaseEventType: DatabaseEventType) """
    @property
    def DatabaseEventType(self): # -> DatabaseEventType
        """ Get: DatabaseEventType(self: DatabaseEventArgs) -> DatabaseEventType """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: DatabaseEventArgs) -> str """
        ...

    @property
    def SmoObject(self) -> object:
        """ Get: SmoObject(self: DatabaseEventArgs) -> object """
        ...



class DatabaseEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self): # -> DatabaseEventSet
        """ GetEventSelection(self: DatabaseEvents) -> DatabaseEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: DatabaseEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: DatabaseEvents) """
        ...

    def SubscribeToEvents(self, events, eventHandler = ...): # ->  # Not found arg types: {'events': 'DatabaseEventSet', 'eventHandler': 'ServerEventHandler'}
        """ SubscribeToEvents(self: DatabaseEvents, events: DatabaseEventSet)SubscribeToEvents(self: DatabaseEvents, events: DatabaseEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: DatabaseEvents) """
        ...

    def UnsubscribeFromEvents(self, events): # ->  # Not found arg types: {'events': 'DatabaseEventSet'}
        """ UnsubscribeFromEvents(self: DatabaseEvents, events: DatabaseEventSet) """
        ...

    ServerEvent = ...


class DatabaseEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    DatabaseEventSet()
    DatabaseEventSet(eventSet: DatabaseEventSet)
    DatabaseEventSet(anEvent: DatabaseEvent)
    DatabaseEventSet(*events: Array[DatabaseEvent])
    """
    @property
    def AddRoleMember(self) -> bool:
        """
        Get: AddRoleMember(self: DatabaseEventSet) -> bool
        Set: AddRoleMember(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AddSignature(self) -> bool:
        """
        Get: AddSignature(self: DatabaseEventSet) -> bool
        Set: AddSignature(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AddSignatureSchemaObject(self) -> bool:
        """
        Get: AddSignatureSchemaObject(self: DatabaseEventSet) -> bool
        Set: AddSignatureSchemaObject(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterApplicationRole(self) -> bool:
        """
        Get: AlterApplicationRole(self: DatabaseEventSet) -> bool
        Set: AlterApplicationRole(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterAssembly(self) -> bool:
        """
        Get: AlterAssembly(self: DatabaseEventSet) -> bool
        Set: AlterAssembly(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterAsymmetricKey(self) -> bool:
        """
        Get: AlterAsymmetricKey(self: DatabaseEventSet) -> bool
        Set: AlterAsymmetricKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterAudit(self) -> bool:
        """
        Get: AlterAudit(self: DatabaseEventSet) -> bool
        Set: AlterAudit(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterAuthorizationDatabase(self) -> bool:
        """
        Get: AlterAuthorizationDatabase(self: DatabaseEventSet) -> bool
        Set: AlterAuthorizationDatabase(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterBrokerPriority(self) -> bool:
        """
        Get: AlterBrokerPriority(self: DatabaseEventSet) -> bool
        Set: AlterBrokerPriority(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterCertificate(self) -> bool:
        """
        Get: AlterCertificate(self: DatabaseEventSet) -> bool
        Set: AlterCertificate(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterColumnEncryptionKey(self) -> bool:
        """
        Get: AlterColumnEncryptionKey(self: DatabaseEventSet) -> bool
        Set: AlterColumnEncryptionKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterDatabaseAuditSpecification(self) -> bool:
        """
        Get: AlterDatabaseAuditSpecification(self: DatabaseEventSet) -> bool
        Set: AlterDatabaseAuditSpecification(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterDatabaseEncryptionKey(self) -> bool:
        """
        Get: AlterDatabaseEncryptionKey(self: DatabaseEventSet) -> bool
        Set: AlterDatabaseEncryptionKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterExtendedProperty(self) -> bool:
        """
        Get: AlterExtendedProperty(self: DatabaseEventSet) -> bool
        Set: AlterExtendedProperty(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterFulltextCatalog(self) -> bool:
        """
        Get: AlterFulltextCatalog(self: DatabaseEventSet) -> bool
        Set: AlterFulltextCatalog(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterFulltextIndex(self) -> bool:
        """
        Get: AlterFulltextIndex(self: DatabaseEventSet) -> bool
        Set: AlterFulltextIndex(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterFulltextStoplist(self) -> bool:
        """
        Get: AlterFulltextStoplist(self: DatabaseEventSet) -> bool
        Set: AlterFulltextStoplist(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterFunction(self) -> bool:
        """
        Get: AlterFunction(self: DatabaseEventSet) -> bool
        Set: AlterFunction(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterIndex(self) -> bool:
        """
        Get: AlterIndex(self: DatabaseEventSet) -> bool
        Set: AlterIndex(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterMasterKey(self) -> bool:
        """
        Get: AlterMasterKey(self: DatabaseEventSet) -> bool
        Set: AlterMasterKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterMessageType(self) -> bool:
        """
        Get: AlterMessageType(self: DatabaseEventSet) -> bool
        Set: AlterMessageType(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterPartitionFunction(self) -> bool:
        """
        Get: AlterPartitionFunction(self: DatabaseEventSet) -> bool
        Set: AlterPartitionFunction(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterPartitionScheme(self) -> bool:
        """
        Get: AlterPartitionScheme(self: DatabaseEventSet) -> bool
        Set: AlterPartitionScheme(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterPlanGuide(self) -> bool:
        """
        Get: AlterPlanGuide(self: DatabaseEventSet) -> bool
        Set: AlterPlanGuide(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterProcedure(self) -> bool:
        """
        Get: AlterProcedure(self: DatabaseEventSet) -> bool
        Set: AlterProcedure(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterQueue(self) -> bool:
        """
        Get: AlterQueue(self: DatabaseEventSet) -> bool
        Set: AlterQueue(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterRemoteServiceBinding(self) -> bool:
        """
        Get: AlterRemoteServiceBinding(self: DatabaseEventSet) -> bool
        Set: AlterRemoteServiceBinding(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterRole(self) -> bool:
        """
        Get: AlterRole(self: DatabaseEventSet) -> bool
        Set: AlterRole(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterRoute(self) -> bool:
        """
        Get: AlterRoute(self: DatabaseEventSet) -> bool
        Set: AlterRoute(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterSchema(self) -> bool:
        """
        Get: AlterSchema(self: DatabaseEventSet) -> bool
        Set: AlterSchema(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterSearchPropertyList(self) -> bool:
        """
        Get: AlterSearchPropertyList(self: DatabaseEventSet) -> bool
        Set: AlterSearchPropertyList(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterSecurityPolicy(self) -> bool:
        """
        Get: AlterSecurityPolicy(self: DatabaseEventSet) -> bool
        Set: AlterSecurityPolicy(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterSequence(self) -> bool:
        """
        Get: AlterSequence(self: DatabaseEventSet) -> bool
        Set: AlterSequence(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterService(self) -> bool:
        """
        Get: AlterService(self: DatabaseEventSet) -> bool
        Set: AlterService(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterSymmetricKey(self) -> bool:
        """
        Get: AlterSymmetricKey(self: DatabaseEventSet) -> bool
        Set: AlterSymmetricKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterTable(self) -> bool:
        """
        Get: AlterTable(self: DatabaseEventSet) -> bool
        Set: AlterTable(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterTrigger(self) -> bool:
        """
        Get: AlterTrigger(self: DatabaseEventSet) -> bool
        Set: AlterTrigger(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterUser(self) -> bool:
        """
        Get: AlterUser(self: DatabaseEventSet) -> bool
        Set: AlterUser(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterView(self) -> bool:
        """
        Get: AlterView(self: DatabaseEventSet) -> bool
        Set: AlterView(self: DatabaseEventSet) = value
        """
        ...

    @property
    def AlterXmlSchemaCollection(self) -> bool:
        """
        Get: AlterXmlSchemaCollection(self: DatabaseEventSet) -> bool
        Set: AlterXmlSchemaCollection(self: DatabaseEventSet) = value
        """
        ...

    @property
    def BindDefault(self) -> bool:
        """
        Get: BindDefault(self: DatabaseEventSet) -> bool
        Set: BindDefault(self: DatabaseEventSet) = value
        """
        ...

    @property
    def BindRule(self) -> bool:
        """
        Get: BindRule(self: DatabaseEventSet) -> bool
        Set: BindRule(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateApplicationRole(self) -> bool:
        """
        Get: CreateApplicationRole(self: DatabaseEventSet) -> bool
        Set: CreateApplicationRole(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateAssembly(self) -> bool:
        """
        Get: CreateAssembly(self: DatabaseEventSet) -> bool
        Set: CreateAssembly(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateAsymmetricKey(self) -> bool:
        """
        Get: CreateAsymmetricKey(self: DatabaseEventSet) -> bool
        Set: CreateAsymmetricKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateAudit(self) -> bool:
        """
        Get: CreateAudit(self: DatabaseEventSet) -> bool
        Set: CreateAudit(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateBrokerPriority(self) -> bool:
        """
        Get: CreateBrokerPriority(self: DatabaseEventSet) -> bool
        Set: CreateBrokerPriority(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateCertificate(self) -> bool:
        """
        Get: CreateCertificate(self: DatabaseEventSet) -> bool
        Set: CreateCertificate(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateColumnEncryptionKey(self) -> bool:
        """
        Get: CreateColumnEncryptionKey(self: DatabaseEventSet) -> bool
        Set: CreateColumnEncryptionKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateColumnMasterKey(self) -> bool:
        """
        Get: CreateColumnMasterKey(self: DatabaseEventSet) -> bool
        Set: CreateColumnMasterKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateContract(self) -> bool:
        """
        Get: CreateContract(self: DatabaseEventSet) -> bool
        Set: CreateContract(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateDatabaseAuditSpecification(self) -> bool:
        """
        Get: CreateDatabaseAuditSpecification(self: DatabaseEventSet) -> bool
        Set: CreateDatabaseAuditSpecification(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateDatabaseEncryptionKey(self) -> bool:
        """
        Get: CreateDatabaseEncryptionKey(self: DatabaseEventSet) -> bool
        Set: CreateDatabaseEncryptionKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateDefault(self) -> bool:
        """
        Get: CreateDefault(self: DatabaseEventSet) -> bool
        Set: CreateDefault(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateEventNotification(self) -> bool:
        """
        Get: CreateEventNotification(self: DatabaseEventSet) -> bool
        Set: CreateEventNotification(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateExtendedProperty(self) -> bool:
        """
        Get: CreateExtendedProperty(self: DatabaseEventSet) -> bool
        Set: CreateExtendedProperty(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateFulltextCatalog(self) -> bool:
        """
        Get: CreateFulltextCatalog(self: DatabaseEventSet) -> bool
        Set: CreateFulltextCatalog(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateFulltextIndex(self) -> bool:
        """
        Get: CreateFulltextIndex(self: DatabaseEventSet) -> bool
        Set: CreateFulltextIndex(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateFulltextStoplist(self) -> bool:
        """
        Get: CreateFulltextStoplist(self: DatabaseEventSet) -> bool
        Set: CreateFulltextStoplist(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateFunction(self) -> bool:
        """
        Get: CreateFunction(self: DatabaseEventSet) -> bool
        Set: CreateFunction(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateIndex(self) -> bool:
        """
        Get: CreateIndex(self: DatabaseEventSet) -> bool
        Set: CreateIndex(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateMasterKey(self) -> bool:
        """
        Get: CreateMasterKey(self: DatabaseEventSet) -> bool
        Set: CreateMasterKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateMessageType(self) -> bool:
        """
        Get: CreateMessageType(self: DatabaseEventSet) -> bool
        Set: CreateMessageType(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreatePartitionFunction(self) -> bool:
        """
        Get: CreatePartitionFunction(self: DatabaseEventSet) -> bool
        Set: CreatePartitionFunction(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreatePartitionScheme(self) -> bool:
        """
        Get: CreatePartitionScheme(self: DatabaseEventSet) -> bool
        Set: CreatePartitionScheme(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreatePlanGuide(self) -> bool:
        """
        Get: CreatePlanGuide(self: DatabaseEventSet) -> bool
        Set: CreatePlanGuide(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateProcedure(self) -> bool:
        """
        Get: CreateProcedure(self: DatabaseEventSet) -> bool
        Set: CreateProcedure(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateQueue(self) -> bool:
        """
        Get: CreateQueue(self: DatabaseEventSet) -> bool
        Set: CreateQueue(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateRemoteServiceBinding(self) -> bool:
        """
        Get: CreateRemoteServiceBinding(self: DatabaseEventSet) -> bool
        Set: CreateRemoteServiceBinding(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateRole(self) -> bool:
        """
        Get: CreateRole(self: DatabaseEventSet) -> bool
        Set: CreateRole(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateRoute(self) -> bool:
        """
        Get: CreateRoute(self: DatabaseEventSet) -> bool
        Set: CreateRoute(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateRule(self) -> bool:
        """
        Get: CreateRule(self: DatabaseEventSet) -> bool
        Set: CreateRule(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateSchema(self) -> bool:
        """
        Get: CreateSchema(self: DatabaseEventSet) -> bool
        Set: CreateSchema(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateSearchPropertyList(self) -> bool:
        """
        Get: CreateSearchPropertyList(self: DatabaseEventSet) -> bool
        Set: CreateSearchPropertyList(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateSecurityPolicy(self) -> bool:
        """
        Get: CreateSecurityPolicy(self: DatabaseEventSet) -> bool
        Set: CreateSecurityPolicy(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateSequence(self) -> bool:
        """
        Get: CreateSequence(self: DatabaseEventSet) -> bool
        Set: CreateSequence(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateService(self) -> bool:
        """
        Get: CreateService(self: DatabaseEventSet) -> bool
        Set: CreateService(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateSpatialIndex(self) -> bool:
        """
        Get: CreateSpatialIndex(self: DatabaseEventSet) -> bool
        Set: CreateSpatialIndex(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateStatistics(self) -> bool:
        """
        Get: CreateStatistics(self: DatabaseEventSet) -> bool
        Set: CreateStatistics(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateSymmetricKey(self) -> bool:
        """
        Get: CreateSymmetricKey(self: DatabaseEventSet) -> bool
        Set: CreateSymmetricKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateSynonym(self) -> bool:
        """
        Get: CreateSynonym(self: DatabaseEventSet) -> bool
        Set: CreateSynonym(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateTable(self) -> bool:
        """
        Get: CreateTable(self: DatabaseEventSet) -> bool
        Set: CreateTable(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateTrigger(self) -> bool:
        """
        Get: CreateTrigger(self: DatabaseEventSet) -> bool
        Set: CreateTrigger(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateType(self) -> bool:
        """
        Get: CreateType(self: DatabaseEventSet) -> bool
        Set: CreateType(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateUser(self) -> bool:
        """
        Get: CreateUser(self: DatabaseEventSet) -> bool
        Set: CreateUser(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateView(self) -> bool:
        """
        Get: CreateView(self: DatabaseEventSet) -> bool
        Set: CreateView(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateXmlIndex(self) -> bool:
        """
        Get: CreateXmlIndex(self: DatabaseEventSet) -> bool
        Set: CreateXmlIndex(self: DatabaseEventSet) = value
        """
        ...

    @property
    def CreateXmlSchemaCollection(self) -> bool:
        """
        Get: CreateXmlSchemaCollection(self: DatabaseEventSet) -> bool
        Set: CreateXmlSchemaCollection(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DenyDatabase(self) -> bool:
        """
        Get: DenyDatabase(self: DatabaseEventSet) -> bool
        Set: DenyDatabase(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropApplicationRole(self) -> bool:
        """
        Get: DropApplicationRole(self: DatabaseEventSet) -> bool
        Set: DropApplicationRole(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropAssembly(self) -> bool:
        """
        Get: DropAssembly(self: DatabaseEventSet) -> bool
        Set: DropAssembly(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropAsymmetricKey(self) -> bool:
        """
        Get: DropAsymmetricKey(self: DatabaseEventSet) -> bool
        Set: DropAsymmetricKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropAudit(self) -> bool:
        """
        Get: DropAudit(self: DatabaseEventSet) -> bool
        Set: DropAudit(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropBrokerPriority(self) -> bool:
        """
        Get: DropBrokerPriority(self: DatabaseEventSet) -> bool
        Set: DropBrokerPriority(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropCertificate(self) -> bool:
        """
        Get: DropCertificate(self: DatabaseEventSet) -> bool
        Set: DropCertificate(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropColumnEncryptionKey(self) -> bool:
        """
        Get: DropColumnEncryptionKey(self: DatabaseEventSet) -> bool
        Set: DropColumnEncryptionKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropColumnMasterKey(self) -> bool:
        """
        Get: DropColumnMasterKey(self: DatabaseEventSet) -> bool
        Set: DropColumnMasterKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropContract(self) -> bool:
        """
        Get: DropContract(self: DatabaseEventSet) -> bool
        Set: DropContract(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropDatabase(self) -> bool:
        """
        Get: DropDatabase(self: DatabaseEventSet) -> bool
        Set: DropDatabase(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropDatabaseAuditSpecification(self) -> bool:
        """
        Get: DropDatabaseAuditSpecification(self: DatabaseEventSet) -> bool
        Set: DropDatabaseAuditSpecification(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropDatabaseEncryptionKey(self) -> bool:
        """
        Get: DropDatabaseEncryptionKey(self: DatabaseEventSet) -> bool
        Set: DropDatabaseEncryptionKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropDefault(self) -> bool:
        """
        Get: DropDefault(self: DatabaseEventSet) -> bool
        Set: DropDefault(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropEventNotification(self) -> bool:
        """
        Get: DropEventNotification(self: DatabaseEventSet) -> bool
        Set: DropEventNotification(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropExtendedProperty(self) -> bool:
        """
        Get: DropExtendedProperty(self: DatabaseEventSet) -> bool
        Set: DropExtendedProperty(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropFulltextCatalog(self) -> bool:
        """
        Get: DropFulltextCatalog(self: DatabaseEventSet) -> bool
        Set: DropFulltextCatalog(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropFulltextIndex(self) -> bool:
        """
        Get: DropFulltextIndex(self: DatabaseEventSet) -> bool
        Set: DropFulltextIndex(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropFulltextStoplist(self) -> bool:
        """
        Get: DropFulltextStoplist(self: DatabaseEventSet) -> bool
        Set: DropFulltextStoplist(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropFunction(self) -> bool:
        """
        Get: DropFunction(self: DatabaseEventSet) -> bool
        Set: DropFunction(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropIndex(self) -> bool:
        """
        Get: DropIndex(self: DatabaseEventSet) -> bool
        Set: DropIndex(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropMasterKey(self) -> bool:
        """
        Get: DropMasterKey(self: DatabaseEventSet) -> bool
        Set: DropMasterKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropMessageType(self) -> bool:
        """
        Get: DropMessageType(self: DatabaseEventSet) -> bool
        Set: DropMessageType(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropPartitionFunction(self) -> bool:
        """
        Get: DropPartitionFunction(self: DatabaseEventSet) -> bool
        Set: DropPartitionFunction(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropPartitionScheme(self) -> bool:
        """
        Get: DropPartitionScheme(self: DatabaseEventSet) -> bool
        Set: DropPartitionScheme(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropPlanGuide(self) -> bool:
        """
        Get: DropPlanGuide(self: DatabaseEventSet) -> bool
        Set: DropPlanGuide(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropProcedure(self) -> bool:
        """
        Get: DropProcedure(self: DatabaseEventSet) -> bool
        Set: DropProcedure(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropQueue(self) -> bool:
        """
        Get: DropQueue(self: DatabaseEventSet) -> bool
        Set: DropQueue(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropRemoteServiceBinding(self) -> bool:
        """
        Get: DropRemoteServiceBinding(self: DatabaseEventSet) -> bool
        Set: DropRemoteServiceBinding(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropRole(self) -> bool:
        """
        Get: DropRole(self: DatabaseEventSet) -> bool
        Set: DropRole(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropRoleMember(self) -> bool:
        """
        Get: DropRoleMember(self: DatabaseEventSet) -> bool
        Set: DropRoleMember(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropRoute(self) -> bool:
        """
        Get: DropRoute(self: DatabaseEventSet) -> bool
        Set: DropRoute(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropRule(self) -> bool:
        """
        Get: DropRule(self: DatabaseEventSet) -> bool
        Set: DropRule(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropSchema(self) -> bool:
        """
        Get: DropSchema(self: DatabaseEventSet) -> bool
        Set: DropSchema(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropSearchPropertyList(self) -> bool:
        """
        Get: DropSearchPropertyList(self: DatabaseEventSet) -> bool
        Set: DropSearchPropertyList(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropSecurityPolicy(self) -> bool:
        """
        Get: DropSecurityPolicy(self: DatabaseEventSet) -> bool
        Set: DropSecurityPolicy(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropSequence(self) -> bool:
        """
        Get: DropSequence(self: DatabaseEventSet) -> bool
        Set: DropSequence(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropService(self) -> bool:
        """
        Get: DropService(self: DatabaseEventSet) -> bool
        Set: DropService(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropSignature(self) -> bool:
        """
        Get: DropSignature(self: DatabaseEventSet) -> bool
        Set: DropSignature(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropSignatureSchemaObject(self) -> bool:
        """
        Get: DropSignatureSchemaObject(self: DatabaseEventSet) -> bool
        Set: DropSignatureSchemaObject(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropStatistics(self) -> bool:
        """
        Get: DropStatistics(self: DatabaseEventSet) -> bool
        Set: DropStatistics(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropSymmetricKey(self) -> bool:
        """
        Get: DropSymmetricKey(self: DatabaseEventSet) -> bool
        Set: DropSymmetricKey(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropSynonym(self) -> bool:
        """
        Get: DropSynonym(self: DatabaseEventSet) -> bool
        Set: DropSynonym(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropTable(self) -> bool:
        """
        Get: DropTable(self: DatabaseEventSet) -> bool
        Set: DropTable(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropTrigger(self) -> bool:
        """
        Get: DropTrigger(self: DatabaseEventSet) -> bool
        Set: DropTrigger(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropType(self) -> bool:
        """
        Get: DropType(self: DatabaseEventSet) -> bool
        Set: DropType(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropUser(self) -> bool:
        """
        Get: DropUser(self: DatabaseEventSet) -> bool
        Set: DropUser(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropView(self) -> bool:
        """
        Get: DropView(self: DatabaseEventSet) -> bool
        Set: DropView(self: DatabaseEventSet) = value
        """
        ...

    @property
    def DropXmlSchemaCollection(self) -> bool:
        """
        Get: DropXmlSchemaCollection(self: DatabaseEventSet) -> bool
        Set: DropXmlSchemaCollection(self: DatabaseEventSet) = value
        """
        ...

    @property
    def GrantDatabase(self) -> bool:
        """
        Get: GrantDatabase(self: DatabaseEventSet) -> bool
        Set: GrantDatabase(self: DatabaseEventSet) = value
        """
        ...

    @property
    def Rename(self) -> bool:
        """
        Get: Rename(self: DatabaseEventSet) -> bool
        Set: Rename(self: DatabaseEventSet) = value
        """
        ...

    @property
    def RevokeDatabase(self) -> bool:
        """
        Get: RevokeDatabase(self: DatabaseEventSet) -> bool
        Set: RevokeDatabase(self: DatabaseEventSet) = value
        """
        ...

    @property
    def UnbindDefault(self) -> bool:
        """
        Get: UnbindDefault(self: DatabaseEventSet) -> bool
        Set: UnbindDefault(self: DatabaseEventSet) = value
        """
        ...

    @property
    def UnbindRule(self) -> bool:
        """
        Get: UnbindRule(self: DatabaseEventSet) -> bool
        Set: UnbindRule(self: DatabaseEventSet) = value
        """
        ...

    @property
    def UpdateStatistics(self) -> bool:
        """
        Get: UpdateStatistics(self: DatabaseEventSet) -> bool
        Set: UpdateStatistics(self: DatabaseEventSet) = value
        """
        ...


    def Add(self, *__args:DatabaseEvent) -> DatabaseEventSet:
        """
        Add(self: DatabaseEventSet, anEvent: DatabaseEvent) -> DatabaseEventSet
        Add(eventSet: DatabaseEventSet, anEvent: DatabaseEvent) -> DatabaseEventSet
        """
        ...

    def Remove(self, anEvent:DatabaseEvent) -> DatabaseEventSet:
        """ Remove(self: DatabaseEventSet, anEvent: DatabaseEvent) -> DatabaseEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:DatabaseEventSet, anEvent:DatabaseEvent) -> DatabaseEventSet:
        """ Subtract(eventSet: DatabaseEventSet, anEvent: DatabaseEvent) -> DatabaseEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: DatabaseEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class DatabaseEventType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DatabaseEventType, values: Attach (0), Backup (5), Detach (1), Offline (3), Online (4), Restore (2) """
    Attach: DatabaseEventType = ...
    Backup: DatabaseEventType = ...
    Detach: DatabaseEventType = ...
    Offline: DatabaseEventType = ...
    Online: DatabaseEventType = ...
    Restore: DatabaseEventType = ...
    value__ = ...


class DatabaseFile(IDroppable, IAlterable, IRenamable, IMarkForDrop, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    def Shrink(self, newSizeInMB:int, shrinkType): # ->  # Not found arg types: {'shrinkType': 'ShrinkMethod'}
        """ Shrink(self: DatabaseFile, newSizeInMB: int, shrinkType: ShrinkMethod) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseFileMappingsDictionary(Dictionary): # skipped bases: <type 'IReadOnlyDictionary[str, str]'>, <type 'IDictionary[str, str]'>, <type 'IReadOnlyCollection[KeyValuePair[str, str]]'>, <type 'IEnumerable[KeyValuePair[str, str]]'>, <type 'IEnumerable'>, <type 'IDictionary'>, <type 'ICollection[KeyValuePair[str, str]]'>, <type 'ISerializable'>, <type 'ICollection'>, <type 'IDeserializationCallback'>, <type 'object'>
    """ DatabaseFileMappingsDictionary() """
    pass

class DatabaseMaintenanceAdapter(DatabaseAdapter, IDatabaseMaintenanceFacet): # skipped bases: <type 'IDmfFacet'>, <type 'IAlterable'>, <type 'IRefreshable'>, <type 'IDmfAdapter'>, <type 'object'>
    """ DatabaseMaintenanceAdapter(obj: Database) """
    pass

class DatabaseMapping: # skipped bases: <type 'object'>, <type 'object'>
    """ DatabaseMapping(loginName: str, dbName: str, userName: str) """
    @property
    def DBName(self) -> str:
        """ Get: DBName(self: DatabaseMapping) -> str """
        ...

    @property
    def LoginName(self) -> str:
        """ Get: LoginName(self: DatabaseMapping) -> str """
        ...

    @property
    def UserName(self) -> str:
        """ Get: UserName(self: DatabaseMapping) -> str """
        ...


    def ToString(self) -> str:
        """ ToString(self: DatabaseMapping) -> str """
        ...


class EndpointPayload(SqlSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Endpoint:
        """ Get: Parent(self: EndpointPayload) -> Endpoint """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseMirroringPayload(EndpointPayload): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Certificate(self) -> str:
        """
        Get: Certificate(self: DatabaseMirroringPayload) -> str
        Set: Certificate(self: DatabaseMirroringPayload) = value
        """
        ...

    @property
    def EndpointAuthenticationOrder(self): # -> EndpointAuthenticationOrder
        """
        Get: EndpointAuthenticationOrder(self: DatabaseMirroringPayload) -> EndpointAuthenticationOrder
        Set: EndpointAuthenticationOrder(self: DatabaseMirroringPayload) = value
        """
        ...

    @property
    def EndpointEncryption(self): # -> EndpointEncryption
        """
        Get: EndpointEncryption(self: DatabaseMirroringPayload) -> EndpointEncryption
        Set: EndpointEncryption(self: DatabaseMirroringPayload) = value
        """
        ...

    @property
    def EndpointEncryptionAlgorithm(self): # -> EndpointEncryptionAlgorithm
        """
        Get: EndpointEncryptionAlgorithm(self: DatabaseMirroringPayload) -> EndpointEncryptionAlgorithm
        Set: EndpointEncryptionAlgorithm(self: DatabaseMirroringPayload) = value
        """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: DatabaseMirroringPayload) -> bool """
        ...

    @property
    def ServerMirroringRole(self): # -> ServerMirroringRole
        """
        Get: ServerMirroringRole(self: DatabaseMirroringPayload) -> ServerMirroringRole
        Set: ServerMirroringRole(self: DatabaseMirroringPayload) = value
        """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseObjectTypes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) DatabaseObjectTypes, values: All (35184372088831), ApplicationRole (1), AsymmetricKey (268435456), Certificate (134217728), ColumnEncryptionKey (2199023255552), ColumnMasterKey (1099511627776), DatabaseAuditSpecification (4294967296), DatabaseEncryptionKey (2147483648), DatabaseRole (256), DatabaseScopedConfiguration (17592186044416), DatabaseScopedCredential (8796093022208), Default (4), ExtendedStoredProcedure (8), ExternalDataSource (274877906944), ExternalFileFormat (549755813888), Federation (68719476736), FullTextCatalog (16), FullTextStopList (8589934592), MessageType (32), PartitionFunction (64), PartitionScheme (128), PlanGuide (1073741824), QueryStoreOptions (4398046511104), RemoteServiceBinding (512), Rule (1024), Schema (2048), SearchPropertyList (17179869184), SecurityPolicy (137438953472), Sequence (34359738368), ServiceBroker (2), ServiceContract (4096), ServiceQueue (8192), ServiceRoute (16384), SqlAssembly (32768), StoredProcedure (65536), SymmetricKey (67108864), Synonym (131072), Table (262144), User (524288), UserDefinedAggregate (1048576), UserDefinedDataType (2097152), UserDefinedFunction (4194304), UserDefinedTableTypes (536870912), UserDefinedType (8388608), View (16777216), XmlSchemaCollection (33554432) """
    All: DatabaseObjectTypes = ...
    ApplicationRole: DatabaseObjectTypes = ...
    AsymmetricKey: DatabaseObjectTypes = ...
    Certificate: DatabaseObjectTypes = ...
    ColumnEncryptionKey: DatabaseObjectTypes = ...
    ColumnMasterKey: DatabaseObjectTypes = ...
    DatabaseAuditSpecification: DatabaseObjectTypes = ...
    DatabaseEncryptionKey: DatabaseObjectTypes = ...
    DatabaseRole: DatabaseObjectTypes = ...
    DatabaseScopedConfiguration: DatabaseObjectTypes = ...
    DatabaseScopedCredential: DatabaseObjectTypes = ...
    Default: DatabaseObjectTypes = ...
    ExtendedStoredProcedure: DatabaseObjectTypes = ...
    ExternalDataSource: DatabaseObjectTypes = ...
    ExternalFileFormat: DatabaseObjectTypes = ...
    Federation: DatabaseObjectTypes = ...
    FullTextCatalog: DatabaseObjectTypes = ...
    FullTextStopList: DatabaseObjectTypes = ...
    MessageType: DatabaseObjectTypes = ...
    PartitionFunction: DatabaseObjectTypes = ...
    PartitionScheme: DatabaseObjectTypes = ...
    PlanGuide: DatabaseObjectTypes = ...
    QueryStoreOptions: DatabaseObjectTypes = ...
    RemoteServiceBinding: DatabaseObjectTypes = ...
    Rule: DatabaseObjectTypes = ...
    Schema: DatabaseObjectTypes = ...
    SearchPropertyList: DatabaseObjectTypes = ...
    SecurityPolicy: DatabaseObjectTypes = ...
    Sequence: DatabaseObjectTypes = ...
    ServiceBroker: DatabaseObjectTypes = ...
    ServiceContract: DatabaseObjectTypes = ...
    ServiceQueue: DatabaseObjectTypes = ...
    ServiceRoute: DatabaseObjectTypes = ...
    SqlAssembly: DatabaseObjectTypes = ...
    StoredProcedure: DatabaseObjectTypes = ...
    SymmetricKey: DatabaseObjectTypes = ...
    Synonym: DatabaseObjectTypes = ...
    Table: DatabaseObjectTypes = ...
    User: DatabaseObjectTypes = ...
    UserDefinedAggregate: DatabaseObjectTypes = ...
    UserDefinedDataType: DatabaseObjectTypes = ...
    UserDefinedFunction: DatabaseObjectTypes = ...
    UserDefinedTableTypes: DatabaseObjectTypes = ...
    UserDefinedType: DatabaseObjectTypes = ...
    value__ = ...
    View: DatabaseObjectTypes = ...
    XmlSchemaCollection: DatabaseObjectTypes = ...


class DatabaseOptions(SqlSmoObject, IAlterable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def AnsiNullDefault(self) -> bool:
        """
        Get: AnsiNullDefault(self: DatabaseOptions) -> bool
        Set: AnsiNullDefault(self: DatabaseOptions) = value
        """
        ...

    @property
    def AnsiNullsEnabled(self) -> bool:
        """
        Get: AnsiNullsEnabled(self: DatabaseOptions) -> bool
        Set: AnsiNullsEnabled(self: DatabaseOptions) = value
        """
        ...

    @property
    def AnsiPaddingEnabled(self) -> bool:
        """
        Get: AnsiPaddingEnabled(self: DatabaseOptions) -> bool
        Set: AnsiPaddingEnabled(self: DatabaseOptions) = value
        """
        ...

    @property
    def AnsiWarningsEnabled(self) -> bool:
        """
        Get: AnsiWarningsEnabled(self: DatabaseOptions) -> bool
        Set: AnsiWarningsEnabled(self: DatabaseOptions) = value
        """
        ...

    @property
    def ArithmeticAbortEnabled(self) -> bool:
        """
        Get: ArithmeticAbortEnabled(self: DatabaseOptions) -> bool
        Set: ArithmeticAbortEnabled(self: DatabaseOptions) = value
        """
        ...

    @property
    def AutoClose(self) -> bool:
        """
        Get: AutoClose(self: DatabaseOptions) -> bool
        Set: AutoClose(self: DatabaseOptions) = value
        """
        ...

    @property
    def AutoCreateStatistics(self) -> bool:
        """
        Get: AutoCreateStatistics(self: DatabaseOptions) -> bool
        Set: AutoCreateStatistics(self: DatabaseOptions) = value
        """
        ...

    @property
    def AutoCreateStatisticsIncremental(self) -> bool:
        """
        Get: AutoCreateStatisticsIncremental(self: DatabaseOptions) -> bool
        Set: AutoCreateStatisticsIncremental(self: DatabaseOptions) = value
        """
        ...

    @property
    def AutoShrink(self) -> bool:
        """
        Get: AutoShrink(self: DatabaseOptions) -> bool
        Set: AutoShrink(self: DatabaseOptions) = value
        """
        ...

    @property
    def AutoUpdateStatistics(self) -> bool:
        """
        Get: AutoUpdateStatistics(self: DatabaseOptions) -> bool
        Set: AutoUpdateStatistics(self: DatabaseOptions) = value
        """
        ...

    @property
    def AutoUpdateStatisticsAsync(self) -> bool:
        """
        Get: AutoUpdateStatisticsAsync(self: DatabaseOptions) -> bool
        Set: AutoUpdateStatisticsAsync(self: DatabaseOptions) = value
        """
        ...

    @property
    def BrokerEnabled(self) -> bool:
        """
        Get: BrokerEnabled(self: DatabaseOptions) -> bool
        Set: BrokerEnabled(self: DatabaseOptions) = value
        """
        ...

    @property
    def CloseCursorsOnCommitEnabled(self) -> bool:
        """
        Get: CloseCursorsOnCommitEnabled(self: DatabaseOptions) -> bool
        Set: CloseCursorsOnCommitEnabled(self: DatabaseOptions) = value
        """
        ...

    @property
    def ConcatenateNullYieldsNull(self) -> bool:
        """
        Get: ConcatenateNullYieldsNull(self: DatabaseOptions) -> bool
        Set: ConcatenateNullYieldsNull(self: DatabaseOptions) = value
        """
        ...

    @property
    def DatabaseOwnershipChaining(self) -> bool:
        """
        Get: DatabaseOwnershipChaining(self: DatabaseOptions) -> bool
        Set: DatabaseOwnershipChaining(self: DatabaseOptions) = value
        """
        ...

    @property
    def DateCorrelationOptimization(self) -> bool:
        """
        Get: DateCorrelationOptimization(self: DatabaseOptions) -> bool
        Set: DateCorrelationOptimization(self: DatabaseOptions) = value
        """
        ...

    @property
    def IsParameterizationForced(self) -> bool:
        """
        Get: IsParameterizationForced(self: DatabaseOptions) -> bool
        Set: IsParameterizationForced(self: DatabaseOptions) = value
        """
        ...

    @property
    def LocalCursorsDefault(self) -> bool:
        """
        Get: LocalCursorsDefault(self: DatabaseOptions) -> bool
        Set: LocalCursorsDefault(self: DatabaseOptions) = value
        """
        ...

    @property
    def MirroringRedoQueueMaxSize(self) -> int:
        """ Get: MirroringRedoQueueMaxSize(self: DatabaseOptions) -> int """
        ...

    @property
    def MirroringTimeout(self) -> int:
        """
        Get: MirroringTimeout(self: DatabaseOptions) -> int
        Set: MirroringTimeout(self: DatabaseOptions) = value
        """
        ...

    @property
    def NumericRoundAbortEnabled(self) -> bool:
        """
        Get: NumericRoundAbortEnabled(self: DatabaseOptions) -> bool
        Set: NumericRoundAbortEnabled(self: DatabaseOptions) = value
        """
        ...

    @property
    def PageVerify(self): # -> PageVerify
        """
        Get: PageVerify(self: DatabaseOptions) -> PageVerify
        Set: PageVerify(self: DatabaseOptions) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: DatabaseOptions) -> Database """
        ...

    @property
    def QuotedIdentifiersEnabled(self) -> bool:
        """
        Get: QuotedIdentifiersEnabled(self: DatabaseOptions) -> bool
        Set: QuotedIdentifiersEnabled(self: DatabaseOptions) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: DatabaseOptions) -> bool
        Set: ReadOnly(self: DatabaseOptions) = value
        """
        ...

    @property
    def RecoveryModel(self): # -> RecoveryModel
        """
        Get: RecoveryModel(self: DatabaseOptions) -> RecoveryModel
        Set: RecoveryModel(self: DatabaseOptions) = value
        """
        ...

    @property
    def RecursiveTriggersEnabled(self) -> bool:
        """
        Get: RecursiveTriggersEnabled(self: DatabaseOptions) -> bool
        Set: RecursiveTriggersEnabled(self: DatabaseOptions) = value
        """
        ...

    @property
    def SnapshotIsolationState(self): # -> SnapshotIsolationState
        """ Get: SnapshotIsolationState(self: DatabaseOptions) -> SnapshotIsolationState """
        ...

    @property
    def Trustworthy(self) -> bool:
        """
        Get: Trustworthy(self: DatabaseOptions) -> bool
        Set: Trustworthy(self: DatabaseOptions) = value
        """
        ...

    @property
    def UserAccess(self): # -> DatabaseUserAccess
        """
        Get: UserAccess(self: DatabaseOptions) -> DatabaseUserAccess
        Set: UserAccess(self: DatabaseOptions) = value
        """
        ...


    def SetSnapshotIsolation(self, enabled:bool): # -> 
        """ SetSnapshotIsolation(self: DatabaseOptions, enabled: bool) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DatabasePerformanceAdapter(IDatabasePerformanceFacet, DatabaseAdapterBase, IDmfAdapter): # skipped bases: <type 'IDmfFacet'>, <type 'IAlterable'>, <type 'IRefreshable'>, <type 'object'>
    """ DatabasePerformanceAdapter(obj: Database) """
    pass

class DatabasePermission: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Alter(self) -> DatabasePermission:
        """ Get: Alter() -> DatabasePermission """
        ...

    @property
    def AlterAnyApplicationRole(self) -> DatabasePermission:
        """ Get: AlterAnyApplicationRole() -> DatabasePermission """
        ...

    @property
    def AlterAnyAssembly(self) -> DatabasePermission:
        """ Get: AlterAnyAssembly() -> DatabasePermission """
        ...

    @property
    def AlterAnyAsymmetricKey(self) -> DatabasePermission:
        """ Get: AlterAnyAsymmetricKey() -> DatabasePermission """
        ...

    @property
    def AlterAnyCertificate(self) -> DatabasePermission:
        """ Get: AlterAnyCertificate() -> DatabasePermission """
        ...

    @property
    def AlterAnyContract(self) -> DatabasePermission:
        """ Get: AlterAnyContract() -> DatabasePermission """
        ...

    @property
    def AlterAnyDatabaseAudit(self) -> DatabasePermission:
        """ Get: AlterAnyDatabaseAudit() -> DatabasePermission """
        ...

    @property
    def AlterAnyDatabaseDdlTrigger(self) -> DatabasePermission:
        """ Get: AlterAnyDatabaseDdlTrigger() -> DatabasePermission """
        ...

    @property
    def AlterAnyDatabaseEventNotification(self) -> DatabasePermission:
        """ Get: AlterAnyDatabaseEventNotification() -> DatabasePermission """
        ...

    @property
    def AlterAnyDataspace(self) -> DatabasePermission:
        """ Get: AlterAnyDataspace() -> DatabasePermission """
        ...

    @property
    def AlterAnyExternalDataSource(self) -> DatabasePermission:
        """ Get: AlterAnyExternalDataSource() -> DatabasePermission """
        ...

    @property
    def AlterAnyExternalFileFormat(self) -> DatabasePermission:
        """ Get: AlterAnyExternalFileFormat() -> DatabasePermission """
        ...

    @property
    def AlterAnyFulltextCatalog(self) -> DatabasePermission:
        """ Get: AlterAnyFulltextCatalog() -> DatabasePermission """
        ...

    @property
    def AlterAnyMask(self) -> DatabasePermission:
        """ Get: AlterAnyMask() -> DatabasePermission """
        ...

    @property
    def AlterAnyMessageType(self) -> DatabasePermission:
        """ Get: AlterAnyMessageType() -> DatabasePermission """
        ...

    @property
    def AlterAnyRemoteServiceBinding(self) -> DatabasePermission:
        """ Get: AlterAnyRemoteServiceBinding() -> DatabasePermission """
        ...

    @property
    def AlterAnyRole(self) -> DatabasePermission:
        """ Get: AlterAnyRole() -> DatabasePermission """
        ...

    @property
    def AlterAnyRoute(self) -> DatabasePermission:
        """ Get: AlterAnyRoute() -> DatabasePermission """
        ...

    @property
    def AlterAnySchema(self) -> DatabasePermission:
        """ Get: AlterAnySchema() -> DatabasePermission """
        ...

    @property
    def AlterAnySecurityPolicy(self) -> DatabasePermission:
        """ Get: AlterAnySecurityPolicy() -> DatabasePermission """
        ...

    @property
    def AlterAnyService(self) -> DatabasePermission:
        """ Get: AlterAnyService() -> DatabasePermission """
        ...

    @property
    def AlterAnySymmetricKey(self) -> DatabasePermission:
        """ Get: AlterAnySymmetricKey() -> DatabasePermission """
        ...

    @property
    def AlterAnyUser(self) -> DatabasePermission:
        """ Get: AlterAnyUser() -> DatabasePermission """
        ...

    @property
    def Authenticate(self) -> DatabasePermission:
        """ Get: Authenticate() -> DatabasePermission """
        ...

    @property
    def BackupDatabase(self) -> DatabasePermission:
        """ Get: BackupDatabase() -> DatabasePermission """
        ...

    @property
    def BackupLog(self) -> DatabasePermission:
        """ Get: BackupLog() -> DatabasePermission """
        ...

    @property
    def Checkpoint(self) -> DatabasePermission:
        """ Get: Checkpoint() -> DatabasePermission """
        ...

    @property
    def Connect(self) -> DatabasePermission:
        """ Get: Connect() -> DatabasePermission """
        ...

    @property
    def ConnectReplication(self) -> DatabasePermission:
        """ Get: ConnectReplication() -> DatabasePermission """
        ...

    @property
    def Control(self) -> DatabasePermission:
        """ Get: Control() -> DatabasePermission """
        ...

    @property
    def CreateAggregate(self) -> DatabasePermission:
        """ Get: CreateAggregate() -> DatabasePermission """
        ...

    @property
    def CreateAssembly(self) -> DatabasePermission:
        """ Get: CreateAssembly() -> DatabasePermission """
        ...

    @property
    def CreateAsymmetricKey(self) -> DatabasePermission:
        """ Get: CreateAsymmetricKey() -> DatabasePermission """
        ...

    @property
    def CreateCertificate(self) -> DatabasePermission:
        """ Get: CreateCertificate() -> DatabasePermission """
        ...

    @property
    def CreateContract(self) -> DatabasePermission:
        """ Get: CreateContract() -> DatabasePermission """
        ...

    @property
    def CreateDatabase(self) -> DatabasePermission:
        """ Get: CreateDatabase() -> DatabasePermission """
        ...

    @property
    def CreateDatabaseDdlEventNotification(self) -> DatabasePermission:
        """ Get: CreateDatabaseDdlEventNotification() -> DatabasePermission """
        ...

    @property
    def CreateDefault(self) -> DatabasePermission:
        """ Get: CreateDefault() -> DatabasePermission """
        ...

    @property
    def CreateFulltextCatalog(self) -> DatabasePermission:
        """ Get: CreateFulltextCatalog() -> DatabasePermission """
        ...

    @property
    def CreateFunction(self) -> DatabasePermission:
        """ Get: CreateFunction() -> DatabasePermission """
        ...

    @property
    def CreateMessageType(self) -> DatabasePermission:
        """ Get: CreateMessageType() -> DatabasePermission """
        ...

    @property
    def CreateProcedure(self) -> DatabasePermission:
        """ Get: CreateProcedure() -> DatabasePermission """
        ...

    @property
    def CreateQueue(self) -> DatabasePermission:
        """ Get: CreateQueue() -> DatabasePermission """
        ...

    @property
    def CreateRemoteServiceBinding(self) -> DatabasePermission:
        """ Get: CreateRemoteServiceBinding() -> DatabasePermission """
        ...

    @property
    def CreateRole(self) -> DatabasePermission:
        """ Get: CreateRole() -> DatabasePermission """
        ...

    @property
    def CreateRoute(self) -> DatabasePermission:
        """ Get: CreateRoute() -> DatabasePermission """
        ...

    @property
    def CreateRule(self) -> DatabasePermission:
        """ Get: CreateRule() -> DatabasePermission """
        ...

    @property
    def CreateSchema(self) -> DatabasePermission:
        """ Get: CreateSchema() -> DatabasePermission """
        ...

    @property
    def CreateService(self) -> DatabasePermission:
        """ Get: CreateService() -> DatabasePermission """
        ...

    @property
    def CreateSymmetricKey(self) -> DatabasePermission:
        """ Get: CreateSymmetricKey() -> DatabasePermission """
        ...

    @property
    def CreateSynonym(self) -> DatabasePermission:
        """ Get: CreateSynonym() -> DatabasePermission """
        ...

    @property
    def CreateTable(self) -> DatabasePermission:
        """ Get: CreateTable() -> DatabasePermission """
        ...

    @property
    def CreateType(self) -> DatabasePermission:
        """ Get: CreateType() -> DatabasePermission """
        ...

    @property
    def CreateView(self) -> DatabasePermission:
        """ Get: CreateView() -> DatabasePermission """
        ...

    @property
    def CreateXmlSchemaCollection(self) -> DatabasePermission:
        """ Get: CreateXmlSchemaCollection() -> DatabasePermission """
        ...

    @property
    def Delete(self) -> DatabasePermission:
        """ Get: Delete() -> DatabasePermission """
        ...

    @property
    def Execute(self) -> DatabasePermission:
        """ Get: Execute() -> DatabasePermission """
        ...

    @property
    def Insert(self) -> DatabasePermission:
        """ Get: Insert() -> DatabasePermission """
        ...

    @property
    def References(self) -> DatabasePermission:
        """ Get: References() -> DatabasePermission """
        ...

    @property
    def Select(self) -> DatabasePermission:
        """ Get: Select() -> DatabasePermission """
        ...

    @property
    def Showplan(self) -> DatabasePermission:
        """ Get: Showplan() -> DatabasePermission """
        ...

    @property
    def SubscribeQueryNotifications(self) -> DatabasePermission:
        """ Get: SubscribeQueryNotifications() -> DatabasePermission """
        ...

    @property
    def TakeOwnership(self) -> DatabasePermission:
        """ Get: TakeOwnership() -> DatabasePermission """
        ...

    @property
    def Unmask(self) -> DatabasePermission:
        """ Get: Unmask() -> DatabasePermission """
        ...

    @property
    def Update(self) -> DatabasePermission:
        """ Get: Update() -> DatabasePermission """
        ...

    @property
    def ViewAnyColumnEncryptionKeyDefinition(self) -> DatabasePermission:
        """ Get: ViewAnyColumnEncryptionKeyDefinition() -> DatabasePermission """
        ...

    @property
    def ViewAnyColumnMasterKeyDefinition(self) -> DatabasePermission:
        """ Get: ViewAnyColumnMasterKeyDefinition() -> DatabasePermission """
        ...

    @property
    def ViewDatabaseState(self) -> DatabasePermission:
        """ Get: ViewDatabaseState() -> DatabasePermission """
        ...

    @property
    def ViewDefinition(self) -> DatabasePermission:
        """ Get: ViewDefinition() -> DatabasePermission """
        ...


    @staticmethod
    def Add(permissionLeft:DatabasePermission, permissionRight:DatabasePermission): # -> DatabasePermissionSet
        """ Add(permissionLeft: DatabasePermission, permissionRight: DatabasePermission) -> DatabasePermissionSet """
        ...

    @staticmethod
    def BitwiseOr(permissionLeft:DatabasePermission, permissionRight:DatabasePermission): # -> DatabasePermissionSet
        """ BitwiseOr(permissionLeft: DatabasePermission, permissionRight: DatabasePermission) -> DatabasePermissionSet """
        ...

    def Equals(self, o:object) -> bool:
        """ Equals(self: DatabasePermission, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: DatabasePermission) -> int """
        ...

    @staticmethod
    def ToDatabasePermissionSet(permission:DatabasePermission): # -> DatabasePermissionSet
        """ ToDatabasePermissionSet(permission: DatabasePermission) -> DatabasePermissionSet """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(permissionLeft: DatabasePermission, permissionRight: DatabasePermission) -> DatabasePermissionSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(permissionLeft: DatabasePermission, permissionRight: DatabasePermission) -> DatabasePermissionSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(permissionLeft: DatabasePermission, permissionRight: DatabasePermission) -> DatabasePermissionSet """
        ...



class PermissionInfo: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ColumnName(self) -> str:
        """ Get: ColumnName(self: PermissionInfo) -> str """
        ...

    @property
    def Grantee(self) -> str:
        """ Get: Grantee(self: PermissionInfo) -> str """
        ...

    @property
    def GranteeType(self): # -> PrincipalType
        """ Get: GranteeType(self: PermissionInfo) -> PrincipalType """
        ...

    @property
    def Grantor(self) -> str:
        """ Get: Grantor(self: PermissionInfo) -> str """
        ...

    @property
    def GrantorType(self): # -> PrincipalType
        """ Get: GrantorType(self: PermissionInfo) -> PrincipalType """
        ...

    @property
    def ObjectClass(self): # -> ObjectClass
        """ Get: ObjectClass(self: PermissionInfo) -> ObjectClass """
        ...

    @property
    def ObjectID(self) -> int:
        """ Get: ObjectID(self: PermissionInfo) -> int """
        ...

    @property
    def ObjectName(self) -> str:
        """ Get: ObjectName(self: PermissionInfo) -> str """
        ...

    @property
    def ObjectSchema(self) -> str:
        """ Get: ObjectSchema(self: PermissionInfo) -> str """
        ...

    @property
    def PermissionState(self) -> PermissionState:
        """ Get: PermissionState(self: PermissionInfo) -> PermissionState """
        ...

    @property
    def PermissionTypeInternal(self):
        ...


    def ToString(self) -> str:
        """ ToString(self: PermissionInfo) -> str """
        ...


class DatabasePermissionInfo(PermissionInfo): # skipped bases: <type 'object'>
    """ DatabasePermissionInfo() """
    @property
    def PermissionType(self): # -> DatabasePermissionSet
        """ Get: PermissionType(self: DatabasePermissionInfo) -> DatabasePermissionSet """
        ...



class PermissionSetBase: # skipped bases: <type 'object'>, <type 'object'>
    """
    PermissionSetBase()
    PermissionSetBase(permissionSetBase: PermissionSetBase)
    """
    def Equals(self, o:object) -> bool:
        """ Equals(self: PermissionSetBase, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: PermissionSetBase) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: PermissionSetBase) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class DatabasePermissionSet(PermissionSetBase): # skipped bases: <type 'object'>
    """
    DatabasePermissionSet()
    DatabasePermissionSet(oDatabasePermissionSet: DatabasePermissionSet)
    DatabasePermissionSet(permission: DatabasePermission)
    DatabasePermissionSet(*permissions: Array[DatabasePermission])
    """
    @property
    def Alter(self) -> bool:
        """
        Get: Alter(self: DatabasePermissionSet) -> bool
        Set: Alter(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyApplicationRole(self) -> bool:
        """
        Get: AlterAnyApplicationRole(self: DatabasePermissionSet) -> bool
        Set: AlterAnyApplicationRole(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyAssembly(self) -> bool:
        """
        Get: AlterAnyAssembly(self: DatabasePermissionSet) -> bool
        Set: AlterAnyAssembly(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyAsymmetricKey(self) -> bool:
        """
        Get: AlterAnyAsymmetricKey(self: DatabasePermissionSet) -> bool
        Set: AlterAnyAsymmetricKey(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyCertificate(self) -> bool:
        """
        Get: AlterAnyCertificate(self: DatabasePermissionSet) -> bool
        Set: AlterAnyCertificate(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyContract(self) -> bool:
        """
        Get: AlterAnyContract(self: DatabasePermissionSet) -> bool
        Set: AlterAnyContract(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyDatabaseAudit(self) -> bool:
        """
        Get: AlterAnyDatabaseAudit(self: DatabasePermissionSet) -> bool
        Set: AlterAnyDatabaseAudit(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyDatabaseDdlTrigger(self) -> bool:
        """
        Get: AlterAnyDatabaseDdlTrigger(self: DatabasePermissionSet) -> bool
        Set: AlterAnyDatabaseDdlTrigger(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyDatabaseEventNotification(self) -> bool:
        """
        Get: AlterAnyDatabaseEventNotification(self: DatabasePermissionSet) -> bool
        Set: AlterAnyDatabaseEventNotification(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyDataspace(self) -> bool:
        """
        Get: AlterAnyDataspace(self: DatabasePermissionSet) -> bool
        Set: AlterAnyDataspace(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyExternalDataSource(self) -> bool:
        """
        Get: AlterAnyExternalDataSource(self: DatabasePermissionSet) -> bool
        Set: AlterAnyExternalDataSource(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyExternalFileFormat(self) -> bool:
        """
        Get: AlterAnyExternalFileFormat(self: DatabasePermissionSet) -> bool
        Set: AlterAnyExternalFileFormat(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyFulltextCatalog(self) -> bool:
        """
        Get: AlterAnyFulltextCatalog(self: DatabasePermissionSet) -> bool
        Set: AlterAnyFulltextCatalog(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyMask(self) -> bool:
        """
        Get: AlterAnyMask(self: DatabasePermissionSet) -> bool
        Set: AlterAnyMask(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyMessageType(self) -> bool:
        """
        Get: AlterAnyMessageType(self: DatabasePermissionSet) -> bool
        Set: AlterAnyMessageType(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyRemoteServiceBinding(self) -> bool:
        """
        Get: AlterAnyRemoteServiceBinding(self: DatabasePermissionSet) -> bool
        Set: AlterAnyRemoteServiceBinding(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyRole(self) -> bool:
        """
        Get: AlterAnyRole(self: DatabasePermissionSet) -> bool
        Set: AlterAnyRole(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyRoute(self) -> bool:
        """
        Get: AlterAnyRoute(self: DatabasePermissionSet) -> bool
        Set: AlterAnyRoute(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnySchema(self) -> bool:
        """
        Get: AlterAnySchema(self: DatabasePermissionSet) -> bool
        Set: AlterAnySchema(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnySecurityPolicy(self) -> bool:
        """
        Get: AlterAnySecurityPolicy(self: DatabasePermissionSet) -> bool
        Set: AlterAnySecurityPolicy(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyService(self) -> bool:
        """
        Get: AlterAnyService(self: DatabasePermissionSet) -> bool
        Set: AlterAnyService(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnySymmetricKey(self) -> bool:
        """
        Get: AlterAnySymmetricKey(self: DatabasePermissionSet) -> bool
        Set: AlterAnySymmetricKey(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def AlterAnyUser(self) -> bool:
        """
        Get: AlterAnyUser(self: DatabasePermissionSet) -> bool
        Set: AlterAnyUser(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def Authenticate(self) -> bool:
        """
        Get: Authenticate(self: DatabasePermissionSet) -> bool
        Set: Authenticate(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def BackupDatabase(self) -> bool:
        """
        Get: BackupDatabase(self: DatabasePermissionSet) -> bool
        Set: BackupDatabase(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def BackupLog(self) -> bool:
        """
        Get: BackupLog(self: DatabasePermissionSet) -> bool
        Set: BackupLog(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def Checkpoint(self) -> bool:
        """
        Get: Checkpoint(self: DatabasePermissionSet) -> bool
        Set: Checkpoint(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def Connect(self) -> bool:
        """
        Get: Connect(self: DatabasePermissionSet) -> bool
        Set: Connect(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def ConnectReplication(self) -> bool:
        """
        Get: ConnectReplication(self: DatabasePermissionSet) -> bool
        Set: ConnectReplication(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def Control(self) -> bool:
        """
        Get: Control(self: DatabasePermissionSet) -> bool
        Set: Control(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateAggregate(self) -> bool:
        """
        Get: CreateAggregate(self: DatabasePermissionSet) -> bool
        Set: CreateAggregate(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateAssembly(self) -> bool:
        """
        Get: CreateAssembly(self: DatabasePermissionSet) -> bool
        Set: CreateAssembly(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateAsymmetricKey(self) -> bool:
        """
        Get: CreateAsymmetricKey(self: DatabasePermissionSet) -> bool
        Set: CreateAsymmetricKey(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateCertificate(self) -> bool:
        """
        Get: CreateCertificate(self: DatabasePermissionSet) -> bool
        Set: CreateCertificate(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateContract(self) -> bool:
        """
        Get: CreateContract(self: DatabasePermissionSet) -> bool
        Set: CreateContract(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateDatabase(self) -> bool:
        """
        Get: CreateDatabase(self: DatabasePermissionSet) -> bool
        Set: CreateDatabase(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateDatabaseDdlEventNotification(self) -> bool:
        """
        Get: CreateDatabaseDdlEventNotification(self: DatabasePermissionSet) -> bool
        Set: CreateDatabaseDdlEventNotification(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateDefault(self) -> bool:
        """
        Get: CreateDefault(self: DatabasePermissionSet) -> bool
        Set: CreateDefault(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateFulltextCatalog(self) -> bool:
        """
        Get: CreateFulltextCatalog(self: DatabasePermissionSet) -> bool
        Set: CreateFulltextCatalog(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateFunction(self) -> bool:
        """
        Get: CreateFunction(self: DatabasePermissionSet) -> bool
        Set: CreateFunction(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateMessageType(self) -> bool:
        """
        Get: CreateMessageType(self: DatabasePermissionSet) -> bool
        Set: CreateMessageType(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateProcedure(self) -> bool:
        """
        Get: CreateProcedure(self: DatabasePermissionSet) -> bool
        Set: CreateProcedure(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateQueue(self) -> bool:
        """
        Get: CreateQueue(self: DatabasePermissionSet) -> bool
        Set: CreateQueue(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateRemoteServiceBinding(self) -> bool:
        """
        Get: CreateRemoteServiceBinding(self: DatabasePermissionSet) -> bool
        Set: CreateRemoteServiceBinding(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateRole(self) -> bool:
        """
        Get: CreateRole(self: DatabasePermissionSet) -> bool
        Set: CreateRole(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateRoute(self) -> bool:
        """
        Get: CreateRoute(self: DatabasePermissionSet) -> bool
        Set: CreateRoute(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateRule(self) -> bool:
        """
        Get: CreateRule(self: DatabasePermissionSet) -> bool
        Set: CreateRule(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateSchema(self) -> bool:
        """
        Get: CreateSchema(self: DatabasePermissionSet) -> bool
        Set: CreateSchema(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateService(self) -> bool:
        """
        Get: CreateService(self: DatabasePermissionSet) -> bool
        Set: CreateService(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateSymmetricKey(self) -> bool:
        """
        Get: CreateSymmetricKey(self: DatabasePermissionSet) -> bool
        Set: CreateSymmetricKey(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateSynonym(self) -> bool:
        """
        Get: CreateSynonym(self: DatabasePermissionSet) -> bool
        Set: CreateSynonym(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateTable(self) -> bool:
        """
        Get: CreateTable(self: DatabasePermissionSet) -> bool
        Set: CreateTable(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateType(self) -> bool:
        """
        Get: CreateType(self: DatabasePermissionSet) -> bool
        Set: CreateType(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateView(self) -> bool:
        """
        Get: CreateView(self: DatabasePermissionSet) -> bool
        Set: CreateView(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def CreateXmlSchemaCollection(self) -> bool:
        """
        Get: CreateXmlSchemaCollection(self: DatabasePermissionSet) -> bool
        Set: CreateXmlSchemaCollection(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def Delete(self) -> bool:
        """
        Get: Delete(self: DatabasePermissionSet) -> bool
        Set: Delete(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def Execute(self) -> bool:
        """
        Get: Execute(self: DatabasePermissionSet) -> bool
        Set: Execute(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def Insert(self) -> bool:
        """
        Get: Insert(self: DatabasePermissionSet) -> bool
        Set: Insert(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def References(self) -> bool:
        """
        Get: References(self: DatabasePermissionSet) -> bool
        Set: References(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def Select(self) -> bool:
        """
        Get: Select(self: DatabasePermissionSet) -> bool
        Set: Select(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def Showplan(self) -> bool:
        """
        Get: Showplan(self: DatabasePermissionSet) -> bool
        Set: Showplan(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def SubscribeQueryNotifications(self) -> bool:
        """
        Get: SubscribeQueryNotifications(self: DatabasePermissionSet) -> bool
        Set: SubscribeQueryNotifications(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def TakeOwnership(self) -> bool:
        """
        Get: TakeOwnership(self: DatabasePermissionSet) -> bool
        Set: TakeOwnership(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def Unmask(self) -> bool:
        """
        Get: Unmask(self: DatabasePermissionSet) -> bool
        Set: Unmask(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def Update(self) -> bool:
        """
        Get: Update(self: DatabasePermissionSet) -> bool
        Set: Update(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def ViewDatabaseState(self) -> bool:
        """
        Get: ViewDatabaseState(self: DatabasePermissionSet) -> bool
        Set: ViewDatabaseState(self: DatabasePermissionSet) = value
        """
        ...

    @property
    def ViewDefinition(self) -> bool:
        """
        Get: ViewDefinition(self: DatabasePermissionSet) -> bool
        Set: ViewDefinition(self: DatabasePermissionSet) = value
        """
        ...


    def Add(self, *__args:DatabasePermission) -> DatabasePermissionSet:
        """
        Add(self: DatabasePermissionSet, permission: DatabasePermission) -> DatabasePermissionSet
        Add(permissionLeft: DatabasePermissionSet, permissionRight: DatabasePermission) -> DatabasePermissionSet
        """
        ...

    def Remove(self, permission:DatabasePermission) -> DatabasePermissionSet:
        """ Remove(self: DatabasePermissionSet, permission: DatabasePermission) -> DatabasePermissionSet """
        ...

    @staticmethod
    def Subtract(permissionLeft:DatabasePermissionSet, permissionRight:DatabasePermission) -> DatabasePermissionSet:
        """ Subtract(permissionLeft: DatabasePermissionSet, permissionRight: DatabasePermission) -> DatabasePermissionSet """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class DatabasePermissionSetValue(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DatabasePermissionSetValue, values: AdministerDatabaseBulkOperations (74), Alter (0), AlterAnyApplicationRole (2), AlterAnyAssembly (3), AlterAnyAsymmetricKey (1), AlterAnyCertificate (4), AlterAnyColumnEncryptionKey (70), AlterAnyColumnMasterKey (71), AlterAnyContract (12), AlterAnyDatabaseAudit (61), AlterAnyDatabaseDdlTrigger (16), AlterAnyDatabaseEventNotification (6), AlterAnyDatabaseEventSession (69), AlterAnyDatabaseScopedConfiguration (72), AlterAnyDataspace (5), AlterAnyExternalDataSource (63), AlterAnyExternalFileFormat (64), AlterAnyExternalLibrary (73), AlterAnyFulltextCatalog (7), AlterAnyMask (65), AlterAnyMessageType (8), AlterAnyRemoteServiceBinding (11), AlterAnyRole (9), AlterAnyRoute (10), AlterAnySchema (14), AlterAnySecurityPolicy (62), AlterAnyService (15), AlterAnySymmetricKey (13), AlterAnyUser (17), Authenticate (18), BackupDatabase (19), BackupLog (20), Checkpoint (24), Connect (22), ConnectReplication (23), Control (21), CreateAggregate (25), CreateAssembly (27), CreateAsymmetricKey (26), CreateCertificate (28), CreateContract (41), CreateDatabase (29), CreateDatabaseDdlEventNotification (31), CreateDefault (30), CreateFulltextCatalog (33), CreateFunction (32), CreateMessageType (34), CreateProcedure (35), CreateQueue (36), CreateRemoteServiceBinding (40), CreateRole (37), CreateRoute (38), CreateRule (39), CreateSchema (43), CreateService (45), CreateSymmetricKey (42), CreateSynonym (44), CreateTable (46), CreateType (47), CreateView (48), CreateXmlSchemaCollection (49), Delete (50), Execute (51), ExecuteAnyExternalScript (75), Insert (52), KillDatabaseConnection (76), References (53), Select (54), Showplan (55), SubscribeQueryNotifications (56), TakeOwnership (57), Unmask (66), Update (58), ViewAnyColumnEncryptionKeyDefinition (67), ViewAnyColumnMasterKeyDefinition (68), ViewDatabaseState (60), ViewDefinition (59) """
    AdministerDatabaseBulkOperations: DatabasePermissionSetValue = ...
    Alter: DatabasePermissionSetValue = ...
    AlterAnyApplicationRole: DatabasePermissionSetValue = ...
    AlterAnyAssembly: DatabasePermissionSetValue = ...
    AlterAnyAsymmetricKey: DatabasePermissionSetValue = ...
    AlterAnyCertificate: DatabasePermissionSetValue = ...
    AlterAnyColumnEncryptionKey: DatabasePermissionSetValue = ...
    AlterAnyColumnMasterKey: DatabasePermissionSetValue = ...
    AlterAnyContract: DatabasePermissionSetValue = ...
    AlterAnyDatabaseAudit: DatabasePermissionSetValue = ...
    AlterAnyDatabaseDdlTrigger: DatabasePermissionSetValue = ...
    AlterAnyDatabaseEventNotification: DatabasePermissionSetValue = ...
    AlterAnyDatabaseEventSession: DatabasePermissionSetValue = ...
    AlterAnyDatabaseScopedConfiguration: DatabasePermissionSetValue = ...
    AlterAnyDataspace: DatabasePermissionSetValue = ...
    AlterAnyExternalDataSource: DatabasePermissionSetValue = ...
    AlterAnyExternalFileFormat: DatabasePermissionSetValue = ...
    AlterAnyExternalLibrary: DatabasePermissionSetValue = ...
    AlterAnyFulltextCatalog: DatabasePermissionSetValue = ...
    AlterAnyMask: DatabasePermissionSetValue = ...
    AlterAnyMessageType: DatabasePermissionSetValue = ...
    AlterAnyRemoteServiceBinding: DatabasePermissionSetValue = ...
    AlterAnyRole: DatabasePermissionSetValue = ...
    AlterAnyRoute: DatabasePermissionSetValue = ...
    AlterAnySchema: DatabasePermissionSetValue = ...
    AlterAnySecurityPolicy: DatabasePermissionSetValue = ...
    AlterAnyService: DatabasePermissionSetValue = ...
    AlterAnySymmetricKey: DatabasePermissionSetValue = ...
    AlterAnyUser: DatabasePermissionSetValue = ...
    Authenticate: DatabasePermissionSetValue = ...
    BackupDatabase: DatabasePermissionSetValue = ...
    BackupLog: DatabasePermissionSetValue = ...
    Checkpoint: DatabasePermissionSetValue = ...
    Connect: DatabasePermissionSetValue = ...
    ConnectReplication: DatabasePermissionSetValue = ...
    Control: DatabasePermissionSetValue = ...
    CreateAggregate: DatabasePermissionSetValue = ...
    CreateAssembly: DatabasePermissionSetValue = ...
    CreateAsymmetricKey: DatabasePermissionSetValue = ...
    CreateCertificate: DatabasePermissionSetValue = ...
    CreateContract: DatabasePermissionSetValue = ...
    CreateDatabase: DatabasePermissionSetValue = ...
    CreateDatabaseDdlEventNotification: DatabasePermissionSetValue = ...
    CreateDefault: DatabasePermissionSetValue = ...
    CreateFulltextCatalog: DatabasePermissionSetValue = ...
    CreateFunction: DatabasePermissionSetValue = ...
    CreateMessageType: DatabasePermissionSetValue = ...
    CreateProcedure: DatabasePermissionSetValue = ...
    CreateQueue: DatabasePermissionSetValue = ...
    CreateRemoteServiceBinding: DatabasePermissionSetValue = ...
    CreateRole: DatabasePermissionSetValue = ...
    CreateRoute: DatabasePermissionSetValue = ...
    CreateRule: DatabasePermissionSetValue = ...
    CreateSchema: DatabasePermissionSetValue = ...
    CreateService: DatabasePermissionSetValue = ...
    CreateSymmetricKey: DatabasePermissionSetValue = ...
    CreateSynonym: DatabasePermissionSetValue = ...
    CreateTable: DatabasePermissionSetValue = ...
    CreateType: DatabasePermissionSetValue = ...
    CreateView: DatabasePermissionSetValue = ...
    CreateXmlSchemaCollection: DatabasePermissionSetValue = ...
    Delete: DatabasePermissionSetValue = ...
    Execute: DatabasePermissionSetValue = ...
    ExecuteAnyExternalScript: DatabasePermissionSetValue = ...
    Insert: DatabasePermissionSetValue = ...
    KillDatabaseConnection: DatabasePermissionSetValue = ...
    References: DatabasePermissionSetValue = ...
    Select: DatabasePermissionSetValue = ...
    Showplan: DatabasePermissionSetValue = ...
    SubscribeQueryNotifications: DatabasePermissionSetValue = ...
    TakeOwnership: DatabasePermissionSetValue = ...
    Unmask: DatabasePermissionSetValue = ...
    Update: DatabasePermissionSetValue = ...
    value__ = ...
    ViewAnyColumnEncryptionKeyDefinition: DatabasePermissionSetValue = ...
    ViewAnyColumnMasterKeyDefinition: DatabasePermissionSetValue = ...
    ViewDatabaseState: DatabasePermissionSetValue = ...
    ViewDefinition: DatabasePermissionSetValue = ...


class DatabaseRecoveryState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DatabaseRecoveryState, values: WithNoRecovery (1), WithRecovery (0), WithStandBy (2) """
    value__ = ...
    WithNoRecovery: DatabaseRecoveryState = ...
    WithRecovery: DatabaseRecoveryState = ...
    WithStandBy: DatabaseRecoveryState = ...


class DatabaseReplicaState(SqlSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def AvailabilityDatabaseName(self) -> str:
        """ Get: AvailabilityDatabaseName(self: DatabaseReplicaState) -> str """
        ...

    @property
    def AvailabilityDateabaseId(self) -> Guid:
        """ Get: AvailabilityDateabaseId(self: DatabaseReplicaState) -> Guid """
        ...

    @property
    def AvailabilityGroupId(self) -> Guid:
        """ Get: AvailabilityGroupId(self: DatabaseReplicaState) -> Guid """
        ...

    @property
    def AvailabilityGroupName(self) -> str:
        """ Get: AvailabilityGroupName(self: DatabaseReplicaState) -> str """
        ...

    @property
    def AvailabilityReplicaId(self) -> Guid:
        """ Get: AvailabilityReplicaId(self: DatabaseReplicaState) -> Guid """
        ...

    @property
    def AvailabilityReplicaServerName(self) -> str:
        """ Get: AvailabilityReplicaServerName(self: DatabaseReplicaState) -> str """
        ...

    @property
    def DatabaseId(self) -> int:
        """ Get: DatabaseId(self: DatabaseReplicaState) -> int """
        ...

    @property
    def EndOfLogLSN(self) -> Decimal:
        """ Get: EndOfLogLSN(self: DatabaseReplicaState) -> Decimal """
        ...

    @property
    def EstimatedDataLoss(self) -> int:
        """ Get: EstimatedDataLoss(self: DatabaseReplicaState) -> int """
        ...

    @property
    def EstimatedRecoveryTime(self) -> float:
        """ Get: EstimatedRecoveryTime(self: DatabaseReplicaState) -> float """
        ...

    @property
    def FileStreamSendRate(self) -> Int64:
        """ Get: FileStreamSendRate(self: DatabaseReplicaState) -> Int64 """
        ...

    @property
    def IsFailoverReady(self) -> bool:
        """ Get: IsFailoverReady(self: DatabaseReplicaState) -> bool """
        ...

    @property
    def IsJoined(self) -> bool:
        """ Get: IsJoined(self: DatabaseReplicaState) -> bool """
        ...

    @property
    def IsLocal(self) -> bool:
        """ Get: IsLocal(self: DatabaseReplicaState) -> bool """
        ...

    @property
    def IsSuspended(self) -> bool:
        """ Get: IsSuspended(self: DatabaseReplicaState) -> bool """
        ...

    @property
    def LastCommitLSN(self) -> Decimal:
        """ Get: LastCommitLSN(self: DatabaseReplicaState) -> Decimal """
        ...

    @property
    def LastCommitTime(self) -> DateTime:
        """ Get: LastCommitTime(self: DatabaseReplicaState) -> DateTime """
        ...

    @property
    def LastHardenedLSN(self) -> Decimal:
        """ Get: LastHardenedLSN(self: DatabaseReplicaState) -> Decimal """
        ...

    @property
    def LastHardenedTime(self) -> DateTime:
        """ Get: LastHardenedTime(self: DatabaseReplicaState) -> DateTime """
        ...

    @property
    def LastReceivedLSN(self) -> Decimal:
        """ Get: LastReceivedLSN(self: DatabaseReplicaState) -> Decimal """
        ...

    @property
    def LastReceivedTime(self) -> DateTime:
        """ Get: LastReceivedTime(self: DatabaseReplicaState) -> DateTime """
        ...

    @property
    def LastRedoneLSN(self) -> Decimal:
        """ Get: LastRedoneLSN(self: DatabaseReplicaState) -> Decimal """
        ...

    @property
    def LastRedoneTime(self) -> DateTime:
        """ Get: LastRedoneTime(self: DatabaseReplicaState) -> DateTime """
        ...

    @property
    def LastSentLSN(self) -> Decimal:
        """ Get: LastSentLSN(self: DatabaseReplicaState) -> Decimal """
        ...

    @property
    def LastSentTime(self) -> DateTime:
        """ Get: LastSentTime(self: DatabaseReplicaState) -> DateTime """
        ...

    @property
    def LogSendQueueSize(self) -> Int64:
        """ Get: LogSendQueueSize(self: DatabaseReplicaState) -> Int64 """
        ...

    @property
    def LogSendRate(self) -> Int64:
        """ Get: LogSendRate(self: DatabaseReplicaState) -> Int64 """
        ...

    @property
    def Parent(self) -> AvailabilityGroup:
        """ Get: Parent(self: DatabaseReplicaState) -> AvailabilityGroup """
        ...

    @property
    def RecoveryLSN(self) -> Decimal:
        """ Get: RecoveryLSN(self: DatabaseReplicaState) -> Decimal """
        ...

    @property
    def RedoQueueSize(self) -> Int64:
        """ Get: RedoQueueSize(self: DatabaseReplicaState) -> Int64 """
        ...

    @property
    def RedoRate(self) -> Int64:
        """ Get: RedoRate(self: DatabaseReplicaState) -> Int64 """
        ...

    @property
    def ReplicaAvailabilityMode(self) -> AvailabilityReplicaAvailabilityMode:
        """
        Get: ReplicaAvailabilityMode(self: DatabaseReplicaState) -> AvailabilityReplicaAvailabilityMode
        Set: ReplicaAvailabilityMode(self: DatabaseReplicaState) = value
        """
        ...

    @property
    def ReplicaRole(self) -> AvailabilityReplicaRole:
        """ Get: ReplicaRole(self: DatabaseReplicaState) -> AvailabilityReplicaRole """
        ...

    @property
    def SuspendReason(self): # -> DatabaseReplicaSuspendReason
        """ Get: SuspendReason(self: DatabaseReplicaState) -> DatabaseReplicaSuspendReason """
        ...

    @property
    def SynchronizationPerformance(self) -> float:
        """ Get: SynchronizationPerformance(self: DatabaseReplicaState) -> float """
        ...

    @property
    def SynchronizationState(self) -> AvailabilityDatabaseSynchronizationState:
        """ Get: SynchronizationState(self: DatabaseReplicaState) -> AvailabilityDatabaseSynchronizationState """
        ...

    @property
    def TruncationLSN(self) -> Decimal:
        """ Get: TruncationLSN(self: DatabaseReplicaState) -> Decimal """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseReplicaStateCollectionBase(SortedListCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    initialized = ...


class DatabaseReplicaStateCollection(DatabaseReplicaStateCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> AvailabilityGroup:
        """ Get: Parent(self: DatabaseReplicaStateCollection) -> AvailabilityGroup """
        ...


    def Add(self, DatabaseReplicaState:DatabaseReplicaState): # -> 
        """ Add(self: DatabaseReplicaStateCollection, DatabaseReplicaState: DatabaseReplicaState) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: DatabaseReplicaStateCollection, array: Array[DatabaseReplicaState], index: int) """
        ...

    def ItemById(self, id:int) -> DatabaseReplicaState:
        """ ItemById(self: DatabaseReplicaStateCollection, id: int) -> DatabaseReplicaState """
        ...

    def Remove(self, *__args:DatabaseReplicaState): # -> 
        """ Remove(self: DatabaseReplicaStateCollection, replicaName: str, name: str)Remove(self: DatabaseReplicaStateCollection, DatabaseReplicaState: DatabaseReplicaState) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class DatabaseReplicaSuspendReason(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DatabaseReplicaSuspendReason, values: NotApplicable (7), SuspendFromApply (3), SuspendFromCapture (4), SuspendFromPartner (1), SuspendFromRedo (2), SuspendFromRestart (5), SuspendFromUndo (6), SuspendFromUser (0) """
    NotApplicable: DatabaseReplicaSuspendReason = ...
    SuspendFromApply: DatabaseReplicaSuspendReason = ...
    SuspendFromCapture: DatabaseReplicaSuspendReason = ...
    SuspendFromPartner: DatabaseReplicaSuspendReason = ...
    SuspendFromRedo: DatabaseReplicaSuspendReason = ...
    SuspendFromRestart: DatabaseReplicaSuspendReason = ...
    SuspendFromUndo: DatabaseReplicaSuspendReason = ...
    SuspendFromUser: DatabaseReplicaSuspendReason = ...
    value__ = ...


class DatabaseRestorePlanner: # skipped bases: <type 'object'>, <type 'object'>
    """
    DatabaseRestorePlanner(server: Server)
    DatabaseRestorePlanner(server: Server, databaseName: str)
    DatabaseRestorePlanner(server: Server, databaseName: str, pointInTime: DateTime, tailLogBackupFile: str)
    """
    @property
    def BackupMediaList(self) -> ICollection:
        """ Get: BackupMediaList(self: DatabaseRestorePlanner) -> ICollection[BackupDeviceItem] """
        ...

    @property
    def BackupTailLog(self) -> bool:
        """
        Get: BackupTailLog(self: DatabaseRestorePlanner) -> bool
        Set: BackupTailLog(self: DatabaseRestorePlanner) = value
        """
        ...

    @property
    def DatabaseName(self) -> str:
        """
        Get: DatabaseName(self: DatabaseRestorePlanner) -> str
        Set: DatabaseName(self: DatabaseRestorePlanner) = value
        """
        ...

    @property
    def ReadHeaderFromMedia(self) -> bool:
        """
        Get: ReadHeaderFromMedia(self: DatabaseRestorePlanner) -> bool
        Set: ReadHeaderFromMedia(self: DatabaseRestorePlanner) = value
        """
        ...

    @property
    def RestoreToLastBackup(self) -> bool:
        """
        Get: RestoreToLastBackup(self: DatabaseRestorePlanner) -> bool
        Set: RestoreToLastBackup(self: DatabaseRestorePlanner) = value
        """
        ...

    @property
    def RestoreToPointInTime(self) -> DateTime:
        """
        Get: RestoreToPointInTime(self: DatabaseRestorePlanner) -> DateTime
        Set: RestoreToPointInTime(self: DatabaseRestorePlanner) = value
        """
        ...

    @property
    def Server(self): # -> Server
        """
        Get: Server(self: DatabaseRestorePlanner) -> Server
        Set: Server(self: DatabaseRestorePlanner) = value
        """
        ...

    @property
    def TailLogBackupFile(self) -> str:
        """
        Get: TailLogBackupFile(self: DatabaseRestorePlanner) -> str
        Set: TailLogBackupFile(self: DatabaseRestorePlanner) = value
        """
        ...

    @property
    def TailLogWithNoRecovery(self) -> bool:
        """
        Get: TailLogWithNoRecovery(self: DatabaseRestorePlanner) -> bool
        Set: TailLogWithNoRecovery(self: DatabaseRestorePlanner) = value
        """
        ...


    def CreateRestorePlan(self, ro:RestoreOptions = ...) -> RestorePlan:
        """
        CreateRestorePlan(self: DatabaseRestorePlanner) -> RestorePlan
        CreateRestorePlan(self: DatabaseRestorePlanner, ro: RestoreOptions) -> RestorePlan
        """
        ...

    def CreateRestorePlanEventHandler(self, *args): #cannot find CLR method
        """ CreateRestorePlanEventHandler(object: object, method: IntPtr) """
        ...

    CreateRestorePlanUpdates = ...


class DatabaseRole(IDroppable, IAlterable, ICreatable, IScriptable, IRenamable, IObjectPermission, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    DatabaseRole()
    DatabaseRole(database: Database, name: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: DatabaseRole) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: DatabaseRole) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: DatabaseRole) -> int """
        ...

    @property
    def IsFixedRole(self) -> bool:
        """ Get: IsFixedRole(self: DatabaseRole) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: DatabaseRole) -> str
        Set: Name(self: DatabaseRole) = value
        """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: DatabaseRole) -> str
        Set: Owner(self: DatabaseRole) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: DatabaseRole) -> Database
        Set: Parent(self: DatabaseRole) = value
        """
        ...


    def AddMember(self, name:str): # -> 
        """ AddMember(self: DatabaseRole, name: str) """
        ...

    def DropMember(self, name:str): # -> 
        """ DropMember(self: DatabaseRole, name: str) """
        ...

    def EnumAgentProxyAccounts(self) -> DataTable:
        """ EnumAgentProxyAccounts(self: DatabaseRole) -> DataTable """
        ...

    def EnumMembers(self) -> StringCollection:
        """ EnumMembers(self: DatabaseRole) -> StringCollection """
        ...

    def EnumRoles(self) -> StringCollection:
        """ EnumRoles(self: DatabaseRole) -> StringCollection """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseRoleCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: DatabaseRoleCollection) -> Database """
        ...


    def Add(self, databaseRole:DatabaseRole): # -> 
        """ Add(self: DatabaseRoleCollection, databaseRole: DatabaseRole) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: DatabaseRoleCollection, array: Array[DatabaseRole], index: int) """
        ...

    def ItemById(self, id:int) -> DatabaseRole:
        """ ItemById(self: DatabaseRoleCollection, id: int) -> DatabaseRole """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class DatabaseScopedConfiguration(NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    DatabaseScopedConfiguration()
    DatabaseScopedConfiguration(database: Database, name: str)
    """
    @property
    def Id(self) -> int:
        """ Get: Id(self: DatabaseScopedConfiguration) -> int """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: DatabaseScopedConfiguration) -> Database
        Set: Parent(self: DatabaseScopedConfiguration) = value
        """
        ...

    @property
    def Value(self) -> str:
        """
        Get: Value(self: DatabaseScopedConfiguration) -> str
        Set: Value(self: DatabaseScopedConfiguration) = value
        """
        ...

    @property
    def ValueForSecondary(self) -> str:
        """
        Get: ValueForSecondary(self: DatabaseScopedConfiguration) -> str
        Set: ValueForSecondary(self: DatabaseScopedConfiguration) = value
        """
        ...


    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseScopedConfigurationCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: DatabaseScopedConfigurationCollection) -> Database """
        ...


    def Add(self, databaseScopedConfiguration:DatabaseScopedConfiguration): # -> 
        """ Add(self: DatabaseScopedConfigurationCollection, databaseScopedConfiguration: DatabaseScopedConfiguration) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: DatabaseScopedConfigurationCollection, array: Array[DatabaseScopedConfiguration], index: int) """
        ...

    def ItemById(self, id:int) -> DatabaseScopedConfiguration:
        """ ItemById(self: DatabaseScopedConfigurationCollection, id: int) -> DatabaseScopedConfiguration """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class DatabaseScopedConfigurationOnOff(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DatabaseScopedConfigurationOnOff, values: Off (0), On (1), Primary (2) """
    Off: DatabaseScopedConfigurationOnOff = ...
    On: DatabaseScopedConfigurationOnOff = ...
    Primary: DatabaseScopedConfigurationOnOff = ...
    value__ = ...


class DatabaseScopedConfigurationOnOffConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ DatabaseScopedConfigurationOnOffConverter() """
    pass

class DatabaseScopedCredential(IDroppable, IAlterable, ICreatable, IScriptable, IDropIfExists, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    DatabaseScopedCredential()
    DatabaseScopedCredential(database: Database, name: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: DatabaseScopedCredential) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: DatabaseScopedCredential) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: DatabaseScopedCredential) -> int """
        ...

    @property
    def Identity(self) -> str:
        """
        Get: Identity(self: DatabaseScopedCredential) -> str
        Set: Identity(self: DatabaseScopedCredential) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: DatabaseScopedCredential) -> Database
        Set: Parent(self: DatabaseScopedCredential) = value
        """
        ...


    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DatabaseScopedCredentialCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: DatabaseScopedCredentialCollection) -> Database """
        ...


    def Add(self, databaseScopedCredential:DatabaseScopedCredential): # -> 
        """ Add(self: DatabaseScopedCredentialCollection, databaseScopedCredential: DatabaseScopedCredential) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: DatabaseScopedCredentialCollection, array: Array[DatabaseScopedCredential], index: int) """
        ...

    def ItemById(self, id:int) -> DatabaseScopedCredential:
        """ ItemById(self: DatabaseScopedCredentialCollection, id: int) -> DatabaseScopedCredential """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class DatabaseSecurityAdapter(DatabaseAdapter, IDatabaseSecurityFacet): # skipped bases: <type 'IDmfFacet'>, <type 'IAlterable'>, <type 'IRefreshable'>, <type 'IDmfAdapter'>, <type 'object'>
    """ DatabaseSecurityAdapter(obj: Database) """
    pass

class DatabaseSnapshotExtender(SmoObjectExtender, ISfcValidate): # skipped bases: <type 'INotifyPropertyChanged'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcPropertyProvider'>, <type 'object'>
    """
    DatabaseSnapshotExtender()
    DatabaseSnapshotExtender(database: Database)
    """
    @property
    def Files(self) -> ReadOnlyCollection:
        """ Get: Files(self: DatabaseSnapshotExtender) -> ReadOnlyCollection[DataFile] """
        ...



class DatabaseStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) DatabaseStatus, values: AutoClosed (512), EmergencyMode (256), Inaccessible (62), Normal (1), Offline (32), Recovering (8), RecoveryPending (4), Restoring (2), Shutdown (128), Standby (64), Suspect (16) """
    AutoClosed: DatabaseStatus = ...
    EmergencyMode: DatabaseStatus = ...
    Inaccessible: DatabaseStatus = ...
    Normal: DatabaseStatus = ...
    Offline: DatabaseStatus = ...
    Recovering: DatabaseStatus = ...
    RecoveryPending: DatabaseStatus = ...
    Restoring: DatabaseStatus = ...
    Shutdown: DatabaseStatus = ...
    Standby: DatabaseStatus = ...
    Suspect: DatabaseStatus = ...
    value__ = ...


class DatabaseUserAccess(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DatabaseUserAccess, values: Multiple (0), Restricted (2), Single (1) """
    Multiple: DatabaseUserAccess = ...
    Restricted: DatabaseUserAccess = ...
    Single: DatabaseUserAccess = ...
    value__ = ...


class DataCompressionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DataCompressionType, values: ColumnStore (3), ColumnStoreArchive (4), None (0), Page (2), Row (1) """
    ColumnStore: DataCompressionType = ...
    ColumnStoreArchive: DataCompressionType = ...
    Page: DataCompressionType = ...
    Row: DataCompressionType = ...
    value__ = ...


class DataFile(ISfcSupportsDesignMode, ICreatable, DatabaseFile): # skipped bases: <type 'IDroppable'>, <type 'IAlienObject'>, <type 'IAlterable'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'IRenamable'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IMarkForDrop'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    DataFile()
    DataFile(fileGroup: FileGroup, name: str)
    DataFile(fileGroup: FileGroup, name: str, fileName: str)
    """
    @property
    def AvailableSpace(self) -> float:
        """ Get: AvailableSpace(self: DataFile) -> float """
        ...

    @property
    def BytesReadFromDisk(self) -> Int64:
        """ Get: BytesReadFromDisk(self: DataFile) -> Int64 """
        ...

    @property
    def BytesWrittenToDisk(self) -> Int64:
        """ Get: BytesWrittenToDisk(self: DataFile) -> Int64 """
        ...

    @property
    def FileName(self) -> str:
        """
        Get: FileName(self: DataFile) -> str
        Set: FileName(self: DataFile) = value
        """
        ...

    @property
    def Growth(self) -> float:
        """
        Get: Growth(self: DataFile) -> float
        Set: Growth(self: DataFile) = value
        """
        ...

    @property
    def GrowthType(self): # -> FileGrowthType
        """
        Get: GrowthType(self: DataFile) -> FileGrowthType
        Set: GrowthType(self: DataFile) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: DataFile) -> int """
        ...

    @property
    def IsOffline(self) -> bool:
        """ Get: IsOffline(self: DataFile) -> bool """
        ...

    @property
    def IsPrimaryFile(self) -> bool:
        """
        Get: IsPrimaryFile(self: DataFile) -> bool
        Set: IsPrimaryFile(self: DataFile) = value
        """
        ...

    @property
    def IsReadOnly(self) -> bool:
        """ Get: IsReadOnly(self: DataFile) -> bool """
        ...

    @property
    def IsReadOnlyMedia(self) -> bool:
        """ Get: IsReadOnlyMedia(self: DataFile) -> bool """
        ...

    @property
    def IsSparse(self) -> bool:
        """ Get: IsSparse(self: DataFile) -> bool """
        ...

    @property
    def MaxSize(self) -> float:
        """
        Get: MaxSize(self: DataFile) -> float
        Set: MaxSize(self: DataFile) = value
        """
        ...

    @property
    def NumberOfDiskReads(self) -> Int64:
        """ Get: NumberOfDiskReads(self: DataFile) -> Int64 """
        ...

    @property
    def NumberOfDiskWrites(self) -> Int64:
        """ Get: NumberOfDiskWrites(self: DataFile) -> Int64 """
        ...

    @property
    def Parent(self): # -> FileGroup
        """
        Get: Parent(self: DataFile) -> FileGroup
        Set: Parent(self: DataFile) = value
        """
        ...

    @property
    def Size(self) -> float:
        """
        Get: Size(self: DataFile) -> float
        Set: Size(self: DataFile) = value
        """
        ...

    @property
    def UsedSpace(self) -> float:
        """ Get: UsedSpace(self: DataFile) -> float """
        ...

    @property
    def VolumeFreeSpace(self) -> Int64:
        """ Get: VolumeFreeSpace(self: DataFile) -> Int64 """
        ...


    def SetOffline(self): # -> 
        """ SetOffline(self: DataFile) """
        ...

    def __new__(cls, fileGroup = ..., name:str = ..., fileName:str = ...) -> Self: # Not found arg types: {'fileGroup': 'FileGroup'}
        """
        __new__(cls: type)
        __new__(cls: type, fileGroup: FileGroup, name: str)
        __new__(cls: type, fileGroup: FileGroup, name: str, fileName: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class DataFileCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> FileGroup
        """ Get: Parent(self: DataFileCollection) -> FileGroup """
        ...


    def Add(self, dataFile:DataFile): # -> 
        """ Add(self: DataFileCollection, dataFile: DataFile) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: DataFileCollection, array: Array[DataFile], index: int) """
        ...

    def ItemById(self, id:int) -> DataFile:
        """ ItemById(self: DataFileCollection, id: int) -> DataFile """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: DataFileCollection, name: str)Remove(self: DataFileCollection, dataFile: DataFile) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class TransferBase: # skipped bases: <type 'object'>, <type 'object'>
    """
    TransferBase()
    TransferBase(database: Database)
    """
    @property
    def CopyAllDatabaseTriggers(self) -> bool:
        """
        Get: CopyAllDatabaseTriggers(self: TransferBase) -> bool
        Set: CopyAllDatabaseTriggers(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllDefaults(self) -> bool:
        """
        Get: CopyAllDefaults(self: TransferBase) -> bool
        Set: CopyAllDefaults(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllFullTextCatalogs(self) -> bool:
        """
        Get: CopyAllFullTextCatalogs(self: TransferBase) -> bool
        Set: CopyAllFullTextCatalogs(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllFullTextStopLists(self) -> bool:
        """
        Get: CopyAllFullTextStopLists(self: TransferBase) -> bool
        Set: CopyAllFullTextStopLists(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllLogins(self) -> bool:
        """
        Get: CopyAllLogins(self: TransferBase) -> bool
        Set: CopyAllLogins(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllObjects(self) -> bool:
        """
        Get: CopyAllObjects(self: TransferBase) -> bool
        Set: CopyAllObjects(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllPartitionFunctions(self) -> bool:
        """
        Get: CopyAllPartitionFunctions(self: TransferBase) -> bool
        Set: CopyAllPartitionFunctions(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllPartitionSchemes(self) -> bool:
        """
        Get: CopyAllPartitionSchemes(self: TransferBase) -> bool
        Set: CopyAllPartitionSchemes(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllPlanGuides(self) -> bool:
        """
        Get: CopyAllPlanGuides(self: TransferBase) -> bool
        Set: CopyAllPlanGuides(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllRoles(self) -> bool:
        """
        Get: CopyAllRoles(self: TransferBase) -> bool
        Set: CopyAllRoles(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllRules(self) -> bool:
        """
        Get: CopyAllRules(self: TransferBase) -> bool
        Set: CopyAllRules(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllSchemas(self) -> bool:
        """
        Get: CopyAllSchemas(self: TransferBase) -> bool
        Set: CopyAllSchemas(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllSearchPropertyLists(self) -> bool:
        """
        Get: CopyAllSearchPropertyLists(self: TransferBase) -> bool
        Set: CopyAllSearchPropertyLists(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllSequences(self) -> bool:
        """
        Get: CopyAllSequences(self: TransferBase) -> bool
        Set: CopyAllSequences(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllSqlAssemblies(self) -> bool:
        """
        Get: CopyAllSqlAssemblies(self: TransferBase) -> bool
        Set: CopyAllSqlAssemblies(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllStoredProcedures(self) -> bool:
        """
        Get: CopyAllStoredProcedures(self: TransferBase) -> bool
        Set: CopyAllStoredProcedures(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllSynonyms(self) -> bool:
        """
        Get: CopyAllSynonyms(self: TransferBase) -> bool
        Set: CopyAllSynonyms(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllTables(self) -> bool:
        """
        Get: CopyAllTables(self: TransferBase) -> bool
        Set: CopyAllTables(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllUserDefinedAggregates(self) -> bool:
        """
        Get: CopyAllUserDefinedAggregates(self: TransferBase) -> bool
        Set: CopyAllUserDefinedAggregates(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllUserDefinedDataTypes(self) -> bool:
        """
        Get: CopyAllUserDefinedDataTypes(self: TransferBase) -> bool
        Set: CopyAllUserDefinedDataTypes(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllUserDefinedFunctions(self) -> bool:
        """
        Get: CopyAllUserDefinedFunctions(self: TransferBase) -> bool
        Set: CopyAllUserDefinedFunctions(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllUserDefinedTableTypes(self) -> bool:
        """
        Get: CopyAllUserDefinedTableTypes(self: TransferBase) -> bool
        Set: CopyAllUserDefinedTableTypes(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllUserDefinedTypes(self) -> bool:
        """
        Get: CopyAllUserDefinedTypes(self: TransferBase) -> bool
        Set: CopyAllUserDefinedTypes(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllUsers(self) -> bool:
        """
        Get: CopyAllUsers(self: TransferBase) -> bool
        Set: CopyAllUsers(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllViews(self) -> bool:
        """
        Get: CopyAllViews(self: TransferBase) -> bool
        Set: CopyAllViews(self: TransferBase) = value
        """
        ...

    @property
    def CopyAllXmlSchemaCollections(self) -> bool:
        """
        Get: CopyAllXmlSchemaCollections(self: TransferBase) -> bool
        Set: CopyAllXmlSchemaCollections(self: TransferBase) = value
        """
        ...

    @property
    def CopyData(self) -> bool:
        """
        Get: CopyData(self: TransferBase) -> bool
        Set: CopyData(self: TransferBase) = value
        """
        ...

    @property
    def CopySchema(self) -> bool:
        """
        Get: CopySchema(self: TransferBase) -> bool
        Set: CopySchema(self: TransferBase) = value
        """
        ...

    @property
    def CreateTargetDatabase(self) -> bool:
        """
        Get: CreateTargetDatabase(self: TransferBase) -> bool
        Set: CreateTargetDatabase(self: TransferBase) = value
        """
        ...

    @property
    def Database(self) -> Database:
        """
        Get: Database(self: TransferBase) -> Database
        Set: Database(self: TransferBase) = value
        """
        ...

    @property
    def DatabaseFileMappings(self) -> DatabaseFileMappingsDictionary:
        """
        Get: DatabaseFileMappings(self: TransferBase) -> DatabaseFileMappingsDictionary
        Set: DatabaseFileMappings(self: TransferBase) = value
        """
        ...

    @property
    def DestinationDatabase(self) -> str:
        """
        Get: DestinationDatabase(self: TransferBase) -> str
        Set: DestinationDatabase(self: TransferBase) = value
        """
        ...

    @property
    def DestinationLogin(self) -> str:
        """
        Get: DestinationLogin(self: TransferBase) -> str
        Set: DestinationLogin(self: TransferBase) = value
        """
        ...

    @property
    def DestinationLoginSecure(self) -> bool:
        """
        Get: DestinationLoginSecure(self: TransferBase) -> bool
        Set: DestinationLoginSecure(self: TransferBase) = value
        """
        ...

    @property
    def DestinationPassword(self) -> str:
        """
        Get: DestinationPassword(self: TransferBase) -> str
        Set: DestinationPassword(self: TransferBase) = value
        """
        ...

    @property
    def DestinationServer(self) -> str:
        """
        Get: DestinationServer(self: TransferBase) -> str
        Set: DestinationServer(self: TransferBase) = value
        """
        ...

    @property
    def DestinationTranslateChar(self) -> bool:
        """
        Get: DestinationTranslateChar(self: TransferBase) -> bool
        Set: DestinationTranslateChar(self: TransferBase) = value
        """
        ...

    @property
    def DropDestinationObjectsFirst(self) -> bool:
        """
        Get: DropDestinationObjectsFirst(self: TransferBase) -> bool
        Set: DropDestinationObjectsFirst(self: TransferBase) = value
        """
        ...

    @property
    def ObjectList(self) -> ArrayList:
        """
        Get: ObjectList(self: TransferBase) -> ArrayList
        Set: ObjectList(self: TransferBase) = value
        """
        ...

    @property
    def Options(self): # -> ScriptingOptions
        """
        Get: Options(self: TransferBase) -> ScriptingOptions
        Set: Options(self: TransferBase) = value
        """
        ...

    @property
    def PrefetchObjects(self) -> bool:
        """
        Get: PrefetchObjects(self: TransferBase) -> bool
        Set: PrefetchObjects(self: TransferBase) = value
        """
        ...

    @property
    def PreserveDbo(self) -> bool:
        """
        Get: PreserveDbo(self: TransferBase) -> bool
        Set: PreserveDbo(self: TransferBase) = value
        """
        ...

    @property
    def PreserveLogins(self) -> bool:
        """
        Get: PreserveLogins(self: TransferBase) -> bool
        Set: PreserveLogins(self: TransferBase) = value
        """
        ...

    @property
    def Scripter(self):
        ...

    @property
    def SourceTranslateChar(self) -> bool:
        """
        Get: SourceTranslateChar(self: TransferBase) -> bool
        Set: SourceTranslateChar(self: TransferBase) = value
        """
        ...

    @property
    def TargetDatabaseFilePath(self) -> str:
        """
        Get: TargetDatabaseFilePath(self: TransferBase) -> str
        Set: TargetDatabaseFilePath(self: TransferBase) = value
        """
        ...

    @property
    def TargetLogFilePath(self) -> str:
        """
        Get: TargetLogFilePath(self: TransferBase) -> str
        Set: TargetLogFilePath(self: TransferBase) = value
        """
        ...

    @property
    def UseDestinationTransaction(self) -> bool:
        """
        Get: UseDestinationTransaction(self: TransferBase) -> bool
        Set: UseDestinationTransaction(self: TransferBase) = value
        """
        ...


    def EnumObjects(self): # -> UrnCollection
        """ EnumObjects(self: TransferBase) -> UrnCollection """
        ...

    def EnumScriptTransfer(self) -> IEnumerable:
        """ EnumScriptTransfer(self: TransferBase) -> IEnumerable[str] """
        ...

    def ScriptTransfer(self) -> StringCollection:
        """ ScriptTransfer(self: TransferBase) -> StringCollection """
        ...

    def SetTargetServerInfo(self, *args): #cannot find CLR method
        """ SetTargetServerInfo(self: TransferBase) """
        ...

    DiscoveryProgress = ...
    ScriptingError = ...
    ScriptingProgress = ...


class DataTransferBase(TransferBase): # skipped bases: <type 'object'>
    """
    DataTransferBase()
    DataTransferBase(database: Database)
    """
    pass

class DataType(IXmlSerializable): # skipped bases: <type 'object'>
    """
    DataType()
    DataType(sqlDataType: SqlDataType)
    DataType(sqlDataType: SqlDataType, precisionOrMaxLengthOrScale: int)
    DataType(sqlDataType: SqlDataType, precision: int, scale: int)
    DataType(sqlDataType: SqlDataType, type: str)
    DataType(sqlDataType: SqlDataType, type: str, schema: str)
    DataType(xmlSchemaCollection: XmlSchemaCollection)
    DataType(userDefinedDataType: UserDefinedDataType)
    DataType(userDefinedTableType: UserDefinedTableType)
    DataType(userDefinedType: UserDefinedType)
    """
    @property
    def BigInt(self) -> DataType:
        """ Get: BigInt() -> DataType """
        ...

    @property
    def Bit(self) -> DataType:
        """ Get: Bit() -> DataType """
        ...

    @property
    def Date(self) -> DataType:
        """ Get: Date() -> DataType """
        ...

    @property
    def DateTime(self) -> DataType:
        """ Get: DateTime() -> DataType """
        ...

    @property
    def Float(self) -> DataType:
        """ Get: Float() -> DataType """
        ...

    @property
    def Geography(self) -> DataType:
        """ Get: Geography() -> DataType """
        ...

    @property
    def Geometry(self) -> DataType:
        """ Get: Geometry() -> DataType """
        ...

    @property
    def HierarchyId(self) -> DataType:
        """ Get: HierarchyId() -> DataType """
        ...

    @property
    def Image(self) -> DataType:
        """ Get: Image() -> DataType """
        ...

    @property
    def Int(self) -> DataType:
        """ Get: Int() -> DataType """
        ...

    @property
    def IsNumericType(self) -> bool:
        """ Get: IsNumericType(self: DataType) -> bool """
        ...

    @property
    def IsStringType(self) -> bool:
        """ Get: IsStringType(self: DataType) -> bool """
        ...

    @property
    def MaximumLength(self) -> int:
        """
        Get: MaximumLength(self: DataType) -> int
        Set: MaximumLength(self: DataType) = value
        """
        ...

    @property
    def Money(self) -> DataType:
        """ Get: Money() -> DataType """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: DataType) -> str
        Set: Name(self: DataType) = value
        """
        ...

    @property
    def NText(self) -> DataType:
        """ Get: NText() -> DataType """
        ...

    @property
    def NumericPrecision(self) -> int:
        """
        Get: NumericPrecision(self: DataType) -> int
        Set: NumericPrecision(self: DataType) = value
        """
        ...

    @property
    def NumericScale(self) -> int:
        """
        Get: NumericScale(self: DataType) -> int
        Set: NumericScale(self: DataType) = value
        """
        ...

    @property
    def NVarCharMax(self) -> DataType:
        """ Get: NVarCharMax() -> DataType """
        ...

    @property
    def Real(self) -> DataType:
        """ Get: Real() -> DataType """
        ...

    @property
    def Schema(self) -> str:
        """
        Get: Schema(self: DataType) -> str
        Set: Schema(self: DataType) = value
        """
        ...

    @property
    def SmallDateTime(self) -> DataType:
        """ Get: SmallDateTime() -> DataType """
        ...

    @property
    def SmallInt(self) -> DataType:
        """ Get: SmallInt() -> DataType """
        ...

    @property
    def SmallMoney(self) -> DataType:
        """ Get: SmallMoney() -> DataType """
        ...

    @property
    def SqlDataType(self) -> SqlDataType:
        """
        Get: SqlDataType(self: DataType) -> SqlDataType
        Set: SqlDataType(self: DataType) = value
        """
        ...

    @property
    def SysName(self) -> DataType:
        """ Get: SysName() -> DataType """
        ...

    @property
    def Text(self) -> DataType:
        """ Get: Text() -> DataType """
        ...

    @property
    def Timestamp(self) -> DataType:
        """ Get: Timestamp() -> DataType """
        ...

    @property
    def TinyInt(self) -> DataType:
        """ Get: TinyInt() -> DataType """
        ...

    @property
    def UniqueIdentifier(self) -> DataType:
        """ Get: UniqueIdentifier() -> DataType """
        ...

    @property
    def VarBinaryMax(self) -> DataType:
        """ Get: VarBinaryMax() -> DataType """
        ...

    @property
    def VarCharMax(self) -> DataType:
        """ Get: VarCharMax() -> DataType """
        ...

    @property
    def Variant(self) -> DataType:
        """ Get: Variant() -> DataType """
        ...

    @property
    def XmlDocumentConstraint(self): # -> XmlDocumentConstraint
        """
        Get: XmlDocumentConstraint(self: DataType) -> XmlDocumentConstraint
        Set: XmlDocumentConstraint(self: DataType) = value
        """
        ...


    @staticmethod
    def Binary(maxLength:int) -> DataType:
        """ Binary(maxLength: int) -> DataType """
        ...

    @staticmethod
    def Char(maxLength:int) -> DataType:
        """ Char(maxLength: int) -> DataType """
        ...

    @staticmethod
    def DateTime2(scale:int) -> DataType:
        """ DateTime2(scale: int) -> DataType """
        ...

    @staticmethod
    def DateTimeOffset(scale:int) -> DataType:
        """ DateTimeOffset(scale: int) -> DataType """
        ...

    @staticmethod
    def Decimal(scale:int, precision:int) -> DataType:
        """ Decimal(scale: int, precision: int) -> DataType """
        ...

    def Equals(self, *__args:object) -> bool:
        """
        Equals(self: DataType, obj: object) -> bool
        Equals(self: DataType, dt: DataType) -> bool
        """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: DataType) -> int """
        ...

    @staticmethod
    def NChar(maxLength:int) -> DataType:
        """ NChar(maxLength: int) -> DataType """
        ...

    @staticmethod
    def Numeric(scale:int, precision:int) -> DataType:
        """ Numeric(scale: int, precision: int) -> DataType """
        ...

    @staticmethod
    def NVarChar(maxLength:int) -> DataType:
        """ NVarChar(maxLength: int) -> DataType """
        ...

    @staticmethod
    def SqlToEnum(sqlTypeName:str) -> SqlDataType:
        """ SqlToEnum(sqlTypeName: str) -> SqlDataType """
        ...

    @staticmethod
    def Time(scale:int) -> DataType:
        """ Time(scale: int) -> DataType """
        ...

    def ToString(self) -> str:
        """ ToString(self: DataType) -> str """
        ...

    @staticmethod
    def UserDefinedDataType(type:str, schema:str = ...) -> DataType:
        """
        UserDefinedDataType(type: str, schema: str) -> DataType
        UserDefinedDataType(type: str) -> DataType
        """
        ...

    @staticmethod
    def UserDefinedTableType(type:str, schema:str = ...) -> DataType:
        """
        UserDefinedTableType(type: str, schema: str) -> DataType
        UserDefinedTableType(type: str) -> DataType
        """
        ...

    @staticmethod
    def UserDefinedType(type:str, schema:str = ...) -> DataType:
        """
        UserDefinedType(type: str, schema: str) -> DataType
        UserDefinedType(type: str) -> DataType
        """
        ...

    @staticmethod
    def VarBinary(maxLength:int) -> DataType:
        """ VarBinary(maxLength: int) -> DataType """
        ...

    @staticmethod
    def VarChar(maxLength:int) -> DataType:
        """ VarChar(maxLength: int) -> DataType """
        ...

    @staticmethod
    def Xml(type:str, schema:str = ..., xmlDocumentConstraint = ...) -> DataType: # Not found arg types: {'xmlDocumentConstraint': 'XmlDocumentConstraint'}
        """
        Xml(type: str) -> DataType
        Xml(type: str, schema: str) -> DataType
        Xml(type: str, schema: str, xmlDocumentConstraint: XmlDocumentConstraint) -> DataType
        """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==yx.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...



class DdlTextParserHeaderInfo: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    database = ...
    databaseSecondary = ...
    indexCreate = ...
    indexNameEnd = ...
    indexNameEndSecondary = ...
    indexNameStart = ...
    indexNameStartSecondary = ...
    indexOrAlterEnd = ...
    indexOrAlterStart = ...
    name = ...
    nameSecondary = ...
    objectType = ...
    procedureNumber = ...
    schema = ...
    schemaSecondary = ...
    scriptContainsOrAlter = ...
    scriptForCreate = ...


class ScriptSchemaObjectBase(ScriptNameObjectBase): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Name(self) -> str:
        """
        Get: Name(self: ScriptSchemaObjectBase) -> str
        Set: Name(self: ScriptSchemaObjectBase) = value
        """
        ...

    @property
    def Schema(self) -> str:
        """
        Get: Schema(self: ScriptSchemaObjectBase) -> str
        Set: Schema(self: ScriptSchemaObjectBase) = value
        """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class DefaultRuleBase(IDroppable, IAlterable, ICreatable, IScriptable, ITextObject, IDropIfExists, ScriptSchemaObjectBase, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    def BindToColumn(self, tablename:str, colname:str, tableschema:str = ...): # -> 
        """ BindToColumn(self: DefaultRuleBase, tablename: str, colname: str, tableschema: str)BindToColumn(self: DefaultRuleBase, tablename: str, colname: str) """
        ...

    def BindToDataType(self, datatypename:str, bindcolumns:bool): # -> 
        """ BindToDataType(self: DefaultRuleBase, datatypename: str, bindcolumns: bool) """
        ...

    def EnumBoundColumns(self) -> Array:
        """ EnumBoundColumns(self: DefaultRuleBase) -> Array[SqlSmoObject] """
        ...

    def EnumBoundDataTypes(self) -> Array:
        """ EnumBoundDataTypes(self: DefaultRuleBase) -> Array[SqlSmoObject] """
        ...

    def UnbindFromColumn(self, tablename:str, colname:str, tableschema:str = ...): # -> 
        """ UnbindFromColumn(self: DefaultRuleBase, tablename: str, colname: str)UnbindFromColumn(self: DefaultRuleBase, tablename: str, colname: str, tableschema: str) """
        ...

    def UnbindFromDataType(self, datatypename:str, bindcolumns:bool): # -> 
        """ UnbindFromDataType(self: DefaultRuleBase, datatypename: str, bindcolumns: bool) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class Default(ISfcSupportsDesignMode, DefaultRuleBase): # skipped bases: <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IScriptable'>, <type 'ISqlSmoObjectInitialize'>, <type 'IDroppable'>, <type 'ICreatable'>, <type 'IAlienObject'>, <type 'IAlterable'>, <type 'IDropIfExists'>, <type 'ITextObject'>, <type 'IExtendedProperties'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'object'>
    """
    Default()
    Default(database: Database, name: str)
    Default(database: Database, name: str, schema: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: Default) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Default) -> int """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: Default) -> Database
        Set: Parent(self: Default) = value
        """
        ...


    def ChangeSchema(self, newSchema:str): # -> 
        """ ChangeSchema(self: Default, newSchema: str) """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SchemaCollectionBase(SortedListCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Contains(self, name:str, schema:str = ...) -> bool:
        """
        Contains(self: SchemaCollectionBase, name: str) -> bool
        Contains(self: SchemaCollectionBase, name: str, schema: str) -> bool
        """
        ...

    initialized = ...


class DefaultCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: DefaultCollection) -> Database """
        ...


    def Add(self, def_:Default): # -> 
        """ Add(self: DefaultCollection, def: Default) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: DefaultCollection, array: Array[Default], index: int) """
        ...

    def ItemById(self, id:int) -> Default:
        """ ItemById(self: DefaultCollection, id: int) -> Default """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class DefaultConstraint(IDroppable, IAlterable, ICreatable, IScriptable, IRenamable, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: DefaultConstraint) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: DefaultConstraint) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: DefaultConstraint) -> int """
        ...

    @property
    def IsFileTableDefined(self) -> bool:
        """ Get: IsFileTableDefined(self: DefaultConstraint) -> bool """
        ...

    @property
    def IsSystemNamed(self) -> bool:
        """ Get: IsSystemNamed(self: DefaultConstraint) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: DefaultConstraint) -> str
        Set: Name(self: DefaultConstraint) = value
        """
        ...

    @property
    def Parent(self) -> Column:
        """ Get: Parent(self: DefaultConstraint) -> Column """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: DefaultConstraint) -> str
        Set: Text(self: DefaultConstraint) = value
        """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class DefaultLanguage: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Lcid(self) -> int:
        """
        Get: Lcid(self: DefaultLanguage) -> int
        Set: Lcid(self: DefaultLanguage) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: DefaultLanguage) -> str
        Set: Name(self: DefaultLanguage) = value
        """
        ...


    def Equals(self, obj:object) -> bool:
        """ Equals(self: DefaultLanguage, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: DefaultLanguage) -> int """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class DelayedDurability(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DelayedDurability, values: Allowed (1), Disabled (0), Forced (2) """
    Allowed: DelayedDurability = ...
    Disabled: DelayedDurability = ...
    Forced: DelayedDurability = ...
    value__ = ...


class DependencyCollection(IList): # skipped bases: <type 'ICollection[DependencyCollectionNode]'>, <type 'IEnumerable'>, <type 'IEnumerable[DependencyCollectionNode]'>, <type 'object'>
    """ DependencyCollection() """
    @property
    def Count(self) -> int:
        """ Get: Count(self: DependencyCollection) -> int """
        ...


    def Add(self, dependencyCollectionNode): # ->  # Not found arg types: {'dependencyCollectionNode': 'DependencyCollectionNode'}
        """ Add(self: DependencyCollection, dependencyCollectionNode: DependencyCollectionNode) """
        ...

    def AddRange(self, dependencyCollectionNodeCollection:IEnumerable): # -> 
        """ AddRange(self: DependencyCollection, dependencyCollectionNodeCollection: IEnumerable[DependencyCollectionNode]) """
        ...

    def Clear(self): # -> 
        """ Clear(self: DependencyCollection) """
        ...

    def Contains(self, dependencyCollectionNode) -> bool: # Not found arg types: {'dependencyCollectionNode': 'DependencyCollectionNode'}
        """ Contains(self: DependencyCollection, dependencyCollectionNode: DependencyCollectionNode) -> bool """
        ...

    def ContainsUrn(self, urn:Urn, srv) -> bool: # Not found arg types: {'srv': 'Server'}
        """ ContainsUrn(self: DependencyCollection, urn: Urn, srv: Server) -> bool """
        ...

    def CopyTo(self, array:Array, arrayIndex:int): # -> 
        """ CopyTo(self: DependencyCollection, array: Array[DependencyCollectionNode], arrayIndex: int) """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: DependencyCollection) -> IEnumerator[DependencyCollectionNode] """
        ...

    def Remove(self, dependencyCollectionNode) -> bool: # Not found arg types: {'dependencyCollectionNode': 'DependencyCollectionNode'}
        """ Remove(self: DependencyCollection, dependencyCollectionNode: DependencyCollectionNode) -> bool """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class DependencyNode: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def IsSchemaBound(self) -> bool:
        """
        Get: IsSchemaBound(self: DependencyNode) -> bool
        Set: IsSchemaBound(self: DependencyNode) = value
        """
        ...

    @property
    def Urn(self) -> Urn:
        """
        Get: Urn(self: DependencyNode) -> Urn
        Set: Urn(self: DependencyNode) = value
        """
        ...



class DependencyCollectionNode(DependencyNode): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def IsRootNode(self) -> bool:
        """
        Get: IsRootNode(self: DependencyCollectionNode) -> bool
        Set: IsRootNode(self: DependencyCollectionNode) = value
        """
        ...



class DependencyTreeNode(DependencyNode): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def FirstChild(self) -> DependencyTreeNode:
        """ Get: FirstChild(self: DependencyTreeNode) -> DependencyTreeNode """
        ...

    @property
    def HasChildNodes(self) -> bool:
        """ Get: HasChildNodes(self: DependencyTreeNode) -> bool """
        ...

    @property
    def Index(self):
        ...

    @property
    def NextSibling(self) -> DependencyTreeNode:
        """ Get: NextSibling(self: DependencyTreeNode) -> DependencyTreeNode """
        ...

    @property
    def NumberOfSiblings(self) -> int:
        """ Get: NumberOfSiblings(self: DependencyTreeNode) -> int """
        ...

    @property
    def Siblings(self):
        ...



class DependencyTree(DependencyTreeNode): # skipped bases: <type 'object'>
    """ DependencyTree(tree: DependencyTree) """
    @property
    def Count(self) -> int:
        """ Get: Count(self: DependencyTree) -> int """
        ...

    @property
    def Dependencies(self):
        ...

    @property
    def DependsOnParents(self):
        ...

    @property
    def Roots(self):
        ...

    @property
    def Urn(self) -> Urn:
        """ Get: Urn(self: DependencyTree) -> Urn """
        ...


    def Copy(self) -> DependencyTree:
        """ Copy(self: DependencyTree) -> DependencyTree """
        ...

    def Remove(self, depNode:DependencyTreeNode): # -> 
        """ Remove(self: DependencyTree, depNode: DependencyTreeNode) """
        ...

    def __new__(cls, tree:DependencyTree) -> Self:
        """ __new__(cls: type, tree: DependencyTree) """
        ...


class DependencyType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DependencyType, values: Children (0), Parents (1) """
    Children: DependencyType = ...
    Parents: DependencyType = ...
    value__ = ...


class DependencyWalker: # skipped bases: <type 'object'>, <type 'object'>
    """
    DependencyWalker()
    DependencyWalker(server: Server)
    """
    @property
    def DependencyTree(self):
        ...

    @property
    def FilterCallbackFunction(self): # -> ScriptingFilter
        """
        Get: FilterCallbackFunction(self: DependencyWalker) -> ScriptingFilter
        Set: FilterCallbackFunction(self: DependencyWalker) = value
        """
        ...

    @property
    def KnownObjectsList(self):
        ...

    @property
    def Server(self): # -> Server
        """
        Get: Server(self: DependencyWalker) -> Server
        Set: Server(self: DependencyWalker) = value
        """
        ...

    @property
    def Total(self):
        ...

    @property
    def TotalCount(self):
        ...


    def DiscoverDependencies(self, *__args) -> DependencyTree:
        """
        DiscoverDependencies(self: DependencyWalker, list: UrnCollection, dependencyType: DependencyType) -> DependencyTree
        DiscoverDependencies(self: DependencyWalker, objects: Array[SqlSmoObject], dependencyType: DependencyType) -> DependencyTree
        DiscoverDependencies(self: DependencyWalker, urns: Array[Urn], dependencyType: DependencyType) -> DependencyTree
        DiscoverDependencies(self: DependencyWalker, list: UrnCollection, parents: bool) -> DependencyTree
        DiscoverDependencies(self: DependencyWalker, objects: Array[SqlSmoObject], parents: bool) -> DependencyTree
        DiscoverDependencies(self: DependencyWalker, urns: Array[Urn], parents: bool) -> DependencyTree
        """
        ...

    def GetServerObject(self, *args): #cannot find CLR method
        """ GetServerObject(self: DependencyWalker) -> Server """
        ...

    def WalkDependencies(self, tree:DependencyTree) -> DependencyCollection:
        """ WalkDependencies(self: DependencyWalker, tree: DependencyTree) -> DependencyCollection """
        ...

    DiscoveryProgress = ...


class DeviceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DeviceType, values: File (2), LogicalDevice (0), Pipe (3), Tape (1), Url (5), VirtualDevice (4) """
    File: DeviceType = ...
    LogicalDevice: DeviceType = ...
    Pipe: DeviceType = ...
    Tape: DeviceType = ...
    Url: DeviceType = ...
    value__ = ...
    VirtualDevice: DeviceType = ...


class DistributionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DistributionType, values: Range (0) """
    Range: DistributionType = ...
    value__ = ...


class DurabilityType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DurabilityType, values: SchemaAndData (1), SchemaOnly (0) """
    SchemaAndData: DurabilityType = ...
    SchemaOnly: DurabilityType = ...
    value__ = ...


class DwTableDistributionConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ DwTableDistributionConverter() """
    pass

class DwTableDistributionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DwTableDistributionType, values: Hash (2), None (1), Replicate (3), RoundRobin (4), Undefined (0) """
    Hash: DwTableDistributionType = ...
    Replicate: DwTableDistributionType = ...
    RoundRobin: DwTableDistributionType = ...
    Undefined: DwTableDistributionType = ...
    value__ = ...


class Edition(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum Edition, values: EnterpriseOrDeveloper (3), Express (4), PersonalOrDesktopEngine (1), SqlDatabase (5), SqlDataWarehouse (6), SqlStretchDatabase (7), Standard (2), Unknown (0) """
    EnterpriseOrDeveloper: Edition = ...
    Express: Edition = ...
    PersonalOrDesktopEngine: Edition = ...
    SqlDatabase: Edition = ...
    SqlDataWarehouse: Edition = ...
    SqlStretchDatabase: Edition = ...
    Standard: Edition = ...
    Unknown: Edition = ...
    value__ = ...


class Endpoint(IDroppable, IAlterable, ICreatable, IScriptable, IObjectPermission, ScriptNameObjectBase, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Endpoint()
    Endpoint(server: Server, name: str)
    """
    @property
    def EndpointState(self): # -> EndpointState
        """ Get: EndpointState(self: Endpoint) -> EndpointState """
        ...

    @property
    def EndpointType(self): # -> EndpointType
        """
        Get: EndpointType(self: Endpoint) -> EndpointType
        Set: EndpointType(self: Endpoint) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Endpoint) -> int """
        ...

    @property
    def IsAdminEndpoint(self) -> bool:
        """ Get: IsAdminEndpoint(self: Endpoint) -> bool """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: Endpoint) -> bool """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: Endpoint) -> str
        Set: Owner(self: Endpoint) = value
        """
        ...

    @property
    def Parent(self): # -> Server
        """
        Get: Parent(self: Endpoint) -> Server
        Set: Parent(self: Endpoint) = value
        """
        ...

    @property
    def Payload(self): # -> Payload
        """ Get: Payload(self: Endpoint) -> Payload """
        ...

    @property
    def Protocol(self): # -> Protocol
        """ Get: Protocol(self: Endpoint) -> Protocol """
        ...

    @property
    def ProtocolType(self) -> ProtocolType:
        """
        Get: ProtocolType(self: Endpoint) -> ProtocolType
        Set: ProtocolType(self: Endpoint) = value
        """
        ...


    def Disable(self): # -> 
        """ Disable(self: Endpoint) """
        ...

    def Start(self): # -> 
        """ Start(self: Endpoint) """
        ...

    def Stop(self): # -> 
        """ Stop(self: Endpoint) """
        ...

    def __new__(cls, server = ..., name:str = ...) -> Self: # Not found arg types: {'server': 'Server'}
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class EndpointAuthenticationOrder(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EndpointAuthenticationOrder, values: Certificate (4), CertificateKerberos (9), CertificateNegotiate (10), CertificateNtlm (8), Kerberos (2), KerberosCertificate (6), Negotiate (3), NegotiateCertificate (7), Ntlm (1), NtlmCertificate (5) """
    Certificate: EndpointAuthenticationOrder = ...
    CertificateKerberos: EndpointAuthenticationOrder = ...
    CertificateNegotiate: EndpointAuthenticationOrder = ...
    CertificateNtlm: EndpointAuthenticationOrder = ...
    Kerberos: EndpointAuthenticationOrder = ...
    KerberosCertificate: EndpointAuthenticationOrder = ...
    Negotiate: EndpointAuthenticationOrder = ...
    NegotiateCertificate: EndpointAuthenticationOrder = ...
    Ntlm: EndpointAuthenticationOrder = ...
    NtlmCertificate: EndpointAuthenticationOrder = ...
    value__ = ...


class EndpointCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: EndpointCollection) -> Server """
        ...


    def Add(self, endpoint:Endpoint): # -> 
        """ Add(self: EndpointCollection, endpoint: Endpoint) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: EndpointCollection, array: Array[Endpoint], index: int) """
        ...

    def EnumEndpoints(self, endpointType) -> Array: # Not found arg types: {'endpointType': 'EndpointType'}
        """ EnumEndpoints(self: EndpointCollection, endpointType: EndpointType) -> Array[Endpoint] """
        ...

    def ItemById(self, id:int) -> Endpoint:
        """ ItemById(self: EndpointCollection, id: int) -> Endpoint """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class EndpointEncryption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EndpointEncryption, values: Disabled (0), Required (2), Supported (1) """
    Disabled: EndpointEncryption = ...
    Required: EndpointEncryption = ...
    Supported: EndpointEncryption = ...
    value__ = ...


class EndpointEncryptionAlgorithm(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EndpointEncryptionAlgorithm, values: Aes (2), AesRC4 (3), None (0), RC4 (1), RC4Aes (4) """
    Aes: EndpointEncryptionAlgorithm = ...
    AesRC4: EndpointEncryptionAlgorithm = ...
    RC4: EndpointEncryptionAlgorithm = ...
    RC4Aes: EndpointEncryptionAlgorithm = ...
    value__ = ...


class EndpointProtocol(SqlSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Endpoint:
        """ Get: Parent(self: EndpointProtocol) -> Endpoint """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class EndpointState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EndpointState, values: Disabled (2), Started (0), Stopped (1) """
    Disabled: EndpointState = ...
    Started: EndpointState = ...
    Stopped: EndpointState = ...
    value__ = ...


class EndpointType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EndpointType, values: DatabaseMirroring (4), ServiceBroker (3), Soap (1), TSql (2) """
    DatabaseMirroring: EndpointType = ...
    ServiceBroker: EndpointType = ...
    Soap: EndpointType = ...
    TSql: EndpointType = ...
    value__ = ...


class EventProperty: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Name(self) -> str:
        """ Get: Name(self: EventProperty) -> str """
        ...

    @property
    def Value(self) -> object:
        """ Get: Value(self: EventProperty) -> object """
        ...



class EventPropertyCollection(IEnumerable, ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[EventProperty](enumerable: IEnumerable[EventProperty], value: EventProperty) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...


class EventType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EventType, values: AddRoleMember (0), AddServerRoleMember (1), AddSignature (2), AddSignatureSchemaObject (3), AlterApplicationRole (4), AlterAssembly (5), AlterAsymmetricKey (6), AlterAudit (7), AlterAuthorizationDatabase (8), AlterAuthorizationServer (9), AlterAvailabilityGroup (10), AlterBrokerPriority (11), AlterCertificate (12), AlterColumnEncryptionKey (13), AlterCredential (14), AlterCryptographicProvider (15), AlterDatabase (16), AlterDatabaseAuditSpecification (17), AlterDatabaseEncryptionKey (18), AlterEndpoint (19), AlterEventSession (20), AlterExtendedProperty (21), AlterFulltextCatalog (22), AlterFulltextIndex (23), AlterFulltextStoplist (24), AlterFunction (25), AlterIndex (26), AlterInstance (27), AlterLinkedServer (28), AlterLogin (29), AlterMasterKey (30), AlterMessage (31), AlterMessageType (32), AlterPartitionFunction (33), AlterPartitionScheme (34), AlterPlanGuide (35), AlterProcedure (36), AlterQueue (37), AlterRemoteServer (38), AlterRemoteServiceBinding (39), AlterResourceGovernorConfig (40), AlterResourcePool (41), AlterRole (42), AlterRoute (43), AlterSchema (44), AlterSearchPropertyList (45), AlterSecurityPolicy (46), AlterSequence (47), AlterServerAudit (48), AlterServerAuditSpecification (49), AlterServerConfiguration (50), AlterServerRole (51), AlterService (52), AlterServiceMasterKey (53), AlterSymmetricKey (54), AlterTable (55), AlterTrigger (56), AlterUser (57), AlterView (58), AlterWorkloadGroup (59), AlterXmlSchemaCollection (60), AssemblyLoad (61), AuditAddDBUserEvent (63), AuditAddloginEvent (62), AuditAddLoginToServerRoleEvent (64), AuditAddMemberToDBRoleEvent (65), AuditAddRoleEvent (66), AuditAppRoleChangePasswordEvent (67), AuditBackupRestoreEvent (68), AuditChangeAuditEvent (69), AuditChangeDatabaseOwner (70), AuditDatabaseManagementEvent (71), AuditDatabaseObjectAccessEvent (72), AuditDatabaseObjectGdrEvent (73), AuditDatabaseObjectManagementEvent (74), AuditDatabaseObjectTakeOwnershipEvent (75), AuditDatabaseOperationEvent (76), AuditDatabasePrincipalImpersonationEvent (77), AuditDatabasePrincipalManagementEvent (78), AuditDatabaseScopeGdrEvent (79), AuditDbccEvent (80), AuditFulltext (81), AuditLogin (82), AuditLoginChangePasswordEvent (83), AuditLoginChangePropertyEvent (84), AuditLoginFailed (85), AuditLoginGdrEvent (86), AuditLogout (87), AuditSchemaObjectAccessEvent (88), AuditSchemaObjectGdrEvent (89), AuditSchemaObjectManagementEvent (90), AuditSchemaObjectTakeOwnershipEvent (91), AuditServerAlterTraceEvent (92), AuditServerObjectGdrEvent (93), AuditServerObjectManagementEvent (94), AuditServerObjectTakeOwnershipEvent (95), AuditServerOperationEvent (96), AuditServerPrincipalImpersonationEvent (97), AuditServerPrincipalManagementEvent (98), AuditServerScopeGdrEvent (99), BindDefault (100), BindRule (101), BitmapWarning (102), BlockedProcessReport (103), BrokerQueueDisabled (104), CpuThresholdExceeded (105), CreateApplicationRole (106), CreateAssembly (107), CreateAsymmetricKey (108), CreateAudit (109), CreateAvailabilityGroup (110), CreateBrokerPriority (111), CreateCertificate (112), CreateColumnEncryptionKey (113), CreateColumnMasterKey (114), CreateContract (115), CreateCredential (116), CreateCryptographicProvider (117), CreateDatabase (118), CreateDatabaseAuditSpecification (119), CreateDatabaseEncryptionKey (120), CreateDefault (121), CreateEndpoint (122), CreateEventNotification (123), CreateEventSession (124), CreateExtendedProcedure (125), CreateExtendedProperty (126), CreateFulltextCatalog (127), CreateFulltextIndex (128), CreateFulltextStoplist (129), CreateFunction (130), CreateIndex (131), CreateLinkedServer (132), CreateLinkedServerLogin (133), CreateLogin (134), CreateMasterKey (135), CreateMessage (136), CreateMessageType (137), CreatePartitionFunction (138), CreatePartitionScheme (139), CreatePlanGuide (140), CreateProcedure (141), CreateQueue (142), CreateRemoteServer (143), CreateRemoteServiceBinding (144), CreateResourcePool (145), CreateRole (146), CreateRoute (147), CreateRule (148), CreateSchema (149), CreateSearchPropertyList (150), CreateSecurityPolicy (151), CreateSequence (152), CreateServerAudit (153), CreateServerAuditSpecification (154), CreateServerRole (155), CreateService (156), CreateSpatialIndex (157), CreateStatistics (158), CreateSymmetricKey (159), CreateSynonym (160), CreateTable (161), CreateTrigger (162), CreateType (163), CreateUser (164), CreateView (165), CreateWorkloadGroup (166), CreateXmlIndex (167), CreateXmlSchemaCollection (168), DatabaseMirroringStateChange (169), DatabaseSuspectDataPage (170), DataFileAutoGrow (171), DataFileAutoShrink (172), DeadlockGraph (173), DenyDatabase (174), DenyServer (175), DeprecationAnnouncement (176), DeprecationFinalSupport (177), DropApplicationRole (178), DropAssembly (179), DropAsymmetricKey (180), DropAudit (181), DropAvailabilityGroup (182), DropBrokerPriority (183), DropCertificate (184), DropColumnEncryptionKey (185), DropColumnMasterKey (186), DropContract (187), DropCredential (188), DropCryptographicProvider (189), DropDatabase (190), DropDatabaseAuditSpecification (191), DropDatabaseEncryptionKey (192), DropDefault (193), DropEndpoint (194), DropEventNotification (195), DropEventSession (196), DropExtendedProcedure (197), DropExtendedProperty (198), DropFulltextCatalog (199), DropFulltextIndex (200), DropFulltextStoplist (201), DropFunction (202), DropIndex (203), DropLinkedServer (204), DropLinkedServerLogin (205), DropLogin (206), DropMasterKey (207), DropMessage (208), DropMessageType (209), DropPartitionFunction (210), DropPartitionScheme (211), DropPlanGuide (212), DropProcedure (213), DropQueue (214), DropRemoteServer (215), DropRemoteServiceBinding (216), DropResourcePool (217), DropRole (218), DropRoleMember (219), DropRoute (220), DropRule (221), DropSchema (222), DropSearchPropertyList (223), DropSecurityPolicy (224), DropSequence (225), DropServerAudit (226), DropServerAuditSpecification (227), DropServerRole (228), DropServerRoleMember (229), DropService (230), DropSignature (231), DropSignatureSchemaObject (232), DropStatistics (233), DropSymmetricKey (234), DropSynonym (235), DropTable (236), DropTrigger (237), DropType (238), DropUser (239), DropView (240), DropWorkloadGroup (241), DropXmlSchemaCollection (242), Errorlog (243), Eventlog (244), Exception (245), ExchangeSpillEvent (246), ExecutionWarnings (247), FtCrawlAborted (248), FtCrawlStarted (249), FtCrawlStopped (250), GrantDatabase (251), GrantServer (252), HashWarning (253), LockDeadlock (254), LockDeadlockChain (255), LockEscalation (256), LogFileAutoGrow (257), LogFileAutoShrink (258), MissingColumnStatistics (259), MissingJoinPredicate (260), MountTape (261), ObjectAltered (262), ObjectCreated (263), ObjectDeleted (264), OledbCallEvent (265), OledbDatareadEvent (266), OledbErrors (267), OledbProviderInformation (268), OledbQueryinterfaceEvent (269), Qn_dynamics (270), Qn_parameterTable (271), Qn_subscription (272), Qn_template (273), QueueActivation (274), Rename (275), RevokeDatabase (276), RevokeServer (277), ServerMemoryChange (278), ShowplanAllForQueryCompile (279), ShowplanXml (280), ShowplanXmlForQueryCompile (281), ShowplanXmlStatisticsProfile (282), SortWarnings (283), SpCacheinsert (284), SpCachemiss (285), SpCacheremove (286), SpRecompile (287), SqlStmtrecompile (288), TraceFileClose (289), UnbindDefault (290), UnbindRule (291), UpdateStatistics (292), Userconfigurable0 (293), Userconfigurable1 (294), Userconfigurable2 (295), Userconfigurable3 (296), Userconfigurable4 (297), Userconfigurable5 (298), Userconfigurable6 (299), Userconfigurable7 (300), Userconfigurable8 (301), Userconfigurable9 (302), UserErrorMessage (303), XqueryStaticType (304) """
    AddRoleMember: EventType = ...
    AddServerRoleMember: EventType = ...
    AddSignature: EventType = ...
    AddSignatureSchemaObject: EventType = ...
    AlterApplicationRole: EventType = ...
    AlterAssembly: EventType = ...
    AlterAsymmetricKey: EventType = ...
    AlterAudit: EventType = ...
    AlterAuthorizationDatabase: EventType = ...
    AlterAuthorizationServer: EventType = ...
    AlterAvailabilityGroup: EventType = ...
    AlterBrokerPriority: EventType = ...
    AlterCertificate: EventType = ...
    AlterColumnEncryptionKey: EventType = ...
    AlterCredential: EventType = ...
    AlterCryptographicProvider: EventType = ...
    AlterDatabase: EventType = ...
    AlterDatabaseAuditSpecification: EventType = ...
    AlterDatabaseEncryptionKey: EventType = ...
    AlterEndpoint: EventType = ...
    AlterEventSession: EventType = ...
    AlterExtendedProperty: EventType = ...
    AlterFulltextCatalog: EventType = ...
    AlterFulltextIndex: EventType = ...
    AlterFulltextStoplist: EventType = ...
    AlterFunction: EventType = ...
    AlterIndex: EventType = ...
    AlterInstance: EventType = ...
    AlterLinkedServer: EventType = ...
    AlterLogin: EventType = ...
    AlterMasterKey: EventType = ...
    AlterMessage: EventType = ...
    AlterMessageType: EventType = ...
    AlterPartitionFunction: EventType = ...
    AlterPartitionScheme: EventType = ...
    AlterPlanGuide: EventType = ...
    AlterProcedure: EventType = ...
    AlterQueue: EventType = ...
    AlterRemoteServer: EventType = ...
    AlterRemoteServiceBinding: EventType = ...
    AlterResourceGovernorConfig: EventType = ...
    AlterResourcePool: EventType = ...
    AlterRole: EventType = ...
    AlterRoute: EventType = ...
    AlterSchema: EventType = ...
    AlterSearchPropertyList: EventType = ...
    AlterSecurityPolicy: EventType = ...
    AlterSequence: EventType = ...
    AlterServerAudit: EventType = ...
    AlterServerAuditSpecification: EventType = ...
    AlterServerConfiguration: EventType = ...
    AlterServerRole: EventType = ...
    AlterService: EventType = ...
    AlterServiceMasterKey: EventType = ...
    AlterSymmetricKey: EventType = ...
    AlterTable: EventType = ...
    AlterTrigger: EventType = ...
    AlterUser: EventType = ...
    AlterView: EventType = ...
    AlterWorkloadGroup: EventType = ...
    AlterXmlSchemaCollection: EventType = ...
    AssemblyLoad: EventType = ...
    AuditAddDBUserEvent: EventType = ...
    AuditAddloginEvent: EventType = ...
    AuditAddLoginToServerRoleEvent: EventType = ...
    AuditAddMemberToDBRoleEvent: EventType = ...
    AuditAddRoleEvent: EventType = ...
    AuditAppRoleChangePasswordEvent: EventType = ...
    AuditBackupRestoreEvent: EventType = ...
    AuditChangeAuditEvent: EventType = ...
    AuditChangeDatabaseOwner: EventType = ...
    AuditDatabaseManagementEvent: EventType = ...
    AuditDatabaseObjectAccessEvent: EventType = ...
    AuditDatabaseObjectGdrEvent: EventType = ...
    AuditDatabaseObjectManagementEvent: EventType = ...
    AuditDatabaseObjectTakeOwnershipEvent: EventType = ...
    AuditDatabaseOperationEvent: EventType = ...
    AuditDatabasePrincipalImpersonationEvent: EventType = ...
    AuditDatabasePrincipalManagementEvent: EventType = ...
    AuditDatabaseScopeGdrEvent: EventType = ...
    AuditDbccEvent: EventType = ...
    AuditFulltext: EventType = ...
    AuditLogin: EventType = ...
    AuditLoginChangePasswordEvent: EventType = ...
    AuditLoginChangePropertyEvent: EventType = ...
    AuditLoginFailed: EventType = ...
    AuditLoginGdrEvent: EventType = ...
    AuditLogout: EventType = ...
    AuditSchemaObjectAccessEvent: EventType = ...
    AuditSchemaObjectGdrEvent: EventType = ...
    AuditSchemaObjectManagementEvent: EventType = ...
    AuditSchemaObjectTakeOwnershipEvent: EventType = ...
    AuditServerAlterTraceEvent: EventType = ...
    AuditServerObjectGdrEvent: EventType = ...
    AuditServerObjectManagementEvent: EventType = ...
    AuditServerObjectTakeOwnershipEvent: EventType = ...
    AuditServerOperationEvent: EventType = ...
    AuditServerPrincipalImpersonationEvent: EventType = ...
    AuditServerPrincipalManagementEvent: EventType = ...
    AuditServerScopeGdrEvent: EventType = ...
    BindDefault: EventType = ...
    BindRule: EventType = ...
    BitmapWarning: EventType = ...
    BlockedProcessReport: EventType = ...
    BrokerQueueDisabled: EventType = ...
    CpuThresholdExceeded: EventType = ...
    CreateApplicationRole: EventType = ...
    CreateAssembly: EventType = ...
    CreateAsymmetricKey: EventType = ...
    CreateAudit: EventType = ...
    CreateAvailabilityGroup: EventType = ...
    CreateBrokerPriority: EventType = ...
    CreateCertificate: EventType = ...
    CreateColumnEncryptionKey: EventType = ...
    CreateColumnMasterKey: EventType = ...
    CreateContract: EventType = ...
    CreateCredential: EventType = ...
    CreateCryptographicProvider: EventType = ...
    CreateDatabase: EventType = ...
    CreateDatabaseAuditSpecification: EventType = ...
    CreateDatabaseEncryptionKey: EventType = ...
    CreateDefault: EventType = ...
    CreateEndpoint: EventType = ...
    CreateEventNotification: EventType = ...
    CreateEventSession: EventType = ...
    CreateExtendedProcedure: EventType = ...
    CreateExtendedProperty: EventType = ...
    CreateFulltextCatalog: EventType = ...
    CreateFulltextIndex: EventType = ...
    CreateFulltextStoplist: EventType = ...
    CreateFunction: EventType = ...
    CreateIndex: EventType = ...
    CreateLinkedServer: EventType = ...
    CreateLinkedServerLogin: EventType = ...
    CreateLogin: EventType = ...
    CreateMasterKey: EventType = ...
    CreateMessage: EventType = ...
    CreateMessageType: EventType = ...
    CreatePartitionFunction: EventType = ...
    CreatePartitionScheme: EventType = ...
    CreatePlanGuide: EventType = ...
    CreateProcedure: EventType = ...
    CreateQueue: EventType = ...
    CreateRemoteServer: EventType = ...
    CreateRemoteServiceBinding: EventType = ...
    CreateResourcePool: EventType = ...
    CreateRole: EventType = ...
    CreateRoute: EventType = ...
    CreateRule: EventType = ...
    CreateSchema: EventType = ...
    CreateSearchPropertyList: EventType = ...
    CreateSecurityPolicy: EventType = ...
    CreateSequence: EventType = ...
    CreateServerAudit: EventType = ...
    CreateServerAuditSpecification: EventType = ...
    CreateServerRole: EventType = ...
    CreateService: EventType = ...
    CreateSpatialIndex: EventType = ...
    CreateStatistics: EventType = ...
    CreateSymmetricKey: EventType = ...
    CreateSynonym: EventType = ...
    CreateTable: EventType = ...
    CreateTrigger: EventType = ...
    CreateType: EventType = ...
    CreateUser: EventType = ...
    CreateView: EventType = ...
    CreateWorkloadGroup: EventType = ...
    CreateXmlIndex: EventType = ...
    CreateXmlSchemaCollection: EventType = ...
    DatabaseMirroringStateChange: EventType = ...
    DatabaseSuspectDataPage: EventType = ...
    DataFileAutoGrow: EventType = ...
    DataFileAutoShrink: EventType = ...
    DeadlockGraph: EventType = ...
    DenyDatabase: EventType = ...
    DenyServer: EventType = ...
    DeprecationAnnouncement: EventType = ...
    DeprecationFinalSupport: EventType = ...
    DropApplicationRole: EventType = ...
    DropAssembly: EventType = ...
    DropAsymmetricKey: EventType = ...
    DropAudit: EventType = ...
    DropAvailabilityGroup: EventType = ...
    DropBrokerPriority: EventType = ...
    DropCertificate: EventType = ...
    DropColumnEncryptionKey: EventType = ...
    DropColumnMasterKey: EventType = ...
    DropContract: EventType = ...
    DropCredential: EventType = ...
    DropCryptographicProvider: EventType = ...
    DropDatabase: EventType = ...
    DropDatabaseAuditSpecification: EventType = ...
    DropDatabaseEncryptionKey: EventType = ...
    DropDefault: EventType = ...
    DropEndpoint: EventType = ...
    DropEventNotification: EventType = ...
    DropEventSession: EventType = ...
    DropExtendedProcedure: EventType = ...
    DropExtendedProperty: EventType = ...
    DropFulltextCatalog: EventType = ...
    DropFulltextIndex: EventType = ...
    DropFulltextStoplist: EventType = ...
    DropFunction: EventType = ...
    DropIndex: EventType = ...
    DropLinkedServer: EventType = ...
    DropLinkedServerLogin: EventType = ...
    DropLogin: EventType = ...
    DropMasterKey: EventType = ...
    DropMessage: EventType = ...
    DropMessageType: EventType = ...
    DropPartitionFunction: EventType = ...
    DropPartitionScheme: EventType = ...
    DropPlanGuide: EventType = ...
    DropProcedure: EventType = ...
    DropQueue: EventType = ...
    DropRemoteServer: EventType = ...
    DropRemoteServiceBinding: EventType = ...
    DropResourcePool: EventType = ...
    DropRole: EventType = ...
    DropRoleMember: EventType = ...
    DropRoute: EventType = ...
    DropRule: EventType = ...
    DropSchema: EventType = ...
    DropSearchPropertyList: EventType = ...
    DropSecurityPolicy: EventType = ...
    DropSequence: EventType = ...
    DropServerAudit: EventType = ...
    DropServerAuditSpecification: EventType = ...
    DropServerRole: EventType = ...
    DropServerRoleMember: EventType = ...
    DropService: EventType = ...
    DropSignature: EventType = ...
    DropSignatureSchemaObject: EventType = ...
    DropStatistics: EventType = ...
    DropSymmetricKey: EventType = ...
    DropSynonym: EventType = ...
    DropTable: EventType = ...
    DropTrigger: EventType = ...
    DropType: EventType = ...
    DropUser: EventType = ...
    DropView: EventType = ...
    DropWorkloadGroup: EventType = ...
    DropXmlSchemaCollection: EventType = ...
    Errorlog: EventType = ...
    Eventlog: EventType = ...
    Exception: EventType = ...
    ExchangeSpillEvent: EventType = ...
    ExecutionWarnings: EventType = ...
    FtCrawlAborted: EventType = ...
    FtCrawlStarted: EventType = ...
    FtCrawlStopped: EventType = ...
    GrantDatabase: EventType = ...
    GrantServer: EventType = ...
    HashWarning: EventType = ...
    LockDeadlock: EventType = ...
    LockDeadlockChain: EventType = ...
    LockEscalation: EventType = ...
    LogFileAutoGrow: EventType = ...
    LogFileAutoShrink: EventType = ...
    MissingColumnStatistics: EventType = ...
    MissingJoinPredicate: EventType = ...
    MountTape: EventType = ...
    ObjectAltered: EventType = ...
    ObjectCreated: EventType = ...
    ObjectDeleted: EventType = ...
    OledbCallEvent: EventType = ...
    OledbDatareadEvent: EventType = ...
    OledbErrors: EventType = ...
    OledbProviderInformation: EventType = ...
    OledbQueryinterfaceEvent: EventType = ...
    Qn_dynamics: EventType = ...
    Qn_parameterTable: EventType = ...
    Qn_subscription: EventType = ...
    Qn_template: EventType = ...
    QueueActivation: EventType = ...
    Rename: EventType = ...
    RevokeDatabase: EventType = ...
    RevokeServer: EventType = ...
    ServerMemoryChange: EventType = ...
    ShowplanAllForQueryCompile: EventType = ...
    ShowplanXml: EventType = ...
    ShowplanXmlForQueryCompile: EventType = ...
    ShowplanXmlStatisticsProfile: EventType = ...
    SortWarnings: EventType = ...
    SpCacheinsert: EventType = ...
    SpCachemiss: EventType = ...
    SpCacheremove: EventType = ...
    SpRecompile: EventType = ...
    SqlStmtrecompile: EventType = ...
    TraceFileClose: EventType = ...
    UnbindDefault: EventType = ...
    UnbindRule: EventType = ...
    UpdateStatistics: EventType = ...
    Userconfigurable0: EventType = ...
    Userconfigurable1: EventType = ...
    Userconfigurable2: EventType = ...
    Userconfigurable3: EventType = ...
    Userconfigurable4: EventType = ...
    Userconfigurable5: EventType = ...
    Userconfigurable6: EventType = ...
    Userconfigurable7: EventType = ...
    Userconfigurable8: EventType = ...
    Userconfigurable9: EventType = ...
    UserErrorMessage: EventType = ...
    value__ = ...
    XqueryStaticType: EventType = ...


class ExecutionContext(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ExecutionContext, values: Caller (1), ExecuteAsUser (3), Owner (2), Self (4) """
    Caller: ExecutionContext = ...
    ExecuteAsUser: ExecutionContext = ...
    Owner: ExecutionContext = ...
    Self: ExecutionContext = ...
    value__ = ...


class ExecutionManager: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ConnectionContext(self) -> ServerConnection:
        """ Get: ConnectionContext(self: ExecutionManager) -> ServerConnection """
        ...



class ExecutionStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ExecutionStatus, values: Failed (3), Inactive (0), InProgress (1), Succeeded (2) """
    Failed: ExecutionStatus = ...
    Inactive: ExecutionStatus = ...
    InProgress: ExecutionStatus = ...
    Succeeded: ExecutionStatus = ...
    value__ = ...


class ExtendedProperty(IDroppable, IAlterable, ICreatable, IScriptable, ScriptNameObjectBase, IDropIfExists, IMarkForDrop): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ExtendedProperty()
    ExtendedProperty(parent: SqlSmoObject, name: str)
    ExtendedProperty(parent: SqlSmoObject, name: str, propertyValue: object)
    """
    @property
    def Parent(self) -> SqlSmoObject:
        """
        Get: Parent(self: ExtendedProperty) -> SqlSmoObject
        Set: Parent(self: ExtendedProperty) = value
        """
        ...

    @property
    def Value(self) -> object:
        """
        Get: Value(self: ExtendedProperty) -> object
        Set: Value(self: ExtendedProperty) = value
        """
        ...


    def __new__(cls, parent:SqlSmoObject = ..., name:str = ..., propertyValue:object = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, parent: SqlSmoObject, name: str)
        __new__(cls: type, parent: SqlSmoObject, name: str, propertyValue: object)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ExtendedPropertyCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> SqlSmoObject:
        """ Get: Parent(self: ExtendedPropertyCollection) -> SqlSmoObject """
        ...


    def Add(self, extendedProperty:ExtendedProperty): # -> 
        """ Add(self: ExtendedPropertyCollection, extendedProperty: ExtendedProperty) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ExtendedPropertyCollection, array: Array[ExtendedProperty], index: int) """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: ExtendedPropertyCollection, name: str)Remove(self: ExtendedPropertyCollection, extendedProperty: ExtendedProperty) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ExtendedStoredProcedure(IDroppable, IAlterable, ICreatable, IObjectPermission, ScriptSchemaObjectBase, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ExtendedStoredProcedure()
    ExtendedStoredProcedure(database: Database, name: str)
    ExtendedStoredProcedure(database: Database, name: str, schema: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: ExtendedStoredProcedure) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: ExtendedStoredProcedure) -> DateTime """
        ...

    @property
    def DllLocation(self) -> str:
        """
        Get: DllLocation(self: ExtendedStoredProcedure) -> str
        Set: DllLocation(self: ExtendedStoredProcedure) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ExtendedStoredProcedure) -> int """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: ExtendedStoredProcedure) -> bool """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: ExtendedStoredProcedure) -> bool """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: ExtendedStoredProcedure) -> str
        Set: Owner(self: ExtendedStoredProcedure) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: ExtendedStoredProcedure) -> Database
        Set: Parent(self: ExtendedStoredProcedure) = value
        """
        ...


    def ChangeSchema(self, newSchema:str): # -> 
        """ ChangeSchema(self: ExtendedStoredProcedure, newSchema: str) """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ExtendedStoredProcedureCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: ExtendedStoredProcedureCollection) -> Database """
        ...


    def Add(self, extendedStoredProcedure:ExtendedStoredProcedure): # -> 
        """ Add(self: ExtendedStoredProcedureCollection, extendedStoredProcedure: ExtendedStoredProcedure) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ExtendedStoredProcedureCollection, array: Array[ExtendedStoredProcedure], index: int) """
        ...

    def ItemById(self, id:int) -> ExtendedStoredProcedure:
        """ ItemById(self: ExtendedStoredProcedureCollection, id: int) -> ExtendedStoredProcedure """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ExternalDataSource(IDroppable, IAlterable, ICreatable, IScriptable, IObjectPermission, ISfcSupportsDesignMode, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ExternalDataSource()
    ExternalDataSource(database: Database, name: str)
    ExternalDataSource(parent: Database, name: str, dataSourceType: ExternalDataSourceType, location: str)
    """
    @property
    def Credential(self) -> str:
        """
        Get: Credential(self: ExternalDataSource) -> str
        Set: Credential(self: ExternalDataSource) = value
        """
        ...

    @property
    def DatabaseName(self) -> str:
        """
        Get: DatabaseName(self: ExternalDataSource) -> str
        Set: DatabaseName(self: ExternalDataSource) = value
        """
        ...

    @property
    def DataSourceType(self): # -> ExternalDataSourceType
        """
        Get: DataSourceType(self: ExternalDataSource) -> ExternalDataSourceType
        Set: DataSourceType(self: ExternalDataSource) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ExternalDataSource) -> int """
        ...

    @property
    def Location(self) -> str:
        """
        Get: Location(self: ExternalDataSource) -> str
        Set: Location(self: ExternalDataSource) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: ExternalDataSource) -> Database
        Set: Parent(self: ExternalDataSource) = value
        """
        ...

    @property
    def ResourceManagerLocation(self) -> str:
        """
        Get: ResourceManagerLocation(self: ExternalDataSource) -> str
        Set: ResourceManagerLocation(self: ExternalDataSource) = value
        """
        ...

    @property
    def ShardMapName(self) -> str:
        """
        Get: ShardMapName(self: ExternalDataSource) -> str
        Set: ShardMapName(self: ExternalDataSource) = value
        """
        ...


    def DropIfExists(self): # -> 
        """ DropIfExists(self: ExternalDataSource) """
        ...

    def __new__(cls, *__args) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, parent: Database, name: str, dataSourceType: ExternalDataSourceType, location: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ExternalDataSourceCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: ExternalDataSourceCollection) -> Database """
        ...


    def Add(self, externalDataSource:ExternalDataSource): # -> 
        """ Add(self: ExternalDataSourceCollection, externalDataSource: ExternalDataSource) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ExternalDataSourceCollection, array: Array[ExternalDataSource], index: int) """
        ...

    def ItemById(self, id:int) -> ExternalDataSource:
        """ ItemById(self: ExternalDataSourceCollection, id: int) -> ExternalDataSource """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ExternalDataSourceType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ExternalDataSourceType, values: Hadoop (0), Rdbms (1), ShardMapManager (2) """
    Hadoop: ExternalDataSourceType = ...
    Rdbms: ExternalDataSourceType = ...
    ShardMapManager: ExternalDataSourceType = ...
    value__ = ...


class ExternalDataSourceTypeConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ ExternalDataSourceTypeConverter() """
    pass

class ExternalFileFormat(IDroppable, ICreatable, IScriptable, IObjectPermission, ISfcSupportsDesignMode, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ExternalFileFormat()
    ExternalFileFormat(database: Database, name: str)
    ExternalFileFormat(parent: Database, name: str, formatType: ExternalFileFormatType)
    """
    @property
    def DataCompression(self) -> str:
        """
        Get: DataCompression(self: ExternalFileFormat) -> str
        Set: DataCompression(self: ExternalFileFormat) = value
        """
        ...

    @property
    def DateFormat(self) -> str:
        """
        Get: DateFormat(self: ExternalFileFormat) -> str
        Set: DateFormat(self: ExternalFileFormat) = value
        """
        ...

    @property
    def Encoding(self) -> str:
        """ Get: Encoding(self: ExternalFileFormat) -> str """
        ...

    @property
    def FieldTerminator(self) -> str:
        """
        Get: FieldTerminator(self: ExternalFileFormat) -> str
        Set: FieldTerminator(self: ExternalFileFormat) = value
        """
        ...

    @property
    def FormatType(self): # -> ExternalFileFormatType
        """
        Get: FormatType(self: ExternalFileFormat) -> ExternalFileFormatType
        Set: FormatType(self: ExternalFileFormat) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ExternalFileFormat) -> int """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: ExternalFileFormat) -> Database
        Set: Parent(self: ExternalFileFormat) = value
        """
        ...

    @property
    def RowTerminator(self) -> str:
        """ Get: RowTerminator(self: ExternalFileFormat) -> str """
        ...

    @property
    def SerDeMethod(self) -> str:
        """
        Get: SerDeMethod(self: ExternalFileFormat) -> str
        Set: SerDeMethod(self: ExternalFileFormat) = value
        """
        ...

    @property
    def StringDelimiter(self) -> str:
        """
        Get: StringDelimiter(self: ExternalFileFormat) -> str
        Set: StringDelimiter(self: ExternalFileFormat) = value
        """
        ...

    @property
    def UseTypeDefault(self) -> bool:
        """
        Get: UseTypeDefault(self: ExternalFileFormat) -> bool
        Set: UseTypeDefault(self: ExternalFileFormat) = value
        """
        ...


    def DropIfExists(self): # -> 
        """ DropIfExists(self: ExternalFileFormat) """
        ...

    def __new__(cls, *__args) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, parent: Database, name: str, formatType: ExternalFileFormatType)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ExternalFileFormatCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: ExternalFileFormatCollection) -> Database """
        ...


    def Add(self, externalFileFormat:ExternalFileFormat): # -> 
        """ Add(self: ExternalFileFormatCollection, externalFileFormat: ExternalFileFormat) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ExternalFileFormatCollection, array: Array[ExternalFileFormat], index: int) """
        ...

    def ItemById(self, id:int) -> ExternalFileFormat:
        """ ItemById(self: ExternalFileFormatCollection, id: int) -> ExternalFileFormat """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ExternalFileFormatType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ExternalFileFormatType, values: DelimitedText (0), None (-1), Orc (2), Parquet (3), RcFile (1) """
    DelimitedText: ExternalFileFormatType = ...
    Orc: ExternalFileFormatType = ...
    Parquet: ExternalFileFormatType = ...
    RcFile: ExternalFileFormatType = ...
    value__ = ...


class ExternalFileFormatTypeConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ ExternalFileFormatTypeConverter() """
    pass

class ExternalResourcePool(IDroppable, IAlterable, ICreatable, IScriptable, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ExternalResourcePool()
    ExternalResourcePool(resourceGovernor: ResourceGovernor, name: str)
    """
    @property
    def ExternalResourcePoolAffinityInfo(self): # -> ExternalResourcePoolAffinityInfo
        """ Get: ExternalResourcePoolAffinityInfo(self: ExternalResourcePool) -> ExternalResourcePoolAffinityInfo """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ExternalResourcePool) -> int """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: ExternalResourcePool) -> bool """
        ...

    @property
    def MaximumCpuPercentage(self) -> int:
        """
        Get: MaximumCpuPercentage(self: ExternalResourcePool) -> int
        Set: MaximumCpuPercentage(self: ExternalResourcePool) = value
        """
        ...

    @property
    def MaximumMemoryPercentage(self) -> int:
        """
        Get: MaximumMemoryPercentage(self: ExternalResourcePool) -> int
        Set: MaximumMemoryPercentage(self: ExternalResourcePool) = value
        """
        ...

    @property
    def MaximumProcesses(self) -> Int64:
        """
        Get: MaximumProcesses(self: ExternalResourcePool) -> Int64
        Set: MaximumProcesses(self: ExternalResourcePool) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ExternalResourcePool) -> str
        Set: Name(self: ExternalResourcePool) = value
        """
        ...

    @property
    def Parent(self): # -> ResourceGovernor
        """
        Get: Parent(self: ExternalResourcePool) -> ResourceGovernor
        Set: Parent(self: ExternalResourcePool) = value
        """
        ...


    def __new__(cls, resourceGovernor = ..., name:str = ...) -> Self: # Not found arg types: {'resourceGovernor': 'ResourceGovernor'}
        """
        __new__(cls: type)
        __new__(cls: type, resourceGovernor: ResourceGovernor, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ExternalResourcePoolAffinityInfo(AffinityInfoBase): # skipped bases: <type 'IScriptable'>, <type 'IAlterable'>, <type 'object'>
    """ ExternalResourcePoolAffinityInfo(parent: ExternalResourcePool) """
    @property
    def Cpus(self) -> CpuCollection:
        """ Get: Cpus(self: ExternalResourcePoolAffinityInfo) -> CpuCollection """
        ...

    @property
    def Parent(self) -> ExternalResourcePool:
        """ Get: Parent(self: ExternalResourcePoolAffinityInfo) -> ExternalResourcePool """
        ...


    def __new__(cls, parent:ExternalResourcePool) -> Self:
        """ __new__(cls: type, parent: ExternalResourcePool) """
        ...


class ExternalResourcePoolCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> ResourceGovernor
        """ Get: Parent(self: ExternalResourcePoolCollection) -> ResourceGovernor """
        ...


    def Add(self, externalResourcePool:ExternalResourcePool): # -> 
        """ Add(self: ExternalResourcePoolCollection, externalResourcePool: ExternalResourcePool) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ExternalResourcePoolCollection, array: Array[ExternalResourcePool], index: int) """
        ...

    def ItemById(self, id:int) -> ExternalResourcePool:
        """ ItemById(self: ExternalResourcePoolCollection, id: int) -> ExternalResourcePool """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ExternalTableDistributionConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ ExternalTableDistributionConverter() """
    pass

class ExternalTableDistributionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ExternalTableDistributionType, values: None (-1), Replicated (1), RoundRobin (2), Sharded (0) """
    Replicated: ExternalTableDistributionType = ...
    RoundRobin: ExternalTableDistributionType = ...
    Sharded: ExternalTableDistributionType = ...
    value__ = ...


class ExternalTableRejectType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ExternalTableRejectType, values: None (-1), Percentage (1), Value (0) """
    Percentage: ExternalTableRejectType = ...
    Value: ExternalTableRejectType = ...
    value__ = ...


class ExternalTableRejectTypeConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ ExternalTableRejectTypeConverter() """
    pass

class FailedOperationException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    FailedOperationException()
    FailedOperationException(message: str)
    FailedOperationException(message: str, innerException: Exception)
    FailedOperationException(operation: str, failedObject: object, innerException: Exception)
    FailedOperationException(operation: str, failedObject: object, innerException: Exception, reason: str)
    """
    @property
    def FailedObject(self) -> object:
        """
        Get: FailedObject(self: FailedOperationException) -> object
        Set: FailedObject(self: FailedOperationException) = value
        """
        ...

    @property
    def Message(self) -> str:
        """ Get: Message(self: FailedOperationException) -> str """
        ...

    @property
    def Operation(self) -> str:
        """
        Get: Operation(self: FailedOperationException) -> str
        Set: Operation(self: FailedOperationException) = value
        """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: FailedOperationException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class Federation(ScriptNameObjectBase, IDroppable, IAlterable, ICreatable, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Federation()
    Federation(database: Database, name: str)
    Federation(database: Database, name: str, distributionName: str, dataType: DataType, distributionType: DistributionType)
    """
    @property
    def DataType(self) -> DataType:
        """
        Get: DataType(self: Federation) -> DataType
        Set: DataType(self: Federation) = value
        """
        ...

    @property
    def DistributionName(self) -> str:
        """
        Get: DistributionName(self: Federation) -> str
        Set: DistributionName(self: Federation) = value
        """
        ...

    @property
    def DistributionType(self) -> DistributionType:
        """
        Get: DistributionType(self: Federation) -> DistributionType
        Set: DistributionType(self: Federation) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Federation) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Federation) -> str
        Set: Name(self: Federation) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: Federation) -> Database
        Set: Parent(self: Federation) = value
        """
        ...


    def __new__(cls, database:Database = ..., name:str = ..., distributionName:str = ..., dataType:DataType = ..., distributionType:DistributionType = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, distributionName: str, dataType: DataType, distributionType: DistributionType)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class FederationCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: FederationCollection) -> Database """
        ...


    def Add(self, federation:Federation): # -> 
        """ Add(self: FederationCollection, federation: Federation) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: FederationCollection, array: Array[Federation], index: int) """
        ...

    def ItemById(self, id:int) -> Federation:
        """ ItemById(self: FederationCollection, id: int) -> Federation """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class FileGroup(IDroppable, IAlterable, ICreatable, IRenamable, ISfcSupportsDesignMode, IMarkForDrop, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    FileGroup()
    FileGroup(database: Database, name: str)
    FileGroup(database: Database, name: str, fileGroupType: FileGroupType)
    FileGroup(database: Database, name: str, isFileStream: bool)
    """
    @property
    def FileGroupType(self): # -> FileGroupType
        """
        Get: FileGroupType(self: FileGroup) -> FileGroupType
        Set: FileGroupType(self: FileGroup) = value
        """
        ...

    @property
    def Files(self) -> DataFileCollection:
        """ Get: Files(self: FileGroup) -> DataFileCollection """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: FileGroup) -> int """
        ...

    @property
    def IsDefault(self) -> bool:
        """
        Get: IsDefault(self: FileGroup) -> bool
        Set: IsDefault(self: FileGroup) = value
        """
        ...

    @property
    def IsFileStream(self) -> bool:
        """
        Get: IsFileStream(self: FileGroup) -> bool
        Set: IsFileStream(self: FileGroup) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: FileGroup) -> Database
        Set: Parent(self: FileGroup) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: FileGroup) -> bool
        Set: ReadOnly(self: FileGroup) = value
        """
        ...

    @property
    def Size(self) -> float:
        """ Get: Size(self: FileGroup) -> float """
        ...


    def CheckFileGroup(self) -> StringCollection:
        """ CheckFileGroup(self: FileGroup) -> StringCollection """
        ...

    def CheckFileGroupDataOnly(self) -> StringCollection:
        """ CheckFileGroupDataOnly(self: FileGroup) -> StringCollection """
        ...

    def EnumObjects(self) -> Array:
        """ EnumObjects(self: FileGroup) -> Array[SqlSmoObject] """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., *__args) -> Self: # Not found arg types: {'*__args': 'FileGroupType'}
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, fileGroupType: FileGroupType)
        __new__(cls: type, database: Database, name: str, isFileStream: bool)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class FileGroupCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: FileGroupCollection) -> Database """
        ...


    def Add(self, fileGroup:FileGroup): # -> 
        """ Add(self: FileGroupCollection, fileGroup: FileGroup) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: FileGroupCollection, array: Array[FileGroup], index: int) """
        ...

    def ItemById(self, id:int) -> FileGroup:
        """ ItemById(self: FileGroupCollection, id: int) -> FileGroup """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: FileGroupCollection, name: str)Remove(self: FileGroupCollection, fileGroup: FileGroup) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class FileGroupType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FileGroupType, values: FileStreamDataFileGroup (2), MemoryOptimizedDataFileGroup (3), RowsFileGroup (0) """
    FileStreamDataFileGroup: FileGroupType = ...
    MemoryOptimizedDataFileGroup: FileGroupType = ...
    RowsFileGroup: FileGroupType = ...
    value__ = ...


class FileGrowthType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FileGrowthType, values: KB (0), None (99), Percent (1) """
    KB: FileGrowthType = ...
    Percent: FileGrowthType = ...
    value__ = ...


class FilestreamAccessLevelType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FilestreamAccessLevelType, values: Disabled (0), FullAccess (2), TSqlAccess (1) """
    Disabled: FilestreamAccessLevelType = ...
    FullAccess: FilestreamAccessLevelType = ...
    TSqlAccess: FilestreamAccessLevelType = ...
    value__ = ...


class FileStreamEffectiveLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FileStreamEffectiveLevel, values: Disabled (0), TSqlAccess (1), TSqlFullFileSystemAccess (3), TSqlLocalFileSystemAccess (2) """
    Disabled: FileStreamEffectiveLevel = ...
    TSqlAccess: FileStreamEffectiveLevel = ...
    TSqlFullFileSystemAccess: FileStreamEffectiveLevel = ...
    TSqlLocalFileSystemAccess: FileStreamEffectiveLevel = ...
    value__ = ...


class FileStreamLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FileStreamLevel, values: Disabled (0), TSqlAccess (1), TSqlFullFileSystemAccess (3), TSqlLocalFileSystemAccess (2) """
    Disabled: FileStreamLevel = ...
    TSqlAccess: FileStreamLevel = ...
    TSqlFullFileSystemAccess: FileStreamLevel = ...
    TSqlLocalFileSystemAccess: FileStreamLevel = ...
    value__ = ...


class FilestreamNonTransactedAccessType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FilestreamNonTransactedAccessType, values: Full (2), Off (0), ReadOnly (1) """
    Full: FilestreamNonTransactedAccessType = ...
    Off: FilestreamNonTransactedAccessType = ...
    ReadOnly: FilestreamNonTransactedAccessType = ...
    value__ = ...


class ForeignKey(IDroppable, IAlterable, ICreatable, IScriptable, IRenamable, IPropertyDataDispatch, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IMarkForDrop, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ForeignKey()
    ForeignKey(table: Table, name: str)
    """
    @property
    def Columns(self) -> ForeignKeyColumnCollection:
        """ Get: Columns(self: ForeignKey) -> ForeignKeyColumnCollection """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: ForeignKey) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: ForeignKey) -> DateTime """
        ...

    @property
    def DeleteAction(self) -> ForeignKeyAction:
        """
        Get: DeleteAction(self: ForeignKey) -> ForeignKeyAction
        Set: DeleteAction(self: ForeignKey) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ForeignKey) -> int """
        ...

    @property
    def IsChecked(self) -> bool:
        """
        Get: IsChecked(self: ForeignKey) -> bool
        Set: IsChecked(self: ForeignKey) = value
        """
        ...

    @property
    def IsEnabled(self) -> bool:
        """
        Get: IsEnabled(self: ForeignKey) -> bool
        Set: IsEnabled(self: ForeignKey) = value
        """
        ...

    @property
    def IsFileTableDefined(self) -> bool:
        """ Get: IsFileTableDefined(self: ForeignKey) -> bool """
        ...

    @property
    def IsMemoryOptimized(self) -> bool:
        """
        Get: IsMemoryOptimized(self: ForeignKey) -> bool
        Set: IsMemoryOptimized(self: ForeignKey) = value
        """
        ...

    @property
    def IsSystemNamed(self) -> bool:
        """ Get: IsSystemNamed(self: ForeignKey) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ForeignKey) -> str
        Set: Name(self: ForeignKey) = value
        """
        ...

    @property
    def NotForReplication(self) -> bool:
        """
        Get: NotForReplication(self: ForeignKey) -> bool
        Set: NotForReplication(self: ForeignKey) = value
        """
        ...

    @property
    def Parent(self) -> Table:
        """
        Get: Parent(self: ForeignKey) -> Table
        Set: Parent(self: ForeignKey) = value
        """
        ...

    @property
    def ReferencedKey(self) -> str:
        """ Get: ReferencedKey(self: ForeignKey) -> str """
        ...

    @property
    def ReferencedTable(self) -> str:
        """
        Get: ReferencedTable(self: ForeignKey) -> str
        Set: ReferencedTable(self: ForeignKey) = value
        """
        ...

    @property
    def ReferencedTableSchema(self) -> str:
        """
        Get: ReferencedTableSchema(self: ForeignKey) -> str
        Set: ReferencedTableSchema(self: ForeignKey) = value
        """
        ...

    @property
    def ScriptReferencedTable(self) -> str:
        """
        Get: ScriptReferencedTable(self: ForeignKey) -> str
        Set: ScriptReferencedTable(self: ForeignKey) = value
        """
        ...

    @property
    def ScriptReferencedTableSchema(self) -> str:
        """
        Get: ScriptReferencedTableSchema(self: ForeignKey) -> str
        Set: ScriptReferencedTableSchema(self: ForeignKey) = value
        """
        ...

    @property
    def UpdateAction(self) -> ForeignKeyAction:
        """
        Get: UpdateAction(self: ForeignKey) -> ForeignKeyAction
        Set: UpdateAction(self: ForeignKey) = value
        """
        ...


    def __new__(cls, table:Table = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, table: Table, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ForeignKeyAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ForeignKeyAction, values: Cascade (1), NoAction (0), SetDefault (3), SetNull (2) """
    Cascade: ForeignKeyAction = ...
    NoAction: ForeignKeyAction = ...
    SetDefault: ForeignKeyAction = ...
    SetNull: ForeignKeyAction = ...
    value__ = ...


class ForeignKeyCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Table:
        """ Get: Parent(self: ForeignKeyCollection) -> Table """
        ...


    def Add(self, foreignKey:ForeignKey): # -> 
        """ Add(self: ForeignKeyCollection, foreignKey: ForeignKey) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ForeignKeyCollection, array: Array[ForeignKey], index: int) """
        ...

    def ItemById(self, id:int) -> ForeignKey:
        """ ItemById(self: ForeignKeyCollection, id: int) -> ForeignKey """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: ForeignKeyCollection, name: str)Remove(self: ForeignKeyCollection, foreignKey: ForeignKey) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ForeignKeyColumn(ISfcSupportsDesignMode, IPropertyDataDispatch, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ForeignKeyColumn()
    ForeignKeyColumn(foreignKey: ForeignKey, name: str)
    ForeignKeyColumn(foreignKey: ForeignKey, name: str, referencedColumn: str)
    """
    @property
    def ID(self) -> int:
        """ Get: ID(self: ForeignKeyColumn) -> int """
        ...

    @property
    def Parent(self) -> ForeignKey:
        """
        Get: Parent(self: ForeignKeyColumn) -> ForeignKey
        Set: Parent(self: ForeignKeyColumn) = value
        """
        ...

    @property
    def ReferencedColumn(self) -> str:
        """
        Get: ReferencedColumn(self: ForeignKeyColumn) -> str
        Set: ReferencedColumn(self: ForeignKeyColumn) = value
        """
        ...


    def __new__(cls, foreignKey:ForeignKey = ..., name:str = ..., referencedColumn:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, foreignKey: ForeignKey, name: str)
        __new__(cls: type, foreignKey: ForeignKey, name: str, referencedColumn: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ForeignKeyColumnCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> ForeignKey:
        """ Get: Parent(self: ForeignKeyColumnCollection) -> ForeignKey """
        ...


    def Add(self, foreignKeyColumn:ForeignKeyColumn, *__args:str): # -> 
        """ Add(self: ForeignKeyColumnCollection, foreignKeyColumn: ForeignKeyColumn)Add(self: ForeignKeyColumnCollection, foreignKeyColumn: ForeignKeyColumn, insertAtColumnName: str)Add(self: ForeignKeyColumnCollection, foreignKeyColumn: ForeignKeyColumn, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ForeignKeyColumnCollection, array: Array[ForeignKeyColumn], index: int) """
        ...

    def ItemById(self, id:int) -> ForeignKeyColumn:
        """ ItemById(self: ForeignKeyColumnCollection, id: int) -> ForeignKeyColumn """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class FragmentationOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FragmentationOption, values: Detailed (3), Fast (1), Sampled (2) """
    Detailed: FragmentationOption = ...
    Fast: FragmentationOption = ...
    Sampled: FragmentationOption = ...
    value__ = ...


class FrequencyPair: # skipped bases: <type 'object'>, <type 'object'>
    """ FrequencyPair() """
    @property
    def Count(self) -> int:
        """
        Get: Count(self: FrequencyPair) -> int
        Set: Count(self: FrequencyPair) = value
        """
        ...

    @property
    def Duration(self) -> TimeSpan:
        """
        Get: Duration(self: FrequencyPair) -> TimeSpan
        Set: Duration(self: FrequencyPair) = value
        """
        ...



class FullTextCatalog(IDroppable, IAlterable, ICreatable, IScriptable, IObjectPermission, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    FullTextCatalog()
    FullTextCatalog(database: Database, name: str)
    """
    @property
    def ErrorLogSize(self) -> int:
        """ Get: ErrorLogSize(self: FullTextCatalog) -> int """
        ...

    @property
    def FileGroup(self) -> str:
        """
        Get: FileGroup(self: FullTextCatalog) -> str
        Set: FileGroup(self: FullTextCatalog) = value
        """
        ...

    @property
    def FullTextIndexSize(self) -> int:
        """ Get: FullTextIndexSize(self: FullTextCatalog) -> int """
        ...

    @property
    def HasFullTextIndexedTables(self) -> bool:
        """ Get: HasFullTextIndexedTables(self: FullTextCatalog) -> bool """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: FullTextCatalog) -> int """
        ...

    @property
    def IsAccentSensitive(self) -> bool:
        """
        Get: IsAccentSensitive(self: FullTextCatalog) -> bool
        Set: IsAccentSensitive(self: FullTextCatalog) = value
        """
        ...

    @property
    def IsDefault(self) -> bool:
        """
        Get: IsDefault(self: FullTextCatalog) -> bool
        Set: IsDefault(self: FullTextCatalog) = value
        """
        ...

    @property
    def ItemCount(self) -> int:
        """ Get: ItemCount(self: FullTextCatalog) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: FullTextCatalog) -> str
        Set: Name(self: FullTextCatalog) = value
        """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: FullTextCatalog) -> str
        Set: Owner(self: FullTextCatalog) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: FullTextCatalog) -> Database
        Set: Parent(self: FullTextCatalog) = value
        """
        ...

    @property
    def PopulationCompletionAge(self) -> TimeSpan:
        """ Get: PopulationCompletionAge(self: FullTextCatalog) -> TimeSpan """
        ...

    @property
    def PopulationCompletionDate(self) -> DateTime:
        """ Get: PopulationCompletionDate(self: FullTextCatalog) -> DateTime """
        ...

    @property
    def PopulationStatus(self) -> CatalogPopulationStatus:
        """ Get: PopulationStatus(self: FullTextCatalog) -> CatalogPopulationStatus """
        ...

    @property
    def RootPath(self) -> str:
        """
        Get: RootPath(self: FullTextCatalog) -> str
        Set: RootPath(self: FullTextCatalog) = value
        """
        ...

    @property
    def UniqueKeyCount(self) -> int:
        """ Get: UniqueKeyCount(self: FullTextCatalog) -> int """
        ...


    def EnumErrorLogs(self) -> DataTable:
        """ EnumErrorLogs(self: FullTextCatalog) -> DataTable """
        ...

    def ReadErrorLog(self, logNumber:int = ...) -> DataTable:
        """
        ReadErrorLog(self: FullTextCatalog) -> DataTable
        ReadErrorLog(self: FullTextCatalog, logNumber: int) -> DataTable
        """
        ...

    def Rebuild(self, accentSensitive:bool = ...): # -> 
        """ Rebuild(self: FullTextCatalog)Rebuild(self: FullTextCatalog, accentSensitive: bool) """
        ...

    def Reorganize(self): # -> 
        """ Reorganize(self: FullTextCatalog) """
        ...

    def StartPopulation(self, action:CatalogPopulationAction): # -> 
        """ StartPopulation(self: FullTextCatalog, action: CatalogPopulationAction) """
        ...

    def StopPopulation(self): # -> 
        """ StopPopulation(self: FullTextCatalog) """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class FullTextCatalogCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: FullTextCatalogCollection) -> Database """
        ...


    def Add(self, fullTextCatalog:FullTextCatalog): # -> 
        """ Add(self: FullTextCatalogCollection, fullTextCatalog: FullTextCatalog) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: FullTextCatalogCollection, array: Array[FullTextCatalog], index: int) """
        ...

    def ItemById(self, id:int) -> FullTextCatalog:
        """ ItemById(self: FullTextCatalogCollection, id: int) -> FullTextCatalog """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class FullTextCatalogUpgradeOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FullTextCatalogUpgradeOption, values: AlwaysRebuild (0), AlwaysReset (1), ImportWithRebuild (2) """
    AlwaysRebuild: FullTextCatalogUpgradeOption = ...
    AlwaysReset: FullTextCatalogUpgradeOption = ...
    ImportWithRebuild: FullTextCatalogUpgradeOption = ...
    value__ = ...


class FullTextIndex(IDroppable, IAlterable, ICreatable, IScriptable, SqlSmoObject, ISfcSupportsDesignMode, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    FullTextIndex()
    FullTextIndex(parent: TableViewBase)
    """
    @property
    def CatalogName(self) -> str:
        """
        Get: CatalogName(self: FullTextIndex) -> str
        Set: CatalogName(self: FullTextIndex) = value
        """
        ...

    @property
    def ChangeTracking(self) -> ChangeTracking:
        """
        Get: ChangeTracking(self: FullTextIndex) -> ChangeTracking
        Set: ChangeTracking(self: FullTextIndex) = value
        """
        ...

    @property
    def DocumentsProcessed(self) -> int:
        """ Get: DocumentsProcessed(self: FullTextIndex) -> int """
        ...

    @property
    def FilegroupName(self) -> str:
        """
        Get: FilegroupName(self: FullTextIndex) -> str
        Set: FilegroupName(self: FullTextIndex) = value
        """
        ...

    @property
    def IndexedColumns(self): # -> FullTextIndexColumnCollection
        """ Get: IndexedColumns(self: FullTextIndex) -> FullTextIndexColumnCollection """
        ...

    @property
    def IsEnabled(self) -> bool:
        """ Get: IsEnabled(self: FullTextIndex) -> bool """
        ...

    @property
    def ItemCount(self) -> int:
        """ Get: ItemCount(self: FullTextIndex) -> int """
        ...

    @property
    def NumberOfFailures(self) -> int:
        """ Get: NumberOfFailures(self: FullTextIndex) -> int """
        ...

    @property
    def Parent(self): # -> TableViewBase
        """
        Get: Parent(self: FullTextIndex) -> TableViewBase
        Set: Parent(self: FullTextIndex) = value
        """
        ...

    @property
    def PendingChanges(self) -> int:
        """ Get: PendingChanges(self: FullTextIndex) -> int """
        ...

    @property
    def PopulationStatus(self): # -> IndexPopulationStatus
        """ Get: PopulationStatus(self: FullTextIndex) -> IndexPopulationStatus """
        ...

    @property
    def SearchPropertyListName(self) -> str:
        """
        Get: SearchPropertyListName(self: FullTextIndex) -> str
        Set: SearchPropertyListName(self: FullTextIndex) = value
        """
        ...

    @property
    def StopListName(self) -> str:
        """
        Get: StopListName(self: FullTextIndex) -> str
        Set: StopListName(self: FullTextIndex) = value
        """
        ...

    @property
    def StopListOption(self): # -> StopListOption
        """
        Get: StopListOption(self: FullTextIndex) -> StopListOption
        Set: StopListOption(self: FullTextIndex) = value
        """
        ...

    @property
    def UniqueIndexName(self) -> str:
        """
        Get: UniqueIndexName(self: FullTextIndex) -> str
        Set: UniqueIndexName(self: FullTextIndex) = value
        """
        ...


    def Disable(self): # -> 
        """ Disable(self: FullTextIndex) """
        ...

    def Enable(self): # -> 
        """ Enable(self: FullTextIndex) """
        ...

    def StartPopulation(self, action): # ->  # Not found arg types: {'action': 'IndexPopulationAction'}
        """ StartPopulation(self: FullTextIndex, action: IndexPopulationAction) """
        ...

    def StopPopulation(self): # -> 
        """ StopPopulation(self: FullTextIndex) """
        ...

    def __new__(cls, parent = ...) -> Self: # Not found arg types: {'parent': 'TableViewBase'}
        """
        __new__(cls: type)
        __new__(cls: type, parent: TableViewBase)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class FullTextIndexColumn(ScriptNameObjectBase, IAlterable, ICreatable, IDroppable, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    FullTextIndexColumn()
    FullTextIndexColumn(fullTextIndex: FullTextIndex, name: str)
    """
    @property
    def Language(self) -> str:
        """
        Get: Language(self: FullTextIndexColumn) -> str
        Set: Language(self: FullTextIndexColumn) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: FullTextIndexColumn) -> str
        Set: Name(self: FullTextIndexColumn) = value
        """
        ...

    @property
    def Parent(self) -> FullTextIndex:
        """
        Get: Parent(self: FullTextIndexColumn) -> FullTextIndex
        Set: Parent(self: FullTextIndexColumn) = value
        """
        ...

    @property
    def StatisticalSemantics(self) -> int:
        """
        Get: StatisticalSemantics(self: FullTextIndexColumn) -> int
        Set: StatisticalSemantics(self: FullTextIndexColumn) = value
        """
        ...

    @property
    def TypeColumnName(self) -> str:
        """
        Get: TypeColumnName(self: FullTextIndexColumn) -> str
        Set: TypeColumnName(self: FullTextIndexColumn) = value
        """
        ...


    def __new__(cls, fullTextIndex:FullTextIndex = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, fullTextIndex: FullTextIndex, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class FullTextIndexColumnCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> FullTextIndex:
        """ Get: Parent(self: FullTextIndexColumnCollection) -> FullTextIndex """
        ...


    def Add(self, fullTextIndexColumn:FullTextIndexColumn): # -> 
        """ Add(self: FullTextIndexColumnCollection, fullTextIndexColumn: FullTextIndexColumn) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: FullTextIndexColumnCollection, array: Array[FullTextIndexColumn], index: int) """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: FullTextIndexColumnCollection, name: str)Remove(self: FullTextIndexColumnCollection, fullTextIndexColumn: FullTextIndexColumn) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class FullTextService(ScriptNameObjectBase, IAlterable, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def AllowUnsignedBinaries(self) -> bool:
        """
        Get: AllowUnsignedBinaries(self: FullTextService) -> bool
        Set: AllowUnsignedBinaries(self: FullTextService) = value
        """
        ...

    @property
    def CatalogUpgradeOption(self) -> FullTextCatalogUpgradeOption:
        """
        Get: CatalogUpgradeOption(self: FullTextService) -> FullTextCatalogUpgradeOption
        Set: CatalogUpgradeOption(self: FullTextService) = value
        """
        ...

    @property
    def ConnectTimeout(self) -> TimeSpan:
        """
        Get: ConnectTimeout(self: FullTextService) -> TimeSpan
        Set: ConnectTimeout(self: FullTextService) = value
        """
        ...

    @property
    def DataTimeout(self) -> TimeSpan:
        """
        Get: DataTimeout(self: FullTextService) -> TimeSpan
        Set: DataTimeout(self: FullTextService) = value
        """
        ...

    @property
    def DefaultPath(self) -> str:
        """ Get: DefaultPath(self: FullTextService) -> str """
        ...

    @property
    def LoadOSResourcesEnabled(self) -> bool:
        """
        Get: LoadOSResourcesEnabled(self: FullTextService) -> bool
        Set: LoadOSResourcesEnabled(self: FullTextService) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: FullTextService) -> str
        Set: Name(self: FullTextService) = value
        """
        ...

    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: FullTextService) -> Server """
        ...

    @property
    def ResourceUsage(self): # -> ResourceUsage
        """
        Get: ResourceUsage(self: FullTextService) -> ResourceUsage
        Set: ResourceUsage(self: FullTextService) = value
        """
        ...


    def Cleanup(self): # -> 
        """ Cleanup(self: FullTextService) """
        ...

    def EnumLanguages(self) -> DataTable:
        """ EnumLanguages(self: FullTextService) -> DataTable """
        ...

    def EnumSemanticLanguages(self) -> DataTable:
        """ EnumSemanticLanguages(self: FullTextService) -> DataTable """
        ...

    def UpdateLanguageResources(self): # -> 
        """ UpdateLanguageResources(self: FullTextService) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class FullTextStopList(IDroppable, ICreatable, IScriptable, IObjectPermission, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    FullTextStopList()
    FullTextStopList(database: Database, name: str)
    """
    @property
    def ID(self) -> int:
        """ Get: ID(self: FullTextStopList) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: FullTextStopList) -> str
        Set: Name(self: FullTextStopList) = value
        """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: FullTextStopList) -> str
        Set: Owner(self: FullTextStopList) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: FullTextStopList) -> Database
        Set: Parent(self: FullTextStopList) = value
        """
        ...


    def AddStopWord(self, stopword:str, language:str): # -> 
        """ AddStopWord(self: FullTextStopList, stopword: str, language: str) """
        ...

    def CreateFromExistingStopList(self, *__args:str): # -> 
        """ CreateFromExistingStopList(self: FullTextStopList, stoplistName: str)CreateFromExistingStopList(self: FullTextStopList, dbName: str, stoplistName: str) """
        ...

    def CreateFromSystemStopList(self): # -> 
        """ CreateFromSystemStopList(self: FullTextStopList) """
        ...

    def EnumStopWords(self) -> DataTable:
        """ EnumStopWords(self: FullTextStopList) -> DataTable """
        ...

    def HasStopWord(self, stopword:str, language:str) -> bool:
        """ HasStopWord(self: FullTextStopList, stopword: str, language: str) -> bool """
        ...

    def RemoveAllStopWords(self, language:str = ...): # -> 
        """ RemoveAllStopWords(self: FullTextStopList)RemoveAllStopWords(self: FullTextStopList, language: str) """
        ...

    def RemoveStopWord(self, stopword:str, language:str): # -> 
        """ RemoveStopWord(self: FullTextStopList, stopword: str, language: str) """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class FullTextStopListCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: FullTextStopListCollection) -> Database """
        ...


    def Add(self, fullTextStopList:FullTextStopList): # -> 
        """ Add(self: FullTextStopListCollection, fullTextStopList: FullTextStopList) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: FullTextStopListCollection, array: Array[FullTextStopList], index: int) """
        ...

    def ItemById(self, id:int) -> FullTextStopList:
        """ ItemById(self: FullTextStopListCollection, id: int) -> FullTextStopList """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class GeneratedAlwaysType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum GeneratedAlwaysType, values: AsRowEnd (2), AsRowStart (1), None (0) """
    AsRowEnd: GeneratedAlwaysType = ...
    AsRowStart: GeneratedAlwaysType = ...
    value__ = ...


class GraphType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum GraphType, values: GraphFromId (3), GraphFromIdComputed (5), GraphFromObjId (4), GraphId (1), GraphIdComputed (2), GraphToId (6), GraphToIdComputed (8), GraphToObjId (7), None (0) """
    GraphFromId: GraphType = ...
    GraphFromIdComputed: GraphType = ...
    GraphFromObjId: GraphType = ...
    GraphId: GraphType = ...
    GraphIdComputed: GraphType = ...
    GraphToId: GraphType = ...
    GraphToIdComputed: GraphType = ...
    GraphToObjId: GraphType = ...
    value__ = ...


class HadrManagerStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum HadrManagerStatus, values: Failed (2), PendingCommunication (0), Running (1) """
    Failed: HadrManagerStatus = ...
    PendingCommunication: HadrManagerStatus = ...
    Running: HadrManagerStatus = ...
    value__ = ...


class HttpAuthenticationModes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) HttpAuthenticationModes, values: All (63), Anonymous (1), Basic (2), Digest (4), Integrated (8), Kerberos (32), Ntlm (16) """
    All: HttpAuthenticationModes = ...
    Anonymous: HttpAuthenticationModes = ...
    Basic: HttpAuthenticationModes = ...
    Digest: HttpAuthenticationModes = ...
    Integrated: HttpAuthenticationModes = ...
    Kerberos: HttpAuthenticationModes = ...
    Ntlm: HttpAuthenticationModes = ...
    value__ = ...


class HttpPortTypes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) HttpPortTypes, values: All (3), Clear (2), None (0), Ssl (1) """
    All: HttpPortTypes = ...
    Clear: HttpPortTypes = ...
    Ssl: HttpPortTypes = ...
    value__ = ...


class HttpProtocol(EndpointProtocol): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def AuthenticationRealm(self) -> str:
        """
        Get: AuthenticationRealm(self: HttpProtocol) -> str
        Set: AuthenticationRealm(self: HttpProtocol) = value
        """
        ...

    @property
    def ClearPort(self) -> int:
        """
        Get: ClearPort(self: HttpProtocol) -> int
        Set: ClearPort(self: HttpProtocol) = value
        """
        ...

    @property
    def DefaultLogonDomain(self) -> str:
        """
        Get: DefaultLogonDomain(self: HttpProtocol) -> str
        Set: DefaultLogonDomain(self: HttpProtocol) = value
        """
        ...

    @property
    def HttpAuthenticationModes(self) -> HttpAuthenticationModes:
        """
        Get: HttpAuthenticationModes(self: HttpProtocol) -> HttpAuthenticationModes
        Set: HttpAuthenticationModes(self: HttpProtocol) = value
        """
        ...

    @property
    def HttpPortTypes(self) -> HttpPortTypes:
        """
        Get: HttpPortTypes(self: HttpProtocol) -> HttpPortTypes
        Set: HttpPortTypes(self: HttpProtocol) = value
        """
        ...

    @property
    def IsCompressionEnabled(self) -> bool:
        """
        Get: IsCompressionEnabled(self: HttpProtocol) -> bool
        Set: IsCompressionEnabled(self: HttpProtocol) = value
        """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: HttpProtocol) -> bool """
        ...

    @property
    def SslPort(self) -> int:
        """
        Get: SslPort(self: HttpProtocol) -> int
        Set: SslPort(self: HttpProtocol) = value
        """
        ...

    @property
    def WebSite(self) -> str:
        """
        Get: WebSite(self: HttpProtocol) -> str
        Set: WebSite(self: HttpProtocol) = value
        """
        ...

    @property
    def WebSiteUrlPath(self) -> str:
        """
        Get: WebSiteUrlPath(self: HttpProtocol) -> str
        Set: WebSiteUrlPath(self: HttpProtocol) = value
        """
        ...


    def Create(self): # -> 
        """ Create(self: HttpProtocol) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class IAvailabilityGroupState(IRefreshable, IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def IsAutoFailover(self) -> bool:
        """ Get: IsAutoFailover(self: IAvailabilityGroupState) -> bool """
        ...

    @property
    def IsOnline(self) -> bool:
        """ Get: IsOnline(self: IAvailabilityGroupState) -> bool """
        ...

    @property
    def NumberOfDisconnectedReplicas(self) -> int:
        """ Get: NumberOfDisconnectedReplicas(self: IAvailabilityGroupState) -> int """
        ...

    @property
    def NumberOfNotSynchronizedReplicas(self) -> int:
        """ Get: NumberOfNotSynchronizedReplicas(self: IAvailabilityGroupState) -> int """
        ...

    @property
    def NumberOfNotSynchronizingReplicas(self) -> int:
        """ Get: NumberOfNotSynchronizingReplicas(self: IAvailabilityGroupState) -> int """
        ...

    @property
    def NumberOfReplicasWithUnhealthyRole(self) -> int:
        """ Get: NumberOfReplicasWithUnhealthyRole(self: IAvailabilityGroupState) -> int """
        ...

    @property
    def NumberOfSynchronizedSecondaryReplicas(self) -> int:
        """ Get: NumberOfSynchronizedSecondaryReplicas(self: IAvailabilityGroupState) -> int """
        ...



class IColumnPermission(IObjectPermission): # skipped bases: <type 'object'>
    """ no doc """
    def EnumColumnPermissions(self, granteeName:str, permissions = ...) -> Array: # Not found arg types: {'permissions': 'ObjectPermissionSet'}
        """
        EnumColumnPermissions(self: IColumnPermission, granteeName: str) -> Array[ObjectPermissionInfo]
        EnumColumnPermissions(self: IColumnPermission, granteeName: str, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        """
        ...


class IDatabaseMaintenanceFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def DataAndBackupOnSeparateLogicalVolumes(self) -> bool:
        """ Get: DataAndBackupOnSeparateLogicalVolumes(self: IDatabaseMaintenanceFacet) -> bool """
        ...

    @property
    def DelayedDurability(self) -> DelayedDurability:
        """
        Get: DelayedDurability(self: IDatabaseMaintenanceFacet) -> DelayedDurability
        Set: DelayedDurability(self: IDatabaseMaintenanceFacet) = value
        """
        ...

    @property
    def LastBackupDate(self) -> DateTime:
        """ Get: LastBackupDate(self: IDatabaseMaintenanceFacet) -> DateTime """
        ...

    @property
    def LastLogBackupDate(self) -> DateTime:
        """ Get: LastLogBackupDate(self: IDatabaseMaintenanceFacet) -> DateTime """
        ...

    @property
    def PageVerify(self): # -> PageVerify
        """
        Get: PageVerify(self: IDatabaseMaintenanceFacet) -> PageVerify
        Set: PageVerify(self: IDatabaseMaintenanceFacet) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: IDatabaseMaintenanceFacet) -> bool
        Set: ReadOnly(self: IDatabaseMaintenanceFacet) = value
        """
        ...

    @property
    def RecoveryModel(self): # -> RecoveryModel
        """
        Get: RecoveryModel(self: IDatabaseMaintenanceFacet) -> RecoveryModel
        Set: RecoveryModel(self: IDatabaseMaintenanceFacet) = value
        """
        ...

    @property
    def Status(self) -> DatabaseStatus:
        """ Get: Status(self: IDatabaseMaintenanceFacet) -> DatabaseStatus """
        ...

    @property
    def TargetRecoveryTime(self) -> int:
        """
        Get: TargetRecoveryTime(self: IDatabaseMaintenanceFacet) -> int
        Set: TargetRecoveryTime(self: IDatabaseMaintenanceFacet) = value
        """
        ...



class IDatabasePerformanceFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AutoClose(self) -> bool:
        """
        Get: AutoClose(self: IDatabasePerformanceFacet) -> bool
        Set: AutoClose(self: IDatabasePerformanceFacet) = value
        """
        ...

    @property
    def AutoShrink(self) -> bool:
        """
        Get: AutoShrink(self: IDatabasePerformanceFacet) -> bool
        Set: AutoShrink(self: IDatabasePerformanceFacet) = value
        """
        ...

    @property
    def CollationMatchesModelOrMaster(self) -> bool:
        """ Get: CollationMatchesModelOrMaster(self: IDatabasePerformanceFacet) -> bool """
        ...

    @property
    def DataAndLogFilesOnSeparateLogicalVolumes(self) -> bool:
        """ Get: DataAndLogFilesOnSeparateLogicalVolumes(self: IDatabasePerformanceFacet) -> bool """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: IDatabasePerformanceFacet) -> bool """
        ...

    @property
    def Size(self) -> float:
        """ Get: Size(self: IDatabasePerformanceFacet) -> float """
        ...

    @property
    def Status(self) -> DatabaseStatus:
        """ Get: Status(self: IDatabasePerformanceFacet) -> DatabaseStatus """
        ...



class IDatabaseSecurityFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def IsOwnerSysadmin(self) -> bool:
        """ Get: IsOwnerSysadmin(self: IDatabaseSecurityFacet) -> bool """
        ...

    @property
    def Trustworthy(self) -> bool:
        """
        Get: Trustworthy(self: IDatabaseSecurityFacet) -> bool
        Set: Trustworthy(self: IDatabaseSecurityFacet) = value
        """
        ...



class ILoginOptions(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AsymmetricKey(self) -> str:
        """
        Get: AsymmetricKey(self: ILoginOptions) -> str
        Set: AsymmetricKey(self: ILoginOptions) = value
        """
        ...

    @property
    def Certificate(self) -> str:
        """
        Get: Certificate(self: ILoginOptions) -> str
        Set: Certificate(self: ILoginOptions) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: ILoginOptions) -> DateTime """
        ...

    @property
    def Credential(self) -> str:
        """
        Get: Credential(self: ILoginOptions) -> str
        Set: Credential(self: ILoginOptions) = value
        """
        ...

    @property
    def DefaultDatabase(self) -> str:
        """
        Get: DefaultDatabase(self: ILoginOptions) -> str
        Set: DefaultDatabase(self: ILoginOptions) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ILoginOptions) -> int """
        ...

    @property
    def IsDisabled(self) -> bool:
        """ Get: IsDisabled(self: ILoginOptions) -> bool """
        ...

    @property
    def IsLocked(self) -> bool:
        """ Get: IsLocked(self: ILoginOptions) -> bool """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: ILoginOptions) -> bool """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: ILoginOptions) -> str
        Set: Language(self: ILoginOptions) = value
        """
        ...

    @property
    def LanguageAlias(self) -> str:
        """ Get: LanguageAlias(self: ILoginOptions) -> str """
        ...

    @property
    def MustChangePassword(self) -> bool:
        """ Get: MustChangePassword(self: ILoginOptions) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ILoginOptions) -> str
        Set: Name(self: ILoginOptions) = value
        """
        ...

    @property
    def PasswordExpirationEnabled(self) -> bool:
        """
        Get: PasswordExpirationEnabled(self: ILoginOptions) -> bool
        Set: PasswordExpirationEnabled(self: ILoginOptions) = value
        """
        ...

    @property
    def PasswordPolicyEnforced(self) -> bool:
        """
        Get: PasswordPolicyEnforced(self: ILoginOptions) -> bool
        Set: PasswordPolicyEnforced(self: ILoginOptions) = value
        """
        ...



class ImplementationType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ImplementationType, values: SqlClr (2), TransactSql (1) """
    SqlClr: ImplementationType = ...
    TransactSql: ImplementationType = ...
    value__ = ...


class IMultipartNameFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Name(self) -> str:
        """ Get: Name(self: IMultipartNameFacet) -> str """
        ...

    @property
    def Schema(self) -> str:
        """ Get: Schema(self: IMultipartNameFacet) -> str """
        ...



class INameFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Name(self) -> str:
        """ Get: Name(self: INameFacet) -> str """
        ...



class Index(IDroppable, IAlterable, ICreatable, IScriptable, IRenamable, IPropertyDataDispatch, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IMarkForDrop, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Index()
    Index(parent: SqlSmoObject, name: str)
    """
    @property
    def BoundingBoxXMax(self) -> float:
        """
        Get: BoundingBoxXMax(self: Index) -> float
        Set: BoundingBoxXMax(self: Index) = value
        """
        ...

    @property
    def BoundingBoxXMin(self) -> float:
        """
        Get: BoundingBoxXMin(self: Index) -> float
        Set: BoundingBoxXMin(self: Index) = value
        """
        ...

    @property
    def BoundingBoxYMax(self) -> float:
        """
        Get: BoundingBoxYMax(self: Index) -> float
        Set: BoundingBoxYMax(self: Index) = value
        """
        ...

    @property
    def BoundingBoxYMin(self) -> float:
        """
        Get: BoundingBoxYMin(self: Index) -> float
        Set: BoundingBoxYMin(self: Index) = value
        """
        ...

    @property
    def BucketCount(self) -> int:
        """
        Get: BucketCount(self: Index) -> int
        Set: BucketCount(self: Index) = value
        """
        ...

    @property
    def CellsPerObject(self) -> int:
        """
        Get: CellsPerObject(self: Index) -> int
        Set: CellsPerObject(self: Index) = value
        """
        ...

    @property
    def CompactLargeObjects(self) -> bool:
        """
        Get: CompactLargeObjects(self: Index) -> bool
        Set: CompactLargeObjects(self: Index) = value
        """
        ...

    @property
    def CompressAllRowGroups(self) -> bool:
        """
        Get: CompressAllRowGroups(self: Index) -> bool
        Set: CompressAllRowGroups(self: Index) = value
        """
        ...

    @property
    def CompressionDelay(self) -> int:
        """
        Get: CompressionDelay(self: Index) -> int
        Set: CompressionDelay(self: Index) = value
        """
        ...

    @property
    def DisallowPageLocks(self) -> bool:
        """
        Get: DisallowPageLocks(self: Index) -> bool
        Set: DisallowPageLocks(self: Index) = value
        """
        ...

    @property
    def DisallowRowLocks(self) -> bool:
        """
        Get: DisallowRowLocks(self: Index) -> bool
        Set: DisallowRowLocks(self: Index) = value
        """
        ...

    @property
    def Events(self): # -> IndexEvents
        """ Get: Events(self: Index) -> IndexEvents """
        ...

    @property
    def FileGroup(self) -> str:
        """
        Get: FileGroup(self: Index) -> str
        Set: FileGroup(self: Index) = value
        """
        ...

    @property
    def FileStreamFileGroup(self) -> str:
        """
        Get: FileStreamFileGroup(self: Index) -> str
        Set: FileStreamFileGroup(self: Index) = value
        """
        ...

    @property
    def FileStreamPartitionScheme(self) -> str:
        """
        Get: FileStreamPartitionScheme(self: Index) -> str
        Set: FileStreamPartitionScheme(self: Index) = value
        """
        ...

    @property
    def FillFactor(self) -> Byte:
        """
        Get: FillFactor(self: Index) -> Byte
        Set: FillFactor(self: Index) = value
        """
        ...

    @property
    def FilterDefinition(self) -> str:
        """
        Get: FilterDefinition(self: Index) -> str
        Set: FilterDefinition(self: Index) = value
        """
        ...

    @property
    def HasCompressedPartitions(self) -> bool:
        """ Get: HasCompressedPartitions(self: Index) -> bool """
        ...

    @property
    def HasFilter(self) -> bool:
        """ Get: HasFilter(self: Index) -> bool """
        ...

    @property
    def HasSparseColumn(self) -> bool:
        """ Get: HasSparseColumn(self: Index) -> bool """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Index) -> int """
        ...

    @property
    def IgnoreDuplicateKeys(self) -> bool:
        """
        Get: IgnoreDuplicateKeys(self: Index) -> bool
        Set: IgnoreDuplicateKeys(self: Index) = value
        """
        ...

    @property
    def IndexedColumns(self) -> IndexedColumnCollection:
        """ Get: IndexedColumns(self: Index) -> IndexedColumnCollection """
        ...

    @property
    def IndexedXmlPathName(self) -> str:
        """
        Get: IndexedXmlPathName(self: Index) -> str
        Set: IndexedXmlPathName(self: Index) = value
        """
        ...

    @property
    def IndexedXmlPathNamespaces(self): # -> IndexedXmlPathNamespaceCollection
        """ Get: IndexedXmlPathNamespaces(self: Index) -> IndexedXmlPathNamespaceCollection """
        ...

    @property
    def IndexedXmlPaths(self): # -> IndexedXmlPathCollection
        """ Get: IndexedXmlPaths(self: Index) -> IndexedXmlPathCollection """
        ...

    @property
    def IndexKeyType(self): # -> IndexKeyType
        """
        Get: IndexKeyType(self: Index) -> IndexKeyType
        Set: IndexKeyType(self: Index) = value
        """
        ...

    @property
    def IndexType(self) -> IndexType:
        """
        Get: IndexType(self: Index) -> IndexType
        Set: IndexType(self: Index) = value
        """
        ...

    @property
    def IsClustered(self) -> bool:
        """
        Get: IsClustered(self: Index) -> bool
        Set: IsClustered(self: Index) = value
        """
        ...

    @property
    def IsDisabled(self) -> bool:
        """ Get: IsDisabled(self: Index) -> bool """
        ...

    @property
    def IsFileTableDefined(self) -> bool:
        """ Get: IsFileTableDefined(self: Index) -> bool """
        ...

    @property
    def IsFullTextKey(self) -> bool:
        """
        Get: IsFullTextKey(self: Index) -> bool
        Set: IsFullTextKey(self: Index) = value
        """
        ...

    @property
    def IsIndexOnComputed(self) -> bool:
        """ Get: IsIndexOnComputed(self: Index) -> bool """
        ...

    @property
    def IsIndexOnTable(self) -> bool:
        """ Get: IsIndexOnTable(self: Index) -> bool """
        ...

    @property
    def IsMemoryOptimized(self) -> bool:
        """
        Get: IsMemoryOptimized(self: Index) -> bool
        Set: IsMemoryOptimized(self: Index) = value
        """
        ...

    @property
    def IsPartitioned(self) -> bool:
        """ Get: IsPartitioned(self: Index) -> bool """
        ...

    @property
    def IsSpatialIndex(self) -> bool:
        """ Get: IsSpatialIndex(self: Index) -> bool """
        ...

    @property
    def IsSystemNamed(self) -> bool:
        """ Get: IsSystemNamed(self: Index) -> bool """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: Index) -> bool """
        ...

    @property
    def IsUnique(self) -> bool:
        """
        Get: IsUnique(self: Index) -> bool
        Set: IsUnique(self: Index) = value
        """
        ...

    @property
    def IsXmlIndex(self) -> bool:
        """ Get: IsXmlIndex(self: Index) -> bool """
        ...

    @property
    def Level1Grid(self): # -> SpatialGeoLevelSize
        """
        Get: Level1Grid(self: Index) -> SpatialGeoLevelSize
        Set: Level1Grid(self: Index) = value
        """
        ...

    @property
    def Level2Grid(self): # -> SpatialGeoLevelSize
        """
        Get: Level2Grid(self: Index) -> SpatialGeoLevelSize
        Set: Level2Grid(self: Index) = value
        """
        ...

    @property
    def Level3Grid(self): # -> SpatialGeoLevelSize
        """
        Get: Level3Grid(self: Index) -> SpatialGeoLevelSize
        Set: Level3Grid(self: Index) = value
        """
        ...

    @property
    def Level4Grid(self): # -> SpatialGeoLevelSize
        """
        Get: Level4Grid(self: Index) -> SpatialGeoLevelSize
        Set: Level4Grid(self: Index) = value
        """
        ...

    @property
    def LowPriorityAbortAfterWait(self) -> AbortAfterWait:
        """
        Get: LowPriorityAbortAfterWait(self: Index) -> AbortAfterWait
        Set: LowPriorityAbortAfterWait(self: Index) = value
        """
        ...

    @property
    def LowPriorityMaxDuration(self) -> int:
        """
        Get: LowPriorityMaxDuration(self: Index) -> int
        Set: LowPriorityMaxDuration(self: Index) = value
        """
        ...

    @property
    def MaximumDegreeOfParallelism(self) -> int:
        """
        Get: MaximumDegreeOfParallelism(self: Index) -> int
        Set: MaximumDegreeOfParallelism(self: Index) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Index) -> str
        Set: Name(self: Index) = value
        """
        ...

    @property
    def NoAutomaticRecomputation(self) -> bool:
        """
        Get: NoAutomaticRecomputation(self: Index) -> bool
        Set: NoAutomaticRecomputation(self: Index) = value
        """
        ...

    @property
    def OnlineIndexOperation(self) -> bool:
        """
        Get: OnlineIndexOperation(self: Index) -> bool
        Set: OnlineIndexOperation(self: Index) = value
        """
        ...

    @property
    def PadIndex(self) -> bool:
        """
        Get: PadIndex(self: Index) -> bool
        Set: PadIndex(self: Index) = value
        """
        ...

    @property
    def Parent(self) -> SqlSmoObject:
        """
        Get: Parent(self: Index) -> SqlSmoObject
        Set: Parent(self: Index) = value
        """
        ...

    @property
    def ParentXmlIndex(self) -> str:
        """
        Get: ParentXmlIndex(self: Index) -> str
        Set: ParentXmlIndex(self: Index) = value
        """
        ...

    @property
    def PartitionScheme(self) -> str:
        """
        Get: PartitionScheme(self: Index) -> str
        Set: PartitionScheme(self: Index) = value
        """
        ...

    @property
    def PartitionSchemeParameters(self): # -> PartitionSchemeParameterCollection
        """ Get: PartitionSchemeParameters(self: Index) -> PartitionSchemeParameterCollection """
        ...

    @property
    def PhysicalPartitions(self): # -> PhysicalPartitionCollection
        """ Get: PhysicalPartitions(self: Index) -> PhysicalPartitionCollection """
        ...

    @property
    def ResumableIndexOperation(self) -> bool:
        """
        Get: ResumableIndexOperation(self: Index) -> bool
        Set: ResumableIndexOperation(self: Index) = value
        """
        ...

    @property
    def ResumableMaxDuration(self) -> int:
        """
        Get: ResumableMaxDuration(self: Index) -> int
        Set: ResumableMaxDuration(self: Index) = value
        """
        ...

    @property
    def ResumableOperationState(self): # -> ResumableOperationStateType
        """ Get: ResumableOperationState(self: Index) -> ResumableOperationStateType """
        ...

    @property
    def SecondaryXmlIndexType(self): # -> SecondaryXmlIndexType
        """
        Get: SecondaryXmlIndexType(self: Index) -> SecondaryXmlIndexType
        Set: SecondaryXmlIndexType(self: Index) = value
        """
        ...

    @property
    def SortInTempdb(self) -> bool:
        """
        Get: SortInTempdb(self: Index) -> bool
        Set: SortInTempdb(self: Index) = value
        """
        ...

    @property
    def SpaceUsed(self) -> float:
        """ Get: SpaceUsed(self: Index) -> float """
        ...

    @property
    def SpatialIndexType(self): # -> SpatialIndexType
        """
        Get: SpatialIndexType(self: Index) -> SpatialIndexType
        Set: SpatialIndexType(self: Index) = value
        """
        ...


    def Abort(self): # -> 
        """ Abort(self: Index) """
        ...

    def AlterAllIndexes(self): # -> 
        """ AlterAllIndexes(self: Index) """
        ...

    def CheckIndex(self) -> StringCollection:
        """ CheckIndex(self: Index) -> StringCollection """
        ...

    def CheckIndexWithResult(self) -> DataTable:
        """ CheckIndexWithResult(self: Index) -> DataTable """
        ...

    def Disable(self): # -> 
        """ Disable(self: Index) """
        ...

    def DropAndMove(self, *__args:str): # -> 
        """ DropAndMove(self: Index, partitionScheme: str, partitionSchemeParameters: StringCollection)DropAndMove(self: Index, fileGroup: str) """
        ...

    def Enable(self, action): # ->  # Not found arg types: {'action': 'IndexEnableAction'}
        """ Enable(self: Index, action: IndexEnableAction) """
        ...

    def EnumFragmentation(self, fragmentationOption:FragmentationOption = ..., partitionNumber:int = ...) -> DataTable:
        """
        EnumFragmentation(self: Index) -> DataTable
        EnumFragmentation(self: Index, fragmentationOption: FragmentationOption) -> DataTable
        EnumFragmentation(self: Index, fragmentationOption: FragmentationOption, partitionNumber: int) -> DataTable
        """
        ...

    def EnumStatistics(self): # -> DataSet
        """ EnumStatistics(self: Index) -> DataSet """
        ...

    def Pause(self): # -> 
        """ Pause(self: Index) """
        ...

    def Rebuild(self, partitionNumber:int = ...): # -> 
        """ Rebuild(self: Index, partitionNumber: int)Rebuild(self: Index) """
        ...

    def RebuildAllIndexes(self): # -> 
        """ RebuildAllIndexes(self: Index) """
        ...

    def RecalculateSpaceUsage(self): # -> 
        """ RecalculateSpaceUsage(self: Index) """
        ...

    def Recreate(self): # -> 
        """ Recreate(self: Index) """
        ...

    def Reorganize(self, partitionNumber:int): # -> 
        """ Reorganize(self: Index, partitionNumber: int) """
        ...

    def ReorganizeAllIndexes(self): # -> 
        """ ReorganizeAllIndexes(self: Index) """
        ...

    def Resume(self): # -> 
        """ Resume(self: Index) """
        ...

    def UpdateStatistics(self, scanType = ..., sampleValue:int = ..., recompute:bool = ...): # ->  # Not found arg types: {'scanType': 'StatisticsScanType'}
        """ UpdateStatistics(self: Index)UpdateStatistics(self: Index, scanType: StatisticsScanType)UpdateStatistics(self: Index, scanType: StatisticsScanType, sampleValue: int)UpdateStatistics(self: Index, scanType: StatisticsScanType, sampleValue: int, recompute: bool) """
        ...

    def UpgradeToClusteredColumnStoreIndex(self): # -> 
        """ UpgradeToClusteredColumnStoreIndex(self: Index) """
        ...

    def __new__(cls, parent:SqlSmoObject = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, parent: SqlSmoObject, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class IndexCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> SqlSmoObject:
        """ Get: Parent(self: IndexCollection) -> SqlSmoObject """
        ...


    def Add(self, index:Index): # -> 
        """ Add(self: IndexCollection, index: Index) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: IndexCollection, array: Array[Index], index: int) """
        ...

    def ItemById(self, id:int) -> Index:
        """ ItemById(self: IndexCollection, id: int) -> Index """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: IndexCollection, name: str)Remove(self: IndexCollection, index: Index) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class IndexedColumn(ISfcSupportsDesignMode, IPropertyDataDispatch, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    IndexedColumn()
    IndexedColumn(index: Index, name: str)
    IndexedColumn(index: Index, name: str, descending: bool)
    """
    @property
    def Descending(self) -> bool:
        """
        Get: Descending(self: IndexedColumn) -> bool
        Set: Descending(self: IndexedColumn) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: IndexedColumn) -> int """
        ...

    @property
    def IsComputed(self) -> bool:
        """ Get: IsComputed(self: IndexedColumn) -> bool """
        ...

    @property
    def IsIncluded(self) -> bool:
        """
        Get: IsIncluded(self: IndexedColumn) -> bool
        Set: IsIncluded(self: IndexedColumn) = value
        """
        ...

    @property
    def Parent(self) -> Index:
        """
        Get: Parent(self: IndexedColumn) -> Index
        Set: Parent(self: IndexedColumn) = value
        """
        ...


    def __new__(cls, index:Index = ..., name:str = ..., descending:bool = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, index: Index, name: str)
        __new__(cls: type, index: Index, name: str, descending: bool)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class IndexedColumnCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Index:
        """ Get: Parent(self: IndexedColumnCollection) -> Index """
        ...


    def Add(self, indexedColumn:IndexedColumn, *__args:str): # -> 
        """ Add(self: IndexedColumnCollection, indexedColumn: IndexedColumn)Add(self: IndexedColumnCollection, indexedColumn: IndexedColumn, insertAtColumnName: str)Add(self: IndexedColumnCollection, indexedColumn: IndexedColumn, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: IndexedColumnCollection, array: Array[IndexedColumn], index: int) """
        ...

    def ItemById(self, id:int) -> IndexedColumn:
        """ ItemById(self: IndexedColumnCollection, id: int) -> IndexedColumn """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class IndexedXmlPath(ISfcSupportsDesignMode, IMarkForDrop, IPropertyDataDispatch, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    IndexedXmlPath()
    IndexedXmlPath(index: Index, name: str)
    """
    @property
    def DataType(self) -> DataType:
        """
        Get: DataType(self: IndexedXmlPath) -> DataType
        Set: DataType(self: IndexedXmlPath) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: IndexedXmlPath) -> int """
        ...

    @property
    def IsNode(self) -> bool:
        """
        Get: IsNode(self: IndexedXmlPath) -> bool
        Set: IsNode(self: IndexedXmlPath) = value
        """
        ...

    @property
    def IsSingleton(self) -> bool:
        """
        Get: IsSingleton(self: IndexedXmlPath) -> bool
        Set: IsSingleton(self: IndexedXmlPath) = value
        """
        ...

    @property
    def IsXQueryMaxlengthInferred(self) -> bool:
        """ Get: IsXQueryMaxlengthInferred(self: IndexedXmlPath) -> bool """
        ...

    @property
    def IsXQueryTypeInferred(self) -> bool:
        """ Get: IsXQueryTypeInferred(self: IndexedXmlPath) -> bool """
        ...

    @property
    def Parent(self) -> Index:
        """
        Get: Parent(self: IndexedXmlPath) -> Index
        Set: Parent(self: IndexedXmlPath) = value
        """
        ...

    @property
    def Path(self) -> str:
        """
        Get: Path(self: IndexedXmlPath) -> str
        Set: Path(self: IndexedXmlPath) = value
        """
        ...

    @property
    def PathType(self): # -> IndexedXmlPathType
        """
        Get: PathType(self: IndexedXmlPath) -> IndexedXmlPathType
        Set: PathType(self: IndexedXmlPath) = value
        """
        ...

    @property
    def PathTypeDesc(self) -> str:
        """
        Get: PathTypeDesc(self: IndexedXmlPath) -> str
        Set: PathTypeDesc(self: IndexedXmlPath) = value
        """
        ...

    @property
    def SqlTypeCollationName(self) -> str:
        """
        Get: SqlTypeCollationName(self: IndexedXmlPath) -> str
        Set: SqlTypeCollationName(self: IndexedXmlPath) = value
        """
        ...

    @property
    def XmlComponentID(self) -> int:
        """
        Get: XmlComponentID(self: IndexedXmlPath) -> int
        Set: XmlComponentID(self: IndexedXmlPath) = value
        """
        ...

    @property
    def XQueryMaxLength(self) -> int:
        """
        Get: XQueryMaxLength(self: IndexedXmlPath) -> int
        Set: XQueryMaxLength(self: IndexedXmlPath) = value
        """
        ...

    @property
    def XQueryTypeDescription(self) -> str:
        """
        Get: XQueryTypeDescription(self: IndexedXmlPath) -> str
        Set: XQueryTypeDescription(self: IndexedXmlPath) = value
        """
        ...


    def __new__(cls, index:Index = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, index: Index, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class IndexedXmlPathCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Index:
        """ Get: Parent(self: IndexedXmlPathCollection) -> Index """
        ...


    def Add(self, indexedXmlPath:IndexedXmlPath, *__args:str): # -> 
        """ Add(self: IndexedXmlPathCollection, indexedXmlPath: IndexedXmlPath)Add(self: IndexedXmlPathCollection, indexedXmlPath: IndexedXmlPath, insertAtColumnName: str)Add(self: IndexedXmlPathCollection, indexedXmlPath: IndexedXmlPath, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: IndexedXmlPathCollection, array: Array[IndexedXmlPath], index: int) """
        ...

    def ItemById(self, id:int) -> IndexedXmlPath:
        """ ItemById(self: IndexedXmlPathCollection, id: int) -> IndexedXmlPath """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class IndexedXmlPathNamespace(ISfcSupportsDesignMode, IPropertyDataDispatch, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    IndexedXmlPathNamespace()
    IndexedXmlPathNamespace(index: Index, name: str)
    """
    @property
    def IsDefaultUri(self) -> bool:
        """
        Get: IsDefaultUri(self: IndexedXmlPathNamespace) -> bool
        Set: IsDefaultUri(self: IndexedXmlPathNamespace) = value
        """
        ...

    @property
    def Parent(self) -> Index:
        """
        Get: Parent(self: IndexedXmlPathNamespace) -> Index
        Set: Parent(self: IndexedXmlPathNamespace) = value
        """
        ...

    @property
    def Uri(self) -> str:
        """
        Get: Uri(self: IndexedXmlPathNamespace) -> str
        Set: Uri(self: IndexedXmlPathNamespace) = value
        """
        ...


    def __new__(cls, index:Index = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, index: Index, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class IndexedXmlPathNamespaceCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Index:
        """ Get: Parent(self: IndexedXmlPathNamespaceCollection) -> Index """
        ...


    def Add(self, indexedXmlPathNamespace:IndexedXmlPathNamespace): # -> 
        """ Add(self: IndexedXmlPathNamespaceCollection, indexedXmlPathNamespace: IndexedXmlPathNamespace) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: IndexedXmlPathNamespaceCollection, array: Array[IndexedXmlPathNamespace], index: int) """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: IndexedXmlPathNamespaceCollection, name: str)Remove(self: IndexedXmlPathNamespaceCollection, indexedXmlPathNamespace: IndexedXmlPathNamespace) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class IndexedXmlPathType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum IndexedXmlPathType, values: Sql (1), XQuery (0) """
    Sql: IndexedXmlPathType = ...
    value__ = ...
    XQuery: IndexedXmlPathType = ...


class IndexEnableAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum IndexEnableAction, values: Rebuild (1), Recreate (2) """
    Rebuild: IndexEnableAction = ...
    Recreate: IndexEnableAction = ...
    value__ = ...


class IndexEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self): # -> ObjectEventSet
        """ GetEventSelection(self: IndexEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: IndexEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: IndexEvents) """
        ...

    def SubscribeToEvents(self, events, eventHandler = ...): # ->  # Not found arg types: {'events': 'ObjectEventSet', 'eventHandler': 'ServerEventHandler'}
        """ SubscribeToEvents(self: IndexEvents, events: ObjectEventSet)SubscribeToEvents(self: IndexEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: IndexEvents) """
        ...

    def UnsubscribeFromEvents(self, events): # ->  # Not found arg types: {'events': 'ObjectEventSet'}
        """ UnsubscribeFromEvents(self: IndexEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class IndexKeyType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum IndexKeyType, values: DriPrimaryKey (1), DriUniqueKey (2), None (0) """
    DriPrimaryKey: IndexKeyType = ...
    DriUniqueKey: IndexKeyType = ...
    value__ = ...


class IndexOperation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum IndexOperation, values: Disable (2), Rebuild (0), Reorganize (1) """
    Disable: IndexOperation = ...
    Rebuild: IndexOperation = ...
    Reorganize: IndexOperation = ...
    value__ = ...


class IndexPopulationAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum IndexPopulationAction, values: Full (1), Incremental (2), Update (3) """
    Full: IndexPopulationAction = ...
    Incremental: IndexPopulationAction = ...
    Update: IndexPopulationAction = ...
    value__ = ...


class IndexPopulationStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum IndexPopulationStatus, values: Background (4), Full (1), Incremental (2), Manual (3), None (0), PausedOrThrottled (5) """
    Background: IndexPopulationStatus = ...
    Full: IndexPopulationStatus = ...
    Incremental: IndexPopulationStatus = ...
    Manual: IndexPopulationStatus = ...
    PausedOrThrottled: IndexPopulationStatus = ...
    value__ = ...


class IndexType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum IndexType, values: ClusteredColumnStoreIndex (9), ClusteredIndex (0), HeapIndex (10), NonClusteredColumnStoreIndex (5), NonClusteredHashIndex (6), NonClusteredIndex (1), PrimaryXmlIndex (2), SecondarySelectiveXmlIndex (8), SecondaryXmlIndex (3), SelectiveXmlIndex (7), SpatialIndex (4) """
    ClusteredColumnStoreIndex: IndexType = ...
    ClusteredIndex: IndexType = ...
    HeapIndex: IndexType = ...
    NonClusteredColumnStoreIndex: IndexType = ...
    NonClusteredHashIndex: IndexType = ...
    NonClusteredIndex: IndexType = ...
    PrimaryXmlIndex: IndexType = ...
    SecondarySelectiveXmlIndex: IndexType = ...
    SecondaryXmlIndex: IndexType = ...
    SelectiveXmlIndex: IndexType = ...
    SpatialIndex: IndexType = ...
    value__ = ...


class IndexTypeConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ IndexTypeConverter() """
    pass

class InDoubtTransactionResolutionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum InDoubtTransactionResolutionType, values: NoPresumption (0), PresumeAbort (2), PresumeCommit (1) """
    NoPresumption: InDoubtTransactionResolutionType = ...
    PresumeAbort: InDoubtTransactionResolutionType = ...
    PresumeCommit: InDoubtTransactionResolutionType = ...
    value__ = ...


class Information(SqlSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def BuildClrVersion(self) -> Version:
        """ Get: BuildClrVersion(self: Information) -> Version """
        ...

    @property
    def BuildClrVersionString(self) -> str:
        """ Get: BuildClrVersionString(self: Information) -> str """
        ...

    @property
    def BuildNumber(self) -> int:
        """ Get: BuildNumber(self: Information) -> int """
        ...

    @property
    def Collation(self) -> str:
        """ Get: Collation(self: Information) -> str """
        ...

    @property
    def CollationID(self) -> int:
        """ Get: CollationID(self: Information) -> int """
        ...

    @property
    def ComparisonStyle(self) -> int:
        """ Get: ComparisonStyle(self: Information) -> int """
        ...

    @property
    def ComputerNamePhysicalNetBIOS(self) -> str:
        """ Get: ComputerNamePhysicalNetBIOS(self: Information) -> str """
        ...

    @property
    def Edition(self) -> str:
        """ Get: Edition(self: Information) -> str """
        ...

    @property
    def EngineEdition(self) -> Edition:
        """ Get: EngineEdition(self: Information) -> Edition """
        ...

    @property
    def ErrorLogPath(self) -> str:
        """ Get: ErrorLogPath(self: Information) -> str """
        ...

    @property
    def FullyQualifiedNetName(self) -> str:
        """ Get: FullyQualifiedNetName(self: Information) -> str """
        ...

    @property
    def HostDistribution(self) -> str:
        """ Get: HostDistribution(self: Information) -> str """
        ...

    @property
    def HostPlatform(self) -> str:
        """ Get: HostPlatform(self: Information) -> str """
        ...

    @property
    def HostRelease(self) -> str:
        """ Get: HostRelease(self: Information) -> str """
        ...

    @property
    def HostServicePackLevel(self) -> str:
        """ Get: HostServicePackLevel(self: Information) -> str """
        ...

    @property
    def HostSku(self) -> int:
        """ Get: HostSku(self: Information) -> int """
        ...

    @property
    def IsCaseSensitive(self) -> bool:
        """ Get: IsCaseSensitive(self: Information) -> bool """
        ...

    @property
    def IsClustered(self) -> bool:
        """ Get: IsClustered(self: Information) -> bool """
        ...

    @property
    def IsFullTextInstalled(self) -> bool:
        """ Get: IsFullTextInstalled(self: Information) -> bool """
        ...

    @property
    def IsHadrEnabled(self) -> bool:
        """ Get: IsHadrEnabled(self: Information) -> bool """
        ...

    @property
    def IsPolyBaseInstalled(self) -> bool:
        """ Get: IsPolyBaseInstalled(self: Information) -> bool """
        ...

    @property
    def IsSingleUser(self) -> bool:
        """ Get: IsSingleUser(self: Information) -> bool """
        ...

    @property
    def IsXTPSupported(self) -> bool:
        """ Get: IsXTPSupported(self: Information) -> bool """
        ...

    @property
    def Language(self) -> str:
        """ Get: Language(self: Information) -> str """
        ...

    @property
    def MasterDBLogPath(self) -> str:
        """ Get: MasterDBLogPath(self: Information) -> str """
        ...

    @property
    def MasterDBPath(self) -> str:
        """ Get: MasterDBPath(self: Information) -> str """
        ...

    @property
    def MaxPrecision(self) -> Byte:
        """ Get: MaxPrecision(self: Information) -> Byte """
        ...

    @property
    def NetName(self) -> str:
        """ Get: NetName(self: Information) -> str """
        ...

    @property
    def OSVersion(self) -> str:
        """ Get: OSVersion(self: Information) -> str """
        ...

    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: Information) -> Server """
        ...

    @property
    def PhysicalMemory(self) -> int:
        """ Get: PhysicalMemory(self: Information) -> int """
        ...

    @property
    def Platform(self) -> str:
        """ Get: Platform(self: Information) -> str """
        ...

    @property
    def Processors(self) -> int:
        """ Get: Processors(self: Information) -> int """
        ...

    @property
    def Product(self) -> str:
        """ Get: Product(self: Information) -> str """
        ...

    @property
    def ProductLevel(self) -> str:
        """ Get: ProductLevel(self: Information) -> str """
        ...

    @property
    def ResourceLastUpdateDateTime(self) -> DateTime:
        """ Get: ResourceLastUpdateDateTime(self: Information) -> DateTime """
        ...

    @property
    def ResourceVersion(self) -> Version:
        """ Get: ResourceVersion(self: Information) -> Version """
        ...

    @property
    def ResourceVersionString(self) -> str:
        """ Get: ResourceVersionString(self: Information) -> str """
        ...

    @property
    def RootDirectory(self) -> str:
        """ Get: RootDirectory(self: Information) -> str """
        ...

    @property
    def SqlCharSet(self) -> Int16:
        """ Get: SqlCharSet(self: Information) -> Int16 """
        ...

    @property
    def SqlCharSetName(self) -> str:
        """ Get: SqlCharSetName(self: Information) -> str """
        ...

    @property
    def SqlSortOrder(self) -> Int16:
        """ Get: SqlSortOrder(self: Information) -> Int16 """
        ...

    @property
    def SqlSortOrderName(self) -> str:
        """ Get: SqlSortOrderName(self: Information) -> str """
        ...

    @property
    def Version(self) -> Version:
        """ Get: Version(self: Information) -> Version """
        ...

    @property
    def VersionMajor(self) -> int:
        """ Get: VersionMajor(self: Information) -> int """
        ...

    @property
    def VersionMinor(self) -> int:
        """ Get: VersionMinor(self: Information) -> int """
        ...

    @property
    def VersionString(self) -> str:
        """ Get: VersionString(self: Information) -> str """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class InstanceState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum InstanceState, values: Offline (16), OfflinePending (48), Online (1), OnlinePending (3), Unknown (0) """
    Offline: InstanceState = ...
    OfflinePending: InstanceState = ...
    Online: InstanceState = ...
    OnlinePending: InstanceState = ...
    Unknown: InstanceState = ...
    value__ = ...


class InternalSmoErrorException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    InternalSmoErrorException()
    InternalSmoErrorException(message: str)
    InternalSmoErrorException(message: str, innerException: Exception)
    """
    SerializeObjectState = ...


class InvalidRestorePlanException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ no doc """
    SerializeObjectState = ...


class InvalidScriptingOptionException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    InvalidScriptingOptionException()
    InvalidScriptingOptionException(message: str)
    InvalidScriptingOptionException(message: str, innerException: Exception)
    """
    SerializeObjectState = ...


class InvalidSmoOperationException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    InvalidSmoOperationException()
    InvalidSmoOperationException(message: str)
    InvalidSmoOperationException(message: str, innerException: Exception)
    InvalidSmoOperationException(opName: str, state: SqlSmoState)
    """
    @property
    def Message(self) -> str:
        """ Get: Message(self: InvalidSmoOperationException) -> str """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: InvalidSmoOperationException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class InvalidVersionSmoOperationException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    InvalidVersionSmoOperationException()
    InvalidVersionSmoOperationException(message: str)
    InvalidVersionSmoOperationException(message: str, innerException: Exception)
    InvalidVersionSmoOperationException(version: ServerVersion)
    """
    @property
    def Message(self) -> str:
        """ Get: Message(self: InvalidVersionSmoOperationException) -> str """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: InvalidVersionSmoOperationException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class IServerAuditFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def C2AuditTracingEnabled(self) -> bool:
        """
        Get: C2AuditTracingEnabled(self: IServerAuditFacet) -> bool
        Set: C2AuditTracingEnabled(self: IServerAuditFacet) = value
        """
        ...

    @property
    def DefaultTraceEnabled(self) -> bool:
        """
        Get: DefaultTraceEnabled(self: IServerAuditFacet) -> bool
        Set: DefaultTraceEnabled(self: IServerAuditFacet) = value
        """
        ...

    @property
    def LoginAuditLevel(self) -> AuditLevel:
        """
        Get: LoginAuditLevel(self: IServerAuditFacet) -> AuditLevel
        Set: LoginAuditLevel(self: IServerAuditFacet) = value
        """
        ...



class IServerConfigurationFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AdHocRemoteQueriesEnabled(self) -> bool:
        """
        Get: AdHocRemoteQueriesEnabled(self: IServerConfigurationFacet) -> bool
        Set: AdHocRemoteQueriesEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def Affinity64IOMask(self) -> int:
        """
        Get: Affinity64IOMask(self: IServerConfigurationFacet) -> int
        Set: Affinity64IOMask(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def Affinity64Mask(self) -> int:
        """
        Get: Affinity64Mask(self: IServerConfigurationFacet) -> int
        Set: Affinity64Mask(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def AffinityIOMask(self) -> int:
        """
        Get: AffinityIOMask(self: IServerConfigurationFacet) -> int
        Set: AffinityIOMask(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def AffinityMask(self) -> int:
        """
        Get: AffinityMask(self: IServerConfigurationFacet) -> int
        Set: AffinityMask(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def AgentXPsEnabled(self) -> bool:
        """
        Get: AgentXPsEnabled(self: IServerConfigurationFacet) -> bool
        Set: AgentXPsEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def AllowUpdates(self) -> bool:
        """
        Get: AllowUpdates(self: IServerConfigurationFacet) -> bool
        Set: AllowUpdates(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def AweEnabled(self) -> bool:
        """
        Get: AweEnabled(self: IServerConfigurationFacet) -> bool
        Set: AweEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def BlockedProcessThreshold(self) -> int:
        """
        Get: BlockedProcessThreshold(self: IServerConfigurationFacet) -> int
        Set: BlockedProcessThreshold(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def C2AuditTracingEnabled(self) -> bool:
        """
        Get: C2AuditTracingEnabled(self: IServerConfigurationFacet) -> bool
        Set: C2AuditTracingEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def ClrIntegrationEnabled(self) -> bool:
        """
        Get: ClrIntegrationEnabled(self: IServerConfigurationFacet) -> bool
        Set: ClrIntegrationEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def CommonCriteriaComplianceEnabled(self) -> bool:
        """ Get: CommonCriteriaComplianceEnabled(self: IServerConfigurationFacet) -> bool """
        ...

    @property
    def ContainmentEnabled(self) -> bool:
        """
        Get: ContainmentEnabled(self: IServerConfigurationFacet) -> bool
        Set: ContainmentEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def CostThresholdForParallelism(self) -> int:
        """
        Get: CostThresholdForParallelism(self: IServerConfigurationFacet) -> int
        Set: CostThresholdForParallelism(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def CrossDBOwnershipChainingEnabled(self) -> bool:
        """
        Get: CrossDBOwnershipChainingEnabled(self: IServerConfigurationFacet) -> bool
        Set: CrossDBOwnershipChainingEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def CursorThreshold(self) -> int:
        """
        Get: CursorThreshold(self: IServerConfigurationFacet) -> int
        Set: CursorThreshold(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def DatabaseMailEnabled(self) -> bool:
        """
        Get: DatabaseMailEnabled(self: IServerConfigurationFacet) -> bool
        Set: DatabaseMailEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def DefaultBackupCompressionEnabled(self) -> bool:
        """
        Get: DefaultBackupCompressionEnabled(self: IServerConfigurationFacet) -> bool
        Set: DefaultBackupCompressionEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def DefaultFullTextLanguage(self) -> int:
        """
        Get: DefaultFullTextLanguage(self: IServerConfigurationFacet) -> int
        Set: DefaultFullTextLanguage(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def DefaultLanguage(self) -> int:
        """
        Get: DefaultLanguage(self: IServerConfigurationFacet) -> int
        Set: DefaultLanguage(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def DefaultTraceEnabled(self) -> bool:
        """
        Get: DefaultTraceEnabled(self: IServerConfigurationFacet) -> bool
        Set: DefaultTraceEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def DisallowResultsFromTriggers(self) -> bool:
        """
        Get: DisallowResultsFromTriggers(self: IServerConfigurationFacet) -> bool
        Set: DisallowResultsFromTriggers(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def DynamicLocks(self) -> int:
        """
        Get: DynamicLocks(self: IServerConfigurationFacet) -> int
        Set: DynamicLocks(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def ExtensibleKeyManagementEnabled(self) -> bool:
        """
        Get: ExtensibleKeyManagementEnabled(self: IServerConfigurationFacet) -> bool
        Set: ExtensibleKeyManagementEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def FilestreamAccessLevel(self) -> FilestreamAccessLevelType:
        """
        Get: FilestreamAccessLevel(self: IServerConfigurationFacet) -> FilestreamAccessLevelType
        Set: FilestreamAccessLevel(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def FillFactor(self) -> int:
        """
        Get: FillFactor(self: IServerConfigurationFacet) -> int
        Set: FillFactor(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def FullTextCrawlBandwidthMax(self) -> int:
        """
        Get: FullTextCrawlBandwidthMax(self: IServerConfigurationFacet) -> int
        Set: FullTextCrawlBandwidthMax(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def FullTextCrawlBandwidthMin(self) -> int:
        """
        Get: FullTextCrawlBandwidthMin(self: IServerConfigurationFacet) -> int
        Set: FullTextCrawlBandwidthMin(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def FullTextCrawlRangeMax(self) -> int:
        """
        Get: FullTextCrawlRangeMax(self: IServerConfigurationFacet) -> int
        Set: FullTextCrawlRangeMax(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def FullTextNotifyBandwidthMax(self) -> int:
        """
        Get: FullTextNotifyBandwidthMax(self: IServerConfigurationFacet) -> int
        Set: FullTextNotifyBandwidthMax(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def FullTextNotifyBandwidthMin(self) -> int:
        """
        Get: FullTextNotifyBandwidthMin(self: IServerConfigurationFacet) -> int
        Set: FullTextNotifyBandwidthMin(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def IndexCreateMemory(self) -> int:
        """
        Get: IndexCreateMemory(self: IServerConfigurationFacet) -> int
        Set: IndexCreateMemory(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def InDoubtTransactionResolution(self) -> InDoubtTransactionResolutionType:
        """
        Get: InDoubtTransactionResolution(self: IServerConfigurationFacet) -> InDoubtTransactionResolutionType
        Set: InDoubtTransactionResolution(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def LightweightPoolingEnabled(self) -> bool:
        """
        Get: LightweightPoolingEnabled(self: IServerConfigurationFacet) -> bool
        Set: LightweightPoolingEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def MaxDegreeOfParallelism(self) -> int:
        """
        Get: MaxDegreeOfParallelism(self: IServerConfigurationFacet) -> int
        Set: MaxDegreeOfParallelism(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def MaxServerMemory(self) -> int:
        """
        Get: MaxServerMemory(self: IServerConfigurationFacet) -> int
        Set: MaxServerMemory(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def MaxWorkerThreads(self) -> int:
        """
        Get: MaxWorkerThreads(self: IServerConfigurationFacet) -> int
        Set: MaxWorkerThreads(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def MediaRetention(self) -> int:
        """
        Get: MediaRetention(self: IServerConfigurationFacet) -> int
        Set: MediaRetention(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def MinMemoryPerQuery(self) -> int:
        """
        Get: MinMemoryPerQuery(self: IServerConfigurationFacet) -> int
        Set: MinMemoryPerQuery(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def MinServerMemory(self) -> int:
        """
        Get: MinServerMemory(self: IServerConfigurationFacet) -> int
        Set: MinServerMemory(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def NestedTriggersEnabled(self) -> bool:
        """
        Get: NestedTriggersEnabled(self: IServerConfigurationFacet) -> bool
        Set: NestedTriggersEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def NetworkPacketSize(self) -> int:
        """
        Get: NetworkPacketSize(self: IServerConfigurationFacet) -> int
        Set: NetworkPacketSize(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def OleAutomationEnabled(self) -> bool:
        """
        Get: OleAutomationEnabled(self: IServerConfigurationFacet) -> bool
        Set: OleAutomationEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def OpenObjects(self) -> int:
        """
        Get: OpenObjects(self: IServerConfigurationFacet) -> int
        Set: OpenObjects(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def OptimizeAdhocWorkloads(self) -> bool:
        """
        Get: OptimizeAdhocWorkloads(self: IServerConfigurationFacet) -> bool
        Set: OptimizeAdhocWorkloads(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def PrecomputeRank(self) -> bool:
        """
        Get: PrecomputeRank(self: IServerConfigurationFacet) -> bool
        Set: PrecomputeRank(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def PriorityBoost(self) -> bool:
        """
        Get: PriorityBoost(self: IServerConfigurationFacet) -> bool
        Set: PriorityBoost(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def ProtocolHandlerTimeout(self) -> int:
        """
        Get: ProtocolHandlerTimeout(self: IServerConfigurationFacet) -> int
        Set: ProtocolHandlerTimeout(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def QueryGovernorCostLimit(self) -> int:
        """
        Get: QueryGovernorCostLimit(self: IServerConfigurationFacet) -> int
        Set: QueryGovernorCostLimit(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def QueryWait(self) -> int:
        """
        Get: QueryWait(self: IServerConfigurationFacet) -> int
        Set: QueryWait(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def RecoveryInterval(self) -> int:
        """
        Get: RecoveryInterval(self: IServerConfigurationFacet) -> int
        Set: RecoveryInterval(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def RemoteAccessEnabled(self) -> bool:
        """
        Get: RemoteAccessEnabled(self: IServerConfigurationFacet) -> bool
        Set: RemoteAccessEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def RemoteDacEnabled(self) -> bool:
        """
        Get: RemoteDacEnabled(self: IServerConfigurationFacet) -> bool
        Set: RemoteDacEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def RemoteDataArchiveEnabled(self) -> bool:
        """
        Get: RemoteDataArchiveEnabled(self: IServerConfigurationFacet) -> bool
        Set: RemoteDataArchiveEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def RemoteLoginTimeout(self) -> int:
        """
        Get: RemoteLoginTimeout(self: IServerConfigurationFacet) -> int
        Set: RemoteLoginTimeout(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def RemoteProcTransEnabled(self) -> bool:
        """
        Get: RemoteProcTransEnabled(self: IServerConfigurationFacet) -> bool
        Set: RemoteProcTransEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def RemoteQueryTimeout(self) -> int:
        """
        Get: RemoteQueryTimeout(self: IServerConfigurationFacet) -> int
        Set: RemoteQueryTimeout(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def ReplicationMaxTextSize(self) -> int:
        """
        Get: ReplicationMaxTextSize(self: IServerConfigurationFacet) -> int
        Set: ReplicationMaxTextSize(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def ReplicationXPsEnabled(self) -> bool:
        """
        Get: ReplicationXPsEnabled(self: IServerConfigurationFacet) -> bool
        Set: ReplicationXPsEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def ScanForStartupProcedures(self) -> bool:
        """
        Get: ScanForStartupProcedures(self: IServerConfigurationFacet) -> bool
        Set: ScanForStartupProcedures(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def ServerTriggerRecursionEnabled(self) -> bool:
        """
        Get: ServerTriggerRecursionEnabled(self: IServerConfigurationFacet) -> bool
        Set: ServerTriggerRecursionEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def SetWorkingSetSize(self) -> bool:
        """
        Get: SetWorkingSetSize(self: IServerConfigurationFacet) -> bool
        Set: SetWorkingSetSize(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def ShowAdvancedOptions(self) -> bool:
        """
        Get: ShowAdvancedOptions(self: IServerConfigurationFacet) -> bool
        Set: ShowAdvancedOptions(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def SmoAndDmoXPsEnabled(self) -> bool:
        """
        Get: SmoAndDmoXPsEnabled(self: IServerConfigurationFacet) -> bool
        Set: SmoAndDmoXPsEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def SqlMailEnabled(self) -> bool:
        """
        Get: SqlMailEnabled(self: IServerConfigurationFacet) -> bool
        Set: SqlMailEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def TransformNoiseWords(self) -> bool:
        """
        Get: TransformNoiseWords(self: IServerConfigurationFacet) -> bool
        Set: TransformNoiseWords(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def TwoDigitYearCutoff(self) -> int:
        """
        Get: TwoDigitYearCutoff(self: IServerConfigurationFacet) -> int
        Set: TwoDigitYearCutoff(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def UserConnections(self) -> int:
        """
        Get: UserConnections(self: IServerConfigurationFacet) -> int
        Set: UserConnections(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def UserInstancesEnabled(self) -> bool:
        """
        Get: UserInstancesEnabled(self: IServerConfigurationFacet) -> bool
        Set: UserInstancesEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def UserInstanceTimeout(self) -> int:
        """
        Get: UserInstanceTimeout(self: IServerConfigurationFacet) -> int
        Set: UserInstanceTimeout(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def UserOptions(self) -> int:
        """
        Get: UserOptions(self: IServerConfigurationFacet) -> int
        Set: UserOptions(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def WebAssistantEnabled(self) -> bool:
        """
        Get: WebAssistantEnabled(self: IServerConfigurationFacet) -> bool
        Set: WebAssistantEnabled(self: IServerConfigurationFacet) = value
        """
        ...

    @property
    def XPCmdShellEnabled(self) -> bool:
        """
        Get: XPCmdShellEnabled(self: IServerConfigurationFacet) -> bool
        Set: XPCmdShellEnabled(self: IServerConfigurationFacet) = value
        """
        ...



class IServerInformation(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def BuildClrVersionString(self) -> str:
        """ Get: BuildClrVersionString(self: IServerInformation) -> str """
        ...

    @property
    def BuildNumber(self) -> int:
        """ Get: BuildNumber(self: IServerInformation) -> int """
        ...

    @property
    def Collation(self) -> str:
        """ Get: Collation(self: IServerInformation) -> str """
        ...

    @property
    def CollationID(self) -> int:
        """ Get: CollationID(self: IServerInformation) -> int """
        ...

    @property
    def ComparisonStyle(self) -> int:
        """ Get: ComparisonStyle(self: IServerInformation) -> int """
        ...

    @property
    def ComputerNamePhysicalNetBIOS(self) -> str:
        """ Get: ComputerNamePhysicalNetBIOS(self: IServerInformation) -> str """
        ...

    @property
    def Edition(self) -> str:
        """ Get: Edition(self: IServerInformation) -> str """
        ...

    @property
    def EngineEdition(self) -> Edition:
        """ Get: EngineEdition(self: IServerInformation) -> Edition """
        ...

    @property
    def ErrorLogPath(self) -> str:
        """ Get: ErrorLogPath(self: IServerInformation) -> str """
        ...

    @property
    def IsCaseSensitive(self) -> bool:
        """ Get: IsCaseSensitive(self: IServerInformation) -> bool """
        ...

    @property
    def IsClustered(self) -> bool:
        """ Get: IsClustered(self: IServerInformation) -> bool """
        ...

    @property
    def IsFullTextInstalled(self) -> bool:
        """ Get: IsFullTextInstalled(self: IServerInformation) -> bool """
        ...

    @property
    def IsHadrEnabled(self) -> bool:
        """ Get: IsHadrEnabled(self: IServerInformation) -> bool """
        ...

    @property
    def IsPolyBaseInstalled(self) -> bool:
        """ Get: IsPolyBaseInstalled(self: IServerInformation) -> bool """
        ...

    @property
    def IsSingleUser(self) -> bool:
        """ Get: IsSingleUser(self: IServerInformation) -> bool """
        ...

    @property
    def IsXTPSupported(self) -> bool:
        """ Get: IsXTPSupported(self: IServerInformation) -> bool """
        ...

    @property
    def Language(self) -> str:
        """ Get: Language(self: IServerInformation) -> str """
        ...

    @property
    def MasterDBLogPath(self) -> str:
        """ Get: MasterDBLogPath(self: IServerInformation) -> str """
        ...

    @property
    def MasterDBPath(self) -> str:
        """ Get: MasterDBPath(self: IServerInformation) -> str """
        ...

    @property
    def MaxPrecision(self) -> Byte:
        """ Get: MaxPrecision(self: IServerInformation) -> Byte """
        ...

    @property
    def NetName(self) -> str:
        """ Get: NetName(self: IServerInformation) -> str """
        ...

    @property
    def OSVersion(self) -> str:
        """ Get: OSVersion(self: IServerInformation) -> str """
        ...

    @property
    def PhysicalMemory(self) -> int:
        """ Get: PhysicalMemory(self: IServerInformation) -> int """
        ...

    @property
    def Platform(self) -> str:
        """ Get: Platform(self: IServerInformation) -> str """
        ...

    @property
    def Processors(self) -> int:
        """ Get: Processors(self: IServerInformation) -> int """
        ...

    @property
    def Product(self) -> str:
        """ Get: Product(self: IServerInformation) -> str """
        ...

    @property
    def ProductLevel(self) -> str:
        """ Get: ProductLevel(self: IServerInformation) -> str """
        ...

    @property
    def ResourceLastUpdateDateTime(self) -> DateTime:
        """ Get: ResourceLastUpdateDateTime(self: IServerInformation) -> DateTime """
        ...

    @property
    def ResourceVersionString(self) -> str:
        """ Get: ResourceVersionString(self: IServerInformation) -> str """
        ...

    @property
    def RootDirectory(self) -> str:
        """ Get: RootDirectory(self: IServerInformation) -> str """
        ...

    @property
    def SqlCharSet(self) -> Int16:
        """ Get: SqlCharSet(self: IServerInformation) -> Int16 """
        ...

    @property
    def SqlCharSetName(self) -> str:
        """ Get: SqlCharSetName(self: IServerInformation) -> str """
        ...

    @property
    def SqlSortOrder(self) -> Int16:
        """ Get: SqlSortOrder(self: IServerInformation) -> Int16 """
        ...

    @property
    def SqlSortOrderName(self) -> str:
        """ Get: SqlSortOrderName(self: IServerInformation) -> str """
        ...

    @property
    def VersionMajor(self) -> int:
        """ Get: VersionMajor(self: IServerInformation) -> int """
        ...

    @property
    def VersionMinor(self) -> int:
        """ Get: VersionMinor(self: IServerInformation) -> int """
        ...

    @property
    def VersionString(self) -> str:
        """ Get: VersionString(self: IServerInformation) -> str """
        ...



class IServerPerformanceFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Affinity64IOMask(self) -> int:
        """ Get: Affinity64IOMask(self: IServerPerformanceFacet) -> int """
        ...

    @property
    def Affinity64Mask(self) -> int:
        """ Get: Affinity64Mask(self: IServerPerformanceFacet) -> int """
        ...

    @property
    def AffinityIOMask(self) -> int:
        """
        Get: AffinityIOMask(self: IServerPerformanceFacet) -> int
        Set: AffinityIOMask(self: IServerPerformanceFacet) = value
        """
        ...

    @property
    def AffinityMask(self) -> int:
        """ Get: AffinityMask(self: IServerPerformanceFacet) -> int """
        ...

    @property
    def BlockedProcessThreshold(self) -> int:
        """
        Get: BlockedProcessThreshold(self: IServerPerformanceFacet) -> int
        Set: BlockedProcessThreshold(self: IServerPerformanceFacet) = value
        """
        ...

    @property
    def CostThresholdForParallelism(self) -> int:
        """
        Get: CostThresholdForParallelism(self: IServerPerformanceFacet) -> int
        Set: CostThresholdForParallelism(self: IServerPerformanceFacet) = value
        """
        ...

    @property
    def DynamicLocks(self) -> int:
        """
        Get: DynamicLocks(self: IServerPerformanceFacet) -> int
        Set: DynamicLocks(self: IServerPerformanceFacet) = value
        """
        ...

    @property
    def LightweightPoolingEnabled(self) -> bool:
        """
        Get: LightweightPoolingEnabled(self: IServerPerformanceFacet) -> bool
        Set: LightweightPoolingEnabled(self: IServerPerformanceFacet) = value
        """
        ...

    @property
    def MaxDegreeOfParallelism(self) -> int:
        """
        Get: MaxDegreeOfParallelism(self: IServerPerformanceFacet) -> int
        Set: MaxDegreeOfParallelism(self: IServerPerformanceFacet) = value
        """
        ...

    @property
    def MaxWorkerThreads(self) -> int:
        """
        Get: MaxWorkerThreads(self: IServerPerformanceFacet) -> int
        Set: MaxWorkerThreads(self: IServerPerformanceFacet) = value
        """
        ...

    @property
    def NetworkPacketSize(self) -> int:
        """
        Get: NetworkPacketSize(self: IServerPerformanceFacet) -> int
        Set: NetworkPacketSize(self: IServerPerformanceFacet) = value
        """
        ...

    @property
    def OpenObjects(self) -> int:
        """
        Get: OpenObjects(self: IServerPerformanceFacet) -> int
        Set: OpenObjects(self: IServerPerformanceFacet) = value
        """
        ...



class IServerSecurityFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def CmdExecRightsForSystemAdminsOnly(self) -> bool:
        """ Get: CmdExecRightsForSystemAdminsOnly(self: IServerSecurityFacet) -> bool """
        ...

    @property
    def CommonCriteriaComplianceEnabled(self) -> bool:
        """ Get: CommonCriteriaComplianceEnabled(self: IServerSecurityFacet) -> bool """
        ...

    @property
    def CrossDBOwnershipChainingEnabled(self) -> bool:
        """
        Get: CrossDBOwnershipChainingEnabled(self: IServerSecurityFacet) -> bool
        Set: CrossDBOwnershipChainingEnabled(self: IServerSecurityFacet) = value
        """
        ...

    @property
    def LoginMode(self): # -> ServerLoginMode
        """ Get: LoginMode(self: IServerSecurityFacet) -> ServerLoginMode """
        ...

    @property
    def ProxyAccountEnabled(self) -> bool:
        """ Get: ProxyAccountEnabled(self: IServerSecurityFacet) -> bool """
        ...

    @property
    def ProxyAccountIsGrantedToPublicRole(self) -> bool:
        """ Get: ProxyAccountIsGrantedToPublicRole(self: IServerSecurityFacet) -> bool """
        ...

    @property
    def PublicServerRoleIsGrantedPermissions(self) -> bool:
        """ Get: PublicServerRoleIsGrantedPermissions(self: IServerSecurityFacet) -> bool """
        ...

    @property
    def ReplaceAlertTokensEnabled(self) -> bool:
        """
        Get: ReplaceAlertTokensEnabled(self: IServerSecurityFacet) -> bool
        Set: ReplaceAlertTokensEnabled(self: IServerSecurityFacet) = value
        """
        ...

    @property
    def XPCmdShellEnabled(self) -> bool:
        """
        Get: XPCmdShellEnabled(self: IServerSecurityFacet) -> bool
        Set: XPCmdShellEnabled(self: IServerSecurityFacet) = value
        """
        ...



class IServerSelectionFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def BuildNumber(self) -> int:
        """ Get: BuildNumber(self: IServerSelectionFacet) -> int """
        ...

    @property
    def Collation(self) -> str:
        """ Get: Collation(self: IServerSelectionFacet) -> str """
        ...

    @property
    def Edition(self) -> str:
        """ Get: Edition(self: IServerSelectionFacet) -> str """
        ...

    @property
    def IsCaseSensitive(self) -> bool:
        """ Get: IsCaseSensitive(self: IServerSelectionFacet) -> bool """
        ...

    @property
    def Language(self) -> str:
        """ Get: Language(self: IServerSelectionFacet) -> str """
        ...

    @property
    def NamedPipesEnabled(self) -> bool:
        """ Get: NamedPipesEnabled(self: IServerSelectionFacet) -> bool """
        ...

    @property
    def OSVersion(self) -> str:
        """ Get: OSVersion(self: IServerSelectionFacet) -> str """
        ...

    @property
    def Platform(self) -> str:
        """ Get: Platform(self: IServerSelectionFacet) -> str """
        ...

    @property
    def TcpEnabled(self) -> bool:
        """ Get: TcpEnabled(self: IServerSelectionFacet) -> bool """
        ...

    @property
    def VersionMajor(self) -> int:
        """ Get: VersionMajor(self: IServerSelectionFacet) -> int """
        ...

    @property
    def VersionMinor(self) -> int:
        """ Get: VersionMinor(self: IServerSelectionFacet) -> int """
        ...



class IServerSettings(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AuditLevel(self) -> AuditLevel:
        """
        Get: AuditLevel(self: IServerSettings) -> AuditLevel
        Set: AuditLevel(self: IServerSettings) = value
        """
        ...

    @property
    def BackupDirectory(self) -> str:
        """
        Get: BackupDirectory(self: IServerSettings) -> str
        Set: BackupDirectory(self: IServerSettings) = value
        """
        ...

    @property
    def DefaultFile(self) -> str:
        """
        Get: DefaultFile(self: IServerSettings) -> str
        Set: DefaultFile(self: IServerSettings) = value
        """
        ...

    @property
    def DefaultLog(self) -> str:
        """
        Get: DefaultLog(self: IServerSettings) -> str
        Set: DefaultLog(self: IServerSettings) = value
        """
        ...

    @property
    def LoginMode(self): # -> ServerLoginMode
        """ Get: LoginMode(self: IServerSettings) -> ServerLoginMode """
        ...

    @property
    def MailProfile(self) -> str:
        """
        Get: MailProfile(self: IServerSettings) -> str
        Set: MailProfile(self: IServerSettings) = value
        """
        ...

    @property
    def NumberOfLogFiles(self) -> int:
        """
        Get: NumberOfLogFiles(self: IServerSettings) -> int
        Set: NumberOfLogFiles(self: IServerSettings) = value
        """
        ...

    @property
    def PerfMonMode(self): # -> PerfMonMode
        """
        Get: PerfMonMode(self: IServerSettings) -> PerfMonMode
        Set: PerfMonMode(self: IServerSettings) = value
        """
        ...

    @property
    def TapeLoadWaitTime(self) -> int:
        """
        Get: TapeLoadWaitTime(self: IServerSettings) -> int
        Set: TapeLoadWaitTime(self: IServerSettings) = value
        """
        ...



class IServerSetupFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AgentDomainGroup(self) -> str:
        """ Get: AgentDomainGroup(self: IServerSetupFacet) -> str """
        ...

    @property
    def AgentServiceAccount(self) -> str:
        """ Get: AgentServiceAccount(self: IServerSetupFacet) -> str """
        ...

    @property
    def AgentStartMode(self) -> ServiceStartMode:
        """ Get: AgentStartMode(self: IServerSetupFacet) -> ServiceStartMode """
        ...

    @property
    def BackupDirectory(self) -> str:
        """ Get: BackupDirectory(self: IServerSetupFacet) -> str """
        ...

    @property
    def BrowserServiceAccount(self) -> str:
        """ Get: BrowserServiceAccount(self: IServerSetupFacet) -> str """
        ...

    @property
    def BrowserStartMode(self) -> ServiceStartMode:
        """ Get: BrowserStartMode(self: IServerSetupFacet) -> ServiceStartMode """
        ...

    @property
    def Collation(self) -> str:
        """ Get: Collation(self: IServerSetupFacet) -> str """
        ...

    @property
    def DefaultFile(self) -> str:
        """ Get: DefaultFile(self: IServerSetupFacet) -> str """
        ...

    @property
    def DefaultLog(self) -> str:
        """ Get: DefaultLog(self: IServerSetupFacet) -> str """
        ...

    @property
    def EngineServiceAccount(self) -> str:
        """ Get: EngineServiceAccount(self: IServerSetupFacet) -> str """
        ...

    @property
    def FilestreamLevel(self) -> FileStreamEffectiveLevel:
        """ Get: FilestreamLevel(self: IServerSetupFacet) -> FileStreamEffectiveLevel """
        ...

    @property
    def FilestreamShareName(self) -> str:
        """ Get: FilestreamShareName(self: IServerSetupFacet) -> str """
        ...

    @property
    def InstallDataDirectory(self) -> str:
        """ Get: InstallDataDirectory(self: IServerSetupFacet) -> str """
        ...

    @property
    def InstallSharedDirectory(self) -> str:
        """ Get: InstallSharedDirectory(self: IServerSetupFacet) -> str """
        ...

    @property
    def InstanceName(self) -> str:
        """ Get: InstanceName(self: IServerSetupFacet) -> str """
        ...

    @property
    def LoginMode(self): # -> ServerLoginMode
        """ Get: LoginMode(self: IServerSetupFacet) -> ServerLoginMode """
        ...

    @property
    def NamedPipesEnabled(self) -> bool:
        """ Get: NamedPipesEnabled(self: IServerSetupFacet) -> bool """
        ...

    @property
    def ServiceInstanceIdSuffix(self) -> str:
        """ Get: ServiceInstanceIdSuffix(self: IServerSetupFacet) -> str """
        ...

    @property
    def ServiceName(self) -> str:
        """ Get: ServiceName(self: IServerSetupFacet) -> str """
        ...

    @property
    def ServiceStartMode(self) -> ServiceStartMode:
        """ Get: ServiceStartMode(self: IServerSetupFacet) -> ServiceStartMode """
        ...

    @property
    def SqlDomainGroup(self) -> str:
        """ Get: SqlDomainGroup(self: IServerSetupFacet) -> str """
        ...

    @property
    def TcpEnabled(self) -> bool:
        """ Get: TcpEnabled(self: IServerSetupFacet) -> bool """
        ...

    @property
    def TempdbLogPath(self) -> str:
        """ Get: TempdbLogPath(self: IServerSetupFacet) -> str """
        ...

    @property
    def TempdbPrimaryFilePath(self) -> str:
        """ Get: TempdbPrimaryFilePath(self: IServerSetupFacet) -> str """
        ...

    @property
    def UserInstancesEnabled(self) -> bool:
        """ Get: UserInstancesEnabled(self: IServerSetupFacet) -> bool """
        ...

    @property
    def WindowsUsersAndGroupsInSysadminRole(self) -> Array:
        """ Get: WindowsUsersAndGroupsInSysadminRole(self: IServerSetupFacet) -> Array[str] """
        ...



class ISmartAdminState(IRefreshable, IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def IsBackupEnabled(self) -> bool:
        """ Get: IsBackupEnabled(self: ISmartAdminState) -> bool """
        ...

    @property
    def IsMasterSwitchEnabled(self) -> bool:
        """ Get: IsMasterSwitchEnabled(self: ISmartAdminState) -> bool """
        ...

    @property
    def NumberOfBackupLoops(self) -> int:
        """ Get: NumberOfBackupLoops(self: ISmartAdminState) -> int """
        ...

    @property
    def NumberOfCorruptedOrDeletedBackups(self) -> int:
        """ Get: NumberOfCorruptedOrDeletedBackups(self: ISmartAdminState) -> int """
        ...

    @property
    def NumberOfInvalidCredentialErrors(self) -> int:
        """ Get: NumberOfInvalidCredentialErrors(self: ISmartAdminState) -> int """
        ...

    @property
    def NumberOfOtherErrors(self) -> int:
        """ Get: NumberOfOtherErrors(self: ISmartAdminState) -> int """
        ...

    @property
    def NumberOfRetentionLoops(self) -> int:
        """ Get: NumberOfRetentionLoops(self: ISmartAdminState) -> int """
        ...

    @property
    def NumberOfSqlErrors(self) -> int:
        """ Get: NumberOfSqlErrors(self: ISmartAdminState) -> int """
        ...

    @property
    def NumberOfStorageConnectivityErrors(self) -> int:
        """ Get: NumberOfStorageConnectivityErrors(self: ISmartAdminState) -> int """
        ...



class ISurfaceAreaFacet(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AdHocRemoteQueriesEnabled(self) -> bool:
        """
        Get: AdHocRemoteQueriesEnabled(self: ISurfaceAreaFacet) -> bool
        Set: AdHocRemoteQueriesEnabled(self: ISurfaceAreaFacet) = value
        """
        ...

    @property
    def ClrIntegrationEnabled(self) -> bool:
        """
        Get: ClrIntegrationEnabled(self: ISurfaceAreaFacet) -> bool
        Set: ClrIntegrationEnabled(self: ISurfaceAreaFacet) = value
        """
        ...

    @property
    def DatabaseMailEnabled(self) -> bool:
        """
        Get: DatabaseMailEnabled(self: ISurfaceAreaFacet) -> bool
        Set: DatabaseMailEnabled(self: ISurfaceAreaFacet) = value
        """
        ...

    @property
    def OleAutomationEnabled(self) -> bool:
        """
        Get: OleAutomationEnabled(self: ISurfaceAreaFacet) -> bool
        Set: OleAutomationEnabled(self: ISurfaceAreaFacet) = value
        """
        ...

    @property
    def RemoteDacEnabled(self) -> bool:
        """
        Get: RemoteDacEnabled(self: ISurfaceAreaFacet) -> bool
        Set: RemoteDacEnabled(self: ISurfaceAreaFacet) = value
        """
        ...

    @property
    def ServiceBrokerEndpointActive(self) -> bool:
        """
        Get: ServiceBrokerEndpointActive(self: ISurfaceAreaFacet) -> bool
        Set: ServiceBrokerEndpointActive(self: ISurfaceAreaFacet) = value
        """
        ...

    @property
    def SoapEndpointsEnabled(self) -> bool:
        """
        Get: SoapEndpointsEnabled(self: ISurfaceAreaFacet) -> bool
        Set: SoapEndpointsEnabled(self: ISurfaceAreaFacet) = value
        """
        ...

    @property
    def SqlMailEnabled(self) -> bool:
        """
        Get: SqlMailEnabled(self: ISurfaceAreaFacet) -> bool
        Set: SqlMailEnabled(self: ISurfaceAreaFacet) = value
        """
        ...

    @property
    def WebAssistantEnabled(self) -> bool:
        """
        Get: WebAssistantEnabled(self: ISurfaceAreaFacet) -> bool
        Set: WebAssistantEnabled(self: ISurfaceAreaFacet) = value
        """
        ...

    @property
    def XPCmdShellEnabled(self) -> bool:
        """
        Get: XPCmdShellEnabled(self: ISurfaceAreaFacet) -> bool
        Set: XPCmdShellEnabled(self: ISurfaceAreaFacet) = value
        """
        ...



class ITableOptions(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AnsiNullsStatus(self) -> bool:
        """
        Get: AnsiNullsStatus(self: ITableOptions) -> bool
        Set: AnsiNullsStatus(self: ITableOptions) = value
        """
        ...

    @property
    def ChangeTrackingEnabled(self) -> bool:
        """
        Get: ChangeTrackingEnabled(self: ITableOptions) -> bool
        Set: ChangeTrackingEnabled(self: ITableOptions) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: ITableOptions) -> DateTime """
        ...

    @property
    def FakeSystemTable(self) -> bool:
        """ Get: FakeSystemTable(self: ITableOptions) -> bool """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ITableOptions) -> int """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: ITableOptions) -> bool """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: ITableOptions) -> bool """
        ...

    @property
    def LockEscalation(self): # -> LockEscalationType
        """
        Get: LockEscalation(self: ITableOptions) -> LockEscalationType
        Set: LockEscalation(self: ITableOptions) = value
        """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: ITableOptions) -> str """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: ITableOptions) -> str
        Set: Owner(self: ITableOptions) = value
        """
        ...

    @property
    def QuotedIdentifierStatus(self) -> bool:
        """ Get: QuotedIdentifierStatus(self: ITableOptions) -> bool """
        ...

    @property
    def RemoteDataArchiveDataMigrationState(self): # -> RemoteDataArchiveMigrationState
        """
        Get: RemoteDataArchiveDataMigrationState(self: ITableOptions) -> RemoteDataArchiveMigrationState
        Set: RemoteDataArchiveDataMigrationState(self: ITableOptions) = value
        """
        ...

    @property
    def RemoteDataArchiveEnabled(self) -> bool:
        """
        Get: RemoteDataArchiveEnabled(self: ITableOptions) -> bool
        Set: RemoteDataArchiveEnabled(self: ITableOptions) = value
        """
        ...

    @property
    def RemoteTableName(self) -> str:
        """ Get: RemoteTableName(self: ITableOptions) -> str """
        ...

    @property
    def RemoteTableProvisioned(self) -> bool:
        """ Get: RemoteTableProvisioned(self: ITableOptions) -> bool """
        ...

    @property
    def Replicated(self) -> bool:
        """ Get: Replicated(self: ITableOptions) -> bool """
        ...

    @property
    def Schema(self) -> str:
        """ Get: Schema(self: ITableOptions) -> str """
        ...

    @property
    def TrackColumnsUpdatedEnabled(self) -> bool:
        """
        Get: TrackColumnsUpdatedEnabled(self: ITableOptions) -> bool
        Set: TrackColumnsUpdatedEnabled(self: ITableOptions) = value
        """
        ...



class IUserOptions(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AsymmetricKey(self) -> str:
        """ Get: AsymmetricKey(self: IUserOptions) -> str """
        ...

    @property
    def Certificate(self) -> str:
        """ Get: Certificate(self: IUserOptions) -> str """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: IUserOptions) -> DateTime """
        ...

    @property
    def DefaultSchema(self) -> str:
        """
        Get: DefaultSchema(self: IUserOptions) -> str
        Set: DefaultSchema(self: IUserOptions) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: IUserOptions) -> int """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: IUserOptions) -> bool """
        ...

    @property
    def Login(self) -> str:
        """ Get: Login(self: IUserOptions) -> str """
        ...

    @property
    def LoginType(self) -> LoginType:
        """ Get: LoginType(self: IUserOptions) -> LoginType """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IUserOptions) -> str """
        ...

    @property
    def Sid(self) -> Array:
        """ Get: Sid(self: IUserOptions) -> Array[Byte] """
        ...

    @property
    def UserType(self) -> UserType:
        """ Get: UserType(self: IUserOptions) -> UserType """
        ...



class IViewOptions(IDmfFacet): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AnsiNullsStatus(self) -> bool:
        """ Get: AnsiNullsStatus(self: IViewOptions) -> bool """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: IViewOptions) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: IViewOptions) -> int """
        ...

    @property
    def IsEncrypted(self) -> bool:
        """ Get: IsEncrypted(self: IViewOptions) -> bool """
        ...

    @property
    def IsSchemaBound(self) -> bool:
        """ Get: IsSchemaBound(self: IViewOptions) -> bool """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: IViewOptions) -> bool """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: IViewOptions) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IViewOptions) -> str """
        ...

    @property
    def Owner(self) -> str:
        """ Get: Owner(self: IViewOptions) -> str """
        ...

    @property
    def QuotedIdentifierStatus(self) -> bool:
        """ Get: QuotedIdentifierStatus(self: IViewOptions) -> bool """
        ...

    @property
    def ReturnsViewMetadata(self) -> bool:
        """ Get: ReturnsViewMetadata(self: IViewOptions) -> bool """
        ...

    @property
    def Schema(self) -> str:
        """ Get: Schema(self: IViewOptions) -> str """
        ...



class JobScheduleCollectionBase(ArrayListCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Contains(self, name:str, id:int = ...) -> bool:
        """
        Contains(self: JobScheduleCollectionBase, name: str) -> bool
        Contains(self: JobScheduleCollectionBase, name: str, id: int) -> bool
        """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class KeyEncryptionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum KeyEncryptionType, values: AsymmetricKey (3), Certificate (1), Password (2), Provider (4), SymmetricKey (0) """
    AsymmetricKey: KeyEncryptionType = ...
    Certificate: KeyEncryptionType = ...
    Password: KeyEncryptionType = ...
    Provider: KeyEncryptionType = ...
    SymmetricKey: KeyEncryptionType = ...
    value__ = ...


class Language(NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Alias(self) -> str:
        """ Get: Alias(self: Language) -> str """
        ...

    @property
    def DateFormat(self) -> str:
        """ Get: DateFormat(self: Language) -> str """
        ...

    @property
    def Days(self) -> str:
        """ Get: Days(self: Language) -> str """
        ...

    @property
    def FirstDayOfWeek(self) -> Byte:
        """ Get: FirstDayOfWeek(self: Language) -> Byte """
        ...

    @property
    def LangID(self) -> Int16:
        """ Get: LangID(self: Language) -> Int16 """
        ...

    @property
    def LocaleID(self) -> int:
        """ Get: LocaleID(self: Language) -> int """
        ...

    @property
    def Months(self) -> str:
        """ Get: Months(self: Language) -> str """
        ...

    @property
    def MsgLangID(self) -> Int16:
        """ Get: MsgLangID(self: Language) -> Int16 """
        ...

    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: Language) -> Server """
        ...

    @property
    def ShortMonths(self) -> str:
        """ Get: ShortMonths(self: Language) -> str """
        ...

    @property
    def Upgrade(self) -> int:
        """ Get: Upgrade(self: Language) -> int """
        ...


    def Day(self, day:DayOfWeek) -> str:
        """ Day(self: Language, day: DayOfWeek) -> str """
        ...

    def Month(self, month) -> str: # Not found arg types: {'month': 'Month'}
        """ Month(self: Language, month: Month) -> str """
        ...

    def ShortMonth(self, month) -> str: # Not found arg types: {'month': 'Month'}
        """ ShortMonth(self: Language, month: Month) -> str """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class LanguageCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: LanguageCollection) -> Server """
        ...


    def Add(self, language:Language): # -> 
        """ Add(self: LanguageCollection, language: Language) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: LanguageCollection, array: Array[Language], index: int) """
        ...

    def ItemById(self, id:int) -> Language:
        """ ItemById(self: LanguageCollection, id: int) -> Language """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class LinkedServer(IDroppable, IAlterable, ICreatable, IScriptable, ISfcSupportsDesignMode, IDropIfExists, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    LinkedServer()
    LinkedServer(server: Server, name: str)
    """
    @property
    def Catalog(self) -> str:
        """
        Get: Catalog(self: LinkedServer) -> str
        Set: Catalog(self: LinkedServer) = value
        """
        ...

    @property
    def CollationCompatible(self) -> bool:
        """
        Get: CollationCompatible(self: LinkedServer) -> bool
        Set: CollationCompatible(self: LinkedServer) = value
        """
        ...

    @property
    def CollationName(self) -> str:
        """
        Get: CollationName(self: LinkedServer) -> str
        Set: CollationName(self: LinkedServer) = value
        """
        ...

    @property
    def ConnectTimeout(self) -> int:
        """
        Get: ConnectTimeout(self: LinkedServer) -> int
        Set: ConnectTimeout(self: LinkedServer) = value
        """
        ...

    @property
    def DataAccess(self) -> bool:
        """
        Get: DataAccess(self: LinkedServer) -> bool
        Set: DataAccess(self: LinkedServer) = value
        """
        ...

    @property
    def DataSource(self) -> str:
        """
        Get: DataSource(self: LinkedServer) -> str
        Set: DataSource(self: LinkedServer) = value
        """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: LinkedServer) -> DateTime """
        ...

    @property
    def DistPublisher(self) -> bool:
        """
        Get: DistPublisher(self: LinkedServer) -> bool
        Set: DistPublisher(self: LinkedServer) = value
        """
        ...

    @property
    def Distributor(self) -> bool:
        """
        Get: Distributor(self: LinkedServer) -> bool
        Set: Distributor(self: LinkedServer) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: LinkedServer) -> int """
        ...

    @property
    def IsPromotionofDistributedTransactionsForRPCEnabled(self) -> bool:
        """
        Get: IsPromotionofDistributedTransactionsForRPCEnabled(self: LinkedServer) -> bool
        Set: IsPromotionofDistributedTransactionsForRPCEnabled(self: LinkedServer) = value
        """
        ...

    @property
    def LazySchemaValidation(self) -> bool:
        """
        Get: LazySchemaValidation(self: LinkedServer) -> bool
        Set: LazySchemaValidation(self: LinkedServer) = value
        """
        ...

    @property
    def LinkedServerLogins(self): # -> LinkedServerLoginCollection
        """ Get: LinkedServerLogins(self: LinkedServer) -> LinkedServerLoginCollection """
        ...

    @property
    def Location(self) -> str:
        """
        Get: Location(self: LinkedServer) -> str
        Set: Location(self: LinkedServer) = value
        """
        ...

    @property
    def Parent(self): # -> Server
        """
        Get: Parent(self: LinkedServer) -> Server
        Set: Parent(self: LinkedServer) = value
        """
        ...

    @property
    def ProductName(self) -> str:
        """
        Get: ProductName(self: LinkedServer) -> str
        Set: ProductName(self: LinkedServer) = value
        """
        ...

    @property
    def ProviderName(self) -> str:
        """
        Get: ProviderName(self: LinkedServer) -> str
        Set: ProviderName(self: LinkedServer) = value
        """
        ...

    @property
    def ProviderString(self) -> str:
        """
        Get: ProviderString(self: LinkedServer) -> str
        Set: ProviderString(self: LinkedServer) = value
        """
        ...

    @property
    def Publisher(self) -> bool:
        """
        Get: Publisher(self: LinkedServer) -> bool
        Set: Publisher(self: LinkedServer) = value
        """
        ...

    @property
    def QueryTimeout(self) -> int:
        """
        Get: QueryTimeout(self: LinkedServer) -> int
        Set: QueryTimeout(self: LinkedServer) = value
        """
        ...

    @property
    def Rpc(self) -> bool:
        """
        Get: Rpc(self: LinkedServer) -> bool
        Set: Rpc(self: LinkedServer) = value
        """
        ...

    @property
    def RpcOut(self) -> bool:
        """
        Get: RpcOut(self: LinkedServer) -> bool
        Set: RpcOut(self: LinkedServer) = value
        """
        ...

    @property
    def Subscriber(self) -> bool:
        """
        Get: Subscriber(self: LinkedServer) -> bool
        Set: Subscriber(self: LinkedServer) = value
        """
        ...

    @property
    def UseRemoteCollation(self) -> bool:
        """
        Get: UseRemoteCollation(self: LinkedServer) -> bool
        Set: UseRemoteCollation(self: LinkedServer) = value
        """
        ...


    def EnumColumns(self, tableName:str = ..., schemaName:str = ..., databaseName:str = ..., columnName:str = ...) -> DataTable:
        """
        EnumColumns(self: LinkedServer) -> DataTable
        EnumColumns(self: LinkedServer, tableName: str) -> DataTable
        EnumColumns(self: LinkedServer, tableName: str, schemaName: str) -> DataTable
        EnumColumns(self: LinkedServer, tableName: str, schemaName: str, databaseName: str) -> DataTable
        EnumColumns(self: LinkedServer, tableName: str, schemaName: str, databaseName: str, columnName: str) -> DataTable
        """
        ...

    def EnumTables(self, tableName:str = ..., schemaName:str = ..., databaseName:str = ..., tableType = ...) -> DataTable: # Not found arg types: {'tableType': 'LinkedTableType'}
        """
        EnumTables(self: LinkedServer) -> DataTable
        EnumTables(self: LinkedServer, tableName: str) -> DataTable
        EnumTables(self: LinkedServer, tableName: str, schemaName: str) -> DataTable
        EnumTables(self: LinkedServer, tableName: str, schemaName: str, databaseName: str) -> DataTable
        EnumTables(self: LinkedServer, tableName: str, schemaName: str, databaseName: str, tableType: LinkedTableType) -> DataTable
        """
        ...

    def TestConnection(self): # -> 
        """ TestConnection(self: LinkedServer) """
        ...

    def __new__(cls, server = ..., name:str = ...) -> Self: # Not found arg types: {'server': 'Server'}
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class LinkedServerCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: LinkedServerCollection) -> Server """
        ...


    def Add(self, linkedServer:LinkedServer): # -> 
        """ Add(self: LinkedServerCollection, linkedServer: LinkedServer) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: LinkedServerCollection, array: Array[LinkedServer], index: int) """
        ...

    def ItemById(self, id:int) -> LinkedServer:
        """ ItemById(self: LinkedServerCollection, id: int) -> LinkedServer """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class LinkedServerLogin(IDroppable, IAlterable, ICreatable, ISfcSupportsDesignMode, IDropIfExists, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    LinkedServerLogin()
    LinkedServerLogin(linkedServer: LinkedServer, name: str)
    """
    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: LinkedServerLogin) -> DateTime """
        ...

    @property
    def Impersonate(self) -> bool:
        """
        Get: Impersonate(self: LinkedServerLogin) -> bool
        Set: Impersonate(self: LinkedServerLogin) = value
        """
        ...

    @property
    def Parent(self) -> LinkedServer:
        """
        Get: Parent(self: LinkedServerLogin) -> LinkedServer
        Set: Parent(self: LinkedServerLogin) = value
        """
        ...

    @property
    def RemoteUser(self) -> str:
        """
        Get: RemoteUser(self: LinkedServerLogin) -> str
        Set: RemoteUser(self: LinkedServerLogin) = value
        """
        ...


    def SetRemotePassword(self, password:str): # -> 
        """ SetRemotePassword(self: LinkedServerLogin, password: str)SetRemotePassword(self: LinkedServerLogin, password: SecureString) """
        ...

    def __new__(cls, linkedServer:LinkedServer = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, linkedServer: LinkedServer, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class LinkedServerLoginCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> LinkedServer:
        """ Get: Parent(self: LinkedServerLoginCollection) -> LinkedServer """
        ...


    def Add(self, linkedServerLogin:LinkedServerLogin): # -> 
        """ Add(self: LinkedServerLoginCollection, linkedServerLogin: LinkedServerLogin) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: LinkedServerLoginCollection, array: Array[LinkedServerLogin], index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class LinkedTableType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum LinkedTableType, values: Alias (1), Default (0), GlobalTemporary (2), LocalTemporary (3), SystemTable (4), SystemView (7), Table (5), View (6) """
    Alias: LinkedTableType = ...
    Default: LinkedTableType = ...
    GlobalTemporary: LinkedTableType = ...
    LocalTemporary: LinkedTableType = ...
    SystemTable: LinkedTableType = ...
    SystemView: LinkedTableType = ...
    Table: LinkedTableType = ...
    value__ = ...
    View: LinkedTableType = ...


class LinkFieldType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum LinkFieldType, values: Computed (2), Filter (3), Local (1), Parent (0) """
    Computed: LinkFieldType = ...
    Filter: LinkFieldType = ...
    Local: LinkFieldType = ...
    Parent: LinkFieldType = ...
    value__ = ...


class LockEscalationType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum LockEscalationType, values: Auto (2), Disable (1), Table (0) """
    Auto: LockEscalationType = ...
    Disable: LockEscalationType = ...
    Table: LockEscalationType = ...
    value__ = ...


class LockRequestStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum LockRequestStatus, values: Converting (2), Granted (1), Waiting (3) """
    Converting: LockRequestStatus = ...
    Granted: LockRequestStatus = ...
    value__ = ...
    Waiting: LockRequestStatus = ...


class LogFile(ISfcSupportsDesignMode, ICreatable, DatabaseFile): # skipped bases: <type 'IDroppable'>, <type 'IAlienObject'>, <type 'IAlterable'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'IRenamable'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IMarkForDrop'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    LogFile()
    LogFile(database: Database, name: str)
    LogFile(database: Database, name: str, fileName: str)
    """
    @property
    def BytesReadFromDisk(self) -> Int64:
        """ Get: BytesReadFromDisk(self: LogFile) -> Int64 """
        ...

    @property
    def BytesWrittenToDisk(self) -> Int64:
        """ Get: BytesWrittenToDisk(self: LogFile) -> Int64 """
        ...

    @property
    def FileName(self) -> str:
        """
        Get: FileName(self: LogFile) -> str
        Set: FileName(self: LogFile) = value
        """
        ...

    @property
    def Growth(self) -> float:
        """
        Get: Growth(self: LogFile) -> float
        Set: Growth(self: LogFile) = value
        """
        ...

    @property
    def GrowthType(self) -> FileGrowthType:
        """
        Get: GrowthType(self: LogFile) -> FileGrowthType
        Set: GrowthType(self: LogFile) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: LogFile) -> int """
        ...

    @property
    def IsOffline(self) -> bool:
        """ Get: IsOffline(self: LogFile) -> bool """
        ...

    @property
    def IsReadOnly(self) -> bool:
        """ Get: IsReadOnly(self: LogFile) -> bool """
        ...

    @property
    def IsReadOnlyMedia(self) -> bool:
        """ Get: IsReadOnlyMedia(self: LogFile) -> bool """
        ...

    @property
    def IsSparse(self) -> bool:
        """ Get: IsSparse(self: LogFile) -> bool """
        ...

    @property
    def MaxSize(self) -> float:
        """
        Get: MaxSize(self: LogFile) -> float
        Set: MaxSize(self: LogFile) = value
        """
        ...

    @property
    def NumberOfDiskReads(self) -> Int64:
        """ Get: NumberOfDiskReads(self: LogFile) -> Int64 """
        ...

    @property
    def NumberOfDiskWrites(self) -> Int64:
        """ Get: NumberOfDiskWrites(self: LogFile) -> Int64 """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: LogFile) -> Database
        Set: Parent(self: LogFile) = value
        """
        ...

    @property
    def Size(self) -> float:
        """
        Get: Size(self: LogFile) -> float
        Set: Size(self: LogFile) = value
        """
        ...

    @property
    def UsedSpace(self) -> float:
        """ Get: UsedSpace(self: LogFile) -> float """
        ...

    @property
    def VolumeFreeSpace(self) -> Int64:
        """ Get: VolumeFreeSpace(self: LogFile) -> Int64 """
        ...


    def __new__(cls, database:Database = ..., name:str = ..., fileName:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, fileName: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class LogFileCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: LogFileCollection) -> Database """
        ...


    def Add(self, logFile:LogFile): # -> 
        """ Add(self: LogFileCollection, logFile: LogFile) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: LogFileCollection, array: Array[LogFile], index: int) """
        ...

    def ItemById(self, id:int) -> LogFile:
        """ ItemById(self: LogFileCollection, id: int) -> LogFile """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: LogFileCollection, name: str)Remove(self: LogFileCollection, logFile: LogFile) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class Login(IDroppable, IAlterable, ICreatable, IScriptable, IRenamable, ILoginOptions, IObjectPermission, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists): # skipped bases: <type 'IDmfFacet'>, <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Login()
    Login(server: Server, name: str)
    """
    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: Login) -> DateTime """
        ...

    @property
    def DenyWindowsLogin(self) -> bool:
        """
        Get: DenyWindowsLogin(self: Login) -> bool
        Set: DenyWindowsLogin(self: Login) = value
        """
        ...

    @property
    def Events(self): # -> LoginEvents
        """ Get: Events(self: Login) -> LoginEvents """
        ...

    @property
    def HasAccess(self) -> bool:
        """ Get: HasAccess(self: Login) -> bool """
        ...

    @property
    def IsPasswordExpired(self) -> bool:
        """ Get: IsPasswordExpired(self: Login) -> bool """
        ...

    @property
    def LoginType(self) -> LoginType:
        """
        Get: LoginType(self: Login) -> LoginType
        Set: LoginType(self: Login) = value
        """
        ...

    @property
    def Parent(self): # -> Server
        """
        Get: Parent(self: Login) -> Server
        Set: Parent(self: Login) = value
        """
        ...

    @property
    def PasswordHashAlgorithm(self): # -> PasswordHashAlgorithm
        """ Get: PasswordHashAlgorithm(self: Login) -> PasswordHashAlgorithm """
        ...

    @property
    def Sid(self) -> Array:
        """
        Get: Sid(self: Login) -> Array[Byte]
        Set: Sid(self: Login) = value
        """
        ...

    @property
    def WindowsLoginAccessType(self): # -> WindowsLoginAccessType
        """ Get: WindowsLoginAccessType(self: Login) -> WindowsLoginAccessType """
        ...


    def AddCredential(self, credentialName:str): # -> 
        """ AddCredential(self: Login, credentialName: str) """
        ...

    def AddToRole(self, role:str): # -> 
        """ AddToRole(self: Login, role: str) """
        ...

    def ChangePassword(self, *__args:str): # -> 
        """ ChangePassword(self: Login, newPassword: str)ChangePassword(self: Login, newPassword: SecureString)ChangePassword(self: Login, oldPassword: str, newPassword: str)ChangePassword(self: Login, oldPassword: SecureString, newPassword: SecureString)ChangePassword(self: Login, newPassword: str, unlock: bool, mustChange: bool)ChangePassword(self: Login, newPassword: SecureString, unlock: bool, mustChange: bool) """
        ...

    def Disable(self): # -> 
        """ Disable(self: Login) """
        ...

    def DropCredential(self, credentialName:str): # -> 
        """ DropCredential(self: Login, credentialName: str) """
        ...

    def Enable(self): # -> 
        """ Enable(self: Login) """
        ...

    def EnumAgentProxyAccounts(self) -> DataTable:
        """ EnumAgentProxyAccounts(self: Login) -> DataTable """
        ...

    def EnumCredentials(self) -> StringCollection:
        """ EnumCredentials(self: Login) -> StringCollection """
        ...

    def EnumDatabaseMappings(self) -> Array:
        """ EnumDatabaseMappings(self: Login) -> Array[DatabaseMapping] """
        ...

    def GetDatabaseUser(self, databaseName:str) -> str:
        """ GetDatabaseUser(self: Login, databaseName: str) -> str """
        ...

    def IsMember(self, role:str) -> bool:
        """ IsMember(self: Login, role: str) -> bool """
        ...

    def ListMembers(self) -> StringCollection:
        """ ListMembers(self: Login) -> StringCollection """
        ...

    def __new__(cls, server = ..., name:str = ...) -> Self: # Not found arg types: {'server': 'Server'}
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class LoginCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: LoginCollection) -> Server """
        ...


    def Add(self, login:Login): # -> 
        """ Add(self: LoginCollection, login: Login) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: LoginCollection, array: Array[Login], index: int) """
        ...

    def ItemById(self, id:int) -> Login:
        """ ItemById(self: LoginCollection, id: int) -> Login """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class LoginCreateOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) LoginCreateOptions, values: IsHashed (1), MustChange (2), None (0) """
    IsHashed: LoginCreateOptions = ...
    MustChange: LoginCreateOptions = ...
    value__ = ...


class LoginEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self): # -> ObjectEventSet
        """ GetEventSelection(self: LoginEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: LoginEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: LoginEvents) """
        ...

    def SubscribeToEvents(self, events, eventHandler = ...): # ->  # Not found arg types: {'events': 'ObjectEventSet', 'eventHandler': 'ServerEventHandler'}
        """ SubscribeToEvents(self: LoginEvents, events: ObjectEventSet)SubscribeToEvents(self: LoginEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: LoginEvents) """
        ...

    def UnsubscribeFromEvents(self, events): # ->  # Not found arg types: {'events': 'ObjectEventSet'}
        """ UnsubscribeFromEvents(self: LoginEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class LoginType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum LoginType, values: AsymmetricKey (4), Certificate (3), ExternalGroup (6), ExternalUser (5), SqlLogin (2), WindowsGroup (1), WindowsUser (0) """
    AsymmetricKey: LoginType = ...
    Certificate: LoginType = ...
    ExternalGroup: LoginType = ...
    ExternalUser: LoginType = ...
    SqlLogin: LoginType = ...
    value__ = ...
    WindowsGroup: LoginType = ...
    WindowsUser: LoginType = ...


class LogReuseWaitStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum LogReuseWaitStatus, values: BackupOrRestore (3), Checkpoint (1), LogBackup (2), LogScan (8), Mirroring (5), Nothing (0), Other (9), Replication (6), SnapshotCreation (7), Transaction (4) """
    BackupOrRestore: LogReuseWaitStatus = ...
    Checkpoint: LogReuseWaitStatus = ...
    LogBackup: LogReuseWaitStatus = ...
    LogScan: LogReuseWaitStatus = ...
    Mirroring: LogReuseWaitStatus = ...
    Nothing: LogReuseWaitStatus = ...
    Other: LogReuseWaitStatus = ...
    Replication: LogReuseWaitStatus = ...
    SnapshotCreation: LogReuseWaitStatus = ...
    Transaction: LogReuseWaitStatus = ...
    value__ = ...


class MappedClassType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MappedClassType, values: CryptographicProvider (1), None (0) """
    CryptographicProvider: MappedClassType = ...
    value__ = ...


class MasterKey(SqlSmoObject, ISfcSupportsDesignMode, IDroppable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    MasterKey()
    MasterKey(parent: Database)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: MasterKey) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: MasterKey) -> DateTime """
        ...

    @property
    def IsEncryptedByServer(self) -> bool:
        """ Get: IsEncryptedByServer(self: MasterKey) -> bool """
        ...

    @property
    def IsOpen(self) -> bool:
        """ Get: IsOpen(self: MasterKey) -> bool """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: MasterKey) -> Database
        Set: Parent(self: MasterKey) = value
        """
        ...


    def AddPasswordEncryption(self, password:str): # -> 
        """ AddPasswordEncryption(self: MasterKey, password: str) """
        ...

    def AddServiceKeyEncryption(self): # -> 
        """ AddServiceKeyEncryption(self: MasterKey) """
        ...

    def Close(self): # -> 
        """ Close(self: MasterKey) """
        ...

    def Create(self, *__args:str): # -> 
        """ Create(self: MasterKey, encryptionPassword: str)Create(self: MasterKey, path: str, decryptionPassword: str, encryptionPassword: str) """
        ...

    def DropPasswordEncryption(self, password:str): # -> 
        """ DropPasswordEncryption(self: MasterKey, password: str) """
        ...

    def DropServiceKeyEncryption(self): # -> 
        """ DropServiceKeyEncryption(self: MasterKey) """
        ...

    def EnumKeyEncryptions(self) -> DataTable:
        """ EnumKeyEncryptions(self: MasterKey) -> DataTable """
        ...

    def Export(self, path:str, password:str): # -> 
        """ Export(self: MasterKey, path: str, password: str) """
        ...

    def Import(self, path:str, decryptionPassword:str, encryptionPassword:str, forceRegeneration:bool = ...): # -> 
        """ Import(self: MasterKey, path: str, decryptionPassword: str, encryptionPassword: str)Import(self: MasterKey, path: str, decryptionPassword: str, encryptionPassword: str, forceRegeneration: bool) """
        ...

    def Open(self, password:str): # -> 
        """ Open(self: MasterKey, password: str) """
        ...

    def Regenerate(self, password:str, forceRegeneration:bool = ...): # -> 
        """ Regenerate(self: MasterKey, password: str)Regenerate(self: MasterKey, password: str, forceRegeneration: bool) """
        ...

    def __new__(cls, parent:Database = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, parent: Database)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class MediaTypes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) MediaTypes, values: All (15), CDRom (8), FixedDisk (2), Floppy (1), SharedFixedDisk (16), Tape (4) """
    All: MediaTypes = ...
    CDRom: MediaTypes = ...
    FixedDisk: MediaTypes = ...
    Floppy: MediaTypes = ...
    SharedFixedDisk: MediaTypes = ...
    Tape: MediaTypes = ...
    value__ = ...


class MessageCollectionBase(SortedListCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Contains(self, id:int, *__args:str) -> bool:
        """
        Contains(self: MessageCollectionBase, id: int, language: str) -> bool
        Contains(self: MessageCollectionBase, id: int, languageId: int) -> bool
        """
        ...

    def Remove(self, id:int, language:str = ...): # -> 
        """ Remove(self: MessageCollectionBase, id: int, language: str)Remove(self: MessageCollectionBase, id: int) """
        ...

    initialized = ...


class MessageObjectBase(SqlSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    m_ExtendedProperties = ...
    singletonParent = ...


class MethodLoginType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MethodLoginType, values: Mixed (1), Windows (2) """
    Mixed: MethodLoginType = ...
    value__ = ...
    Windows: MethodLoginType = ...


class MethodXsdSchemaOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MethodXsdSchemaOption, values: Default (2), None (0), Standard (1) """
    Default: MethodXsdSchemaOption = ...
    Standard: MethodXsdSchemaOption = ...
    value__ = ...


class MirroringOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MirroringOption, values: Failover (4), ForceFailoverAndAllowDataLoss (5), Off (0), RemoveWitness (3), Resume (2), Suspend (1) """
    Failover: MirroringOption = ...
    ForceFailoverAndAllowDataLoss: MirroringOption = ...
    Off: MirroringOption = ...
    RemoveWitness: MirroringOption = ...
    Resume: MirroringOption = ...
    Suspend: MirroringOption = ...
    value__ = ...


class MirroringRole(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MirroringRole, values: Mirror (2), None (0), Principal (1) """
    Mirror: MirroringRole = ...
    Principal: MirroringRole = ...
    value__ = ...


class MirroringSafetyLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MirroringSafetyLevel, values: Full (3), None (0), Off (2), Unknown (1) """
    Full: MirroringSafetyLevel = ...
    Off: MirroringSafetyLevel = ...
    Unknown: MirroringSafetyLevel = ...
    value__ = ...


class MirroringStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MirroringStatus, values: Disconnected (2), None (0), PendingFailover (4), Suspended (1), Synchronized (5), Synchronizing (3) """
    Disconnected: MirroringStatus = ...
    PendingFailover: MirroringStatus = ...
    Suspended: MirroringStatus = ...
    Synchronized: MirroringStatus = ...
    Synchronizing: MirroringStatus = ...
    value__ = ...


class MirroringWitnessStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MirroringWitnessStatus, values: Connected (2), Disconnected (3), None (0), Unknown (1) """
    Connected: MirroringWitnessStatus = ...
    Disconnected: MirroringWitnessStatus = ...
    Unknown: MirroringWitnessStatus = ...
    value__ = ...


class MissingObjectException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    MissingObjectException()
    MissingObjectException(message: str)
    MissingObjectException(message: str, innerException: Exception)
    """
    @property
    def Message(self) -> str:
        """ Get: Message(self: MissingObjectException) -> str """
        ...


    SerializeObjectState = ...


class Month(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum Month, values: April (4), August (8), December (12), February (2), January (1), July (7), June (6), March (3), May (5), November (11), October (10), September (9) """
    April: Month = ...
    August: Month = ...
    December: Month = ...
    February: Month = ...
    January: Month = ...
    July: Month = ...
    June: Month = ...
    March: Month = ...
    May: Month = ...
    November: Month = ...
    October: Month = ...
    September: Month = ...
    value__ = ...


class NextRestoreEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ NextRestoreEventArgs(backupSetName: str, backupSetDescription: str, deviceName: str, count: int) """
    @property
    def BackupSetDescription(self) -> str:
        """ Get: BackupSetDescription(self: NextRestoreEventArgs) -> str """
        ...

    @property
    def BackupSetName(self) -> str:
        """ Get: BackupSetName(self: NextRestoreEventArgs) -> str """
        ...

    @property
    def Continue(self) -> bool:
        """
        Get: Continue(self: NextRestoreEventArgs) -> bool
        Set: Continue(self: NextRestoreEventArgs) = value
        """
        ...

    @property
    def Count(self) -> int:
        """ Get: Count(self: NextRestoreEventArgs) -> int """
        ...

    @property
    def DevicesName(self) -> str:
        """ Get: DevicesName(self: NextRestoreEventArgs) -> str """
        ...


    def __new__(cls, backupSetName:str, backupSetDescription:str, deviceName:str, count:int) -> Self:
        """ __new__(cls: type, backupSetName: str, backupSetDescription: str, deviceName: str, count: int) """
        ...


class NextRestoreEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ NextRestoreEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:NextRestoreEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: NextRestoreEventHandler, sender: object, e: NextRestoreEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: NextRestoreEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:NextRestoreEventArgs): # -> 
        """ Invoke(self: NextRestoreEventHandler, sender: object, e: NextRestoreEventArgs) """
        ...


class NSActivationState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum NSActivationState, values: Disabled (4), DisablePending (3), Enabled (2), EnablePending (1) """
    Disabled: NSActivationState = ...
    DisablePending: NSActivationState = ...
    Enabled: NSActivationState = ...
    EnablePending: NSActivationState = ...
    value__ = ...


class NumaNode: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AffinityMask(self): # -> NumaNodeAffinity
        """
        Get: AffinityMask(self: NumaNode) -> NumaNodeAffinity
        Set: AffinityMask(self: NumaNode) = value
        """
        ...

    @property
    def Cpus(self) -> CpuCollection:
        """ Get: Cpus(self: NumaNode) -> CpuCollection """
        ...

    @property
    def GroupID(self) -> int:
        """ Get: GroupID(self: NumaNode) -> int """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: NumaNode) -> int """
        ...



class NumaNodeAffinity(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum NumaNodeAffinity, values: Full (0), None (1), Partial (2) """
    Full: NumaNodeAffinity = ...
    Partial: NumaNodeAffinity = ...
    value__ = ...


class NumaNodeCollection(ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetByID(self, numanodeId:int) -> NumaNode:
        """ GetByID(self: NumaNodeCollection, numanodeId: int) -> NumaNode """
        ...

    def GetElementAt(self, position:int) -> NumaNode:
        """ GetElementAt(self: NumaNodeCollection, position: int) -> NumaNode """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: NumaNodeCollection) -> IEnumerator """
        ...

    def SetAffinityToRange(self, startNumaNodeId:int, endNumaNodeId:int, affinityMask:NumaNodeAffinity, ignoreMissingIds:bool = ...): # -> 
        """ SetAffinityToRange(self: NumaNodeCollection, startNumaNodeId: int, endNumaNodeId: int, affinityMask: NumaNodeAffinity)SetAffinityToRange(self: NumaNodeCollection, startNumaNodeId: int, endNumaNodeId: int, affinityMask: NumaNodeAffinity, ignoreMissingIds: bool) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...


class NumberedObjectCollectionBase(SortedListCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Contains(self, number:Int16) -> bool:
        """ Contains(self: NumberedObjectCollectionBase, number: Int16) -> bool """
        ...

    initialized = ...


class NumberedStoredProcedure(ScriptNameObjectBase, ISfcSupportsDesignMode, ICreatable, IAlterable, ITextObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ NumberedStoredProcedure(storedProcedure: StoredProcedure, number: Int16) """
    @property
    def IsEncrypted(self) -> bool:
        """
        Get: IsEncrypted(self: NumberedStoredProcedure) -> bool
        Set: IsEncrypted(self: NumberedStoredProcedure) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: NumberedStoredProcedure) -> str
        Set: Name(self: NumberedStoredProcedure) = value
        """
        ...

    @property
    def Number(self) -> Int16:
        """ Get: Number(self: NumberedStoredProcedure) -> Int16 """
        ...

    @property
    def Parameters(self): # -> NumberedStoredProcedureParameterCollection
        """ Get: Parameters(self: NumberedStoredProcedure) -> NumberedStoredProcedureParameterCollection """
        ...

    @property
    def Parent(self): # -> StoredProcedure
        """ Get: Parent(self: NumberedStoredProcedure) -> StoredProcedure """
        ...


    def ToString(self) -> str:
        """ ToString(self: NumberedStoredProcedure) -> str """
        ...

    def __new__(cls, storedProcedure, number:Int16) -> Self: # Not found arg types: {'storedProcedure': 'StoredProcedure'}
        """ __new__(cls: type, storedProcedure: StoredProcedure, number: Int16) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class NumberedStoredProcedureCollection(NumberedObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> StoredProcedure
        """ Get: Parent(self: NumberedStoredProcedureCollection) -> StoredProcedure """
        ...


    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: NumberedStoredProcedureCollection, array: Array[NumberedStoredProcedure], index: int) """
        ...

    def GetProcedureByNumber(self, number:Int16) -> NumberedStoredProcedure:
        """ GetProcedureByNumber(self: NumberedStoredProcedureCollection, number: Int16) -> NumberedStoredProcedure """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ParameterBase(ScriptNameObjectBase, IMarkForDrop, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def DataType(self) -> DataType:
        """
        Get: DataType(self: ParameterBase) -> DataType
        Set: DataType(self: ParameterBase) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ParameterBase) -> str
        Set: Name(self: ParameterBase) = value
        """
        ...


    def CheckParamName(self, *args): #cannot find CLR method
        """ CheckParamName(self: ParameterBase, paramName: str) """
        ...

    def isParentClrImplemented(self, *args): #cannot find CLR method
        """ isParentClrImplemented(self: ParameterBase) -> bool """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class Parameter(ISfcSupportsDesignMode, ParameterBase): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IExtendedProperties'>, <type 'IMarkForDrop'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def DefaultValue(self) -> str:
        """
        Get: DefaultValue(self: Parameter) -> str
        Set: DefaultValue(self: Parameter) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Parameter) -> int """
        ...

    @property
    def IsReadOnly(self) -> bool:
        """
        Get: IsReadOnly(self: Parameter) -> bool
        Set: IsReadOnly(self: Parameter) = value
        """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class NumberedStoredProcedureParameter(Parameter): # skipped bases: <type 'ISfcSupportsDesignMode'>, <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IExtendedProperties'>, <type 'IMarkForDrop'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    NumberedStoredProcedureParameter()
    NumberedStoredProcedureParameter(numberedStoredProcedure: NumberedStoredProcedure, name: str)
    """
    @property
    def IsOutputParameter(self) -> bool:
        """
        Get: IsOutputParameter(self: NumberedStoredProcedureParameter) -> bool
        Set: IsOutputParameter(self: NumberedStoredProcedureParameter) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: NumberedStoredProcedureParameter) -> str
        Set: Name(self: NumberedStoredProcedureParameter) = value
        """
        ...

    @property
    def Parent(self) -> NumberedStoredProcedure:
        """
        Get: Parent(self: NumberedStoredProcedureParameter) -> NumberedStoredProcedure
        Set: Parent(self: NumberedStoredProcedureParameter) = value
        """
        ...


    def __new__(cls, numberedStoredProcedure:NumberedStoredProcedure = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, numberedStoredProcedure: NumberedStoredProcedure, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class NumberedStoredProcedureParameterCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> NumberedStoredProcedure:
        """ Get: Parent(self: NumberedStoredProcedureParameterCollection) -> NumberedStoredProcedure """
        ...


    def Add(self, numberedStoredProcedureParameter:NumberedStoredProcedureParameter, *__args:str): # -> 
        """ Add(self: NumberedStoredProcedureParameterCollection, numberedStoredProcedureParameter: NumberedStoredProcedureParameter)Add(self: NumberedStoredProcedureParameterCollection, numberedStoredProcedureParameter: NumberedStoredProcedureParameter, insertAtColumnName: str)Add(self: NumberedStoredProcedureParameterCollection, numberedStoredProcedureParameter: NumberedStoredProcedureParameter, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: NumberedStoredProcedureParameterCollection, array: Array[NumberedStoredProcedureParameter], index: int) """
        ...

    def ItemById(self, id:int) -> NumberedStoredProcedureParameter:
        """ ItemById(self: NumberedStoredProcedureParameterCollection, id: int) -> NumberedStoredProcedureParameter """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ObjectAlteredEventArgs(SmoEventArgs): # skipped bases: <type 'object'>
    """ ObjectAlteredEventArgs(urn: Urn, innerObject: object) """
    @property
    def SmoObject(self) -> object:
        """ Get: SmoObject(self: ObjectAlteredEventArgs) -> object """
        ...



class ObjectClass(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ObjectClass, values: ApplicationRole (202), AsymmetricKey (26), AvailabilityGroup (108), Certificate (25), Database (0), DatabaseRole (201), Endpoint (105), ExternalDataSource (302), ExternalFileFormat (303), FullTextCatalog (23), FullTextStopList (29), Login (101), MessageType (15), ObjectOrColumn (1), RemoteServiceBinding (18), Schema (3), SearchPropertyList (31), SecurityExpression (8), Server (100), ServerPrincipal (300), ServerRole (301), Service (17), ServiceContract (16), ServiceRoute (19), SqlAssembly (5), SymmetricKey (24), User (200), UserDefinedType (6), XmlNamespace (10) """
    ApplicationRole: ObjectClass = ...
    AsymmetricKey: ObjectClass = ...
    AvailabilityGroup: ObjectClass = ...
    Certificate: ObjectClass = ...
    Database: ObjectClass = ...
    DatabaseRole: ObjectClass = ...
    Endpoint: ObjectClass = ...
    ExternalDataSource: ObjectClass = ...
    ExternalFileFormat: ObjectClass = ...
    FullTextCatalog: ObjectClass = ...
    FullTextStopList: ObjectClass = ...
    Login: ObjectClass = ...
    MessageType: ObjectClass = ...
    ObjectOrColumn: ObjectClass = ...
    RemoteServiceBinding: ObjectClass = ...
    Schema: ObjectClass = ...
    SearchPropertyList: ObjectClass = ...
    SecurityExpression: ObjectClass = ...
    Server: ObjectClass = ...
    ServerPrincipal: ObjectClass = ...
    ServerRole: ObjectClass = ...
    Service: ObjectClass = ...
    ServiceContract: ObjectClass = ...
    ServiceRoute: ObjectClass = ...
    SqlAssembly: ObjectClass = ...
    SymmetricKey: ObjectClass = ...
    User: ObjectClass = ...
    UserDefinedType: ObjectClass = ...
    value__ = ...
    XmlNamespace: ObjectClass = ...


class ObjectCreatedEventArgs(SmoEventArgs): # skipped bases: <type 'object'>
    """ ObjectCreatedEventArgs(urn: Urn, innerObject: object) """
    @property
    def SmoObject(self) -> object:
        """ Get: SmoObject(self: ObjectCreatedEventArgs) -> object """
        ...



class ObjectDroppedEventArgs(SmoEventArgs): # skipped bases: <type 'object'>
    """ ObjectDroppedEventArgs(urn: Urn) """
    pass

class ObjectEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Alter(self) -> ObjectEvent:
        """ Get: Alter() -> ObjectEvent """
        ...

    @property
    def Drop(self) -> ObjectEvent:
        """ Get: Drop() -> ObjectEvent """
        ...


    @staticmethod
    def Add(eventLeft:ObjectEvent, eventRight:ObjectEvent): # -> ObjectEventSet
        """ Add(eventLeft: ObjectEvent, eventRight: ObjectEvent) -> ObjectEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:ObjectEvent, eventRight:ObjectEvent): # -> ObjectEventSet
        """ BitwiseOr(eventLeft: ObjectEvent, eventRight: ObjectEvent) -> ObjectEventSet """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: ObjectEvent, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: ObjectEvent) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: ObjectEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: ObjectEvent, eventRight: ObjectEvent) -> ObjectEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: ObjectEvent, eventRight: ObjectEvent) -> ObjectEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: ObjectEvent, eventRight: ObjectEvent) -> ObjectEventSet """
        ...



class ObjectEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    ObjectEventSet()
    ObjectEventSet(eventSet: ObjectEventSet)
    ObjectEventSet(anEvent: ObjectEvent)
    ObjectEventSet(*events: Array[ObjectEvent])
    """
    @property
    def Alter(self) -> bool:
        """
        Get: Alter(self: ObjectEventSet) -> bool
        Set: Alter(self: ObjectEventSet) = value
        """
        ...

    @property
    def Drop(self) -> bool:
        """
        Get: Drop(self: ObjectEventSet) -> bool
        Set: Drop(self: ObjectEventSet) = value
        """
        ...


    def Add(self, *__args:ObjectEvent) -> ObjectEventSet:
        """
        Add(self: ObjectEventSet, anEvent: ObjectEvent) -> ObjectEventSet
        Add(eventSet: ObjectEventSet, anEvent: ObjectEvent) -> ObjectEventSet
        """
        ...

    def Remove(self, anEvent:ObjectEvent) -> ObjectEventSet:
        """ Remove(self: ObjectEventSet, anEvent: ObjectEvent) -> ObjectEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:ObjectEventSet, anEvent:ObjectEvent) -> ObjectEventSet:
        """ Subtract(eventSet: ObjectEventSet, anEvent: ObjectEvent) -> ObjectEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: ObjectEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class ObjectPermission: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Alter(self) -> ObjectPermission:
        """ Get: Alter() -> ObjectPermission """
        ...

    @property
    def Connect(self) -> ObjectPermission:
        """ Get: Connect() -> ObjectPermission """
        ...

    @property
    def Control(self) -> ObjectPermission:
        """ Get: Control() -> ObjectPermission """
        ...

    @property
    def CreateSequence(self) -> ObjectPermission:
        """ Get: CreateSequence() -> ObjectPermission """
        ...

    @property
    def Delete(self) -> ObjectPermission:
        """ Get: Delete() -> ObjectPermission """
        ...

    @property
    def Execute(self) -> ObjectPermission:
        """ Get: Execute() -> ObjectPermission """
        ...

    @property
    def Impersonate(self) -> ObjectPermission:
        """ Get: Impersonate() -> ObjectPermission """
        ...

    @property
    def Insert(self) -> ObjectPermission:
        """ Get: Insert() -> ObjectPermission """
        ...

    @property
    def Receive(self) -> ObjectPermission:
        """ Get: Receive() -> ObjectPermission """
        ...

    @property
    def References(self) -> ObjectPermission:
        """ Get: References() -> ObjectPermission """
        ...

    @property
    def Select(self) -> ObjectPermission:
        """ Get: Select() -> ObjectPermission """
        ...

    @property
    def Send(self) -> ObjectPermission:
        """ Get: Send() -> ObjectPermission """
        ...

    @property
    def TakeOwnership(self) -> ObjectPermission:
        """ Get: TakeOwnership() -> ObjectPermission """
        ...

    @property
    def Update(self) -> ObjectPermission:
        """ Get: Update() -> ObjectPermission """
        ...

    @property
    def ViewChangeTracking(self) -> ObjectPermission:
        """ Get: ViewChangeTracking() -> ObjectPermission """
        ...

    @property
    def ViewDefinition(self) -> ObjectPermission:
        """ Get: ViewDefinition() -> ObjectPermission """
        ...


    @staticmethod
    def Add(permissionLeft:ObjectPermission, permissionRight:ObjectPermission): # -> ObjectPermissionSet
        """ Add(permissionLeft: ObjectPermission, permissionRight: ObjectPermission) -> ObjectPermissionSet """
        ...

    @staticmethod
    def BitwiseOr(permissionLeft:ObjectPermission, permissionRight:ObjectPermission): # -> ObjectPermissionSet
        """ BitwiseOr(permissionLeft: ObjectPermission, permissionRight: ObjectPermission) -> ObjectPermissionSet """
        ...

    def Equals(self, o:object) -> bool:
        """ Equals(self: ObjectPermission, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: ObjectPermission) -> int """
        ...

    @staticmethod
    def ToObjectPermissionSet(permission:ObjectPermission): # -> ObjectPermissionSet
        """ ToObjectPermissionSet(permission: ObjectPermission) -> ObjectPermissionSet """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(permissionLeft: ObjectPermission, permissionRight: ObjectPermission) -> ObjectPermissionSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(permissionLeft: ObjectPermission, permissionRight: ObjectPermission) -> ObjectPermissionSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(permissionLeft: ObjectPermission, permissionRight: ObjectPermission) -> ObjectPermissionSet """
        ...



class ObjectPermissionInfo(PermissionInfo): # skipped bases: <type 'object'>
    """ ObjectPermissionInfo() """
    @property
    def PermissionType(self): # -> ObjectPermissionSet
        """ Get: PermissionType(self: ObjectPermissionInfo) -> ObjectPermissionSet """
        ...



class ObjectPermissionSet(PermissionSetBase): # skipped bases: <type 'object'>
    """
    ObjectPermissionSet()
    ObjectPermissionSet(oObjectPermissionSet: ObjectPermissionSet)
    ObjectPermissionSet(permission: ObjectPermission)
    ObjectPermissionSet(*permissions: Array[ObjectPermission])
    """
    @property
    def Alter(self) -> bool:
        """
        Get: Alter(self: ObjectPermissionSet) -> bool
        Set: Alter(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def Connect(self) -> bool:
        """
        Get: Connect(self: ObjectPermissionSet) -> bool
        Set: Connect(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def Control(self) -> bool:
        """
        Get: Control(self: ObjectPermissionSet) -> bool
        Set: Control(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def CreateSequence(self) -> bool:
        """
        Get: CreateSequence(self: ObjectPermissionSet) -> bool
        Set: CreateSequence(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def Delete(self) -> bool:
        """
        Get: Delete(self: ObjectPermissionSet) -> bool
        Set: Delete(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def Execute(self) -> bool:
        """
        Get: Execute(self: ObjectPermissionSet) -> bool
        Set: Execute(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def Impersonate(self) -> bool:
        """
        Get: Impersonate(self: ObjectPermissionSet) -> bool
        Set: Impersonate(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def Insert(self) -> bool:
        """
        Get: Insert(self: ObjectPermissionSet) -> bool
        Set: Insert(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def Receive(self) -> bool:
        """
        Get: Receive(self: ObjectPermissionSet) -> bool
        Set: Receive(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def References(self) -> bool:
        """
        Get: References(self: ObjectPermissionSet) -> bool
        Set: References(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def Select(self) -> bool:
        """
        Get: Select(self: ObjectPermissionSet) -> bool
        Set: Select(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def Send(self) -> bool:
        """
        Get: Send(self: ObjectPermissionSet) -> bool
        Set: Send(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def TakeOwnership(self) -> bool:
        """
        Get: TakeOwnership(self: ObjectPermissionSet) -> bool
        Set: TakeOwnership(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def Update(self) -> bool:
        """
        Get: Update(self: ObjectPermissionSet) -> bool
        Set: Update(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def ViewChangeTracking(self) -> bool:
        """
        Get: ViewChangeTracking(self: ObjectPermissionSet) -> bool
        Set: ViewChangeTracking(self: ObjectPermissionSet) = value
        """
        ...

    @property
    def ViewDefinition(self) -> bool:
        """
        Get: ViewDefinition(self: ObjectPermissionSet) -> bool
        Set: ViewDefinition(self: ObjectPermissionSet) = value
        """
        ...


    def Add(self, *__args:ObjectPermission) -> ObjectPermissionSet:
        """
        Add(self: ObjectPermissionSet, permission: ObjectPermission) -> ObjectPermissionSet
        Add(permissionLeft: ObjectPermissionSet, permissionRight: ObjectPermission) -> ObjectPermissionSet
        """
        ...

    def Remove(self, permission:ObjectPermission) -> ObjectPermissionSet:
        """ Remove(self: ObjectPermissionSet, permission: ObjectPermission) -> ObjectPermissionSet """
        ...

    @staticmethod
    def Subtract(permissionLeft:ObjectPermissionSet, permissionRight:ObjectPermission) -> ObjectPermissionSet:
        """ Subtract(permissionLeft: ObjectPermissionSet, permissionRight: ObjectPermission) -> ObjectPermissionSet """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class ObjectPermissionSetValue(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ObjectPermissionSetValue, values: Alter (0), Connect (2), Control (1), CreateSequence (15), Delete (3), Execute (4), Impersonate (5), Insert (6), Receive (7), References (8), Select (9), Send (10), TakeOwnership (11), Update (12), ViewChangeTracking (14), ViewDefinition (13) """
    Alter: ObjectPermissionSetValue = ...
    Connect: ObjectPermissionSetValue = ...
    Control: ObjectPermissionSetValue = ...
    CreateSequence: ObjectPermissionSetValue = ...
    Delete: ObjectPermissionSetValue = ...
    Execute: ObjectPermissionSetValue = ...
    Impersonate: ObjectPermissionSetValue = ...
    Insert: ObjectPermissionSetValue = ...
    Receive: ObjectPermissionSetValue = ...
    References: ObjectPermissionSetValue = ...
    Select: ObjectPermissionSetValue = ...
    Send: ObjectPermissionSetValue = ...
    TakeOwnership: ObjectPermissionSetValue = ...
    Update: ObjectPermissionSetValue = ...
    value__ = ...
    ViewChangeTracking: ObjectPermissionSetValue = ...
    ViewDefinition: ObjectPermissionSetValue = ...


class ObjectRenamedEventArgs(SmoEventArgs): # skipped bases: <type 'object'>
    """
    ObjectRenamedEventArgs(urn: Urn, innerObject: object, oldName: str, newName: str)
    ObjectRenamedEventArgs(newUrn: Urn, innerObject: object, oldName: str, newName: str, oldUrn: str)
    """
    @property
    def NewName(self) -> str:
        """ Get: NewName(self: ObjectRenamedEventArgs) -> str """
        ...

    @property
    def OldName(self) -> str:
        """ Get: OldName(self: ObjectRenamedEventArgs) -> str """
        ...

    @property
    def OldUrn(self) -> str:
        """ Get: OldUrn(self: ObjectRenamedEventArgs) -> str """
        ...

    @property
    def SmoObject(self) -> object:
        """ Get: SmoObject(self: ObjectRenamedEventArgs) -> object """
        ...



class OleDbProviderSettings(IAlterable, IScriptable, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def AllowInProcess(self) -> bool:
        """
        Get: AllowInProcess(self: OleDbProviderSettings) -> bool
        Set: AllowInProcess(self: OleDbProviderSettings) = value
        """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description(self: OleDbProviderSettings) -> str """
        ...

    @property
    def DisallowAdHocAccess(self) -> bool:
        """
        Get: DisallowAdHocAccess(self: OleDbProviderSettings) -> bool
        Set: DisallowAdHocAccess(self: OleDbProviderSettings) = value
        """
        ...

    @property
    def DynamicParameters(self) -> bool:
        """
        Get: DynamicParameters(self: OleDbProviderSettings) -> bool
        Set: DynamicParameters(self: OleDbProviderSettings) = value
        """
        ...

    @property
    def IndexAsAccessPath(self) -> bool:
        """
        Get: IndexAsAccessPath(self: OleDbProviderSettings) -> bool
        Set: IndexAsAccessPath(self: OleDbProviderSettings) = value
        """
        ...

    @property
    def LevelZeroOnly(self) -> bool:
        """
        Get: LevelZeroOnly(self: OleDbProviderSettings) -> bool
        Set: LevelZeroOnly(self: OleDbProviderSettings) = value
        """
        ...

    @property
    def NestedQueries(self) -> bool:
        """
        Get: NestedQueries(self: OleDbProviderSettings) -> bool
        Set: NestedQueries(self: OleDbProviderSettings) = value
        """
        ...

    @property
    def NonTransactedUpdates(self) -> bool:
        """
        Get: NonTransactedUpdates(self: OleDbProviderSettings) -> bool
        Set: NonTransactedUpdates(self: OleDbProviderSettings) = value
        """
        ...

    @property
    def Parent(self): # -> Settings
        """ Get: Parent(self: OleDbProviderSettings) -> Settings """
        ...

    @property
    def SqlServerLike(self) -> bool:
        """
        Get: SqlServerLike(self: OleDbProviderSettings) -> bool
        Set: SqlServerLike(self: OleDbProviderSettings) = value
        """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class OleDbProviderSettingsCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> Settings
        """ Get: Parent(self: OleDbProviderSettingsCollection) -> Settings """
        ...


    def Add(self, settings:OleDbProviderSettings): # -> 
        """ Add(self: OleDbProviderSettingsCollection, settings: OleDbProviderSettings) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: OleDbProviderSettingsCollection, array: Array[OleDbProviderSettings], index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class OnFailureAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OnFailureAction, values: Continue (0), FailOperation (2), Shutdown (1) """
    Continue: OnFailureAction = ...
    FailOperation: OnFailureAction = ...
    Shutdown: OnFailureAction = ...
    value__ = ...


class OrderColumn(IPropertyDataDispatch, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    OrderColumn()
    OrderColumn(userDefinedFunction: UserDefinedFunction, name: str)
    OrderColumn(udf: UserDefinedFunction, name: str, descending: bool)
    """
    @property
    def Descending(self) -> bool:
        """
        Get: Descending(self: OrderColumn) -> bool
        Set: Descending(self: OrderColumn) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: OrderColumn) -> int """
        ...

    @property
    def Parent(self): # -> UserDefinedFunction
        """
        Get: Parent(self: OrderColumn) -> UserDefinedFunction
        Set: Parent(self: OrderColumn) = value
        """
        ...


    def __new__(cls, *__args) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, userDefinedFunction: UserDefinedFunction, name: str)
        __new__(cls: type, udf: UserDefinedFunction, name: str, descending: bool)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class OrderColumnCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> UserDefinedFunction
        """ Get: Parent(self: OrderColumnCollection) -> UserDefinedFunction """
        ...


    def Add(self, orderColumn:OrderColumn, *__args:str): # -> 
        """ Add(self: OrderColumnCollection, orderColumn: OrderColumn)Add(self: OrderColumnCollection, orderColumn: OrderColumn, insertAtColumnName: str)Add(self: OrderColumnCollection, orderColumn: OrderColumn, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: OrderColumnCollection, array: Array[OrderColumn], index: int) """
        ...

    def ItemById(self, id:int) -> OrderColumn:
        """ ItemById(self: OrderColumnCollection, id: int) -> OrderColumn """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class PageRestorePlanner: # skipped bases: <type 'object'>, <type 'object'>
    """
    PageRestorePlanner(database: Database)
    PageRestorePlanner(database: Database, tailLogBackupFileName: str)
    """
    @property
    def Database(self) -> Database:
        """
        Get: Database(self: PageRestorePlanner) -> Database
        Set: Database(self: PageRestorePlanner) = value
        """
        ...

    @property
    def SuspectPages(self) -> ICollection:
        """ Get: SuspectPages(self: PageRestorePlanner) -> ICollection[SuspectPage] """
        ...

    @property
    def TailLogBackupFile(self) -> str:
        """
        Get: TailLogBackupFile(self: PageRestorePlanner) -> str
        Set: TailLogBackupFile(self: PageRestorePlanner) = value
        """
        ...


    def CreateRestorePlan(self) -> RestorePlan:
        """ CreateRestorePlan(self: PageRestorePlanner) -> RestorePlan """
        ...


class PageVerify(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PageVerify, values: Checksum (2), None (0), TornPageDetection (1) """
    Checksum: PageVerify = ...
    TornPageDetection: PageVerify = ...
    value__ = ...


class PartitionFunction(IDroppable, IAlterable, ICreatable, IScriptable, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    PartitionFunction()
    PartitionFunction(database: Database, name: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: PartitionFunction) -> DateTime """
        ...

    @property
    def Events(self): # -> PartitionFunctionEvents
        """ Get: Events(self: PartitionFunction) -> PartitionFunctionEvents """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: PartitionFunction) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: PartitionFunction) -> str
        Set: Name(self: PartitionFunction) = value
        """
        ...

    @property
    def NumberOfPartitions(self) -> int:
        """ Get: NumberOfPartitions(self: PartitionFunction) -> int """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: PartitionFunction) -> Database
        Set: Parent(self: PartitionFunction) = value
        """
        ...

    @property
    def PartitionFunctionParameters(self): # -> PartitionFunctionParameterCollection
        """ Get: PartitionFunctionParameters(self: PartitionFunction) -> PartitionFunctionParameterCollection """
        ...

    @property
    def RangeType(self) -> RangeType:
        """
        Get: RangeType(self: PartitionFunction) -> RangeType
        Set: RangeType(self: PartitionFunction) = value
        """
        ...

    @property
    def RangeValues(self) -> Array:
        """
        Get: RangeValues(self: PartitionFunction) -> Array[object]
        Set: RangeValues(self: PartitionFunction) = value
        """
        ...


    def MergeRangePartition(self, boundaryValue:object): # -> 
        """ MergeRangePartition(self: PartitionFunction, boundaryValue: object) """
        ...

    def SplitRangePartition(self, boundaryValue:object): # -> 
        """ SplitRangePartition(self: PartitionFunction, boundaryValue: object) """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class PartitionFunctionCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: PartitionFunctionCollection) -> Database """
        ...


    def Add(self, partitionFunction:PartitionFunction): # -> 
        """ Add(self: PartitionFunctionCollection, partitionFunction: PartitionFunction) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: PartitionFunctionCollection, array: Array[PartitionFunction], index: int) """
        ...

    def ItemById(self, id:int) -> PartitionFunction:
        """ ItemById(self: PartitionFunctionCollection, id: int) -> PartitionFunction """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class PartitionFunctionEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self) -> ObjectEventSet:
        """ GetEventSelection(self: PartitionFunctionEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: PartitionFunctionEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: PartitionFunctionEvents) """
        ...

    def SubscribeToEvents(self, events:ObjectEventSet, eventHandler = ...): # ->  # Not found arg types: {'eventHandler': 'ServerEventHandler'}
        """ SubscribeToEvents(self: PartitionFunctionEvents, events: ObjectEventSet)SubscribeToEvents(self: PartitionFunctionEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: PartitionFunctionEvents) """
        ...

    def UnsubscribeFromEvents(self, events:ObjectEventSet): # -> 
        """ UnsubscribeFromEvents(self: PartitionFunctionEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class PartitionFunctionParameter(ScriptNameObjectBase, ISfcSupportsDesignMode): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    PartitionFunctionParameter()
    PartitionFunctionParameter(partitionFunction: PartitionFunction)
    PartitionFunctionParameter(partitionFunction: PartitionFunction, dataType: DataType)
    """
    @property
    def Collation(self) -> str:
        """
        Get: Collation(self: PartitionFunctionParameter) -> str
        Set: Collation(self: PartitionFunctionParameter) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: PartitionFunctionParameter) -> int """
        ...

    @property
    def Length(self) -> int:
        """
        Get: Length(self: PartitionFunctionParameter) -> int
        Set: Length(self: PartitionFunctionParameter) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: PartitionFunctionParameter) -> str
        Set: Name(self: PartitionFunctionParameter) = value
        """
        ...

    @property
    def NumericPrecision(self) -> int:
        """
        Get: NumericPrecision(self: PartitionFunctionParameter) -> int
        Set: NumericPrecision(self: PartitionFunctionParameter) = value
        """
        ...

    @property
    def NumericScale(self) -> int:
        """
        Get: NumericScale(self: PartitionFunctionParameter) -> int
        Set: NumericScale(self: PartitionFunctionParameter) = value
        """
        ...

    @property
    def Parent(self) -> PartitionFunction:
        """
        Get: Parent(self: PartitionFunctionParameter) -> PartitionFunction
        Set: Parent(self: PartitionFunctionParameter) = value
        """
        ...


    def __new__(cls, partitionFunction:PartitionFunction = ..., dataType:DataType = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, partitionFunction: PartitionFunction)
        __new__(cls: type, partitionFunction: PartitionFunction, dataType: DataType)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class PartitionFunctionParameterCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> PartitionFunction:
        """ Get: Parent(self: PartitionFunctionParameterCollection) -> PartitionFunction """
        ...


    def Add(self, partitionFunctionParameter:PartitionFunctionParameter, *__args:str): # -> 
        """ Add(self: PartitionFunctionParameterCollection, partitionFunctionParameter: PartitionFunctionParameter)Add(self: PartitionFunctionParameterCollection, partitionFunctionParameter: PartitionFunctionParameter, insertAtColumnName: str)Add(self: PartitionFunctionParameterCollection, partitionFunctionParameter: PartitionFunctionParameter, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: PartitionFunctionParameterCollection, array: Array[PartitionFunctionParameter], index: int) """
        ...

    def ItemById(self, id:int) -> PartitionFunctionParameter:
        """ ItemById(self: PartitionFunctionParameterCollection, id: int) -> PartitionFunctionParameter """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class PartitionNumberedObjectCollectionBase(SortedListCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Contains(self, number:int) -> bool:
        """ Contains(self: PartitionNumberedObjectCollectionBase, number: int) -> bool """
        ...

    initialized = ...


class PartitionScheme(IDroppable, IAlterable, ICreatable, IScriptable, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    PartitionScheme()
    PartitionScheme(database: Database, name: str)
    """
    @property
    def Events(self): # -> PartitionSchemeEvents
        """ Get: Events(self: PartitionScheme) -> PartitionSchemeEvents """
        ...

    @property
    def ExtendedProperties(self) -> ExtendedPropertyCollection:
        """ Get: ExtendedProperties(self: PartitionScheme) -> ExtendedPropertyCollection """
        ...

    @property
    def FileGroups(self) -> StringCollection:
        """ Get: FileGroups(self: PartitionScheme) -> StringCollection """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: PartitionScheme) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: PartitionScheme) -> str
        Set: Name(self: PartitionScheme) = value
        """
        ...

    @property
    def NextUsedFileGroup(self) -> str:
        """
        Get: NextUsedFileGroup(self: PartitionScheme) -> str
        Set: NextUsedFileGroup(self: PartitionScheme) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: PartitionScheme) -> Database
        Set: Parent(self: PartitionScheme) = value
        """
        ...

    @property
    def PartitionFunction(self) -> str:
        """
        Get: PartitionFunction(self: PartitionScheme) -> str
        Set: PartitionFunction(self: PartitionScheme) = value
        """
        ...


    def ResetNextUsed(self): # -> 
        """ ResetNextUsed(self: PartitionScheme) """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class PartitionSchemeCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: PartitionSchemeCollection) -> Database """
        ...


    def Add(self, partitionScheme:PartitionScheme): # -> 
        """ Add(self: PartitionSchemeCollection, partitionScheme: PartitionScheme) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: PartitionSchemeCollection, array: Array[PartitionScheme], index: int) """
        ...

    def ItemById(self, id:int) -> PartitionScheme:
        """ ItemById(self: PartitionSchemeCollection, id: int) -> PartitionScheme """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class PartitionSchemeEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self) -> ObjectEventSet:
        """ GetEventSelection(self: PartitionSchemeEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: PartitionSchemeEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: PartitionSchemeEvents) """
        ...

    def SubscribeToEvents(self, events:ObjectEventSet, eventHandler = ...): # ->  # Not found arg types: {'eventHandler': 'ServerEventHandler'}
        """ SubscribeToEvents(self: PartitionSchemeEvents, events: ObjectEventSet)SubscribeToEvents(self: PartitionSchemeEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: PartitionSchemeEvents) """
        ...

    def UnsubscribeFromEvents(self, events:ObjectEventSet): # -> 
        """ UnsubscribeFromEvents(self: PartitionSchemeEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class PartitionSchemeParameter(ScriptNameObjectBase, ISfcSupportsDesignMode): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    PartitionSchemeParameter()
    PartitionSchemeParameter(parent: SqlSmoObject, name: str)
    """
    @property
    def ID(self) -> int:
        """ Get: ID(self: PartitionSchemeParameter) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: PartitionSchemeParameter) -> str
        Set: Name(self: PartitionSchemeParameter) = value
        """
        ...

    @property
    def Parent(self) -> SqlSmoObject:
        """
        Get: Parent(self: PartitionSchemeParameter) -> SqlSmoObject
        Set: Parent(self: PartitionSchemeParameter) = value
        """
        ...


    def __new__(cls, parent:SqlSmoObject = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, parent: SqlSmoObject, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class PartitionSchemeParameterCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> SqlSmoObject:
        """ Get: Parent(self: PartitionSchemeParameterCollection) -> SqlSmoObject """
        ...


    def Add(self, partitionSchemeParameter:PartitionSchemeParameter, *__args:str): # -> 
        """ Add(self: PartitionSchemeParameterCollection, partitionSchemeParameter: PartitionSchemeParameter)Add(self: PartitionSchemeParameterCollection, partitionSchemeParameter: PartitionSchemeParameter, insertAtColumnName: str)Add(self: PartitionSchemeParameterCollection, partitionSchemeParameter: PartitionSchemeParameter, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: PartitionSchemeParameterCollection, array: Array[PartitionSchemeParameter], index: int) """
        ...

    def ItemById(self, id:int) -> PartitionSchemeParameter:
        """ ItemById(self: PartitionSchemeParameterCollection, id: int) -> PartitionSchemeParameter """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class PasswordHashAlgorithm(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PasswordHashAlgorithm, values: None (0), ShaOne (2), ShaTwo (3), SqlServer7 (1) """
    ShaOne: PasswordHashAlgorithm = ...
    ShaTwo: PasswordHashAlgorithm = ...
    SqlServer7: PasswordHashAlgorithm = ...
    value__ = ...


class PathWrapper: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def Combine(s1:str, s2:str) -> str:
        """ Combine(s1: str, s2: str) -> str """
        ...

    @staticmethod
    def GetDirectoryName(s1:str) -> str:
        """ GetDirectoryName(s1: str) -> str """
        ...

    @staticmethod
    def IsXIPath(s1:str) -> bool:
        """ IsXIPath(s1: str) -> bool """
        ...

    __all__: list = ...


class Payload: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def DatabaseMirroring(self) -> DatabaseMirroringPayload:
        """ Get: DatabaseMirroring(self: Payload) -> DatabaseMirroringPayload """
        ...

    @property
    def ServiceBroker(self): # -> ServiceBrokerPayload
        """ Get: ServiceBroker(self: Payload) -> ServiceBrokerPayload """
        ...

    @property
    def Soap(self): # -> SoapPayload
        """ Get: Soap(self: Payload) -> SoapPayload """
        ...



class PercentCompleteEventArgs(ServerMessageEventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Message(self) -> str:
        """ Get: Message(self: PercentCompleteEventArgs) -> str """
        ...

    @property
    def Percent(self) -> int:
        """ Get: Percent(self: PercentCompleteEventArgs) -> int """
        ...



class PercentCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ PercentCompleteEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:PercentCompleteEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: PercentCompleteEventHandler, sender: object, e: PercentCompleteEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: PercentCompleteEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:PercentCompleteEventArgs): # -> 
        """ Invoke(self: PercentCompleteEventHandler, sender: object, e: PercentCompleteEventArgs) """
        ...


class PerfMonMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PerfMonMode, values: Continuous (0), None (1000), OnDemand (1) """
    Continuous: PerfMonMode = ...
    OnDemand: PerfMonMode = ...
    value__ = ...


class PerformanceCounters: # skipped bases: <type 'object'>, <type 'object'>
    """ PerformanceCounters() """
    @property
    def DependencyDiscoveryDuration(self) -> TimeSpan:
        """
        Get: DependencyDiscoveryDuration() -> TimeSpan
        Set: DependencyDiscoveryDuration() = value
        """
        ...

    @property
    def DiscoverDependenciesDuration(self) -> TimeSpan:
        """
        Get: DiscoverDependenciesDuration() -> TimeSpan
        Set: DiscoverDependenciesDuration() = value
        """
        ...

    @property
    def DoCount(self) -> bool:
        """
        Get: DoCount() -> bool
        Set: DoCount() = value
        """
        ...

    @property
    def EnumQueriesCount(self) -> int:
        """
        Get: EnumQueriesCount() -> int
        Set: EnumQueriesCount() = value
        """
        ...

    @property
    def EnumQueriesDuration(self) -> TimeSpan:
        """
        Get: EnumQueriesDuration() -> TimeSpan
        Set: EnumQueriesDuration() = value
        """
        ...

    @property
    def InitializeCallsCount(self) -> int:
        """
        Get: InitializeCallsCount() -> int
        Set: InitializeCallsCount() = value
        """
        ...

    @property
    def ObjectInfoRequestCount(self) -> int:
        """
        Get: ObjectInfoRequestCount() -> int
        Set: ObjectInfoRequestCount() = value
        """
        ...

    @property
    def SqlExecutionDuration(self) -> TimeSpan:
        """
        Get: SqlExecutionDuration() -> TimeSpan
        Set: SqlExecutionDuration() = value
        """
        ...

    @property
    def UrnCallsCount(self) -> int:
        """
        Get: UrnCallsCount() -> int
        Set: UrnCallsCount() = value
        """
        ...

    @property
    def UrnSkelCallsCount(self) -> int:
        """
        Get: UrnSkelCallsCount() -> int
        Set: UrnSkelCallsCount() = value
        """
        ...

    @property
    def UrnSkeletonsPerf(self) -> Hashtable:
        """ Get: UrnSkeletonsPerf() -> Hashtable """
        ...

    @property
    def WalkDependenciesDuration(self) -> TimeSpan:
        """
        Get: WalkDependenciesDuration() -> TimeSpan
        Set: WalkDependenciesDuration() = value
        """
        ...


    @staticmethod
    def Dump(*__args:str): # -> 
        """ Dump(fileName: str)Dump(fileName: str, header: bool)Dump(toLogFile: bool) """
        ...

    @staticmethod
    def Reset(): # -> 
        """ Reset() """
        ...



class PermissionState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PermissionState, values: Deny (68), Grant (71), GrantWithGrant (87), Revoke (82) """
    Deny: PermissionState = ...
    Grant: PermissionState = ...
    GrantWithGrant: PermissionState = ...
    Revoke: PermissionState = ...
    value__ = ...


class PhysicalPartition(SqlSmoObject, IPropertyDataDispatch): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    PhysicalPartition(parent: SqlSmoObject, partitionNumber: int, dataCompressionType: DataCompressionType)
    PhysicalPartition()
    PhysicalPartition(parent: SqlSmoObject, partitionNumber: int)
    """
    @property
    def DataCompression(self) -> DataCompressionType:
        """
        Get: DataCompression(self: PhysicalPartition) -> DataCompressionType
        Set: DataCompression(self: PhysicalPartition) = value
        """
        ...

    @property
    def FileGroupName(self) -> str:
        """
        Get: FileGroupName(self: PhysicalPartition) -> str
        Set: FileGroupName(self: PhysicalPartition) = value
        """
        ...

    @property
    def Parent(self) -> SqlSmoObject:
        """ Get: Parent(self: PhysicalPartition) -> SqlSmoObject """
        ...

    @property
    def PartitionNumber(self) -> int:
        """
        Get: PartitionNumber(self: PhysicalPartition) -> int
        Set: PartitionNumber(self: PhysicalPartition) = value
        """
        ...

    @property
    def RangeType(self) -> RangeType:
        """
        Get: RangeType(self: PhysicalPartition) -> RangeType
        Set: RangeType(self: PhysicalPartition) = value
        """
        ...

    @property
    def RightBoundaryValue(self) -> object:
        """
        Get: RightBoundaryValue(self: PhysicalPartition) -> object
        Set: RightBoundaryValue(self: PhysicalPartition) = value
        """
        ...

    @property
    def RowCount(self) -> float:
        """ Get: RowCount(self: PhysicalPartition) -> float """
        ...


    def __new__(cls, parent:SqlSmoObject = ..., partitionNumber:int = ..., dataCompressionType:DataCompressionType = ...) -> Self:
        """
        __new__(cls: type, parent: SqlSmoObject, partitionNumber: int, dataCompressionType: DataCompressionType)
        __new__(cls: type)
        __new__(cls: type, parent: SqlSmoObject, partitionNumber: int)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class PhysicalPartitionCollection(PartitionNumberedObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> SqlSmoObject:
        """ Get: Parent(self: PhysicalPartitionCollection) -> SqlSmoObject """
        ...


    def Add(self, physicalPartition:PhysicalPartition): # -> 
        """ Add(self: PhysicalPartitionCollection, physicalPartition: PhysicalPartition) """
        ...

    def CopyTo(self, array:Array, partitionNumberStart:int = ..., partitionNumberEnd:int = ...): # -> 
        """ CopyTo(self: PhysicalPartitionCollection, array: Array[PhysicalPartition])CopyTo(self: PhysicalPartitionCollection, array: Array[PhysicalPartition], partitionNumberStart: int)CopyTo(self: PhysicalPartitionCollection, array: Array[PhysicalPartition], partitionNumberStart: int, partitionNumberEnd: int) """
        ...

    def Remove(self, *__args:PhysicalPartition): # -> 
        """ Remove(self: PhysicalPartitionCollection, physicalPartition: PhysicalPartition)Remove(self: PhysicalPartitionCollection, partitionNumber: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class PlanGuide(IDroppable, IAlterable, ICreatable, IScriptable, IExtendedProperties, IDropIfExists, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    PlanGuide()
    PlanGuide(database: Database, name: str)
    """
    @property
    def Hints(self) -> str:
        """
        Get: Hints(self: PlanGuide) -> str
        Set: Hints(self: PlanGuide) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: PlanGuide) -> int """
        ...

    @property
    def IsDisabled(self) -> bool:
        """
        Get: IsDisabled(self: PlanGuide) -> bool
        Set: IsDisabled(self: PlanGuide) = value
        """
        ...

    @property
    def Parameters(self) -> str:
        """
        Get: Parameters(self: PlanGuide) -> str
        Set: Parameters(self: PlanGuide) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: PlanGuide) -> Database
        Set: Parent(self: PlanGuide) = value
        """
        ...

    @property
    def ScopeBatch(self) -> str:
        """
        Get: ScopeBatch(self: PlanGuide) -> str
        Set: ScopeBatch(self: PlanGuide) = value
        """
        ...

    @property
    def ScopeObjectName(self) -> str:
        """
        Get: ScopeObjectName(self: PlanGuide) -> str
        Set: ScopeObjectName(self: PlanGuide) = value
        """
        ...

    @property
    def ScopeSchemaName(self) -> str:
        """
        Get: ScopeSchemaName(self: PlanGuide) -> str
        Set: ScopeSchemaName(self: PlanGuide) = value
        """
        ...

    @property
    def ScopeType(self): # -> PlanGuideType
        """
        Get: ScopeType(self: PlanGuide) -> PlanGuideType
        Set: ScopeType(self: PlanGuide) = value
        """
        ...

    @property
    def Statement(self) -> str:
        """
        Get: Statement(self: PlanGuide) -> str
        Set: Statement(self: PlanGuide) = value
        """
        ...


    def ValidatePlanGuide(self, errorInfo=None) -> bool:
        """
        ValidatePlanGuide(self: PlanGuide) -> bool
        ValidatePlanGuide(self: PlanGuide) -> (bool, DataRow)
        """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class PlanGuideCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: PlanGuideCollection) -> Database """
        ...


    def Add(self, planGuide:PlanGuide): # -> 
        """ Add(self: PlanGuideCollection, planGuide: PlanGuide) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: PlanGuideCollection, array: Array[PlanGuide], index: int) """
        ...

    def ItemById(self, id:int) -> PlanGuide:
        """ ItemById(self: PlanGuideCollection, id: int) -> PlanGuide """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: PlanGuideCollection, name: str)Remove(self: PlanGuideCollection, planGuide: PlanGuide) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class PlanGuideExtender(SmoObjectExtender, ISfcValidate): # skipped bases: <type 'INotifyPropertyChanged'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcPropertyProvider'>, <type 'object'>
    """
    PlanGuideExtender()
    PlanGuideExtender(planGuide: PlanGuide)
    """
    @property
    def Name(self) -> str:
        """
        Get: Name(self: PlanGuideExtender) -> str
        Set: Name(self: PlanGuideExtender) = value
        """
        ...

    @property
    def SchemaNames(self) -> StringCollection:
        """ Get: SchemaNames(self: PlanGuideExtender) -> StringCollection """
        ...



class PlanGuideType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PlanGuideType, values: Object (1), Sql (2), Template (3) """
    Object: PlanGuideType = ...
    Sql: PlanGuideType = ...
    Template: PlanGuideType = ...
    value__ = ...


class PrincipalType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PrincipalType, values: ApplicationRole (4), DatabaseRole (3), Login (0), None (-1), ServerRole (1), User (2) """
    ApplicationRole: PrincipalType = ...
    DatabaseRole: PrincipalType = ...
    Login: PrincipalType = ...
    ServerRole: PrincipalType = ...
    User: PrincipalType = ...
    value__ = ...


class PrivateKeyEncryptionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PrivateKeyEncryptionType, values: MasterKey (1), NoKey (0), Password (2), Provider (3) """
    MasterKey: PrivateKeyEncryptionType = ...
    NoKey: PrivateKeyEncryptionType = ...
    Password: PrivateKeyEncryptionType = ...
    Provider: PrivateKeyEncryptionType = ...
    value__ = ...


class PrivilegeTypes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) PrivilegeTypes, values: AllDatabasePrivileges (262016), AllObjectPrivileges (15728703), Alter (4194304), BackupDatabase (262144), BackupLog (524288), Control (2097152), CreateDatabase (256), CreateDefault (4096), CreateFunction (65536), CreateProcedure (1024), CreateRule (16384), CreateTable (128), CreateType (131072), CreateView (512), Delete (8), Drop (8388608), DumpDatabase (2048), DumpTable (32768), DumpTransaction (8192), Execute (16), Insert (2), References (32), Select (1), Unknown (0), Update (4), ViewDefinition (1048576) """
    AllDatabasePrivileges: PrivilegeTypes = ...
    AllObjectPrivileges: PrivilegeTypes = ...
    Alter: PrivilegeTypes = ...
    BackupDatabase: PrivilegeTypes = ...
    BackupLog: PrivilegeTypes = ...
    Control: PrivilegeTypes = ...
    CreateDatabase: PrivilegeTypes = ...
    CreateDefault: PrivilegeTypes = ...
    CreateFunction: PrivilegeTypes = ...
    CreateProcedure: PrivilegeTypes = ...
    CreateRule: PrivilegeTypes = ...
    CreateTable: PrivilegeTypes = ...
    CreateType: PrivilegeTypes = ...
    CreateView: PrivilegeTypes = ...
    Delete: PrivilegeTypes = ...
    Drop: PrivilegeTypes = ...
    DumpDatabase: PrivilegeTypes = ...
    DumpTable: PrivilegeTypes = ...
    DumpTransaction: PrivilegeTypes = ...
    Execute: PrivilegeTypes = ...
    Insert: PrivilegeTypes = ...
    References: PrivilegeTypes = ...
    Select: PrivilegeTypes = ...
    Unknown: PrivilegeTypes = ...
    Update: PrivilegeTypes = ...
    value__ = ...
    ViewDefinition: PrivilegeTypes = ...


class ProgressReportEventArgs(EventArgs): # skipped bases: <type 'object'>
    """
    ProgressReportEventArgs(current: Urn, parent: Urn, subTotalCount: int, subTotal: int, totalCount: int, total: int)
    ProgressReportEventArgs(current: Urn, parent: Urn, isSchemaBound: bool, subTotalCount: int, subTotal: int, totalCount: int, total: int)
    """
    @property
    def Current(self) -> Urn:
        """ Get: Current(self: ProgressReportEventArgs) -> Urn """
        ...

    @property
    def IsSchemaBound(self) -> bool:
        """ Get: IsSchemaBound(self: ProgressReportEventArgs) -> bool """
        ...

    @property
    def Parent(self) -> Urn:
        """ Get: Parent(self: ProgressReportEventArgs) -> Urn """
        ...

    @property
    def SubTotal(self) -> int:
        """ Get: SubTotal(self: ProgressReportEventArgs) -> int """
        ...

    @property
    def SubTotalCount(self) -> int:
        """ Get: SubTotalCount(self: ProgressReportEventArgs) -> int """
        ...

    @property
    def Total(self) -> int:
        """ Get: Total(self: ProgressReportEventArgs) -> int """
        ...

    @property
    def TotalCount(self) -> int:
        """ Get: TotalCount(self: ProgressReportEventArgs) -> int """
        ...


    def __new__(cls, current, parent, *__args) -> Self:
        """
        __new__(cls: type, current: Urn, parent: Urn, subTotalCount: int, subTotal: int, totalCount: int, total: int)
        __new__(cls: type, current: Urn, parent: Urn, isSchemaBound: bool, subTotalCount: int, subTotal: int, totalCount: int, total: int)
        """
        ...


class ProgressReportEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ProgressReportEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ProgressReportEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ProgressReportEventHandler, sender: object, e: ProgressReportEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ProgressReportEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ProgressReportEventArgs): # -> 
        """ Invoke(self: ProgressReportEventHandler, sender: object, e: ProgressReportEventArgs) """
        ...


class Property(ISfcProperty): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Expensive(self) -> bool:
        """ Get: Expensive(self: Property) -> bool """
        ...

    @property
    def Readable(self) -> bool:
        """ Get: Readable(self: Property) -> bool """
        ...

    @property
    def Retrieved(self) -> bool:
        """ Get: Retrieved(self: Property) -> bool """
        ...


    def CompareTo(self, obj:object) -> int:
        """ CompareTo(self: Property, obj: object) -> int """
        ...

    def Equals(self, o:object) -> bool:
        """ Equals(self: Property, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: Property) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: Property) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __gt__(self, *args): #cannot find CLR method
        ...

    def __lt__(self, *args): #cannot find CLR method
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class PropertyCannotBeRetrievedException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    PropertyCannotBeRetrievedException()
    PropertyCannotBeRetrievedException(message: str)
    PropertyCannotBeRetrievedException(message: str, innerException: Exception)
    PropertyCannotBeRetrievedException(propertyName: str, failedObject: object)
    """
    @property
    def FailedObject(self) -> object:
        """ Get: FailedObject(self: PropertyCannotBeRetrievedException) -> object """
        ...

    @property
    def Message(self) -> str:
        """ Get: Message(self: PropertyCannotBeRetrievedException) -> str """
        ...

    @property
    def PropertyName(self) -> str:
        """ Get: PropertyName(self: PropertyCannotBeRetrievedException) -> str """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: PropertyCannotBeRetrievedException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class PropertyCollection(ISfcPropertySet, ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: PropertyCollection) -> IEnumerator """
        ...

    def GetPropertyObject(self, *__args:int) -> Property:
        """
        GetPropertyObject(self: PropertyCollection, index: int) -> Property
        GetPropertyObject(self: PropertyCollection, index: int, doNotLoadPropertyValues: bool) -> Property
        GetPropertyObject(self: PropertyCollection, name: str) -> Property
        GetPropertyObject(self: PropertyCollection, name: str, doNotLoadPropertyValues: bool) -> Property
        """
        ...

    def LookupID(self, *args): #cannot find CLR method
        """ LookupID(self: PropertyCollection, propertyName: str) -> int """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...


class PropertyNotSetException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    PropertyNotSetException()
    PropertyNotSetException(message: str, innerException: Exception)
    PropertyNotSetException(propertyName: str)
    """
    @property
    def Message(self) -> str:
        """ Get: Message(self: PropertyNotSetException) -> str """
        ...

    @property
    def PropertyName(self) -> str:
        """ Get: PropertyName(self: PropertyNotSetException) -> str """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: PropertyNotSetException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class PropertyReadOnlyException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    PropertyReadOnlyException()
    PropertyReadOnlyException(message: str, innerException: Exception)
    PropertyReadOnlyException(propertyName: str)
    """
    @property
    def Message(self) -> str:
        """ Get: Message(self: PropertyReadOnlyException) -> str """
        ...

    @property
    def PropertyName(self) -> str:
        """ Get: PropertyName(self: PropertyReadOnlyException) -> str """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: PropertyReadOnlyException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class PropertyTypeMismatchException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    PropertyTypeMismatchException()
    PropertyTypeMismatchException(message: str)
    PropertyTypeMismatchException(message: str, innerException: Exception)
    PropertyTypeMismatchException(propertyName: str, receivedType: str, expectedType: str)
    """
    @property
    def ExpectedType(self) -> str:
        """ Get: ExpectedType(self: PropertyTypeMismatchException) -> str """
        ...

    @property
    def Message(self) -> str:
        """ Get: Message(self: PropertyTypeMismatchException) -> str """
        ...

    @property
    def PropertyName(self) -> str:
        """ Get: PropertyName(self: PropertyTypeMismatchException) -> str """
        ...

    @property
    def ReceivedType(self) -> str:
        """ Get: ReceivedType(self: PropertyTypeMismatchException) -> str """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: PropertyTypeMismatchException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class PropertyWriteException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    PropertyWriteException()
    PropertyWriteException(message: str)
    PropertyWriteException(message: str, innerException: Exception)
    PropertyWriteException(propertyName: str, objectKind: str, objectName: str, reason: str)
    """
    @property
    def Message(self) -> str:
        """ Get: Message(self: PropertyWriteException) -> str """
        ...

    @property
    def PropertyName(self) -> str:
        """ Get: PropertyName(self: PropertyWriteException) -> str """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: PropertyWriteException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class Protocol: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Http(self) -> HttpProtocol:
        """ Get: Http(self: Protocol) -> HttpProtocol """
        ...

    @property
    def Tcp(self): # -> TcpProtocol
        """ Get: Tcp(self: Protocol) -> TcpProtocol """
        ...



class ProtocolType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ProtocolType, values: Http (1), NamedPipes (3), SharedMemory (4), Tcp (2), Via (5) """
    Http: ProtocolType = ...
    NamedPipes: ProtocolType = ...
    SharedMemory: ProtocolType = ...
    Tcp: ProtocolType = ...
    value__ = ...
    Via: ProtocolType = ...


class ProviderAuthenticationType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ProviderAuthenticationType, values: Basic (1), Other (2), Windows (0) """
    Basic: ProviderAuthenticationType = ...
    Other: ProviderAuthenticationType = ...
    value__ = ...
    Windows: ProviderAuthenticationType = ...


class QueryStoreCaptureMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum QueryStoreCaptureMode, values: All (1), Auto (2), None (0) """
    All: QueryStoreCaptureMode = ...
    Auto: QueryStoreCaptureMode = ...
    value__ = ...


class QueryStoreOperationMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum QueryStoreOperationMode, values: Error (3), Off (0), ReadOnly (1), ReadWrite (2) """
    Error: QueryStoreOperationMode = ...
    Off: QueryStoreOperationMode = ...
    ReadOnly: QueryStoreOperationMode = ...
    ReadWrite: QueryStoreOperationMode = ...
    value__ = ...


class QueryStoreOptions(SqlSmoObject, ISfcSupportsDesignMode, IAlterable, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def ActualState(self) -> QueryStoreOperationMode:
        """ Get: ActualState(self: QueryStoreOptions) -> QueryStoreOperationMode """
        ...

    @property
    def CurrentStorageSizeInMB(self) -> Int64:
        """
        Get: CurrentStorageSizeInMB(self: QueryStoreOptions) -> Int64
        Set: CurrentStorageSizeInMB(self: QueryStoreOptions) = value
        """
        ...

    @property
    def DataFlushIntervalInSeconds(self) -> Int64:
        """
        Get: DataFlushIntervalInSeconds(self: QueryStoreOptions) -> Int64
        Set: DataFlushIntervalInSeconds(self: QueryStoreOptions) = value
        """
        ...

    @property
    def DesiredState(self) -> QueryStoreOperationMode:
        """
        Get: DesiredState(self: QueryStoreOptions) -> QueryStoreOperationMode
        Set: DesiredState(self: QueryStoreOptions) = value
        """
        ...

    @property
    def MaxStorageSizeInMB(self) -> Int64:
        """
        Get: MaxStorageSizeInMB(self: QueryStoreOptions) -> Int64
        Set: MaxStorageSizeInMB(self: QueryStoreOptions) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: QueryStoreOptions) -> Database """
        ...

    @property
    def QueryCaptureMode(self) -> QueryStoreCaptureMode:
        """
        Get: QueryCaptureMode(self: QueryStoreOptions) -> QueryStoreCaptureMode
        Set: QueryCaptureMode(self: QueryStoreOptions) = value
        """
        ...

    @property
    def ReadOnlyReason(self) -> int:
        """
        Get: ReadOnlyReason(self: QueryStoreOptions) -> int
        Set: ReadOnlyReason(self: QueryStoreOptions) = value
        """
        ...

    @property
    def SizeBasedCleanupMode(self): # -> QueryStoreSizeBasedCleanupMode
        """
        Get: SizeBasedCleanupMode(self: QueryStoreOptions) -> QueryStoreSizeBasedCleanupMode
        Set: SizeBasedCleanupMode(self: QueryStoreOptions) = value
        """
        ...

    @property
    def StaleQueryThresholdInDays(self) -> Int64:
        """
        Get: StaleQueryThresholdInDays(self: QueryStoreOptions) -> Int64
        Set: StaleQueryThresholdInDays(self: QueryStoreOptions) = value
        """
        ...

    @property
    def StatisticsCollectionIntervalInMinutes(self) -> Int64:
        """
        Get: StatisticsCollectionIntervalInMinutes(self: QueryStoreOptions) -> Int64
        Set: StatisticsCollectionIntervalInMinutes(self: QueryStoreOptions) = value
        """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class QueryStoreSizeBasedCleanupMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum QueryStoreSizeBasedCleanupMode, values: Auto (1), Off (0) """
    Auto: QueryStoreSizeBasedCleanupMode = ...
    Off: QueryStoreSizeBasedCleanupMode = ...
    value__ = ...


class RangeType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RangeType, values: Left (0), None (-1), Right (1) """
    Left: RangeType = ...
    Right: RangeType = ...
    value__ = ...


class RangeTypeConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ RangeTypeConverter() """
    pass

class RecoveryModel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RecoveryModel, values: BulkLogged (2), Full (1), Simple (3) """
    BulkLogged: RecoveryModel = ...
    Full: RecoveryModel = ...
    Simple: RecoveryModel = ...
    value__ = ...


class RelocateFile: # skipped bases: <type 'object'>, <type 'object'>
    """
    RelocateFile()
    RelocateFile(logicalFileName: str, physicalFileName: str)
    """
    @property
    def LogicalFileName(self) -> str:
        """
        Get: LogicalFileName(self: RelocateFile) -> str
        Set: LogicalFileName(self: RelocateFile) = value
        """
        ...

    @property
    def PhysicalFileName(self) -> str:
        """
        Get: PhysicalFileName(self: RelocateFile) -> str
        Set: PhysicalFileName(self: RelocateFile) = value
        """
        ...



class RemoteDataArchiveMigrationState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RemoteDataArchiveMigrationState, values: Disabled (0), Inbound (4), Outbound (3), Paused (5), PausedInbound (2), PausedOutbound (1) """
    Disabled: RemoteDataArchiveMigrationState = ...
    Inbound: RemoteDataArchiveMigrationState = ...
    Outbound: RemoteDataArchiveMigrationState = ...
    Paused: RemoteDataArchiveMigrationState = ...
    PausedInbound: RemoteDataArchiveMigrationState = ...
    PausedOutbound: RemoteDataArchiveMigrationState = ...
    value__ = ...


class RemoteDataArchiveMigrationStatusReport: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def DatabaseName(self) -> str:
        """ Get: DatabaseName(self: RemoteDataArchiveMigrationStatusReport) -> str """
        ...

    @property
    def Details(self) -> str:
        """ Get: Details(self: RemoteDataArchiveMigrationStatusReport) -> str """
        ...

    @property
    def ErrorNumber(self) -> int:
        """ Get: ErrorNumber(self: RemoteDataArchiveMigrationStatusReport) -> int """
        ...

    @property
    def ErrorSeverity(self) -> int:
        """ Get: ErrorSeverity(self: RemoteDataArchiveMigrationStatusReport) -> int """
        ...

    @property
    def ErrorState(self) -> int:
        """ Get: ErrorState(self: RemoteDataArchiveMigrationStatusReport) -> int """
        ...

    @property
    def MigratedRows(self) -> Int64:
        """ Get: MigratedRows(self: RemoteDataArchiveMigrationStatusReport) -> Int64 """
        ...

    @property
    def StatusReportEndTimeInUtc(self) -> DateTime:
        """ Get: StatusReportEndTimeInUtc(self: RemoteDataArchiveMigrationStatusReport) -> DateTime """
        ...

    @property
    def StatusReportStartTimeInUtc(self) -> DateTime:
        """ Get: StatusReportStartTimeInUtc(self: RemoteDataArchiveMigrationStatusReport) -> DateTime """
        ...

    @property
    def TableName(self) -> str:
        """ Get: TableName(self: RemoteDataArchiveMigrationStatusReport) -> str """
        ...



class RemoteDatabaseMigrationStatistics: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def RemoteDatabaseSizeInMB(self) -> float:
        """ Get: RemoteDatabaseSizeInMB(self: RemoteDatabaseMigrationStatistics) -> float """
        ...



class RemoteTableMigrationStatistics: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def RowCount(self) -> Int64:
        """ Get: RowCount(self: RemoteTableMigrationStatistics) -> Int64 """
        ...

    @property
    def SizeInKB(self) -> float:
        """ Get: SizeInKB(self: RemoteTableMigrationStatistics) -> float """
        ...



class RepairOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) RepairOptions, values: AllErrorMessages (1), EstimateOnly (16), ExtendedLogicalChecks (2), NoInformationMessages (4), None (0), TableLock (8) """
    AllErrorMessages: RepairOptions = ...
    EstimateOnly: RepairOptions = ...
    ExtendedLogicalChecks: RepairOptions = ...
    NoInformationMessages: RepairOptions = ...
    TableLock: RepairOptions = ...
    value__ = ...


class RepairStructure(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RepairStructure, values: DataPurity (2), None (0), PhysicalOnly (1) """
    DataPurity: RepairStructure = ...
    PhysicalOnly: RepairStructure = ...
    value__ = ...


class RepairType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RepairType, values: AllowDataLoss (3), Fast (1), None (0), Rebuild (2) """
    AllowDataLoss: RepairType = ...
    Fast: RepairType = ...
    Rebuild: RepairType = ...
    value__ = ...


class ReplicationOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ReplicationOptions, values: MergePublished (4), MergeSubscribed (8), None (0), Published (1), Subscribed (2) """
    MergePublished: ReplicationOptions = ...
    MergeSubscribed: ReplicationOptions = ...
    Published: ReplicationOptions = ...
    Subscribed: ReplicationOptions = ...
    value__ = ...


class ResourceGovernor(SqlSmoObject, ISfcSupportsDesignMode, IAlterable, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ ResourceGovernor() """
    @property
    def ClassifierFunction(self) -> str:
        """
        Get: ClassifierFunction(self: ResourceGovernor) -> str
        Set: ClassifierFunction(self: ResourceGovernor) = value
        """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: ResourceGovernor) -> bool
        Set: Enabled(self: ResourceGovernor) = value
        """
        ...

    @property
    def ExternalResourcePools(self) -> ExternalResourcePoolCollection:
        """ Get: ExternalResourcePools(self: ResourceGovernor) -> ExternalResourcePoolCollection """
        ...

    @property
    def MaxOutstandingIOPerVolume(self) -> int:
        """
        Get: MaxOutstandingIOPerVolume(self: ResourceGovernor) -> int
        Set: MaxOutstandingIOPerVolume(self: ResourceGovernor) = value
        """
        ...

    @property
    def Parent(self): # -> Server
        """ Get: Parent(self: ResourceGovernor) -> Server """
        ...

    @property
    def ReconfigurePending(self) -> bool:
        """ Get: ReconfigurePending(self: ResourceGovernor) -> bool """
        ...

    @property
    def ResourcePools(self): # -> ResourcePoolCollection
        """ Get: ResourcePools(self: ResourceGovernor) -> ResourcePoolCollection """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class ResourcePool(IDroppable, IAlterable, ICreatable, IScriptable, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ResourcePool()
    ResourcePool(resourceGovernor: ResourceGovernor, name: str)
    """
    @property
    def CapCpuPercentage(self) -> int:
        """
        Get: CapCpuPercentage(self: ResourcePool) -> int
        Set: CapCpuPercentage(self: ResourcePool) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ResourcePool) -> int """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: ResourcePool) -> bool """
        ...

    @property
    def MaximumCpuPercentage(self) -> int:
        """
        Get: MaximumCpuPercentage(self: ResourcePool) -> int
        Set: MaximumCpuPercentage(self: ResourcePool) = value
        """
        ...

    @property
    def MaximumIopsPerVolume(self) -> int:
        """
        Get: MaximumIopsPerVolume(self: ResourcePool) -> int
        Set: MaximumIopsPerVolume(self: ResourcePool) = value
        """
        ...

    @property
    def MaximumMemoryPercentage(self) -> int:
        """
        Get: MaximumMemoryPercentage(self: ResourcePool) -> int
        Set: MaximumMemoryPercentage(self: ResourcePool) = value
        """
        ...

    @property
    def MinimumCpuPercentage(self) -> int:
        """
        Get: MinimumCpuPercentage(self: ResourcePool) -> int
        Set: MinimumCpuPercentage(self: ResourcePool) = value
        """
        ...

    @property
    def MinimumIopsPerVolume(self) -> int:
        """
        Get: MinimumIopsPerVolume(self: ResourcePool) -> int
        Set: MinimumIopsPerVolume(self: ResourcePool) = value
        """
        ...

    @property
    def MinimumMemoryPercentage(self) -> int:
        """
        Get: MinimumMemoryPercentage(self: ResourcePool) -> int
        Set: MinimumMemoryPercentage(self: ResourcePool) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: ResourcePool) -> str
        Set: Name(self: ResourcePool) = value
        """
        ...

    @property
    def Parent(self) -> ResourceGovernor:
        """
        Get: Parent(self: ResourcePool) -> ResourceGovernor
        Set: Parent(self: ResourcePool) = value
        """
        ...

    @property
    def ResourcePoolAffinityInfo(self): # -> ResourcePoolAffinityInfo
        """ Get: ResourcePoolAffinityInfo(self: ResourcePool) -> ResourcePoolAffinityInfo """
        ...

    @property
    def WorkloadGroups(self): # -> WorkloadGroupCollection
        """ Get: WorkloadGroups(self: ResourcePool) -> WorkloadGroupCollection """
        ...


    def __new__(cls, resourceGovernor:ResourceGovernor = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, resourceGovernor: ResourceGovernor, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ResourcePoolAffinityInfo(AffinityInfoBase): # skipped bases: <type 'IScriptable'>, <type 'IAlterable'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> ResourcePool:
        """ Get: Parent(self: ResourcePoolAffinityInfo) -> ResourcePool """
        ...

    @property
    def Schedulers(self): # -> SchedulerCollection
        """ Get: Schedulers(self: ResourcePoolAffinityInfo) -> SchedulerCollection """
        ...



class ResourcePoolCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> ResourceGovernor:
        """ Get: Parent(self: ResourcePoolCollection) -> ResourceGovernor """
        ...


    def Add(self, resourcePool:ResourcePool): # -> 
        """ Add(self: ResourcePoolCollection, resourcePool: ResourcePool) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ResourcePoolCollection, array: Array[ResourcePool], index: int) """
        ...

    def ItemById(self, id:int) -> ResourcePool:
        """ ItemById(self: ResourcePoolCollection, id: int) -> ResourcePool """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ResourceUsage(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ResourceUsage, values: AboveNormal (4), Background (1), BelowNormal (2), Dedicated (5), Normal (3), Unknown (0) """
    AboveNormal: ResourceUsage = ...
    Background: ResourceUsage = ...
    BelowNormal: ResourceUsage = ...
    Dedicated: ResourceUsage = ...
    Normal: ResourceUsage = ...
    Unknown: ResourceUsage = ...
    value__ = ...


class Restore(BackupRestoreBase): # skipped bases: <type 'object'>
    """
    Restore()
    Restore(DestinationDatabaseName: str, backupSet: BackupSet)
    """
    @property
    def Action(self) -> RestoreActionType:
        """
        Get: Action(self: Restore) -> RestoreActionType
        Set: Action(self: Restore) = value
        """
        ...

    @property
    def ClearSuspectPageTableAfterRestore(self) -> bool:
        """
        Get: ClearSuspectPageTableAfterRestore(self: Restore) -> bool
        Set: ClearSuspectPageTableAfterRestore(self: Restore) = value
        """
        ...

    @property
    def DatabasePages(self) -> List:
        """ Get: DatabasePages(self: Restore) -> List[SuspectPage] """
        ...

    @property
    def FileNumber(self) -> int:
        """
        Get: FileNumber(self: Restore) -> int
        Set: FileNumber(self: Restore) = value
        """
        ...

    @property
    def KeepReplication(self) -> bool:
        """
        Get: KeepReplication(self: Restore) -> bool
        Set: KeepReplication(self: Restore) = value
        """
        ...

    @property
    def KeepTemporalRetention(self) -> bool:
        """
        Get: KeepTemporalRetention(self: Restore) -> bool
        Set: KeepTemporalRetention(self: Restore) = value
        """
        ...

    @property
    def Offset(self) -> Array:
        """
        Get: Offset(self: Restore) -> Array[Int64]
        Set: Offset(self: Restore) = value
        """
        ...

    @property
    def Partial(self) -> bool:
        """
        Get: Partial(self: Restore) -> bool
        Set: Partial(self: Restore) = value
        """
        ...

    @property
    def RelocateFiles(self) -> ArrayList:
        """ Get: RelocateFiles(self: Restore) -> ArrayList """
        ...

    @property
    def ReplaceDatabase(self) -> bool:
        """
        Get: ReplaceDatabase(self: Restore) -> bool
        Set: ReplaceDatabase(self: Restore) = value
        """
        ...

    @property
    def RestrictedUser(self) -> bool:
        """
        Get: RestrictedUser(self: Restore) -> bool
        Set: RestrictedUser(self: Restore) = value
        """
        ...

    @property
    def StandbyFile(self) -> str:
        """
        Get: StandbyFile(self: Restore) -> str
        Set: StandbyFile(self: Restore) = value
        """
        ...

    @property
    def StopAtMarkAfterDate(self) -> str:
        """
        Get: StopAtMarkAfterDate(self: Restore) -> str
        Set: StopAtMarkAfterDate(self: Restore) = value
        """
        ...

    @property
    def StopAtMarkName(self) -> str:
        """
        Get: StopAtMarkName(self: Restore) -> str
        Set: StopAtMarkName(self: Restore) = value
        """
        ...

    @property
    def StopBeforeMarkAfterDate(self) -> str:
        """
        Get: StopBeforeMarkAfterDate(self: Restore) -> str
        Set: StopBeforeMarkAfterDate(self: Restore) = value
        """
        ...

    @property
    def StopBeforeMarkName(self) -> str:
        """
        Get: StopBeforeMarkName(self: Restore) -> str
        Set: StopBeforeMarkName(self: Restore) = value
        """
        ...

    @property
    def ToPointInTime(self) -> str:
        """
        Get: ToPointInTime(self: Restore) -> str
        Set: ToPointInTime(self: Restore) = value
        """
        ...


    def ClearSuspectPageTable(self, srv): # ->  # Not found arg types: {'srv': 'Server'}
        """ ClearSuspectPageTable(self: Restore, srv: Server) """
        ...

    def ReadBackupHeader(self, srv) -> DataTable: # Not found arg types: {'srv': 'Server'}
        """ ReadBackupHeader(self: Restore, srv: Server) -> DataTable """
        ...

    def ReadFileList(self, srv) -> DataTable: # Not found arg types: {'srv': 'Server'}
        """ ReadFileList(self: Restore, srv: Server) -> DataTable """
        ...

    def ReadMediaHeader(self, srv) -> DataTable: # Not found arg types: {'srv': 'Server'}
        """ ReadMediaHeader(self: Restore, srv: Server) -> DataTable """
        ...

    def ReadSuspectPageTable(self, server) -> DataTable: # Not found arg types: {'server': 'Server'}
        """ ReadSuspectPageTable(self: Restore, server: Server) -> DataTable """
        ...

    def Script(self, server) -> StringCollection: # Not found arg types: {'server': 'Server'}
        """ Script(self: Restore, server: Server) -> StringCollection """
        ...

    def SqlRestore(self, srv): # ->  # Not found arg types: {'srv': 'Server'}
        """ SqlRestore(self: Restore, srv: Server) """
        ...

    def SqlRestoreAsync(self, srv): # ->  # Not found arg types: {'srv': 'Server'}
        """ SqlRestoreAsync(self: Restore, srv: Server) """
        ...

    def SqlVerify(self, srv, *__args:bool) -> bool: # Not found arg types: {'srv': 'Server'}
        """
        SqlVerify(self: Restore, srv: Server) -> bool
        SqlVerify(self: Restore, srv: Server, loadHistory: bool) -> bool
        SqlVerify(self: Restore, srv: Server) -> (bool, str)
        SqlVerify(self: Restore, srv: Server, loadHistory: bool) -> (bool, str)
        """
        ...

    def SqlVerifyAsync(self, srv, loadHistory:bool = ...): # ->  # Not found arg types: {'srv': 'Server'}
        """ SqlVerifyAsync(self: Restore, srv: Server)SqlVerifyAsync(self: Restore, srv: Server, loadHistory: bool) """
        ...

    def SqlVerifyLatest(self, srv, *__args:SqlVerifyAction) -> bool: # Not found arg types: {'srv': 'Server'}
        """
        SqlVerifyLatest(self: Restore, srv: Server) -> bool
        SqlVerifyLatest(self: Restore, srv: Server, sqlVerifyAction: SqlVerifyAction) -> bool
        SqlVerifyLatest(self: Restore, srv: Server) -> (bool, str)
        SqlVerifyLatest(self: Restore, srv: Server, sqlVerifyAction: SqlVerifyAction) -> (bool, str)
        """
        ...

    def __new__(cls, DestinationDatabaseName:str = ..., backupSet:BackupSet = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, DestinationDatabaseName: str, backupSet: BackupSet)
        """
        ...

    currentAsyncOperation = ...
    m_BackupAction = ...
    m_LogTruncation = ...
    m_RestoreAction = ...
    VerifyComplete = ...


class RestoreActionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RestoreActionType, values: Database (0), Files (1), Log (4), OnlineFiles (3), OnlinePage (2) """
    Database: RestoreActionType = ...
    Files: RestoreActionType = ...
    Log: RestoreActionType = ...
    OnlineFiles: RestoreActionType = ...
    OnlinePage: RestoreActionType = ...
    value__ = ...


class RestoreOptions: # skipped bases: <type 'object'>, <type 'object'>
    """ RestoreOptions() """
    @property
    def Blocksize(self) -> int:
        """
        Get: Blocksize(self: RestoreOptions) -> int
        Set: Blocksize(self: RestoreOptions) = value
        """
        ...

    @property
    def BufferCount(self) -> int:
        """
        Get: BufferCount(self: RestoreOptions) -> int
        Set: BufferCount(self: RestoreOptions) = value
        """
        ...

    @property
    def ClearSuspectPageTableAfterRestore(self) -> bool:
        """
        Get: ClearSuspectPageTableAfterRestore(self: RestoreOptions) -> bool
        Set: ClearSuspectPageTableAfterRestore(self: RestoreOptions) = value
        """
        ...

    @property
    def ContinueAfterError(self) -> bool:
        """
        Get: ContinueAfterError(self: RestoreOptions) -> bool
        Set: ContinueAfterError(self: RestoreOptions) = value
        """
        ...

    @property
    def KeepReplication(self) -> bool:
        """
        Get: KeepReplication(self: RestoreOptions) -> bool
        Set: KeepReplication(self: RestoreOptions) = value
        """
        ...

    @property
    def KeepTemporalRetention(self) -> bool:
        """
        Get: KeepTemporalRetention(self: RestoreOptions) -> bool
        Set: KeepTemporalRetention(self: RestoreOptions) = value
        """
        ...

    @property
    def MaxTransferSize(self) -> int:
        """
        Get: MaxTransferSize(self: RestoreOptions) -> int
        Set: MaxTransferSize(self: RestoreOptions) = value
        """
        ...

    @property
    def PercentCompleteNotification(self) -> int:
        """
        Get: PercentCompleteNotification(self: RestoreOptions) -> int
        Set: PercentCompleteNotification(self: RestoreOptions) = value
        """
        ...

    @property
    def RecoveryState(self) -> DatabaseRecoveryState:
        """
        Get: RecoveryState(self: RestoreOptions) -> DatabaseRecoveryState
        Set: RecoveryState(self: RestoreOptions) = value
        """
        ...

    @property
    def ReplaceDatabase(self) -> bool:
        """
        Get: ReplaceDatabase(self: RestoreOptions) -> bool
        Set: ReplaceDatabase(self: RestoreOptions) = value
        """
        ...

    @property
    def SetRestrictedUser(self) -> bool:
        """
        Get: SetRestrictedUser(self: RestoreOptions) -> bool
        Set: SetRestrictedUser(self: RestoreOptions) = value
        """
        ...

    @property
    def StandByFile(self) -> str:
        """
        Get: StandByFile(self: RestoreOptions) -> str
        Set: StandByFile(self: RestoreOptions) = value
        """
        ...



class RestorePlan: # skipped bases: <type 'object'>, <type 'object'>
    """
    RestorePlan(server: Server)
    RestorePlan(server: Server, databaseName: str)
    RestorePlan(database: Database)
    """
    @property
    def AsyncStatus(self) -> AsyncStatus:
        """ Get: AsyncStatus(self: RestorePlan) -> AsyncStatus """
        ...

    @property
    def CloseExistingConnections(self) -> bool:
        """
        Get: CloseExistingConnections(self: RestorePlan) -> bool
        Set: CloseExistingConnections(self: RestorePlan) = value
        """
        ...

    @property
    def DatabaseName(self) -> str:
        """
        Get: DatabaseName(self: RestorePlan) -> str
        Set: DatabaseName(self: RestorePlan) = value
        """
        ...

    @property
    def RestoreAction(self) -> RestoreActionType:
        """
        Get: RestoreAction(self: RestorePlan) -> RestoreActionType
        Set: RestoreAction(self: RestorePlan) = value
        """
        ...

    @property
    def RestoreOperations(self) -> List:
        """ Get: RestoreOperations(self: RestorePlan) -> List[Restore] """
        ...

    @property
    def Server(self): # -> Server
        """ Get: Server(self: RestorePlan) -> Server """
        ...

    @property
    def TailLogBackupOperation(self) -> Backup:
        """
        Get: TailLogBackupOperation(self: RestorePlan) -> Backup
        Set: TailLogBackupOperation(self: RestorePlan) = value
        """
        ...


    def AddRestoreOperation(self, *__args:BackupSet): # -> 
        """ AddRestoreOperation(self: RestorePlan, backupSet: BackupSet)AddRestoreOperation(self: RestorePlan, backupSets: List[BackupSet]) """
        ...

    def Execute(self): # -> 
        """ Execute(self: RestorePlan) """
        ...

    def ExecuteAsync(self): # -> 
        """ ExecuteAsync(self: RestorePlan) """
        ...

    def Script(self) -> StringCollection:
        """ Script(self: RestorePlan) -> StringCollection """
        ...

    def SetRestoreOptions(self, restoreOptions:RestoreOptions): # -> 
        """ SetRestoreOptions(self: RestorePlan, restoreOptions: RestoreOptions) """
        ...

    def Verify(self, checkBackupMediaIntegrity:bool): # -> 
        """ Verify(self: RestorePlan, checkBackupMediaIntegrity: bool) """
        ...

    Complete = ...
    Information = ...
    NextMedia = ...
    NextRestore = ...
    PercentComplete = ...


class RestoreType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RestoreType, values: Database (1), File (2), FileGroup (3), VerifyOnly (4) """
    Database: RestoreType = ...
    File: RestoreType = ...
    FileGroup: RestoreType = ...
    value__ = ...
    VerifyOnly: RestoreType = ...


class ResultFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ResultFormat, values: AllResults (1), None (3), RowSets (2) """
    AllResults: ResultFormat = ...
    RowSets: ResultFormat = ...
    value__ = ...


class ResumableOperationStateType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ResumableOperationStateType, values: None (2), Paused (1), Running (0) """
    Paused: ResumableOperationStateType = ...
    Running: ResumableOperationStateType = ...
    value__ = ...


class ResumableOperationStateTypeConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ ResumableOperationStateTypeConverter() """
    pass

class RetentionPeriodUnits(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) RetentionPeriodUnits, values: Days (3), Hours (2), Minutes (1), None (0) """
    Days: RetentionPeriodUnits = ...
    Hours: RetentionPeriodUnits = ...
    Minutes: RetentionPeriodUnits = ...
    value__ = ...


class RoleTypes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) RoleTypes, values: All (3), Database (1), Server (2) """
    All: RoleTypes = ...
    Database: RoleTypes = ...
    Server: RoleTypes = ...
    value__ = ...


class Rule(ISfcSupportsDesignMode, DefaultRuleBase): # skipped bases: <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IScriptable'>, <type 'ISqlSmoObjectInitialize'>, <type 'IDroppable'>, <type 'ICreatable'>, <type 'IAlienObject'>, <type 'IAlterable'>, <type 'IDropIfExists'>, <type 'ITextObject'>, <type 'IExtendedProperties'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'object'>
    """
    Rule()
    Rule(database: Database, name: str)
    Rule(database: Database, name: str, schema: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: Rule) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: Rule) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Rule) -> int """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: Rule) -> Database
        Set: Parent(self: Rule) = value
        """
        ...


    def ChangeSchema(self, newSchema:str): # -> 
        """ ChangeSchema(self: Rule, newSchema: str) """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class RuleCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: RuleCollection) -> Database """
        ...


    def Add(self, rule:Rule): # -> 
        """ Add(self: RuleCollection, rule: Rule) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: RuleCollection, array: Array[Rule], index: int) """
        ...

    def ItemById(self, id:int) -> Rule:
        """ ItemById(self: RuleCollection, id: int) -> Rule """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class Scheduler: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AffinityMask(self) -> bool:
        """
        Get: AffinityMask(self: Scheduler) -> bool
        Set: AffinityMask(self: Scheduler) = value
        """
        ...

    @property
    def Cpu(self) -> Cpu:
        """ Get: Cpu(self: Scheduler) -> Cpu """
        ...

    @property
    def Id(self) -> int:
        """ Get: Id(self: Scheduler) -> int """
        ...



class SchedulerCollection(ICollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ no doc """
    def GetByID(self, SchedulernodeId:int) -> Scheduler:
        """ GetByID(self: SchedulerCollection, SchedulernodeId: int) -> Scheduler """
        ...

    def GetElementAt(self, position:int) -> Scheduler:
        """ GetElementAt(self: SchedulerCollection, position: int) -> Scheduler """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: SchedulerCollection) -> IEnumerator """
        ...

    def SetAffinityToRange(self, startIndex:int, endIndex:int, affinityMask:bool): # -> 
        """ SetAffinityToRange(self: SchedulerCollection, startIndex: int, endIndex: int, affinityMask: bool) """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...


class Schema(IDroppable, IAlterable, ICreatable, IScriptable, IObjectPermission, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Schema()
    Schema(database: Database, name: str)
    """
    @property
    def Events(self): # -> SchemaEvents
        """ Get: Events(self: Schema) -> SchemaEvents """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Schema) -> int """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: Schema) -> bool """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Schema) -> str
        Set: Name(self: Schema) = value
        """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: Schema) -> str
        Set: Owner(self: Schema) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: Schema) -> Database
        Set: Parent(self: Schema) = value
        """
        ...


    def EnumOwnedObjects(self) -> Array:
        """ EnumOwnedObjects(self: Schema) -> Array[Urn] """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SchemaCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: SchemaCollection) -> Database """
        ...


    def Add(self, schema:Schema): # -> 
        """ Add(self: SchemaCollection, schema: Schema) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SchemaCollection, array: Array[Schema], index: int) """
        ...

    def ItemById(self, id:int) -> Schema:
        """ ItemById(self: SchemaCollection, id: int) -> Schema """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SchemaCustomResolver: # skipped bases: <type 'object'>, <type 'object'>
    """ SchemaCustomResolver() """
    @staticmethod
    def Resolve(instance:object, parameters:Array) -> object:
        """ Resolve(instance: object, *parameters: Array[object]) -> object """
        ...

    @staticmethod
    def ResolveUrn(instance:object, parameters:Array) -> object:
        """ ResolveUrn(instance: object, *parameters: Array[object]) -> object """
        ...


class SchemaEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self) -> ObjectEventSet:
        """ GetEventSelection(self: SchemaEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: SchemaEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: SchemaEvents) """
        ...

    def SubscribeToEvents(self, events:ObjectEventSet, eventHandler = ...): # ->  # Not found arg types: {'eventHandler': 'ServerEventHandler'}
        """ SubscribeToEvents(self: SchemaEvents, events: ObjectEventSet)SubscribeToEvents(self: SchemaEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: SchemaEvents) """
        ...

    def UnsubscribeFromEvents(self, events:ObjectEventSet): # -> 
        """ UnsubscribeFromEvents(self: SchemaEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class Scripter(DependencyWalker): # skipped bases: <type 'object'>
    """
    Scripter()
    Scripter(svr: Server)
    """
    @property
    def Options(self): # -> ScriptingOptions
        """
        Get: Options(self: Scripter) -> ScriptingOptions
        Set: Options(self: Scripter) = value
        """
        ...

    @property
    def PrefetchObjects(self) -> bool:
        """
        Get: PrefetchObjects(self: Scripter) -> bool
        Set: PrefetchObjects(self: Scripter) = value
        """
        ...


    @staticmethod
    def EnumDependencies(smoObject:SqlSmoObject, dependencyType:DependencyType): # -> UrnCollection
        """ EnumDependencies(smoObject: SqlSmoObject, dependencyType: DependencyType) -> UrnCollection """
        ...

    def EnumScript(self, *__args:Array) -> IEnumerable:
        """
        EnumScript(self: Scripter, objects: Array[SqlSmoObject]) -> IEnumerable[str]
        EnumScript(self: Scripter, list: UrnCollection) -> IEnumerable[str]
        EnumScript(self: Scripter, urns: Array[Urn]) -> IEnumerable[str]
        """
        ...

    def EnumScriptWithList(self, *__args:DependencyCollection) -> IEnumerable:
        """
        EnumScriptWithList(self: Scripter, depList: DependencyCollection) -> IEnumerable[str]
        EnumScriptWithList(self: Scripter, objects: Array[SqlSmoObject]) -> IEnumerable[str]
        EnumScriptWithList(self: Scripter, list: UrnCollection) -> IEnumerable[str]
        EnumScriptWithList(self: Scripter, urns: Array[Urn]) -> IEnumerable[str]
        """
        ...

    def Init(self, *args): #cannot find CLR method
        """ Init(self: Scripter) """
        ...

    def Script(self, *__args:Array) -> StringCollection:
        """
        Script(self: Scripter, objects: Array[SqlSmoObject]) -> StringCollection
        Script(self: Scripter, list: UrnCollection) -> StringCollection
        Script(self: Scripter, urns: Array[Urn]) -> StringCollection
        """
        ...

    def ScriptWithList(self, *__args:Array) -> StringCollection:
        """
        ScriptWithList(self: Scripter, objects: Array[SqlSmoObject]) -> StringCollection
        ScriptWithList(self: Scripter, list: UrnCollection) -> StringCollection
        ScriptWithList(self: Scripter, urns: Array[Urn]) -> StringCollection
        ScriptWithList(self: Scripter, depList: DependencyCollection) -> StringCollection
        """
        ...

    ScriptingError = ...
    ScriptingProgress = ...


class ScriptingErrorEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Current(self) -> Urn:
        """ Get: Current(self: ScriptingErrorEventArgs) -> Urn """
        ...

    @property
    def InnerException(self) -> Exception:
        """ Get: InnerException(self: ScriptingErrorEventArgs) -> Exception """
        ...



class ScriptingErrorEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ScriptingErrorEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ScriptingErrorEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ScriptingErrorEventHandler, sender: object, e: ScriptingErrorEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ScriptingErrorEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ScriptingErrorEventArgs): # -> 
        """ Invoke(self: ScriptingErrorEventHandler, sender: object, e: ScriptingErrorEventArgs) """
        ...


class ScriptingFilter(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ScriptingFilter(object: object, method: IntPtr) """
    def BeginInvoke(self, urn:Urn, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ScriptingFilter, urn: Urn, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult) -> bool:
        """ EndInvoke(self: ScriptingFilter, result: IAsyncResult) -> bool """
        ...

    def Invoke(self, urn:Urn) -> bool:
        """ Invoke(self: ScriptingFilter, urn: Urn) -> bool """
        ...


class ScriptingOptions: # skipped bases: <type 'object'>, <type 'object'>
    """
    ScriptingOptions()
    ScriptingOptions(so: ScriptingOptions)
    ScriptingOptions(so: ScriptOption)
    """
    @property
    def AgentAlertJob(self) -> bool:
        """
        Get: AgentAlertJob(self: ScriptingOptions) -> bool
        Set: AgentAlertJob(self: ScriptingOptions) = value
        """
        ...

    @property
    def AgentJobId(self) -> bool:
        """
        Get: AgentJobId(self: ScriptingOptions) -> bool
        Set: AgentJobId(self: ScriptingOptions) = value
        """
        ...

    @property
    def AgentNotify(self) -> bool:
        """
        Get: AgentNotify(self: ScriptingOptions) -> bool
        Set: AgentNotify(self: ScriptingOptions) = value
        """
        ...

    @property
    def AllowSystemObjects(self) -> bool:
        """
        Get: AllowSystemObjects(self: ScriptingOptions) -> bool
        Set: AllowSystemObjects(self: ScriptingOptions) = value
        """
        ...

    @property
    def AnsiFile(self) -> bool:
        """
        Get: AnsiFile(self: ScriptingOptions) -> bool
        Set: AnsiFile(self: ScriptingOptions) = value
        """
        ...

    @property
    def AnsiPadding(self) -> bool:
        """
        Get: AnsiPadding(self: ScriptingOptions) -> bool
        Set: AnsiPadding(self: ScriptingOptions) = value
        """
        ...

    @property
    def AppendToFile(self) -> bool:
        """
        Get: AppendToFile(self: ScriptingOptions) -> bool
        Set: AppendToFile(self: ScriptingOptions) = value
        """
        ...

    @property
    def BatchSize(self) -> int:
        """
        Get: BatchSize(self: ScriptingOptions) -> int
        Set: BatchSize(self: ScriptingOptions) = value
        """
        ...

    @property
    def Bindings(self) -> bool:
        """
        Get: Bindings(self: ScriptingOptions) -> bool
        Set: Bindings(self: ScriptingOptions) = value
        """
        ...

    @property
    def ChangeTracking(self) -> bool:
        """
        Get: ChangeTracking(self: ScriptingOptions) -> bool
        Set: ChangeTracking(self: ScriptingOptions) = value
        """
        ...

    @property
    def ClusteredIndexes(self) -> bool:
        """
        Get: ClusteredIndexes(self: ScriptingOptions) -> bool
        Set: ClusteredIndexes(self: ScriptingOptions) = value
        """
        ...

    @property
    def ContinueScriptingOnError(self) -> bool:
        """
        Get: ContinueScriptingOnError(self: ScriptingOptions) -> bool
        Set: ContinueScriptingOnError(self: ScriptingOptions) = value
        """
        ...

    @property
    def ConvertUserDefinedDataTypesToBaseType(self) -> bool:
        """
        Get: ConvertUserDefinedDataTypesToBaseType(self: ScriptingOptions) -> bool
        Set: ConvertUserDefinedDataTypesToBaseType(self: ScriptingOptions) = value
        """
        ...

    @property
    def DdlBodyOnly(self) -> bool:
        """
        Get: DdlBodyOnly(self: ScriptingOptions) -> bool
        Set: DdlBodyOnly(self: ScriptingOptions) = value
        """
        ...

    @property
    def DdlHeaderOnly(self) -> bool:
        """
        Get: DdlHeaderOnly(self: ScriptingOptions) -> bool
        Set: DdlHeaderOnly(self: ScriptingOptions) = value
        """
        ...

    @property
    def Default(self) -> bool:
        """
        Get: Default(self: ScriptingOptions) -> bool
        Set: Default(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriAll(self) -> bool:
        """
        Get: DriAll(self: ScriptingOptions) -> bool
        Set: DriAll(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriAllConstraints(self) -> bool:
        """
        Get: DriAllConstraints(self: ScriptingOptions) -> bool
        Set: DriAllConstraints(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriAllKeys(self) -> bool:
        """
        Get: DriAllKeys(self: ScriptingOptions) -> bool
        Set: DriAllKeys(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriChecks(self) -> bool:
        """
        Get: DriChecks(self: ScriptingOptions) -> bool
        Set: DriChecks(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriClustered(self) -> bool:
        """
        Get: DriClustered(self: ScriptingOptions) -> bool
        Set: DriClustered(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriDefaults(self) -> bool:
        """
        Get: DriDefaults(self: ScriptingOptions) -> bool
        Set: DriDefaults(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriForeignKeys(self) -> bool:
        """
        Get: DriForeignKeys(self: ScriptingOptions) -> bool
        Set: DriForeignKeys(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriIncludeSystemNames(self) -> bool:
        """
        Get: DriIncludeSystemNames(self: ScriptingOptions) -> bool
        Set: DriIncludeSystemNames(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriIndexes(self) -> bool:
        """
        Get: DriIndexes(self: ScriptingOptions) -> bool
        Set: DriIndexes(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriNonClustered(self) -> bool:
        """
        Get: DriNonClustered(self: ScriptingOptions) -> bool
        Set: DriNonClustered(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriPrimaryKey(self) -> bool:
        """
        Get: DriPrimaryKey(self: ScriptingOptions) -> bool
        Set: DriPrimaryKey(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriUniqueKeys(self) -> bool:
        """
        Get: DriUniqueKeys(self: ScriptingOptions) -> bool
        Set: DriUniqueKeys(self: ScriptingOptions) = value
        """
        ...

    @property
    def DriWithNoCheck(self) -> bool:
        """
        Get: DriWithNoCheck(self: ScriptingOptions) -> bool
        Set: DriWithNoCheck(self: ScriptingOptions) = value
        """
        ...

    @property
    def Encoding(self) -> Encoding:
        """
        Get: Encoding(self: ScriptingOptions) -> Encoding
        Set: Encoding(self: ScriptingOptions) = value
        """
        ...

    @property
    def EnforceScriptingOptions(self) -> bool:
        """
        Get: EnforceScriptingOptions(self: ScriptingOptions) -> bool
        Set: EnforceScriptingOptions(self: ScriptingOptions) = value
        """
        ...

    @property
    def ExtendedProperties(self) -> bool:
        """
        Get: ExtendedProperties(self: ScriptingOptions) -> bool
        Set: ExtendedProperties(self: ScriptingOptions) = value
        """
        ...

    @property
    def FileName(self) -> str:
        """
        Get: FileName(self: ScriptingOptions) -> str
        Set: FileName(self: ScriptingOptions) = value
        """
        ...

    @property
    def FullTextCatalogs(self) -> bool:
        """
        Get: FullTextCatalogs(self: ScriptingOptions) -> bool
        Set: FullTextCatalogs(self: ScriptingOptions) = value
        """
        ...

    @property
    def FullTextIndexes(self) -> bool:
        """
        Get: FullTextIndexes(self: ScriptingOptions) -> bool
        Set: FullTextIndexes(self: ScriptingOptions) = value
        """
        ...

    @property
    def FullTextStopLists(self) -> bool:
        """
        Get: FullTextStopLists(self: ScriptingOptions) -> bool
        Set: FullTextStopLists(self: ScriptingOptions) = value
        """
        ...

    @property
    def IncludeDatabaseContext(self) -> bool:
        """
        Get: IncludeDatabaseContext(self: ScriptingOptions) -> bool
        Set: IncludeDatabaseContext(self: ScriptingOptions) = value
        """
        ...

    @property
    def IncludeDatabaseRoleMemberships(self) -> bool:
        """
        Get: IncludeDatabaseRoleMemberships(self: ScriptingOptions) -> bool
        Set: IncludeDatabaseRoleMemberships(self: ScriptingOptions) = value
        """
        ...

    @property
    def IncludeFullTextCatalogRootPath(self) -> bool:
        """
        Get: IncludeFullTextCatalogRootPath(self: ScriptingOptions) -> bool
        Set: IncludeFullTextCatalogRootPath(self: ScriptingOptions) = value
        """
        ...

    @property
    def IncludeHeaders(self) -> bool:
        """
        Get: IncludeHeaders(self: ScriptingOptions) -> bool
        Set: IncludeHeaders(self: ScriptingOptions) = value
        """
        ...

    @property
    def IncludeIfNotExists(self) -> bool:
        """
        Get: IncludeIfNotExists(self: ScriptingOptions) -> bool
        Set: IncludeIfNotExists(self: ScriptingOptions) = value
        """
        ...

    @property
    def Indexes(self) -> bool:
        """
        Get: Indexes(self: ScriptingOptions) -> bool
        Set: Indexes(self: ScriptingOptions) = value
        """
        ...

    @property
    def LoginSid(self) -> bool:
        """
        Get: LoginSid(self: ScriptingOptions) -> bool
        Set: LoginSid(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoAssemblies(self) -> bool:
        """
        Get: NoAssemblies(self: ScriptingOptions) -> bool
        Set: NoAssemblies(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoCollation(self) -> bool:
        """
        Get: NoCollation(self: ScriptingOptions) -> bool
        Set: NoCollation(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoCommandTerminator(self) -> bool:
        """
        Get: NoCommandTerminator(self: ScriptingOptions) -> bool
        Set: NoCommandTerminator(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoExecuteAs(self) -> bool:
        """
        Get: NoExecuteAs(self: ScriptingOptions) -> bool
        Set: NoExecuteAs(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoFileGroup(self) -> bool:
        """
        Get: NoFileGroup(self: ScriptingOptions) -> bool
        Set: NoFileGroup(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoFileStream(self) -> bool:
        """
        Get: NoFileStream(self: ScriptingOptions) -> bool
        Set: NoFileStream(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoFileStreamColumn(self) -> bool:
        """
        Get: NoFileStreamColumn(self: ScriptingOptions) -> bool
        Set: NoFileStreamColumn(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoIdentities(self) -> bool:
        """
        Get: NoIdentities(self: ScriptingOptions) -> bool
        Set: NoIdentities(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoIndexPartitioningSchemes(self) -> bool:
        """
        Get: NoIndexPartitioningSchemes(self: ScriptingOptions) -> bool
        Set: NoIndexPartitioningSchemes(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoMailProfileAccounts(self) -> bool:
        """
        Get: NoMailProfileAccounts(self: ScriptingOptions) -> bool
        Set: NoMailProfileAccounts(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoMailProfilePrincipals(self) -> bool:
        """
        Get: NoMailProfilePrincipals(self: ScriptingOptions) -> bool
        Set: NoMailProfilePrincipals(self: ScriptingOptions) = value
        """
        ...

    @property
    def NonClusteredIndexes(self) -> bool:
        """
        Get: NonClusteredIndexes(self: ScriptingOptions) -> bool
        Set: NonClusteredIndexes(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoTablePartitioningSchemes(self) -> bool:
        """
        Get: NoTablePartitioningSchemes(self: ScriptingOptions) -> bool
        Set: NoTablePartitioningSchemes(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoVardecimal(self) -> bool:
        """
        Get: NoVardecimal(self: ScriptingOptions) -> bool
        Set: NoVardecimal(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoViewColumns(self) -> bool:
        """
        Get: NoViewColumns(self: ScriptingOptions) -> bool
        Set: NoViewColumns(self: ScriptingOptions) = value
        """
        ...

    @property
    def NoXmlNamespaces(self) -> bool:
        """
        Get: NoXmlNamespaces(self: ScriptingOptions) -> bool
        Set: NoXmlNamespaces(self: ScriptingOptions) = value
        """
        ...

    @property
    def OptimizerData(self) -> bool:
        """
        Get: OptimizerData(self: ScriptingOptions) -> bool
        Set: OptimizerData(self: ScriptingOptions) = value
        """
        ...

    @property
    def Permissions(self) -> bool:
        """
        Get: Permissions(self: ScriptingOptions) -> bool
        Set: Permissions(self: ScriptingOptions) = value
        """
        ...

    @property
    def PrimaryObject(self) -> bool:
        """
        Get: PrimaryObject(self: ScriptingOptions) -> bool
        Set: PrimaryObject(self: ScriptingOptions) = value
        """
        ...

    @property
    def SchemaQualify(self) -> bool:
        """
        Get: SchemaQualify(self: ScriptingOptions) -> bool
        Set: SchemaQualify(self: ScriptingOptions) = value
        """
        ...

    @property
    def SchemaQualifyForeignKeysReferences(self) -> bool:
        """
        Get: SchemaQualifyForeignKeysReferences(self: ScriptingOptions) -> bool
        Set: SchemaQualifyForeignKeysReferences(self: ScriptingOptions) = value
        """
        ...

    @property
    def ScriptBatchTerminator(self) -> bool:
        """
        Get: ScriptBatchTerminator(self: ScriptingOptions) -> bool
        Set: ScriptBatchTerminator(self: ScriptingOptions) = value
        """
        ...

    @property
    def ScriptData(self) -> bool:
        """
        Get: ScriptData(self: ScriptingOptions) -> bool
        Set: ScriptData(self: ScriptingOptions) = value
        """
        ...

    @property
    def ScriptDataCompression(self) -> bool:
        """
        Get: ScriptDataCompression(self: ScriptingOptions) -> bool
        Set: ScriptDataCompression(self: ScriptingOptions) = value
        """
        ...

    @property
    def ScriptDrops(self) -> bool:
        """
        Get: ScriptDrops(self: ScriptingOptions) -> bool
        Set: ScriptDrops(self: ScriptingOptions) = value
        """
        ...

    @property
    def ScriptOwner(self) -> bool:
        """
        Get: ScriptOwner(self: ScriptingOptions) -> bool
        Set: ScriptOwner(self: ScriptingOptions) = value
        """
        ...

    @property
    def ScriptSchema(self) -> bool:
        """
        Get: ScriptSchema(self: ScriptingOptions) -> bool
        Set: ScriptSchema(self: ScriptingOptions) = value
        """
        ...

    @property
    def Statistics(self) -> bool:
        """
        Get: Statistics(self: ScriptingOptions) -> bool
        Set: Statistics(self: ScriptingOptions) = value
        """
        ...

    @property
    def TargetDatabaseEngineEdition(self) -> DatabaseEngineEdition:
        """
        Get: TargetDatabaseEngineEdition(self: ScriptingOptions) -> DatabaseEngineEdition
        Set: TargetDatabaseEngineEdition(self: ScriptingOptions) = value
        """
        ...

    @property
    def TargetDatabaseEngineType(self) -> DatabaseEngineType:
        """
        Get: TargetDatabaseEngineType(self: ScriptingOptions) -> DatabaseEngineType
        Set: TargetDatabaseEngineType(self: ScriptingOptions) = value
        """
        ...

    @property
    def TargetServerVersion(self): # -> SqlServerVersion
        """
        Get: TargetServerVersion(self: ScriptingOptions) -> SqlServerVersion
        Set: TargetServerVersion(self: ScriptingOptions) = value
        """
        ...

    @property
    def TimestampToBinary(self) -> bool:
        """
        Get: TimestampToBinary(self: ScriptingOptions) -> bool
        Set: TimestampToBinary(self: ScriptingOptions) = value
        """
        ...

    @property
    def ToFileOnly(self) -> bool:
        """
        Get: ToFileOnly(self: ScriptingOptions) -> bool
        Set: ToFileOnly(self: ScriptingOptions) = value
        """
        ...

    @property
    def Triggers(self) -> bool:
        """
        Get: Triggers(self: ScriptingOptions) -> bool
        Set: Triggers(self: ScriptingOptions) = value
        """
        ...

    @property
    def WithDependencies(self) -> bool:
        """
        Get: WithDependencies(self: ScriptingOptions) -> bool
        Set: WithDependencies(self: ScriptingOptions) = value
        """
        ...

    @property
    def XmlIndexes(self) -> bool:
        """
        Get: XmlIndexes(self: ScriptingOptions) -> bool
        Set: XmlIndexes(self: ScriptingOptions) = value
        """
        ...


    def Add(self, *__args) -> ScriptingOptions: # Not found arg types: {'*__args': 'ScriptOption'}
        """
        Add(self: ScriptingOptions, scriptOption: ScriptOption) -> ScriptingOptions
        Add(options: ScriptingOptions, scriptOption: ScriptOption) -> ScriptingOptions
        """
        ...

    @staticmethod
    def ConvertVersion(version:Version): # -> SqlServerVersion
        """ ConvertVersion(version: Version) -> SqlServerVersion """
        ...

    def Remove(self, scriptOption) -> ScriptingOptions: # Not found arg types: {'scriptOption': 'ScriptOption'}
        """ Remove(self: ScriptingOptions, scriptOption: ScriptOption) -> ScriptingOptions """
        ...

    def SetTargetDatabaseEngineType(self, databaseEngineType:DatabaseEngineType): # -> 
        """ SetTargetDatabaseEngineType(self: ScriptingOptions, databaseEngineType: DatabaseEngineType) """
        ...

    def SetTargetServerVersion(self, ver:ServerVersion): # -> 
        """ SetTargetServerVersion(self: ScriptingOptions, ver: ServerVersion) """
        ...

    @staticmethod
    def Subtract(options:ScriptingOptions, scriptOption) -> ScriptingOptions: # Not found arg types: {'scriptOption': 'ScriptOption'}
        """ Subtract(options: ScriptingOptions, scriptOption: ScriptOption) -> ScriptingOptions """
        ...

    def ToString(self) -> str:
        """ ToString(self: ScriptingOptions) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class ScriptOption: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AgentAlertJob(self) -> ScriptOption:
        """ Get: AgentAlertJob() -> ScriptOption """
        ...

    @property
    def AgentJobId(self) -> ScriptOption:
        """ Get: AgentJobId() -> ScriptOption """
        ...

    @property
    def AgentNotify(self) -> ScriptOption:
        """ Get: AgentNotify() -> ScriptOption """
        ...

    @property
    def AllowSystemObjects(self) -> ScriptOption:
        """ Get: AllowSystemObjects() -> ScriptOption """
        ...

    @property
    def AnsiFile(self) -> ScriptOption:
        """ Get: AnsiFile() -> ScriptOption """
        ...

    @property
    def AnsiPadding(self) -> ScriptOption:
        """ Get: AnsiPadding() -> ScriptOption """
        ...

    @property
    def AppendToFile(self) -> ScriptOption:
        """ Get: AppendToFile() -> ScriptOption """
        ...

    @property
    def Bindings(self) -> ScriptOption:
        """ Get: Bindings() -> ScriptOption """
        ...

    @property
    def ChangeTracking(self) -> ScriptOption:
        """ Get: ChangeTracking() -> ScriptOption """
        ...

    @property
    def ClusteredIndexes(self) -> ScriptOption:
        """ Get: ClusteredIndexes() -> ScriptOption """
        ...

    @property
    def ContinueScriptingOnError(self) -> ScriptOption:
        """ Get: ContinueScriptingOnError() -> ScriptOption """
        ...

    @property
    def ConvertUserDefinedDataTypesToBaseType(self) -> ScriptOption:
        """ Get: ConvertUserDefinedDataTypesToBaseType() -> ScriptOption """
        ...

    @property
    def DdlBodyOnly(self) -> ScriptOption:
        """ Get: DdlBodyOnly() -> ScriptOption """
        ...

    @property
    def DdlHeaderOnly(self) -> ScriptOption:
        """ Get: DdlHeaderOnly() -> ScriptOption """
        ...

    @property
    def Default(self) -> ScriptOption:
        """ Get: Default() -> ScriptOption """
        ...

    @property
    def DriAll(self) -> ScriptOption:
        """ Get: DriAll() -> ScriptOption """
        ...

    @property
    def DriAllConstraints(self) -> ScriptOption:
        """ Get: DriAllConstraints() -> ScriptOption """
        ...

    @property
    def DriAllKeys(self) -> ScriptOption:
        """ Get: DriAllKeys() -> ScriptOption """
        ...

    @property
    def DriChecks(self) -> ScriptOption:
        """ Get: DriChecks() -> ScriptOption """
        ...

    @property
    def DriClustered(self) -> ScriptOption:
        """ Get: DriClustered() -> ScriptOption """
        ...

    @property
    def DriDefaults(self) -> ScriptOption:
        """ Get: DriDefaults() -> ScriptOption """
        ...

    @property
    def DriForeignKeys(self) -> ScriptOption:
        """ Get: DriForeignKeys() -> ScriptOption """
        ...

    @property
    def DriIncludeSystemNames(self) -> ScriptOption:
        """ Get: DriIncludeSystemNames() -> ScriptOption """
        ...

    @property
    def DriIndexes(self) -> ScriptOption:
        """ Get: DriIndexes() -> ScriptOption """
        ...

    @property
    def DriNonClustered(self) -> ScriptOption:
        """ Get: DriNonClustered() -> ScriptOption """
        ...

    @property
    def DriPrimaryKey(self) -> ScriptOption:
        """ Get: DriPrimaryKey() -> ScriptOption """
        ...

    @property
    def DriUniqueKeys(self) -> ScriptOption:
        """ Get: DriUniqueKeys() -> ScriptOption """
        ...

    @property
    def DriWithNoCheck(self) -> ScriptOption:
        """ Get: DriWithNoCheck() -> ScriptOption """
        ...

    @property
    def EnforceScriptingOptions(self) -> ScriptOption:
        """ Get: EnforceScriptingOptions() -> ScriptOption """
        ...

    @property
    def ExtendedProperties(self) -> ScriptOption:
        """ Get: ExtendedProperties() -> ScriptOption """
        ...

    @property
    def FullTextCatalogs(self) -> ScriptOption:
        """ Get: FullTextCatalogs() -> ScriptOption """
        ...

    @property
    def FullTextIndexes(self) -> ScriptOption:
        """ Get: FullTextIndexes() -> ScriptOption """
        ...

    @property
    def FullTextStopLists(self) -> ScriptOption:
        """ Get: FullTextStopLists() -> ScriptOption """
        ...

    @property
    def IncludeDatabaseContext(self) -> ScriptOption:
        """ Get: IncludeDatabaseContext() -> ScriptOption """
        ...

    @property
    def IncludeDatabaseRoleMemberships(self) -> ScriptOption:
        """ Get: IncludeDatabaseRoleMemberships() -> ScriptOption """
        ...

    @property
    def IncludeFullTextCatalogRootPath(self) -> ScriptOption:
        """ Get: IncludeFullTextCatalogRootPath() -> ScriptOption """
        ...

    @property
    def IncludeHeaders(self) -> ScriptOption:
        """ Get: IncludeHeaders() -> ScriptOption """
        ...

    @property
    def IncludeIfNotExists(self) -> ScriptOption:
        """ Get: IncludeIfNotExists() -> ScriptOption """
        ...

    @property
    def Indexes(self) -> ScriptOption:
        """ Get: Indexes() -> ScriptOption """
        ...

    @property
    def LoginSid(self) -> ScriptOption:
        """ Get: LoginSid() -> ScriptOption """
        ...

    @property
    def NoAssemblies(self) -> ScriptOption:
        """ Get: NoAssemblies() -> ScriptOption """
        ...

    @property
    def NoCollation(self) -> ScriptOption:
        """ Get: NoCollation() -> ScriptOption """
        ...

    @property
    def NoCommandTerminator(self) -> ScriptOption:
        """ Get: NoCommandTerminator() -> ScriptOption """
        ...

    @property
    def NoExecuteAs(self) -> ScriptOption:
        """ Get: NoExecuteAs() -> ScriptOption """
        ...

    @property
    def NoFileGroup(self) -> ScriptOption:
        """ Get: NoFileGroup() -> ScriptOption """
        ...

    @property
    def NoFileStream(self) -> ScriptOption:
        """ Get: NoFileStream() -> ScriptOption """
        ...

    @property
    def NoFileStreamColumn(self) -> ScriptOption:
        """ Get: NoFileStreamColumn() -> ScriptOption """
        ...

    @property
    def NoIdentities(self) -> ScriptOption:
        """ Get: NoIdentities() -> ScriptOption """
        ...

    @property
    def NoIndexPartitioningSchemes(self) -> ScriptOption:
        """ Get: NoIndexPartitioningSchemes() -> ScriptOption """
        ...

    @property
    def NoMailProfileAccounts(self) -> ScriptOption:
        """ Get: NoMailProfileAccounts() -> ScriptOption """
        ...

    @property
    def NoMailProfilePrincipals(self) -> ScriptOption:
        """ Get: NoMailProfilePrincipals() -> ScriptOption """
        ...

    @property
    def NonClusteredIndexes(self) -> ScriptOption:
        """ Get: NonClusteredIndexes() -> ScriptOption """
        ...

    @property
    def NoTablePartitioningSchemes(self) -> ScriptOption:
        """ Get: NoTablePartitioningSchemes() -> ScriptOption """
        ...

    @property
    def NoVardecimal(self) -> ScriptOption:
        """ Get: NoVardecimal() -> ScriptOption """
        ...

    @property
    def NoViewColumns(self) -> ScriptOption:
        """ Get: NoViewColumns() -> ScriptOption """
        ...

    @property
    def NoXmlNamespaces(self) -> ScriptOption:
        """ Get: NoXmlNamespaces() -> ScriptOption """
        ...

    @property
    def OptimizerData(self) -> ScriptOption:
        """ Get: OptimizerData() -> ScriptOption """
        ...

    @property
    def Permissions(self) -> ScriptOption:
        """ Get: Permissions() -> ScriptOption """
        ...

    @property
    def PrimaryObject(self) -> ScriptOption:
        """ Get: PrimaryObject() -> ScriptOption """
        ...

    @property
    def SchemaQualify(self) -> ScriptOption:
        """ Get: SchemaQualify() -> ScriptOption """
        ...

    @property
    def SchemaQualifyForeignKeysReferences(self) -> ScriptOption:
        """ Get: SchemaQualifyForeignKeysReferences() -> ScriptOption """
        ...

    @property
    def ScriptBatchTerminator(self) -> ScriptOption:
        """ Get: ScriptBatchTerminator() -> ScriptOption """
        ...

    @property
    def ScriptData(self) -> ScriptOption:
        """ Get: ScriptData() -> ScriptOption """
        ...

    @property
    def ScriptDataCompression(self) -> ScriptOption:
        """ Get: ScriptDataCompression() -> ScriptOption """
        ...

    @property
    def ScriptOwner(self) -> ScriptOption:
        """ Get: ScriptOwner() -> ScriptOption """
        ...

    @property
    def ScriptSchema(self) -> ScriptOption:
        """ Get: ScriptSchema() -> ScriptOption """
        ...

    @property
    def Statistics(self) -> ScriptOption:
        """ Get: Statistics() -> ScriptOption """
        ...

    @property
    def TimestampToBinary(self) -> ScriptOption:
        """ Get: TimestampToBinary() -> ScriptOption """
        ...

    @property
    def ToFileOnly(self) -> ScriptOption:
        """ Get: ToFileOnly() -> ScriptOption """
        ...

    @property
    def Triggers(self) -> ScriptOption:
        """ Get: Triggers() -> ScriptOption """
        ...

    @property
    def WithDependencies(self) -> ScriptOption:
        """ Get: WithDependencies() -> ScriptOption """
        ...

    @property
    def XmlIndexes(self) -> ScriptOption:
        """ Get: XmlIndexes() -> ScriptOption """
        ...


    @staticmethod
    def Add(leftOption:ScriptOption, rightOption:ScriptOption) -> ScriptingOptions:
        """ Add(leftOption: ScriptOption, rightOption: ScriptOption) -> ScriptingOptions """
        ...

    @staticmethod
    def BitwiseOr(leftOption:ScriptOption, rightOption:ScriptOption) -> ScriptingOptions:
        """ BitwiseOr(leftOption: ScriptOption, rightOption: ScriptOption) -> ScriptingOptions """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: ScriptOption, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: ScriptOption) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: ScriptOption) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(leftOption: ScriptOption, rightOption: ScriptOption) -> ScriptingOptions """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(leftOption: ScriptOption, rightOption: ScriptOption) -> ScriptingOptions """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(leftOption: ScriptOption, rightOption: ScriptOption) -> ScriptingOptions """
        ...



class ScriptWriterException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    ScriptWriterException()
    ScriptWriterException(message: str)
    ScriptWriterException(message: str, innerException: Exception)
    """
    SerializeObjectState = ...


class SearchProperty(ScriptNameObjectBase, IDroppable, ICreatable, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    SearchProperty()
    SearchProperty(searchPropertyList: SearchPropertyList, name: str)
    SearchProperty(parent: SearchPropertyList, name: str, propertySetGuid: str, intID: int, description: str)
    """
    @property
    def Description(self) -> str:
        """
        Get: Description(self: SearchProperty) -> str
        Set: Description(self: SearchProperty) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: SearchProperty) -> int """
        ...

    @property
    def IntID(self) -> int:
        """
        Get: IntID(self: SearchProperty) -> int
        Set: IntID(self: SearchProperty) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: SearchProperty) -> str
        Set: Name(self: SearchProperty) = value
        """
        ...

    @property
    def Parent(self): # -> SearchPropertyList
        """
        Get: Parent(self: SearchProperty) -> SearchPropertyList
        Set: Parent(self: SearchProperty) = value
        """
        ...

    @property
    def PropertySetGuid(self) -> Guid:
        """
        Get: PropertySetGuid(self: SearchProperty) -> Guid
        Set: PropertySetGuid(self: SearchProperty) = value
        """
        ...


    def __new__(cls, *__args) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, searchPropertyList: SearchPropertyList, name: str)
        __new__(cls: type, parent: SearchPropertyList, name: str, propertySetGuid: str, intID: int, description: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SearchPropertyCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self): # -> SearchPropertyList
        """ Get: Parent(self: SearchPropertyCollection) -> SearchPropertyList """
        ...


    def Add(self, searchProperty:SearchProperty): # -> 
        """ Add(self: SearchPropertyCollection, searchProperty: SearchProperty) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SearchPropertyCollection, array: Array[SearchProperty], index: int) """
        ...

    def ItemById(self, id:int) -> SearchProperty:
        """ ItemById(self: SearchPropertyCollection, id: int) -> SearchProperty """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SearchPropertyList(IDroppable, IAlterable, ICreatable, IScriptable, IObjectPermission, ScriptNameObjectBase, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    SearchPropertyList()
    SearchPropertyList(database: Database, name: str)
    """
    @property
    def DateCreated(self) -> DateTime:
        """ Get: DateCreated(self: SearchPropertyList) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: SearchPropertyList) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: SearchPropertyList) -> int """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: SearchPropertyList) -> str
        Set: Name(self: SearchPropertyList) = value
        """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: SearchPropertyList) -> str
        Set: Owner(self: SearchPropertyList) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: SearchPropertyList) -> Database
        Set: Parent(self: SearchPropertyList) = value
        """
        ...

    @property
    def SearchProperties(self) -> SearchPropertyCollection:
        """ Get: SearchProperties(self: SearchPropertyList) -> SearchPropertyCollection """
        ...


    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SearchPropertyListCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: SearchPropertyListCollection) -> Database """
        ...


    def Add(self, searchPropertyList:SearchPropertyList): # -> 
        """ Add(self: SearchPropertyListCollection, searchPropertyList: SearchPropertyList) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SearchPropertyListCollection, array: Array[SearchPropertyList], index: int) """
        ...

    def ItemById(self, id:int) -> SearchPropertyList:
        """ ItemById(self: SearchPropertyListCollection, id: int) -> SearchPropertyList """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SecondaryXmlIndexType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SecondaryXmlIndexType, values: None (0), Path (1), Property (3), Value (2) """
    Path: SecondaryXmlIndexType = ...
    Property: SecondaryXmlIndexType = ...
    Value: SecondaryXmlIndexType = ...
    value__ = ...


class SecurityPolicy(IDroppable, IAlterable, ICreatable, IScriptable, IObjectPermission, IDropIfExists, ScriptSchemaObjectBase, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    SecurityPolicy()
    SecurityPolicy(database: Database, name: str)
    SecurityPolicy(database: Database, name: str, schema: str)
    SecurityPolicy(parent: Database, name: str, schema: str, notForReplication: bool, isEnabled: bool)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: SecurityPolicy) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: SecurityPolicy) -> DateTime """
        ...

    @property
    def Enabled(self) -> bool:
        """
        Get: Enabled(self: SecurityPolicy) -> bool
        Set: Enabled(self: SecurityPolicy) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: SecurityPolicy) -> int """
        ...

    @property
    def IsSchemaBound(self) -> bool:
        """
        Get: IsSchemaBound(self: SecurityPolicy) -> bool
        Set: IsSchemaBound(self: SecurityPolicy) = value
        """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: SecurityPolicy) -> bool """
        ...

    @property
    def NotForReplication(self) -> bool:
        """
        Get: NotForReplication(self: SecurityPolicy) -> bool
        Set: NotForReplication(self: SecurityPolicy) = value
        """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: SecurityPolicy) -> str
        Set: Owner(self: SecurityPolicy) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: SecurityPolicy) -> Database
        Set: Parent(self: SecurityPolicy) = value
        """
        ...

    @property
    def SecurityPredicates(self): # -> SecurityPredicateCollection
        """ Get: SecurityPredicates(self: SecurityPolicy) -> SecurityPredicateCollection """
        ...


    def __new__(cls, *__args) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        __new__(cls: type, parent: Database, name: str, schema: str, notForReplication: bool, isEnabled: bool)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SecurityPolicyCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: SecurityPolicyCollection) -> Database """
        ...


    def Add(self, securityPolicy:SecurityPolicy): # -> 
        """ Add(self: SecurityPolicyCollection, securityPolicy: SecurityPolicy) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SecurityPolicyCollection, array: Array[SecurityPolicy], index: int) """
        ...

    def ItemById(self, id:int) -> SecurityPolicy:
        """ ItemById(self: SecurityPolicyCollection, id: int) -> SecurityPolicy """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SecurityPredicate(IDroppable, IAlterable, ICreatable, SqlSmoObject, IDropIfExists, IMarkForDrop): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    SecurityPredicate(parent: SecurityPolicy, table: Table, predicateDefinition: str)
    SecurityPredicate(parent: SecurityPolicy, targetObjectSchema: str, targetObjectName: str, targetObjectId: int, predicateDefinition: str)
    """
    @property
    def Parent(self) -> SecurityPolicy:
        """ Get: Parent(self: SecurityPredicate) -> SecurityPolicy """
        ...

    @property
    def PredicateDefinition(self) -> str:
        """
        Get: PredicateDefinition(self: SecurityPredicate) -> str
        Set: PredicateDefinition(self: SecurityPredicate) = value
        """
        ...

    @property
    def PredicateOperation(self): # -> SecurityPredicateOperation
        """
        Get: PredicateOperation(self: SecurityPredicate) -> SecurityPredicateOperation
        Set: PredicateOperation(self: SecurityPredicate) = value
        """
        ...

    @property
    def PredicateType(self): # -> SecurityPredicateType
        """
        Get: PredicateType(self: SecurityPredicate) -> SecurityPredicateType
        Set: PredicateType(self: SecurityPredicate) = value
        """
        ...

    @property
    def SecurityPredicateID(self) -> int:
        """
        Get: SecurityPredicateID(self: SecurityPredicate) -> int
        Set: SecurityPredicateID(self: SecurityPredicate) = value
        """
        ...

    @property
    def TargetObjectID(self) -> int:
        """
        Get: TargetObjectID(self: SecurityPredicate) -> int
        Set: TargetObjectID(self: SecurityPredicate) = value
        """
        ...

    @property
    def TargetObjectName(self) -> str:
        """
        Get: TargetObjectName(self: SecurityPredicate) -> str
        Set: TargetObjectName(self: SecurityPredicate) = value
        """
        ...

    @property
    def TargetObjectSchema(self) -> str:
        """
        Get: TargetObjectSchema(self: SecurityPredicate) -> str
        Set: TargetObjectSchema(self: SecurityPredicate) = value
        """
        ...


    def __new__(cls, parent, *__args) -> Self:
        """
        __new__(cls: type, parent: SecurityPolicy, table: Table, predicateDefinition: str)
        __new__(cls: type, parent: SecurityPolicy, targetObjectSchema: str, targetObjectName: str, targetObjectId: int, predicateDefinition: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SecurityPredicateCollectionBase(SortedListCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Contains(self, securityPredicateID:int) -> bool:
        """ Contains(self: SecurityPredicateCollectionBase, securityPredicateID: int) -> bool """
        ...

    def GetItemByTargetObjectID(self, targetObjectID:int, predicateType = ..., predicateOperation = ...) -> SecurityPredicate: # Not found arg types: {'predicateOperation': 'SecurityPredicateOperation', 'predicateType': 'SecurityPredicateType'}
        """
        GetItemByTargetObjectID(self: SecurityPredicateCollectionBase, targetObjectID: int) -> SecurityPredicate
        GetItemByTargetObjectID(self: SecurityPredicateCollectionBase, targetObjectID: int, predicateType: SecurityPredicateType, predicateOperation: SecurityPredicateOperation) -> SecurityPredicate
        """
        ...

    initialized = ...


class SecurityPredicateCollection(SecurityPredicateCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> SecurityPolicy:
        """ Get: Parent(self: SecurityPredicateCollection) -> SecurityPolicy """
        ...


    def Add(self, securityPredicate:SecurityPredicate): # -> 
        """ Add(self: SecurityPredicateCollection, securityPredicate: SecurityPredicate) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SecurityPredicateCollection, array: Array[SecurityPredicate], index: int) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SecurityPredicateOperation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SecurityPredicateOperation, values: AfterInsert (1), AfterUpdate (2), All (0), BeforeDelete (4), BeforeUpdate (3) """
    AfterInsert: SecurityPredicateOperation = ...
    AfterUpdate: SecurityPredicateOperation = ...
    All: SecurityPredicateOperation = ...
    BeforeDelete: SecurityPredicateOperation = ...
    BeforeUpdate: SecurityPredicateOperation = ...
    value__ = ...


class SecurityPredicateOperationConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ SecurityPredicateOperationConverter() """
    pass

class SecurityPredicateType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SecurityPredicateType, values: Block (1), Filter (0) """
    Block: SecurityPredicateType = ...
    Filter: SecurityPredicateType = ...
    value__ = ...


class SecurityPredicateTypeConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ SecurityPredicateTypeConverter() """
    pass

class Sequence(IDroppable, IAlterable, ICreatable, IScriptable, IRenamable, IObjectPermission, IDropIfExists, ScriptSchemaObjectBase, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Sequence()
    Sequence(database: Database, name: str)
    Sequence(database: Database, name: str, schema: str)
    """
    @property
    def CacheSize(self) -> int:
        """
        Get: CacheSize(self: Sequence) -> int
        Set: CacheSize(self: Sequence) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: Sequence) -> DateTime """
        ...

    @property
    def CurrentValue(self) -> object:
        """ Get: CurrentValue(self: Sequence) -> object """
        ...

    @property
    def DataType(self) -> DataType:
        """
        Get: DataType(self: Sequence) -> DataType
        Set: DataType(self: Sequence) = value
        """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: Sequence) -> DateTime """
        ...

    @property
    def Events(self): # -> SequenceEvents
        """ Get: Events(self: Sequence) -> SequenceEvents """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Sequence) -> int """
        ...

    @property
    def IncrementValue(self) -> object:
        """
        Get: IncrementValue(self: Sequence) -> object
        Set: IncrementValue(self: Sequence) = value
        """
        ...

    @property
    def IsCycleEnabled(self) -> bool:
        """
        Get: IsCycleEnabled(self: Sequence) -> bool
        Set: IsCycleEnabled(self: Sequence) = value
        """
        ...

    @property
    def IsExhausted(self) -> bool:
        """ Get: IsExhausted(self: Sequence) -> bool """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: Sequence) -> bool """
        ...

    @property
    def MaxValue(self) -> object:
        """
        Get: MaxValue(self: Sequence) -> object
        Set: MaxValue(self: Sequence) = value
        """
        ...

    @property
    def MinValue(self) -> object:
        """
        Get: MinValue(self: Sequence) -> object
        Set: MinValue(self: Sequence) = value
        """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: Sequence) -> str
        Set: Owner(self: Sequence) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: Sequence) -> Database
        Set: Parent(self: Sequence) = value
        """
        ...

    @property
    def SequenceCacheType(self): # -> SequenceCacheType
        """
        Get: SequenceCacheType(self: Sequence) -> SequenceCacheType
        Set: SequenceCacheType(self: Sequence) = value
        """
        ...

    @property
    def StartValue(self) -> object:
        """
        Get: StartValue(self: Sequence) -> object
        Set: StartValue(self: Sequence) = value
        """
        ...


    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SequenceCacheType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SequenceCacheType, values: CacheWithSize (2), DefaultCache (0), NoCache (1) """
    CacheWithSize: SequenceCacheType = ...
    DefaultCache: SequenceCacheType = ...
    NoCache: SequenceCacheType = ...
    value__ = ...


class SequenceCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: SequenceCollection) -> Database """
        ...


    def Add(self, sequence:Sequence): # -> 
        """ Add(self: SequenceCollection, sequence: Sequence) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SequenceCollection, array: Array[Sequence], index: int) """
        ...

    def ItemById(self, id:int) -> Sequence:
        """ ItemById(self: SequenceCollection, id: int) -> Sequence """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SequenceEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self) -> ObjectEventSet:
        """ GetEventSelection(self: SequenceEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: SequenceEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: SequenceEvents) """
        ...

    def SubscribeToEvents(self, events:ObjectEventSet, eventHandler = ...): # ->  # Not found arg types: {'eventHandler': 'ServerEventHandler'}
        """ SubscribeToEvents(self: SequenceEvents, events: ObjectEventSet)SubscribeToEvents(self: SequenceEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: SequenceEvents) """
        ...

    def UnsubscribeFromEvents(self, events:ObjectEventSet): # -> 
        """ UnsubscribeFromEvents(self: SequenceEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class SequenceExtender(SmoObjectExtender, ISfcValidate): # skipped bases: <type 'INotifyPropertyChanged'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcPropertyProvider'>, <type 'object'>
    """
    SequenceExtender()
    SequenceExtender(sequence: Sequence)
    """
    @property
    def ConnectionContext(self) -> ServerConnection:
        """ Get: ConnectionContext(self: SequenceExtender) -> ServerConnection """
        ...

    @property
    def CurrentObject(self) -> SqlSmoObject:
        """ Get: CurrentObject(self: SequenceExtender) -> SqlSmoObject """
        ...

    @property
    def DatabaseName(self) -> str:
        """ Get: DatabaseName(self: SequenceExtender) -> str """
        ...

    @property
    def DatatypeNames(self) -> StringCollection:
        """ Get: DatatypeNames(self: SequenceExtender) -> StringCollection """
        ...

    @property
    def DefaultPrecision(self) -> int:
        """ Get: DefaultPrecision(self: SequenceExtender) -> int """
        ...

    @property
    def ExtendedPropertyPageCommitCellEdits(self) -> object:
        """
        Get: ExtendedPropertyPageCommitCellEdits(self: SequenceExtender) -> object
        Set: ExtendedPropertyPageCommitCellEdits(self: SequenceExtender) = value
        """
        ...

    @property
    def ExtendedPropertyPageDataContainer(self) -> object:
        """
        Get: ExtendedPropertyPageDataContainer(self: SequenceExtender) -> object
        Set: ExtendedPropertyPageDataContainer(self: SequenceExtender) = value
        """
        ...

    @property
    def ExtendedPropertyPageIsDirty(self) -> bool:
        """
        Get: ExtendedPropertyPageIsDirty(self: SequenceExtender) -> bool
        Set: ExtendedPropertyPageIsDirty(self: SequenceExtender) = value
        """
        ...

    @property
    def ExtendedPropertyPageOnRunNow(self) -> object:
        """
        Get: ExtendedPropertyPageOnRunNow(self: SequenceExtender) -> object
        Set: ExtendedPropertyPageOnRunNow(self: SequenceExtender) = value
        """
        ...

    @property
    def HasMaximumValue(self) -> bool:
        """
        Get: HasMaximumValue(self: SequenceExtender) -> bool
        Set: HasMaximumValue(self: SequenceExtender) = value
        """
        ...

    @property
    def HasMinimumValue(self) -> bool:
        """
        Get: HasMinimumValue(self: SequenceExtender) -> bool
        Set: HasMinimumValue(self: SequenceExtender) = value
        """
        ...

    @property
    def HasRestartValue(self) -> bool:
        """
        Get: HasRestartValue(self: SequenceExtender) -> bool
        Set: HasRestartValue(self: SequenceExtender) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: SequenceExtender) -> str
        Set: Name(self: SequenceExtender) = value
        """
        ...

    @property
    def OriginalStartValue(self) -> object:
        """
        Get: OriginalStartValue(self: SequenceExtender) -> object
        Set: OriginalStartValue(self: SequenceExtender) = value
        """
        ...

    @property
    def PermissionPageDataContainer(self) -> object:
        """
        Get: PermissionPageDataContainer(self: SequenceExtender) -> object
        Set: PermissionPageDataContainer(self: SequenceExtender) = value
        """
        ...

    @property
    def PermissionPageOnRunNow(self) -> object:
        """
        Get: PermissionPageOnRunNow(self: SequenceExtender) -> object
        Set: PermissionPageOnRunNow(self: SequenceExtender) = value
        """
        ...

    @property
    def Schema(self) -> str:
        """
        Get: Schema(self: SequenceExtender) -> str
        Set: Schema(self: SequenceExtender) = value
        """
        ...

    @property
    def SelectedDatatypeName(self) -> str:
        """
        Get: SelectedDatatypeName(self: SequenceExtender) -> str
        Set: SelectedDatatypeName(self: SequenceExtender) = value
        """
        ...

    @property
    def SelectedNumericPrecision(self) -> str:
        """
        Get: SelectedNumericPrecision(self: SequenceExtender) -> str
        Set: SelectedNumericPrecision(self: SequenceExtender) = value
        """
        ...

    @property
    def SequenceDatatypeName(self) -> str:
        """ Get: SequenceDatatypeName(self: SequenceExtender) -> str """
        ...

    @property
    def SequenceNumericPrecision(self) -> str:
        """ Get: SequenceNumericPrecision(self: SequenceExtender) -> str """
        ...

    @property
    def State(self): # -> SqlSmoState
        """ Get: State(self: SequenceExtender) -> SqlSmoState """
        ...



class Server(IAlienRoot, IAlterable, IScriptable, SqlSmoObject, ISfcSupportsDesignMode, IServerSettings, IServerInformation, ISfcDomainLite): # skipped bases: <type 'ISfcHasConnection'>, <type 'IDmfFacet'>, <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Server(name: str)
    Server()
    Server(serverConnection: ServerConnection)
    """
    @property
    def ActiveDirectory(self): # -> ServerActiveDirectory
        """ Get: ActiveDirectory(self: Server) -> ServerActiveDirectory """
        ...

    @property
    def AffinityInfo(self) -> AffinityInfo:
        """ Get: AffinityInfo(self: Server) -> AffinityInfo """
        ...

    @property
    def Audits(self) -> AuditCollection:
        """ Get: Audits(self: Server) -> AuditCollection """
        ...

    @property
    def AvailabilityGroups(self) -> AvailabilityGroupCollection:
        """ Get: AvailabilityGroups(self: Server) -> AvailabilityGroupCollection """
        ...

    @property
    def BackupDevices(self) -> BackupDeviceCollection:
        """ Get: BackupDevices(self: Server) -> BackupDeviceCollection """
        ...

    @property
    def BrowserServiceAccount(self) -> str:
        """ Get: BrowserServiceAccount(self: Server) -> str """
        ...

    @property
    def BrowserStartMode(self) -> ServiceStartMode:
        """ Get: BrowserStartMode(self: Server) -> ServiceStartMode """
        ...

    @property
    def BuildClrVersion(self) -> Version:
        """ Get: BuildClrVersion(self: Server) -> Version """
        ...

    @property
    def ClusterName(self) -> str:
        """ Get: ClusterName(self: Server) -> str """
        ...

    @property
    def ClusterQuorumState(self) -> ClusterQuorumState:
        """ Get: ClusterQuorumState(self: Server) -> ClusterQuorumState """
        ...

    @property
    def ClusterQuorumType(self) -> ClusterQuorumType:
        """ Get: ClusterQuorumType(self: Server) -> ClusterQuorumType """
        ...

    @property
    def Configuration(self) -> Configuration:
        """ Get: Configuration(self: Server) -> Configuration """
        ...

    @property
    def Credentials(self) -> CredentialCollection:
        """ Get: Credentials(self: Server) -> CredentialCollection """
        ...

    @property
    def CryptographicProviders(self) -> CryptographicProviderCollection:
        """ Get: CryptographicProviders(self: Server) -> CryptographicProviderCollection """
        ...

    @property
    def Databases(self) -> DatabaseCollection:
        """ Get: Databases(self: Server) -> DatabaseCollection """
        ...

    @property
    def DefaultAvailabilityGroupClusterType(self) -> AvailabilityGroupClusterType:
        """ Get: DefaultAvailabilityGroupClusterType(self: Server) -> AvailabilityGroupClusterType """
        ...

    @property
    def DefaultTextMode(self) -> bool:
        """
        Get: DefaultTextMode(self: Server) -> bool
        Set: DefaultTextMode(self: Server) = value
        """
        ...

    @property
    def Endpoints(self) -> EndpointCollection:
        """ Get: Endpoints(self: Server) -> EndpointCollection """
        ...

    @property
    def Events(self): # -> ServerEvents
        """ Get: Events(self: Server) -> ServerEvents """
        ...

    @property
    def FilestreamLevel(self) -> FileStreamEffectiveLevel:
        """ Get: FilestreamLevel(self: Server) -> FileStreamEffectiveLevel """
        ...

    @property
    def FilestreamShareName(self) -> str:
        """ Get: FilestreamShareName(self: Server) -> str """
        ...

    @property
    def FullTextService(self) -> FullTextService:
        """ Get: FullTextService(self: Server) -> FullTextService """
        ...

    @property
    def HadrManagerStatus(self) -> HadrManagerStatus:
        """ Get: HadrManagerStatus(self: Server) -> HadrManagerStatus """
        ...

    @property
    def HostDistribution(self) -> str:
        """ Get: HostDistribution(self: Server) -> str """
        ...

    @property
    def HostPlatform(self) -> str:
        """ Get: HostPlatform(self: Server) -> str """
        ...

    @property
    def HostRelease(self) -> str:
        """ Get: HostRelease(self: Server) -> str """
        ...

    @property
    def HostServicePackLevel(self) -> str:
        """ Get: HostServicePackLevel(self: Server) -> str """
        ...

    @property
    def HostSku(self) -> int:
        """ Get: HostSku(self: Server) -> int """
        ...

    @property
    def Information(self) -> Information:
        """ Get: Information(self: Server) -> Information """
        ...

    @property
    def InstallDataDirectory(self) -> str:
        """ Get: InstallDataDirectory(self: Server) -> str """
        ...

    @property
    def InstallSharedDirectory(self) -> str:
        """ Get: InstallSharedDirectory(self: Server) -> str """
        ...

    @property
    def InstanceName(self) -> str:
        """ Get: InstanceName(self: Server) -> str """
        ...

    @property
    def IsMemberOfWsfcCluster(self) -> bool:
        """ Get: IsMemberOfWsfcCluster(self: Server) -> bool """
        ...

    @property
    def JobServer(self): # -> JobServer
        """ Get: JobServer(self: Server) -> JobServer """
        ...

    @property
    def Languages(self) -> LanguageCollection:
        """ Get: Languages(self: Server) -> LanguageCollection """
        ...

    @property
    def LinkedServers(self) -> LinkedServerCollection:
        """ Get: LinkedServers(self: Server) -> LinkedServerCollection """
        ...

    @property
    def Logins(self) -> LoginCollection:
        """ Get: Logins(self: Server) -> LoginCollection """
        ...

    @property
    def Mail(self) -> SqlMail:
        """ Get: Mail(self: Server) -> SqlMail """
        ...

    @property
    def NamedPipesEnabled(self) -> bool:
        """ Get: NamedPipesEnabled(self: Server) -> bool """
        ...

    @property
    def OleDbProviderSettings(self) -> OleDbProviderSettingsCollection:
        """ Get: OleDbProviderSettings(self: Server) -> OleDbProviderSettingsCollection """
        ...

    @property
    def PhysicalMemoryUsageInKB(self) -> Int64:
        """ Get: PhysicalMemoryUsageInKB(self: Server) -> Int64 """
        ...

    @property
    def ProcessorUsage(self) -> int:
        """ Get: ProcessorUsage(self: Server) -> int """
        ...

    @property
    def ProxyAccount(self): # -> ServerProxyAccount
        """ Get: ProxyAccount(self: Server) -> ServerProxyAccount """
        ...

    @property
    def ResourceGovernor(self) -> ResourceGovernor:
        """ Get: ResourceGovernor(self: Server) -> ResourceGovernor """
        ...

    @property
    def ResourceVersion(self) -> Version:
        """ Get: ResourceVersion(self: Server) -> Version """
        ...

    @property
    def Roles(self): # -> ServerRoleCollection
        """ Get: Roles(self: Server) -> ServerRoleCollection """
        ...

    @property
    def ServerAuditSpecifications(self): # -> ServerAuditSpecificationCollection
        """ Get: ServerAuditSpecifications(self: Server) -> ServerAuditSpecificationCollection """
        ...

    @property
    def ServerType(self) -> DatabaseEngineType:
        """ Get: ServerType(self: Server) -> DatabaseEngineType """
        ...

    @property
    def ServiceAccount(self) -> str:
        """ Get: ServiceAccount(self: Server) -> str """
        ...

    @property
    def ServiceInstanceId(self) -> str:
        """ Get: ServiceInstanceId(self: Server) -> str """
        ...

    @property
    def ServiceMasterKey(self): # -> ServiceMasterKey
        """ Get: ServiceMasterKey(self: Server) -> ServiceMasterKey """
        ...

    @property
    def ServiceName(self) -> str:
        """ Get: ServiceName(self: Server) -> str """
        ...

    @property
    def ServiceStartMode(self) -> ServiceStartMode:
        """ Get: ServiceStartMode(self: Server) -> ServiceStartMode """
        ...

    @property
    def Settings(self): # -> Settings
        """ Get: Settings(self: Server) -> Settings """
        ...

    @property
    def SmartAdmin(self): # -> SmartAdmin
        """ Get: SmartAdmin(self: Server) -> SmartAdmin """
        ...

    @property
    def SqlDomainGroup(self) -> str:
        """ Get: SqlDomainGroup(self: Server) -> str """
        ...

    @property
    def Status(self): # -> ServerStatus
        """ Get: Status(self: Server) -> ServerStatus """
        ...

    @property
    def SupportedAvailabilityGroupClusterTypes(self) -> Array:
        """ Get: SupportedAvailabilityGroupClusterTypes(self: Server) -> Array[AvailabilityGroupClusterType] """
        ...

    @property
    def SystemDataTypes(self): # -> SystemDataTypeCollection
        """ Get: SystemDataTypes(self: Server) -> SystemDataTypeCollection """
        ...

    @property
    def SystemMessages(self): # -> SystemMessageCollection
        """ Get: SystemMessages(self: Server) -> SystemMessageCollection """
        ...

    @property
    def TcpEnabled(self) -> bool:
        """ Get: TcpEnabled(self: Server) -> bool """
        ...

    @property
    def Triggers(self) -> ServerDdlTriggerCollection:
        """ Get: Triggers(self: Server) -> ServerDdlTriggerCollection """
        ...

    @property
    def UserDefinedMessages(self): # -> UserDefinedMessageCollection
        """ Get: UserDefinedMessages(self: Server) -> UserDefinedMessageCollection """
        ...

    @property
    def UserOptions(self): # -> UserOptions
        """ Get: UserOptions(self: Server) -> UserOptions """
        ...

    @property
    def Version(self) -> Version:
        """ Get: Version(self: Server) -> Version """
        ...


    def AttachDatabase(self, name:str, files:StringCollection, *__args:str): # -> 
        """ AttachDatabase(self: Server, name: str, files: StringCollection, owner: str)AttachDatabase(self: Server, name: str, files: StringCollection)AttachDatabase(self: Server, name: str, files: StringCollection, attachOptions: AttachOptions)AttachDatabase(self: Server, name: str, files: StringCollection, owner: str, attachOptions: AttachOptions) """
        ...

    def CompareUrn(self, urn1:Urn, urn2:Urn) -> int:
        """ CompareUrn(self: Server, urn1: Urn, urn2: Urn) -> int """
        ...

    def DeleteBackupHistory(self, *__args:DateTime): # -> 
        """ DeleteBackupHistory(self: Server, oldestDate: DateTime)DeleteBackupHistory(self: Server, mediaSetId: int)DeleteBackupHistory(self: Server, database: str) """
        ...

    def Deny(self, permission, *__args:Array): # ->  # Not found arg types: {'permission': 'ServerPermissionSet'}
        """ Deny(self: Server, permission: ServerPermissionSet, granteeNames: Array[str])Deny(self: Server, permission: ServerPermissionSet, granteeNames: Array[str], cascade: bool)Deny(self: Server, permission: ServerPermissionSet, granteeName: str)Deny(self: Server, permission: ServerPermissionSet, granteeName: str, cascade: bool) """
        ...

    def DetachDatabase(self, databaseName:str, updateStatistics:bool, removeFulltextIndexFile:bool = ...): # -> 
        """ DetachDatabase(self: Server, databaseName: str, updateStatistics: bool)DetachDatabase(self: Server, databaseName: str, updateStatistics: bool, removeFulltextIndexFile: bool) """
        ...

    def DetachedDatabaseInfo(self, mdfName:str) -> DataTable:
        """ DetachedDatabaseInfo(self: Server, mdfName: str) -> DataTable """
        ...

    def EnumActiveCurrentSessionTraceFlags(self) -> DataTable:
        """ EnumActiveCurrentSessionTraceFlags(self: Server) -> DataTable """
        ...

    def EnumActiveGlobalTraceFlags(self) -> DataTable:
        """ EnumActiveGlobalTraceFlags(self: Server) -> DataTable """
        ...

    def EnumAvailableMedia(self, media:MediaTypes = ...) -> DataTable:
        """
        EnumAvailableMedia(self: Server) -> DataTable
        EnumAvailableMedia(self: Server, media: MediaTypes) -> DataTable
        """
        ...

    def EnumClusterMembersState(self) -> DataTable:
        """ EnumClusterMembersState(self: Server) -> DataTable """
        ...

    def EnumClusterSubnets(self) -> DataTable:
        """ EnumClusterSubnets(self: Server) -> DataTable """
        ...

    def EnumCollations(self) -> DataTable:
        """ EnumCollations(self: Server) -> DataTable """
        ...

    def EnumDatabaseMirrorWitnessRoles(self, database:str = ...) -> DataTable:
        """
        EnumDatabaseMirrorWitnessRoles(self: Server) -> DataTable
        EnumDatabaseMirrorWitnessRoles(self: Server, database: str) -> DataTable
        """
        ...

    def EnumDetachedDatabaseFiles(self, mdfName:str) -> StringCollection:
        """ EnumDetachedDatabaseFiles(self: Server, mdfName: str) -> StringCollection """
        ...

    def EnumDetachedLogFiles(self, mdfName:str) -> StringCollection:
        """ EnumDetachedLogFiles(self: Server, mdfName: str) -> StringCollection """
        ...

    def EnumDirectories(self, path:str) -> DataTable:
        """ EnumDirectories(self: Server, path: str) -> DataTable """
        ...

    def EnumErrorLogs(self) -> DataTable:
        """ EnumErrorLogs(self: Server) -> DataTable """
        ...

    def EnumLocks(self, processId:int = ...) -> DataTable:
        """
        EnumLocks(self: Server) -> DataTable
        EnumLocks(self: Server, processId: int) -> DataTable
        """
        ...

    def EnumMembers(self, roleType:RoleTypes) -> StringCollection:
        """ EnumMembers(self: Server, roleType: RoleTypes) -> StringCollection """
        ...

    def EnumObjectPermissions(self, *__args:str) -> Array:
        """
        EnumObjectPermissions(self: Server) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: Server, granteeName: str) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: Server, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: Server, granteeName: str, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        """
        ...

    def EnumPerformanceCounters(self, objectName:str = ..., counterName:str = ..., instanceName:str = ...) -> DataTable:
        """
        EnumPerformanceCounters(self: Server) -> DataTable
        EnumPerformanceCounters(self: Server, objectName: str) -> DataTable
        EnumPerformanceCounters(self: Server, objectName: str, counterName: str) -> DataTable
        EnumPerformanceCounters(self: Server, objectName: str, counterName: str, instanceName: str) -> DataTable
        """
        ...

    def EnumProcesses(self, *__args:int) -> DataTable:
        """
        EnumProcesses(self: Server) -> DataTable
        EnumProcesses(self: Server, processId: int) -> DataTable
        EnumProcesses(self: Server, excludeSystemProcesses: bool) -> DataTable
        EnumProcesses(self: Server, loginName: str) -> DataTable
        """
        ...

    def EnumServerAttributes(self) -> DataTable:
        """ EnumServerAttributes(self: Server) -> DataTable """
        ...

    def EnumServerPermissions(self, *__args:str) -> Array:
        """
        EnumServerPermissions(self: Server) -> Array[ServerPermissionInfo]
        EnumServerPermissions(self: Server, granteeName: str) -> Array[ServerPermissionInfo]
        EnumServerPermissions(self: Server, permissions: ServerPermissionSet) -> Array[ServerPermissionInfo]
        EnumServerPermissions(self: Server, granteeName: str, permissions: ServerPermissionSet) -> Array[ServerPermissionInfo]
        """
        ...

    def EnumStartupProcedures(self) -> DataTable:
        """ EnumStartupProcedures(self: Server) -> DataTable """
        ...

    def EnumWindowsDomainGroups(self, domain:str = ...) -> DataTable:
        """
        EnumWindowsDomainGroups(self: Server) -> DataTable
        EnumWindowsDomainGroups(self: Server, domain: str) -> DataTable
        """
        ...

    def EnumWindowsGroupInfo(self, group:str = ..., listMembers:bool = ...) -> DataTable:
        """
        EnumWindowsGroupInfo(self: Server) -> DataTable
        EnumWindowsGroupInfo(self: Server, group: str) -> DataTable
        EnumWindowsGroupInfo(self: Server, group: str, listMembers: bool) -> DataTable
        """
        ...

    def EnumWindowsUserInfo(self, account:str = ..., listPermissionPaths:bool = ...) -> DataTable:
        """
        EnumWindowsUserInfo(self: Server) -> DataTable
        EnumWindowsUserInfo(self: Server, account: str) -> DataTable
        EnumWindowsUserInfo(self: Server, account: str, listPermissionPaths: bool) -> DataTable
        """
        ...

    def GetActiveDBConnectionCount(self, dbName:str) -> int:
        """ GetActiveDBConnectionCount(self: Server, dbName: str) -> int """
        ...

    def GetDefaultInitFields(self, typeObject:Type, databaseEngineEdition:DatabaseEngineEdition = ...) -> StringCollection:
        """
        GetDefaultInitFields(self: Server, typeObject: Type) -> StringCollection
        GetDefaultInitFields(self: Server, typeObject: Type, databaseEngineEdition: DatabaseEngineEdition) -> StringCollection
        """
        ...

    def GetPropertyNames(self, typeObject:Type, databaseEngineEdition:DatabaseEngineEdition) -> StringCollection:
        """ GetPropertyNames(self: Server, typeObject: Type, databaseEngineEdition: DatabaseEngineEdition) -> StringCollection """
        ...

    def GetSmoObject(self, urn:Urn) -> SqlSmoObject:
        """ GetSmoObject(self: Server, urn: Urn) -> SqlSmoObject """
        ...

    def GetStringComparer(self, collationName:str) -> IComparer:
        """ GetStringComparer(self: Server, collationName: str) -> IComparer """
        ...

    def Grant(self, permission, *__args:Array): # ->  # Not found arg types: {'permission': 'ServerPermissionSet'}
        """ Grant(self: Server, permission: ServerPermissionSet, granteeNames: Array[str])Grant(self: Server, permission: ServerPermissionSet, granteeNames: Array[str], grantGrant: bool)Grant(self: Server, permission: ServerPermissionSet, granteeNames: Array[str], grantGrant: bool, asRole: str)Grant(self: Server, permission: ServerPermissionSet, granteeName: str)Grant(self: Server, permission: ServerPermissionSet, granteeName: str, grantGrant: bool)Grant(self: Server, permission: ServerPermissionSet, granteeName: str, grantGrant: bool, asRole: str) """
        ...

    def GrantAvailabilityGroupCreateDatabasePrivilege(self, availabilityGroupName:str): # -> 
        """ GrantAvailabilityGroupCreateDatabasePrivilege(self: Server, availabilityGroupName: str) """
        ...

    def IsDetachedPrimaryFile(self, mdfName:str) -> bool:
        """ IsDetachedPrimaryFile(self: Server, mdfName: str) -> bool """
        ...

    def IsWindowsGroupMember(self, windowsGroup:str, windowsUser:str) -> bool:
        """ IsWindowsGroupMember(self: Server, windowsGroup: str, windowsUser: str) -> bool """
        ...

    def JoinAvailabilityGroup(self, availabilityGroupName:str, availabilityGroupClusterType:AvailabilityGroupClusterType = ...): # -> 
        """ JoinAvailabilityGroup(self: Server, availabilityGroupName: str)JoinAvailabilityGroup(self: Server, availabilityGroupName: str, availabilityGroupClusterType: AvailabilityGroupClusterType) """
        ...

    def KillAllProcesses(self, databaseName:str): # -> 
        """ KillAllProcesses(self: Server, databaseName: str) """
        ...

    def KillDatabase(self, database:str): # -> 
        """ KillDatabase(self: Server, database: str) """
        ...

    def KillProcess(self, processId:int): # -> 
        """ KillProcess(self: Server, processId: int) """
        ...

    def PingSqlServerVersion(self, serverName:str, login:str = ..., password:str = ...) -> ServerVersion:
        """
        PingSqlServerVersion(self: Server, serverName: str, login: str, password: str) -> ServerVersion
        PingSqlServerVersion(self: Server, serverName: str) -> ServerVersion
        """
        ...

    def ReadErrorLog(self, logNumber:int = ...) -> DataTable:
        """
        ReadErrorLog(self: Server) -> DataTable
        ReadErrorLog(self: Server, logNumber: int) -> DataTable
        """
        ...

    def Revoke(self, permission, *__args:Array): # ->  # Not found arg types: {'permission': 'ServerPermissionSet'}
        """ Revoke(self: Server, permission: ServerPermissionSet, granteeNames: Array[str])Revoke(self: Server, permission: ServerPermissionSet, granteeNames: Array[str], revokeGrant: bool, cascade: bool)Revoke(self: Server, permission: ServerPermissionSet, granteeNames: Array[str], revokeGrant: bool, cascade: bool, asRole: str)Revoke(self: Server, permission: ServerPermissionSet, granteeName: str)Revoke(self: Server, permission: ServerPermissionSet, granteeName: str, revokeGrant: bool, cascade: bool)Revoke(self: Server, permission: ServerPermissionSet, granteeName: str, revokeGrant: bool, cascade: bool, asRole: str) """
        ...

    def SetDefaultInitFields(self, *__args:bool): # -> 
        """ SetDefaultInitFields(self: Server, typeObject: Type, fields: StringCollection)SetDefaultInitFields(self: Server, typeObject: Type, fields: StringCollection, databaseEngineEdition: DatabaseEngineEdition)SetDefaultInitFields(self: Server, typeObject: Type, *fields: Array[str])SetDefaultInitFields(self: Server, typeObject: Type, databaseEngineEdition: DatabaseEngineEdition, *fields: Array[str])SetDefaultInitFields(self: Server, typeObject: Type, allFields: bool)SetDefaultInitFields(self: Server, typeObject: Type, allFields: bool, databaseEngineEdition: DatabaseEngineEdition)SetDefaultInitFields(self: Server, allFields: bool) """
        ...

    def SetTraceFlag(self, number:int, isOn:bool): # -> 
        """ SetTraceFlag(self: Server, number: int, isOn: bool) """
        ...

    def __new__(cls, *__args:str) -> Self:
        """
        __new__(cls: type, name: str)
        __new__(cls: type)
        __new__(cls: type, serverConnection: ServerConnection)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ServerActiveDirectory(SqlSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def IsEnabled(self) -> bool:
        """ Get: IsEnabled(self: ServerActiveDirectory) -> bool """
        ...

    @property
    def IsRegistered(self) -> bool:
        """ Get: IsRegistered(self: ServerActiveDirectory) -> bool """
        ...

    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: ServerActiveDirectory) -> Server """
        ...


    def Register(self, registerDatabases:bool = ...): # -> 
        """ Register(self: ServerActiveDirectory)Register(self: ServerActiveDirectory, registerDatabases: bool) """
        ...

    def Unregister(self): # -> 
        """ Unregister(self: ServerActiveDirectory) """
        ...

    def UpdateRegistration(self): # -> 
        """ UpdateRegistration(self: ServerActiveDirectory) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ServerAdapterBase(IAlterable, IRefreshable): # skipped bases: <type 'object'>
    """ ServerAdapterBase(obj: Server) """
    @property
    def AdHocRemoteQueriesEnabled(self) -> bool:
        """
        Get: AdHocRemoteQueriesEnabled(self: ServerAdapterBase) -> bool
        Set: AdHocRemoteQueriesEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def Affinity64IOMask(self) -> int:
        """
        Get: Affinity64IOMask(self: ServerAdapterBase) -> int
        Set: Affinity64IOMask(self: ServerAdapterBase) = value
        """
        ...

    @property
    def Affinity64Mask(self) -> int:
        """
        Get: Affinity64Mask(self: ServerAdapterBase) -> int
        Set: Affinity64Mask(self: ServerAdapterBase) = value
        """
        ...

    @property
    def AffinityIOMask(self) -> int:
        """
        Get: AffinityIOMask(self: ServerAdapterBase) -> int
        Set: AffinityIOMask(self: ServerAdapterBase) = value
        """
        ...

    @property
    def AffinityMask(self) -> int:
        """
        Get: AffinityMask(self: ServerAdapterBase) -> int
        Set: AffinityMask(self: ServerAdapterBase) = value
        """
        ...

    @property
    def AgentXPsEnabled(self) -> bool:
        """
        Get: AgentXPsEnabled(self: ServerAdapterBase) -> bool
        Set: AgentXPsEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def AllowUpdates(self) -> bool:
        """
        Get: AllowUpdates(self: ServerAdapterBase) -> bool
        Set: AllowUpdates(self: ServerAdapterBase) = value
        """
        ...

    @property
    def AweEnabled(self) -> bool:
        """
        Get: AweEnabled(self: ServerAdapterBase) -> bool
        Set: AweEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def BackupDirectory(self) -> str:
        """ Get: BackupDirectory(self: ServerAdapterBase) -> str """
        ...

    @property
    def BlockedProcessThreshold(self) -> int:
        """
        Get: BlockedProcessThreshold(self: ServerAdapterBase) -> int
        Set: BlockedProcessThreshold(self: ServerAdapterBase) = value
        """
        ...

    @property
    def BrowserServiceAccount(self) -> str:
        """ Get: BrowserServiceAccount(self: ServerAdapterBase) -> str """
        ...

    @property
    def BrowserStartMode(self) -> ServiceStartMode:
        """ Get: BrowserStartMode(self: ServerAdapterBase) -> ServiceStartMode """
        ...

    @property
    def C2AuditTracingEnabled(self) -> bool:
        """
        Get: C2AuditTracingEnabled(self: ServerAdapterBase) -> bool
        Set: C2AuditTracingEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def ClrIntegrationEnabled(self) -> bool:
        """
        Get: ClrIntegrationEnabled(self: ServerAdapterBase) -> bool
        Set: ClrIntegrationEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def Collation(self) -> str:
        """ Get: Collation(self: ServerAdapterBase) -> str """
        ...

    @property
    def CommonCriteriaComplianceEnabled(self) -> bool:
        """ Get: CommonCriteriaComplianceEnabled(self: ServerAdapterBase) -> bool """
        ...

    @property
    def ContainmentEnabled(self) -> bool:
        """
        Get: ContainmentEnabled(self: ServerAdapterBase) -> bool
        Set: ContainmentEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def CostThresholdForParallelism(self) -> int:
        """
        Get: CostThresholdForParallelism(self: ServerAdapterBase) -> int
        Set: CostThresholdForParallelism(self: ServerAdapterBase) = value
        """
        ...

    @property
    def CrossDBOwnershipChainingEnabled(self) -> bool:
        """
        Get: CrossDBOwnershipChainingEnabled(self: ServerAdapterBase) -> bool
        Set: CrossDBOwnershipChainingEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def CursorThreshold(self) -> int:
        """
        Get: CursorThreshold(self: ServerAdapterBase) -> int
        Set: CursorThreshold(self: ServerAdapterBase) = value
        """
        ...

    @property
    def DatabaseMailEnabled(self) -> bool:
        """
        Get: DatabaseMailEnabled(self: ServerAdapterBase) -> bool
        Set: DatabaseMailEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def DefaultBackupCompressionEnabled(self) -> bool:
        """
        Get: DefaultBackupCompressionEnabled(self: ServerAdapterBase) -> bool
        Set: DefaultBackupCompressionEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def DefaultFile(self) -> str:
        """ Get: DefaultFile(self: ServerAdapterBase) -> str """
        ...

    @property
    def DefaultFullTextLanguage(self) -> int:
        """
        Get: DefaultFullTextLanguage(self: ServerAdapterBase) -> int
        Set: DefaultFullTextLanguage(self: ServerAdapterBase) = value
        """
        ...

    @property
    def DefaultLanguage(self) -> int:
        """
        Get: DefaultLanguage(self: ServerAdapterBase) -> int
        Set: DefaultLanguage(self: ServerAdapterBase) = value
        """
        ...

    @property
    def DefaultLog(self) -> str:
        """ Get: DefaultLog(self: ServerAdapterBase) -> str """
        ...

    @property
    def DefaultTraceEnabled(self) -> bool:
        """
        Get: DefaultTraceEnabled(self: ServerAdapterBase) -> bool
        Set: DefaultTraceEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def DisallowResultsFromTriggers(self) -> bool:
        """
        Get: DisallowResultsFromTriggers(self: ServerAdapterBase) -> bool
        Set: DisallowResultsFromTriggers(self: ServerAdapterBase) = value
        """
        ...

    @property
    def DynamicLocks(self) -> int:
        """
        Get: DynamicLocks(self: ServerAdapterBase) -> int
        Set: DynamicLocks(self: ServerAdapterBase) = value
        """
        ...

    @property
    def ExtensibleKeyManagementEnabled(self) -> bool:
        """
        Get: ExtensibleKeyManagementEnabled(self: ServerAdapterBase) -> bool
        Set: ExtensibleKeyManagementEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def FilestreamAccessLevel(self) -> FilestreamAccessLevelType:
        """
        Get: FilestreamAccessLevel(self: ServerAdapterBase) -> FilestreamAccessLevelType
        Set: FilestreamAccessLevel(self: ServerAdapterBase) = value
        """
        ...

    @property
    def FilestreamLevel(self) -> FileStreamEffectiveLevel:
        """ Get: FilestreamLevel(self: ServerAdapterBase) -> FileStreamEffectiveLevel """
        ...

    @property
    def FilestreamShareName(self) -> str:
        """ Get: FilestreamShareName(self: ServerAdapterBase) -> str """
        ...

    @property
    def FillFactor(self) -> int:
        """
        Get: FillFactor(self: ServerAdapterBase) -> int
        Set: FillFactor(self: ServerAdapterBase) = value
        """
        ...

    @property
    def FullTextCrawlBandwidthMax(self) -> int:
        """
        Get: FullTextCrawlBandwidthMax(self: ServerAdapterBase) -> int
        Set: FullTextCrawlBandwidthMax(self: ServerAdapterBase) = value
        """
        ...

    @property
    def FullTextCrawlBandwidthMin(self) -> int:
        """
        Get: FullTextCrawlBandwidthMin(self: ServerAdapterBase) -> int
        Set: FullTextCrawlBandwidthMin(self: ServerAdapterBase) = value
        """
        ...

    @property
    def FullTextCrawlRangeMax(self) -> int:
        """
        Get: FullTextCrawlRangeMax(self: ServerAdapterBase) -> int
        Set: FullTextCrawlRangeMax(self: ServerAdapterBase) = value
        """
        ...

    @property
    def FullTextNotifyBandwidthMax(self) -> int:
        """
        Get: FullTextNotifyBandwidthMax(self: ServerAdapterBase) -> int
        Set: FullTextNotifyBandwidthMax(self: ServerAdapterBase) = value
        """
        ...

    @property
    def FullTextNotifyBandwidthMin(self) -> int:
        """
        Get: FullTextNotifyBandwidthMin(self: ServerAdapterBase) -> int
        Set: FullTextNotifyBandwidthMin(self: ServerAdapterBase) = value
        """
        ...

    @property
    def IndexCreateMemory(self) -> int:
        """
        Get: IndexCreateMemory(self: ServerAdapterBase) -> int
        Set: IndexCreateMemory(self: ServerAdapterBase) = value
        """
        ...

    @property
    def InDoubtTransactionResolution(self) -> InDoubtTransactionResolutionType:
        """
        Get: InDoubtTransactionResolution(self: ServerAdapterBase) -> InDoubtTransactionResolutionType
        Set: InDoubtTransactionResolution(self: ServerAdapterBase) = value
        """
        ...

    @property
    def InstallDataDirectory(self) -> str:
        """ Get: InstallDataDirectory(self: ServerAdapterBase) -> str """
        ...

    @property
    def InstallSharedDirectory(self) -> str:
        """ Get: InstallSharedDirectory(self: ServerAdapterBase) -> str """
        ...

    @property
    def InstanceName(self) -> str:
        """ Get: InstanceName(self: ServerAdapterBase) -> str """
        ...

    @property
    def LightweightPoolingEnabled(self) -> bool:
        """
        Get: LightweightPoolingEnabled(self: ServerAdapterBase) -> bool
        Set: LightweightPoolingEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def LoginAuditLevel(self) -> AuditLevel:
        """
        Get: LoginAuditLevel(self: ServerAdapterBase) -> AuditLevel
        Set: LoginAuditLevel(self: ServerAdapterBase) = value
        """
        ...

    @property
    def LoginMode(self): # -> ServerLoginMode
        """ Get: LoginMode(self: ServerAdapterBase) -> ServerLoginMode """
        ...

    @property
    def MaxDegreeOfParallelism(self) -> int:
        """
        Get: MaxDegreeOfParallelism(self: ServerAdapterBase) -> int
        Set: MaxDegreeOfParallelism(self: ServerAdapterBase) = value
        """
        ...

    @property
    def MaxServerMemory(self) -> int:
        """
        Get: MaxServerMemory(self: ServerAdapterBase) -> int
        Set: MaxServerMemory(self: ServerAdapterBase) = value
        """
        ...

    @property
    def MaxWorkerThreads(self) -> int:
        """
        Get: MaxWorkerThreads(self: ServerAdapterBase) -> int
        Set: MaxWorkerThreads(self: ServerAdapterBase) = value
        """
        ...

    @property
    def MediaRetention(self) -> int:
        """
        Get: MediaRetention(self: ServerAdapterBase) -> int
        Set: MediaRetention(self: ServerAdapterBase) = value
        """
        ...

    @property
    def MinMemoryPerQuery(self) -> int:
        """
        Get: MinMemoryPerQuery(self: ServerAdapterBase) -> int
        Set: MinMemoryPerQuery(self: ServerAdapterBase) = value
        """
        ...

    @property
    def MinServerMemory(self) -> int:
        """
        Get: MinServerMemory(self: ServerAdapterBase) -> int
        Set: MinServerMemory(self: ServerAdapterBase) = value
        """
        ...

    @property
    def NamedPipesEnabled(self) -> bool:
        """ Get: NamedPipesEnabled(self: ServerAdapterBase) -> bool """
        ...

    @property
    def NestedTriggersEnabled(self) -> bool:
        """
        Get: NestedTriggersEnabled(self: ServerAdapterBase) -> bool
        Set: NestedTriggersEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def NetworkPacketSize(self) -> int:
        """
        Get: NetworkPacketSize(self: ServerAdapterBase) -> int
        Set: NetworkPacketSize(self: ServerAdapterBase) = value
        """
        ...

    @property
    def OleAutomationEnabled(self) -> bool:
        """
        Get: OleAutomationEnabled(self: ServerAdapterBase) -> bool
        Set: OleAutomationEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def OpenObjects(self) -> int:
        """
        Get: OpenObjects(self: ServerAdapterBase) -> int
        Set: OpenObjects(self: ServerAdapterBase) = value
        """
        ...

    @property
    def OptimizeAdhocWorkloads(self) -> bool:
        """
        Get: OptimizeAdhocWorkloads(self: ServerAdapterBase) -> bool
        Set: OptimizeAdhocWorkloads(self: ServerAdapterBase) = value
        """
        ...

    @property
    def PrecomputeRank(self) -> bool:
        """
        Get: PrecomputeRank(self: ServerAdapterBase) -> bool
        Set: PrecomputeRank(self: ServerAdapterBase) = value
        """
        ...

    @property
    def PriorityBoost(self) -> bool:
        """
        Get: PriorityBoost(self: ServerAdapterBase) -> bool
        Set: PriorityBoost(self: ServerAdapterBase) = value
        """
        ...

    @property
    def ProtocolHandlerTimeout(self) -> int:
        """
        Get: ProtocolHandlerTimeout(self: ServerAdapterBase) -> int
        Set: ProtocolHandlerTimeout(self: ServerAdapterBase) = value
        """
        ...

    @property
    def QueryGovernorCostLimit(self) -> int:
        """
        Get: QueryGovernorCostLimit(self: ServerAdapterBase) -> int
        Set: QueryGovernorCostLimit(self: ServerAdapterBase) = value
        """
        ...

    @property
    def QueryWait(self) -> int:
        """
        Get: QueryWait(self: ServerAdapterBase) -> int
        Set: QueryWait(self: ServerAdapterBase) = value
        """
        ...

    @property
    def RecoveryInterval(self) -> int:
        """
        Get: RecoveryInterval(self: ServerAdapterBase) -> int
        Set: RecoveryInterval(self: ServerAdapterBase) = value
        """
        ...

    @property
    def RemoteAccessEnabled(self) -> bool:
        """
        Get: RemoteAccessEnabled(self: ServerAdapterBase) -> bool
        Set: RemoteAccessEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def RemoteDacEnabled(self) -> bool:
        """
        Get: RemoteDacEnabled(self: ServerAdapterBase) -> bool
        Set: RemoteDacEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def RemoteDataArchiveEnabled(self) -> bool:
        """
        Get: RemoteDataArchiveEnabled(self: ServerAdapterBase) -> bool
        Set: RemoteDataArchiveEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def RemoteLoginTimeout(self) -> int:
        """
        Get: RemoteLoginTimeout(self: ServerAdapterBase) -> int
        Set: RemoteLoginTimeout(self: ServerAdapterBase) = value
        """
        ...

    @property
    def RemoteProcTransEnabled(self) -> bool:
        """
        Get: RemoteProcTransEnabled(self: ServerAdapterBase) -> bool
        Set: RemoteProcTransEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def RemoteQueryTimeout(self) -> int:
        """
        Get: RemoteQueryTimeout(self: ServerAdapterBase) -> int
        Set: RemoteQueryTimeout(self: ServerAdapterBase) = value
        """
        ...

    @property
    def ReplicationMaxTextSize(self) -> int:
        """
        Get: ReplicationMaxTextSize(self: ServerAdapterBase) -> int
        Set: ReplicationMaxTextSize(self: ServerAdapterBase) = value
        """
        ...

    @property
    def ReplicationXPsEnabled(self) -> bool:
        """
        Get: ReplicationXPsEnabled(self: ServerAdapterBase) -> bool
        Set: ReplicationXPsEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def ScanForStartupProcedures(self) -> bool:
        """
        Get: ScanForStartupProcedures(self: ServerAdapterBase) -> bool
        Set: ScanForStartupProcedures(self: ServerAdapterBase) = value
        """
        ...

    @property
    def Server(self):
        ...

    @property
    def ServerTriggerRecursionEnabled(self) -> bool:
        """
        Get: ServerTriggerRecursionEnabled(self: ServerAdapterBase) -> bool
        Set: ServerTriggerRecursionEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def ServiceName(self) -> str:
        """ Get: ServiceName(self: ServerAdapterBase) -> str """
        ...

    @property
    def ServiceStartMode(self) -> ServiceStartMode:
        """ Get: ServiceStartMode(self: ServerAdapterBase) -> ServiceStartMode """
        ...

    @property
    def SetWorkingSetSize(self) -> bool:
        """
        Get: SetWorkingSetSize(self: ServerAdapterBase) -> bool
        Set: SetWorkingSetSize(self: ServerAdapterBase) = value
        """
        ...

    @property
    def ShowAdvancedOptions(self) -> bool:
        """
        Get: ShowAdvancedOptions(self: ServerAdapterBase) -> bool
        Set: ShowAdvancedOptions(self: ServerAdapterBase) = value
        """
        ...

    @property
    def SmoAndDmoXPsEnabled(self) -> bool:
        """
        Get: SmoAndDmoXPsEnabled(self: ServerAdapterBase) -> bool
        Set: SmoAndDmoXPsEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def SqlDomainGroup(self) -> str:
        """ Get: SqlDomainGroup(self: ServerAdapterBase) -> str """
        ...

    @property
    def SqlMailEnabled(self) -> bool:
        """
        Get: SqlMailEnabled(self: ServerAdapterBase) -> bool
        Set: SqlMailEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def TcpEnabled(self) -> bool:
        """ Get: TcpEnabled(self: ServerAdapterBase) -> bool """
        ...

    @property
    def TransformNoiseWords(self) -> bool:
        """
        Get: TransformNoiseWords(self: ServerAdapterBase) -> bool
        Set: TransformNoiseWords(self: ServerAdapterBase) = value
        """
        ...

    @property
    def TwoDigitYearCutoff(self) -> int:
        """
        Get: TwoDigitYearCutoff(self: ServerAdapterBase) -> int
        Set: TwoDigitYearCutoff(self: ServerAdapterBase) = value
        """
        ...

    @property
    def UserConnections(self) -> int:
        """
        Get: UserConnections(self: ServerAdapterBase) -> int
        Set: UserConnections(self: ServerAdapterBase) = value
        """
        ...

    @property
    def UserInstancesEnabled(self) -> bool:
        """
        Get: UserInstancesEnabled(self: ServerAdapterBase) -> bool
        Set: UserInstancesEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def UserInstanceTimeout(self) -> int:
        """
        Get: UserInstanceTimeout(self: ServerAdapterBase) -> int
        Set: UserInstanceTimeout(self: ServerAdapterBase) = value
        """
        ...

    @property
    def UserOptions(self) -> int:
        """
        Get: UserOptions(self: ServerAdapterBase) -> int
        Set: UserOptions(self: ServerAdapterBase) = value
        """
        ...

    @property
    def WebAssistantEnabled(self) -> bool:
        """
        Get: WebAssistantEnabled(self: ServerAdapterBase) -> bool
        Set: WebAssistantEnabled(self: ServerAdapterBase) = value
        """
        ...

    @property
    def XPCmdShellEnabled(self) -> bool:
        """
        Get: XPCmdShellEnabled(self: ServerAdapterBase) -> bool
        Set: XPCmdShellEnabled(self: ServerAdapterBase) = value
        """
        ...



class ServerAdapter(IServerAuditFacet, IDmfAdapter, ServerAdapterBase): # skipped bases: <type 'IDmfFacet'>, <type 'IAlterable'>, <type 'IRefreshable'>, <type 'object'>
    """ ServerAdapter(obj: Server) """
    pass

class ServerAuditSpecification(ISfcSupportsDesignMode, AuditSpecification): # skipped bases: <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IScriptable'>, <type 'ISqlSmoObjectInitialize'>, <type 'IDroppable'>, <type 'ICreatable'>, <type 'IAlienObject'>, <type 'IAlterable'>, <type 'IDropIfExists'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'object'>
    """
    ServerAuditSpecification()
    ServerAuditSpecification(server: Server, name: str)
    """
    @property
    def AuditName(self) -> str:
        """
        Get: AuditName(self: ServerAuditSpecification) -> str
        Set: AuditName(self: ServerAuditSpecification) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: ServerAuditSpecification) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: ServerAuditSpecification) -> DateTime """
        ...

    @property
    def Enabled(self) -> bool:
        """ Get: Enabled(self: ServerAuditSpecification) -> bool """
        ...

    @property
    def Guid(self) -> Guid:
        """ Get: Guid(self: ServerAuditSpecification) -> Guid """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ServerAuditSpecification) -> int """
        ...

    @property
    def Parent(self) -> Server:
        """
        Get: Parent(self: ServerAuditSpecification) -> Server
        Set: Parent(self: ServerAuditSpecification) = value
        """
        ...


    def __new__(cls, server:Server = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ServerAuditSpecificationCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: ServerAuditSpecificationCollection) -> Server """
        ...


    def Add(self, serverAuditSpecification:ServerAuditSpecification): # -> 
        """ Add(self: ServerAuditSpecificationCollection, serverAuditSpecification: ServerAuditSpecification) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ServerAuditSpecificationCollection, array: Array[ServerAuditSpecification], index: int) """
        ...

    def ItemById(self, id:int) -> ServerAuditSpecification:
        """ ItemById(self: ServerAuditSpecificationCollection, id: int) -> ServerAuditSpecification """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ServerAuditSpecificationExtender(SmoObjectExtender, ISfcValidate): # skipped bases: <type 'INotifyPropertyChanged'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcPropertyProvider'>, <type 'object'>
    """
    ServerAuditSpecificationExtender()
    ServerAuditSpecificationExtender(serverAuditSpecification: ServerAuditSpecification)
    """
    @property
    def Audits(self) -> StringCollection:
        """ Get: Audits(self: ServerAuditSpecificationExtender) -> StringCollection """
        ...

    @property
    def AuditSpecificationDetails(self) -> DataTable:
        """
        Get: AuditSpecificationDetails(self: ServerAuditSpecificationExtender) -> DataTable
        Set: AuditSpecificationDetails(self: ServerAuditSpecificationExtender) = value
        """
        ...

    @property
    def ConnectionContext(self) -> ServerConnection:
        """ Get: ConnectionContext(self: ServerAuditSpecificationExtender) -> ServerConnection """
        ...

    @property
    def DatabaseName(self) -> str:
        """ Get: DatabaseName(self: ServerAuditSpecificationExtender) -> str """
        ...

    @property
    def GridValidationState(self) -> ValidationState:
        """
        Get: GridValidationState(self: ServerAuditSpecificationExtender) -> ValidationState
        Set: GridValidationState(self: ServerAuditSpecificationExtender) = value
        """
        ...

    @property
    def State(self): # -> SqlSmoState
        """ Get: State(self: ServerAuditSpecificationExtender) -> SqlSmoState """
        ...

    @property
    def Type(self) -> str:
        """ Get: Type(self: ServerAuditSpecificationExtender) -> str """
        ...



class ServerConfigurationAdapter(IServerPerformanceFacet, IDmfAdapter, IServerConfigurationFacet, ServerAdapterBase): # skipped bases: <type 'IDmfFacet'>, <type 'IAlterable'>, <type 'IRefreshable'>, <type 'object'>
    """ ServerConfigurationAdapter(obj: Server) """
    pass

class ServerDdlTrigger(ISfcSupportsDesignMode, DdlTriggerBase): # skipped bases: <type 'ICreateOrAlterable'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IScriptable'>, <type 'ISqlSmoObjectInitialize'>, <type 'IDroppable'>, <type 'ICreatable'>, <type 'IAlienObject'>, <type 'IAlterable'>, <type 'IDropIfExists'>, <type 'ITextObject'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'object'>
    """
    ServerDdlTrigger()
    ServerDdlTrigger(server: Server, name: str)
    ServerDdlTrigger(parent: Server, name: str, events: ServerDdlTriggerEventSet, textBody: str)
    ServerDdlTrigger(parent: Server, name: str, events: ServerDdlTriggerEventSet, assemblyName: str, className: str, method: str)
    """
    @property
    def AnsiNullsStatus(self) -> bool:
        """
        Get: AnsiNullsStatus(self: ServerDdlTrigger) -> bool
        Set: AnsiNullsStatus(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def AssemblyName(self) -> str:
        """
        Get: AssemblyName(self: ServerDdlTrigger) -> str
        Set: AssemblyName(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def BodyStartIndex(self) -> int:
        """ Get: BodyStartIndex(self: ServerDdlTrigger) -> int """
        ...

    @property
    def ClassName(self) -> str:
        """
        Get: ClassName(self: ServerDdlTrigger) -> str
        Set: ClassName(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: ServerDdlTrigger) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: ServerDdlTrigger) -> DateTime """
        ...

    @property
    def DdlTriggerEvents(self): # -> ServerDdlTriggerEventSet
        """
        Get: DdlTriggerEvents(self: ServerDdlTrigger) -> ServerDdlTriggerEventSet
        Set: DdlTriggerEvents(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def ExecutionContext(self): # -> ServerDdlTriggerExecutionContext
        """
        Get: ExecutionContext(self: ServerDdlTrigger) -> ServerDdlTriggerExecutionContext
        Set: ExecutionContext(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def ExecutionContextLogin(self) -> str:
        """
        Get: ExecutionContextLogin(self: ServerDdlTrigger) -> str
        Set: ExecutionContextLogin(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ServerDdlTrigger) -> int """
        ...

    @property
    def ImplementationType(self) -> ImplementationType:
        """
        Get: ImplementationType(self: ServerDdlTrigger) -> ImplementationType
        Set: ImplementationType(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def IsEnabled(self) -> bool:
        """
        Get: IsEnabled(self: ServerDdlTrigger) -> bool
        Set: IsEnabled(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def IsEncrypted(self) -> bool:
        """
        Get: IsEncrypted(self: ServerDdlTrigger) -> bool
        Set: IsEncrypted(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: ServerDdlTrigger) -> bool """
        ...

    @property
    def MethodName(self) -> str:
        """
        Get: MethodName(self: ServerDdlTrigger) -> str
        Set: MethodName(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def Parent(self) -> Server:
        """
        Get: Parent(self: ServerDdlTrigger) -> Server
        Set: Parent(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def QuotedIdentifierStatus(self) -> bool:
        """
        Get: QuotedIdentifierStatus(self: ServerDdlTrigger) -> bool
        Set: QuotedIdentifierStatus(self: ServerDdlTrigger) = value
        """
        ...

    @property
    def Text(self) -> str:
        """ Get: Text(self: ServerDdlTrigger) -> str """
        ...


    def __new__(cls, *__args) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        __new__(cls: type, parent: Server, name: str, events: ServerDdlTriggerEventSet, textBody: str)
        __new__(cls: type, parent: Server, name: str, events: ServerDdlTriggerEventSet, assemblyName: str, className: str, method: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ServerDdlTriggerCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: ServerDdlTriggerCollection) -> Server """
        ...


    def Add(self, serverDdlTrigger:ServerDdlTrigger): # -> 
        """ Add(self: ServerDdlTriggerCollection, serverDdlTrigger: ServerDdlTrigger) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ServerDdlTriggerCollection, array: Array[ServerDdlTrigger], index: int) """
        ...

    def ItemById(self, id:int) -> ServerDdlTrigger:
        """ ItemById(self: ServerDdlTriggerCollection, id: int) -> ServerDdlTrigger """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ServerDdlTriggerEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AddRoleMember(self) -> ServerDdlTriggerEvent:
        """ Get: AddRoleMember() -> ServerDdlTriggerEvent """
        ...

    @property
    def AddServerRoleMember(self) -> ServerDdlTriggerEvent:
        """ Get: AddServerRoleMember() -> ServerDdlTriggerEvent """
        ...

    @property
    def AddSignature(self) -> ServerDdlTriggerEvent:
        """ Get: AddSignature() -> ServerDdlTriggerEvent """
        ...

    @property
    def AddSignatureSchemaObject(self) -> ServerDdlTriggerEvent:
        """ Get: AddSignatureSchemaObject() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterApplicationRole(self) -> ServerDdlTriggerEvent:
        """ Get: AlterApplicationRole() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterAssembly(self) -> ServerDdlTriggerEvent:
        """ Get: AlterAssembly() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterAsymmetricKey(self) -> ServerDdlTriggerEvent:
        """ Get: AlterAsymmetricKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterAudit(self) -> ServerDdlTriggerEvent:
        """ Get: AlterAudit() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterAuthorizationDatabase(self) -> ServerDdlTriggerEvent:
        """ Get: AlterAuthorizationDatabase() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterAuthorizationServer(self) -> ServerDdlTriggerEvent:
        """ Get: AlterAuthorizationServer() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterAvailabilityGroup(self) -> ServerDdlTriggerEvent:
        """ Get: AlterAvailabilityGroup() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterBrokerPriority(self) -> ServerDdlTriggerEvent:
        """ Get: AlterBrokerPriority() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterCertificate(self) -> ServerDdlTriggerEvent:
        """ Get: AlterCertificate() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterColumnEncryptionKey(self) -> ServerDdlTriggerEvent:
        """ Get: AlterColumnEncryptionKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterCredential(self) -> ServerDdlTriggerEvent:
        """ Get: AlterCredential() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterCryptographicProvider(self) -> ServerDdlTriggerEvent:
        """ Get: AlterCryptographicProvider() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterDatabase(self) -> ServerDdlTriggerEvent:
        """ Get: AlterDatabase() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterDatabaseAuditSpecification(self) -> ServerDdlTriggerEvent:
        """ Get: AlterDatabaseAuditSpecification() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterDatabaseEncryptionKey(self) -> ServerDdlTriggerEvent:
        """ Get: AlterDatabaseEncryptionKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterEndpoint(self) -> ServerDdlTriggerEvent:
        """ Get: AlterEndpoint() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterEventSession(self) -> ServerDdlTriggerEvent:
        """ Get: AlterEventSession() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterExtendedProperty(self) -> ServerDdlTriggerEvent:
        """ Get: AlterExtendedProperty() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterFulltextCatalog(self) -> ServerDdlTriggerEvent:
        """ Get: AlterFulltextCatalog() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterFulltextIndex(self) -> ServerDdlTriggerEvent:
        """ Get: AlterFulltextIndex() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterFulltextStoplist(self) -> ServerDdlTriggerEvent:
        """ Get: AlterFulltextStoplist() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterFunction(self) -> ServerDdlTriggerEvent:
        """ Get: AlterFunction() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterIndex(self) -> ServerDdlTriggerEvent:
        """ Get: AlterIndex() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterInstance(self) -> ServerDdlTriggerEvent:
        """ Get: AlterInstance() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterLinkedServer(self) -> ServerDdlTriggerEvent:
        """ Get: AlterLinkedServer() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterLogin(self) -> ServerDdlTriggerEvent:
        """ Get: AlterLogin() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterMasterKey(self) -> ServerDdlTriggerEvent:
        """ Get: AlterMasterKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterMessage(self) -> ServerDdlTriggerEvent:
        """ Get: AlterMessage() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterMessageType(self) -> ServerDdlTriggerEvent:
        """ Get: AlterMessageType() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterPartitionFunction(self) -> ServerDdlTriggerEvent:
        """ Get: AlterPartitionFunction() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterPartitionScheme(self) -> ServerDdlTriggerEvent:
        """ Get: AlterPartitionScheme() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterPlanGuide(self) -> ServerDdlTriggerEvent:
        """ Get: AlterPlanGuide() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterProcedure(self) -> ServerDdlTriggerEvent:
        """ Get: AlterProcedure() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterQueue(self) -> ServerDdlTriggerEvent:
        """ Get: AlterQueue() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterRemoteServer(self) -> ServerDdlTriggerEvent:
        """ Get: AlterRemoteServer() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterRemoteServiceBinding(self) -> ServerDdlTriggerEvent:
        """ Get: AlterRemoteServiceBinding() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterResourceGovernorConfig(self) -> ServerDdlTriggerEvent:
        """ Get: AlterResourceGovernorConfig() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterResourcePool(self) -> ServerDdlTriggerEvent:
        """ Get: AlterResourcePool() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterRole(self) -> ServerDdlTriggerEvent:
        """ Get: AlterRole() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterRoute(self) -> ServerDdlTriggerEvent:
        """ Get: AlterRoute() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterSchema(self) -> ServerDdlTriggerEvent:
        """ Get: AlterSchema() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterSearchPropertyList(self) -> ServerDdlTriggerEvent:
        """ Get: AlterSearchPropertyList() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterSecurityPolicy(self) -> ServerDdlTriggerEvent:
        """ Get: AlterSecurityPolicy() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterSequence(self) -> ServerDdlTriggerEvent:
        """ Get: AlterSequence() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterServerAudit(self) -> ServerDdlTriggerEvent:
        """ Get: AlterServerAudit() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterServerAuditSpecification(self) -> ServerDdlTriggerEvent:
        """ Get: AlterServerAuditSpecification() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterServerRole(self) -> ServerDdlTriggerEvent:
        """ Get: AlterServerRole() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterService(self) -> ServerDdlTriggerEvent:
        """ Get: AlterService() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterServiceMasterKey(self) -> ServerDdlTriggerEvent:
        """ Get: AlterServiceMasterKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterSymmetricKey(self) -> ServerDdlTriggerEvent:
        """ Get: AlterSymmetricKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterTable(self) -> ServerDdlTriggerEvent:
        """ Get: AlterTable() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterTrigger(self) -> ServerDdlTriggerEvent:
        """ Get: AlterTrigger() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterUser(self) -> ServerDdlTriggerEvent:
        """ Get: AlterUser() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterView(self) -> ServerDdlTriggerEvent:
        """ Get: AlterView() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterWorkloadGroup(self) -> ServerDdlTriggerEvent:
        """ Get: AlterWorkloadGroup() -> ServerDdlTriggerEvent """
        ...

    @property
    def AlterXmlSchemaCollection(self) -> ServerDdlTriggerEvent:
        """ Get: AlterXmlSchemaCollection() -> ServerDdlTriggerEvent """
        ...

    @property
    def BindDefault(self) -> ServerDdlTriggerEvent:
        """ Get: BindDefault() -> ServerDdlTriggerEvent """
        ...

    @property
    def BindRule(self) -> ServerDdlTriggerEvent:
        """ Get: BindRule() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateApplicationRole(self) -> ServerDdlTriggerEvent:
        """ Get: CreateApplicationRole() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateAssembly(self) -> ServerDdlTriggerEvent:
        """ Get: CreateAssembly() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateAsymmetricKey(self) -> ServerDdlTriggerEvent:
        """ Get: CreateAsymmetricKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateAudit(self) -> ServerDdlTriggerEvent:
        """ Get: CreateAudit() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateAvailabilityGroup(self) -> ServerDdlTriggerEvent:
        """ Get: CreateAvailabilityGroup() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateBrokerPriority(self) -> ServerDdlTriggerEvent:
        """ Get: CreateBrokerPriority() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateCertificate(self) -> ServerDdlTriggerEvent:
        """ Get: CreateCertificate() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateColumnEncryptionKey(self) -> ServerDdlTriggerEvent:
        """ Get: CreateColumnEncryptionKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateColumnMasterKey(self) -> ServerDdlTriggerEvent:
        """ Get: CreateColumnMasterKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateContract(self) -> ServerDdlTriggerEvent:
        """ Get: CreateContract() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateCredential(self) -> ServerDdlTriggerEvent:
        """ Get: CreateCredential() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateCryptographicProvider(self) -> ServerDdlTriggerEvent:
        """ Get: CreateCryptographicProvider() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateDatabase(self) -> ServerDdlTriggerEvent:
        """ Get: CreateDatabase() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateDatabaseAuditSpecification(self) -> ServerDdlTriggerEvent:
        """ Get: CreateDatabaseAuditSpecification() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateDatabaseEncryptionKey(self) -> ServerDdlTriggerEvent:
        """ Get: CreateDatabaseEncryptionKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateDefault(self) -> ServerDdlTriggerEvent:
        """ Get: CreateDefault() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateEndpoint(self) -> ServerDdlTriggerEvent:
        """ Get: CreateEndpoint() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateEventNotification(self) -> ServerDdlTriggerEvent:
        """ Get: CreateEventNotification() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateEventSession(self) -> ServerDdlTriggerEvent:
        """ Get: CreateEventSession() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateExtendedProcedure(self) -> ServerDdlTriggerEvent:
        """ Get: CreateExtendedProcedure() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateExtendedProperty(self) -> ServerDdlTriggerEvent:
        """ Get: CreateExtendedProperty() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateFulltextCatalog(self) -> ServerDdlTriggerEvent:
        """ Get: CreateFulltextCatalog() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateFulltextIndex(self) -> ServerDdlTriggerEvent:
        """ Get: CreateFulltextIndex() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateFulltextStoplist(self) -> ServerDdlTriggerEvent:
        """ Get: CreateFulltextStoplist() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateFunction(self) -> ServerDdlTriggerEvent:
        """ Get: CreateFunction() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateIndex(self) -> ServerDdlTriggerEvent:
        """ Get: CreateIndex() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateLinkedServer(self) -> ServerDdlTriggerEvent:
        """ Get: CreateLinkedServer() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateLinkedServerLogin(self) -> ServerDdlTriggerEvent:
        """ Get: CreateLinkedServerLogin() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateLogin(self) -> ServerDdlTriggerEvent:
        """ Get: CreateLogin() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateMasterKey(self) -> ServerDdlTriggerEvent:
        """ Get: CreateMasterKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateMessage(self) -> ServerDdlTriggerEvent:
        """ Get: CreateMessage() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateMessageType(self) -> ServerDdlTriggerEvent:
        """ Get: CreateMessageType() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreatePartitionFunction(self) -> ServerDdlTriggerEvent:
        """ Get: CreatePartitionFunction() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreatePartitionScheme(self) -> ServerDdlTriggerEvent:
        """ Get: CreatePartitionScheme() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreatePlanGuide(self) -> ServerDdlTriggerEvent:
        """ Get: CreatePlanGuide() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateProcedure(self) -> ServerDdlTriggerEvent:
        """ Get: CreateProcedure() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateQueue(self) -> ServerDdlTriggerEvent:
        """ Get: CreateQueue() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateRemoteServer(self) -> ServerDdlTriggerEvent:
        """ Get: CreateRemoteServer() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateRemoteServiceBinding(self) -> ServerDdlTriggerEvent:
        """ Get: CreateRemoteServiceBinding() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateResourcePool(self) -> ServerDdlTriggerEvent:
        """ Get: CreateResourcePool() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateRole(self) -> ServerDdlTriggerEvent:
        """ Get: CreateRole() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateRoute(self) -> ServerDdlTriggerEvent:
        """ Get: CreateRoute() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateRule(self) -> ServerDdlTriggerEvent:
        """ Get: CreateRule() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateSchema(self) -> ServerDdlTriggerEvent:
        """ Get: CreateSchema() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateSearchPropertyList(self) -> ServerDdlTriggerEvent:
        """ Get: CreateSearchPropertyList() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateSecurityPolicy(self) -> ServerDdlTriggerEvent:
        """ Get: CreateSecurityPolicy() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateSequence(self) -> ServerDdlTriggerEvent:
        """ Get: CreateSequence() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateServerAudit(self) -> ServerDdlTriggerEvent:
        """ Get: CreateServerAudit() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateServerAuditSpecification(self) -> ServerDdlTriggerEvent:
        """ Get: CreateServerAuditSpecification() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateServerRole(self) -> ServerDdlTriggerEvent:
        """ Get: CreateServerRole() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateService(self) -> ServerDdlTriggerEvent:
        """ Get: CreateService() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateSpatialIndex(self) -> ServerDdlTriggerEvent:
        """ Get: CreateSpatialIndex() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateStatistics(self) -> ServerDdlTriggerEvent:
        """ Get: CreateStatistics() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateSymmetricKey(self) -> ServerDdlTriggerEvent:
        """ Get: CreateSymmetricKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateSynonym(self) -> ServerDdlTriggerEvent:
        """ Get: CreateSynonym() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateTable(self) -> ServerDdlTriggerEvent:
        """ Get: CreateTable() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateTrigger(self) -> ServerDdlTriggerEvent:
        """ Get: CreateTrigger() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateType(self) -> ServerDdlTriggerEvent:
        """ Get: CreateType() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateUser(self) -> ServerDdlTriggerEvent:
        """ Get: CreateUser() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateView(self) -> ServerDdlTriggerEvent:
        """ Get: CreateView() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateWorkloadGroup(self) -> ServerDdlTriggerEvent:
        """ Get: CreateWorkloadGroup() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateXmlIndex(self) -> ServerDdlTriggerEvent:
        """ Get: CreateXmlIndex() -> ServerDdlTriggerEvent """
        ...

    @property
    def CreateXmlSchemaCollection(self) -> ServerDdlTriggerEvent:
        """ Get: CreateXmlSchemaCollection() -> ServerDdlTriggerEvent """
        ...

    @property
    def DenyDatabase(self) -> ServerDdlTriggerEvent:
        """ Get: DenyDatabase() -> ServerDdlTriggerEvent """
        ...

    @property
    def DenyServer(self) -> ServerDdlTriggerEvent:
        """ Get: DenyServer() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropApplicationRole(self) -> ServerDdlTriggerEvent:
        """ Get: DropApplicationRole() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropAssembly(self) -> ServerDdlTriggerEvent:
        """ Get: DropAssembly() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropAsymmetricKey(self) -> ServerDdlTriggerEvent:
        """ Get: DropAsymmetricKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropAudit(self) -> ServerDdlTriggerEvent:
        """ Get: DropAudit() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropAvailabilityGroup(self) -> ServerDdlTriggerEvent:
        """ Get: DropAvailabilityGroup() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropBrokerPriority(self) -> ServerDdlTriggerEvent:
        """ Get: DropBrokerPriority() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropCertificate(self) -> ServerDdlTriggerEvent:
        """ Get: DropCertificate() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropColumnEncryptionKey(self) -> ServerDdlTriggerEvent:
        """ Get: DropColumnEncryptionKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropColumnMasterKey(self) -> ServerDdlTriggerEvent:
        """ Get: DropColumnMasterKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropContract(self) -> ServerDdlTriggerEvent:
        """ Get: DropContract() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropCredential(self) -> ServerDdlTriggerEvent:
        """ Get: DropCredential() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropCryptographicProvider(self) -> ServerDdlTriggerEvent:
        """ Get: DropCryptographicProvider() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropDatabase(self) -> ServerDdlTriggerEvent:
        """ Get: DropDatabase() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropDatabaseAuditSpecification(self) -> ServerDdlTriggerEvent:
        """ Get: DropDatabaseAuditSpecification() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropDatabaseEncryptionKey(self) -> ServerDdlTriggerEvent:
        """ Get: DropDatabaseEncryptionKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropDefault(self) -> ServerDdlTriggerEvent:
        """ Get: DropDefault() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropEndpoint(self) -> ServerDdlTriggerEvent:
        """ Get: DropEndpoint() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropEventNotification(self) -> ServerDdlTriggerEvent:
        """ Get: DropEventNotification() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropEventSession(self) -> ServerDdlTriggerEvent:
        """ Get: DropEventSession() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropExtendedProcedure(self) -> ServerDdlTriggerEvent:
        """ Get: DropExtendedProcedure() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropExtendedProperty(self) -> ServerDdlTriggerEvent:
        """ Get: DropExtendedProperty() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropFulltextCatalog(self) -> ServerDdlTriggerEvent:
        """ Get: DropFulltextCatalog() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropFulltextIndex(self) -> ServerDdlTriggerEvent:
        """ Get: DropFulltextIndex() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropFulltextStoplist(self) -> ServerDdlTriggerEvent:
        """ Get: DropFulltextStoplist() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropFunction(self) -> ServerDdlTriggerEvent:
        """ Get: DropFunction() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropIndex(self) -> ServerDdlTriggerEvent:
        """ Get: DropIndex() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropLinkedServer(self) -> ServerDdlTriggerEvent:
        """ Get: DropLinkedServer() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropLinkedServerLogin(self) -> ServerDdlTriggerEvent:
        """ Get: DropLinkedServerLogin() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropLogin(self) -> ServerDdlTriggerEvent:
        """ Get: DropLogin() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropMasterKey(self) -> ServerDdlTriggerEvent:
        """ Get: DropMasterKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropMessage(self) -> ServerDdlTriggerEvent:
        """ Get: DropMessage() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropMessageType(self) -> ServerDdlTriggerEvent:
        """ Get: DropMessageType() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropPartitionFunction(self) -> ServerDdlTriggerEvent:
        """ Get: DropPartitionFunction() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropPartitionScheme(self) -> ServerDdlTriggerEvent:
        """ Get: DropPartitionScheme() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropPlanGuide(self) -> ServerDdlTriggerEvent:
        """ Get: DropPlanGuide() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropProcedure(self) -> ServerDdlTriggerEvent:
        """ Get: DropProcedure() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropQueue(self) -> ServerDdlTriggerEvent:
        """ Get: DropQueue() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropRemoteServer(self) -> ServerDdlTriggerEvent:
        """ Get: DropRemoteServer() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropRemoteServiceBinding(self) -> ServerDdlTriggerEvent:
        """ Get: DropRemoteServiceBinding() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropResourcePool(self) -> ServerDdlTriggerEvent:
        """ Get: DropResourcePool() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropRole(self) -> ServerDdlTriggerEvent:
        """ Get: DropRole() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropRoleMember(self) -> ServerDdlTriggerEvent:
        """ Get: DropRoleMember() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropRoute(self) -> ServerDdlTriggerEvent:
        """ Get: DropRoute() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropRule(self) -> ServerDdlTriggerEvent:
        """ Get: DropRule() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropSchema(self) -> ServerDdlTriggerEvent:
        """ Get: DropSchema() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropSearchPropertyList(self) -> ServerDdlTriggerEvent:
        """ Get: DropSearchPropertyList() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropSecurityPolicy(self) -> ServerDdlTriggerEvent:
        """ Get: DropSecurityPolicy() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropSequence(self) -> ServerDdlTriggerEvent:
        """ Get: DropSequence() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropServerAudit(self) -> ServerDdlTriggerEvent:
        """ Get: DropServerAudit() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropServerAuditSpecification(self) -> ServerDdlTriggerEvent:
        """ Get: DropServerAuditSpecification() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropServerRole(self) -> ServerDdlTriggerEvent:
        """ Get: DropServerRole() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropServerRoleMember(self) -> ServerDdlTriggerEvent:
        """ Get: DropServerRoleMember() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropService(self) -> ServerDdlTriggerEvent:
        """ Get: DropService() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropSignature(self) -> ServerDdlTriggerEvent:
        """ Get: DropSignature() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropSignatureSchemaObject(self) -> ServerDdlTriggerEvent:
        """ Get: DropSignatureSchemaObject() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropStatistics(self) -> ServerDdlTriggerEvent:
        """ Get: DropStatistics() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropSymmetricKey(self) -> ServerDdlTriggerEvent:
        """ Get: DropSymmetricKey() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropSynonym(self) -> ServerDdlTriggerEvent:
        """ Get: DropSynonym() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropTable(self) -> ServerDdlTriggerEvent:
        """ Get: DropTable() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropTrigger(self) -> ServerDdlTriggerEvent:
        """ Get: DropTrigger() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropType(self) -> ServerDdlTriggerEvent:
        """ Get: DropType() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropUser(self) -> ServerDdlTriggerEvent:
        """ Get: DropUser() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropView(self) -> ServerDdlTriggerEvent:
        """ Get: DropView() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropWorkloadGroup(self) -> ServerDdlTriggerEvent:
        """ Get: DropWorkloadGroup() -> ServerDdlTriggerEvent """
        ...

    @property
    def DropXmlSchemaCollection(self) -> ServerDdlTriggerEvent:
        """ Get: DropXmlSchemaCollection() -> ServerDdlTriggerEvent """
        ...

    @property
    def GrantDatabase(self) -> ServerDdlTriggerEvent:
        """ Get: GrantDatabase() -> ServerDdlTriggerEvent """
        ...

    @property
    def GrantServer(self) -> ServerDdlTriggerEvent:
        """ Get: GrantServer() -> ServerDdlTriggerEvent """
        ...

    @property
    def Logon(self) -> ServerDdlTriggerEvent:
        """ Get: Logon() -> ServerDdlTriggerEvent """
        ...

    @property
    def Rename(self) -> ServerDdlTriggerEvent:
        """ Get: Rename() -> ServerDdlTriggerEvent """
        ...

    @property
    def RevokeDatabase(self) -> ServerDdlTriggerEvent:
        """ Get: RevokeDatabase() -> ServerDdlTriggerEvent """
        ...

    @property
    def RevokeServer(self) -> ServerDdlTriggerEvent:
        """ Get: RevokeServer() -> ServerDdlTriggerEvent """
        ...

    @property
    def UnbindDefault(self) -> ServerDdlTriggerEvent:
        """ Get: UnbindDefault() -> ServerDdlTriggerEvent """
        ...

    @property
    def UnbindRule(self) -> ServerDdlTriggerEvent:
        """ Get: UnbindRule() -> ServerDdlTriggerEvent """
        ...

    @property
    def UpdateStatistics(self) -> ServerDdlTriggerEvent:
        """ Get: UpdateStatistics() -> ServerDdlTriggerEvent """
        ...


    @staticmethod
    def Add(eventLeft:ServerDdlTriggerEvent, eventRight:ServerDdlTriggerEvent): # -> ServerDdlTriggerEventSet
        """ Add(eventLeft: ServerDdlTriggerEvent, eventRight: ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:ServerDdlTriggerEvent, eventRight:ServerDdlTriggerEvent): # -> ServerDdlTriggerEventSet
        """ BitwiseOr(eventLeft: ServerDdlTriggerEvent, eventRight: ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: ServerDdlTriggerEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: ServerDdlTriggerEvent, eventRight: ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: ServerDdlTriggerEvent, eventRight: ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: ServerDdlTriggerEvent, eventRight: ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet """
        ...



class ServerDdlTriggerEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    ServerDdlTriggerEventSet()
    ServerDdlTriggerEventSet(eventSet: ServerDdlTriggerEventSet)
    ServerDdlTriggerEventSet(anEvent: ServerDdlTriggerEvent)
    ServerDdlTriggerEventSet(*events: Array[ServerDdlTriggerEvent])
    """
    @property
    def AddRoleMember(self) -> bool:
        """
        Get: AddRoleMember(self: ServerDdlTriggerEventSet) -> bool
        Set: AddRoleMember(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AddServerRoleMember(self) -> bool:
        """
        Get: AddServerRoleMember(self: ServerDdlTriggerEventSet) -> bool
        Set: AddServerRoleMember(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AddSignature(self) -> bool:
        """
        Get: AddSignature(self: ServerDdlTriggerEventSet) -> bool
        Set: AddSignature(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AddSignatureSchemaObject(self) -> bool:
        """
        Get: AddSignatureSchemaObject(self: ServerDdlTriggerEventSet) -> bool
        Set: AddSignatureSchemaObject(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterApplicationRole(self) -> bool:
        """
        Get: AlterApplicationRole(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterApplicationRole(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterAssembly(self) -> bool:
        """
        Get: AlterAssembly(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterAssembly(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterAsymmetricKey(self) -> bool:
        """
        Get: AlterAsymmetricKey(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterAsymmetricKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterAudit(self) -> bool:
        """
        Get: AlterAudit(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterAudit(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterAuthorizationDatabase(self) -> bool:
        """
        Get: AlterAuthorizationDatabase(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterAuthorizationDatabase(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterAuthorizationServer(self) -> bool:
        """
        Get: AlterAuthorizationServer(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterAuthorizationServer(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterAvailabilityGroup(self) -> bool:
        """
        Get: AlterAvailabilityGroup(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterAvailabilityGroup(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterBrokerPriority(self) -> bool:
        """
        Get: AlterBrokerPriority(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterBrokerPriority(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterCertificate(self) -> bool:
        """
        Get: AlterCertificate(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterCertificate(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterColumnEncryptionKey(self) -> bool:
        """
        Get: AlterColumnEncryptionKey(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterColumnEncryptionKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterCredential(self) -> bool:
        """
        Get: AlterCredential(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterCredential(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterCryptographicProvider(self) -> bool:
        """
        Get: AlterCryptographicProvider(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterCryptographicProvider(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterDatabase(self) -> bool:
        """
        Get: AlterDatabase(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterDatabase(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterDatabaseAuditSpecification(self) -> bool:
        """
        Get: AlterDatabaseAuditSpecification(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterDatabaseAuditSpecification(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterDatabaseEncryptionKey(self) -> bool:
        """
        Get: AlterDatabaseEncryptionKey(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterDatabaseEncryptionKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterEndpoint(self) -> bool:
        """
        Get: AlterEndpoint(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterEndpoint(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterEventSession(self) -> bool:
        """
        Get: AlterEventSession(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterEventSession(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterExtendedProperty(self) -> bool:
        """
        Get: AlterExtendedProperty(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterExtendedProperty(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterFulltextCatalog(self) -> bool:
        """
        Get: AlterFulltextCatalog(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterFulltextCatalog(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterFulltextIndex(self) -> bool:
        """
        Get: AlterFulltextIndex(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterFulltextIndex(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterFulltextStoplist(self) -> bool:
        """
        Get: AlterFulltextStoplist(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterFulltextStoplist(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterFunction(self) -> bool:
        """
        Get: AlterFunction(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterFunction(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterIndex(self) -> bool:
        """
        Get: AlterIndex(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterIndex(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterInstance(self) -> bool:
        """
        Get: AlterInstance(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterInstance(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterLinkedServer(self) -> bool:
        """
        Get: AlterLinkedServer(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterLinkedServer(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterLogin(self) -> bool:
        """
        Get: AlterLogin(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterLogin(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterMasterKey(self) -> bool:
        """
        Get: AlterMasterKey(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterMasterKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterMessage(self) -> bool:
        """
        Get: AlterMessage(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterMessage(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterMessageType(self) -> bool:
        """
        Get: AlterMessageType(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterMessageType(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterPartitionFunction(self) -> bool:
        """
        Get: AlterPartitionFunction(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterPartitionFunction(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterPartitionScheme(self) -> bool:
        """
        Get: AlterPartitionScheme(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterPartitionScheme(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterPlanGuide(self) -> bool:
        """
        Get: AlterPlanGuide(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterPlanGuide(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterProcedure(self) -> bool:
        """
        Get: AlterProcedure(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterProcedure(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterQueue(self) -> bool:
        """
        Get: AlterQueue(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterQueue(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterRemoteServer(self) -> bool:
        """
        Get: AlterRemoteServer(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterRemoteServer(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterRemoteServiceBinding(self) -> bool:
        """
        Get: AlterRemoteServiceBinding(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterRemoteServiceBinding(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterResourceGovernorConfig(self) -> bool:
        """
        Get: AlterResourceGovernorConfig(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterResourceGovernorConfig(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterResourcePool(self) -> bool:
        """
        Get: AlterResourcePool(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterResourcePool(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterRole(self) -> bool:
        """
        Get: AlterRole(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterRole(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterRoute(self) -> bool:
        """
        Get: AlterRoute(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterRoute(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterSchema(self) -> bool:
        """
        Get: AlterSchema(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterSchema(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterSearchPropertyList(self) -> bool:
        """
        Get: AlterSearchPropertyList(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterSearchPropertyList(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterSecurityPolicy(self) -> bool:
        """
        Get: AlterSecurityPolicy(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterSecurityPolicy(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterSequence(self) -> bool:
        """
        Get: AlterSequence(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterSequence(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterServerAudit(self) -> bool:
        """
        Get: AlterServerAudit(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterServerAudit(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterServerAuditSpecification(self) -> bool:
        """
        Get: AlterServerAuditSpecification(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterServerAuditSpecification(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterServerRole(self) -> bool:
        """
        Get: AlterServerRole(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterServerRole(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterService(self) -> bool:
        """
        Get: AlterService(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterService(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterServiceMasterKey(self) -> bool:
        """
        Get: AlterServiceMasterKey(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterServiceMasterKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterSymmetricKey(self) -> bool:
        """
        Get: AlterSymmetricKey(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterSymmetricKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterTable(self) -> bool:
        """
        Get: AlterTable(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterTable(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterTrigger(self) -> bool:
        """
        Get: AlterTrigger(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterTrigger(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterUser(self) -> bool:
        """
        Get: AlterUser(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterUser(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterView(self) -> bool:
        """
        Get: AlterView(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterView(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterWorkloadGroup(self) -> bool:
        """
        Get: AlterWorkloadGroup(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterWorkloadGroup(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def AlterXmlSchemaCollection(self) -> bool:
        """
        Get: AlterXmlSchemaCollection(self: ServerDdlTriggerEventSet) -> bool
        Set: AlterXmlSchemaCollection(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def BindDefault(self) -> bool:
        """
        Get: BindDefault(self: ServerDdlTriggerEventSet) -> bool
        Set: BindDefault(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def BindRule(self) -> bool:
        """
        Get: BindRule(self: ServerDdlTriggerEventSet) -> bool
        Set: BindRule(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateApplicationRole(self) -> bool:
        """
        Get: CreateApplicationRole(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateApplicationRole(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateAssembly(self) -> bool:
        """
        Get: CreateAssembly(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateAssembly(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateAsymmetricKey(self) -> bool:
        """
        Get: CreateAsymmetricKey(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateAsymmetricKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateAudit(self) -> bool:
        """
        Get: CreateAudit(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateAudit(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateAvailabilityGroup(self) -> bool:
        """
        Get: CreateAvailabilityGroup(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateAvailabilityGroup(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateBrokerPriority(self) -> bool:
        """
        Get: CreateBrokerPriority(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateBrokerPriority(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateCertificate(self) -> bool:
        """
        Get: CreateCertificate(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateCertificate(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateColumnEncryptionKey(self) -> bool:
        """
        Get: CreateColumnEncryptionKey(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateColumnEncryptionKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateColumnMasterKey(self) -> bool:
        """
        Get: CreateColumnMasterKey(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateColumnMasterKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateContract(self) -> bool:
        """
        Get: CreateContract(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateContract(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateCredential(self) -> bool:
        """
        Get: CreateCredential(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateCredential(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateCryptographicProvider(self) -> bool:
        """
        Get: CreateCryptographicProvider(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateCryptographicProvider(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateDatabase(self) -> bool:
        """
        Get: CreateDatabase(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateDatabase(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateDatabaseAuditSpecification(self) -> bool:
        """
        Get: CreateDatabaseAuditSpecification(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateDatabaseAuditSpecification(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateDatabaseEncryptionKey(self) -> bool:
        """
        Get: CreateDatabaseEncryptionKey(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateDatabaseEncryptionKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateDefault(self) -> bool:
        """
        Get: CreateDefault(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateDefault(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateEndpoint(self) -> bool:
        """
        Get: CreateEndpoint(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateEndpoint(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateEventNotification(self) -> bool:
        """
        Get: CreateEventNotification(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateEventNotification(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateEventSession(self) -> bool:
        """
        Get: CreateEventSession(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateEventSession(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateExtendedProcedure(self) -> bool:
        """
        Get: CreateExtendedProcedure(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateExtendedProcedure(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateExtendedProperty(self) -> bool:
        """
        Get: CreateExtendedProperty(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateExtendedProperty(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateFulltextCatalog(self) -> bool:
        """
        Get: CreateFulltextCatalog(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateFulltextCatalog(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateFulltextIndex(self) -> bool:
        """
        Get: CreateFulltextIndex(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateFulltextIndex(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateFulltextStoplist(self) -> bool:
        """
        Get: CreateFulltextStoplist(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateFulltextStoplist(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateFunction(self) -> bool:
        """
        Get: CreateFunction(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateFunction(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateIndex(self) -> bool:
        """
        Get: CreateIndex(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateIndex(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateLinkedServer(self) -> bool:
        """
        Get: CreateLinkedServer(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateLinkedServer(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateLinkedServerLogin(self) -> bool:
        """
        Get: CreateLinkedServerLogin(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateLinkedServerLogin(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateLogin(self) -> bool:
        """
        Get: CreateLogin(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateLogin(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateMasterKey(self) -> bool:
        """
        Get: CreateMasterKey(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateMasterKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateMessage(self) -> bool:
        """
        Get: CreateMessage(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateMessage(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateMessageType(self) -> bool:
        """
        Get: CreateMessageType(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateMessageType(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreatePartitionFunction(self) -> bool:
        """
        Get: CreatePartitionFunction(self: ServerDdlTriggerEventSet) -> bool
        Set: CreatePartitionFunction(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreatePartitionScheme(self) -> bool:
        """
        Get: CreatePartitionScheme(self: ServerDdlTriggerEventSet) -> bool
        Set: CreatePartitionScheme(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreatePlanGuide(self) -> bool:
        """
        Get: CreatePlanGuide(self: ServerDdlTriggerEventSet) -> bool
        Set: CreatePlanGuide(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateProcedure(self) -> bool:
        """
        Get: CreateProcedure(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateProcedure(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateQueue(self) -> bool:
        """
        Get: CreateQueue(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateQueue(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateRemoteServer(self) -> bool:
        """
        Get: CreateRemoteServer(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateRemoteServer(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateRemoteServiceBinding(self) -> bool:
        """
        Get: CreateRemoteServiceBinding(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateRemoteServiceBinding(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateResourcePool(self) -> bool:
        """
        Get: CreateResourcePool(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateResourcePool(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateRole(self) -> bool:
        """
        Get: CreateRole(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateRole(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateRoute(self) -> bool:
        """
        Get: CreateRoute(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateRoute(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateRule(self) -> bool:
        """
        Get: CreateRule(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateRule(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSchema(self) -> bool:
        """
        Get: CreateSchema(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateSchema(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSearchPropertyList(self) -> bool:
        """
        Get: CreateSearchPropertyList(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateSearchPropertyList(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSecurityPolicy(self) -> bool:
        """
        Get: CreateSecurityPolicy(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateSecurityPolicy(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSequence(self) -> bool:
        """
        Get: CreateSequence(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateSequence(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateServerAudit(self) -> bool:
        """
        Get: CreateServerAudit(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateServerAudit(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateServerAuditSpecification(self) -> bool:
        """
        Get: CreateServerAuditSpecification(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateServerAuditSpecification(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateServerRole(self) -> bool:
        """
        Get: CreateServerRole(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateServerRole(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateService(self) -> bool:
        """
        Get: CreateService(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateService(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSpatialIndex(self) -> bool:
        """
        Get: CreateSpatialIndex(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateSpatialIndex(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateStatistics(self) -> bool:
        """
        Get: CreateStatistics(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateStatistics(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSymmetricKey(self) -> bool:
        """
        Get: CreateSymmetricKey(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateSymmetricKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateSynonym(self) -> bool:
        """
        Get: CreateSynonym(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateSynonym(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateTable(self) -> bool:
        """
        Get: CreateTable(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateTable(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateTrigger(self) -> bool:
        """
        Get: CreateTrigger(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateTrigger(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateType(self) -> bool:
        """
        Get: CreateType(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateType(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateUser(self) -> bool:
        """
        Get: CreateUser(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateUser(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateView(self) -> bool:
        """
        Get: CreateView(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateView(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateWorkloadGroup(self) -> bool:
        """
        Get: CreateWorkloadGroup(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateWorkloadGroup(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateXmlIndex(self) -> bool:
        """
        Get: CreateXmlIndex(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateXmlIndex(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def CreateXmlSchemaCollection(self) -> bool:
        """
        Get: CreateXmlSchemaCollection(self: ServerDdlTriggerEventSet) -> bool
        Set: CreateXmlSchemaCollection(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlAuthorizationServerEventsEvents(self) -> bool:
        """
        Get: DdlAuthorizationServerEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlAuthorizationServerEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlAvailabilityGroupEventsEvents(self) -> bool:
        """
        Get: DdlAvailabilityGroupEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlAvailabilityGroupEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlCredentialEventsEvents(self) -> bool:
        """
        Get: DdlCredentialEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlCredentialEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlCryptographicProviderEventsEvents(self) -> bool:
        """
        Get: DdlCryptographicProviderEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlCryptographicProviderEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlDatabaseEventsEvents(self) -> bool:
        """
        Get: DdlDatabaseEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlDatabaseEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlEndpointEventsEvents(self) -> bool:
        """
        Get: DdlEndpointEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlEndpointEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlEventSessionEventsEvents(self) -> bool:
        """
        Get: DdlEventSessionEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlEventSessionEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlExtendedProcedureEventsEvents(self) -> bool:
        """
        Get: DdlExtendedProcedureEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlExtendedProcedureEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlGdrServerEventsEvents(self) -> bool:
        """
        Get: DdlGdrServerEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlGdrServerEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlLinkedServerEventsEvents(self) -> bool:
        """
        Get: DdlLinkedServerEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlLinkedServerEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlLinkedServerLoginEventsEvents(self) -> bool:
        """
        Get: DdlLinkedServerLoginEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlLinkedServerLoginEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlLoginEventsEvents(self) -> bool:
        """
        Get: DdlLoginEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlLoginEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlMessageEventsEvents(self) -> bool:
        """
        Get: DdlMessageEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlMessageEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlRemoteServerEventsEvents(self) -> bool:
        """
        Get: DdlRemoteServerEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlRemoteServerEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlResourceGovernorEventsEvents(self) -> bool:
        """
        Get: DdlResourceGovernorEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlResourceGovernorEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlResourcePoolEvents(self) -> bool:
        """
        Get: DdlResourcePoolEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlResourcePoolEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlServerAuditEventsEvents(self) -> bool:
        """
        Get: DdlServerAuditEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlServerAuditEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlServerAuditSpecificationEventsEvents(self) -> bool:
        """
        Get: DdlServerAuditSpecificationEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlServerAuditSpecificationEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlServerLevelEventsEvents(self) -> bool:
        """
        Get: DdlServerLevelEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlServerLevelEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlServerSecurityEventsEvents(self) -> bool:
        """
        Get: DdlServerSecurityEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlServerSecurityEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlServiceMasterKeyEventsEvents(self) -> bool:
        """
        Get: DdlServiceMasterKeyEventsEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlServiceMasterKeyEventsEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DdlWorkloadGroupEvents(self) -> bool:
        """
        Get: DdlWorkloadGroupEvents(self: ServerDdlTriggerEventSet) -> bool
        Set: DdlWorkloadGroupEvents(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DenyDatabase(self) -> bool:
        """
        Get: DenyDatabase(self: ServerDdlTriggerEventSet) -> bool
        Set: DenyDatabase(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DenyServer(self) -> bool:
        """
        Get: DenyServer(self: ServerDdlTriggerEventSet) -> bool
        Set: DenyServer(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def Dirty(self) -> bool:
        """
        Get: Dirty(self: ServerDdlTriggerEventSet) -> bool
        Set: Dirty(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropApplicationRole(self) -> bool:
        """
        Get: DropApplicationRole(self: ServerDdlTriggerEventSet) -> bool
        Set: DropApplicationRole(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropAssembly(self) -> bool:
        """
        Get: DropAssembly(self: ServerDdlTriggerEventSet) -> bool
        Set: DropAssembly(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropAsymmetricKey(self) -> bool:
        """
        Get: DropAsymmetricKey(self: ServerDdlTriggerEventSet) -> bool
        Set: DropAsymmetricKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropAudit(self) -> bool:
        """
        Get: DropAudit(self: ServerDdlTriggerEventSet) -> bool
        Set: DropAudit(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropAvailabilityGroup(self) -> bool:
        """
        Get: DropAvailabilityGroup(self: ServerDdlTriggerEventSet) -> bool
        Set: DropAvailabilityGroup(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropBrokerPriority(self) -> bool:
        """
        Get: DropBrokerPriority(self: ServerDdlTriggerEventSet) -> bool
        Set: DropBrokerPriority(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropCertificate(self) -> bool:
        """
        Get: DropCertificate(self: ServerDdlTriggerEventSet) -> bool
        Set: DropCertificate(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropColumnEncryptionKey(self) -> bool:
        """
        Get: DropColumnEncryptionKey(self: ServerDdlTriggerEventSet) -> bool
        Set: DropColumnEncryptionKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropColumnMasterKey(self) -> bool:
        """
        Get: DropColumnMasterKey(self: ServerDdlTriggerEventSet) -> bool
        Set: DropColumnMasterKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropContract(self) -> bool:
        """
        Get: DropContract(self: ServerDdlTriggerEventSet) -> bool
        Set: DropContract(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropCredential(self) -> bool:
        """
        Get: DropCredential(self: ServerDdlTriggerEventSet) -> bool
        Set: DropCredential(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropCryptographicProvider(self) -> bool:
        """
        Get: DropCryptographicProvider(self: ServerDdlTriggerEventSet) -> bool
        Set: DropCryptographicProvider(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropDatabase(self) -> bool:
        """
        Get: DropDatabase(self: ServerDdlTriggerEventSet) -> bool
        Set: DropDatabase(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropDatabaseAuditSpecification(self) -> bool:
        """
        Get: DropDatabaseAuditSpecification(self: ServerDdlTriggerEventSet) -> bool
        Set: DropDatabaseAuditSpecification(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropDatabaseEncryptionKey(self) -> bool:
        """
        Get: DropDatabaseEncryptionKey(self: ServerDdlTriggerEventSet) -> bool
        Set: DropDatabaseEncryptionKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropDefault(self) -> bool:
        """
        Get: DropDefault(self: ServerDdlTriggerEventSet) -> bool
        Set: DropDefault(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropEndpoint(self) -> bool:
        """
        Get: DropEndpoint(self: ServerDdlTriggerEventSet) -> bool
        Set: DropEndpoint(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropEventNotification(self) -> bool:
        """
        Get: DropEventNotification(self: ServerDdlTriggerEventSet) -> bool
        Set: DropEventNotification(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropEventSession(self) -> bool:
        """
        Get: DropEventSession(self: ServerDdlTriggerEventSet) -> bool
        Set: DropEventSession(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropExtendedProcedure(self) -> bool:
        """
        Get: DropExtendedProcedure(self: ServerDdlTriggerEventSet) -> bool
        Set: DropExtendedProcedure(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropExtendedProperty(self) -> bool:
        """
        Get: DropExtendedProperty(self: ServerDdlTriggerEventSet) -> bool
        Set: DropExtendedProperty(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropFulltextCatalog(self) -> bool:
        """
        Get: DropFulltextCatalog(self: ServerDdlTriggerEventSet) -> bool
        Set: DropFulltextCatalog(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropFulltextIndex(self) -> bool:
        """
        Get: DropFulltextIndex(self: ServerDdlTriggerEventSet) -> bool
        Set: DropFulltextIndex(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropFulltextStoplist(self) -> bool:
        """
        Get: DropFulltextStoplist(self: ServerDdlTriggerEventSet) -> bool
        Set: DropFulltextStoplist(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropFunction(self) -> bool:
        """
        Get: DropFunction(self: ServerDdlTriggerEventSet) -> bool
        Set: DropFunction(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropIndex(self) -> bool:
        """
        Get: DropIndex(self: ServerDdlTriggerEventSet) -> bool
        Set: DropIndex(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropLinkedServer(self) -> bool:
        """
        Get: DropLinkedServer(self: ServerDdlTriggerEventSet) -> bool
        Set: DropLinkedServer(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropLinkedServerLogin(self) -> bool:
        """
        Get: DropLinkedServerLogin(self: ServerDdlTriggerEventSet) -> bool
        Set: DropLinkedServerLogin(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropLogin(self) -> bool:
        """
        Get: DropLogin(self: ServerDdlTriggerEventSet) -> bool
        Set: DropLogin(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropMasterKey(self) -> bool:
        """
        Get: DropMasterKey(self: ServerDdlTriggerEventSet) -> bool
        Set: DropMasterKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropMessage(self) -> bool:
        """
        Get: DropMessage(self: ServerDdlTriggerEventSet) -> bool
        Set: DropMessage(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropMessageType(self) -> bool:
        """
        Get: DropMessageType(self: ServerDdlTriggerEventSet) -> bool
        Set: DropMessageType(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropPartitionFunction(self) -> bool:
        """
        Get: DropPartitionFunction(self: ServerDdlTriggerEventSet) -> bool
        Set: DropPartitionFunction(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropPartitionScheme(self) -> bool:
        """
        Get: DropPartitionScheme(self: ServerDdlTriggerEventSet) -> bool
        Set: DropPartitionScheme(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropPlanGuide(self) -> bool:
        """
        Get: DropPlanGuide(self: ServerDdlTriggerEventSet) -> bool
        Set: DropPlanGuide(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropProcedure(self) -> bool:
        """
        Get: DropProcedure(self: ServerDdlTriggerEventSet) -> bool
        Set: DropProcedure(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropQueue(self) -> bool:
        """
        Get: DropQueue(self: ServerDdlTriggerEventSet) -> bool
        Set: DropQueue(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropRemoteServer(self) -> bool:
        """
        Get: DropRemoteServer(self: ServerDdlTriggerEventSet) -> bool
        Set: DropRemoteServer(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropRemoteServiceBinding(self) -> bool:
        """
        Get: DropRemoteServiceBinding(self: ServerDdlTriggerEventSet) -> bool
        Set: DropRemoteServiceBinding(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropResourcePool(self) -> bool:
        """
        Get: DropResourcePool(self: ServerDdlTriggerEventSet) -> bool
        Set: DropResourcePool(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropRole(self) -> bool:
        """
        Get: DropRole(self: ServerDdlTriggerEventSet) -> bool
        Set: DropRole(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropRoleMember(self) -> bool:
        """
        Get: DropRoleMember(self: ServerDdlTriggerEventSet) -> bool
        Set: DropRoleMember(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropRoute(self) -> bool:
        """
        Get: DropRoute(self: ServerDdlTriggerEventSet) -> bool
        Set: DropRoute(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropRule(self) -> bool:
        """
        Get: DropRule(self: ServerDdlTriggerEventSet) -> bool
        Set: DropRule(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSchema(self) -> bool:
        """
        Get: DropSchema(self: ServerDdlTriggerEventSet) -> bool
        Set: DropSchema(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSearchPropertyList(self) -> bool:
        """
        Get: DropSearchPropertyList(self: ServerDdlTriggerEventSet) -> bool
        Set: DropSearchPropertyList(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSecurityPolicy(self) -> bool:
        """
        Get: DropSecurityPolicy(self: ServerDdlTriggerEventSet) -> bool
        Set: DropSecurityPolicy(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSequence(self) -> bool:
        """
        Get: DropSequence(self: ServerDdlTriggerEventSet) -> bool
        Set: DropSequence(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropServerAudit(self) -> bool:
        """
        Get: DropServerAudit(self: ServerDdlTriggerEventSet) -> bool
        Set: DropServerAudit(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropServerAuditSpecification(self) -> bool:
        """
        Get: DropServerAuditSpecification(self: ServerDdlTriggerEventSet) -> bool
        Set: DropServerAuditSpecification(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropServerRole(self) -> bool:
        """
        Get: DropServerRole(self: ServerDdlTriggerEventSet) -> bool
        Set: DropServerRole(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropServerRoleMember(self) -> bool:
        """
        Get: DropServerRoleMember(self: ServerDdlTriggerEventSet) -> bool
        Set: DropServerRoleMember(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropService(self) -> bool:
        """
        Get: DropService(self: ServerDdlTriggerEventSet) -> bool
        Set: DropService(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSignature(self) -> bool:
        """
        Get: DropSignature(self: ServerDdlTriggerEventSet) -> bool
        Set: DropSignature(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSignatureSchemaObject(self) -> bool:
        """
        Get: DropSignatureSchemaObject(self: ServerDdlTriggerEventSet) -> bool
        Set: DropSignatureSchemaObject(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropStatistics(self) -> bool:
        """
        Get: DropStatistics(self: ServerDdlTriggerEventSet) -> bool
        Set: DropStatistics(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSymmetricKey(self) -> bool:
        """
        Get: DropSymmetricKey(self: ServerDdlTriggerEventSet) -> bool
        Set: DropSymmetricKey(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropSynonym(self) -> bool:
        """
        Get: DropSynonym(self: ServerDdlTriggerEventSet) -> bool
        Set: DropSynonym(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropTable(self) -> bool:
        """
        Get: DropTable(self: ServerDdlTriggerEventSet) -> bool
        Set: DropTable(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropTrigger(self) -> bool:
        """
        Get: DropTrigger(self: ServerDdlTriggerEventSet) -> bool
        Set: DropTrigger(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropType(self) -> bool:
        """
        Get: DropType(self: ServerDdlTriggerEventSet) -> bool
        Set: DropType(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropUser(self) -> bool:
        """
        Get: DropUser(self: ServerDdlTriggerEventSet) -> bool
        Set: DropUser(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropView(self) -> bool:
        """
        Get: DropView(self: ServerDdlTriggerEventSet) -> bool
        Set: DropView(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropWorkloadGroup(self) -> bool:
        """
        Get: DropWorkloadGroup(self: ServerDdlTriggerEventSet) -> bool
        Set: DropWorkloadGroup(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def DropXmlSchemaCollection(self) -> bool:
        """
        Get: DropXmlSchemaCollection(self: ServerDdlTriggerEventSet) -> bool
        Set: DropXmlSchemaCollection(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def GrantDatabase(self) -> bool:
        """
        Get: GrantDatabase(self: ServerDdlTriggerEventSet) -> bool
        Set: GrantDatabase(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def GrantServer(self) -> bool:
        """
        Get: GrantServer(self: ServerDdlTriggerEventSet) -> bool
        Set: GrantServer(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def Logon(self) -> bool:
        """
        Get: Logon(self: ServerDdlTriggerEventSet) -> bool
        Set: Logon(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def Rename(self) -> bool:
        """
        Get: Rename(self: ServerDdlTriggerEventSet) -> bool
        Set: Rename(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def RevokeDatabase(self) -> bool:
        """
        Get: RevokeDatabase(self: ServerDdlTriggerEventSet) -> bool
        Set: RevokeDatabase(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def RevokeServer(self) -> bool:
        """
        Get: RevokeServer(self: ServerDdlTriggerEventSet) -> bool
        Set: RevokeServer(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def UnbindDefault(self) -> bool:
        """
        Get: UnbindDefault(self: ServerDdlTriggerEventSet) -> bool
        Set: UnbindDefault(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def UnbindRule(self) -> bool:
        """
        Get: UnbindRule(self: ServerDdlTriggerEventSet) -> bool
        Set: UnbindRule(self: ServerDdlTriggerEventSet) = value
        """
        ...

    @property
    def UpdateStatistics(self) -> bool:
        """
        Get: UpdateStatistics(self: ServerDdlTriggerEventSet) -> bool
        Set: UpdateStatistics(self: ServerDdlTriggerEventSet) = value
        """
        ...


    def Add(self, *__args:ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet:
        """
        Add(self: ServerDdlTriggerEventSet, anEvent: ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet
        Add(eventSet: ServerDdlTriggerEventSet, anEvent: ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet
        """
        ...

    def Remove(self, anEvent:ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet:
        """ Remove(self: ServerDdlTriggerEventSet, anEvent: ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:ServerDdlTriggerEventSet, anEvent:ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet:
        """ Subtract(eventSet: ServerDdlTriggerEventSet, anEvent: ServerDdlTriggerEvent) -> ServerDdlTriggerEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: ServerDdlTriggerEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class ServerDdlTriggerExecutionContext(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ServerDdlTriggerExecutionContext, values: Caller (1), ExecuteAsLogin (2), Self (3) """
    Caller: ServerDdlTriggerExecutionContext = ...
    ExecuteAsLogin: ServerDdlTriggerExecutionContext = ...
    Self: ServerDdlTriggerExecutionContext = ...
    value__ = ...


class ServerEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AddRoleMember(self) -> ServerEvent:
        """ Get: AddRoleMember() -> ServerEvent """
        ...

    @property
    def AddServerRoleMember(self) -> ServerEvent:
        """ Get: AddServerRoleMember() -> ServerEvent """
        ...

    @property
    def AddSignature(self) -> ServerEvent:
        """ Get: AddSignature() -> ServerEvent """
        ...

    @property
    def AddSignatureSchemaObject(self) -> ServerEvent:
        """ Get: AddSignatureSchemaObject() -> ServerEvent """
        ...

    @property
    def AlterApplicationRole(self) -> ServerEvent:
        """ Get: AlterApplicationRole() -> ServerEvent """
        ...

    @property
    def AlterAssembly(self) -> ServerEvent:
        """ Get: AlterAssembly() -> ServerEvent """
        ...

    @property
    def AlterAsymmetricKey(self) -> ServerEvent:
        """ Get: AlterAsymmetricKey() -> ServerEvent """
        ...

    @property
    def AlterAudit(self) -> ServerEvent:
        """ Get: AlterAudit() -> ServerEvent """
        ...

    @property
    def AlterAuthorizationDatabase(self) -> ServerEvent:
        """ Get: AlterAuthorizationDatabase() -> ServerEvent """
        ...

    @property
    def AlterAuthorizationServer(self) -> ServerEvent:
        """ Get: AlterAuthorizationServer() -> ServerEvent """
        ...

    @property
    def AlterAvailabilityGroup(self) -> ServerEvent:
        """ Get: AlterAvailabilityGroup() -> ServerEvent """
        ...

    @property
    def AlterBrokerPriority(self) -> ServerEvent:
        """ Get: AlterBrokerPriority() -> ServerEvent """
        ...

    @property
    def AlterCertificate(self) -> ServerEvent:
        """ Get: AlterCertificate() -> ServerEvent """
        ...

    @property
    def AlterColumnEncryptionKey(self) -> ServerEvent:
        """ Get: AlterColumnEncryptionKey() -> ServerEvent """
        ...

    @property
    def AlterCredential(self) -> ServerEvent:
        """ Get: AlterCredential() -> ServerEvent """
        ...

    @property
    def AlterCryptographicProvider(self) -> ServerEvent:
        """ Get: AlterCryptographicProvider() -> ServerEvent """
        ...

    @property
    def AlterDatabase(self) -> ServerEvent:
        """ Get: AlterDatabase() -> ServerEvent """
        ...

    @property
    def AlterDatabaseAuditSpecification(self) -> ServerEvent:
        """ Get: AlterDatabaseAuditSpecification() -> ServerEvent """
        ...

    @property
    def AlterDatabaseEncryptionKey(self) -> ServerEvent:
        """ Get: AlterDatabaseEncryptionKey() -> ServerEvent """
        ...

    @property
    def AlterEndpoint(self) -> ServerEvent:
        """ Get: AlterEndpoint() -> ServerEvent """
        ...

    @property
    def AlterEventSession(self) -> ServerEvent:
        """ Get: AlterEventSession() -> ServerEvent """
        ...

    @property
    def AlterExtendedProperty(self) -> ServerEvent:
        """ Get: AlterExtendedProperty() -> ServerEvent """
        ...

    @property
    def AlterFulltextCatalog(self) -> ServerEvent:
        """ Get: AlterFulltextCatalog() -> ServerEvent """
        ...

    @property
    def AlterFulltextIndex(self) -> ServerEvent:
        """ Get: AlterFulltextIndex() -> ServerEvent """
        ...

    @property
    def AlterFulltextStoplist(self) -> ServerEvent:
        """ Get: AlterFulltextStoplist() -> ServerEvent """
        ...

    @property
    def AlterFunction(self) -> ServerEvent:
        """ Get: AlterFunction() -> ServerEvent """
        ...

    @property
    def AlterIndex(self) -> ServerEvent:
        """ Get: AlterIndex() -> ServerEvent """
        ...

    @property
    def AlterInstance(self) -> ServerEvent:
        """ Get: AlterInstance() -> ServerEvent """
        ...

    @property
    def AlterLinkedServer(self) -> ServerEvent:
        """ Get: AlterLinkedServer() -> ServerEvent """
        ...

    @property
    def AlterLogin(self) -> ServerEvent:
        """ Get: AlterLogin() -> ServerEvent """
        ...

    @property
    def AlterMasterKey(self) -> ServerEvent:
        """ Get: AlterMasterKey() -> ServerEvent """
        ...

    @property
    def AlterMessage(self) -> ServerEvent:
        """ Get: AlterMessage() -> ServerEvent """
        ...

    @property
    def AlterMessageType(self) -> ServerEvent:
        """ Get: AlterMessageType() -> ServerEvent """
        ...

    @property
    def AlterPartitionFunction(self) -> ServerEvent:
        """ Get: AlterPartitionFunction() -> ServerEvent """
        ...

    @property
    def AlterPartitionScheme(self) -> ServerEvent:
        """ Get: AlterPartitionScheme() -> ServerEvent """
        ...

    @property
    def AlterPlanGuide(self) -> ServerEvent:
        """ Get: AlterPlanGuide() -> ServerEvent """
        ...

    @property
    def AlterProcedure(self) -> ServerEvent:
        """ Get: AlterProcedure() -> ServerEvent """
        ...

    @property
    def AlterQueue(self) -> ServerEvent:
        """ Get: AlterQueue() -> ServerEvent """
        ...

    @property
    def AlterRemoteServer(self) -> ServerEvent:
        """ Get: AlterRemoteServer() -> ServerEvent """
        ...

    @property
    def AlterRemoteServiceBinding(self) -> ServerEvent:
        """ Get: AlterRemoteServiceBinding() -> ServerEvent """
        ...

    @property
    def AlterResourceGovernorConfig(self) -> ServerEvent:
        """ Get: AlterResourceGovernorConfig() -> ServerEvent """
        ...

    @property
    def AlterResourcePool(self) -> ServerEvent:
        """ Get: AlterResourcePool() -> ServerEvent """
        ...

    @property
    def AlterRole(self) -> ServerEvent:
        """ Get: AlterRole() -> ServerEvent """
        ...

    @property
    def AlterRoute(self) -> ServerEvent:
        """ Get: AlterRoute() -> ServerEvent """
        ...

    @property
    def AlterSchema(self) -> ServerEvent:
        """ Get: AlterSchema() -> ServerEvent """
        ...

    @property
    def AlterSearchPropertyList(self) -> ServerEvent:
        """ Get: AlterSearchPropertyList() -> ServerEvent """
        ...

    @property
    def AlterSecurityPolicy(self) -> ServerEvent:
        """ Get: AlterSecurityPolicy() -> ServerEvent """
        ...

    @property
    def AlterSequence(self) -> ServerEvent:
        """ Get: AlterSequence() -> ServerEvent """
        ...

    @property
    def AlterServerAudit(self) -> ServerEvent:
        """ Get: AlterServerAudit() -> ServerEvent """
        ...

    @property
    def AlterServerAuditSpecification(self) -> ServerEvent:
        """ Get: AlterServerAuditSpecification() -> ServerEvent """
        ...

    @property
    def AlterServerConfiguration(self) -> ServerEvent:
        """ Get: AlterServerConfiguration() -> ServerEvent """
        ...

    @property
    def AlterServerRole(self) -> ServerEvent:
        """ Get: AlterServerRole() -> ServerEvent """
        ...

    @property
    def AlterService(self) -> ServerEvent:
        """ Get: AlterService() -> ServerEvent """
        ...

    @property
    def AlterServiceMasterKey(self) -> ServerEvent:
        """ Get: AlterServiceMasterKey() -> ServerEvent """
        ...

    @property
    def AlterSymmetricKey(self) -> ServerEvent:
        """ Get: AlterSymmetricKey() -> ServerEvent """
        ...

    @property
    def AlterTable(self) -> ServerEvent:
        """ Get: AlterTable() -> ServerEvent """
        ...

    @property
    def AlterTrigger(self) -> ServerEvent:
        """ Get: AlterTrigger() -> ServerEvent """
        ...

    @property
    def AlterUser(self) -> ServerEvent:
        """ Get: AlterUser() -> ServerEvent """
        ...

    @property
    def AlterView(self) -> ServerEvent:
        """ Get: AlterView() -> ServerEvent """
        ...

    @property
    def AlterWorkloadGroup(self) -> ServerEvent:
        """ Get: AlterWorkloadGroup() -> ServerEvent """
        ...

    @property
    def AlterXmlSchemaCollection(self) -> ServerEvent:
        """ Get: AlterXmlSchemaCollection() -> ServerEvent """
        ...

    @property
    def BindDefault(self) -> ServerEvent:
        """ Get: BindDefault() -> ServerEvent """
        ...

    @property
    def BindRule(self) -> ServerEvent:
        """ Get: BindRule() -> ServerEvent """
        ...

    @property
    def CreateApplicationRole(self) -> ServerEvent:
        """ Get: CreateApplicationRole() -> ServerEvent """
        ...

    @property
    def CreateAssembly(self) -> ServerEvent:
        """ Get: CreateAssembly() -> ServerEvent """
        ...

    @property
    def CreateAsymmetricKey(self) -> ServerEvent:
        """ Get: CreateAsymmetricKey() -> ServerEvent """
        ...

    @property
    def CreateAudit(self) -> ServerEvent:
        """ Get: CreateAudit() -> ServerEvent """
        ...

    @property
    def CreateAvailabilityGroup(self) -> ServerEvent:
        """ Get: CreateAvailabilityGroup() -> ServerEvent """
        ...

    @property
    def CreateBrokerPriority(self) -> ServerEvent:
        """ Get: CreateBrokerPriority() -> ServerEvent """
        ...

    @property
    def CreateCertificate(self) -> ServerEvent:
        """ Get: CreateCertificate() -> ServerEvent """
        ...

    @property
    def CreateColumnEncryptionKey(self) -> ServerEvent:
        """ Get: CreateColumnEncryptionKey() -> ServerEvent """
        ...

    @property
    def CreateColumnMasterKey(self) -> ServerEvent:
        """ Get: CreateColumnMasterKey() -> ServerEvent """
        ...

    @property
    def CreateContract(self) -> ServerEvent:
        """ Get: CreateContract() -> ServerEvent """
        ...

    @property
    def CreateCredential(self) -> ServerEvent:
        """ Get: CreateCredential() -> ServerEvent """
        ...

    @property
    def CreateCryptographicProvider(self) -> ServerEvent:
        """ Get: CreateCryptographicProvider() -> ServerEvent """
        ...

    @property
    def CreateDatabase(self) -> ServerEvent:
        """ Get: CreateDatabase() -> ServerEvent """
        ...

    @property
    def CreateDatabaseAuditSpecification(self) -> ServerEvent:
        """ Get: CreateDatabaseAuditSpecification() -> ServerEvent """
        ...

    @property
    def CreateDatabaseEncryptionKey(self) -> ServerEvent:
        """ Get: CreateDatabaseEncryptionKey() -> ServerEvent """
        ...

    @property
    def CreateDefault(self) -> ServerEvent:
        """ Get: CreateDefault() -> ServerEvent """
        ...

    @property
    def CreateEndpoint(self) -> ServerEvent:
        """ Get: CreateEndpoint() -> ServerEvent """
        ...

    @property
    def CreateEventNotification(self) -> ServerEvent:
        """ Get: CreateEventNotification() -> ServerEvent """
        ...

    @property
    def CreateEventSession(self) -> ServerEvent:
        """ Get: CreateEventSession() -> ServerEvent """
        ...

    @property
    def CreateExtendedProcedure(self) -> ServerEvent:
        """ Get: CreateExtendedProcedure() -> ServerEvent """
        ...

    @property
    def CreateExtendedProperty(self) -> ServerEvent:
        """ Get: CreateExtendedProperty() -> ServerEvent """
        ...

    @property
    def CreateFulltextCatalog(self) -> ServerEvent:
        """ Get: CreateFulltextCatalog() -> ServerEvent """
        ...

    @property
    def CreateFulltextIndex(self) -> ServerEvent:
        """ Get: CreateFulltextIndex() -> ServerEvent """
        ...

    @property
    def CreateFulltextStoplist(self) -> ServerEvent:
        """ Get: CreateFulltextStoplist() -> ServerEvent """
        ...

    @property
    def CreateFunction(self) -> ServerEvent:
        """ Get: CreateFunction() -> ServerEvent """
        ...

    @property
    def CreateIndex(self) -> ServerEvent:
        """ Get: CreateIndex() -> ServerEvent """
        ...

    @property
    def CreateLinkedServer(self) -> ServerEvent:
        """ Get: CreateLinkedServer() -> ServerEvent """
        ...

    @property
    def CreateLinkedServerLogin(self) -> ServerEvent:
        """ Get: CreateLinkedServerLogin() -> ServerEvent """
        ...

    @property
    def CreateLogin(self) -> ServerEvent:
        """ Get: CreateLogin() -> ServerEvent """
        ...

    @property
    def CreateMasterKey(self) -> ServerEvent:
        """ Get: CreateMasterKey() -> ServerEvent """
        ...

    @property
    def CreateMessage(self) -> ServerEvent:
        """ Get: CreateMessage() -> ServerEvent """
        ...

    @property
    def CreateMessageType(self) -> ServerEvent:
        """ Get: CreateMessageType() -> ServerEvent """
        ...

    @property
    def CreatePartitionFunction(self) -> ServerEvent:
        """ Get: CreatePartitionFunction() -> ServerEvent """
        ...

    @property
    def CreatePartitionScheme(self) -> ServerEvent:
        """ Get: CreatePartitionScheme() -> ServerEvent """
        ...

    @property
    def CreatePlanGuide(self) -> ServerEvent:
        """ Get: CreatePlanGuide() -> ServerEvent """
        ...

    @property
    def CreateProcedure(self) -> ServerEvent:
        """ Get: CreateProcedure() -> ServerEvent """
        ...

    @property
    def CreateQueue(self) -> ServerEvent:
        """ Get: CreateQueue() -> ServerEvent """
        ...

    @property
    def CreateRemoteServer(self) -> ServerEvent:
        """ Get: CreateRemoteServer() -> ServerEvent """
        ...

    @property
    def CreateRemoteServiceBinding(self) -> ServerEvent:
        """ Get: CreateRemoteServiceBinding() -> ServerEvent """
        ...

    @property
    def CreateResourcePool(self) -> ServerEvent:
        """ Get: CreateResourcePool() -> ServerEvent """
        ...

    @property
    def CreateRole(self) -> ServerEvent:
        """ Get: CreateRole() -> ServerEvent """
        ...

    @property
    def CreateRoute(self) -> ServerEvent:
        """ Get: CreateRoute() -> ServerEvent """
        ...

    @property
    def CreateRule(self) -> ServerEvent:
        """ Get: CreateRule() -> ServerEvent """
        ...

    @property
    def CreateSchema(self) -> ServerEvent:
        """ Get: CreateSchema() -> ServerEvent """
        ...

    @property
    def CreateSearchPropertyList(self) -> ServerEvent:
        """ Get: CreateSearchPropertyList() -> ServerEvent """
        ...

    @property
    def CreateSecurityPolicy(self) -> ServerEvent:
        """ Get: CreateSecurityPolicy() -> ServerEvent """
        ...

    @property
    def CreateSequence(self) -> ServerEvent:
        """ Get: CreateSequence() -> ServerEvent """
        ...

    @property
    def CreateServerAudit(self) -> ServerEvent:
        """ Get: CreateServerAudit() -> ServerEvent """
        ...

    @property
    def CreateServerAuditSpecification(self) -> ServerEvent:
        """ Get: CreateServerAuditSpecification() -> ServerEvent """
        ...

    @property
    def CreateServerRole(self) -> ServerEvent:
        """ Get: CreateServerRole() -> ServerEvent """
        ...

    @property
    def CreateService(self) -> ServerEvent:
        """ Get: CreateService() -> ServerEvent """
        ...

    @property
    def CreateSpatialIndex(self) -> ServerEvent:
        """ Get: CreateSpatialIndex() -> ServerEvent """
        ...

    @property
    def CreateStatistics(self) -> ServerEvent:
        """ Get: CreateStatistics() -> ServerEvent """
        ...

    @property
    def CreateSymmetricKey(self) -> ServerEvent:
        """ Get: CreateSymmetricKey() -> ServerEvent """
        ...

    @property
    def CreateSynonym(self) -> ServerEvent:
        """ Get: CreateSynonym() -> ServerEvent """
        ...

    @property
    def CreateTable(self) -> ServerEvent:
        """ Get: CreateTable() -> ServerEvent """
        ...

    @property
    def CreateTrigger(self) -> ServerEvent:
        """ Get: CreateTrigger() -> ServerEvent """
        ...

    @property
    def CreateType(self) -> ServerEvent:
        """ Get: CreateType() -> ServerEvent """
        ...

    @property
    def CreateUser(self) -> ServerEvent:
        """ Get: CreateUser() -> ServerEvent """
        ...

    @property
    def CreateView(self) -> ServerEvent:
        """ Get: CreateView() -> ServerEvent """
        ...

    @property
    def CreateWorkloadGroup(self) -> ServerEvent:
        """ Get: CreateWorkloadGroup() -> ServerEvent """
        ...

    @property
    def CreateXmlIndex(self) -> ServerEvent:
        """ Get: CreateXmlIndex() -> ServerEvent """
        ...

    @property
    def CreateXmlSchemaCollection(self) -> ServerEvent:
        """ Get: CreateXmlSchemaCollection() -> ServerEvent """
        ...

    @property
    def DenyDatabase(self) -> ServerEvent:
        """ Get: DenyDatabase() -> ServerEvent """
        ...

    @property
    def DenyServer(self) -> ServerEvent:
        """ Get: DenyServer() -> ServerEvent """
        ...

    @property
    def DropApplicationRole(self) -> ServerEvent:
        """ Get: DropApplicationRole() -> ServerEvent """
        ...

    @property
    def DropAssembly(self) -> ServerEvent:
        """ Get: DropAssembly() -> ServerEvent """
        ...

    @property
    def DropAsymmetricKey(self) -> ServerEvent:
        """ Get: DropAsymmetricKey() -> ServerEvent """
        ...

    @property
    def DropAudit(self) -> ServerEvent:
        """ Get: DropAudit() -> ServerEvent """
        ...

    @property
    def DropAvailabilityGroup(self) -> ServerEvent:
        """ Get: DropAvailabilityGroup() -> ServerEvent """
        ...

    @property
    def DropBrokerPriority(self) -> ServerEvent:
        """ Get: DropBrokerPriority() -> ServerEvent """
        ...

    @property
    def DropCertificate(self) -> ServerEvent:
        """ Get: DropCertificate() -> ServerEvent """
        ...

    @property
    def DropColumnEncryptionKey(self) -> ServerEvent:
        """ Get: DropColumnEncryptionKey() -> ServerEvent """
        ...

    @property
    def DropColumnMasterKey(self) -> ServerEvent:
        """ Get: DropColumnMasterKey() -> ServerEvent """
        ...

    @property
    def DropContract(self) -> ServerEvent:
        """ Get: DropContract() -> ServerEvent """
        ...

    @property
    def DropCredential(self) -> ServerEvent:
        """ Get: DropCredential() -> ServerEvent """
        ...

    @property
    def DropCryptographicProvider(self) -> ServerEvent:
        """ Get: DropCryptographicProvider() -> ServerEvent """
        ...

    @property
    def DropDatabase(self) -> ServerEvent:
        """ Get: DropDatabase() -> ServerEvent """
        ...

    @property
    def DropDatabaseAuditSpecification(self) -> ServerEvent:
        """ Get: DropDatabaseAuditSpecification() -> ServerEvent """
        ...

    @property
    def DropDatabaseEncryptionKey(self) -> ServerEvent:
        """ Get: DropDatabaseEncryptionKey() -> ServerEvent """
        ...

    @property
    def DropDefault(self) -> ServerEvent:
        """ Get: DropDefault() -> ServerEvent """
        ...

    @property
    def DropEndpoint(self) -> ServerEvent:
        """ Get: DropEndpoint() -> ServerEvent """
        ...

    @property
    def DropEventNotification(self) -> ServerEvent:
        """ Get: DropEventNotification() -> ServerEvent """
        ...

    @property
    def DropEventSession(self) -> ServerEvent:
        """ Get: DropEventSession() -> ServerEvent """
        ...

    @property
    def DropExtendedProcedure(self) -> ServerEvent:
        """ Get: DropExtendedProcedure() -> ServerEvent """
        ...

    @property
    def DropExtendedProperty(self) -> ServerEvent:
        """ Get: DropExtendedProperty() -> ServerEvent """
        ...

    @property
    def DropFulltextCatalog(self) -> ServerEvent:
        """ Get: DropFulltextCatalog() -> ServerEvent """
        ...

    @property
    def DropFulltextIndex(self) -> ServerEvent:
        """ Get: DropFulltextIndex() -> ServerEvent """
        ...

    @property
    def DropFulltextStoplist(self) -> ServerEvent:
        """ Get: DropFulltextStoplist() -> ServerEvent """
        ...

    @property
    def DropFunction(self) -> ServerEvent:
        """ Get: DropFunction() -> ServerEvent """
        ...

    @property
    def DropIndex(self) -> ServerEvent:
        """ Get: DropIndex() -> ServerEvent """
        ...

    @property
    def DropLinkedServer(self) -> ServerEvent:
        """ Get: DropLinkedServer() -> ServerEvent """
        ...

    @property
    def DropLinkedServerLogin(self) -> ServerEvent:
        """ Get: DropLinkedServerLogin() -> ServerEvent """
        ...

    @property
    def DropLogin(self) -> ServerEvent:
        """ Get: DropLogin() -> ServerEvent """
        ...

    @property
    def DropMasterKey(self) -> ServerEvent:
        """ Get: DropMasterKey() -> ServerEvent """
        ...

    @property
    def DropMessage(self) -> ServerEvent:
        """ Get: DropMessage() -> ServerEvent """
        ...

    @property
    def DropMessageType(self) -> ServerEvent:
        """ Get: DropMessageType() -> ServerEvent """
        ...

    @property
    def DropPartitionFunction(self) -> ServerEvent:
        """ Get: DropPartitionFunction() -> ServerEvent """
        ...

    @property
    def DropPartitionScheme(self) -> ServerEvent:
        """ Get: DropPartitionScheme() -> ServerEvent """
        ...

    @property
    def DropPlanGuide(self) -> ServerEvent:
        """ Get: DropPlanGuide() -> ServerEvent """
        ...

    @property
    def DropProcedure(self) -> ServerEvent:
        """ Get: DropProcedure() -> ServerEvent """
        ...

    @property
    def DropQueue(self) -> ServerEvent:
        """ Get: DropQueue() -> ServerEvent """
        ...

    @property
    def DropRemoteServer(self) -> ServerEvent:
        """ Get: DropRemoteServer() -> ServerEvent """
        ...

    @property
    def DropRemoteServiceBinding(self) -> ServerEvent:
        """ Get: DropRemoteServiceBinding() -> ServerEvent """
        ...

    @property
    def DropResourcePool(self) -> ServerEvent:
        """ Get: DropResourcePool() -> ServerEvent """
        ...

    @property
    def DropRole(self) -> ServerEvent:
        """ Get: DropRole() -> ServerEvent """
        ...

    @property
    def DropRoleMember(self) -> ServerEvent:
        """ Get: DropRoleMember() -> ServerEvent """
        ...

    @property
    def DropRoute(self) -> ServerEvent:
        """ Get: DropRoute() -> ServerEvent """
        ...

    @property
    def DropRule(self) -> ServerEvent:
        """ Get: DropRule() -> ServerEvent """
        ...

    @property
    def DropSchema(self) -> ServerEvent:
        """ Get: DropSchema() -> ServerEvent """
        ...

    @property
    def DropSearchPropertyList(self) -> ServerEvent:
        """ Get: DropSearchPropertyList() -> ServerEvent """
        ...

    @property
    def DropSecurityPolicy(self) -> ServerEvent:
        """ Get: DropSecurityPolicy() -> ServerEvent """
        ...

    @property
    def DropSequence(self) -> ServerEvent:
        """ Get: DropSequence() -> ServerEvent """
        ...

    @property
    def DropServerAudit(self) -> ServerEvent:
        """ Get: DropServerAudit() -> ServerEvent """
        ...

    @property
    def DropServerAuditSpecification(self) -> ServerEvent:
        """ Get: DropServerAuditSpecification() -> ServerEvent """
        ...

    @property
    def DropServerRole(self) -> ServerEvent:
        """ Get: DropServerRole() -> ServerEvent """
        ...

    @property
    def DropServerRoleMember(self) -> ServerEvent:
        """ Get: DropServerRoleMember() -> ServerEvent """
        ...

    @property
    def DropService(self) -> ServerEvent:
        """ Get: DropService() -> ServerEvent """
        ...

    @property
    def DropSignature(self) -> ServerEvent:
        """ Get: DropSignature() -> ServerEvent """
        ...

    @property
    def DropSignatureSchemaObject(self) -> ServerEvent:
        """ Get: DropSignatureSchemaObject() -> ServerEvent """
        ...

    @property
    def DropStatistics(self) -> ServerEvent:
        """ Get: DropStatistics() -> ServerEvent """
        ...

    @property
    def DropSymmetricKey(self) -> ServerEvent:
        """ Get: DropSymmetricKey() -> ServerEvent """
        ...

    @property
    def DropSynonym(self) -> ServerEvent:
        """ Get: DropSynonym() -> ServerEvent """
        ...

    @property
    def DropTable(self) -> ServerEvent:
        """ Get: DropTable() -> ServerEvent """
        ...

    @property
    def DropTrigger(self) -> ServerEvent:
        """ Get: DropTrigger() -> ServerEvent """
        ...

    @property
    def DropType(self) -> ServerEvent:
        """ Get: DropType() -> ServerEvent """
        ...

    @property
    def DropUser(self) -> ServerEvent:
        """ Get: DropUser() -> ServerEvent """
        ...

    @property
    def DropView(self) -> ServerEvent:
        """ Get: DropView() -> ServerEvent """
        ...

    @property
    def DropWorkloadGroup(self) -> ServerEvent:
        """ Get: DropWorkloadGroup() -> ServerEvent """
        ...

    @property
    def DropXmlSchemaCollection(self) -> ServerEvent:
        """ Get: DropXmlSchemaCollection() -> ServerEvent """
        ...

    @property
    def GrantDatabase(self) -> ServerEvent:
        """ Get: GrantDatabase() -> ServerEvent """
        ...

    @property
    def GrantServer(self) -> ServerEvent:
        """ Get: GrantServer() -> ServerEvent """
        ...

    @property
    def Rename(self) -> ServerEvent:
        """ Get: Rename() -> ServerEvent """
        ...

    @property
    def RevokeDatabase(self) -> ServerEvent:
        """ Get: RevokeDatabase() -> ServerEvent """
        ...

    @property
    def RevokeServer(self) -> ServerEvent:
        """ Get: RevokeServer() -> ServerEvent """
        ...

    @property
    def UnbindDefault(self) -> ServerEvent:
        """ Get: UnbindDefault() -> ServerEvent """
        ...

    @property
    def UnbindRule(self) -> ServerEvent:
        """ Get: UnbindRule() -> ServerEvent """
        ...

    @property
    def UpdateStatistics(self) -> ServerEvent:
        """ Get: UpdateStatistics() -> ServerEvent """
        ...


    @staticmethod
    def Add(eventLeft:ServerEvent, eventRight:ServerEvent): # -> ServerEventSet
        """ Add(eventLeft: ServerEvent, eventRight: ServerEvent) -> ServerEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:ServerEvent, eventRight:ServerEvent): # -> ServerEventSet
        """ BitwiseOr(eventLeft: ServerEvent, eventRight: ServerEvent) -> ServerEventSet """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: ServerEvent, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: ServerEvent) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: ServerEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: ServerEvent, eventRight: ServerEvent) -> ServerEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: ServerEvent, eventRight: ServerEvent) -> ServerEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: ServerEvent, eventRight: ServerEvent) -> ServerEventSet """
        ...



class ServerEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def EventType(self) -> EventType:
        """ Get: EventType(self: ServerEventArgs) -> EventType """
        ...

    @property
    def PostTime(self) -> DateTime:
        """ Get: PostTime(self: ServerEventArgs) -> DateTime """
        ...

    @property
    def Properties(self) -> EventPropertyCollection:
        """ Get: Properties(self: ServerEventArgs) -> EventPropertyCollection """
        ...

    @property
    def Spid(self) -> int:
        """ Get: Spid(self: ServerEventArgs) -> int """
        ...

    @property
    def SqlInstance(self) -> str:
        """ Get: SqlInstance(self: ServerEventArgs) -> str """
        ...



class ServerEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ ServerEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, e:ServerEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: ServerEventHandler, sender: object, e: ServerEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: ServerEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, e:ServerEventArgs): # -> 
        """ Invoke(self: ServerEventHandler, sender: object, e: ServerEventArgs) """
        ...


class ServerEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self): # -> ServerEventSet
        """ GetEventSelection(self: ServerEvents) -> ServerEventSet """
        ...

    def GetTraceEventSelection(self): # -> ServerTraceEventSet
        """ GetTraceEventSelection(self: ServerEvents) -> ServerTraceEventSet """
        ...

    def SetCredentials(self, username:str, password:str): # -> 
        """ SetCredentials(self: ServerEvents, username: str, password: str) """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: ServerEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: ServerEvents) """
        ...

    def SubscribeToEvents(self, events, eventHandler:ServerEventHandler = ...): # ->  # Not found arg types: {'events': 'ServerEventSet'}
        """ SubscribeToEvents(self: ServerEvents, events: ServerEventSet)SubscribeToEvents(self: ServerEvents, events: ServerEventSet, eventHandler: ServerEventHandler)SubscribeToEvents(self: ServerEvents, events: ServerTraceEventSet)SubscribeToEvents(self: ServerEvents, events: ServerTraceEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: ServerEvents) """
        ...

    def UnsubscribeFromEvents(self, events): # ->  # Not found arg types: {'events': 'ServerEventSet'}
        """ UnsubscribeFromEvents(self: ServerEvents, events: ServerEventSet)UnsubscribeFromEvents(self: ServerEvents, events: ServerTraceEventSet) """
        ...

    ServerEvent = ...


class ServerEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    ServerEventSet()
    ServerEventSet(eventSet: ServerEventSet)
    ServerEventSet(anEvent: ServerEvent)
    ServerEventSet(*events: Array[ServerEvent])
    """
    @property
    def AddRoleMember(self) -> bool:
        """
        Get: AddRoleMember(self: ServerEventSet) -> bool
        Set: AddRoleMember(self: ServerEventSet) = value
        """
        ...

    @property
    def AddServerRoleMember(self) -> bool:
        """
        Get: AddServerRoleMember(self: ServerEventSet) -> bool
        Set: AddServerRoleMember(self: ServerEventSet) = value
        """
        ...

    @property
    def AddSignature(self) -> bool:
        """
        Get: AddSignature(self: ServerEventSet) -> bool
        Set: AddSignature(self: ServerEventSet) = value
        """
        ...

    @property
    def AddSignatureSchemaObject(self) -> bool:
        """
        Get: AddSignatureSchemaObject(self: ServerEventSet) -> bool
        Set: AddSignatureSchemaObject(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterApplicationRole(self) -> bool:
        """
        Get: AlterApplicationRole(self: ServerEventSet) -> bool
        Set: AlterApplicationRole(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterAssembly(self) -> bool:
        """
        Get: AlterAssembly(self: ServerEventSet) -> bool
        Set: AlterAssembly(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterAsymmetricKey(self) -> bool:
        """
        Get: AlterAsymmetricKey(self: ServerEventSet) -> bool
        Set: AlterAsymmetricKey(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterAudit(self) -> bool:
        """
        Get: AlterAudit(self: ServerEventSet) -> bool
        Set: AlterAudit(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterAuthorizationDatabase(self) -> bool:
        """
        Get: AlterAuthorizationDatabase(self: ServerEventSet) -> bool
        Set: AlterAuthorizationDatabase(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterAuthorizationServer(self) -> bool:
        """
        Get: AlterAuthorizationServer(self: ServerEventSet) -> bool
        Set: AlterAuthorizationServer(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterAvailabilityGroup(self) -> bool:
        """
        Get: AlterAvailabilityGroup(self: ServerEventSet) -> bool
        Set: AlterAvailabilityGroup(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterBrokerPriority(self) -> bool:
        """
        Get: AlterBrokerPriority(self: ServerEventSet) -> bool
        Set: AlterBrokerPriority(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterCertificate(self) -> bool:
        """
        Get: AlterCertificate(self: ServerEventSet) -> bool
        Set: AlterCertificate(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterColumnEncryptionKey(self) -> bool:
        """
        Get: AlterColumnEncryptionKey(self: ServerEventSet) -> bool
        Set: AlterColumnEncryptionKey(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterCredential(self) -> bool:
        """
        Get: AlterCredential(self: ServerEventSet) -> bool
        Set: AlterCredential(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterCryptographicProvider(self) -> bool:
        """
        Get: AlterCryptographicProvider(self: ServerEventSet) -> bool
        Set: AlterCryptographicProvider(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterDatabase(self) -> bool:
        """
        Get: AlterDatabase(self: ServerEventSet) -> bool
        Set: AlterDatabase(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterDatabaseAuditSpecification(self) -> bool:
        """
        Get: AlterDatabaseAuditSpecification(self: ServerEventSet) -> bool
        Set: AlterDatabaseAuditSpecification(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterDatabaseEncryptionKey(self) -> bool:
        """
        Get: AlterDatabaseEncryptionKey(self: ServerEventSet) -> bool
        Set: AlterDatabaseEncryptionKey(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterEndpoint(self) -> bool:
        """
        Get: AlterEndpoint(self: ServerEventSet) -> bool
        Set: AlterEndpoint(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterEventSession(self) -> bool:
        """
        Get: AlterEventSession(self: ServerEventSet) -> bool
        Set: AlterEventSession(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterExtendedProperty(self) -> bool:
        """
        Get: AlterExtendedProperty(self: ServerEventSet) -> bool
        Set: AlterExtendedProperty(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterFulltextCatalog(self) -> bool:
        """
        Get: AlterFulltextCatalog(self: ServerEventSet) -> bool
        Set: AlterFulltextCatalog(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterFulltextIndex(self) -> bool:
        """
        Get: AlterFulltextIndex(self: ServerEventSet) -> bool
        Set: AlterFulltextIndex(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterFulltextStoplist(self) -> bool:
        """
        Get: AlterFulltextStoplist(self: ServerEventSet) -> bool
        Set: AlterFulltextStoplist(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterFunction(self) -> bool:
        """
        Get: AlterFunction(self: ServerEventSet) -> bool
        Set: AlterFunction(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterIndex(self) -> bool:
        """
        Get: AlterIndex(self: ServerEventSet) -> bool
        Set: AlterIndex(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterInstance(self) -> bool:
        """
        Get: AlterInstance(self: ServerEventSet) -> bool
        Set: AlterInstance(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterLinkedServer(self) -> bool:
        """
        Get: AlterLinkedServer(self: ServerEventSet) -> bool
        Set: AlterLinkedServer(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterLogin(self) -> bool:
        """
        Get: AlterLogin(self: ServerEventSet) -> bool
        Set: AlterLogin(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterMasterKey(self) -> bool:
        """
        Get: AlterMasterKey(self: ServerEventSet) -> bool
        Set: AlterMasterKey(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterMessage(self) -> bool:
        """
        Get: AlterMessage(self: ServerEventSet) -> bool
        Set: AlterMessage(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterMessageType(self) -> bool:
        """
        Get: AlterMessageType(self: ServerEventSet) -> bool
        Set: AlterMessageType(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterPartitionFunction(self) -> bool:
        """
        Get: AlterPartitionFunction(self: ServerEventSet) -> bool
        Set: AlterPartitionFunction(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterPartitionScheme(self) -> bool:
        """
        Get: AlterPartitionScheme(self: ServerEventSet) -> bool
        Set: AlterPartitionScheme(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterPlanGuide(self) -> bool:
        """
        Get: AlterPlanGuide(self: ServerEventSet) -> bool
        Set: AlterPlanGuide(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterProcedure(self) -> bool:
        """
        Get: AlterProcedure(self: ServerEventSet) -> bool
        Set: AlterProcedure(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterQueue(self) -> bool:
        """
        Get: AlterQueue(self: ServerEventSet) -> bool
        Set: AlterQueue(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterRemoteServer(self) -> bool:
        """
        Get: AlterRemoteServer(self: ServerEventSet) -> bool
        Set: AlterRemoteServer(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterRemoteServiceBinding(self) -> bool:
        """
        Get: AlterRemoteServiceBinding(self: ServerEventSet) -> bool
        Set: AlterRemoteServiceBinding(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterResourceGovernorConfig(self) -> bool:
        """
        Get: AlterResourceGovernorConfig(self: ServerEventSet) -> bool
        Set: AlterResourceGovernorConfig(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterResourcePool(self) -> bool:
        """
        Get: AlterResourcePool(self: ServerEventSet) -> bool
        Set: AlterResourcePool(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterRole(self) -> bool:
        """
        Get: AlterRole(self: ServerEventSet) -> bool
        Set: AlterRole(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterRoute(self) -> bool:
        """
        Get: AlterRoute(self: ServerEventSet) -> bool
        Set: AlterRoute(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterSchema(self) -> bool:
        """
        Get: AlterSchema(self: ServerEventSet) -> bool
        Set: AlterSchema(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterSearchPropertyList(self) -> bool:
        """
        Get: AlterSearchPropertyList(self: ServerEventSet) -> bool
        Set: AlterSearchPropertyList(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterSecurityPolicy(self) -> bool:
        """
        Get: AlterSecurityPolicy(self: ServerEventSet) -> bool
        Set: AlterSecurityPolicy(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterSequence(self) -> bool:
        """
        Get: AlterSequence(self: ServerEventSet) -> bool
        Set: AlterSequence(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterServerAudit(self) -> bool:
        """
        Get: AlterServerAudit(self: ServerEventSet) -> bool
        Set: AlterServerAudit(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterServerAuditSpecification(self) -> bool:
        """
        Get: AlterServerAuditSpecification(self: ServerEventSet) -> bool
        Set: AlterServerAuditSpecification(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterServerConfiguration(self) -> bool:
        """
        Get: AlterServerConfiguration(self: ServerEventSet) -> bool
        Set: AlterServerConfiguration(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterServerRole(self) -> bool:
        """
        Get: AlterServerRole(self: ServerEventSet) -> bool
        Set: AlterServerRole(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterService(self) -> bool:
        """
        Get: AlterService(self: ServerEventSet) -> bool
        Set: AlterService(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterServiceMasterKey(self) -> bool:
        """
        Get: AlterServiceMasterKey(self: ServerEventSet) -> bool
        Set: AlterServiceMasterKey(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterSymmetricKey(self) -> bool:
        """
        Get: AlterSymmetricKey(self: ServerEventSet) -> bool
        Set: AlterSymmetricKey(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterTable(self) -> bool:
        """
        Get: AlterTable(self: ServerEventSet) -> bool
        Set: AlterTable(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterTrigger(self) -> bool:
        """
        Get: AlterTrigger(self: ServerEventSet) -> bool
        Set: AlterTrigger(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterUser(self) -> bool:
        """
        Get: AlterUser(self: ServerEventSet) -> bool
        Set: AlterUser(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterView(self) -> bool:
        """
        Get: AlterView(self: ServerEventSet) -> bool
        Set: AlterView(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterWorkloadGroup(self) -> bool:
        """
        Get: AlterWorkloadGroup(self: ServerEventSet) -> bool
        Set: AlterWorkloadGroup(self: ServerEventSet) = value
        """
        ...

    @property
    def AlterXmlSchemaCollection(self) -> bool:
        """
        Get: AlterXmlSchemaCollection(self: ServerEventSet) -> bool
        Set: AlterXmlSchemaCollection(self: ServerEventSet) = value
        """
        ...

    @property
    def BindDefault(self) -> bool:
        """
        Get: BindDefault(self: ServerEventSet) -> bool
        Set: BindDefault(self: ServerEventSet) = value
        """
        ...

    @property
    def BindRule(self) -> bool:
        """
        Get: BindRule(self: ServerEventSet) -> bool
        Set: BindRule(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateApplicationRole(self) -> bool:
        """
        Get: CreateApplicationRole(self: ServerEventSet) -> bool
        Set: CreateApplicationRole(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateAssembly(self) -> bool:
        """
        Get: CreateAssembly(self: ServerEventSet) -> bool
        Set: CreateAssembly(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateAsymmetricKey(self) -> bool:
        """
        Get: CreateAsymmetricKey(self: ServerEventSet) -> bool
        Set: CreateAsymmetricKey(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateAudit(self) -> bool:
        """
        Get: CreateAudit(self: ServerEventSet) -> bool
        Set: CreateAudit(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateAvailabilityGroup(self) -> bool:
        """
        Get: CreateAvailabilityGroup(self: ServerEventSet) -> bool
        Set: CreateAvailabilityGroup(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateBrokerPriority(self) -> bool:
        """
        Get: CreateBrokerPriority(self: ServerEventSet) -> bool
        Set: CreateBrokerPriority(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateCertificate(self) -> bool:
        """
        Get: CreateCertificate(self: ServerEventSet) -> bool
        Set: CreateCertificate(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateColumnEncryptionKey(self) -> bool:
        """
        Get: CreateColumnEncryptionKey(self: ServerEventSet) -> bool
        Set: CreateColumnEncryptionKey(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateColumnMasterKey(self) -> bool:
        """
        Get: CreateColumnMasterKey(self: ServerEventSet) -> bool
        Set: CreateColumnMasterKey(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateContract(self) -> bool:
        """
        Get: CreateContract(self: ServerEventSet) -> bool
        Set: CreateContract(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateCredential(self) -> bool:
        """
        Get: CreateCredential(self: ServerEventSet) -> bool
        Set: CreateCredential(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateCryptographicProvider(self) -> bool:
        """
        Get: CreateCryptographicProvider(self: ServerEventSet) -> bool
        Set: CreateCryptographicProvider(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateDatabase(self) -> bool:
        """
        Get: CreateDatabase(self: ServerEventSet) -> bool
        Set: CreateDatabase(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateDatabaseAuditSpecification(self) -> bool:
        """
        Get: CreateDatabaseAuditSpecification(self: ServerEventSet) -> bool
        Set: CreateDatabaseAuditSpecification(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateDatabaseEncryptionKey(self) -> bool:
        """
        Get: CreateDatabaseEncryptionKey(self: ServerEventSet) -> bool
        Set: CreateDatabaseEncryptionKey(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateDefault(self) -> bool:
        """
        Get: CreateDefault(self: ServerEventSet) -> bool
        Set: CreateDefault(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateEndpoint(self) -> bool:
        """
        Get: CreateEndpoint(self: ServerEventSet) -> bool
        Set: CreateEndpoint(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateEventNotification(self) -> bool:
        """
        Get: CreateEventNotification(self: ServerEventSet) -> bool
        Set: CreateEventNotification(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateEventSession(self) -> bool:
        """
        Get: CreateEventSession(self: ServerEventSet) -> bool
        Set: CreateEventSession(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateExtendedProcedure(self) -> bool:
        """
        Get: CreateExtendedProcedure(self: ServerEventSet) -> bool
        Set: CreateExtendedProcedure(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateExtendedProperty(self) -> bool:
        """
        Get: CreateExtendedProperty(self: ServerEventSet) -> bool
        Set: CreateExtendedProperty(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateFulltextCatalog(self) -> bool:
        """
        Get: CreateFulltextCatalog(self: ServerEventSet) -> bool
        Set: CreateFulltextCatalog(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateFulltextIndex(self) -> bool:
        """
        Get: CreateFulltextIndex(self: ServerEventSet) -> bool
        Set: CreateFulltextIndex(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateFulltextStoplist(self) -> bool:
        """
        Get: CreateFulltextStoplist(self: ServerEventSet) -> bool
        Set: CreateFulltextStoplist(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateFunction(self) -> bool:
        """
        Get: CreateFunction(self: ServerEventSet) -> bool
        Set: CreateFunction(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateIndex(self) -> bool:
        """
        Get: CreateIndex(self: ServerEventSet) -> bool
        Set: CreateIndex(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateLinkedServer(self) -> bool:
        """
        Get: CreateLinkedServer(self: ServerEventSet) -> bool
        Set: CreateLinkedServer(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateLinkedServerLogin(self) -> bool:
        """
        Get: CreateLinkedServerLogin(self: ServerEventSet) -> bool
        Set: CreateLinkedServerLogin(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateLogin(self) -> bool:
        """
        Get: CreateLogin(self: ServerEventSet) -> bool
        Set: CreateLogin(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateMasterKey(self) -> bool:
        """
        Get: CreateMasterKey(self: ServerEventSet) -> bool
        Set: CreateMasterKey(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateMessage(self) -> bool:
        """
        Get: CreateMessage(self: ServerEventSet) -> bool
        Set: CreateMessage(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateMessageType(self) -> bool:
        """
        Get: CreateMessageType(self: ServerEventSet) -> bool
        Set: CreateMessageType(self: ServerEventSet) = value
        """
        ...

    @property
    def CreatePartitionFunction(self) -> bool:
        """
        Get: CreatePartitionFunction(self: ServerEventSet) -> bool
        Set: CreatePartitionFunction(self: ServerEventSet) = value
        """
        ...

    @property
    def CreatePartitionScheme(self) -> bool:
        """
        Get: CreatePartitionScheme(self: ServerEventSet) -> bool
        Set: CreatePartitionScheme(self: ServerEventSet) = value
        """
        ...

    @property
    def CreatePlanGuide(self) -> bool:
        """
        Get: CreatePlanGuide(self: ServerEventSet) -> bool
        Set: CreatePlanGuide(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateProcedure(self) -> bool:
        """
        Get: CreateProcedure(self: ServerEventSet) -> bool
        Set: CreateProcedure(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateQueue(self) -> bool:
        """
        Get: CreateQueue(self: ServerEventSet) -> bool
        Set: CreateQueue(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateRemoteServer(self) -> bool:
        """
        Get: CreateRemoteServer(self: ServerEventSet) -> bool
        Set: CreateRemoteServer(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateRemoteServiceBinding(self) -> bool:
        """
        Get: CreateRemoteServiceBinding(self: ServerEventSet) -> bool
        Set: CreateRemoteServiceBinding(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateResourcePool(self) -> bool:
        """
        Get: CreateResourcePool(self: ServerEventSet) -> bool
        Set: CreateResourcePool(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateRole(self) -> bool:
        """
        Get: CreateRole(self: ServerEventSet) -> bool
        Set: CreateRole(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateRoute(self) -> bool:
        """
        Get: CreateRoute(self: ServerEventSet) -> bool
        Set: CreateRoute(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateRule(self) -> bool:
        """
        Get: CreateRule(self: ServerEventSet) -> bool
        Set: CreateRule(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateSchema(self) -> bool:
        """
        Get: CreateSchema(self: ServerEventSet) -> bool
        Set: CreateSchema(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateSearchPropertyList(self) -> bool:
        """
        Get: CreateSearchPropertyList(self: ServerEventSet) -> bool
        Set: CreateSearchPropertyList(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateSecurityPolicy(self) -> bool:
        """
        Get: CreateSecurityPolicy(self: ServerEventSet) -> bool
        Set: CreateSecurityPolicy(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateSequence(self) -> bool:
        """
        Get: CreateSequence(self: ServerEventSet) -> bool
        Set: CreateSequence(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateServerAudit(self) -> bool:
        """
        Get: CreateServerAudit(self: ServerEventSet) -> bool
        Set: CreateServerAudit(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateServerAuditSpecification(self) -> bool:
        """
        Get: CreateServerAuditSpecification(self: ServerEventSet) -> bool
        Set: CreateServerAuditSpecification(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateServerRole(self) -> bool:
        """
        Get: CreateServerRole(self: ServerEventSet) -> bool
        Set: CreateServerRole(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateService(self) -> bool:
        """
        Get: CreateService(self: ServerEventSet) -> bool
        Set: CreateService(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateSpatialIndex(self) -> bool:
        """
        Get: CreateSpatialIndex(self: ServerEventSet) -> bool
        Set: CreateSpatialIndex(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateStatistics(self) -> bool:
        """
        Get: CreateStatistics(self: ServerEventSet) -> bool
        Set: CreateStatistics(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateSymmetricKey(self) -> bool:
        """
        Get: CreateSymmetricKey(self: ServerEventSet) -> bool
        Set: CreateSymmetricKey(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateSynonym(self) -> bool:
        """
        Get: CreateSynonym(self: ServerEventSet) -> bool
        Set: CreateSynonym(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateTable(self) -> bool:
        """
        Get: CreateTable(self: ServerEventSet) -> bool
        Set: CreateTable(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateTrigger(self) -> bool:
        """
        Get: CreateTrigger(self: ServerEventSet) -> bool
        Set: CreateTrigger(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateType(self) -> bool:
        """
        Get: CreateType(self: ServerEventSet) -> bool
        Set: CreateType(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateUser(self) -> bool:
        """
        Get: CreateUser(self: ServerEventSet) -> bool
        Set: CreateUser(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateView(self) -> bool:
        """
        Get: CreateView(self: ServerEventSet) -> bool
        Set: CreateView(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateWorkloadGroup(self) -> bool:
        """
        Get: CreateWorkloadGroup(self: ServerEventSet) -> bool
        Set: CreateWorkloadGroup(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateXmlIndex(self) -> bool:
        """
        Get: CreateXmlIndex(self: ServerEventSet) -> bool
        Set: CreateXmlIndex(self: ServerEventSet) = value
        """
        ...

    @property
    def CreateXmlSchemaCollection(self) -> bool:
        """
        Get: CreateXmlSchemaCollection(self: ServerEventSet) -> bool
        Set: CreateXmlSchemaCollection(self: ServerEventSet) = value
        """
        ...

    @property
    def DenyDatabase(self) -> bool:
        """
        Get: DenyDatabase(self: ServerEventSet) -> bool
        Set: DenyDatabase(self: ServerEventSet) = value
        """
        ...

    @property
    def DenyServer(self) -> bool:
        """
        Get: DenyServer(self: ServerEventSet) -> bool
        Set: DenyServer(self: ServerEventSet) = value
        """
        ...

    @property
    def DropApplicationRole(self) -> bool:
        """
        Get: DropApplicationRole(self: ServerEventSet) -> bool
        Set: DropApplicationRole(self: ServerEventSet) = value
        """
        ...

    @property
    def DropAssembly(self) -> bool:
        """
        Get: DropAssembly(self: ServerEventSet) -> bool
        Set: DropAssembly(self: ServerEventSet) = value
        """
        ...

    @property
    def DropAsymmetricKey(self) -> bool:
        """
        Get: DropAsymmetricKey(self: ServerEventSet) -> bool
        Set: DropAsymmetricKey(self: ServerEventSet) = value
        """
        ...

    @property
    def DropAudit(self) -> bool:
        """
        Get: DropAudit(self: ServerEventSet) -> bool
        Set: DropAudit(self: ServerEventSet) = value
        """
        ...

    @property
    def DropAvailabilityGroup(self) -> bool:
        """
        Get: DropAvailabilityGroup(self: ServerEventSet) -> bool
        Set: DropAvailabilityGroup(self: ServerEventSet) = value
        """
        ...

    @property
    def DropBrokerPriority(self) -> bool:
        """
        Get: DropBrokerPriority(self: ServerEventSet) -> bool
        Set: DropBrokerPriority(self: ServerEventSet) = value
        """
        ...

    @property
    def DropCertificate(self) -> bool:
        """
        Get: DropCertificate(self: ServerEventSet) -> bool
        Set: DropCertificate(self: ServerEventSet) = value
        """
        ...

    @property
    def DropColumnEncryptionKey(self) -> bool:
        """
        Get: DropColumnEncryptionKey(self: ServerEventSet) -> bool
        Set: DropColumnEncryptionKey(self: ServerEventSet) = value
        """
        ...

    @property
    def DropColumnMasterKey(self) -> bool:
        """
        Get: DropColumnMasterKey(self: ServerEventSet) -> bool
        Set: DropColumnMasterKey(self: ServerEventSet) = value
        """
        ...

    @property
    def DropContract(self) -> bool:
        """
        Get: DropContract(self: ServerEventSet) -> bool
        Set: DropContract(self: ServerEventSet) = value
        """
        ...

    @property
    def DropCredential(self) -> bool:
        """
        Get: DropCredential(self: ServerEventSet) -> bool
        Set: DropCredential(self: ServerEventSet) = value
        """
        ...

    @property
    def DropCryptographicProvider(self) -> bool:
        """
        Get: DropCryptographicProvider(self: ServerEventSet) -> bool
        Set: DropCryptographicProvider(self: ServerEventSet) = value
        """
        ...

    @property
    def DropDatabase(self) -> bool:
        """
        Get: DropDatabase(self: ServerEventSet) -> bool
        Set: DropDatabase(self: ServerEventSet) = value
        """
        ...

    @property
    def DropDatabaseAuditSpecification(self) -> bool:
        """
        Get: DropDatabaseAuditSpecification(self: ServerEventSet) -> bool
        Set: DropDatabaseAuditSpecification(self: ServerEventSet) = value
        """
        ...

    @property
    def DropDatabaseEncryptionKey(self) -> bool:
        """
        Get: DropDatabaseEncryptionKey(self: ServerEventSet) -> bool
        Set: DropDatabaseEncryptionKey(self: ServerEventSet) = value
        """
        ...

    @property
    def DropDefault(self) -> bool:
        """
        Get: DropDefault(self: ServerEventSet) -> bool
        Set: DropDefault(self: ServerEventSet) = value
        """
        ...

    @property
    def DropEndpoint(self) -> bool:
        """
        Get: DropEndpoint(self: ServerEventSet) -> bool
        Set: DropEndpoint(self: ServerEventSet) = value
        """
        ...

    @property
    def DropEventNotification(self) -> bool:
        """
        Get: DropEventNotification(self: ServerEventSet) -> bool
        Set: DropEventNotification(self: ServerEventSet) = value
        """
        ...

    @property
    def DropEventSession(self) -> bool:
        """
        Get: DropEventSession(self: ServerEventSet) -> bool
        Set: DropEventSession(self: ServerEventSet) = value
        """
        ...

    @property
    def DropExtendedProcedure(self) -> bool:
        """
        Get: DropExtendedProcedure(self: ServerEventSet) -> bool
        Set: DropExtendedProcedure(self: ServerEventSet) = value
        """
        ...

    @property
    def DropExtendedProperty(self) -> bool:
        """
        Get: DropExtendedProperty(self: ServerEventSet) -> bool
        Set: DropExtendedProperty(self: ServerEventSet) = value
        """
        ...

    @property
    def DropFulltextCatalog(self) -> bool:
        """
        Get: DropFulltextCatalog(self: ServerEventSet) -> bool
        Set: DropFulltextCatalog(self: ServerEventSet) = value
        """
        ...

    @property
    def DropFulltextIndex(self) -> bool:
        """
        Get: DropFulltextIndex(self: ServerEventSet) -> bool
        Set: DropFulltextIndex(self: ServerEventSet) = value
        """
        ...

    @property
    def DropFulltextStoplist(self) -> bool:
        """
        Get: DropFulltextStoplist(self: ServerEventSet) -> bool
        Set: DropFulltextStoplist(self: ServerEventSet) = value
        """
        ...

    @property
    def DropFunction(self) -> bool:
        """
        Get: DropFunction(self: ServerEventSet) -> bool
        Set: DropFunction(self: ServerEventSet) = value
        """
        ...

    @property
    def DropIndex(self) -> bool:
        """
        Get: DropIndex(self: ServerEventSet) -> bool
        Set: DropIndex(self: ServerEventSet) = value
        """
        ...

    @property
    def DropLinkedServer(self) -> bool:
        """
        Get: DropLinkedServer(self: ServerEventSet) -> bool
        Set: DropLinkedServer(self: ServerEventSet) = value
        """
        ...

    @property
    def DropLinkedServerLogin(self) -> bool:
        """
        Get: DropLinkedServerLogin(self: ServerEventSet) -> bool
        Set: DropLinkedServerLogin(self: ServerEventSet) = value
        """
        ...

    @property
    def DropLogin(self) -> bool:
        """
        Get: DropLogin(self: ServerEventSet) -> bool
        Set: DropLogin(self: ServerEventSet) = value
        """
        ...

    @property
    def DropMasterKey(self) -> bool:
        """
        Get: DropMasterKey(self: ServerEventSet) -> bool
        Set: DropMasterKey(self: ServerEventSet) = value
        """
        ...

    @property
    def DropMessage(self) -> bool:
        """
        Get: DropMessage(self: ServerEventSet) -> bool
        Set: DropMessage(self: ServerEventSet) = value
        """
        ...

    @property
    def DropMessageType(self) -> bool:
        """
        Get: DropMessageType(self: ServerEventSet) -> bool
        Set: DropMessageType(self: ServerEventSet) = value
        """
        ...

    @property
    def DropPartitionFunction(self) -> bool:
        """
        Get: DropPartitionFunction(self: ServerEventSet) -> bool
        Set: DropPartitionFunction(self: ServerEventSet) = value
        """
        ...

    @property
    def DropPartitionScheme(self) -> bool:
        """
        Get: DropPartitionScheme(self: ServerEventSet) -> bool
        Set: DropPartitionScheme(self: ServerEventSet) = value
        """
        ...

    @property
    def DropPlanGuide(self) -> bool:
        """
        Get: DropPlanGuide(self: ServerEventSet) -> bool
        Set: DropPlanGuide(self: ServerEventSet) = value
        """
        ...

    @property
    def DropProcedure(self) -> bool:
        """
        Get: DropProcedure(self: ServerEventSet) -> bool
        Set: DropProcedure(self: ServerEventSet) = value
        """
        ...

    @property
    def DropQueue(self) -> bool:
        """
        Get: DropQueue(self: ServerEventSet) -> bool
        Set: DropQueue(self: ServerEventSet) = value
        """
        ...

    @property
    def DropRemoteServer(self) -> bool:
        """
        Get: DropRemoteServer(self: ServerEventSet) -> bool
        Set: DropRemoteServer(self: ServerEventSet) = value
        """
        ...

    @property
    def DropRemoteServiceBinding(self) -> bool:
        """
        Get: DropRemoteServiceBinding(self: ServerEventSet) -> bool
        Set: DropRemoteServiceBinding(self: ServerEventSet) = value
        """
        ...

    @property
    def DropResourcePool(self) -> bool:
        """
        Get: DropResourcePool(self: ServerEventSet) -> bool
        Set: DropResourcePool(self: ServerEventSet) = value
        """
        ...

    @property
    def DropRole(self) -> bool:
        """
        Get: DropRole(self: ServerEventSet) -> bool
        Set: DropRole(self: ServerEventSet) = value
        """
        ...

    @property
    def DropRoleMember(self) -> bool:
        """
        Get: DropRoleMember(self: ServerEventSet) -> bool
        Set: DropRoleMember(self: ServerEventSet) = value
        """
        ...

    @property
    def DropRoute(self) -> bool:
        """
        Get: DropRoute(self: ServerEventSet) -> bool
        Set: DropRoute(self: ServerEventSet) = value
        """
        ...

    @property
    def DropRule(self) -> bool:
        """
        Get: DropRule(self: ServerEventSet) -> bool
        Set: DropRule(self: ServerEventSet) = value
        """
        ...

    @property
    def DropSchema(self) -> bool:
        """
        Get: DropSchema(self: ServerEventSet) -> bool
        Set: DropSchema(self: ServerEventSet) = value
        """
        ...

    @property
    def DropSearchPropertyList(self) -> bool:
        """
        Get: DropSearchPropertyList(self: ServerEventSet) -> bool
        Set: DropSearchPropertyList(self: ServerEventSet) = value
        """
        ...

    @property
    def DropSecurityPolicy(self) -> bool:
        """
        Get: DropSecurityPolicy(self: ServerEventSet) -> bool
        Set: DropSecurityPolicy(self: ServerEventSet) = value
        """
        ...

    @property
    def DropSequence(self) -> bool:
        """
        Get: DropSequence(self: ServerEventSet) -> bool
        Set: DropSequence(self: ServerEventSet) = value
        """
        ...

    @property
    def DropServerAudit(self) -> bool:
        """
        Get: DropServerAudit(self: ServerEventSet) -> bool
        Set: DropServerAudit(self: ServerEventSet) = value
        """
        ...

    @property
    def DropServerAuditSpecification(self) -> bool:
        """
        Get: DropServerAuditSpecification(self: ServerEventSet) -> bool
        Set: DropServerAuditSpecification(self: ServerEventSet) = value
        """
        ...

    @property
    def DropServerRole(self) -> bool:
        """
        Get: DropServerRole(self: ServerEventSet) -> bool
        Set: DropServerRole(self: ServerEventSet) = value
        """
        ...

    @property
    def DropServerRoleMember(self) -> bool:
        """
        Get: DropServerRoleMember(self: ServerEventSet) -> bool
        Set: DropServerRoleMember(self: ServerEventSet) = value
        """
        ...

    @property
    def DropService(self) -> bool:
        """
        Get: DropService(self: ServerEventSet) -> bool
        Set: DropService(self: ServerEventSet) = value
        """
        ...

    @property
    def DropSignature(self) -> bool:
        """
        Get: DropSignature(self: ServerEventSet) -> bool
        Set: DropSignature(self: ServerEventSet) = value
        """
        ...

    @property
    def DropSignatureSchemaObject(self) -> bool:
        """
        Get: DropSignatureSchemaObject(self: ServerEventSet) -> bool
        Set: DropSignatureSchemaObject(self: ServerEventSet) = value
        """
        ...

    @property
    def DropStatistics(self) -> bool:
        """
        Get: DropStatistics(self: ServerEventSet) -> bool
        Set: DropStatistics(self: ServerEventSet) = value
        """
        ...

    @property
    def DropSymmetricKey(self) -> bool:
        """
        Get: DropSymmetricKey(self: ServerEventSet) -> bool
        Set: DropSymmetricKey(self: ServerEventSet) = value
        """
        ...

    @property
    def DropSynonym(self) -> bool:
        """
        Get: DropSynonym(self: ServerEventSet) -> bool
        Set: DropSynonym(self: ServerEventSet) = value
        """
        ...

    @property
    def DropTable(self) -> bool:
        """
        Get: DropTable(self: ServerEventSet) -> bool
        Set: DropTable(self: ServerEventSet) = value
        """
        ...

    @property
    def DropTrigger(self) -> bool:
        """
        Get: DropTrigger(self: ServerEventSet) -> bool
        Set: DropTrigger(self: ServerEventSet) = value
        """
        ...

    @property
    def DropType(self) -> bool:
        """
        Get: DropType(self: ServerEventSet) -> bool
        Set: DropType(self: ServerEventSet) = value
        """
        ...

    @property
    def DropUser(self) -> bool:
        """
        Get: DropUser(self: ServerEventSet) -> bool
        Set: DropUser(self: ServerEventSet) = value
        """
        ...

    @property
    def DropView(self) -> bool:
        """
        Get: DropView(self: ServerEventSet) -> bool
        Set: DropView(self: ServerEventSet) = value
        """
        ...

    @property
    def DropWorkloadGroup(self) -> bool:
        """
        Get: DropWorkloadGroup(self: ServerEventSet) -> bool
        Set: DropWorkloadGroup(self: ServerEventSet) = value
        """
        ...

    @property
    def DropXmlSchemaCollection(self) -> bool:
        """
        Get: DropXmlSchemaCollection(self: ServerEventSet) -> bool
        Set: DropXmlSchemaCollection(self: ServerEventSet) = value
        """
        ...

    @property
    def GrantDatabase(self) -> bool:
        """
        Get: GrantDatabase(self: ServerEventSet) -> bool
        Set: GrantDatabase(self: ServerEventSet) = value
        """
        ...

    @property
    def GrantServer(self) -> bool:
        """
        Get: GrantServer(self: ServerEventSet) -> bool
        Set: GrantServer(self: ServerEventSet) = value
        """
        ...

    @property
    def Rename(self) -> bool:
        """
        Get: Rename(self: ServerEventSet) -> bool
        Set: Rename(self: ServerEventSet) = value
        """
        ...

    @property
    def RevokeDatabase(self) -> bool:
        """
        Get: RevokeDatabase(self: ServerEventSet) -> bool
        Set: RevokeDatabase(self: ServerEventSet) = value
        """
        ...

    @property
    def RevokeServer(self) -> bool:
        """
        Get: RevokeServer(self: ServerEventSet) -> bool
        Set: RevokeServer(self: ServerEventSet) = value
        """
        ...

    @property
    def UnbindDefault(self) -> bool:
        """
        Get: UnbindDefault(self: ServerEventSet) -> bool
        Set: UnbindDefault(self: ServerEventSet) = value
        """
        ...

    @property
    def UnbindRule(self) -> bool:
        """
        Get: UnbindRule(self: ServerEventSet) -> bool
        Set: UnbindRule(self: ServerEventSet) = value
        """
        ...

    @property
    def UpdateStatistics(self) -> bool:
        """
        Get: UpdateStatistics(self: ServerEventSet) -> bool
        Set: UpdateStatistics(self: ServerEventSet) = value
        """
        ...


    def Add(self, *__args:ServerEvent) -> ServerEventSet:
        """
        Add(self: ServerEventSet, anEvent: ServerEvent) -> ServerEventSet
        Add(eventSet: ServerEventSet, anEvent: ServerEvent) -> ServerEventSet
        """
        ...

    def Remove(self, anEvent:ServerEvent) -> ServerEventSet:
        """ Remove(self: ServerEventSet, anEvent: ServerEvent) -> ServerEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:ServerEventSet, anEvent:ServerEvent) -> ServerEventSet:
        """ Subtract(eventSet: ServerEventSet, anEvent: ServerEvent) -> ServerEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: ServerEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class ServerLoginMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ServerLoginMode, values: Integrated (1), Mixed (2), Normal (0), Unknown (9) """
    Integrated: ServerLoginMode = ...
    Mixed: ServerLoginMode = ...
    Normal: ServerLoginMode = ...
    Unknown: ServerLoginMode = ...
    value__ = ...


class ServerMirroringRole(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ServerMirroringRole, values: All (3), None (0), Partner (1), Witness (2) """
    All: ServerMirroringRole = ...
    Partner: ServerMirroringRole = ...
    value__ = ...
    Witness: ServerMirroringRole = ...


class ServerPermission: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AdministerBulkOperations(self) -> ServerPermission:
        """ Get: AdministerBulkOperations() -> ServerPermission """
        ...

    @property
    def AlterAnyAvailabilityGroup(self) -> ServerPermission:
        """ Get: AlterAnyAvailabilityGroup() -> ServerPermission """
        ...

    @property
    def AlterAnyConnection(self) -> ServerPermission:
        """ Get: AlterAnyConnection() -> ServerPermission """
        ...

    @property
    def AlterAnyCredential(self) -> ServerPermission:
        """ Get: AlterAnyCredential() -> ServerPermission """
        ...

    @property
    def AlterAnyDatabase(self) -> ServerPermission:
        """ Get: AlterAnyDatabase() -> ServerPermission """
        ...

    @property
    def AlterAnyEndpoint(self) -> ServerPermission:
        """ Get: AlterAnyEndpoint() -> ServerPermission """
        ...

    @property
    def AlterAnyEventNotification(self) -> ServerPermission:
        """ Get: AlterAnyEventNotification() -> ServerPermission """
        ...

    @property
    def AlterAnyEventSession(self) -> ServerPermission:
        """ Get: AlterAnyEventSession() -> ServerPermission """
        ...

    @property
    def AlterAnyLinkedServer(self) -> ServerPermission:
        """ Get: AlterAnyLinkedServer() -> ServerPermission """
        ...

    @property
    def AlterAnyLogin(self) -> ServerPermission:
        """ Get: AlterAnyLogin() -> ServerPermission """
        ...

    @property
    def AlterAnyServerAudit(self) -> ServerPermission:
        """ Get: AlterAnyServerAudit() -> ServerPermission """
        ...

    @property
    def AlterAnyServerRole(self) -> ServerPermission:
        """ Get: AlterAnyServerRole() -> ServerPermission """
        ...

    @property
    def AlterResources(self) -> ServerPermission:
        """ Get: AlterResources() -> ServerPermission """
        ...

    @property
    def AlterServerState(self) -> ServerPermission:
        """ Get: AlterServerState() -> ServerPermission """
        ...

    @property
    def AlterSettings(self) -> ServerPermission:
        """ Get: AlterSettings() -> ServerPermission """
        ...

    @property
    def AlterTrace(self) -> ServerPermission:
        """ Get: AlterTrace() -> ServerPermission """
        ...

    @property
    def AuthenticateServer(self) -> ServerPermission:
        """ Get: AuthenticateServer() -> ServerPermission """
        ...

    @property
    def ConnectAnyDatabase(self) -> ServerPermission:
        """ Get: ConnectAnyDatabase() -> ServerPermission """
        ...

    @property
    def ConnectSql(self) -> ServerPermission:
        """ Get: ConnectSql() -> ServerPermission """
        ...

    @property
    def ControlServer(self) -> ServerPermission:
        """ Get: ControlServer() -> ServerPermission """
        ...

    @property
    def CreateAnyDatabase(self) -> ServerPermission:
        """ Get: CreateAnyDatabase() -> ServerPermission """
        ...

    @property
    def CreateAvailabilityGroup(self) -> ServerPermission:
        """ Get: CreateAvailabilityGroup() -> ServerPermission """
        ...

    @property
    def CreateDdlEventNotification(self) -> ServerPermission:
        """ Get: CreateDdlEventNotification() -> ServerPermission """
        ...

    @property
    def CreateEndpoint(self) -> ServerPermission:
        """ Get: CreateEndpoint() -> ServerPermission """
        ...

    @property
    def CreateServerRole(self) -> ServerPermission:
        """ Get: CreateServerRole() -> ServerPermission """
        ...

    @property
    def CreateTraceEventNotification(self) -> ServerPermission:
        """ Get: CreateTraceEventNotification() -> ServerPermission """
        ...

    @property
    def ExternalAccessAssembly(self) -> ServerPermission:
        """ Get: ExternalAccessAssembly() -> ServerPermission """
        ...

    @property
    def ImpersonateAnyLogin(self) -> ServerPermission:
        """ Get: ImpersonateAnyLogin() -> ServerPermission """
        ...

    @property
    def SelectAllUserSecurables(self) -> ServerPermission:
        """ Get: SelectAllUserSecurables() -> ServerPermission """
        ...

    @property
    def Shutdown(self) -> ServerPermission:
        """ Get: Shutdown() -> ServerPermission """
        ...

    @property
    def UnsafeAssembly(self) -> ServerPermission:
        """ Get: UnsafeAssembly() -> ServerPermission """
        ...

    @property
    def ViewAnyDatabase(self) -> ServerPermission:
        """ Get: ViewAnyDatabase() -> ServerPermission """
        ...

    @property
    def ViewAnyDefinition(self) -> ServerPermission:
        """ Get: ViewAnyDefinition() -> ServerPermission """
        ...

    @property
    def ViewServerState(self) -> ServerPermission:
        """ Get: ViewServerState() -> ServerPermission """
        ...


    @staticmethod
    def Add(permissionLeft:ServerPermission, permissionRight:ServerPermission): # -> ServerPermissionSet
        """ Add(permissionLeft: ServerPermission, permissionRight: ServerPermission) -> ServerPermissionSet """
        ...

    @staticmethod
    def BitwiseOr(permissionLeft:ServerPermission, permissionRight:ServerPermission): # -> ServerPermissionSet
        """ BitwiseOr(permissionLeft: ServerPermission, permissionRight: ServerPermission) -> ServerPermissionSet """
        ...

    def Equals(self, o:object) -> bool:
        """ Equals(self: ServerPermission, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: ServerPermission) -> int """
        ...

    @staticmethod
    def ToServerPermissionSet(permission:ServerPermission): # -> ServerPermissionSet
        """ ToServerPermissionSet(permission: ServerPermission) -> ServerPermissionSet """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(permissionLeft: ServerPermission, permissionRight: ServerPermission) -> ServerPermissionSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(permissionLeft: ServerPermission, permissionRight: ServerPermission) -> ServerPermissionSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(permissionLeft: ServerPermission, permissionRight: ServerPermission) -> ServerPermissionSet """
        ...



class ServerPermissionInfo(PermissionInfo): # skipped bases: <type 'object'>
    """ ServerPermissionInfo() """
    @property
    def PermissionType(self): # -> ServerPermissionSet
        """ Get: PermissionType(self: ServerPermissionInfo) -> ServerPermissionSet """
        ...



class ServerPermissionSet(PermissionSetBase): # skipped bases: <type 'object'>
    """
    ServerPermissionSet()
    ServerPermissionSet(oServerPermissionSet: ServerPermissionSet)
    ServerPermissionSet(permission: ServerPermission)
    ServerPermissionSet(*permissions: Array[ServerPermission])
    """
    @property
    def AdministerBulkOperations(self) -> bool:
        """
        Get: AdministerBulkOperations(self: ServerPermissionSet) -> bool
        Set: AdministerBulkOperations(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterAnyAvailabilityGroup(self) -> bool:
        """
        Get: AlterAnyAvailabilityGroup(self: ServerPermissionSet) -> bool
        Set: AlterAnyAvailabilityGroup(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterAnyConnection(self) -> bool:
        """
        Get: AlterAnyConnection(self: ServerPermissionSet) -> bool
        Set: AlterAnyConnection(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterAnyCredential(self) -> bool:
        """
        Get: AlterAnyCredential(self: ServerPermissionSet) -> bool
        Set: AlterAnyCredential(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterAnyDatabase(self) -> bool:
        """
        Get: AlterAnyDatabase(self: ServerPermissionSet) -> bool
        Set: AlterAnyDatabase(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterAnyEndpoint(self) -> bool:
        """
        Get: AlterAnyEndpoint(self: ServerPermissionSet) -> bool
        Set: AlterAnyEndpoint(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterAnyEventNotification(self) -> bool:
        """
        Get: AlterAnyEventNotification(self: ServerPermissionSet) -> bool
        Set: AlterAnyEventNotification(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterAnyEventSession(self) -> bool:
        """
        Get: AlterAnyEventSession(self: ServerPermissionSet) -> bool
        Set: AlterAnyEventSession(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterAnyLinkedServer(self) -> bool:
        """
        Get: AlterAnyLinkedServer(self: ServerPermissionSet) -> bool
        Set: AlterAnyLinkedServer(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterAnyLogin(self) -> bool:
        """
        Get: AlterAnyLogin(self: ServerPermissionSet) -> bool
        Set: AlterAnyLogin(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterAnyServerAudit(self) -> bool:
        """
        Get: AlterAnyServerAudit(self: ServerPermissionSet) -> bool
        Set: AlterAnyServerAudit(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterAnyServerRole(self) -> bool:
        """
        Get: AlterAnyServerRole(self: ServerPermissionSet) -> bool
        Set: AlterAnyServerRole(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterResources(self) -> bool:
        """
        Get: AlterResources(self: ServerPermissionSet) -> bool
        Set: AlterResources(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterServerState(self) -> bool:
        """
        Get: AlterServerState(self: ServerPermissionSet) -> bool
        Set: AlterServerState(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterSettings(self) -> bool:
        """
        Get: AlterSettings(self: ServerPermissionSet) -> bool
        Set: AlterSettings(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AlterTrace(self) -> bool:
        """
        Get: AlterTrace(self: ServerPermissionSet) -> bool
        Set: AlterTrace(self: ServerPermissionSet) = value
        """
        ...

    @property
    def AuthenticateServer(self) -> bool:
        """
        Get: AuthenticateServer(self: ServerPermissionSet) -> bool
        Set: AuthenticateServer(self: ServerPermissionSet) = value
        """
        ...

    @property
    def ConnectAnyDatabase(self) -> bool:
        """
        Get: ConnectAnyDatabase(self: ServerPermissionSet) -> bool
        Set: ConnectAnyDatabase(self: ServerPermissionSet) = value
        """
        ...

    @property
    def ConnectSql(self) -> bool:
        """
        Get: ConnectSql(self: ServerPermissionSet) -> bool
        Set: ConnectSql(self: ServerPermissionSet) = value
        """
        ...

    @property
    def ControlServer(self) -> bool:
        """
        Get: ControlServer(self: ServerPermissionSet) -> bool
        Set: ControlServer(self: ServerPermissionSet) = value
        """
        ...

    @property
    def CreateAnyDatabase(self) -> bool:
        """
        Get: CreateAnyDatabase(self: ServerPermissionSet) -> bool
        Set: CreateAnyDatabase(self: ServerPermissionSet) = value
        """
        ...

    @property
    def CreateAvailabilityGroup(self) -> bool:
        """
        Get: CreateAvailabilityGroup(self: ServerPermissionSet) -> bool
        Set: CreateAvailabilityGroup(self: ServerPermissionSet) = value
        """
        ...

    @property
    def CreateDdlEventNotification(self) -> bool:
        """
        Get: CreateDdlEventNotification(self: ServerPermissionSet) -> bool
        Set: CreateDdlEventNotification(self: ServerPermissionSet) = value
        """
        ...

    @property
    def CreateEndpoint(self) -> bool:
        """
        Get: CreateEndpoint(self: ServerPermissionSet) -> bool
        Set: CreateEndpoint(self: ServerPermissionSet) = value
        """
        ...

    @property
    def CreateServerRole(self) -> bool:
        """
        Get: CreateServerRole(self: ServerPermissionSet) -> bool
        Set: CreateServerRole(self: ServerPermissionSet) = value
        """
        ...

    @property
    def CreateTraceEventNotification(self) -> bool:
        """
        Get: CreateTraceEventNotification(self: ServerPermissionSet) -> bool
        Set: CreateTraceEventNotification(self: ServerPermissionSet) = value
        """
        ...

    @property
    def ExternalAccessAssembly(self) -> bool:
        """
        Get: ExternalAccessAssembly(self: ServerPermissionSet) -> bool
        Set: ExternalAccessAssembly(self: ServerPermissionSet) = value
        """
        ...

    @property
    def ImpersonateAnyLogin(self) -> bool:
        """
        Get: ImpersonateAnyLogin(self: ServerPermissionSet) -> bool
        Set: ImpersonateAnyLogin(self: ServerPermissionSet) = value
        """
        ...

    @property
    def SelectAllUserSecurables(self) -> bool:
        """
        Get: SelectAllUserSecurables(self: ServerPermissionSet) -> bool
        Set: SelectAllUserSecurables(self: ServerPermissionSet) = value
        """
        ...

    @property
    def Shutdown(self) -> bool:
        """
        Get: Shutdown(self: ServerPermissionSet) -> bool
        Set: Shutdown(self: ServerPermissionSet) = value
        """
        ...

    @property
    def UnsafeAssembly(self) -> bool:
        """
        Get: UnsafeAssembly(self: ServerPermissionSet) -> bool
        Set: UnsafeAssembly(self: ServerPermissionSet) = value
        """
        ...

    @property
    def ViewAnyDatabase(self) -> bool:
        """
        Get: ViewAnyDatabase(self: ServerPermissionSet) -> bool
        Set: ViewAnyDatabase(self: ServerPermissionSet) = value
        """
        ...

    @property
    def ViewAnyDefinition(self) -> bool:
        """
        Get: ViewAnyDefinition(self: ServerPermissionSet) -> bool
        Set: ViewAnyDefinition(self: ServerPermissionSet) = value
        """
        ...

    @property
    def ViewServerState(self) -> bool:
        """
        Get: ViewServerState(self: ServerPermissionSet) -> bool
        Set: ViewServerState(self: ServerPermissionSet) = value
        """
        ...


    def Add(self, *__args:ServerPermission) -> ServerPermissionSet:
        """
        Add(self: ServerPermissionSet, permission: ServerPermission) -> ServerPermissionSet
        Add(permissionLeft: ServerPermissionSet, permissionRight: ServerPermission) -> ServerPermissionSet
        """
        ...

    def Remove(self, permission:ServerPermission) -> ServerPermissionSet:
        """ Remove(self: ServerPermissionSet, permission: ServerPermission) -> ServerPermissionSet """
        ...

    @staticmethod
    def Subtract(permissionLeft:ServerPermissionSet, permissionRight:ServerPermission) -> ServerPermissionSet:
        """ Subtract(permissionLeft: ServerPermissionSet, permissionRight: ServerPermission) -> ServerPermissionSet """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class ServerPermissionSetValue(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ServerPermissionSetValue, values: AdministerBulkOperations (0), AlterAnyAvailabilityGroup (28), AlterAnyConnection (2), AlterAnyCredential (1), AlterAnyDatabase (3), AlterAnyEndpoint (5), AlterAnyEventNotification (4), AlterAnyEventSession (30), AlterAnyLinkedServer (7), AlterAnyLogin (6), AlterAnyServerAudit (25), AlterAnyServerRole (26), AlterResources (8), AlterServerState (9), AlterSettings (10), AlterTrace (11), AuthenticateServer (12), ConnectAnyDatabase (32), ConnectSql (14), ControlServer (13), CreateAnyDatabase (15), CreateAvailabilityGroup (29), CreateDdlEventNotification (16), CreateEndpoint (17), CreateServerRole (27), CreateTraceEventNotification (18), ExternalAccessAssembly (23), ImpersonateAnyLogin (33), SelectAllUserSecurables (31), Shutdown (19), UnsafeAssembly (24), ViewAnyDatabase (21), ViewAnyDefinition (20), ViewServerState (22) """
    AdministerBulkOperations: ServerPermissionSetValue = ...
    AlterAnyAvailabilityGroup: ServerPermissionSetValue = ...
    AlterAnyConnection: ServerPermissionSetValue = ...
    AlterAnyCredential: ServerPermissionSetValue = ...
    AlterAnyDatabase: ServerPermissionSetValue = ...
    AlterAnyEndpoint: ServerPermissionSetValue = ...
    AlterAnyEventNotification: ServerPermissionSetValue = ...
    AlterAnyEventSession: ServerPermissionSetValue = ...
    AlterAnyLinkedServer: ServerPermissionSetValue = ...
    AlterAnyLogin: ServerPermissionSetValue = ...
    AlterAnyServerAudit: ServerPermissionSetValue = ...
    AlterAnyServerRole: ServerPermissionSetValue = ...
    AlterResources: ServerPermissionSetValue = ...
    AlterServerState: ServerPermissionSetValue = ...
    AlterSettings: ServerPermissionSetValue = ...
    AlterTrace: ServerPermissionSetValue = ...
    AuthenticateServer: ServerPermissionSetValue = ...
    ConnectAnyDatabase: ServerPermissionSetValue = ...
    ConnectSql: ServerPermissionSetValue = ...
    ControlServer: ServerPermissionSetValue = ...
    CreateAnyDatabase: ServerPermissionSetValue = ...
    CreateAvailabilityGroup: ServerPermissionSetValue = ...
    CreateDdlEventNotification: ServerPermissionSetValue = ...
    CreateEndpoint: ServerPermissionSetValue = ...
    CreateServerRole: ServerPermissionSetValue = ...
    CreateTraceEventNotification: ServerPermissionSetValue = ...
    ExternalAccessAssembly: ServerPermissionSetValue = ...
    ImpersonateAnyLogin: ServerPermissionSetValue = ...
    SelectAllUserSecurables: ServerPermissionSetValue = ...
    Shutdown: ServerPermissionSetValue = ...
    UnsafeAssembly: ServerPermissionSetValue = ...
    value__ = ...
    ViewAnyDatabase: ServerPermissionSetValue = ...
    ViewAnyDefinition: ServerPermissionSetValue = ...
    ViewServerState: ServerPermissionSetValue = ...


class ServerProxyAccount(SqlSmoObject, IAlterable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def IsEnabled(self) -> bool:
        """
        Get: IsEnabled(self: ServerProxyAccount) -> bool
        Set: IsEnabled(self: ServerProxyAccount) = value
        """
        ...

    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: ServerProxyAccount) -> Server """
        ...

    @property
    def WindowsAccount(self) -> str:
        """
        Get: WindowsAccount(self: ServerProxyAccount) -> str
        Set: WindowsAccount(self: ServerProxyAccount) = value
        """
        ...


    def SetAccount(self, windowsAccount:str, password:str): # -> 
        """ SetAccount(self: ServerProxyAccount, windowsAccount: str, password: str)SetAccount(self: ServerProxyAccount, windowsAccount: str, password: SecureString) """
        ...

    def SetPassword(self, password:str): # -> 
        """ SetPassword(self: ServerProxyAccount, password: str)SetPassword(self: ServerProxyAccount, password: SecureString) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ServerRole(IDroppable, IAlterable, ICreatable, IScriptable, IRenamable, IObjectPermission, ScriptNameObjectBase, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    ServerRole()
    ServerRole(server: Server, name: str)
    """
    @property
    def DateCreated(self) -> DateTime:
        """ Get: DateCreated(self: ServerRole) -> DateTime """
        ...

    @property
    def DateModified(self) -> DateTime:
        """ Get: DateModified(self: ServerRole) -> DateTime """
        ...

    @property
    def Events(self): # -> ServerRoleEvents
        """ Get: Events(self: ServerRole) -> ServerRoleEvents """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: ServerRole) -> int """
        ...

    @property
    def IsFixedRole(self) -> bool:
        """ Get: IsFixedRole(self: ServerRole) -> bool """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: ServerRole) -> str
        Set: Owner(self: ServerRole) = value
        """
        ...

    @property
    def Parent(self) -> Server:
        """
        Get: Parent(self: ServerRole) -> Server
        Set: Parent(self: ServerRole) = value
        """
        ...


    def AddMember(self, memberName:str): # -> 
        """ AddMember(self: ServerRole, memberName: str) """
        ...

    def AddMembershipToRole(self, roleName:str): # -> 
        """ AddMembershipToRole(self: ServerRole, roleName: str) """
        ...

    def DropMember(self, memberName:str): # -> 
        """ DropMember(self: ServerRole, memberName: str) """
        ...

    def DropMembershipFromRole(self, roleName:str): # -> 
        """ DropMembershipFromRole(self: ServerRole, roleName: str) """
        ...

    def EnumAgentProxyAccounts(self) -> DataTable:
        """ EnumAgentProxyAccounts(self: ServerRole) -> DataTable """
        ...

    def EnumContainingRoleNames(self) -> StringCollection:
        """ EnumContainingRoleNames(self: ServerRole) -> StringCollection """
        ...

    def EnumMemberNames(self) -> StringCollection:
        """ EnumMemberNames(self: ServerRole) -> StringCollection """
        ...

    def EnumServerRoleMembers(self) -> StringCollection:
        """ EnumServerRoleMembers(self: ServerRole) -> StringCollection """
        ...

    def EnumServerRolePermissions(self) -> DataTable:
        """ EnumServerRolePermissions(self: ServerRole) -> DataTable """
        ...

    def __new__(cls, server:Server = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ServerRoleCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: ServerRoleCollection) -> Server """
        ...


    def Add(self, serverRole:ServerRole): # -> 
        """ Add(self: ServerRoleCollection, serverRole: ServerRole) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ServerRoleCollection, array: Array[ServerRole], index: int) """
        ...

    def ItemById(self, id:int) -> ServerRole:
        """ ItemById(self: ServerRoleCollection, id: int) -> ServerRole """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ServerRoleEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self) -> ObjectEventSet:
        """ GetEventSelection(self: ServerRoleEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: ServerRoleEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: ServerRoleEvents) """
        ...

    def SubscribeToEvents(self, events:ObjectEventSet, eventHandler:ServerEventHandler = ...): # -> 
        """ SubscribeToEvents(self: ServerRoleEvents, events: ObjectEventSet)SubscribeToEvents(self: ServerRoleEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: ServerRoleEvents) """
        ...

    def UnsubscribeFromEvents(self, events:ObjectEventSet): # -> 
        """ UnsubscribeFromEvents(self: ServerRoleEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class ServerRoleExtender(SmoObjectExtender, ISfcValidate): # skipped bases: <type 'INotifyPropertyChanged'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcPropertyProvider'>, <type 'object'>
    """
    ServerRoleExtender()
    ServerRoleExtender(serverRole: ServerRole)
    """
    @property
    def ConnectionContext(self) -> ServerConnection:
        """ Get: ConnectionContext(self: ServerRoleExtender) -> ServerConnection """
        ...

    @property
    def ContainingRoleNames(self) -> StringCollection:
        """ Get: ContainingRoleNames(self: ServerRoleExtender) -> StringCollection """
        ...

    @property
    def CurrentObject(self) -> SqlSmoObject:
        """ Get: CurrentObject(self: ServerRoleExtender) -> SqlSmoObject """
        ...

    @property
    def GeneralPageDataContainer(self) -> object:
        """
        Get: GeneralPageDataContainer(self: ServerRoleExtender) -> object
        Set: GeneralPageDataContainer(self: ServerRoleExtender) = value
        """
        ...

    @property
    def GeneralPageOnRunNow(self) -> object:
        """
        Get: GeneralPageOnRunNow(self: ServerRoleExtender) -> object
        Set: GeneralPageOnRunNow(self: ServerRoleExtender) = value
        """
        ...

    @property
    def IsFixedRoleOrPublic(self) -> bool:
        """ Get: IsFixedRoleOrPublic(self: ServerRoleExtender) -> bool """
        ...

    @property
    def MemberNameIsMemberHash(self) -> Dictionary:
        """ Get: MemberNameIsMemberHash(self: ServerRoleExtender) -> Dictionary[str, bool] """
        ...

    @property
    def OwnerForUI(self) -> str:
        """
        Get: OwnerForUI(self: ServerRoleExtender) -> str
        Set: OwnerForUI(self: ServerRoleExtender) = value
        """
        ...

    @property
    def RoleMembersTableData(self) -> DataTable:
        """ Get: RoleMembersTableData(self: ServerRoleExtender) -> DataTable """
        ...

    @property
    def ServerRoleMembershipsTableData(self) -> DataTable:
        """ Get: ServerRoleMembershipsTableData(self: ServerRoleExtender) -> DataTable """
        ...

    @property
    def ServerRoleNameHasMembershipHash(self) -> Dictionary:
        """ Get: ServerRoleNameHasMembershipHash(self: ServerRoleExtender) -> Dictionary[str, bool] """
        ...

    @property
    def State(self): # -> SqlSmoState
        """ Get: State(self: ServerRoleExtender) -> SqlSmoState """
        ...


    def RefreshRoleMembersHash(self): # -> 
        """ RefreshRoleMembersHash(self: ServerRoleExtender) """
        ...

    def RefreshServerRoleNameHasMembershipHash(self): # -> 
        """ RefreshServerRoleNameHasMembershipHash(self: ServerRoleExtender) """
        ...


class ServerSecurityAdapter(IServerSecurityFacet, IDmfAdapter, ServerAdapterBase): # skipped bases: <type 'IDmfFacet'>, <type 'IAlterable'>, <type 'IRefreshable'>, <type 'object'>
    """ ServerSecurityAdapter(obj: Server) """
    pass

class ServerSelectionAdapter(IDmfAdapter, IServerSelectionFacet, ServerAdapterBase): # skipped bases: <type 'IDmfFacet'>, <type 'IAlterable'>, <type 'IRefreshable'>, <type 'object'>
    """ ServerSelectionAdapter(obj: Server) """
    pass

class ServerSetupAdapter(IDmfAdapter, IServerSetupFacet, ServerAdapterBase): # skipped bases: <type 'IDmfFacet'>, <type 'IAlterable'>, <type 'IRefreshable'>, <type 'object'>
    """ ServerSetupAdapter(obj: Server) """
    pass

class ServerStatus(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ServerStatus, values: Offline (16), OfflinePending (48), Online (1), OnlinePending (3), Unknown (0) """
    Offline: ServerStatus = ...
    OfflinePending: ServerStatus = ...
    Online: ServerStatus = ...
    OnlinePending: ServerStatus = ...
    Unknown: ServerStatus = ...
    value__ = ...


class ServerSurfaceAreaAdapter(ISurfaceAreaFacet, IDmfAdapter, ServerAdapterBase): # skipped bases: <type 'IDmfFacet'>, <type 'IAlterable'>, <type 'IRefreshable'>, <type 'object'>
    """ ServerSurfaceAreaAdapter(obj: Server) """
    def AlterEndpoints(self, *args): #cannot find CLR method
        """ AlterEndpoints(self: ServerSurfaceAreaAdapter) """
        ...

    def RefreshEndpoints(self, *args): #cannot find CLR method
        """ RefreshEndpoints(self: ServerSurfaceAreaAdapter) """
        ...


class ServerTraceEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AssemblyLoad(self) -> ServerTraceEvent:
        """ Get: AssemblyLoad() -> ServerTraceEvent """
        ...

    @property
    def AuditAddDBUserEvent(self) -> ServerTraceEvent:
        """ Get: AuditAddDBUserEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditAddloginEvent(self) -> ServerTraceEvent:
        """ Get: AuditAddloginEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditAddLoginToServerRoleEvent(self) -> ServerTraceEvent:
        """ Get: AuditAddLoginToServerRoleEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditAddMemberToDBRoleEvent(self) -> ServerTraceEvent:
        """ Get: AuditAddMemberToDBRoleEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditAddRoleEvent(self) -> ServerTraceEvent:
        """ Get: AuditAddRoleEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditAppRoleChangePasswordEvent(self) -> ServerTraceEvent:
        """ Get: AuditAppRoleChangePasswordEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditBackupRestoreEvent(self) -> ServerTraceEvent:
        """ Get: AuditBackupRestoreEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditChangeAuditEvent(self) -> ServerTraceEvent:
        """ Get: AuditChangeAuditEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditChangeDatabaseOwner(self) -> ServerTraceEvent:
        """ Get: AuditChangeDatabaseOwner() -> ServerTraceEvent """
        ...

    @property
    def AuditDatabaseManagementEvent(self) -> ServerTraceEvent:
        """ Get: AuditDatabaseManagementEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditDatabaseObjectAccessEvent(self) -> ServerTraceEvent:
        """ Get: AuditDatabaseObjectAccessEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditDatabaseObjectGdrEvent(self) -> ServerTraceEvent:
        """ Get: AuditDatabaseObjectGdrEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditDatabaseObjectManagementEvent(self) -> ServerTraceEvent:
        """ Get: AuditDatabaseObjectManagementEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditDatabaseObjectTakeOwnershipEvent(self) -> ServerTraceEvent:
        """ Get: AuditDatabaseObjectTakeOwnershipEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditDatabaseOperationEvent(self) -> ServerTraceEvent:
        """ Get: AuditDatabaseOperationEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditDatabasePrincipalImpersonationEvent(self) -> ServerTraceEvent:
        """ Get: AuditDatabasePrincipalImpersonationEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditDatabasePrincipalManagementEvent(self) -> ServerTraceEvent:
        """ Get: AuditDatabasePrincipalManagementEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditDatabaseScopeGdrEvent(self) -> ServerTraceEvent:
        """ Get: AuditDatabaseScopeGdrEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditDbccEvent(self) -> ServerTraceEvent:
        """ Get: AuditDbccEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditFulltext(self) -> ServerTraceEvent:
        """ Get: AuditFulltext() -> ServerTraceEvent """
        ...

    @property
    def AuditLogin(self) -> ServerTraceEvent:
        """ Get: AuditLogin() -> ServerTraceEvent """
        ...

    @property
    def AuditLoginChangePasswordEvent(self) -> ServerTraceEvent:
        """ Get: AuditLoginChangePasswordEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditLoginChangePropertyEvent(self) -> ServerTraceEvent:
        """ Get: AuditLoginChangePropertyEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditLoginFailed(self) -> ServerTraceEvent:
        """ Get: AuditLoginFailed() -> ServerTraceEvent """
        ...

    @property
    def AuditLoginGdrEvent(self) -> ServerTraceEvent:
        """ Get: AuditLoginGdrEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditLogout(self) -> ServerTraceEvent:
        """ Get: AuditLogout() -> ServerTraceEvent """
        ...

    @property
    def AuditSchemaObjectAccessEvent(self) -> ServerTraceEvent:
        """ Get: AuditSchemaObjectAccessEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditSchemaObjectGdrEvent(self) -> ServerTraceEvent:
        """ Get: AuditSchemaObjectGdrEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditSchemaObjectManagementEvent(self) -> ServerTraceEvent:
        """ Get: AuditSchemaObjectManagementEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditSchemaObjectTakeOwnershipEvent(self) -> ServerTraceEvent:
        """ Get: AuditSchemaObjectTakeOwnershipEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditServerAlterTraceEvent(self) -> ServerTraceEvent:
        """ Get: AuditServerAlterTraceEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditServerObjectGdrEvent(self) -> ServerTraceEvent:
        """ Get: AuditServerObjectGdrEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditServerObjectManagementEvent(self) -> ServerTraceEvent:
        """ Get: AuditServerObjectManagementEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditServerObjectTakeOwnershipEvent(self) -> ServerTraceEvent:
        """ Get: AuditServerObjectTakeOwnershipEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditServerOperationEvent(self) -> ServerTraceEvent:
        """ Get: AuditServerOperationEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditServerPrincipalImpersonationEvent(self) -> ServerTraceEvent:
        """ Get: AuditServerPrincipalImpersonationEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditServerPrincipalManagementEvent(self) -> ServerTraceEvent:
        """ Get: AuditServerPrincipalManagementEvent() -> ServerTraceEvent """
        ...

    @property
    def AuditServerScopeGdrEvent(self) -> ServerTraceEvent:
        """ Get: AuditServerScopeGdrEvent() -> ServerTraceEvent """
        ...

    @property
    def BitmapWarning(self) -> ServerTraceEvent:
        """ Get: BitmapWarning() -> ServerTraceEvent """
        ...

    @property
    def BlockedProcessReport(self) -> ServerTraceEvent:
        """ Get: BlockedProcessReport() -> ServerTraceEvent """
        ...

    @property
    def CpuThresholdExceeded(self) -> ServerTraceEvent:
        """ Get: CpuThresholdExceeded() -> ServerTraceEvent """
        ...

    @property
    def DatabaseMirroringStateChange(self) -> ServerTraceEvent:
        """ Get: DatabaseMirroringStateChange() -> ServerTraceEvent """
        ...

    @property
    def DatabaseSuspectDataPage(self) -> ServerTraceEvent:
        """ Get: DatabaseSuspectDataPage() -> ServerTraceEvent """
        ...

    @property
    def DataFileAutoGrow(self) -> ServerTraceEvent:
        """ Get: DataFileAutoGrow() -> ServerTraceEvent """
        ...

    @property
    def DataFileAutoShrink(self) -> ServerTraceEvent:
        """ Get: DataFileAutoShrink() -> ServerTraceEvent """
        ...

    @property
    def DeadlockGraph(self) -> ServerTraceEvent:
        """ Get: DeadlockGraph() -> ServerTraceEvent """
        ...

    @property
    def DeprecationAnnouncement(self) -> ServerTraceEvent:
        """ Get: DeprecationAnnouncement() -> ServerTraceEvent """
        ...

    @property
    def DeprecationFinalSupport(self) -> ServerTraceEvent:
        """ Get: DeprecationFinalSupport() -> ServerTraceEvent """
        ...

    @property
    def Errorlog(self) -> ServerTraceEvent:
        """ Get: Errorlog() -> ServerTraceEvent """
        ...

    @property
    def Eventlog(self) -> ServerTraceEvent:
        """ Get: Eventlog() -> ServerTraceEvent """
        ...

    @property
    def Exception(self) -> ServerTraceEvent:
        """ Get: Exception() -> ServerTraceEvent """
        ...

    @property
    def ExchangeSpillEvent(self) -> ServerTraceEvent:
        """ Get: ExchangeSpillEvent() -> ServerTraceEvent """
        ...

    @property
    def ExecutionWarnings(self) -> ServerTraceEvent:
        """ Get: ExecutionWarnings() -> ServerTraceEvent """
        ...

    @property
    def FtCrawlAborted(self) -> ServerTraceEvent:
        """ Get: FtCrawlAborted() -> ServerTraceEvent """
        ...

    @property
    def FtCrawlStarted(self) -> ServerTraceEvent:
        """ Get: FtCrawlStarted() -> ServerTraceEvent """
        ...

    @property
    def FtCrawlStopped(self) -> ServerTraceEvent:
        """ Get: FtCrawlStopped() -> ServerTraceEvent """
        ...

    @property
    def HashWarning(self) -> ServerTraceEvent:
        """ Get: HashWarning() -> ServerTraceEvent """
        ...

    @property
    def LockDeadlock(self) -> ServerTraceEvent:
        """ Get: LockDeadlock() -> ServerTraceEvent """
        ...

    @property
    def LockDeadlockChain(self) -> ServerTraceEvent:
        """ Get: LockDeadlockChain() -> ServerTraceEvent """
        ...

    @property
    def LockEscalation(self) -> ServerTraceEvent:
        """ Get: LockEscalation() -> ServerTraceEvent """
        ...

    @property
    def LogFileAutoGrow(self) -> ServerTraceEvent:
        """ Get: LogFileAutoGrow() -> ServerTraceEvent """
        ...

    @property
    def LogFileAutoShrink(self) -> ServerTraceEvent:
        """ Get: LogFileAutoShrink() -> ServerTraceEvent """
        ...

    @property
    def MissingColumnStatistics(self) -> ServerTraceEvent:
        """ Get: MissingColumnStatistics() -> ServerTraceEvent """
        ...

    @property
    def MissingJoinPredicate(self) -> ServerTraceEvent:
        """ Get: MissingJoinPredicate() -> ServerTraceEvent """
        ...

    @property
    def MountTape(self) -> ServerTraceEvent:
        """ Get: MountTape() -> ServerTraceEvent """
        ...

    @property
    def ObjectAltered(self) -> ServerTraceEvent:
        """ Get: ObjectAltered() -> ServerTraceEvent """
        ...

    @property
    def ObjectCreated(self) -> ServerTraceEvent:
        """ Get: ObjectCreated() -> ServerTraceEvent """
        ...

    @property
    def ObjectDeleted(self) -> ServerTraceEvent:
        """ Get: ObjectDeleted() -> ServerTraceEvent """
        ...

    @property
    def OledbCallEvent(self) -> ServerTraceEvent:
        """ Get: OledbCallEvent() -> ServerTraceEvent """
        ...

    @property
    def OledbDatareadEvent(self) -> ServerTraceEvent:
        """ Get: OledbDatareadEvent() -> ServerTraceEvent """
        ...

    @property
    def OledbErrors(self) -> ServerTraceEvent:
        """ Get: OledbErrors() -> ServerTraceEvent """
        ...

    @property
    def OledbProviderInformation(self) -> ServerTraceEvent:
        """ Get: OledbProviderInformation() -> ServerTraceEvent """
        ...

    @property
    def OledbQueryinterfaceEvent(self) -> ServerTraceEvent:
        """ Get: OledbQueryinterfaceEvent() -> ServerTraceEvent """
        ...

    @property
    def Qn_dynamics(self) -> ServerTraceEvent:
        """ Get: Qn_dynamics() -> ServerTraceEvent """
        ...

    @property
    def Qn_parameterTable(self) -> ServerTraceEvent:
        """ Get: Qn_parameterTable() -> ServerTraceEvent """
        ...

    @property
    def Qn_subscription(self) -> ServerTraceEvent:
        """ Get: Qn_subscription() -> ServerTraceEvent """
        ...

    @property
    def Qn_template(self) -> ServerTraceEvent:
        """ Get: Qn_template() -> ServerTraceEvent """
        ...

    @property
    def ServerMemoryChange(self) -> ServerTraceEvent:
        """ Get: ServerMemoryChange() -> ServerTraceEvent """
        ...

    @property
    def ShowplanAllForQueryCompile(self) -> ServerTraceEvent:
        """ Get: ShowplanAllForQueryCompile() -> ServerTraceEvent """
        ...

    @property
    def ShowplanXml(self) -> ServerTraceEvent:
        """ Get: ShowplanXml() -> ServerTraceEvent """
        ...

    @property
    def ShowplanXmlForQueryCompile(self) -> ServerTraceEvent:
        """ Get: ShowplanXmlForQueryCompile() -> ServerTraceEvent """
        ...

    @property
    def ShowplanXmlStatisticsProfile(self) -> ServerTraceEvent:
        """ Get: ShowplanXmlStatisticsProfile() -> ServerTraceEvent """
        ...

    @property
    def SortWarnings(self) -> ServerTraceEvent:
        """ Get: SortWarnings() -> ServerTraceEvent """
        ...

    @property
    def SpCacheinsert(self) -> ServerTraceEvent:
        """ Get: SpCacheinsert() -> ServerTraceEvent """
        ...

    @property
    def SpCachemiss(self) -> ServerTraceEvent:
        """ Get: SpCachemiss() -> ServerTraceEvent """
        ...

    @property
    def SpCacheremove(self) -> ServerTraceEvent:
        """ Get: SpCacheremove() -> ServerTraceEvent """
        ...

    @property
    def SpRecompile(self) -> ServerTraceEvent:
        """ Get: SpRecompile() -> ServerTraceEvent """
        ...

    @property
    def SqlStmtrecompile(self) -> ServerTraceEvent:
        """ Get: SqlStmtrecompile() -> ServerTraceEvent """
        ...

    @property
    def TraceAllEvents(self) -> ServerTraceEvent:
        """ Get: TraceAllEvents() -> ServerTraceEvent """
        ...

    @property
    def TraceClr(self) -> ServerTraceEvent:
        """ Get: TraceClr() -> ServerTraceEvent """
        ...

    @property
    def TraceDatabase(self) -> ServerTraceEvent:
        """ Get: TraceDatabase() -> ServerTraceEvent """
        ...

    @property
    def TraceDeprecation(self) -> ServerTraceEvent:
        """ Get: TraceDeprecation() -> ServerTraceEvent """
        ...

    @property
    def TraceErrorsAndWarnings(self) -> ServerTraceEvent:
        """ Get: TraceErrorsAndWarnings() -> ServerTraceEvent """
        ...

    @property
    def TraceFileClose(self) -> ServerTraceEvent:
        """ Get: TraceFileClose() -> ServerTraceEvent """
        ...

    @property
    def TraceFullText(self) -> ServerTraceEvent:
        """ Get: TraceFullText() -> ServerTraceEvent """
        ...

    @property
    def TraceLocks(self) -> ServerTraceEvent:
        """ Get: TraceLocks() -> ServerTraceEvent """
        ...

    @property
    def TraceObjects(self) -> ServerTraceEvent:
        """ Get: TraceObjects() -> ServerTraceEvent """
        ...

    @property
    def TraceOledb(self) -> ServerTraceEvent:
        """ Get: TraceOledb() -> ServerTraceEvent """
        ...

    @property
    def TracePerformance(self) -> ServerTraceEvent:
        """ Get: TracePerformance() -> ServerTraceEvent """
        ...

    @property
    def TraceQueryNotifications(self) -> ServerTraceEvent:
        """ Get: TraceQueryNotifications() -> ServerTraceEvent """
        ...

    @property
    def TraceSecurityAudit(self) -> ServerTraceEvent:
        """ Get: TraceSecurityAudit() -> ServerTraceEvent """
        ...

    @property
    def TraceServer(self) -> ServerTraceEvent:
        """ Get: TraceServer() -> ServerTraceEvent """
        ...

    @property
    def TraceStoredProcedures(self) -> ServerTraceEvent:
        """ Get: TraceStoredProcedures() -> ServerTraceEvent """
        ...

    @property
    def TraceTsql(self) -> ServerTraceEvent:
        """ Get: TraceTsql() -> ServerTraceEvent """
        ...

    @property
    def TraceUserConfigurable(self) -> ServerTraceEvent:
        """ Get: TraceUserConfigurable() -> ServerTraceEvent """
        ...

    @property
    def Userconfigurable0(self) -> ServerTraceEvent:
        """ Get: Userconfigurable0() -> ServerTraceEvent """
        ...

    @property
    def Userconfigurable1(self) -> ServerTraceEvent:
        """ Get: Userconfigurable1() -> ServerTraceEvent """
        ...

    @property
    def Userconfigurable2(self) -> ServerTraceEvent:
        """ Get: Userconfigurable2() -> ServerTraceEvent """
        ...

    @property
    def Userconfigurable3(self) -> ServerTraceEvent:
        """ Get: Userconfigurable3() -> ServerTraceEvent """
        ...

    @property
    def Userconfigurable4(self) -> ServerTraceEvent:
        """ Get: Userconfigurable4() -> ServerTraceEvent """
        ...

    @property
    def Userconfigurable5(self) -> ServerTraceEvent:
        """ Get: Userconfigurable5() -> ServerTraceEvent """
        ...

    @property
    def Userconfigurable6(self) -> ServerTraceEvent:
        """ Get: Userconfigurable6() -> ServerTraceEvent """
        ...

    @property
    def Userconfigurable7(self) -> ServerTraceEvent:
        """ Get: Userconfigurable7() -> ServerTraceEvent """
        ...

    @property
    def Userconfigurable8(self) -> ServerTraceEvent:
        """ Get: Userconfigurable8() -> ServerTraceEvent """
        ...

    @property
    def Userconfigurable9(self) -> ServerTraceEvent:
        """ Get: Userconfigurable9() -> ServerTraceEvent """
        ...

    @property
    def UserErrorMessage(self) -> ServerTraceEvent:
        """ Get: UserErrorMessage() -> ServerTraceEvent """
        ...

    @property
    def XqueryStaticType(self) -> ServerTraceEvent:
        """ Get: XqueryStaticType() -> ServerTraceEvent """
        ...


    @staticmethod
    def Add(eventLeft:ServerTraceEvent, eventRight:ServerTraceEvent): # -> ServerTraceEventSet
        """ Add(eventLeft: ServerTraceEvent, eventRight: ServerTraceEvent) -> ServerTraceEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:ServerTraceEvent, eventRight:ServerTraceEvent): # -> ServerTraceEventSet
        """ BitwiseOr(eventLeft: ServerTraceEvent, eventRight: ServerTraceEvent) -> ServerTraceEventSet """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: ServerTraceEvent, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: ServerTraceEvent) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: ServerTraceEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: ServerTraceEvent, eventRight: ServerTraceEvent) -> ServerTraceEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: ServerTraceEvent, eventRight: ServerTraceEvent) -> ServerTraceEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: ServerTraceEvent, eventRight: ServerTraceEvent) -> ServerTraceEventSet """
        ...



class ServerTraceEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    ServerTraceEventSet()
    ServerTraceEventSet(eventSet: ServerTraceEventSet)
    ServerTraceEventSet(anEvent: ServerTraceEvent)
    ServerTraceEventSet(*events: Array[ServerTraceEvent])
    """
    @property
    def AssemblyLoad(self) -> bool:
        """
        Get: AssemblyLoad(self: ServerTraceEventSet) -> bool
        Set: AssemblyLoad(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditAddDBUserEvent(self) -> bool:
        """
        Get: AuditAddDBUserEvent(self: ServerTraceEventSet) -> bool
        Set: AuditAddDBUserEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditAddloginEvent(self) -> bool:
        """
        Get: AuditAddloginEvent(self: ServerTraceEventSet) -> bool
        Set: AuditAddloginEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditAddLoginToServerRoleEvent(self) -> bool:
        """
        Get: AuditAddLoginToServerRoleEvent(self: ServerTraceEventSet) -> bool
        Set: AuditAddLoginToServerRoleEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditAddMemberToDBRoleEvent(self) -> bool:
        """
        Get: AuditAddMemberToDBRoleEvent(self: ServerTraceEventSet) -> bool
        Set: AuditAddMemberToDBRoleEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditAddRoleEvent(self) -> bool:
        """
        Get: AuditAddRoleEvent(self: ServerTraceEventSet) -> bool
        Set: AuditAddRoleEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditAppRoleChangePasswordEvent(self) -> bool:
        """
        Get: AuditAppRoleChangePasswordEvent(self: ServerTraceEventSet) -> bool
        Set: AuditAppRoleChangePasswordEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditBackupRestoreEvent(self) -> bool:
        """
        Get: AuditBackupRestoreEvent(self: ServerTraceEventSet) -> bool
        Set: AuditBackupRestoreEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditChangeAuditEvent(self) -> bool:
        """
        Get: AuditChangeAuditEvent(self: ServerTraceEventSet) -> bool
        Set: AuditChangeAuditEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditChangeDatabaseOwner(self) -> bool:
        """
        Get: AuditChangeDatabaseOwner(self: ServerTraceEventSet) -> bool
        Set: AuditChangeDatabaseOwner(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditDatabaseManagementEvent(self) -> bool:
        """
        Get: AuditDatabaseManagementEvent(self: ServerTraceEventSet) -> bool
        Set: AuditDatabaseManagementEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditDatabaseObjectAccessEvent(self) -> bool:
        """
        Get: AuditDatabaseObjectAccessEvent(self: ServerTraceEventSet) -> bool
        Set: AuditDatabaseObjectAccessEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditDatabaseObjectGdrEvent(self) -> bool:
        """
        Get: AuditDatabaseObjectGdrEvent(self: ServerTraceEventSet) -> bool
        Set: AuditDatabaseObjectGdrEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditDatabaseObjectManagementEvent(self) -> bool:
        """
        Get: AuditDatabaseObjectManagementEvent(self: ServerTraceEventSet) -> bool
        Set: AuditDatabaseObjectManagementEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditDatabaseObjectTakeOwnershipEvent(self) -> bool:
        """
        Get: AuditDatabaseObjectTakeOwnershipEvent(self: ServerTraceEventSet) -> bool
        Set: AuditDatabaseObjectTakeOwnershipEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditDatabaseOperationEvent(self) -> bool:
        """
        Get: AuditDatabaseOperationEvent(self: ServerTraceEventSet) -> bool
        Set: AuditDatabaseOperationEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditDatabasePrincipalImpersonationEvent(self) -> bool:
        """
        Get: AuditDatabasePrincipalImpersonationEvent(self: ServerTraceEventSet) -> bool
        Set: AuditDatabasePrincipalImpersonationEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditDatabasePrincipalManagementEvent(self) -> bool:
        """
        Get: AuditDatabasePrincipalManagementEvent(self: ServerTraceEventSet) -> bool
        Set: AuditDatabasePrincipalManagementEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditDatabaseScopeGdrEvent(self) -> bool:
        """
        Get: AuditDatabaseScopeGdrEvent(self: ServerTraceEventSet) -> bool
        Set: AuditDatabaseScopeGdrEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditDbccEvent(self) -> bool:
        """
        Get: AuditDbccEvent(self: ServerTraceEventSet) -> bool
        Set: AuditDbccEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditFulltext(self) -> bool:
        """
        Get: AuditFulltext(self: ServerTraceEventSet) -> bool
        Set: AuditFulltext(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditLogin(self) -> bool:
        """
        Get: AuditLogin(self: ServerTraceEventSet) -> bool
        Set: AuditLogin(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditLoginChangePasswordEvent(self) -> bool:
        """
        Get: AuditLoginChangePasswordEvent(self: ServerTraceEventSet) -> bool
        Set: AuditLoginChangePasswordEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditLoginChangePropertyEvent(self) -> bool:
        """
        Get: AuditLoginChangePropertyEvent(self: ServerTraceEventSet) -> bool
        Set: AuditLoginChangePropertyEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditLoginFailed(self) -> bool:
        """
        Get: AuditLoginFailed(self: ServerTraceEventSet) -> bool
        Set: AuditLoginFailed(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditLoginGdrEvent(self) -> bool:
        """
        Get: AuditLoginGdrEvent(self: ServerTraceEventSet) -> bool
        Set: AuditLoginGdrEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditLogout(self) -> bool:
        """
        Get: AuditLogout(self: ServerTraceEventSet) -> bool
        Set: AuditLogout(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditSchemaObjectAccessEvent(self) -> bool:
        """
        Get: AuditSchemaObjectAccessEvent(self: ServerTraceEventSet) -> bool
        Set: AuditSchemaObjectAccessEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditSchemaObjectGdrEvent(self) -> bool:
        """
        Get: AuditSchemaObjectGdrEvent(self: ServerTraceEventSet) -> bool
        Set: AuditSchemaObjectGdrEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditSchemaObjectManagementEvent(self) -> bool:
        """
        Get: AuditSchemaObjectManagementEvent(self: ServerTraceEventSet) -> bool
        Set: AuditSchemaObjectManagementEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditSchemaObjectTakeOwnershipEvent(self) -> bool:
        """
        Get: AuditSchemaObjectTakeOwnershipEvent(self: ServerTraceEventSet) -> bool
        Set: AuditSchemaObjectTakeOwnershipEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditServerAlterTraceEvent(self) -> bool:
        """
        Get: AuditServerAlterTraceEvent(self: ServerTraceEventSet) -> bool
        Set: AuditServerAlterTraceEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditServerObjectGdrEvent(self) -> bool:
        """
        Get: AuditServerObjectGdrEvent(self: ServerTraceEventSet) -> bool
        Set: AuditServerObjectGdrEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditServerObjectManagementEvent(self) -> bool:
        """
        Get: AuditServerObjectManagementEvent(self: ServerTraceEventSet) -> bool
        Set: AuditServerObjectManagementEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditServerObjectTakeOwnershipEvent(self) -> bool:
        """
        Get: AuditServerObjectTakeOwnershipEvent(self: ServerTraceEventSet) -> bool
        Set: AuditServerObjectTakeOwnershipEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditServerOperationEvent(self) -> bool:
        """
        Get: AuditServerOperationEvent(self: ServerTraceEventSet) -> bool
        Set: AuditServerOperationEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditServerPrincipalImpersonationEvent(self) -> bool:
        """
        Get: AuditServerPrincipalImpersonationEvent(self: ServerTraceEventSet) -> bool
        Set: AuditServerPrincipalImpersonationEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditServerPrincipalManagementEvent(self) -> bool:
        """
        Get: AuditServerPrincipalManagementEvent(self: ServerTraceEventSet) -> bool
        Set: AuditServerPrincipalManagementEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def AuditServerScopeGdrEvent(self) -> bool:
        """
        Get: AuditServerScopeGdrEvent(self: ServerTraceEventSet) -> bool
        Set: AuditServerScopeGdrEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def BitmapWarning(self) -> bool:
        """
        Get: BitmapWarning(self: ServerTraceEventSet) -> bool
        Set: BitmapWarning(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def BlockedProcessReport(self) -> bool:
        """
        Get: BlockedProcessReport(self: ServerTraceEventSet) -> bool
        Set: BlockedProcessReport(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def CpuThresholdExceeded(self) -> bool:
        """
        Get: CpuThresholdExceeded(self: ServerTraceEventSet) -> bool
        Set: CpuThresholdExceeded(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def DatabaseMirroringStateChange(self) -> bool:
        """
        Get: DatabaseMirroringStateChange(self: ServerTraceEventSet) -> bool
        Set: DatabaseMirroringStateChange(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def DatabaseSuspectDataPage(self) -> bool:
        """
        Get: DatabaseSuspectDataPage(self: ServerTraceEventSet) -> bool
        Set: DatabaseSuspectDataPage(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def DataFileAutoGrow(self) -> bool:
        """
        Get: DataFileAutoGrow(self: ServerTraceEventSet) -> bool
        Set: DataFileAutoGrow(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def DataFileAutoShrink(self) -> bool:
        """
        Get: DataFileAutoShrink(self: ServerTraceEventSet) -> bool
        Set: DataFileAutoShrink(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def DeadlockGraph(self) -> bool:
        """
        Get: DeadlockGraph(self: ServerTraceEventSet) -> bool
        Set: DeadlockGraph(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def DeprecationAnnouncement(self) -> bool:
        """
        Get: DeprecationAnnouncement(self: ServerTraceEventSet) -> bool
        Set: DeprecationAnnouncement(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def DeprecationFinalSupport(self) -> bool:
        """
        Get: DeprecationFinalSupport(self: ServerTraceEventSet) -> bool
        Set: DeprecationFinalSupport(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Errorlog(self) -> bool:
        """
        Get: Errorlog(self: ServerTraceEventSet) -> bool
        Set: Errorlog(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Eventlog(self) -> bool:
        """
        Get: Eventlog(self: ServerTraceEventSet) -> bool
        Set: Eventlog(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Exception(self) -> bool:
        """
        Get: Exception(self: ServerTraceEventSet) -> bool
        Set: Exception(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def ExchangeSpillEvent(self) -> bool:
        """
        Get: ExchangeSpillEvent(self: ServerTraceEventSet) -> bool
        Set: ExchangeSpillEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def ExecutionWarnings(self) -> bool:
        """
        Get: ExecutionWarnings(self: ServerTraceEventSet) -> bool
        Set: ExecutionWarnings(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def FtCrawlAborted(self) -> bool:
        """
        Get: FtCrawlAborted(self: ServerTraceEventSet) -> bool
        Set: FtCrawlAborted(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def FtCrawlStarted(self) -> bool:
        """
        Get: FtCrawlStarted(self: ServerTraceEventSet) -> bool
        Set: FtCrawlStarted(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def FtCrawlStopped(self) -> bool:
        """
        Get: FtCrawlStopped(self: ServerTraceEventSet) -> bool
        Set: FtCrawlStopped(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def HashWarning(self) -> bool:
        """
        Get: HashWarning(self: ServerTraceEventSet) -> bool
        Set: HashWarning(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def LockDeadlock(self) -> bool:
        """
        Get: LockDeadlock(self: ServerTraceEventSet) -> bool
        Set: LockDeadlock(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def LockDeadlockChain(self) -> bool:
        """
        Get: LockDeadlockChain(self: ServerTraceEventSet) -> bool
        Set: LockDeadlockChain(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def LockEscalation(self) -> bool:
        """
        Get: LockEscalation(self: ServerTraceEventSet) -> bool
        Set: LockEscalation(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def LogFileAutoGrow(self) -> bool:
        """
        Get: LogFileAutoGrow(self: ServerTraceEventSet) -> bool
        Set: LogFileAutoGrow(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def LogFileAutoShrink(self) -> bool:
        """
        Get: LogFileAutoShrink(self: ServerTraceEventSet) -> bool
        Set: LogFileAutoShrink(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def MissingColumnStatistics(self) -> bool:
        """
        Get: MissingColumnStatistics(self: ServerTraceEventSet) -> bool
        Set: MissingColumnStatistics(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def MissingJoinPredicate(self) -> bool:
        """
        Get: MissingJoinPredicate(self: ServerTraceEventSet) -> bool
        Set: MissingJoinPredicate(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def MountTape(self) -> bool:
        """
        Get: MountTape(self: ServerTraceEventSet) -> bool
        Set: MountTape(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def ObjectAltered(self) -> bool:
        """
        Get: ObjectAltered(self: ServerTraceEventSet) -> bool
        Set: ObjectAltered(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def ObjectCreated(self) -> bool:
        """
        Get: ObjectCreated(self: ServerTraceEventSet) -> bool
        Set: ObjectCreated(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def ObjectDeleted(self) -> bool:
        """
        Get: ObjectDeleted(self: ServerTraceEventSet) -> bool
        Set: ObjectDeleted(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def OledbCallEvent(self) -> bool:
        """
        Get: OledbCallEvent(self: ServerTraceEventSet) -> bool
        Set: OledbCallEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def OledbDatareadEvent(self) -> bool:
        """
        Get: OledbDatareadEvent(self: ServerTraceEventSet) -> bool
        Set: OledbDatareadEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def OledbErrors(self) -> bool:
        """
        Get: OledbErrors(self: ServerTraceEventSet) -> bool
        Set: OledbErrors(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def OledbProviderInformation(self) -> bool:
        """
        Get: OledbProviderInformation(self: ServerTraceEventSet) -> bool
        Set: OledbProviderInformation(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def OledbQueryinterfaceEvent(self) -> bool:
        """
        Get: OledbQueryinterfaceEvent(self: ServerTraceEventSet) -> bool
        Set: OledbQueryinterfaceEvent(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Qn_dynamics(self) -> bool:
        """
        Get: Qn_dynamics(self: ServerTraceEventSet) -> bool
        Set: Qn_dynamics(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Qn_parameterTable(self) -> bool:
        """
        Get: Qn_parameterTable(self: ServerTraceEventSet) -> bool
        Set: Qn_parameterTable(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Qn_subscription(self) -> bool:
        """
        Get: Qn_subscription(self: ServerTraceEventSet) -> bool
        Set: Qn_subscription(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Qn_template(self) -> bool:
        """
        Get: Qn_template(self: ServerTraceEventSet) -> bool
        Set: Qn_template(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def ServerMemoryChange(self) -> bool:
        """
        Get: ServerMemoryChange(self: ServerTraceEventSet) -> bool
        Set: ServerMemoryChange(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def ShowplanAllForQueryCompile(self) -> bool:
        """
        Get: ShowplanAllForQueryCompile(self: ServerTraceEventSet) -> bool
        Set: ShowplanAllForQueryCompile(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def ShowplanXml(self) -> bool:
        """
        Get: ShowplanXml(self: ServerTraceEventSet) -> bool
        Set: ShowplanXml(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def ShowplanXmlForQueryCompile(self) -> bool:
        """
        Get: ShowplanXmlForQueryCompile(self: ServerTraceEventSet) -> bool
        Set: ShowplanXmlForQueryCompile(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def ShowplanXmlStatisticsProfile(self) -> bool:
        """
        Get: ShowplanXmlStatisticsProfile(self: ServerTraceEventSet) -> bool
        Set: ShowplanXmlStatisticsProfile(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def SortWarnings(self) -> bool:
        """
        Get: SortWarnings(self: ServerTraceEventSet) -> bool
        Set: SortWarnings(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def SpCacheinsert(self) -> bool:
        """
        Get: SpCacheinsert(self: ServerTraceEventSet) -> bool
        Set: SpCacheinsert(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def SpCachemiss(self) -> bool:
        """
        Get: SpCachemiss(self: ServerTraceEventSet) -> bool
        Set: SpCachemiss(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def SpCacheremove(self) -> bool:
        """
        Get: SpCacheremove(self: ServerTraceEventSet) -> bool
        Set: SpCacheremove(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def SpRecompile(self) -> bool:
        """
        Get: SpRecompile(self: ServerTraceEventSet) -> bool
        Set: SpRecompile(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def SqlStmtrecompile(self) -> bool:
        """
        Get: SqlStmtrecompile(self: ServerTraceEventSet) -> bool
        Set: SqlStmtrecompile(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceAllEvents(self) -> bool:
        """
        Get: TraceAllEvents(self: ServerTraceEventSet) -> bool
        Set: TraceAllEvents(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceClr(self) -> bool:
        """
        Get: TraceClr(self: ServerTraceEventSet) -> bool
        Set: TraceClr(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceDatabase(self) -> bool:
        """
        Get: TraceDatabase(self: ServerTraceEventSet) -> bool
        Set: TraceDatabase(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceDeprecation(self) -> bool:
        """
        Get: TraceDeprecation(self: ServerTraceEventSet) -> bool
        Set: TraceDeprecation(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceErrorsAndWarnings(self) -> bool:
        """
        Get: TraceErrorsAndWarnings(self: ServerTraceEventSet) -> bool
        Set: TraceErrorsAndWarnings(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceFileClose(self) -> bool:
        """
        Get: TraceFileClose(self: ServerTraceEventSet) -> bool
        Set: TraceFileClose(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceFullText(self) -> bool:
        """
        Get: TraceFullText(self: ServerTraceEventSet) -> bool
        Set: TraceFullText(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceLocks(self) -> bool:
        """
        Get: TraceLocks(self: ServerTraceEventSet) -> bool
        Set: TraceLocks(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceObjects(self) -> bool:
        """
        Get: TraceObjects(self: ServerTraceEventSet) -> bool
        Set: TraceObjects(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceOledb(self) -> bool:
        """
        Get: TraceOledb(self: ServerTraceEventSet) -> bool
        Set: TraceOledb(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TracePerformance(self) -> bool:
        """
        Get: TracePerformance(self: ServerTraceEventSet) -> bool
        Set: TracePerformance(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceQueryNotifications(self) -> bool:
        """
        Get: TraceQueryNotifications(self: ServerTraceEventSet) -> bool
        Set: TraceQueryNotifications(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceSecurityAudit(self) -> bool:
        """
        Get: TraceSecurityAudit(self: ServerTraceEventSet) -> bool
        Set: TraceSecurityAudit(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceServer(self) -> bool:
        """
        Get: TraceServer(self: ServerTraceEventSet) -> bool
        Set: TraceServer(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceStoredProcedures(self) -> bool:
        """
        Get: TraceStoredProcedures(self: ServerTraceEventSet) -> bool
        Set: TraceStoredProcedures(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceTsql(self) -> bool:
        """
        Get: TraceTsql(self: ServerTraceEventSet) -> bool
        Set: TraceTsql(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def TraceUserConfigurable(self) -> bool:
        """
        Get: TraceUserConfigurable(self: ServerTraceEventSet) -> bool
        Set: TraceUserConfigurable(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Userconfigurable0(self) -> bool:
        """
        Get: Userconfigurable0(self: ServerTraceEventSet) -> bool
        Set: Userconfigurable0(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Userconfigurable1(self) -> bool:
        """
        Get: Userconfigurable1(self: ServerTraceEventSet) -> bool
        Set: Userconfigurable1(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Userconfigurable2(self) -> bool:
        """
        Get: Userconfigurable2(self: ServerTraceEventSet) -> bool
        Set: Userconfigurable2(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Userconfigurable3(self) -> bool:
        """
        Get: Userconfigurable3(self: ServerTraceEventSet) -> bool
        Set: Userconfigurable3(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Userconfigurable4(self) -> bool:
        """
        Get: Userconfigurable4(self: ServerTraceEventSet) -> bool
        Set: Userconfigurable4(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Userconfigurable5(self) -> bool:
        """
        Get: Userconfigurable5(self: ServerTraceEventSet) -> bool
        Set: Userconfigurable5(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Userconfigurable6(self) -> bool:
        """
        Get: Userconfigurable6(self: ServerTraceEventSet) -> bool
        Set: Userconfigurable6(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Userconfigurable7(self) -> bool:
        """
        Get: Userconfigurable7(self: ServerTraceEventSet) -> bool
        Set: Userconfigurable7(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Userconfigurable8(self) -> bool:
        """
        Get: Userconfigurable8(self: ServerTraceEventSet) -> bool
        Set: Userconfigurable8(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def Userconfigurable9(self) -> bool:
        """
        Get: Userconfigurable9(self: ServerTraceEventSet) -> bool
        Set: Userconfigurable9(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def UserErrorMessage(self) -> bool:
        """
        Get: UserErrorMessage(self: ServerTraceEventSet) -> bool
        Set: UserErrorMessage(self: ServerTraceEventSet) = value
        """
        ...

    @property
    def XqueryStaticType(self) -> bool:
        """
        Get: XqueryStaticType(self: ServerTraceEventSet) -> bool
        Set: XqueryStaticType(self: ServerTraceEventSet) = value
        """
        ...


    def Add(self, *__args:ServerTraceEvent) -> ServerTraceEventSet:
        """
        Add(self: ServerTraceEventSet, anEvent: ServerTraceEvent) -> ServerTraceEventSet
        Add(eventSet: ServerTraceEventSet, anEvent: ServerTraceEvent) -> ServerTraceEventSet
        """
        ...

    def Remove(self, anEvent:ServerTraceEvent) -> ServerTraceEventSet:
        """ Remove(self: ServerTraceEventSet, anEvent: ServerTraceEvent) -> ServerTraceEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:ServerTraceEventSet, anEvent:ServerTraceEvent) -> ServerTraceEventSet:
        """ Subtract(eventSet: ServerTraceEventSet, anEvent: ServerTraceEvent) -> ServerTraceEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: ServerTraceEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class ServiceBrokerPayload(EndpointPayload): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Certificate(self) -> str:
        """
        Get: Certificate(self: ServiceBrokerPayload) -> str
        Set: Certificate(self: ServiceBrokerPayload) = value
        """
        ...

    @property
    def EndpointAuthenticationOrder(self) -> EndpointAuthenticationOrder:
        """
        Get: EndpointAuthenticationOrder(self: ServiceBrokerPayload) -> EndpointAuthenticationOrder
        Set: EndpointAuthenticationOrder(self: ServiceBrokerPayload) = value
        """
        ...

    @property
    def EndpointEncryption(self) -> EndpointEncryption:
        """
        Get: EndpointEncryption(self: ServiceBrokerPayload) -> EndpointEncryption
        Set: EndpointEncryption(self: ServiceBrokerPayload) = value
        """
        ...

    @property
    def EndpointEncryptionAlgorithm(self) -> EndpointEncryptionAlgorithm:
        """
        Get: EndpointEncryptionAlgorithm(self: ServiceBrokerPayload) -> EndpointEncryptionAlgorithm
        Set: EndpointEncryptionAlgorithm(self: ServiceBrokerPayload) = value
        """
        ...

    @property
    def IsMessageForwardingEnabled(self) -> bool:
        """
        Get: IsMessageForwardingEnabled(self: ServiceBrokerPayload) -> bool
        Set: IsMessageForwardingEnabled(self: ServiceBrokerPayload) = value
        """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: ServiceBrokerPayload) -> bool """
        ...

    @property
    def MessageForwardingSize(self) -> int:
        """
        Get: MessageForwardingSize(self: ServiceBrokerPayload) -> int
        Set: MessageForwardingSize(self: ServiceBrokerPayload) = value
        """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class ServiceMasterKey(SqlSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: ServiceMasterKey) -> Server """
        ...


    def ChangeAccount(self, newAccount:str, newPassword:str): # -> 
        """ ChangeAccount(self: ServiceMasterKey, newAccount: str, newPassword: str) """
        ...

    def Export(self, path:str, password:str): # -> 
        """ Export(self: ServiceMasterKey, path: str, password: str) """
        ...

    def Import(self, path:str, password:str): # -> 
        """ Import(self: ServiceMasterKey, path: str, password: str) """
        ...

    def Recover(self, oldAccount:str, oldPassword:str): # -> 
        """ Recover(self: ServiceMasterKey, oldAccount: str, oldPassword: str) """
        ...

    def Regenerate(self, forceRegeneration:bool = ...): # -> 
        """ Regenerate(self: ServiceMasterKey)Regenerate(self: ServiceMasterKey, forceRegeneration: bool) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ServiceQueueEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AlterQueue(self) -> ServiceQueueEvent:
        """ Get: AlterQueue() -> ServiceQueueEvent """
        ...

    @property
    def BrokerQueueDisabled(self) -> ServiceQueueEvent:
        """ Get: BrokerQueueDisabled() -> ServiceQueueEvent """
        ...

    @property
    def DropQueue(self) -> ServiceQueueEvent:
        """ Get: DropQueue() -> ServiceQueueEvent """
        ...

    @property
    def QueueActivation(self) -> ServiceQueueEvent:
        """ Get: QueueActivation() -> ServiceQueueEvent """
        ...


    @staticmethod
    def Add(eventLeft:ServiceQueueEvent, eventRight:ServiceQueueEvent): # -> ServiceQueueEventSet
        """ Add(eventLeft: ServiceQueueEvent, eventRight: ServiceQueueEvent) -> ServiceQueueEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:ServiceQueueEvent, eventRight:ServiceQueueEvent): # -> ServiceQueueEventSet
        """ BitwiseOr(eventLeft: ServiceQueueEvent, eventRight: ServiceQueueEvent) -> ServiceQueueEventSet """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: ServiceQueueEvent, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: ServiceQueueEvent) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: ServiceQueueEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: ServiceQueueEvent, eventRight: ServiceQueueEvent) -> ServiceQueueEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: ServiceQueueEvent, eventRight: ServiceQueueEvent) -> ServiceQueueEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: ServiceQueueEvent, eventRight: ServiceQueueEvent) -> ServiceQueueEventSet """
        ...



class ServiceQueueEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    ServiceQueueEventSet()
    ServiceQueueEventSet(eventSet: ServiceQueueEventSet)
    ServiceQueueEventSet(anEvent: ServiceQueueEvent)
    ServiceQueueEventSet(*events: Array[ServiceQueueEvent])
    """
    @property
    def AlterQueue(self) -> bool:
        """
        Get: AlterQueue(self: ServiceQueueEventSet) -> bool
        Set: AlterQueue(self: ServiceQueueEventSet) = value
        """
        ...

    @property
    def BrokerQueueDisabled(self) -> bool:
        """
        Get: BrokerQueueDisabled(self: ServiceQueueEventSet) -> bool
        Set: BrokerQueueDisabled(self: ServiceQueueEventSet) = value
        """
        ...

    @property
    def DropQueue(self) -> bool:
        """
        Get: DropQueue(self: ServiceQueueEventSet) -> bool
        Set: DropQueue(self: ServiceQueueEventSet) = value
        """
        ...

    @property
    def QueueActivation(self) -> bool:
        """
        Get: QueueActivation(self: ServiceQueueEventSet) -> bool
        Set: QueueActivation(self: ServiceQueueEventSet) = value
        """
        ...


    def Add(self, *__args:ServiceQueueEvent) -> ServiceQueueEventSet:
        """
        Add(self: ServiceQueueEventSet, anEvent: ServiceQueueEvent) -> ServiceQueueEventSet
        Add(eventSet: ServiceQueueEventSet, anEvent: ServiceQueueEvent) -> ServiceQueueEventSet
        """
        ...

    def Remove(self, anEvent:ServiceQueueEvent) -> ServiceQueueEventSet:
        """ Remove(self: ServiceQueueEventSet, anEvent: ServiceQueueEvent) -> ServiceQueueEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:ServiceQueueEventSet, anEvent:ServiceQueueEvent) -> ServiceQueueEventSet:
        """ Subtract(eventSet: ServiceQueueEventSet, anEvent: ServiceQueueEvent) -> ServiceQueueEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: ServiceQueueEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class ServiceRequestException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    ServiceRequestException()
    ServiceRequestException(message: str)
    ServiceRequestException(message: str, innerException: Exception)
    """
    @property
    def ErrorCode(self) -> int:
        """ Get: ErrorCode(self: ServiceRequestException) -> int """
        ...

    @property
    def Message(self) -> str:
        """ Get: Message(self: ServiceRequestException) -> str """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: ServiceRequestException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class ServiceStartMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ServiceStartMode, values: Auto (2), Boot (0), Disabled (4), Manual (3), System (1) """
    Auto: ServiceStartMode = ...
    Boot: ServiceStartMode = ...
    Disabled: ServiceStartMode = ...
    Manual: ServiceStartMode = ...
    System: ServiceStartMode = ...
    value__ = ...


class Settings(SqlSmoObject, IAlterable, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def AuditLevel(self) -> AuditLevel:
        """
        Get: AuditLevel(self: Settings) -> AuditLevel
        Set: AuditLevel(self: Settings) = value
        """
        ...

    @property
    def BackupDirectory(self) -> str:
        """
        Get: BackupDirectory(self: Settings) -> str
        Set: BackupDirectory(self: Settings) = value
        """
        ...

    @property
    def DefaultFile(self) -> str:
        """
        Get: DefaultFile(self: Settings) -> str
        Set: DefaultFile(self: Settings) = value
        """
        ...

    @property
    def DefaultLog(self) -> str:
        """
        Get: DefaultLog(self: Settings) -> str
        Set: DefaultLog(self: Settings) = value
        """
        ...

    @property
    def LoginMode(self) -> ServerLoginMode:
        """
        Get: LoginMode(self: Settings) -> ServerLoginMode
        Set: LoginMode(self: Settings) = value
        """
        ...

    @property
    def MailProfile(self) -> str:
        """
        Get: MailProfile(self: Settings) -> str
        Set: MailProfile(self: Settings) = value
        """
        ...

    @property
    def NumberOfLogFiles(self) -> int:
        """
        Get: NumberOfLogFiles(self: Settings) -> int
        Set: NumberOfLogFiles(self: Settings) = value
        """
        ...

    @property
    def OleDbProviderSettings(self) -> OleDbProviderSettingsCollection:
        """ Get: OleDbProviderSettings(self: Settings) -> OleDbProviderSettingsCollection """
        ...

    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: Settings) -> Server """
        ...

    @property
    def PerfMonMode(self) -> PerfMonMode:
        """
        Get: PerfMonMode(self: Settings) -> PerfMonMode
        Set: PerfMonMode(self: Settings) = value
        """
        ...

    @property
    def TapeLoadWaitTime(self) -> int:
        """
        Get: TapeLoadWaitTime(self: Settings) -> int
        Set: TapeLoadWaitTime(self: Settings) = value
        """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class SfcDependencyException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    SfcDependencyException()
    SfcDependencyException(message: str)
    SfcDependencyException(message: str, innerException: Exception)
    """
    SerializeObjectState = ...


class ShrinkMethod(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ShrinkMethod, values: Default (0), EmptyFile (3), NoTruncate (1), TruncateOnly (2) """
    Default: ShrinkMethod = ...
    EmptyFile: ShrinkMethod = ...
    NoTruncate: ShrinkMethod = ...
    TruncateOnly: ShrinkMethod = ...
    value__ = ...


class SmartAdmin(SqlSmoObject, ISfcSupportsDesignMode, IAlterable, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ SmartAdmin() """
    @property
    def BackupEnabled(self) -> bool:
        """
        Get: BackupEnabled(self: SmartAdmin) -> bool
        Set: BackupEnabled(self: SmartAdmin) = value
        """
        ...

    @property
    def BackupRetentionPeriodInDays(self) -> int:
        """
        Get: BackupRetentionPeriodInDays(self: SmartAdmin) -> int
        Set: BackupRetentionPeriodInDays(self: SmartAdmin) = value
        """
        ...

    @property
    def CredentialName(self) -> str:
        """
        Get: CredentialName(self: SmartAdmin) -> str
        Set: CredentialName(self: SmartAdmin) = value
        """
        ...

    @property
    def DatabaseName(self) -> str:
        """
        Get: DatabaseName(self: SmartAdmin) -> str
        Set: DatabaseName(self: SmartAdmin) = value
        """
        ...

    @property
    def EncryptionAlgorithm(self) -> str:
        """
        Get: EncryptionAlgorithm(self: SmartAdmin) -> str
        Set: EncryptionAlgorithm(self: SmartAdmin) = value
        """
        ...

    @property
    def EncryptorName(self) -> str:
        """
        Get: EncryptorName(self: SmartAdmin) -> str
        Set: EncryptorName(self: SmartAdmin) = value
        """
        ...

    @property
    def EncryptorType(self) -> str:
        """
        Get: EncryptorType(self: SmartAdmin) -> str
        Set: EncryptorType(self: SmartAdmin) = value
        """
        ...

    @property
    def IsAvailabilityDB(self) -> Nullable:
        """
        Get: IsAvailabilityDB(self: SmartAdmin) -> Nullable[bool]
        Set: IsAvailabilityDB(self: SmartAdmin) = value
        """
        ...

    @property
    def IsDroppedDB(self) -> Nullable:
        """
        Get: IsDroppedDB(self: SmartAdmin) -> Nullable[bool]
        Set: IsDroppedDB(self: SmartAdmin) = value
        """
        ...

    @property
    def MasterSwitch(self) -> bool:
        """
        Get: MasterSwitch(self: SmartAdmin) -> bool
        Set: MasterSwitch(self: SmartAdmin) = value
        """
        ...

    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: SmartAdmin) -> Server """
        ...

    @property
    def StorageUrl(self) -> str:
        """
        Get: StorageUrl(self: SmartAdmin) -> str
        Set: StorageUrl(self: SmartAdmin) = value
        """
        ...


    def EnumHealthStatus(self, startDate:Nullable = ..., endDate:Nullable = ...) -> DataTable:
        """
        EnumHealthStatus(self: SmartAdmin) -> DataTable
        EnumHealthStatus(self: SmartAdmin, startDate: Nullable[DateTime], endDate: Nullable[DateTime]) -> DataTable
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SmartAdminState(IDmfAdapter, ISmartAdminState): # skipped bases: <type 'IDmfFacet'>, <type 'IRefreshable'>, <type 'object'>
    """ SmartAdminState(smartadmin: SmartAdmin) """
    def Refresh(self): # -> 
        """ Refresh(self: SmartAdminState) """
        ...


class SmoApplication: # skipped bases: <type 'object'>, <type 'object'>
    """ SmoApplication() """
    def AnyObjectEventHandler(self, *args): #cannot find CLR method
        """ AnyObjectEventHandler(object: object, method: IntPtr) """
        ...

    def DatabaseEventHandler(self, *args): #cannot find CLR method
        """ DatabaseEventHandler(object: object, method: IntPtr) """
        ...

    @staticmethod
    def EnumAvailableSqlServers(*__args) -> DataTable:
        """
        EnumAvailableSqlServers() -> DataTable
        EnumAvailableSqlServers(localOnly: bool) -> DataTable
        EnumAvailableSqlServers(name: str) -> DataTable
        """
        ...

    def ObjectAlteredEventHandler(self, *args): #cannot find CLR method
        """ ObjectAlteredEventHandler(object: object, method: IntPtr) """
        ...

    def ObjectCreatedEventHandler(self, *args): #cannot find CLR method
        """ ObjectCreatedEventHandler(object: object, method: IntPtr) """
        ...

    def ObjectDroppedEventHandler(self, *args): #cannot find CLR method
        """ ObjectDroppedEventHandler(object: object, method: IntPtr) """
        ...

    def ObjectRenamedEventHandler(self, *args): #cannot find CLR method
        """ ObjectRenamedEventHandler(object: object, method: IntPtr) """
        ...



class SmoDmfAdapter: # skipped bases: <type 'object'>, <type 'object'>
    """ SmoDmfAdapter() """
    pass

class SmoExceptionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SmoExceptionType, values: CollectionNotAvailableException (9), FailedOperationException (12), InternalSmoErrorException (11), InvalidScriptingOptionException (20), InvalidSmoOperationException (7), InvalidVersionSmoOperationException (8), MissingObjectException (1), PropertyCannotBeRetrievedException (10), PropertyNotSetException (2), PropertyReadOnlyException (6), PropertyTypeMismatchException (4), PropertyWriteException (16), ScriptWriterException (21), ServiceRequestException (14), SfcDependencyException (18), SmoException (0), UnknownPropertyException (5), UnsupportedCompatLevelException (22), UnsupportedEngineEditionException (23), UnsupportedEngineTypeException (19), UnsupportedFeatureException (17), UnsupportedObjectNameException (13), UnsupportedVersionException (15), WrongPropertyValueException (3) """
    CollectionNotAvailableException: SmoExceptionType = ...
    FailedOperationException: SmoExceptionType = ...
    InternalSmoErrorException: SmoExceptionType = ...
    InvalidScriptingOptionException: SmoExceptionType = ...
    InvalidSmoOperationException: SmoExceptionType = ...
    InvalidVersionSmoOperationException: SmoExceptionType = ...
    MissingObjectException: SmoExceptionType = ...
    PropertyCannotBeRetrievedException: SmoExceptionType = ...
    PropertyNotSetException: SmoExceptionType = ...
    PropertyReadOnlyException: SmoExceptionType = ...
    PropertyTypeMismatchException: SmoExceptionType = ...
    PropertyWriteException: SmoExceptionType = ...
    ScriptWriterException: SmoExceptionType = ...
    ServiceRequestException: SmoExceptionType = ...
    SfcDependencyException: SmoExceptionType = ...
    SmoException: SmoExceptionType = ...
    UnknownPropertyException: SmoExceptionType = ...
    UnsupportedCompatLevelException: SmoExceptionType = ...
    UnsupportedEngineEditionException: SmoExceptionType = ...
    UnsupportedEngineTypeException: SmoExceptionType = ...
    UnsupportedFeatureException: SmoExceptionType = ...
    UnsupportedObjectNameException: SmoExceptionType = ...
    UnsupportedVersionException: SmoExceptionType = ...
    value__ = ...
    WrongPropertyValueException: SmoExceptionType = ...


class SmoObjectExtender(SfcObjectExtender): # skipped bases: <type 'INotifyPropertyChanged'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcPropertyProvider'>, <type 'object'>
    """
    SmoObjectExtender[T]()
    SmoObjectExtender[T](obj: T)
    """
    pass

class SnapshotIsolationState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SnapshotIsolationState, values: Disabled (0), Enabled (1), PendingOff (2), PendingOn (3) """
    Disabled: SnapshotIsolationState = ...
    Enabled: SnapshotIsolationState = ...
    PendingOff: SnapshotIsolationState = ...
    PendingOn: SnapshotIsolationState = ...
    value__ = ...


class SoapMethodCollectionBase(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def Remove(self, name:str, methodNamespace:str = ...): # -> 
        """ Remove(self: SoapMethodCollectionBase, name: str)Remove(self: SoapMethodCollectionBase, name: str, methodNamespace: str) """
        ...

    initialized = ...


class SoapMethodObject(ScriptNameObjectBase): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Namespace(self) -> str:
        """
        Get: Namespace(self: SoapMethodObject) -> str
        Set: Namespace(self: SoapMethodObject) = value
        """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class SoapPayload(EndpointPayload): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def DefaultDatabase(self) -> str:
        """
        Get: DefaultDatabase(self: SoapPayload) -> str
        Set: DefaultDatabase(self: SoapPayload) = value
        """
        ...

    @property
    def DefaultNamespace(self) -> str:
        """
        Get: DefaultNamespace(self: SoapPayload) -> str
        Set: DefaultNamespace(self: SoapPayload) = value
        """
        ...

    @property
    def IsSessionEnabled(self) -> bool:
        """
        Get: IsSessionEnabled(self: SoapPayload) -> bool
        Set: IsSessionEnabled(self: SoapPayload) = value
        """
        ...

    @property
    def IsSqlBatchesEnabled(self) -> bool:
        """
        Get: IsSqlBatchesEnabled(self: SoapPayload) -> bool
        Set: IsSqlBatchesEnabled(self: SoapPayload) = value
        """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: SoapPayload) -> bool """
        ...

    @property
    def SessionNeverTimesOut(self) -> bool:
        """
        Get: SessionNeverTimesOut(self: SoapPayload) -> bool
        Set: SessionNeverTimesOut(self: SoapPayload) = value
        """
        ...

    @property
    def SessionTimeout(self) -> int:
        """
        Get: SessionTimeout(self: SoapPayload) -> int
        Set: SessionTimeout(self: SoapPayload) = value
        """
        ...

    @property
    def SoapPayloadMethods(self): # -> SoapPayloadMethodCollection
        """ Get: SoapPayloadMethods(self: SoapPayload) -> SoapPayloadMethodCollection """
        ...

    @property
    def WsdlGeneratorOption(self): # -> WsdlGeneratorOption
        """
        Get: WsdlGeneratorOption(self: SoapPayload) -> WsdlGeneratorOption
        Set: WsdlGeneratorOption(self: SoapPayload) = value
        """
        ...

    @property
    def WsdlGeneratorProcedure(self) -> str:
        """
        Get: WsdlGeneratorProcedure(self: SoapPayload) -> str
        Set: WsdlGeneratorProcedure(self: SoapPayload) = value
        """
        ...

    @property
    def XmlFormatOption(self): # -> XmlFormatOption
        """
        Get: XmlFormatOption(self: SoapPayload) -> XmlFormatOption
        Set: XmlFormatOption(self: SoapPayload) = value
        """
        ...

    @property
    def XsdSchemaOption(self): # -> XsdSchemaOption
        """
        Get: XsdSchemaOption(self: SoapPayload) -> XsdSchemaOption
        Set: XsdSchemaOption(self: SoapPayload) = value
        """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class SoapPayloadMethod(IDroppable, IAlterable, ICreatable, SoapMethodObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    SoapPayloadMethod()
    SoapPayloadMethod(soapPayload: SoapPayload, name: str)
    SoapPayloadMethod(soapPayload: SoapPayload, name: str, methodNamespace: str)
    SoapPayloadMethod(soapPayload: SoapPayload, name: str, database: str, schema: str, sqlMethod: str)
    SoapPayloadMethod(soapPayload: SoapPayload, name: str, database: str, schema: str, sqlMethod: str, methodNamespace: str)
    """
    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: SoapPayloadMethod) -> bool """
        ...

    @property
    def MethodLoginType(self) -> MethodLoginType:
        """
        Get: MethodLoginType(self: SoapPayloadMethod) -> MethodLoginType
        Set: MethodLoginType(self: SoapPayloadMethod) = value
        """
        ...

    @property
    def MethodXsdSchemaOption(self) -> MethodXsdSchemaOption:
        """
        Get: MethodXsdSchemaOption(self: SoapPayloadMethod) -> MethodXsdSchemaOption
        Set: MethodXsdSchemaOption(self: SoapPayloadMethod) = value
        """
        ...

    @property
    def Parent(self) -> SoapPayload:
        """
        Get: Parent(self: SoapPayloadMethod) -> SoapPayload
        Set: Parent(self: SoapPayloadMethod) = value
        """
        ...

    @property
    def ResultFormat(self) -> ResultFormat:
        """
        Get: ResultFormat(self: SoapPayloadMethod) -> ResultFormat
        Set: ResultFormat(self: SoapPayloadMethod) = value
        """
        ...

    @property
    def SqlMethod(self) -> str:
        """ Get: SqlMethod(self: SoapPayloadMethod) -> str """
        ...


    def SetSqlMethod(self, database:str, schema:str, name:str): # -> 
        """ SetSqlMethod(self: SoapPayloadMethod, database: str, schema: str, name: str) """
        ...

    def __new__(cls, soapPayload:SoapPayload = ..., name:str = ..., *__args:str) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, soapPayload: SoapPayload, name: str)
        __new__(cls: type, soapPayload: SoapPayload, name: str, methodNamespace: str)
        __new__(cls: type, soapPayload: SoapPayload, name: str, database: str, schema: str, sqlMethod: str)
        __new__(cls: type, soapPayload: SoapPayload, name: str, database: str, schema: str, sqlMethod: str, methodNamespace: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SoapPayloadMethodCollection(SoapMethodCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> SoapPayload:
        """ Get: Parent(self: SoapPayloadMethodCollection) -> SoapPayload """
        ...


    def Add(self, soapMethod:SoapPayloadMethod): # -> 
        """ Add(self: SoapPayloadMethodCollection, soapMethod: SoapPayloadMethod) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SortOrder(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SortOrder, values: Name (0), Schema (1), Type (2), Urn (3) """
    Name: SortOrder = ...
    Schema: SortOrder = ...
    Type: SortOrder = ...
    Urn: SortOrder = ...
    value__ = ...


class SpatialGeoLevelSize(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SpatialGeoLevelSize, values: High (256), Low (16), Medium (64), None (0) """
    High: SpatialGeoLevelSize = ...
    Low: SpatialGeoLevelSize = ...
    Medium: SpatialGeoLevelSize = ...
    value__ = ...


class SpatialIndexType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SpatialIndexType, values: GeographyAutoGrid (4), GeographyGrid (2), GeometryAutoGrid (3), GeometryGrid (1), None (0) """
    GeographyAutoGrid: SpatialIndexType = ...
    GeographyGrid: SpatialIndexType = ...
    GeometryAutoGrid: SpatialIndexType = ...
    GeometryGrid: SpatialIndexType = ...
    value__ = ...


class SqlAssembly(IDroppable, IAlterable, IScriptable, IObjectPermission, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    SqlAssembly()
    SqlAssembly(database: Database, name: str)
    """
    @property
    def AssemblySecurityLevel(self) -> AssemblySecurityLevel:
        """
        Get: AssemblySecurityLevel(self: SqlAssembly) -> AssemblySecurityLevel
        Set: AssemblySecurityLevel(self: SqlAssembly) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: SqlAssembly) -> DateTime """
        ...

    @property
    def Culture(self) -> str:
        """ Get: Culture(self: SqlAssembly) -> str """
        ...

    @property
    def Events(self): # -> SqlAssemblyEvents
        """ Get: Events(self: SqlAssembly) -> SqlAssemblyEvents """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: SqlAssembly) -> int """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: SqlAssembly) -> bool """
        ...

    @property
    def IsVisible(self) -> bool:
        """
        Get: IsVisible(self: SqlAssembly) -> bool
        Set: IsVisible(self: SqlAssembly) = value
        """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: SqlAssembly) -> str
        Set: Owner(self: SqlAssembly) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: SqlAssembly) -> Database
        Set: Parent(self: SqlAssembly) = value
        """
        ...

    @property
    def PublicKey(self) -> Array:
        """
        Get: PublicKey(self: SqlAssembly) -> Array[Byte]
        Set: PublicKey(self: SqlAssembly) = value
        """
        ...

    @property
    def SqlAssemblyFiles(self): # -> SqlAssemblyFileCollection
        """ Get: SqlAssemblyFiles(self: SqlAssembly) -> SqlAssemblyFileCollection """
        ...

    @property
    def Version(self) -> Version:
        """ Get: Version(self: SqlAssembly) -> Version """
        ...


    def Create(self, *__args:Array): # -> 
        """ Create(self: SqlAssembly, assemblyLocalPaths: Array[str])Create(self: SqlAssembly, primaryAssemblyServerPath: str) """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SqlAssemblyCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: SqlAssemblyCollection) -> Database """
        ...


    def Add(self, sqlAssembly:SqlAssembly): # -> 
        """ Add(self: SqlAssemblyCollection, sqlAssembly: SqlAssembly) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SqlAssemblyCollection, array: Array[SqlAssembly], index: int) """
        ...

    def ItemById(self, id:int) -> SqlAssembly:
        """ ItemById(self: SqlAssemblyCollection, id: int) -> SqlAssembly """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SqlAssemblyEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AlterAssembly(self) -> SqlAssemblyEvent:
        """ Get: AlterAssembly() -> SqlAssemblyEvent """
        ...

    @property
    def DropAssembly(self) -> SqlAssemblyEvent:
        """ Get: DropAssembly() -> SqlAssemblyEvent """
        ...


    @staticmethod
    def Add(eventLeft:SqlAssemblyEvent, eventRight:SqlAssemblyEvent): # -> SqlAssemblyEventSet
        """ Add(eventLeft: SqlAssemblyEvent, eventRight: SqlAssemblyEvent) -> SqlAssemblyEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:SqlAssemblyEvent, eventRight:SqlAssemblyEvent): # -> SqlAssemblyEventSet
        """ BitwiseOr(eventLeft: SqlAssemblyEvent, eventRight: SqlAssemblyEvent) -> SqlAssemblyEventSet """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: SqlAssemblyEvent, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: SqlAssemblyEvent) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: SqlAssemblyEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: SqlAssemblyEvent, eventRight: SqlAssemblyEvent) -> SqlAssemblyEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: SqlAssemblyEvent, eventRight: SqlAssemblyEvent) -> SqlAssemblyEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: SqlAssemblyEvent, eventRight: SqlAssemblyEvent) -> SqlAssemblyEventSet """
        ...



class SqlAssemblyEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self): # -> SqlAssemblyEventSet
        """ GetEventSelection(self: SqlAssemblyEvents) -> SqlAssemblyEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: SqlAssemblyEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: SqlAssemblyEvents) """
        ...

    def SubscribeToEvents(self, events, eventHandler:ServerEventHandler = ...): # ->  # Not found arg types: {'events': 'SqlAssemblyEventSet'}
        """ SubscribeToEvents(self: SqlAssemblyEvents, events: SqlAssemblyEventSet)SubscribeToEvents(self: SqlAssemblyEvents, events: SqlAssemblyEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: SqlAssemblyEvents) """
        ...

    def UnsubscribeFromEvents(self, events): # ->  # Not found arg types: {'events': 'SqlAssemblyEventSet'}
        """ UnsubscribeFromEvents(self: SqlAssemblyEvents, events: SqlAssemblyEventSet) """
        ...

    ServerEvent = ...


class SqlAssemblyEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    SqlAssemblyEventSet()
    SqlAssemblyEventSet(eventSet: SqlAssemblyEventSet)
    SqlAssemblyEventSet(anEvent: SqlAssemblyEvent)
    SqlAssemblyEventSet(*events: Array[SqlAssemblyEvent])
    """
    @property
    def AlterAssembly(self) -> bool:
        """
        Get: AlterAssembly(self: SqlAssemblyEventSet) -> bool
        Set: AlterAssembly(self: SqlAssemblyEventSet) = value
        """
        ...

    @property
    def DropAssembly(self) -> bool:
        """
        Get: DropAssembly(self: SqlAssemblyEventSet) -> bool
        Set: DropAssembly(self: SqlAssemblyEventSet) = value
        """
        ...


    def Add(self, *__args:SqlAssemblyEvent) -> SqlAssemblyEventSet:
        """
        Add(self: SqlAssemblyEventSet, anEvent: SqlAssemblyEvent) -> SqlAssemblyEventSet
        Add(eventSet: SqlAssemblyEventSet, anEvent: SqlAssemblyEvent) -> SqlAssemblyEventSet
        """
        ...

    def Remove(self, anEvent:SqlAssemblyEvent) -> SqlAssemblyEventSet:
        """ Remove(self: SqlAssemblyEventSet, anEvent: SqlAssemblyEvent) -> SqlAssemblyEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:SqlAssemblyEventSet, anEvent:SqlAssemblyEvent) -> SqlAssemblyEventSet:
        """ Subtract(eventSet: SqlAssemblyEventSet, anEvent: SqlAssemblyEvent) -> SqlAssemblyEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: SqlAssemblyEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class SqlAssemblyFile(ScriptNameObjectBase): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    SqlAssemblyFile()
    SqlAssemblyFile(sqlAssembly: SqlAssembly, name: str)
    """
    @property
    def ID(self) -> int:
        """ Get: ID(self: SqlAssemblyFile) -> int """
        ...

    @property
    def Parent(self) -> SqlAssembly:
        """
        Get: Parent(self: SqlAssemblyFile) -> SqlAssembly
        Set: Parent(self: SqlAssemblyFile) = value
        """
        ...


    def GetFileBytes(self) -> Array:
        """ GetFileBytes(self: SqlAssemblyFile) -> Array[Byte] """
        ...

    def GetFileText(self) -> str:
        """ GetFileText(self: SqlAssemblyFile) -> str """
        ...

    def __new__(cls, sqlAssembly:SqlAssembly = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, sqlAssembly: SqlAssembly, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SqlAssemblyFileCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> SqlAssembly:
        """ Get: Parent(self: SqlAssemblyFileCollection) -> SqlAssembly """
        ...


    def Add(self, file:SqlAssemblyFile): # -> 
        """ Add(self: SqlAssemblyFileCollection, file: SqlAssemblyFile) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SqlAssemblyFileCollection, array: Array[SqlAssemblyFile], index: int) """
        ...

    def ItemById(self, id:int) -> SqlAssemblyFile:
        """ ItemById(self: SqlAssemblyFileCollection, id: int) -> SqlAssemblyFile """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SqlDataType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SqlDataType, values: BigInt (1), Binary (2), Bit (3), Char (4), Date (36), DateTime (6), DateTime2 (39), DateTimeOffset (38), Decimal (7), Float (8), Geography (43), Geometry (42), HierarchyId (41), Image (9), Int (10), Money (11), NChar (12), None (0), NText (13), Numeric (35), NVarChar (14), NVarCharMax (15), Real (16), SmallDateTime (17), SmallInt (18), SmallMoney (19), SysName (34), Text (20), Time (37), Timestamp (21), TinyInt (22), UniqueIdentifier (23), UserDefinedDataType (24), UserDefinedTableType (40), UserDefinedType (25), VarBinary (28), VarBinaryMax (29), VarChar (30), VarCharMax (31), Variant (32), Xml (33) """
    BigInt: SqlDataType = ...
    Binary: SqlDataType = ...
    Bit: SqlDataType = ...
    Char: SqlDataType = ...
    Date: SqlDataType = ...
    DateTime: SqlDataType = ...
    DateTime2: SqlDataType = ...
    DateTimeOffset: SqlDataType = ...
    Decimal: SqlDataType = ...
    Float: SqlDataType = ...
    Geography: SqlDataType = ...
    Geometry: SqlDataType = ...
    HierarchyId: SqlDataType = ...
    Image: SqlDataType = ...
    Int: SqlDataType = ...
    Money: SqlDataType = ...
    NChar: SqlDataType = ...
    NText: SqlDataType = ...
    Numeric: SqlDataType = ...
    NVarChar: SqlDataType = ...
    NVarCharMax: SqlDataType = ...
    Real: SqlDataType = ...
    SmallDateTime: SqlDataType = ...
    SmallInt: SqlDataType = ...
    SmallMoney: SqlDataType = ...
    SysName: SqlDataType = ...
    Text: SqlDataType = ...
    Time: SqlDataType = ...
    Timestamp: SqlDataType = ...
    TinyInt: SqlDataType = ...
    UniqueIdentifier: SqlDataType = ...
    UserDefinedDataType: SqlDataType = ...
    UserDefinedTableType: SqlDataType = ...
    UserDefinedType: SqlDataType = ...
    value__ = ...
    VarBinary: SqlDataType = ...
    VarBinaryMax: SqlDataType = ...
    VarChar: SqlDataType = ...
    VarCharMax: SqlDataType = ...
    Variant: SqlDataType = ...
    Xml: SqlDataType = ...


class SqlPropertyCollection(PropertyCollection): # skipped bases: <type 'ISfcPropertySet'>, <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    def EnumPropertyInfo(self, versions = ...) -> Array: # Not found arg types: {'versions': 'SqlServerVersions'}
        """
        EnumPropertyInfo(self: SqlPropertyCollection, versions: SqlServerVersions) -> Array[SqlPropertyInfo]
        EnumPropertyInfo(self: SqlPropertyCollection) -> Array[SqlPropertyInfo]
        """
        ...

    def GetPropertyInfo(self, name:str): # -> SqlPropertyInfo
        """ GetPropertyInfo(self: SqlPropertyCollection, name: str) -> SqlPropertyInfo """
        ...


class SqlPropertyInfo: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def IsExpensive(self) -> bool:
        """ Get: IsExpensive(self: SqlPropertyInfo) -> bool """
        ...

    @property
    def IsWriteable(self) -> bool:
        """ Get: IsWriteable(self: SqlPropertyInfo) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: SqlPropertyInfo) -> str """
        ...

    @property
    def PropertyType(self) -> Type:
        """ Get: PropertyType(self: SqlPropertyInfo) -> Type """
        ...

    @property
    def Versions(self): # -> SqlServerVersions
        """ Get: Versions(self: SqlPropertyInfo) -> SqlServerVersions """
        ...



class SqlServerRegistrations: # skipped bases: <type 'object'>, <type 'object'>
    """ SqlServerRegistrations() """
    @property
    def RegisteredServers(self) -> RegisteredServerCollection:
        """ Get: RegisteredServers() -> RegisteredServerCollection """
        ...

    @property
    def ServerGroups(self) -> ServerGroupCollection:
        """ Get: ServerGroups() -> ServerGroupCollection """
        ...


    @staticmethod
    def EnumRegisteredServers() -> Array:
        """ EnumRegisteredServers() -> Array[RegisteredServer] """
        ...

    @staticmethod
    def Refresh(): # -> 
        """ Refresh() """
        ...



class SqlServerVersion(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SqlServerVersion, values: Version100 (3), Version105 (4), Version110 (5), Version120 (6), Version130 (7), Version140 (8), Version80 (1), Version90 (2) """
    value__ = ...
    Version100: SqlServerVersion = ...
    Version105: SqlServerVersion = ...
    Version110: SqlServerVersion = ...
    Version120: SqlServerVersion = ...
    Version130: SqlServerVersion = ...
    Version140: SqlServerVersion = ...
    Version80: SqlServerVersion = ...
    Version90: SqlServerVersion = ...


class SqlServerVersions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) SqlServerVersions, values: Unknown (0), Version100 (8), Version105 (16), Version110 (32), Version120 (64), Version130 (128), Version140 (256), Version70 (1), Version80 (2), Version90 (4) """
    Unknown: SqlServerVersions = ...
    value__ = ...
    Version100: SqlServerVersions = ...
    Version105: SqlServerVersions = ...
    Version110: SqlServerVersions = ...
    Version120: SqlServerVersions = ...
    Version130: SqlServerVersions = ...
    Version140: SqlServerVersions = ...
    Version70: SqlServerVersions = ...
    Version80: SqlServerVersions = ...
    Version90: SqlServerVersions = ...


class SqlSmoState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SqlSmoState, values: Creating (1), Dropped (4), Existing (2), Pending (0), ToBeDropped (3) """
    Creating: SqlSmoState = ...
    Dropped: SqlSmoState = ...
    Existing: SqlSmoState = ...
    Pending: SqlSmoState = ...
    ToBeDropped: SqlSmoState = ...
    value__ = ...


class SqlVerifyAction(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SqlVerifyAction, values: VerifyDatabase (0), VerifyFile (2), VerifyIncremental (3), VerifyLog (1) """
    value__ = ...
    VerifyDatabase: SqlVerifyAction = ...
    VerifyFile: SqlVerifyAction = ...
    VerifyIncremental: SqlVerifyAction = ...
    VerifyLog: SqlVerifyAction = ...


class Statistic(IDroppable, ICreatable, IScriptable, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IMarkForDrop): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Statistic()
    Statistic(parent: SqlSmoObject, name: str)
    """
    @property
    def Events(self): # -> StatisticEvents
        """ Get: Events(self: Statistic) -> StatisticEvents """
        ...

    @property
    def FileGroup(self) -> str:
        """
        Get: FileGroup(self: Statistic) -> str
        Set: FileGroup(self: Statistic) = value
        """
        ...

    @property
    def FilterDefinition(self) -> str:
        """
        Get: FilterDefinition(self: Statistic) -> str
        Set: FilterDefinition(self: Statistic) = value
        """
        ...

    @property
    def HasFilter(self) -> bool:
        """ Get: HasFilter(self: Statistic) -> bool """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Statistic) -> int """
        ...

    @property
    def IsAutoCreated(self) -> bool:
        """ Get: IsAutoCreated(self: Statistic) -> bool """
        ...

    @property
    def IsFromIndexCreation(self) -> bool:
        """ Get: IsFromIndexCreation(self: Statistic) -> bool """
        ...

    @property
    def IsTemporary(self) -> bool:
        """ Get: IsTemporary(self: Statistic) -> bool """
        ...

    @property
    def LastUpdated(self) -> DateTime:
        """ Get: LastUpdated(self: Statistic) -> DateTime """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Statistic) -> str
        Set: Name(self: Statistic) = value
        """
        ...

    @property
    def NoAutomaticRecomputation(self) -> bool:
        """
        Get: NoAutomaticRecomputation(self: Statistic) -> bool
        Set: NoAutomaticRecomputation(self: Statistic) = value
        """
        ...

    @property
    def Parent(self) -> SqlSmoObject:
        """
        Get: Parent(self: Statistic) -> SqlSmoObject
        Set: Parent(self: Statistic) = value
        """
        ...

    @property
    def StatisticColumns(self): # -> StatisticColumnCollection
        """ Get: StatisticColumns(self: Statistic) -> StatisticColumnCollection """
        ...


    def SetScanOptions(self, type, no:int): # ->  # Not found arg types: {'type': 'StatisticsScanType'}
        """ SetScanOptions(self: Statistic, type: StatisticsScanType, no: int) """
        ...

    def Update(self, scanType = ..., sampleValue:int = ..., recompute:bool = ...): # ->  # Not found arg types: {'scanType': 'StatisticsScanType'}
        """ Update(self: Statistic)Update(self: Statistic, scanType: StatisticsScanType)Update(self: Statistic, scanType: StatisticsScanType, sampleValue: int)Update(self: Statistic, scanType: StatisticsScanType, sampleValue: int, recompute: bool) """
        ...

    def __new__(cls, parent:SqlSmoObject = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, parent: SqlSmoObject, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class StatisticCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> SqlSmoObject:
        """ Get: Parent(self: StatisticCollection) -> SqlSmoObject """
        ...


    def Add(self, statistic:Statistic): # -> 
        """ Add(self: StatisticCollection, statistic: Statistic) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: StatisticCollection, array: Array[Statistic], index: int) """
        ...

    def ItemById(self, id:int) -> Statistic:
        """ ItemById(self: StatisticCollection, id: int) -> Statistic """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: StatisticCollection, name: str)Remove(self: StatisticCollection, statistic: Statistic) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class StatisticColumn(ISfcSupportsDesignMode, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    StatisticColumn()
    StatisticColumn(statistic: Statistic, name: str)
    """
    @property
    def ID(self) -> int:
        """ Get: ID(self: StatisticColumn) -> int """
        ...

    @property
    def Parent(self) -> Statistic:
        """
        Get: Parent(self: StatisticColumn) -> Statistic
        Set: Parent(self: StatisticColumn) = value
        """
        ...


    def __new__(cls, statistic:Statistic = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, statistic: Statistic, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class StatisticColumnCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Statistic:
        """ Get: Parent(self: StatisticColumnCollection) -> Statistic """
        ...


    def Add(self, statisticColumn:StatisticColumn, *__args:str): # -> 
        """ Add(self: StatisticColumnCollection, statisticColumn: StatisticColumn)Add(self: StatisticColumnCollection, statisticColumn: StatisticColumn, insertAtColumnName: str)Add(self: StatisticColumnCollection, statisticColumn: StatisticColumn, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: StatisticColumnCollection, array: Array[StatisticColumn], index: int) """
        ...

    def ItemById(self, id:int) -> StatisticColumn:
        """ ItemById(self: StatisticColumnCollection, id: int) -> StatisticColumn """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class StatisticEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self) -> ObjectEventSet:
        """ GetEventSelection(self: StatisticEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: StatisticEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: StatisticEvents) """
        ...

    def SubscribeToEvents(self, events:ObjectEventSet, eventHandler:ServerEventHandler = ...): # -> 
        """ SubscribeToEvents(self: StatisticEvents, events: ObjectEventSet)SubscribeToEvents(self: StatisticEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: StatisticEvents) """
        ...

    def UnsubscribeFromEvents(self, events:ObjectEventSet): # -> 
        """ UnsubscribeFromEvents(self: StatisticEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class StatisticsScanType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum StatisticsScanType, values: Default (5), FullScan (3), Percent (1), Resample (4), Rows (2) """
    Default: StatisticsScanType = ...
    FullScan: StatisticsScanType = ...
    Percent: StatisticsScanType = ...
    Resample: StatisticsScanType = ...
    Rows: StatisticsScanType = ...
    value__ = ...


class StatisticsTarget(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum StatisticsTarget, values: All (2), Column (1), Index (0) """
    All: StatisticsTarget = ...
    Column: StatisticsTarget = ...
    Index: StatisticsTarget = ...
    value__ = ...


class StopListOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum StopListOption, values: Name (2), Off (0), System (1) """
    Name: StopListOption = ...
    Off: StopListOption = ...
    System: StopListOption = ...
    value__ = ...


class StoredProcedure(IDroppable, IAlterable, ICreatable, ICreateOrAlterable, IRenamable, IObjectPermission, ISfcSupportsDesignMode, IDropIfExists, ScriptSchemaObjectBase, IScriptable, ITextObject, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    StoredProcedure()
    StoredProcedure(database: Database, name: str)
    StoredProcedure(database: Database, name: str, schema: str)
    """
    @property
    def AnsiNullsStatus(self) -> bool:
        """
        Get: AnsiNullsStatus(self: StoredProcedure) -> bool
        Set: AnsiNullsStatus(self: StoredProcedure) = value
        """
        ...

    @property
    def AssemblyName(self) -> str:
        """
        Get: AssemblyName(self: StoredProcedure) -> str
        Set: AssemblyName(self: StoredProcedure) = value
        """
        ...

    @property
    def ClassName(self) -> str:
        """
        Get: ClassName(self: StoredProcedure) -> str
        Set: ClassName(self: StoredProcedure) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: StoredProcedure) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: StoredProcedure) -> DateTime """
        ...

    @property
    def Events(self): # -> StoredProcedureEvents
        """ Get: Events(self: StoredProcedure) -> StoredProcedureEvents """
        ...

    @property
    def ExecutionContext(self) -> ExecutionContext:
        """
        Get: ExecutionContext(self: StoredProcedure) -> ExecutionContext
        Set: ExecutionContext(self: StoredProcedure) = value
        """
        ...

    @property
    def ExecutionContextPrincipal(self) -> str:
        """
        Get: ExecutionContextPrincipal(self: StoredProcedure) -> str
        Set: ExecutionContextPrincipal(self: StoredProcedure) = value
        """
        ...

    @property
    def ForReplication(self) -> bool:
        """
        Get: ForReplication(self: StoredProcedure) -> bool
        Set: ForReplication(self: StoredProcedure) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: StoredProcedure) -> int """
        ...

    @property
    def ImplementationType(self) -> ImplementationType:
        """
        Get: ImplementationType(self: StoredProcedure) -> ImplementationType
        Set: ImplementationType(self: StoredProcedure) = value
        """
        ...

    @property
    def IsEncrypted(self) -> bool:
        """
        Get: IsEncrypted(self: StoredProcedure) -> bool
        Set: IsEncrypted(self: StoredProcedure) = value
        """
        ...

    @property
    def IsNativelyCompiled(self) -> bool:
        """
        Get: IsNativelyCompiled(self: StoredProcedure) -> bool
        Set: IsNativelyCompiled(self: StoredProcedure) = value
        """
        ...

    @property
    def IsSchemaBound(self) -> bool:
        """
        Get: IsSchemaBound(self: StoredProcedure) -> bool
        Set: IsSchemaBound(self: StoredProcedure) = value
        """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: StoredProcedure) -> bool """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: StoredProcedure) -> bool """
        ...

    @property
    def MethodName(self) -> str:
        """
        Get: MethodName(self: StoredProcedure) -> str
        Set: MethodName(self: StoredProcedure) = value
        """
        ...

    @property
    def NumberedStoredProcedures(self) -> NumberedStoredProcedureCollection:
        """ Get: NumberedStoredProcedures(self: StoredProcedure) -> NumberedStoredProcedureCollection """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: StoredProcedure) -> str
        Set: Owner(self: StoredProcedure) = value
        """
        ...

    @property
    def Parameters(self): # -> StoredProcedureParameterCollection
        """ Get: Parameters(self: StoredProcedure) -> StoredProcedureParameterCollection """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: StoredProcedure) -> Database
        Set: Parent(self: StoredProcedure) = value
        """
        ...

    @property
    def QuotedIdentifierStatus(self) -> bool:
        """
        Get: QuotedIdentifierStatus(self: StoredProcedure) -> bool
        Set: QuotedIdentifierStatus(self: StoredProcedure) = value
        """
        ...

    @property
    def Recompile(self) -> bool:
        """
        Get: Recompile(self: StoredProcedure) -> bool
        Set: Recompile(self: StoredProcedure) = value
        """
        ...

    @property
    def Startup(self) -> bool:
        """
        Get: Startup(self: StoredProcedure) -> bool
        Set: Startup(self: StoredProcedure) = value
        """
        ...


    def ChangeSchema(self, newSchema:str): # -> 
        """ ChangeSchema(self: StoredProcedure, newSchema: str) """
        ...

    def ReCompileReferences(self): # -> 
        """ ReCompileReferences(self: StoredProcedure) """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class StoredProcedureCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: StoredProcedureCollection) -> Database """
        ...


    def Add(self, storedProcedure:StoredProcedure): # -> 
        """ Add(self: StoredProcedureCollection, storedProcedure: StoredProcedure) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: StoredProcedureCollection, array: Array[StoredProcedure], index: int) """
        ...

    def ItemById(self, id:int) -> StoredProcedure:
        """ ItemById(self: StoredProcedureCollection, id: int) -> StoredProcedure """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class StoredProcedureEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AlterProcedure(self) -> StoredProcedureEvent:
        """ Get: AlterProcedure() -> StoredProcedureEvent """
        ...

    @property
    def DropProcedure(self) -> StoredProcedureEvent:
        """ Get: DropProcedure() -> StoredProcedureEvent """
        ...


    @staticmethod
    def Add(eventLeft:StoredProcedureEvent, eventRight:StoredProcedureEvent): # -> StoredProcedureEventSet
        """ Add(eventLeft: StoredProcedureEvent, eventRight: StoredProcedureEvent) -> StoredProcedureEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:StoredProcedureEvent, eventRight:StoredProcedureEvent): # -> StoredProcedureEventSet
        """ BitwiseOr(eventLeft: StoredProcedureEvent, eventRight: StoredProcedureEvent) -> StoredProcedureEventSet """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: StoredProcedureEvent, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: StoredProcedureEvent) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: StoredProcedureEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: StoredProcedureEvent, eventRight: StoredProcedureEvent) -> StoredProcedureEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: StoredProcedureEvent, eventRight: StoredProcedureEvent) -> StoredProcedureEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: StoredProcedureEvent, eventRight: StoredProcedureEvent) -> StoredProcedureEventSet """
        ...



class StoredProcedureEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self): # -> StoredProcedureEventSet
        """ GetEventSelection(self: StoredProcedureEvents) -> StoredProcedureEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: StoredProcedureEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: StoredProcedureEvents) """
        ...

    def SubscribeToEvents(self, events, eventHandler:ServerEventHandler = ...): # ->  # Not found arg types: {'events': 'StoredProcedureEventSet'}
        """ SubscribeToEvents(self: StoredProcedureEvents, events: StoredProcedureEventSet)SubscribeToEvents(self: StoredProcedureEvents, events: StoredProcedureEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: StoredProcedureEvents) """
        ...

    def UnsubscribeFromEvents(self, events): # ->  # Not found arg types: {'events': 'StoredProcedureEventSet'}
        """ UnsubscribeFromEvents(self: StoredProcedureEvents, events: StoredProcedureEventSet) """
        ...

    ServerEvent = ...


class StoredProcedureEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    StoredProcedureEventSet()
    StoredProcedureEventSet(eventSet: StoredProcedureEventSet)
    StoredProcedureEventSet(anEvent: StoredProcedureEvent)
    StoredProcedureEventSet(*events: Array[StoredProcedureEvent])
    """
    @property
    def AlterProcedure(self) -> bool:
        """
        Get: AlterProcedure(self: StoredProcedureEventSet) -> bool
        Set: AlterProcedure(self: StoredProcedureEventSet) = value
        """
        ...

    @property
    def DropProcedure(self) -> bool:
        """
        Get: DropProcedure(self: StoredProcedureEventSet) -> bool
        Set: DropProcedure(self: StoredProcedureEventSet) = value
        """
        ...


    def Add(self, *__args:StoredProcedureEvent) -> StoredProcedureEventSet:
        """
        Add(self: StoredProcedureEventSet, anEvent: StoredProcedureEvent) -> StoredProcedureEventSet
        Add(eventSet: StoredProcedureEventSet, anEvent: StoredProcedureEvent) -> StoredProcedureEventSet
        """
        ...

    def Remove(self, anEvent:StoredProcedureEvent) -> StoredProcedureEventSet:
        """ Remove(self: StoredProcedureEventSet, anEvent: StoredProcedureEvent) -> StoredProcedureEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:StoredProcedureEventSet, anEvent:StoredProcedureEvent) -> StoredProcedureEventSet:
        """ Subtract(eventSet: StoredProcedureEventSet, anEvent: StoredProcedureEvent) -> StoredProcedureEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: StoredProcedureEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class StoredProcedureParameter(Parameter): # skipped bases: <type 'ISfcSupportsDesignMode'>, <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IExtendedProperties'>, <type 'IMarkForDrop'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    StoredProcedureParameter()
    StoredProcedureParameter(storedProcedure: StoredProcedure, name: str)
    StoredProcedureParameter(storedProcedure: StoredProcedure, name: str, dataType: DataType)
    """
    @property
    def IsCursorParameter(self) -> bool:
        """
        Get: IsCursorParameter(self: StoredProcedureParameter) -> bool
        Set: IsCursorParameter(self: StoredProcedureParameter) = value
        """
        ...

    @property
    def IsOutputParameter(self) -> bool:
        """
        Get: IsOutputParameter(self: StoredProcedureParameter) -> bool
        Set: IsOutputParameter(self: StoredProcedureParameter) = value
        """
        ...

    @property
    def Parent(self) -> StoredProcedure:
        """
        Get: Parent(self: StoredProcedureParameter) -> StoredProcedure
        Set: Parent(self: StoredProcedureParameter) = value
        """
        ...


    def __new__(cls, storedProcedure:StoredProcedure = ..., name:str = ..., dataType:DataType = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, storedProcedure: StoredProcedure, name: str)
        __new__(cls: type, storedProcedure: StoredProcedure, name: str, dataType: DataType)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class StoredProcedureParameterCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> StoredProcedure:
        """ Get: Parent(self: StoredProcedureParameterCollection) -> StoredProcedure """
        ...


    def Add(self, storedProcedureParameter:StoredProcedureParameter, *__args:str): # -> 
        """ Add(self: StoredProcedureParameterCollection, storedProcedureParameter: StoredProcedureParameter)Add(self: StoredProcedureParameterCollection, storedProcedureParameter: StoredProcedureParameter, insertAtColumnName: str)Add(self: StoredProcedureParameterCollection, storedProcedureParameter: StoredProcedureParameter, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: StoredProcedureParameterCollection, array: Array[StoredProcedureParameter], index: int) """
        ...

    def ItemById(self, id:int) -> StoredProcedureParameter:
        """ ItemById(self: StoredProcedureParameterCollection, id: int) -> StoredProcedureParameter """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SuspectPage(IComparable): # skipped bases: <type 'object'>
    """ SuspectPage(fileID: int, pageID: Int64) """
    @property
    def FileID(self) -> int:
        """ Get: FileID(self: SuspectPage) -> int """
        ...

    @property
    def PageID(self) -> Int64:
        """ Get: PageID(self: SuspectPage) -> Int64 """
        ...


    def Equals(self, obj:object) -> bool:
        """ Equals(self: SuspectPage, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: SuspectPage) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: SuspectPage) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class SymmetricKey(IObjectPermission, IAlterable, IDroppable, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    SymmetricKey()
    SymmetricKey(database: Database, name: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: SymmetricKey) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: SymmetricKey) -> DateTime """
        ...

    @property
    def EncryptionAlgorithm(self): # -> SymmetricKeyEncryptionAlgorithm
        """ Get: EncryptionAlgorithm(self: SymmetricKey) -> SymmetricKeyEncryptionAlgorithm """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: SymmetricKey) -> int """
        ...

    @property
    def IsOpen(self) -> bool:
        """ Get: IsOpen(self: SymmetricKey) -> bool """
        ...

    @property
    def KeyGuid(self) -> Guid:
        """ Get: KeyGuid(self: SymmetricKey) -> Guid """
        ...

    @property
    def KeyLength(self) -> int:
        """ Get: KeyLength(self: SymmetricKey) -> int """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: SymmetricKey) -> str
        Set: Owner(self: SymmetricKey) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: SymmetricKey) -> Database
        Set: Parent(self: SymmetricKey) = value
        """
        ...

    @property
    def ProviderName(self) -> str:
        """
        Get: ProviderName(self: SymmetricKey) -> str
        Set: ProviderName(self: SymmetricKey) = value
        """
        ...


    def AddKeyEncryption(self, *__args): # ->  # Not found arg types: {'*__args': 'SymmetricKeyEncryption'}
        """ AddKeyEncryption(self: SymmetricKey, keyEncryption: SymmetricKeyEncryption)AddKeyEncryption(self: SymmetricKey, keyEncryptions: Array[SymmetricKeyEncryption]) """
        ...

    def Close(self): # -> 
        """ Close(self: SymmetricKey) """
        ...

    def Create(self, *__args): # -> 
        """ Create(self: SymmetricKey, keyEncryption: SymmetricKeyEncryption, keyEncryptionAlgorithm: SymmetricKeyEncryptionAlgorithm)Create(self: SymmetricKey, keyEncryption: SymmetricKeyEncryption, keyEncryptionAlgorithm: SymmetricKeyEncryptionAlgorithm, passPhrase: str)Create(self: SymmetricKey, keyEncryption: SymmetricKeyEncryption, keyEncryptionAlgorithm: SymmetricKeyEncryptionAlgorithm, passPhrase: SecureString)Create(self: SymmetricKey, keyEncryption: SymmetricKeyEncryption, keyEncryptionAlgorithm: SymmetricKeyEncryptionAlgorithm, passPhrase: str, identityPhrase: str)Create(self: SymmetricKey, keyEncryption: SymmetricKeyEncryption, keyEncryptionAlgorithm: SymmetricKeyEncryptionAlgorithm, passPhrase: SecureString, identityPhrase: str)Create(self: SymmetricKey, keyEncryption: SymmetricKeyEncryption, providerAlgorithm: str, providerKeyName: str, createDispositionType: CreateDispositionType)Create(self: SymmetricKey, keyEncryptions: Array[SymmetricKeyEncryption], keyEncryptionAlgorithm: SymmetricKeyEncryptionAlgorithm)Create(self: SymmetricKey, keyEncryptions: Array[SymmetricKeyEncryption], keyEncryptionAlgorithm: SymmetricKeyEncryptionAlgorithm, passPhrase: str)Create(self: SymmetricKey, keyEncryptions: Array[SymmetricKeyEncryption], keyEncryptionAlgorithm: SymmetricKeyEncryptionAlgorithm, passPhrase: SecureString)Create(self: SymmetricKey, keyEncryptions: Array[SymmetricKeyEncryption], keyEncryptionAlgorithm: SymmetricKeyEncryptionAlgorithm, passPhrase: str, identityPhrase: str)Create(self: SymmetricKey, keyEncryptions: Array[SymmetricKeyEncryption], keyEncryptionAlgorithm: SymmetricKeyEncryptionAlgorithm, passPhrase: SecureString, identityPhrase: str) """
        ...

    def DropKeyEncryption(self, *__args): # ->  # Not found arg types: {'*__args': 'SymmetricKeyEncryption'}
        """ DropKeyEncryption(self: SymmetricKey, keyEncryption: SymmetricKeyEncryption)DropKeyEncryption(self: SymmetricKey, keyEncryptions: Array[SymmetricKeyEncryption]) """
        ...

    def EnumKeyEncryptions(self) -> DataTable:
        """ EnumKeyEncryptions(self: SymmetricKey) -> DataTable """
        ...

    def Open(self, password:str): # -> 
        """ Open(self: SymmetricKey, password: str) """
        ...

    def OpenWithCertificate(self, certificateName:str, privateKeyPassword:str = ...): # -> 
        """ OpenWithCertificate(self: SymmetricKey, certificateName: str)OpenWithCertificate(self: SymmetricKey, certificateName: str, privateKeyPassword: str) """
        ...

    def OpenWithSymmetricKey(self, symmetricKeyName:str): # -> 
        """ OpenWithSymmetricKey(self: SymmetricKey, symmetricKeyName: str) """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SymmetricKeyCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: SymmetricKeyCollection) -> Database """
        ...


    def Add(self, symmetricKey:SymmetricKey): # -> 
        """ Add(self: SymmetricKeyCollection, symmetricKey: SymmetricKey) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SymmetricKeyCollection, array: Array[SymmetricKey], index: int) """
        ...

    def ItemById(self, id:int) -> SymmetricKey:
        """ ItemById(self: SymmetricKeyCollection, id: int) -> SymmetricKey """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SymmetricKeyEncryption: # skipped bases: <type 'object'>, <type 'object'>
    """
    SymmetricKeyEncryption()
    SymmetricKeyEncryption(encryptionType: KeyEncryptionType, value: str)
    """
    @property
    def ObjectNameOrPassword(self) -> str:
        """
        Get: ObjectNameOrPassword(self: SymmetricKeyEncryption) -> str
        Set: ObjectNameOrPassword(self: SymmetricKeyEncryption) = value
        """
        ...


    KeyEncryptionType = ...


class SymmetricKeyEncryptionAlgorithm(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SymmetricKeyEncryptionAlgorithm, values: Aes128 (5), Aes192 (6), Aes256 (7), CryptographicProviderDefined (-1), Des (2), DesX (4), RC2 (0), RC4 (1), TripleDes (3), TripleDes3Key (8) """
    Aes128: SymmetricKeyEncryptionAlgorithm = ...
    Aes192: SymmetricKeyEncryptionAlgorithm = ...
    Aes256: SymmetricKeyEncryptionAlgorithm = ...
    CryptographicProviderDefined: SymmetricKeyEncryptionAlgorithm = ...
    Des: SymmetricKeyEncryptionAlgorithm = ...
    DesX: SymmetricKeyEncryptionAlgorithm = ...
    RC2: SymmetricKeyEncryptionAlgorithm = ...
    RC4: SymmetricKeyEncryptionAlgorithm = ...
    TripleDes: SymmetricKeyEncryptionAlgorithm = ...
    TripleDes3Key: SymmetricKeyEncryptionAlgorithm = ...
    value__ = ...


class SymmetricKeyEncryptionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SymmetricKeyEncryptionType, values: AsymmetricKey (3), Certificate (1), MasterKey (4), Password (2), SymmetricKey (0) """
    AsymmetricKey: SymmetricKeyEncryptionType = ...
    Certificate: SymmetricKeyEncryptionType = ...
    MasterKey: SymmetricKeyEncryptionType = ...
    Password: SymmetricKeyEncryptionType = ...
    SymmetricKey: SymmetricKeyEncryptionType = ...
    value__ = ...


class Synonym(IDroppable, IAlterable, ICreatable, IScriptable, IObjectPermission, ISfcSupportsDesignMode, IDropIfExists, ScriptSchemaObjectBase, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Synonym()
    Synonym(database: Database, name: str)
    Synonym(database: Database, name: str, schema: str)
    Synonym(database: Database, name: str, schema: str, baseServer: str, baseDatabase: str, baseSchema: str, baseObject: str)
    Synonym(database: Database, name: str, baseServer: str, baseDatabase: str, baseSchema: str, baseObject: str)
    """
    @property
    def BaseDatabase(self) -> str:
        """
        Get: BaseDatabase(self: Synonym) -> str
        Set: BaseDatabase(self: Synonym) = value
        """
        ...

    @property
    def BaseObject(self) -> str:
        """
        Get: BaseObject(self: Synonym) -> str
        Set: BaseObject(self: Synonym) = value
        """
        ...

    @property
    def BaseSchema(self) -> str:
        """
        Get: BaseSchema(self: Synonym) -> str
        Set: BaseSchema(self: Synonym) = value
        """
        ...

    @property
    def BaseServer(self) -> str:
        """
        Get: BaseServer(self: Synonym) -> str
        Set: BaseServer(self: Synonym) = value
        """
        ...

    @property
    def BaseType(self) -> SynonymBaseType:
        """ Get: BaseType(self: Synonym) -> SynonymBaseType """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: Synonym) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: Synonym) -> DateTime """
        ...

    @property
    def Events(self): # -> SynonymEvents
        """ Get: Events(self: Synonym) -> SynonymEvents """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Synonym) -> int """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: Synonym) -> bool """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: Synonym) -> str
        Set: Owner(self: Synonym) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: Synonym) -> Database
        Set: Parent(self: Synonym) = value
        """
        ...


    def __new__(cls, database:Database = ..., name:str = ..., *__args:str) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        __new__(cls: type, database: Database, name: str, schema: str, baseServer: str, baseDatabase: str, baseSchema: str, baseObject: str)
        __new__(cls: type, database: Database, name: str, baseServer: str, baseDatabase: str, baseSchema: str, baseObject: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class SynonymBaseType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SynonymBaseType, values: ClrAggregateFunction (12), ClrScalarFunction (10), ClrStoredProcedure (9), ClrTableValuedFunction (11), ExtendedStoredProcedure (7), None (0), ReplicationFilterProcedure (8), SqlInlineTableValuedFunction (6), SqlScalarFunction (4), SqlStoredProcedure (3), SqlTableValuedFunction (5), Table (1), View (2) """
    ClrAggregateFunction: SynonymBaseType = ...
    ClrScalarFunction: SynonymBaseType = ...
    ClrStoredProcedure: SynonymBaseType = ...
    ClrTableValuedFunction: SynonymBaseType = ...
    ExtendedStoredProcedure: SynonymBaseType = ...
    ReplicationFilterProcedure: SynonymBaseType = ...
    SqlInlineTableValuedFunction: SynonymBaseType = ...
    SqlScalarFunction: SynonymBaseType = ...
    SqlStoredProcedure: SynonymBaseType = ...
    SqlTableValuedFunction: SynonymBaseType = ...
    Table: SynonymBaseType = ...
    value__ = ...
    View: SynonymBaseType = ...


class SynonymCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: SynonymCollection) -> Database """
        ...


    def Add(self, synonym:Synonym): # -> 
        """ Add(self: SynonymCollection, synonym: Synonym) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SynonymCollection, array: Array[Synonym], index: int) """
        ...

    def ItemById(self, id:int) -> Synonym:
        """ ItemById(self: SynonymCollection, id: int) -> Synonym """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SynonymEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self) -> ObjectEventSet:
        """ GetEventSelection(self: SynonymEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: SynonymEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: SynonymEvents) """
        ...

    def SubscribeToEvents(self, events:ObjectEventSet, eventHandler:ServerEventHandler = ...): # -> 
        """ SubscribeToEvents(self: SynonymEvents, events: ObjectEventSet)SubscribeToEvents(self: SynonymEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: SynonymEvents) """
        ...

    def UnsubscribeFromEvents(self, events:ObjectEventSet): # -> 
        """ UnsubscribeFromEvents(self: SynonymEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class SystemDataType(ISfcSupportsDesignMode, NamedSmoObject): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def AllowIdentity(self) -> bool:
        """ Get: AllowIdentity(self: SystemDataType) -> bool """
        ...

    @property
    def AllowLength(self) -> bool:
        """ Get: AllowLength(self: SystemDataType) -> bool """
        ...

    @property
    def AllowNulls(self) -> bool:
        """ Get: AllowNulls(self: SystemDataType) -> bool """
        ...

    @property
    def Collation(self) -> str:
        """ Get: Collation(self: SystemDataType) -> str """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: SystemDataType) -> int """
        ...

    @property
    def MaximumLength(self) -> int:
        """ Get: MaximumLength(self: SystemDataType) -> int """
        ...

    @property
    def NumericPrecision(self) -> int:
        """ Get: NumericPrecision(self: SystemDataType) -> int """
        ...

    @property
    def NumericScale(self) -> int:
        """ Get: NumericScale(self: SystemDataType) -> int """
        ...

    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: SystemDataType) -> Server """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class SystemDataTypeCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: SystemDataTypeCollection) -> Server """
        ...


    def Add(self, dataType:SystemDataType): # -> 
        """ Add(self: SystemDataTypeCollection, dataType: SystemDataType) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SystemDataTypeCollection, array: Array[SystemDataType], index: int) """
        ...

    def ItemById(self, id:int) -> SystemDataType:
        """ ItemById(self: SystemDataTypeCollection, id: int) -> SystemDataType """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class SystemMessage(MessageObjectBase): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def ID(self) -> int:
        """ Get: ID(self: SystemMessage) -> int """
        ...

    @property
    def IsLogged(self) -> bool:
        """ Get: IsLogged(self: SystemMessage) -> bool """
        ...

    @property
    def Language(self) -> str:
        """ Get: Language(self: SystemMessage) -> str """
        ...

    @property
    def LanguageID(self) -> int:
        """ Get: LanguageID(self: SystemMessage) -> int """
        ...

    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: SystemMessage) -> Server """
        ...

    @property
    def Severity(self) -> Byte:
        """ Get: Severity(self: SystemMessage) -> Byte """
        ...

    @property
    def Text(self) -> str:
        """ Get: Text(self: SystemMessage) -> str """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class SystemMessageCollection(MessageCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: SystemMessageCollection) -> Server """
        ...


    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: SystemMessageCollection, array: Array[SystemMessage], index: int) """
        ...

    def ItemByIdAndLanguage(self, id:int, language:str) -> SystemMessage:
        """ ItemByIdAndLanguage(self: SystemMessageCollection, id: int, language: str) -> SystemMessage """
        ...

    def ItemByIdAndLanguageId(self, id:int, languageId:int) -> SystemMessage:
        """ ItemByIdAndLanguageId(self: SystemMessageCollection, id: int, languageId: int) -> SystemMessage """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class TableViewTableTypeBase(IScriptable, ScriptSchemaObjectBase, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def Columns(self) -> ColumnCollection:
        """ Get: Columns(self: TableViewTableTypeBase) -> ColumnCollection """
        ...

    @property
    def Indexes(self) -> IndexCollection:
        """ Get: Indexes(self: TableViewTableTypeBase) -> IndexCollection """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class TableViewBase(TableViewTableTypeBase): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IExtendedProperties'>, <type 'IScriptable'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def FullTextIndex(self) -> FullTextIndex:
        """ Get: FullTextIndex(self: TableViewBase) -> FullTextIndex """
        ...

    @property
    def Statistics(self) -> StatisticCollection:
        """ Get: Statistics(self: TableViewBase) -> StatisticCollection """
        ...

    @property
    def Triggers(self): # -> TriggerCollection
        """ Get: Triggers(self: TableViewBase) -> TriggerCollection """
        ...


    def EnumFragmentation(self, fragmentationOption:FragmentationOption = ..., partitionNumber:int = ...) -> DataTable:
        """
        EnumFragmentation(self: TableViewBase) -> DataTable
        EnumFragmentation(self: TableViewBase, fragmentationOption: FragmentationOption) -> DataTable
        EnumFragmentation(self: TableViewBase, fragmentationOption: FragmentationOption, partitionNumber: int) -> DataTable
        """
        ...

    def ReCompileReferences(self): # -> 
        """ ReCompileReferences(self: TableViewBase) """
        ...

    def UpdateStatistics(self, affectType:StatisticsTarget = ..., scanType:StatisticsScanType = ..., sampleValue:int = ..., recompute:bool = ...): # -> 
        """ UpdateStatistics(self: TableViewBase)UpdateStatistics(self: TableViewBase, affectType: StatisticsTarget, scanType: StatisticsScanType)UpdateStatistics(self: TableViewBase, affectType: StatisticsTarget, scanType: StatisticsScanType, sampleValue: int)UpdateStatistics(self: TableViewBase, affectType: StatisticsTarget, scanType: StatisticsScanType, sampleValue: int, recompute: bool) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class Table(IDroppable, IAlterable, ICreatable, IColumnPermission, IRenamable, IPropertyDataDispatch, ISfcSupportsDesignMode, IDropIfExists, ITableOptions, TableViewBase): # skipped bases: <type 'IDmfFacet'>, <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'IObjectPermission'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IExtendedProperties'>, <type 'IScriptable'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Table()
    Table(database: Database, name: str)
    Table(database: Database, name: str, schema: str)
    """
    @property
    def Checks(self) -> CheckCollection:
        """ Get: Checks(self: Table) -> CheckCollection """
        ...

    @property
    def DataConsistencyCheck(self) -> bool:
        """
        Get: DataConsistencyCheck(self: Table) -> bool
        Set: DataConsistencyCheck(self: Table) = value
        """
        ...

    @property
    def DataSourceName(self) -> str:
        """
        Get: DataSourceName(self: Table) -> str
        Set: DataSourceName(self: Table) = value
        """
        ...

    @property
    def DataSpaceUsed(self) -> float:
        """ Get: DataSpaceUsed(self: Table) -> float """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: Table) -> DateTime """
        ...

    @property
    def DistributionName(self) -> str:
        """
        Get: DistributionName(self: Table) -> str
        Set: DistributionName(self: Table) = value
        """
        ...

    @property
    def Durability(self) -> DurabilityType:
        """
        Get: Durability(self: Table) -> DurabilityType
        Set: Durability(self: Table) = value
        """
        ...

    @property
    def DwTableDistribution(self) -> DwTableDistributionType:
        """
        Get: DwTableDistribution(self: Table) -> DwTableDistributionType
        Set: DwTableDistribution(self: Table) = value
        """
        ...

    @property
    def Events(self): # -> TableEvents
        """ Get: Events(self: Table) -> TableEvents """
        ...

    @property
    def ExternalTableDistribution(self) -> ExternalTableDistributionType:
        """
        Get: ExternalTableDistribution(self: Table) -> ExternalTableDistributionType
        Set: ExternalTableDistribution(self: Table) = value
        """
        ...

    @property
    def FederationColumnID(self) -> int:
        """ Get: FederationColumnID(self: Table) -> int """
        ...

    @property
    def FederationColumnName(self) -> str:
        """
        Get: FederationColumnName(self: Table) -> str
        Set: FederationColumnName(self: Table) = value
        """
        ...

    @property
    def FileFormatName(self) -> str:
        """
        Get: FileFormatName(self: Table) -> str
        Set: FileFormatName(self: Table) = value
        """
        ...

    @property
    def FileGroup(self) -> str:
        """
        Get: FileGroup(self: Table) -> str
        Set: FileGroup(self: Table) = value
        """
        ...

    @property
    def FileStreamFileGroup(self) -> str:
        """
        Get: FileStreamFileGroup(self: Table) -> str
        Set: FileStreamFileGroup(self: Table) = value
        """
        ...

    @property
    def FileStreamPartitionScheme(self) -> str:
        """
        Get: FileStreamPartitionScheme(self: Table) -> str
        Set: FileStreamPartitionScheme(self: Table) = value
        """
        ...

    @property
    def FileTableDirectoryName(self) -> str:
        """
        Get: FileTableDirectoryName(self: Table) -> str
        Set: FileTableDirectoryName(self: Table) = value
        """
        ...

    @property
    def FileTableNameColumnCollation(self) -> str:
        """
        Get: FileTableNameColumnCollation(self: Table) -> str
        Set: FileTableNameColumnCollation(self: Table) = value
        """
        ...

    @property
    def FileTableNamespaceEnabled(self) -> bool:
        """
        Get: FileTableNamespaceEnabled(self: Table) -> bool
        Set: FileTableNamespaceEnabled(self: Table) = value
        """
        ...

    @property
    def ForeignKeys(self) -> ForeignKeyCollection:
        """ Get: ForeignKeys(self: Table) -> ForeignKeyCollection """
        ...

    @property
    def HasAfterTrigger(self) -> bool:
        """ Get: HasAfterTrigger(self: Table) -> bool """
        ...

    @property
    def HasClusteredColumnStoreIndex(self) -> bool:
        """ Get: HasClusteredColumnStoreIndex(self: Table) -> bool """
        ...

    @property
    def HasClusteredIndex(self) -> bool:
        """ Get: HasClusteredIndex(self: Table) -> bool """
        ...

    @property
    def HasCompressedPartitions(self) -> bool:
        """ Get: HasCompressedPartitions(self: Table) -> bool """
        ...

    @property
    def HasDeleteTrigger(self) -> bool:
        """ Get: HasDeleteTrigger(self: Table) -> bool """
        ...

    @property
    def HasHeapIndex(self) -> bool:
        """ Get: HasHeapIndex(self: Table) -> bool """
        ...

    @property
    def HasIndex(self) -> bool:
        """ Get: HasIndex(self: Table) -> bool """
        ...

    @property
    def HasInsertTrigger(self) -> bool:
        """ Get: HasInsertTrigger(self: Table) -> bool """
        ...

    @property
    def HasInsteadOfTrigger(self) -> bool:
        """ Get: HasInsteadOfTrigger(self: Table) -> bool """
        ...

    @property
    def HasSparseColumn(self) -> bool:
        """ Get: HasSparseColumn(self: Table) -> bool """
        ...

    @property
    def HasSystemTimePeriod(self) -> bool:
        """ Get: HasSystemTimePeriod(self: Table) -> bool """
        ...

    @property
    def HasUpdateTrigger(self) -> bool:
        """ Get: HasUpdateTrigger(self: Table) -> bool """
        ...

    @property
    def HistoryRetentionPeriod(self) -> int:
        """
        Get: HistoryRetentionPeriod(self: Table) -> int
        Set: HistoryRetentionPeriod(self: Table) = value
        """
        ...

    @property
    def HistoryRetentionPeriodUnit(self): # -> TemporalHistoryRetentionPeriodUnit
        """
        Get: HistoryRetentionPeriodUnit(self: Table) -> TemporalHistoryRetentionPeriodUnit
        Set: HistoryRetentionPeriodUnit(self: Table) = value
        """
        ...

    @property
    def HistoryTableID(self) -> int:
        """ Get: HistoryTableID(self: Table) -> int """
        ...

    @property
    def HistoryTableName(self) -> str:
        """
        Get: HistoryTableName(self: Table) -> str
        Set: HistoryTableName(self: Table) = value
        """
        ...

    @property
    def HistoryTableSchema(self) -> str:
        """
        Get: HistoryTableSchema(self: Table) -> str
        Set: HistoryTableSchema(self: Table) = value
        """
        ...

    @property
    def Indexes(self) -> IndexCollection:
        """ Get: Indexes(self: Table) -> IndexCollection """
        ...

    @property
    def IndexSpaceUsed(self) -> float:
        """ Get: IndexSpaceUsed(self: Table) -> float """
        ...

    @property
    def IsEdge(self) -> bool:
        """
        Get: IsEdge(self: Table) -> bool
        Set: IsEdge(self: Table) = value
        """
        ...

    @property
    def IsExternal(self) -> bool:
        """
        Get: IsExternal(self: Table) -> bool
        Set: IsExternal(self: Table) = value
        """
        ...

    @property
    def IsFileTable(self) -> bool:
        """
        Get: IsFileTable(self: Table) -> bool
        Set: IsFileTable(self: Table) = value
        """
        ...

    @property
    def IsIndexable(self) -> bool:
        """ Get: IsIndexable(self: Table) -> bool """
        ...

    @property
    def IsMemoryOptimized(self) -> bool:
        """
        Get: IsMemoryOptimized(self: Table) -> bool
        Set: IsMemoryOptimized(self: Table) = value
        """
        ...

    @property
    def IsNode(self) -> bool:
        """
        Get: IsNode(self: Table) -> bool
        Set: IsNode(self: Table) = value
        """
        ...

    @property
    def IsPartitioned(self) -> bool:
        """ Get: IsPartitioned(self: Table) -> bool """
        ...

    @property
    def IsSystemVersioned(self) -> bool:
        """
        Get: IsSystemVersioned(self: Table) -> bool
        Set: IsSystemVersioned(self: Table) = value
        """
        ...

    @property
    def IsVarDecimalStorageFormatEnabled(self) -> bool:
        """
        Get: IsVarDecimalStorageFormatEnabled(self: Table) -> bool
        Set: IsVarDecimalStorageFormatEnabled(self: Table) = value
        """
        ...

    @property
    def Location(self) -> str:
        """
        Get: Location(self: Table) -> str
        Set: Location(self: Table) = value
        """
        ...

    @property
    def LowPriorityAbortAfterWait(self) -> AbortAfterWait:
        """
        Get: LowPriorityAbortAfterWait(self: Table) -> AbortAfterWait
        Set: LowPriorityAbortAfterWait(self: Table) = value
        """
        ...

    @property
    def LowPriorityMaxDuration(self) -> int:
        """
        Get: LowPriorityMaxDuration(self: Table) -> int
        Set: LowPriorityMaxDuration(self: Table) = value
        """
        ...

    @property
    def MaximumDegreeOfParallelism(self) -> int:
        """
        Get: MaximumDegreeOfParallelism(self: Table) -> int
        Set: MaximumDegreeOfParallelism(self: Table) = value
        """
        ...

    @property
    def OnlineHeapOperation(self) -> bool:
        """
        Get: OnlineHeapOperation(self: Table) -> bool
        Set: OnlineHeapOperation(self: Table) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: Table) -> Database
        Set: Parent(self: Table) = value
        """
        ...

    @property
    def PartitionScheme(self) -> str:
        """
        Get: PartitionScheme(self: Table) -> str
        Set: PartitionScheme(self: Table) = value
        """
        ...

    @property
    def PartitionSchemeParameters(self) -> PartitionSchemeParameterCollection:
        """ Get: PartitionSchemeParameters(self: Table) -> PartitionSchemeParameterCollection """
        ...

    @property
    def PhysicalPartitions(self) -> PhysicalPartitionCollection:
        """ Get: PhysicalPartitions(self: Table) -> PhysicalPartitionCollection """
        ...

    @property
    def RejectSampleValue(self) -> float:
        """
        Get: RejectSampleValue(self: Table) -> float
        Set: RejectSampleValue(self: Table) = value
        """
        ...

    @property
    def RejectType(self) -> ExternalTableRejectType:
        """
        Get: RejectType(self: Table) -> ExternalTableRejectType
        Set: RejectType(self: Table) = value
        """
        ...

    @property
    def RejectValue(self) -> float:
        """
        Get: RejectValue(self: Table) -> float
        Set: RejectValue(self: Table) = value
        """
        ...

    @property
    def RemoteDataArchiveFilterPredicate(self) -> str:
        """
        Get: RemoteDataArchiveFilterPredicate(self: Table) -> str
        Set: RemoteDataArchiveFilterPredicate(self: Table) = value
        """
        ...

    @property
    def RemoteObjectName(self) -> str:
        """
        Get: RemoteObjectName(self: Table) -> str
        Set: RemoteObjectName(self: Table) = value
        """
        ...

    @property
    def RemoteSchemaName(self) -> str:
        """
        Get: RemoteSchemaName(self: Table) -> str
        Set: RemoteSchemaName(self: Table) = value
        """
        ...

    @property
    def RowCount(self) -> Int64:
        """ Get: RowCount(self: Table) -> Int64 """
        ...

    @property
    def RowCountAsDouble(self) -> float:
        """ Get: RowCountAsDouble(self: Table) -> float """
        ...

    @property
    def ShardingColumnName(self) -> str:
        """
        Get: ShardingColumnName(self: Table) -> str
        Set: ShardingColumnName(self: Table) = value
        """
        ...

    @property
    def SystemTimePeriodEndColumn(self) -> str:
        """ Get: SystemTimePeriodEndColumn(self: Table) -> str """
        ...

    @property
    def SystemTimePeriodStartColumn(self) -> str:
        """ Get: SystemTimePeriodStartColumn(self: Table) -> str """
        ...

    @property
    def TemporalType(self): # -> TableTemporalType
        """ Get: TemporalType(self: Table) -> TableTemporalType """
        ...

    @property
    def TextFileGroup(self) -> str:
        """
        Get: TextFileGroup(self: Table) -> str
        Set: TextFileGroup(self: Table) = value
        """
        ...


    def AddPeriodForSystemTime(self, periodStartColumn:str, periodEndColumn:str, addPeriod:bool): # -> 
        """ AddPeriodForSystemTime(self: Table, periodStartColumn: str, periodEndColumn: str, addPeriod: bool) """
        ...

    def AlterWithNoCheck(self): # -> 
        """ AlterWithNoCheck(self: Table) """
        ...

    def ChangeSchema(self, newSchema:str): # -> 
        """ ChangeSchema(self: Table, newSchema: str) """
        ...

    def CheckIdentityValue(self) -> StringCollection:
        """ CheckIdentityValue(self: Table) -> StringCollection """
        ...

    def CheckTable(self) -> StringCollection:
        """ CheckTable(self: Table) -> StringCollection """
        ...

    def CheckTableDataOnly(self) -> StringCollection:
        """ CheckTableDataOnly(self: Table) -> StringCollection """
        ...

    def DisableAllIndexes(self): # -> 
        """ DisableAllIndexes(self: Table) """
        ...

    def DropPeriodForSystemTime(self): # -> 
        """ DropPeriodForSystemTime(self: Table) """
        ...

    def EnableAllIndexes(self, action:IndexEnableAction): # -> 
        """ EnableAllIndexes(self: Table, action: IndexEnableAction) """
        ...

    def EnumForeignKeys(self) -> DataTable:
        """ EnumForeignKeys(self: Table) -> DataTable """
        ...

    def EnumLastStatisticsUpdates(self, statname:str = ...) -> DataTable:
        """
        EnumLastStatisticsUpdates(self: Table) -> DataTable
        EnumLastStatisticsUpdates(self: Table, statname: str) -> DataTable
        """
        ...

    def EnumObjectPermissions(self, *__args:str) -> Array:
        """
        EnumObjectPermissions(self: Table) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: Table, granteeName: str) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: Table, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: Table, granteeName: str, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        """
        ...

    def EnumScript(self, scriptingOptions:ScriptingOptions = ...) -> IEnumerable:
        """
        EnumScript(self: Table) -> IEnumerable[str]
        EnumScript(self: Table, scriptingOptions: ScriptingOptions) -> IEnumerable[str]
        """
        ...

    def GetRemoteTableMigrationStatistics(self) -> RemoteTableMigrationStatistics:
        """ GetRemoteTableMigrationStatistics(self: Table) -> RemoteTableMigrationStatistics """
        ...

    def Rebuild(self, partitionNumber:int = ...): # -> 
        """ Rebuild(self: Table, partitionNumber: int)Rebuild(self: Table) """
        ...

    def RebuildIndexes(self, fillFactor:int): # -> 
        """ RebuildIndexes(self: Table, fillFactor: int) """
        ...

    def RecalculateSpaceUsage(self): # -> 
        """ RecalculateSpaceUsage(self: Table) """
        ...

    def SwitchPartition(self, *__args:Table): # -> 
        """ SwitchPartition(self: Table, sourcePartitionNumber: int, targetTable: Table, targetPartitionNumber: int)SwitchPartition(self: Table, sourcePartitionNumber: int, targetTable: Table)SwitchPartition(self: Table, targetTable: Table, targetPartitionNumber: int)SwitchPartition(self: Table, targetTable: Table) """
        ...

    def TruncateData(self, partitionNumber:int = ...): # -> 
        """ TruncateData(self: Table)TruncateData(self: Table, partitionNumber: int) """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class TableCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: TableCollection) -> Database """
        ...


    def Add(self, table:Table): # -> 
        """ Add(self: TableCollection, table: Table) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: TableCollection, array: Array[Table], index: int) """
        ...

    def ItemById(self, id:int) -> Table:
        """ ItemById(self: TableCollection, id: int) -> Table """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class TableEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AlterFulltextIndex(self) -> TableEvent:
        """ Get: AlterFulltextIndex() -> TableEvent """
        ...

    @property
    def AlterIndex(self) -> TableEvent:
        """ Get: AlterIndex() -> TableEvent """
        ...

    @property
    def AlterTable(self) -> TableEvent:
        """ Get: AlterTable() -> TableEvent """
        ...

    @property
    def CreateFulltextIndex(self) -> TableEvent:
        """ Get: CreateFulltextIndex() -> TableEvent """
        ...

    @property
    def CreateIndex(self) -> TableEvent:
        """ Get: CreateIndex() -> TableEvent """
        ...

    @property
    def CreateSpatialIndex(self) -> TableEvent:
        """ Get: CreateSpatialIndex() -> TableEvent """
        ...

    @property
    def CreateStatistics(self) -> TableEvent:
        """ Get: CreateStatistics() -> TableEvent """
        ...

    @property
    def CreateXmlIndex(self) -> TableEvent:
        """ Get: CreateXmlIndex() -> TableEvent """
        ...

    @property
    def DropFulltextIndex(self) -> TableEvent:
        """ Get: DropFulltextIndex() -> TableEvent """
        ...

    @property
    def DropIndex(self) -> TableEvent:
        """ Get: DropIndex() -> TableEvent """
        ...

    @property
    def DropStatistics(self) -> TableEvent:
        """ Get: DropStatistics() -> TableEvent """
        ...

    @property
    def DropTable(self) -> TableEvent:
        """ Get: DropTable() -> TableEvent """
        ...

    @property
    def UpdateStatistics(self) -> TableEvent:
        """ Get: UpdateStatistics() -> TableEvent """
        ...


    @staticmethod
    def Add(eventLeft:TableEvent, eventRight:TableEvent): # -> TableEventSet
        """ Add(eventLeft: TableEvent, eventRight: TableEvent) -> TableEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:TableEvent, eventRight:TableEvent): # -> TableEventSet
        """ BitwiseOr(eventLeft: TableEvent, eventRight: TableEvent) -> TableEventSet """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: TableEvent, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: TableEvent) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: TableEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: TableEvent, eventRight: TableEvent) -> TableEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: TableEvent, eventRight: TableEvent) -> TableEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: TableEvent, eventRight: TableEvent) -> TableEventSet """
        ...



class TableEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self): # -> TableEventSet
        """ GetEventSelection(self: TableEvents) -> TableEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: TableEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: TableEvents) """
        ...

    def SubscribeToEvents(self, events, eventHandler:ServerEventHandler = ...): # ->  # Not found arg types: {'events': 'TableEventSet'}
        """ SubscribeToEvents(self: TableEvents, events: TableEventSet)SubscribeToEvents(self: TableEvents, events: TableEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: TableEvents) """
        ...

    def UnsubscribeFromEvents(self, events): # ->  # Not found arg types: {'events': 'TableEventSet'}
        """ UnsubscribeFromEvents(self: TableEvents, events: TableEventSet) """
        ...

    ServerEvent = ...


class TableEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    TableEventSet()
    TableEventSet(eventSet: TableEventSet)
    TableEventSet(anEvent: TableEvent)
    TableEventSet(*events: Array[TableEvent])
    """
    @property
    def AlterFulltextIndex(self) -> bool:
        """
        Get: AlterFulltextIndex(self: TableEventSet) -> bool
        Set: AlterFulltextIndex(self: TableEventSet) = value
        """
        ...

    @property
    def AlterIndex(self) -> bool:
        """
        Get: AlterIndex(self: TableEventSet) -> bool
        Set: AlterIndex(self: TableEventSet) = value
        """
        ...

    @property
    def AlterTable(self) -> bool:
        """
        Get: AlterTable(self: TableEventSet) -> bool
        Set: AlterTable(self: TableEventSet) = value
        """
        ...

    @property
    def CreateFulltextIndex(self) -> bool:
        """
        Get: CreateFulltextIndex(self: TableEventSet) -> bool
        Set: CreateFulltextIndex(self: TableEventSet) = value
        """
        ...

    @property
    def CreateIndex(self) -> bool:
        """
        Get: CreateIndex(self: TableEventSet) -> bool
        Set: CreateIndex(self: TableEventSet) = value
        """
        ...

    @property
    def CreateSpatialIndex(self) -> bool:
        """
        Get: CreateSpatialIndex(self: TableEventSet) -> bool
        Set: CreateSpatialIndex(self: TableEventSet) = value
        """
        ...

    @property
    def CreateStatistics(self) -> bool:
        """
        Get: CreateStatistics(self: TableEventSet) -> bool
        Set: CreateStatistics(self: TableEventSet) = value
        """
        ...

    @property
    def CreateXmlIndex(self) -> bool:
        """
        Get: CreateXmlIndex(self: TableEventSet) -> bool
        Set: CreateXmlIndex(self: TableEventSet) = value
        """
        ...

    @property
    def DropFulltextIndex(self) -> bool:
        """
        Get: DropFulltextIndex(self: TableEventSet) -> bool
        Set: DropFulltextIndex(self: TableEventSet) = value
        """
        ...

    @property
    def DropIndex(self) -> bool:
        """
        Get: DropIndex(self: TableEventSet) -> bool
        Set: DropIndex(self: TableEventSet) = value
        """
        ...

    @property
    def DropStatistics(self) -> bool:
        """
        Get: DropStatistics(self: TableEventSet) -> bool
        Set: DropStatistics(self: TableEventSet) = value
        """
        ...

    @property
    def DropTable(self) -> bool:
        """
        Get: DropTable(self: TableEventSet) -> bool
        Set: DropTable(self: TableEventSet) = value
        """
        ...

    @property
    def UpdateStatistics(self) -> bool:
        """
        Get: UpdateStatistics(self: TableEventSet) -> bool
        Set: UpdateStatistics(self: TableEventSet) = value
        """
        ...


    def Add(self, *__args:TableEvent) -> TableEventSet:
        """
        Add(self: TableEventSet, anEvent: TableEvent) -> TableEventSet
        Add(eventSet: TableEventSet, anEvent: TableEvent) -> TableEventSet
        """
        ...

    def Remove(self, anEvent:TableEvent) -> TableEventSet:
        """ Remove(self: TableEventSet, anEvent: TableEvent) -> TableEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:TableEventSet, anEvent:TableEvent) -> TableEventSet:
        """ Subtract(eventSet: TableEventSet, anEvent: TableEvent) -> TableEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: TableEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class TableTemporalType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TableTemporalType, values: HistoryTable (1), None (0), SystemVersioned (2) """
    HistoryTable: TableTemporalType = ...
    SystemVersioned: TableTemporalType = ...
    value__ = ...


class TcpProtocol(EndpointProtocol): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def IsDynamicPort(self) -> bool:
        """ Get: IsDynamicPort(self: TcpProtocol) -> bool """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: TcpProtocol) -> bool """
        ...

    @property
    def ListenerIPAddress(self) -> IPAddress:
        """
        Get: ListenerIPAddress(self: TcpProtocol) -> IPAddress
        Set: ListenerIPAddress(self: TcpProtocol) = value
        """
        ...

    @property
    def ListenerPort(self) -> int:
        """
        Get: ListenerPort(self: TcpProtocol) -> int
        Set: ListenerPort(self: TcpProtocol) = value
        """
        ...


    def Create(self): # -> 
        """ Create(self: TcpProtocol) """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class TemporalHistoryRetentionPeriodUnit(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TemporalHistoryRetentionPeriodUnit, values: Day (3), Infinite (-1), Month (5), Undefined (-2), Week (4), Year (6) """
    Day: TemporalHistoryRetentionPeriodUnit = ...
    Infinite: TemporalHistoryRetentionPeriodUnit = ...
    Month: TemporalHistoryRetentionPeriodUnit = ...
    Undefined: TemporalHistoryRetentionPeriodUnit = ...
    value__ = ...
    Week: TemporalHistoryRetentionPeriodUnit = ...
    Year: TemporalHistoryRetentionPeriodUnit = ...


class TemporalHistoryRetentionPeriodUnitTypeConverter(EnumToDisplayNameConverter): # skipped bases: <type 'object'>
    """ TemporalHistoryRetentionPeriodUnitTypeConverter() """
    pass

class TerminationClause(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TerminationClause, values: FailOnOpenTransactions (0), RollbackTransactionsImmediately (1) """
    FailOnOpenTransactions: TerminationClause = ...
    RollbackTransactionsImmediately: TerminationClause = ...
    value__ = ...


class TransactionTypes(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) TransactionTypes, values: Both (3), UnVersioned (2), Versioned (1) """
    Both: TransactionTypes = ...
    UnVersioned: TransactionTypes = ...
    value__ = ...
    Versioned: TransactionTypes = ...


class Transfer(DataTransferBase, ITransferMetadataProvider): # skipped bases: <type 'object'>
    """
    Transfer()
    Transfer(database: Database)
    """
    @property
    def BatchSize(self) -> int:
        """
        Get: BatchSize(self: Transfer) -> int
        Set: BatchSize(self: Transfer) = value
        """
        ...

    @property
    def BulkCopyTimeout(self) -> int:
        """
        Get: BulkCopyTimeout(self: Transfer) -> int
        Set: BulkCopyTimeout(self: Transfer) = value
        """
        ...

    @property
    def TemporaryPackageDirectory(self) -> str:
        """
        Get: TemporaryPackageDirectory(self: Transfer) -> str
        Set: TemporaryPackageDirectory(self: Transfer) = value
        """
        ...


    def GetTransferProvider(self) -> IDataTransferProvider:
        """ GetTransferProvider(self: Transfer) -> IDataTransferProvider """
        ...

    def ProcessDependencyChain(self, *args): #cannot find CLR method
        """ ProcessDependencyChain(server: Server, dependencyChain: DependencyChainCollection, isDataOnly: bool, isCreateOrder: bool) -> Array[Urn] """
        ...

    def TransferData(self): # -> 
        """ TransferData(self: Transfer) """
        ...

    DataTransferEvent = ...


class Trigger(IDroppable, IAlterable, ICreatable, IScriptable, ICreateOrAlterable, ScriptNameObjectBase, ISfcSupportsDesignMode, ITextObject, IDropIfExists, IMarkForDrop, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    Trigger()
    Trigger(parent: SqlSmoObject, name: str)
    """
    @property
    def AnsiNullsStatus(self) -> bool:
        """
        Get: AnsiNullsStatus(self: Trigger) -> bool
        Set: AnsiNullsStatus(self: Trigger) = value
        """
        ...

    @property
    def AssemblyName(self) -> str:
        """
        Get: AssemblyName(self: Trigger) -> str
        Set: AssemblyName(self: Trigger) = value
        """
        ...

    @property
    def ClassName(self) -> str:
        """
        Get: ClassName(self: Trigger) -> str
        Set: ClassName(self: Trigger) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: Trigger) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: Trigger) -> DateTime """
        ...

    @property
    def Delete(self) -> bool:
        """
        Get: Delete(self: Trigger) -> bool
        Set: Delete(self: Trigger) = value
        """
        ...

    @property
    def DeleteOrder(self) -> ActivationOrder:
        """
        Get: DeleteOrder(self: Trigger) -> ActivationOrder
        Set: DeleteOrder(self: Trigger) = value
        """
        ...

    @property
    def Events(self): # -> TriggerEvents
        """ Get: Events(self: Trigger) -> TriggerEvents """
        ...

    @property
    def ExecutionContext(self) -> ExecutionContext:
        """
        Get: ExecutionContext(self: Trigger) -> ExecutionContext
        Set: ExecutionContext(self: Trigger) = value
        """
        ...

    @property
    def ExecutionContextPrincipal(self) -> str:
        """
        Get: ExecutionContextPrincipal(self: Trigger) -> str
        Set: ExecutionContextPrincipal(self: Trigger) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: Trigger) -> int """
        ...

    @property
    def ImplementationType(self) -> ImplementationType:
        """
        Get: ImplementationType(self: Trigger) -> ImplementationType
        Set: ImplementationType(self: Trigger) = value
        """
        ...

    @property
    def Insert(self) -> bool:
        """
        Get: Insert(self: Trigger) -> bool
        Set: Insert(self: Trigger) = value
        """
        ...

    @property
    def InsertOrder(self) -> ActivationOrder:
        """
        Get: InsertOrder(self: Trigger) -> ActivationOrder
        Set: InsertOrder(self: Trigger) = value
        """
        ...

    @property
    def InsteadOf(self) -> bool:
        """
        Get: InsteadOf(self: Trigger) -> bool
        Set: InsteadOf(self: Trigger) = value
        """
        ...

    @property
    def IsEnabled(self) -> bool:
        """
        Get: IsEnabled(self: Trigger) -> bool
        Set: IsEnabled(self: Trigger) = value
        """
        ...

    @property
    def IsEncrypted(self) -> bool:
        """
        Get: IsEncrypted(self: Trigger) -> bool
        Set: IsEncrypted(self: Trigger) = value
        """
        ...

    @property
    def IsNativelyCompiled(self) -> bool:
        """
        Get: IsNativelyCompiled(self: Trigger) -> bool
        Set: IsNativelyCompiled(self: Trigger) = value
        """
        ...

    @property
    def IsSchemaBound(self) -> bool:
        """
        Get: IsSchemaBound(self: Trigger) -> bool
        Set: IsSchemaBound(self: Trigger) = value
        """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: Trigger) -> bool """
        ...

    @property
    def MethodName(self) -> str:
        """
        Get: MethodName(self: Trigger) -> str
        Set: MethodName(self: Trigger) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: Trigger) -> str
        Set: Name(self: Trigger) = value
        """
        ...

    @property
    def NotForReplication(self) -> bool:
        """
        Get: NotForReplication(self: Trigger) -> bool
        Set: NotForReplication(self: Trigger) = value
        """
        ...

    @property
    def Parent(self) -> SqlSmoObject:
        """
        Get: Parent(self: Trigger) -> SqlSmoObject
        Set: Parent(self: Trigger) = value
        """
        ...

    @property
    def QuotedIdentifierStatus(self) -> bool:
        """
        Get: QuotedIdentifierStatus(self: Trigger) -> bool
        Set: QuotedIdentifierStatus(self: Trigger) = value
        """
        ...

    @property
    def Update(self) -> bool:
        """
        Get: Update(self: Trigger) -> bool
        Set: Update(self: Trigger) = value
        """
        ...

    @property
    def UpdateOrder(self) -> ActivationOrder:
        """
        Get: UpdateOrder(self: Trigger) -> ActivationOrder
        Set: UpdateOrder(self: Trigger) = value
        """
        ...


    def ReCompileReferences(self): # -> 
        """ ReCompileReferences(self: Trigger) """
        ...

    def __new__(cls, parent:SqlSmoObject = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, parent: SqlSmoObject, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class TriggerCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> SqlSmoObject:
        """ Get: Parent(self: TriggerCollection) -> SqlSmoObject """
        ...


    def Add(self, trigger:Trigger): # -> 
        """ Add(self: TriggerCollection, trigger: Trigger) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: TriggerCollection, array: Array[Trigger], index: int) """
        ...

    def ItemById(self, id:int) -> Trigger:
        """ ItemById(self: TriggerCollection, id: int) -> Trigger """
        ...

    def Remove(self, *__args:str): # -> 
        """ Remove(self: TriggerCollection, name: str)Remove(self: TriggerCollection, trigger: Trigger) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class TriggerEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self) -> ObjectEventSet:
        """ GetEventSelection(self: TriggerEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: TriggerEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: TriggerEvents) """
        ...

    def SubscribeToEvents(self, events:ObjectEventSet, eventHandler:ServerEventHandler = ...): # -> 
        """ SubscribeToEvents(self: TriggerEvents, events: ObjectEventSet)SubscribeToEvents(self: TriggerEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: TriggerEvents) """
        ...

    def UnsubscribeFromEvents(self, events:ObjectEventSet): # -> 
        """ UnsubscribeFromEvents(self: TriggerEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class UnknownPropertyException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    UnknownPropertyException()
    UnknownPropertyException(message: str, innerException: Exception)
    UnknownPropertyException(propertyName: str)
    """
    @property
    def CurrentVersion(self) -> ServerVersion:
        """ Get: CurrentVersion(self: UnknownPropertyException) -> ServerVersion """
        ...

    @property
    def Message(self) -> str:
        """ Get: Message(self: UnknownPropertyException) -> str """
        ...

    @property
    def PropertyName(self) -> str:
        """ Get: PropertyName(self: UnknownPropertyException) -> str """
        ...

    @property
    def SupportedVersions(self) -> Array:
        """ Get: SupportedVersions(self: UnknownPropertyException) -> Array[ServerVersion] """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: UnknownPropertyException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class UnsupportedCompatLevelException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    UnsupportedCompatLevelException()
    UnsupportedCompatLevelException(message: str)
    UnsupportedCompatLevelException(message: str, innerException: Exception)
    """
    SerializeObjectState = ...


class UnsupportedEngineEditionException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    UnsupportedEngineEditionException()
    UnsupportedEngineEditionException(message: str)
    UnsupportedEngineEditionException(message: str, innerException: Exception)
    """
    SerializeObjectState = ...


class UnsupportedEngineTypeException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    UnsupportedEngineTypeException()
    UnsupportedEngineTypeException(message: str)
    UnsupportedEngineTypeException(message: str, innerException: Exception)
    """
    SerializeObjectState = ...


class UnsupportedFeatureException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    UnsupportedFeatureException()
    UnsupportedFeatureException(message: str)
    UnsupportedFeatureException(message: str, innerException: Exception)
    """
    SerializeObjectState = ...


class UnsupportedObjectNameException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    UnsupportedObjectNameException()
    UnsupportedObjectNameException(message: str)
    UnsupportedObjectNameException(message: str, innerException: Exception)
    """
    SerializeObjectState = ...


class UnsupportedVersionException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    UnsupportedVersionException()
    UnsupportedVersionException(message: str)
    UnsupportedVersionException(message: str, innerException: Exception)
    """
    SerializeObjectState = ...


class UrnCollection(IList): # skipped bases: <type 'ICollection[Urn]'>, <type 'IEnumerable'>, <type 'IEnumerable[Urn]'>, <type 'object'>
    """ UrnCollection() """
    @property
    def Count(self) -> int:
        """ Get: Count(self: UrnCollection) -> int """
        ...


    def Add(self, urn:Urn): # -> 
        """ Add(self: UrnCollection, urn: Urn) """
        ...

    def AddRange(self, urnCollection:IEnumerable): # -> 
        """ AddRange(self: UrnCollection, urnCollection: IEnumerable[Urn]) """
        ...

    def Clear(self): # -> 
        """ Clear(self: UrnCollection) """
        ...

    def Contains(self, urn:Urn) -> bool:
        """ Contains(self: UrnCollection, urn: Urn) -> bool """
        ...

    def CopyTo(self, array:Array, arrayIndex:int): # -> 
        """ CopyTo(self: UrnCollection, array: Array[Urn], arrayIndex: int) """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: UrnCollection) -> IEnumerator[Urn] """
        ...

    def Remove(self, urn:Urn) -> bool:
        """ Remove(self: UrnCollection, urn: Urn) -> bool """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...


class UrnIdOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum UrnIdOption, values: NoId (2), OnlyId (1), WithId (0) """
    NoId: UrnIdOption = ...
    OnlyId: UrnIdOption = ...
    value__ = ...
    WithId: UrnIdOption = ...


class User(IDroppable, IAlterable, ICreatable, IScriptable, IRenamable, IUserOptions, IObjectPermission, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists, IExtendedProperties): # skipped bases: <type 'IDmfFacet'>, <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    User()
    User(database: Database, name: str)
    """
    @property
    def AuthenticationType(self) -> AuthenticationType:
        """ Get: AuthenticationType(self: User) -> AuthenticationType """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: User) -> DateTime """
        ...

    @property
    def DefaultLanguage(self) -> DefaultLanguage:
        """ Get: DefaultLanguage(self: User) -> DefaultLanguage """
        ...

    @property
    def Events(self): # -> UserEvents
        """ Get: Events(self: User) -> UserEvents """
        ...

    @property
    def HasDBAccess(self) -> bool:
        """ Get: HasDBAccess(self: User) -> bool """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: User) -> Database
        Set: Parent(self: User) = value
        """
        ...


    def AddToRole(self, role:str): # -> 
        """ AddToRole(self: User, role: str) """
        ...

    def ChangePassword(self, *__args:str): # -> 
        """ ChangePassword(self: User, newPassword: str)ChangePassword(self: User, newPassword: SecureString)ChangePassword(self: User, oldPassword: str, newPassword: str)ChangePassword(self: User, oldPassword: SecureString, newPassword: SecureString) """
        ...

    def EnumOwnedObjects(self) -> Array:
        """ EnumOwnedObjects(self: User) -> Array[Urn] """
        ...

    def EnumRoles(self) -> StringCollection:
        """ EnumRoles(self: User) -> StringCollection """
        ...

    def IsMember(self, role:str) -> bool:
        """ IsMember(self: User, role: str) -> bool """
        ...

    def MakeContained(self, copyLoginName:bool, disableLogin:bool): # -> 
        """ MakeContained(self: User, copyLoginName: bool, disableLogin: bool) """
        ...

    def __new__(cls, database:Database = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class UserCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: UserCollection) -> Database """
        ...


    def Add(self, user:User): # -> 
        """ Add(self: UserCollection, user: User) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: UserCollection, array: Array[User], index: int) """
        ...

    def ItemById(self, id:int) -> User:
        """ ItemById(self: UserCollection, id: int) -> User """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class UserDefinedAggregate(IDroppable, IAlterable, ICreatable, IScriptable, IObjectPermission, ISfcSupportsDesignMode, IDropIfExists, ScriptSchemaObjectBase, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    UserDefinedAggregate()
    UserDefinedAggregate(database: Database, name: str)
    UserDefinedAggregate(database: Database, name: str, schema: str)
    """
    @property
    def AssemblyName(self) -> str:
        """
        Get: AssemblyName(self: UserDefinedAggregate) -> str
        Set: AssemblyName(self: UserDefinedAggregate) = value
        """
        ...

    @property
    def ClassName(self) -> str:
        """
        Get: ClassName(self: UserDefinedAggregate) -> str
        Set: ClassName(self: UserDefinedAggregate) = value
        """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: UserDefinedAggregate) -> DateTime """
        ...

    @property
    def DataType(self) -> DataType:
        """
        Get: DataType(self: UserDefinedAggregate) -> DataType
        Set: DataType(self: UserDefinedAggregate) = value
        """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: UserDefinedAggregate) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: UserDefinedAggregate) -> int """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: UserDefinedAggregate) -> bool """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: UserDefinedAggregate) -> str
        Set: Owner(self: UserDefinedAggregate) = value
        """
        ...

    @property
    def Parameters(self): # -> UserDefinedAggregateParameterCollection
        """ Get: Parameters(self: UserDefinedAggregate) -> UserDefinedAggregateParameterCollection """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: UserDefinedAggregate) -> Database
        Set: Parent(self: UserDefinedAggregate) = value
        """
        ...


    def ChangeSchema(self, newSchema:str): # -> 
        """ ChangeSchema(self: UserDefinedAggregate, newSchema: str) """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class UserDefinedAggregateCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: UserDefinedAggregateCollection) -> Database """
        ...


    def Add(self, userDefinedAggregate:UserDefinedAggregate): # -> 
        """ Add(self: UserDefinedAggregateCollection, userDefinedAggregate: UserDefinedAggregate) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: UserDefinedAggregateCollection, array: Array[UserDefinedAggregate], index: int) """
        ...

    def ItemById(self, id:int) -> UserDefinedAggregate:
        """ ItemById(self: UserDefinedAggregateCollection, id: int) -> UserDefinedAggregate """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class UserDefinedAggregateParameter(ISfcSupportsDesignMode, ParameterBase): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IExtendedProperties'>, <type 'IMarkForDrop'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    UserDefinedAggregateParameter()
    UserDefinedAggregateParameter(userDefinedAggregate: UserDefinedAggregate, name: str)
    UserDefinedAggregateParameter(userDefinedAggregate: UserDefinedAggregate, name: str, dataType: DataType)
    """
    @property
    def ID(self) -> int:
        """ Get: ID(self: UserDefinedAggregateParameter) -> int """
        ...

    @property
    def Parent(self) -> UserDefinedAggregate:
        """
        Get: Parent(self: UserDefinedAggregateParameter) -> UserDefinedAggregate
        Set: Parent(self: UserDefinedAggregateParameter) = value
        """
        ...


    def __new__(cls, userDefinedAggregate:UserDefinedAggregate = ..., name:str = ..., dataType:DataType = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, userDefinedAggregate: UserDefinedAggregate, name: str)
        __new__(cls: type, userDefinedAggregate: UserDefinedAggregate, name: str, dataType: DataType)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class UserDefinedAggregateParameterCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> UserDefinedAggregate:
        """ Get: Parent(self: UserDefinedAggregateParameterCollection) -> UserDefinedAggregate """
        ...


    def Add(self, userDefinedAggregateParameter:UserDefinedAggregateParameter, *__args:str): # -> 
        """ Add(self: UserDefinedAggregateParameterCollection, userDefinedAggregateParameter: UserDefinedAggregateParameter)Add(self: UserDefinedAggregateParameterCollection, userDefinedAggregateParameter: UserDefinedAggregateParameter, insertAtColumnName: str)Add(self: UserDefinedAggregateParameterCollection, userDefinedAggregateParameter: UserDefinedAggregateParameter, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: UserDefinedAggregateParameterCollection, array: Array[UserDefinedAggregateParameter], index: int) """
        ...

    def ItemById(self, id:int) -> UserDefinedAggregateParameter:
        """ ItemById(self: UserDefinedAggregateParameterCollection, id: int) -> UserDefinedAggregateParameter """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class UserDefinedDataType(IDroppable, IAlterable, ICreatable, IScriptable, IRenamable, IObjectPermission, ISfcSupportsDesignMode, IDropIfExists, ScriptSchemaObjectBase, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    UserDefinedDataType()
    UserDefinedDataType(database: Database, name: str)
    UserDefinedDataType(database: Database, name: str, schema: str)
    """
    @property
    def AllowIdentity(self) -> bool:
        """ Get: AllowIdentity(self: UserDefinedDataType) -> bool """
        ...

    @property
    def Collation(self) -> str:
        """ Get: Collation(self: UserDefinedDataType) -> str """
        ...

    @property
    def Default(self) -> str:
        """
        Get: Default(self: UserDefinedDataType) -> str
        Set: Default(self: UserDefinedDataType) = value
        """
        ...

    @property
    def DefaultSchema(self) -> str:
        """
        Get: DefaultSchema(self: UserDefinedDataType) -> str
        Set: DefaultSchema(self: UserDefinedDataType) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: UserDefinedDataType) -> int """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: UserDefinedDataType) -> bool """
        ...

    @property
    def Length(self) -> int:
        """
        Get: Length(self: UserDefinedDataType) -> int
        Set: Length(self: UserDefinedDataType) = value
        """
        ...

    @property
    def MaxLength(self) -> Int16:
        """ Get: MaxLength(self: UserDefinedDataType) -> Int16 """
        ...

    @property
    def Nullable(self) -> bool:
        """
        Get: Nullable(self: UserDefinedDataType) -> bool
        Set: Nullable(self: UserDefinedDataType) = value
        """
        ...

    @property
    def NumericPrecision(self) -> int:
        """
        Get: NumericPrecision(self: UserDefinedDataType) -> int
        Set: NumericPrecision(self: UserDefinedDataType) = value
        """
        ...

    @property
    def NumericScale(self) -> int:
        """
        Get: NumericScale(self: UserDefinedDataType) -> int
        Set: NumericScale(self: UserDefinedDataType) = value
        """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: UserDefinedDataType) -> str
        Set: Owner(self: UserDefinedDataType) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: UserDefinedDataType) -> Database
        Set: Parent(self: UserDefinedDataType) = value
        """
        ...

    @property
    def Rule(self) -> str:
        """
        Get: Rule(self: UserDefinedDataType) -> str
        Set: Rule(self: UserDefinedDataType) = value
        """
        ...

    @property
    def RuleSchema(self) -> str:
        """
        Get: RuleSchema(self: UserDefinedDataType) -> str
        Set: RuleSchema(self: UserDefinedDataType) = value
        """
        ...

    @property
    def SystemType(self) -> str:
        """
        Get: SystemType(self: UserDefinedDataType) -> str
        Set: SystemType(self: UserDefinedDataType) = value
        """
        ...

    @property
    def VariableLength(self) -> bool:
        """ Get: VariableLength(self: UserDefinedDataType) -> bool """
        ...


    def BindDefault(self, defaultSchema:str, defaultName:str, bindColumns:bool = ...): # -> 
        """ BindDefault(self: UserDefinedDataType, defaultSchema: str, defaultName: str)BindDefault(self: UserDefinedDataType, defaultSchema: str, defaultName: str, bindColumns: bool) """
        ...

    def BindRule(self, ruleSchema:str, ruleName:str, bindColumns:bool = ...): # -> 
        """ BindRule(self: UserDefinedDataType, ruleSchema: str, ruleName: str)BindRule(self: UserDefinedDataType, ruleSchema: str, ruleName: str, bindColumns: bool) """
        ...

    def EnumBoundColumns(self) -> Array:
        """ EnumBoundColumns(self: UserDefinedDataType) -> Array[SqlSmoObject] """
        ...

    def UnbindDefault(self, bindColumns:bool = ...): # -> 
        """ UnbindDefault(self: UserDefinedDataType)UnbindDefault(self: UserDefinedDataType, bindColumns: bool) """
        ...

    def UnbindRule(self, bindColumns:bool = ...): # -> 
        """ UnbindRule(self: UserDefinedDataType)UnbindRule(self: UserDefinedDataType, bindColumns: bool) """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class UserDefinedDataTypeCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: UserDefinedDataTypeCollection) -> Database """
        ...


    def Add(self, userDefinedDataType:UserDefinedDataType): # -> 
        """ Add(self: UserDefinedDataTypeCollection, userDefinedDataType: UserDefinedDataType) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: UserDefinedDataTypeCollection, array: Array[UserDefinedDataType], index: int) """
        ...

    def ItemById(self, id:int) -> UserDefinedDataType:
        """ ItemById(self: UserDefinedDataTypeCollection, id: int) -> UserDefinedDataType """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class UserDefinedDataTypeResolver: # skipped bases: <type 'object'>, <type 'object'>
    """ UserDefinedDataTypeResolver() """
    @staticmethod
    def Resolve(instance:object, parameters:Array) -> object:
        """ Resolve(instance: object, *parameters: Array[object]) -> object """
        ...

    @staticmethod
    def ResolveUrn(instance:object, parameters:Array) -> object:
        """ ResolveUrn(instance: object, *parameters: Array[object]) -> object """
        ...


class UserDefinedFunction(IDroppable, IAlterable, ICreatable, ICreateOrAlterable, IRenamable, ISfcSupportsDesignMode, IDropIfExists, ScriptSchemaObjectBase, IScriptable, IColumnPermission, ITextObject, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'IObjectPermission'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    UserDefinedFunction()
    UserDefinedFunction(database: Database, name: str)
    UserDefinedFunction(database: Database, name: str, schema: str)
    """
    @property
    def AnsiNullsStatus(self) -> bool:
        """
        Get: AnsiNullsStatus(self: UserDefinedFunction) -> bool
        Set: AnsiNullsStatus(self: UserDefinedFunction) = value
        """
        ...

    @property
    def AssemblyName(self) -> str:
        """
        Get: AssemblyName(self: UserDefinedFunction) -> str
        Set: AssemblyName(self: UserDefinedFunction) = value
        """
        ...

    @property
    def Checks(self) -> CheckCollection:
        """ Get: Checks(self: UserDefinedFunction) -> CheckCollection """
        ...

    @property
    def ClassName(self) -> str:
        """
        Get: ClassName(self: UserDefinedFunction) -> str
        Set: ClassName(self: UserDefinedFunction) = value
        """
        ...

    @property
    def Columns(self) -> ColumnCollection:
        """ Get: Columns(self: UserDefinedFunction) -> ColumnCollection """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: UserDefinedFunction) -> DateTime """
        ...

    @property
    def DataType(self) -> DataType:
        """
        Get: DataType(self: UserDefinedFunction) -> DataType
        Set: DataType(self: UserDefinedFunction) = value
        """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: UserDefinedFunction) -> DateTime """
        ...

    @property
    def Events(self): # -> UserDefinedFunctionEvents
        """ Get: Events(self: UserDefinedFunction) -> UserDefinedFunctionEvents """
        ...

    @property
    def ExecutionContext(self) -> ExecutionContext:
        """
        Get: ExecutionContext(self: UserDefinedFunction) -> ExecutionContext
        Set: ExecutionContext(self: UserDefinedFunction) = value
        """
        ...

    @property
    def ExecutionContextPrincipal(self) -> str:
        """
        Get: ExecutionContextPrincipal(self: UserDefinedFunction) -> str
        Set: ExecutionContextPrincipal(self: UserDefinedFunction) = value
        """
        ...

    @property
    def FunctionType(self): # -> UserDefinedFunctionType
        """
        Get: FunctionType(self: UserDefinedFunction) -> UserDefinedFunctionType
        Set: FunctionType(self: UserDefinedFunction) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: UserDefinedFunction) -> int """
        ...

    @property
    def ImplementationType(self) -> ImplementationType:
        """
        Get: ImplementationType(self: UserDefinedFunction) -> ImplementationType
        Set: ImplementationType(self: UserDefinedFunction) = value
        """
        ...

    @property
    def Indexes(self) -> IndexCollection:
        """ Get: Indexes(self: UserDefinedFunction) -> IndexCollection """
        ...

    @property
    def IsDeterministic(self) -> bool:
        """ Get: IsDeterministic(self: UserDefinedFunction) -> bool """
        ...

    @property
    def IsEncrypted(self) -> bool:
        """
        Get: IsEncrypted(self: UserDefinedFunction) -> bool
        Set: IsEncrypted(self: UserDefinedFunction) = value
        """
        ...

    @property
    def IsNativelyCompiled(self) -> bool:
        """
        Get: IsNativelyCompiled(self: UserDefinedFunction) -> bool
        Set: IsNativelyCompiled(self: UserDefinedFunction) = value
        """
        ...

    @property
    def IsSchemaBound(self) -> bool:
        """
        Get: IsSchemaBound(self: UserDefinedFunction) -> bool
        Set: IsSchemaBound(self: UserDefinedFunction) = value
        """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: UserDefinedFunction) -> bool """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: UserDefinedFunction) -> bool """
        ...

    @property
    def MethodName(self) -> str:
        """
        Get: MethodName(self: UserDefinedFunction) -> str
        Set: MethodName(self: UserDefinedFunction) = value
        """
        ...

    @property
    def OrderColumns(self) -> OrderColumnCollection:
        """ Get: OrderColumns(self: UserDefinedFunction) -> OrderColumnCollection """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: UserDefinedFunction) -> str
        Set: Owner(self: UserDefinedFunction) = value
        """
        ...

    @property
    def Parameters(self): # -> UserDefinedFunctionParameterCollection
        """ Get: Parameters(self: UserDefinedFunction) -> UserDefinedFunctionParameterCollection """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: UserDefinedFunction) -> Database
        Set: Parent(self: UserDefinedFunction) = value
        """
        ...

    @property
    def QuotedIdentifierStatus(self) -> bool:
        """
        Get: QuotedIdentifierStatus(self: UserDefinedFunction) -> bool
        Set: QuotedIdentifierStatus(self: UserDefinedFunction) = value
        """
        ...

    @property
    def ReturnsNullOnNullInput(self) -> bool:
        """
        Get: ReturnsNullOnNullInput(self: UserDefinedFunction) -> bool
        Set: ReturnsNullOnNullInput(self: UserDefinedFunction) = value
        """
        ...

    @property
    def TableVariableName(self) -> str:
        """
        Get: TableVariableName(self: UserDefinedFunction) -> str
        Set: TableVariableName(self: UserDefinedFunction) = value
        """
        ...


    def ChangeSchema(self, newSchema:str): # -> 
        """ ChangeSchema(self: UserDefinedFunction, newSchema: str) """
        ...

    def EnumObjectPermissions(self, *__args:str) -> Array:
        """
        EnumObjectPermissions(self: UserDefinedFunction) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: UserDefinedFunction, granteeName: str) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: UserDefinedFunction, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: UserDefinedFunction, granteeName: str, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class UserDefinedFunctionCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: UserDefinedFunctionCollection) -> Database """
        ...


    def Add(self, userDefinedFunction:UserDefinedFunction): # -> 
        """ Add(self: UserDefinedFunctionCollection, userDefinedFunction: UserDefinedFunction) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: UserDefinedFunctionCollection, array: Array[UserDefinedFunction], index: int) """
        ...

    def ItemById(self, id:int) -> UserDefinedFunction:
        """ ItemById(self: UserDefinedFunctionCollection, id: int) -> UserDefinedFunction """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class UserDefinedFunctionEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AlterFunction(self) -> UserDefinedFunctionEvent:
        """ Get: AlterFunction() -> UserDefinedFunctionEvent """
        ...

    @property
    def DropFunction(self) -> UserDefinedFunctionEvent:
        """ Get: DropFunction() -> UserDefinedFunctionEvent """
        ...


    @staticmethod
    def Add(eventLeft:UserDefinedFunctionEvent, eventRight:UserDefinedFunctionEvent): # -> UserDefinedFunctionEventSet
        """ Add(eventLeft: UserDefinedFunctionEvent, eventRight: UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:UserDefinedFunctionEvent, eventRight:UserDefinedFunctionEvent): # -> UserDefinedFunctionEventSet
        """ BitwiseOr(eventLeft: UserDefinedFunctionEvent, eventRight: UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: UserDefinedFunctionEvent, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: UserDefinedFunctionEvent) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: UserDefinedFunctionEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: UserDefinedFunctionEvent, eventRight: UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: UserDefinedFunctionEvent, eventRight: UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: UserDefinedFunctionEvent, eventRight: UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet """
        ...



class UserDefinedFunctionEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self): # -> UserDefinedFunctionEventSet
        """ GetEventSelection(self: UserDefinedFunctionEvents) -> UserDefinedFunctionEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: UserDefinedFunctionEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: UserDefinedFunctionEvents) """
        ...

    def SubscribeToEvents(self, events, eventHandler:ServerEventHandler = ...): # ->  # Not found arg types: {'events': 'UserDefinedFunctionEventSet'}
        """ SubscribeToEvents(self: UserDefinedFunctionEvents, events: UserDefinedFunctionEventSet)SubscribeToEvents(self: UserDefinedFunctionEvents, events: UserDefinedFunctionEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: UserDefinedFunctionEvents) """
        ...

    def UnsubscribeFromEvents(self, events): # ->  # Not found arg types: {'events': 'UserDefinedFunctionEventSet'}
        """ UnsubscribeFromEvents(self: UserDefinedFunctionEvents, events: UserDefinedFunctionEventSet) """
        ...

    ServerEvent = ...


class UserDefinedFunctionEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    UserDefinedFunctionEventSet()
    UserDefinedFunctionEventSet(eventSet: UserDefinedFunctionEventSet)
    UserDefinedFunctionEventSet(anEvent: UserDefinedFunctionEvent)
    UserDefinedFunctionEventSet(*events: Array[UserDefinedFunctionEvent])
    """
    @property
    def AlterFunction(self) -> bool:
        """
        Get: AlterFunction(self: UserDefinedFunctionEventSet) -> bool
        Set: AlterFunction(self: UserDefinedFunctionEventSet) = value
        """
        ...

    @property
    def DropFunction(self) -> bool:
        """
        Get: DropFunction(self: UserDefinedFunctionEventSet) -> bool
        Set: DropFunction(self: UserDefinedFunctionEventSet) = value
        """
        ...


    def Add(self, *__args:UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet:
        """
        Add(self: UserDefinedFunctionEventSet, anEvent: UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet
        Add(eventSet: UserDefinedFunctionEventSet, anEvent: UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet
        """
        ...

    def Remove(self, anEvent:UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet:
        """ Remove(self: UserDefinedFunctionEventSet, anEvent: UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:UserDefinedFunctionEventSet, anEvent:UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet:
        """ Subtract(eventSet: UserDefinedFunctionEventSet, anEvent: UserDefinedFunctionEvent) -> UserDefinedFunctionEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: UserDefinedFunctionEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class UserDefinedFunctionParameter(Parameter): # skipped bases: <type 'ISfcSupportsDesignMode'>, <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IExtendedProperties'>, <type 'IMarkForDrop'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    UserDefinedFunctionParameter()
    UserDefinedFunctionParameter(userDefinedFunction: UserDefinedFunction, name: str)
    UserDefinedFunctionParameter(userDefinedFunction: UserDefinedFunction, name: str, dataType: DataType)
    """
    @property
    def Parent(self) -> UserDefinedFunction:
        """
        Get: Parent(self: UserDefinedFunctionParameter) -> UserDefinedFunction
        Set: Parent(self: UserDefinedFunctionParameter) = value
        """
        ...


    def __new__(cls, userDefinedFunction:UserDefinedFunction = ..., name:str = ..., dataType:DataType = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, userDefinedFunction: UserDefinedFunction, name: str)
        __new__(cls: type, userDefinedFunction: UserDefinedFunction, name: str, dataType: DataType)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class UserDefinedFunctionParameterCollection(ParameterCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> UserDefinedFunction:
        """ Get: Parent(self: UserDefinedFunctionParameterCollection) -> UserDefinedFunction """
        ...


    def Add(self, userDefinedFunctionParameter:UserDefinedFunctionParameter, *__args:str): # -> 
        """ Add(self: UserDefinedFunctionParameterCollection, userDefinedFunctionParameter: UserDefinedFunctionParameter)Add(self: UserDefinedFunctionParameterCollection, userDefinedFunctionParameter: UserDefinedFunctionParameter, insertAtColumnName: str)Add(self: UserDefinedFunctionParameterCollection, userDefinedFunctionParameter: UserDefinedFunctionParameter, insertAtPosition: int) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: UserDefinedFunctionParameterCollection, array: Array[UserDefinedFunctionParameter], index: int) """
        ...

    def ItemById(self, id:int) -> UserDefinedFunctionParameter:
        """ ItemById(self: UserDefinedFunctionParameterCollection, id: int) -> UserDefinedFunctionParameter """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+yx.__add__(y) <==> x+yx.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class UserDefinedFunctionType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum UserDefinedFunctionType, values: Inline (3), Scalar (1), Table (2), Unknown (0) """
    Inline: UserDefinedFunctionType = ...
    Scalar: UserDefinedFunctionType = ...
    Table: UserDefinedFunctionType = ...
    Unknown: UserDefinedFunctionType = ...
    value__ = ...


class UserDefinedMessage(IDroppable, IAlterable, ICreatable, IScriptable, MessageObjectBase): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    UserDefinedMessage()
    UserDefinedMessage(server: Server, id: int)
    UserDefinedMessage(server: Server, id: int, language: str)
    UserDefinedMessage(server: Server, id: int, language: str, severity: int, message: str)
    UserDefinedMessage(server: Server, id: int, language: str, severity: int, message: str, isLogged: bool)
    UserDefinedMessage(server: Server, id: int, language: int, severity: int, message: str)
    UserDefinedMessage(server: Server, id: int, language: int, severity: int, message: str, isLogged: bool)
    """
    @property
    def ID(self) -> int:
        """
        Get: ID(self: UserDefinedMessage) -> int
        Set: ID(self: UserDefinedMessage) = value
        """
        ...

    @property
    def IsLogged(self) -> bool:
        """
        Get: IsLogged(self: UserDefinedMessage) -> bool
        Set: IsLogged(self: UserDefinedMessage) = value
        """
        ...

    @property
    def Language(self) -> str:
        """
        Get: Language(self: UserDefinedMessage) -> str
        Set: Language(self: UserDefinedMessage) = value
        """
        ...

    @property
    def LanguageID(self) -> int:
        """
        Get: LanguageID(self: UserDefinedMessage) -> int
        Set: LanguageID(self: UserDefinedMessage) = value
        """
        ...

    @property
    def Parent(self) -> Server:
        """
        Get: Parent(self: UserDefinedMessage) -> Server
        Set: Parent(self: UserDefinedMessage) = value
        """
        ...

    @property
    def Severity(self) -> int:
        """
        Get: Severity(self: UserDefinedMessage) -> int
        Set: Severity(self: UserDefinedMessage) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: UserDefinedMessage) -> str
        Set: Text(self: UserDefinedMessage) = value
        """
        ...


    def __new__(cls, server:Server = ..., id:int = ..., language:str = ..., severity:int = ..., message:str = ..., isLogged:bool = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, server: Server, id: int)
        __new__(cls: type, server: Server, id: int, language: str)
        __new__(cls: type, server: Server, id: int, language: str, severity: int, message: str)
        __new__(cls: type, server: Server, id: int, language: str, severity: int, message: str, isLogged: bool)
        __new__(cls: type, server: Server, id: int, language: int, severity: int, message: str)
        __new__(cls: type, server: Server, id: int, language: int, severity: int, message: str, isLogged: bool)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class UserDefinedMessageCollection(MessageCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: UserDefinedMessageCollection) -> Server """
        ...


    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: UserDefinedMessageCollection, array: Array[UserDefinedMessage], index: int) """
        ...

    def ItemByIdAndLanguage(self, id:int, language:str) -> UserDefinedMessage:
        """ ItemByIdAndLanguage(self: UserDefinedMessageCollection, id: int, language: str) -> UserDefinedMessage """
        ...

    def ItemByIdAndLanguageId(self, id:int, languageId:int) -> UserDefinedMessage:
        """ ItemByIdAndLanguageId(self: UserDefinedMessageCollection, id: int, languageId: int) -> UserDefinedMessage """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class UserDefinedTableType(TableViewTableTypeBase, IAlterable, ICreatable, IDroppable, IRenamable, IObjectPermission, ISfcSupportsDesignMode, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IExtendedProperties'>, <type 'IScriptable'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    UserDefinedTableType()
    UserDefinedTableType(database: Database, name: str)
    UserDefinedTableType(database: Database, name: str, schema: str)
    """
    @property
    def Checks(self) -> CheckCollection:
        """ Get: Checks(self: UserDefinedTableType) -> CheckCollection """
        ...

    @property
    def Collation(self) -> str:
        """ Get: Collation(self: UserDefinedTableType) -> str """
        ...

    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: UserDefinedTableType) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: UserDefinedTableType) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: UserDefinedTableType) -> int """
        ...

    @property
    def IsMemoryOptimized(self) -> bool:
        """
        Get: IsMemoryOptimized(self: UserDefinedTableType) -> bool
        Set: IsMemoryOptimized(self: UserDefinedTableType) = value
        """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: UserDefinedTableType) -> bool """
        ...

    @property
    def IsUserDefined(self) -> bool:
        """
        Get: IsUserDefined(self: UserDefinedTableType) -> bool
        Set: IsUserDefined(self: UserDefinedTableType) = value
        """
        ...

    @property
    def MaxLength(self) -> Int16:
        """ Get: MaxLength(self: UserDefinedTableType) -> Int16 """
        ...

    @property
    def Nullable(self) -> bool:
        """
        Get: Nullable(self: UserDefinedTableType) -> bool
        Set: Nullable(self: UserDefinedTableType) = value
        """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: UserDefinedTableType) -> str
        Set: Owner(self: UserDefinedTableType) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: UserDefinedTableType) -> Database
        Set: Parent(self: UserDefinedTableType) = value
        """
        ...


    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class UserDefinedTableTypeCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: UserDefinedTableTypeCollection) -> Database """
        ...


    def Add(self, userDefinedTableType:UserDefinedTableType): # -> 
        """ Add(self: UserDefinedTableTypeCollection, userDefinedTableType: UserDefinedTableType) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: UserDefinedTableTypeCollection, array: Array[UserDefinedTableType], index: int) """
        ...

    def ItemById(self, id:int) -> UserDefinedTableType:
        """ ItemById(self: UserDefinedTableTypeCollection, id: int) -> UserDefinedTableType """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class UserDefinedTableTypeResolver: # skipped bases: <type 'object'>, <type 'object'>
    """ UserDefinedTableTypeResolver() """
    @staticmethod
    def Resolve(instance:object, parameters:Array) -> object:
        """ Resolve(instance: object, *parameters: Array[object]) -> object """
        ...

    @staticmethod
    def ResolveUrn(instance:object, parameters:Array) -> object:
        """ ResolveUrn(instance: object, *parameters: Array[object]) -> object """
        ...


class UserDefinedType(IDroppable, IAlterable, ICreatable, IScriptable, IObjectPermission, ISfcSupportsDesignMode, IDropIfExists, ScriptSchemaObjectBase, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    UserDefinedType()
    UserDefinedType(database: Database, name: str)
    UserDefinedType(database: Database, name: str, schema: str)
    """
    @property
    def AssemblyName(self) -> str:
        """
        Get: AssemblyName(self: UserDefinedType) -> str
        Set: AssemblyName(self: UserDefinedType) = value
        """
        ...

    @property
    def BinaryTypeIdentifier(self) -> Array:
        """ Get: BinaryTypeIdentifier(self: UserDefinedType) -> Array[Byte] """
        ...

    @property
    def ClassName(self) -> str:
        """
        Get: ClassName(self: UserDefinedType) -> str
        Set: ClassName(self: UserDefinedType) = value
        """
        ...

    @property
    def Collation(self) -> str:
        """ Get: Collation(self: UserDefinedType) -> str """
        ...

    @property
    def Events(self): # -> UserDefinedTypeEvents
        """ Get: Events(self: UserDefinedType) -> UserDefinedTypeEvents """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: UserDefinedType) -> int """
        ...

    @property
    def IsBinaryOrdered(self) -> bool:
        """ Get: IsBinaryOrdered(self: UserDefinedType) -> bool """
        ...

    @property
    def IsComVisible(self) -> bool:
        """ Get: IsComVisible(self: UserDefinedType) -> bool """
        ...

    @property
    def IsFixedLength(self) -> bool:
        """ Get: IsFixedLength(self: UserDefinedType) -> bool """
        ...

    @property
    def IsNullable(self) -> bool:
        """ Get: IsNullable(self: UserDefinedType) -> bool """
        ...

    @property
    def IsSchemaOwned(self) -> bool:
        """ Get: IsSchemaOwned(self: UserDefinedType) -> bool """
        ...

    @property
    def MaxLength(self) -> int:
        """ Get: MaxLength(self: UserDefinedType) -> int """
        ...

    @property
    def NumericPrecision(self) -> int:
        """ Get: NumericPrecision(self: UserDefinedType) -> int """
        ...

    @property
    def NumericScale(self) -> int:
        """ Get: NumericScale(self: UserDefinedType) -> int """
        ...

    @property
    def Owner(self) -> str:
        """
        Get: Owner(self: UserDefinedType) -> str
        Set: Owner(self: UserDefinedType) = value
        """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: UserDefinedType) -> Database
        Set: Parent(self: UserDefinedType) = value
        """
        ...

    @property
    def UserDefinedTypeFormat(self): # -> UserDefinedTypeFormat
        """ Get: UserDefinedTypeFormat(self: UserDefinedType) -> UserDefinedTypeFormat """
        ...


    def ChangeSchema(self, newSchema:str): # -> 
        """ ChangeSchema(self: UserDefinedType, newSchema: str) """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class UserDefinedTypeCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: UserDefinedTypeCollection) -> Database """
        ...


    def Add(self, userDefinedType:UserDefinedType): # -> 
        """ Add(self: UserDefinedTypeCollection, userDefinedType: UserDefinedType) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: UserDefinedTypeCollection, array: Array[UserDefinedType], index: int) """
        ...

    def ItemById(self, id:int) -> UserDefinedType:
        """ ItemById(self: UserDefinedTypeCollection, id: int) -> UserDefinedType """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class UserDefinedTypeEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self) -> ObjectEventSet:
        """ GetEventSelection(self: UserDefinedTypeEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: UserDefinedTypeEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: UserDefinedTypeEvents) """
        ...

    def SubscribeToEvents(self, events:ObjectEventSet, eventHandler:ServerEventHandler = ...): # -> 
        """ SubscribeToEvents(self: UserDefinedTypeEvents, events: ObjectEventSet)SubscribeToEvents(self: UserDefinedTypeEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: UserDefinedTypeEvents) """
        ...

    def UnsubscribeFromEvents(self, events:ObjectEventSet): # -> 
        """ UnsubscribeFromEvents(self: UserDefinedTypeEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class UserDefinedTypeFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum UserDefinedTypeFormat, values: Native (0), SerializedData (2), SerializedDataWithMetadata (3), UserDefined (1) """
    Native: UserDefinedTypeFormat = ...
    SerializedData: UserDefinedTypeFormat = ...
    SerializedDataWithMetadata: UserDefinedTypeFormat = ...
    UserDefined: UserDefinedTypeFormat = ...
    value__ = ...


class UserDefinedTypeResolver: # skipped bases: <type 'object'>, <type 'object'>
    """ UserDefinedTypeResolver() """
    @staticmethod
    def Resolve(instance:object, parameters:Array) -> object:
        """ Resolve(instance: object, *parameters: Array[object]) -> object """
        ...

    @staticmethod
    def ResolveUrn(instance:object, parameters:Array) -> object:
        """ ResolveUrn(instance: object, *parameters: Array[object]) -> object """
        ...


class UserEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self) -> ObjectEventSet:
        """ GetEventSelection(self: UserEvents) -> ObjectEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: UserEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: UserEvents) """
        ...

    def SubscribeToEvents(self, events:ObjectEventSet, eventHandler:ServerEventHandler = ...): # -> 
        """ SubscribeToEvents(self: UserEvents, events: ObjectEventSet)SubscribeToEvents(self: UserEvents, events: ObjectEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: UserEvents) """
        ...

    def UnsubscribeFromEvents(self, events:ObjectEventSet): # -> 
        """ UnsubscribeFromEvents(self: UserEvents, events: ObjectEventSet) """
        ...

    ServerEvent = ...


class UserOptions(SqlSmoObject, ISfcSupportsDesignMode, IAlterable, IScriptable): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """ no doc """
    @property
    def AbortOnArithmeticErrors(self) -> bool:
        """
        Get: AbortOnArithmeticErrors(self: UserOptions) -> bool
        Set: AbortOnArithmeticErrors(self: UserOptions) = value
        """
        ...

    @property
    def AbortTransactionOnError(self) -> bool:
        """
        Get: AbortTransactionOnError(self: UserOptions) -> bool
        Set: AbortTransactionOnError(self: UserOptions) = value
        """
        ...

    @property
    def AnsiNullDefaultOff(self) -> bool:
        """
        Get: AnsiNullDefaultOff(self: UserOptions) -> bool
        Set: AnsiNullDefaultOff(self: UserOptions) = value
        """
        ...

    @property
    def AnsiNullDefaultOn(self) -> bool:
        """
        Get: AnsiNullDefaultOn(self: UserOptions) -> bool
        Set: AnsiNullDefaultOn(self: UserOptions) = value
        """
        ...

    @property
    def AnsiNulls(self) -> bool:
        """
        Get: AnsiNulls(self: UserOptions) -> bool
        Set: AnsiNulls(self: UserOptions) = value
        """
        ...

    @property
    def AnsiPadding(self) -> bool:
        """
        Get: AnsiPadding(self: UserOptions) -> bool
        Set: AnsiPadding(self: UserOptions) = value
        """
        ...

    @property
    def AnsiWarnings(self) -> bool:
        """
        Get: AnsiWarnings(self: UserOptions) -> bool
        Set: AnsiWarnings(self: UserOptions) = value
        """
        ...

    @property
    def ConcatenateNullYieldsNull(self) -> bool:
        """
        Get: ConcatenateNullYieldsNull(self: UserOptions) -> bool
        Set: ConcatenateNullYieldsNull(self: UserOptions) = value
        """
        ...

    @property
    def CursorCloseOnCommit(self) -> bool:
        """
        Get: CursorCloseOnCommit(self: UserOptions) -> bool
        Set: CursorCloseOnCommit(self: UserOptions) = value
        """
        ...

    @property
    def DisableDefaultConstraintCheck(self) -> bool:
        """
        Get: DisableDefaultConstraintCheck(self: UserOptions) -> bool
        Set: DisableDefaultConstraintCheck(self: UserOptions) = value
        """
        ...

    @property
    def IgnoreArithmeticErrors(self) -> bool:
        """
        Get: IgnoreArithmeticErrors(self: UserOptions) -> bool
        Set: IgnoreArithmeticErrors(self: UserOptions) = value
        """
        ...

    @property
    def ImplicitTransactions(self) -> bool:
        """
        Get: ImplicitTransactions(self: UserOptions) -> bool
        Set: ImplicitTransactions(self: UserOptions) = value
        """
        ...

    @property
    def NoCount(self) -> bool:
        """
        Get: NoCount(self: UserOptions) -> bool
        Set: NoCount(self: UserOptions) = value
        """
        ...

    @property
    def NumericRoundAbort(self) -> bool:
        """
        Get: NumericRoundAbort(self: UserOptions) -> bool
        Set: NumericRoundAbort(self: UserOptions) = value
        """
        ...

    @property
    def Parent(self) -> Server:
        """ Get: Parent(self: UserOptions) -> Server """
        ...

    @property
    def QuotedIdentifier(self) -> bool:
        """
        Get: QuotedIdentifier(self: UserOptions) -> bool
        Set: QuotedIdentifier(self: UserOptions) = value
        """
        ...


    m_ExtendedProperties = ...
    singletonParent = ...


class UserType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum UserType, values: AsymmetricKey (2), Certificate (1), External (4), NoLogin (3), SqlLogin (0), SqlUser (0) """
    AsymmetricKey: UserType = ...
    Certificate: UserType = ...
    External: UserType = ...
    NoLogin: UserType = ...
    SqlLogin: UserType = ...
    SqlUser: UserType = ...
    value__ = ...


class VerifyCompleteEventArgs(EventArgs): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def VerifySuccess(self) -> bool:
        """ Get: VerifySuccess(self: VerifyCompleteEventArgs) -> bool """
        ...



class VerifyCompleteEventHandler(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ VerifyCompleteEventHandler(object: object, method: IntPtr) """
    def BeginInvoke(self, sender:object, args:VerifyCompleteEventArgs, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: VerifyCompleteEventHandler, sender: object, args: VerifyCompleteEventArgs, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: VerifyCompleteEventHandler, result: IAsyncResult) """
        ...

    def Invoke(self, sender:object, args:VerifyCompleteEventArgs): # -> 
        """ Invoke(self: VerifyCompleteEventHandler, sender: object, args: VerifyCompleteEventArgs) """
        ...


class VersionSerializationAdapter(IXmlSerializationAdapter): # skipped bases: <type 'object'>
    """ VersionSerializationAdapter() """
    pass

class VersionUtils: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def IsSql13Azure12OrLater(currentDatabaseEngineType:DatabaseEngineType, currentServerVersion:ServerVersion) -> bool:
        """ IsSql13Azure12OrLater(currentDatabaseEngineType: DatabaseEngineType, currentServerVersion: ServerVersion) -> bool """
        ...

    __all__: list = ...


class View(IDroppable, IAlterable, ICreatable, IColumnPermission, ICreateOrAlterable, IRenamable, ISfcSupportsDesignMode, ITextObject, IViewOptions, IDropIfExists, TableViewBase): # skipped bases: <type 'IDmfFacet'>, <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'IObjectPermission'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'IExtendedProperties'>, <type 'IScriptable'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    View()
    View(database: Database, name: str)
    View(database: Database, name: str, schema: str)
    """
    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: View) -> DateTime """
        ...

    @property
    def Events(self): # -> ViewEvents
        """ Get: Events(self: View) -> ViewEvents """
        ...

    @property
    def HasAfterTrigger(self) -> bool:
        """ Get: HasAfterTrigger(self: View) -> bool """
        ...

    @property
    def HasColumnSpecification(self) -> bool:
        """ Get: HasColumnSpecification(self: View) -> bool """
        ...

    @property
    def HasDeleteTrigger(self) -> bool:
        """ Get: HasDeleteTrigger(self: View) -> bool """
        ...

    @property
    def HasIndex(self) -> bool:
        """ Get: HasIndex(self: View) -> bool """
        ...

    @property
    def HasInsertTrigger(self) -> bool:
        """ Get: HasInsertTrigger(self: View) -> bool """
        ...

    @property
    def HasInsteadOfTrigger(self) -> bool:
        """ Get: HasInsteadOfTrigger(self: View) -> bool """
        ...

    @property
    def HasUpdateTrigger(self) -> bool:
        """ Get: HasUpdateTrigger(self: View) -> bool """
        ...

    @property
    def Indexes(self) -> IndexCollection:
        """ Get: Indexes(self: View) -> IndexCollection """
        ...

    @property
    def IsIndexable(self) -> bool:
        """ Get: IsIndexable(self: View) -> bool """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: View) -> Database
        Set: Parent(self: View) = value
        """
        ...


    def ChangeSchema(self, newSchema:str): # -> 
        """ ChangeSchema(self: View, newSchema: str) """
        ...

    def EnumColumns(self) -> DataTable:
        """ EnumColumns(self: View) -> DataTable """
        ...

    def EnumObjectPermissions(self, *__args:str) -> Array:
        """
        EnumObjectPermissions(self: View) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: View, granteeName: str) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: View, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        EnumObjectPermissions(self: View, granteeName: str, permissions: ObjectPermissionSet) -> Array[ObjectPermissionInfo]
        """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class ViewCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: ViewCollection) -> Database """
        ...


    def Add(self, view:View): # -> 
        """ Add(self: ViewCollection, view: View) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: ViewCollection, array: Array[View], index: int) """
        ...

    def ItemById(self, id:int) -> View:
        """ ItemById(self: ViewCollection, id: int) -> View """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class ViewEvent: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def AlterFulltextIndex(self) -> ViewEvent:
        """ Get: AlterFulltextIndex() -> ViewEvent """
        ...

    @property
    def AlterIndex(self) -> ViewEvent:
        """ Get: AlterIndex() -> ViewEvent """
        ...

    @property
    def AlterView(self) -> ViewEvent:
        """ Get: AlterView() -> ViewEvent """
        ...

    @property
    def CreateFulltextIndex(self) -> ViewEvent:
        """ Get: CreateFulltextIndex() -> ViewEvent """
        ...

    @property
    def CreateIndex(self) -> ViewEvent:
        """ Get: CreateIndex() -> ViewEvent """
        ...

    @property
    def CreateSpatialIndex(self) -> ViewEvent:
        """ Get: CreateSpatialIndex() -> ViewEvent """
        ...

    @property
    def CreateStatistics(self) -> ViewEvent:
        """ Get: CreateStatistics() -> ViewEvent """
        ...

    @property
    def CreateXmlIndex(self) -> ViewEvent:
        """ Get: CreateXmlIndex() -> ViewEvent """
        ...

    @property
    def DropFulltextIndex(self) -> ViewEvent:
        """ Get: DropFulltextIndex() -> ViewEvent """
        ...

    @property
    def DropIndex(self) -> ViewEvent:
        """ Get: DropIndex() -> ViewEvent """
        ...

    @property
    def DropStatistics(self) -> ViewEvent:
        """ Get: DropStatistics() -> ViewEvent """
        ...

    @property
    def DropView(self) -> ViewEvent:
        """ Get: DropView() -> ViewEvent """
        ...

    @property
    def UpdateStatistics(self) -> ViewEvent:
        """ Get: UpdateStatistics() -> ViewEvent """
        ...


    @staticmethod
    def Add(eventLeft:ViewEvent, eventRight:ViewEvent): # -> ViewEventSet
        """ Add(eventLeft: ViewEvent, eventRight: ViewEvent) -> ViewEventSet """
        ...

    @staticmethod
    def BitwiseOr(eventLeft:ViewEvent, eventRight:ViewEvent): # -> ViewEventSet
        """ BitwiseOr(eventLeft: ViewEvent, eventRight: ViewEvent) -> ViewEventSet """
        ...

    def Equals(self, obj:object) -> bool:
        """ Equals(self: ViewEvent, obj: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: ViewEvent) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: ViewEvent) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...

    def __or__(self, *args): #cannot find CLR method
        """ __or__(eventLeft: ViewEvent, eventRight: ViewEvent) -> ViewEventSet """
        ...

    def __radd__(self, *args): #cannot find CLR method
        """ __radd__(eventLeft: ViewEvent, eventRight: ViewEvent) -> ViewEventSet """
        ...

    def __ror__(self, *args): #cannot find CLR method
        """ __ror__(eventLeft: ViewEvent, eventRight: ViewEvent) -> ViewEventSet """
        ...



class ViewEvents: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def GetEventSelection(self): # -> ViewEventSet
        """ GetEventSelection(self: ViewEvents) -> ViewEventSet """
        ...

    def StartEvents(self): # -> 
        """ StartEvents(self: ViewEvents) """
        ...

    def StopEvents(self): # -> 
        """ StopEvents(self: ViewEvents) """
        ...

    def SubscribeToEvents(self, events, eventHandler:ServerEventHandler = ...): # ->  # Not found arg types: {'events': 'ViewEventSet'}
        """ SubscribeToEvents(self: ViewEvents, events: ViewEventSet)SubscribeToEvents(self: ViewEvents, events: ViewEventSet, eventHandler: ServerEventHandler) """
        ...

    def UnsubscribeAllEvents(self): # -> 
        """ UnsubscribeAllEvents(self: ViewEvents) """
        ...

    def UnsubscribeFromEvents(self, events): # ->  # Not found arg types: {'events': 'ViewEventSet'}
        """ UnsubscribeFromEvents(self: ViewEvents, events: ViewEventSet) """
        ...

    ServerEvent = ...


class ViewEventSet(EventSetBase): # skipped bases: <type 'object'>
    """
    ViewEventSet()
    ViewEventSet(eventSet: ViewEventSet)
    ViewEventSet(anEvent: ViewEvent)
    ViewEventSet(*events: Array[ViewEvent])
    """
    @property
    def AlterFulltextIndex(self) -> bool:
        """
        Get: AlterFulltextIndex(self: ViewEventSet) -> bool
        Set: AlterFulltextIndex(self: ViewEventSet) = value
        """
        ...

    @property
    def AlterIndex(self) -> bool:
        """
        Get: AlterIndex(self: ViewEventSet) -> bool
        Set: AlterIndex(self: ViewEventSet) = value
        """
        ...

    @property
    def AlterView(self) -> bool:
        """
        Get: AlterView(self: ViewEventSet) -> bool
        Set: AlterView(self: ViewEventSet) = value
        """
        ...

    @property
    def CreateFulltextIndex(self) -> bool:
        """
        Get: CreateFulltextIndex(self: ViewEventSet) -> bool
        Set: CreateFulltextIndex(self: ViewEventSet) = value
        """
        ...

    @property
    def CreateIndex(self) -> bool:
        """
        Get: CreateIndex(self: ViewEventSet) -> bool
        Set: CreateIndex(self: ViewEventSet) = value
        """
        ...

    @property
    def CreateSpatialIndex(self) -> bool:
        """
        Get: CreateSpatialIndex(self: ViewEventSet) -> bool
        Set: CreateSpatialIndex(self: ViewEventSet) = value
        """
        ...

    @property
    def CreateStatistics(self) -> bool:
        """
        Get: CreateStatistics(self: ViewEventSet) -> bool
        Set: CreateStatistics(self: ViewEventSet) = value
        """
        ...

    @property
    def CreateXmlIndex(self) -> bool:
        """
        Get: CreateXmlIndex(self: ViewEventSet) -> bool
        Set: CreateXmlIndex(self: ViewEventSet) = value
        """
        ...

    @property
    def DropFulltextIndex(self) -> bool:
        """
        Get: DropFulltextIndex(self: ViewEventSet) -> bool
        Set: DropFulltextIndex(self: ViewEventSet) = value
        """
        ...

    @property
    def DropIndex(self) -> bool:
        """
        Get: DropIndex(self: ViewEventSet) -> bool
        Set: DropIndex(self: ViewEventSet) = value
        """
        ...

    @property
    def DropStatistics(self) -> bool:
        """
        Get: DropStatistics(self: ViewEventSet) -> bool
        Set: DropStatistics(self: ViewEventSet) = value
        """
        ...

    @property
    def DropView(self) -> bool:
        """
        Get: DropView(self: ViewEventSet) -> bool
        Set: DropView(self: ViewEventSet) = value
        """
        ...

    @property
    def UpdateStatistics(self) -> bool:
        """
        Get: UpdateStatistics(self: ViewEventSet) -> bool
        Set: UpdateStatistics(self: ViewEventSet) = value
        """
        ...


    def Add(self, *__args:ViewEvent) -> ViewEventSet:
        """
        Add(self: ViewEventSet, anEvent: ViewEvent) -> ViewEventSet
        Add(eventSet: ViewEventSet, anEvent: ViewEvent) -> ViewEventSet
        """
        ...

    def Remove(self, anEvent:ViewEvent) -> ViewEventSet:
        """ Remove(self: ViewEventSet, anEvent: ViewEvent) -> ViewEventSet """
        ...

    @staticmethod
    def Subtract(eventSet:ViewEventSet, anEvent:ViewEvent) -> ViewEventSet:
        """ Subtract(eventSet: ViewEventSet, anEvent: ViewEvent) -> ViewEventSet """
        ...

    def ToString(self) -> str:
        """ ToString(self: ViewEventSet) -> str """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __sub__(self, *args): #cannot find CLR method
        """ x.__sub__(y) <==> x-y """
        ...


class WindowsLoginAccessType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WindowsLoginAccessType, values: Deny (2), Grant (1), NonNTLogin (99), Undefined (0) """
    Deny: WindowsLoginAccessType = ...
    Grant: WindowsLoginAccessType = ...
    NonNTLogin: WindowsLoginAccessType = ...
    Undefined: WindowsLoginAccessType = ...
    value__ = ...


class WorkloadGroup(IDroppable, IAlterable, ICreatable, IScriptable, ScriptNameObjectBase, ISfcSupportsDesignMode, IDropIfExists): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    WorkloadGroup()
    WorkloadGroup(resourcePool: ResourcePool, name: str)
    """
    @property
    def ExternalResourcePoolName(self) -> str:
        """
        Get: ExternalResourcePoolName(self: WorkloadGroup) -> str
        Set: ExternalResourcePoolName(self: WorkloadGroup) = value
        """
        ...

    @property
    def GroupMaximumRequests(self) -> int:
        """
        Get: GroupMaximumRequests(self: WorkloadGroup) -> int
        Set: GroupMaximumRequests(self: WorkloadGroup) = value
        """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: WorkloadGroup) -> int """
        ...

    @property
    def Importance(self): # -> WorkloadGroupImportance
        """
        Get: Importance(self: WorkloadGroup) -> WorkloadGroupImportance
        Set: Importance(self: WorkloadGroup) = value
        """
        ...

    @property
    def IsSystemObject(self) -> bool:
        """ Get: IsSystemObject(self: WorkloadGroup) -> bool """
        ...

    @property
    def MaximumDegreeOfParallelism(self) -> int:
        """
        Get: MaximumDegreeOfParallelism(self: WorkloadGroup) -> int
        Set: MaximumDegreeOfParallelism(self: WorkloadGroup) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Get: Name(self: WorkloadGroup) -> str
        Set: Name(self: WorkloadGroup) = value
        """
        ...

    @property
    def Parent(self) -> ResourcePool:
        """
        Get: Parent(self: WorkloadGroup) -> ResourcePool
        Set: Parent(self: WorkloadGroup) = value
        """
        ...

    @property
    def RequestMaximumCpuTimeInSeconds(self) -> int:
        """
        Get: RequestMaximumCpuTimeInSeconds(self: WorkloadGroup) -> int
        Set: RequestMaximumCpuTimeInSeconds(self: WorkloadGroup) = value
        """
        ...

    @property
    def RequestMaximumMemoryGrantPercentage(self) -> int:
        """
        Get: RequestMaximumMemoryGrantPercentage(self: WorkloadGroup) -> int
        Set: RequestMaximumMemoryGrantPercentage(self: WorkloadGroup) = value
        """
        ...

    @property
    def RequestMemoryGrantTimeoutInSeconds(self) -> int:
        """
        Get: RequestMemoryGrantTimeoutInSeconds(self: WorkloadGroup) -> int
        Set: RequestMemoryGrantTimeoutInSeconds(self: WorkloadGroup) = value
        """
        ...


    def MoveToPool(self, poolName:str): # -> 
        """ MoveToPool(self: WorkloadGroup, poolName: str) """
        ...

    def ScriptMoveToPool(self, poolName:str) -> StringCollection:
        """ ScriptMoveToPool(self: WorkloadGroup, poolName: str) -> StringCollection """
        ...

    def __new__(cls, resourcePool:ResourcePool = ..., name:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, resourcePool: ResourcePool, name: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class WorkloadGroupCollection(SimpleObjectCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> ResourcePool:
        """ Get: Parent(self: WorkloadGroupCollection) -> ResourcePool """
        ...


    def Add(self, workloadGroup:WorkloadGroup): # -> 
        """ Add(self: WorkloadGroupCollection, workloadGroup: WorkloadGroup) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: WorkloadGroupCollection, array: Array[WorkloadGroup], index: int) """
        ...

    def ItemById(self, id:int) -> WorkloadGroup:
        """ ItemById(self: WorkloadGroupCollection, id: int) -> WorkloadGroup """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class WorkloadGroupImportance(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WorkloadGroupImportance, values: High (2), Low (0), Medium (1) """
    High: WorkloadGroupImportance = ...
    Low: WorkloadGroupImportance = ...
    Medium: WorkloadGroupImportance = ...
    value__ = ...


class WrongPropertyValueException(SmoException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    WrongPropertyValueException()
    WrongPropertyValueException(message: str)
    WrongPropertyValueException(message: str, innerException: Exception)
    WrongPropertyValueException(propertyObject: Property)
    """
    @property
    def Message(self) -> str:
        """ Get: Message(self: WrongPropertyValueException) -> str """
        ...

    @property
    def Property(self) -> Property:
        """ Get: Property(self: WrongPropertyValueException) -> Property """
        ...


    def GetObjectData(self, info:SerializationInfo, context:StreamingContext): # -> 
        """ GetObjectData(self: WrongPropertyValueException, info: SerializationInfo, context: StreamingContext) """
        ...

    SerializeObjectState = ...


class WsdlGeneratorOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WsdlGeneratorOption, values: DefaultProcedure (1), None (0), Procedure (2) """
    DefaultProcedure: WsdlGeneratorOption = ...
    Procedure: WsdlGeneratorOption = ...
    value__ = ...


class XmlDocumentConstraint(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XmlDocumentConstraint, values: Content (1), Default (0), Document (2) """
    Content: XmlDocumentConstraint = ...
    Default: XmlDocumentConstraint = ...
    Document: XmlDocumentConstraint = ...
    value__ = ...


class XmlFormatOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XmlFormatOption, values: SqlFormat (2), XmlFormat (1) """
    SqlFormat: XmlFormatOption = ...
    value__ = ...
    XmlFormat: XmlFormatOption = ...


class XmlSchemaCollection(IDroppable, IAlterable, ICreatable, IScriptable, IObjectPermission, ISfcSupportsDesignMode, IDropIfExists, ScriptSchemaObjectBase, IExtendedProperties): # skipped bases: <type 'IAlienObject'>, <type 'ISfcNotifyPropertyMetadataChanged'>, <type 'ISfcValidate'>, <type 'INotifyPropertyChanged'>, <type 'ISfcPropertyProvider'>, <type 'IRefreshable'>, <type 'ISqlSmoObjectInitialize'>, <type 'object'>
    """
    XmlSchemaCollection()
    XmlSchemaCollection(database: Database, name: str)
    XmlSchemaCollection(database: Database, name: str, schema: str)
    XmlSchemaCollection(database: Database, name: str, schema: str, xmlSchemaDocument: str)
    """
    @property
    def CreateDate(self) -> DateTime:
        """ Get: CreateDate(self: XmlSchemaCollection) -> DateTime """
        ...

    @property
    def DateLastModified(self) -> DateTime:
        """ Get: DateLastModified(self: XmlSchemaCollection) -> DateTime """
        ...

    @property
    def ID(self) -> int:
        """ Get: ID(self: XmlSchemaCollection) -> int """
        ...

    @property
    def Parent(self) -> Database:
        """
        Get: Parent(self: XmlSchemaCollection) -> Database
        Set: Parent(self: XmlSchemaCollection) = value
        """
        ...

    @property
    def Text(self) -> str:
        """
        Get: Text(self: XmlSchemaCollection) -> str
        Set: Text(self: XmlSchemaCollection) = value
        """
        ...


    def AddSchemaDocument(self, xmlSchemaDocument:str): # -> 
        """ AddSchemaDocument(self: XmlSchemaCollection, xmlSchemaDocument: str) """
        ...

    def EnumNamespaces(self) -> DataTable:
        """ EnumNamespaces(self: XmlSchemaCollection) -> DataTable """
        ...

    def EnumTypes(self, xmlNamespace:str = ...) -> DataTable:
        """
        EnumTypes(self: XmlSchemaCollection) -> DataTable
        EnumTypes(self: XmlSchemaCollection, xmlNamespace: str) -> DataTable
        """
        ...

    def __new__(cls, database:Database = ..., name:str = ..., schema:str = ..., xmlSchemaDocument:str = ...) -> Self:
        """
        __new__(cls: type)
        __new__(cls: type, database: Database, name: str)
        __new__(cls: type, database: Database, name: str, schema: str)
        __new__(cls: type, database: Database, name: str, schema: str, xmlSchemaDocument: str)
        """
        ...

    m_ExtendedProperties = ...
    singletonParent = ...


class XmlSchemaCollectionCollection(SchemaCollectionBase): # skipped bases: <type 'IEnumerable'>, <type 'ICollection'>, <type 'object'>
    """ no doc """
    @property
    def Parent(self) -> Database:
        """ Get: Parent(self: XmlSchemaCollectionCollection) -> Database """
        ...


    def Add(self, xmlSchemaCollection:XmlSchemaCollection): # -> 
        """ Add(self: XmlSchemaCollectionCollection, xmlSchemaCollection: XmlSchemaCollection) """
        ...

    def CopyTo(self, array:Array, index:int): # -> 
        """ CopyTo(self: XmlSchemaCollectionCollection, array: Array[XmlSchemaCollection], index: int) """
        ...

    def ItemById(self, id:int) -> XmlSchemaCollection:
        """ ItemById(self: XmlSchemaCollectionCollection, id: int) -> XmlSchemaCollection """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y]x.__getitem__(y) <==> x[y] """
        ...

    initialized = ...


class XmlTypeDerivation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XmlTypeDerivation, values: Extension (2), None (1), Restriction (3), Substitution (4) """
    Extension: XmlTypeDerivation = ...
    Restriction: XmlTypeDerivation = ...
    Substitution: XmlTypeDerivation = ...
    value__ = ...


class XmlTypeKind(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XmlTypeKind, values: Any (1), AnySimple (2), Attribute (12), AttributeGroup (13), AttributeWildcard (14), Complex (8), ComplexSimple (7), Element (9), ElementWildcard (11), List (5), ModelGroup (10), Primitive (3), Simple (4), Union (6) """
    Any: XmlTypeKind = ...
    AnySimple: XmlTypeKind = ...
    Attribute: XmlTypeKind = ...
    AttributeGroup: XmlTypeKind = ...
    AttributeWildcard: XmlTypeKind = ...
    Complex: XmlTypeKind = ...
    ComplexSimple: XmlTypeKind = ...
    Element: XmlTypeKind = ...
    ElementWildcard: XmlTypeKind = ...
    List: XmlTypeKind = ...
    ModelGroup: XmlTypeKind = ...
    Primitive: XmlTypeKind = ...
    Simple: XmlTypeKind = ...
    Union: XmlTypeKind = ...
    value__ = ...


class XsdSchemaOption(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum XsdSchemaOption, values: None (0), Standard (1) """
    Standard: XsdSchemaOption = ...
    value__ = ...


# variables with complex values

