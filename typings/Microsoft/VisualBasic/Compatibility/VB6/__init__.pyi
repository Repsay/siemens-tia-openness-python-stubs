# encoding: utf-8
# module Microsoft.VisualBasic.Compatibility.VB6 calls itself VB6
# from Microsoft.VisualBasic.Compatibility, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, Microsoft.VisualBasic.Compatibility.Data, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
# by generator 1.145
""" no doc """
from __future__ import annotations
from Microsoft.Office.Interop.Access import TabControl

from Microsoft.Office.Interop.Access.Dao import LockTypeEnum, Recordset

from Microsoft.Office.Interop.Excel import (Button, GroupBox, ListBox, 
    MenuItem, TextBox)

from Microsoft.Office.Interop.Word import CheckBox

from Microsoft.Vbe.Interop.Forms import ComboBox

from Microsoft.VisualBasic import Collection

from msdatasrc import DataSource

from StdFormat import FirstDayOfWeek, FirstWeekOfYear, IDataFormatDisp

from System import (Array, Byte, Enum, Guid, IDisposable, Int16, IntPtr, 
    Single)

from System.Collections import IEnumerable, IEnumerator

from System.ComponentModel import (Component, IExtenderProvider, 
    ISupportInitialize)

from System.Drawing import Color, Font, Icon, Image

from System.EnterpriseServices import DescriptionAttribute

from System.Globalization import CultureInfo

from System.Messaging import Cursor

from System.Reflection.Emit import Label

from System.Runtime.InteropServices import VarEnum

from System.Runtime.InteropServices.ComTypes import (IConnectionPoint, 
    IConnectionPointContainer, IEnumConnectionPoints, IEnumConnections)

from System.Timers import Timer

from System.Web import HttpRequest, HttpResponse

from System.Web.UI import Control, UserControl

from System.Web.UI.MobileControls import Form, Panel

from System.Web.UI.WebControls import ListView

from typing import Tuple as Tuple_

"""The following names are not found in the module: (BOFActionEnum, 
    BoundEvent, CheckedListBox, ColorDialog, CommandTypeEnum, ConnectModeEnum, 
    ContainerControl, CursorLocationEnum, CursorTypeEnum, EOFActionEnum, 
    FontDialog, HScrollBar, IRowset, ImageList, MaskedTextBox, OpenFileDialog, 
    OrientationEnum, PictureBox, PrintDialog, ProgressBar, RadioButton, 
    RichTextBox, SaveFileDialog, StatusBar, StatusStrip, ToolBar, ToolStrip, 
    ToolStripMenuItem, TreeView, UpdateMode, VScrollBar, WebBrowser, field#)
"""

# no functions
# classes

class ADODC(DataSource, UserControl): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IViewObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'IContainerControl'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IPersistStorage'>, <type 'IOleObject'>, <type 'object'>
    """ ADODC() """
    @property
    def BackColor(self) -> Color:
        """
        Get: BackColor(self: ADODC) -> Color
        Set: BackColor(self: ADODC) = value
        """
        ...

    @property
    def BOF(self) -> bool:
        """ Get: BOF(self: ADODC) -> bool """
        ...

    @property
    def BOFAction(self): # -> BOFActionEnum
        """
        Get: BOFAction(self: ADODC) -> BOFActionEnum
        Set: BOFAction(self: ADODC) = value
        """
        ...

    @property
    def CacheSize(self) -> int:
        """
        Get: CacheSize(self: ADODC) -> int
        Set: CacheSize(self: ADODC) = value
        """
        ...

    @property
    def CommandTimeout(self) -> int:
        """
        Get: CommandTimeout(self: ADODC) -> int
        Set: CommandTimeout(self: ADODC) = value
        """
        ...

    @property
    def CommandType(self): # -> CommandTypeEnum
        """
        Get: CommandType(self: ADODC) -> CommandTypeEnum
        Set: CommandType(self: ADODC) = value
        """
        ...

    @property
    def ConnectionString(self) -> str:
        """
        Get: ConnectionString(self: ADODC) -> str
        Set: ConnectionString(self: ADODC) = value
        """
        ...

    @property
    def ConnectionTimeout(self) -> int:
        """
        Get: ConnectionTimeout(self: ADODC) -> int
        Set: ConnectionTimeout(self: ADODC) = value
        """
        ...

    @property
    def CursorLocation(self): # -> CursorLocationEnum
        """
        Get: CursorLocation(self: ADODC) -> CursorLocationEnum
        Set: CursorLocation(self: ADODC) = value
        """
        ...

    @property
    def CursorType(self): # -> CursorTypeEnum
        """
        Get: CursorType(self: ADODC) -> CursorTypeEnum
        Set: CursorType(self: ADODC) = value
        """
        ...

    @property
    def EOF(self) -> bool:
        """ Get: EOF(self: ADODC) -> bool """
        ...

    @property
    def EOFAction(self): # -> EOFActionEnum
        """
        Get: EOFAction(self: ADODC) -> EOFActionEnum
        Set: EOFAction(self: ADODC) = value
        """
        ...

    @property
    def LockType(self) -> LockTypeEnum:
        """
        Get: LockType(self: ADODC) -> LockTypeEnum
        Set: LockType(self: ADODC) = value
        """
        ...

    @property
    def MaxRecords(self) -> int:
        """
        Get: MaxRecords(self: ADODC) -> int
        Set: MaxRecords(self: ADODC) = value
        """
        ...

    @property
    def Mode(self): # -> ConnectModeEnum
        """
        Get: Mode(self: ADODC) -> ConnectModeEnum
        Set: Mode(self: ADODC) = value
        """
        ...

    @property
    def Orientation(self): # -> OrientationEnum
        """
        Get: Orientation(self: ADODC) -> OrientationEnum
        Set: Orientation(self: ADODC) = value
        """
        ...

    @property
    def Password(self): # -> 
        """ Set: Password(self: ADODC) = value """
        ...

    @property
    def Recordset(self) -> Recordset:
        """
        Get: Recordset(self: ADODC) -> Recordset
        Set: Recordset(self: ADODC) = value
        """
        ...

    @property
    def RecordSource(self) -> str:
        """
        Get: RecordSource(self: ADODC) -> str
        Set: RecordSource(self: ADODC) = value
        """
        ...

    @property
    def UserName(self) -> str:
        """
        Get: UserName(self: ADODC) -> str
        Set: UserName(self: ADODC) = value
        """
        ...


    def BOFActionEnum(self, *args): #cannot find CLR method
        """ enum BOFActionEnum, values: adDoMoveFirst (0), adStayBOF (1) """
        ...

    def EndOfRecordsetDelegate(self, *args): #cannot find CLR method
        """ EndOfRecordsetDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    def EOFActionEnum(self, *args): #cannot find CLR method
        """ enum EOFActionEnum, values: adDoAddNew (2), adDoMoveLast (0), adStayEOF (1) """
        ...

    def ErrorDelegate(self, *args): #cannot find CLR method
        """ ErrorDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    def FetchCompleteDelegate(self, *args): #cannot find CLR method
        """ FetchCompleteDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    def FetchProgressDelegate(self, *args): #cannot find CLR method
        """ FetchProgressDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    def FieldChangeCompleteDelegate(self, *args): #cannot find CLR method
        """ FieldChangeCompleteDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    def MoveCompleteDelegate(self, *args): #cannot find CLR method
        """ MoveCompleteDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    def OrientationEnum(self, *args): #cannot find CLR method
        """ enum OrientationEnum, values: adHorizontal (0), adVertical (1) """
        ...

    def RecordChangeCompleteDelegate(self, *args): #cannot find CLR method
        """ RecordChangeCompleteDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    def RecordsetChangeCompleteDelegate(self, *args): #cannot find CLR method
        """ RecordsetChangeCompleteDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    def Refresh(self): # -> 
        """ Refresh(self: ADODC) """
        ...

    def WillChangeFieldDelegate(self, *args): #cannot find CLR method
        """ WillChangeFieldDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    def WillChangeRecordDelegate(self, *args): #cannot find CLR method
        """ WillChangeRecordDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    def WillChangeRecordsetDelegate(self, *args): #cannot find CLR method
        """ WillChangeRecordsetDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    def WillMoveDelegate(self, *args): #cannot find CLR method
        """ WillMoveDelegate(TargetObject: object, TargetMethod: IntPtr) """
        ...

    EndOfRecordset = ...
    Error = ...
    FetchComplete = ...
    FetchProgress = ...
    FieldChangeComplete = ...
    MoveComplete = ...
    RecordChangeComplete = ...
    RecordsetChangeComplete = ...
    WillChangeField = ...
    WillChangeRecord = ...
    WillChangeRecordset = ...
    WillMove = ...


class BaseControlArray(ISupportInitialize, Component): # skipped bases: <type 'IDisposable'>, <type 'IComponent'>, <type 'object'>
    """ no doc """
    def BaseCanExtend(self, *args): #cannot find CLR method
        """ BaseCanExtend(self: BaseControlArray, target: object) -> bool """
        ...

    def BaseGetIndex(self, *args): #cannot find CLR method
        """ BaseGetIndex(self: BaseControlArray, ctl: object) -> Int16 """
        ...

    def BaseGetItem(self, *args): #cannot find CLR method
        """ BaseGetItem(self: BaseControlArray, Index: Int16) -> object """
        ...

    def BaseResetIndex(self, *args): #cannot find CLR method
        """ BaseResetIndex(self: BaseControlArray, o: object) """
        ...

    def BaseSetIndex(self, *args): #cannot find CLR method
        """ BaseSetIndex(self: BaseControlArray, ctl: object, Index: Int16, fIsDynamic: bool) """
        ...

    def BaseShouldSerializeIndex(self, *args): #cannot find CLR method
        """ BaseShouldSerializeIndex(self: BaseControlArray, o: object) -> bool """
        ...

    def Count(self) -> Int16:
        """ Count(self: BaseControlArray) -> Int16 """
        ...

    def GetControlInstanceType(self, *args): #cannot find CLR method
        """ GetControlInstanceType(self: BaseControlArray) -> Type """
        ...

    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: BaseControlArray) -> IEnumerator """
        ...

    def HookUpControlEvents(self, *args): #cannot find CLR method
        """ HookUpControlEvents(self: BaseControlArray, o: object) """
        ...

    def LBound(self) -> Int16:
        """ LBound(self: BaseControlArray) -> Int16 """
        ...

    def Load(self, Index:Int16): # -> 
        """ Load(self: BaseControlArray, Index: Int16) """
        ...

    def UBound(self) -> Int16:
        """ UBound(self: BaseControlArray) -> Int16 """
        ...

    def Unload(self, Index:Int16): # -> 
        """ Unload(self: BaseControlArray, Index: Int16) """
        ...

    def __new__(cls, *args): #cannot find CLR constructor
        """
        __new__(cls: type)
        __new__(cls: type, Container: IContainer)
        """
        ...

    components = ...
    controlAddedAtDesignTime = ...
    controls = ...
    fIsEndInitCalled = ...
    indices = ...


class ADODCArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    ADODCArray()
    ADODCArray(Container: IContainer)
    """
    def GetIndex(self, o:ADODC) -> Int16:
        """ GetIndex(self: ADODCArray, o: ADODC) -> Int16 """
        ...

    def ResetIndex(self, o:ADODC): # -> 
        """ ResetIndex(self: ADODCArray, o: ADODC) """
        ...

    def SetIndex(self, o:ADODC, Index:Int16): # -> 
        """ SetIndex(self: ADODCArray, o: ADODC, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:ADODC) -> bool:
        """ ShouldSerializeIndex(self: ADODCArray, o: ADODC) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BackColorChanged = ...
    BackgroundImageChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    components = ...
    ContextMenuChanged = ...
    controlAddedAtDesignTime = ...
    controls = ...
    CtlLoad = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    EndOfRecordset = ...
    Enter = ...
    Error = ...
    FetchComplete = ...
    FetchProgress = ...
    FieldChangeComplete = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    MoveComplete = ...
    Paint = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RecordChangeComplete = ...
    RecordsetChangeComplete = ...
    Resize = ...
    RightToLeftChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...
    WillChangeField = ...
    WillChangeRecord = ...
    WillChangeRecordset = ...
    WillMove = ...


class BaseDataEnvironment(DataSource, IDisposable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Commands(self) -> Collection:
        """ Get: Commands(self: BaseDataEnvironment) -> Collection """
        ...

    @property
    def Connections(self) -> Collection:
        """ Get: Connections(self: BaseDataEnvironment) -> Collection """
        ...

    @property
    def Object(self) -> object:
        """ Get: Object(self: BaseDataEnvironment) -> object """
        ...

    @property
    def Recordsets(self) -> Collection:
        """ Get: Recordsets(self: BaseDataEnvironment) -> Collection """
        ...


    def GetDataMemberCount(self) -> int:
        """ GetDataMemberCount(self: BaseDataEnvironment) -> int """
        ...

    def GetDataMemberName(self, Index:int) -> str:
        """ GetDataMemberName(self: BaseDataEnvironment, Index: int) -> str """
        ...

    m_Commands = ...
    m_Connections = ...
    m_NonRSReturningCommands = ...
    m_Recordsets = ...


class BaseOcxArray(BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """ no doc """
    CausesValidationChanged = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    DockChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    indices = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    Move = ...
    PaddingChanged = ...
    ParentChanged = ...
    RegionChanged = ...
    Resize = ...
    SizeChanged = ...
    SystemColorsChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class BindingCollectionEnumerator(IEnumerator): # skipped bases: <type 'object'>
    """ no doc """
    pass

class ButtonArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    ButtonArray()
    ButtonArray(Container: IContainer)
    """
    def GetIndex(self, o:Button) -> Int16:
        """ GetIndex(self: ButtonArray, o: Button) -> Int16 """
        ...

    def ResetIndex(self, o:Button): # -> 
        """ ResetIndex(self: ButtonArray, o: Button) """
        ...

    def SetIndex(self, o:Button, Index:Int16): # -> 
        """ SetIndex(self: ButtonArray, o: Button, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:Button) -> bool:
        """ ShouldSerializeIndex(self: ButtonArray, o: Button) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AutoSizeChanged = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    Paint = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class CheckBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    CheckBoxArray()
    CheckBoxArray(Container: IContainer)
    """
    def GetIndex(self, o:CheckBox) -> Int16:
        """ GetIndex(self: CheckBoxArray, o: CheckBox) -> Int16 """
        ...

    def ResetIndex(self, o:CheckBox): # -> 
        """ ResetIndex(self: CheckBoxArray, o: CheckBox) """
        ...

    def SetIndex(self, o:CheckBox, Index:Int16): # -> 
        """ SetIndex(self: CheckBoxArray, o: CheckBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:CheckBox) -> bool:
        """ ShouldSerializeIndex(self: CheckBoxArray, o: CheckBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AppearanceChanged = ...
    AutoSizeChanged = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    CheckedChanged = ...
    CheckStateChanged = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    Paint = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class CheckedListBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    CheckedListBoxArray()
    CheckedListBoxArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'CheckedListBox'}
        """ GetIndex(self: CheckedListBoxArray, o: CheckedListBox) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'CheckedListBox'}
        """ ResetIndex(self: CheckedListBoxArray, o: CheckedListBox) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'CheckedListBox'}
        """ SetIndex(self: CheckedListBoxArray, o: CheckedListBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'CheckedListBox'}
        """ ShouldSerializeIndex(self: CheckedListBoxArray, o: CheckedListBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BackColorChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    Format = ...
    FormatStringChanged = ...
    FormattingEnabledChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    ItemCheck = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SelectedIndexChanged = ...
    SelectedValueChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class ColorDialogArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    ColorDialogArray()
    ColorDialogArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'ColorDialog'}
        """ GetIndex(self: ColorDialogArray, o: ColorDialog) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'ColorDialog'}
        """ ResetIndex(self: ColorDialogArray, o: ColorDialog) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'ColorDialog'}
        """ SetIndex(self: ColorDialogArray, o: ColorDialog, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'ColorDialog'}
        """ ShouldSerializeIndex(self: ColorDialogArray, o: ColorDialog) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    components = ...
    controlAddedAtDesignTime = ...
    controls = ...
    fIsEndInitCalled = ...
    HelpRequest = ...
    indices = ...


class ComboBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    ComboBoxArray()
    ComboBoxArray(Container: IContainer)
    """
    def GetIndex(self, o:ComboBox) -> Int16:
        """ GetIndex(self: ComboBoxArray, o: ComboBox) -> Int16 """
        ...

    def ResetIndex(self, o:ComboBox): # -> 
        """ ResetIndex(self: ComboBoxArray, o: ComboBox) """
        ...

    def SetIndex(self, o:ComboBox, Index:Int16): # -> 
        """ SetIndex(self: ComboBoxArray, o: ComboBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:ComboBox) -> bool:
        """ ShouldSerializeIndex(self: ComboBoxArray, o: ComboBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BackColorChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DataSourceChanged = ...
    DisplayMemberChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    DrawItem = ...
    DropDown = ...
    DropDownClosed = ...
    DropDownStyleChanged = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    Format = ...
    FormatStringChanged = ...
    FormattingEnabledChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MeasureItem = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SelectedIndexChanged = ...
    SelectedValueChanged = ...
    SelectionChangeCommitted = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    TextUpdate = ...
    Validated = ...
    Validating = ...
    ValueMemberChanged = ...
    VisibleChanged = ...


class CONNECTDATA: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    cookie = ...
    pUnk = ...


class DBBINDING: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    bPrecision = ...
    bScale = ...
    cbMaxLen = ...
    dwFlags = ...
    eParamIO = ...
    iOrdinal = ...
    memOwner = ...
    obLength = ...
    obStatus = ...
    obValue = ...
    part = ...
    pBindExt = ...
    pObject = ...
    typeInfo = ...
    wType = ...


class DBCOLUMNINFO: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    columnFlags = ...
    columnId = ...
    columnOrdinal = ...
    columnSize = ...
    columnType = ...
    name = ...
    precision = ...
    scale = ...
    typeInfo = ...


class DBID: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    dbkind = ...
    uGuid = ...
    uName = ...


class DBinding: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def DataChanged(self) -> bool:
        """
        Get: DataChanged(self: DBinding) -> bool
        Set: DataChanged(self: DBinding) = value
        """
        ...

    @property
    def DataField(self) -> str:
        """ Get: DataField(self: DBinding) -> str """
        ...

    @property
    def DataFormat(self) -> IDataFormatDisp:
        """
        Get: DataFormat(self: DBinding) -> IDataFormatDisp
        Set: DataFormat(self: DBinding) = value
        """
        ...

    @property
    def Key(self) -> str:
        """ Get: Key(self: DBinding) -> str """
        ...

    @property
    def Object(self) -> object:
        """ Get: Object(self: DBinding) -> object """
        ...

    @property
    def PropertyName(self) -> str:
        """ Get: PropertyName(self: DBinding) -> str """
        ...



class DBindingCollection(IEnumerable): # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Count(self) -> int:
        """ Get: Count(self: DBindingCollection) -> int """
        ...

    @property
    def DataMember(self) -> str:
        """
        Get: DataMember(self: DBindingCollection) -> str
        Set: DataMember(self: DBindingCollection) = value
        """
        ...

    @property
    def DataSource(self) -> DataSource:
        """
        Get: DataSource(self: DBindingCollection) -> DataSource
        Set: DataSource(self: DBindingCollection) = value
        """
        ...

    @property
    def UpdateMode(self): # -> UpdateMode
        """
        Get: UpdateMode(self: DBindingCollection) -> UpdateMode
        Set: UpdateMode(self: DBindingCollection) = value
        """
        ...


    def Add(self, obj:object, propertyName:str, dataField:str, dataFormat:IDataFormatDisp, key:str) -> DBinding:
        """ Add(self: DBindingCollection, obj: object, propertyName: str, dataField: str, dataFormat: IDataFormatDisp, key: str) -> DBinding """
        ...

    def Clear(self): # -> 
        """ Clear(self: DBindingCollection) """
        ...

    def Remove(self, index:object): # -> 
        """ Remove(self: DBindingCollection, index: object) """
        ...

    def UpdateControls(self): # -> 
        """ UpdateControls(self: DBindingCollection) """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...


class DBKINDENUM(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DBKINDENUM, values: DBKIND_GUID (6), DBKIND_GUID_NAME (0), DBKIND_GUID_PROPID (1), DBKIND_NAME (2), DBKIND_PGUID_NAME (3), DBKIND_PGUID_PROPID (4), DBKIND_PROPID (5) """
    DBKIND_GUID: DBKINDENUM = ...
    DBKIND_GUID_NAME: DBKINDENUM = ...
    DBKIND_GUID_PROPID: DBKINDENUM = ...
    DBKIND_NAME: DBKINDENUM = ...
    DBKIND_PGUID_NAME: DBKINDENUM = ...
    DBKIND_PGUID_PROPID: DBKINDENUM = ...
    DBKIND_PROPID: DBKINDENUM = ...
    value__ = ...


class DBPROPIDSET: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    cPropertyIDs = ...
    guidPropertySet = ...
    rgPropertyIDs = ...


class DirListBox(ListBox): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ DirListBox() """
    @property
    def DataSource(self) -> object:
        """
        Get: DataSource(self: DirListBox) -> object
        Set: DataSource(self: DirListBox) = value
        """
        ...

    @property
    def DirListCount(self) -> int:
        """ Get: DirListCount(self: DirListBox) -> int """
        ...

    @property
    def DirListIndex(self) -> int:
        """
        Get: DirListIndex(self: DirListBox) -> int
        Set: DirListIndex(self: DirListBox) = value
        """
        ...

    @property
    def Path(self) -> str:
        """
        Get: Path(self: DirListBox) -> str
        Set: Path(self: DirListBox) = value
        """
        ...

    @property
    def ValueMember(self) -> str:
        """
        Get: ValueMember(self: DirListBox) -> str
        Set: ValueMember(self: DirListBox) = value
        """
        ...


    def OnChange(self, *args): #cannot find CLR method
        """ OnChange(self: DirListBox, e: EventArgs) """
        ...

    Change = ...


class DirListBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    DirListBoxArray()
    DirListBoxArray(Container: IContainer)
    """
    def GetIndex(self, o:DirListBox) -> Int16:
        """ GetIndex(self: DirListBoxArray, o: DirListBox) -> Int16 """
        ...

    def ResetIndex(self, o:DirListBox): # -> 
        """ ResetIndex(self: DirListBoxArray, o: DirListBox) """
        ...

    def SetIndex(self, o:DirListBox, Index:Int16): # -> 
        """ SetIndex(self: DirListBoxArray, o: DirListBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:DirListBox) -> bool:
        """ ShouldSerializeIndex(self: DirListBoxArray, o: DirListBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BackColorChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    Change = ...
    ChangeUICues = ...
    components = ...
    ContextMenuChanged = ...
    controlAddedAtDesignTime = ...
    controls = ...
    CursorChanged = ...
    DataSourceChanged = ...
    DisplayMemberChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    DrawItem = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MeasureItem = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    Resize = ...
    RightToLeftChanged = ...
    SelectedIndexChanged = ...
    SelectedValueChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    ValueMemberChanged = ...
    VisibleChanged = ...


class DriveListBox(ComboBox): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ DriveListBox() """
    @property
    def DisplayMember(self) -> str:
        """
        Get: DisplayMember(self: DriveListBox) -> str
        Set: DisplayMember(self: DriveListBox) = value
        """
        ...

    @property
    def Drive(self) -> str:
        """
        Get: Drive(self: DriveListBox) -> str
        Set: Drive(self: DriveListBox) = value
        """
        ...

    @property
    def ValueMember(self) -> str:
        """
        Get: ValueMember(self: DriveListBox) -> str
        Set: ValueMember(self: DriveListBox) = value
        """
        ...


    def Refresh(self): # -> 
        """ Refresh(self: DriveListBox) """
        ...


class DriveListBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    DriveListBoxArray()
    DriveListBoxArray(Container: IContainer)
    """
    def GetIndex(self, o:DriveListBox) -> Int16:
        """ GetIndex(self: DriveListBoxArray, o: DriveListBox) -> Int16 """
        ...

    def ResetIndex(self, o:DriveListBox): # -> 
        """ ResetIndex(self: DriveListBoxArray, o: DriveListBox) """
        ...

    def SetIndex(self, o:DriveListBox, Index:Int16): # -> 
        """ SetIndex(self: DriveListBoxArray, o: DriveListBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:DriveListBox) -> bool:
        """ ShouldSerializeIndex(self: DriveListBoxArray, o: DriveListBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BackColorChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    components = ...
    ContextMenuChanged = ...
    controlAddedAtDesignTime = ...
    controls = ...
    CursorChanged = ...
    DataSourceChanged = ...
    DisplayMemberChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    DrawItem = ...
    DropDown = ...
    DropDownStyleChanged = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MeasureItem = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    Resize = ...
    RightToLeftChanged = ...
    SelectedIndexChanged = ...
    SelectedValueChanged = ...
    SelectionChangeCommitted = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    ValueMemberChanged = ...
    VisibleChanged = ...


class FileListBox(ListBox): # skipped bases: <type 'IWin32Window'>, <type 'IPersistStreamInit'>, <type 'IOleObject'>, <type 'IPersistStorage'>, <type 'IViewObject'>, <type 'IArrangedElement'>, <type 'IOleWindow'>, <type 'IKeyboardToolTip'>, <type 'IPersist'>, <type 'ISynchronizeInvoke'>, <type 'IDisposable'>, <type 'IPersistPropertyBag'>, <type 'IQuickActivate'>, <type 'IComponent'>, <type 'IOleControl'>, <type 'IDropTarget'>, <type 'IBindableComponent'>, <type 'ISupportOleDropSource'>, <type 'IOleInPlaceActiveObject'>, <type 'IViewObject2'>, <type 'IOleInPlaceObject'>, <type 'object'>
    """ FileListBox() """
    @property
    def Archive(self) -> bool:
        """
        Get: Archive(self: FileListBox) -> bool
        Set: Archive(self: FileListBox) = value
        """
        ...

    @property
    def DataSource(self) -> object:
        """
        Get: DataSource(self: FileListBox) -> object
        Set: DataSource(self: FileListBox) = value
        """
        ...

    @property
    def DisplayMember(self) -> str:
        """
        Get: DisplayMember(self: FileListBox) -> str
        Set: DisplayMember(self: FileListBox) = value
        """
        ...

    @property
    def FileName(self) -> str:
        """
        Get: FileName(self: FileListBox) -> str
        Set: FileName(self: FileListBox) = value
        """
        ...

    @property
    def Hidden(self) -> bool:
        """
        Get: Hidden(self: FileListBox) -> bool
        Set: Hidden(self: FileListBox) = value
        """
        ...

    @property
    def Normal(self) -> bool:
        """
        Get: Normal(self: FileListBox) -> bool
        Set: Normal(self: FileListBox) = value
        """
        ...

    @property
    def Path(self) -> str:
        """
        Get: Path(self: FileListBox) -> str
        Set: Path(self: FileListBox) = value
        """
        ...

    @property
    def Pattern(self) -> str:
        """
        Get: Pattern(self: FileListBox) -> str
        Set: Pattern(self: FileListBox) = value
        """
        ...

    @property
    def ReadOnly(self) -> bool:
        """
        Get: ReadOnly(self: FileListBox) -> bool
        Set: ReadOnly(self: FileListBox) = value
        """
        ...

    @property
    def System(self) -> bool:
        """
        Get: System(self: FileListBox) -> bool
        Set: System(self: FileListBox) = value
        """
        ...

    @property
    def ValueMember(self) -> str:
        """
        Get: ValueMember(self: FileListBox) -> str
        Set: ValueMember(self: FileListBox) = value
        """
        ...


    def OnPathChange(self, *args): #cannot find CLR method
        """ OnPathChange(self: FileListBox, e: EventArgs) """
        ...

    def OnPatternChange(self, *args): #cannot find CLR method
        """ OnPatternChange(self: FileListBox, e: EventArgs) """
        ...

    PathChange = ...
    PatternChange = ...


class FileListBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    FileListBoxArray()
    FileListBoxArray(Container: IContainer)
    """
    def GetIndex(self, o:FileListBox) -> Int16:
        """ GetIndex(self: FileListBoxArray, o: FileListBox) -> Int16 """
        ...

    def ResetIndex(self, o:FileListBox): # -> 
        """ ResetIndex(self: FileListBoxArray, o: FileListBox) """
        ...

    def SetIndex(self, o:FileListBox, Index:Int16): # -> 
        """ SetIndex(self: FileListBoxArray, o: FileListBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:FileListBox) -> bool:
        """ ShouldSerializeIndex(self: FileListBoxArray, o: FileListBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BackColorChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    components = ...
    ContextMenuChanged = ...
    controlAddedAtDesignTime = ...
    controls = ...
    CursorChanged = ...
    DataSourceChanged = ...
    DisplayMemberChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    DrawItem = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MeasureItem = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    ParentChanged = ...
    PathChange = ...
    PatternChange = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    Resize = ...
    RightToLeftChanged = ...
    SelectedIndexChanged = ...
    SelectedValueChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    ValueMemberChanged = ...
    VisibleChanged = ...


class FixedLengthString: # skipped bases: <type 'object'>, <type 'object'>
    """
    FixedLengthString(MaxChars: int)
    FixedLengthString(MaxChars: int, InitialValue: str)
    """
    @property
    def Value(self) -> str:
        """
        Get: Value(self: FixedLengthString) -> str
        Set: Value(self: FixedLengthString) = value
        """
        ...


    def ToString(self) -> str:
        """ ToString(self: FixedLengthString) -> str """
        ...

    m_nMaxChars = ...
    m_strValue = ...


class FontDialogArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    FontDialogArray()
    FontDialogArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'FontDialog'}
        """ GetIndex(self: FontDialogArray, o: FontDialog) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'FontDialog'}
        """ ResetIndex(self: FontDialogArray, o: FontDialog) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'FontDialog'}
        """ SetIndex(self: FontDialogArray, o: FontDialog, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'FontDialog'}
        """ ShouldSerializeIndex(self: FontDialogArray, o: FontDialog) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    Apply = ...
    components = ...
    controlAddedAtDesignTime = ...
    controls = ...
    fIsEndInitCalled = ...
    HelpRequest = ...
    indices = ...


class FormShowConstants(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FormShowConstants, values: Modal (1), Modeless (0) """
    Modal: FormShowConstants = ...
    Modeless: FormShowConstants = ...
    value__ = ...


class GroupBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    GroupBoxArray()
    GroupBoxArray(Container: IContainer)
    """
    def GetIndex(self, o:GroupBox) -> Int16:
        """ GetIndex(self: GroupBoxArray, o: GroupBox) -> Int16 """
        ...

    def ResetIndex(self, o:GroupBox): # -> 
        """ ResetIndex(self: GroupBoxArray, o: GroupBox) """
        ...

    def SetIndex(self, o:GroupBox, Index:Int16): # -> 
        """ SetIndex(self: GroupBoxArray, o: GroupBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:GroupBox) -> bool:
        """ ShouldSerializeIndex(self: GroupBoxArray, o: GroupBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AutoSizeChanged = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseHover = ...
    Move = ...
    PaddingChanged = ...
    Paint = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class HScrollBarArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    HScrollBarArray()
    HScrollBarArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'HScrollBar'}
        """ GetIndex(self: HScrollBarArray, o: HScrollBar) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'HScrollBar'}
        """ ResetIndex(self: HScrollBarArray, o: HScrollBar) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'HScrollBar'}
        """ SetIndex(self: HScrollBarArray, o: HScrollBar, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'HScrollBar'}
        """ ShouldSerializeIndex(self: HScrollBarArray, o: HScrollBar) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    GiveFeedback = ...
    HelpRequested = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    Move = ...
    PaddingChanged = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    Scroll = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    ValueChanged = ...
    VisibleChanged = ...


class IAccessor: # skipped bases: <type 'object'>
    """ no doc """
    def AddRefAccessor(self, hAccessor, cRefCount) -> int:
        """ AddRefAccessor(self: IAccessor, hAccessor: int) -> int """
        ...

    def CreateAccessor(self, accessorFlags, cBindings, bindings, cbRowSize, hAccessor, pBindStatus) -> int:
        """ CreateAccessor(self: IAccessor, accessorFlags: int, cBindings: int, bindings: Array[DBBINDING], cbRowSize: int, pBindStatus: IntPtr) -> int """
        ...

    def GetBindings(self, hAccessor, accessorFlags, cBindings, rgBindings) -> Tuple_[int, int, IntPtr]:
        """ GetBindings(self: IAccessor, hAccessor: int) -> (int, int, IntPtr) """
        ...

    def ReleaseAccessor(self, hAccessor, cRefCount) -> int:
        """ ReleaseAccessor(self: IAccessor, hAccessor: int) -> int """
        ...


class IChapteredRowset: # skipped bases: <type 'object'>
    """ no doc """
    def AddRefChapter(self, hChapter, cRefCount) -> int:
        """ AddRefChapter(self: IChapteredRowset, hChapter: int) -> int """
        ...

    def ReleaseChapter(self, hChapter, cRefCount) -> int:
        """ ReleaseChapter(self: IChapteredRowset, hChapter: int) -> int """
        ...


class IColumnsInfo: # skipped bases: <type 'object'>
    """ no doc """
    def GetColumnInfo(self, cColumns, pColumnInfo, pStringsBuffer) -> Tuple_[int, IntPtr, IntPtr]:
        """ GetColumnInfo(self: IColumnsInfo) -> (int, IntPtr, IntPtr) """
        ...

    def MapColumnIDs(self, cColumnIDs, columnIDs, rgColumns) -> Array:
        """ MapColumnIDs(self: IColumnsInfo, cColumnIDs: int, columnIDs: Array[DBID]) -> Array[int] """
        ...


class IConnectionPoint: # skipped bases: <type 'object'>
    """ no doc """
    def Advise(self, sink, cookie) -> int:
        """ Advise(self: IConnectionPoint, sink: IntPtr) -> int """
        ...

    def EnumConnections(self, enumC) -> IEnumConnections:
        """ EnumConnections(self: IConnectionPoint) -> IEnumConnections """
        ...

    def GetConnectionInterface(self, piid) -> Guid:
        """ GetConnectionInterface(self: IConnectionPoint) -> Guid """
        ...

    def GetConnectionPointContainer(self, cpc) -> IConnectionPointContainer:
        """ GetConnectionPointContainer(self: IConnectionPoint) -> IConnectionPointContainer """
        ...

    def Unadvise(self, cookie:int): # -> 
        """ Unadvise(self: IConnectionPoint, cookie: int) """
        ...


class IConnectionPointContainer: # skipped bases: <type 'object'>
    """ no doc """
    def EnumConnectionPoints(self, enumC) -> IEnumConnectionPoints:
        """ EnumConnectionPoints(self: IConnectionPointContainer) -> IEnumConnectionPoints """
        ...

    def FindConnectionPoint(self, riid, cp) -> Tuple_[Guid, IConnectionPoint]:
        """ FindConnectionPoint(self: IConnectionPointContainer, riid: Guid) -> (Guid, IConnectionPoint) """
        ...


class IDataFormat: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self, newObject) -> IDataFormat:
        """ Clone(self: IDataFormat) -> IDataFormat """
        ...

    def Convert(self, cookie, from_, varTo) -> object:
        """ Convert(self: IDataFormat, cookie: int, from: object) -> object """
        ...

    def Default(self, fDefault) -> bool:
        """ Default(self: IDataFormat) -> bool """
        ...

    def GetBinding(self, vtPropHint, rgfDataFormat, rowset, columnInfo, binding, size, cookie) -> Tuple_[DBCOLUMNINFO, DBBINDING, int, int]:
        """ GetBinding(self: IDataFormat, vtPropHint: VarEnum, rgfDataFormat: int, rowset: IRowset, columnInfo: DBCOLUMNINFO) -> (DBCOLUMNINFO, DBBINDING, int, int) """
        ...

    def GetData(self, cookie, from_, varTo, dbStatus, pObject) -> Tuple_[object, int]:
        """ GetData(self: IDataFormat, cookie: int, from: IntPtr, pObject: object) -> (object, int) """
        ...

    def GetLcid(self, lcid) -> int:
        """ GetLcid(self: IDataFormat) -> int """
        ...

    def GetRawData(self, cookie, from_, varTo, dbStatus) -> Tuple_[object, int]:
        """ GetRawData(self: IDataFormat, cookie: int, from: IntPtr) -> (object, int) """
        ...

    def GetSubFormatType(self, subFormatType) -> int:
        """ GetSubFormatType(self: IDataFormat) -> int """
        ...

    def ReleaseBinding(self, cookie:int): # -> 
        """ ReleaseBinding(self: IDataFormat, cookie: int) """
        ...

    def ReleaseData(self, cookie:int, pv:IntPtr): # -> 
        """ ReleaseData(self: IDataFormat, cookie: int, pv: IntPtr) """
        ...

    def SetData(self, cookie, from_, pVarTo, pObject) -> object:
        """ SetData(self: IDataFormat, cookie: int, pVarTo: IntPtr, pObject: object) -> object """
        ...

    def SetLcid(self, lcid:int): # -> 
        """ SetLcid(self: IDataFormat, lcid: int) """
        ...

    def SetRawData(self, cookie:int, from_:object, pVarTo:IntPtr): # -> 
        """ SetRawData(self: IDataFormat, cookie: int, from: object, pVarTo: IntPtr) """
        ...

    def SetSubFormatType(self, subFormatType:int): # -> 
        """ SetSubFormatType(self: IDataFormat, subFormatType: int) """
        ...


class IDataFormatDisp: # skipped bases: <type 'object'>
    """ no doc """
    pass

class IEnumConnectionPoints: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self, ecp) -> IEnumConnectionPoints:
        """ Clone(self: IEnumConnectionPoints) -> IEnumConnectionPoints """
        ...

    def Next(self, cConnections, cp, cFetched) -> Tuple_[Array, int]:
        """ Next(self: IEnumConnectionPoints, cConnections: int) -> (Array[IConnectionPoint], int) """
        ...

    def Reset(self): # -> 
        """ Reset(self: IEnumConnectionPoints) """
        ...

    def Skip(self, cConnections:int): # -> 
        """ Skip(self: IEnumConnectionPoints, cConnections: int) """
        ...


class IEnumConnections: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self, ec) -> IEnumConnections:
        """ Clone(self: IEnumConnections) -> IEnumConnections """
        ...

    def Next(self, cConnections, cd, cFetched) -> Tuple_[Array, int]:
        """ Next(self: IEnumConnections, cConnections: int) -> (Array[CONNECTDATA], int) """
        ...

    def Reset(self): # -> 
        """ Reset(self: IEnumConnections) """
        ...

    def Skip(self, cConnections:int): # -> 
        """ Skip(self: IEnumConnections, cConnections: int) """
        ...


class ImageListArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    ImageListArray()
    ImageListArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'ImageList'}
        """ GetIndex(self: ImageListArray, o: ImageList) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'ImageList'}
        """ ResetIndex(self: ImageListArray, o: ImageList) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'ImageList'}
        """ SetIndex(self: ImageListArray, o: ImageList, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'ImageList'}
        """ ShouldSerializeIndex(self: ImageListArray, o: ImageList) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    components = ...
    controlAddedAtDesignTime = ...
    controls = ...
    fIsEndInitCalled = ...
    indices = ...


class IRowPosition: # skipped bases: <type 'object'>
    """ no doc """
    def ClearRowPosition(self): # -> 
        """ ClearRowPosition(self: IRowPosition) """
        ...

    def GetRowPosition(self, hChapter, hRow, dbPositionFlags) -> Tuple_[int, int, int]:
        """ GetRowPosition(self: IRowPosition) -> (int, int, int) """
        ...

    def GetRowset(self, iid, rowset) -> Tuple_[Guid, object]:
        """ GetRowset(self: IRowPosition, iid: Guid) -> (Guid, object) """
        ...

    def Initialize(self, rowset:object): # -> 
        """ Initialize(self: IRowPosition, rowset: object) """
        ...

    def SetRowPosition(self, hChapter:int, hRow:int, dbPositionFlags:int): # -> 
        """ SetRowPosition(self: IRowPosition, hChapter: int, hRow: int, dbPositionFlags: int) """
        ...


class IRowPositionChange: # skipped bases: <type 'object'>
    """ no doc """
    def OnRowPositionChange(self, dbReason:int, eventPhase:int, fCantDeny:int) -> int:
        """ OnRowPositionChange(self: IRowPositionChange, dbReason: int, eventPhase: int, fCantDeny: int) -> int """
        ...


class IRowset: # skipped bases: <type 'object'>
    """ no doc """
    def AddRefRows(self, cRows, hRows, refCounts, rowStatus) -> Tuple_[Array, Array]:
        """ AddRefRows(self: IRowset, cRows: int, hRows: Array[int]) -> (Array[int], Array[int]) """
        ...

    def GetData(self, hRow:int, hAccessor:int, pData:IntPtr): # -> 
        """ GetData(self: IRowset, hRow: int, hAccessor: int, pData: IntPtr) """
        ...

    def GetNextRows(self, hChapter, lRowsOffset, cRows, cRowsObtained, hRows) -> Tuple_[int, Array]:
        """ GetNextRows(self: IRowset, hChapter: int, lRowsOffset: int, cRows: int) -> (int, Array[int]) """
        ...

    def ReleaseRows(self, cRows:int, hRows:Array, rowOptions:IntPtr, rowRefCounts:IntPtr, rgRowStatus:IntPtr) -> int:
        """ ReleaseRows(self: IRowset, cRows: int, hRows: Array[int], rowOptions: IntPtr, rowRefCounts: IntPtr, rgRowStatus: IntPtr) -> int """
        ...

    def RestartPosition(self, hChapter:int) -> int:
        """ RestartPosition(self: IRowset, hChapter: int) -> int """
        ...


class IRowsetChange: # skipped bases: <type 'object'>
    """ no doc """
    def DeleteRows(self, hChapterReserved, cRows, rghRows, rgRowStatus) -> Array:
        """ DeleteRows(self: IRowsetChange, hChapterReserved: int, cRows: int, rghRows: Array[int]) -> Array[int] """
        ...

    def InsertRow(self, hChapterReserved, hAccessor, pData, hRow) -> int:
        """ InsertRow(self: IRowsetChange, hChapterReserved: int, hAccessor: int, pData: IntPtr) -> int """
        ...

    def SetData(self, hRow:int, hAccessor:int, pData:IntPtr): # -> 
        """ SetData(self: IRowsetChange, hRow: int, hAccessor: int, pData: IntPtr) """
        ...


class IRowsetIdentity: # skipped bases: <type 'object'>
    """ no doc """
    def IsSameRow(self, hThisRow:int, hThatRow:int) -> int:
        """ IsSameRow(self: IRowsetIdentity, hThisRow: int, hThatRow: int) -> int """
        ...


class IRowsetInfo: # skipped bases: <type 'object'>
    """ no doc """
    def GetProperties(self, cPropertyIDSets, rgPropertyIDSets, cPropertySets, prgPropertySets) -> Tuple_[int, IntPtr]:
        """ GetProperties(self: IRowsetInfo, cPropertyIDSets: int, rgPropertyIDSets: Array[DBPROPIDSET]) -> (int, IntPtr) """
        ...

    def GetReferencedRowset(self, iOrdinal, riid, referencedRowset) -> object:
        """ GetReferencedRowset(self: IRowsetInfo, iOrdinal: int, riid: Guid) -> object """
        ...

    def GetSpecification(self, riid, specification) -> object:
        """ GetSpecification(self: IRowsetInfo, riid: Guid) -> object """
        ...


class IRowsetNotify: # skipped bases: <type 'object'>
    """ no doc """
    def OnFieldChange(self, rowset:IRowset, hRow:int, cColumns:int, rgColumns:Array, dbReason:int, eventPhase:int, fCantDeny:int) -> int:
        """ OnFieldChange(self: IRowsetNotify, rowset: IRowset, hRow: int, cColumns: int, rgColumns: Array[int], dbReason: int, eventPhase: int, fCantDeny: int) -> int """
        ...

    def OnRowChange(self, rowset:IRowset, cRows:int, rghRows:Array, dbReason:int, eventPhase:int, fCantDeny:int) -> int:
        """ OnRowChange(self: IRowsetNotify, rowset: IRowset, cRows: int, rghRows: Array[int], dbReason: int, eventPhase: int, fCantDeny: int) -> int """
        ...

    def OnRowsetChange(self, rowset:IRowset, dbReason:int, eventPhase:int, fCantDeny:int) -> int:
        """ OnRowsetChange(self: IRowsetNotify, rowset: IRowset, dbReason: int, eventPhase: int, fCantDeny: int) -> int """
        ...


class LabelArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    LabelArray()
    LabelArray(Container: IContainer)
    """
    def GetIndex(self, o:Label) -> Int16:
        """ GetIndex(self: LabelArray, o: Label) -> Int16 """
        ...

    def ResetIndex(self, o:Label): # -> 
        """ ResetIndex(self: LabelArray, o: Label) """
        ...

    def SetIndex(self, o:Label, Index:Int16): # -> 
        """ SetIndex(self: LabelArray, o: Label, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:Label) -> bool:
        """ ShouldSerializeIndex(self: LabelArray, o: Label) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AutoSizeChanged = ...
    BackColorChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    indices = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    Paint = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TextAlignChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class ListBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    ListBoxArray()
    ListBoxArray(Container: IContainer)
    """
    def GetIndex(self, o:ListBox) -> Int16:
        """ GetIndex(self: ListBoxArray, o: ListBox) -> Int16 """
        ...

    def ResetIndex(self, o:ListBox): # -> 
        """ ResetIndex(self: ListBoxArray, o: ListBox) """
        ...

    def SetIndex(self, o:ListBox, Index:Int16): # -> 
        """ SetIndex(self: ListBoxArray, o: ListBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:ListBox) -> bool:
        """ ShouldSerializeIndex(self: ListBoxArray, o: ListBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BackColorChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DataSourceChanged = ...
    DisplayMemberChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    DrawItem = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    Format = ...
    FormatStringChanged = ...
    FormattingEnabledChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MeasureItem = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SelectedIndexChanged = ...
    SelectedValueChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    ValueMemberChanged = ...
    VisibleChanged = ...


class ListBoxItem: # skipped bases: <type 'object'>, <type 'object'>
    """
    ListBoxItem(ItemString: str, ItemData: int)
    ListBoxItem(ItemString: str)
    """
    def ToString(self) -> str:
        """ ToString(self: ListBoxItem) -> str """
        ...

    ItemData = ...
    ItemString = ...


class ListViewArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    ListViewArray()
    ListViewArray(Container: IContainer)
    """
    def GetIndex(self, o:ListView) -> Int16:
        """ GetIndex(self: ListViewArray, o: ListView) -> Int16 """
        ...

    def ResetIndex(self, o:ListView): # -> 
        """ ResetIndex(self: ListViewArray, o: ListView) """
        ...

    def SetIndex(self, o:ListView, Index:Int16): # -> 
        """ SetIndex(self: ListViewArray, o: ListView, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:ListView) -> bool:
        """ ShouldSerializeIndex(self: ListViewArray, o: ListView) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AfterLabelEdit = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BeforeLabelEdit = ...
    BindingContextChanged = ...
    CacheVirtualItems = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    ColumnClick = ...
    ColumnReordered = ...
    ColumnWidthChanged = ...
    ColumnWidthChanging = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    DrawColumnHeader = ...
    DrawItem = ...
    DrawSubItem = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    ItemActivate = ...
    ItemCheck = ...
    ItemChecked = ...
    ItemDrag = ...
    ItemMouseHover = ...
    ItemSelectionChanged = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RetrieveVirtualItem = ...
    RightToLeftChanged = ...
    RightToLeftLayoutChanged = ...
    SearchForVirtualItem = ...
    SelectedIndexChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    VirtualItemsSelectionRangeChanged = ...
    VisibleChanged = ...


class LoadResConstants(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum LoadResConstants, values: ResBitmap (0), ResCursor (2), ResIcon (1) """
    ResBitmap: LoadResConstants = ...
    ResCursor: LoadResConstants = ...
    ResIcon: LoadResConstants = ...
    value__ = ...


class MaskedTextBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    MaskedTextBoxArray()
    MaskedTextBoxArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'MaskedTextBox'}
        """ GetIndex(self: MaskedTextBoxArray, o: MaskedTextBox) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'MaskedTextBox'}
        """ ResetIndex(self: MaskedTextBoxArray, o: MaskedTextBox) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'MaskedTextBox'}
        """ SetIndex(self: MaskedTextBoxArray, o: MaskedTextBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'MaskedTextBox'}
        """ ShouldSerializeIndex(self: MaskedTextBoxArray, o: MaskedTextBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BackColorChanged = ...
    BindingContextChanged = ...
    BorderStyleChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    HideSelectionChanged = ...
    ImeModeChanged = ...
    indices = ...
    IsOverwriteModeChanged = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MaskChanged = ...
    MaskInputRejected = ...
    ModifiedChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    ReadOnlyChanged = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextAlignChanged = ...
    TextChanged = ...
    TypeValidationCompleted = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class MBinding(IDisposable, DBinding): # skipped bases: <type 'object'>
    """ no doc """
    pass

class MBindingCollection(IDisposable, DBindingCollection): # skipped bases: <type 'IEnumerable'>, <type 'object'>
    """ MBindingCollection() """
    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: MBindingCollection) -> IEnumerator """
        ...

    def SavePendingChanges(self): # -> 
        """ SavePendingChanges(self: MBindingCollection) """
        ...


class MenuItemArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    MenuItemArray()
    MenuItemArray(Container: IContainer)
    """
    def GetIndex(self, o:MenuItem) -> Int16:
        """ GetIndex(self: MenuItemArray, o: MenuItem) -> Int16 """
        ...

    def ResetIndex(self, o:MenuItem): # -> 
        """ ResetIndex(self: MenuItemArray, o: MenuItem) """
        ...

    def SetIndex(self, o:MenuItem, Index:Int16): # -> 
        """ SetIndex(self: MenuItemArray, o: MenuItem, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:MenuItem) -> bool:
        """ ShouldSerializeIndex(self: MenuItemArray, o: MenuItem) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    Click = ...
    components = ...
    controlAddedAtDesignTime = ...
    controls = ...
    DrawItem = ...
    fIsEndInitCalled = ...
    indices = ...
    MeasureItem = ...
    Popup = ...
    Select = ...


class MouseButtonConstants(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MouseButtonConstants, values: LeftButton (1), MiddleButton (4), RightButton (2) """
    LeftButton: MouseButtonConstants = ...
    MiddleButton: MouseButtonConstants = ...
    RightButton: MouseButtonConstants = ...
    value__ = ...


class OpenFileDialogArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    OpenFileDialogArray()
    OpenFileDialogArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'OpenFileDialog'}
        """ GetIndex(self: OpenFileDialogArray, o: OpenFileDialog) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'OpenFileDialog'}
        """ ResetIndex(self: OpenFileDialogArray, o: OpenFileDialog) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'OpenFileDialog'}
        """ SetIndex(self: OpenFileDialogArray, o: OpenFileDialog, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'OpenFileDialog'}
        """ ShouldSerializeIndex(self: OpenFileDialogArray, o: OpenFileDialog) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    components = ...
    controlAddedAtDesignTime = ...
    controls = ...
    FileOk = ...
    fIsEndInitCalled = ...
    HelpRequest = ...
    indices = ...


class PanelArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    PanelArray()
    PanelArray(Container: IContainer)
    """
    def GetIndex(self, o:Panel) -> Int16:
        """ GetIndex(self: PanelArray, o: Panel) -> Int16 """
        ...

    def ResetIndex(self, o:Panel): # -> 
        """ ResetIndex(self: PanelArray, o: Panel) """
        ...

    def SetIndex(self, o:Panel, Index:Int16): # -> 
        """ SetIndex(self: PanelArray, o: Panel, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:Panel) -> bool:
        """ ShouldSerializeIndex(self: PanelArray, o: Panel) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AutoSizeChanged = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    Paint = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    Scroll = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class PictureBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    PictureBoxArray()
    PictureBoxArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'PictureBox'}
        """ GetIndex(self: PictureBoxArray, o: PictureBox) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'PictureBox'}
        """ ResetIndex(self: PictureBoxArray, o: PictureBox) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'PictureBox'}
        """ SetIndex(self: PictureBoxArray, o: PictureBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'PictureBox'}
        """ ShouldSerializeIndex(self: PictureBoxArray, o: PictureBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BindingContextChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    fIsEndInitCalled = ...
    GiveFeedback = ...
    HelpRequested = ...
    indices = ...
    Layout = ...
    LoadCompleted = ...
    LoadProgressChanged = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    Paint = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    SizeChanged = ...
    SizeModeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class PrintDialogArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    PrintDialogArray()
    PrintDialogArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'PrintDialog'}
        """ GetIndex(self: PrintDialogArray, o: PrintDialog) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'PrintDialog'}
        """ ResetIndex(self: PrintDialogArray, o: PrintDialog) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'PrintDialog'}
        """ SetIndex(self: PrintDialogArray, o: PrintDialog, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'PrintDialog'}
        """ ShouldSerializeIndex(self: PrintDialogArray, o: PrintDialog) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    components = ...
    controlAddedAtDesignTime = ...
    controls = ...
    fIsEndInitCalled = ...
    HelpRequest = ...
    indices = ...


class ProgressBarArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    ProgressBarArray()
    ProgressBarArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'ProgressBar'}
        """ GetIndex(self: ProgressBarArray, o: ProgressBar) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'ProgressBar'}
        """ ResetIndex(self: ProgressBarArray, o: ProgressBar) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'ProgressBar'}
        """ SetIndex(self: ProgressBarArray, o: ProgressBar, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'ProgressBar'}
        """ ShouldSerializeIndex(self: ProgressBarArray, o: ProgressBar) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BackColorChanged = ...
    BindingContextChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    fIsEndInitCalled = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    indices = ...
    Layout = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    RightToLeftLayoutChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class RadioButtonArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    RadioButtonArray(Container: IContainer)
    RadioButtonArray()
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'RadioButton'}
        """ GetIndex(self: RadioButtonArray, o: RadioButton) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'RadioButton'}
        """ ResetIndex(self: RadioButtonArray, o: RadioButton) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'RadioButton'}
        """ SetIndex(self: RadioButtonArray, o: RadioButton, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'RadioButton'}
        """ ShouldSerializeIndex(self: RadioButtonArray, o: RadioButton) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AppearanceChanged = ...
    AutoSizeChanged = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    CheckedChanged = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    Paint = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class RichTextBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    RichTextBoxArray()
    RichTextBoxArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'RichTextBox'}
        """ GetIndex(self: RichTextBoxArray, o: RichTextBox) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'RichTextBox'}
        """ ResetIndex(self: RichTextBoxArray, o: RichTextBox) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'RichTextBox'}
        """ SetIndex(self: RichTextBoxArray, o: RichTextBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'RichTextBox'}
        """ ShouldSerializeIndex(self: RichTextBoxArray, o: RichTextBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AcceptsTabChanged = ...
    BackColorChanged = ...
    BindingContextChanged = ...
    BorderStyleChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContentsResized = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    HelpRequested = ...
    HideSelectionChanged = ...
    HScroll = ...
    ImeChange = ...
    ImeModeChanged = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LinkClicked = ...
    LocationChanged = ...
    MarginChanged = ...
    ModifiedChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    MultilineChanged = ...
    ParentChanged = ...
    Protected = ...
    QueryAccessibilityHelp = ...
    ReadOnlyChanged = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SelectionChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...
    VScroll = ...


class SaveFileDialogArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    SaveFileDialogArray()
    SaveFileDialogArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'SaveFileDialog'}
        """ GetIndex(self: SaveFileDialogArray, o: SaveFileDialog) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'SaveFileDialog'}
        """ ResetIndex(self: SaveFileDialogArray, o: SaveFileDialog) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'SaveFileDialog'}
        """ SetIndex(self: SaveFileDialogArray, o: SaveFileDialog, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'SaveFileDialog'}
        """ ShouldSerializeIndex(self: SaveFileDialogArray, o: SaveFileDialog) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    components = ...
    controlAddedAtDesignTime = ...
    controls = ...
    FileOk = ...
    fIsEndInitCalled = ...
    HelpRequest = ...
    indices = ...


class ScaleMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ScaleMode, values: Centimeters (7), Characters (4), Himetric (8), Inches (5), Millimeters (6), Points (2) """
    Centimeters: ScaleMode = ...
    Characters: ScaleMode = ...
    Himetric: ScaleMode = ...
    Inches: ScaleMode = ...
    Millimeters: ScaleMode = ...
    Points: ScaleMode = ...
    value__ = ...


class ShiftConstants(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ShiftConstants, values: AltMask (4), CtrlMask (2), ShiftMask (1) """
    AltMask: ShiftConstants = ...
    CtrlMask: ShiftConstants = ...
    ShiftMask: ShiftConstants = ...
    value__ = ...


class SRDescriptionAttribute(DescriptionAttribute): # skipped bases: <type '_Attribute'>, <type 'object'>
    """ SRDescriptionAttribute(description: str) """
    pass

class StatusBarArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    StatusBarArray()
    StatusBarArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'StatusBar'}
        """ GetIndex(self: StatusBarArray, o: StatusBar) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'StatusBar'}
        """ ResetIndex(self: StatusBarArray, o: StatusBar) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'StatusBar'}
        """ SetIndex(self: StatusBarArray, o: StatusBar, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'StatusBar'}
        """ ShouldSerializeIndex(self: StatusBarArray, o: StatusBar) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    DrawItem = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    PanelClick = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class StatusStripArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    StatusStripArray()
    StatusStripArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'StatusStrip'}
        """ GetIndex(self: StatusStripArray, o: StatusStrip) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'StatusStrip'}
        """ ResetIndex(self: StatusStripArray, o: StatusStrip) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'StatusStrip'}
        """ SetIndex(self: StatusStripArray, o: StatusStrip, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'StatusStrip'}
        """ ShouldSerializeIndex(self: StatusStripArray, o: StatusStrip) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AutoSizeChanged = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BeginDrag = ...
    BindingContextChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    controlAddedAtDesignTime = ...
    controls = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    EndDrag = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    ItemAdded = ...
    ItemClicked = ...
    ItemRemoved = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    LayoutCompleted = ...
    LayoutStyleChanged = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    Paint = ...
    PaintGrip = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    Scroll = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class Support: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @staticmethod
    def CopyArray(SourceArray:Array) -> Array:
        """ CopyArray(SourceArray: Array) -> Array """
        ...

    @staticmethod
    def CursorToIPicture(curs:Cursor) -> object:
        """ CursorToIPicture(curs: Cursor) -> object """
        ...

    @staticmethod
    def Eqv(a:bool, b:bool) -> bool:
        """
        Eqv(a: bool, b: bool) -> bool
        Eqv(a: Byte, b: Byte) -> Byte
        Eqv(a: Int16, b: Int16) -> Int16
        Eqv(a: int, b: int) -> int
        Eqv(a: Int64, b: Int64) -> Int64
        Eqv(a: object, b: object) -> object
        """
        ...

    @staticmethod
    def FontChangeBold(CurrentFont:Font, Bold:bool) -> Font:
        """ FontChangeBold(CurrentFont: Font, Bold: bool) -> Font """
        ...

    @staticmethod
    def FontChangeGdiCharSet(CurrentFont:Font, GdiCharSet:Byte) -> Font:
        """ FontChangeGdiCharSet(CurrentFont: Font, GdiCharSet: Byte) -> Font """
        ...

    @staticmethod
    def FontChangeItalic(CurrentFont:Font, Italic:bool) -> Font:
        """ FontChangeItalic(CurrentFont: Font, Italic: bool) -> Font """
        ...

    @staticmethod
    def FontChangeName(CurrentFont:Font, Name:str) -> Font:
        """ FontChangeName(CurrentFont: Font, Name: str) -> Font """
        ...

    @staticmethod
    def FontChangeSize(CurrentFont:Font, Size:Single) -> Font:
        """ FontChangeSize(CurrentFont: Font, Size: Single) -> Font """
        ...

    @staticmethod
    def FontChangeStrikeout(CurrentFont:Font, Strikeout:bool) -> Font:
        """ FontChangeStrikeout(CurrentFont: Font, Strikeout: bool) -> Font """
        ...

    @staticmethod
    def FontChangeUnderline(CurrentFont:Font, Underline:bool) -> Font:
        """ FontChangeUnderline(CurrentFont: Font, Underline: bool) -> Font """
        ...

    @staticmethod
    def FontToIFont(fnt:Font) -> object:
        """ FontToIFont(fnt: Font) -> object """
        ...

    @staticmethod
    def Format(Expression:object, Style:str, DayOfWeek:FirstDayOfWeek, WeekOfYear:FirstWeekOfYear) -> str:
        """ Format(Expression: object, Style: str, DayOfWeek: FirstDayOfWeek, WeekOfYear: FirstWeekOfYear) -> str """
        ...

    @staticmethod
    def FromPixelsUserHeight(Height:float, ScaleHeight:float, OriginalHeightInPixels:int) -> float:
        """ FromPixelsUserHeight(Height: float, ScaleHeight: float, OriginalHeightInPixels: int) -> float """
        ...

    @staticmethod
    def FromPixelsUserWidth(Width:float, ScaleWidth:float, OriginalWidthInPixels:int) -> float:
        """ FromPixelsUserWidth(Width: float, ScaleWidth: float, OriginalWidthInPixels: int) -> float """
        ...

    @staticmethod
    def FromPixelsUserX(X:float, ScaleLeft:float, ScaleWidth:float, OriginalWidthInPixels:int) -> float:
        """ FromPixelsUserX(X: float, ScaleLeft: float, ScaleWidth: float, OriginalWidthInPixels: int) -> float """
        ...

    @staticmethod
    def FromPixelsUserY(Y:float, ScaleTop:float, ScaleHeight:float, OriginalHeightInPixels:int) -> float:
        """ FromPixelsUserY(Y: float, ScaleTop: float, ScaleHeight: float, OriginalHeightInPixels: int) -> float """
        ...

    @staticmethod
    def FromPixelsX(X:float, ToScale:ScaleMode) -> float:
        """ FromPixelsX(X: float, ToScale: ScaleMode) -> float """
        ...

    @staticmethod
    def FromPixelsY(Y:float, ToScale:ScaleMode) -> float:
        """ FromPixelsY(Y: float, ToScale: ScaleMode) -> float """
        ...

    @staticmethod
    def GetActiveControl() -> Control:
        """ GetActiveControl() -> Control """
        ...

    @staticmethod
    def GetCancel(btn:Button) -> bool:
        """ GetCancel(btn: Button) -> bool """
        ...

    @staticmethod
    def GetDefault(btn:Button) -> bool:
        """ GetDefault(btn: Button) -> bool """
        ...

    @staticmethod
    def GetEXEName() -> str:
        """ GetEXEName() -> str """
        ...

    @staticmethod
    def GetHInstance() -> IntPtr:
        """ GetHInstance() -> IntPtr """
        ...

    @staticmethod
    def GetItemData(Control:Control, Index:int) -> int:
        """ GetItemData(Control: Control, Index: int) -> int """
        ...

    @staticmethod
    def GetItemString(Control:Control, Index:int) -> str:
        """ GetItemString(Control: Control, Index: int) -> str """
        ...

    @staticmethod
    def GetPath() -> str:
        """ GetPath() -> str """
        ...

    @staticmethod
    def IconToIPicture(ico:Icon) -> object:
        """ IconToIPicture(ico: Icon) -> object """
        ...

    @staticmethod
    def IFontToFont(objFnt:object) -> Font:
        """ IFontToFont(objFnt: object) -> Font """
        ...

    @staticmethod
    def ImageToIPicture(img:Image) -> object:
        """ ImageToIPicture(img: Image) -> object """
        ...

    @staticmethod
    def ImageToIPictureDisp(img:Image) -> object:
        """ ImageToIPictureDisp(img: Image) -> object """
        ...

    @staticmethod
    def Imp(a:bool, b:bool) -> bool:
        """
        Imp(a: bool, b: bool) -> bool
        Imp(a: Byte, b: Byte) -> Byte
        Imp(a: Int16, b: Int16) -> Int16
        Imp(a: int, b: int) -> int
        Imp(a: Int64, b: Int64) -> Int64
        Imp(a: object, b: object) -> object
        """
        ...

    @staticmethod
    def IPictureDispToImage(pict:object) -> Image:
        """ IPictureDispToImage(pict: object) -> Image """
        ...

    @staticmethod
    def IPictureToImage(pict:object) -> Image:
        """ IPictureToImage(pict: object) -> Image """
        ...

    @staticmethod
    def LoadResData(ID:object, restype:object, Culture:CultureInfo = ...) -> object:
        """
        LoadResData(ID: object, restype: object) -> object
        LoadResData(ID: object, restype: object, Culture: CultureInfo) -> object
        """
        ...

    @staticmethod
    def LoadResPicture(ID:object, restype:LoadResConstants, Culture:CultureInfo = ...) -> object:
        """
        LoadResPicture(ID: object, restype: LoadResConstants) -> object
        LoadResPicture(ID: object, restype: LoadResConstants, Culture: CultureInfo) -> object
        """
        ...

    @staticmethod
    def LoadResString(ID:int, Culture:CultureInfo = ...) -> str:
        """
        LoadResString(ID: int) -> str
        LoadResString(ID: int, Culture: CultureInfo) -> str
        """
        ...

    @staticmethod
    def PixelsToTwipsX(X:float) -> float:
        """ PixelsToTwipsX(X: float) -> float """
        ...

    @staticmethod
    def PixelsToTwipsY(Y:float) -> float:
        """ PixelsToTwipsY(Y: float) -> float """
        ...

    @staticmethod
    def SendKeys(Keys:str, Wait:bool): # -> 
        """ SendKeys(Keys: str, Wait: bool) """
        ...

    @staticmethod
    def SetCancel(btn:Button, Cancel:bool): # -> 
        """ SetCancel(btn: Button, Cancel: bool) """
        ...

    @staticmethod
    def SetDefault(btn:Button, Default:bool): # -> 
        """ SetDefault(btn: Button, Default: bool) """
        ...

    @staticmethod
    def SetItemData(Control:Control, Index:int, ItemData:int): # -> 
        """ SetItemData(Control: Control, Index: int, ItemData: int) """
        ...

    @staticmethod
    def SetItemString(Control:Control, Index:int, ItemString:str): # -> 
        """ SetItemString(Control: Control, Index: int, ItemString: str) """
        ...

    @staticmethod
    def SetResourceBaseName(*__args:str): # -> 
        """ SetResourceBaseName(ProjectNamespace: str, BaseFileName: str)SetResourceBaseName(BaseFileName: str) """
        ...

    @staticmethod
    def ShowForm(Form:Form, Modal:int, OwnerForm:Form): # -> 
        """ ShowForm(Form: Form, Modal: int, OwnerForm: Form) """
        ...

    @staticmethod
    def TabLayout(Args:Array) -> str:
        """ TabLayout(*Args: Array[object]) -> str """
        ...

    @staticmethod
    def ToPixelsUserHeight(Height:float, ScaleHeight:float, OriginalHeightInPixels:int) -> float:
        """ ToPixelsUserHeight(Height: float, ScaleHeight: float, OriginalHeightInPixels: int) -> float """
        ...

    @staticmethod
    def ToPixelsUserWidth(Width:float, ScaleWidth:float, OriginalWidthInPixels:int) -> float:
        """ ToPixelsUserWidth(Width: float, ScaleWidth: float, OriginalWidthInPixels: int) -> float """
        ...

    @staticmethod
    def ToPixelsUserX(X:float, ScaleLeft:float, ScaleWidth:float, OriginalWidthInPixels:int) -> float:
        """ ToPixelsUserX(X: float, ScaleLeft: float, ScaleWidth: float, OriginalWidthInPixels: int) -> float """
        ...

    @staticmethod
    def ToPixelsUserY(Y:float, ScaleTop:float, ScaleHeight:float, OriginalHeightInPixels:int) -> float:
        """ ToPixelsUserY(Y: float, ScaleTop: float, ScaleHeight: float, OriginalHeightInPixels: int) -> float """
        ...

    @staticmethod
    def ToPixelsX(X:float, FromScale:ScaleMode) -> float:
        """ ToPixelsX(X: float, FromScale: ScaleMode) -> float """
        ...

    @staticmethod
    def ToPixelsY(Y:float, FromScale:ScaleMode) -> float:
        """ ToPixelsY(Y: float, FromScale: ScaleMode) -> float """
        ...

    @staticmethod
    def TwipsPerPixelX() -> Single:
        """ TwipsPerPixelX() -> Single """
        ...

    @staticmethod
    def TwipsPerPixelY() -> Single:
        """ TwipsPerPixelY() -> Single """
        ...

    @staticmethod
    def TwipsToPixelsX(X:float) -> float:
        """ TwipsToPixelsX(X: float) -> float """
        ...

    @staticmethod
    def TwipsToPixelsY(Y:float) -> float:
        """ TwipsToPixelsY(Y: float) -> float """
        ...

    @staticmethod
    def ValidateControls(Form): # ->  # Not found arg types: {'Form': 'ContainerControl'}
        """ ValidateControls(Form: ContainerControl) """
        ...

    @staticmethod
    def WhatsThisMode(Form:Form): # -> 
        """ WhatsThisMode(Form: Form) """
        ...

    @staticmethod
    def ZOrder(Control:Control, Position:int): # -> 
        """ ZOrder(Control: Control, Position: int) """
        ...


class TabControlArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    TabControlArray()
    TabControlArray(Container: IContainer)
    """
    def GetIndex(self, o:TabControl) -> Int16:
        """ GetIndex(self: TabControlArray, o: TabControl) -> Int16 """
        ...

    def ResetIndex(self, o:TabControl): # -> 
        """ ResetIndex(self: TabControlArray, o: TabControl) """
        ...

    def SetIndex(self, o:TabControl, Index:Int16): # -> 
        """ SetIndex(self: TabControlArray, o: TabControl, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:TabControl) -> bool:
        """ ShouldSerializeIndex(self: TabControlArray, o: TabControl) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    Deselected = ...
    Deselecting = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    DrawItem = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    RightToLeftLayoutChanged = ...
    Selected = ...
    SelectedIndexChanged = ...
    Selecting = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class TextBoxArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    TextBoxArray()
    TextBoxArray(Container: IContainer)
    """
    def GetIndex(self, o:TextBox) -> Int16:
        """ GetIndex(self: TextBoxArray, o: TextBox) -> Int16 """
        ...

    def ResetIndex(self, o:TextBox): # -> 
        """ ResetIndex(self: TextBoxArray, o: TextBox) """
        ...

    def SetIndex(self, o:TextBox, Index:Int16): # -> 
        """ SetIndex(self: TextBoxArray, o: TextBox, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:TextBox) -> bool:
        """ ShouldSerializeIndex(self: TextBoxArray, o: TextBox) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AcceptsTabChanged = ...
    AutoSizeChanged = ...
    BackColorChanged = ...
    BindingContextChanged = ...
    BorderStyleChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    HideSelectionChanged = ...
    ImeModeChanged = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    ModifiedChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    MultilineChanged = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    ReadOnlyChanged = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextAlignChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class TimerArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    TimerArray()
    TimerArray(Container: IContainer)
    """
    def GetIndex(self, o:Timer) -> Int16:
        """ GetIndex(self: TimerArray, o: Timer) -> Int16 """
        ...

    def ResetIndex(self, o:Timer): # -> 
        """ ResetIndex(self: TimerArray, o: Timer) """
        ...

    def SetIndex(self, o:Timer, Index:Int16): # -> 
        """ SetIndex(self: TimerArray, o: Timer, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o:Timer) -> bool:
        """ ShouldSerializeIndex(self: TimerArray, o: Timer) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    components = ...
    controlAddedAtDesignTime = ...
    controls = ...
    fIsEndInitCalled = ...
    indices = ...
    Tick = ...


class ToolBarArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    ToolBarArray()
    ToolBarArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'ToolBar'}
        """ GetIndex(self: ToolBarArray, o: ToolBar) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'ToolBar'}
        """ ResetIndex(self: ToolBarArray, o: ToolBar) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'ToolBar'}
        """ SetIndex(self: ToolBarArray, o: ToolBar, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'ToolBar'}
        """ ShouldSerializeIndex(self: ToolBarArray, o: ToolBar) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AutoSizeChanged = ...
    BindingContextChanged = ...
    ButtonClick = ...
    ButtonDropDown = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class ToolStripArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    ToolStripArray()
    ToolStripArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'ToolStrip'}
        """ GetIndex(self: ToolStripArray, o: ToolStrip) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'ToolStrip'}
        """ ResetIndex(self: ToolStripArray, o: ToolStrip) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'ToolStrip'}
        """ SetIndex(self: ToolStripArray, o: ToolStrip, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'ToolStrip'}
        """ ShouldSerializeIndex(self: ToolStripArray, o: ToolStrip) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AutoSizeChanged = ...
    BackColorChanged = ...
    BackgroundImageChanged = ...
    BackgroundImageLayoutChanged = ...
    BeginDrag = ...
    BindingContextChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    controlAddedAtDesignTime = ...
    controls = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    EndDrag = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    ItemAdded = ...
    ItemClicked = ...
    ItemRemoved = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    LayoutCompleted = ...
    LayoutStyleChanged = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    PaddingChanged = ...
    Paint = ...
    PaintGrip = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    Scroll = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    TextChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class ToolStripMenuItemArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    ToolStripMenuItemArray()
    ToolStripMenuItemArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'ToolStripMenuItem'}
        """ GetIndex(self: ToolStripMenuItemArray, o: ToolStripMenuItem) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'ToolStripMenuItem'}
        """ ResetIndex(self: ToolStripMenuItemArray, o: ToolStripMenuItem) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'ToolStripMenuItem'}
        """ SetIndex(self: ToolStripMenuItemArray, o: ToolStripMenuItem, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'ToolStripMenuItem'}
        """ ShouldSerializeIndex(self: ToolStripMenuItemArray, o: ToolStripMenuItem) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BackColorChanged = ...
    CheckedChanged = ...
    CheckStateChanged = ...
    Click = ...
    components = ...
    controlAddedAtDesignTime = ...
    controls = ...
    DisplayStyleChanged = ...
    DoubleClick = ...
    DropDownClosed = ...
    DropDownItemClicked = ...
    DropDownOpened = ...
    DropDownOpening = ...
    EnabledChanged = ...
    fIsEndInitCalled = ...
    ForeColorChanged = ...
    indices = ...
    LocationChanged = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    OwnerChanged = ...
    Paint = ...
    QueryAccessibilityHelp = ...
    RightToLeftChanged = ...
    TextChanged = ...
    VisibleChanged = ...


class TreeViewArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    TreeViewArray()
    TreeViewArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'TreeView'}
        """ GetIndex(self: TreeViewArray, o: TreeView) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'TreeView'}
        """ ResetIndex(self: TreeViewArray, o: TreeView) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'TreeView'}
        """ SetIndex(self: TreeViewArray, o: TreeView, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'TreeView'}
        """ ShouldSerializeIndex(self: TreeViewArray, o: TreeView) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    AfterCheck = ...
    AfterCollapse = ...
    AfterExpand = ...
    AfterLabelEdit = ...
    AfterSelect = ...
    BackColorChanged = ...
    BeforeCheck = ...
    BeforeCollapse = ...
    BeforeExpand = ...
    BeforeLabelEdit = ...
    BeforeSelect = ...
    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    Click = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DoubleClick = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    DrawNode = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    FontChanged = ...
    ForeColorChanged = ...
    GiveFeedback = ...
    HelpRequested = ...
    ImeModeChanged = ...
    indices = ...
    ItemDrag = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseClick = ...
    MouseDoubleClick = ...
    MouseDown = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    MouseMove = ...
    MouseUp = ...
    Move = ...
    NodeMouseClick = ...
    NodeMouseDoubleClick = ...
    NodeMouseHover = ...
    PaddingChanged = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    RightToLeftChanged = ...
    RightToLeftLayoutChanged = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class UGUID: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    guid = ...


class UNAME: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    name = ...


class UpdateMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum UpdateMode, values: vbUpdateWhenPropertyChanges (1), vbUpdateWhenRowChanges (2), vbUsePropertyAttributes (0) """
    value__ = ...
    vbUpdateWhenPropertyChanges: UpdateMode = ...
    vbUpdateWhenRowChanges: UpdateMode = ...
    vbUsePropertyAttributes: UpdateMode = ...


class VScrollBarArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    VScrollBarArray()
    VScrollBarArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'VScrollBar'}
        """ GetIndex(self: VScrollBarArray, o: VScrollBar) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'VScrollBar'}
        """ ResetIndex(self: VScrollBarArray, o: VScrollBar) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'VScrollBar'}
        """ SetIndex(self: VScrollBarArray, o: VScrollBar, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'VScrollBar'}
        """ ShouldSerializeIndex(self: VScrollBarArray, o: VScrollBar) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    BindingContextChanged = ...
    CausesValidationChanged = ...
    ChangeUICues = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    CursorChanged = ...
    DockChanged = ...
    DragDrop = ...
    DragEnter = ...
    DragLeave = ...
    DragOver = ...
    EnabledChanged = ...
    Enter = ...
    fIsEndInitCalled = ...
    GiveFeedback = ...
    HelpRequested = ...
    indices = ...
    KeyDown = ...
    KeyPress = ...
    KeyUp = ...
    Layout = ...
    Leave = ...
    LocationChanged = ...
    MarginChanged = ...
    MouseCaptureChanged = ...
    MouseEnter = ...
    MouseHover = ...
    MouseLeave = ...
    Move = ...
    PaddingChanged = ...
    ParentChanged = ...
    QueryAccessibilityHelp = ...
    QueryContinueDrag = ...
    RegionChanged = ...
    Resize = ...
    Scroll = ...
    SizeChanged = ...
    StyleChanged = ...
    SystemColorsChanged = ...
    TabIndexChanged = ...
    TabStopChanged = ...
    Validated = ...
    Validating = ...
    ValueChanged = ...
    VisibleChanged = ...


class WebBrowserArray(IExtenderProvider, BaseControlArray): # skipped bases: <type 'IDisposable'>, <type 'ISupportInitialize'>, <type 'IComponent'>, <type 'object'>
    """
    WebBrowserArray()
    WebBrowserArray(Container: IContainer)
    """
    def GetIndex(self, o) -> Int16: # Not found arg types: {'o': 'WebBrowser'}
        """ GetIndex(self: WebBrowserArray, o: WebBrowser) -> Int16 """
        ...

    def ResetIndex(self, o): # ->  # Not found arg types: {'o': 'WebBrowser'}
        """ ResetIndex(self: WebBrowserArray, o: WebBrowser) """
        ...

    def SetIndex(self, o, Index:Int16): # ->  # Not found arg types: {'o': 'WebBrowser'}
        """ SetIndex(self: WebBrowserArray, o: WebBrowser, Index: Int16) """
        ...

    def ShouldSerializeIndex(self, o) -> bool: # Not found arg types: {'o': 'WebBrowser'}
        """ ShouldSerializeIndex(self: WebBrowserArray, o: WebBrowser) -> bool """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    CausesValidationChanged = ...
    ClientSizeChanged = ...
    components = ...
    ContextMenuChanged = ...
    ContextMenuStripChanged = ...
    ControlAdded = ...
    controlAddedAtDesignTime = ...
    ControlRemoved = ...
    controls = ...
    DockChanged = ...
    DocumentCompleted = ...
    FileDownload = ...
    fIsEndInitCalled = ...
    indices = ...
    LocationChanged = ...
    MarginChanged = ...
    Move = ...
    Navigated = ...
    Navigating = ...
    NewWindow = ...
    ParentChanged = ...
    ProgressChanged = ...
    RegionChanged = ...
    Resize = ...
    SizeChanged = ...
    SystemColorsChanged = ...
    Validated = ...
    Validating = ...
    VisibleChanged = ...


class WebClass: # skipped bases: <type 'object'>, <type 'object'>
    """ WebClass(UserWebClassName: str, WebClassFileName: str, ContainingClass: object) """
    @property
    def Name(self) -> str:
        """ Get: Name(self: WebClass) -> str """
        ...

    @property
    def NextItem(self) -> WebItem:
        """
        Get: NextItem(self: WebClass) -> WebItem
        Set: NextItem(self: WebClass) = value
        """
        ...

    @property
    def UrlData(self) -> str:
        """
        Get: UrlData(self: WebClass) -> str
        Set: UrlData(self: WebClass) = value
        """
        ...


    def ProcessEvents(self, Request:HttpRequest): # -> 
        """ ProcessEvents(self: WebClass, Request: HttpRequest) """
        ...

    def URLFor(self, *__args) -> str:
        """
        URLFor(self: WebClass, obj: WebItem, EventName: str) -> str
        URLFor(self: WebClass, objName: str, EventName: str) -> str
        """
        ...


class WebClassContainingClassNotOptional(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebClassContainingClassNotOptional() """
    SerializeObjectState = ...


class WebClassCouldNotFindEvent(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    WebClassCouldNotFindEvent()
    WebClassCouldNotFindEvent(eventName: str)
    """
    SerializeObjectState = ...


class WebClassNextItemCannotBeCurrentWebItem(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebClassNextItemCannotBeCurrentWebItem() """
    SerializeObjectState = ...


class WebClassNextItemRespondNotFound(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebClassNextItemRespondNotFound() """
    SerializeObjectState = ...


class WebClassUserWebClassNameNotOptional(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebClassUserWebClassNameNotOptional() """
    SerializeObjectState = ...


class WebClassWebClassFileNameNotOptional(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebClassWebClassFileNameNotOptional() """
    SerializeObjectState = ...


class WebClassWebItemNotValid(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebClassWebItemNotValid(itemName: str) """
    SerializeObjectState = ...


class WebItem: # skipped bases: <type 'object'>, <type 'object'>
    """ WebItem(Name: str, AssociatedWebClass: WebClass, HtmlTemplateFilename: str) """
    @property
    def Name(self) -> str:
        """ Get: Name(self: WebItem) -> str """
        ...

    @property
    def ReScanReplacements(self) -> bool:
        """
        Get: ReScanReplacements(self: WebItem) -> bool
        Set: ReScanReplacements(self: WebItem) = value
        """
        ...

    @property
    def TagPrefix(self) -> str:
        """
        Get: TagPrefix(self: WebItem) -> str
        Set: TagPrefix(self: WebItem) = value
        """
        ...


    def WriteTemplate(self, Response:HttpResponse, HtmlTemplateFilename:str): # -> 
        """ WriteTemplate(self: WebItem, Response: HttpResponse, HtmlTemplateFilename: str) """
        ...


class WebItemAssociatedWebClassNotOptional(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebItemAssociatedWebClassNotOptional() """
    SerializeObjectState = ...


class WebItemClosingTagNotFound(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebItemClosingTagNotFound(TagName: str) """
    SerializeObjectState = ...


class WebItemCouldNotLoadEmbeddedResource(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebItemCouldNotLoadEmbeddedResource() """
    SerializeObjectState = ...


class WebItemCouldNotLoadTemplateFile(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebItemCouldNotLoadTemplateFile() """
    SerializeObjectState = ...


class WebItemNameNotOptional(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebItemNameNotOptional() """
    SerializeObjectState = ...


class WebItemNoTemplateSpecified(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebItemNoTemplateSpecified() """
    SerializeObjectState = ...


class WebItemTooManyNestedTags(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebItemTooManyNestedTags() """
    SerializeObjectState = ...


class WebItemUnexpectedErrorReadingTemplateFile(Exception): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """ WebItemUnexpectedErrorReadingTemplateFile(innerMessage: str) """
    SerializeObjectState = ...


class ZOrderConstants(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ZOrderConstants, values: BringToFront (0), SendToBack (1) """
    BringToFront: ZOrderConstants = ...
    SendToBack: ZOrderConstants = ...
    value__ = ...


