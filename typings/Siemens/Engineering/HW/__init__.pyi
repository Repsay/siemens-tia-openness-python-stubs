# encoding: utf-8
# module Siemens.Engineering.HW calls itself HW
# from Siemens.Engineering, Version=17.0.0.0, Culture=neutral, PublicKeyToken=d29ec89bac048f84, Siemens.Engineering.AddIn, Version=17.0.0.0, Culture=neutral, PublicKeyToken=65b871d8372d6a8f
# by generator 1.145
""" no doc """
from __future__ import annotations
from Siemens.Engineering import (IEngineeringAssociation,
    IEngineeringComposition, IEngineeringObject, IEngineeringServiceProvider)

from Siemens.Engineering.Compare import CompareResult

from Siemens.Engineering.HW.Features import (AddressControllerAssociation,
    HwIdentifierControllerAssociation, NetworkInterfaceAssociation)

from Siemens.Engineering.Library.MasterCopies import (IMasterCopySource,
    IMasterCopyTarget, MasterCopy)

from Siemens.Engineering.SW.Blocks import OB

from Siemens.Engineering.SW.WatchAndForceTables import (PlcForceTable,
    PlcWatchTable)

from System import Enum, IEquatable, Int64

from System.Collections import IList

from System.Security import SecureString

"""The following names are not found in the module: (
    IInternalAssociationAccess, IInternalCompositionAccess,
    IInternalObjectAccess, field#)
"""

from Siemens import IInternalAssociationAccess, IInternalCompositionAccess, IInternalObjectAccess

# no functions
# classes

class Activation(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Activation

    enum Activation, values: PowerStageActive (1), PowerStageActiveStopCurrent (2), PowerStageDisabled (0)
    """
    PowerStageActive: Activation = ...
    PowerStageActiveStopCurrent: Activation = ...
    PowerStageDisabled: Activation = ...
    value__ = ...


class ActivePowerLowerTripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ActivePowerLowerTripLevelResponse

    enum ActivePowerLowerTripLevelResponse, values: Deactivated (0), Signal (1), Trip (3)
    """
    Deactivated: ActivePowerLowerTripLevelResponse = ...
    Signal: ActivePowerLowerTripLevelResponse = ...
    Trip: ActivePowerLowerTripLevelResponse = ...
    value__ = ...


class ActivePowerLowerWarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ActivePowerLowerWarningLevelResponse

    enum ActivePowerLowerWarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: ActivePowerLowerWarningLevelResponse = ...
    Signal: ActivePowerLowerWarningLevelResponse = ...
    value__ = ...
    Warn: ActivePowerLowerWarningLevelResponse = ...


class ActivePowerUpperWarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ActivePowerUpperWarningLevelResponse

    enum ActivePowerUpperWarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: ActivePowerUpperWarningLevelResponse = ...
    Signal: ActivePowerUpperWarningLevelResponse = ...
    value__ = ...
    Warn: ActivePowerUpperWarningLevelResponse = ...


class Address(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ The object holding the address data """
    @property
    def AddressControllers(self) -> AddressControllerAssociation:
        """
        Address's associated AddressControllers

        Get: AddressControllers(self: Address) -> AddressControllerAssociation
        """
        ...

    @property
    def IoType(self) -> AddressIoType:
        """
        The IO type of the address

        Get: IoType(self: Address) -> AddressIoType
        """
        ...

    @property
    def Length(self) -> int:
        """
        Length of the address

        Get: Length(self: Address) -> int

        Set: Length(self: Address) = value
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: Address) -> IEngineeringObject
        """
        ...

    @property
    def StartAddress(self) -> int:
        """
        The start address of this address

        Get: StartAddress(self: Address) -> int

        Set: StartAddress(self: Address) = value
        """
        ...


    def AssignProcessImageToOrganizationBlock(self, organizationBlock:OB): # ->
        """
        AssignProcessImageToOrganizationBlock(self: Address, organizationBlock: OB)

            Assign the current process image to the OB.

            organizationBlock: The organizational block to assign.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: Address) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: Address) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class AddressAssociation(IEquatable, IEngineeringAssociation, IInternalAssociationAccess): # skipped bases: <type 'IInternalBaseAccess'>, <type 'IEnumerable'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Associated addresses """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent..

        Get: Parent(self: AddressAssociation) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: AddressAssociation) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: AddressAssociation) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Address](enumerable: IEnumerable[Address], value: Address) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class AddressComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of Addresses """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: AddressComposition) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: AddressComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: AddressComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Address](enumerable: IEnumerable[Address], value: Address) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class AddressContext(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    AddressContext of an address

    enum AddressContext, values: Device (1), Head (2), None (0)
    """
    Device: AddressContext = ...
    Head: AddressContext = ...
    value__ = ...


class AddressIoType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Address IO type

    enum AddressIoType, values: Diagnosis (64), Input (1), None (0), Output (2), Substitute (16)
    """
    Diagnosis: AddressIoType = ...
    Input: AddressIoType = ...
    Output: AddressIoType = ...
    Substitute: AddressIoType = ...
    value__ = ...


class AM1InputsActiveInputs(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1InputsActiveInputs

    enum AM1InputsActiveInputs, values: Value1Input (0), Value2Inputs (1)
    """
    Value1Input: AM1InputsActiveInputs = ...
    Value2Inputs: AM1InputsActiveInputs = ...
    value__ = ...


class AM1InputsInputSignal(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1InputsInputSignal

    enum AM1InputsInputSignal, values: Value0To20ma (0), Value4To20ma (1)
    """
    Value0To20ma: AM1InputsInputSignal = ...
    Value4To20ma: AM1InputsInputSignal = ...
    value__ = ...


class AM1InputsResponseToOpenCircuit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1InputsResponseToOpenCircuit

    enum AM1InputsResponseToOpenCircuit, values: Signal (0), Trip (3), Warn (2)
    """
    Signal: AM1InputsResponseToOpenCircuit = ...
    Trip: AM1InputsResponseToOpenCircuit = ...
    value__ = ...
    Warn: AM1InputsResponseToOpenCircuit = ...


class AM1LowerTripLevelActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1LowerTripLevelActiveStatus

    enum AM1LowerTripLevelActiveStatus, values: AlwaysExceptWithTpfOn (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpfOn: AM1LowerTripLevelActiveStatus = ...
    AlwaysOn: AM1LowerTripLevelActiveStatus = ...
    IfMotorIsRunningExceptTpf: AM1LowerTripLevelActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: AM1LowerTripLevelActiveStatus = ...
    value__ = ...


class AM1LowerTripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1LowerTripLevelResponse

    enum AM1LowerTripLevelResponse, values: Deactivated (0), Signal (1), Trip (3)
    """
    Deactivated: AM1LowerTripLevelResponse = ...
    Signal: AM1LowerTripLevelResponse = ...
    Trip: AM1LowerTripLevelResponse = ...
    value__ = ...


class AM1LowerWarningLevelActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1LowerWarningLevelActiveStatus

    enum AM1LowerWarningLevelActiveStatus, values: AlwaysExceptWithTpfOn (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpfOn: AM1LowerWarningLevelActiveStatus = ...
    AlwaysOn: AM1LowerWarningLevelActiveStatus = ...
    IfMotorIsRunningExceptTpf: AM1LowerWarningLevelActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: AM1LowerWarningLevelActiveStatus = ...
    value__ = ...


class AM1LowerWarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1LowerWarningLevelResponse

    enum AM1LowerWarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: AM1LowerWarningLevelResponse = ...
    Signal: AM1LowerWarningLevelResponse = ...
    value__ = ...
    Warn: AM1LowerWarningLevelResponse = ...


class AM1OutputsOutputSignal(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1OutputsOutputSignal

    enum AM1OutputsOutputSignal, values: Value0To20ma (0), Value4To20ma (1)
    """
    Value0To20ma: AM1OutputsOutputSignal = ...
    Value4To20ma: AM1OutputsOutputSignal = ...
    value__ = ...


class AM1UpperTripLevelActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1UpperTripLevelActiveStatus

    enum AM1UpperTripLevelActiveStatus, values: AlwaysExceptWithTpfOn (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpfOn: AM1UpperTripLevelActiveStatus = ...
    AlwaysOn: AM1UpperTripLevelActiveStatus = ...
    IfMotorIsRunningExceptTpf: AM1UpperTripLevelActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: AM1UpperTripLevelActiveStatus = ...
    value__ = ...


class AM1UpperTripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1UpperTripLevelResponse

    enum AM1UpperTripLevelResponse, values: Deactivated (0), Signal (1), Trip (3)
    """
    Deactivated: AM1UpperTripLevelResponse = ...
    Signal: AM1UpperTripLevelResponse = ...
    Trip: AM1UpperTripLevelResponse = ...
    value__ = ...


class AM1UpperWarningLevelActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1UpperWarningLevelActiveStatus

    enum AM1UpperWarningLevelActiveStatus, values: AlwaysExceptWithTpfOn (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpfOn: AM1UpperWarningLevelActiveStatus = ...
    AlwaysOn: AM1UpperWarningLevelActiveStatus = ...
    IfMotorIsRunningExceptTpf: AM1UpperWarningLevelActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: AM1UpperWarningLevelActiveStatus = ...
    value__ = ...


class AM1UpperWarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM1UpperWarningLevelResponse

    enum AM1UpperWarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: AM1UpperWarningLevelResponse = ...
    Signal: AM1UpperWarningLevelResponse = ...
    value__ = ...
    Warn: AM1UpperWarningLevelResponse = ...


class AM2InputsActiveInputs(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2InputsActiveInputs

    enum AM2InputsActiveInputs, values: Value1Input (0), Value2Inputs (1)
    """
    Value1Input: AM2InputsActiveInputs = ...
    Value2Inputs: AM2InputsActiveInputs = ...
    value__ = ...


class AM2InputsInputSignal(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2InputsInputSignal

    enum AM2InputsInputSignal, values: Value0To20ma (0), Value4To20ma (1)
    """
    Value0To20ma: AM2InputsInputSignal = ...
    Value4To20ma: AM2InputsInputSignal = ...
    value__ = ...


class AM2InputsResponseToOpenCircuit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2InputsResponseToOpenCircuit

    enum AM2InputsResponseToOpenCircuit, values: Signal (0), Trip (3), Warn (2)
    """
    Signal: AM2InputsResponseToOpenCircuit = ...
    Trip: AM2InputsResponseToOpenCircuit = ...
    value__ = ...
    Warn: AM2InputsResponseToOpenCircuit = ...


class AM2LowerTripLevelActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2LowerTripLevelActiveStatus

    enum AM2LowerTripLevelActiveStatus, values: AlwaysExceptWithTpfOn (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpfOn: AM2LowerTripLevelActiveStatus = ...
    AlwaysOn: AM2LowerTripLevelActiveStatus = ...
    IfMotorIsRunningExceptTpf: AM2LowerTripLevelActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: AM2LowerTripLevelActiveStatus = ...
    value__ = ...


class AM2LowerTripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2LowerTripLevelResponse

    enum AM2LowerTripLevelResponse, values: Deactivated (0), Signal (1), Trip (3)
    """
    Deactivated: AM2LowerTripLevelResponse = ...
    Signal: AM2LowerTripLevelResponse = ...
    Trip: AM2LowerTripLevelResponse = ...
    value__ = ...


class AM2LowerWarningLevelActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2LowerWarningLevelActiveStatus

    enum AM2LowerWarningLevelActiveStatus, values: AlwaysExceptWithTpfOn (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpfOn: AM2LowerWarningLevelActiveStatus = ...
    AlwaysOn: AM2LowerWarningLevelActiveStatus = ...
    IfMotorIsRunningExceptTpf: AM2LowerWarningLevelActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: AM2LowerWarningLevelActiveStatus = ...
    value__ = ...


class AM2LowerWarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2LowerWarningLevelResponse

    enum AM2LowerWarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: AM2LowerWarningLevelResponse = ...
    Signal: AM2LowerWarningLevelResponse = ...
    value__ = ...
    Warn: AM2LowerWarningLevelResponse = ...


class AM2OutputsOutputSignal(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2OutputsOutputSignal

    enum AM2OutputsOutputSignal, values: Value0To20ma (0), Value4To20ma (1)
    """
    Value0To20ma: AM2OutputsOutputSignal = ...
    Value4To20ma: AM2OutputsOutputSignal = ...
    value__ = ...


class AM2UpperTripLevelActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2UpperTripLevelActiveStatus

    enum AM2UpperTripLevelActiveStatus, values: AlwaysExceptWithTpfOn (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpfOn: AM2UpperTripLevelActiveStatus = ...
    AlwaysOn: AM2UpperTripLevelActiveStatus = ...
    IfMotorIsRunningExceptTpf: AM2UpperTripLevelActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: AM2UpperTripLevelActiveStatus = ...
    value__ = ...


class AM2UpperTripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2UpperTripLevelResponse

    enum AM2UpperTripLevelResponse, values: Deactivated (0), Signal (1), Trip (3)
    """
    Deactivated: AM2UpperTripLevelResponse = ...
    Signal: AM2UpperTripLevelResponse = ...
    Trip: AM2UpperTripLevelResponse = ...
    value__ = ...


class AM2UpperWarningLevelActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2UpperWarningLevelActiveStatus

    enum AM2UpperWarningLevelActiveStatus, values: AlwaysExceptWithTpfOn (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpfOn: AM2UpperWarningLevelActiveStatus = ...
    AlwaysOn: AM2UpperWarningLevelActiveStatus = ...
    IfMotorIsRunningExceptTpf: AM2UpperWarningLevelActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: AM2UpperWarningLevelActiveStatus = ...
    value__ = ...


class AM2UpperWarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AM2UpperWarningLevelResponse

    enum AM2UpperWarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: AM2UpperWarningLevelResponse = ...
    Signal: AM2UpperWarningLevelResponse = ...
    value__ = ...
    Warn: AM2UpperWarningLevelResponse = ...


class AmplifierBoost(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AmplifierBoost

    enum AmplifierBoost, values: Activated (1), Deactivated (0), No (2), Yes (3)
    """
    Activated: AmplifierBoost = ...
    Deactivated: AmplifierBoost = ...
    No: AmplifierBoost = ...
    value__ = ...
    Yes: AmplifierBoost = ...


class ApplicationControlFunction(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ApplicationControlFunction

    enum ApplicationControlFunction, values: DahlanderReversingStarter (49), DahlanderStarter (48), DirectStarter (16), MoldedCaseCircuitBreaker (18), OverloadRelay (0), PoleChangingReversingStarter (65), PoleChangingStarter (64), Positioner1 (96), Positioner2 (97), Positioner3 (98), Positioner4 (99), Positioner5 (100), ReversingStarter (17), SoftStarter (112), SoftStarterWithReversingContactor (113), SolenoidValve (80), StarDeltaReversingStarter (33), StarDeltaStarter (32)
    """
    DahlanderReversingStarter: ApplicationControlFunction = ...
    DahlanderStarter: ApplicationControlFunction = ...
    DirectStarter: ApplicationControlFunction = ...
    MoldedCaseCircuitBreaker: ApplicationControlFunction = ...
    OverloadRelay: ApplicationControlFunction = ...
    PoleChangingReversingStarter: ApplicationControlFunction = ...
    PoleChangingStarter: ApplicationControlFunction = ...
    Positioner1: ApplicationControlFunction = ...
    Positioner2: ApplicationControlFunction = ...
    Positioner3: ApplicationControlFunction = ...
    Positioner4: ApplicationControlFunction = ...
    Positioner5: ApplicationControlFunction = ...
    ReversingStarter: ApplicationControlFunction = ...
    SoftStarter: ApplicationControlFunction = ...
    SoftStarterWithReversingContactor: ApplicationControlFunction = ...
    SolenoidValve: ApplicationControlFunction = ...
    StarDeltaReversingStarter: ApplicationControlFunction = ...
    StarDeltaStarter: ApplicationControlFunction = ...
    value__ = ...


class ApplicationControllerActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ApplicationControllerActive

    enum ApplicationControllerActive, values: Active (1), Deactivated (0)
    """
    Active: ApplicationControllerActive = ...
    Deactivated: ApplicationControllerActive = ...
    value__ = ...


class AsiProfileID(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AsiProfileID

    enum AsiProfileID, values: Value0 (0), Value1 (1), Value2 (2), Value3 (3), Value4 (4), Value5 (5), Value6 (6), Value7 (7), Value8 (8), Value9 (9), ValueA (10), ValueB (11), ValueC (12), ValueD (13), ValueE (14), ValueF (15)
    """
    Value0: AsiProfileID = ...
    Value1: AsiProfileID = ...
    Value2: AsiProfileID = ...
    Value3: AsiProfileID = ...
    Value4: AsiProfileID = ...
    Value5: AsiProfileID = ...
    Value6: AsiProfileID = ...
    Value7: AsiProfileID = ...
    Value8: AsiProfileID = ...
    Value9: AsiProfileID = ...
    ValueA: AsiProfileID = ...
    ValueB: AsiProfileID = ...
    ValueC: AsiProfileID = ...
    ValueD: AsiProfileID = ...
    ValueE: AsiProfileID = ...
    ValueF: AsiProfileID = ...
    value__ = ...


class AsiProfileID1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AsiProfileID1

    enum AsiProfileID1, values: Value0 (0), Value1 (1), Value2 (2), Value3 (3), Value4 (4), Value5 (5), Value6 (6), Value7 (7), Value8 (8), Value9 (9), ValueA (10), ValueB (11), ValueC (12), ValueD (13), ValueE (14), ValueF (15)
    """
    Value0: AsiProfileID1 = ...
    Value1: AsiProfileID1 = ...
    Value2: AsiProfileID1 = ...
    Value3: AsiProfileID1 = ...
    Value4: AsiProfileID1 = ...
    Value5: AsiProfileID1 = ...
    Value6: AsiProfileID1 = ...
    Value7: AsiProfileID1 = ...
    Value8: AsiProfileID1 = ...
    Value9: AsiProfileID1 = ...
    ValueA: AsiProfileID1 = ...
    ValueB: AsiProfileID1 = ...
    ValueC: AsiProfileID1 = ...
    ValueD: AsiProfileID1 = ...
    ValueE: AsiProfileID1 = ...
    ValueF: AsiProfileID1 = ...
    value__ = ...


class AsiProfileIO(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property AsiProfileIO

    enum AsiProfileIO, values: Value0 (0), Value1 (1), Value2 (2), Value3 (3), Value4 (4), Value5 (5), Value6 (6), Value7 (7), Value8 (8), Value9 (9), ValueA (10), ValueB (11), ValueC (12), ValueD (13), ValueE (14), ValueF (15)
    """
    Value0: AsiProfileIO = ...
    Value1: AsiProfileIO = ...
    Value2: AsiProfileIO = ...
    Value3: AsiProfileIO = ...
    Value4: AsiProfileIO = ...
    Value5: AsiProfileIO = ...
    Value6: AsiProfileIO = ...
    Value7: AsiProfileIO = ...
    Value8: AsiProfileIO = ...
    Value9: AsiProfileIO = ...
    ValueA: AsiProfileIO = ...
    ValueB: AsiProfileIO = ...
    ValueC: AsiProfileIO = ...
    ValueD: AsiProfileIO = ...
    ValueE: AsiProfileIO = ...
    ValueF: AsiProfileIO = ...
    value__ = ...


class BaseFrequency(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BaseFrequency

    enum BaseFrequency, values: Value20 (5), Value200 (2), Value2000 (8), Value4 (7), Value40 (4), Value400 (1), Value8 (6), Value80 (3), Value800 (0)
    """
    Value20: BaseFrequency = ...
    Value200: BaseFrequency = ...
    Value2000: BaseFrequency = ...
    Value4: BaseFrequency = ...
    Value40: BaseFrequency = ...
    Value400: BaseFrequency = ...
    Value8: BaseFrequency = ...
    Value80: BaseFrequency = ...
    Value800: BaseFrequency = ...
    value__ = ...


class BasicType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BasicType

    enum BasicType, values: None (0), Value1 (1), Value2 (2), Value3 (3)
    """
    Value1: BasicType = ...
    Value2: BasicType = ...
    Value3: BasicType = ...
    value__ = ...


class BasicUnitInputsDebouncingTimes(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BasicUnitInputsDebouncingTimes

    enum BasicUnitInputsDebouncingTimes, values: Value16 (1), Value26 (2), Value36 (3), Value6 (0)
    """
    Value16: BasicUnitInputsDebouncingTimes = ...
    Value26: BasicUnitInputsDebouncingTimes = ...
    Value36: BasicUnitInputsDebouncingTimes = ...
    Value6: BasicUnitInputsDebouncingTimes = ...
    value__ = ...


class BaudRate(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Devices baud rate

    enum BaudRate, values: Baud12000000 (10), Baud1500000 (7), Baud187500 (5), Baud19200 (2), Baud3000000 (8), Baud45450 (3), Baud500000 (6), Baud6000000 (9), Baud93750 (4), Baud9600 (1), None (0)
    """
    Baud12000000: BaudRate = ...
    Baud1500000: BaudRate = ...
    Baud187500: BaudRate = ...
    Baud19200: BaudRate = ...
    Baud3000000: BaudRate = ...
    Baud45450: BaudRate = ...
    Baud500000: BaudRate = ...
    Baud6000000: BaudRate = ...
    Baud93750: BaudRate = ...
    Baud9600: BaudRate = ...
    value__ = ...


class BehaviorOfCounterValueAfterCaptureDI0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BehaviorOfCounterValueAfterCaptureDI0

    enum BehaviorOfCounterValueAfterCaptureDI0, values: ContinueCounting (0), SetToStartValueAndContinueCounting (1)
    """
    ContinueCounting: BehaviorOfCounterValueAfterCaptureDI0 = ...
    SetToStartValueAndContinueCounting: BehaviorOfCounterValueAfterCaptureDI0 = ...
    value__ = ...


class BehaviorOfCounterValueAfterCaptureDI1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BehaviorOfCounterValueAfterCaptureDI1

    enum BehaviorOfCounterValueAfterCaptureDI1, values: ContinueCounting (0), SetToStartValueAndContinueCounting (1)
    """
    ContinueCounting: BehaviorOfCounterValueAfterCaptureDI1 = ...
    SetToStartValueAndContinueCounting: BehaviorOfCounterValueAfterCaptureDI1 = ...
    value__ = ...


class BehaviorOfCounterValueAfterCaptureDI2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BehaviorOfCounterValueAfterCaptureDI2

    enum BehaviorOfCounterValueAfterCaptureDI2, values: ContinueCounting (0), SetToStartValueAndContinueCounting (1)
    """
    ContinueCounting: BehaviorOfCounterValueAfterCaptureDI2 = ...
    SetToStartValueAndContinueCounting: BehaviorOfCounterValueAfterCaptureDI2 = ...
    value__ = ...


class BehaviorOfDI4(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BehaviorOfDI4

    enum BehaviorOfDI4, values: DigitalInputWithoutFunction (0), GateStartOrStopLevelTriggered (1)
    """
    DigitalInputWithoutFunction: BehaviorOfDI4 = ...
    GateStartOrStopLevelTriggered: BehaviorOfDI4 = ...
    value__ = ...


class BehaviorOfDI5(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BehaviorOfDI5

    enum BehaviorOfDI5, values: CountDirection (1), DigitalInputWithoutFunction (0)
    """
    CountDirection: BehaviorOfDI5 = ...
    DigitalInputWithoutFunction: BehaviorOfDI5 = ...
    value__ = ...


class BehaviorOfDI6(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BehaviorOfDI6

    enum BehaviorOfDI6, values: DigitalInputWithoutFunction (0), GateStartOrStopLevelTriggered (1)
    """
    DigitalInputWithoutFunction: BehaviorOfDI6 = ...
    GateStartOrStopLevelTriggered: BehaviorOfDI6 = ...
    value__ = ...


class BehaviorOfDI7(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BehaviorOfDI7

    enum BehaviorOfDI7, values: CountDirection (1), DigitalInputWithoutFunction (0)
    """
    CountDirection: BehaviorOfDI7 = ...
    DigitalInputWithoutFunction: BehaviorOfDI7 = ...
    value__ = ...


class BlockingCurrent(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BlockingCurrent

    enum BlockingCurrent, values: None (0), Value1000 (20), Value150 (3), Value200 (4), Value250 (5), Value300 (6), Value350 (7), Value400 (8), Value450 (9), Value500 (10), Value550 (11), Value600 (12), Value650 (13), Value700 (14), Value750 (15), Value800 (16), Value850 (17), Value900 (18), Value950 (19)
    """
    Value1000: BlockingCurrent = ...
    Value150: BlockingCurrent = ...
    Value200: BlockingCurrent = ...
    Value250: BlockingCurrent = ...
    Value300: BlockingCurrent = ...
    Value350: BlockingCurrent = ...
    Value400: BlockingCurrent = ...
    Value450: BlockingCurrent = ...
    Value500: BlockingCurrent = ...
    Value550: BlockingCurrent = ...
    Value600: BlockingCurrent = ...
    Value650: BlockingCurrent = ...
    Value700: BlockingCurrent = ...
    Value750: BlockingCurrent = ...
    Value800: BlockingCurrent = ...
    Value850: BlockingCurrent = ...
    Value900: BlockingCurrent = ...
    Value950: BlockingCurrent = ...
    value__ = ...


class BoostCurrent(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BoostCurrent

    enum BoostCurrent, values: CouldNotCalculateTheDynamicDisplayName (1), CouldNotCalculateTheDynamicDisplayName10 (10), CouldNotCalculateTheDynamicDisplayName11 (11), CouldNotCalculateTheDynamicDisplayName12 (12), CouldNotCalculateTheDynamicDisplayName13 (13), CouldNotCalculateTheDynamicDisplayName14 (14), CouldNotCalculateTheDynamicDisplayName15 (15), CouldNotCalculateTheDynamicDisplayName16 (16), CouldNotCalculateTheDynamicDisplayName17 (17), CouldNotCalculateTheDynamicDisplayName18 (18), CouldNotCalculateTheDynamicDisplayName19 (19), CouldNotCalculateTheDynamicDisplayName2 (2), CouldNotCalculateTheDynamicDisplayName20 (20), CouldNotCalculateTheDynamicDisplayName21 (21), CouldNotCalculateTheDynamicDisplayName22 (22), CouldNotCalculateTheDynamicDisplayName23 (23), CouldNotCalculateTheDynamicDisplayName24 (24), CouldNotCalculateTheDynamicDisplayName25 (25), CouldNotCalculateTheDynamicDisplayName26 (26), CouldNotCalculateTheDynamicDisplayName27 (27), CouldNotCalculateTheDynamicDisplayName28 (28), CouldNotCalculateTheDynamicDisplayName29 (29), CouldNotCalculateTheDynamicDisplayName3 (3), CouldNotCalculateTheDynamicDisplayName30 (30), CouldNotCalculateTheDynamicDisplayName31 (31), CouldNotCalculateTheDynamicDisplayName32 (32), CouldNotCalculateTheDynamicDisplayName33 (33), CouldNotCalculateTheDynamicDisplayName34 (34), CouldNotCalculateTheDynamicDisplayName35 (35), CouldNotCalculateTheDynamicDisplayName4 (4), CouldNotCalculateTheDynamicDisplayName5 (5), CouldNotCalculateTheDynamicDisplayName6 (6), CouldNotCalculateTheDynamicDisplayName7 (7), CouldNotCalculateTheDynamicDisplayName8 (8), CouldNotCalculateTheDynamicDisplayName9 (9), Value0 (0)
    """
    CouldNotCalculateTheDynamicDisplayName: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName10: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName11: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName12: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName13: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName14: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName15: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName16: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName17: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName18: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName19: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName2: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName20: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName21: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName22: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName23: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName24: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName25: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName26: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName27: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName28: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName29: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName3: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName30: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName31: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName32: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName33: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName34: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName35: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName4: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName5: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName6: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName7: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName8: BoostCurrent = ...
    CouldNotCalculateTheDynamicDisplayName9: BoostCurrent = ...
    Value0: BoostCurrent = ...
    value__ = ...


class Brightness(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Brightness

    enum Brightness, values: Bright (50), Dark (10), Medium (25), None (0), VeryBright (63), VeryDark (1)
    """
    Bright: Brightness = ...
    Dark: Brightness = ...
    Medium: Brightness = ...
    value__ = ...
    VeryBright: Brightness = ...
    VeryDark: Brightness = ...


class BusPowerSupplyActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property BusPowerSupplyActive

    enum BusPowerSupplyActive, values: Active (1), Deactivated (0)
    """
    Active: BusPowerSupplyActive = ...
    Deactivated: BusPowerSupplyActive = ...
    value__ = ...


class BusProfile(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    BusProfile

    enum BusProfile, values: Dp (1), None (0), Standard (2), Universal (3), UserDefined (4)
    """
    Dp: BusProfile = ...
    Standard: BusProfile = ...
    Universal: BusProfile = ...
    UserDefined: BusProfile = ...
    value__ = ...


class CableLength(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CableLength

    enum CableLength, values: Length1000m (6000), Length100m (600), Length20m (120), Length3000m (18000), Length50m (300), None (0)
    """
    Length1000m: CableLength = ...
    Length100m: CableLength = ...
    Length20m: CableLength = ...
    Length3000m: CableLength = ...
    Length50m: CableLength = ...
    value__ = ...


class CableLocking(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CableLocking

    enum CableLocking, values: ExternalViaPii (1), NoCableLocking (0), OpenCollector (4), PolarityReversalPermanent (3), PolarityReversalPulse800Ms (2)
    """
    ExternalViaPii: CableLocking = ...
    NoCableLocking: CableLocking = ...
    OpenCollector: CableLocking = ...
    PolarityReversalPermanent: CableLocking = ...
    PolarityReversalPulse800Ms: CableLocking = ...
    value__ = ...


class CableLockingFeedback(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CableLockingFeedback

    enum CableLockingFeedback, values: ExternalViaPiq (0), InternalModuleDi (1), NoFeedback (2)
    """
    ExternalViaPiq: CableLockingFeedback = ...
    InternalModuleDi: CableLockingFeedback = ...
    NoFeedback: CableLockingFeedback = ...
    value__ = ...


class CableName(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Cable Name

    enum CableName, values: Flexible_FO_Cable_62_5 (12884901890), Flexible_FO_Cable_9 (4294967298), FO_Ground_Cable (8589934595), FO_Standard_Cable_62_5 (12884901889), FO_Standard_Cable_9 (4294967297), FO_Standard_Cable_GP_50 (8589934593), FO_Trailing_Cable_GP (8589934594), GI_PCF_Standard_Cable (34359738369), GI_PCF_Trailing_Cable (34359738370), GI_POF_Standard_Cable (30064771073), GI_POF_Trailing_Cable (30064771074), None (0), PCF_Standard_Cable_GP (21474836481), PCF_Trailing_Cable_GP (21474836482), POF_Standard_Cable_GP (17179869185), POF_Trailing_Cable (17179869186)
    """
    Flexible_FO_Cable_62_5: CableName = ...
    Flexible_FO_Cable_9: CableName = ...
    FO_Ground_Cable: CableName = ...
    FO_Standard_Cable_62_5: CableName = ...
    FO_Standard_Cable_9: CableName = ...
    FO_Standard_Cable_GP_50: CableName = ...
    FO_Trailing_Cable_GP: CableName = ...
    GI_PCF_Standard_Cable: CableName = ...
    GI_PCF_Trailing_Cable: CableName = ...
    GI_POF_Standard_Cable: CableName = ...
    GI_POF_Trailing_Cable: CableName = ...
    PCF_Standard_Cable_GP: CableName = ...
    PCF_Trailing_Cable_GP: CableName = ...
    POF_Standard_Cable_GP: CableName = ...
    POF_Trailing_Cable: CableName = ...
    value__ = ...


class Calculator2OperatingMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator2OperatingMode

    enum Calculator2OperatingMode, values: BothInputsOfTheTypeWord (0), Inputs1And2AsDWordInput (1)
    """
    BothInputsOfTheTypeWord: Calculator2OperatingMode = ...
    Inputs1And2AsDWordInput: Calculator2OperatingMode = ...
    value__ = ...


class Calculator2Operator(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator2Operator

    enum Calculator2Operator, values: Addition (0), Division (3), Multiplication (2), Subtraction (1)
    """
    Addition: Calculator2Operator = ...
    Division: Calculator2Operator = ...
    Multiplication: Calculator2Operator = ...
    Subtraction: Calculator2Operator = ...
    value__ = ...


class Calculator3Operator1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator3Operator1

    enum Calculator3Operator1, values: Addition (0), Division (3), Multiplication (2), Subtraction (1)
    """
    Addition: Calculator3Operator1 = ...
    Division: Calculator3Operator1 = ...
    Multiplication: Calculator3Operator1 = ...
    Subtraction: Calculator3Operator1 = ...
    value__ = ...


class Calculator3Operator2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator3Operator2

    enum Calculator3Operator2, values: Addition (0), Division (3), Multiplication (2), Subtraction (1)
    """
    Addition: Calculator3Operator2 = ...
    Division: Calculator3Operator2 = ...
    Multiplication: Calculator3Operator2 = ...
    Subtraction: Calculator3Operator2 = ...
    value__ = ...


class Calculator3Operator3(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator3Operator3

    enum Calculator3Operator3, values: Addition (0), Division (3), Multiplication (2), Subtraction (1)
    """
    Addition: Calculator3Operator3 = ...
    Division: Calculator3Operator3 = ...
    Multiplication: Calculator3Operator3 = ...
    Subtraction: Calculator3Operator3 = ...
    value__ = ...


class Calculator3Priority1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator3Priority1

    enum Calculator3Priority1, values: High (2), Low (0), Medium (1)
    """
    High: Calculator3Priority1 = ...
    Low: Calculator3Priority1 = ...
    Medium: Calculator3Priority1 = ...
    value__ = ...


class Calculator3Priority2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator3Priority2

    enum Calculator3Priority2, values: High (2), Low (0), Medium (1)
    """
    High: Calculator3Priority2 = ...
    Low: Calculator3Priority2 = ...
    Medium: Calculator3Priority2 = ...
    value__ = ...


class Calculator3Priority3(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator3Priority3

    enum Calculator3Priority3, values: High (2), Low (0), Medium (1)
    """
    High: Calculator3Priority3 = ...
    Low: Calculator3Priority3 = ...
    Medium: Calculator3Priority3 = ...
    value__ = ...


class Calculator4Operator1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator4Operator1

    enum Calculator4Operator1, values: Addition (0), Division (3), Multiplication (2), Subtraction (1)
    """
    Addition: Calculator4Operator1 = ...
    Division: Calculator4Operator1 = ...
    Multiplication: Calculator4Operator1 = ...
    Subtraction: Calculator4Operator1 = ...
    value__ = ...


class Calculator4Operator2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator4Operator2

    enum Calculator4Operator2, values: Addition (0), Division (3), Multiplication (2), Subtraction (1)
    """
    Addition: Calculator4Operator2 = ...
    Division: Calculator4Operator2 = ...
    Multiplication: Calculator4Operator2 = ...
    Subtraction: Calculator4Operator2 = ...
    value__ = ...


class Calculator4Operator3(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator4Operator3

    enum Calculator4Operator3, values: Addition (0), Division (3), Multiplication (2), Subtraction (1)
    """
    Addition: Calculator4Operator3 = ...
    Division: Calculator4Operator3 = ...
    Multiplication: Calculator4Operator3 = ...
    Subtraction: Calculator4Operator3 = ...
    value__ = ...


class Calculator4Priority1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator4Priority1

    enum Calculator4Priority1, values: High (2), Low (0), Medium (1)
    """
    High: Calculator4Priority1 = ...
    Low: Calculator4Priority1 = ...
    Medium: Calculator4Priority1 = ...
    value__ = ...


class Calculator4Priority2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator4Priority2

    enum Calculator4Priority2, values: High (2), Low (0), Medium (1)
    """
    High: Calculator4Priority2 = ...
    Low: Calculator4Priority2 = ...
    Medium: Calculator4Priority2 = ...
    value__ = ...


class Calculator4Priority3(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Calculator4Priority3

    enum Calculator4Priority3, values: High (2), Low (0), Medium (1)
    """
    High: Calculator4Priority3 = ...
    Low: Calculator4Priority3 = ...
    Medium: Calculator4Priority3 = ...
    value__ = ...


class Category(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Category

    enum Category, values: Currents (1), Energies (4), Harmonics (8), None (0), Other (6), PowerQualityValues (7), Powers (3), QualityData (5), Voltages (2)
    """
    Currents: Category = ...
    Energies: Category = ...
    Harmonics: Category = ...
    Other: Category = ...
    PowerQualityValues: Category = ...
    Powers: Category = ...
    QualityData: Category = ...
    value__ = ...
    Voltages: Category = ...


class Channel(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Class representing a channel """
    @property
    def IoType(self) -> ChannelIoType:
        """
        The IO type of the channel

        Get: IoType(self: Channel) -> ChannelIoType
        """
        ...

    @property
    def Number(self) -> int:
        """
        The number of this channel

        Get: Number(self: Channel) -> int
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: Channel) -> IEngineeringObject
        """
        ...

    @property
    def Type(self) -> ChannelType:
        """
        The type of this channel

        Get: Type(self: Channel) -> ChannelType
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: Channel) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: Channel) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class ChannelAssignment(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ChannelAssignment

    enum ChannelAssignment, values: Channel0 (0), Channel1 (1), Channel2 (2), Channel3 (3)
    """
    Channel0: ChannelAssignment = ...
    Channel1: ChannelAssignment = ...
    Channel2: ChannelAssignment = ...
    Channel3: ChannelAssignment = ...
    value__ = ...


class ChannelComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of Channels """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: ChannelComposition) -> IEngineeringObject
        """
        ...


    def Find(self, type:ChannelType, ioType:ChannelIoType, number:int) -> Channel:
        """
        Find(self: ChannelComposition, type: ChannelType, ioType: ChannelIoType, number: int) -> Channel

            Finds a given channel

            type: Type to find

            ioType: IoType to find

            number: Number to find

            Returns: Siemens.Engineering.HW.Channel
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: ChannelComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: ChannelComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Channel](enumerable: IEnumerable[Channel], value: Channel) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class ChannelConfiguration(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ChannelConfiguration

    enum ChannelConfiguration, values: Value1Channel4A (1), Value2Channels2A (0)
    """
    Value1Channel4A: ChannelConfiguration = ...
    Value2Channels2A: ChannelConfiguration = ...
    value__ = ...


class ChannelIoType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Channel IO type

    enum ChannelIoType, values: Complex (3), Input (1), None (0), Output (2)
    """
    Complex: ChannelIoType = ...
    Input: ChannelIoType = ...
    Output: ChannelIoType = ...
    value__ = ...


class ChannelType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Channel type

    enum ChannelType, values: Analog (1), Digital (2), None (0), Technology (3)
    """
    Analog: ChannelType = ...
    Digital: ChannelType = ...
    Technology: ChannelType = ...
    value__ = ...


class ChannelTypeForIO(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ChannelTypeForIO

    enum ChannelTypeForIO, values: DigitalInput (0), DigitalOutput (1)
    """
    DigitalInput: ChannelTypeForIO = ...
    DigitalOutput: ChannelTypeForIO = ...
    value__ = ...


class ChargingStandard(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ChargingStandard

    enum ChargingStandard, values: DinSpec70121 (2), Iec61851Minus1 (0), SaeJ1772 (1)
    """
    DinSpec70121: ChargingStandard = ...
    Iec61851Minus1: ChargingStandard = ...
    SaeJ1772: ChargingStandard = ...
    value__ = ...


class ChatterMonitoring(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ChatterMonitoring

    enum ChatterMonitoring, values: Active (1), Deactivated (0)
    """
    Active: ChatterMonitoring = ...
    Deactivated: ChatterMonitoring = ...
    value__ = ...


class Classification(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Classification

    enum Classification, values: CPU (1), HM (2), None (0)
    """
    CPU: Classification = ...
    HM: Classification = ...
    value__ = ...


class CodeType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CodeType

    enum CodeType, values: Dual (1), Gray (0)
    """
    Dual: CodeType = ...
    Gray: CodeType = ...
    value__ = ...


class CommunicationLoad(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Profibus Communication Load

    enum CommunicationLoad, values: High (3), Low (1), Medium (2), None (0)
    """
    High: CommunicationLoad = ...
    Low: CommunicationLoad = ...
    Medium: CommunicationLoad = ...
    value__ = ...


class CompatibilityMode3UF50BasicType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CompatibilityMode3UF50BasicType

    enum CompatibilityMode3UF50BasicType, values: Value1 (0), Value2 (1), Value3 (2)
    """
    Value1: CompatibilityMode3UF50BasicType = ...
    Value2: CompatibilityMode3UF50BasicType = ...
    Value3: CompatibilityMode3UF50BasicType = ...
    value__ = ...


class CompatibilityMode3UF50Mode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CompatibilityMode3UF50Mode

    enum CompatibilityMode3UF50Mode, values: Dpv0 (0), Dpv1 (1)
    """
    Dpv0: CompatibilityMode3UF50Mode = ...
    Dpv1: CompatibilityMode3UF50Mode = ...
    value__ = ...


class ComputerNameIdenticalToPcStationName(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ComputerNameIdenticalToPcStationName

    enum ComputerNameIdenticalToPcStationName, values: ComputerNameIdenticalToNameOfPcStation (0), ComputerNameIdenticalToNameOfPcStation1 (1)
    """
    ComputerNameIdenticalToNameOfPcStation: ComputerNameIdenticalToPcStationName = ...
    ComputerNameIdenticalToNameOfPcStation1: ComputerNameIdenticalToPcStationName = ...
    value__ = ...


class ConfigurationDQOrDIGroup0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ConfigurationDQOrDIGroup0

    enum ConfigurationDQOrDIGroup0, values: TimerDqWithEnableInput (1), UseInputOrOutputIndividually (0)
    """
    TimerDqWithEnableInput: ConfigurationDQOrDIGroup0 = ...
    UseInputOrOutputIndividually: ConfigurationDQOrDIGroup0 = ...
    value__ = ...


class ConfigurationDQOrDIGroup1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ConfigurationDQOrDIGroup1

    enum ConfigurationDQOrDIGroup1, values: TimerDqWithEnableInput (1), UseInputOrOutputIndividually (0)
    """
    TimerDqWithEnableInput: ConfigurationDQOrDIGroup1 = ...
    UseInputOrOutputIndividually: ConfigurationDQOrDIGroup1 = ...
    value__ = ...


class ConfigurationDQOrDIGroup2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ConfigurationDQOrDIGroup2

    enum ConfigurationDQOrDIGroup2, values: IncrementalEncoderABPhaseShifted (2), TimerDi2WithEnableInputDi3 (1), TimerDq2WithEnableInputDi2 (3), TimerDqWithEnableInput (4), UseInputOrOutputIndividually (0)
    """
    IncrementalEncoderABPhaseShifted: ConfigurationDQOrDIGroup2 = ...
    TimerDi2WithEnableInputDi3: ConfigurationDQOrDIGroup2 = ...
    TimerDq2WithEnableInputDi2: ConfigurationDQOrDIGroup2 = ...
    TimerDqWithEnableInput: ConfigurationDQOrDIGroup2 = ...
    UseInputOrOutputIndividually: ConfigurationDQOrDIGroup2 = ...
    value__ = ...


class ConnectionType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ConnectionType

    enum ConnectionType, values: DriverMode (10), Endstufe (11), Indexer (9), None (0), Value1P2w1Phase2Wire (1), Value2P3w2Phase3Wire (6), Value3P3w13Phase3WireSymmetricalLoad (8), Value3P3w3Phase3Wire (7), Value3P4w13Phase4WireSymmetricalLoad (4), Value3P4w3Phase4Wire (2), Value3P4wi3PhaseCurrentMeasurement4Wire (3), Value3X1p2w3X1PhaseEach2Conductors (5)
    """
    DriverMode: ConnectionType = ...
    Endstufe: ConnectionType = ...
    Indexer: ConnectionType = ...
    Value1P2w1Phase2Wire: ConnectionType = ...
    Value2P3w2Phase3Wire: ConnectionType = ...
    Value3P3w13Phase3WireSymmetricalLoad: ConnectionType = ...
    Value3P3w3Phase3Wire: ConnectionType = ...
    Value3P4w13Phase4WireSymmetricalLoad: ConnectionType = ...
    Value3P4w3Phase4Wire: ConnectionType = ...
    Value3P4wi3PhaseCurrentMeasurement4Wire: ConnectionType = ...
    Value3X1p2w3X1PhaseEach2Conductors: ConnectionType = ...
    value__ = ...


class ContactorFeedback(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ContactorFeedback

    enum ContactorFeedback, values: ExternalViaPiq (0), InternalModuleDi (1), NoFeedback (2)
    """
    ExternalViaPiq: ContactorFeedback = ...
    InternalModuleDi: ContactorFeedback = ...
    NoFeedback: ContactorFeedback = ...
    value__ = ...


class ControlFunctionCurrentMeasuringModuleInstalled(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlFunctionCurrentMeasuringModuleInstalled

    enum ControlFunctionCurrentMeasuringModuleInstalled, values: Delta (0), IncomingCable (1)
    """
    Delta: ControlFunctionCurrentMeasuringModuleInstalled = ...
    IncomingCable: ControlFunctionCurrentMeasuringModuleInstalled = ...
    value__ = ...


class ControlFunctionFeedbackCLOSEDFC(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlFunctionFeedbackCLOSEDFC

    enum ControlFunctionFeedbackCLOSEDFC, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit01: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit02: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit03: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit04: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit05: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit06: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit07: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit10: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit11: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit12: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit13: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit14: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit15: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit16: ControlFunctionFeedbackCLOSEDFC = ...
    AcyclicReceiveBit17: ControlFunctionFeedbackCLOSEDFC = ...
    BUInput1: ControlFunctionFeedbackCLOSEDFC = ...
    BUInput2: ControlFunctionFeedbackCLOSEDFC = ...
    BUInput3: ControlFunctionFeedbackCLOSEDFC = ...
    BUInput4: ControlFunctionFeedbackCLOSEDFC = ...
    BUTestResetButton: ControlFunctionFeedbackCLOSEDFC = ...
    ContactorControl1QE1: ControlFunctionFeedbackCLOSEDFC = ...
    ContactorControl2QE2: ControlFunctionFeedbackCLOSEDFC = ...
    ContactorControl3QE3: ControlFunctionFeedbackCLOSEDFC = ...
    ContactorControl4QE4: ControlFunctionFeedbackCLOSEDFC = ...
    ContactorControl5QE5: ControlFunctionFeedbackCLOSEDFC = ...
    Counter1Output: ControlFunctionFeedbackCLOSEDFC = ...
    Counter2Output: ControlFunctionFeedbackCLOSEDFC = ...
    Counter3Output: ControlFunctionFeedbackCLOSEDFC = ...
    Counter4Output: ControlFunctionFeedbackCLOSEDFC = ...
    Counter5Output: ControlFunctionFeedbackCLOSEDFC = ...
    Counter6Output: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit00: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit01: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit02: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit03: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit04: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit05: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit06: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit07: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit10: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit11: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit12: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit13: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit14: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit15: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit16: ControlFunctionFeedbackCLOSEDFC = ...
    CyclicReceiveBit17: ControlFunctionFeedbackCLOSEDFC = ...
    DisplayQLAOff: ControlFunctionFeedbackCLOSEDFC = ...
    DisplayQLEForward: ControlFunctionFeedbackCLOSEDFC = ...
    DisplayQLEForwardFast: ControlFunctionFeedbackCLOSEDFC = ...
    DisplayQLEReverse: ControlFunctionFeedbackCLOSEDFC = ...
    DisplayQLEReverseFast: ControlFunctionFeedbackCLOSEDFC = ...
    DisplayQLSFault: ControlFunctionFeedbackCLOSEDFC = ...
    DM1Input1: ControlFunctionFeedbackCLOSEDFC = ...
    DM1Input2: ControlFunctionFeedbackCLOSEDFC = ...
    DM1Input3: ControlFunctionFeedbackCLOSEDFC = ...
    DM1Input4: ControlFunctionFeedbackCLOSEDFC = ...
    DM1SensorChannel1: ControlFunctionFeedbackCLOSEDFC = ...
    DM1SensorChannel2: ControlFunctionFeedbackCLOSEDFC = ...
    DM2Input1: ControlFunctionFeedbackCLOSEDFC = ...
    DM2Input2: ControlFunctionFeedbackCLOSEDFC = ...
    DM2Input3: ControlFunctionFeedbackCLOSEDFC = ...
    DM2Input4: ControlFunctionFeedbackCLOSEDFC = ...
    EnabledControlCommandOff: ControlFunctionFeedbackCLOSEDFC = ...
    EnabledControlCommandOnForward: ControlFunctionFeedbackCLOSEDFC = ...
    EnabledControlCommandOnForwardFast: ControlFunctionFeedbackCLOSEDFC = ...
    EnabledControlCommandOnReverse: ControlFunctionFeedbackCLOSEDFC = ...
    EnabledControlCommandOnReverseFast: ControlFunctionFeedbackCLOSEDFC = ...
    EventAM1OpenCircuit: ControlFunctionFeedbackCLOSEDFC = ...
    EventAM1TripLevel0420mAGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventAM1TripLevel0420mALt: ControlFunctionFeedbackCLOSEDFC = ...
    EventAM1WarningLevel0420mAGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventAM1WarningLevel0420mALt: ControlFunctionFeedbackCLOSEDFC = ...
    EventAM2OpenCircuit: ControlFunctionFeedbackCLOSEDFC = ...
    EventAM2TripLevel0420mAGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventAM2TripLevel0420mALt: ControlFunctionFeedbackCLOSEDFC = ...
    EventAM2WarningLevel0420mAGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventAM2WarningLevel0420mALt: ControlFunctionFeedbackCLOSEDFC = ...
    EventConfiguredOperatorPanelMissing: ControlFunctionFeedbackCLOSEDFC = ...
    EventDMFLOCALOk: ControlFunctionFeedbackCLOSEDFC = ...
    EventExternalFault1: ControlFunctionFeedbackCLOSEDFC = ...
    EventExternalFault2: ControlFunctionFeedbackCLOSEDFC = ...
    EventExternalFault3: ControlFunctionFeedbackCLOSEDFC = ...
    EventExternalFault4: ControlFunctionFeedbackCLOSEDFC = ...
    EventExternalFault5: ControlFunctionFeedbackCLOSEDFC = ...
    EventExternalFault6: ControlFunctionFeedbackCLOSEDFC = ...
    EventExternalGroundFault: ControlFunctionFeedbackCLOSEDFC = ...
    EventExternalGroundFaultWarning: ControlFunctionFeedbackCLOSEDFC = ...
    EventInternalGroundFault: ControlFunctionFeedbackCLOSEDFC = ...
    EventJustOneStartPossible: ControlFunctionFeedbackCLOSEDFC = ...
    EventLimitMonitor1: ControlFunctionFeedbackCLOSEDFC = ...
    EventLimitMonitor2: ControlFunctionFeedbackCLOSEDFC = ...
    EventLimitMonitor3: ControlFunctionFeedbackCLOSEDFC = ...
    EventLimitMonitor4: ControlFunctionFeedbackCLOSEDFC = ...
    EventLimitMonitor5: ControlFunctionFeedbackCLOSEDFC = ...
    EventLimitMonitor6: ControlFunctionFeedbackCLOSEDFC = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlFunctionFeedbackCLOSEDFC = ...
    EventMotorOperatingHoursGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventNoStartPermitted: ControlFunctionFeedbackCLOSEDFC = ...
    EventNumberOfStartsGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventOverload: ControlFunctionFeedbackCLOSEDFC = ...
    EventOverloadAndPhaseFailure: ControlFunctionFeedbackCLOSEDFC = ...
    EventPrewarningOverload: ControlFunctionFeedbackCLOSEDFC = ...
    EventPROFIsafeActive: ControlFunctionFeedbackCLOSEDFC = ...
    EventSafetyrelatedTripping: ControlFunctionFeedbackCLOSEDFC = ...
    EventStalledRotor: ControlFunctionFeedbackCLOSEDFC = ...
    EventStopTimeGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventThermistorOpenCircuit: ControlFunctionFeedbackCLOSEDFC = ...
    EventThermistorShortCircuit: ControlFunctionFeedbackCLOSEDFC = ...
    EventThermistorTripLevel: ControlFunctionFeedbackCLOSEDFC = ...
    EventTimestampfctActiveAndOk: ControlFunctionFeedbackCLOSEDFC = ...
    EventTM1OutOfRange: ControlFunctionFeedbackCLOSEDFC = ...
    EventTM1SensorFault: ControlFunctionFeedbackCLOSEDFC = ...
    EventTM1TripLevelTGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventTM1WarningLevelTGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventTM2OutOfRange: ControlFunctionFeedbackCLOSEDFC = ...
    EventTM2SensorFault: ControlFunctionFeedbackCLOSEDFC = ...
    EventTM2TripLevelTGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventTM2WarningLevelTGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventTripLevelCosPhiLt: ControlFunctionFeedbackCLOSEDFC = ...
    EventTripLevelIGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventTripLevelILt: ControlFunctionFeedbackCLOSEDFC = ...
    EventTripLevelPGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventTripLevelPLt: ControlFunctionFeedbackCLOSEDFC = ...
    EventTripLevelULt: ControlFunctionFeedbackCLOSEDFC = ...
    EventUnbalance: ControlFunctionFeedbackCLOSEDFC = ...
    EventWarningLevelCosPhiLt: ControlFunctionFeedbackCLOSEDFC = ...
    EventWarningLevelIGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventWarningLevelILt: ControlFunctionFeedbackCLOSEDFC = ...
    EventWarningLevelPGt: ControlFunctionFeedbackCLOSEDFC = ...
    EventWarningLevelPLt: ControlFunctionFeedbackCLOSEDFC = ...
    EventWarningLevelULt: ControlFunctionFeedbackCLOSEDFC = ...
    FaultAntivalence: ControlFunctionFeedbackCLOSEDFC = ...
    FaultBus: ControlFunctionFeedbackCLOSEDFC = ...
    FaultConfigurationError: ControlFunctionFeedbackCLOSEDFC = ...
    FaultDouble0: ControlFunctionFeedbackCLOSEDFC = ...
    FaultDouble1: ControlFunctionFeedbackCLOSEDFC = ...
    FaultEndPosition: ControlFunctionFeedbackCLOSEDFC = ...
    FaultExecutionOnCommand: ControlFunctionFeedbackCLOSEDFC = ...
    FaultExecutionSTOPCommand: ControlFunctionFeedbackCLOSEDFC = ...
    FaultFeedbackOff: ControlFunctionFeedbackCLOSEDFC = ...
    FaultFeedbackOn: ControlFunctionFeedbackCLOSEDFC = ...
    FaultHardwareFaultBasicUnit: ControlFunctionFeedbackCLOSEDFC = ...
    FaultModuleFault: ControlFunctionFeedbackCLOSEDFC = ...
    FaultOperationalProtectionOff: ControlFunctionFeedbackCLOSEDFC = ...
    FaultParameterization: ControlFunctionFeedbackCLOSEDFC = ...
    FaultPLCPCS: ControlFunctionFeedbackCLOSEDFC = ...
    FaultPowerFailure: ControlFunctionFeedbackCLOSEDFC = ...
    FaultStalledPositioner: ControlFunctionFeedbackCLOSEDFC = ...
    FaultTemporaryComponents: ControlFunctionFeedbackCLOSEDFC = ...
    FaultTestPositionFeedback: ControlFunctionFeedbackCLOSEDFC = ...
    FixedLevel0: ControlFunctionFeedbackCLOSEDFC = ...
    FixedLevel1: ControlFunctionFeedbackCLOSEDFC = ...
    Flashing1Output: ControlFunctionFeedbackCLOSEDFC = ...
    Flashing2Output: ControlFunctionFeedbackCLOSEDFC = ...
    Flashing3Output: ControlFunctionFeedbackCLOSEDFC = ...
    Flicker1Output: ControlFunctionFeedbackCLOSEDFC = ...
    Flicker2Output: ControlFunctionFeedbackCLOSEDFC = ...
    Flicker3Output: ControlFunctionFeedbackCLOSEDFC = ...
    NonvolatileElement1Output: ControlFunctionFeedbackCLOSEDFC = ...
    NonvolatileElement2Output: ControlFunctionFeedbackCLOSEDFC = ...
    NonvolatileElement3Output: ControlFunctionFeedbackCLOSEDFC = ...
    NonvolatileElement4Output: ControlFunctionFeedbackCLOSEDFC = ...
    NotConnected: ControlFunctionFeedbackCLOSEDFC = ...
    OPButton1: ControlFunctionFeedbackCLOSEDFC = ...
    OPButton2: ControlFunctionFeedbackCLOSEDFC = ...
    OPButton3: ControlFunctionFeedbackCLOSEDFC = ...
    OPButton4: ControlFunctionFeedbackCLOSEDFC = ...
    OPTestResetButton: ControlFunctionFeedbackCLOSEDFC = ...
    PWMOutput: ControlFunctionFeedbackCLOSEDFC = ...
    SignalConditioning1Output: ControlFunctionFeedbackCLOSEDFC = ...
    SignalConditioning2Output: ControlFunctionFeedbackCLOSEDFC = ...
    SignalConditioning3Output: ControlFunctionFeedbackCLOSEDFC = ...
    SignalConditioning4Output: ControlFunctionFeedbackCLOSEDFC = ...
    SignalConditioning5Output: ControlFunctionFeedbackCLOSEDFC = ...
    SignalConditioning6Output: ControlFunctionFeedbackCLOSEDFC = ...
    StatusBusOk: ControlFunctionFeedbackCLOSEDFC = ...
    StatusChangeoverPauseActive: ControlFunctionFeedbackCLOSEDFC = ...
    StatusCoolingDownPeriodActive: ControlFunctionFeedbackCLOSEDFC = ...
    StatusCurrentFlowing: ControlFunctionFeedbackCLOSEDFC = ...
    StatusDeviceOk: ControlFunctionFeedbackCLOSEDFC = ...
    StatusDeviceTestActive: ControlFunctionFeedbackCLOSEDFC = ...
    StatusEmergencyStartExecuted: ControlFunctionFeedbackCLOSEDFC = ...
    StatusEnablingCircuitClosed: ControlFunctionFeedbackCLOSEDFC = ...
    StatusFeedbackCLOSED: ControlFunctionFeedbackCLOSEDFC = ...
    StatusFeedbackOPEN: ControlFunctionFeedbackCLOSEDFC = ...
    StatusGroupFault: ControlFunctionFeedbackCLOSEDFC = ...
    StatusGroupWarning: ControlFunctionFeedbackCLOSEDFC = ...
    StatusInterlockingTimeActive: ControlFunctionFeedbackCLOSEDFC = ...
    StatusOff: ControlFunctionFeedbackCLOSEDFC = ...
    StatusOnForward: ControlFunctionFeedbackCLOSEDFC = ...
    StatusOnForwardFast: ControlFunctionFeedbackCLOSEDFC = ...
    StatusOnReverse: ControlFunctionFeedbackCLOSEDFC = ...
    StatusOnReverseFast: ControlFunctionFeedbackCLOSEDFC = ...
    StatusOperationalProtectionOff: ControlFunctionFeedbackCLOSEDFC = ...
    StatusPauseTimeActive: ControlFunctionFeedbackCLOSEDFC = ...
    StatusPhaseSequence123: ControlFunctionFeedbackCLOSEDFC = ...
    StatusPhaseSequence321: ControlFunctionFeedbackCLOSEDFC = ...
    StatusPLCPCSInRun: ControlFunctionFeedbackCLOSEDFC = ...
    StatusPositionerRunsInCLOSEDDirection: ControlFunctionFeedbackCLOSEDFC = ...
    StatusPositionerRunsInOPENDirection: ControlFunctionFeedbackCLOSEDFC = ...
    StatusPROFIenergyCommandStartPausePending: ControlFunctionFeedbackCLOSEDFC = ...
    StatusRemoteMode: ControlFunctionFeedbackCLOSEDFC = ...
    StatusStartActive: ControlFunctionFeedbackCLOSEDFC = ...
    StatusTestPosition: ControlFunctionFeedbackCLOSEDFC = ...
    StatusTorqueCLOSED: ControlFunctionFeedbackCLOSEDFC = ...
    StatusTorqueOPEN: ControlFunctionFeedbackCLOSEDFC = ...
    Timer1Output: ControlFunctionFeedbackCLOSEDFC = ...
    Timer2Output: ControlFunctionFeedbackCLOSEDFC = ...
    Timer3Output: ControlFunctionFeedbackCLOSEDFC = ...
    Timer4Output: ControlFunctionFeedbackCLOSEDFC = ...
    Timer5Output: ControlFunctionFeedbackCLOSEDFC = ...
    Timer6Output: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable10Output: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable11Output: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable1Output: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable2Output: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable3Output: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable4Output: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable5Output: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable6Output: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable7Output: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable8Output: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable9Output1: ControlFunctionFeedbackCLOSEDFC = ...
    TruthTable9Output2: ControlFunctionFeedbackCLOSEDFC = ...
    value__ = ...
    WarningFeedbackCircuit: ControlFunctionFeedbackCLOSEDFC = ...
    WarningSimultaneity: ControlFunctionFeedbackCLOSEDFC = ...


class ControlFunctionFeedbackON(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlFunctionFeedbackON

    enum ControlFunctionFeedbackON, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit01: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit02: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit03: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit04: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit05: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit06: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit07: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit10: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit11: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit12: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit13: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit14: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit15: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit16: ControlFunctionFeedbackON = ...
    AcyclicReceiveBit17: ControlFunctionFeedbackON = ...
    BUInput1: ControlFunctionFeedbackON = ...
    BUInput2: ControlFunctionFeedbackON = ...
    BUInput3: ControlFunctionFeedbackON = ...
    BUInput4: ControlFunctionFeedbackON = ...
    BUTestResetButton: ControlFunctionFeedbackON = ...
    ContactorControl1QE1: ControlFunctionFeedbackON = ...
    ContactorControl2QE2: ControlFunctionFeedbackON = ...
    ContactorControl3QE3: ControlFunctionFeedbackON = ...
    ContactorControl4QE4: ControlFunctionFeedbackON = ...
    ContactorControl5QE5: ControlFunctionFeedbackON = ...
    Counter1Output: ControlFunctionFeedbackON = ...
    Counter2Output: ControlFunctionFeedbackON = ...
    Counter3Output: ControlFunctionFeedbackON = ...
    Counter4Output: ControlFunctionFeedbackON = ...
    Counter5Output: ControlFunctionFeedbackON = ...
    Counter6Output: ControlFunctionFeedbackON = ...
    CyclicReceiveBit00: ControlFunctionFeedbackON = ...
    CyclicReceiveBit01: ControlFunctionFeedbackON = ...
    CyclicReceiveBit02: ControlFunctionFeedbackON = ...
    CyclicReceiveBit03: ControlFunctionFeedbackON = ...
    CyclicReceiveBit04: ControlFunctionFeedbackON = ...
    CyclicReceiveBit05: ControlFunctionFeedbackON = ...
    CyclicReceiveBit06: ControlFunctionFeedbackON = ...
    CyclicReceiveBit07: ControlFunctionFeedbackON = ...
    CyclicReceiveBit10: ControlFunctionFeedbackON = ...
    CyclicReceiveBit11: ControlFunctionFeedbackON = ...
    CyclicReceiveBit12: ControlFunctionFeedbackON = ...
    CyclicReceiveBit13: ControlFunctionFeedbackON = ...
    CyclicReceiveBit14: ControlFunctionFeedbackON = ...
    CyclicReceiveBit15: ControlFunctionFeedbackON = ...
    CyclicReceiveBit16: ControlFunctionFeedbackON = ...
    CyclicReceiveBit17: ControlFunctionFeedbackON = ...
    DisplayQLAOff: ControlFunctionFeedbackON = ...
    DisplayQLEForward: ControlFunctionFeedbackON = ...
    DisplayQLEForwardFast: ControlFunctionFeedbackON = ...
    DisplayQLEReverse: ControlFunctionFeedbackON = ...
    DisplayQLEReverseFast: ControlFunctionFeedbackON = ...
    DisplayQLSFault: ControlFunctionFeedbackON = ...
    DM1Input1: ControlFunctionFeedbackON = ...
    DM1Input2: ControlFunctionFeedbackON = ...
    DM1Input3: ControlFunctionFeedbackON = ...
    DM1Input4: ControlFunctionFeedbackON = ...
    DM1SensorChannel1: ControlFunctionFeedbackON = ...
    DM1SensorChannel2: ControlFunctionFeedbackON = ...
    DM2Input1: ControlFunctionFeedbackON = ...
    DM2Input2: ControlFunctionFeedbackON = ...
    DM2Input3: ControlFunctionFeedbackON = ...
    DM2Input4: ControlFunctionFeedbackON = ...
    EnabledControlCommandOff: ControlFunctionFeedbackON = ...
    EnabledControlCommandOnForward: ControlFunctionFeedbackON = ...
    EnabledControlCommandOnForwardFast: ControlFunctionFeedbackON = ...
    EnabledControlCommandOnReverse: ControlFunctionFeedbackON = ...
    EnabledControlCommandOnReverseFast: ControlFunctionFeedbackON = ...
    EventAM1OpenCircuit: ControlFunctionFeedbackON = ...
    EventAM1TripLevel0420mAGt: ControlFunctionFeedbackON = ...
    EventAM1TripLevel0420mALt: ControlFunctionFeedbackON = ...
    EventAM1WarningLevel0420mAGt: ControlFunctionFeedbackON = ...
    EventAM1WarningLevel0420mALt: ControlFunctionFeedbackON = ...
    EventAM2OpenCircuit: ControlFunctionFeedbackON = ...
    EventAM2TripLevel0420mAGt: ControlFunctionFeedbackON = ...
    EventAM2TripLevel0420mALt: ControlFunctionFeedbackON = ...
    EventAM2WarningLevel0420mAGt: ControlFunctionFeedbackON = ...
    EventAM2WarningLevel0420mALt: ControlFunctionFeedbackON = ...
    EventConfiguredOperatorPanelMissing: ControlFunctionFeedbackON = ...
    EventDMFLOCALOk: ControlFunctionFeedbackON = ...
    EventExternalFault1: ControlFunctionFeedbackON = ...
    EventExternalFault2: ControlFunctionFeedbackON = ...
    EventExternalFault3: ControlFunctionFeedbackON = ...
    EventExternalFault4: ControlFunctionFeedbackON = ...
    EventExternalFault5: ControlFunctionFeedbackON = ...
    EventExternalFault6: ControlFunctionFeedbackON = ...
    EventExternalGroundFault: ControlFunctionFeedbackON = ...
    EventExternalGroundFaultWarning: ControlFunctionFeedbackON = ...
    EventInternalGroundFault: ControlFunctionFeedbackON = ...
    EventJustOneStartPossible: ControlFunctionFeedbackON = ...
    EventLimitMonitor1: ControlFunctionFeedbackON = ...
    EventLimitMonitor2: ControlFunctionFeedbackON = ...
    EventLimitMonitor3: ControlFunctionFeedbackON = ...
    EventLimitMonitor4: ControlFunctionFeedbackON = ...
    EventLimitMonitor5: ControlFunctionFeedbackON = ...
    EventLimitMonitor6: ControlFunctionFeedbackON = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlFunctionFeedbackON = ...
    EventMotorOperatingHoursGt: ControlFunctionFeedbackON = ...
    EventNoStartPermitted: ControlFunctionFeedbackON = ...
    EventNumberOfStartsGt: ControlFunctionFeedbackON = ...
    EventOverload: ControlFunctionFeedbackON = ...
    EventOverloadAndPhaseFailure: ControlFunctionFeedbackON = ...
    EventPrewarningOverload: ControlFunctionFeedbackON = ...
    EventPROFIsafeActive: ControlFunctionFeedbackON = ...
    EventSafetyrelatedTripping: ControlFunctionFeedbackON = ...
    EventStalledRotor: ControlFunctionFeedbackON = ...
    EventStopTimeGt: ControlFunctionFeedbackON = ...
    EventThermistorOpenCircuit: ControlFunctionFeedbackON = ...
    EventThermistorShortCircuit: ControlFunctionFeedbackON = ...
    EventThermistorTripLevel: ControlFunctionFeedbackON = ...
    EventTimestampfctActiveAndOk: ControlFunctionFeedbackON = ...
    EventTM1OutOfRange: ControlFunctionFeedbackON = ...
    EventTM1SensorFault: ControlFunctionFeedbackON = ...
    EventTM1TripLevelTGt: ControlFunctionFeedbackON = ...
    EventTM1WarningLevelTGt: ControlFunctionFeedbackON = ...
    EventTM2OutOfRange: ControlFunctionFeedbackON = ...
    EventTM2SensorFault: ControlFunctionFeedbackON = ...
    EventTM2TripLevelTGt: ControlFunctionFeedbackON = ...
    EventTM2WarningLevelTGt: ControlFunctionFeedbackON = ...
    EventTripLevelCosPhiLt: ControlFunctionFeedbackON = ...
    EventTripLevelIGt: ControlFunctionFeedbackON = ...
    EventTripLevelILt: ControlFunctionFeedbackON = ...
    EventTripLevelPGt: ControlFunctionFeedbackON = ...
    EventTripLevelPLt: ControlFunctionFeedbackON = ...
    EventTripLevelULt: ControlFunctionFeedbackON = ...
    EventUnbalance: ControlFunctionFeedbackON = ...
    EventWarningLevelCosPhiLt: ControlFunctionFeedbackON = ...
    EventWarningLevelIGt: ControlFunctionFeedbackON = ...
    EventWarningLevelILt: ControlFunctionFeedbackON = ...
    EventWarningLevelPGt: ControlFunctionFeedbackON = ...
    EventWarningLevelPLt: ControlFunctionFeedbackON = ...
    EventWarningLevelULt: ControlFunctionFeedbackON = ...
    FaultAntivalence: ControlFunctionFeedbackON = ...
    FaultBus: ControlFunctionFeedbackON = ...
    FaultConfigurationError: ControlFunctionFeedbackON = ...
    FaultDouble0: ControlFunctionFeedbackON = ...
    FaultDouble1: ControlFunctionFeedbackON = ...
    FaultEndPosition: ControlFunctionFeedbackON = ...
    FaultExecutionOnCommand: ControlFunctionFeedbackON = ...
    FaultExecutionSTOPCommand: ControlFunctionFeedbackON = ...
    FaultFeedbackOff: ControlFunctionFeedbackON = ...
    FaultFeedbackOn: ControlFunctionFeedbackON = ...
    FaultHardwareFaultBasicUnit: ControlFunctionFeedbackON = ...
    FaultModuleFault: ControlFunctionFeedbackON = ...
    FaultOperationalProtectionOff: ControlFunctionFeedbackON = ...
    FaultParameterization: ControlFunctionFeedbackON = ...
    FaultPLCPCS: ControlFunctionFeedbackON = ...
    FaultPowerFailure: ControlFunctionFeedbackON = ...
    FaultStalledPositioner: ControlFunctionFeedbackON = ...
    FaultTemporaryComponents: ControlFunctionFeedbackON = ...
    FaultTestPositionFeedback: ControlFunctionFeedbackON = ...
    FixedLevel0: ControlFunctionFeedbackON = ...
    FixedLevel1: ControlFunctionFeedbackON = ...
    Flashing1Output: ControlFunctionFeedbackON = ...
    Flashing2Output: ControlFunctionFeedbackON = ...
    Flashing3Output: ControlFunctionFeedbackON = ...
    Flicker1Output: ControlFunctionFeedbackON = ...
    Flicker2Output: ControlFunctionFeedbackON = ...
    Flicker3Output: ControlFunctionFeedbackON = ...
    NonvolatileElement1Output: ControlFunctionFeedbackON = ...
    NonvolatileElement2Output: ControlFunctionFeedbackON = ...
    NonvolatileElement3Output: ControlFunctionFeedbackON = ...
    NonvolatileElement4Output: ControlFunctionFeedbackON = ...
    NotConnected: ControlFunctionFeedbackON = ...
    OPButton1: ControlFunctionFeedbackON = ...
    OPButton2: ControlFunctionFeedbackON = ...
    OPButton3: ControlFunctionFeedbackON = ...
    OPButton4: ControlFunctionFeedbackON = ...
    OPTestResetButton: ControlFunctionFeedbackON = ...
    PWMOutput: ControlFunctionFeedbackON = ...
    SignalConditioning1Output: ControlFunctionFeedbackON = ...
    SignalConditioning2Output: ControlFunctionFeedbackON = ...
    SignalConditioning3Output: ControlFunctionFeedbackON = ...
    SignalConditioning4Output: ControlFunctionFeedbackON = ...
    SignalConditioning5Output: ControlFunctionFeedbackON = ...
    SignalConditioning6Output: ControlFunctionFeedbackON = ...
    StatusBusOk: ControlFunctionFeedbackON = ...
    StatusChangeoverPauseActive: ControlFunctionFeedbackON = ...
    StatusCoolingDownPeriodActive: ControlFunctionFeedbackON = ...
    StatusCurrentFlowing: ControlFunctionFeedbackON = ...
    StatusDeviceOk: ControlFunctionFeedbackON = ...
    StatusDeviceTestActive: ControlFunctionFeedbackON = ...
    StatusEmergencyStartExecuted: ControlFunctionFeedbackON = ...
    StatusEnablingCircuitClosed: ControlFunctionFeedbackON = ...
    StatusFeedbackCLOSED: ControlFunctionFeedbackON = ...
    StatusFeedbackOPEN: ControlFunctionFeedbackON = ...
    StatusGroupFault: ControlFunctionFeedbackON = ...
    StatusGroupWarning: ControlFunctionFeedbackON = ...
    StatusInterlockingTimeActive: ControlFunctionFeedbackON = ...
    StatusOff: ControlFunctionFeedbackON = ...
    StatusOnForward: ControlFunctionFeedbackON = ...
    StatusOnForwardFast: ControlFunctionFeedbackON = ...
    StatusOnReverse: ControlFunctionFeedbackON = ...
    StatusOnReverseFast: ControlFunctionFeedbackON = ...
    StatusOperationalProtectionOff: ControlFunctionFeedbackON = ...
    StatusPauseTimeActive: ControlFunctionFeedbackON = ...
    StatusPhaseSequence123: ControlFunctionFeedbackON = ...
    StatusPhaseSequence321: ControlFunctionFeedbackON = ...
    StatusPLCPCSInRun: ControlFunctionFeedbackON = ...
    StatusPositionerRunsInCLOSEDDirection: ControlFunctionFeedbackON = ...
    StatusPositionerRunsInOPENDirection: ControlFunctionFeedbackON = ...
    StatusPROFIenergyCommandStartPausePending: ControlFunctionFeedbackON = ...
    StatusRemoteMode: ControlFunctionFeedbackON = ...
    StatusStartActive: ControlFunctionFeedbackON = ...
    StatusTestPosition: ControlFunctionFeedbackON = ...
    StatusTorqueCLOSED: ControlFunctionFeedbackON = ...
    StatusTorqueOPEN: ControlFunctionFeedbackON = ...
    Timer1Output: ControlFunctionFeedbackON = ...
    Timer2Output: ControlFunctionFeedbackON = ...
    Timer3Output: ControlFunctionFeedbackON = ...
    Timer4Output: ControlFunctionFeedbackON = ...
    Timer5Output: ControlFunctionFeedbackON = ...
    Timer6Output: ControlFunctionFeedbackON = ...
    TruthTable10Output: ControlFunctionFeedbackON = ...
    TruthTable11Output: ControlFunctionFeedbackON = ...
    TruthTable1Output: ControlFunctionFeedbackON = ...
    TruthTable2Output: ControlFunctionFeedbackON = ...
    TruthTable3Output: ControlFunctionFeedbackON = ...
    TruthTable4Output: ControlFunctionFeedbackON = ...
    TruthTable5Output: ControlFunctionFeedbackON = ...
    TruthTable6Output: ControlFunctionFeedbackON = ...
    TruthTable7Output: ControlFunctionFeedbackON = ...
    TruthTable8Output: ControlFunctionFeedbackON = ...
    TruthTable9Output1: ControlFunctionFeedbackON = ...
    TruthTable9Output2: ControlFunctionFeedbackON = ...
    value__ = ...
    WarningFeedbackCircuit: ControlFunctionFeedbackON = ...
    WarningSimultaneity: ControlFunctionFeedbackON = ...


class ControlFunctionFeedbackOPENFO(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlFunctionFeedbackOPENFO

    enum ControlFunctionFeedbackOPENFO, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit01: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit02: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit03: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit04: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit05: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit06: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit07: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit10: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit11: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit12: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit13: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit14: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit15: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit16: ControlFunctionFeedbackOPENFO = ...
    AcyclicReceiveBit17: ControlFunctionFeedbackOPENFO = ...
    BUInput1: ControlFunctionFeedbackOPENFO = ...
    BUInput2: ControlFunctionFeedbackOPENFO = ...
    BUInput3: ControlFunctionFeedbackOPENFO = ...
    BUInput4: ControlFunctionFeedbackOPENFO = ...
    BUTestResetButton: ControlFunctionFeedbackOPENFO = ...
    ContactorControl1QE1: ControlFunctionFeedbackOPENFO = ...
    ContactorControl2QE2: ControlFunctionFeedbackOPENFO = ...
    ContactorControl3QE3: ControlFunctionFeedbackOPENFO = ...
    ContactorControl4QE4: ControlFunctionFeedbackOPENFO = ...
    ContactorControl5QE5: ControlFunctionFeedbackOPENFO = ...
    Counter1Output: ControlFunctionFeedbackOPENFO = ...
    Counter2Output: ControlFunctionFeedbackOPENFO = ...
    Counter3Output: ControlFunctionFeedbackOPENFO = ...
    Counter4Output: ControlFunctionFeedbackOPENFO = ...
    Counter5Output: ControlFunctionFeedbackOPENFO = ...
    Counter6Output: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit00: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit01: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit02: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit03: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit04: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit05: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit06: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit07: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit10: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit11: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit12: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit13: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit14: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit15: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit16: ControlFunctionFeedbackOPENFO = ...
    CyclicReceiveBit17: ControlFunctionFeedbackOPENFO = ...
    DisplayQLAOff: ControlFunctionFeedbackOPENFO = ...
    DisplayQLEForward: ControlFunctionFeedbackOPENFO = ...
    DisplayQLEForwardFast: ControlFunctionFeedbackOPENFO = ...
    DisplayQLEReverse: ControlFunctionFeedbackOPENFO = ...
    DisplayQLEReverseFast: ControlFunctionFeedbackOPENFO = ...
    DisplayQLSFault: ControlFunctionFeedbackOPENFO = ...
    DM1Input1: ControlFunctionFeedbackOPENFO = ...
    DM1Input2: ControlFunctionFeedbackOPENFO = ...
    DM1Input3: ControlFunctionFeedbackOPENFO = ...
    DM1Input4: ControlFunctionFeedbackOPENFO = ...
    DM1SensorChannel1: ControlFunctionFeedbackOPENFO = ...
    DM1SensorChannel2: ControlFunctionFeedbackOPENFO = ...
    DM2Input1: ControlFunctionFeedbackOPENFO = ...
    DM2Input2: ControlFunctionFeedbackOPENFO = ...
    DM2Input3: ControlFunctionFeedbackOPENFO = ...
    DM2Input4: ControlFunctionFeedbackOPENFO = ...
    EnabledControlCommandOff: ControlFunctionFeedbackOPENFO = ...
    EnabledControlCommandOnForward: ControlFunctionFeedbackOPENFO = ...
    EnabledControlCommandOnForwardFast: ControlFunctionFeedbackOPENFO = ...
    EnabledControlCommandOnReverse: ControlFunctionFeedbackOPENFO = ...
    EnabledControlCommandOnReverseFast: ControlFunctionFeedbackOPENFO = ...
    EventAM1OpenCircuit: ControlFunctionFeedbackOPENFO = ...
    EventAM1TripLevel0420mAGt: ControlFunctionFeedbackOPENFO = ...
    EventAM1TripLevel0420mALt: ControlFunctionFeedbackOPENFO = ...
    EventAM1WarningLevel0420mAGt: ControlFunctionFeedbackOPENFO = ...
    EventAM1WarningLevel0420mALt: ControlFunctionFeedbackOPENFO = ...
    EventAM2OpenCircuit: ControlFunctionFeedbackOPENFO = ...
    EventAM2TripLevel0420mAGt: ControlFunctionFeedbackOPENFO = ...
    EventAM2TripLevel0420mALt: ControlFunctionFeedbackOPENFO = ...
    EventAM2WarningLevel0420mAGt: ControlFunctionFeedbackOPENFO = ...
    EventAM2WarningLevel0420mALt: ControlFunctionFeedbackOPENFO = ...
    EventConfiguredOperatorPanelMissing: ControlFunctionFeedbackOPENFO = ...
    EventDMFLOCALOk: ControlFunctionFeedbackOPENFO = ...
    EventExternalFault1: ControlFunctionFeedbackOPENFO = ...
    EventExternalFault2: ControlFunctionFeedbackOPENFO = ...
    EventExternalFault3: ControlFunctionFeedbackOPENFO = ...
    EventExternalFault4: ControlFunctionFeedbackOPENFO = ...
    EventExternalFault5: ControlFunctionFeedbackOPENFO = ...
    EventExternalFault6: ControlFunctionFeedbackOPENFO = ...
    EventExternalGroundFault: ControlFunctionFeedbackOPENFO = ...
    EventExternalGroundFaultWarning: ControlFunctionFeedbackOPENFO = ...
    EventInternalGroundFault: ControlFunctionFeedbackOPENFO = ...
    EventJustOneStartPossible: ControlFunctionFeedbackOPENFO = ...
    EventLimitMonitor1: ControlFunctionFeedbackOPENFO = ...
    EventLimitMonitor2: ControlFunctionFeedbackOPENFO = ...
    EventLimitMonitor3: ControlFunctionFeedbackOPENFO = ...
    EventLimitMonitor4: ControlFunctionFeedbackOPENFO = ...
    EventLimitMonitor5: ControlFunctionFeedbackOPENFO = ...
    EventLimitMonitor6: ControlFunctionFeedbackOPENFO = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlFunctionFeedbackOPENFO = ...
    EventMotorOperatingHoursGt: ControlFunctionFeedbackOPENFO = ...
    EventNoStartPermitted: ControlFunctionFeedbackOPENFO = ...
    EventNumberOfStartsGt: ControlFunctionFeedbackOPENFO = ...
    EventOverload: ControlFunctionFeedbackOPENFO = ...
    EventOverloadAndPhaseFailure: ControlFunctionFeedbackOPENFO = ...
    EventPrewarningOverload: ControlFunctionFeedbackOPENFO = ...
    EventPROFIsafeActive: ControlFunctionFeedbackOPENFO = ...
    EventSafetyrelatedTripping: ControlFunctionFeedbackOPENFO = ...
    EventStalledRotor: ControlFunctionFeedbackOPENFO = ...
    EventStopTimeGt: ControlFunctionFeedbackOPENFO = ...
    EventThermistorOpenCircuit: ControlFunctionFeedbackOPENFO = ...
    EventThermistorShortCircuit: ControlFunctionFeedbackOPENFO = ...
    EventThermistorTripLevel: ControlFunctionFeedbackOPENFO = ...
    EventTimestampfctActiveAndOk: ControlFunctionFeedbackOPENFO = ...
    EventTM1OutOfRange: ControlFunctionFeedbackOPENFO = ...
    EventTM1SensorFault: ControlFunctionFeedbackOPENFO = ...
    EventTM1TripLevelTGt: ControlFunctionFeedbackOPENFO = ...
    EventTM1WarningLevelTGt: ControlFunctionFeedbackOPENFO = ...
    EventTM2OutOfRange: ControlFunctionFeedbackOPENFO = ...
    EventTM2SensorFault: ControlFunctionFeedbackOPENFO = ...
    EventTM2TripLevelTGt: ControlFunctionFeedbackOPENFO = ...
    EventTM2WarningLevelTGt: ControlFunctionFeedbackOPENFO = ...
    EventTripLevelCosPhiLt: ControlFunctionFeedbackOPENFO = ...
    EventTripLevelIGt: ControlFunctionFeedbackOPENFO = ...
    EventTripLevelILt: ControlFunctionFeedbackOPENFO = ...
    EventTripLevelPGt: ControlFunctionFeedbackOPENFO = ...
    EventTripLevelPLt: ControlFunctionFeedbackOPENFO = ...
    EventTripLevelULt: ControlFunctionFeedbackOPENFO = ...
    EventUnbalance: ControlFunctionFeedbackOPENFO = ...
    EventWarningLevelCosPhiLt: ControlFunctionFeedbackOPENFO = ...
    EventWarningLevelIGt: ControlFunctionFeedbackOPENFO = ...
    EventWarningLevelILt: ControlFunctionFeedbackOPENFO = ...
    EventWarningLevelPGt: ControlFunctionFeedbackOPENFO = ...
    EventWarningLevelPLt: ControlFunctionFeedbackOPENFO = ...
    EventWarningLevelULt: ControlFunctionFeedbackOPENFO = ...
    FaultAntivalence: ControlFunctionFeedbackOPENFO = ...
    FaultBus: ControlFunctionFeedbackOPENFO = ...
    FaultConfigurationError: ControlFunctionFeedbackOPENFO = ...
    FaultDouble0: ControlFunctionFeedbackOPENFO = ...
    FaultDouble1: ControlFunctionFeedbackOPENFO = ...
    FaultEndPosition: ControlFunctionFeedbackOPENFO = ...
    FaultExecutionOnCommand: ControlFunctionFeedbackOPENFO = ...
    FaultExecutionSTOPCommand: ControlFunctionFeedbackOPENFO = ...
    FaultFeedbackOff: ControlFunctionFeedbackOPENFO = ...
    FaultFeedbackOn: ControlFunctionFeedbackOPENFO = ...
    FaultHardwareFaultBasicUnit: ControlFunctionFeedbackOPENFO = ...
    FaultModuleFault: ControlFunctionFeedbackOPENFO = ...
    FaultOperationalProtectionOff: ControlFunctionFeedbackOPENFO = ...
    FaultParameterization: ControlFunctionFeedbackOPENFO = ...
    FaultPLCPCS: ControlFunctionFeedbackOPENFO = ...
    FaultPowerFailure: ControlFunctionFeedbackOPENFO = ...
    FaultStalledPositioner: ControlFunctionFeedbackOPENFO = ...
    FaultTemporaryComponents: ControlFunctionFeedbackOPENFO = ...
    FaultTestPositionFeedback: ControlFunctionFeedbackOPENFO = ...
    FixedLevel0: ControlFunctionFeedbackOPENFO = ...
    FixedLevel1: ControlFunctionFeedbackOPENFO = ...
    Flashing1Output: ControlFunctionFeedbackOPENFO = ...
    Flashing2Output: ControlFunctionFeedbackOPENFO = ...
    Flashing3Output: ControlFunctionFeedbackOPENFO = ...
    Flicker1Output: ControlFunctionFeedbackOPENFO = ...
    Flicker2Output: ControlFunctionFeedbackOPENFO = ...
    Flicker3Output: ControlFunctionFeedbackOPENFO = ...
    NonvolatileElement1Output: ControlFunctionFeedbackOPENFO = ...
    NonvolatileElement2Output: ControlFunctionFeedbackOPENFO = ...
    NonvolatileElement3Output: ControlFunctionFeedbackOPENFO = ...
    NonvolatileElement4Output: ControlFunctionFeedbackOPENFO = ...
    NotConnected: ControlFunctionFeedbackOPENFO = ...
    OPButton1: ControlFunctionFeedbackOPENFO = ...
    OPButton2: ControlFunctionFeedbackOPENFO = ...
    OPButton3: ControlFunctionFeedbackOPENFO = ...
    OPButton4: ControlFunctionFeedbackOPENFO = ...
    OPTestResetButton: ControlFunctionFeedbackOPENFO = ...
    PWMOutput: ControlFunctionFeedbackOPENFO = ...
    SignalConditioning1Output: ControlFunctionFeedbackOPENFO = ...
    SignalConditioning2Output: ControlFunctionFeedbackOPENFO = ...
    SignalConditioning3Output: ControlFunctionFeedbackOPENFO = ...
    SignalConditioning4Output: ControlFunctionFeedbackOPENFO = ...
    SignalConditioning5Output: ControlFunctionFeedbackOPENFO = ...
    SignalConditioning6Output: ControlFunctionFeedbackOPENFO = ...
    StatusBusOk: ControlFunctionFeedbackOPENFO = ...
    StatusChangeoverPauseActive: ControlFunctionFeedbackOPENFO = ...
    StatusCoolingDownPeriodActive: ControlFunctionFeedbackOPENFO = ...
    StatusCurrentFlowing: ControlFunctionFeedbackOPENFO = ...
    StatusDeviceOk: ControlFunctionFeedbackOPENFO = ...
    StatusDeviceTestActive: ControlFunctionFeedbackOPENFO = ...
    StatusEmergencyStartExecuted: ControlFunctionFeedbackOPENFO = ...
    StatusEnablingCircuitClosed: ControlFunctionFeedbackOPENFO = ...
    StatusFeedbackCLOSED: ControlFunctionFeedbackOPENFO = ...
    StatusFeedbackOPEN: ControlFunctionFeedbackOPENFO = ...
    StatusGroupFault: ControlFunctionFeedbackOPENFO = ...
    StatusGroupWarning: ControlFunctionFeedbackOPENFO = ...
    StatusInterlockingTimeActive: ControlFunctionFeedbackOPENFO = ...
    StatusOff: ControlFunctionFeedbackOPENFO = ...
    StatusOnForward: ControlFunctionFeedbackOPENFO = ...
    StatusOnForwardFast: ControlFunctionFeedbackOPENFO = ...
    StatusOnReverse: ControlFunctionFeedbackOPENFO = ...
    StatusOnReverseFast: ControlFunctionFeedbackOPENFO = ...
    StatusOperationalProtectionOff: ControlFunctionFeedbackOPENFO = ...
    StatusPauseTimeActive: ControlFunctionFeedbackOPENFO = ...
    StatusPhaseSequence123: ControlFunctionFeedbackOPENFO = ...
    StatusPhaseSequence321: ControlFunctionFeedbackOPENFO = ...
    StatusPLCPCSInRun: ControlFunctionFeedbackOPENFO = ...
    StatusPositionerRunsInCLOSEDDirection: ControlFunctionFeedbackOPENFO = ...
    StatusPositionerRunsInOPENDirection: ControlFunctionFeedbackOPENFO = ...
    StatusPROFIenergyCommandStartPausePending: ControlFunctionFeedbackOPENFO = ...
    StatusRemoteMode: ControlFunctionFeedbackOPENFO = ...
    StatusStartActive: ControlFunctionFeedbackOPENFO = ...
    StatusTestPosition: ControlFunctionFeedbackOPENFO = ...
    StatusTorqueCLOSED: ControlFunctionFeedbackOPENFO = ...
    StatusTorqueOPEN: ControlFunctionFeedbackOPENFO = ...
    Timer1Output: ControlFunctionFeedbackOPENFO = ...
    Timer2Output: ControlFunctionFeedbackOPENFO = ...
    Timer3Output: ControlFunctionFeedbackOPENFO = ...
    Timer4Output: ControlFunctionFeedbackOPENFO = ...
    Timer5Output: ControlFunctionFeedbackOPENFO = ...
    Timer6Output: ControlFunctionFeedbackOPENFO = ...
    TruthTable10Output: ControlFunctionFeedbackOPENFO = ...
    TruthTable11Output: ControlFunctionFeedbackOPENFO = ...
    TruthTable1Output: ControlFunctionFeedbackOPENFO = ...
    TruthTable2Output: ControlFunctionFeedbackOPENFO = ...
    TruthTable3Output: ControlFunctionFeedbackOPENFO = ...
    TruthTable4Output: ControlFunctionFeedbackOPENFO = ...
    TruthTable5Output: ControlFunctionFeedbackOPENFO = ...
    TruthTable6Output: ControlFunctionFeedbackOPENFO = ...
    TruthTable7Output: ControlFunctionFeedbackOPENFO = ...
    TruthTable8Output: ControlFunctionFeedbackOPENFO = ...
    TruthTable9Output1: ControlFunctionFeedbackOPENFO = ...
    TruthTable9Output2: ControlFunctionFeedbackOPENFO = ...
    value__ = ...
    WarningFeedbackCircuit: ControlFunctionFeedbackOPENFO = ...
    WarningSimultaneity: ControlFunctionFeedbackOPENFO = ...


class ControlFunctionForward(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlFunctionForward

    enum ControlFunctionForward, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlFunctionForward = ...
    AcyclicReceiveBit01: ControlFunctionForward = ...
    AcyclicReceiveBit02: ControlFunctionForward = ...
    AcyclicReceiveBit03: ControlFunctionForward = ...
    AcyclicReceiveBit04: ControlFunctionForward = ...
    AcyclicReceiveBit05: ControlFunctionForward = ...
    AcyclicReceiveBit06: ControlFunctionForward = ...
    AcyclicReceiveBit07: ControlFunctionForward = ...
    AcyclicReceiveBit10: ControlFunctionForward = ...
    AcyclicReceiveBit11: ControlFunctionForward = ...
    AcyclicReceiveBit12: ControlFunctionForward = ...
    AcyclicReceiveBit13: ControlFunctionForward = ...
    AcyclicReceiveBit14: ControlFunctionForward = ...
    AcyclicReceiveBit15: ControlFunctionForward = ...
    AcyclicReceiveBit16: ControlFunctionForward = ...
    AcyclicReceiveBit17: ControlFunctionForward = ...
    BUInput1: ControlFunctionForward = ...
    BUInput2: ControlFunctionForward = ...
    BUInput3: ControlFunctionForward = ...
    BUInput4: ControlFunctionForward = ...
    BUTestResetButton: ControlFunctionForward = ...
    ContactorControl1QE1: ControlFunctionForward = ...
    ContactorControl2QE2: ControlFunctionForward = ...
    ContactorControl3QE3: ControlFunctionForward = ...
    ContactorControl4QE4: ControlFunctionForward = ...
    ContactorControl5QE5: ControlFunctionForward = ...
    Counter1Output: ControlFunctionForward = ...
    Counter2Output: ControlFunctionForward = ...
    Counter3Output: ControlFunctionForward = ...
    Counter4Output: ControlFunctionForward = ...
    Counter5Output: ControlFunctionForward = ...
    Counter6Output: ControlFunctionForward = ...
    CyclicReceiveBit00: ControlFunctionForward = ...
    CyclicReceiveBit01: ControlFunctionForward = ...
    CyclicReceiveBit02: ControlFunctionForward = ...
    CyclicReceiveBit03: ControlFunctionForward = ...
    CyclicReceiveBit04: ControlFunctionForward = ...
    CyclicReceiveBit05: ControlFunctionForward = ...
    CyclicReceiveBit06: ControlFunctionForward = ...
    CyclicReceiveBit07: ControlFunctionForward = ...
    CyclicReceiveBit10: ControlFunctionForward = ...
    CyclicReceiveBit11: ControlFunctionForward = ...
    CyclicReceiveBit12: ControlFunctionForward = ...
    CyclicReceiveBit13: ControlFunctionForward = ...
    CyclicReceiveBit14: ControlFunctionForward = ...
    CyclicReceiveBit15: ControlFunctionForward = ...
    CyclicReceiveBit16: ControlFunctionForward = ...
    CyclicReceiveBit17: ControlFunctionForward = ...
    DisplayQLAOff: ControlFunctionForward = ...
    DisplayQLEForward: ControlFunctionForward = ...
    DisplayQLEForwardFast: ControlFunctionForward = ...
    DisplayQLEReverse: ControlFunctionForward = ...
    DisplayQLEReverseFast: ControlFunctionForward = ...
    DisplayQLSFault: ControlFunctionForward = ...
    DM1Input1: ControlFunctionForward = ...
    DM1Input2: ControlFunctionForward = ...
    DM1Input3: ControlFunctionForward = ...
    DM1Input4: ControlFunctionForward = ...
    DM1SensorChannel1: ControlFunctionForward = ...
    DM1SensorChannel2: ControlFunctionForward = ...
    DM2Input1: ControlFunctionForward = ...
    DM2Input2: ControlFunctionForward = ...
    DM2Input3: ControlFunctionForward = ...
    DM2Input4: ControlFunctionForward = ...
    EnabledControlCommandOff: ControlFunctionForward = ...
    EnabledControlCommandOnForward: ControlFunctionForward = ...
    EnabledControlCommandOnForwardFast: ControlFunctionForward = ...
    EnabledControlCommandOnReverse: ControlFunctionForward = ...
    EnabledControlCommandOnReverseFast: ControlFunctionForward = ...
    EventAM1OpenCircuit: ControlFunctionForward = ...
    EventAM1TripLevel0420mAGt: ControlFunctionForward = ...
    EventAM1TripLevel0420mALt: ControlFunctionForward = ...
    EventAM1WarningLevel0420mAGt: ControlFunctionForward = ...
    EventAM1WarningLevel0420mALt: ControlFunctionForward = ...
    EventAM2OpenCircuit: ControlFunctionForward = ...
    EventAM2TripLevel0420mAGt: ControlFunctionForward = ...
    EventAM2TripLevel0420mALt: ControlFunctionForward = ...
    EventAM2WarningLevel0420mAGt: ControlFunctionForward = ...
    EventAM2WarningLevel0420mALt: ControlFunctionForward = ...
    EventConfiguredOperatorPanelMissing: ControlFunctionForward = ...
    EventDMFLOCALOk: ControlFunctionForward = ...
    EventExternalFault1: ControlFunctionForward = ...
    EventExternalFault2: ControlFunctionForward = ...
    EventExternalFault3: ControlFunctionForward = ...
    EventExternalFault4: ControlFunctionForward = ...
    EventExternalFault5: ControlFunctionForward = ...
    EventExternalFault6: ControlFunctionForward = ...
    EventExternalGroundFault: ControlFunctionForward = ...
    EventExternalGroundFaultWarning: ControlFunctionForward = ...
    EventInternalGroundFault: ControlFunctionForward = ...
    EventJustOneStartPossible: ControlFunctionForward = ...
    EventLimitMonitor1: ControlFunctionForward = ...
    EventLimitMonitor2: ControlFunctionForward = ...
    EventLimitMonitor3: ControlFunctionForward = ...
    EventLimitMonitor4: ControlFunctionForward = ...
    EventLimitMonitor5: ControlFunctionForward = ...
    EventLimitMonitor6: ControlFunctionForward = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlFunctionForward = ...
    EventMotorOperatingHoursGt: ControlFunctionForward = ...
    EventNoStartPermitted: ControlFunctionForward = ...
    EventNumberOfStartsGt: ControlFunctionForward = ...
    EventOverload: ControlFunctionForward = ...
    EventOverloadAndPhaseFailure: ControlFunctionForward = ...
    EventPrewarningOverload: ControlFunctionForward = ...
    EventPROFIsafeActive: ControlFunctionForward = ...
    EventSafetyrelatedTripping: ControlFunctionForward = ...
    EventStalledRotor: ControlFunctionForward = ...
    EventStopTimeGt: ControlFunctionForward = ...
    EventThermistorOpenCircuit: ControlFunctionForward = ...
    EventThermistorShortCircuit: ControlFunctionForward = ...
    EventThermistorTripLevel: ControlFunctionForward = ...
    EventTimestampfctActiveAndOk: ControlFunctionForward = ...
    EventTM1OutOfRange: ControlFunctionForward = ...
    EventTM1SensorFault: ControlFunctionForward = ...
    EventTM1TripLevelTGt: ControlFunctionForward = ...
    EventTM1WarningLevelTGt: ControlFunctionForward = ...
    EventTM2OutOfRange: ControlFunctionForward = ...
    EventTM2SensorFault: ControlFunctionForward = ...
    EventTM2TripLevelTGt: ControlFunctionForward = ...
    EventTM2WarningLevelTGt: ControlFunctionForward = ...
    EventTripLevelCosPhiLt: ControlFunctionForward = ...
    EventTripLevelIGt: ControlFunctionForward = ...
    EventTripLevelILt: ControlFunctionForward = ...
    EventTripLevelPGt: ControlFunctionForward = ...
    EventTripLevelPLt: ControlFunctionForward = ...
    EventTripLevelULt: ControlFunctionForward = ...
    EventUnbalance: ControlFunctionForward = ...
    EventWarningLevelCosPhiLt: ControlFunctionForward = ...
    EventWarningLevelIGt: ControlFunctionForward = ...
    EventWarningLevelILt: ControlFunctionForward = ...
    EventWarningLevelPGt: ControlFunctionForward = ...
    EventWarningLevelPLt: ControlFunctionForward = ...
    EventWarningLevelULt: ControlFunctionForward = ...
    FaultAntivalence: ControlFunctionForward = ...
    FaultBus: ControlFunctionForward = ...
    FaultConfigurationError: ControlFunctionForward = ...
    FaultDouble0: ControlFunctionForward = ...
    FaultDouble1: ControlFunctionForward = ...
    FaultEndPosition: ControlFunctionForward = ...
    FaultExecutionOnCommand: ControlFunctionForward = ...
    FaultExecutionSTOPCommand: ControlFunctionForward = ...
    FaultFeedbackOff: ControlFunctionForward = ...
    FaultFeedbackOn: ControlFunctionForward = ...
    FaultHardwareFaultBasicUnit: ControlFunctionForward = ...
    FaultModuleFault: ControlFunctionForward = ...
    FaultOperationalProtectionOff: ControlFunctionForward = ...
    FaultParameterization: ControlFunctionForward = ...
    FaultPLCPCS: ControlFunctionForward = ...
    FaultPowerFailure: ControlFunctionForward = ...
    FaultStalledPositioner: ControlFunctionForward = ...
    FaultTemporaryComponents: ControlFunctionForward = ...
    FaultTestPositionFeedback: ControlFunctionForward = ...
    FixedLevel0: ControlFunctionForward = ...
    FixedLevel1: ControlFunctionForward = ...
    Flashing1Output: ControlFunctionForward = ...
    Flashing2Output: ControlFunctionForward = ...
    Flashing3Output: ControlFunctionForward = ...
    Flicker1Output: ControlFunctionForward = ...
    Flicker2Output: ControlFunctionForward = ...
    Flicker3Output: ControlFunctionForward = ...
    NonvolatileElement1Output: ControlFunctionForward = ...
    NonvolatileElement2Output: ControlFunctionForward = ...
    NonvolatileElement3Output: ControlFunctionForward = ...
    NonvolatileElement4Output: ControlFunctionForward = ...
    NotConnected: ControlFunctionForward = ...
    OPButton1: ControlFunctionForward = ...
    OPButton2: ControlFunctionForward = ...
    OPButton3: ControlFunctionForward = ...
    OPButton4: ControlFunctionForward = ...
    OPTestResetButton: ControlFunctionForward = ...
    PWMOutput: ControlFunctionForward = ...
    SignalConditioning1Output: ControlFunctionForward = ...
    SignalConditioning2Output: ControlFunctionForward = ...
    SignalConditioning3Output: ControlFunctionForward = ...
    SignalConditioning4Output: ControlFunctionForward = ...
    SignalConditioning5Output: ControlFunctionForward = ...
    SignalConditioning6Output: ControlFunctionForward = ...
    StatusBusOk: ControlFunctionForward = ...
    StatusChangeoverPauseActive: ControlFunctionForward = ...
    StatusCoolingDownPeriodActive: ControlFunctionForward = ...
    StatusCurrentFlowing: ControlFunctionForward = ...
    StatusDeviceOk: ControlFunctionForward = ...
    StatusDeviceTestActive: ControlFunctionForward = ...
    StatusEmergencyStartExecuted: ControlFunctionForward = ...
    StatusEnablingCircuitClosed: ControlFunctionForward = ...
    StatusFeedbackCLOSED: ControlFunctionForward = ...
    StatusFeedbackOPEN: ControlFunctionForward = ...
    StatusGroupFault: ControlFunctionForward = ...
    StatusGroupWarning: ControlFunctionForward = ...
    StatusInterlockingTimeActive: ControlFunctionForward = ...
    StatusOff: ControlFunctionForward = ...
    StatusOnForward: ControlFunctionForward = ...
    StatusOnForwardFast: ControlFunctionForward = ...
    StatusOnReverse: ControlFunctionForward = ...
    StatusOnReverseFast: ControlFunctionForward = ...
    StatusOperationalProtectionOff: ControlFunctionForward = ...
    StatusPauseTimeActive: ControlFunctionForward = ...
    StatusPhaseSequence123: ControlFunctionForward = ...
    StatusPhaseSequence321: ControlFunctionForward = ...
    StatusPLCPCSInRun: ControlFunctionForward = ...
    StatusPositionerRunsInCLOSEDDirection: ControlFunctionForward = ...
    StatusPositionerRunsInOPENDirection: ControlFunctionForward = ...
    StatusPROFIenergyCommandStartPausePending: ControlFunctionForward = ...
    StatusRemoteMode: ControlFunctionForward = ...
    StatusStartActive: ControlFunctionForward = ...
    StatusTestPosition: ControlFunctionForward = ...
    StatusTorqueCLOSED: ControlFunctionForward = ...
    StatusTorqueOPEN: ControlFunctionForward = ...
    Timer1Output: ControlFunctionForward = ...
    Timer2Output: ControlFunctionForward = ...
    Timer3Output: ControlFunctionForward = ...
    Timer4Output: ControlFunctionForward = ...
    Timer5Output: ControlFunctionForward = ...
    Timer6Output: ControlFunctionForward = ...
    TruthTable10Output: ControlFunctionForward = ...
    TruthTable11Output: ControlFunctionForward = ...
    TruthTable1Output: ControlFunctionForward = ...
    TruthTable2Output: ControlFunctionForward = ...
    TruthTable3Output: ControlFunctionForward = ...
    TruthTable4Output: ControlFunctionForward = ...
    TruthTable5Output: ControlFunctionForward = ...
    TruthTable6Output: ControlFunctionForward = ...
    TruthTable7Output: ControlFunctionForward = ...
    TruthTable8Output: ControlFunctionForward = ...
    TruthTable9Output1: ControlFunctionForward = ...
    TruthTable9Output2: ControlFunctionForward = ...
    value__ = ...
    WarningFeedbackCircuit: ControlFunctionForward = ...
    WarningSimultaneity: ControlFunctionForward = ...


class ControlFunctionForwardFast(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlFunctionForwardFast

    enum ControlFunctionForwardFast, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlFunctionForwardFast = ...
    AcyclicReceiveBit01: ControlFunctionForwardFast = ...
    AcyclicReceiveBit02: ControlFunctionForwardFast = ...
    AcyclicReceiveBit03: ControlFunctionForwardFast = ...
    AcyclicReceiveBit04: ControlFunctionForwardFast = ...
    AcyclicReceiveBit05: ControlFunctionForwardFast = ...
    AcyclicReceiveBit06: ControlFunctionForwardFast = ...
    AcyclicReceiveBit07: ControlFunctionForwardFast = ...
    AcyclicReceiveBit10: ControlFunctionForwardFast = ...
    AcyclicReceiveBit11: ControlFunctionForwardFast = ...
    AcyclicReceiveBit12: ControlFunctionForwardFast = ...
    AcyclicReceiveBit13: ControlFunctionForwardFast = ...
    AcyclicReceiveBit14: ControlFunctionForwardFast = ...
    AcyclicReceiveBit15: ControlFunctionForwardFast = ...
    AcyclicReceiveBit16: ControlFunctionForwardFast = ...
    AcyclicReceiveBit17: ControlFunctionForwardFast = ...
    BUInput1: ControlFunctionForwardFast = ...
    BUInput2: ControlFunctionForwardFast = ...
    BUInput3: ControlFunctionForwardFast = ...
    BUInput4: ControlFunctionForwardFast = ...
    BUTestResetButton: ControlFunctionForwardFast = ...
    ContactorControl1QE1: ControlFunctionForwardFast = ...
    ContactorControl2QE2: ControlFunctionForwardFast = ...
    ContactorControl3QE3: ControlFunctionForwardFast = ...
    ContactorControl4QE4: ControlFunctionForwardFast = ...
    ContactorControl5QE5: ControlFunctionForwardFast = ...
    Counter1Output: ControlFunctionForwardFast = ...
    Counter2Output: ControlFunctionForwardFast = ...
    Counter3Output: ControlFunctionForwardFast = ...
    Counter4Output: ControlFunctionForwardFast = ...
    Counter5Output: ControlFunctionForwardFast = ...
    Counter6Output: ControlFunctionForwardFast = ...
    CyclicReceiveBit00: ControlFunctionForwardFast = ...
    CyclicReceiveBit01: ControlFunctionForwardFast = ...
    CyclicReceiveBit02: ControlFunctionForwardFast = ...
    CyclicReceiveBit03: ControlFunctionForwardFast = ...
    CyclicReceiveBit04: ControlFunctionForwardFast = ...
    CyclicReceiveBit05: ControlFunctionForwardFast = ...
    CyclicReceiveBit06: ControlFunctionForwardFast = ...
    CyclicReceiveBit07: ControlFunctionForwardFast = ...
    CyclicReceiveBit10: ControlFunctionForwardFast = ...
    CyclicReceiveBit11: ControlFunctionForwardFast = ...
    CyclicReceiveBit12: ControlFunctionForwardFast = ...
    CyclicReceiveBit13: ControlFunctionForwardFast = ...
    CyclicReceiveBit14: ControlFunctionForwardFast = ...
    CyclicReceiveBit15: ControlFunctionForwardFast = ...
    CyclicReceiveBit16: ControlFunctionForwardFast = ...
    CyclicReceiveBit17: ControlFunctionForwardFast = ...
    DisplayQLAOff: ControlFunctionForwardFast = ...
    DisplayQLEForward: ControlFunctionForwardFast = ...
    DisplayQLEForwardFast: ControlFunctionForwardFast = ...
    DisplayQLEReverse: ControlFunctionForwardFast = ...
    DisplayQLEReverseFast: ControlFunctionForwardFast = ...
    DisplayQLSFault: ControlFunctionForwardFast = ...
    DM1Input1: ControlFunctionForwardFast = ...
    DM1Input2: ControlFunctionForwardFast = ...
    DM1Input3: ControlFunctionForwardFast = ...
    DM1Input4: ControlFunctionForwardFast = ...
    DM1SensorChannel1: ControlFunctionForwardFast = ...
    DM1SensorChannel2: ControlFunctionForwardFast = ...
    DM2Input1: ControlFunctionForwardFast = ...
    DM2Input2: ControlFunctionForwardFast = ...
    DM2Input3: ControlFunctionForwardFast = ...
    DM2Input4: ControlFunctionForwardFast = ...
    EnabledControlCommandOff: ControlFunctionForwardFast = ...
    EnabledControlCommandOnForward: ControlFunctionForwardFast = ...
    EnabledControlCommandOnForwardFast: ControlFunctionForwardFast = ...
    EnabledControlCommandOnReverse: ControlFunctionForwardFast = ...
    EnabledControlCommandOnReverseFast: ControlFunctionForwardFast = ...
    EventAM1OpenCircuit: ControlFunctionForwardFast = ...
    EventAM1TripLevel0420mAGt: ControlFunctionForwardFast = ...
    EventAM1TripLevel0420mALt: ControlFunctionForwardFast = ...
    EventAM1WarningLevel0420mAGt: ControlFunctionForwardFast = ...
    EventAM1WarningLevel0420mALt: ControlFunctionForwardFast = ...
    EventAM2OpenCircuit: ControlFunctionForwardFast = ...
    EventAM2TripLevel0420mAGt: ControlFunctionForwardFast = ...
    EventAM2TripLevel0420mALt: ControlFunctionForwardFast = ...
    EventAM2WarningLevel0420mAGt: ControlFunctionForwardFast = ...
    EventAM2WarningLevel0420mALt: ControlFunctionForwardFast = ...
    EventConfiguredOperatorPanelMissing: ControlFunctionForwardFast = ...
    EventDMFLOCALOk: ControlFunctionForwardFast = ...
    EventExternalFault1: ControlFunctionForwardFast = ...
    EventExternalFault2: ControlFunctionForwardFast = ...
    EventExternalFault3: ControlFunctionForwardFast = ...
    EventExternalFault4: ControlFunctionForwardFast = ...
    EventExternalFault5: ControlFunctionForwardFast = ...
    EventExternalFault6: ControlFunctionForwardFast = ...
    EventExternalGroundFault: ControlFunctionForwardFast = ...
    EventExternalGroundFaultWarning: ControlFunctionForwardFast = ...
    EventInternalGroundFault: ControlFunctionForwardFast = ...
    EventJustOneStartPossible: ControlFunctionForwardFast = ...
    EventLimitMonitor1: ControlFunctionForwardFast = ...
    EventLimitMonitor2: ControlFunctionForwardFast = ...
    EventLimitMonitor3: ControlFunctionForwardFast = ...
    EventLimitMonitor4: ControlFunctionForwardFast = ...
    EventLimitMonitor5: ControlFunctionForwardFast = ...
    EventLimitMonitor6: ControlFunctionForwardFast = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlFunctionForwardFast = ...
    EventMotorOperatingHoursGt: ControlFunctionForwardFast = ...
    EventNoStartPermitted: ControlFunctionForwardFast = ...
    EventNumberOfStartsGt: ControlFunctionForwardFast = ...
    EventOverload: ControlFunctionForwardFast = ...
    EventOverloadAndPhaseFailure: ControlFunctionForwardFast = ...
    EventPrewarningOverload: ControlFunctionForwardFast = ...
    EventPROFIsafeActive: ControlFunctionForwardFast = ...
    EventSafetyrelatedTripping: ControlFunctionForwardFast = ...
    EventStalledRotor: ControlFunctionForwardFast = ...
    EventStopTimeGt: ControlFunctionForwardFast = ...
    EventThermistorOpenCircuit: ControlFunctionForwardFast = ...
    EventThermistorShortCircuit: ControlFunctionForwardFast = ...
    EventThermistorTripLevel: ControlFunctionForwardFast = ...
    EventTimestampfctActiveAndOk: ControlFunctionForwardFast = ...
    EventTM1OutOfRange: ControlFunctionForwardFast = ...
    EventTM1SensorFault: ControlFunctionForwardFast = ...
    EventTM1TripLevelTGt: ControlFunctionForwardFast = ...
    EventTM1WarningLevelTGt: ControlFunctionForwardFast = ...
    EventTM2OutOfRange: ControlFunctionForwardFast = ...
    EventTM2SensorFault: ControlFunctionForwardFast = ...
    EventTM2TripLevelTGt: ControlFunctionForwardFast = ...
    EventTM2WarningLevelTGt: ControlFunctionForwardFast = ...
    EventTripLevelCosPhiLt: ControlFunctionForwardFast = ...
    EventTripLevelIGt: ControlFunctionForwardFast = ...
    EventTripLevelILt: ControlFunctionForwardFast = ...
    EventTripLevelPGt: ControlFunctionForwardFast = ...
    EventTripLevelPLt: ControlFunctionForwardFast = ...
    EventTripLevelULt: ControlFunctionForwardFast = ...
    EventUnbalance: ControlFunctionForwardFast = ...
    EventWarningLevelCosPhiLt: ControlFunctionForwardFast = ...
    EventWarningLevelIGt: ControlFunctionForwardFast = ...
    EventWarningLevelILt: ControlFunctionForwardFast = ...
    EventWarningLevelPGt: ControlFunctionForwardFast = ...
    EventWarningLevelPLt: ControlFunctionForwardFast = ...
    EventWarningLevelULt: ControlFunctionForwardFast = ...
    FaultAntivalence: ControlFunctionForwardFast = ...
    FaultBus: ControlFunctionForwardFast = ...
    FaultConfigurationError: ControlFunctionForwardFast = ...
    FaultDouble0: ControlFunctionForwardFast = ...
    FaultDouble1: ControlFunctionForwardFast = ...
    FaultEndPosition: ControlFunctionForwardFast = ...
    FaultExecutionOnCommand: ControlFunctionForwardFast = ...
    FaultExecutionSTOPCommand: ControlFunctionForwardFast = ...
    FaultFeedbackOff: ControlFunctionForwardFast = ...
    FaultFeedbackOn: ControlFunctionForwardFast = ...
    FaultHardwareFaultBasicUnit: ControlFunctionForwardFast = ...
    FaultModuleFault: ControlFunctionForwardFast = ...
    FaultOperationalProtectionOff: ControlFunctionForwardFast = ...
    FaultParameterization: ControlFunctionForwardFast = ...
    FaultPLCPCS: ControlFunctionForwardFast = ...
    FaultPowerFailure: ControlFunctionForwardFast = ...
    FaultStalledPositioner: ControlFunctionForwardFast = ...
    FaultTemporaryComponents: ControlFunctionForwardFast = ...
    FaultTestPositionFeedback: ControlFunctionForwardFast = ...
    FixedLevel0: ControlFunctionForwardFast = ...
    FixedLevel1: ControlFunctionForwardFast = ...
    Flashing1Output: ControlFunctionForwardFast = ...
    Flashing2Output: ControlFunctionForwardFast = ...
    Flashing3Output: ControlFunctionForwardFast = ...
    Flicker1Output: ControlFunctionForwardFast = ...
    Flicker2Output: ControlFunctionForwardFast = ...
    Flicker3Output: ControlFunctionForwardFast = ...
    NonvolatileElement1Output: ControlFunctionForwardFast = ...
    NonvolatileElement2Output: ControlFunctionForwardFast = ...
    NonvolatileElement3Output: ControlFunctionForwardFast = ...
    NonvolatileElement4Output: ControlFunctionForwardFast = ...
    NotConnected: ControlFunctionForwardFast = ...
    OPButton1: ControlFunctionForwardFast = ...
    OPButton2: ControlFunctionForwardFast = ...
    OPButton3: ControlFunctionForwardFast = ...
    OPButton4: ControlFunctionForwardFast = ...
    OPTestResetButton: ControlFunctionForwardFast = ...
    PWMOutput: ControlFunctionForwardFast = ...
    SignalConditioning1Output: ControlFunctionForwardFast = ...
    SignalConditioning2Output: ControlFunctionForwardFast = ...
    SignalConditioning3Output: ControlFunctionForwardFast = ...
    SignalConditioning4Output: ControlFunctionForwardFast = ...
    SignalConditioning5Output: ControlFunctionForwardFast = ...
    SignalConditioning6Output: ControlFunctionForwardFast = ...
    StatusBusOk: ControlFunctionForwardFast = ...
    StatusChangeoverPauseActive: ControlFunctionForwardFast = ...
    StatusCoolingDownPeriodActive: ControlFunctionForwardFast = ...
    StatusCurrentFlowing: ControlFunctionForwardFast = ...
    StatusDeviceOk: ControlFunctionForwardFast = ...
    StatusDeviceTestActive: ControlFunctionForwardFast = ...
    StatusEmergencyStartExecuted: ControlFunctionForwardFast = ...
    StatusEnablingCircuitClosed: ControlFunctionForwardFast = ...
    StatusFeedbackCLOSED: ControlFunctionForwardFast = ...
    StatusFeedbackOPEN: ControlFunctionForwardFast = ...
    StatusGroupFault: ControlFunctionForwardFast = ...
    StatusGroupWarning: ControlFunctionForwardFast = ...
    StatusInterlockingTimeActive: ControlFunctionForwardFast = ...
    StatusOff: ControlFunctionForwardFast = ...
    StatusOnForward: ControlFunctionForwardFast = ...
    StatusOnForwardFast: ControlFunctionForwardFast = ...
    StatusOnReverse: ControlFunctionForwardFast = ...
    StatusOnReverseFast: ControlFunctionForwardFast = ...
    StatusOperationalProtectionOff: ControlFunctionForwardFast = ...
    StatusPauseTimeActive: ControlFunctionForwardFast = ...
    StatusPhaseSequence123: ControlFunctionForwardFast = ...
    StatusPhaseSequence321: ControlFunctionForwardFast = ...
    StatusPLCPCSInRun: ControlFunctionForwardFast = ...
    StatusPositionerRunsInCLOSEDDirection: ControlFunctionForwardFast = ...
    StatusPositionerRunsInOPENDirection: ControlFunctionForwardFast = ...
    StatusPROFIenergyCommandStartPausePending: ControlFunctionForwardFast = ...
    StatusRemoteMode: ControlFunctionForwardFast = ...
    StatusStartActive: ControlFunctionForwardFast = ...
    StatusTestPosition: ControlFunctionForwardFast = ...
    StatusTorqueCLOSED: ControlFunctionForwardFast = ...
    StatusTorqueOPEN: ControlFunctionForwardFast = ...
    Timer1Output: ControlFunctionForwardFast = ...
    Timer2Output: ControlFunctionForwardFast = ...
    Timer3Output: ControlFunctionForwardFast = ...
    Timer4Output: ControlFunctionForwardFast = ...
    Timer5Output: ControlFunctionForwardFast = ...
    Timer6Output: ControlFunctionForwardFast = ...
    TruthTable10Output: ControlFunctionForwardFast = ...
    TruthTable11Output: ControlFunctionForwardFast = ...
    TruthTable1Output: ControlFunctionForwardFast = ...
    TruthTable2Output: ControlFunctionForwardFast = ...
    TruthTable3Output: ControlFunctionForwardFast = ...
    TruthTable4Output: ControlFunctionForwardFast = ...
    TruthTable5Output: ControlFunctionForwardFast = ...
    TruthTable6Output: ControlFunctionForwardFast = ...
    TruthTable7Output: ControlFunctionForwardFast = ...
    TruthTable8Output: ControlFunctionForwardFast = ...
    TruthTable9Output1: ControlFunctionForwardFast = ...
    TruthTable9Output2: ControlFunctionForwardFast = ...
    value__ = ...
    WarningFeedbackCircuit: ControlFunctionForwardFast = ...
    WarningSimultaneity: ControlFunctionForwardFast = ...


class ControlFunctionOFF(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlFunctionOFF

    enum ControlFunctionOFF, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlFunctionOFF = ...
    AcyclicReceiveBit01: ControlFunctionOFF = ...
    AcyclicReceiveBit02: ControlFunctionOFF = ...
    AcyclicReceiveBit03: ControlFunctionOFF = ...
    AcyclicReceiveBit04: ControlFunctionOFF = ...
    AcyclicReceiveBit05: ControlFunctionOFF = ...
    AcyclicReceiveBit06: ControlFunctionOFF = ...
    AcyclicReceiveBit07: ControlFunctionOFF = ...
    AcyclicReceiveBit10: ControlFunctionOFF = ...
    AcyclicReceiveBit11: ControlFunctionOFF = ...
    AcyclicReceiveBit12: ControlFunctionOFF = ...
    AcyclicReceiveBit13: ControlFunctionOFF = ...
    AcyclicReceiveBit14: ControlFunctionOFF = ...
    AcyclicReceiveBit15: ControlFunctionOFF = ...
    AcyclicReceiveBit16: ControlFunctionOFF = ...
    AcyclicReceiveBit17: ControlFunctionOFF = ...
    BUInput1: ControlFunctionOFF = ...
    BUInput2: ControlFunctionOFF = ...
    BUInput3: ControlFunctionOFF = ...
    BUInput4: ControlFunctionOFF = ...
    BUTestResetButton: ControlFunctionOFF = ...
    ContactorControl1QE1: ControlFunctionOFF = ...
    ContactorControl2QE2: ControlFunctionOFF = ...
    ContactorControl3QE3: ControlFunctionOFF = ...
    ContactorControl4QE4: ControlFunctionOFF = ...
    ContactorControl5QE5: ControlFunctionOFF = ...
    Counter1Output: ControlFunctionOFF = ...
    Counter2Output: ControlFunctionOFF = ...
    Counter3Output: ControlFunctionOFF = ...
    Counter4Output: ControlFunctionOFF = ...
    Counter5Output: ControlFunctionOFF = ...
    Counter6Output: ControlFunctionOFF = ...
    CyclicReceiveBit00: ControlFunctionOFF = ...
    CyclicReceiveBit01: ControlFunctionOFF = ...
    CyclicReceiveBit02: ControlFunctionOFF = ...
    CyclicReceiveBit03: ControlFunctionOFF = ...
    CyclicReceiveBit04: ControlFunctionOFF = ...
    CyclicReceiveBit05: ControlFunctionOFF = ...
    CyclicReceiveBit06: ControlFunctionOFF = ...
    CyclicReceiveBit07: ControlFunctionOFF = ...
    CyclicReceiveBit10: ControlFunctionOFF = ...
    CyclicReceiveBit11: ControlFunctionOFF = ...
    CyclicReceiveBit12: ControlFunctionOFF = ...
    CyclicReceiveBit13: ControlFunctionOFF = ...
    CyclicReceiveBit14: ControlFunctionOFF = ...
    CyclicReceiveBit15: ControlFunctionOFF = ...
    CyclicReceiveBit16: ControlFunctionOFF = ...
    CyclicReceiveBit17: ControlFunctionOFF = ...
    DisplayQLAOff: ControlFunctionOFF = ...
    DisplayQLEForward: ControlFunctionOFF = ...
    DisplayQLEForwardFast: ControlFunctionOFF = ...
    DisplayQLEReverse: ControlFunctionOFF = ...
    DisplayQLEReverseFast: ControlFunctionOFF = ...
    DisplayQLSFault: ControlFunctionOFF = ...
    DM1Input1: ControlFunctionOFF = ...
    DM1Input2: ControlFunctionOFF = ...
    DM1Input3: ControlFunctionOFF = ...
    DM1Input4: ControlFunctionOFF = ...
    DM1SensorChannel1: ControlFunctionOFF = ...
    DM1SensorChannel2: ControlFunctionOFF = ...
    DM2Input1: ControlFunctionOFF = ...
    DM2Input2: ControlFunctionOFF = ...
    DM2Input3: ControlFunctionOFF = ...
    DM2Input4: ControlFunctionOFF = ...
    EnabledControlCommandOff: ControlFunctionOFF = ...
    EnabledControlCommandOnForward: ControlFunctionOFF = ...
    EnabledControlCommandOnForwardFast: ControlFunctionOFF = ...
    EnabledControlCommandOnReverse: ControlFunctionOFF = ...
    EnabledControlCommandOnReverseFast: ControlFunctionOFF = ...
    EventAM1OpenCircuit: ControlFunctionOFF = ...
    EventAM1TripLevel0420mAGt: ControlFunctionOFF = ...
    EventAM1TripLevel0420mALt: ControlFunctionOFF = ...
    EventAM1WarningLevel0420mAGt: ControlFunctionOFF = ...
    EventAM1WarningLevel0420mALt: ControlFunctionOFF = ...
    EventAM2OpenCircuit: ControlFunctionOFF = ...
    EventAM2TripLevel0420mAGt: ControlFunctionOFF = ...
    EventAM2TripLevel0420mALt: ControlFunctionOFF = ...
    EventAM2WarningLevel0420mAGt: ControlFunctionOFF = ...
    EventAM2WarningLevel0420mALt: ControlFunctionOFF = ...
    EventConfiguredOperatorPanelMissing: ControlFunctionOFF = ...
    EventDMFLOCALOk: ControlFunctionOFF = ...
    EventExternalFault1: ControlFunctionOFF = ...
    EventExternalFault2: ControlFunctionOFF = ...
    EventExternalFault3: ControlFunctionOFF = ...
    EventExternalFault4: ControlFunctionOFF = ...
    EventExternalFault5: ControlFunctionOFF = ...
    EventExternalFault6: ControlFunctionOFF = ...
    EventExternalGroundFault: ControlFunctionOFF = ...
    EventExternalGroundFaultWarning: ControlFunctionOFF = ...
    EventInternalGroundFault: ControlFunctionOFF = ...
    EventJustOneStartPossible: ControlFunctionOFF = ...
    EventLimitMonitor1: ControlFunctionOFF = ...
    EventLimitMonitor2: ControlFunctionOFF = ...
    EventLimitMonitor3: ControlFunctionOFF = ...
    EventLimitMonitor4: ControlFunctionOFF = ...
    EventLimitMonitor5: ControlFunctionOFF = ...
    EventLimitMonitor6: ControlFunctionOFF = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlFunctionOFF = ...
    EventMotorOperatingHoursGt: ControlFunctionOFF = ...
    EventNoStartPermitted: ControlFunctionOFF = ...
    EventNumberOfStartsGt: ControlFunctionOFF = ...
    EventOverload: ControlFunctionOFF = ...
    EventOverloadAndPhaseFailure: ControlFunctionOFF = ...
    EventPrewarningOverload: ControlFunctionOFF = ...
    EventPROFIsafeActive: ControlFunctionOFF = ...
    EventSafetyrelatedTripping: ControlFunctionOFF = ...
    EventStalledRotor: ControlFunctionOFF = ...
    EventStopTimeGt: ControlFunctionOFF = ...
    EventThermistorOpenCircuit: ControlFunctionOFF = ...
    EventThermistorShortCircuit: ControlFunctionOFF = ...
    EventThermistorTripLevel: ControlFunctionOFF = ...
    EventTimestampfctActiveAndOk: ControlFunctionOFF = ...
    EventTM1OutOfRange: ControlFunctionOFF = ...
    EventTM1SensorFault: ControlFunctionOFF = ...
    EventTM1TripLevelTGt: ControlFunctionOFF = ...
    EventTM1WarningLevelTGt: ControlFunctionOFF = ...
    EventTM2OutOfRange: ControlFunctionOFF = ...
    EventTM2SensorFault: ControlFunctionOFF = ...
    EventTM2TripLevelTGt: ControlFunctionOFF = ...
    EventTM2WarningLevelTGt: ControlFunctionOFF = ...
    EventTripLevelCosPhiLt: ControlFunctionOFF = ...
    EventTripLevelIGt: ControlFunctionOFF = ...
    EventTripLevelILt: ControlFunctionOFF = ...
    EventTripLevelPGt: ControlFunctionOFF = ...
    EventTripLevelPLt: ControlFunctionOFF = ...
    EventTripLevelULt: ControlFunctionOFF = ...
    EventUnbalance: ControlFunctionOFF = ...
    EventWarningLevelCosPhiLt: ControlFunctionOFF = ...
    EventWarningLevelIGt: ControlFunctionOFF = ...
    EventWarningLevelILt: ControlFunctionOFF = ...
    EventWarningLevelPGt: ControlFunctionOFF = ...
    EventWarningLevelPLt: ControlFunctionOFF = ...
    EventWarningLevelULt: ControlFunctionOFF = ...
    FaultAntivalence: ControlFunctionOFF = ...
    FaultBus: ControlFunctionOFF = ...
    FaultConfigurationError: ControlFunctionOFF = ...
    FaultDouble0: ControlFunctionOFF = ...
    FaultDouble1: ControlFunctionOFF = ...
    FaultEndPosition: ControlFunctionOFF = ...
    FaultExecutionOnCommand: ControlFunctionOFF = ...
    FaultExecutionSTOPCommand: ControlFunctionOFF = ...
    FaultFeedbackOff: ControlFunctionOFF = ...
    FaultFeedbackOn: ControlFunctionOFF = ...
    FaultHardwareFaultBasicUnit: ControlFunctionOFF = ...
    FaultModuleFault: ControlFunctionOFF = ...
    FaultOperationalProtectionOff: ControlFunctionOFF = ...
    FaultParameterization: ControlFunctionOFF = ...
    FaultPLCPCS: ControlFunctionOFF = ...
    FaultPowerFailure: ControlFunctionOFF = ...
    FaultStalledPositioner: ControlFunctionOFF = ...
    FaultTemporaryComponents: ControlFunctionOFF = ...
    FaultTestPositionFeedback: ControlFunctionOFF = ...
    FixedLevel0: ControlFunctionOFF = ...
    FixedLevel1: ControlFunctionOFF = ...
    Flashing1Output: ControlFunctionOFF = ...
    Flashing2Output: ControlFunctionOFF = ...
    Flashing3Output: ControlFunctionOFF = ...
    Flicker1Output: ControlFunctionOFF = ...
    Flicker2Output: ControlFunctionOFF = ...
    Flicker3Output: ControlFunctionOFF = ...
    NonvolatileElement1Output: ControlFunctionOFF = ...
    NonvolatileElement2Output: ControlFunctionOFF = ...
    NonvolatileElement3Output: ControlFunctionOFF = ...
    NonvolatileElement4Output: ControlFunctionOFF = ...
    NotConnected: ControlFunctionOFF = ...
    OPButton1: ControlFunctionOFF = ...
    OPButton2: ControlFunctionOFF = ...
    OPButton3: ControlFunctionOFF = ...
    OPButton4: ControlFunctionOFF = ...
    OPTestResetButton: ControlFunctionOFF = ...
    PWMOutput: ControlFunctionOFF = ...
    SignalConditioning1Output: ControlFunctionOFF = ...
    SignalConditioning2Output: ControlFunctionOFF = ...
    SignalConditioning3Output: ControlFunctionOFF = ...
    SignalConditioning4Output: ControlFunctionOFF = ...
    SignalConditioning5Output: ControlFunctionOFF = ...
    SignalConditioning6Output: ControlFunctionOFF = ...
    StatusBusOk: ControlFunctionOFF = ...
    StatusChangeoverPauseActive: ControlFunctionOFF = ...
    StatusCoolingDownPeriodActive: ControlFunctionOFF = ...
    StatusCurrentFlowing: ControlFunctionOFF = ...
    StatusDeviceOk: ControlFunctionOFF = ...
    StatusDeviceTestActive: ControlFunctionOFF = ...
    StatusEmergencyStartExecuted: ControlFunctionOFF = ...
    StatusEnablingCircuitClosed: ControlFunctionOFF = ...
    StatusFeedbackCLOSED: ControlFunctionOFF = ...
    StatusFeedbackOPEN: ControlFunctionOFF = ...
    StatusGroupFault: ControlFunctionOFF = ...
    StatusGroupWarning: ControlFunctionOFF = ...
    StatusInterlockingTimeActive: ControlFunctionOFF = ...
    StatusOff: ControlFunctionOFF = ...
    StatusOnForward: ControlFunctionOFF = ...
    StatusOnForwardFast: ControlFunctionOFF = ...
    StatusOnReverse: ControlFunctionOFF = ...
    StatusOnReverseFast: ControlFunctionOFF = ...
    StatusOperationalProtectionOff: ControlFunctionOFF = ...
    StatusPauseTimeActive: ControlFunctionOFF = ...
    StatusPhaseSequence123: ControlFunctionOFF = ...
    StatusPhaseSequence321: ControlFunctionOFF = ...
    StatusPLCPCSInRun: ControlFunctionOFF = ...
    StatusPositionerRunsInCLOSEDDirection: ControlFunctionOFF = ...
    StatusPositionerRunsInOPENDirection: ControlFunctionOFF = ...
    StatusPROFIenergyCommandStartPausePending: ControlFunctionOFF = ...
    StatusRemoteMode: ControlFunctionOFF = ...
    StatusStartActive: ControlFunctionOFF = ...
    StatusTestPosition: ControlFunctionOFF = ...
    StatusTorqueCLOSED: ControlFunctionOFF = ...
    StatusTorqueOPEN: ControlFunctionOFF = ...
    Timer1Output: ControlFunctionOFF = ...
    Timer2Output: ControlFunctionOFF = ...
    Timer3Output: ControlFunctionOFF = ...
    Timer4Output: ControlFunctionOFF = ...
    Timer5Output: ControlFunctionOFF = ...
    Timer6Output: ControlFunctionOFF = ...
    TruthTable10Output: ControlFunctionOFF = ...
    TruthTable11Output: ControlFunctionOFF = ...
    TruthTable1Output: ControlFunctionOFF = ...
    TruthTable2Output: ControlFunctionOFF = ...
    TruthTable3Output: ControlFunctionOFF = ...
    TruthTable4Output: ControlFunctionOFF = ...
    TruthTable5Output: ControlFunctionOFF = ...
    TruthTable6Output: ControlFunctionOFF = ...
    TruthTable7Output: ControlFunctionOFF = ...
    TruthTable8Output: ControlFunctionOFF = ...
    TruthTable9Output1: ControlFunctionOFF = ...
    TruthTable9Output2: ControlFunctionOFF = ...
    value__ = ...
    WarningFeedbackCircuit: ControlFunctionOFF = ...
    WarningSimultaneity: ControlFunctionOFF = ...


class ControlFunctionReverse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlFunctionReverse

    enum ControlFunctionReverse, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlFunctionReverse = ...
    AcyclicReceiveBit01: ControlFunctionReverse = ...
    AcyclicReceiveBit02: ControlFunctionReverse = ...
    AcyclicReceiveBit03: ControlFunctionReverse = ...
    AcyclicReceiveBit04: ControlFunctionReverse = ...
    AcyclicReceiveBit05: ControlFunctionReverse = ...
    AcyclicReceiveBit06: ControlFunctionReverse = ...
    AcyclicReceiveBit07: ControlFunctionReverse = ...
    AcyclicReceiveBit10: ControlFunctionReverse = ...
    AcyclicReceiveBit11: ControlFunctionReverse = ...
    AcyclicReceiveBit12: ControlFunctionReverse = ...
    AcyclicReceiveBit13: ControlFunctionReverse = ...
    AcyclicReceiveBit14: ControlFunctionReverse = ...
    AcyclicReceiveBit15: ControlFunctionReverse = ...
    AcyclicReceiveBit16: ControlFunctionReverse = ...
    AcyclicReceiveBit17: ControlFunctionReverse = ...
    BUInput1: ControlFunctionReverse = ...
    BUInput2: ControlFunctionReverse = ...
    BUInput3: ControlFunctionReverse = ...
    BUInput4: ControlFunctionReverse = ...
    BUTestResetButton: ControlFunctionReverse = ...
    ContactorControl1QE1: ControlFunctionReverse = ...
    ContactorControl2QE2: ControlFunctionReverse = ...
    ContactorControl3QE3: ControlFunctionReverse = ...
    ContactorControl4QE4: ControlFunctionReverse = ...
    ContactorControl5QE5: ControlFunctionReverse = ...
    Counter1Output: ControlFunctionReverse = ...
    Counter2Output: ControlFunctionReverse = ...
    Counter3Output: ControlFunctionReverse = ...
    Counter4Output: ControlFunctionReverse = ...
    Counter5Output: ControlFunctionReverse = ...
    Counter6Output: ControlFunctionReverse = ...
    CyclicReceiveBit00: ControlFunctionReverse = ...
    CyclicReceiveBit01: ControlFunctionReverse = ...
    CyclicReceiveBit02: ControlFunctionReverse = ...
    CyclicReceiveBit03: ControlFunctionReverse = ...
    CyclicReceiveBit04: ControlFunctionReverse = ...
    CyclicReceiveBit05: ControlFunctionReverse = ...
    CyclicReceiveBit06: ControlFunctionReverse = ...
    CyclicReceiveBit07: ControlFunctionReverse = ...
    CyclicReceiveBit10: ControlFunctionReverse = ...
    CyclicReceiveBit11: ControlFunctionReverse = ...
    CyclicReceiveBit12: ControlFunctionReverse = ...
    CyclicReceiveBit13: ControlFunctionReverse = ...
    CyclicReceiveBit14: ControlFunctionReverse = ...
    CyclicReceiveBit15: ControlFunctionReverse = ...
    CyclicReceiveBit16: ControlFunctionReverse = ...
    CyclicReceiveBit17: ControlFunctionReverse = ...
    DisplayQLAOff: ControlFunctionReverse = ...
    DisplayQLEForward: ControlFunctionReverse = ...
    DisplayQLEForwardFast: ControlFunctionReverse = ...
    DisplayQLEReverse: ControlFunctionReverse = ...
    DisplayQLEReverseFast: ControlFunctionReverse = ...
    DisplayQLSFault: ControlFunctionReverse = ...
    DM1Input1: ControlFunctionReverse = ...
    DM1Input2: ControlFunctionReverse = ...
    DM1Input3: ControlFunctionReverse = ...
    DM1Input4: ControlFunctionReverse = ...
    DM1SensorChannel1: ControlFunctionReverse = ...
    DM1SensorChannel2: ControlFunctionReverse = ...
    DM2Input1: ControlFunctionReverse = ...
    DM2Input2: ControlFunctionReverse = ...
    DM2Input3: ControlFunctionReverse = ...
    DM2Input4: ControlFunctionReverse = ...
    EnabledControlCommandOff: ControlFunctionReverse = ...
    EnabledControlCommandOnForward: ControlFunctionReverse = ...
    EnabledControlCommandOnForwardFast: ControlFunctionReverse = ...
    EnabledControlCommandOnReverse: ControlFunctionReverse = ...
    EnabledControlCommandOnReverseFast: ControlFunctionReverse = ...
    EventAM1OpenCircuit: ControlFunctionReverse = ...
    EventAM1TripLevel0420mAGt: ControlFunctionReverse = ...
    EventAM1TripLevel0420mALt: ControlFunctionReverse = ...
    EventAM1WarningLevel0420mAGt: ControlFunctionReverse = ...
    EventAM1WarningLevel0420mALt: ControlFunctionReverse = ...
    EventAM2OpenCircuit: ControlFunctionReverse = ...
    EventAM2TripLevel0420mAGt: ControlFunctionReverse = ...
    EventAM2TripLevel0420mALt: ControlFunctionReverse = ...
    EventAM2WarningLevel0420mAGt: ControlFunctionReverse = ...
    EventAM2WarningLevel0420mALt: ControlFunctionReverse = ...
    EventConfiguredOperatorPanelMissing: ControlFunctionReverse = ...
    EventDMFLOCALOk: ControlFunctionReverse = ...
    EventExternalFault1: ControlFunctionReverse = ...
    EventExternalFault2: ControlFunctionReverse = ...
    EventExternalFault3: ControlFunctionReverse = ...
    EventExternalFault4: ControlFunctionReverse = ...
    EventExternalFault5: ControlFunctionReverse = ...
    EventExternalFault6: ControlFunctionReverse = ...
    EventExternalGroundFault: ControlFunctionReverse = ...
    EventExternalGroundFaultWarning: ControlFunctionReverse = ...
    EventInternalGroundFault: ControlFunctionReverse = ...
    EventJustOneStartPossible: ControlFunctionReverse = ...
    EventLimitMonitor1: ControlFunctionReverse = ...
    EventLimitMonitor2: ControlFunctionReverse = ...
    EventLimitMonitor3: ControlFunctionReverse = ...
    EventLimitMonitor4: ControlFunctionReverse = ...
    EventLimitMonitor5: ControlFunctionReverse = ...
    EventLimitMonitor6: ControlFunctionReverse = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlFunctionReverse = ...
    EventMotorOperatingHoursGt: ControlFunctionReverse = ...
    EventNoStartPermitted: ControlFunctionReverse = ...
    EventNumberOfStartsGt: ControlFunctionReverse = ...
    EventOverload: ControlFunctionReverse = ...
    EventOverloadAndPhaseFailure: ControlFunctionReverse = ...
    EventPrewarningOverload: ControlFunctionReverse = ...
    EventPROFIsafeActive: ControlFunctionReverse = ...
    EventSafetyrelatedTripping: ControlFunctionReverse = ...
    EventStalledRotor: ControlFunctionReverse = ...
    EventStopTimeGt: ControlFunctionReverse = ...
    EventThermistorOpenCircuit: ControlFunctionReverse = ...
    EventThermistorShortCircuit: ControlFunctionReverse = ...
    EventThermistorTripLevel: ControlFunctionReverse = ...
    EventTimestampfctActiveAndOk: ControlFunctionReverse = ...
    EventTM1OutOfRange: ControlFunctionReverse = ...
    EventTM1SensorFault: ControlFunctionReverse = ...
    EventTM1TripLevelTGt: ControlFunctionReverse = ...
    EventTM1WarningLevelTGt: ControlFunctionReverse = ...
    EventTM2OutOfRange: ControlFunctionReverse = ...
    EventTM2SensorFault: ControlFunctionReverse = ...
    EventTM2TripLevelTGt: ControlFunctionReverse = ...
    EventTM2WarningLevelTGt: ControlFunctionReverse = ...
    EventTripLevelCosPhiLt: ControlFunctionReverse = ...
    EventTripLevelIGt: ControlFunctionReverse = ...
    EventTripLevelILt: ControlFunctionReverse = ...
    EventTripLevelPGt: ControlFunctionReverse = ...
    EventTripLevelPLt: ControlFunctionReverse = ...
    EventTripLevelULt: ControlFunctionReverse = ...
    EventUnbalance: ControlFunctionReverse = ...
    EventWarningLevelCosPhiLt: ControlFunctionReverse = ...
    EventWarningLevelIGt: ControlFunctionReverse = ...
    EventWarningLevelILt: ControlFunctionReverse = ...
    EventWarningLevelPGt: ControlFunctionReverse = ...
    EventWarningLevelPLt: ControlFunctionReverse = ...
    EventWarningLevelULt: ControlFunctionReverse = ...
    FaultAntivalence: ControlFunctionReverse = ...
    FaultBus: ControlFunctionReverse = ...
    FaultConfigurationError: ControlFunctionReverse = ...
    FaultDouble0: ControlFunctionReverse = ...
    FaultDouble1: ControlFunctionReverse = ...
    FaultEndPosition: ControlFunctionReverse = ...
    FaultExecutionOnCommand: ControlFunctionReverse = ...
    FaultExecutionSTOPCommand: ControlFunctionReverse = ...
    FaultFeedbackOff: ControlFunctionReverse = ...
    FaultFeedbackOn: ControlFunctionReverse = ...
    FaultHardwareFaultBasicUnit: ControlFunctionReverse = ...
    FaultModuleFault: ControlFunctionReverse = ...
    FaultOperationalProtectionOff: ControlFunctionReverse = ...
    FaultParameterization: ControlFunctionReverse = ...
    FaultPLCPCS: ControlFunctionReverse = ...
    FaultPowerFailure: ControlFunctionReverse = ...
    FaultStalledPositioner: ControlFunctionReverse = ...
    FaultTemporaryComponents: ControlFunctionReverse = ...
    FaultTestPositionFeedback: ControlFunctionReverse = ...
    FixedLevel0: ControlFunctionReverse = ...
    FixedLevel1: ControlFunctionReverse = ...
    Flashing1Output: ControlFunctionReverse = ...
    Flashing2Output: ControlFunctionReverse = ...
    Flashing3Output: ControlFunctionReverse = ...
    Flicker1Output: ControlFunctionReverse = ...
    Flicker2Output: ControlFunctionReverse = ...
    Flicker3Output: ControlFunctionReverse = ...
    NonvolatileElement1Output: ControlFunctionReverse = ...
    NonvolatileElement2Output: ControlFunctionReverse = ...
    NonvolatileElement3Output: ControlFunctionReverse = ...
    NonvolatileElement4Output: ControlFunctionReverse = ...
    NotConnected: ControlFunctionReverse = ...
    OPButton1: ControlFunctionReverse = ...
    OPButton2: ControlFunctionReverse = ...
    OPButton3: ControlFunctionReverse = ...
    OPButton4: ControlFunctionReverse = ...
    OPTestResetButton: ControlFunctionReverse = ...
    PWMOutput: ControlFunctionReverse = ...
    SignalConditioning1Output: ControlFunctionReverse = ...
    SignalConditioning2Output: ControlFunctionReverse = ...
    SignalConditioning3Output: ControlFunctionReverse = ...
    SignalConditioning4Output: ControlFunctionReverse = ...
    SignalConditioning5Output: ControlFunctionReverse = ...
    SignalConditioning6Output: ControlFunctionReverse = ...
    StatusBusOk: ControlFunctionReverse = ...
    StatusChangeoverPauseActive: ControlFunctionReverse = ...
    StatusCoolingDownPeriodActive: ControlFunctionReverse = ...
    StatusCurrentFlowing: ControlFunctionReverse = ...
    StatusDeviceOk: ControlFunctionReverse = ...
    StatusDeviceTestActive: ControlFunctionReverse = ...
    StatusEmergencyStartExecuted: ControlFunctionReverse = ...
    StatusEnablingCircuitClosed: ControlFunctionReverse = ...
    StatusFeedbackCLOSED: ControlFunctionReverse = ...
    StatusFeedbackOPEN: ControlFunctionReverse = ...
    StatusGroupFault: ControlFunctionReverse = ...
    StatusGroupWarning: ControlFunctionReverse = ...
    StatusInterlockingTimeActive: ControlFunctionReverse = ...
    StatusOff: ControlFunctionReverse = ...
    StatusOnForward: ControlFunctionReverse = ...
    StatusOnForwardFast: ControlFunctionReverse = ...
    StatusOnReverse: ControlFunctionReverse = ...
    StatusOnReverseFast: ControlFunctionReverse = ...
    StatusOperationalProtectionOff: ControlFunctionReverse = ...
    StatusPauseTimeActive: ControlFunctionReverse = ...
    StatusPhaseSequence123: ControlFunctionReverse = ...
    StatusPhaseSequence321: ControlFunctionReverse = ...
    StatusPLCPCSInRun: ControlFunctionReverse = ...
    StatusPositionerRunsInCLOSEDDirection: ControlFunctionReverse = ...
    StatusPositionerRunsInOPENDirection: ControlFunctionReverse = ...
    StatusPROFIenergyCommandStartPausePending: ControlFunctionReverse = ...
    StatusRemoteMode: ControlFunctionReverse = ...
    StatusStartActive: ControlFunctionReverse = ...
    StatusTestPosition: ControlFunctionReverse = ...
    StatusTorqueCLOSED: ControlFunctionReverse = ...
    StatusTorqueOPEN: ControlFunctionReverse = ...
    Timer1Output: ControlFunctionReverse = ...
    Timer2Output: ControlFunctionReverse = ...
    Timer3Output: ControlFunctionReverse = ...
    Timer4Output: ControlFunctionReverse = ...
    Timer5Output: ControlFunctionReverse = ...
    Timer6Output: ControlFunctionReverse = ...
    TruthTable10Output: ControlFunctionReverse = ...
    TruthTable11Output: ControlFunctionReverse = ...
    TruthTable1Output: ControlFunctionReverse = ...
    TruthTable2Output: ControlFunctionReverse = ...
    TruthTable3Output: ControlFunctionReverse = ...
    TruthTable4Output: ControlFunctionReverse = ...
    TruthTable5Output: ControlFunctionReverse = ...
    TruthTable6Output: ControlFunctionReverse = ...
    TruthTable7Output: ControlFunctionReverse = ...
    TruthTable8Output: ControlFunctionReverse = ...
    TruthTable9Output1: ControlFunctionReverse = ...
    TruthTable9Output2: ControlFunctionReverse = ...
    value__ = ...
    WarningFeedbackCircuit: ControlFunctionReverse = ...
    WarningSimultaneity: ControlFunctionReverse = ...


class ControlFunctionReverseFast(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlFunctionReverseFast

    enum ControlFunctionReverseFast, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlFunctionReverseFast = ...
    AcyclicReceiveBit01: ControlFunctionReverseFast = ...
    AcyclicReceiveBit02: ControlFunctionReverseFast = ...
    AcyclicReceiveBit03: ControlFunctionReverseFast = ...
    AcyclicReceiveBit04: ControlFunctionReverseFast = ...
    AcyclicReceiveBit05: ControlFunctionReverseFast = ...
    AcyclicReceiveBit06: ControlFunctionReverseFast = ...
    AcyclicReceiveBit07: ControlFunctionReverseFast = ...
    AcyclicReceiveBit10: ControlFunctionReverseFast = ...
    AcyclicReceiveBit11: ControlFunctionReverseFast = ...
    AcyclicReceiveBit12: ControlFunctionReverseFast = ...
    AcyclicReceiveBit13: ControlFunctionReverseFast = ...
    AcyclicReceiveBit14: ControlFunctionReverseFast = ...
    AcyclicReceiveBit15: ControlFunctionReverseFast = ...
    AcyclicReceiveBit16: ControlFunctionReverseFast = ...
    AcyclicReceiveBit17: ControlFunctionReverseFast = ...
    BUInput1: ControlFunctionReverseFast = ...
    BUInput2: ControlFunctionReverseFast = ...
    BUInput3: ControlFunctionReverseFast = ...
    BUInput4: ControlFunctionReverseFast = ...
    BUTestResetButton: ControlFunctionReverseFast = ...
    ContactorControl1QE1: ControlFunctionReverseFast = ...
    ContactorControl2QE2: ControlFunctionReverseFast = ...
    ContactorControl3QE3: ControlFunctionReverseFast = ...
    ContactorControl4QE4: ControlFunctionReverseFast = ...
    ContactorControl5QE5: ControlFunctionReverseFast = ...
    Counter1Output: ControlFunctionReverseFast = ...
    Counter2Output: ControlFunctionReverseFast = ...
    Counter3Output: ControlFunctionReverseFast = ...
    Counter4Output: ControlFunctionReverseFast = ...
    Counter5Output: ControlFunctionReverseFast = ...
    Counter6Output: ControlFunctionReverseFast = ...
    CyclicReceiveBit00: ControlFunctionReverseFast = ...
    CyclicReceiveBit01: ControlFunctionReverseFast = ...
    CyclicReceiveBit02: ControlFunctionReverseFast = ...
    CyclicReceiveBit03: ControlFunctionReverseFast = ...
    CyclicReceiveBit04: ControlFunctionReverseFast = ...
    CyclicReceiveBit05: ControlFunctionReverseFast = ...
    CyclicReceiveBit06: ControlFunctionReverseFast = ...
    CyclicReceiveBit07: ControlFunctionReverseFast = ...
    CyclicReceiveBit10: ControlFunctionReverseFast = ...
    CyclicReceiveBit11: ControlFunctionReverseFast = ...
    CyclicReceiveBit12: ControlFunctionReverseFast = ...
    CyclicReceiveBit13: ControlFunctionReverseFast = ...
    CyclicReceiveBit14: ControlFunctionReverseFast = ...
    CyclicReceiveBit15: ControlFunctionReverseFast = ...
    CyclicReceiveBit16: ControlFunctionReverseFast = ...
    CyclicReceiveBit17: ControlFunctionReverseFast = ...
    DisplayQLAOff: ControlFunctionReverseFast = ...
    DisplayQLEForward: ControlFunctionReverseFast = ...
    DisplayQLEForwardFast: ControlFunctionReverseFast = ...
    DisplayQLEReverse: ControlFunctionReverseFast = ...
    DisplayQLEReverseFast: ControlFunctionReverseFast = ...
    DisplayQLSFault: ControlFunctionReverseFast = ...
    DM1Input1: ControlFunctionReverseFast = ...
    DM1Input2: ControlFunctionReverseFast = ...
    DM1Input3: ControlFunctionReverseFast = ...
    DM1Input4: ControlFunctionReverseFast = ...
    DM1SensorChannel1: ControlFunctionReverseFast = ...
    DM1SensorChannel2: ControlFunctionReverseFast = ...
    DM2Input1: ControlFunctionReverseFast = ...
    DM2Input2: ControlFunctionReverseFast = ...
    DM2Input3: ControlFunctionReverseFast = ...
    DM2Input4: ControlFunctionReverseFast = ...
    EnabledControlCommandOff: ControlFunctionReverseFast = ...
    EnabledControlCommandOnForward: ControlFunctionReverseFast = ...
    EnabledControlCommandOnForwardFast: ControlFunctionReverseFast = ...
    EnabledControlCommandOnReverse: ControlFunctionReverseFast = ...
    EnabledControlCommandOnReverseFast: ControlFunctionReverseFast = ...
    EventAM1OpenCircuit: ControlFunctionReverseFast = ...
    EventAM1TripLevel0420mAGt: ControlFunctionReverseFast = ...
    EventAM1TripLevel0420mALt: ControlFunctionReverseFast = ...
    EventAM1WarningLevel0420mAGt: ControlFunctionReverseFast = ...
    EventAM1WarningLevel0420mALt: ControlFunctionReverseFast = ...
    EventAM2OpenCircuit: ControlFunctionReverseFast = ...
    EventAM2TripLevel0420mAGt: ControlFunctionReverseFast = ...
    EventAM2TripLevel0420mALt: ControlFunctionReverseFast = ...
    EventAM2WarningLevel0420mAGt: ControlFunctionReverseFast = ...
    EventAM2WarningLevel0420mALt: ControlFunctionReverseFast = ...
    EventConfiguredOperatorPanelMissing: ControlFunctionReverseFast = ...
    EventDMFLOCALOk: ControlFunctionReverseFast = ...
    EventExternalFault1: ControlFunctionReverseFast = ...
    EventExternalFault2: ControlFunctionReverseFast = ...
    EventExternalFault3: ControlFunctionReverseFast = ...
    EventExternalFault4: ControlFunctionReverseFast = ...
    EventExternalFault5: ControlFunctionReverseFast = ...
    EventExternalFault6: ControlFunctionReverseFast = ...
    EventExternalGroundFault: ControlFunctionReverseFast = ...
    EventExternalGroundFaultWarning: ControlFunctionReverseFast = ...
    EventInternalGroundFault: ControlFunctionReverseFast = ...
    EventJustOneStartPossible: ControlFunctionReverseFast = ...
    EventLimitMonitor1: ControlFunctionReverseFast = ...
    EventLimitMonitor2: ControlFunctionReverseFast = ...
    EventLimitMonitor3: ControlFunctionReverseFast = ...
    EventLimitMonitor4: ControlFunctionReverseFast = ...
    EventLimitMonitor5: ControlFunctionReverseFast = ...
    EventLimitMonitor6: ControlFunctionReverseFast = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlFunctionReverseFast = ...
    EventMotorOperatingHoursGt: ControlFunctionReverseFast = ...
    EventNoStartPermitted: ControlFunctionReverseFast = ...
    EventNumberOfStartsGt: ControlFunctionReverseFast = ...
    EventOverload: ControlFunctionReverseFast = ...
    EventOverloadAndPhaseFailure: ControlFunctionReverseFast = ...
    EventPrewarningOverload: ControlFunctionReverseFast = ...
    EventPROFIsafeActive: ControlFunctionReverseFast = ...
    EventSafetyrelatedTripping: ControlFunctionReverseFast = ...
    EventStalledRotor: ControlFunctionReverseFast = ...
    EventStopTimeGt: ControlFunctionReverseFast = ...
    EventThermistorOpenCircuit: ControlFunctionReverseFast = ...
    EventThermistorShortCircuit: ControlFunctionReverseFast = ...
    EventThermistorTripLevel: ControlFunctionReverseFast = ...
    EventTimestampfctActiveAndOk: ControlFunctionReverseFast = ...
    EventTM1OutOfRange: ControlFunctionReverseFast = ...
    EventTM1SensorFault: ControlFunctionReverseFast = ...
    EventTM1TripLevelTGt: ControlFunctionReverseFast = ...
    EventTM1WarningLevelTGt: ControlFunctionReverseFast = ...
    EventTM2OutOfRange: ControlFunctionReverseFast = ...
    EventTM2SensorFault: ControlFunctionReverseFast = ...
    EventTM2TripLevelTGt: ControlFunctionReverseFast = ...
    EventTM2WarningLevelTGt: ControlFunctionReverseFast = ...
    EventTripLevelCosPhiLt: ControlFunctionReverseFast = ...
    EventTripLevelIGt: ControlFunctionReverseFast = ...
    EventTripLevelILt: ControlFunctionReverseFast = ...
    EventTripLevelPGt: ControlFunctionReverseFast = ...
    EventTripLevelPLt: ControlFunctionReverseFast = ...
    EventTripLevelULt: ControlFunctionReverseFast = ...
    EventUnbalance: ControlFunctionReverseFast = ...
    EventWarningLevelCosPhiLt: ControlFunctionReverseFast = ...
    EventWarningLevelIGt: ControlFunctionReverseFast = ...
    EventWarningLevelILt: ControlFunctionReverseFast = ...
    EventWarningLevelPGt: ControlFunctionReverseFast = ...
    EventWarningLevelPLt: ControlFunctionReverseFast = ...
    EventWarningLevelULt: ControlFunctionReverseFast = ...
    FaultAntivalence: ControlFunctionReverseFast = ...
    FaultBus: ControlFunctionReverseFast = ...
    FaultConfigurationError: ControlFunctionReverseFast = ...
    FaultDouble0: ControlFunctionReverseFast = ...
    FaultDouble1: ControlFunctionReverseFast = ...
    FaultEndPosition: ControlFunctionReverseFast = ...
    FaultExecutionOnCommand: ControlFunctionReverseFast = ...
    FaultExecutionSTOPCommand: ControlFunctionReverseFast = ...
    FaultFeedbackOff: ControlFunctionReverseFast = ...
    FaultFeedbackOn: ControlFunctionReverseFast = ...
    FaultHardwareFaultBasicUnit: ControlFunctionReverseFast = ...
    FaultModuleFault: ControlFunctionReverseFast = ...
    FaultOperationalProtectionOff: ControlFunctionReverseFast = ...
    FaultParameterization: ControlFunctionReverseFast = ...
    FaultPLCPCS: ControlFunctionReverseFast = ...
    FaultPowerFailure: ControlFunctionReverseFast = ...
    FaultStalledPositioner: ControlFunctionReverseFast = ...
    FaultTemporaryComponents: ControlFunctionReverseFast = ...
    FaultTestPositionFeedback: ControlFunctionReverseFast = ...
    FixedLevel0: ControlFunctionReverseFast = ...
    FixedLevel1: ControlFunctionReverseFast = ...
    Flashing1Output: ControlFunctionReverseFast = ...
    Flashing2Output: ControlFunctionReverseFast = ...
    Flashing3Output: ControlFunctionReverseFast = ...
    Flicker1Output: ControlFunctionReverseFast = ...
    Flicker2Output: ControlFunctionReverseFast = ...
    Flicker3Output: ControlFunctionReverseFast = ...
    NonvolatileElement1Output: ControlFunctionReverseFast = ...
    NonvolatileElement2Output: ControlFunctionReverseFast = ...
    NonvolatileElement3Output: ControlFunctionReverseFast = ...
    NonvolatileElement4Output: ControlFunctionReverseFast = ...
    NotConnected: ControlFunctionReverseFast = ...
    OPButton1: ControlFunctionReverseFast = ...
    OPButton2: ControlFunctionReverseFast = ...
    OPButton3: ControlFunctionReverseFast = ...
    OPButton4: ControlFunctionReverseFast = ...
    OPTestResetButton: ControlFunctionReverseFast = ...
    PWMOutput: ControlFunctionReverseFast = ...
    SignalConditioning1Output: ControlFunctionReverseFast = ...
    SignalConditioning2Output: ControlFunctionReverseFast = ...
    SignalConditioning3Output: ControlFunctionReverseFast = ...
    SignalConditioning4Output: ControlFunctionReverseFast = ...
    SignalConditioning5Output: ControlFunctionReverseFast = ...
    SignalConditioning6Output: ControlFunctionReverseFast = ...
    StatusBusOk: ControlFunctionReverseFast = ...
    StatusChangeoverPauseActive: ControlFunctionReverseFast = ...
    StatusCoolingDownPeriodActive: ControlFunctionReverseFast = ...
    StatusCurrentFlowing: ControlFunctionReverseFast = ...
    StatusDeviceOk: ControlFunctionReverseFast = ...
    StatusDeviceTestActive: ControlFunctionReverseFast = ...
    StatusEmergencyStartExecuted: ControlFunctionReverseFast = ...
    StatusEnablingCircuitClosed: ControlFunctionReverseFast = ...
    StatusFeedbackCLOSED: ControlFunctionReverseFast = ...
    StatusFeedbackOPEN: ControlFunctionReverseFast = ...
    StatusGroupFault: ControlFunctionReverseFast = ...
    StatusGroupWarning: ControlFunctionReverseFast = ...
    StatusInterlockingTimeActive: ControlFunctionReverseFast = ...
    StatusOff: ControlFunctionReverseFast = ...
    StatusOnForward: ControlFunctionReverseFast = ...
    StatusOnForwardFast: ControlFunctionReverseFast = ...
    StatusOnReverse: ControlFunctionReverseFast = ...
    StatusOnReverseFast: ControlFunctionReverseFast = ...
    StatusOperationalProtectionOff: ControlFunctionReverseFast = ...
    StatusPauseTimeActive: ControlFunctionReverseFast = ...
    StatusPhaseSequence123: ControlFunctionReverseFast = ...
    StatusPhaseSequence321: ControlFunctionReverseFast = ...
    StatusPLCPCSInRun: ControlFunctionReverseFast = ...
    StatusPositionerRunsInCLOSEDDirection: ControlFunctionReverseFast = ...
    StatusPositionerRunsInOPENDirection: ControlFunctionReverseFast = ...
    StatusPROFIenergyCommandStartPausePending: ControlFunctionReverseFast = ...
    StatusRemoteMode: ControlFunctionReverseFast = ...
    StatusStartActive: ControlFunctionReverseFast = ...
    StatusTestPosition: ControlFunctionReverseFast = ...
    StatusTorqueCLOSED: ControlFunctionReverseFast = ...
    StatusTorqueOPEN: ControlFunctionReverseFast = ...
    Timer1Output: ControlFunctionReverseFast = ...
    Timer2Output: ControlFunctionReverseFast = ...
    Timer3Output: ControlFunctionReverseFast = ...
    Timer4Output: ControlFunctionReverseFast = ...
    Timer5Output: ControlFunctionReverseFast = ...
    Timer6Output: ControlFunctionReverseFast = ...
    TruthTable10Output: ControlFunctionReverseFast = ...
    TruthTable11Output: ControlFunctionReverseFast = ...
    TruthTable1Output: ControlFunctionReverseFast = ...
    TruthTable2Output: ControlFunctionReverseFast = ...
    TruthTable3Output: ControlFunctionReverseFast = ...
    TruthTable4Output: ControlFunctionReverseFast = ...
    TruthTable5Output: ControlFunctionReverseFast = ...
    TruthTable6Output: ControlFunctionReverseFast = ...
    TruthTable7Output: ControlFunctionReverseFast = ...
    TruthTable8Output: ControlFunctionReverseFast = ...
    TruthTable9Output1: ControlFunctionReverseFast = ...
    TruthTable9Output2: ControlFunctionReverseFast = ...
    value__ = ...
    WarningFeedbackCircuit: ControlFunctionReverseFast = ...
    WarningSimultaneity: ControlFunctionReverseFast = ...


class ControlFunctionTorqueCLOSEDTC(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlFunctionTorqueCLOSEDTC

    enum ControlFunctionTorqueCLOSEDTC, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit01: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit02: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit03: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit04: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit05: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit06: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit07: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit10: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit11: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit12: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit13: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit14: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit15: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit16: ControlFunctionTorqueCLOSEDTC = ...
    AcyclicReceiveBit17: ControlFunctionTorqueCLOSEDTC = ...
    BUInput1: ControlFunctionTorqueCLOSEDTC = ...
    BUInput2: ControlFunctionTorqueCLOSEDTC = ...
    BUInput3: ControlFunctionTorqueCLOSEDTC = ...
    BUInput4: ControlFunctionTorqueCLOSEDTC = ...
    BUTestResetButton: ControlFunctionTorqueCLOSEDTC = ...
    ContactorControl1QE1: ControlFunctionTorqueCLOSEDTC = ...
    ContactorControl2QE2: ControlFunctionTorqueCLOSEDTC = ...
    ContactorControl3QE3: ControlFunctionTorqueCLOSEDTC = ...
    ContactorControl4QE4: ControlFunctionTorqueCLOSEDTC = ...
    ContactorControl5QE5: ControlFunctionTorqueCLOSEDTC = ...
    Counter1Output: ControlFunctionTorqueCLOSEDTC = ...
    Counter2Output: ControlFunctionTorqueCLOSEDTC = ...
    Counter3Output: ControlFunctionTorqueCLOSEDTC = ...
    Counter4Output: ControlFunctionTorqueCLOSEDTC = ...
    Counter5Output: ControlFunctionTorqueCLOSEDTC = ...
    Counter6Output: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit00: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit01: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit02: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit03: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit04: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit05: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit06: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit07: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit10: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit11: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit12: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit13: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit14: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit15: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit16: ControlFunctionTorqueCLOSEDTC = ...
    CyclicReceiveBit17: ControlFunctionTorqueCLOSEDTC = ...
    DisplayQLAOff: ControlFunctionTorqueCLOSEDTC = ...
    DisplayQLEForward: ControlFunctionTorqueCLOSEDTC = ...
    DisplayQLEForwardFast: ControlFunctionTorqueCLOSEDTC = ...
    DisplayQLEReverse: ControlFunctionTorqueCLOSEDTC = ...
    DisplayQLEReverseFast: ControlFunctionTorqueCLOSEDTC = ...
    DisplayQLSFault: ControlFunctionTorqueCLOSEDTC = ...
    DM1Input1: ControlFunctionTorqueCLOSEDTC = ...
    DM1Input2: ControlFunctionTorqueCLOSEDTC = ...
    DM1Input3: ControlFunctionTorqueCLOSEDTC = ...
    DM1Input4: ControlFunctionTorqueCLOSEDTC = ...
    DM1SensorChannel1: ControlFunctionTorqueCLOSEDTC = ...
    DM1SensorChannel2: ControlFunctionTorqueCLOSEDTC = ...
    DM2Input1: ControlFunctionTorqueCLOSEDTC = ...
    DM2Input2: ControlFunctionTorqueCLOSEDTC = ...
    DM2Input3: ControlFunctionTorqueCLOSEDTC = ...
    DM2Input4: ControlFunctionTorqueCLOSEDTC = ...
    EnabledControlCommandOff: ControlFunctionTorqueCLOSEDTC = ...
    EnabledControlCommandOnForward: ControlFunctionTorqueCLOSEDTC = ...
    EnabledControlCommandOnForwardFast: ControlFunctionTorqueCLOSEDTC = ...
    EnabledControlCommandOnReverse: ControlFunctionTorqueCLOSEDTC = ...
    EnabledControlCommandOnReverseFast: ControlFunctionTorqueCLOSEDTC = ...
    EventAM1OpenCircuit: ControlFunctionTorqueCLOSEDTC = ...
    EventAM1TripLevel0420mAGt: ControlFunctionTorqueCLOSEDTC = ...
    EventAM1TripLevel0420mALt: ControlFunctionTorqueCLOSEDTC = ...
    EventAM1WarningLevel0420mAGt: ControlFunctionTorqueCLOSEDTC = ...
    EventAM1WarningLevel0420mALt: ControlFunctionTorqueCLOSEDTC = ...
    EventAM2OpenCircuit: ControlFunctionTorqueCLOSEDTC = ...
    EventAM2TripLevel0420mAGt: ControlFunctionTorqueCLOSEDTC = ...
    EventAM2TripLevel0420mALt: ControlFunctionTorqueCLOSEDTC = ...
    EventAM2WarningLevel0420mAGt: ControlFunctionTorqueCLOSEDTC = ...
    EventAM2WarningLevel0420mALt: ControlFunctionTorqueCLOSEDTC = ...
    EventConfiguredOperatorPanelMissing: ControlFunctionTorqueCLOSEDTC = ...
    EventDMFLOCALOk: ControlFunctionTorqueCLOSEDTC = ...
    EventExternalFault1: ControlFunctionTorqueCLOSEDTC = ...
    EventExternalFault2: ControlFunctionTorqueCLOSEDTC = ...
    EventExternalFault3: ControlFunctionTorqueCLOSEDTC = ...
    EventExternalFault4: ControlFunctionTorqueCLOSEDTC = ...
    EventExternalFault5: ControlFunctionTorqueCLOSEDTC = ...
    EventExternalFault6: ControlFunctionTorqueCLOSEDTC = ...
    EventExternalGroundFault: ControlFunctionTorqueCLOSEDTC = ...
    EventExternalGroundFaultWarning: ControlFunctionTorqueCLOSEDTC = ...
    EventInternalGroundFault: ControlFunctionTorqueCLOSEDTC = ...
    EventJustOneStartPossible: ControlFunctionTorqueCLOSEDTC = ...
    EventLimitMonitor1: ControlFunctionTorqueCLOSEDTC = ...
    EventLimitMonitor2: ControlFunctionTorqueCLOSEDTC = ...
    EventLimitMonitor3: ControlFunctionTorqueCLOSEDTC = ...
    EventLimitMonitor4: ControlFunctionTorqueCLOSEDTC = ...
    EventLimitMonitor5: ControlFunctionTorqueCLOSEDTC = ...
    EventLimitMonitor6: ControlFunctionTorqueCLOSEDTC = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlFunctionTorqueCLOSEDTC = ...
    EventMotorOperatingHoursGt: ControlFunctionTorqueCLOSEDTC = ...
    EventNoStartPermitted: ControlFunctionTorqueCLOSEDTC = ...
    EventNumberOfStartsGt: ControlFunctionTorqueCLOSEDTC = ...
    EventOverload: ControlFunctionTorqueCLOSEDTC = ...
    EventOverloadAndPhaseFailure: ControlFunctionTorqueCLOSEDTC = ...
    EventPrewarningOverload: ControlFunctionTorqueCLOSEDTC = ...
    EventPROFIsafeActive: ControlFunctionTorqueCLOSEDTC = ...
    EventSafetyrelatedTripping: ControlFunctionTorqueCLOSEDTC = ...
    EventStalledRotor: ControlFunctionTorqueCLOSEDTC = ...
    EventStopTimeGt: ControlFunctionTorqueCLOSEDTC = ...
    EventThermistorOpenCircuit: ControlFunctionTorqueCLOSEDTC = ...
    EventThermistorShortCircuit: ControlFunctionTorqueCLOSEDTC = ...
    EventThermistorTripLevel: ControlFunctionTorqueCLOSEDTC = ...
    EventTimestampfctActiveAndOk: ControlFunctionTorqueCLOSEDTC = ...
    EventTM1OutOfRange: ControlFunctionTorqueCLOSEDTC = ...
    EventTM1SensorFault: ControlFunctionTorqueCLOSEDTC = ...
    EventTM1TripLevelTGt: ControlFunctionTorqueCLOSEDTC = ...
    EventTM1WarningLevelTGt: ControlFunctionTorqueCLOSEDTC = ...
    EventTM2OutOfRange: ControlFunctionTorqueCLOSEDTC = ...
    EventTM2SensorFault: ControlFunctionTorqueCLOSEDTC = ...
    EventTM2TripLevelTGt: ControlFunctionTorqueCLOSEDTC = ...
    EventTM2WarningLevelTGt: ControlFunctionTorqueCLOSEDTC = ...
    EventTripLevelCosPhiLt: ControlFunctionTorqueCLOSEDTC = ...
    EventTripLevelIGt: ControlFunctionTorqueCLOSEDTC = ...
    EventTripLevelILt: ControlFunctionTorqueCLOSEDTC = ...
    EventTripLevelPGt: ControlFunctionTorqueCLOSEDTC = ...
    EventTripLevelPLt: ControlFunctionTorqueCLOSEDTC = ...
    EventTripLevelULt: ControlFunctionTorqueCLOSEDTC = ...
    EventUnbalance: ControlFunctionTorqueCLOSEDTC = ...
    EventWarningLevelCosPhiLt: ControlFunctionTorqueCLOSEDTC = ...
    EventWarningLevelIGt: ControlFunctionTorqueCLOSEDTC = ...
    EventWarningLevelILt: ControlFunctionTorqueCLOSEDTC = ...
    EventWarningLevelPGt: ControlFunctionTorqueCLOSEDTC = ...
    EventWarningLevelPLt: ControlFunctionTorqueCLOSEDTC = ...
    EventWarningLevelULt: ControlFunctionTorqueCLOSEDTC = ...
    FaultAntivalence: ControlFunctionTorqueCLOSEDTC = ...
    FaultBus: ControlFunctionTorqueCLOSEDTC = ...
    FaultConfigurationError: ControlFunctionTorqueCLOSEDTC = ...
    FaultDouble0: ControlFunctionTorqueCLOSEDTC = ...
    FaultDouble1: ControlFunctionTorqueCLOSEDTC = ...
    FaultEndPosition: ControlFunctionTorqueCLOSEDTC = ...
    FaultExecutionOnCommand: ControlFunctionTorqueCLOSEDTC = ...
    FaultExecutionSTOPCommand: ControlFunctionTorqueCLOSEDTC = ...
    FaultFeedbackOff: ControlFunctionTorqueCLOSEDTC = ...
    FaultFeedbackOn: ControlFunctionTorqueCLOSEDTC = ...
    FaultHardwareFaultBasicUnit: ControlFunctionTorqueCLOSEDTC = ...
    FaultModuleFault: ControlFunctionTorqueCLOSEDTC = ...
    FaultOperationalProtectionOff: ControlFunctionTorqueCLOSEDTC = ...
    FaultParameterization: ControlFunctionTorqueCLOSEDTC = ...
    FaultPLCPCS: ControlFunctionTorqueCLOSEDTC = ...
    FaultPowerFailure: ControlFunctionTorqueCLOSEDTC = ...
    FaultStalledPositioner: ControlFunctionTorqueCLOSEDTC = ...
    FaultTemporaryComponents: ControlFunctionTorqueCLOSEDTC = ...
    FaultTestPositionFeedback: ControlFunctionTorqueCLOSEDTC = ...
    FixedLevel0: ControlFunctionTorqueCLOSEDTC = ...
    FixedLevel1: ControlFunctionTorqueCLOSEDTC = ...
    Flashing1Output: ControlFunctionTorqueCLOSEDTC = ...
    Flashing2Output: ControlFunctionTorqueCLOSEDTC = ...
    Flashing3Output: ControlFunctionTorqueCLOSEDTC = ...
    Flicker1Output: ControlFunctionTorqueCLOSEDTC = ...
    Flicker2Output: ControlFunctionTorqueCLOSEDTC = ...
    Flicker3Output: ControlFunctionTorqueCLOSEDTC = ...
    NonvolatileElement1Output: ControlFunctionTorqueCLOSEDTC = ...
    NonvolatileElement2Output: ControlFunctionTorqueCLOSEDTC = ...
    NonvolatileElement3Output: ControlFunctionTorqueCLOSEDTC = ...
    NonvolatileElement4Output: ControlFunctionTorqueCLOSEDTC = ...
    NotConnected: ControlFunctionTorqueCLOSEDTC = ...
    OPButton1: ControlFunctionTorqueCLOSEDTC = ...
    OPButton2: ControlFunctionTorqueCLOSEDTC = ...
    OPButton3: ControlFunctionTorqueCLOSEDTC = ...
    OPButton4: ControlFunctionTorqueCLOSEDTC = ...
    OPTestResetButton: ControlFunctionTorqueCLOSEDTC = ...
    PWMOutput: ControlFunctionTorqueCLOSEDTC = ...
    SignalConditioning1Output: ControlFunctionTorqueCLOSEDTC = ...
    SignalConditioning2Output: ControlFunctionTorqueCLOSEDTC = ...
    SignalConditioning3Output: ControlFunctionTorqueCLOSEDTC = ...
    SignalConditioning4Output: ControlFunctionTorqueCLOSEDTC = ...
    SignalConditioning5Output: ControlFunctionTorqueCLOSEDTC = ...
    SignalConditioning6Output: ControlFunctionTorqueCLOSEDTC = ...
    StatusBusOk: ControlFunctionTorqueCLOSEDTC = ...
    StatusChangeoverPauseActive: ControlFunctionTorqueCLOSEDTC = ...
    StatusCoolingDownPeriodActive: ControlFunctionTorqueCLOSEDTC = ...
    StatusCurrentFlowing: ControlFunctionTorqueCLOSEDTC = ...
    StatusDeviceOk: ControlFunctionTorqueCLOSEDTC = ...
    StatusDeviceTestActive: ControlFunctionTorqueCLOSEDTC = ...
    StatusEmergencyStartExecuted: ControlFunctionTorqueCLOSEDTC = ...
    StatusEnablingCircuitClosed: ControlFunctionTorqueCLOSEDTC = ...
    StatusFeedbackCLOSED: ControlFunctionTorqueCLOSEDTC = ...
    StatusFeedbackOPEN: ControlFunctionTorqueCLOSEDTC = ...
    StatusGroupFault: ControlFunctionTorqueCLOSEDTC = ...
    StatusGroupWarning: ControlFunctionTorqueCLOSEDTC = ...
    StatusInterlockingTimeActive: ControlFunctionTorqueCLOSEDTC = ...
    StatusOff: ControlFunctionTorqueCLOSEDTC = ...
    StatusOnForward: ControlFunctionTorqueCLOSEDTC = ...
    StatusOnForwardFast: ControlFunctionTorqueCLOSEDTC = ...
    StatusOnReverse: ControlFunctionTorqueCLOSEDTC = ...
    StatusOnReverseFast: ControlFunctionTorqueCLOSEDTC = ...
    StatusOperationalProtectionOff: ControlFunctionTorqueCLOSEDTC = ...
    StatusPauseTimeActive: ControlFunctionTorqueCLOSEDTC = ...
    StatusPhaseSequence123: ControlFunctionTorqueCLOSEDTC = ...
    StatusPhaseSequence321: ControlFunctionTorqueCLOSEDTC = ...
    StatusPLCPCSInRun: ControlFunctionTorqueCLOSEDTC = ...
    StatusPositionerRunsInCLOSEDDirection: ControlFunctionTorqueCLOSEDTC = ...
    StatusPositionerRunsInOPENDirection: ControlFunctionTorqueCLOSEDTC = ...
    StatusPROFIenergyCommandStartPausePending: ControlFunctionTorqueCLOSEDTC = ...
    StatusRemoteMode: ControlFunctionTorqueCLOSEDTC = ...
    StatusStartActive: ControlFunctionTorqueCLOSEDTC = ...
    StatusTestPosition: ControlFunctionTorqueCLOSEDTC = ...
    StatusTorqueCLOSED: ControlFunctionTorqueCLOSEDTC = ...
    StatusTorqueOPEN: ControlFunctionTorqueCLOSEDTC = ...
    Timer1Output: ControlFunctionTorqueCLOSEDTC = ...
    Timer2Output: ControlFunctionTorqueCLOSEDTC = ...
    Timer3Output: ControlFunctionTorqueCLOSEDTC = ...
    Timer4Output: ControlFunctionTorqueCLOSEDTC = ...
    Timer5Output: ControlFunctionTorqueCLOSEDTC = ...
    Timer6Output: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable10Output: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable11Output: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable1Output: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable2Output: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable3Output: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable4Output: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable5Output: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable6Output: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable7Output: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable8Output: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable9Output1: ControlFunctionTorqueCLOSEDTC = ...
    TruthTable9Output2: ControlFunctionTorqueCLOSEDTC = ...
    value__ = ...
    WarningFeedbackCircuit: ControlFunctionTorqueCLOSEDTC = ...
    WarningSimultaneity: ControlFunctionTorqueCLOSEDTC = ...


class ControlFunctionTorqueOPENTO(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlFunctionTorqueOPENTO

    enum ControlFunctionTorqueOPENTO, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit01: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit02: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit03: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit04: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit05: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit06: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit07: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit10: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit11: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit12: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit13: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit14: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit15: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit16: ControlFunctionTorqueOPENTO = ...
    AcyclicReceiveBit17: ControlFunctionTorqueOPENTO = ...
    BUInput1: ControlFunctionTorqueOPENTO = ...
    BUInput2: ControlFunctionTorqueOPENTO = ...
    BUInput3: ControlFunctionTorqueOPENTO = ...
    BUInput4: ControlFunctionTorqueOPENTO = ...
    BUTestResetButton: ControlFunctionTorqueOPENTO = ...
    ContactorControl1QE1: ControlFunctionTorqueOPENTO = ...
    ContactorControl2QE2: ControlFunctionTorqueOPENTO = ...
    ContactorControl3QE3: ControlFunctionTorqueOPENTO = ...
    ContactorControl4QE4: ControlFunctionTorqueOPENTO = ...
    ContactorControl5QE5: ControlFunctionTorqueOPENTO = ...
    Counter1Output: ControlFunctionTorqueOPENTO = ...
    Counter2Output: ControlFunctionTorqueOPENTO = ...
    Counter3Output: ControlFunctionTorqueOPENTO = ...
    Counter4Output: ControlFunctionTorqueOPENTO = ...
    Counter5Output: ControlFunctionTorqueOPENTO = ...
    Counter6Output: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit00: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit01: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit02: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit03: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit04: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit05: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit06: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit07: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit10: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit11: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit12: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit13: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit14: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit15: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit16: ControlFunctionTorqueOPENTO = ...
    CyclicReceiveBit17: ControlFunctionTorqueOPENTO = ...
    DisplayQLAOff: ControlFunctionTorqueOPENTO = ...
    DisplayQLEForward: ControlFunctionTorqueOPENTO = ...
    DisplayQLEForwardFast: ControlFunctionTorqueOPENTO = ...
    DisplayQLEReverse: ControlFunctionTorqueOPENTO = ...
    DisplayQLEReverseFast: ControlFunctionTorqueOPENTO = ...
    DisplayQLSFault: ControlFunctionTorqueOPENTO = ...
    DM1Input1: ControlFunctionTorqueOPENTO = ...
    DM1Input2: ControlFunctionTorqueOPENTO = ...
    DM1Input3: ControlFunctionTorqueOPENTO = ...
    DM1Input4: ControlFunctionTorqueOPENTO = ...
    DM1SensorChannel1: ControlFunctionTorqueOPENTO = ...
    DM1SensorChannel2: ControlFunctionTorqueOPENTO = ...
    DM2Input1: ControlFunctionTorqueOPENTO = ...
    DM2Input2: ControlFunctionTorqueOPENTO = ...
    DM2Input3: ControlFunctionTorqueOPENTO = ...
    DM2Input4: ControlFunctionTorqueOPENTO = ...
    EnabledControlCommandOff: ControlFunctionTorqueOPENTO = ...
    EnabledControlCommandOnForward: ControlFunctionTorqueOPENTO = ...
    EnabledControlCommandOnForwardFast: ControlFunctionTorqueOPENTO = ...
    EnabledControlCommandOnReverse: ControlFunctionTorqueOPENTO = ...
    EnabledControlCommandOnReverseFast: ControlFunctionTorqueOPENTO = ...
    EventAM1OpenCircuit: ControlFunctionTorqueOPENTO = ...
    EventAM1TripLevel0420mAGt: ControlFunctionTorqueOPENTO = ...
    EventAM1TripLevel0420mALt: ControlFunctionTorqueOPENTO = ...
    EventAM1WarningLevel0420mAGt: ControlFunctionTorqueOPENTO = ...
    EventAM1WarningLevel0420mALt: ControlFunctionTorqueOPENTO = ...
    EventAM2OpenCircuit: ControlFunctionTorqueOPENTO = ...
    EventAM2TripLevel0420mAGt: ControlFunctionTorqueOPENTO = ...
    EventAM2TripLevel0420mALt: ControlFunctionTorqueOPENTO = ...
    EventAM2WarningLevel0420mAGt: ControlFunctionTorqueOPENTO = ...
    EventAM2WarningLevel0420mALt: ControlFunctionTorqueOPENTO = ...
    EventConfiguredOperatorPanelMissing: ControlFunctionTorqueOPENTO = ...
    EventDMFLOCALOk: ControlFunctionTorqueOPENTO = ...
    EventExternalFault1: ControlFunctionTorqueOPENTO = ...
    EventExternalFault2: ControlFunctionTorqueOPENTO = ...
    EventExternalFault3: ControlFunctionTorqueOPENTO = ...
    EventExternalFault4: ControlFunctionTorqueOPENTO = ...
    EventExternalFault5: ControlFunctionTorqueOPENTO = ...
    EventExternalFault6: ControlFunctionTorqueOPENTO = ...
    EventExternalGroundFault: ControlFunctionTorqueOPENTO = ...
    EventExternalGroundFaultWarning: ControlFunctionTorqueOPENTO = ...
    EventInternalGroundFault: ControlFunctionTorqueOPENTO = ...
    EventJustOneStartPossible: ControlFunctionTorqueOPENTO = ...
    EventLimitMonitor1: ControlFunctionTorqueOPENTO = ...
    EventLimitMonitor2: ControlFunctionTorqueOPENTO = ...
    EventLimitMonitor3: ControlFunctionTorqueOPENTO = ...
    EventLimitMonitor4: ControlFunctionTorqueOPENTO = ...
    EventLimitMonitor5: ControlFunctionTorqueOPENTO = ...
    EventLimitMonitor6: ControlFunctionTorqueOPENTO = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlFunctionTorqueOPENTO = ...
    EventMotorOperatingHoursGt: ControlFunctionTorqueOPENTO = ...
    EventNoStartPermitted: ControlFunctionTorqueOPENTO = ...
    EventNumberOfStartsGt: ControlFunctionTorqueOPENTO = ...
    EventOverload: ControlFunctionTorqueOPENTO = ...
    EventOverloadAndPhaseFailure: ControlFunctionTorqueOPENTO = ...
    EventPrewarningOverload: ControlFunctionTorqueOPENTO = ...
    EventPROFIsafeActive: ControlFunctionTorqueOPENTO = ...
    EventSafetyrelatedTripping: ControlFunctionTorqueOPENTO = ...
    EventStalledRotor: ControlFunctionTorqueOPENTO = ...
    EventStopTimeGt: ControlFunctionTorqueOPENTO = ...
    EventThermistorOpenCircuit: ControlFunctionTorqueOPENTO = ...
    EventThermistorShortCircuit: ControlFunctionTorqueOPENTO = ...
    EventThermistorTripLevel: ControlFunctionTorqueOPENTO = ...
    EventTimestampfctActiveAndOk: ControlFunctionTorqueOPENTO = ...
    EventTM1OutOfRange: ControlFunctionTorqueOPENTO = ...
    EventTM1SensorFault: ControlFunctionTorqueOPENTO = ...
    EventTM1TripLevelTGt: ControlFunctionTorqueOPENTO = ...
    EventTM1WarningLevelTGt: ControlFunctionTorqueOPENTO = ...
    EventTM2OutOfRange: ControlFunctionTorqueOPENTO = ...
    EventTM2SensorFault: ControlFunctionTorqueOPENTO = ...
    EventTM2TripLevelTGt: ControlFunctionTorqueOPENTO = ...
    EventTM2WarningLevelTGt: ControlFunctionTorqueOPENTO = ...
    EventTripLevelCosPhiLt: ControlFunctionTorqueOPENTO = ...
    EventTripLevelIGt: ControlFunctionTorqueOPENTO = ...
    EventTripLevelILt: ControlFunctionTorqueOPENTO = ...
    EventTripLevelPGt: ControlFunctionTorqueOPENTO = ...
    EventTripLevelPLt: ControlFunctionTorqueOPENTO = ...
    EventTripLevelULt: ControlFunctionTorqueOPENTO = ...
    EventUnbalance: ControlFunctionTorqueOPENTO = ...
    EventWarningLevelCosPhiLt: ControlFunctionTorqueOPENTO = ...
    EventWarningLevelIGt: ControlFunctionTorqueOPENTO = ...
    EventWarningLevelILt: ControlFunctionTorqueOPENTO = ...
    EventWarningLevelPGt: ControlFunctionTorqueOPENTO = ...
    EventWarningLevelPLt: ControlFunctionTorqueOPENTO = ...
    EventWarningLevelULt: ControlFunctionTorqueOPENTO = ...
    FaultAntivalence: ControlFunctionTorqueOPENTO = ...
    FaultBus: ControlFunctionTorqueOPENTO = ...
    FaultConfigurationError: ControlFunctionTorqueOPENTO = ...
    FaultDouble0: ControlFunctionTorqueOPENTO = ...
    FaultDouble1: ControlFunctionTorqueOPENTO = ...
    FaultEndPosition: ControlFunctionTorqueOPENTO = ...
    FaultExecutionOnCommand: ControlFunctionTorqueOPENTO = ...
    FaultExecutionSTOPCommand: ControlFunctionTorqueOPENTO = ...
    FaultFeedbackOff: ControlFunctionTorqueOPENTO = ...
    FaultFeedbackOn: ControlFunctionTorqueOPENTO = ...
    FaultHardwareFaultBasicUnit: ControlFunctionTorqueOPENTO = ...
    FaultModuleFault: ControlFunctionTorqueOPENTO = ...
    FaultOperationalProtectionOff: ControlFunctionTorqueOPENTO = ...
    FaultParameterization: ControlFunctionTorqueOPENTO = ...
    FaultPLCPCS: ControlFunctionTorqueOPENTO = ...
    FaultPowerFailure: ControlFunctionTorqueOPENTO = ...
    FaultStalledPositioner: ControlFunctionTorqueOPENTO = ...
    FaultTemporaryComponents: ControlFunctionTorqueOPENTO = ...
    FaultTestPositionFeedback: ControlFunctionTorqueOPENTO = ...
    FixedLevel0: ControlFunctionTorqueOPENTO = ...
    FixedLevel1: ControlFunctionTorqueOPENTO = ...
    Flashing1Output: ControlFunctionTorqueOPENTO = ...
    Flashing2Output: ControlFunctionTorqueOPENTO = ...
    Flashing3Output: ControlFunctionTorqueOPENTO = ...
    Flicker1Output: ControlFunctionTorqueOPENTO = ...
    Flicker2Output: ControlFunctionTorqueOPENTO = ...
    Flicker3Output: ControlFunctionTorqueOPENTO = ...
    NonvolatileElement1Output: ControlFunctionTorqueOPENTO = ...
    NonvolatileElement2Output: ControlFunctionTorqueOPENTO = ...
    NonvolatileElement3Output: ControlFunctionTorqueOPENTO = ...
    NonvolatileElement4Output: ControlFunctionTorqueOPENTO = ...
    NotConnected: ControlFunctionTorqueOPENTO = ...
    OPButton1: ControlFunctionTorqueOPENTO = ...
    OPButton2: ControlFunctionTorqueOPENTO = ...
    OPButton3: ControlFunctionTorqueOPENTO = ...
    OPButton4: ControlFunctionTorqueOPENTO = ...
    OPTestResetButton: ControlFunctionTorqueOPENTO = ...
    PWMOutput: ControlFunctionTorqueOPENTO = ...
    SignalConditioning1Output: ControlFunctionTorqueOPENTO = ...
    SignalConditioning2Output: ControlFunctionTorqueOPENTO = ...
    SignalConditioning3Output: ControlFunctionTorqueOPENTO = ...
    SignalConditioning4Output: ControlFunctionTorqueOPENTO = ...
    SignalConditioning5Output: ControlFunctionTorqueOPENTO = ...
    SignalConditioning6Output: ControlFunctionTorqueOPENTO = ...
    StatusBusOk: ControlFunctionTorqueOPENTO = ...
    StatusChangeoverPauseActive: ControlFunctionTorqueOPENTO = ...
    StatusCoolingDownPeriodActive: ControlFunctionTorqueOPENTO = ...
    StatusCurrentFlowing: ControlFunctionTorqueOPENTO = ...
    StatusDeviceOk: ControlFunctionTorqueOPENTO = ...
    StatusDeviceTestActive: ControlFunctionTorqueOPENTO = ...
    StatusEmergencyStartExecuted: ControlFunctionTorqueOPENTO = ...
    StatusEnablingCircuitClosed: ControlFunctionTorqueOPENTO = ...
    StatusFeedbackCLOSED: ControlFunctionTorqueOPENTO = ...
    StatusFeedbackOPEN: ControlFunctionTorqueOPENTO = ...
    StatusGroupFault: ControlFunctionTorqueOPENTO = ...
    StatusGroupWarning: ControlFunctionTorqueOPENTO = ...
    StatusInterlockingTimeActive: ControlFunctionTorqueOPENTO = ...
    StatusOff: ControlFunctionTorqueOPENTO = ...
    StatusOnForward: ControlFunctionTorqueOPENTO = ...
    StatusOnForwardFast: ControlFunctionTorqueOPENTO = ...
    StatusOnReverse: ControlFunctionTorqueOPENTO = ...
    StatusOnReverseFast: ControlFunctionTorqueOPENTO = ...
    StatusOperationalProtectionOff: ControlFunctionTorqueOPENTO = ...
    StatusPauseTimeActive: ControlFunctionTorqueOPENTO = ...
    StatusPhaseSequence123: ControlFunctionTorqueOPENTO = ...
    StatusPhaseSequence321: ControlFunctionTorqueOPENTO = ...
    StatusPLCPCSInRun: ControlFunctionTorqueOPENTO = ...
    StatusPositionerRunsInCLOSEDDirection: ControlFunctionTorqueOPENTO = ...
    StatusPositionerRunsInOPENDirection: ControlFunctionTorqueOPENTO = ...
    StatusPROFIenergyCommandStartPausePending: ControlFunctionTorqueOPENTO = ...
    StatusRemoteMode: ControlFunctionTorqueOPENTO = ...
    StatusStartActive: ControlFunctionTorqueOPENTO = ...
    StatusTestPosition: ControlFunctionTorqueOPENTO = ...
    StatusTorqueCLOSED: ControlFunctionTorqueOPENTO = ...
    StatusTorqueOPEN: ControlFunctionTorqueOPENTO = ...
    Timer1Output: ControlFunctionTorqueOPENTO = ...
    Timer2Output: ControlFunctionTorqueOPENTO = ...
    Timer3Output: ControlFunctionTorqueOPENTO = ...
    Timer4Output: ControlFunctionTorqueOPENTO = ...
    Timer5Output: ControlFunctionTorqueOPENTO = ...
    Timer6Output: ControlFunctionTorqueOPENTO = ...
    TruthTable10Output: ControlFunctionTorqueOPENTO = ...
    TruthTable11Output: ControlFunctionTorqueOPENTO = ...
    TruthTable1Output: ControlFunctionTorqueOPENTO = ...
    TruthTable2Output: ControlFunctionTorqueOPENTO = ...
    TruthTable3Output: ControlFunctionTorqueOPENTO = ...
    TruthTable4Output: ControlFunctionTorqueOPENTO = ...
    TruthTable5Output: ControlFunctionTorqueOPENTO = ...
    TruthTable6Output: ControlFunctionTorqueOPENTO = ...
    TruthTable7Output: ControlFunctionTorqueOPENTO = ...
    TruthTable8Output: ControlFunctionTorqueOPENTO = ...
    TruthTable9Output1: ControlFunctionTorqueOPENTO = ...
    TruthTable9Output2: ControlFunctionTorqueOPENTO = ...
    value__ = ...
    WarningFeedbackCircuit: ControlFunctionTorqueOPENTO = ...
    WarningSimultaneity: ControlFunctionTorqueOPENTO = ...


class ControlStationModeSelectorS1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlStationModeSelectorS1

    enum ControlStationModeSelectorS1, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit01: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit02: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit03: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit04: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit05: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit06: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit07: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit10: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit11: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit12: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit13: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit14: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit15: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit16: ControlStationModeSelectorS1 = ...
    AcyclicReceiveBit17: ControlStationModeSelectorS1 = ...
    BUInput1: ControlStationModeSelectorS1 = ...
    BUInput2: ControlStationModeSelectorS1 = ...
    BUInput3: ControlStationModeSelectorS1 = ...
    BUInput4: ControlStationModeSelectorS1 = ...
    BUTestResetButton: ControlStationModeSelectorS1 = ...
    ContactorControl1QE1: ControlStationModeSelectorS1 = ...
    ContactorControl2QE2: ControlStationModeSelectorS1 = ...
    ContactorControl3QE3: ControlStationModeSelectorS1 = ...
    ContactorControl4QE4: ControlStationModeSelectorS1 = ...
    ContactorControl5QE5: ControlStationModeSelectorS1 = ...
    Counter1Output: ControlStationModeSelectorS1 = ...
    Counter2Output: ControlStationModeSelectorS1 = ...
    Counter3Output: ControlStationModeSelectorS1 = ...
    Counter4Output: ControlStationModeSelectorS1 = ...
    Counter5Output: ControlStationModeSelectorS1 = ...
    Counter6Output: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit00: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit01: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit02: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit03: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit04: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit05: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit06: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit07: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit10: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit11: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit12: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit13: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit14: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit15: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit16: ControlStationModeSelectorS1 = ...
    CyclicReceiveBit17: ControlStationModeSelectorS1 = ...
    DisplayQLAOff: ControlStationModeSelectorS1 = ...
    DisplayQLEForward: ControlStationModeSelectorS1 = ...
    DisplayQLEForwardFast: ControlStationModeSelectorS1 = ...
    DisplayQLEReverse: ControlStationModeSelectorS1 = ...
    DisplayQLEReverseFast: ControlStationModeSelectorS1 = ...
    DisplayQLSFault: ControlStationModeSelectorS1 = ...
    DM1Input1: ControlStationModeSelectorS1 = ...
    DM1Input2: ControlStationModeSelectorS1 = ...
    DM1Input3: ControlStationModeSelectorS1 = ...
    DM1Input4: ControlStationModeSelectorS1 = ...
    DM1SensorChannel1: ControlStationModeSelectorS1 = ...
    DM1SensorChannel2: ControlStationModeSelectorS1 = ...
    DM2Input1: ControlStationModeSelectorS1 = ...
    DM2Input2: ControlStationModeSelectorS1 = ...
    DM2Input3: ControlStationModeSelectorS1 = ...
    DM2Input4: ControlStationModeSelectorS1 = ...
    EnabledControlCommandOff: ControlStationModeSelectorS1 = ...
    EnabledControlCommandOnForward: ControlStationModeSelectorS1 = ...
    EnabledControlCommandOnForwardFast: ControlStationModeSelectorS1 = ...
    EnabledControlCommandOnReverse: ControlStationModeSelectorS1 = ...
    EnabledControlCommandOnReverseFast: ControlStationModeSelectorS1 = ...
    EventAM1OpenCircuit: ControlStationModeSelectorS1 = ...
    EventAM1TripLevel0420mAGt: ControlStationModeSelectorS1 = ...
    EventAM1TripLevel0420mALt: ControlStationModeSelectorS1 = ...
    EventAM1WarningLevel0420mAGt: ControlStationModeSelectorS1 = ...
    EventAM1WarningLevel0420mALt: ControlStationModeSelectorS1 = ...
    EventAM2OpenCircuit: ControlStationModeSelectorS1 = ...
    EventAM2TripLevel0420mAGt: ControlStationModeSelectorS1 = ...
    EventAM2TripLevel0420mALt: ControlStationModeSelectorS1 = ...
    EventAM2WarningLevel0420mAGt: ControlStationModeSelectorS1 = ...
    EventAM2WarningLevel0420mALt: ControlStationModeSelectorS1 = ...
    EventConfiguredOperatorPanelMissing: ControlStationModeSelectorS1 = ...
    EventDMFLOCALOk: ControlStationModeSelectorS1 = ...
    EventExternalFault1: ControlStationModeSelectorS1 = ...
    EventExternalFault2: ControlStationModeSelectorS1 = ...
    EventExternalFault3: ControlStationModeSelectorS1 = ...
    EventExternalFault4: ControlStationModeSelectorS1 = ...
    EventExternalFault5: ControlStationModeSelectorS1 = ...
    EventExternalFault6: ControlStationModeSelectorS1 = ...
    EventExternalGroundFault: ControlStationModeSelectorS1 = ...
    EventExternalGroundFaultWarning: ControlStationModeSelectorS1 = ...
    EventInternalGroundFault: ControlStationModeSelectorS1 = ...
    EventJustOneStartPossible: ControlStationModeSelectorS1 = ...
    EventLimitMonitor1: ControlStationModeSelectorS1 = ...
    EventLimitMonitor2: ControlStationModeSelectorS1 = ...
    EventLimitMonitor3: ControlStationModeSelectorS1 = ...
    EventLimitMonitor4: ControlStationModeSelectorS1 = ...
    EventLimitMonitor5: ControlStationModeSelectorS1 = ...
    EventLimitMonitor6: ControlStationModeSelectorS1 = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlStationModeSelectorS1 = ...
    EventMotorOperatingHoursGt: ControlStationModeSelectorS1 = ...
    EventNoStartPermitted: ControlStationModeSelectorS1 = ...
    EventNumberOfStartsGt: ControlStationModeSelectorS1 = ...
    EventOverload: ControlStationModeSelectorS1 = ...
    EventOverloadAndPhaseFailure: ControlStationModeSelectorS1 = ...
    EventPrewarningOverload: ControlStationModeSelectorS1 = ...
    EventPROFIsafeActive: ControlStationModeSelectorS1 = ...
    EventSafetyrelatedTripping: ControlStationModeSelectorS1 = ...
    EventStalledRotor: ControlStationModeSelectorS1 = ...
    EventStopTimeGt: ControlStationModeSelectorS1 = ...
    EventThermistorOpenCircuit: ControlStationModeSelectorS1 = ...
    EventThermistorShortCircuit: ControlStationModeSelectorS1 = ...
    EventThermistorTripLevel: ControlStationModeSelectorS1 = ...
    EventTimestampfctActiveAndOk: ControlStationModeSelectorS1 = ...
    EventTM1OutOfRange: ControlStationModeSelectorS1 = ...
    EventTM1SensorFault: ControlStationModeSelectorS1 = ...
    EventTM1TripLevelTGt: ControlStationModeSelectorS1 = ...
    EventTM1WarningLevelTGt: ControlStationModeSelectorS1 = ...
    EventTM2OutOfRange: ControlStationModeSelectorS1 = ...
    EventTM2SensorFault: ControlStationModeSelectorS1 = ...
    EventTM2TripLevelTGt: ControlStationModeSelectorS1 = ...
    EventTM2WarningLevelTGt: ControlStationModeSelectorS1 = ...
    EventTripLevelCosPhiLt: ControlStationModeSelectorS1 = ...
    EventTripLevelIGt: ControlStationModeSelectorS1 = ...
    EventTripLevelILt: ControlStationModeSelectorS1 = ...
    EventTripLevelPGt: ControlStationModeSelectorS1 = ...
    EventTripLevelPLt: ControlStationModeSelectorS1 = ...
    EventTripLevelULt: ControlStationModeSelectorS1 = ...
    EventUnbalance: ControlStationModeSelectorS1 = ...
    EventWarningLevelCosPhiLt: ControlStationModeSelectorS1 = ...
    EventWarningLevelIGt: ControlStationModeSelectorS1 = ...
    EventWarningLevelILt: ControlStationModeSelectorS1 = ...
    EventWarningLevelPGt: ControlStationModeSelectorS1 = ...
    EventWarningLevelPLt: ControlStationModeSelectorS1 = ...
    EventWarningLevelULt: ControlStationModeSelectorS1 = ...
    FaultAntivalence: ControlStationModeSelectorS1 = ...
    FaultBus: ControlStationModeSelectorS1 = ...
    FaultConfigurationError: ControlStationModeSelectorS1 = ...
    FaultDouble0: ControlStationModeSelectorS1 = ...
    FaultDouble1: ControlStationModeSelectorS1 = ...
    FaultEndPosition: ControlStationModeSelectorS1 = ...
    FaultExecutionOnCommand: ControlStationModeSelectorS1 = ...
    FaultExecutionSTOPCommand: ControlStationModeSelectorS1 = ...
    FaultFeedbackOff: ControlStationModeSelectorS1 = ...
    FaultFeedbackOn: ControlStationModeSelectorS1 = ...
    FaultHardwareFaultBasicUnit: ControlStationModeSelectorS1 = ...
    FaultModuleFault: ControlStationModeSelectorS1 = ...
    FaultOperationalProtectionOff: ControlStationModeSelectorS1 = ...
    FaultParameterization: ControlStationModeSelectorS1 = ...
    FaultPLCPCS: ControlStationModeSelectorS1 = ...
    FaultPowerFailure: ControlStationModeSelectorS1 = ...
    FaultStalledPositioner: ControlStationModeSelectorS1 = ...
    FaultTemporaryComponents: ControlStationModeSelectorS1 = ...
    FaultTestPositionFeedback: ControlStationModeSelectorS1 = ...
    FixedLevel0: ControlStationModeSelectorS1 = ...
    FixedLevel1: ControlStationModeSelectorS1 = ...
    Flashing1Output: ControlStationModeSelectorS1 = ...
    Flashing2Output: ControlStationModeSelectorS1 = ...
    Flashing3Output: ControlStationModeSelectorS1 = ...
    Flicker1Output: ControlStationModeSelectorS1 = ...
    Flicker2Output: ControlStationModeSelectorS1 = ...
    Flicker3Output: ControlStationModeSelectorS1 = ...
    NonvolatileElement1Output: ControlStationModeSelectorS1 = ...
    NonvolatileElement2Output: ControlStationModeSelectorS1 = ...
    NonvolatileElement3Output: ControlStationModeSelectorS1 = ...
    NonvolatileElement4Output: ControlStationModeSelectorS1 = ...
    NotConnected: ControlStationModeSelectorS1 = ...
    OPButton1: ControlStationModeSelectorS1 = ...
    OPButton2: ControlStationModeSelectorS1 = ...
    OPButton3: ControlStationModeSelectorS1 = ...
    OPButton4: ControlStationModeSelectorS1 = ...
    OPTestResetButton: ControlStationModeSelectorS1 = ...
    PWMOutput: ControlStationModeSelectorS1 = ...
    SignalConditioning1Output: ControlStationModeSelectorS1 = ...
    SignalConditioning2Output: ControlStationModeSelectorS1 = ...
    SignalConditioning3Output: ControlStationModeSelectorS1 = ...
    SignalConditioning4Output: ControlStationModeSelectorS1 = ...
    SignalConditioning5Output: ControlStationModeSelectorS1 = ...
    SignalConditioning6Output: ControlStationModeSelectorS1 = ...
    StatusBusOk: ControlStationModeSelectorS1 = ...
    StatusChangeoverPauseActive: ControlStationModeSelectorS1 = ...
    StatusCoolingDownPeriodActive: ControlStationModeSelectorS1 = ...
    StatusCurrentFlowing: ControlStationModeSelectorS1 = ...
    StatusDeviceOk: ControlStationModeSelectorS1 = ...
    StatusDeviceTestActive: ControlStationModeSelectorS1 = ...
    StatusEmergencyStartExecuted: ControlStationModeSelectorS1 = ...
    StatusEnablingCircuitClosed: ControlStationModeSelectorS1 = ...
    StatusFeedbackCLOSED: ControlStationModeSelectorS1 = ...
    StatusFeedbackOPEN: ControlStationModeSelectorS1 = ...
    StatusGroupFault: ControlStationModeSelectorS1 = ...
    StatusGroupWarning: ControlStationModeSelectorS1 = ...
    StatusInterlockingTimeActive: ControlStationModeSelectorS1 = ...
    StatusOff: ControlStationModeSelectorS1 = ...
    StatusOnForward: ControlStationModeSelectorS1 = ...
    StatusOnForwardFast: ControlStationModeSelectorS1 = ...
    StatusOnReverse: ControlStationModeSelectorS1 = ...
    StatusOnReverseFast: ControlStationModeSelectorS1 = ...
    StatusOperationalProtectionOff: ControlStationModeSelectorS1 = ...
    StatusPauseTimeActive: ControlStationModeSelectorS1 = ...
    StatusPhaseSequence123: ControlStationModeSelectorS1 = ...
    StatusPhaseSequence321: ControlStationModeSelectorS1 = ...
    StatusPLCPCSInRun: ControlStationModeSelectorS1 = ...
    StatusPositionerRunsInCLOSEDDirection: ControlStationModeSelectorS1 = ...
    StatusPositionerRunsInOPENDirection: ControlStationModeSelectorS1 = ...
    StatusPROFIenergyCommandStartPausePending: ControlStationModeSelectorS1 = ...
    StatusRemoteMode: ControlStationModeSelectorS1 = ...
    StatusStartActive: ControlStationModeSelectorS1 = ...
    StatusTestPosition: ControlStationModeSelectorS1 = ...
    StatusTorqueCLOSED: ControlStationModeSelectorS1 = ...
    StatusTorqueOPEN: ControlStationModeSelectorS1 = ...
    Timer1Output: ControlStationModeSelectorS1 = ...
    Timer2Output: ControlStationModeSelectorS1 = ...
    Timer3Output: ControlStationModeSelectorS1 = ...
    Timer4Output: ControlStationModeSelectorS1 = ...
    Timer5Output: ControlStationModeSelectorS1 = ...
    Timer6Output: ControlStationModeSelectorS1 = ...
    TruthTable10Output: ControlStationModeSelectorS1 = ...
    TruthTable11Output: ControlStationModeSelectorS1 = ...
    TruthTable1Output: ControlStationModeSelectorS1 = ...
    TruthTable2Output: ControlStationModeSelectorS1 = ...
    TruthTable3Output: ControlStationModeSelectorS1 = ...
    TruthTable4Output: ControlStationModeSelectorS1 = ...
    TruthTable5Output: ControlStationModeSelectorS1 = ...
    TruthTable6Output: ControlStationModeSelectorS1 = ...
    TruthTable7Output: ControlStationModeSelectorS1 = ...
    TruthTable8Output: ControlStationModeSelectorS1 = ...
    TruthTable9Output1: ControlStationModeSelectorS1 = ...
    TruthTable9Output2: ControlStationModeSelectorS1 = ...
    value__ = ...
    WarningFeedbackCircuit: ControlStationModeSelectorS1 = ...
    WarningSimultaneity: ControlStationModeSelectorS1 = ...


class ControlStationModeSelectorS2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ControlStationModeSelectorS2

    enum ControlStationModeSelectorS2, values: AcyclicReceiveBit00 (40), AcyclicReceiveBit01 (41), AcyclicReceiveBit02 (42), AcyclicReceiveBit03 (43), AcyclicReceiveBit04 (44), AcyclicReceiveBit05 (45), AcyclicReceiveBit06 (46), AcyclicReceiveBit07 (47), AcyclicReceiveBit10 (48), AcyclicReceiveBit11 (49), AcyclicReceiveBit12 (50), AcyclicReceiveBit13 (51), AcyclicReceiveBit14 (52), AcyclicReceiveBit15 (53), AcyclicReceiveBit16 (54), AcyclicReceiveBit17 (55), BUInput1 (9), BUInput2 (10), BUInput3 (11), BUInput4 (12), BUTestResetButton (8), ContactorControl1QE1 (80), ContactorControl2QE2 (81), ContactorControl3QE3 (82), ContactorControl4QE4 (83), ContactorControl5QE5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveBit00 (56), CyclicReceiveBit01 (57), CyclicReceiveBit02 (58), CyclicReceiveBit03 (59), CyclicReceiveBit04 (60), CyclicReceiveBit05 (61), CyclicReceiveBit06 (62), CyclicReceiveBit07 (63), CyclicReceiveBit10 (64), CyclicReceiveBit11 (65), CyclicReceiveBit12 (66), CyclicReceiveBit13 (67), CyclicReceiveBit14 (68), CyclicReceiveBit15 (69), CyclicReceiveBit16 (70), CyclicReceiveBit17 (71), DisplayQLAOff (90), DisplayQLEForward (91), DisplayQLEForwardFast (92), DisplayQLEReverse (89), DisplayQLEReverseFast (88), DisplayQLSFault (93), DM1Input1 (16), DM1Input2 (17), DM1Input3 (18), DM1Input4 (19), DM1SensorChannel1 (24), DM1SensorChannel2 (25), DM2Input1 (20), DM2Input2 (21), DM2Input3 (22), DM2Input4 (23), EnabledControlCommandOff (74), EnabledControlCommandOnForward (75), EnabledControlCommandOnForwardFast (76), EnabledControlCommandOnReverse (73), EnabledControlCommandOnReverseFast (72), EventAM1OpenCircuit (180), EventAM1TripLevel0420mAGt (158), EventAM1TripLevel0420mALt (159), EventAM1WarningLevel0420mAGt (150), EventAM1WarningLevel0420mALt (151), EventAM2OpenCircuit (179), EventAM2TripLevel0420mAGt (6), EventAM2TripLevel0420mALt (7), EventAM2WarningLevel0420mAGt (4), EventAM2WarningLevel0420mALt (5), EventConfiguredOperatorPanelMissing (188), EventDMFLOCALOk (186), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHoursGt (166), EventNoStartPermitted (163), EventNumberOfStartsGt (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventPROFIsafeActive (187), EventSafetyrelatedTripping (181), EventStalledRotor (160), EventStopTimeGt (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActiveAndOk (184), EventTM1OutOfRange (141), EventTM1SensorFault (140), EventTM1TripLevelTGt (139), EventTM1WarningLevelTGt (138), EventTM2OutOfRange (29), EventTM2SensorFault (28), EventTM2TripLevelTGt (31), EventTM2WarningLevelTGt (30), EventTripLevelCosPhiLt (156), EventTripLevelIGt (152), EventTripLevelILt (153), EventTripLevelPGt (154), EventTripLevelPLt (155), EventTripLevelULt (157), EventUnbalance (129), EventWarningLevelCosPhiLt (148), EventWarningLevelIGt (144), EventWarningLevelILt (145), EventWarningLevelPGt (146), EventWarningLevelPLt (147), EventWarningLevelULt (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionSTOPCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPLCPCS (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonvolatileElement1Output (244), NonvolatileElement2Output (245), NonvolatileElement3Output (246), NonvolatileElement4Output (247), NotConnected (0), OPButton1 (33), OPButton2 (34), OPButton3 (35), OPButton4 (36), OPTestResetButton (32), PWMOutput (254), SignalConditioning1Output (240), SignalConditioning2Output (241), SignalConditioning3Output (242), SignalConditioning4Output (243), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOk (99), StatusChangeoverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOk (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackCLOSED (114), StatusFeedbackOPEN (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPLCPCSInRun (100), StatusPositionerRunsInCLOSEDDirection (113), StatusPositionerRunsInOPENDirection (112), StatusPROFIenergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPosition (118), StatusTorqueCLOSED (116), StatusTorqueOPEN (117), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveBit00: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit01: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit02: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit03: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit04: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit05: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit06: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit07: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit10: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit11: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit12: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit13: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit14: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit15: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit16: ControlStationModeSelectorS2 = ...
    AcyclicReceiveBit17: ControlStationModeSelectorS2 = ...
    BUInput1: ControlStationModeSelectorS2 = ...
    BUInput2: ControlStationModeSelectorS2 = ...
    BUInput3: ControlStationModeSelectorS2 = ...
    BUInput4: ControlStationModeSelectorS2 = ...
    BUTestResetButton: ControlStationModeSelectorS2 = ...
    ContactorControl1QE1: ControlStationModeSelectorS2 = ...
    ContactorControl2QE2: ControlStationModeSelectorS2 = ...
    ContactorControl3QE3: ControlStationModeSelectorS2 = ...
    ContactorControl4QE4: ControlStationModeSelectorS2 = ...
    ContactorControl5QE5: ControlStationModeSelectorS2 = ...
    Counter1Output: ControlStationModeSelectorS2 = ...
    Counter2Output: ControlStationModeSelectorS2 = ...
    Counter3Output: ControlStationModeSelectorS2 = ...
    Counter4Output: ControlStationModeSelectorS2 = ...
    Counter5Output: ControlStationModeSelectorS2 = ...
    Counter6Output: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit00: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit01: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit02: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit03: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit04: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit05: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit06: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit07: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit10: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit11: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit12: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit13: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit14: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit15: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit16: ControlStationModeSelectorS2 = ...
    CyclicReceiveBit17: ControlStationModeSelectorS2 = ...
    DisplayQLAOff: ControlStationModeSelectorS2 = ...
    DisplayQLEForward: ControlStationModeSelectorS2 = ...
    DisplayQLEForwardFast: ControlStationModeSelectorS2 = ...
    DisplayQLEReverse: ControlStationModeSelectorS2 = ...
    DisplayQLEReverseFast: ControlStationModeSelectorS2 = ...
    DisplayQLSFault: ControlStationModeSelectorS2 = ...
    DM1Input1: ControlStationModeSelectorS2 = ...
    DM1Input2: ControlStationModeSelectorS2 = ...
    DM1Input3: ControlStationModeSelectorS2 = ...
    DM1Input4: ControlStationModeSelectorS2 = ...
    DM1SensorChannel1: ControlStationModeSelectorS2 = ...
    DM1SensorChannel2: ControlStationModeSelectorS2 = ...
    DM2Input1: ControlStationModeSelectorS2 = ...
    DM2Input2: ControlStationModeSelectorS2 = ...
    DM2Input3: ControlStationModeSelectorS2 = ...
    DM2Input4: ControlStationModeSelectorS2 = ...
    EnabledControlCommandOff: ControlStationModeSelectorS2 = ...
    EnabledControlCommandOnForward: ControlStationModeSelectorS2 = ...
    EnabledControlCommandOnForwardFast: ControlStationModeSelectorS2 = ...
    EnabledControlCommandOnReverse: ControlStationModeSelectorS2 = ...
    EnabledControlCommandOnReverseFast: ControlStationModeSelectorS2 = ...
    EventAM1OpenCircuit: ControlStationModeSelectorS2 = ...
    EventAM1TripLevel0420mAGt: ControlStationModeSelectorS2 = ...
    EventAM1TripLevel0420mALt: ControlStationModeSelectorS2 = ...
    EventAM1WarningLevel0420mAGt: ControlStationModeSelectorS2 = ...
    EventAM1WarningLevel0420mALt: ControlStationModeSelectorS2 = ...
    EventAM2OpenCircuit: ControlStationModeSelectorS2 = ...
    EventAM2TripLevel0420mAGt: ControlStationModeSelectorS2 = ...
    EventAM2TripLevel0420mALt: ControlStationModeSelectorS2 = ...
    EventAM2WarningLevel0420mAGt: ControlStationModeSelectorS2 = ...
    EventAM2WarningLevel0420mALt: ControlStationModeSelectorS2 = ...
    EventConfiguredOperatorPanelMissing: ControlStationModeSelectorS2 = ...
    EventDMFLOCALOk: ControlStationModeSelectorS2 = ...
    EventExternalFault1: ControlStationModeSelectorS2 = ...
    EventExternalFault2: ControlStationModeSelectorS2 = ...
    EventExternalFault3: ControlStationModeSelectorS2 = ...
    EventExternalFault4: ControlStationModeSelectorS2 = ...
    EventExternalFault5: ControlStationModeSelectorS2 = ...
    EventExternalFault6: ControlStationModeSelectorS2 = ...
    EventExternalGroundFault: ControlStationModeSelectorS2 = ...
    EventExternalGroundFaultWarning: ControlStationModeSelectorS2 = ...
    EventInternalGroundFault: ControlStationModeSelectorS2 = ...
    EventJustOneStartPossible: ControlStationModeSelectorS2 = ...
    EventLimitMonitor1: ControlStationModeSelectorS2 = ...
    EventLimitMonitor2: ControlStationModeSelectorS2 = ...
    EventLimitMonitor3: ControlStationModeSelectorS2 = ...
    EventLimitMonitor4: ControlStationModeSelectorS2 = ...
    EventLimitMonitor5: ControlStationModeSelectorS2 = ...
    EventLimitMonitor6: ControlStationModeSelectorS2 = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: ControlStationModeSelectorS2 = ...
    EventMotorOperatingHoursGt: ControlStationModeSelectorS2 = ...
    EventNoStartPermitted: ControlStationModeSelectorS2 = ...
    EventNumberOfStartsGt: ControlStationModeSelectorS2 = ...
    EventOverload: ControlStationModeSelectorS2 = ...
    EventOverloadAndPhaseFailure: ControlStationModeSelectorS2 = ...
    EventPrewarningOverload: ControlStationModeSelectorS2 = ...
    EventPROFIsafeActive: ControlStationModeSelectorS2 = ...
    EventSafetyrelatedTripping: ControlStationModeSelectorS2 = ...
    EventStalledRotor: ControlStationModeSelectorS2 = ...
    EventStopTimeGt: ControlStationModeSelectorS2 = ...
    EventThermistorOpenCircuit: ControlStationModeSelectorS2 = ...
    EventThermistorShortCircuit: ControlStationModeSelectorS2 = ...
    EventThermistorTripLevel: ControlStationModeSelectorS2 = ...
    EventTimestampfctActiveAndOk: ControlStationModeSelectorS2 = ...
    EventTM1OutOfRange: ControlStationModeSelectorS2 = ...
    EventTM1SensorFault: ControlStationModeSelectorS2 = ...
    EventTM1TripLevelTGt: ControlStationModeSelectorS2 = ...
    EventTM1WarningLevelTGt: ControlStationModeSelectorS2 = ...
    EventTM2OutOfRange: ControlStationModeSelectorS2 = ...
    EventTM2SensorFault: ControlStationModeSelectorS2 = ...
    EventTM2TripLevelTGt: ControlStationModeSelectorS2 = ...
    EventTM2WarningLevelTGt: ControlStationModeSelectorS2 = ...
    EventTripLevelCosPhiLt: ControlStationModeSelectorS2 = ...
    EventTripLevelIGt: ControlStationModeSelectorS2 = ...
    EventTripLevelILt: ControlStationModeSelectorS2 = ...
    EventTripLevelPGt: ControlStationModeSelectorS2 = ...
    EventTripLevelPLt: ControlStationModeSelectorS2 = ...
    EventTripLevelULt: ControlStationModeSelectorS2 = ...
    EventUnbalance: ControlStationModeSelectorS2 = ...
    EventWarningLevelCosPhiLt: ControlStationModeSelectorS2 = ...
    EventWarningLevelIGt: ControlStationModeSelectorS2 = ...
    EventWarningLevelILt: ControlStationModeSelectorS2 = ...
    EventWarningLevelPGt: ControlStationModeSelectorS2 = ...
    EventWarningLevelPLt: ControlStationModeSelectorS2 = ...
    EventWarningLevelULt: ControlStationModeSelectorS2 = ...
    FaultAntivalence: ControlStationModeSelectorS2 = ...
    FaultBus: ControlStationModeSelectorS2 = ...
    FaultConfigurationError: ControlStationModeSelectorS2 = ...
    FaultDouble0: ControlStationModeSelectorS2 = ...
    FaultDouble1: ControlStationModeSelectorS2 = ...
    FaultEndPosition: ControlStationModeSelectorS2 = ...
    FaultExecutionOnCommand: ControlStationModeSelectorS2 = ...
    FaultExecutionSTOPCommand: ControlStationModeSelectorS2 = ...
    FaultFeedbackOff: ControlStationModeSelectorS2 = ...
    FaultFeedbackOn: ControlStationModeSelectorS2 = ...
    FaultHardwareFaultBasicUnit: ControlStationModeSelectorS2 = ...
    FaultModuleFault: ControlStationModeSelectorS2 = ...
    FaultOperationalProtectionOff: ControlStationModeSelectorS2 = ...
    FaultParameterization: ControlStationModeSelectorS2 = ...
    FaultPLCPCS: ControlStationModeSelectorS2 = ...
    FaultPowerFailure: ControlStationModeSelectorS2 = ...
    FaultStalledPositioner: ControlStationModeSelectorS2 = ...
    FaultTemporaryComponents: ControlStationModeSelectorS2 = ...
    FaultTestPositionFeedback: ControlStationModeSelectorS2 = ...
    FixedLevel0: ControlStationModeSelectorS2 = ...
    FixedLevel1: ControlStationModeSelectorS2 = ...
    Flashing1Output: ControlStationModeSelectorS2 = ...
    Flashing2Output: ControlStationModeSelectorS2 = ...
    Flashing3Output: ControlStationModeSelectorS2 = ...
    Flicker1Output: ControlStationModeSelectorS2 = ...
    Flicker2Output: ControlStationModeSelectorS2 = ...
    Flicker3Output: ControlStationModeSelectorS2 = ...
    NonvolatileElement1Output: ControlStationModeSelectorS2 = ...
    NonvolatileElement2Output: ControlStationModeSelectorS2 = ...
    NonvolatileElement3Output: ControlStationModeSelectorS2 = ...
    NonvolatileElement4Output: ControlStationModeSelectorS2 = ...
    NotConnected: ControlStationModeSelectorS2 = ...
    OPButton1: ControlStationModeSelectorS2 = ...
    OPButton2: ControlStationModeSelectorS2 = ...
    OPButton3: ControlStationModeSelectorS2 = ...
    OPButton4: ControlStationModeSelectorS2 = ...
    OPTestResetButton: ControlStationModeSelectorS2 = ...
    PWMOutput: ControlStationModeSelectorS2 = ...
    SignalConditioning1Output: ControlStationModeSelectorS2 = ...
    SignalConditioning2Output: ControlStationModeSelectorS2 = ...
    SignalConditioning3Output: ControlStationModeSelectorS2 = ...
    SignalConditioning4Output: ControlStationModeSelectorS2 = ...
    SignalConditioning5Output: ControlStationModeSelectorS2 = ...
    SignalConditioning6Output: ControlStationModeSelectorS2 = ...
    StatusBusOk: ControlStationModeSelectorS2 = ...
    StatusChangeoverPauseActive: ControlStationModeSelectorS2 = ...
    StatusCoolingDownPeriodActive: ControlStationModeSelectorS2 = ...
    StatusCurrentFlowing: ControlStationModeSelectorS2 = ...
    StatusDeviceOk: ControlStationModeSelectorS2 = ...
    StatusDeviceTestActive: ControlStationModeSelectorS2 = ...
    StatusEmergencyStartExecuted: ControlStationModeSelectorS2 = ...
    StatusEnablingCircuitClosed: ControlStationModeSelectorS2 = ...
    StatusFeedbackCLOSED: ControlStationModeSelectorS2 = ...
    StatusFeedbackOPEN: ControlStationModeSelectorS2 = ...
    StatusGroupFault: ControlStationModeSelectorS2 = ...
    StatusGroupWarning: ControlStationModeSelectorS2 = ...
    StatusInterlockingTimeActive: ControlStationModeSelectorS2 = ...
    StatusOff: ControlStationModeSelectorS2 = ...
    StatusOnForward: ControlStationModeSelectorS2 = ...
    StatusOnForwardFast: ControlStationModeSelectorS2 = ...
    StatusOnReverse: ControlStationModeSelectorS2 = ...
    StatusOnReverseFast: ControlStationModeSelectorS2 = ...
    StatusOperationalProtectionOff: ControlStationModeSelectorS2 = ...
    StatusPauseTimeActive: ControlStationModeSelectorS2 = ...
    StatusPhaseSequence123: ControlStationModeSelectorS2 = ...
    StatusPhaseSequence321: ControlStationModeSelectorS2 = ...
    StatusPLCPCSInRun: ControlStationModeSelectorS2 = ...
    StatusPositionerRunsInCLOSEDDirection: ControlStationModeSelectorS2 = ...
    StatusPositionerRunsInOPENDirection: ControlStationModeSelectorS2 = ...
    StatusPROFIenergyCommandStartPausePending: ControlStationModeSelectorS2 = ...
    StatusRemoteMode: ControlStationModeSelectorS2 = ...
    StatusStartActive: ControlStationModeSelectorS2 = ...
    StatusTestPosition: ControlStationModeSelectorS2 = ...
    StatusTorqueCLOSED: ControlStationModeSelectorS2 = ...
    StatusTorqueOPEN: ControlStationModeSelectorS2 = ...
    Timer1Output: ControlStationModeSelectorS2 = ...
    Timer2Output: ControlStationModeSelectorS2 = ...
    Timer3Output: ControlStationModeSelectorS2 = ...
    Timer4Output: ControlStationModeSelectorS2 = ...
    Timer5Output: ControlStationModeSelectorS2 = ...
    Timer6Output: ControlStationModeSelectorS2 = ...
    TruthTable10Output: ControlStationModeSelectorS2 = ...
    TruthTable11Output: ControlStationModeSelectorS2 = ...
    TruthTable1Output: ControlStationModeSelectorS2 = ...
    TruthTable2Output: ControlStationModeSelectorS2 = ...
    TruthTable3Output: ControlStationModeSelectorS2 = ...
    TruthTable4Output: ControlStationModeSelectorS2 = ...
    TruthTable5Output: ControlStationModeSelectorS2 = ...
    TruthTable6Output: ControlStationModeSelectorS2 = ...
    TruthTable7Output: ControlStationModeSelectorS2 = ...
    TruthTable8Output: ControlStationModeSelectorS2 = ...
    TruthTable9Output1: ControlStationModeSelectorS2 = ...
    TruthTable9Output2: ControlStationModeSelectorS2 = ...
    value__ = ...
    WarningFeedbackCircuit: ControlStationModeSelectorS2 = ...
    WarningSimultaneity: ControlStationModeSelectorS2 = ...


class CosPhiLowerTripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CosPhiLowerTripLevelResponse

    enum CosPhiLowerTripLevelResponse, values: Deactivated (0), Signal (1), Trip (3)
    """
    Deactivated: CosPhiLowerTripLevelResponse = ...
    Signal: CosPhiLowerTripLevelResponse = ...
    Trip: CosPhiLowerTripLevelResponse = ...
    value__ = ...


class CosPhiLowerWarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CosPhiLowerWarningLevelResponse

    enum CosPhiLowerWarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: CosPhiLowerWarningLevelResponse = ...
    Signal: CosPhiLowerWarningLevelResponse = ...
    value__ = ...
    Warn: CosPhiLowerWarningLevelResponse = ...


class CountDirection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CountDirection

    enum CountDirection, values: Inverted (1), Normal (0)
    """
    Inverted: CountDirection = ...
    Normal: CountDirection = ...
    value__ = ...


class CountDirectionDQ0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CountDirectionDQ0

    enum CountDirectionDQ0, values: Down (2), InBothDirections (3), None (0), Up (1)
    """
    Down: CountDirectionDQ0 = ...
    InBothDirections: CountDirectionDQ0 = ...
    Up: CountDirectionDQ0 = ...
    value__ = ...


class CountDirectionDQ1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CountDirectionDQ1

    enum CountDirectionDQ1, values: Down (2), InBothDirections (3), None (0), Up (1)
    """
    Down: CountDirectionDQ1 = ...
    InBothDirections: CountDirectionDQ1 = ...
    Up: CountDirectionDQ1 = ...
    value__ = ...


class CountDirectionForSynchronization(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CountDirectionForSynchronization

    enum CountDirectionForSynchronization, values: Down (2), InBothDirections (3), None (0), Up (1)
    """
    Down: CountDirectionForSynchronization = ...
    InBothDirections: CountDirectionForSynchronization = ...
    Up: CountDirectionForSynchronization = ...
    value__ = ...


class CounterConfiguration(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CounterConfiguration

    enum CounterConfiguration, values: None (0), Value2Counters (1), Value4Counters (2)
    """
    Value2Counters: CounterConfiguration = ...
    Value4Counters: CounterConfiguration = ...
    value__ = ...


class CounterMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CounterMode

    enum CounterMode, values: CascadingFunction (2), ContinuouslyCountFunction (4), NormalCountFunction (1), OnceCountFunction (3), PeriodicCountFunction (0)
    """
    CascadingFunction: CounterMode = ...
    ContinuouslyCountFunction: CounterMode = ...
    NormalCountFunction: CounterMode = ...
    OnceCountFunction: CounterMode = ...
    PeriodicCountFunction: CounterMode = ...
    value__ = ...


class CurrentDelayTime(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CurrentDelayTime

    enum CurrentDelayTime, values: Value1 (0), Value10 (5), Value100 (12), Value1000 (15), Value12 (6), Value14 (7), Value16 (8), Value2 (1), Value20 (9), Value200 (13), Value4 (2), Value40 (10), Value500 (14), Value6 (3), Value60 (11), Value8 (4)
    """
    Value1: CurrentDelayTime = ...
    Value10: CurrentDelayTime = ...
    Value100: CurrentDelayTime = ...
    Value1000: CurrentDelayTime = ...
    Value12: CurrentDelayTime = ...
    Value14: CurrentDelayTime = ...
    Value16: CurrentDelayTime = ...
    Value2: CurrentDelayTime = ...
    Value20: CurrentDelayTime = ...
    Value200: CurrentDelayTime = ...
    Value4: CurrentDelayTime = ...
    Value40: CurrentDelayTime = ...
    Value500: CurrentDelayTime = ...
    Value6: CurrentDelayTime = ...
    Value60: CurrentDelayTime = ...
    Value8: CurrentDelayTime = ...
    value__ = ...


class CurrentLimitsLowerTripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CurrentLimitsLowerTripLevelResponse

    enum CurrentLimitsLowerTripLevelResponse, values: Deactivated (0), Signal (1), Trip (3)
    """
    Deactivated: CurrentLimitsLowerTripLevelResponse = ...
    Signal: CurrentLimitsLowerTripLevelResponse = ...
    Trip: CurrentLimitsLowerTripLevelResponse = ...
    value__ = ...


class CurrentLimitsLowerWarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CurrentLimitsLowerWarningLevelResponse

    enum CurrentLimitsLowerWarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: CurrentLimitsLowerWarningLevelResponse = ...
    Signal: CurrentLimitsLowerWarningLevelResponse = ...
    value__ = ...
    Warn: CurrentLimitsLowerWarningLevelResponse = ...


class CurrentLimitsUpperTripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CurrentLimitsUpperTripLevelResponse

    enum CurrentLimitsUpperTripLevelResponse, values: Deactivated (0), Signal (1), Trip (3)
    """
    Deactivated: CurrentLimitsUpperTripLevelResponse = ...
    Signal: CurrentLimitsUpperTripLevelResponse = ...
    Trip: CurrentLimitsUpperTripLevelResponse = ...
    value__ = ...


class CurrentLimitsUpperWarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CurrentLimitsUpperWarningLevelResponse

    enum CurrentLimitsUpperWarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: CurrentLimitsUpperWarningLevelResponse = ...
    Signal: CurrentLimitsUpperWarningLevelResponse = ...
    value__ = ...
    Warn: CurrentLimitsUpperWarningLevelResponse = ...


class CurrentMeasurement(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CurrentMeasurement

    enum CurrentMeasurement, values: Deactivated (0), NeutralCurrentCalculation (2), NeutralCurrentMeasurement (1)
    """
    Deactivated: CurrentMeasurement = ...
    NeutralCurrentCalculation: CurrentMeasurement = ...
    NeutralCurrentMeasurement: CurrentMeasurement = ...
    value__ = ...


class CurrentTransformerForL1L2L3AndNeutralConductor(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CurrentTransformerForL1L2L3AndNeutralConductor

    enum CurrentTransformerForL1L2L3AndNeutralConductor, values: CurrentToVoltageConverter (0), RogowskiCoil (1)
    """
    CurrentToVoltageConverter: CurrentTransformerForL1L2L3AndNeutralConductor = ...
    RogowskiCoil: CurrentTransformerForL1L2L3AndNeutralConductor = ...
    value__ = ...


class CurrentTransformerSecondaryCurrent(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CurrentTransformerSecondaryCurrent

    enum CurrentTransformerSecondaryCurrent, values: Value1A (0), Value5A (2)
    """
    Value1A: CurrentTransformerSecondaryCurrent = ...
    Value5A: CurrentTransformerSecondaryCurrent = ...
    value__ = ...


class CyclicSendDataFloatValuesByte10to13(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CyclicSendDataFloatValuesByte10to13

    enum CyclicSendDataFloatValuesByte10to13, values: ActivePowerP (9), ActivePowerPaSigned (50), ActivePowerPbSignedInverted (51), ApparentPowerS (10), AverageCurrentI (5), CosPhi (14), CurrentIL1 (6), CurrentIL2 (7), CurrentIL3 (8), FrequencyHz (15), LineToLineVoltageUl1L2 (11), LineToLineVoltageUl2L3 (12), LineToLineVoltageUl3L1 (13), MaxCurrentI (4), NotConnected (0), PhaseVoltageUl1N (16), PhaseVoltageUl2N (17), PhaseVoltageUl3N (18)
    """
    ActivePowerP: CyclicSendDataFloatValuesByte10to13 = ...
    ActivePowerPaSigned: CyclicSendDataFloatValuesByte10to13 = ...
    ActivePowerPbSignedInverted: CyclicSendDataFloatValuesByte10to13 = ...
    ApparentPowerS: CyclicSendDataFloatValuesByte10to13 = ...
    AverageCurrentI: CyclicSendDataFloatValuesByte10to13 = ...
    CosPhi: CyclicSendDataFloatValuesByte10to13 = ...
    CurrentIL1: CyclicSendDataFloatValuesByte10to13 = ...
    CurrentIL2: CyclicSendDataFloatValuesByte10to13 = ...
    CurrentIL3: CyclicSendDataFloatValuesByte10to13 = ...
    FrequencyHz: CyclicSendDataFloatValuesByte10to13 = ...
    LineToLineVoltageUl1L2: CyclicSendDataFloatValuesByte10to13 = ...
    LineToLineVoltageUl2L3: CyclicSendDataFloatValuesByte10to13 = ...
    LineToLineVoltageUl3L1: CyclicSendDataFloatValuesByte10to13 = ...
    MaxCurrentI: CyclicSendDataFloatValuesByte10to13 = ...
    NotConnected: CyclicSendDataFloatValuesByte10to13 = ...
    PhaseVoltageUl1N: CyclicSendDataFloatValuesByte10to13 = ...
    PhaseVoltageUl2N: CyclicSendDataFloatValuesByte10to13 = ...
    PhaseVoltageUl3N: CyclicSendDataFloatValuesByte10to13 = ...
    value__ = ...


class CyclicSendDataFloatValuesByte14to17(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CyclicSendDataFloatValuesByte14to17

    enum CyclicSendDataFloatValuesByte14to17, values: ActivePowerP (9), ActivePowerPaSigned (50), ActivePowerPbSignedInverted (51), ApparentPowerS (10), AverageCurrentI (5), CosPhi (14), CurrentIL1 (6), CurrentIL2 (7), CurrentIL3 (8), FrequencyHz (15), LineToLineVoltageUl1L2 (11), LineToLineVoltageUl2L3 (12), LineToLineVoltageUl3L1 (13), MaxCurrentI (4), NotConnected (0), PhaseVoltageUl1N (16), PhaseVoltageUl2N (17), PhaseVoltageUl3N (18)
    """
    ActivePowerP: CyclicSendDataFloatValuesByte14to17 = ...
    ActivePowerPaSigned: CyclicSendDataFloatValuesByte14to17 = ...
    ActivePowerPbSignedInverted: CyclicSendDataFloatValuesByte14to17 = ...
    ApparentPowerS: CyclicSendDataFloatValuesByte14to17 = ...
    AverageCurrentI: CyclicSendDataFloatValuesByte14to17 = ...
    CosPhi: CyclicSendDataFloatValuesByte14to17 = ...
    CurrentIL1: CyclicSendDataFloatValuesByte14to17 = ...
    CurrentIL2: CyclicSendDataFloatValuesByte14to17 = ...
    CurrentIL3: CyclicSendDataFloatValuesByte14to17 = ...
    FrequencyHz: CyclicSendDataFloatValuesByte14to17 = ...
    LineToLineVoltageUl1L2: CyclicSendDataFloatValuesByte14to17 = ...
    LineToLineVoltageUl2L3: CyclicSendDataFloatValuesByte14to17 = ...
    LineToLineVoltageUl3L1: CyclicSendDataFloatValuesByte14to17 = ...
    MaxCurrentI: CyclicSendDataFloatValuesByte14to17 = ...
    NotConnected: CyclicSendDataFloatValuesByte14to17 = ...
    PhaseVoltageUl1N: CyclicSendDataFloatValuesByte14to17 = ...
    PhaseVoltageUl2N: CyclicSendDataFloatValuesByte14to17 = ...
    PhaseVoltageUl3N: CyclicSendDataFloatValuesByte14to17 = ...
    value__ = ...


class CyclicSendDataFloatValuesByte2to5(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CyclicSendDataFloatValuesByte2to5

    enum CyclicSendDataFloatValuesByte2to5, values: ActivePowerP (9), ActivePowerPaSigned (50), ActivePowerPbSignedInverted (51), ApparentPowerS (10), AverageCurrentI (5), CosPhi (14), CurrentIL1 (6), CurrentIL2 (7), CurrentIL3 (8), FrequencyHz (15), LineToLineVoltageUl1L2 (11), LineToLineVoltageUl2L3 (12), LineToLineVoltageUl3L1 (13), MaxCurrentI (4), NotConnected (0), PhaseVoltageUl1N (16), PhaseVoltageUl2N (17), PhaseVoltageUl3N (18)
    """
    ActivePowerP: CyclicSendDataFloatValuesByte2to5 = ...
    ActivePowerPaSigned: CyclicSendDataFloatValuesByte2to5 = ...
    ActivePowerPbSignedInverted: CyclicSendDataFloatValuesByte2to5 = ...
    ApparentPowerS: CyclicSendDataFloatValuesByte2to5 = ...
    AverageCurrentI: CyclicSendDataFloatValuesByte2to5 = ...
    CosPhi: CyclicSendDataFloatValuesByte2to5 = ...
    CurrentIL1: CyclicSendDataFloatValuesByte2to5 = ...
    CurrentIL2: CyclicSendDataFloatValuesByte2to5 = ...
    CurrentIL3: CyclicSendDataFloatValuesByte2to5 = ...
    FrequencyHz: CyclicSendDataFloatValuesByte2to5 = ...
    LineToLineVoltageUl1L2: CyclicSendDataFloatValuesByte2to5 = ...
    LineToLineVoltageUl2L3: CyclicSendDataFloatValuesByte2to5 = ...
    LineToLineVoltageUl3L1: CyclicSendDataFloatValuesByte2to5 = ...
    MaxCurrentI: CyclicSendDataFloatValuesByte2to5 = ...
    NotConnected: CyclicSendDataFloatValuesByte2to5 = ...
    PhaseVoltageUl1N: CyclicSendDataFloatValuesByte2to5 = ...
    PhaseVoltageUl2N: CyclicSendDataFloatValuesByte2to5 = ...
    PhaseVoltageUl3N: CyclicSendDataFloatValuesByte2to5 = ...
    value__ = ...


class CyclicSendDataFloatValuesByte6to9(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property CyclicSendDataFloatValuesByte6to9

    enum CyclicSendDataFloatValuesByte6to9, values: ActivePowerP (9), ActivePowerPaSigned (50), ActivePowerPbSignedInverted (51), ApparentPowerS (10), AverageCurrentI (5), CosPhi (14), CurrentIL1 (6), CurrentIL2 (7), CurrentIL3 (8), FrequencyHz (15), LineToLineVoltageUl1L2 (11), LineToLineVoltageUl2L3 (12), LineToLineVoltageUl3L1 (13), MaxCurrentI (4), NotConnected (0), PhaseVoltageUl1N (16), PhaseVoltageUl2N (17), PhaseVoltageUl3N (18)
    """
    ActivePowerP: CyclicSendDataFloatValuesByte6to9 = ...
    ActivePowerPaSigned: CyclicSendDataFloatValuesByte6to9 = ...
    ActivePowerPbSignedInverted: CyclicSendDataFloatValuesByte6to9 = ...
    ApparentPowerS: CyclicSendDataFloatValuesByte6to9 = ...
    AverageCurrentI: CyclicSendDataFloatValuesByte6to9 = ...
    CosPhi: CyclicSendDataFloatValuesByte6to9 = ...
    CurrentIL1: CyclicSendDataFloatValuesByte6to9 = ...
    CurrentIL2: CyclicSendDataFloatValuesByte6to9 = ...
    CurrentIL3: CyclicSendDataFloatValuesByte6to9 = ...
    FrequencyHz: CyclicSendDataFloatValuesByte6to9 = ...
    LineToLineVoltageUl1L2: CyclicSendDataFloatValuesByte6to9 = ...
    LineToLineVoltageUl2L3: CyclicSendDataFloatValuesByte6to9 = ...
    LineToLineVoltageUl3L1: CyclicSendDataFloatValuesByte6to9 = ...
    MaxCurrentI: CyclicSendDataFloatValuesByte6to9 = ...
    NotConnected: CyclicSendDataFloatValuesByte6to9 = ...
    PhaseVoltageUl1N: CyclicSendDataFloatValuesByte6to9 = ...
    PhaseVoltageUl2N: CyclicSendDataFloatValuesByte6to9 = ...
    PhaseVoltageUl3N: CyclicSendDataFloatValuesByte6to9 = ...
    value__ = ...


class DataBits(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DataBits

    enum DataBits, values: None (0), Value7 (7), Value8 (8)
    """
    Value7: DataBits = ...
    Value8: DataBits = ...
    value__ = ...


class DataFlowControl(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DataFlowControl

    enum DataFlowControl, values: AutomaticUseOfV24Signals (3), None (0), RtsOrCts (2), XonOrXoff (1)
    """
    AutomaticUseOfV24Signals: DataFlowControl = ...
    RtsOrCts: DataFlowControl = ...
    value__ = ...
    XonOrXoff: DataFlowControl = ...


class DataFormat(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DataFormat

    enum DataFormat, values: S7 (0)
    """
    S7: DataFormat = ...
    value__ = ...


class DelayTimeForLimitMonitoring(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DelayTimeForLimitMonitoring

    enum DelayTimeForLimitMonitoring, values: None (0), Value10S (10), Value1S (1), Value2S (2), Value3S (3), Value4S (4), Value5S (5), Value6S (6), Value7S (7), Value8S (8), Value9S (9)
    """
    Value10S: DelayTimeForLimitMonitoring = ...
    Value1S: DelayTimeForLimitMonitoring = ...
    Value2S: DelayTimeForLimitMonitoring = ...
    Value3S: DelayTimeForLimitMonitoring = ...
    Value4S: DelayTimeForLimitMonitoring = ...
    Value5S: DelayTimeForLimitMonitoring = ...
    Value6S: DelayTimeForLimitMonitoring = ...
    Value7S: DelayTimeForLimitMonitoring = ...
    Value8S: DelayTimeForLimitMonitoring = ...
    Value9S: DelayTimeForLimitMonitoring = ...
    value__ = ...


class DensityUnit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DensityUnit

    enum DensityUnit, values: Default (0), GramPerCubicCentimeter (1), GramPerCubicMeter (4), GramPerLiter (3), GramPerMilliliter (2), KilogramPerCubicDecimeter (5), KilogramPerCubicMeter (7), KilogramPerLiter (6), MegagramPerCubicMeter (18), MetricTonPerCubicMeter (16), MicrogramPerLiter (17), MilligramPerCubicDecimeter (12), MilligramPerCubicMeter (14), MilligramPerLiter (13), PoundsPerCubicFoot (8), PoundsPerCubicInch (11), PoundsPerGallons (9), PoundsPerImperialGallons (10), TonPerCubicYard (15)
    """
    Default: DensityUnit = ...
    GramPerCubicCentimeter: DensityUnit = ...
    GramPerCubicMeter: DensityUnit = ...
    GramPerLiter: DensityUnit = ...
    GramPerMilliliter: DensityUnit = ...
    KilogramPerCubicDecimeter: DensityUnit = ...
    KilogramPerCubicMeter: DensityUnit = ...
    KilogramPerLiter: DensityUnit = ...
    MegagramPerCubicMeter: DensityUnit = ...
    MetricTonPerCubicMeter: DensityUnit = ...
    MicrogramPerLiter: DensityUnit = ...
    MilligramPerCubicDecimeter: DensityUnit = ...
    MilligramPerCubicMeter: DensityUnit = ...
    MilligramPerLiter: DensityUnit = ...
    PoundsPerCubicFoot: DensityUnit = ...
    PoundsPerCubicInch: DensityUnit = ...
    PoundsPerGallons: DensityUnit = ...
    PoundsPerImperialGallons: DensityUnit = ...
    TonPerCubicYard: DensityUnit = ...
    value__ = ...


class IHardwareCompareTarget: # skipped bases: <type 'object'>
    """ Access to the device/device item in a HW compare scenario """
    pass

class HardwareObject(IEquatable, IEngineeringObject, IHardwareCompareTarget, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ The base for hardware modules like devices or device items """
    @property
    def DeviceItems(self) -> DeviceItemComposition:
        """
        Composition of device items

        Get: DeviceItems(self: HardwareObject) -> DeviceItemComposition
        """
        ...

    @property
    def HwIdentifiers(self) -> HwIdentifierComposition:
        """
        Composition of HW identifiers

        Get: HwIdentifiers(self: HardwareObject) -> HwIdentifierComposition
        """
        ...

    @property
    def Items(self) -> DeviceItemAssociation:
        """
        Associated device items for this device

        Get: Items(self: HardwareObject) -> DeviceItemAssociation
        """
        ...

    @property
    def Name(self) -> str:
        """
        The name of the device

        Get: Name(self: HardwareObject) -> str

        Set: Name(self: HardwareObject) = value
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: HardwareObject) -> IEngineeringObject
        """
        ...

    @property
    def TypeIdentifier(self) -> str:
        """
        The type identifier of this device

        Get: TypeIdentifier(self: HardwareObject) -> str
        """
        ...


    def CanPlugCopy(self, deviceItem:DeviceItem, positionNumber:int) -> bool:
        """
        CanPlugCopy(self: HardwareObject, deviceItem: DeviceItem, positionNumber: int) -> bool

            Determines if plug can be copied

            deviceItem: Device for which the Plug will be moved

            positionNumber: The position number where to create the plug

            Returns: System.Boolean
        """
        ...

    def CanPlugMove(self, deviceItem:DeviceItem, positionNumber:int) -> bool:
        """
        CanPlugMove(self: HardwareObject, deviceItem: DeviceItem, positionNumber: int) -> bool

            Determines if plug can be moved

            deviceItem: Device for which the Plug will be moved

            positionNumber: The position number where to create the plug

            Returns: System.Boolean
        """
        ...

    def CanPlugNew(self, typeIdentifier:str, name:str, positionNumber:int) -> bool:
        """
        CanPlugNew(self: HardwareObject, typeIdentifier: str, name: str, positionNumber: int) -> bool

            Determines if plug can be created

            typeIdentifier: The type identifier to use to create the plug

            name: The name of the plug to create

            positionNumber: The position number where to create the plug

            Returns: System.Boolean
        """
        ...

    def CompareTo(self, compareTarget:IHardwareCompareTarget) -> CompareResult:
        """
        CompareTo(self: HardwareObject, compareTarget: IHardwareCompareTarget) -> CompareResult

            Compare the hardware object vs the given target

            compareTarget: The target to compare to the hardware object

            Returns: Siemens.Engineering.Compare.CompareResult
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: HardwareObject) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def GetPlugLocations(self) -> IList:
        """
        GetPlugLocations(self: HardwareObject) -> IList[PlugLocation]

            Determine some information about free slots.

            Returns: System.Collections.Generic.IList<Siemens.Engineering.HW.Extensions.PlugLocation>
        """
        ...

    def PlugCopy(self, deviceItem:DeviceItem, positionNumber:int) -> DeviceItem:
        """
        PlugCopy(self: HardwareObject, deviceItem: DeviceItem, positionNumber: int) -> DeviceItem

            Copies a plug to a given device

            deviceItem: Device for which the Plug will be moved

            positionNumber: The position number where to create the plug

            Returns: Siemens.Engineering.HW.DeviceItem
        """
        ...

    def PlugMove(self, deviceItem:DeviceItem, positionNumber:int) -> DeviceItem:
        """
        PlugMove(self: HardwareObject, deviceItem: DeviceItem, positionNumber: int) -> DeviceItem

            Moves a plug to a given device

            deviceItem: Device for which the Plug will be moved

            positionNumber: The position number where to create the plug

            Returns: Siemens.Engineering.HW.DeviceItem
        """
        ...

    def PlugNew(self, typeIdentifier:str, name:str, positionNumber:int) -> DeviceItem:
        """
        PlugNew(self: HardwareObject, typeIdentifier: str, name: str, positionNumber: int) -> DeviceItem

            Creates and plugs a device item in a given hardware object.

            typeIdentifier: The type identifier of the device item to create.

            name: The name of the device item to create.

            positionNumber: The position number where to plug the created device item

            Returns: Siemens.Engineering.HW.DeviceItem
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: HardwareObject) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class Device(IEngineeringServiceProvider, IMasterCopySource, IMasterCopyTarget, HardwareObject): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalObjectAccess'>, <type 'IEquatable[object]'>, <type 'IHardwareCompareTarget'>, <type 'IEngineeringObject'>, <type 'IInternalBaseAccess'>, <type 'IServiceProvider'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Device as an container for DeviceItems """
    @property
    def IsGsd(self) -> bool:
        """
        Indicates if this device is a Gsd device

        Get: IsGsd(self: Device) -> bool
        """
        ...

    @property
    def UnpluggedItems(self) -> DeviceItemAssociation:
        """
        Associate unplugged items

        Get: UnpluggedItems(self: Device) -> DeviceItemAssociation
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: Device)

            Deletes this instance.
        """
        ...

    def ShowInEditor(self, view:View): # ->
        """
        ShowInEditor(self: Device, view: View)

            Show the indicated item in the HW editor

            view: Which view of the HW editor to show
        """
        ...


class DeviceComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of Devices """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: DeviceComposition) -> IEngineeringObject
        """
        ...


    def CreateFrom(self, masterCopy:MasterCopy) -> Device:
        """
        CreateFrom(self: DeviceComposition, masterCopy: MasterCopy) -> Device

            Create device from MasterCopy

            masterCopy: The source master copy

            Returns: Siemens.Engineering.HW.Device
        """
        ...

    def CreateWithItem(self, typeIdentifier:str, name:str, deviceName:str) -> Device:
        """
        CreateWithItem(self: DeviceComposition, typeIdentifier: str, name: str, deviceName: str) -> Device

            Create a device with subcomponents

            typeIdentifier: Type identifier of the device to be created with sub items

            name: Name of the device to be created with sub items

            deviceName: The name of the device to create with subcomponents

            Returns: Siemens.Engineering.HW.Device
        """
        ...

    def Find(self, name:str) -> Device:
        """
        Find(self: DeviceComposition, name: str) -> Device

            Finds a given device

            name: Name to find

            Returns: Siemens.Engineering.HW.Device
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: DeviceComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: DeviceComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Device](enumerable: IEnumerable[Device], value: Device) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class DeviceGroup(IEquatable, IEngineeringObject, IEngineeringServiceProvider, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IServiceProvider'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Group containing devices """
    @property
    def Devices(self) -> DeviceComposition:
        """
        Composition of devices

        Get: Devices(self: DeviceGroup) -> DeviceComposition
        """
        ...

    @property
    def Name(self) -> str:
        """
        The name of the device group

        Get: Name(self: DeviceGroup) -> str
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: DeviceGroup) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: DeviceGroup) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: DeviceGroup) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class DeviceItem(IEngineeringServiceProvider, IMasterCopySource, HardwareObject): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalObjectAccess'>, <type 'IEquatable[object]'>, <type 'IHardwareCompareTarget'>, <type 'IEngineeringObject'>, <type 'IInternalBaseAccess'>, <type 'IServiceProvider'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ DeviceItem object as representation of a hardware module """
    @property
    def Addresses(self) -> AddressComposition:
        """
        Composition of addresses

        Get: Addresses(self: DeviceItem) -> AddressComposition
        """
        ...

    @property
    def Channels(self) -> ChannelComposition:
        """
        Composition of channels

        Get: Channels(self: DeviceItem) -> ChannelComposition
        """
        ...

    @property
    def Classification(self) -> DeviceItemClassifications:
        """
        The classifications a device item can belong to; Flags-enum

        Get: Classification(self: DeviceItem) -> DeviceItemClassifications
        """
        ...

    @property
    def Container(self) -> HardwareObject:
        """
        This is the object where other DeviceItems are placed

        Get: Container(self: DeviceItem) -> HardwareObject
        """
        ...

    @property
    def IsBuiltIn(self) -> bool:
        """
        Indicates if the device item is built into the device

        Get: IsBuiltIn(self: DeviceItem) -> bool
        """
        ...

    @property
    def IsPlugged(self) -> bool:
        """
        Indicates if this device item is plugged into a device

        Get: IsPlugged(self: DeviceItem) -> bool
        """
        ...

    @property
    def PositionNumber(self) -> int:
        """
        Position number of this device item

        Get: PositionNumber(self: DeviceItem) -> int
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: DeviceItem)

            Deletes this instance.
        """
        ...


class DeviceItemAssociation(IEquatable, IEngineeringAssociation, IInternalAssociationAccess): # skipped bases: <type 'IInternalBaseAccess'>, <type 'IEnumerable'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Associated device items """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent..

        Get: Parent(self: DeviceItemAssociation) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: DeviceItemAssociation) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: DeviceItemAssociation) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[DeviceItem](enumerable: IEnumerable[DeviceItem], value: DeviceItem) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class DeviceItemClassifications(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    The classifications a device item can belong to; Flags-enum.

    enum (flags) DeviceItemClassifications, values: CPU (1), HM (2), None (0)
    """
    CPU: DeviceItemClassifications = ...
    HM: DeviceItemClassifications = ...
    value__ = ...


class DeviceItemComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of DeviceItems """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: DeviceItemComposition) -> IEngineeringObject
        """
        ...


    def CreateFrom(self, masterCopy:MasterCopy) -> DeviceItem:
        """
        CreateFrom(self: DeviceItemComposition, masterCopy: MasterCopy) -> DeviceItem

            Create device item from MasterCopy

            masterCopy: The source MasterCopy

            Returns: Siemens.Engineering.HW.DeviceItem
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: DeviceItemComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: DeviceItemComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[DeviceItem](enumerable: IEnumerable[DeviceItem], value: DeviceItem) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class DeviceSystemGroup(DeviceGroup): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalObjectAccess'>, <type 'IEquatable[object]'>, <type 'IEngineeringServiceProvider'>, <type 'IEngineeringObject'>, <type 'IInternalBaseAccess'>, <type 'IServiceProvider'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Represents a device system group (e.g. ungrouped devices group) """
    pass

class DeviceUserGroup(DeviceGroup, IMasterCopySource, IMasterCopyTarget): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalObjectAccess'>, <type 'IEquatable[object]'>, <type 'IEngineeringServiceProvider'>, <type 'IEngineeringObject'>, <type 'IInternalBaseAccess'>, <type 'IServiceProvider'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Group containing the devices """
    @property
    def Groups(self) -> DeviceUserGroupComposition:
        """
        Composition of device user groups

        Get: Groups(self: DeviceUserGroup) -> DeviceUserGroupComposition
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: DeviceUserGroup)

            Deletes this instance.
        """
        ...


class DeviceUserGroupComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of DeviceUserGroups """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: DeviceUserGroupComposition) -> IEngineeringObject
        """
        ...


    def CreateFrom(self, masterCopy:MasterCopy) -> DeviceUserGroup:
        """
        CreateFrom(self: DeviceUserGroupComposition, masterCopy: MasterCopy) -> DeviceUserGroup

            Create device user group from MasterCopy

            masterCopy: The source MasterCopy

            Returns: Siemens.Engineering.HW.DeviceUserGroup
        """
        ...

    def Find(self, name:str) -> DeviceUserGroup:
        """
        Find(self: DeviceUserGroupComposition, name: str) -> DeviceUserGroup

            Finds a given device user group

            name: Name to find

            Returns: Siemens.Engineering.HW.DeviceUserGroup
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: DeviceUserGroupComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: DeviceUserGroupComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[DeviceUserGroup](enumerable: IEnumerable[DeviceUserGroup], value: DeviceUserGroup) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class DhcpSupportedMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    DHCP Supported Modes

    enum DhcpSupportedMode, values: ClientId (1), MacAddress (0)
    """
    ClientId: DhcpSupportedMode = ...
    MacAddress: DhcpSupportedMode = ...
    value__ = ...


class DiagnosticParameterMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticParameterMode

    enum DiagnosticParameterMode, values: ApplySettingsForBothSidesOfTheCoupler (1), DefineDifferentSettingForTheSidesOfTheCoupler (0)
    """
    ApplySettingsForBothSidesOfTheCoupler: DiagnosticParameterMode = ...
    DefineDifferentSettingForTheSidesOfTheCoupler: DiagnosticParameterMode = ...
    value__ = ...


class DiagnosticsCPlug(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsCPlug

    enum DiagnosticsCPlug, values: Monitored (1), Unmonitored (0)
    """
    Monitored: DiagnosticsCPlug = ...
    Unmonitored: DiagnosticsCPlug = ...
    value__ = ...


class DiagnosticsCycleCounter(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsCycleCounter

    enum DiagnosticsCycleCounter, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsCycleCounter = ...
    Deactivated: DiagnosticsCycleCounter = ...
    value__ = ...


class DiagnosticsCycleCounterPilotValves(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsCycleCounterPilotValves

    enum DiagnosticsCycleCounterPilotValves, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsCycleCounterPilotValves = ...
    Deactivated: DiagnosticsCycleCounterPilotValves = ...
    value__ = ...


class DiagnosticsGroup(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsGroup

    enum DiagnosticsGroup, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsGroup = ...
    Deactivated: DiagnosticsGroup = ...
    value__ = ...


class DiagnosticsInterrupt(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsInterrupt

    enum DiagnosticsInterrupt, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsInterrupt = ...
    Deactivated: DiagnosticsInterrupt = ...
    value__ = ...


class DiagnosticsNoSupplyVoltage(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsNoSupplyVoltage

    enum DiagnosticsNoSupplyVoltage, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsNoSupplyVoltage = ...
    Deactivated: DiagnosticsNoSupplyVoltage = ...
    value__ = ...


class DiagnosticsOverflow(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsOverflow

    enum DiagnosticsOverflow, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsOverflow = ...
    Deactivated: DiagnosticsOverflow = ...
    value__ = ...


class DiagnosticsPort1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsPort1

    enum DiagnosticsPort1, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsPort1 = ...
    Deactivated: DiagnosticsPort1 = ...
    value__ = ...


class DiagnosticsPort2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsPort2

    enum DiagnosticsPort2, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsPort2 = ...
    Deactivated: DiagnosticsPort2 = ...
    value__ = ...


class DiagnosticsPort3(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsPort3

    enum DiagnosticsPort3, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsPort3 = ...
    Deactivated: DiagnosticsPort3 = ...
    value__ = ...


class DiagnosticsPort4(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsPort4

    enum DiagnosticsPort4, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsPort4 = ...
    Deactivated: DiagnosticsPort4 = ...
    value__ = ...


class DiagnosticsRedundantPowerSupply(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsRedundantPowerSupply

    enum DiagnosticsRedundantPowerSupply, values: NoRedundantPowerSupply (0), RedundantPowerSupply (1), RedundantPowerSupplyRequired (3)
    """
    NoRedundantPowerSupply: DiagnosticsRedundantPowerSupply = ...
    RedundantPowerSupply: DiagnosticsRedundantPowerSupply = ...
    RedundantPowerSupplyRequired: DiagnosticsRedundantPowerSupply = ...
    value__ = ...


class DiagnosticsShortCircuitActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsShortCircuitActive

    enum DiagnosticsShortCircuitActive, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsShortCircuitActive = ...
    Deactivated: DiagnosticsShortCircuitActive = ...
    value__ = ...


class DiagnosticsShortCircuitToGround(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsShortCircuitToGround

    enum DiagnosticsShortCircuitToGround, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsShortCircuitToGround = ...
    Deactivated: DiagnosticsShortCircuitToGround = ...
    value__ = ...


class DiagnosticsShortCircuitToLplus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsShortCircuitToLplus

    enum DiagnosticsShortCircuitToLplus, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsShortCircuitToLplus = ...
    Deactivated: DiagnosticsShortCircuitToLplus = ...
    value__ = ...


class DiagnosticsUnderflow(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsUnderflow

    enum DiagnosticsUnderflow, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsUnderflow = ...
    Deactivated: DiagnosticsUnderflow = ...
    value__ = ...


class DiagnosticsWireBreak(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsWireBreak

    enum DiagnosticsWireBreak, values: Active (1), Deactivated (0)
    """
    Active: DiagnosticsWireBreak = ...
    Deactivated: DiagnosticsWireBreak = ...
    value__ = ...


class DiagnosticsWireBreakLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DiagnosticsWireBreakLimit

    enum DiagnosticsWireBreakLimit, values: None (0), Value1Dot185mA (1), Value3Dot6mA (2)
    """
    Value1Dot185mA: DiagnosticsWireBreakLimit = ...
    Value3Dot6mA: DiagnosticsWireBreakLimit = ...
    value__ = ...


class Diag_HighErrorLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Diag_HighErrorLimit

    enum Diag_HighErrorLimit, values: Activated (1), Deactivated (0)
    """
    Activated: Diag_HighErrorLimit = ...
    Deactivated: Diag_HighErrorLimit = ...
    value__ = ...


class Diag_HighWarningLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Diag_HighWarningLimit

    enum Diag_HighWarningLimit, values: Activated (1), Deactivated (0)
    """
    Activated: Diag_HighWarningLimit = ...
    Deactivated: Diag_HighWarningLimit = ...
    value__ = ...


class Diag_LowErrorLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Diag_LowErrorLimit

    enum Diag_LowErrorLimit, values: Activated (1), Deactivated (0)
    """
    Activated: Diag_LowErrorLimit = ...
    Deactivated: Diag_LowErrorLimit = ...
    value__ = ...


class Diag_LowWarningLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Diag_LowWarningLimit

    enum Diag_LowWarningLimit, values: Activated (1), Deactivated (0)
    """
    Activated: Diag_LowWarningLimit = ...
    Deactivated: Diag_LowWarningLimit = ...
    value__ = ...


class DigitalInputDirection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DigitalInputDirection

    enum DigitalInputDirection, values: Inverted (1), Normal (0)
    """
    Inverted: DigitalInputDirection = ...
    Normal: DigitalInputDirection = ...
    value__ = ...


class DIMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DIMode

    enum DIMode, values: Deactivate (0), ForceOutputs (9), FreezeProcessValues (10), NoControlFromStartParameters (14), ResetAllCounterOnRisingLevel (6), ResetCounter1OnRisingLevel (3), ResetCounter2OnRisingLevel (4), ResetCounter3OnRisingLevel (5), SetZeroPointOnRisingLevel (7), StartDosingOnRisingLevel (1), StopDosingOnRisingLevel (2), StopOrContinueCounter1 (11), StopOrContinueCounter2 (12), StopOrContinueCounter3 (13), StopOrContinueDosing (8)
    """
    Deactivate: DIMode = ...
    ForceOutputs: DIMode = ...
    FreezeProcessValues: DIMode = ...
    NoControlFromStartParameters: DIMode = ...
    ResetAllCounterOnRisingLevel: DIMode = ...
    ResetCounter1OnRisingLevel: DIMode = ...
    ResetCounter2OnRisingLevel: DIMode = ...
    ResetCounter3OnRisingLevel: DIMode = ...
    SetZeroPointOnRisingLevel: DIMode = ...
    StartDosingOnRisingLevel: DIMode = ...
    StopDosingOnRisingLevel: DIMode = ...
    StopOrContinueCounter1: DIMode = ...
    StopOrContinueCounter2: DIMode = ...
    StopOrContinueCounter3: DIMode = ...
    StopOrContinueDosing: DIMode = ...
    value__ = ...


class DisplayAutoLogOffTime(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DisplayAutoLogOffTime

    enum DisplayAutoLogOffTime, values: Disabled (0), Value10Minutes (600), Value15Minutes (900), Value1Hour (3600), Value1Minute (60), Value2Minutes (120), Value30Minutes (1800), Value5Minutes (300)
    """
    Disabled: DisplayAutoLogOffTime = ...
    Value10Minutes: DisplayAutoLogOffTime = ...
    Value15Minutes: DisplayAutoLogOffTime = ...
    Value1Hour: DisplayAutoLogOffTime = ...
    Value1Minute: DisplayAutoLogOffTime = ...
    Value2Minutes: DisplayAutoLogOffTime = ...
    Value30Minutes: DisplayAutoLogOffTime = ...
    Value5Minutes: DisplayAutoLogOffTime = ...
    value__ = ...


class DisplayDefaultLanguage(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DisplayDefaultLanguage

    enum DisplayDefaultLanguage, values: ChineseSimplified (5), English (0), French (3), German (1), Italian (2), Japanese (6), Korean (7), PortugueseBrazil (10), Russian (8), Spanish (4), Turkish (9)
    """
    ChineseSimplified: DisplayDefaultLanguage = ...
    English: DisplayDefaultLanguage = ...
    French: DisplayDefaultLanguage = ...
    German: DisplayDefaultLanguage = ...
    Italian: DisplayDefaultLanguage = ...
    Japanese: DisplayDefaultLanguage = ...
    Korean: DisplayDefaultLanguage = ...
    PortugueseBrazil: DisplayDefaultLanguage = ...
    Russian: DisplayDefaultLanguage = ...
    Spanish: DisplayDefaultLanguage = ...
    Turkish: DisplayDefaultLanguage = ...
    value__ = ...


class DisplayTimeToEnergySavingMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DisplayTimeToEnergySavingMode

    enum DisplayTimeToEnergySavingMode, values: Disabled (0), Value10Minutes (600), Value15Minutes (900), Value1Minute (60), Value2Minutes (120), Value30Minutes (1800), Value30Seconds (30), Value5Minutes (300)
    """
    Disabled: DisplayTimeToEnergySavingMode = ...
    Value10Minutes: DisplayTimeToEnergySavingMode = ...
    Value15Minutes: DisplayTimeToEnergySavingMode = ...
    Value1Minute: DisplayTimeToEnergySavingMode = ...
    Value2Minutes: DisplayTimeToEnergySavingMode = ...
    Value30Minutes: DisplayTimeToEnergySavingMode = ...
    Value30Seconds: DisplayTimeToEnergySavingMode = ...
    Value5Minutes: DisplayTimeToEnergySavingMode = ...
    value__ = ...


class DisplayTimeToStandbyMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DisplayTimeToStandbyMode

    enum DisplayTimeToStandbyMode, values: Disabled (0), Value10Minutes (600), Value15Minutes (900), Value1Minute (60), Value2Minutes (120), Value30Minutes (1800), Value30Seconds (30), Value5Minutes (300)
    """
    Disabled: DisplayTimeToStandbyMode = ...
    Value10Minutes: DisplayTimeToStandbyMode = ...
    Value15Minutes: DisplayTimeToStandbyMode = ...
    Value1Minute: DisplayTimeToStandbyMode = ...
    Value2Minutes: DisplayTimeToStandbyMode = ...
    Value30Minutes: DisplayTimeToStandbyMode = ...
    Value30Seconds: DisplayTimeToStandbyMode = ...
    Value5Minutes: DisplayTimeToStandbyMode = ...
    value__ = ...


class DisplayUpdateInterval(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DisplayUpdateInterval

    enum DisplayUpdateInterval, values: Disabled (0), Value10Seconds (10), Value15Seconds (15), Value1Minute (60), Value1Second (1), Value2Minutes (120), Value2Seconds (2), Value30Seconds (30), Value3Seconds (3), Value4Seconds (4), Value5Minutes (300), Value5Seconds (5)
    """
    Disabled: DisplayUpdateInterval = ...
    Value10Seconds: DisplayUpdateInterval = ...
    Value15Seconds: DisplayUpdateInterval = ...
    Value1Minute: DisplayUpdateInterval = ...
    Value1Second: DisplayUpdateInterval = ...
    Value2Minutes: DisplayUpdateInterval = ...
    Value2Seconds: DisplayUpdateInterval = ...
    Value30Seconds: DisplayUpdateInterval = ...
    Value3Seconds: DisplayUpdateInterval = ...
    Value4Seconds: DisplayUpdateInterval = ...
    Value5Minutes: DisplayUpdateInterval = ...
    Value5Seconds: DisplayUpdateInterval = ...
    value__ = ...


class DMInputsDebouncingTimes(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DMInputsDebouncingTimes

    enum DMInputsDebouncingTimes, values: Value16 (1), Value26 (2), Value36 (3), Value6 (0)
    """
    Value16: DMInputsDebouncingTimes = ...
    Value26: DMInputsDebouncingTimes = ...
    Value36: DMInputsDebouncingTimes = ...
    Value6: DMInputsDebouncingTimes = ...
    value__ = ...


class DPMasterMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DPMasterMode

    enum DPMasterMode, values: CanopenManager (4), CanopenSlave (8), CanTransparent (2), LessthanBetriebsartFestlegenGeaterthan (0)
    """
    CanopenManager: DPMasterMode = ...
    CanopenSlave: DPMasterMode = ...
    CanTransparent: DPMasterMode = ...
    LessthanBetriebsartFestlegenGeaterthan: DPMasterMode = ...
    value__ = ...


class DpOperatingMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DpOperatingMode

    enum DpOperatingMode, values: DpMaster (1), DpMasterClass2 (3), DpSlave (2), NoDp (0)
    """
    DpMaster: DpOperatingMode = ...
    DpMasterClass2: DpOperatingMode = ...
    DpSlave: DpOperatingMode = ...
    NoDp: DpOperatingMode = ...
    value__ = ...


class DpProtocolMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DpProtocolMode

    enum DpProtocolMode, values: DpV0 (4), DpV1 (7), None (0), S7Compatible (5)
    """
    DpV0: DpProtocolMode = ...
    DpV1: DpProtocolMode = ...
    S7Compatible: DpProtocolMode = ...
    value__ = ...


class DQMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DQMode

    enum DQMode, values: Deactivate (0), FlowDirection (2), StateSignal (1)
    """
    Deactivate: DQMode = ...
    FlowDirection: DQMode = ...
    StateSignal: DQMode = ...
    value__ = ...


class DriveEnableOutput(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DriveEnableOutput

    enum DriveEnableOutput, values: Diq2 (58), Dq0 (57), None (0), X11Clamp21 (21), X11Clamp22 (22), X11Clamp23 (23), X11Clamp24 (24), X11Clamp25 (25), X11Clamp26 (26), X11Clamp27 (27), X11Clamp28 (28), X11Clamp31 (31), X11Clamp32 (32), X11Clamp33 (33), X11Clamp34 (34), X11Clamp35 (35), X11Clamp36 (36), X11Clamp37 (37), X11Clamp38 (38), X12Clamp21 (39), X12Clamp22 (40), X12Clamp23 (41), X12Clamp24 (42), X12Clamp25 (43), X12Clamp26 (44), X12Clamp27 (45), X12Clamp28 (46), X12Clamp31 (49), X12Clamp32 (50), X12Clamp33 (51), X12Clamp34 (52), X12Clamp35 (53), X12Clamp36 (54), X12Clamp37 (55), X12Clamp38 (56)
    """
    Diq2: DriveEnableOutput = ...
    Dq0: DriveEnableOutput = ...
    value__ = ...
    X11Clamp21: DriveEnableOutput = ...
    X11Clamp22: DriveEnableOutput = ...
    X11Clamp23: DriveEnableOutput = ...
    X11Clamp24: DriveEnableOutput = ...
    X11Clamp25: DriveEnableOutput = ...
    X11Clamp26: DriveEnableOutput = ...
    X11Clamp27: DriveEnableOutput = ...
    X11Clamp28: DriveEnableOutput = ...
    X11Clamp31: DriveEnableOutput = ...
    X11Clamp32: DriveEnableOutput = ...
    X11Clamp33: DriveEnableOutput = ...
    X11Clamp34: DriveEnableOutput = ...
    X11Clamp35: DriveEnableOutput = ...
    X11Clamp36: DriveEnableOutput = ...
    X11Clamp37: DriveEnableOutput = ...
    X11Clamp38: DriveEnableOutput = ...
    X12Clamp21: DriveEnableOutput = ...
    X12Clamp22: DriveEnableOutput = ...
    X12Clamp23: DriveEnableOutput = ...
    X12Clamp24: DriveEnableOutput = ...
    X12Clamp25: DriveEnableOutput = ...
    X12Clamp26: DriveEnableOutput = ...
    X12Clamp27: DriveEnableOutput = ...
    X12Clamp28: DriveEnableOutput = ...
    X12Clamp31: DriveEnableOutput = ...
    X12Clamp32: DriveEnableOutput = ...
    X12Clamp33: DriveEnableOutput = ...
    X12Clamp34: DriveEnableOutput = ...
    X12Clamp35: DriveEnableOutput = ...
    X12Clamp36: DriveEnableOutput = ...
    X12Clamp37: DriveEnableOutput = ...
    X12Clamp38: DriveEnableOutput = ...


class DriveReadyInput(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DriveReadyInput

    enum DriveReadyInput, values: Di0 (37), Di1 (38), Diq2 (39), None (0), X11Clamp1 (1), X11Clamp10 (10), X11Clamp11 (11), X11Clamp12 (12), X11Clamp13 (13), X11Clamp14 (14), X11Clamp15 (15), X11Clamp16 (16), X11Clamp17 (17), X11Clamp18 (18), X11Clamp2 (2), X11Clamp3 (3), X11Clamp4 (4), X11Clamp5 (5), X11Clamp6 (6), X11Clamp7 (7), X11Clamp8 (8), X11Clamp9 (9), X12Clamp1 (19), X12Clamp10 (28), X12Clamp11 (29), X12Clamp12 (30), X12Clamp13 (31), X12Clamp14 (32), X12Clamp15 (33), X12Clamp16 (34), X12Clamp17 (35), X12Clamp18 (36), X12Clamp2 (20), X12Clamp3 (21), X12Clamp4 (22), X12Clamp5 (23), X12Clamp6 (24), X12Clamp7 (25), X12Clamp8 (26), X12Clamp9 (27)
    """
    Di0: DriveReadyInput = ...
    Di1: DriveReadyInput = ...
    Diq2: DriveReadyInput = ...
    value__ = ...
    X11Clamp1: DriveReadyInput = ...
    X11Clamp10: DriveReadyInput = ...
    X11Clamp11: DriveReadyInput = ...
    X11Clamp12: DriveReadyInput = ...
    X11Clamp13: DriveReadyInput = ...
    X11Clamp14: DriveReadyInput = ...
    X11Clamp15: DriveReadyInput = ...
    X11Clamp16: DriveReadyInput = ...
    X11Clamp17: DriveReadyInput = ...
    X11Clamp18: DriveReadyInput = ...
    X11Clamp2: DriveReadyInput = ...
    X11Clamp3: DriveReadyInput = ...
    X11Clamp4: DriveReadyInput = ...
    X11Clamp5: DriveReadyInput = ...
    X11Clamp6: DriveReadyInput = ...
    X11Clamp7: DriveReadyInput = ...
    X11Clamp8: DriveReadyInput = ...
    X11Clamp9: DriveReadyInput = ...
    X12Clamp1: DriveReadyInput = ...
    X12Clamp10: DriveReadyInput = ...
    X12Clamp11: DriveReadyInput = ...
    X12Clamp12: DriveReadyInput = ...
    X12Clamp13: DriveReadyInput = ...
    X12Clamp14: DriveReadyInput = ...
    X12Clamp15: DriveReadyInput = ...
    X12Clamp16: DriveReadyInput = ...
    X12Clamp17: DriveReadyInput = ...
    X12Clamp18: DriveReadyInput = ...
    X12Clamp2: DriveReadyInput = ...
    X12Clamp3: DriveReadyInput = ...
    X12Clamp4: DriveReadyInput = ...
    X12Clamp5: DriveReadyInput = ...
    X12Clamp6: DriveReadyInput = ...
    X12Clamp7: DriveReadyInput = ...
    X12Clamp8: DriveReadyInput = ...
    X12Clamp9: DriveReadyInput = ...


class DryRunningProtectionBehavior(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property DryRunningProtectionBehavior

    enum DryRunningProtectionBehavior, values: Deactivated (0), Trip (3)
    """
    Deactivated: DryRunningProtectionBehavior = ...
    Trip: DryRunningProtectionBehavior = ...
    value__ = ...


class EdgeSelection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EdgeSelection

    enum EdgeSelection, values: AtFallingEdge (1), AtRisingAndFallingEdge (3), AtRisingEdge (0)
    """
    AtFallingEdge: EdgeSelection = ...
    AtRisingAndFallingEdge: EdgeSelection = ...
    AtRisingEdge: EdgeSelection = ...
    value__ = ...


class EdgeSelectionDI0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EdgeSelectionDI0

    enum EdgeSelectionDI0, values: AtFallingEdge (2), AtRisingAndFallingEdge (3), AtRisingEdge (1), None (0)
    """
    AtFallingEdge: EdgeSelectionDI0 = ...
    AtRisingAndFallingEdge: EdgeSelectionDI0 = ...
    AtRisingEdge: EdgeSelectionDI0 = ...
    value__ = ...


class EdgeSelectionDI1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EdgeSelectionDI1

    enum EdgeSelectionDI1, values: AtFallingEdge (2), AtRisingAndFallingEdge (3), AtRisingEdge (1), None (0)
    """
    AtFallingEdge: EdgeSelectionDI1 = ...
    AtRisingAndFallingEdge: EdgeSelectionDI1 = ...
    AtRisingEdge: EdgeSelectionDI1 = ...
    value__ = ...


class EdgeSelectionDI2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EdgeSelectionDI2

    enum EdgeSelectionDI2, values: AtFallingEdge (2), AtRisingAndFallingEdge (3), AtRisingEdge (1), None (0)
    """
    AtFallingEdge: EdgeSelectionDI2 = ...
    AtRisingAndFallingEdge: EdgeSelectionDI2 = ...
    AtRisingEdge: EdgeSelectionDI2 = ...
    value__ = ...


class EdgeSelectionReferenceSwitch(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EdgeSelectionReferenceSwitch

    enum EdgeSelectionReferenceSwitch, values: AtFallingEdge (1), AtRisingEdge (0)
    """
    AtFallingEdge: EdgeSelectionReferenceSwitch = ...
    AtRisingEdge: EdgeSelectionReferenceSwitch = ...
    value__ = ...


class EffectiveDirection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EffectiveDirection

    enum EffectiveDirection, values: Both (3), Negative (2), None (0), Positive (1)
    """
    Both: EffectiveDirection = ...
    Negative: EffectiveDirection = ...
    Positive: EffectiveDirection = ...
    value__ = ...


class EMGroundFaultResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EMGroundFaultResponse

    enum EMGroundFaultResponse, values: Signal (0), Trip (3), Warn (9)
    """
    Signal: EMGroundFaultResponse = ...
    Trip: EMGroundFaultResponse = ...
    value__ = ...
    Warn: EMGroundFaultResponse = ...


class EMGroundFaultSensorFaultResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EMGroundFaultSensorFaultResponse

    enum EMGroundFaultSensorFaultResponse, values: Deactivated (0), Signal (1), Trip (3), Warn (2)
    """
    Deactivated: EMGroundFaultSensorFaultResponse = ...
    Signal: EMGroundFaultSensorFaultResponse = ...
    Trip: EMGroundFaultSensorFaultResponse = ...
    value__ = ...
    Warn: EMGroundFaultSensorFaultResponse = ...


class EMTripLevelActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EMTripLevelActiveStatus

    enum EMTripLevelActiveStatus, values: AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysOn: EMTripLevelActiveStatus = ...
    IfMotorIsRunningExceptTpf: EMTripLevelActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: EMTripLevelActiveStatus = ...
    value__ = ...


class EMTripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EMTripLevelResponse

    enum EMTripLevelResponse, values: Signal (0), Trip (3)
    """
    Signal: EMTripLevelResponse = ...
    Trip: EMTripLevelResponse = ...
    value__ = ...


class EMWarningActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EMWarningActiveStatus

    enum EMWarningActiveStatus, values: AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysOn: EMWarningActiveStatus = ...
    IfMotorIsRunningExceptTpf: EMWarningActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: EMWarningActiveStatus = ...
    value__ = ...


class EMWarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EMWarningLevelResponse

    enum EMWarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: EMWarningLevelResponse = ...
    Signal: EMWarningLevelResponse = ...
    value__ = ...
    Warn: EMWarningLevelResponse = ...


class EncoderEvaluation(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EncoderEvaluation

    enum EncoderEvaluation, values: F1oo1 (54229), F1oo11oo1 (39064), F1oo1Disabled (33924), F1oo2 (54228), F1oo21oo1 (19018), F1oo21oo2 (21588), F1oo2Disabled (54227), FDisabledDisabled (257), None (0)
    """
    F1oo1: EncoderEvaluation = ...
    F1oo11oo1: EncoderEvaluation = ...
    F1oo1Disabled: EncoderEvaluation = ...
    F1oo2: EncoderEvaluation = ...
    F1oo21oo1: EncoderEvaluation = ...
    F1oo21oo2: EncoderEvaluation = ...
    F1oo2Disabled: EncoderEvaluation = ...
    FDisabledDisabled: EncoderEvaluation = ...
    value__ = ...


class EncoderType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EncoderType

    enum EncoderType, values: Deactivated (0), Linear (7), Namur (1), NotUsed (2), Rotary (8), Value10KiloOhms (3), Value47KiloOhms (4)
    """
    Deactivated: EncoderType = ...
    Linear: EncoderType = ...
    Namur: EncoderType = ...
    NotUsed: EncoderType = ...
    Rotary: EncoderType = ...
    Value10KiloOhms: EncoderType = ...
    Value47KiloOhms: EncoderType = ...
    value__ = ...


class EndValueEnergyCounter(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property EndValueEnergyCounter

    enum EndValueEnergyCounter, values: CountPeriodicallyTo10Dot12 (4), CountPeriodicallyTo10Dot15 (5), CountPeriodicallyTo10Dot3 (1), CountPeriodicallyTo10Dot6 (2), CountPeriodicallyTo10Dot9 (3), NoEndValueCountIndefinitely (0)
    """
    CountPeriodicallyTo10Dot12: EndValueEnergyCounter = ...
    CountPeriodicallyTo10Dot15: EndValueEnergyCounter = ...
    CountPeriodicallyTo10Dot3: EndValueEnergyCounter = ...
    CountPeriodicallyTo10Dot6: EndValueEnergyCounter = ...
    CountPeriodicallyTo10Dot9: EndValueEnergyCounter = ...
    NoEndValueCountIndefinitely: EndValueEnergyCounter = ...
    value__ = ...


class ExternalFault1ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault1ActiveStatus

    enum ExternalFault1ActiveStatus, values: Always (0), OnlyWhenMotorOn (1)
    """
    Always: ExternalFault1ActiveStatus = ...
    OnlyWhenMotorOn: ExternalFault1ActiveStatus = ...
    value__ = ...


class ExternalFault1Response(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault1Response

    enum ExternalFault1Response, values: Signal (0), Trip (3), Warn (2)
    """
    Signal: ExternalFault1Response = ...
    Trip: ExternalFault1Response = ...
    value__ = ...
    Warn: ExternalFault1Response = ...


class ExternalFault1Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault1Type

    enum ExternalFault1Type, values: NcContact (1), NoContact (0)
    """
    NcContact: ExternalFault1Type = ...
    NoContact: ExternalFault1Type = ...
    value__ = ...


class ExternalFault2ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault2ActiveStatus

    enum ExternalFault2ActiveStatus, values: Always (0), OnlyWhenMotorOn (1)
    """
    Always: ExternalFault2ActiveStatus = ...
    OnlyWhenMotorOn: ExternalFault2ActiveStatus = ...
    value__ = ...


class ExternalFault2Response(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault2Response

    enum ExternalFault2Response, values: Signal (0), Trip (3), Warn (2)
    """
    Signal: ExternalFault2Response = ...
    Trip: ExternalFault2Response = ...
    value__ = ...
    Warn: ExternalFault2Response = ...


class ExternalFault2Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault2Type

    enum ExternalFault2Type, values: NcContact (1), NoContact (0)
    """
    NcContact: ExternalFault2Type = ...
    NoContact: ExternalFault2Type = ...
    value__ = ...


class ExternalFault3ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault3ActiveStatus

    enum ExternalFault3ActiveStatus, values: Always (0), OnlyWhenMotorOn (1)
    """
    Always: ExternalFault3ActiveStatus = ...
    OnlyWhenMotorOn: ExternalFault3ActiveStatus = ...
    value__ = ...


class ExternalFault3Response(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault3Response

    enum ExternalFault3Response, values: Signal (0), Trip (3), Warn (2)
    """
    Signal: ExternalFault3Response = ...
    Trip: ExternalFault3Response = ...
    value__ = ...
    Warn: ExternalFault3Response = ...


class ExternalFault3Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault3Type

    enum ExternalFault3Type, values: NcContact (1), NoContact (0)
    """
    NcContact: ExternalFault3Type = ...
    NoContact: ExternalFault3Type = ...
    value__ = ...


class ExternalFault4ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault4ActiveStatus

    enum ExternalFault4ActiveStatus, values: Always (0), OnlyWhenMotorOn (1)
    """
    Always: ExternalFault4ActiveStatus = ...
    OnlyWhenMotorOn: ExternalFault4ActiveStatus = ...
    value__ = ...


class ExternalFault4Response(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault4Response

    enum ExternalFault4Response, values: Signal (0), Trip (3), Warn (2)
    """
    Signal: ExternalFault4Response = ...
    Trip: ExternalFault4Response = ...
    value__ = ...
    Warn: ExternalFault4Response = ...


class ExternalFault4Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault4Type

    enum ExternalFault4Type, values: NcContact (1), NoContact (0)
    """
    NcContact: ExternalFault4Type = ...
    NoContact: ExternalFault4Type = ...
    value__ = ...


class ExternalFault5ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault5ActiveStatus

    enum ExternalFault5ActiveStatus, values: Always (0), OnlyWhenMotorOn (1)
    """
    Always: ExternalFault5ActiveStatus = ...
    OnlyWhenMotorOn: ExternalFault5ActiveStatus = ...
    value__ = ...


class ExternalFault5Response(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault5Response

    enum ExternalFault5Response, values: Signal (0), Trip (3), Warn (2)
    """
    Signal: ExternalFault5Response = ...
    Trip: ExternalFault5Response = ...
    value__ = ...
    Warn: ExternalFault5Response = ...


class ExternalFault5Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault5Type

    enum ExternalFault5Type, values: NcContact (1), NoContact (0)
    """
    NcContact: ExternalFault5Type = ...
    NoContact: ExternalFault5Type = ...
    value__ = ...


class ExternalFault6ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault6ActiveStatus

    enum ExternalFault6ActiveStatus, values: Always (0), OnlyWhenMotorOn (1)
    """
    Always: ExternalFault6ActiveStatus = ...
    OnlyWhenMotorOn: ExternalFault6ActiveStatus = ...
    value__ = ...


class ExternalFault6Response(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault6Response

    enum ExternalFault6Response, values: Signal (0), Trip (3), Warn (2)
    """
    Signal: ExternalFault6Response = ...
    Trip: ExternalFault6Response = ...
    value__ = ...
    Warn: ExternalFault6Response = ...


class ExternalFault6Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ExternalFault6Type

    enum ExternalFault6Type, values: NcContact (1), NoContact (0)
    """
    NcContact: ExternalFault6Type = ...
    NoContact: ExternalFault6Type = ...
    value__ = ...


class Failsafe_Activated(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_Activated

    enum Failsafe_Activated, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_Activated = ...
    Deactivated: Failsafe_Activated = ...
    value__ = ...


class Failsafe_ActivatedLightTest(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ActivatedLightTest

    enum Failsafe_ActivatedLightTest, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_ActivatedLightTest = ...
    Deactivated: Failsafe_ActivatedLightTest = ...
    value__ = ...


class Failsafe_BehaviorAfterChannelFault(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_BehaviorAfterChannelFault

    enum Failsafe_BehaviorAfterChannelFault, values: PassivateChannel (1), PassivateTheEntireModule (0)
    """
    PassivateChannel: Failsafe_BehaviorAfterChannelFault = ...
    PassivateTheEntireModule: Failsafe_BehaviorAfterChannelFault = ...
    value__ = ...


class Failsafe_ChannelFailureAcknowledge(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ChannelFailureAcknowledge

    enum Failsafe_ChannelFailureAcknowledge, values: Automatic (1), Manual (0)
    """
    Automatic: Failsafe_ChannelFailureAcknowledge = ...
    Manual: Failsafe_ChannelFailureAcknowledge = ...
    value__ = ...


class Failsafe_ChatterMonitoring(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ChatterMonitoring

    enum Failsafe_ChatterMonitoring, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_ChatterMonitoring = ...
    Deactivated: Failsafe_ChatterMonitoring = ...
    value__ = ...


class Failsafe_ControlOfOutput(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ControlOfOutput

    enum Failsafe_ControlOfOutput, values: FCPU (0), FCPUAndOnboardFDI (1)
    """
    FCPU: Failsafe_ControlOfOutput = ...
    FCPUAndOnboardFDI: Failsafe_ControlOfOutput = ...
    value__ = ...


class Failsafe_DiagnosisWireBreak(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_DiagnosisWireBreak

    enum Failsafe_DiagnosisWireBreak, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_DiagnosisWireBreak = ...
    Deactivated: Failsafe_DiagnosisWireBreak = ...
    value__ = ...


class Failsafe_DisableDarkTestFor48Hours(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_DisableDarkTestFor48Hours

    enum Failsafe_DisableDarkTestFor48Hours, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_DisableDarkTestFor48Hours = ...
    Deactivated: Failsafe_DisableDarkTestFor48Hours = ...
    value__ = ...


class Failsafe_DisableDarkTestMaxSIL2_CAT3_PLd(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_DisableDarkTestMaxSIL2_CAT3_PLd

    enum Failsafe_DisableDarkTestMaxSIL2_CAT3_PLd, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_DisableDarkTestMaxSIL2_CAT3_PLd = ...
    Deactivated: Failsafe_DisableDarkTestMaxSIL2_CAT3_PLd = ...
    value__ = ...


class Failsafe_DiscrepancyBehavior(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_DiscrepancyBehavior

    enum Failsafe_DiscrepancyBehavior, values: SupplyLastValidValue (0), SupplyValue0 (1)
    """
    SupplyLastValidValue: Failsafe_DiscrepancyBehavior = ...
    SupplyValue0: Failsafe_DiscrepancyBehavior = ...
    value__ = ...


class Failsafe_DiscrepancyMonitoring(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_DiscrepancyMonitoring

    enum Failsafe_DiscrepancyMonitoring, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_DiscrepancyMonitoring = ...
    Deactivated: Failsafe_DiscrepancyMonitoring = ...
    value__ = ...


class Failsafe_DiscrepancyTimeUnlimited(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_DiscrepancyTimeUnlimited

    enum Failsafe_DiscrepancyTimeUnlimited, values: DiscrepancyTimeFinite (0), DiscrepancyTimeInfinite (1)
    """
    DiscrepancyTimeFinite: Failsafe_DiscrepancyTimeUnlimited = ...
    DiscrepancyTimeInfinite: Failsafe_DiscrepancyTimeUnlimited = ...
    value__ = ...


class Failsafe_FCapabilityActivated(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_FCapabilityActivated

    enum Failsafe_FCapabilityActivated, values: PseudoActive (1), PseudoDeactivated (0)
    """
    PseudoActive: Failsafe_FCapabilityActivated = ...
    PseudoDeactivated: Failsafe_FCapabilityActivated = ...
    value__ = ...


class Failsafe_FCheckiPar(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_FCheckiPar

    enum Failsafe_FCheckiPar, values: Check (1), NoCheck (0)
    """
    Check: Failsafe_FCheckiPar = ...
    NoCheck: Failsafe_FCheckiPar = ...
    value__ = ...


class Failsafe_FCheckSeqNr(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_FCheckSeqNr

    enum Failsafe_FCheckSeqNr, values: Check (1), NoCheck (0)
    """
    Check: Failsafe_FCheckSeqNr = ...
    NoCheck: Failsafe_FCheckSeqNr = ...
    value__ = ...


class Failsafe_FCRCSeed(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_FCRCSeed

    enum Failsafe_FCRCSeed, values: CRCSeed16 (0), CRCSeed32 (1)
    """
    CRCSeed16: Failsafe_FCRCSeed = ...
    CRCSeed32: Failsafe_FCRCSeed = ...
    value__ = ...


class Failsafe_FParVersion(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_FParVersion

    enum Failsafe_FParVersion, values: V1mode (0), V2mode (1)
    """
    V1mode: Failsafe_FParVersion = ...
    V2mode: Failsafe_FParVersion = ...
    value__ = ...


class Failsafe_FPassivation(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_FPassivation

    enum Failsafe_FPassivation, values: Channel (1), DeviceModule (0)
    """
    Channel: Failsafe_FPassivation = ...
    DeviceModule: Failsafe_FPassivation = ...
    value__ = ...


class Failsafe_FSIL(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_FSIL

    enum Failsafe_FSIL, values: NoSIL (3), SIL1 (0), SIL2 (1), SIL3 (2)
    """
    NoSIL: Failsafe_FSIL = ...
    SIL1: Failsafe_FSIL = ...
    SIL2: Failsafe_FSIL = ...
    SIL3: Failsafe_FSIL = ...
    value__ = ...


class Failsafe_F_CRC_Length(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_F_CRC_Length

    enum Failsafe_F_CRC_Length, values: FourByteCRC (2), ThreeByteCRC (0), TwoByteCRC (1)
    """
    FourByteCRC: Failsafe_F_CRC_Length = ...
    ThreeByteCRC: Failsafe_F_CRC_Length = ...
    TwoByteCRC: Failsafe_F_CRC_Length = ...
    value__ = ...


class Failsafe_InputDelay(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_InputDelay

    enum Failsafe_InputDelay, values: Value0dot4ms (1), Value0dot8ms (2), Value0ms (0), Value100ms (100), Value10ms (10), Value110ms (110), Value120ms (120), Value12dot8ms (12), Value130ms (130), Value140ms (140), Value150ms (150), Value1dot6ms (3), Value20ms (20), Value3dot2ms (4), Value50ms (50), Value60ms (60), Value6dot4ms (6), Value70ms (70), Value80ms (80), Value90ms (90)
    """
    Value0dot4ms: Failsafe_InputDelay = ...
    Value0dot8ms: Failsafe_InputDelay = ...
    Value0ms: Failsafe_InputDelay = ...
    Value100ms: Failsafe_InputDelay = ...
    Value10ms: Failsafe_InputDelay = ...
    Value110ms: Failsafe_InputDelay = ...
    Value120ms: Failsafe_InputDelay = ...
    Value12dot8ms: Failsafe_InputDelay = ...
    Value130ms: Failsafe_InputDelay = ...
    Value140ms: Failsafe_InputDelay = ...
    Value150ms: Failsafe_InputDelay = ...
    Value1dot6ms: Failsafe_InputDelay = ...
    Value20ms: Failsafe_InputDelay = ...
    Value3dot2ms: Failsafe_InputDelay = ...
    Value50ms: Failsafe_InputDelay = ...
    Value60ms: Failsafe_InputDelay = ...
    Value6dot4ms: Failsafe_InputDelay = ...
    Value70ms: Failsafe_InputDelay = ...
    Value80ms: Failsafe_InputDelay = ...
    Value90ms: Failsafe_InputDelay = ...
    value__ = ...


class Failsafe_InterferenceFrequencySuppression(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_InterferenceFrequencySuppression

    enum Failsafe_InterferenceFrequencySuppression, values: Value50Hz (0), Value60Hz (1)
    """
    Value50Hz: Failsafe_InterferenceFrequencySuppression = ...
    Value60Hz: Failsafe_InterferenceFrequencySuppression = ...
    value__ = ...


class Failsafe_ManualAssignmentFIODBNumber(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ManualAssignmentFIODBNumber

    enum Failsafe_ManualAssignmentFIODBNumber, values: Automatic (0), Manual (1)
    """
    Automatic: Failsafe_ManualAssignmentFIODBNumber = ...
    Manual: Failsafe_ManualAssignmentFIODBNumber = ...
    value__ = ...


class Failsafe_MaximumTestPeriod(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_MaximumTestPeriod

    enum Failsafe_MaximumTestPeriod, values: Value1000sec (1), Value100sec (0)
    """
    Value1000sec: Failsafe_MaximumTestPeriod = ...
    Value100sec: Failsafe_MaximumTestPeriod = ...
    value__ = ...


class Failsafe_MaxReadbackTimeLightTestAndDarkTest(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_MaxReadbackTimeLightTestAndDarkTest

    enum Failsafe_MaxReadbackTimeLightTestAndDarkTest, values: Value08Or10ms (0), Value30Or50ms (1)
    """
    Value08Or10ms: Failsafe_MaxReadbackTimeLightTestAndDarkTest = ...
    Value30Or50ms: Failsafe_MaxReadbackTimeLightTestAndDarkTest = ...
    value__ = ...


class Failsafe_MeasuringRange(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_MeasuringRange

    enum Failsafe_MeasuringRange, values: Value0To20 (0), Value0ToDot10 (2), Value4To20 (1)
    """
    Value0To20: Failsafe_MeasuringRange = ...
    Value0ToDot10: Failsafe_MeasuringRange = ...
    Value4To20: Failsafe_MeasuringRange = ...
    value__ = ...


class Failsafe_OutputType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_OutputType

    enum Failsafe_OutputType, values: PMSwitching (0), PPSwitching (1)
    """
    PMSwitching: Failsafe_OutputType = ...
    PPSwitching: Failsafe_OutputType = ...
    value__ = ...


class Failsafe_ReintegrationAfterChannelFault(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ReintegrationAfterChannelFault

    enum Failsafe_ReintegrationAfterChannelFault, values: Adjustable (0), AllChannelsAutomatically (1), AllChannelsManually (2)
    """
    Adjustable: Failsafe_ReintegrationAfterChannelFault = ...
    AllChannelsAutomatically: Failsafe_ReintegrationAfterChannelFault = ...
    AllChannelsManually: Failsafe_ReintegrationAfterChannelFault = ...
    value__ = ...


class Failsafe_ReintegrationAfterDiscrepancyError(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ReintegrationAfterDiscrepancyError

    enum Failsafe_ReintegrationAfterDiscrepancyError, values: Test0SignalNecessary (1), Test0SignalNotNecessary (0)
    """
    Test0SignalNecessary: Failsafe_ReintegrationAfterDiscrepancyError = ...
    Test0SignalNotNecessary: Failsafe_ReintegrationAfterDiscrepancyError = ...
    value__ = ...


class Failsafe_SensorEvaluation(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_SensorEvaluation

    enum Failsafe_SensorEvaluation, values: Value1oo1Evaluation (0), Value1oo2Evaluation2Channel3WireNonEquivalent (3), Value1oo2Evaluation2Channel4WireNonEquivalent (4), Value1oo2EvaluationEquivalent (1), Value1oo2EvaluationNonEquivalent (2)
    """
    Value1oo1Evaluation: Failsafe_SensorEvaluation = ...
    Value1oo2Evaluation2Channel3WireNonEquivalent: Failsafe_SensorEvaluation = ...
    Value1oo2Evaluation2Channel4WireNonEquivalent: Failsafe_SensorEvaluation = ...
    Value1oo2EvaluationEquivalent: Failsafe_SensorEvaluation = ...
    Value1oo2EvaluationNonEquivalent: Failsafe_SensorEvaluation = ...
    value__ = ...


class Failsafe_SensorSupply(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_SensorSupply

    enum Failsafe_SensorSupply, values: External (9), ExternalSensorSupply (8), Internal (10), SensorSupply0 (0), SensorSupply1 (1), SensorSupply2 (2), SensorSupply3 (3), SensorSupply4 (4), SensorSupply5 (5), SensorSupply6 (6), SensorSupply7 (7)
    """
    External: Failsafe_SensorSupply = ...
    ExternalSensorSupply: Failsafe_SensorSupply = ...
    Internal: Failsafe_SensorSupply = ...
    SensorSupply0: Failsafe_SensorSupply = ...
    SensorSupply1: Failsafe_SensorSupply = ...
    SensorSupply2: Failsafe_SensorSupply = ...
    SensorSupply3: Failsafe_SensorSupply = ...
    SensorSupply4: Failsafe_SensorSupply = ...
    SensorSupply5: Failsafe_SensorSupply = ...
    SensorSupply6: Failsafe_SensorSupply = ...
    SensorSupply7: Failsafe_SensorSupply = ...
    value__ = ...


class Failsafe_SequenceMonitoring(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_SequenceMonitoring

    enum Failsafe_SequenceMonitoring, values: Deactivated (0), SequenceMonitoringAscending (1), SequenceMonitoringDescending (2)
    """
    Deactivated: Failsafe_SequenceMonitoring = ...
    SequenceMonitoringAscending: Failsafe_SequenceMonitoring = ...
    SequenceMonitoringDescending: Failsafe_SequenceMonitoring = ...
    value__ = ...


class Failsafe_ShortCircuitDiagnosticActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ShortCircuitDiagnosticActive

    enum Failsafe_ShortCircuitDiagnosticActive, values: Disable (0), Enable (1)
    """
    Disable: Failsafe_ShortCircuitDiagnosticActive = ...
    Enable: Failsafe_ShortCircuitDiagnosticActive = ...
    value__ = ...


class Failsafe_ShortCircuitTestDuration(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ShortCircuitTestDuration

    enum Failsafe_ShortCircuitTestDuration, values: Value0 (0), Value12Dot8 (9), Value1Dot6 (5), Value3Dot2 (6), Value6Dot4 (7)
    """
    Value0: Failsafe_ShortCircuitTestDuration = ...
    Value12Dot8: Failsafe_ShortCircuitTestDuration = ...
    Value1Dot6: Failsafe_ShortCircuitTestDuration = ...
    Value3Dot2: Failsafe_ShortCircuitTestDuration = ...
    Value6Dot4: Failsafe_ShortCircuitTestDuration = ...
    value__ = ...


class Failsafe_ShortCircuitTestInterval(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ShortCircuitTestInterval

    enum Failsafe_ShortCircuitTestInterval, values: Value0 (0), Value102Dot4 (13), Value12Dot8 (9), Value204Dot8 (14), Value25Dot6 (11), Value409Dot6 (15), Value51Dot2 (12), Value819Dot2 (16)
    """
    Value0: Failsafe_ShortCircuitTestInterval = ...
    Value102Dot4: Failsafe_ShortCircuitTestInterval = ...
    Value12Dot8: Failsafe_ShortCircuitTestInterval = ...
    Value204Dot8: Failsafe_ShortCircuitTestInterval = ...
    Value25Dot6: Failsafe_ShortCircuitTestInterval = ...
    Value409Dot6: Failsafe_ShortCircuitTestInterval = ...
    Value51Dot2: Failsafe_ShortCircuitTestInterval = ...
    Value819Dot2: Failsafe_ShortCircuitTestInterval = ...
    value__ = ...


class Failsafe_ShortCircuitTest_0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ShortCircuitTest_0

    enum Failsafe_ShortCircuitTest_0, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_ShortCircuitTest_0 = ...
    Deactivated: Failsafe_ShortCircuitTest_0 = ...
    value__ = ...


class Failsafe_ShortCircuitTest_1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ShortCircuitTest_1

    enum Failsafe_ShortCircuitTest_1, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_ShortCircuitTest_1 = ...
    Deactivated: Failsafe_ShortCircuitTest_1 = ...
    value__ = ...


class Failsafe_ShortCircuitTest_2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ShortCircuitTest_2

    enum Failsafe_ShortCircuitTest_2, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_ShortCircuitTest_2 = ...
    Deactivated: Failsafe_ShortCircuitTest_2 = ...
    value__ = ...


class Failsafe_ShortCircuitTest_3(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ShortCircuitTest_3

    enum Failsafe_ShortCircuitTest_3, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_ShortCircuitTest_3 = ...
    Deactivated: Failsafe_ShortCircuitTest_3 = ...
    value__ = ...


class Failsafe_ShortCircuitTest_4(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ShortCircuitTest_4

    enum Failsafe_ShortCircuitTest_4, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_ShortCircuitTest_4 = ...
    Deactivated: Failsafe_ShortCircuitTest_4 = ...
    value__ = ...


class Failsafe_ShortCircuitTest_5(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ShortCircuitTest_5

    enum Failsafe_ShortCircuitTest_5, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_ShortCircuitTest_5 = ...
    Deactivated: Failsafe_ShortCircuitTest_5 = ...
    value__ = ...


class Failsafe_ShortCircuitTest_6(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ShortCircuitTest_6

    enum Failsafe_ShortCircuitTest_6, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_ShortCircuitTest_6 = ...
    Deactivated: Failsafe_ShortCircuitTest_6 = ...
    value__ = ...


class Failsafe_ShortCircuitTest_7(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_ShortCircuitTest_7

    enum Failsafe_ShortCircuitTest_7, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_ShortCircuitTest_7 = ...
    Deactivated: Failsafe_ShortCircuitTest_7 = ...
    value__ = ...


class Failsafe_Smoothing(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_Smoothing

    enum Failsafe_Smoothing, values: Value16x (4), Value1x (0), Value2x (1), Value32x (5), Value4x (2), Value64x (6), Value8x (3)
    """
    Value16x: Failsafe_Smoothing = ...
    Value1x: Failsafe_Smoothing = ...
    Value2x: Failsafe_Smoothing = ...
    Value32x: Failsafe_Smoothing = ...
    Value4x: Failsafe_Smoothing = ...
    Value64x: Failsafe_Smoothing = ...
    Value8x: Failsafe_Smoothing = ...
    value__ = ...


class Failsafe_StartupTest(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_StartupTest

    enum Failsafe_StartupTest, values: Active (1), Deactivated (0)
    """
    Active: Failsafe_StartupTest = ...
    Deactivated: Failsafe_StartupTest = ...
    value__ = ...


class Failsafe_UnitValue(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Failsafe_UnitValue

    enum Failsafe_UnitValue, values: Max (1), Min (0)
    """
    Max: Failsafe_UnitValue = ...
    Min: Failsafe_UnitValue = ...
    value__ = ...


class FeedbackValue(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property FeedbackValue

    enum FeedbackValue, values: AbsolutePosition (1), RemainingDistance (0), Speed (2)
    """
    AbsolutePosition: FeedbackValue = ...
    RemainingDistance: FeedbackValue = ...
    Speed: FeedbackValue = ...
    value__ = ...


class FilterFrequency(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property FilterFrequency

    enum FilterFrequency, values: Value100Hz (0), Value100kHz (9), Value10kHz (6), Value1kHz (3), Value1MHz (12), Value200Hz (1), Value200kHz (10), Value20kHz (7), Value2kHz (4), Value500Hz (2), Value500kHz (11), Value50kHz (8), Value5kHz (5)
    """
    Value100Hz: FilterFrequency = ...
    Value100kHz: FilterFrequency = ...
    Value10kHz: FilterFrequency = ...
    Value1kHz: FilterFrequency = ...
    Value1MHz: FilterFrequency = ...
    Value200Hz: FilterFrequency = ...
    Value200kHz: FilterFrequency = ...
    Value20kHz: FilterFrequency = ...
    Value2kHz: FilterFrequency = ...
    Value500Hz: FilterFrequency = ...
    Value500kHz: FilterFrequency = ...
    Value50kHz: FilterFrequency = ...
    Value5kHz: FilterFrequency = ...
    value__ = ...


class FloatingMeanValueFilterActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property FloatingMeanValueFilterActive

    enum FloatingMeanValueFilterActive, values: Active (0), Deactivated (1)
    """
    Active: FloatingMeanValueFilterActive = ...
    Deactivated: FloatingMeanValueFilterActive = ...
    value__ = ...


class ForcedValues(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ForcedValues

    enum ForcedValues, values: Activate (1), Deactivate (0)
    """
    Activate: ForcedValues = ...
    Deactivate: ForcedValues = ...
    value__ = ...


class ForceTableAccessRule(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Represents a ForceTableAccessRule object """
    @property
    def Access(self) -> WatchAndForceTableAccess:
        """
        Represents webserver access

        Get: Access(self: ForceTableAccessRule) -> WatchAndForceTableAccess

        Set: Access(self: ForceTableAccessRule) = value
        """
        ...

    @property
    def ForceTable(self) -> PlcForceTable:
        """
        Represents Plc Force table

        Get: ForceTable(self: ForceTableAccessRule) -> PlcForceTable
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: ForceTableAccessRule) -> IEngineeringObject
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: ForceTableAccessRule)

            Deletes this instance.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: ForceTableAccessRule) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: ForceTableAccessRule) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class ForceTableAccessRuleComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of ForceTableAccessRule """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: ForceTableAccessRuleComposition) -> IEngineeringObject
        """
        ...


    def Find(self, forceTable:PlcForceTable) -> ForceTableAccessRule:
        """
        Find(self: ForceTableAccessRuleComposition, forceTable: PlcForceTable) -> ForceTableAccessRule

            Finds a given ForceTableAccessRule by ForceTable

            forceTable: Represents Plc Force table

            Returns: Siemens.Engineering.HW.ForceTableAccessRule
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: ForceTableAccessRuleComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: ForceTableAccessRuleComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[ForceTableAccessRule](enumerable: IEnumerable[ForceTableAccessRule], value: ForceTableAccessRule) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class FrequencyForCapture(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property FrequencyForCapture

    enum FrequencyForCapture, values: Once (0), Periodic (1)
    """
    Once: FrequencyForCapture = ...
    Periodic: FrequencyForCapture = ...
    value__ = ...


class FunctionDI(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property FunctionDI

    enum FunctionDI, values: Capture (5), DigitalInputWithoutFunction (6), GateStartEdgeTriggered (1), GateStartOrStopLevelTriggered (0), GateStopEdgeTriggered (2), Synchronization (3)
    """
    Capture: FunctionDI = ...
    DigitalInputWithoutFunction: FunctionDI = ...
    GateStartEdgeTriggered: FunctionDI = ...
    GateStartOrStopLevelTriggered: FunctionDI = ...
    GateStopEdgeTriggered: FunctionDI = ...
    Synchronization: FunctionDI = ...
    value__ = ...


class FunctionDI0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property FunctionDI0

    enum FunctionDI0, values: Capture (5), DigitalInputWithoutFunction (6), GateStartEdgeTriggered (1), GateStartOrStopLevelTriggered (0), GateStopEdgeTriggered (2), Synchronization (3)
    """
    Capture: FunctionDI0 = ...
    DigitalInputWithoutFunction: FunctionDI0 = ...
    GateStartEdgeTriggered: FunctionDI0 = ...
    GateStartOrStopLevelTriggered: FunctionDI0 = ...
    GateStopEdgeTriggered: FunctionDI0 = ...
    Synchronization: FunctionDI0 = ...
    value__ = ...


class FunctionDI1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property FunctionDI1

    enum FunctionDI1, values: Capture (5), DigitalInputWithoutFunction (6), GateStartEdgeTriggered (1), GateStartOrStopLevelTriggered (0), GateStopEdgeTriggered (2), Synchronization (3)
    """
    Capture: FunctionDI1 = ...
    DigitalInputWithoutFunction: FunctionDI1 = ...
    GateStartEdgeTriggered: FunctionDI1 = ...
    GateStartOrStopLevelTriggered: FunctionDI1 = ...
    GateStopEdgeTriggered: FunctionDI1 = ...
    Synchronization: FunctionDI1 = ...
    value__ = ...


class FunctionDI2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property FunctionDI2

    enum FunctionDI2, values: Capture (5), DigitalInputWithoutFunction (6), GateStartEdgeTriggered (1), GateStartOrStopLevelTriggered (0), GateStopEdgeTriggered (2), Synchronization (3)
    """
    Capture: FunctionDI2 = ...
    DigitalInputWithoutFunction: FunctionDI2 = ...
    GateStartEdgeTriggered: FunctionDI2 = ...
    GateStartOrStopLevelTriggered: FunctionDI2 = ...
    GateStopEdgeTriggered: FunctionDI2 = ...
    Synchronization: FunctionDI2 = ...
    value__ = ...


class FunctionInputS1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property FunctionInputS1

    enum FunctionInputS1, values: LimitSwitch (1), LimitSwitchPlus (2), None (0), ReferenceSwitch (3)
    """
    LimitSwitch: FunctionInputS1 = ...
    LimitSwitchPlus: FunctionInputS1 = ...
    ReferenceSwitch: FunctionInputS1 = ...
    value__ = ...


class FunctionInputS2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property FunctionInputS2

    enum FunctionInputS2, values: LimitSwitch (1), LimitSwitchPlus (2), None (0), ReferenceSwitch (3)
    """
    LimitSwitch: FunctionInputS2 = ...
    LimitSwitchPlus: FunctionInputS2 = ...
    ReferenceSwitch: FunctionInputS2 = ...
    value__ = ...


class FunctionInputS3(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property FunctionInputS3

    enum FunctionInputS3, values: LimitSwitch (1), LimitSwitchPlus (2), None (0), ReferenceSwitch (3)
    """
    LimitSwitch: FunctionInputS3 = ...
    LimitSwitchPlus: FunctionInputS3 = ...
    ReferenceSwitch: FunctionInputS3 = ...
    value__ = ...


class GateControlActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property GateControlActive

    enum GateControlActive, values: Active (1), Deactivated (0)
    """
    Active: GateControlActive = ...
    Deactivated: GateControlActive = ...
    value__ = ...


class GenerateDeviceNamesAutomatically(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property GenerateDeviceNamesAutomatically

    enum GenerateDeviceNamesAutomatically, values: Automatic (1), Manual (0)
    """
    Automatic: GenerateDeviceNamesAutomatically = ...
    Manual: GenerateDeviceNamesAutomatically = ...
    value__ = ...


class HardwareInterrupt(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property HardwareInterrupt

    enum HardwareInterrupt, values: Active (1), Deactivated (0)
    """
    Active: HardwareInterrupt = ...
    Deactivated: HardwareInterrupt = ...
    value__ = ...


class HardwareInterruptActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property HardwareInterruptActive

    enum HardwareInterruptActive, values: PseudoActive (1), PseudoDeactivated (0)
    """
    PseudoActive: HardwareInterruptActive = ...
    PseudoDeactivated: HardwareInterruptActive = ...
    value__ = ...


class HardwareInterruptFallingEdgeActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property HardwareInterruptFallingEdgeActive

    enum HardwareInterruptFallingEdgeActive, values: Active (1), Deactivated (0)
    """
    Active: HardwareInterruptFallingEdgeActive = ...
    Deactivated: HardwareInterruptFallingEdgeActive = ...
    value__ = ...


class HardwareInterruptRisingEdgeActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property HardwareInterruptRisingEdgeActive

    enum HardwareInterruptRisingEdgeActive, values: Active (1), Deactivated (0)
    """
    Active: HardwareInterruptRisingEdgeActive = ...
    Deactivated: HardwareInterruptRisingEdgeActive = ...
    value__ = ...


class HardwareResource(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Hardware Resources that are assignable for interfaces

    enum HardwareResource, values: Undefined (0), X1 (1), X101 (101), X102 (102), X103 (103), X104 (104), X105 (105), X106 (106), X107 (107), X108 (108), X109 (109), X110 (110), X111 (111), X2 (2), X3 (3), X4 (4)
    """
    Undefined: HardwareResource = ...
    value__ = ...
    X1: HardwareResource = ...
    X101: HardwareResource = ...
    X102: HardwareResource = ...
    X103: HardwareResource = ...
    X104: HardwareResource = ...
    X105: HardwareResource = ...
    X106: HardwareResource = ...
    X107: HardwareResource = ...
    X108: HardwareResource = ...
    X109: HardwareResource = ...
    X110: HardwareResource = ...
    X111: HardwareResource = ...
    X2: HardwareResource = ...
    X3: HardwareResource = ...
    X4: HardwareResource = ...


class HighErrorLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property HighErrorLimit

    enum HighErrorLimit, values: Activated (1), Deactivated (0)
    """
    Activated: HighErrorLimit = ...
    Deactivated: HighErrorLimit = ...
    value__ = ...


class HighLimitCurrent(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property HighLimitCurrent

    enum HighLimitCurrent, values: None (0), Value100Dot00 (32), Value103Dot13 (33), Value106Dot25 (34), Value109Dot38 (35), Value112Dot50 (36), Value115Dot63 (37), Value118Dot75 (38), Value121Dot88 (39), Value125Dot00 (40), Value128Dot13 (41), Value131Dot25 (42), Value134Dot38 (43), Value137Dot50 (44), Value140Dot63 (45), Value143Dot75 (46), Value146Dot88 (47), Value150Dot00 (48), Value153Dot13 (49), Value156Dot25 (50), Value159Dot38 (51), Value162Dot50 (52), Value165Dot63 (53), Value168Dot75 (54), Value171Dot88 (55), Value175Dot00 (56), Value178Dot13 (57), Value181Dot25 (58), Value184Dot38 (59), Value187Dot50 (60), Value190Dot63 (61), Value193Dot75 (62), Value196Dot88 (63), Value200Dot00 (64), Value203Dot13 (65), Value206Dot25 (66), Value209Dot38 (67), Value212Dot50 (68), Value215Dot63 (69), Value218Dot75 (70), Value221Dot88 (71), Value225Dot00 (72), Value228Dot13 (73), Value231Dot25 (74), Value234Dot38 (75), Value237Dot50 (76), Value240Dot63 (77), Value243Dot75 (78), Value246Dot88 (79), Value250Dot00 (80), Value253Dot13 (81), Value256Dot25 (82), Value259Dot38 (83), Value262Dot50 (84), Value265Dot63 (85), Value268Dot75 (86), Value271Dot88 (87), Value275Dot00 (88), Value278Dot13 (89), Value281Dot25 (90), Value284Dot38 (91), Value287Dot50 (92), Value290Dot63 (93), Value293Dot75 (94), Value296Dot88 (95), Value300Dot00 (96), Value303Dot13 (97), Value306Dot25 (98), Value309Dot38 (99), Value312Dot50 (100), Value315Dot63 (101), Value318Dot75 (102), Value321Dot88 (103), Value325Dot00 (104), Value328Dot13 (105), Value331Dot25 (106), Value334Dot38 (107), Value337Dot50 (108), Value340Dot63 (109), Value343Dot75 (110), Value346Dot88 (111), Value350Dot00 (112), Value353Dot13 (113), Value356Dot25 (114), Value359Dot38 (115), Value362Dot50 (116), Value365Dot63 (117), Value368Dot75 (118), Value371Dot88 (119), Value375Dot00 (120), Value378Dot13 (121), Value381Dot25 (122), Value384Dot38 (123), Value387Dot50 (124), Value390Dot63 (125), Value393Dot75 (126), Value396Dot88 (127), Value400Dot00 (128), Value50Dot00 (16), Value53Dot13 (17), Value56Dot25 (18), Value59Dot38 (19), Value62Dot50 (20), Value65Dot63 (21), Value68Dot75 (22), Value71Dot88 (23), Value75Dot00 (24), Value78Dot13 (25), Value81Dot25 (26), Value84Dot38 (27), Value87Dot50 (28), Value90Dot63 (29), Value93Dot75 (30), Value96Dot88 (31)
    """
    Value100Dot00: HighLimitCurrent = ...
    Value103Dot13: HighLimitCurrent = ...
    Value106Dot25: HighLimitCurrent = ...
    Value109Dot38: HighLimitCurrent = ...
    Value112Dot50: HighLimitCurrent = ...
    Value115Dot63: HighLimitCurrent = ...
    Value118Dot75: HighLimitCurrent = ...
    Value121Dot88: HighLimitCurrent = ...
    Value125Dot00: HighLimitCurrent = ...
    Value128Dot13: HighLimitCurrent = ...
    Value131Dot25: HighLimitCurrent = ...
    Value134Dot38: HighLimitCurrent = ...
    Value137Dot50: HighLimitCurrent = ...
    Value140Dot63: HighLimitCurrent = ...
    Value143Dot75: HighLimitCurrent = ...
    Value146Dot88: HighLimitCurrent = ...
    Value150Dot00: HighLimitCurrent = ...
    Value153Dot13: HighLimitCurrent = ...
    Value156Dot25: HighLimitCurrent = ...
    Value159Dot38: HighLimitCurrent = ...
    Value162Dot50: HighLimitCurrent = ...
    Value165Dot63: HighLimitCurrent = ...
    Value168Dot75: HighLimitCurrent = ...
    Value171Dot88: HighLimitCurrent = ...
    Value175Dot00: HighLimitCurrent = ...
    Value178Dot13: HighLimitCurrent = ...
    Value181Dot25: HighLimitCurrent = ...
    Value184Dot38: HighLimitCurrent = ...
    Value187Dot50: HighLimitCurrent = ...
    Value190Dot63: HighLimitCurrent = ...
    Value193Dot75: HighLimitCurrent = ...
    Value196Dot88: HighLimitCurrent = ...
    Value200Dot00: HighLimitCurrent = ...
    Value203Dot13: HighLimitCurrent = ...
    Value206Dot25: HighLimitCurrent = ...
    Value209Dot38: HighLimitCurrent = ...
    Value212Dot50: HighLimitCurrent = ...
    Value215Dot63: HighLimitCurrent = ...
    Value218Dot75: HighLimitCurrent = ...
    Value221Dot88: HighLimitCurrent = ...
    Value225Dot00: HighLimitCurrent = ...
    Value228Dot13: HighLimitCurrent = ...
    Value231Dot25: HighLimitCurrent = ...
    Value234Dot38: HighLimitCurrent = ...
    Value237Dot50: HighLimitCurrent = ...
    Value240Dot63: HighLimitCurrent = ...
    Value243Dot75: HighLimitCurrent = ...
    Value246Dot88: HighLimitCurrent = ...
    Value250Dot00: HighLimitCurrent = ...
    Value253Dot13: HighLimitCurrent = ...
    Value256Dot25: HighLimitCurrent = ...
    Value259Dot38: HighLimitCurrent = ...
    Value262Dot50: HighLimitCurrent = ...
    Value265Dot63: HighLimitCurrent = ...
    Value268Dot75: HighLimitCurrent = ...
    Value271Dot88: HighLimitCurrent = ...
    Value275Dot00: HighLimitCurrent = ...
    Value278Dot13: HighLimitCurrent = ...
    Value281Dot25: HighLimitCurrent = ...
    Value284Dot38: HighLimitCurrent = ...
    Value287Dot50: HighLimitCurrent = ...
    Value290Dot63: HighLimitCurrent = ...
    Value293Dot75: HighLimitCurrent = ...
    Value296Dot88: HighLimitCurrent = ...
    Value300Dot00: HighLimitCurrent = ...
    Value303Dot13: HighLimitCurrent = ...
    Value306Dot25: HighLimitCurrent = ...
    Value309Dot38: HighLimitCurrent = ...
    Value312Dot50: HighLimitCurrent = ...
    Value315Dot63: HighLimitCurrent = ...
    Value318Dot75: HighLimitCurrent = ...
    Value321Dot88: HighLimitCurrent = ...
    Value325Dot00: HighLimitCurrent = ...
    Value328Dot13: HighLimitCurrent = ...
    Value331Dot25: HighLimitCurrent = ...
    Value334Dot38: HighLimitCurrent = ...
    Value337Dot50: HighLimitCurrent = ...
    Value340Dot63: HighLimitCurrent = ...
    Value343Dot75: HighLimitCurrent = ...
    Value346Dot88: HighLimitCurrent = ...
    Value350Dot00: HighLimitCurrent = ...
    Value353Dot13: HighLimitCurrent = ...
    Value356Dot25: HighLimitCurrent = ...
    Value359Dot38: HighLimitCurrent = ...
    Value362Dot50: HighLimitCurrent = ...
    Value365Dot63: HighLimitCurrent = ...
    Value368Dot75: HighLimitCurrent = ...
    Value371Dot88: HighLimitCurrent = ...
    Value375Dot00: HighLimitCurrent = ...
    Value378Dot13: HighLimitCurrent = ...
    Value381Dot25: HighLimitCurrent = ...
    Value384Dot38: HighLimitCurrent = ...
    Value387Dot50: HighLimitCurrent = ...
    Value390Dot63: HighLimitCurrent = ...
    Value393Dot75: HighLimitCurrent = ...
    Value396Dot88: HighLimitCurrent = ...
    Value400Dot00: HighLimitCurrent = ...
    Value50Dot00: HighLimitCurrent = ...
    Value53Dot13: HighLimitCurrent = ...
    Value56Dot25: HighLimitCurrent = ...
    Value59Dot38: HighLimitCurrent = ...
    Value62Dot50: HighLimitCurrent = ...
    Value65Dot63: HighLimitCurrent = ...
    Value68Dot75: HighLimitCurrent = ...
    Value71Dot88: HighLimitCurrent = ...
    Value75Dot00: HighLimitCurrent = ...
    Value78Dot13: HighLimitCurrent = ...
    Value81Dot25: HighLimitCurrent = ...
    Value84Dot38: HighLimitCurrent = ...
    Value87Dot50: HighLimitCurrent = ...
    Value90Dot63: HighLimitCurrent = ...
    Value93Dot75: HighLimitCurrent = ...
    Value96Dot88: HighLimitCurrent = ...
    value__ = ...


class HighWarningLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property HighWarningLimit

    enum HighWarningLimit, values: Activated (1), Deactivated (0)
    """
    Activated: HighWarningLimit = ...
    Deactivated: HighWarningLimit = ...
    value__ = ...


class HscDI0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property HscDI0

    enum HscDI0, values: None (0), X11Clamp1 (1), X11Clamp11 (11), X11Clamp12 (12), X11Clamp13 (13), X11Clamp14 (14), X11Clamp15 (15), X11Clamp16 (16), X11Clamp17 (17), X11Clamp18 (18), X11Clamp2 (2), X11Clamp3 (3), X11Clamp4 (4), X11Clamp5 (5), X11Clamp6 (6), X11Clamp7 (7), X11Clamp8 (8), X12Clamp1 (19), X12Clamp11 (29), X12Clamp12 (30), X12Clamp13 (31), X12Clamp14 (32), X12Clamp15 (33), X12Clamp16 (34), X12Clamp17 (35), X12Clamp18 (36), X12Clamp2 (20), X12Clamp3 (21), X12Clamp4 (22), X12Clamp5 (23), X12Clamp6 (24), X12Clamp7 (25), X12Clamp8 (26)
    """
    value__ = ...
    X11Clamp1: HscDI0 = ...
    X11Clamp11: HscDI0 = ...
    X11Clamp12: HscDI0 = ...
    X11Clamp13: HscDI0 = ...
    X11Clamp14: HscDI0 = ...
    X11Clamp15: HscDI0 = ...
    X11Clamp16: HscDI0 = ...
    X11Clamp17: HscDI0 = ...
    X11Clamp18: HscDI0 = ...
    X11Clamp2: HscDI0 = ...
    X11Clamp3: HscDI0 = ...
    X11Clamp4: HscDI0 = ...
    X11Clamp5: HscDI0 = ...
    X11Clamp6: HscDI0 = ...
    X11Clamp7: HscDI0 = ...
    X11Clamp8: HscDI0 = ...
    X12Clamp1: HscDI0 = ...
    X12Clamp11: HscDI0 = ...
    X12Clamp12: HscDI0 = ...
    X12Clamp13: HscDI0 = ...
    X12Clamp14: HscDI0 = ...
    X12Clamp15: HscDI0 = ...
    X12Clamp16: HscDI0 = ...
    X12Clamp17: HscDI0 = ...
    X12Clamp18: HscDI0 = ...
    X12Clamp2: HscDI0 = ...
    X12Clamp3: HscDI0 = ...
    X12Clamp4: HscDI0 = ...
    X12Clamp5: HscDI0 = ...
    X12Clamp6: HscDI0 = ...
    X12Clamp7: HscDI0 = ...
    X12Clamp8: HscDI0 = ...


class HscDI1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property HscDI1

    enum HscDI1, values: None (0), X11Clamp1 (1), X11Clamp11 (11), X11Clamp12 (12), X11Clamp13 (13), X11Clamp14 (14), X11Clamp15 (15), X11Clamp16 (16), X11Clamp17 (17), X11Clamp18 (18), X11Clamp2 (2), X11Clamp3 (3), X11Clamp4 (4), X11Clamp5 (5), X11Clamp6 (6), X11Clamp7 (7), X11Clamp8 (8), X12Clamp1 (19), X12Clamp11 (29), X12Clamp12 (30), X12Clamp13 (31), X12Clamp14 (32), X12Clamp15 (33), X12Clamp16 (34), X12Clamp17 (35), X12Clamp18 (36), X12Clamp2 (20), X12Clamp3 (21), X12Clamp4 (22), X12Clamp5 (23), X12Clamp6 (24), X12Clamp7 (25), X12Clamp8 (26)
    """
    value__ = ...
    X11Clamp1: HscDI1 = ...
    X11Clamp11: HscDI1 = ...
    X11Clamp12: HscDI1 = ...
    X11Clamp13: HscDI1 = ...
    X11Clamp14: HscDI1 = ...
    X11Clamp15: HscDI1 = ...
    X11Clamp16: HscDI1 = ...
    X11Clamp17: HscDI1 = ...
    X11Clamp18: HscDI1 = ...
    X11Clamp2: HscDI1 = ...
    X11Clamp3: HscDI1 = ...
    X11Clamp4: HscDI1 = ...
    X11Clamp5: HscDI1 = ...
    X11Clamp6: HscDI1 = ...
    X11Clamp7: HscDI1 = ...
    X11Clamp8: HscDI1 = ...
    X12Clamp1: HscDI1 = ...
    X12Clamp11: HscDI1 = ...
    X12Clamp12: HscDI1 = ...
    X12Clamp13: HscDI1 = ...
    X12Clamp14: HscDI1 = ...
    X12Clamp15: HscDI1 = ...
    X12Clamp16: HscDI1 = ...
    X12Clamp17: HscDI1 = ...
    X12Clamp18: HscDI1 = ...
    X12Clamp2: HscDI1 = ...
    X12Clamp3: HscDI1 = ...
    X12Clamp4: HscDI1 = ...
    X12Clamp5: HscDI1 = ...
    X12Clamp6: HscDI1 = ...
    X12Clamp7: HscDI1 = ...
    X12Clamp8: HscDI1 = ...


class HscDQ1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property HscDQ1

    enum HscDQ1, values: None (0), X11Clamp22 (22), X11Clamp24 (24), X11Clamp25 (25), X11Clamp26 (26), X11Clamp27 (27), X11Clamp28 (28), X11Clamp32 (32), X11Clamp34 (34), X11Clamp35 (35), X11Clamp36 (36), X11Clamp37 (37), X11Clamp38 (38)
    """
    value__ = ...
    X11Clamp22: HscDQ1 = ...
    X11Clamp24: HscDQ1 = ...
    X11Clamp25: HscDQ1 = ...
    X11Clamp26: HscDQ1 = ...
    X11Clamp27: HscDQ1 = ...
    X11Clamp28: HscDQ1 = ...
    X11Clamp32: HscDQ1 = ...
    X11Clamp34: HscDQ1 = ...
    X11Clamp35: HscDQ1 = ...
    X11Clamp36: HscDQ1 = ...
    X11Clamp37: HscDQ1 = ...
    X11Clamp38: HscDQ1 = ...


class HwEnable(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property HwEnable

    enum HwEnable, values: EdgeTriggered (0), LevelTriggered (1)
    """
    EdgeTriggered: HwEnable = ...
    LevelTriggered: HwEnable = ...
    value__ = ...


class HwIdentifier(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Represents a HW identifier """
    @property
    def HwIdentifierControllers(self) -> HwIdentifierControllerAssociation:
        """
        Associated Hw identifier controllers

        Get: HwIdentifierControllers(self: HwIdentifier) -> HwIdentifierControllerAssociation
        """
        ...

    @property
    def Identifier(self) -> Int64:
        """
        Identifier for this HW identifier

        Get: Identifier(self: HwIdentifier) -> Int64
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: HwIdentifier) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: HwIdentifier) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: HwIdentifier) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class HwIdentifierAssociation(IEquatable, IEngineeringAssociation, IInternalAssociationAccess): # skipped bases: <type 'IInternalBaseAccess'>, <type 'IEnumerable'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Associated Hw identifiers """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent..

        Get: Parent(self: HwIdentifierAssociation) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: HwIdentifierAssociation) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: HwIdentifierAssociation) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[HwIdentifier](enumerable: IEnumerable[HwIdentifier], value: HwIdentifier) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class HwIdentifierComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of HwIdentifiers """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: HwIdentifierComposition) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: HwIdentifierComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: HwIdentifierComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[HwIdentifier](enumerable: IEnumerable[HwIdentifier], value: HwIdentifier) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class IdentificationMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property IdentificationMode

    enum IdentificationMode, values: ApplySettingsForBothSidesOfTheCoupler (1), DefineDifferentSettingForTheSidesOfTheCoupler (0)
    """
    ApplySettingsForBothSidesOfTheCoupler: IdentificationMode = ...
    DefineDifferentSettingForTheSidesOfTheCoupler: IdentificationMode = ...
    value__ = ...


class IIRLowPassFilterActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property IIRLowPassFilterActive

    enum IIRLowPassFilterActive, values: Activate (0), Deactivated (1)
    """
    Activate: IIRLowPassFilterActive = ...
    Deactivated: IIRLowPassFilterActive = ...
    value__ = ...


class Input1Action(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Input1Action

    enum Input1Action, values: ColdRun (13), EmergencyStart (7), GroupWarning (5), ManualModeLocal (6), MotorCcw (9), MotorCw (8), NoAction (0), QuickStop (11), TripEndPositionCcw (4), TripEndPositionCw (3), TripReset (12), TripWithoutRestart (1), TripWithRestart (2)
    """
    ColdRun: Input1Action = ...
    EmergencyStart: Input1Action = ...
    GroupWarning: Input1Action = ...
    ManualModeLocal: Input1Action = ...
    MotorCcw: Input1Action = ...
    MotorCw: Input1Action = ...
    NoAction: Input1Action = ...
    QuickStop: Input1Action = ...
    TripEndPositionCcw: Input1Action = ...
    TripEndPositionCw: Input1Action = ...
    TripReset: Input1Action = ...
    TripWithoutRestart: Input1Action = ...
    TripWithRestart: Input1Action = ...
    value__ = ...


class Input1Level(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Input1Level

    enum Input1Level, values: NormallyClosed (0), NormallyOpen (1)
    """
    NormallyClosed: Input1Level = ...
    NormallyOpen: Input1Level = ...
    value__ = ...


class Input1Signal(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Input1Signal

    enum Input1Signal, values: NonRetentive (0), Retentive (1)
    """
    NonRetentive: Input1Signal = ...
    Retentive: Input1Signal = ...
    value__ = ...


class Input2Action(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Input2Action

    enum Input2Action, values: ColdRun (13), EmergencyStart (7), GroupWarning (5), ManualModeLocal (6), MotorCcw (9), MotorCw (8), NoAction (0), QuickStop (11), TripEndPositionCcw (4), TripEndPositionCw (3), TripReset (12), TripWithoutRestart (1), TripWithRestart (2)
    """
    ColdRun: Input2Action = ...
    EmergencyStart: Input2Action = ...
    GroupWarning: Input2Action = ...
    ManualModeLocal: Input2Action = ...
    MotorCcw: Input2Action = ...
    MotorCw: Input2Action = ...
    NoAction: Input2Action = ...
    QuickStop: Input2Action = ...
    TripEndPositionCcw: Input2Action = ...
    TripEndPositionCw: Input2Action = ...
    TripReset: Input2Action = ...
    TripWithoutRestart: Input2Action = ...
    TripWithRestart: Input2Action = ...
    value__ = ...


class Input2Level(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Input2Level

    enum Input2Level, values: NormallyClosed (0), NormallyOpen (1)
    """
    NormallyClosed: Input2Level = ...
    NormallyOpen: Input2Level = ...
    value__ = ...


class Input2Signal(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Input2Signal

    enum Input2Signal, values: NonRetentive (0), Retentive (1)
    """
    NonRetentive: Input2Signal = ...
    Retentive: Input2Signal = ...
    value__ = ...


class Input3Action(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Input3Action

    enum Input3Action, values: ColdRun (13), EmergencyStart (7), GroupWarning (5), ManualModeLocal (6), MotorCcw (9), MotorCw (8), NoAction (0), QuickStop (11), TripEndPositionCcw (4), TripEndPositionCw (3), TripReset (12), TripWithoutRestart (1), TripWithRestart (2)
    """
    ColdRun: Input3Action = ...
    EmergencyStart: Input3Action = ...
    GroupWarning: Input3Action = ...
    ManualModeLocal: Input3Action = ...
    MotorCcw: Input3Action = ...
    MotorCw: Input3Action = ...
    NoAction: Input3Action = ...
    QuickStop: Input3Action = ...
    TripEndPositionCcw: Input3Action = ...
    TripEndPositionCw: Input3Action = ...
    TripReset: Input3Action = ...
    TripWithoutRestart: Input3Action = ...
    TripWithRestart: Input3Action = ...
    value__ = ...


class Input3Level(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Input3Level

    enum Input3Level, values: NormallyClosed (0), NormallyOpen (1)
    """
    NormallyClosed: Input3Level = ...
    NormallyOpen: Input3Level = ...
    value__ = ...


class Input3Signal(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Input3Signal

    enum Input3Signal, values: NonRetentive (0), Retentive (1)
    """
    NonRetentive: Input3Signal = ...
    Retentive: Input3Signal = ...
    value__ = ...


class InputA(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InputA

    enum InputA, values: None (0), X11Clamp1 (1), X11Clamp11 (11), X11Clamp14 (14), X11Clamp17 (17), X11Clamp4 (4), X11Clamp7 (7), X12Clamp1 (19), X12Clamp4 (22), X12Clamp7 (25)
    """
    value__ = ...
    X11Clamp1: InputA = ...
    X11Clamp11: InputA = ...
    X11Clamp14: InputA = ...
    X11Clamp17: InputA = ...
    X11Clamp4: InputA = ...
    X11Clamp7: InputA = ...
    X12Clamp1: InputA = ...
    X12Clamp4: InputA = ...
    X12Clamp7: InputA = ...


class InputB(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InputB

    enum InputB, values: None (0), X11Clamp12 (12), X11Clamp15 (15), X11Clamp18 (18), X11Clamp2 (2), X11Clamp5 (5), X11Clamp8 (8), X12Clamp2 (20), X12Clamp5 (23), X12Clamp8 (26)
    """
    value__ = ...
    X11Clamp12: InputB = ...
    X11Clamp15: InputB = ...
    X11Clamp18: InputB = ...
    X11Clamp2: InputB = ...
    X11Clamp5: InputB = ...
    X11Clamp8: InputB = ...
    X12Clamp2: InputB = ...
    X12Clamp5: InputB = ...
    X12Clamp8: InputB = ...


class InputDelay(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InputDelay

    enum InputDelay, values: Value001Microseconds (33), Value0Dot05ms (0), Value0Dot1ms (1), Value0Dot2ms (16), Value0Dot4ms (3), Value0Dot5ms (2), Value125Microseconds (34), Value12Dot8ms (9), Value1Dot6ms (5), Value20ms (10), Value3Dot2ms (6), Value3ms (12), Value6Dot4ms (7)
    """
    Value001Microseconds: InputDelay = ...
    Value0Dot05ms: InputDelay = ...
    Value0Dot1ms: InputDelay = ...
    Value0Dot2ms: InputDelay = ...
    Value0Dot4ms: InputDelay = ...
    Value0Dot5ms: InputDelay = ...
    Value125Microseconds: InputDelay = ...
    Value12Dot8ms: InputDelay = ...
    Value1Dot6ms: InputDelay = ...
    Value20ms: InputDelay = ...
    Value3Dot2ms: InputDelay = ...
    Value3ms: InputDelay = ...
    Value6Dot4ms: InputDelay = ...
    value__ = ...


class InputDelayDI4(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InputDelayDI4

    enum InputDelayDI4, values: Value0dot05ms (0), Value0dot1ms (1), Value0dot4ms (2), Value0dot8ms (3), Value12dot8ms (6), Value1dot6ms (4), Value20dot0ms (7), Value3dot2ms (5)
    """
    Value0dot05ms: InputDelayDI4 = ...
    Value0dot1ms: InputDelayDI4 = ...
    Value0dot4ms: InputDelayDI4 = ...
    Value0dot8ms: InputDelayDI4 = ...
    Value12dot8ms: InputDelayDI4 = ...
    Value1dot6ms: InputDelayDI4 = ...
    Value20dot0ms: InputDelayDI4 = ...
    Value3dot2ms: InputDelayDI4 = ...
    value__ = ...


class InputDelayDI5(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InputDelayDI5

    enum InputDelayDI5, values: Value0dot05ms (0), Value0dot1ms (1), Value0dot4ms (2), Value0dot8ms (3), Value12dot8ms (6), Value1dot6ms (4), Value20dot0ms (7), Value3dot2ms (5)
    """
    Value0dot05ms: InputDelayDI5 = ...
    Value0dot1ms: InputDelayDI5 = ...
    Value0dot4ms: InputDelayDI5 = ...
    Value0dot8ms: InputDelayDI5 = ...
    Value12dot8ms: InputDelayDI5 = ...
    Value1dot6ms: InputDelayDI5 = ...
    Value20dot0ms: InputDelayDI5 = ...
    Value3dot2ms: InputDelayDI5 = ...
    value__ = ...


class InputDelayDI6(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InputDelayDI6

    enum InputDelayDI6, values: Value0dot05ms (0), Value0dot1ms (1), Value0dot4ms (2), Value0dot8ms (3), Value12dot8ms (6), Value1dot6ms (4), Value20dot0ms (7), Value3dot2ms (5)
    """
    Value0dot05ms: InputDelayDI6 = ...
    Value0dot1ms: InputDelayDI6 = ...
    Value0dot4ms: InputDelayDI6 = ...
    Value0dot8ms: InputDelayDI6 = ...
    Value12dot8ms: InputDelayDI6 = ...
    Value1dot6ms: InputDelayDI6 = ...
    Value20dot0ms: InputDelayDI6 = ...
    Value3dot2ms: InputDelayDI6 = ...
    value__ = ...


class InputDelayDI7(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InputDelayDI7

    enum InputDelayDI7, values: Value0dot05ms (0), Value0dot1ms (1), Value0dot4ms (2), Value0dot8ms (3), Value12dot8ms (6), Value1dot6ms (4), Value20dot0ms (7), Value3dot2ms (5)
    """
    Value0dot05ms: InputDelayDI7 = ...
    Value0dot1ms: InputDelayDI7 = ...
    Value0dot4ms: InputDelayDI7 = ...
    Value0dot8ms: InputDelayDI7 = ...
    Value12dot8ms: InputDelayDI7 = ...
    Value1dot6ms: InputDelayDI7 = ...
    Value20dot0ms: InputDelayDI7 = ...
    Value3dot2ms: InputDelayDI7 = ...
    value__ = ...


class InputDI0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InputDI0

    enum InputDI0, values: NormallyClosedContact (0), NormallyOpenContact (1)
    """
    NormallyClosedContact: InputDI0 = ...
    NormallyOpenContact: InputDI0 = ...
    value__ = ...


class InputDI1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InputDI1

    enum InputDI1, values: NormallyClosedContact (0), NormallyOpenContact (1)
    """
    NormallyClosedContact: InputDI1 = ...
    NormallyOpenContact: InputDI1 = ...
    value__ = ...


class InputN(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InputN

    enum InputN, values: None (0), X11Clamp11 (11), X11Clamp13 (13), X11Clamp16 (16), X11Clamp3 (3), X11Clamp6 (6), X12Clamp11 (29), X12Clamp3 (21), X12Clamp6 (24)
    """
    value__ = ...
    X11Clamp11: InputN = ...
    X11Clamp13: InputN = ...
    X11Clamp16: InputN = ...
    X11Clamp3: InputN = ...
    X11Clamp6: InputN = ...
    X12Clamp11: InputN = ...
    X12Clamp3: InputN = ...
    X12Clamp6: InputN = ...


class InputOrOutputType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InputOrOutputType

    enum InputOrOutputType, values: None (0), Value1 (1), Value16 (16), Value2 (2), Value32 (32), Value8 (8)
    """
    Value1: InputOrOutputType = ...
    Value16: InputOrOutputType = ...
    Value2: InputOrOutputType = ...
    Value32: InputOrOutputType = ...
    Value8: InputOrOutputType = ...
    value__ = ...


class InspectionOrBackupLevel(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InspectionOrBackupLevel

    enum InspectionOrBackupLevel, values: None (0), SameTypeV1Dot0WithoutBackupRestore (1), TypeCompatibleV1Dot1WithBackupRestore (3), TypeCompatibleV1Dot1WithoutBackupRestore (2), TypeCompatibleV1Dot1WithRestore (4)
    """
    SameTypeV1Dot0WithoutBackupRestore: InspectionOrBackupLevel = ...
    TypeCompatibleV1Dot1WithBackupRestore: InspectionOrBackupLevel = ...
    TypeCompatibleV1Dot1WithoutBackupRestore: InspectionOrBackupLevel = ...
    TypeCompatibleV1Dot1WithRestore: InspectionOrBackupLevel = ...
    value__ = ...


class InspectionOrBackupLevelPort1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InspectionOrBackupLevelPort1

    enum InspectionOrBackupLevelPort1, values: None (0), SameTypeV1Dot0WithoutBackupRestore (1), SameTypeV1Dot0WithoutDataBackup (4), TypeCompatibleV1Dot1WithBackupandRestore (5), TypeCompatibleV1Dot1WithBackupRestore3 (6), TypeCompatibleV1Dot1WithoutBackupandRestore (2), TypeCompatibleV1Dot1WithoutDataBackup (8), TypeCompatibleV1Dot1WithRestore (7)
    """
    SameTypeV1Dot0WithoutBackupRestore: InspectionOrBackupLevelPort1 = ...
    SameTypeV1Dot0WithoutDataBackup: InspectionOrBackupLevelPort1 = ...
    TypeCompatibleV1Dot1WithBackupandRestore: InspectionOrBackupLevelPort1 = ...
    TypeCompatibleV1Dot1WithBackupRestore3: InspectionOrBackupLevelPort1 = ...
    TypeCompatibleV1Dot1WithoutBackupandRestore: InspectionOrBackupLevelPort1 = ...
    TypeCompatibleV1Dot1WithoutDataBackup: InspectionOrBackupLevelPort1 = ...
    TypeCompatibleV1Dot1WithRestore: InspectionOrBackupLevelPort1 = ...
    value__ = ...


class InspectionOrBackupLevelPort2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InspectionOrBackupLevelPort2

    enum InspectionOrBackupLevelPort2, values: None (0), SameTypeV1Dot0WithoutBackupRestore (1), SameTypeV1Dot0WithoutDataBackup (4), TypeCompatibleV1Dot1WithBackupandRestore (5), TypeCompatibleV1Dot1WithBackupRestore3 (6), TypeCompatibleV1Dot1WithoutBackupandRestore (2), TypeCompatibleV1Dot1WithoutDataBackup (8), TypeCompatibleV1Dot1WithRestore (7)
    """
    SameTypeV1Dot0WithoutBackupRestore: InspectionOrBackupLevelPort2 = ...
    SameTypeV1Dot0WithoutDataBackup: InspectionOrBackupLevelPort2 = ...
    TypeCompatibleV1Dot1WithBackupandRestore: InspectionOrBackupLevelPort2 = ...
    TypeCompatibleV1Dot1WithBackupRestore3: InspectionOrBackupLevelPort2 = ...
    TypeCompatibleV1Dot1WithoutBackupandRestore: InspectionOrBackupLevelPort2 = ...
    TypeCompatibleV1Dot1WithoutDataBackup: InspectionOrBackupLevelPort2 = ...
    TypeCompatibleV1Dot1WithRestore: InspectionOrBackupLevelPort2 = ...
    value__ = ...


class InspectionOrBackupLevelPort3(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InspectionOrBackupLevelPort3

    enum InspectionOrBackupLevelPort3, values: None (0), SameTypeV1Dot0WithoutBackupRestore (1), SameTypeV1Dot0WithoutDataBackup (4), TypeCompatibleV1Dot1WithBackupandRestore (5), TypeCompatibleV1Dot1WithBackupRestore3 (6), TypeCompatibleV1Dot1WithoutBackupandRestore (2), TypeCompatibleV1Dot1WithoutDataBackup (8), TypeCompatibleV1Dot1WithRestore (7)
    """
    SameTypeV1Dot0WithoutBackupRestore: InspectionOrBackupLevelPort3 = ...
    SameTypeV1Dot0WithoutDataBackup: InspectionOrBackupLevelPort3 = ...
    TypeCompatibleV1Dot1WithBackupandRestore: InspectionOrBackupLevelPort3 = ...
    TypeCompatibleV1Dot1WithBackupRestore3: InspectionOrBackupLevelPort3 = ...
    TypeCompatibleV1Dot1WithoutBackupandRestore: InspectionOrBackupLevelPort3 = ...
    TypeCompatibleV1Dot1WithoutDataBackup: InspectionOrBackupLevelPort3 = ...
    TypeCompatibleV1Dot1WithRestore: InspectionOrBackupLevelPort3 = ...
    value__ = ...


class InspectionOrBackupLevelPort4(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InspectionOrBackupLevelPort4

    enum InspectionOrBackupLevelPort4, values: None (0), SameTypeV1Dot0WithoutBackupRestore (1), SameTypeV1Dot0WithoutDataBackup (4), TypeCompatibleV1Dot1WithBackupandRestore (5), TypeCompatibleV1Dot1WithBackupRestore3 (6), TypeCompatibleV1Dot1WithoutBackupandRestore (2), TypeCompatibleV1Dot1WithoutDataBackup (8), TypeCompatibleV1Dot1WithRestore (7)
    """
    SameTypeV1Dot0WithoutBackupRestore: InspectionOrBackupLevelPort4 = ...
    SameTypeV1Dot0WithoutDataBackup: InspectionOrBackupLevelPort4 = ...
    TypeCompatibleV1Dot1WithBackupandRestore: InspectionOrBackupLevelPort4 = ...
    TypeCompatibleV1Dot1WithBackupRestore3: InspectionOrBackupLevelPort4 = ...
    TypeCompatibleV1Dot1WithoutBackupandRestore: InspectionOrBackupLevelPort4 = ...
    TypeCompatibleV1Dot1WithoutDataBackup: InspectionOrBackupLevelPort4 = ...
    TypeCompatibleV1Dot1WithRestore: InspectionOrBackupLevelPort4 = ...
    value__ = ...


class InterfaceOperatingModes(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InterfaceOperatingModes

    enum (flags) InterfaceOperatingModes, values: IoController (1), IoDevice (2), None (0)
    """
    IoController: InterfaceOperatingModes = ...
    IoDevice: InterfaceOperatingModes = ...
    value__ = ...


class InterfaceStandard(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InterfaceStandard

    enum InterfaceStandard, values: Rs422Symmetrical (0), Ttl5VAsymmetrical (1)
    """
    Rs422Symmetrical: InterfaceStandard = ...
    Ttl5VAsymmetrical: InterfaceStandard = ...
    value__ = ...


class InterfaceType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InterfaceType

    enum InterfaceType, values: Asi (4), Ethernet (3), Link (6), Mpi (2), PcInternal (7), Profibus (1), ProfibusIntegrated (8), ProfidriveIntegrated (10), Ptp (5), Unknown (0), Wan (9)
    """
    Asi: InterfaceType = ...
    Ethernet: InterfaceType = ...
    Link: InterfaceType = ...
    Mpi: InterfaceType = ...
    PcInternal: InterfaceType = ...
    Profibus: InterfaceType = ...
    ProfibusIntegrated: InterfaceType = ...
    ProfidriveIntegrated: InterfaceType = ...
    Ptp: InterfaceType = ...
    Unknown: InterfaceType = ...
    value__ = ...
    Wan: InterfaceType = ...


class InterferenceFrequencySuppression(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InterferenceFrequencySuppression

    enum InterferenceFrequencySuppression, values: None (3), Value10 (4), Value400 (2), Value50 (0), Value60 (1)
    """
    Value10: InterferenceFrequencySuppression = ...
    Value400: InterferenceFrequencySuppression = ...
    Value50: InterferenceFrequencySuppression = ...
    Value60: InterferenceFrequencySuppression = ...
    value__ = ...


class InternalGroundFaultTripResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InternalGroundFaultTripResponse

    enum InternalGroundFaultTripResponse, values: Deactivated (0), Signal (1), Trip (3), Warn (2)
    """
    Deactivated: InternalGroundFaultTripResponse = ...
    Signal: InternalGroundFaultTripResponse = ...
    Trip: InternalGroundFaultTripResponse = ...
    value__ = ...
    Warn: InternalGroundFaultTripResponse = ...


class InternalGroundFaultWarningResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property InternalGroundFaultWarningResponse

    enum InternalGroundFaultWarningResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: InternalGroundFaultWarningResponse = ...
    Signal: InternalGroundFaultWarningResponse = ...
    value__ = ...
    Warn: InternalGroundFaultWarningResponse = ...


class IoConnector(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Represents an IO connector """
    @property
    def ConnectedToIoSystem(self) -> IoSystem:
        """
        The connected IO system

        Get: ConnectedToIoSystem(self: IoConnector) -> IoSystem
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: IoConnector) -> IEngineeringObject
        """
        ...


    def ConnectToIoSystem(self, ioSystem:IoSystem): # ->
        """
        ConnectToIoSystem(self: IoConnector, ioSystem: IoSystem)

            Connects to the IO System

            ioSystem: The IO system to be connected
        """
        ...

    def DisconnectFromIoSystem(self): # ->
        """
        DisconnectFromIoSystem(self: IoConnector)

            Disconnects a device from the given IO system
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: IoConnector) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def GetIoController(self) -> IoController:
        """
        GetIoController(self: IoConnector) -> IoController

            Returns the IO controller for this connector

            Returns: Siemens.Engineering.HW.IoController
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: IoConnector) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class IoConnectorAssociation(IEquatable, IEngineeringAssociation, IInternalAssociationAccess): # skipped bases: <type 'IInternalBaseAccess'>, <type 'IEnumerable'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Associated IO connectors """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent..

        Get: Parent(self: IoConnectorAssociation) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: IoConnectorAssociation) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: IoConnectorAssociation) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[IoConnector](enumerable: IEnumerable[IoConnector], value: IoConnector) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class IoConnectorComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of IoConnectors """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: IoConnectorComposition) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: IoConnectorComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: IoConnectorComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[IoConnector](enumerable: IEnumerable[IoConnector], value: IoConnector) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class IoController(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Represents an IO controller """
    @property
    def Addresses(self) -> AddressComposition:
        """
        Composition of addresses

        Get: Addresses(self: IoController) -> AddressComposition
        """
        ...

    @property
    def IoSystem(self) -> IoSystem:
        """
        Composition of IO system

        Get: IoSystem(self: IoController) -> IoSystem
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: IoController) -> IEngineeringObject
        """
        ...


    def CreateIoSystem(self, name:str) -> IoSystem:
        """
        CreateIoSystem(self: IoController, name: str) -> IoSystem

            Creates an IO system

            name: The name of the IO system to be created

            Returns: Siemens.Engineering.HW.IoSystem
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: IoController) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: IoController) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class IoControllerComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of IoControllers """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: IoControllerComposition) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: IoControllerComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: IoControllerComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[IoController](enumerable: IEnumerable[IoController], value: IoController) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class ISyncDomainParticipant: # skipped bases: <type 'object'>
    """ Repesents objects which can participate in sync domain """
    pass

class IoSystem(IEquatable, ISyncDomainParticipant, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Represents an IO system """
    @property
    def ConnectedIoDevices(self) -> IoConnectorAssociation:
        """
        The connected IO devices

        Get: ConnectedIoDevices(self: IoSystem) -> IoConnectorAssociation
        """
        ...

    @property
    def HwIdentifiers(self) -> HwIdentifierComposition:
        """
        Composition of HW identifiers

        Get: HwIdentifiers(self: IoSystem) -> HwIdentifierComposition
        """
        ...

    @property
    def Name(self) -> str:
        """
        The name of the IO system

        Get: Name(self: IoSystem) -> str

        Set: Name(self: IoSystem) = value
        """
        ...

    @property
    def Number(self) -> int:
        """
        The number of this IO system

        Get: Number(self: IoSystem) -> int

        Set: Number(self: IoSystem) = value
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: IoSystem) -> IEngineeringObject
        """
        ...

    @property
    def Subnet(self) -> Subnet:
        """
        Associated Subnet

        Get: Subnet(self: IoSystem) -> Subnet
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: IoSystem)

            Deletes this instance.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: IoSystem) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: IoSystem) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class IoSystemAssociation(IEquatable, IEngineeringAssociation, IInternalAssociationAccess): # skipped bases: <type 'IInternalBaseAccess'>, <type 'IEnumerable'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Associated IO systems """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent..

        Get: Parent(self: IoSystemAssociation) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: IoSystemAssociation) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: IoSystemAssociation) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[IoSystem](enumerable: IEnumerable[IoSystem], value: IoSystem) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class IpProtocolSelection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    IP protocol selection

    enum IpProtocolSelection, values: Dhcp (1), None (-1), OtherPath (3), Project (0), UserProgram (2), ViaIoController (4)
    """
    Dhcp: IpProtocolSelection = ...
    OtherPath: IpProtocolSelection = ...
    Project: IpProtocolSelection = ...
    UserProgram: IpProtocolSelection = ...
    value__ = ...
    ViaIoController: IpProtocolSelection = ...


class IsochronousTiToCalculationMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property IsochronousTiToCalculationMode

    enum IsochronousTiToCalculationMode, values: AutomaticMinimum (3), FromOB (1), FromSubnet (2), Manual (4), None (0)
    """
    AutomaticMinimum: IsochronousTiToCalculationMode = ...
    FromOB: IsochronousTiToCalculationMode = ...
    FromSubnet: IsochronousTiToCalculationMode = ...
    Manual: IsochronousTiToCalculationMode = ...
    value__ = ...


class ISyncDomainParticipantAssociation(IEquatable, IEngineeringAssociation, IInternalAssociationAccess): # skipped bases: <type 'IInternalBaseAccess'>, <type 'IEnumerable'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Association of SyncDomainParticipant objects """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent..

        Get: Parent(self: ISyncDomainParticipantAssociation) -> IEngineeringObject
        """
        ...


    def Add(self, item:ISyncDomainParticipant): # ->
        """
        Add(self: ISyncDomainParticipantAssociation, item: ISyncDomainParticipant)

            Adds an item.

            item: The item to be added.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: ISyncDomainParticipantAssociation) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: ISyncDomainParticipantAssociation) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __add__(self, *args): #cannot find CLR method
        """ x.__add__(y) <==> x+y """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[ISyncDomainParticipant](enumerable: IEnumerable[ISyncDomainParticipant], value: ISyncDomainParticipant) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class LengthOfIORange(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LengthOfIORange

    enum LengthOfIORange, values: None (0), Value128Byte (128), Value12Byte (12), Value160Byte (160), Value16Byte (16), Value192Byte (192), Value20Byte (20), Value224Byte (224), Value24Byte (24), Value256Byte (256), Value288Byte (288), Value28Byte (28), Value32Byte (32), Value4Byte (4), Value64Byte (64), Value8Byte (8), Value96Byte (96)
    """
    Value128Byte: LengthOfIORange = ...
    Value12Byte: LengthOfIORange = ...
    Value160Byte: LengthOfIORange = ...
    Value16Byte: LengthOfIORange = ...
    Value192Byte: LengthOfIORange = ...
    Value20Byte: LengthOfIORange = ...
    Value224Byte: LengthOfIORange = ...
    Value24Byte: LengthOfIORange = ...
    Value256Byte: LengthOfIORange = ...
    Value288Byte: LengthOfIORange = ...
    Value28Byte: LengthOfIORange = ...
    Value32Byte: LengthOfIORange = ...
    Value4Byte: LengthOfIORange = ...
    Value64Byte: LengthOfIORange = ...
    Value8Byte: LengthOfIORange = ...
    Value96Byte: LengthOfIORange = ...
    value__ = ...


class LevelSelection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LevelSelection

    enum LevelSelection, values: ActivOnHighLevel (1), ActivOnLowLevel (0)
    """
    ActivOnHighLevel: LevelSelection = ...
    ActivOnLowLevel: LevelSelection = ...
    value__ = ...


class LimitMonitor1ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor1ActiveStatus

    enum LimitMonitor1ActiveStatus, values: AlwaysExceptWithTpf (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpf: LimitMonitor1ActiveStatus = ...
    AlwaysOn: LimitMonitor1ActiveStatus = ...
    IfMotorIsRunningExceptTpf: LimitMonitor1ActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: LimitMonitor1ActiveStatus = ...
    value__ = ...


class LimitMonitor1Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor1Type

    enum LimitMonitor1Type, values: Overshoot (0), Undershoot (1)
    """
    Overshoot: LimitMonitor1Type = ...
    Undershoot: LimitMonitor1Type = ...
    value__ = ...


class LimitMonitor2ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor2ActiveStatus

    enum LimitMonitor2ActiveStatus, values: AlwaysExceptWithTpf (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpf: LimitMonitor2ActiveStatus = ...
    AlwaysOn: LimitMonitor2ActiveStatus = ...
    IfMotorIsRunningExceptTpf: LimitMonitor2ActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: LimitMonitor2ActiveStatus = ...
    value__ = ...


class LimitMonitor2Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor2Type

    enum LimitMonitor2Type, values: Overshoot (0), Undershoot (1)
    """
    Overshoot: LimitMonitor2Type = ...
    Undershoot: LimitMonitor2Type = ...
    value__ = ...


class LimitMonitor3ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor3ActiveStatus

    enum LimitMonitor3ActiveStatus, values: AlwaysExceptWithTpf (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpf: LimitMonitor3ActiveStatus = ...
    AlwaysOn: LimitMonitor3ActiveStatus = ...
    IfMotorIsRunningExceptTpf: LimitMonitor3ActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: LimitMonitor3ActiveStatus = ...
    value__ = ...


class LimitMonitor3Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor3Type

    enum LimitMonitor3Type, values: Overshoot (0), Undershoot (1)
    """
    Overshoot: LimitMonitor3Type = ...
    Undershoot: LimitMonitor3Type = ...
    value__ = ...


class LimitMonitor4ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor4ActiveStatus

    enum LimitMonitor4ActiveStatus, values: AlwaysExceptWithTpf (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpf: LimitMonitor4ActiveStatus = ...
    AlwaysOn: LimitMonitor4ActiveStatus = ...
    IfMotorIsRunningExceptTpf: LimitMonitor4ActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: LimitMonitor4ActiveStatus = ...
    value__ = ...


class LimitMonitor4Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor4Type

    enum LimitMonitor4Type, values: Overshoot (0), Undershoot (1)
    """
    Overshoot: LimitMonitor4Type = ...
    Undershoot: LimitMonitor4Type = ...
    value__ = ...


class LimitMonitor5ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor5ActiveStatus

    enum LimitMonitor5ActiveStatus, values: AlwaysExceptWithTpf (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpf: LimitMonitor5ActiveStatus = ...
    AlwaysOn: LimitMonitor5ActiveStatus = ...
    IfMotorIsRunningExceptTpf: LimitMonitor5ActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: LimitMonitor5ActiveStatus = ...
    value__ = ...


class LimitMonitor5Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor5Type

    enum LimitMonitor5Type, values: Overshoot (0), Undershoot (1)
    """
    Overshoot: LimitMonitor5Type = ...
    Undershoot: LimitMonitor5Type = ...
    value__ = ...


class LimitMonitor6ActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor6ActiveStatus

    enum LimitMonitor6ActiveStatus, values: AlwaysExceptWithTpf (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2), IfMotorIsRunningExceptTpfWithStartupOverride (3)
    """
    AlwaysExceptWithTpf: LimitMonitor6ActiveStatus = ...
    AlwaysOn: LimitMonitor6ActiveStatus = ...
    IfMotorIsRunningExceptTpf: LimitMonitor6ActiveStatus = ...
    IfMotorIsRunningExceptTpfWithStartupOverride: LimitMonitor6ActiveStatus = ...
    value__ = ...


class LimitMonitor6Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitor6Type

    enum LimitMonitor6Type, values: Overshoot (0), Undershoot (1)
    """
    Overshoot: LimitMonitor6Type = ...
    Undershoot: LimitMonitor6Type = ...
    value__ = ...


class LimitMonitoringActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitMonitoringActive

    enum LimitMonitoringActive, values: Activate (1), Deactivated (0)
    """
    Activate: LimitMonitoringActive = ...
    Deactivated: LimitMonitoringActive = ...
    value__ = ...


class LimitSwitch(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitSwitch

    enum LimitSwitch, values: NormallyClosedContact (0), NormallyOpenContact (1)
    """
    NormallyClosedContact: LimitSwitch = ...
    NormallyOpenContact: LimitSwitch = ...
    value__ = ...


class LimitValueType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LimitValueType

    enum LimitValueType, values: HighLimit (0), LowLimit (1)
    """
    HighLimit: LimitValueType = ...
    LowLimit: LimitValueType = ...
    value__ = ...


class LineFrequency(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LineFrequency

    enum LineFrequency, values: None (0), Value50Hz (2), Value60Hz (1)
    """
    Value50Hz: LineFrequency = ...
    Value60Hz: LineFrequency = ...
    value__ = ...


class LinkAggregationFrameDistribution(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Set the type of distribution of frames on the individual links of an aggregation

    enum (flags) LinkAggregationFrameDistribution, values: DestinationSourceIPMAC (6), DestinationSourceMAC (3), None (0)
    """
    DestinationSourceIPMAC: LinkAggregationFrameDistribution = ...
    DestinationSourceMAC: LinkAggregationFrameDistribution = ...
    value__ = ...


class LinkAggregationLacpStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    LinkAggregation Lacp Status

    enum (flags) LinkAggregationLacpStatus, values: None (0), Off (2), On (1)
    """
    Off: LinkAggregationLacpStatus = ...
    On: LinkAggregationLacpStatus = ...
    value__ = ...


class LinkAggregationPortState(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    LinkAggregation Port States

    enum (flags) LinkAggregationPortState, values: Active (3), Deactivated (2), None (0), On (5), Passive (4)
    """
    Active: LinkAggregationPortState = ...
    Deactivated: LinkAggregationPortState = ...
    On: LinkAggregationPortState = ...
    Passive: LinkAggregationPortState = ...
    value__ = ...


class LinkAggregationVlanMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Specify how the link aggregation is entered in a VLAN

    enum (flags) LinkAggregationVlanMode, values: Access (1), Hybrid (3), None (0), Trunk (2)
    """
    Access: LinkAggregationVlanMode = ...
    Hybrid: LinkAggregationVlanMode = ...
    Trunk: LinkAggregationVlanMode = ...
    value__ = ...


class LoadType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LoadType

    enum LoadType, values: OnePhaseMotor (1), ThreePhaseMotor (0)
    """
    OnePhaseMotor: LoadType = ...
    ThreePhaseMotor: LoadType = ...
    value__ = ...


class LowerCurrentWarningLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LowerCurrentWarningLimit

    enum LowerCurrentWarningLimit, values: None (0), Value100 (32), Value18Dot75 (6), Value21Dot88 (7), Value25 (8), Value28Dot13 (9), Value31Dot25 (10), Value34Dot38 (11), Value37Dot50 (12), Value40Dot63 (13), Value43Dot75 (14), Value46Dot88 (15), Value50 (16), Value53Dot13 (17), Value56Dot25 (18), Value59Dot38 (19), Value62Dot50 (20), Value65Dot63 (21), Value68Dot75 (22), Value71Dot88 (23), Value75 (24), Value78Dot13 (25), Value81Dot25 (26), Value84Dot38 (27), Value87Dot50 (28), Value90Dot63 (29), Value93Dot75 (30), Value96Dot88 (31)
    """
    Value100: LowerCurrentWarningLimit = ...
    Value18Dot75: LowerCurrentWarningLimit = ...
    Value21Dot88: LowerCurrentWarningLimit = ...
    Value25: LowerCurrentWarningLimit = ...
    Value28Dot13: LowerCurrentWarningLimit = ...
    Value31Dot25: LowerCurrentWarningLimit = ...
    Value34Dot38: LowerCurrentWarningLimit = ...
    Value37Dot50: LowerCurrentWarningLimit = ...
    Value40Dot63: LowerCurrentWarningLimit = ...
    Value43Dot75: LowerCurrentWarningLimit = ...
    Value46Dot88: LowerCurrentWarningLimit = ...
    Value50: LowerCurrentWarningLimit = ...
    Value53Dot13: LowerCurrentWarningLimit = ...
    Value56Dot25: LowerCurrentWarningLimit = ...
    Value59Dot38: LowerCurrentWarningLimit = ...
    Value62Dot50: LowerCurrentWarningLimit = ...
    Value65Dot63: LowerCurrentWarningLimit = ...
    Value68Dot75: LowerCurrentWarningLimit = ...
    Value71Dot88: LowerCurrentWarningLimit = ...
    Value75: LowerCurrentWarningLimit = ...
    Value78Dot13: LowerCurrentWarningLimit = ...
    Value81Dot25: LowerCurrentWarningLimit = ...
    Value84Dot38: LowerCurrentWarningLimit = ...
    Value87Dot50: LowerCurrentWarningLimit = ...
    Value90Dot63: LowerCurrentWarningLimit = ...
    Value93Dot75: LowerCurrentWarningLimit = ...
    Value96Dot88: LowerCurrentWarningLimit = ...
    value__ = ...


class LowErrorLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LowErrorLimit

    enum LowErrorLimit, values: Activated (1), Deactivated (0)
    """
    Activated: LowErrorLimit = ...
    Deactivated: LowErrorLimit = ...
    value__ = ...


class LowLimitCurrent(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LowLimitCurrent

    enum LowLimitCurrent, values: None (0), Value100Dot00 (32), Value18Dot75 (6), Value21Dot88 (7), Value25Dot00 (8), Value28Dot13 (9), Value31Dot25 (10), Value34Dot38 (11), Value37Dot50 (12), Value40Dot63 (13), Value43Dot75 (14), Value46Dot88 (15), Value50Dot00 (16), Value53Dot13 (17), Value56Dot25 (18), Value59Dot38 (19), Value62Dot50 (20), Value65Dot63 (21), Value68Dot75 (22), Value71Dot88 (23), Value75Dot00 (24), Value78Dot13 (25), Value81Dot25 (26), Value84Dot38 (27), Value87Dot50 (28), Value90Dot63 (29), Value93Dot75 (30), Value96Dot88 (31)
    """
    Value100Dot00: LowLimitCurrent = ...
    Value18Dot75: LowLimitCurrent = ...
    Value21Dot88: LowLimitCurrent = ...
    Value25Dot00: LowLimitCurrent = ...
    Value28Dot13: LowLimitCurrent = ...
    Value31Dot25: LowLimitCurrent = ...
    Value34Dot38: LowLimitCurrent = ...
    Value37Dot50: LowLimitCurrent = ...
    Value40Dot63: LowLimitCurrent = ...
    Value43Dot75: LowLimitCurrent = ...
    Value46Dot88: LowLimitCurrent = ...
    Value50Dot00: LowLimitCurrent = ...
    Value53Dot13: LowLimitCurrent = ...
    Value56Dot25: LowLimitCurrent = ...
    Value59Dot38: LowLimitCurrent = ...
    Value62Dot50: LowLimitCurrent = ...
    Value65Dot63: LowLimitCurrent = ...
    Value68Dot75: LowLimitCurrent = ...
    Value71Dot88: LowLimitCurrent = ...
    Value75Dot00: LowLimitCurrent = ...
    Value78Dot13: LowLimitCurrent = ...
    Value81Dot25: LowLimitCurrent = ...
    Value84Dot38: LowLimitCurrent = ...
    Value87Dot50: LowLimitCurrent = ...
    Value90Dot63: LowLimitCurrent = ...
    Value93Dot75: LowLimitCurrent = ...
    Value96Dot88: LowLimitCurrent = ...
    value__ = ...


class LowWarningLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property LowWarningLimit

    enum LowWarningLimit, values: Activated (1), Deactivated (0)
    """
    Activated: LowWarningLimit = ...
    Deactivated: LowWarningLimit = ...
    value__ = ...


class MacRtLicensePurchased(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MacRtLicensePurchased

    enum MacRtLicensePurchased, values: LicenseMacAdvanced (2), LicenseMacBasic (1), NoLicense (0)
    """
    LicenseMacAdvanced: MacRtLicensePurchased = ...
    LicenseMacBasic: MacRtLicensePurchased = ...
    NoLicense: MacRtLicensePurchased = ...
    value__ = ...


class MainCountingDirection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MainCountingDirection

    enum MainCountingDirection, values: Backward (2), Forward (1), None (0)
    """
    Backward: MainCountingDirection = ...
    Forward: MainCountingDirection = ...
    value__ = ...


class MassFlowUnit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MassFlowUnit

    enum MassFlowUnit, values: Default (0), KilogramPerDay (4), KilogramPerHour (3), KilogramPerMinute (2), KilogramPerSecond (1), MetricTonPerDay (8), MetricTonPerHour (7), MetricTonPerMinute (6), MetricTonPerSecond (5), OuncesPerDay (24), OuncesPerHour (23), OuncesPerMinute (22), OuncesPerSecond (21), PoundPerDay (12), PoundPerHour (11), PoundPerMinute (10), PoundPerSecond (9), TonPerDay (16), TonPerHour (15), TonPerMinute (14), TonPerSecond (13), TonUkPerDay (20), TonUkPerHour (19), TonUkPerMinute (18), TonUkPerSecond (17)
    """
    Default: MassFlowUnit = ...
    KilogramPerDay: MassFlowUnit = ...
    KilogramPerHour: MassFlowUnit = ...
    KilogramPerMinute: MassFlowUnit = ...
    KilogramPerSecond: MassFlowUnit = ...
    MetricTonPerDay: MassFlowUnit = ...
    MetricTonPerHour: MassFlowUnit = ...
    MetricTonPerMinute: MassFlowUnit = ...
    MetricTonPerSecond: MassFlowUnit = ...
    OuncesPerDay: MassFlowUnit = ...
    OuncesPerHour: MassFlowUnit = ...
    OuncesPerMinute: MassFlowUnit = ...
    OuncesPerSecond: MassFlowUnit = ...
    PoundPerDay: MassFlowUnit = ...
    PoundPerHour: MassFlowUnit = ...
    PoundPerMinute: MassFlowUnit = ...
    PoundPerSecond: MassFlowUnit = ...
    TonPerDay: MassFlowUnit = ...
    TonPerHour: MassFlowUnit = ...
    TonPerMinute: MassFlowUnit = ...
    TonPerSecond: MassFlowUnit = ...
    TonUkPerDay: MassFlowUnit = ...
    TonUkPerHour: MassFlowUnit = ...
    TonUkPerMinute: MassFlowUnit = ...
    TonUkPerSecond: MassFlowUnit = ...
    value__ = ...


class MassValue(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MassValue

    enum MassValue, values: Af (0), Bbl (1), BblBeer (3), BblUs (2), Bu (4), Cl (5), CubicCm (6), CubicDm (7), CubicFt (9), CubicIn (14), CubicM (21), CubicMiles (24), CubicMm (26), CubicNm (28), CubicSm (35), CubicYd (39), FlOz (8), G (10), Gal (11), GalUk (12), Hl (13), Karat (15), Kg (16), Kl (17), L (18), Lb (19), LbT (20), MegaG (23), Mg (22), Ml (25), Nl (27), Oz (29), OzT (30), Pint (31), Quart (32), Scf (33), Sl (34), T (36), Ton (37), TonUk (38)
    """
    Af: MassValue = ...
    Bbl: MassValue = ...
    BblBeer: MassValue = ...
    BblUs: MassValue = ...
    Bu: MassValue = ...
    Cl: MassValue = ...
    CubicCm: MassValue = ...
    CubicDm: MassValue = ...
    CubicFt: MassValue = ...
    CubicIn: MassValue = ...
    CubicM: MassValue = ...
    CubicMiles: MassValue = ...
    CubicMm: MassValue = ...
    CubicNm: MassValue = ...
    CubicSm: MassValue = ...
    CubicYd: MassValue = ...
    FlOz: MassValue = ...
    G: MassValue = ...
    Gal: MassValue = ...
    GalUk: MassValue = ...
    Hl: MassValue = ...
    Karat: MassValue = ...
    Kg: MassValue = ...
    Kl: MassValue = ...
    L: MassValue = ...
    Lb: MassValue = ...
    LbT: MassValue = ...
    MegaG: MassValue = ...
    Mg: MassValue = ...
    Ml: MassValue = ...
    Nl: MassValue = ...
    Oz: MassValue = ...
    OzT: MassValue = ...
    Pint: MassValue = ...
    Quart: MassValue = ...
    Scf: MassValue = ...
    Sl: MassValue = ...
    T: MassValue = ...
    Ton: MassValue = ...
    TonUk: MassValue = ...
    value__ = ...


class MasterSecretConfiguration(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Name of the Master Secret Protection Types

    enum (flags) MasterSecretConfiguration, values: None (0), WithoutPassword (2), WithPassword (1)
    """
    value__ = ...
    WithoutPassword: MasterSecretConfiguration = ...
    WithPassword: MasterSecretConfiguration = ...


class MaximumBufferedReceivedFrames(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MaximumBufferedReceivedFrames

    enum MaximumBufferedReceivedFrames, values: None (0), StandardFrame1PzdMinus2Or2 (1)
    """
    StandardFrame1PzdMinus2Or2: MaximumBufferedReceivedFrames = ...
    value__ = ...


class MeasuredVariable(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MeasuredVariable

    enum MeasuredVariable, values: CompleteSsiFrame (3), Frequency (0), PeriodDuration (1), Velocity (2)
    """
    CompleteSsiFrame: MeasuredVariable = ...
    Frequency: MeasuredVariable = ...
    PeriodDuration: MeasuredVariable = ...
    value__ = ...
    Velocity: MeasuredVariable = ...


class MeasuringInput(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MeasuringInput

    enum MeasuringInput, values: DI1 (1), None (0), X11Clamp1 (37), X11Clamp11 (11), X11Clamp12 (12), X11Clamp13 (13), X11Clamp14 (14), X11Clamp15 (15), X11Clamp16 (16), X11Clamp17 (17), X11Clamp18 (18), X11Clamp2 (2), X11Clamp3 (3), X11Clamp4 (4), X11Clamp5 (5), X11Clamp6 (6), X11Clamp7 (7), X11Clamp8 (8), X12Clamp1 (19), X12Clamp11 (29), X12Clamp12 (30), X12Clamp13 (31), X12Clamp14 (32), X12Clamp15 (33), X12Clamp16 (34), X12Clamp17 (35), X12Clamp18 (36), X12Clamp2 (20), X12Clamp3 (21), X12Clamp4 (22), X12Clamp5 (23), X12Clamp6 (24), X12Clamp7 (25), X12Clamp8 (26)
    """
    DI1: MeasuringInput = ...
    value__ = ...
    X11Clamp1: MeasuringInput = ...
    X11Clamp11: MeasuringInput = ...
    X11Clamp12: MeasuringInput = ...
    X11Clamp13: MeasuringInput = ...
    X11Clamp14: MeasuringInput = ...
    X11Clamp15: MeasuringInput = ...
    X11Clamp16: MeasuringInput = ...
    X11Clamp17: MeasuringInput = ...
    X11Clamp18: MeasuringInput = ...
    X11Clamp2: MeasuringInput = ...
    X11Clamp3: MeasuringInput = ...
    X11Clamp4: MeasuringInput = ...
    X11Clamp5: MeasuringInput = ...
    X11Clamp6: MeasuringInput = ...
    X11Clamp7: MeasuringInput = ...
    X11Clamp8: MeasuringInput = ...
    X12Clamp1: MeasuringInput = ...
    X12Clamp11: MeasuringInput = ...
    X12Clamp12: MeasuringInput = ...
    X12Clamp13: MeasuringInput = ...
    X12Clamp14: MeasuringInput = ...
    X12Clamp15: MeasuringInput = ...
    X12Clamp16: MeasuringInput = ...
    X12Clamp17: MeasuringInput = ...
    X12Clamp18: MeasuringInput = ...
    X12Clamp2: MeasuringInput = ...
    X12Clamp3: MeasuringInput = ...
    X12Clamp4: MeasuringInput = ...
    X12Clamp5: MeasuringInput = ...
    X12Clamp6: MeasuringInput = ...
    X12Clamp7: MeasuringInput = ...
    X12Clamp8: MeasuringInput = ...


class MeasuringTemperatureCoefficient(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MeasuringTemperatureCoefficient

    enum MeasuringTemperatureCoefficient, values: Cu0Dot00426 (17), Cu0Dot00427 (12), Cu0Dot00428 (13), Deactivated (0), LgNi0Dot005 (10), Ni0Dot005000 (16), Ni0Dot006170 (18), Ni0Dot006180 (7), Ni0Dot006720 (8), Pt0Dot003850 (9), Pt0Dot00385055 (6), Pt0Dot003850Its90 (5), Pt0Dot003851 (4), Pt0Dot003902 (2), Pt0Dot003910 (11), Pt0Dot003916 (1), Pt0Dot003920 (3)
    """
    Cu0Dot00426: MeasuringTemperatureCoefficient = ...
    Cu0Dot00427: MeasuringTemperatureCoefficient = ...
    Cu0Dot00428: MeasuringTemperatureCoefficient = ...
    Deactivated: MeasuringTemperatureCoefficient = ...
    LgNi0Dot005: MeasuringTemperatureCoefficient = ...
    Ni0Dot005000: MeasuringTemperatureCoefficient = ...
    Ni0Dot006170: MeasuringTemperatureCoefficient = ...
    Ni0Dot006180: MeasuringTemperatureCoefficient = ...
    Ni0Dot006720: MeasuringTemperatureCoefficient = ...
    Pt0Dot003850: MeasuringTemperatureCoefficient = ...
    Pt0Dot00385055: MeasuringTemperatureCoefficient = ...
    Pt0Dot003850Its90: MeasuringTemperatureCoefficient = ...
    Pt0Dot003851: MeasuringTemperatureCoefficient = ...
    Pt0Dot003902: MeasuringTemperatureCoefficient = ...
    Pt0Dot003910: MeasuringTemperatureCoefficient = ...
    Pt0Dot003916: MeasuringTemperatureCoefficient = ...
    Pt0Dot003920: MeasuringTemperatureCoefficient = ...
    value__ = ...


class MediaRedundancyRole(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Media Redundancy Role

    enum MediaRedundancyRole, values: Client (2), Manager (1), ManagerAuto (3), NotInRing (0)
    """
    Client: MediaRedundancyRole = ...
    Manager: MediaRedundancyRole = ...
    ManagerAuto: MediaRedundancyRole = ...
    NotInRing: MediaRedundancyRole = ...
    value__ = ...


class MediumAttachmentType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MediumAttachmentType

    enum MediumAttachmentType, values: Copper (1), FiberOptic (2), None (0)
    """
    Copper: MediumAttachmentType = ...
    FiberOptic: MediumAttachmentType = ...
    value__ = ...


class Mode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Mode

    enum Mode, values: PositioningMode (0), TechnologyObject (1)
    """
    PositioningMode: Mode = ...
    TechnologyObject: Mode = ...
    value__ = ...


class ModuleDistribution(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ModuleDistribution

    enum ModuleDistribution, values: None (0), Value4SubmodulesWith1AnalogOutput (1), Value4SubmodulesWith8DigitalInputs4SubmodulesWith8DigitalOutputs (19), Value8SubmodulesWith1AnalogInput (2), Value8SubmodulesWith8DigitalInputs (18)
    """
    Value4SubmodulesWith1AnalogOutput: ModuleDistribution = ...
    Value4SubmodulesWith8DigitalInputs4SubmodulesWith8DigitalOutputs: ModuleDistribution = ...
    Value8SubmodulesWith1AnalogInput: ModuleDistribution = ...
    Value8SubmodulesWith8DigitalInputs: ModuleDistribution = ...
    value__ = ...


class ModuleUseFromUserProgram(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ModuleUseFromUserProgram

    enum ModuleUseFromUserProgram, values: UseWithInstructionFromTimeBasedIoLibrary (0), UseWithTechnologyObjectMotionControl (1)
    """
    UseWithInstructionFromTimeBasedIoLibrary: ModuleUseFromUserProgram = ...
    UseWithTechnologyObjectMotionControl: ModuleUseFromUserProgram = ...
    value__ = ...


class ModuleVariant(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ModuleVariant

    enum ModuleVariant, values: EeIndustryMeasuredDataProfileE0 (3), EeIndustryMeasuredDataProfileE1 (4), EeIndustryMeasuredDataProfileE2 (5), EeIndustryMeasuredDataProfileE3 (6), UserSpecific (2), Value2BytesIOr2BytesO (1), Value32BytesIOr12BytesO (0)
    """
    EeIndustryMeasuredDataProfileE0: ModuleVariant = ...
    EeIndustryMeasuredDataProfileE1: ModuleVariant = ...
    EeIndustryMeasuredDataProfileE2: ModuleVariant = ...
    EeIndustryMeasuredDataProfileE3: ModuleVariant = ...
    UserSpecific: ModuleVariant = ...
    Value2BytesIOr2BytesO: ModuleVariant = ...
    Value32BytesIOr12BytesO: ModuleVariant = ...
    value__ = ...


class ModuloAxis(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ModuloAxis

    enum ModuloAxis, values: Active (1), Deactivated (0)
    """
    Active: ModuloAxis = ...
    Deactivated: ModuloAxis = ...
    value__ = ...


class MonitoringWindow(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MonitoringWindow

    enum MonitoringWindow, values: Value0Dot5 (0), Value1 (1), Value10 (10), Value100 (100), Value11 (11), Value12 (12), Value13 (13), Value14 (14), Value15 (15), Value16 (16), Value17 (17), Value18 (18), Value19 (19), Value2 (2), Value20 (20), Value21 (21), Value22 (22), Value23 (23), Value24 (24), Value25 (25), Value26 (26), Value27 (27), Value28 (28), Value29 (29), Value3 (3), Value30 (30), Value31 (31), Value32 (32), Value33 (33), Value34 (34), Value35 (35), Value36 (36), Value37 (37), Value38 (38), Value39 (39), Value4 (4), Value40 (40), Value41 (41), Value42 (42), Value43 (43), Value44 (44), Value45 (45), Value46 (46), Value47 (47), Value48 (48), Value49 (49), Value5 (5), Value50 (50), Value51 (51), Value52 (52), Value53 (53), Value54 (54), Value55 (55), Value56 (56), Value57 (57), Value58 (58), Value59 (59), Value6 (6), Value60 (60), Value61 (61), Value62 (62), Value63 (63), Value64 (64), Value65 (65), Value66 (66), Value67 (67), Value68 (68), Value69 (69), Value7 (7), Value70 (70), Value71 (71), Value72 (72), Value73 (73), Value74 (74), Value75 (75), Value76 (76), Value77 (77), Value78 (78), Value79 (79), Value8 (8), Value80 (80), Value81 (81), Value82 (82), Value83 (83), Value84 (84), Value85 (85), Value86 (86), Value87 (87), Value88 (88), Value89 (89), Value9 (9), Value90 (90), Value91 (91), Value92 (92), Value93 (93), Value94 (94), Value95 (95), Value96 (96), Value97 (97), Value98 (98), Value99 (99)
    """
    Value0Dot5: MonitoringWindow = ...
    Value1: MonitoringWindow = ...
    Value10: MonitoringWindow = ...
    Value100: MonitoringWindow = ...
    Value11: MonitoringWindow = ...
    Value12: MonitoringWindow = ...
    Value13: MonitoringWindow = ...
    Value14: MonitoringWindow = ...
    Value15: MonitoringWindow = ...
    Value16: MonitoringWindow = ...
    Value17: MonitoringWindow = ...
    Value18: MonitoringWindow = ...
    Value19: MonitoringWindow = ...
    Value2: MonitoringWindow = ...
    Value20: MonitoringWindow = ...
    Value21: MonitoringWindow = ...
    Value22: MonitoringWindow = ...
    Value23: MonitoringWindow = ...
    Value24: MonitoringWindow = ...
    Value25: MonitoringWindow = ...
    Value26: MonitoringWindow = ...
    Value27: MonitoringWindow = ...
    Value28: MonitoringWindow = ...
    Value29: MonitoringWindow = ...
    Value3: MonitoringWindow = ...
    Value30: MonitoringWindow = ...
    Value31: MonitoringWindow = ...
    Value32: MonitoringWindow = ...
    Value33: MonitoringWindow = ...
    Value34: MonitoringWindow = ...
    Value35: MonitoringWindow = ...
    Value36: MonitoringWindow = ...
    Value37: MonitoringWindow = ...
    Value38: MonitoringWindow = ...
    Value39: MonitoringWindow = ...
    Value4: MonitoringWindow = ...
    Value40: MonitoringWindow = ...
    Value41: MonitoringWindow = ...
    Value42: MonitoringWindow = ...
    Value43: MonitoringWindow = ...
    Value44: MonitoringWindow = ...
    Value45: MonitoringWindow = ...
    Value46: MonitoringWindow = ...
    Value47: MonitoringWindow = ...
    Value48: MonitoringWindow = ...
    Value49: MonitoringWindow = ...
    Value5: MonitoringWindow = ...
    Value50: MonitoringWindow = ...
    Value51: MonitoringWindow = ...
    Value52: MonitoringWindow = ...
    Value53: MonitoringWindow = ...
    Value54: MonitoringWindow = ...
    Value55: MonitoringWindow = ...
    Value56: MonitoringWindow = ...
    Value57: MonitoringWindow = ...
    Value58: MonitoringWindow = ...
    Value59: MonitoringWindow = ...
    Value6: MonitoringWindow = ...
    Value60: MonitoringWindow = ...
    Value61: MonitoringWindow = ...
    Value62: MonitoringWindow = ...
    Value63: MonitoringWindow = ...
    Value64: MonitoringWindow = ...
    Value65: MonitoringWindow = ...
    Value66: MonitoringWindow = ...
    Value67: MonitoringWindow = ...
    Value68: MonitoringWindow = ...
    Value69: MonitoringWindow = ...
    Value7: MonitoringWindow = ...
    Value70: MonitoringWindow = ...
    Value71: MonitoringWindow = ...
    Value72: MonitoringWindow = ...
    Value73: MonitoringWindow = ...
    Value74: MonitoringWindow = ...
    Value75: MonitoringWindow = ...
    Value76: MonitoringWindow = ...
    Value77: MonitoringWindow = ...
    Value78: MonitoringWindow = ...
    Value79: MonitoringWindow = ...
    Value8: MonitoringWindow = ...
    Value80: MonitoringWindow = ...
    Value81: MonitoringWindow = ...
    Value82: MonitoringWindow = ...
    Value83: MonitoringWindow = ...
    Value84: MonitoringWindow = ...
    Value85: MonitoringWindow = ...
    Value86: MonitoringWindow = ...
    Value87: MonitoringWindow = ...
    Value88: MonitoringWindow = ...
    Value89: MonitoringWindow = ...
    Value9: MonitoringWindow = ...
    Value90: MonitoringWindow = ...
    Value91: MonitoringWindow = ...
    Value92: MonitoringWindow = ...
    Value93: MonitoringWindow = ...
    Value94: MonitoringWindow = ...
    Value95: MonitoringWindow = ...
    Value96: MonitoringWindow = ...
    Value97: MonitoringWindow = ...
    Value98: MonitoringWindow = ...
    Value99: MonitoringWindow = ...
    value__ = ...


class MonoflopTime(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MonoflopTime

    enum MonoflopTime, values: Value16 (0), Value32 (1), Value48 (2), Value64 (3)
    """
    Value16: MonoflopTime = ...
    Value32: MonoflopTime = ...
    Value48: MonoflopTime = ...
    Value64: MonoflopTime = ...
    value__ = ...


class MotorProtectionClass(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MotorProtectionClass

    enum MotorProtectionClass, values: None (0), Value10 (10), Value15 (15), Value20 (20), Value25 (25), Value30 (30), Value35 (35), Value40 (40), Value5 (5), Value7 (7)
    """
    Value10: MotorProtectionClass = ...
    Value15: MotorProtectionClass = ...
    Value20: MotorProtectionClass = ...
    Value25: MotorProtectionClass = ...
    Value30: MotorProtectionClass = ...
    Value35: MotorProtectionClass = ...
    Value40: MotorProtectionClass = ...
    Value5: MotorProtectionClass = ...
    Value7: MotorProtectionClass = ...
    value__ = ...


class MotorProtectionReset(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MotorProtectionReset

    enum MotorProtectionReset, values: Auto (1), Manual (0)
    """
    Auto: MotorProtectionReset = ...
    Manual: MotorProtectionReset = ...
    value__ = ...


class MotorProtectionResponseToPrewarning(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MotorProtectionResponseToPrewarning

    enum MotorProtectionResponseToPrewarning, values: Deactivated (0), Signal (1), Trip (3), Warn (2)
    """
    Deactivated: MotorProtectionResponseToPrewarning = ...
    Signal: MotorProtectionResponseToPrewarning = ...
    Trip: MotorProtectionResponseToPrewarning = ...
    value__ = ...
    Warn: MotorProtectionResponseToPrewarning = ...


class MotorProtectionResponseToTripLevel(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MotorProtectionResponseToTripLevel

    enum MotorProtectionResponseToTripLevel, values: Deactivated (0), Signal (1), Trip (3), Warn (2)
    """
    Deactivated: MotorProtectionResponseToTripLevel = ...
    Signal: MotorProtectionResponseToTripLevel = ...
    Trip: MotorProtectionResponseToTripLevel = ...
    value__ = ...
    Warn: MotorProtectionResponseToTripLevel = ...


class MotorProtectionStalledRotorResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MotorProtectionStalledRotorResponse

    enum MotorProtectionStalledRotorResponse, values: Deactivated (0), Signal (1), Trip (3), Warn (2)
    """
    Deactivated: MotorProtectionStalledRotorResponse = ...
    Signal: MotorProtectionStalledRotorResponse = ...
    Trip: MotorProtectionStalledRotorResponse = ...
    value__ = ...
    Warn: MotorProtectionStalledRotorResponse = ...


class MotorProtectionTypeOfLoad(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MotorProtectionTypeOfLoad

    enum MotorProtectionTypeOfLoad, values: OnePhase (1), TriPhase (0)
    """
    OnePhase: MotorProtectionTypeOfLoad = ...
    TriPhase: MotorProtectionTypeOfLoad = ...
    value__ = ...


class MotorProtectionUnbalanceResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property MotorProtectionUnbalanceResponse

    enum MotorProtectionUnbalanceResponse, values: Deactivated (0), Signal (1), Trip (3), Warn (2)
    """
    Deactivated: MotorProtectionUnbalanceResponse = ...
    Signal: MotorProtectionUnbalanceResponse = ...
    Trip: MotorProtectionUnbalanceResponse = ...
    value__ = ...
    Warn: MotorProtectionUnbalanceResponse = ...


class MrpDomain(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Media Redundancy Protocol Domain """
    @property
    def DomainParticipants(self) -> NetworkInterfaceAssociation:
        """
        Association of Network Interfaces

        Get: DomainParticipants(self: MrpDomain) -> NetworkInterfaceAssociation
        """
        ...

    @property
    def Name(self) -> str:
        """
        Name of the Mrp Domain

        Get: Name(self: MrpDomain) -> str

        Set: Name(self: MrpDomain) = value
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: MrpDomain) -> IEngineeringObject
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: MrpDomain)

            Deletes this instance.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: MrpDomain) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: MrpDomain) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class MrpDomainComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of Mrp Domains """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: MrpDomainComposition) -> IEngineeringObject
        """
        ...


    def Find(self, name:str) -> MrpDomain:
        """
        Find(self: MrpDomainComposition, name: str) -> MrpDomain

            Finds a given Mrp Domain

            name: Name to find

            Returns: Siemens.Engineering.HW.MrpDomain
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: MrpDomainComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: MrpDomainComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[MrpDomain](enumerable: IEnumerable[MrpDomain], value: MrpDomain) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class NetType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Network type

    enum NetType, values: Asi (4), Ethernet (3), Link (6), Mpi (2), PcInternal (7), Profibus (1), ProfibusIntegrated (8), ProfidriveIntegrated (10), Ptp (5), Unknown (0), Wan (9)
    """
    Asi: NetType = ...
    Ethernet: NetType = ...
    Link: NetType = ...
    Mpi: NetType = ...
    PcInternal: NetType = ...
    Profibus: NetType = ...
    ProfibusIntegrated: NetType = ...
    ProfidriveIntegrated: NetType = ...
    Ptp: NetType = ...
    Unknown: NetType = ...
    value__ = ...
    Wan: NetType = ...


class NeutralConductorCurrentTransformerSecondaryCurrent(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property NeutralConductorCurrentTransformerSecondaryCurrent

    enum NeutralConductorCurrentTransformerSecondaryCurrent, values: None (0), Value1A (1), Value5A (2)
    """
    Value1A: NeutralConductorCurrentTransformerSecondaryCurrent = ...
    Value5A: NeutralConductorCurrentTransformerSecondaryCurrent = ...
    value__ = ...


class Node(IEquatable, IEngineeringObject, IEngineeringServiceProvider, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IServiceProvider'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Node is an object which is used as an interface from DeviceItem to Subnet """
    @property
    def ConnectedSubnet(self) -> Subnet:
        """
        The connected subnet

        Get: ConnectedSubnet(self: Node) -> Subnet
        """
        ...

    @property
    def Name(self) -> str:
        """
        The name of the node

        Get: Name(self: Node) -> str
        """
        ...

    @property
    def NodeId(self) -> str:
        """
        The id of this node

        Get: NodeId(self: Node) -> str
        """
        ...

    @property
    def NodeType(self) -> NetType:
        """
        Particular type e.g. Industrial Ethernet or Wireless LAN

        Get: NodeType(self: Node) -> NetType

        Set: NodeType(self: Node) = value
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: Node) -> IEngineeringObject
        """
        ...


    def ConnectToSubnet(self, subnet:Subnet): # ->
        """
        ConnectToSubnet(self: Node, subnet: Subnet)

            Connects to the Subnet

            subnet: The subnet to be connected
        """
        ...

    def CreateAndConnectToSubnet(self, name:str) -> Subnet:
        """
        CreateAndConnectToSubnet(self: Node, name: str) -> Subnet

            Create and connect to a subnet

            name: The name of the Subnet to create and connect

            Returns: Siemens.Engineering.HW.Subnet
        """
        ...

    def DisconnectFromSubnet(self): # ->
        """
        DisconnectFromSubnet(self: Node)

            Disconnects a device from the given Subnet
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: Node) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: Node) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class NodeAssociation(IEquatable, IEngineeringAssociation, IInternalAssociationAccess): # skipped bases: <type 'IInternalBaseAccess'>, <type 'IEnumerable'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Associated nodes """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent..

        Get: Parent(self: NodeAssociation) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: NodeAssociation) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: NodeAssociation) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Node](enumerable: IEnumerable[Node], value: Node) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class NodeComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of Nodes """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: NodeComposition) -> IEngineeringObject
        """
        ...


    def Find(self, name:str) -> Node:
        """
        Find(self: NodeComposition, name: str) -> Node

            Finds a given node

            name: The name of the Node instance to find

            Returns: Siemens.Engineering.HW.Node
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: NodeComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: NodeComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Node](enumerable: IEnumerable[Node], value: Node) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class NonVolatileElement1Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property NonVolatileElement1Type

    enum NonVolatileElement1Type, values: EdgeFallingWithMemory (3), EdgeRisingWithMemory (2), Inverting (1), NonInverting (0)
    """
    EdgeFallingWithMemory: NonVolatileElement1Type = ...
    EdgeRisingWithMemory: NonVolatileElement1Type = ...
    Inverting: NonVolatileElement1Type = ...
    NonInverting: NonVolatileElement1Type = ...
    value__ = ...


class NonVolatileElement2Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property NonVolatileElement2Type

    enum NonVolatileElement2Type, values: EdgeFallingWithMemory (3), EdgeRisingWithMemory (2), Inverting (1), NonInverting (0)
    """
    EdgeFallingWithMemory: NonVolatileElement2Type = ...
    EdgeRisingWithMemory: NonVolatileElement2Type = ...
    Inverting: NonVolatileElement2Type = ...
    NonInverting: NonVolatileElement2Type = ...
    value__ = ...


class NonVolatileElement3Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property NonVolatileElement3Type

    enum NonVolatileElement3Type, values: EdgeFallingWithMemory (3), EdgeRisingWithMemory (2), Inverting (1), NonInverting (0)
    """
    EdgeFallingWithMemory: NonVolatileElement3Type = ...
    EdgeRisingWithMemory: NonVolatileElement3Type = ...
    Inverting: NonVolatileElement3Type = ...
    NonInverting: NonVolatileElement3Type = ...
    value__ = ...


class NonVolatileElement4Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property NonVolatileElement4Type

    enum NonVolatileElement4Type, values: EdgeFallingWithMemory (3), EdgeRisingWithMemory (2), Inverting (1), NonInverting (0)
    """
    EdgeFallingWithMemory: NonVolatileElement4Type = ...
    EdgeRisingWithMemory: NonVolatileElement4Type = ...
    Inverting: NonVolatileElement4Type = ...
    NonInverting: NonVolatileElement4Type = ...
    value__ = ...


class NotchFilterActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property NotchFilterActive

    enum NotchFilterActive, values: Active (0), Deactivated (1)
    """
    Active: NotchFilterActive = ...
    Deactivated: NotchFilterActive = ...
    value__ = ...


class NoValveVoltageOrEvsActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property NoValveVoltageOrEvsActive

    enum NoValveVoltageOrEvsActive, values: Activated (1), Deactivated (0)
    """
    Activated: NoValveVoltageOrEvsActive = ...
    Deactivated: NoValveVoltageOrEvsActive = ...
    value__ = ...


class NumberOfSequences(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property NumberOfSequences

    enum NumberOfSequences, values: None (0), Value1 (1), Value2 (2), Value3 (3), Value4 (4)
    """
    Value1: NumberOfSequences = ...
    Value2: NumberOfSequences = ...
    Value3: NumberOfSequences = ...
    Value4: NumberOfSequences = ...
    value__ = ...


class OpcUaMinimumSamplingInterval(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OpcUaMinimumSamplingInterval

    enum OpcUaMinimumSamplingInterval, values: None (0)
    """
    value__ = ...


class OpcUaPurchasedLicense(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OpcUaPurchasedLicense

    enum OpcUaPurchasedLicense, values: NoLicense (0), SimaticOpcUaS71500Large (3), SimaticOpcUaS71500Medium (2), SimaticOpcUaS71500Small (1)
    """
    NoLicense: OpcUaPurchasedLicense = ...
    SimaticOpcUaS71500Large: OpcUaPurchasedLicense = ...
    SimaticOpcUaS71500Medium: OpcUaPurchasedLicense = ...
    SimaticOpcUaS71500Small: OpcUaPurchasedLicense = ...
    value__ = ...


class OpcUaRequiredLicense(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OpcUaRequiredLicense

    enum OpcUaRequiredLicense, values: NoLicense (0), SimaticOpcUaS71500Large (3), SimaticOpcUaS71500Medium (2), SimaticOpcUaS71500Small (1)
    """
    NoLicense: OpcUaRequiredLicense = ...
    SimaticOpcUaS71500Large: OpcUaRequiredLicense = ...
    SimaticOpcUaS71500Medium: OpcUaRequiredLicense = ...
    SimaticOpcUaS71500Small: OpcUaRequiredLicense = ...
    value__ = ...


class OpcUaSecurityPolicies(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OpcUaSecurityPolicies

    enum (flags) OpcUaSecurityPolicies, values: None (0), OpcUaSecurityPolicies128RSAS (2), OpcUaSecurityPolicies128RSASE (4), OpcUaSecurityPolicies256S (8), OpcUaSecurityPolicies256SE (16), OpcUaSecurityPolicies256SHAS (32), OpcUaSecurityPolicies256SHASE (64), OpcUaSecurityPoliciesNone (1)
    """
    OpcUaSecurityPolicies128RSAS: OpcUaSecurityPolicies = ...
    OpcUaSecurityPolicies128RSASE: OpcUaSecurityPolicies = ...
    OpcUaSecurityPolicies256S: OpcUaSecurityPolicies = ...
    OpcUaSecurityPolicies256SE: OpcUaSecurityPolicies = ...
    OpcUaSecurityPolicies256SHAS: OpcUaSecurityPolicies = ...
    OpcUaSecurityPolicies256SHASE: OpcUaSecurityPolicies = ...
    OpcUaSecurityPoliciesNone: OpcUaSecurityPolicies = ...
    value__ = ...


class OpcUaServerCertificateSettings(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OpcUaServerCertificateSettings

    enum OpcUaServerCertificateSettings, values: OpcUaCertificatesAtRuntime (1), OpcUaCertificatesViaDownload (0)
    """
    OpcUaCertificatesAtRuntime: OpcUaServerCertificateSettings = ...
    OpcUaCertificatesViaDownload: OpcUaServerCertificateSettings = ...
    value__ = ...


class OpcUaUser(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Represents a OpcUa User Management object """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: OpcUaUser) -> IEngineeringObject
        """
        ...

    @property
    def UserName(self) -> str:
        """
        The name of the OpcUa User

        Get: UserName(self: OpcUaUser) -> str
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: OpcUaUser)

            Deletes this instance.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: OpcUaUser) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def SetPassword(self, password:SecureString): # ->
        """
        SetPassword(self: OpcUaUser, password: SecureString)

            Set Password for OpcUa User

            password: Password of User
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: OpcUaUser) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class OpcUaUserComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of OpcUa Users """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: OpcUaUserComposition) -> IEngineeringObject
        """
        ...


    def Find(self, userName:str) -> OpcUaUser:
        """
        Find(self: OpcUaUserComposition, userName: str) -> OpcUaUser

            Finds a given OpcUa User

            userName: User Name to find

            Returns: Siemens.Engineering.HW.OpcUaUser
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: OpcUaUserComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: OpcUaUserComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[OpcUaUser](enumerable: IEnumerable[OpcUaUser], value: OpcUaUser) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class OPDFaults(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OPDFaults

    enum OPDFaults, values: Display (1), DoNotDisplay (0)
    """
    Display: OPDFaults = ...
    DoNotDisplay: OPDFaults = ...
    value__ = ...


class OPDKeepIlluminationOnFor(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OPDKeepIlluminationOnFor

    enum OPDKeepIlluminationOnFor, values: Off (0), Value10Seconds (2), Value1Minute (3), Value3Seconds (1), Value5Minutes (4)
    """
    Off: OPDKeepIlluminationOnFor = ...
    Value10Seconds: OPDKeepIlluminationOnFor = ...
    Value1Minute: OPDKeepIlluminationOnFor = ...
    Value3Seconds: OPDKeepIlluminationOnFor = ...
    Value5Minutes: OPDKeepIlluminationOnFor = ...
    value__ = ...


class OPDLanguage(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OPDLanguage

    enum OPDLanguage, values: Chinese (8), English (0), French (2), German (1), Italian (6), Language4Placeholder (10), Language5Placeholder (11), Language6Placeholder (12), Language7Placeholder (13), Language8Placeholder (14), Language9Placeholder (15), Polish (3), Portuguese (5), Russian (9), Spanish (4), Suomi (7)
    """
    Chinese: OPDLanguage = ...
    English: OPDLanguage = ...
    French: OPDLanguage = ...
    German: OPDLanguage = ...
    Italian: OPDLanguage = ...
    Language4Placeholder: OPDLanguage = ...
    Language5Placeholder: OPDLanguage = ...
    Language6Placeholder: OPDLanguage = ...
    Language7Placeholder: OPDLanguage = ...
    Language8Placeholder: OPDLanguage = ...
    Language9Placeholder: OPDLanguage = ...
    Polish: OPDLanguage = ...
    Portuguese: OPDLanguage = ...
    Russian: OPDLanguage = ...
    Spanish: OPDLanguage = ...
    Suomi: OPDLanguage = ...
    value__ = ...


class OPDProfiles(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OPDProfiles

    enum OPDProfiles, values: CalculatorModule1 (31), CalculatorModule2 (32), EnergyUsedKwh (33), IL1IL2IL3A (0), IL1IL2IL3Percent (1), IMaxA (2), IMaxCos (4), IMaxPercent (3), IMaxUL1L2C (28), IMaxUL1L2Cos (26), IMaxUL1L2CosP (8), IMaxUL1L2CosS (6), IMaxUL1L2F (30), IMaxUL1NC (27), IMaxUL1NCos (25), IMaxUL1NCosP (7), IMaxUL1NCosS (5), IMaxUL1nNF (29), In1AndOutAm1 (9), In1AndOutAm2 (12), In2AndOutAm1 (10), In2AndOutAm2 (13), InputsAm1 (11), InputsAm2 (14), MaxTempTm1C (15), MaxTempTm1F (17), MaxTempTm2C (19), MaxTempTm2F (21), TempTm1C (16), TempTm1F (18), TempTm2C (20), TempTm2F (22), UL1L2UL2L3UL3L1 (24), UL1NUL2NUL3N (23)
    """
    CalculatorModule1: OPDProfiles = ...
    CalculatorModule2: OPDProfiles = ...
    EnergyUsedKwh: OPDProfiles = ...
    IL1IL2IL3A: OPDProfiles = ...
    IL1IL2IL3Percent: OPDProfiles = ...
    IMaxA: OPDProfiles = ...
    IMaxCos: OPDProfiles = ...
    IMaxPercent: OPDProfiles = ...
    IMaxUL1L2C: OPDProfiles = ...
    IMaxUL1L2Cos: OPDProfiles = ...
    IMaxUL1L2CosP: OPDProfiles = ...
    IMaxUL1L2CosS: OPDProfiles = ...
    IMaxUL1L2F: OPDProfiles = ...
    IMaxUL1NC: OPDProfiles = ...
    IMaxUL1NCos: OPDProfiles = ...
    IMaxUL1NCosP: OPDProfiles = ...
    IMaxUL1NCosS: OPDProfiles = ...
    IMaxUL1nNF: OPDProfiles = ...
    In1AndOutAm1: OPDProfiles = ...
    In1AndOutAm2: OPDProfiles = ...
    In2AndOutAm1: OPDProfiles = ...
    In2AndOutAm2: OPDProfiles = ...
    InputsAm1: OPDProfiles = ...
    InputsAm2: OPDProfiles = ...
    MaxTempTm1C: OPDProfiles = ...
    MaxTempTm1F: OPDProfiles = ...
    MaxTempTm2C: OPDProfiles = ...
    MaxTempTm2F: OPDProfiles = ...
    TempTm1C: OPDProfiles = ...
    TempTm1F: OPDProfiles = ...
    TempTm2C: OPDProfiles = ...
    TempTm2F: OPDProfiles = ...
    UL1L2UL2L3UL3L1: OPDProfiles = ...
    UL1NUL2NUL3N: OPDProfiles = ...
    value__ = ...


class OPDReturnToOperationsDisplayAfter(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OPDReturnToOperationsDisplayAfter

    enum OPDReturnToOperationsDisplayAfter, values: Manually (0), Value10Seconds (2), Value1Minute (3), Value3Seconds (1), Value5Minutes (4)
    """
    Manually: OPDReturnToOperationsDisplayAfter = ...
    Value10Seconds: OPDReturnToOperationsDisplayAfter = ...
    Value1Minute: OPDReturnToOperationsDisplayAfter = ...
    Value3Seconds: OPDReturnToOperationsDisplayAfter = ...
    Value5Minutes: OPDReturnToOperationsDisplayAfter = ...
    value__ = ...


class OPDWarnings(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OPDWarnings

    enum OPDWarnings, values: Display (1), DoNotDisplay (0)
    """
    Display: OPDWarnings = ...
    DoNotDisplay: OPDWarnings = ...
    value__ = ...


class OperatingHoursMonitoringResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OperatingHoursMonitoringResponse

    enum OperatingHoursMonitoringResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: OperatingHoursMonitoringResponse = ...
    Signal: OperatingHoursMonitoringResponse = ...
    value__ = ...
    Warn: OperatingHoursMonitoringResponse = ...


class OperatingMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OperatingMode

    enum OperatingMode, values: AnalogMode (67), Axis (270), ButtonHga (60), CascadingFunction (51), ConstantCurrent (255), Control (54), CountContinuously (2), Counting (23), CountOnce (3), CountPeriodically (4), D (256), Deactivated (281), DigitalInput (52), DigitalOutput (276), DiOversampling (24), DoOversampling (56), DosingMode (33), ElectronicShutdown (68), FastMode (1), FillLevel (62), FrequencyMeasurement (5), FrequencyOutput (266), FullDuplex4WireOperation (19), FullDuplex4WireOperationMultipointMaster (22), FullDuplex4WireOperationMultipointSlave (21), FullDuplex4WireOperationPtPConnection (25), HalfAndFullDuplex (55), HalfDuplex2WireOperation (20), I (257), Id (258), IncrementalEncoderABPhaseShifted (275), ManualOperation (278), Measuring (49), ModularCamControl (75), MotionControl (269), None (9), OnOffDelay (265), Oversampling (10), OversamplingInput (283), OversamplingOutput (282), P (259), Pd (260), PeriodMeasurement (31), Pi (261), Pid (262), PositionFeedback (50), PositioningWithAnalogOutputs (18), PositioningWithDigitalOutputs (17), PulseOutput (264), PulseTrain (263), PulseTrainABphaseshifted (272), PulseTrainABphaseshiftedFourfold (271), PulseTrainAcountupBcountdown (273), PulseTrainApulseBdirection (274), PulseWidthModulation (7), PwmWithDcMotor (267), ReflectionBarrier (64), Reserved2 (61), Reserved6 (65), Reserved7 (66), RotationalSpeedMeasurement (32), Rs232c (268), SlowMode (0), StandardMode (57), TechnologyObject (277), TimerDI (34), TimerDQ (8), Toggle0Dot1Hz (26), Toggle0Dot5Hz (27), Toggle1Hz (6), Toggle2Hz (28), Trace (53), Value2Channels (38), Value4Channels (39), Value4ChannelsHardwareFilter (35), Value8ARo (40), Value8ARoS (48), Value8ChannelsHardwareFilter (36), Value8ChannelsSoftwareFilter (37), Window (63), WriteRead (30), WriteReadNeg (29)
    """
    AnalogMode: OperatingMode = ...
    Axis: OperatingMode = ...
    ButtonHga: OperatingMode = ...
    CascadingFunction: OperatingMode = ...
    ConstantCurrent: OperatingMode = ...
    Control: OperatingMode = ...
    CountContinuously: OperatingMode = ...
    Counting: OperatingMode = ...
    CountOnce: OperatingMode = ...
    CountPeriodically: OperatingMode = ...
    D: OperatingMode = ...
    Deactivated: OperatingMode = ...
    DigitalInput: OperatingMode = ...
    DigitalOutput: OperatingMode = ...
    DiOversampling: OperatingMode = ...
    DoOversampling: OperatingMode = ...
    DosingMode: OperatingMode = ...
    ElectronicShutdown: OperatingMode = ...
    FastMode: OperatingMode = ...
    FillLevel: OperatingMode = ...
    FrequencyMeasurement: OperatingMode = ...
    FrequencyOutput: OperatingMode = ...
    FullDuplex4WireOperation: OperatingMode = ...
    FullDuplex4WireOperationMultipointMaster: OperatingMode = ...
    FullDuplex4WireOperationMultipointSlave: OperatingMode = ...
    FullDuplex4WireOperationPtPConnection: OperatingMode = ...
    HalfAndFullDuplex: OperatingMode = ...
    HalfDuplex2WireOperation: OperatingMode = ...
    I: OperatingMode = ...
    Id: OperatingMode = ...
    IncrementalEncoderABPhaseShifted: OperatingMode = ...
    ManualOperation: OperatingMode = ...
    Measuring: OperatingMode = ...
    ModularCamControl: OperatingMode = ...
    MotionControl: OperatingMode = ...
    OnOffDelay: OperatingMode = ...
    Oversampling: OperatingMode = ...
    OversamplingInput: OperatingMode = ...
    OversamplingOutput: OperatingMode = ...
    P: OperatingMode = ...
    Pd: OperatingMode = ...
    PeriodMeasurement: OperatingMode = ...
    Pi: OperatingMode = ...
    Pid: OperatingMode = ...
    PositionFeedback: OperatingMode = ...
    PositioningWithAnalogOutputs: OperatingMode = ...
    PositioningWithDigitalOutputs: OperatingMode = ...
    PulseOutput: OperatingMode = ...
    PulseTrain: OperatingMode = ...
    PulseTrainABphaseshifted: OperatingMode = ...
    PulseTrainABphaseshiftedFourfold: OperatingMode = ...
    PulseTrainAcountupBcountdown: OperatingMode = ...
    PulseTrainApulseBdirection: OperatingMode = ...
    PulseWidthModulation: OperatingMode = ...
    PwmWithDcMotor: OperatingMode = ...
    ReflectionBarrier: OperatingMode = ...
    Reserved2: OperatingMode = ...
    Reserved6: OperatingMode = ...
    Reserved7: OperatingMode = ...
    RotationalSpeedMeasurement: OperatingMode = ...
    Rs232c: OperatingMode = ...
    SlowMode: OperatingMode = ...
    StandardMode: OperatingMode = ...
    TechnologyObject: OperatingMode = ...
    TimerDI: OperatingMode = ...
    TimerDQ: OperatingMode = ...
    Toggle0Dot1Hz: OperatingMode = ...
    Toggle0Dot5Hz: OperatingMode = ...
    Toggle1Hz: OperatingMode = ...
    Toggle2Hz: OperatingMode = ...
    Trace: OperatingMode = ...
    Value2Channels: OperatingMode = ...
    Value4Channels: OperatingMode = ...
    Value4ChannelsHardwareFilter: OperatingMode = ...
    Value8ARo: OperatingMode = ...
    Value8ARoS: OperatingMode = ...
    Value8ChannelsHardwareFilter: OperatingMode = ...
    Value8ChannelsSoftwareFilter: OperatingMode = ...
    value__ = ...
    Window: OperatingMode = ...
    WriteRead: OperatingMode = ...
    WriteReadNeg: OperatingMode = ...


class OperatingRange(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OperatingRange

    enum OperatingRange, values: Cu100ClimaticRange (95), Cu100GostClimaticRange (78), Cu100GostStandardRange (79), Cu100StandardRange (96), Cu10ClimaticRange (74), Cu10GostClimaticRange (75), Cu10GostStandardRange (76), Cu10StandardRange (77), Cu50ClimaticRange (97), Cu50GostClimaticRange (80), Cu50GostStandardRange (81), Cu50StandardRange (98), Deactivated (0), Kty83slash110Silicon (70), Kty84slash130Silicon (71), LgNi1000ClimaticRange (60), LgNi1000StandardRange (61), Ni1000ClimaticRange (45), Ni1000StandardRange (51), Ni100ClimaticRange (44), Ni100GostClimaticRange (82), Ni100GostStandardRange (35), Ni100StandardRange (50), Ni10ClimaticRange (99), Ni10StandardRange (100), Ni120ClimaticRange (55), Ni120StandardRange (56), Ni200ClimaticRange (57), Ni200StandardRange (58), Ni500ClimaticRange (19), Ni500StandardRange (59), PlusMinus100mV (4), PlusMinus10mA (14), PlusMinus10V (11), PlusMinus1V (7), PlusMinus20mA (17), PlusMinus250mV (5), PlusMinus25mV (1), PlusMinus2dot5V (8), PlusMinus3dot2mA (12), PlusMinus500mV (6), PlusMinus50mV (2), PlusMinus5mA (13), PlusMinus5V (9), PlusMinus80mV (3), Pt1000ClimaticRange (43), Pt1000StandardRange (49), Pt100ClimaticRange (40), Pt100GostClimaticRange (85), Pt100GostStandardRange (86), Pt100StandardRange (46), Pt10ClimaticRange (101), Pt10GostClimaticRange (83), Pt10GostStandardRange (84), Pt10StandardRange (102), Pt200ClimaticRange (41), Pt200StandardRange (47), Pt500ClimaticRange (42), Pt500GostClimaticRange (89), Pt500GostStandardRange (90), Pt500StandardRange (48), Pt50ClimaticRange (103), Pt50GostClimaticRange (87), Pt50GostStandardRange (88), Pt50StandardRange (104), PTC (53), TypeB (20), TypeC (72), TypeE (22), TypeJ (25), TypeK (28), TypeL (26), TypeN (21), TypeR (23), TypeS (24), TypeT (27), TypeTxk (105), TypeTxkOrXkL (94), TypeTxKslashXKL (73), TypeU (29), Value0To10mA (106), Value0To10V (52), Value0To20mA (15), Value0To2V (92), Value1000Ohm (93), Value10KiloOhm (91), Value150Ohm (31), Value1To5mA (18), Value1To5V (10), Value300Ohm (32), Value3KiloOhm (54), Value48Ohm (30), Value4To20mA (16), Value4To20mAHART (107), Value600Ohm (33), Value6KiloOhm (34)
    """
    Cu100ClimaticRange: OperatingRange = ...
    Cu100GostClimaticRange: OperatingRange = ...
    Cu100GostStandardRange: OperatingRange = ...
    Cu100StandardRange: OperatingRange = ...
    Cu10ClimaticRange: OperatingRange = ...
    Cu10GostClimaticRange: OperatingRange = ...
    Cu10GostStandardRange: OperatingRange = ...
    Cu10StandardRange: OperatingRange = ...
    Cu50ClimaticRange: OperatingRange = ...
    Cu50GostClimaticRange: OperatingRange = ...
    Cu50GostStandardRange: OperatingRange = ...
    Cu50StandardRange: OperatingRange = ...
    Deactivated: OperatingRange = ...
    Kty83slash110Silicon: OperatingRange = ...
    Kty84slash130Silicon: OperatingRange = ...
    LgNi1000ClimaticRange: OperatingRange = ...
    LgNi1000StandardRange: OperatingRange = ...
    Ni1000ClimaticRange: OperatingRange = ...
    Ni1000StandardRange: OperatingRange = ...
    Ni100ClimaticRange: OperatingRange = ...
    Ni100GostClimaticRange: OperatingRange = ...
    Ni100GostStandardRange: OperatingRange = ...
    Ni100StandardRange: OperatingRange = ...
    Ni10ClimaticRange: OperatingRange = ...
    Ni10StandardRange: OperatingRange = ...
    Ni120ClimaticRange: OperatingRange = ...
    Ni120StandardRange: OperatingRange = ...
    Ni200ClimaticRange: OperatingRange = ...
    Ni200StandardRange: OperatingRange = ...
    Ni500ClimaticRange: OperatingRange = ...
    Ni500StandardRange: OperatingRange = ...
    PlusMinus100mV: OperatingRange = ...
    PlusMinus10mA: OperatingRange = ...
    PlusMinus10V: OperatingRange = ...
    PlusMinus1V: OperatingRange = ...
    PlusMinus20mA: OperatingRange = ...
    PlusMinus250mV: OperatingRange = ...
    PlusMinus25mV: OperatingRange = ...
    PlusMinus2dot5V: OperatingRange = ...
    PlusMinus3dot2mA: OperatingRange = ...
    PlusMinus500mV: OperatingRange = ...
    PlusMinus50mV: OperatingRange = ...
    PlusMinus5mA: OperatingRange = ...
    PlusMinus5V: OperatingRange = ...
    PlusMinus80mV: OperatingRange = ...
    Pt1000ClimaticRange: OperatingRange = ...
    Pt1000StandardRange: OperatingRange = ...
    Pt100ClimaticRange: OperatingRange = ...
    Pt100GostClimaticRange: OperatingRange = ...
    Pt100GostStandardRange: OperatingRange = ...
    Pt100StandardRange: OperatingRange = ...
    Pt10ClimaticRange: OperatingRange = ...
    Pt10GostClimaticRange: OperatingRange = ...
    Pt10GostStandardRange: OperatingRange = ...
    Pt10StandardRange: OperatingRange = ...
    Pt200ClimaticRange: OperatingRange = ...
    Pt200StandardRange: OperatingRange = ...
    Pt500ClimaticRange: OperatingRange = ...
    Pt500GostClimaticRange: OperatingRange = ...
    Pt500GostStandardRange: OperatingRange = ...
    Pt500StandardRange: OperatingRange = ...
    Pt50ClimaticRange: OperatingRange = ...
    Pt50GostClimaticRange: OperatingRange = ...
    Pt50GostStandardRange: OperatingRange = ...
    Pt50StandardRange: OperatingRange = ...
    PTC: OperatingRange = ...
    TypeB: OperatingRange = ...
    TypeC: OperatingRange = ...
    TypeE: OperatingRange = ...
    TypeJ: OperatingRange = ...
    TypeK: OperatingRange = ...
    TypeL: OperatingRange = ...
    TypeN: OperatingRange = ...
    TypeR: OperatingRange = ...
    TypeS: OperatingRange = ...
    TypeT: OperatingRange = ...
    TypeTxk: OperatingRange = ...
    TypeTxkOrXkL: OperatingRange = ...
    TypeTxKslashXKL: OperatingRange = ...
    TypeU: OperatingRange = ...
    Value0To10mA: OperatingRange = ...
    Value0To10V: OperatingRange = ...
    Value0To20mA: OperatingRange = ...
    Value0To2V: OperatingRange = ...
    Value1000Ohm: OperatingRange = ...
    Value10KiloOhm: OperatingRange = ...
    Value150Ohm: OperatingRange = ...
    Value1To5mA: OperatingRange = ...
    Value1To5V: OperatingRange = ...
    Value300Ohm: OperatingRange = ...
    Value3KiloOhm: OperatingRange = ...
    Value48Ohm: OperatingRange = ...
    Value4To20mA: OperatingRange = ...
    Value4To20mAHART: OperatingRange = ...
    Value600Ohm: OperatingRange = ...
    Value6KiloOhm: OperatingRange = ...
    value__ = ...


class OperatingRangeOutput(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OperatingRangeOutput

    enum OperatingRangeOutput, values: Deactivated (0), PlusMinus10V (6), PlusMinus20mA (1), Value0To10V (2), Value0To20mA (3), Value1To5V (4), Value4To20mA (5)
    """
    Deactivated: OperatingRangeOutput = ...
    PlusMinus10V: OperatingRangeOutput = ...
    PlusMinus20mA: OperatingRangeOutput = ...
    Value0To10V: OperatingRangeOutput = ...
    Value0To20mA: OperatingRangeOutput = ...
    Value1To5V: OperatingRangeOutput = ...
    Value4To20mA: OperatingRangeOutput = ...
    value__ = ...


class OperatingType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OperatingType

    enum OperatingType, values: CountingOrPositionInput (26), Current (2), Current2WireTransducer (4), Current4WireTransducer (3), Deactivated (0), Hart (24), Measuring (27), Resistance (18), Resistor2Wire (7), Resistor3Wire (6), Resistor4Wire (5), RtdThermalResistorLinear (19), ThermalResistor2Wire (25), ThermalResistor3Wire (9), ThermalResistor4Wire (8), Thermocouple (10), Thermocouple0CCompLinear (22), Thermocouple50CCompLinear (23), ThermocoupleExtComp (11), ThermocoupleExtCompLinear (14), ThermocoupleIntComp (21), ThermocoupleIntCompLinear (13), Voltage (1), Voltage4WireStrainGaugeFullBridge (29), Voltage6WireStrainGaugeFullBridge (30)
    """
    CountingOrPositionInput: OperatingType = ...
    Current: OperatingType = ...
    Current2WireTransducer: OperatingType = ...
    Current4WireTransducer: OperatingType = ...
    Deactivated: OperatingType = ...
    Hart: OperatingType = ...
    Measuring: OperatingType = ...
    Resistance: OperatingType = ...
    Resistor2Wire: OperatingType = ...
    Resistor3Wire: OperatingType = ...
    Resistor4Wire: OperatingType = ...
    RtdThermalResistorLinear: OperatingType = ...
    ThermalResistor2Wire: OperatingType = ...
    ThermalResistor3Wire: OperatingType = ...
    ThermalResistor4Wire: OperatingType = ...
    Thermocouple: OperatingType = ...
    Thermocouple0CCompLinear: OperatingType = ...
    Thermocouple50CCompLinear: OperatingType = ...
    ThermocoupleExtComp: OperatingType = ...
    ThermocoupleExtCompLinear: OperatingType = ...
    ThermocoupleIntComp: OperatingType = ...
    ThermocoupleIntCompLinear: OperatingType = ...
    value__ = ...
    Voltage: OperatingType = ...
    Voltage4WireStrainGaugeFullBridge: OperatingType = ...
    Voltage6WireStrainGaugeFullBridge: OperatingType = ...


class OperatingTypeAndRange(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OperatingTypeAndRange

    enum OperatingTypeAndRange, values: Current0To20mA (2), Current2WireTransducer4To20mA (3), Current4To20mA (10), Current4WireTransducer4To20mA (20), Current4WireTransducerPlusMinus20mA (4), CurrentPlusMinus20mA (11), Deactivated (0), ThermocoupleTypeB (12), ThermocoupleTypeC (21), ThermocoupleTypeE (13), ThermocoupleTypeJ (14), ThermocoupleTypeK (8), ThermocoupleTypeL (15), ThermocoupleTypeN (16), ThermocoupleTypeR (17), ThermocoupleTypeS (18), ThermocoupleTypeT (19), Voltage1To5V (7), VoltagePlusMinus10V (9), VoltagePlusMinus2dot5V (5), VoltagePlusMinus5V (6), VoltagePlusMinus80mV (1)
    """
    Current0To20mA: OperatingTypeAndRange = ...
    Current2WireTransducer4To20mA: OperatingTypeAndRange = ...
    Current4To20mA: OperatingTypeAndRange = ...
    Current4WireTransducer4To20mA: OperatingTypeAndRange = ...
    Current4WireTransducerPlusMinus20mA: OperatingTypeAndRange = ...
    CurrentPlusMinus20mA: OperatingTypeAndRange = ...
    Deactivated: OperatingTypeAndRange = ...
    ThermocoupleTypeB: OperatingTypeAndRange = ...
    ThermocoupleTypeC: OperatingTypeAndRange = ...
    ThermocoupleTypeE: OperatingTypeAndRange = ...
    ThermocoupleTypeJ: OperatingTypeAndRange = ...
    ThermocoupleTypeK: OperatingTypeAndRange = ...
    ThermocoupleTypeL: OperatingTypeAndRange = ...
    ThermocoupleTypeN: OperatingTypeAndRange = ...
    ThermocoupleTypeR: OperatingTypeAndRange = ...
    ThermocoupleTypeS: OperatingTypeAndRange = ...
    ThermocoupleTypeT: OperatingTypeAndRange = ...
    value__ = ...
    Voltage1To5V: OperatingTypeAndRange = ...
    VoltagePlusMinus10V: OperatingTypeAndRange = ...
    VoltagePlusMinus2dot5V: OperatingTypeAndRange = ...
    VoltagePlusMinus5V: OperatingTypeAndRange = ...
    VoltagePlusMinus80mV: OperatingTypeAndRange = ...


class OperatingTypeOutput(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OperatingTypeOutput

    enum OperatingTypeOutput, values: Current (2), Deactivated (0), Voltage (1)
    """
    Current: OperatingTypeOutput = ...
    Deactivated: OperatingTypeOutput = ...
    value__ = ...
    Voltage: OperatingTypeOutput = ...


class OperationalProtectionOffResponsePositioner(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OperationalProtectionOffResponsePositioner

    enum OperationalProtectionOffResponsePositioner, values: Closed (0), Open (1)
    """
    Closed: OperationalProtectionOffResponsePositioner = ...
    Open: OperationalProtectionOffResponsePositioner = ...
    value__ = ...


class OperationalProtectionOffStandardFunctionsType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OperationalProtectionOffStandardFunctionsType

    enum OperationalProtectionOffStandardFunctionsType, values: NCContact (1), NOContact (0)
    """
    NCContact: OperationalProtectionOffStandardFunctionsType = ...
    NOContact: OperationalProtectionOffStandardFunctionsType = ...
    value__ = ...


class OutputA(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OutputA

    enum OutputA, values: None (0), X11Clamp21 (21), X11Clamp22 (22), X11Clamp23 (23), X11Clamp24 (24), X11Clamp25 (25), X11Clamp26 (26), X11Clamp27 (27), X11Clamp28 (28), X11Clamp31 (31), X11Clamp32 (32), X11Clamp33 (33), X11Clamp34 (34), X11Clamp35 (35), X11Clamp36 (36), X11Clamp37 (37), X11Clamp38 (38)
    """
    value__ = ...
    X11Clamp21: OutputA = ...
    X11Clamp22: OutputA = ...
    X11Clamp23: OutputA = ...
    X11Clamp24: OutputA = ...
    X11Clamp25: OutputA = ...
    X11Clamp26: OutputA = ...
    X11Clamp27: OutputA = ...
    X11Clamp28: OutputA = ...
    X11Clamp31: OutputA = ...
    X11Clamp32: OutputA = ...
    X11Clamp33: OutputA = ...
    X11Clamp34: OutputA = ...
    X11Clamp35: OutputA = ...
    X11Clamp36: OutputA = ...
    X11Clamp37: OutputA = ...
    X11Clamp38: OutputA = ...


class OutputB(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OutputB

    enum OutputB, values: None (0), X11Clamp21 (21), X11Clamp22 (22), X11Clamp23 (23), X11Clamp24 (24), X11Clamp25 (25), X11Clamp26 (26), X11Clamp27 (27), X11Clamp28 (28), X11Clamp31 (31), X11Clamp32 (32), X11Clamp33 (33), X11Clamp34 (34), X11Clamp35 (35), X11Clamp36 (36), X11Clamp37 (37), X11Clamp38 (38)
    """
    value__ = ...
    X11Clamp21: OutputB = ...
    X11Clamp22: OutputB = ...
    X11Clamp23: OutputB = ...
    X11Clamp24: OutputB = ...
    X11Clamp25: OutputB = ...
    X11Clamp26: OutputB = ...
    X11Clamp27: OutputB = ...
    X11Clamp28: OutputB = ...
    X11Clamp31: OutputB = ...
    X11Clamp32: OutputB = ...
    X11Clamp33: OutputB = ...
    X11Clamp34: OutputB = ...
    X11Clamp35: OutputB = ...
    X11Clamp36: OutputB = ...
    X11Clamp37: OutputB = ...
    X11Clamp38: OutputB = ...


class OutputFilterDown(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OutputFilterDown

    enum OutputFilterDown, values: NoFilter (0), Value10s (4), Value1s (2), Value30s (5), Value500ms (1), Value5s (3), Value60s (6)
    """
    NoFilter: OutputFilterDown = ...
    Value10s: OutputFilterDown = ...
    Value1s: OutputFilterDown = ...
    Value30s: OutputFilterDown = ...
    Value500ms: OutputFilterDown = ...
    Value5s: OutputFilterDown = ...
    Value60s: OutputFilterDown = ...
    value__ = ...


class OutputFilterUp(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property OutputFilterUp

    enum OutputFilterUp, values: NoFilter (0), Value10s (4), Value1s (2), Value30s (5), Value500ms (1), Value5s (3), Value60s (6)
    """
    NoFilter: OutputFilterUp = ...
    Value10s: OutputFilterUp = ...
    Value1s: OutputFilterUp = ...
    Value30s: OutputFilterUp = ...
    Value500ms: OutputFilterUp = ...
    Value5s: OutputFilterUp = ...
    Value60s: OutputFilterUp = ...
    value__ = ...


class ParameterAssignmentOfPnInterfaceByHigherLevelIoController(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ParameterAssignmentOfPnInterfaceByHigherLevelIoController

    enum ParameterAssignmentOfPnInterfaceByHigherLevelIoController, values: Active (1), Deactivated (0)
    """
    Active: ParameterAssignmentOfPnInterfaceByHigherLevelIoController = ...
    Deactivated: ParameterAssignmentOfPnInterfaceByHigherLevelIoController = ...
    value__ = ...


class ParameterSettings(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ParameterSettings

    enum ParameterSettings, values: FromTemplate (1), Manual (0)
    """
    FromTemplate: ParameterSettings = ...
    Manual: ParameterSettings = ...
    value__ = ...


class Parity(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Parity

    enum Parity, values: Even (2), None (0), Odd (1)
    """
    Even: Parity = ...
    Odd: Parity = ...
    value__ = ...


class PcInterfaceAssignmentMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Interface assignment type for assignable interfaces

    enum PcInterfaceAssignmentMode, values: None (0), PcStation (1), SoftwarePlc (2)
    """
    PcStation: PcInterfaceAssignmentMode = ...
    SoftwarePlc: PcInterfaceAssignmentMode = ...
    value__ = ...


class PcStationType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PcStationType

    enum PcStationType, values: NotInstalled (0), PcStationV1Dot0 (1), PcStationV2Dot0 (2), PcStationV2Dot1 (3), PcStationV2Dot2 (4), PcStationV2Dot3 (5), PcStationV2Dot4 (6), PcStationV2Dot7 (7), PcStationV2Dot8 (8), PcStationV2Dot9 (9)
    """
    NotInstalled: PcStationType = ...
    PcStationV1Dot0: PcStationType = ...
    PcStationV2Dot0: PcStationType = ...
    PcStationV2Dot1: PcStationType = ...
    PcStationV2Dot2: PcStationType = ...
    PcStationV2Dot3: PcStationType = ...
    PcStationV2Dot4: PcStationType = ...
    PcStationV2Dot7: PcStationType = ...
    PcStationV2Dot8: PcStationType = ...
    PcStationV2Dot9: PcStationType = ...
    value__ = ...


class PhysicalQuantity(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PhysicalQuantity

    enum PhysicalQuantity, values: Angle (16), Area (14), Brightness (6), Current (11), Deactivated (0), Density (20), Flow (5), Force (8), Frequency (21), Illuminance (7), Length (4), Mass (10), Power (13), Pressure (3), S7Format (1), Speed (18), Temperature (2), Torque (9), Velocity (19), Viscosity (17), Voltage (12), Volume (15)
    """
    Angle: PhysicalQuantity = ...
    Area: PhysicalQuantity = ...
    Brightness: PhysicalQuantity = ...
    Current: PhysicalQuantity = ...
    Deactivated: PhysicalQuantity = ...
    Density: PhysicalQuantity = ...
    Flow: PhysicalQuantity = ...
    Force: PhysicalQuantity = ...
    Frequency: PhysicalQuantity = ...
    Illuminance: PhysicalQuantity = ...
    Length: PhysicalQuantity = ...
    Mass: PhysicalQuantity = ...
    Power: PhysicalQuantity = ...
    Pressure: PhysicalQuantity = ...
    S7Format: PhysicalQuantity = ...
    Speed: PhysicalQuantity = ...
    Temperature: PhysicalQuantity = ...
    Torque: PhysicalQuantity = ...
    value__ = ...
    Velocity: PhysicalQuantity = ...
    Viscosity: PhysicalQuantity = ...
    Voltage: PhysicalQuantity = ...
    Volume: PhysicalQuantity = ...


class PilotValve(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PilotValve

    enum PilotValve, values: Activated (1), Deactivated (0)
    """
    Activated: PilotValve = ...
    Deactivated: PilotValve = ...
    value__ = ...


class PlcProtectionAccessLevel(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Access Level entries -enum

    enum (flags) PlcProtectionAccessLevel, values: FullAccess (1), FullAccessIncludingFailsafe (5), HMIAccess (3), NoAccess (4), None (0), ReadAccess (2)
    """
    FullAccess: PlcProtectionAccessLevel = ...
    FullAccessIncludingFailsafe: PlcProtectionAccessLevel = ...
    HMIAccess: PlcProtectionAccessLevel = ...
    NoAccess: PlcProtectionAccessLevel = ...
    ReadAccess: PlcProtectionAccessLevel = ...
    value__ = ...


class PnDnsConfigNameResolve(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Name resolution via DNS

    enum PnDnsConfigNameResolve, values: Deactivated (0), Device (4), Project (1), Remotely (2)
    """
    Deactivated: PnDnsConfigNameResolve = ...
    Device: PnDnsConfigNameResolve = ...
    Project: PnDnsConfigNameResolve = ...
    Remotely: PnDnsConfigNameResolve = ...
    value__ = ...


class PortConfiguration(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PortConfiguration

    enum PortConfiguration, values: DigitalInput (0), DigitalOutput (1), IoLink16IOr16OPlusPqi (7), IoLink1IOr1OPlusPqi (2), IoLink2IOr2OPlusPqi (4), IoLink2IPlusPqi (3), IoLink32IOr32OPlusPqi (8), IoLink4IOr4OPlusPqi (5), IoLink8IOr8OPlusPqi (6)
    """
    DigitalInput: PortConfiguration = ...
    DigitalOutput: PortConfiguration = ...
    IoLink16IOr16OPlusPqi: PortConfiguration = ...
    IoLink1IOr1OPlusPqi: PortConfiguration = ...
    IoLink2IOr2OPlusPqi: PortConfiguration = ...
    IoLink2IPlusPqi: PortConfiguration = ...
    IoLink32IOr32OPlusPqi: PortConfiguration = ...
    IoLink4IOr4OPlusPqi: PortConfiguration = ...
    IoLink8IOr8OPlusPqi: PortConfiguration = ...
    value__ = ...


class PortMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PortMode

    enum PortMode, values: IoLinkAutostart (0), IoLinkManual (1)
    """
    IoLinkAutostart: PortMode = ...
    IoLinkManual: PortMode = ...
    value__ = ...


class PortModePort1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PortModePort1

    enum PortModePort1, values: Deactivated (7), Di (3), Dq (4), IoLinkAutostart (8), IoLinkManual (1), None (0)
    """
    Deactivated: PortModePort1 = ...
    Di: PortModePort1 = ...
    Dq: PortModePort1 = ...
    IoLinkAutostart: PortModePort1 = ...
    IoLinkManual: PortModePort1 = ...
    value__ = ...


class PortModePort2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PortModePort2

    enum PortModePort2, values: Deactivated (7), Di (3), Dq (4), IoLinkAutostart (8), IoLinkManual (1), None (0)
    """
    Deactivated: PortModePort2 = ...
    Di: PortModePort2 = ...
    Dq: PortModePort2 = ...
    IoLinkAutostart: PortModePort2 = ...
    IoLinkManual: PortModePort2 = ...
    value__ = ...


class PortModePort3(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PortModePort3

    enum PortModePort3, values: Deactivated (7), Di (3), Dq (4), IoLinkAutostart (8), IoLinkManual (1), None (0)
    """
    Deactivated: PortModePort3 = ...
    Di: PortModePort3 = ...
    Dq: PortModePort3 = ...
    IoLinkAutostart: PortModePort3 = ...
    IoLinkManual: PortModePort3 = ...
    value__ = ...


class PortModePort4(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PortModePort4

    enum PortModePort4, values: Deactivated (7), Di (3), Dq (4), IoLinkAutostart (8), IoLinkManual (1), None (0)
    """
    Deactivated: PortModePort4 = ...
    Di: PortModePort4 = ...
    Dq: PortModePort4 = ...
    IoLinkAutostart: PortModePort4 = ...
    IoLinkManual: PortModePort4 = ...
    value__ = ...


class PotentialGroup(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PotentialGroup

    enum PotentialGroup, values: DarkBaseUnit (0), LightBaseUnit (1)
    """
    DarkBaseUnit: PotentialGroup = ...
    LightBaseUnit: PotentialGroup = ...
    value__ = ...


class PowerFailureMonitoringType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PowerFailureMonitoringType

    enum PowerFailureMonitoringType, values: Deactivated (0), ServiceSupplyIsNotInterrupted (1)
    """
    Deactivated: PowerFailureMonitoringType = ...
    ServiceSupplyIsNotInterrupted: PowerFailureMonitoringType = ...
    value__ = ...


class PreConfigurationForDIDQ(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PreConfigurationForDIDQ

    enum PreConfigurationForDIDQ, values: DI8AndDQ8 (2), DQ16 (3), FreeParameterization (1), None (0)
    """
    DI8AndDQ8: PreConfigurationForDIDQ = ...
    DQ16: PreConfigurationForDIDQ = ...
    FreeParameterization: PreConfigurationForDIDQ = ...
    value__ = ...


class PreferenceDirection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PreferenceDirection

    enum PreferenceDirection, values: InvertDirection (1), StandardDirection (0)
    """
    InvertDirection: PreferenceDirection = ...
    StandardDirection: PreferenceDirection = ...
    value__ = ...


class PressureIndicator(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PressureIndicator

    enum PressureIndicator, values: AlternatingWithValveStatus (2), Deactivated (0), Permanent (1)
    """
    AlternatingWithValveStatus: PressureIndicator = ...
    Deactivated: PressureIndicator = ...
    Permanent: PressureIndicator = ...
    value__ = ...


class PressureMeasurement(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PressureMeasurement

    enum PressureMeasurement, values: Activated (1), Deactivated (0)
    """
    Activated: PressureMeasurement = ...
    Deactivated: PressureMeasurement = ...
    value__ = ...


class PressureOutsideTheDefinedRangeActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PressureOutsideTheDefinedRangeActive

    enum PressureOutsideTheDefinedRangeActive, values: Activated (1), Deactivated (0)
    """
    Activated: PressureOutsideTheDefinedRangeActive = ...
    Deactivated: PressureOutsideTheDefinedRangeActive = ...
    value__ = ...


class PrewarningLimitForMotorHeating(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PrewarningLimitForMotorHeating

    enum PrewarningLimitForMotorHeating, values: Limit0 (0), Limit1 (1), Limit10 (10), Limit11 (11), Limit12 (12), Limit13 (13), Limit14 (14), Limit15 (15), Limit16 (16), Limit17 (17), Limit18 (18), Limit19 (19), Limit2 (2), Limit20 (20), Limit21 (21), Limit22 (22), Limit23 (23), Limit24 (24), Limit25 (25), Limit26 (26), Limit27 (27), Limit28 (28), Limit29 (29), Limit3 (3), Limit30 (30), Limit31 (31), Limit32 (32), Limit33 (33), Limit34 (34), Limit35 (35), Limit36 (36), Limit37 (37), Limit38 (38), Limit39 (39), Limit4 (4), Limit40 (40), Limit41 (41), Limit42 (42), Limit43 (43), Limit44 (44), Limit45 (45), Limit46 (46), Limit47 (47), Limit48 (48), Limit49 (49), Limit5 (5), Limit50 (50), Limit51 (51), Limit52 (52), Limit53 (53), Limit54 (54), Limit55 (55), Limit56 (56), Limit57 (57), Limit58 (58), Limit59 (59), Limit6 (6), Limit60 (60), Limit61 (61), Limit62 (62), Limit63 (63), Limit64 (64), Limit65 (65), Limit66 (66), Limit67 (67), Limit68 (68), Limit69 (69), Limit7 (7), Limit70 (70), Limit71 (71), Limit72 (72), Limit73 (73), Limit74 (74), Limit75 (75), Limit76 (76), Limit77 (77), Limit78 (78), Limit79 (79), Limit8 (8), Limit80 (80), Limit81 (81), Limit82 (82), Limit83 (83), Limit84 (84), Limit85 (85), Limit86 (86), Limit87 (87), Limit88 (88), Limit89 (89), Limit9 (9), Limit90 (90), Limit91 (91), Limit92 (92), Limit93 (93), Limit94 (94), Limit95 (95), Limit96 (96), Limit97 (97), Limit98 (98), Limit99 (99)
    """
    Limit0: PrewarningLimitForMotorHeating = ...
    Limit1: PrewarningLimitForMotorHeating = ...
    Limit10: PrewarningLimitForMotorHeating = ...
    Limit11: PrewarningLimitForMotorHeating = ...
    Limit12: PrewarningLimitForMotorHeating = ...
    Limit13: PrewarningLimitForMotorHeating = ...
    Limit14: PrewarningLimitForMotorHeating = ...
    Limit15: PrewarningLimitForMotorHeating = ...
    Limit16: PrewarningLimitForMotorHeating = ...
    Limit17: PrewarningLimitForMotorHeating = ...
    Limit18: PrewarningLimitForMotorHeating = ...
    Limit19: PrewarningLimitForMotorHeating = ...
    Limit2: PrewarningLimitForMotorHeating = ...
    Limit20: PrewarningLimitForMotorHeating = ...
    Limit21: PrewarningLimitForMotorHeating = ...
    Limit22: PrewarningLimitForMotorHeating = ...
    Limit23: PrewarningLimitForMotorHeating = ...
    Limit24: PrewarningLimitForMotorHeating = ...
    Limit25: PrewarningLimitForMotorHeating = ...
    Limit26: PrewarningLimitForMotorHeating = ...
    Limit27: PrewarningLimitForMotorHeating = ...
    Limit28: PrewarningLimitForMotorHeating = ...
    Limit29: PrewarningLimitForMotorHeating = ...
    Limit3: PrewarningLimitForMotorHeating = ...
    Limit30: PrewarningLimitForMotorHeating = ...
    Limit31: PrewarningLimitForMotorHeating = ...
    Limit32: PrewarningLimitForMotorHeating = ...
    Limit33: PrewarningLimitForMotorHeating = ...
    Limit34: PrewarningLimitForMotorHeating = ...
    Limit35: PrewarningLimitForMotorHeating = ...
    Limit36: PrewarningLimitForMotorHeating = ...
    Limit37: PrewarningLimitForMotorHeating = ...
    Limit38: PrewarningLimitForMotorHeating = ...
    Limit39: PrewarningLimitForMotorHeating = ...
    Limit4: PrewarningLimitForMotorHeating = ...
    Limit40: PrewarningLimitForMotorHeating = ...
    Limit41: PrewarningLimitForMotorHeating = ...
    Limit42: PrewarningLimitForMotorHeating = ...
    Limit43: PrewarningLimitForMotorHeating = ...
    Limit44: PrewarningLimitForMotorHeating = ...
    Limit45: PrewarningLimitForMotorHeating = ...
    Limit46: PrewarningLimitForMotorHeating = ...
    Limit47: PrewarningLimitForMotorHeating = ...
    Limit48: PrewarningLimitForMotorHeating = ...
    Limit49: PrewarningLimitForMotorHeating = ...
    Limit5: PrewarningLimitForMotorHeating = ...
    Limit50: PrewarningLimitForMotorHeating = ...
    Limit51: PrewarningLimitForMotorHeating = ...
    Limit52: PrewarningLimitForMotorHeating = ...
    Limit53: PrewarningLimitForMotorHeating = ...
    Limit54: PrewarningLimitForMotorHeating = ...
    Limit55: PrewarningLimitForMotorHeating = ...
    Limit56: PrewarningLimitForMotorHeating = ...
    Limit57: PrewarningLimitForMotorHeating = ...
    Limit58: PrewarningLimitForMotorHeating = ...
    Limit59: PrewarningLimitForMotorHeating = ...
    Limit6: PrewarningLimitForMotorHeating = ...
    Limit60: PrewarningLimitForMotorHeating = ...
    Limit61: PrewarningLimitForMotorHeating = ...
    Limit62: PrewarningLimitForMotorHeating = ...
    Limit63: PrewarningLimitForMotorHeating = ...
    Limit64: PrewarningLimitForMotorHeating = ...
    Limit65: PrewarningLimitForMotorHeating = ...
    Limit66: PrewarningLimitForMotorHeating = ...
    Limit67: PrewarningLimitForMotorHeating = ...
    Limit68: PrewarningLimitForMotorHeating = ...
    Limit69: PrewarningLimitForMotorHeating = ...
    Limit7: PrewarningLimitForMotorHeating = ...
    Limit70: PrewarningLimitForMotorHeating = ...
    Limit71: PrewarningLimitForMotorHeating = ...
    Limit72: PrewarningLimitForMotorHeating = ...
    Limit73: PrewarningLimitForMotorHeating = ...
    Limit74: PrewarningLimitForMotorHeating = ...
    Limit75: PrewarningLimitForMotorHeating = ...
    Limit76: PrewarningLimitForMotorHeating = ...
    Limit77: PrewarningLimitForMotorHeating = ...
    Limit78: PrewarningLimitForMotorHeating = ...
    Limit79: PrewarningLimitForMotorHeating = ...
    Limit8: PrewarningLimitForMotorHeating = ...
    Limit80: PrewarningLimitForMotorHeating = ...
    Limit81: PrewarningLimitForMotorHeating = ...
    Limit82: PrewarningLimitForMotorHeating = ...
    Limit83: PrewarningLimitForMotorHeating = ...
    Limit84: PrewarningLimitForMotorHeating = ...
    Limit85: PrewarningLimitForMotorHeating = ...
    Limit86: PrewarningLimitForMotorHeating = ...
    Limit87: PrewarningLimitForMotorHeating = ...
    Limit88: PrewarningLimitForMotorHeating = ...
    Limit89: PrewarningLimitForMotorHeating = ...
    Limit9: PrewarningLimitForMotorHeating = ...
    Limit90: PrewarningLimitForMotorHeating = ...
    Limit91: PrewarningLimitForMotorHeating = ...
    Limit92: PrewarningLimitForMotorHeating = ...
    Limit93: PrewarningLimitForMotorHeating = ...
    Limit94: PrewarningLimitForMotorHeating = ...
    Limit95: PrewarningLimitForMotorHeating = ...
    Limit96: PrewarningLimitForMotorHeating = ...
    Limit97: PrewarningLimitForMotorHeating = ...
    Limit98: PrewarningLimitForMotorHeating = ...
    Limit99: PrewarningLimitForMotorHeating = ...
    value__ = ...


class Priority(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Priority

    enum Priority, values: High (1), Low (0)
    """
    High: Priority = ...
    Low: Priority = ...
    value__ = ...


class ProcessDataMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ProcessDataMode

    enum ProcessDataMode, values: Fragmented (1), Standard (0)
    """
    Fragmented: ProcessDataMode = ...
    Standard: ProcessDataMode = ...
    value__ = ...


class ProcessDataVariant(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ProcessDataVariant

    enum ProcessDataVariant, values: ActivePowersL1l2l3HexFd (253), ApparentPowerL1l2l3HexFb (251), BasicMeasuredValuesL1l2l3HexFa (250), BasicVariablesSinglePhaseMeasurementL1Hex9F (159), BasicVariablesSinglePhaseMeasurementL2Hex9D (157), BasicVariablesSinglePhaseMeasurementL3Hex9B (155), BasicVariablesThreePhaseMeasurementL1l2l3HexF5 (245), Disable (0), EeIndustryMeasuredDataProfileE0Hex81 (129), EeIndustryMeasuredDataProfileE0HexE0 (224), EeIndustryMeasuredDataProfileE1Hex82 (130), EeIndustryMeasuredDataProfileE1HexE1 (225), EeIndustryMeasuredDataProfileE2Hex83 (131), EeIndustryMeasuredDataProfileE2HexE2 (226), EeIndustryMeasuredDataProfileE3Hex84 (132), EeIndustryMeasuredDataProfileE3HexE3 (227), EnergyL1HexF8 (248), EnergyL1l2l3OverflowCounterHexEf (239), EnergyL2HexF7 (247), EnergyL3HexF6 (246), Hex80 (128), QualityValuesThreePhaseMeasurementL1l2l3HexF0 (240), ReactivePowerCompensationL1l2l3HexF4 (244), ReactivePowersL1l2l3HexFc (252), SinglePhaseMeasurementL1WithVoltageScalingValueHex9E (158), SinglePhaseMeasurementL2WithVoltageScalingValueHex9C (156), SinglePhaseMeasurementL3WithVoltageScalingValueHex9A (154), TotalEnergyL1l2l3HexF9 (249), TotalPowersL1l2l3HexFe (254), UserSpecificUserDataHex01 (1), UserSpecificUserDataHex02 (2)
    """
    ActivePowersL1l2l3HexFd: ProcessDataVariant = ...
    ApparentPowerL1l2l3HexFb: ProcessDataVariant = ...
    BasicMeasuredValuesL1l2l3HexFa: ProcessDataVariant = ...
    BasicVariablesSinglePhaseMeasurementL1Hex9F: ProcessDataVariant = ...
    BasicVariablesSinglePhaseMeasurementL2Hex9D: ProcessDataVariant = ...
    BasicVariablesSinglePhaseMeasurementL3Hex9B: ProcessDataVariant = ...
    BasicVariablesThreePhaseMeasurementL1l2l3HexF5: ProcessDataVariant = ...
    Disable: ProcessDataVariant = ...
    EeIndustryMeasuredDataProfileE0Hex81: ProcessDataVariant = ...
    EeIndustryMeasuredDataProfileE0HexE0: ProcessDataVariant = ...
    EeIndustryMeasuredDataProfileE1Hex82: ProcessDataVariant = ...
    EeIndustryMeasuredDataProfileE1HexE1: ProcessDataVariant = ...
    EeIndustryMeasuredDataProfileE2Hex83: ProcessDataVariant = ...
    EeIndustryMeasuredDataProfileE2HexE2: ProcessDataVariant = ...
    EeIndustryMeasuredDataProfileE3Hex84: ProcessDataVariant = ...
    EeIndustryMeasuredDataProfileE3HexE3: ProcessDataVariant = ...
    EnergyL1HexF8: ProcessDataVariant = ...
    EnergyL1l2l3OverflowCounterHexEf: ProcessDataVariant = ...
    EnergyL2HexF7: ProcessDataVariant = ...
    EnergyL3HexF6: ProcessDataVariant = ...
    Hex80: ProcessDataVariant = ...
    QualityValuesThreePhaseMeasurementL1l2l3HexF0: ProcessDataVariant = ...
    ReactivePowerCompensationL1l2l3HexF4: ProcessDataVariant = ...
    ReactivePowersL1l2l3HexFc: ProcessDataVariant = ...
    SinglePhaseMeasurementL1WithVoltageScalingValueHex9E: ProcessDataVariant = ...
    SinglePhaseMeasurementL2WithVoltageScalingValueHex9C: ProcessDataVariant = ...
    SinglePhaseMeasurementL3WithVoltageScalingValueHex9A: ProcessDataVariant = ...
    TotalEnergyL1l2l3HexF9: ProcessDataVariant = ...
    TotalPowersL1l2l3HexFe: ProcessDataVariant = ...
    UserSpecificUserDataHex01: ProcessDataVariant = ...
    UserSpecificUserDataHex02: ProcessDataVariant = ...
    value__ = ...


class ProcessValue(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ProcessValue

    enum ProcessValue, values: Mass (0), Standardvolume (4), TotalFraktionA (5), TotalFraktionB (6), Volume (1)
    """
    Mass: ProcessValue = ...
    Standardvolume: ProcessValue = ...
    TotalFraktionA: ProcessValue = ...
    TotalFraktionB: ProcessValue = ...
    value__ = ...
    Volume: ProcessValue = ...


class ProDiagUsedLicenses(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ProDiagUsedLicenses

    enum ProDiagUsedLicenses, values: NoLicense (0), Value1X (1), Value2X (2), Value3X (3), Value4X (4), Value5X (5)
    """
    NoLicense: ProDiagUsedLicenses = ...
    Value1X: ProDiagUsedLicenses = ...
    Value2X: ProDiagUsedLicenses = ...
    Value3X: ProDiagUsedLicenses = ...
    Value4X: ProDiagUsedLicenses = ...
    Value5X: ProDiagUsedLicenses = ...
    value__ = ...


class ProtectionUnitForSummarizeOfSecurityEvents(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ProtectionUnitForSummarizeOfSecurityEvents

    enum ProtectionUnitForSummarizeOfSecurityEvents, values: Hours (4), Minutes (3), None (0), Seconds (2)
    """
    Hours: ProtectionUnitForSummarizeOfSecurityEvents = ...
    Minutes: ProtectionUnitForSummarizeOfSecurityEvents = ...
    Seconds: ProtectionUnitForSummarizeOfSecurityEvents = ...
    value__ = ...


class ProtocolCompatibility(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ProtocolCompatibility

    enum ProtocolCompatibility, values: Mstp (0), Rstp (2), Stp (4)
    """
    Mstp: ProtocolCompatibility = ...
    Rstp: ProtocolCompatibility = ...
    Stp: ProtocolCompatibility = ...
    value__ = ...


class PulseOutput(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PulseOutput

    enum PulseOutput, values: None (0), X11Clamp21 (21), X11Clamp22 (22), X11Clamp23 (23), X11Clamp24 (24), X11Clamp25 (25), X11Clamp26 (26), X11Clamp27 (27), X11Clamp28 (28), X11Clamp31 (31), X11Clamp32 (32), X11Clamp33 (33), X11Clamp34 (34), X11Clamp35 (35), X11Clamp36 (36), X11Clamp37 (37), X11Clamp38 (38)
    """
    value__ = ...
    X11Clamp21: PulseOutput = ...
    X11Clamp22: PulseOutput = ...
    X11Clamp23: PulseOutput = ...
    X11Clamp24: PulseOutput = ...
    X11Clamp25: PulseOutput = ...
    X11Clamp26: PulseOutput = ...
    X11Clamp27: PulseOutput = ...
    X11Clamp28: PulseOutput = ...
    X11Clamp31: PulseOutput = ...
    X11Clamp32: PulseOutput = ...
    X11Clamp33: PulseOutput = ...
    X11Clamp34: PulseOutput = ...
    X11Clamp35: PulseOutput = ...
    X11Clamp36: PulseOutput = ...
    X11Clamp37: PulseOutput = ...
    X11Clamp38: PulseOutput = ...


class PulsePauseOnReversalOfDirection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PulsePauseOnReversalOfDirection

    enum PulsePauseOnReversalOfDirection, values: Value0Ms (0), Value10Ms (10), Value1Ms (1), Value4Ms (4)
    """
    Value0Ms: PulsePauseOnReversalOfDirection = ...
    Value10Ms: PulsePauseOnReversalOfDirection = ...
    Value1Ms: PulsePauseOnReversalOfDirection = ...
    Value4Ms: PulsePauseOnReversalOfDirection = ...
    value__ = ...


class PulseStretching(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PulseStretching

    enum PulseStretching, values: None (0), Value0Dot05s (4), Value0Dot1s (5), Value0Dot2s (6), Value0Dot5s (1), Value1s (2), Value2s (3)
    """
    Value0Dot05s: PulseStretching = ...
    Value0Dot1s: PulseStretching = ...
    Value0Dot2s: PulseStretching = ...
    Value0Dot5s: PulseStretching = ...
    Value1s: PulseStretching = ...
    Value2s: PulseStretching = ...
    value__ = ...


class PulseWidthModulationFrequency(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PulseWidthModulationFrequency

    enum PulseWidthModulationFrequency, values: None (0), Value01Kilohertz (1), Value02Kilohertz (2), Value04Kilohertz (3), Value08Kilohertz (4), Value16Kilohertz (5)
    """
    Value01Kilohertz: PulseWidthModulationFrequency = ...
    Value02Kilohertz: PulseWidthModulationFrequency = ...
    Value04Kilohertz: PulseWidthModulationFrequency = ...
    Value08Kilohertz: PulseWidthModulationFrequency = ...
    Value16Kilohertz: PulseWidthModulationFrequency = ...
    value__ = ...


class PulseWidthModulationTimePeriod(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PulseWidthModulationTimePeriod

    enum PulseWidthModulationTimePeriod, values: Off (0), Value0Dot20ms (4), Value0Dot40ms (7), Value0Dot93ms (12), Value10Dot67ms (26), Value1Dot33ms (14), Value21Dot33ms (30), Value34Dot13ms (33), Value4Dot27ms (21), Value59Dot73ms (36)
    """
    Off: PulseWidthModulationTimePeriod = ...
    Value0Dot20ms: PulseWidthModulationTimePeriod = ...
    Value0Dot40ms: PulseWidthModulationTimePeriod = ...
    Value0Dot93ms: PulseWidthModulationTimePeriod = ...
    Value10Dot67ms: PulseWidthModulationTimePeriod = ...
    Value1Dot33ms: PulseWidthModulationTimePeriod = ...
    Value21Dot33ms: PulseWidthModulationTimePeriod = ...
    Value34Dot13ms: PulseWidthModulationTimePeriod = ...
    Value4Dot27ms: PulseWidthModulationTimePeriod = ...
    Value59Dot73ms: PulseWidthModulationTimePeriod = ...
    value__ = ...


class PwmOutputFormat(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property PwmOutputFormat

    enum PwmOutputFormat, values: PerMil (0), S7AnalogValue (1)
    """
    PerMil: PwmOutputFormat = ...
    S7AnalogValue: PwmOutputFormat = ...
    value__ = ...


class ReactionToCountingLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ReactionToCountingLimit

    enum ReactionToCountingLimit, values: ContinueCounting (1), StopCounting (0)
    """
    ContinueCounting: ReactionToCountingLimit = ...
    StopCounting: ReactionToCountingLimit = ...
    value__ = ...


class ReactionToCpuStop(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ReactionToCpuStop

    enum ReactionToCpuStop, values: Continue (4), ExitActiveCommand (5), KeepLastValue (1), OutputHasNoCurrentOrVoltage (0), Stop (3), SubstituteAValue (2)
    """
    Continue: ReactionToCpuStop = ...
    ExitActiveCommand: ReactionToCpuStop = ...
    KeepLastValue: ReactionToCpuStop = ...
    OutputHasNoCurrentOrVoltage: ReactionToCpuStop = ...
    Stop: ReactionToCpuStop = ...
    SubstituteAValue: ReactionToCpuStop = ...
    value__ = ...


class ReactionToCpuStopforDQ1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ReactionToCpuStopforDQ1

    enum ReactionToCpuStopforDQ1, values: Continue (4), None (0), SubstituteValue (2)
    """
    Continue: ReactionToCpuStopforDQ1 = ...
    SubstituteValue: ReactionToCpuStopforDQ1 = ...
    value__ = ...


class ReactionToError(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ReactionToError

    enum ReactionToError, values: KeepLastValue (1), SubstituteAValue (0), SubstituteValue0 (2)
    """
    KeepLastValue: ReactionToError = ...
    SubstituteAValue: ReactionToError = ...
    SubstituteValue0: ReactionToError = ...
    value__ = ...


class ReactionToGateStart(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ReactionToGateStart

    enum ReactionToGateStart, values: ContinueWithCurrentValue (1), SetToStartValue (0)
    """
    ContinueWithCurrentValue: ReactionToGateStart = ...
    SetToStartValue: ReactionToGateStart = ...
    value__ = ...


class ReactionToSignalN(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ReactionToSignalN

    enum ReactionToSignalN, values: CaptureAtSignalN (2), NoReactionToSignalN (0), SynchronizationAtSignalN (1)
    """
    CaptureAtSignalN: ReactionToSignalN = ...
    NoReactionToSignalN: ReactionToSignalN = ...
    SynchronizationAtSignalN: ReactionToSignalN = ...
    value__ = ...


class ReceiveLineInitialState(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ReceiveLineInitialState

    enum ReceiveLineInitialState, values: None (0), SignalRA0VSignalRB5V (2), SignalRA5VSignalRB0VBreakDetection (1)
    """
    SignalRA0VSignalRB5V: ReceiveLineInitialState = ...
    SignalRA5VSignalRB0VBreakDetection: ReceiveLineInitialState = ...
    value__ = ...


class ReferenceJunction(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ReferenceJunction

    enum ReferenceJunction, values: InternalReferenceJunction (3), None (0), ReferenceChannelOfGroup0 (8), ReferenceChannelOfTheModule (2), RTD (4)
    """
    InternalReferenceJunction: ReferenceJunction = ...
    ReferenceChannelOfGroup0: ReferenceJunction = ...
    ReferenceChannelOfTheModule: ReferenceJunction = ...
    RTD: ReferenceJunction = ...
    value__ = ...


class ReferenceSwitchInput(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ReferenceSwitchInput

    enum ReferenceSwitchInput, values: None (0), X11Clamp1 (1), X11Clamp11 (11), X11Clamp12 (12), X11Clamp13 (13), X11Clamp14 (14), X11Clamp15 (15), X11Clamp16 (16), X11Clamp17 (17), X11Clamp18 (18), X11Clamp2 (2), X11Clamp3 (3), X11Clamp4 (4), X11Clamp5 (5), X11Clamp6 (6), X11Clamp7 (7), X11Clamp8 (8), X12Clamp16 (34), X12Clamp18 (36)
    """
    value__ = ...
    X11Clamp1: ReferenceSwitchInput = ...
    X11Clamp11: ReferenceSwitchInput = ...
    X11Clamp12: ReferenceSwitchInput = ...
    X11Clamp13: ReferenceSwitchInput = ...
    X11Clamp14: ReferenceSwitchInput = ...
    X11Clamp15: ReferenceSwitchInput = ...
    X11Clamp16: ReferenceSwitchInput = ...
    X11Clamp17: ReferenceSwitchInput = ...
    X11Clamp18: ReferenceSwitchInput = ...
    X11Clamp2: ReferenceSwitchInput = ...
    X11Clamp3: ReferenceSwitchInput = ...
    X11Clamp4: ReferenceSwitchInput = ...
    X11Clamp5: ReferenceSwitchInput = ...
    X11Clamp6: ReferenceSwitchInput = ...
    X11Clamp7: ReferenceSwitchInput = ...
    X11Clamp8: ReferenceSwitchInput = ...
    X12Clamp16: ReferenceSwitchInput = ...
    X12Clamp18: ReferenceSwitchInput = ...


class RelationMeasuredVariable(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property RelationMeasuredVariable

    enum RelationMeasuredVariable, values: Disable (0), LineConductor1 (1), LineConductor2 (2), LineConductor3 (3), Module (5), NeutralConductor (4)
    """
    Disable: RelationMeasuredVariable = ...
    LineConductor1: RelationMeasuredVariable = ...
    LineConductor2: RelationMeasuredVariable = ...
    LineConductor3: RelationMeasuredVariable = ...
    Module: RelationMeasuredVariable = ...
    NeutralConductor: RelationMeasuredVariable = ...
    value__ = ...


class ResetWhenCountingLimitIsViolated(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ResetWhenCountingLimitIsViolated

    enum ResetWhenCountingLimitIsViolated, values: ToOppositeCountingLimit (0), ToStartValue (1)
    """
    ToOppositeCountingLimit: ResetWhenCountingLimitIsViolated = ...
    ToStartValue: ResetWhenCountingLimitIsViolated = ...
    value__ = ...


class ResponseToOverload(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ResponseToOverload

    enum ResponseToOverload, values: ShutdownWithoutRestart (0), ShutdownWithRestart (1), Warn (2)
    """
    ShutdownWithoutRestart: ResponseToOverload = ...
    ShutdownWithRestart: ResponseToOverload = ...
    value__ = ...
    Warn: ResponseToOverload = ...


class ResponseToOvershoot(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ResponseToOvershoot

    enum ResponseToOvershoot, values: Deactivated (0), Signal (1), Trip (3), Warn (2)
    """
    Deactivated: ResponseToOvershoot = ...
    Signal: ResponseToOvershoot = ...
    Trip: ResponseToOvershoot = ...
    value__ = ...
    Warn: ResponseToOvershoot = ...


class ResponseToPrewarning(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ResponseToPrewarning

    enum ResponseToPrewarning, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: ResponseToPrewarning = ...
    Signal: ResponseToPrewarning = ...
    value__ = ...
    Warn: ResponseToPrewarning = ...


class ResponseToResidualCurrentDetection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ResponseToResidualCurrentDetection

    enum ResponseToResidualCurrentDetection, values: Trip (1), Warn (0)
    """
    Trip: ResponseToResidualCurrentDetection = ...
    value__ = ...
    Warn: ResponseToResidualCurrentDetection = ...


class ResponseToThermalMotorModelAtRestart(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ResponseToThermalMotorModelAtRestart

    enum ResponseToThermalMotorModelAtRestart, values: ResetThermalMotorModel (1), RestartWithLastValueOfThermalMotorModel (0)
    """
    ResetThermalMotorModel: ResponseToThermalMotorModelAtRestart = ...
    RestartWithLastValueOfThermalMotorModel: ResponseToThermalMotorModelAtRestart = ...
    value__ = ...


class RetentiveDataMemoryUsage(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property RetentiveDataMemoryUsage

    enum RetentiveDataMemoryUsage, values: NvramOfThePcSystem (1), PcMassStorage (0)
    """
    NvramOfThePcSystem: RetentiveDataMemoryUsage = ...
    PcMassStorage: RetentiveDataMemoryUsage = ...
    value__ = ...


class ReverseCurrentDirection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ReverseCurrentDirection

    enum ReverseCurrentDirection, values: Activated (1), Deactivated (0)
    """
    Activated: ReverseCurrentDirection = ...
    Deactivated: ReverseCurrentDirection = ...
    value__ = ...


class RtClass(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property RtClass

    enum RtClass, values: IRT (2), None (0), RT (1)
    """
    IRT: RtClass = ...
    RT: RtClass = ...
    value__ = ...


class RunCurrent(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property RunCurrent

    enum RunCurrent, values: CouldNotCalculateTheDynamicDisplayName (1), CouldNotCalculateTheDynamicDisplayName10 (10), CouldNotCalculateTheDynamicDisplayName11 (11), CouldNotCalculateTheDynamicDisplayName12 (12), CouldNotCalculateTheDynamicDisplayName13 (13), CouldNotCalculateTheDynamicDisplayName14 (14), CouldNotCalculateTheDynamicDisplayName15 (15), CouldNotCalculateTheDynamicDisplayName16 (16), CouldNotCalculateTheDynamicDisplayName17 (17), CouldNotCalculateTheDynamicDisplayName18 (18), CouldNotCalculateTheDynamicDisplayName19 (19), CouldNotCalculateTheDynamicDisplayName2 (2), CouldNotCalculateTheDynamicDisplayName20 (20), CouldNotCalculateTheDynamicDisplayName21 (21), CouldNotCalculateTheDynamicDisplayName22 (22), CouldNotCalculateTheDynamicDisplayName23 (23), CouldNotCalculateTheDynamicDisplayName24 (24), CouldNotCalculateTheDynamicDisplayName25 (25), CouldNotCalculateTheDynamicDisplayName26 (26), CouldNotCalculateTheDynamicDisplayName27 (27), CouldNotCalculateTheDynamicDisplayName28 (28), CouldNotCalculateTheDynamicDisplayName29 (29), CouldNotCalculateTheDynamicDisplayName3 (3), CouldNotCalculateTheDynamicDisplayName30 (30), CouldNotCalculateTheDynamicDisplayName31 (31), CouldNotCalculateTheDynamicDisplayName32 (32), CouldNotCalculateTheDynamicDisplayName33 (33), CouldNotCalculateTheDynamicDisplayName34 (34), CouldNotCalculateTheDynamicDisplayName35 (35), CouldNotCalculateTheDynamicDisplayName4 (4), CouldNotCalculateTheDynamicDisplayName5 (5), CouldNotCalculateTheDynamicDisplayName6 (6), CouldNotCalculateTheDynamicDisplayName7 (7), CouldNotCalculateTheDynamicDisplayName8 (8), CouldNotCalculateTheDynamicDisplayName9 (9), Value0 (0)
    """
    CouldNotCalculateTheDynamicDisplayName: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName10: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName11: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName12: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName13: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName14: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName15: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName16: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName17: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName18: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName19: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName2: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName20: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName21: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName22: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName23: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName24: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName25: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName26: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName27: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName28: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName29: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName3: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName30: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName31: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName32: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName33: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName34: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName35: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName4: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName5: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName6: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName7: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName8: RunCurrent = ...
    CouldNotCalculateTheDynamicDisplayName9: RunCurrent = ...
    Value0: RunCurrent = ...
    value__ = ...


class RunningCurrentIncreaseTime(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property RunningCurrentIncreaseTime

    enum RunningCurrentIncreaseTime, values: Value1 (0), Value10 (5), Value100 (12), Value1000 (15), Value12 (6), Value14 (7), Value16 (8), Value2 (1), Value20 (9), Value200 (13), Value4 (2), Value40 (10), Value500 (14), Value6 (3), Value60 (11), Value8 (4)
    """
    Value1: RunningCurrentIncreaseTime = ...
    Value10: RunningCurrentIncreaseTime = ...
    Value100: RunningCurrentIncreaseTime = ...
    Value1000: RunningCurrentIncreaseTime = ...
    Value12: RunningCurrentIncreaseTime = ...
    Value14: RunningCurrentIncreaseTime = ...
    Value16: RunningCurrentIncreaseTime = ...
    Value2: RunningCurrentIncreaseTime = ...
    Value20: RunningCurrentIncreaseTime = ...
    Value200: RunningCurrentIncreaseTime = ...
    Value4: RunningCurrentIncreaseTime = ...
    Value40: RunningCurrentIncreaseTime = ...
    Value500: RunningCurrentIncreaseTime = ...
    Value6: RunningCurrentIncreaseTime = ...
    Value60: RunningCurrentIncreaseTime = ...
    Value8: RunningCurrentIncreaseTime = ...
    value__ = ...


class SafetyRelatedTrippingReset(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SafetyRelatedTrippingReset

    enum SafetyRelatedTrippingReset, values: Auto (1), Manual (0)
    """
    Auto: SafetyRelatedTrippingReset = ...
    Manual: SafetyRelatedTrippingReset = ...
    value__ = ...


class SafetyRelatedTrippingResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SafetyRelatedTrippingResponse

    enum SafetyRelatedTrippingResponse, values: Deactivated (0), Signal (1), Trip (3), Warn (2)
    """
    Deactivated: SafetyRelatedTrippingResponse = ...
    Signal: SafetyRelatedTrippingResponse = ...
    Trip: SafetyRelatedTrippingResponse = ...
    value__ = ...
    Warn: SafetyRelatedTrippingResponse = ...


class SelectLevel(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SelectLevel

    enum SelectLevel, values: ActiveWithHighLevel (0), ActiveWithLowLevel (1)
    """
    ActiveWithHighLevel: SelectLevel = ...
    ActiveWithLowLevel: SelectLevel = ...
    value__ = ...


class SelectLevelDI0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SelectLevelDI0

    enum SelectLevelDI0, values: ActiveWithHighLevel (0), ActiveWithLowLevel (1)
    """
    ActiveWithHighLevel: SelectLevelDI0 = ...
    ActiveWithLowLevel: SelectLevelDI0 = ...
    value__ = ...


class SelectLevelDI1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SelectLevelDI1

    enum SelectLevelDI1, values: ActiveWithHighLevel (0), ActiveWithLowLevel (1)
    """
    ActiveWithHighLevel: SelectLevelDI1 = ...
    ActiveWithLowLevel: SelectLevelDI1 = ...
    value__ = ...


class SelectLevelDI2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SelectLevelDI2

    enum SelectLevelDI2, values: ActiveWithHighLevel (0), ActiveWithLowLevel (1)
    """
    ActiveWithHighLevel: SelectLevelDI2 = ...
    ActiveWithLowLevel: SelectLevelDI2 = ...
    value__ = ...


class SensorType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SensorType

    enum SensorType, values: ChangeoverUnwired (5), ChangeoverWiredWith10Kilohms (6), DifferentialSignal5V (0), NamurChangeoverContact (4), NamurSensor (1), SingleContactUnwired (2), SingleContactWiredWith10Kilohms (3)
    """
    ChangeoverUnwired: SensorType = ...
    ChangeoverWiredWith10Kilohms: SensorType = ...
    DifferentialSignal5V: SensorType = ...
    NamurChangeoverContact: SensorType = ...
    NamurSensor: SensorType = ...
    SingleContactUnwired: SensorType = ...
    SingleContactWiredWith10Kilohms: SensorType = ...
    value__ = ...


class SerialProtocolMode(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SerialProtocolMode

    enum SerialProtocolMode, values: Ascii (48), ModbusMaster (6145), ModbusSlave (6146), None (0), Printer (50), Rk512 (32), Value3964R (49)
    """
    Ascii: SerialProtocolMode = ...
    ModbusMaster: SerialProtocolMode = ...
    ModbusSlave: SerialProtocolMode = ...
    Printer: SerialProtocolMode = ...
    Rk512: SerialProtocolMode = ...
    Value3964R: SerialProtocolMode = ...
    value__ = ...


class SetOutputDO(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SetOutputDO

    enum SetOutputDO, values: BetweenComparisonValueAndHighCountingLimit (1), BetweenComparisonValueAndLowCountingLimit (2), Deactivated (8), OffDqEqualTo0 (0)
    """
    BetweenComparisonValueAndHighCountingLimit: SetOutputDO = ...
    BetweenComparisonValueAndLowCountingLimit: SetOutputDO = ...
    Deactivated: SetOutputDO = ...
    OffDqEqualTo0: SetOutputDO = ...
    value__ = ...


class SetOutputDQ0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SetOutputDQ0

    enum SetOutputDQ0, values: AfterSetCommandFromCpuUntilCompValue0 (5), AtComparisonValue0ForAPulseDuration (3), BetweenComparisonValue0AndHighLimit (1), BetweenComparisonValue0AndLowLimit (2), MeasuredValueGeaterthanEqualtoComparisonValue0 (7), MeasuredValueLessthanEqualtoComparisonValue0 (6), UseByUserProgram (0)
    """
    AfterSetCommandFromCpuUntilCompValue0: SetOutputDQ0 = ...
    AtComparisonValue0ForAPulseDuration: SetOutputDQ0 = ...
    BetweenComparisonValue0AndHighLimit: SetOutputDQ0 = ...
    BetweenComparisonValue0AndLowLimit: SetOutputDQ0 = ...
    MeasuredValueGeaterthanEqualtoComparisonValue0: SetOutputDQ0 = ...
    MeasuredValueLessthanEqualtoComparisonValue0: SetOutputDQ0 = ...
    UseByUserProgram: SetOutputDQ0 = ...
    value__ = ...


class SetOutputDQ1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SetOutputDQ1

    enum SetOutputDQ1, values: AfterSetCommandFromCpuUntilCompValue1 (5), AtComparisonValue1ForAPulseDuration (3), BetweenComparisonValue0And1 (4), BetweenComparisonValue1AndHighLimit (1), BetweenComparisonValue1AndLowLimit (2), MeasuredValueGeaterthanEqualtoComparisonValue1 (7), MeasuredValueLessthanEqualtoComparisonValue1 (6), NotBetweenComparisonValue0And1 (9), UseByUserProgram (0)
    """
    AfterSetCommandFromCpuUntilCompValue1: SetOutputDQ1 = ...
    AtComparisonValue1ForAPulseDuration: SetOutputDQ1 = ...
    BetweenComparisonValue0And1: SetOutputDQ1 = ...
    BetweenComparisonValue1AndHighLimit: SetOutputDQ1 = ...
    BetweenComparisonValue1AndLowLimit: SetOutputDQ1 = ...
    MeasuredValueGeaterthanEqualtoComparisonValue1: SetOutputDQ1 = ...
    MeasuredValueLessthanEqualtoComparisonValue1: SetOutputDQ1 = ...
    NotBetweenComparisonValue0And1: SetOutputDQ1 = ...
    UseByUserProgram: SetOutputDQ1 = ...
    value__ = ...


class SharedDeviceCopyOfModule(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SharedDeviceCopyOfModule

    enum SharedDeviceCopyOfModule, values: None (0), Value1AdditionalCopyOfAnInput (1), Value2AdditionalCopiesOfAnInput (2), Value3AdditionalCopiesOfAnInput (3)
    """
    Value1AdditionalCopyOfAnInput: SharedDeviceCopyOfModule = ...
    Value2AdditionalCopiesOfAnInput: SharedDeviceCopyOfModule = ...
    Value3AdditionalCopiesOfAnInput: SharedDeviceCopyOfModule = ...
    value__ = ...


class SignalConditioning1Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SignalConditioning1Type

    enum SignalConditioning1Type, values: EdgeFallingWithMemory (3), EdgeRisingWithMemory (2), Inverting (1), NonInverting (0)
    """
    EdgeFallingWithMemory: SignalConditioning1Type = ...
    EdgeRisingWithMemory: SignalConditioning1Type = ...
    Inverting: SignalConditioning1Type = ...
    NonInverting: SignalConditioning1Type = ...
    value__ = ...


class SignalConditioning2Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SignalConditioning2Type

    enum SignalConditioning2Type, values: EdgeFallingWithMemory (3), EdgeRisingWithMemory (2), Inverting (1), NonInverting (0)
    """
    EdgeFallingWithMemory: SignalConditioning2Type = ...
    EdgeRisingWithMemory: SignalConditioning2Type = ...
    Inverting: SignalConditioning2Type = ...
    NonInverting: SignalConditioning2Type = ...
    value__ = ...


class SignalConditioning3Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SignalConditioning3Type

    enum SignalConditioning3Type, values: EdgeFallingWithMemory (3), EdgeRisingWithMemory (2), Inverting (1), NonInverting (0)
    """
    EdgeFallingWithMemory: SignalConditioning3Type = ...
    EdgeRisingWithMemory: SignalConditioning3Type = ...
    Inverting: SignalConditioning3Type = ...
    NonInverting: SignalConditioning3Type = ...
    value__ = ...


class SignalConditioning4Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SignalConditioning4Type

    enum SignalConditioning4Type, values: EdgeFallingWithMemory (3), EdgeRisingWithMemory (2), Inverting (1), NonInverting (0)
    """
    EdgeFallingWithMemory: SignalConditioning4Type = ...
    EdgeRisingWithMemory: SignalConditioning4Type = ...
    Inverting: SignalConditioning4Type = ...
    NonInverting: SignalConditioning4Type = ...
    value__ = ...


class SignalConditioning5Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SignalConditioning5Type

    enum SignalConditioning5Type, values: EdgeFallingWithMemory (3), EdgeRisingWithMemory (2), Inverting (1), NonInverting (0)
    """
    EdgeFallingWithMemory: SignalConditioning5Type = ...
    EdgeRisingWithMemory: SignalConditioning5Type = ...
    Inverting: SignalConditioning5Type = ...
    NonInverting: SignalConditioning5Type = ...
    value__ = ...


class SignalConditioning6Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SignalConditioning6Type

    enum SignalConditioning6Type, values: EdgeFallingWithMemory (3), EdgeRisingWithMemory (2), Inverting (1), NonInverting (0)
    """
    EdgeFallingWithMemory: SignalConditioning6Type = ...
    EdgeRisingWithMemory: SignalConditioning6Type = ...
    Inverting: SignalConditioning6Type = ...
    NonInverting: SignalConditioning6Type = ...
    value__ = ...


class SignalDelaySelection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SignalDelaySelection

    enum SignalDelaySelection, values: CableLength (1), None (0), SignalDelayTime (2)
    """
    CableLength: SignalDelaySelection = ...
    SignalDelayTime: SignalDelaySelection = ...
    value__ = ...


class SignalEvaluation(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SignalEvaluation

    enum SignalEvaluation, values: Double (1), Quadruple (2), Single (0)
    """
    Double: SignalEvaluation = ...
    Quadruple: SignalEvaluation = ...
    Single: SignalEvaluation = ...
    value__ = ...


class SignalSelectionForReferenceMark0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SignalSelectionForReferenceMark0

    enum SignalSelectionForReferenceMark0, values: Di0 (1), None (3), SignalNOfIncrementalEncoder (0)
    """
    Di0: SignalSelectionForReferenceMark0 = ...
    SignalNOfIncrementalEncoder: SignalSelectionForReferenceMark0 = ...
    value__ = ...


class SignalType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SignalType

    enum SignalType, values: AbsoluteEncoderSsi (5), CountUpACountDownB (2), IncrementalEncoderABN (4), IncrementalEncoderABPhaseShifted (3), IncrementalEncoderABPhaseShiftedQuadruple (131), PulseA (0), PulseAAndDirectionB (1), PulsePAndDirectionD (132)
    """
    AbsoluteEncoderSsi: SignalType = ...
    CountUpACountDownB: SignalType = ...
    IncrementalEncoderABN: SignalType = ...
    IncrementalEncoderABPhaseShifted: SignalType = ...
    IncrementalEncoderABPhaseShiftedQuadruple: SignalType = ...
    PulseA: SignalType = ...
    PulseAAndDirectionB: SignalType = ...
    PulsePAndDirectionD: SignalType = ...
    value__ = ...


class SimocodeAnalogConnections(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SimocodeAnalogConnections

    enum SimocodeAnalogConnections, values: ActivePowerHWord (70), ActivePowerLWord (71), AcyclicReceiveAnalogValue (48), AnalogModule1Input1 (44), AnalogModule1Input2 (45), AnalogModule2Input1 (120), AnalogModule2Input2 (121), AnalogMultiplexerOutput (93), ApparentPowerHWord (72), ApparentPowerLWord (73), Calculator1Output (86), Calculator2Output (90), Calculator3Output (91), Calculator4Output (92), ConsumedEnergyHWord (64), ConsumedEnergyLWord (65), CosPhi (27), Counter1ActualValue (8), Counter2ActualValue (9), Counter3ActualValue (10), Counter4ActualValue (11), Counter5ActualValue (12), Counter6ActualValue (13), CurrentIL1100Ma (109), CurrentIL110Ma (105), CurrentIL1PercentageOfIs (17), CurrentIL2100Ma (110), CurrentIL210Ma (106), CurrentIL2PercentageOfIs (18), CurrentIL3100Ma (111), CurrentIL310Ma (107), CurrentIL3PercentageOfIs (19), CyclicReceiveAnalogValue (49), CyclicReceiveAnalogValue1 (122), CyclicReceiveAnalogValue2 (50), DeviceOperatingHoursHWord (56), DeviceOperatingHoursLWord (57), EmGroundFaultCurrent (47), EmLastTrippingCurrent (43), ExternalGroundFault3Uf7510GroundFaultCurrent (67), FixedLevel (1), Frequency (28), InternalGroundFaultGroundFaultCurrent (21), InternalGroundFaultLastTrippingCurrent (22), IntMotorOperatingHoursHWord (54), IntMotorOperatingHoursLWord (55), IntNumberOfOverloadTrips (31), IntNumberOfStartsCcwHWord (62), IntNumberOfStartsCcwLWord (63), IntNumberOfStartsCwHWord (60), IntNumberOfStartsCwLWord (61), LastTripCurrentPercentageOfIs (35), LineToLineVoltageUl1L2 (24), LineToLineVoltageUl2L3 (25), LineToLineVoltageUl3L1 (26), MaxCurrentIMax100Ma (108), MaxCurrentIMax10Ma (104), MaxCurrentIMaxPercentageOfIs (16), MonitoringIntervalForMandatoryTestingTimeUntilTest (42), MotorOperatingHoursHWord (52), MotorOperatingHoursLWord (53), NotConnected (0), NumberOfOverloadTrips (30), NumberOfParameterizations (51), NumberOfStartsHWord (58), NumberOfStartsLWord (59), OpcUaReceiveAnalogValue (123), PermissibleStartsActualValue (40), PhaseUnbalance (20), PhaseVoltageUL1N (124), PhaseVoltageUL2N (125), PhaseVoltageUL3N (126), RemainingCoolingDownPeriod (34), StopTime (41), TemperatureModule1MaxTemperature (36), TemperatureModule1Temperature1 (37), TemperatureModule1Temperature2 (38), TemperatureModule1Temperature3 (39), TemperatureModule2MaxTemperature (116), TemperatureModule2Temperature1 (117), TemperatureModule2Temperature2 (118), TemperatureModule2Temperature3 (119), ThermalMotorModel (32), Timer1ActualValue (4), Timer2ActualValue (5), Timer3ActualValue (6), Timer4ActualValue (7), Timer5ActualValue (14), Timer6ActualValue (15), TimeToTrip (33), VoltageUMin (23)
    """
    ActivePowerHWord: SimocodeAnalogConnections = ...
    ActivePowerLWord: SimocodeAnalogConnections = ...
    AcyclicReceiveAnalogValue: SimocodeAnalogConnections = ...
    AnalogModule1Input1: SimocodeAnalogConnections = ...
    AnalogModule1Input2: SimocodeAnalogConnections = ...
    AnalogModule2Input1: SimocodeAnalogConnections = ...
    AnalogModule2Input2: SimocodeAnalogConnections = ...
    AnalogMultiplexerOutput: SimocodeAnalogConnections = ...
    ApparentPowerHWord: SimocodeAnalogConnections = ...
    ApparentPowerLWord: SimocodeAnalogConnections = ...
    Calculator1Output: SimocodeAnalogConnections = ...
    Calculator2Output: SimocodeAnalogConnections = ...
    Calculator3Output: SimocodeAnalogConnections = ...
    Calculator4Output: SimocodeAnalogConnections = ...
    ConsumedEnergyHWord: SimocodeAnalogConnections = ...
    ConsumedEnergyLWord: SimocodeAnalogConnections = ...
    CosPhi: SimocodeAnalogConnections = ...
    Counter1ActualValue: SimocodeAnalogConnections = ...
    Counter2ActualValue: SimocodeAnalogConnections = ...
    Counter3ActualValue: SimocodeAnalogConnections = ...
    Counter4ActualValue: SimocodeAnalogConnections = ...
    Counter5ActualValue: SimocodeAnalogConnections = ...
    Counter6ActualValue: SimocodeAnalogConnections = ...
    CurrentIL1100Ma: SimocodeAnalogConnections = ...
    CurrentIL110Ma: SimocodeAnalogConnections = ...
    CurrentIL1PercentageOfIs: SimocodeAnalogConnections = ...
    CurrentIL2100Ma: SimocodeAnalogConnections = ...
    CurrentIL210Ma: SimocodeAnalogConnections = ...
    CurrentIL2PercentageOfIs: SimocodeAnalogConnections = ...
    CurrentIL3100Ma: SimocodeAnalogConnections = ...
    CurrentIL310Ma: SimocodeAnalogConnections = ...
    CurrentIL3PercentageOfIs: SimocodeAnalogConnections = ...
    CyclicReceiveAnalogValue: SimocodeAnalogConnections = ...
    CyclicReceiveAnalogValue1: SimocodeAnalogConnections = ...
    CyclicReceiveAnalogValue2: SimocodeAnalogConnections = ...
    DeviceOperatingHoursHWord: SimocodeAnalogConnections = ...
    DeviceOperatingHoursLWord: SimocodeAnalogConnections = ...
    EmGroundFaultCurrent: SimocodeAnalogConnections = ...
    EmLastTrippingCurrent: SimocodeAnalogConnections = ...
    ExternalGroundFault3Uf7510GroundFaultCurrent: SimocodeAnalogConnections = ...
    FixedLevel: SimocodeAnalogConnections = ...
    Frequency: SimocodeAnalogConnections = ...
    InternalGroundFaultGroundFaultCurrent: SimocodeAnalogConnections = ...
    InternalGroundFaultLastTrippingCurrent: SimocodeAnalogConnections = ...
    IntMotorOperatingHoursHWord: SimocodeAnalogConnections = ...
    IntMotorOperatingHoursLWord: SimocodeAnalogConnections = ...
    IntNumberOfOverloadTrips: SimocodeAnalogConnections = ...
    IntNumberOfStartsCcwHWord: SimocodeAnalogConnections = ...
    IntNumberOfStartsCcwLWord: SimocodeAnalogConnections = ...
    IntNumberOfStartsCwHWord: SimocodeAnalogConnections = ...
    IntNumberOfStartsCwLWord: SimocodeAnalogConnections = ...
    LastTripCurrentPercentageOfIs: SimocodeAnalogConnections = ...
    LineToLineVoltageUl1L2: SimocodeAnalogConnections = ...
    LineToLineVoltageUl2L3: SimocodeAnalogConnections = ...
    LineToLineVoltageUl3L1: SimocodeAnalogConnections = ...
    MaxCurrentIMax100Ma: SimocodeAnalogConnections = ...
    MaxCurrentIMax10Ma: SimocodeAnalogConnections = ...
    MaxCurrentIMaxPercentageOfIs: SimocodeAnalogConnections = ...
    MonitoringIntervalForMandatoryTestingTimeUntilTest: SimocodeAnalogConnections = ...
    MotorOperatingHoursHWord: SimocodeAnalogConnections = ...
    MotorOperatingHoursLWord: SimocodeAnalogConnections = ...
    NotConnected: SimocodeAnalogConnections = ...
    NumberOfOverloadTrips: SimocodeAnalogConnections = ...
    NumberOfParameterizations: SimocodeAnalogConnections = ...
    NumberOfStartsHWord: SimocodeAnalogConnections = ...
    NumberOfStartsLWord: SimocodeAnalogConnections = ...
    OpcUaReceiveAnalogValue: SimocodeAnalogConnections = ...
    PermissibleStartsActualValue: SimocodeAnalogConnections = ...
    PhaseUnbalance: SimocodeAnalogConnections = ...
    PhaseVoltageUL1N: SimocodeAnalogConnections = ...
    PhaseVoltageUL2N: SimocodeAnalogConnections = ...
    PhaseVoltageUL3N: SimocodeAnalogConnections = ...
    RemainingCoolingDownPeriod: SimocodeAnalogConnections = ...
    StopTime: SimocodeAnalogConnections = ...
    TemperatureModule1MaxTemperature: SimocodeAnalogConnections = ...
    TemperatureModule1Temperature1: SimocodeAnalogConnections = ...
    TemperatureModule1Temperature2: SimocodeAnalogConnections = ...
    TemperatureModule1Temperature3: SimocodeAnalogConnections = ...
    TemperatureModule2MaxTemperature: SimocodeAnalogConnections = ...
    TemperatureModule2Temperature1: SimocodeAnalogConnections = ...
    TemperatureModule2Temperature2: SimocodeAnalogConnections = ...
    TemperatureModule2Temperature3: SimocodeAnalogConnections = ...
    ThermalMotorModel: SimocodeAnalogConnections = ...
    Timer1ActualValue: SimocodeAnalogConnections = ...
    Timer2ActualValue: SimocodeAnalogConnections = ...
    Timer3ActualValue: SimocodeAnalogConnections = ...
    Timer4ActualValue: SimocodeAnalogConnections = ...
    Timer5ActualValue: SimocodeAnalogConnections = ...
    Timer6ActualValue: SimocodeAnalogConnections = ...
    TimeToTrip: SimocodeAnalogConnections = ...
    value__ = ...
    VoltageUMin: SimocodeAnalogConnections = ...


class SimocodeDigitalConnections(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SimocodeDigitalConnections

    enum SimocodeDigitalConnections, values: AcyclicReceiveByte0Bit0 (40), AcyclicReceiveByte0Bit1 (41), AcyclicReceiveByte0Bit2 (42), AcyclicReceiveByte0Bit3 (43), AcyclicReceiveByte0Bit4 (44), AcyclicReceiveByte0Bit5 (45), AcyclicReceiveByte0Bit6 (46), AcyclicReceiveByte0Bit7 (47), AcyclicReceiveByte1Bit0 (48), AcyclicReceiveByte1Bit1 (49), AcyclicReceiveByte1Bit2 (50), AcyclicReceiveByte1Bit3 (51), AcyclicReceiveByte1Bit4 (52), AcyclicReceiveByte1Bit5 (53), AcyclicReceiveByte1Bit6 (54), AcyclicReceiveByte1Bit7 (55), BuInput1 (9), BuInput2 (10), BuInput3 (11), BuInput4 (12), BuTestOrResetButton (8), ClosePositioner (256), CloseSolenoidValve (255), ContactorControl1Qe1 (80), ContactorControl2Qe2 (81), ContactorControl3Qe3 (82), ContactorControl4Qe4 (83), ContactorControl5Qe5 (84), Counter1Output (236), Counter2Output (237), Counter3Output (238), Counter4Output (239), Counter5Output (228), Counter6Output (229), CyclicReceiveByte0Bit0 (56), CyclicReceiveByte0Bit1 (57), CyclicReceiveByte0Bit2 (58), CyclicReceiveByte0Bit3 (59), CyclicReceiveByte0Bit4 (60), CyclicReceiveByte0Bit5 (61), CyclicReceiveByte0Bit6 (62), CyclicReceiveByte0Bit7 (63), CyclicReceiveByte1Bit0 (64), CyclicReceiveByte1Bit1 (65), CyclicReceiveByte1Bit2 (66), CyclicReceiveByte1Bit3 (67), CyclicReceiveByte1Bit4 (68), CyclicReceiveByte1Bit5 (69), CyclicReceiveByte1Bit6 (70), CyclicReceiveByte1Bit7 (71), DisplayQlaOff (90), DisplayQleForward (91), DisplayQleForwardFast (92), DisplayQleReverse (89), DisplayQleReversefast (88), DisplayQlsFault (93), Dm1CascadingInput (19), Dm1FeedbackCircuitDmfl (18), Dm1FeedbackCircuitDmfp (240), Dm1Input1 (241), Dm1Input2 (17), Dm1Input3 (242), Dm1Input4 (243), Dm1InputDMFL (16), Dm1SensorChannel1 (24), Dm1SensorChannel2 (25), Dm1Start (244), Dm2Input1 (20), Dm2Input2 (21), Dm2Input3 (22), Dm2Input4 (23), DryRunningProtectionTripLevel (199), EventAm1OpenCircuit (180), EventAm1TripLevelLowerLimit (159), EventAm1TripLevelUpperLimit (158), EventAm1WarningLeveLowerLimit (151), EventAm1WarningLevelUpperLimit (150), EventAm2OpenCircuit (179), EventAm2TripLevelLowerLimit (7), EventAm2TripLevelUpperLimit (6), EventAm2WarningLevelLowerLimit (5), EventAm2WarningLevelUpperLimit (4), EventConfiguredOperatorPanelMissing (188), EventDmFLocalOK (186), EventEmOpenCircuit (142), EventEmShortCircuit (143), EventExternalFault1 (172), EventExternalFault2 (173), EventExternalFault3 (174), EventExternalFault4 (175), EventExternalFault5 (176), EventExternalFault6 (177), EventExternalGroundFault (133), EventExternalGroundFaultWarning (134), EventInternalGroundFault (132), EventInternalGroundFaultWarning (161), EventJustOneStartPossible (165), EventLimitMonitor1 (168), EventLimitMonitor2 (169), EventLimitMonitor3 (170), EventLimitMonitor4 (171), EventLimitMonitor5 (38), EventLimitMonitor6 (39), EventMonitoringPeriodForMandatoryTestingTestRequirement (182), EventMotorOperatingHours (166), EventNoStartPermitted (163), EventNumberOfStarts (164), EventOverload (130), EventOverloadAndPhaseFailure (131), EventPrewarningOverload (128), EventProfisafeActive (187), EventSafetyRelatedTripping (181), EventStalledRotor (160), EventStopTime (167), EventThermistorOpenCircuit (137), EventThermistorShortCircuit (136), EventThermistorTripLevel (135), EventTimestampfctActive (184), EventTm1OutOfRange (141), EventTm1SensorFault (140), EventTm1TripLevelUpperLimit (139), EventTm1WarningLevelUpperLimit (138), EventTm2OutOfRange (29), EventTm2SensorFault (28), EventTm2TripLevelUpperLimit (31), EventTm2WarningLevelUpperLimit (30), EventTripLevelCosPhi (156), EventTripLevelILowerLimit (153), EventTripLevelIUpperLimit (152), EventTripLevelPLowerLimit (155), EventTripLevelPUpperLimit (154), EventTripLevelULowerLimit (157), EventUnbalance (129), EventWarningLevelCosPhi (148), EventWarningLevelILowerLimit (145), EventWarningLevelIUpperLimit (144), EventWarningLevelPLowerLimit (147), EventWarningLevelPUpperLimit (146), EventWarningLevelULowerLimit (149), FaultAntivalence (208), FaultBus (197), FaultConfigurationError (195), FaultDouble0 (205), FaultDouble1 (206), FaultEndPosition (207), FaultExecutionOnCommand (200), FaultExecutionStopCommand (201), FaultFeedbackOff (203), FaultFeedbackOn (202), FaultHardwareFaultBasicUnit (192), FaultModuleFault (193), FaultOperationalProtectionOff (211), FaultParameterization (196), FaultPlcDcs (198), FaultPowerFailure (210), FaultStalledPositioner (204), FaultTemporaryComponents (194), FaultTestPositionFeedback (209), FixedLevel0 (1), FixedLevel1 (2), Flashing1Output (248), Flashing2Output (249), Flashing3Output (250), Flicker1Output (251), Flicker2Output (252), Flicker3Output (253), NonVolatileElement1Output (254), NonVolatileElement2Output (245), NonVolatileElement3Output (246), NonVolatileElement4Output (247), NotConnected (0), OffEnabledControlCommand (74), OnForwardEnabledControlCommand (75), OnForwardFastEnabledControlCommand (76), OnReverseEnabledControlCommand (73), OnReverseFastEnabledControlCommand (72), OpButton1 (33), OpButton2 (34), OpButton3 (35), OpButton4 (36), OpcUaReceiveByte0Bit0 (257), OpcUaReceiveByte0Bit1 (258), OpcUaReceiveByte0Bit2 (259), OpcUaReceiveByte0Bit3 (260), OpcUaReceiveByte0Bit4 (261), OpcUaReceiveByte0Bit5 (262), OpcUaReceiveByte0Bit6 (263), OpcUaReceiveByte0Bit7 (264), OpcUaReceiveByte1Bit0 (265), OpcUaReceiveByte1Bit1 (266), OpcUaReceiveByte1Bit2 (267), OpcUaReceiveByte1Bit3 (268), OpcUaReceiveByte1Bit4 (269), OpcUaReceiveByte1Bit5 (270), OpcUaReceiveByte1Bit6 (271), OpcUaReceiveByte1Bit7 (272), Open (273), OpTestOrResetButton (32), PwmOutput (274), SignalConditioning1Output (275), SignalConditioning2Output (276), SignalConditioning3Output (277), SignalConditioning4Output (278), SignalConditioning5Output (214), SignalConditioning6Output (215), StatusBusOK (99), StatusChangeOverPauseActive (111), StatusCoolingDownPeriodActive (122), StatusCurrentFlowing (101), StatusDeviceOK (98), StatusDeviceTestActive (124), StatusEmergencyStartExecuted (121), StatusEnablingCircuitClosed (127), StatusFeedbackClosedFc (114), StatusFeedbackOpenFo (115), StatusGroupFault (96), StatusGroupWarning (97), StatusInterlockingTimeActive (110), StatusOff (106), StatusOnForward (107), StatusOnForwardFast (108), StatusOnReverse (105), StatusOnReverseFast (104), StatusOperationalProtectionOff (119), StatusPauseTimeActive (123), StatusPhaseSequence123 (125), StatusPhaseSequence321 (126), StatusPlcDcsInRun (100), StatusPositionerRunsInClosedDirection (113), StatusPositionerRunsInOpenDirection (112), StatusProfienergyCommandStartPausePending (102), StatusRemoteMode (120), StatusStartActive (109), StatusTestPositionFeedback (118), StatusTorqueClosedTc (116), StatusTorqueOpenTo (117), Stop (279), Timer1Output (232), Timer2Output (233), Timer3Output (234), Timer4Output (235), Timer5Output (230), Timer6Output (231), TruthTable10Output (226), TruthTable11Output (227), TruthTable1Output (216), TruthTable2Output (217), TruthTable3Output (218), TruthTable4Output (219), TruthTable5Output (220), TruthTable6Output (221), TruthTable7Output (222), TruthTable8Output (223), TruthTable9Output1 (224), TruthTable9Output2 (225), WarningFeedbackCircuit (190), WarningSimultaneity (191)
    """
    AcyclicReceiveByte0Bit0: SimocodeDigitalConnections = ...
    AcyclicReceiveByte0Bit1: SimocodeDigitalConnections = ...
    AcyclicReceiveByte0Bit2: SimocodeDigitalConnections = ...
    AcyclicReceiveByte0Bit3: SimocodeDigitalConnections = ...
    AcyclicReceiveByte0Bit4: SimocodeDigitalConnections = ...
    AcyclicReceiveByte0Bit5: SimocodeDigitalConnections = ...
    AcyclicReceiveByte0Bit6: SimocodeDigitalConnections = ...
    AcyclicReceiveByte0Bit7: SimocodeDigitalConnections = ...
    AcyclicReceiveByte1Bit0: SimocodeDigitalConnections = ...
    AcyclicReceiveByte1Bit1: SimocodeDigitalConnections = ...
    AcyclicReceiveByte1Bit2: SimocodeDigitalConnections = ...
    AcyclicReceiveByte1Bit3: SimocodeDigitalConnections = ...
    AcyclicReceiveByte1Bit4: SimocodeDigitalConnections = ...
    AcyclicReceiveByte1Bit5: SimocodeDigitalConnections = ...
    AcyclicReceiveByte1Bit6: SimocodeDigitalConnections = ...
    AcyclicReceiveByte1Bit7: SimocodeDigitalConnections = ...
    BuInput1: SimocodeDigitalConnections = ...
    BuInput2: SimocodeDigitalConnections = ...
    BuInput3: SimocodeDigitalConnections = ...
    BuInput4: SimocodeDigitalConnections = ...
    BuTestOrResetButton: SimocodeDigitalConnections = ...
    ClosePositioner: SimocodeDigitalConnections = ...
    CloseSolenoidValve: SimocodeDigitalConnections = ...
    ContactorControl1Qe1: SimocodeDigitalConnections = ...
    ContactorControl2Qe2: SimocodeDigitalConnections = ...
    ContactorControl3Qe3: SimocodeDigitalConnections = ...
    ContactorControl4Qe4: SimocodeDigitalConnections = ...
    ContactorControl5Qe5: SimocodeDigitalConnections = ...
    Counter1Output: SimocodeDigitalConnections = ...
    Counter2Output: SimocodeDigitalConnections = ...
    Counter3Output: SimocodeDigitalConnections = ...
    Counter4Output: SimocodeDigitalConnections = ...
    Counter5Output: SimocodeDigitalConnections = ...
    Counter6Output: SimocodeDigitalConnections = ...
    CyclicReceiveByte0Bit0: SimocodeDigitalConnections = ...
    CyclicReceiveByte0Bit1: SimocodeDigitalConnections = ...
    CyclicReceiveByte0Bit2: SimocodeDigitalConnections = ...
    CyclicReceiveByte0Bit3: SimocodeDigitalConnections = ...
    CyclicReceiveByte0Bit4: SimocodeDigitalConnections = ...
    CyclicReceiveByte0Bit5: SimocodeDigitalConnections = ...
    CyclicReceiveByte0Bit6: SimocodeDigitalConnections = ...
    CyclicReceiveByte0Bit7: SimocodeDigitalConnections = ...
    CyclicReceiveByte1Bit0: SimocodeDigitalConnections = ...
    CyclicReceiveByte1Bit1: SimocodeDigitalConnections = ...
    CyclicReceiveByte1Bit2: SimocodeDigitalConnections = ...
    CyclicReceiveByte1Bit3: SimocodeDigitalConnections = ...
    CyclicReceiveByte1Bit4: SimocodeDigitalConnections = ...
    CyclicReceiveByte1Bit5: SimocodeDigitalConnections = ...
    CyclicReceiveByte1Bit6: SimocodeDigitalConnections = ...
    CyclicReceiveByte1Bit7: SimocodeDigitalConnections = ...
    DisplayQlaOff: SimocodeDigitalConnections = ...
    DisplayQleForward: SimocodeDigitalConnections = ...
    DisplayQleForwardFast: SimocodeDigitalConnections = ...
    DisplayQleReverse: SimocodeDigitalConnections = ...
    DisplayQleReversefast: SimocodeDigitalConnections = ...
    DisplayQlsFault: SimocodeDigitalConnections = ...
    Dm1CascadingInput: SimocodeDigitalConnections = ...
    Dm1FeedbackCircuitDmfl: SimocodeDigitalConnections = ...
    Dm1FeedbackCircuitDmfp: SimocodeDigitalConnections = ...
    Dm1Input1: SimocodeDigitalConnections = ...
    Dm1Input2: SimocodeDigitalConnections = ...
    Dm1Input3: SimocodeDigitalConnections = ...
    Dm1Input4: SimocodeDigitalConnections = ...
    Dm1InputDMFL: SimocodeDigitalConnections = ...
    Dm1SensorChannel1: SimocodeDigitalConnections = ...
    Dm1SensorChannel2: SimocodeDigitalConnections = ...
    Dm1Start: SimocodeDigitalConnections = ...
    Dm2Input1: SimocodeDigitalConnections = ...
    Dm2Input2: SimocodeDigitalConnections = ...
    Dm2Input3: SimocodeDigitalConnections = ...
    Dm2Input4: SimocodeDigitalConnections = ...
    DryRunningProtectionTripLevel: SimocodeDigitalConnections = ...
    EventAm1OpenCircuit: SimocodeDigitalConnections = ...
    EventAm1TripLevelLowerLimit: SimocodeDigitalConnections = ...
    EventAm1TripLevelUpperLimit: SimocodeDigitalConnections = ...
    EventAm1WarningLeveLowerLimit: SimocodeDigitalConnections = ...
    EventAm1WarningLevelUpperLimit: SimocodeDigitalConnections = ...
    EventAm2OpenCircuit: SimocodeDigitalConnections = ...
    EventAm2TripLevelLowerLimit: SimocodeDigitalConnections = ...
    EventAm2TripLevelUpperLimit: SimocodeDigitalConnections = ...
    EventAm2WarningLevelLowerLimit: SimocodeDigitalConnections = ...
    EventAm2WarningLevelUpperLimit: SimocodeDigitalConnections = ...
    EventConfiguredOperatorPanelMissing: SimocodeDigitalConnections = ...
    EventDmFLocalOK: SimocodeDigitalConnections = ...
    EventEmOpenCircuit: SimocodeDigitalConnections = ...
    EventEmShortCircuit: SimocodeDigitalConnections = ...
    EventExternalFault1: SimocodeDigitalConnections = ...
    EventExternalFault2: SimocodeDigitalConnections = ...
    EventExternalFault3: SimocodeDigitalConnections = ...
    EventExternalFault4: SimocodeDigitalConnections = ...
    EventExternalFault5: SimocodeDigitalConnections = ...
    EventExternalFault6: SimocodeDigitalConnections = ...
    EventExternalGroundFault: SimocodeDigitalConnections = ...
    EventExternalGroundFaultWarning: SimocodeDigitalConnections = ...
    EventInternalGroundFault: SimocodeDigitalConnections = ...
    EventInternalGroundFaultWarning: SimocodeDigitalConnections = ...
    EventJustOneStartPossible: SimocodeDigitalConnections = ...
    EventLimitMonitor1: SimocodeDigitalConnections = ...
    EventLimitMonitor2: SimocodeDigitalConnections = ...
    EventLimitMonitor3: SimocodeDigitalConnections = ...
    EventLimitMonitor4: SimocodeDigitalConnections = ...
    EventLimitMonitor5: SimocodeDigitalConnections = ...
    EventLimitMonitor6: SimocodeDigitalConnections = ...
    EventMonitoringPeriodForMandatoryTestingTestRequirement: SimocodeDigitalConnections = ...
    EventMotorOperatingHours: SimocodeDigitalConnections = ...
    EventNoStartPermitted: SimocodeDigitalConnections = ...
    EventNumberOfStarts: SimocodeDigitalConnections = ...
    EventOverload: SimocodeDigitalConnections = ...
    EventOverloadAndPhaseFailure: SimocodeDigitalConnections = ...
    EventPrewarningOverload: SimocodeDigitalConnections = ...
    EventProfisafeActive: SimocodeDigitalConnections = ...
    EventSafetyRelatedTripping: SimocodeDigitalConnections = ...
    EventStalledRotor: SimocodeDigitalConnections = ...
    EventStopTime: SimocodeDigitalConnections = ...
    EventThermistorOpenCircuit: SimocodeDigitalConnections = ...
    EventThermistorShortCircuit: SimocodeDigitalConnections = ...
    EventThermistorTripLevel: SimocodeDigitalConnections = ...
    EventTimestampfctActive: SimocodeDigitalConnections = ...
    EventTm1OutOfRange: SimocodeDigitalConnections = ...
    EventTm1SensorFault: SimocodeDigitalConnections = ...
    EventTm1TripLevelUpperLimit: SimocodeDigitalConnections = ...
    EventTm1WarningLevelUpperLimit: SimocodeDigitalConnections = ...
    EventTm2OutOfRange: SimocodeDigitalConnections = ...
    EventTm2SensorFault: SimocodeDigitalConnections = ...
    EventTm2TripLevelUpperLimit: SimocodeDigitalConnections = ...
    EventTm2WarningLevelUpperLimit: SimocodeDigitalConnections = ...
    EventTripLevelCosPhi: SimocodeDigitalConnections = ...
    EventTripLevelILowerLimit: SimocodeDigitalConnections = ...
    EventTripLevelIUpperLimit: SimocodeDigitalConnections = ...
    EventTripLevelPLowerLimit: SimocodeDigitalConnections = ...
    EventTripLevelPUpperLimit: SimocodeDigitalConnections = ...
    EventTripLevelULowerLimit: SimocodeDigitalConnections = ...
    EventUnbalance: SimocodeDigitalConnections = ...
    EventWarningLevelCosPhi: SimocodeDigitalConnections = ...
    EventWarningLevelILowerLimit: SimocodeDigitalConnections = ...
    EventWarningLevelIUpperLimit: SimocodeDigitalConnections = ...
    EventWarningLevelPLowerLimit: SimocodeDigitalConnections = ...
    EventWarningLevelPUpperLimit: SimocodeDigitalConnections = ...
    EventWarningLevelULowerLimit: SimocodeDigitalConnections = ...
    FaultAntivalence: SimocodeDigitalConnections = ...
    FaultBus: SimocodeDigitalConnections = ...
    FaultConfigurationError: SimocodeDigitalConnections = ...
    FaultDouble0: SimocodeDigitalConnections = ...
    FaultDouble1: SimocodeDigitalConnections = ...
    FaultEndPosition: SimocodeDigitalConnections = ...
    FaultExecutionOnCommand: SimocodeDigitalConnections = ...
    FaultExecutionStopCommand: SimocodeDigitalConnections = ...
    FaultFeedbackOff: SimocodeDigitalConnections = ...
    FaultFeedbackOn: SimocodeDigitalConnections = ...
    FaultHardwareFaultBasicUnit: SimocodeDigitalConnections = ...
    FaultModuleFault: SimocodeDigitalConnections = ...
    FaultOperationalProtectionOff: SimocodeDigitalConnections = ...
    FaultParameterization: SimocodeDigitalConnections = ...
    FaultPlcDcs: SimocodeDigitalConnections = ...
    FaultPowerFailure: SimocodeDigitalConnections = ...
    FaultStalledPositioner: SimocodeDigitalConnections = ...
    FaultTemporaryComponents: SimocodeDigitalConnections = ...
    FaultTestPositionFeedback: SimocodeDigitalConnections = ...
    FixedLevel0: SimocodeDigitalConnections = ...
    FixedLevel1: SimocodeDigitalConnections = ...
    Flashing1Output: SimocodeDigitalConnections = ...
    Flashing2Output: SimocodeDigitalConnections = ...
    Flashing3Output: SimocodeDigitalConnections = ...
    Flicker1Output: SimocodeDigitalConnections = ...
    Flicker2Output: SimocodeDigitalConnections = ...
    Flicker3Output: SimocodeDigitalConnections = ...
    NonVolatileElement1Output: SimocodeDigitalConnections = ...
    NonVolatileElement2Output: SimocodeDigitalConnections = ...
    NonVolatileElement3Output: SimocodeDigitalConnections = ...
    NonVolatileElement4Output: SimocodeDigitalConnections = ...
    NotConnected: SimocodeDigitalConnections = ...
    OffEnabledControlCommand: SimocodeDigitalConnections = ...
    OnForwardEnabledControlCommand: SimocodeDigitalConnections = ...
    OnForwardFastEnabledControlCommand: SimocodeDigitalConnections = ...
    OnReverseEnabledControlCommand: SimocodeDigitalConnections = ...
    OnReverseFastEnabledControlCommand: SimocodeDigitalConnections = ...
    OpButton1: SimocodeDigitalConnections = ...
    OpButton2: SimocodeDigitalConnections = ...
    OpButton3: SimocodeDigitalConnections = ...
    OpButton4: SimocodeDigitalConnections = ...
    OpcUaReceiveByte0Bit0: SimocodeDigitalConnections = ...
    OpcUaReceiveByte0Bit1: SimocodeDigitalConnections = ...
    OpcUaReceiveByte0Bit2: SimocodeDigitalConnections = ...
    OpcUaReceiveByte0Bit3: SimocodeDigitalConnections = ...
    OpcUaReceiveByte0Bit4: SimocodeDigitalConnections = ...
    OpcUaReceiveByte0Bit5: SimocodeDigitalConnections = ...
    OpcUaReceiveByte0Bit6: SimocodeDigitalConnections = ...
    OpcUaReceiveByte0Bit7: SimocodeDigitalConnections = ...
    OpcUaReceiveByte1Bit0: SimocodeDigitalConnections = ...
    OpcUaReceiveByte1Bit1: SimocodeDigitalConnections = ...
    OpcUaReceiveByte1Bit2: SimocodeDigitalConnections = ...
    OpcUaReceiveByte1Bit3: SimocodeDigitalConnections = ...
    OpcUaReceiveByte1Bit4: SimocodeDigitalConnections = ...
    OpcUaReceiveByte1Bit5: SimocodeDigitalConnections = ...
    OpcUaReceiveByte1Bit6: SimocodeDigitalConnections = ...
    OpcUaReceiveByte1Bit7: SimocodeDigitalConnections = ...
    Open: SimocodeDigitalConnections = ...
    OpTestOrResetButton: SimocodeDigitalConnections = ...
    PwmOutput: SimocodeDigitalConnections = ...
    SignalConditioning1Output: SimocodeDigitalConnections = ...
    SignalConditioning2Output: SimocodeDigitalConnections = ...
    SignalConditioning3Output: SimocodeDigitalConnections = ...
    SignalConditioning4Output: SimocodeDigitalConnections = ...
    SignalConditioning5Output: SimocodeDigitalConnections = ...
    SignalConditioning6Output: SimocodeDigitalConnections = ...
    StatusBusOK: SimocodeDigitalConnections = ...
    StatusChangeOverPauseActive: SimocodeDigitalConnections = ...
    StatusCoolingDownPeriodActive: SimocodeDigitalConnections = ...
    StatusCurrentFlowing: SimocodeDigitalConnections = ...
    StatusDeviceOK: SimocodeDigitalConnections = ...
    StatusDeviceTestActive: SimocodeDigitalConnections = ...
    StatusEmergencyStartExecuted: SimocodeDigitalConnections = ...
    StatusEnablingCircuitClosed: SimocodeDigitalConnections = ...
    StatusFeedbackClosedFc: SimocodeDigitalConnections = ...
    StatusFeedbackOpenFo: SimocodeDigitalConnections = ...
    StatusGroupFault: SimocodeDigitalConnections = ...
    StatusGroupWarning: SimocodeDigitalConnections = ...
    StatusInterlockingTimeActive: SimocodeDigitalConnections = ...
    StatusOff: SimocodeDigitalConnections = ...
    StatusOnForward: SimocodeDigitalConnections = ...
    StatusOnForwardFast: SimocodeDigitalConnections = ...
    StatusOnReverse: SimocodeDigitalConnections = ...
    StatusOnReverseFast: SimocodeDigitalConnections = ...
    StatusOperationalProtectionOff: SimocodeDigitalConnections = ...
    StatusPauseTimeActive: SimocodeDigitalConnections = ...
    StatusPhaseSequence123: SimocodeDigitalConnections = ...
    StatusPhaseSequence321: SimocodeDigitalConnections = ...
    StatusPlcDcsInRun: SimocodeDigitalConnections = ...
    StatusPositionerRunsInClosedDirection: SimocodeDigitalConnections = ...
    StatusPositionerRunsInOpenDirection: SimocodeDigitalConnections = ...
    StatusProfienergyCommandStartPausePending: SimocodeDigitalConnections = ...
    StatusRemoteMode: SimocodeDigitalConnections = ...
    StatusStartActive: SimocodeDigitalConnections = ...
    StatusTestPositionFeedback: SimocodeDigitalConnections = ...
    StatusTorqueClosedTc: SimocodeDigitalConnections = ...
    StatusTorqueOpenTo: SimocodeDigitalConnections = ...
    Stop: SimocodeDigitalConnections = ...
    Timer1Output: SimocodeDigitalConnections = ...
    Timer2Output: SimocodeDigitalConnections = ...
    Timer3Output: SimocodeDigitalConnections = ...
    Timer4Output: SimocodeDigitalConnections = ...
    Timer5Output: SimocodeDigitalConnections = ...
    Timer6Output: SimocodeDigitalConnections = ...
    TruthTable10Output: SimocodeDigitalConnections = ...
    TruthTable11Output: SimocodeDigitalConnections = ...
    TruthTable1Output: SimocodeDigitalConnections = ...
    TruthTable2Output: SimocodeDigitalConnections = ...
    TruthTable3Output: SimocodeDigitalConnections = ...
    TruthTable4Output: SimocodeDigitalConnections = ...
    TruthTable5Output: SimocodeDigitalConnections = ...
    TruthTable6Output: SimocodeDigitalConnections = ...
    TruthTable7Output: SimocodeDigitalConnections = ...
    TruthTable8Output: SimocodeDigitalConnections = ...
    TruthTable9Output1: SimocodeDigitalConnections = ...
    TruthTable9Output2: SimocodeDigitalConnections = ...
    value__ = ...
    WarningFeedbackCircuit: SimocodeDigitalConnections = ...
    WarningSimultaneity: SimocodeDigitalConnections = ...


class SizeLengthField(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SizeLengthField

    enum SizeLengthField, values: None (0), Value1 (1), Value2 (2), Value4 (4)
    """
    Value1: SizeLengthField = ...
    Value2: SizeLengthField = ...
    Value4: SizeLengthField = ...
    value__ = ...


class Smoothing(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Smoothing

    enum Smoothing, values: Activated50Hertz (11), Activated60Hertz (12), Medium (2), None (0), Strong (3), Value16x (8), Value2x (5), Value32x (9), Value4x (6), Value64x (10), Value8x (7), Weak (1)
    """
    Activated50Hertz: Smoothing = ...
    Activated60Hertz: Smoothing = ...
    Medium: Smoothing = ...
    Strong: Smoothing = ...
    Value16x: Smoothing = ...
    Value2x: Smoothing = ...
    Value32x: Smoothing = ...
    Value4x: Smoothing = ...
    Value64x: Smoothing = ...
    Value8x: Smoothing = ...
    value__ = ...
    Weak: Smoothing = ...


class Snmpv1Orv2cReadOnly(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Snmpv1Orv2cReadOnly

    enum Snmpv1Orv2cReadOnly, values: Active (1), Deactivated (0)
    """
    Active: Snmpv1Orv2cReadOnly = ...
    Deactivated: Snmpv1Orv2cReadOnly = ...
    value__ = ...


class Snmpv1TrapsActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Snmpv1TrapsActive

    enum Snmpv1TrapsActive, values: Active (1), Deactivated (0)
    """
    Active: Snmpv1TrapsActive = ...
    Deactivated: Snmpv1TrapsActive = ...
    value__ = ...


class Software(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Represents a base class of an object containing software components """
    @property
    def Name(self) -> str:
        """
        The name of the software base

        Get: Name(self: Software) -> str
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: Software) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: Software) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: Software) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class SourceCycleTime(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Network type

    enum SourceCycleTime, values: AutomaticMinimum (1), LocalSendClock (2), Manual (0), ProfinetSendClock (3)
    """
    AutomaticMinimum: SourceCycleTime = ...
    LocalSendClock: SourceCycleTime = ...
    Manual: SourceCycleTime = ...
    ProfinetSendClock: SourceCycleTime = ...
    value__ = ...


class StandardVolumeFlow(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StandardVolumeFlow

    enum StandardVolumeFlow, values: NormCubicMeterPerDay (4), NormCubicMeterPerHour (5), NormCubicMeterPerMinute (6), NormCubicMeterPerSecond (7), NormLiterPerDay (0), NormLiterPerHour (1), NormLiterPerMinute (2), NormLiterPerSecond (3), ScfPerDay (8), ScfPerHour (9), ScfPerMinute (10), ScfPerSecond (11), StandardCubicMeterPerDay (16), StandardCubicMeterPerHour (17), StandardCubicMeterPerMinute (18), StandardCubicMeterPerSecond (19), StandardLiterPerDay (12), StandardLiterPerHour (13), StandardLiterPerMinute (14), StandardLiterPerSecond (15)
    """
    NormCubicMeterPerDay: StandardVolumeFlow = ...
    NormCubicMeterPerHour: StandardVolumeFlow = ...
    NormCubicMeterPerMinute: StandardVolumeFlow = ...
    NormCubicMeterPerSecond: StandardVolumeFlow = ...
    NormLiterPerDay: StandardVolumeFlow = ...
    NormLiterPerHour: StandardVolumeFlow = ...
    NormLiterPerMinute: StandardVolumeFlow = ...
    NormLiterPerSecond: StandardVolumeFlow = ...
    ScfPerDay: StandardVolumeFlow = ...
    ScfPerHour: StandardVolumeFlow = ...
    ScfPerMinute: StandardVolumeFlow = ...
    ScfPerSecond: StandardVolumeFlow = ...
    StandardCubicMeterPerDay: StandardVolumeFlow = ...
    StandardCubicMeterPerHour: StandardVolumeFlow = ...
    StandardCubicMeterPerMinute: StandardVolumeFlow = ...
    StandardCubicMeterPerSecond: StandardVolumeFlow = ...
    StandardLiterPerDay: StandardVolumeFlow = ...
    StandardLiterPerHour: StandardVolumeFlow = ...
    StandardLiterPerMinute: StandardVolumeFlow = ...
    StandardLiterPerSecond: StandardVolumeFlow = ...
    value__ = ...


class StandardVolumeUnit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StandardVolumeUnit

    enum StandardVolumeUnit, values: CubicNm (1), CubicSm (4), Nl (0), Scf (2), Sl (3)
    """
    CubicNm: StandardVolumeUnit = ...
    CubicSm: StandardVolumeUnit = ...
    Nl: StandardVolumeUnit = ...
    Scf: StandardVolumeUnit = ...
    Sl: StandardVolumeUnit = ...
    value__ = ...


class StartDetectionOfAReceivedFrame(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StartDetectionOfAReceivedFrame

    enum StartDetectionOfAReceivedFrame, values: StartOnAnyCharacter (1), StartOnSpecialCondition (0)
    """
    StartOnAnyCharacter: StartDetectionOfAReceivedFrame = ...
    StartOnSpecialCondition: StartDetectionOfAReceivedFrame = ...
    value__ = ...


class StartupActionAfterPowerOn(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StartupActionAfterPowerOn

    enum StartupActionAfterPowerOn, values: ColdRestart (2), HotRestart (5), NoRestartRemainInStopMode (0), WarmRestart (4), WarmRestartOperatingModeBeforePowerOff (3), WarmRestartRun (1)
    """
    ColdRestart: StartupActionAfterPowerOn = ...
    HotRestart: StartupActionAfterPowerOn = ...
    NoRestartRemainInStopMode: StartupActionAfterPowerOn = ...
    value__ = ...
    WarmRestart: StartupActionAfterPowerOn = ...
    WarmRestartOperatingModeBeforePowerOff: StartupActionAfterPowerOn = ...
    WarmRestartRun: StartupActionAfterPowerOn = ...


class StartupComparisonPresetToActualModule(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StartupComparisonPresetToActualModule

    enum StartupComparisonPresetToActualModule, values: FromCpu (0), StartupCpuIfMismatch (2), StartupCpuOnlyIfCompatible (1)
    """
    FromCpu: StartupComparisonPresetToActualModule = ...
    StartupCpuIfMismatch: StartupComparisonPresetToActualModule = ...
    StartupCpuOnlyIfCompatible: StartupComparisonPresetToActualModule = ...
    value__ = ...


class StateSignalFailureActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StateSignalFailureActive

    enum StateSignalFailureActive, values: SignalFailureOff (0), SignalFailureOn (1)
    """
    SignalFailureOff: StateSignalFailureActive = ...
    SignalFailureOn: StateSignalFailureActive = ...
    value__ = ...


class StateSignalFunctionControlActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StateSignalFunctionControlActive

    enum StateSignalFunctionControlActive, values: SignalFunctionControlOff (0), SignalFunctionControlOn (1)
    """
    SignalFunctionControlOff: StateSignalFunctionControlActive = ...
    SignalFunctionControlOn: StateSignalFunctionControlActive = ...
    value__ = ...


class StateSignalMaintenanceActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StateSignalMaintenanceActive

    enum StateSignalMaintenanceActive, values: SignalMaintainceOff (0), SignalMaintainceOn (1)
    """
    SignalMaintainceOff: StateSignalMaintenanceActive = ...
    SignalMaintainceOn: StateSignalMaintenanceActive = ...
    value__ = ...


class StateSignalOutOfSpecificationActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StateSignalOutOfSpecificationActive

    enum StateSignalOutOfSpecificationActive, values: OutOfSpecificationOff (0), OutOfSpecificationOn (1)
    """
    OutOfSpecificationOff: StateSignalOutOfSpecificationActive = ...
    OutOfSpecificationOn: StateSignalOutOfSpecificationActive = ...
    value__ = ...


class StepResolution(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StepResolution

    enum StepResolution, values: Value1Or1 (0), Value1Or10 (9), Value1Or128 (7), Value1Or16 (4), Value1Or2 (1), Value1Or20 (11), Value1Or25 (10), Value1Or256 (8), Value1Or32 (5), Value1Or4 (2), Value1Or5 (12), Value1Or512 (13), Value1Or64 (6), Value1Or8 (3)
    """
    Value1Or1: StepResolution = ...
    Value1Or10: StepResolution = ...
    Value1Or128: StepResolution = ...
    Value1Or16: StepResolution = ...
    Value1Or2: StepResolution = ...
    Value1Or20: StepResolution = ...
    Value1Or25: StepResolution = ...
    Value1Or256: StepResolution = ...
    Value1Or32: StepResolution = ...
    Value1Or4: StepResolution = ...
    Value1Or5: StepResolution = ...
    Value1Or512: StepResolution = ...
    Value1Or64: StepResolution = ...
    Value1Or8: StepResolution = ...
    value__ = ...


class StopBits(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StopBits

    enum StopBits, values: None (0), Value1 (1), Value2 (2)
    """
    Value1: StopBits = ...
    Value2: StopBits = ...
    value__ = ...


class StopCurrent(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StopCurrent

    enum StopCurrent, values: CouldNotCalculateTheDynamicDisplayName (1), CouldNotCalculateTheDynamicDisplayName10 (10), CouldNotCalculateTheDynamicDisplayName11 (11), CouldNotCalculateTheDynamicDisplayName12 (12), CouldNotCalculateTheDynamicDisplayName13 (13), CouldNotCalculateTheDynamicDisplayName14 (14), CouldNotCalculateTheDynamicDisplayName15 (15), CouldNotCalculateTheDynamicDisplayName16 (16), CouldNotCalculateTheDynamicDisplayName17 (17), CouldNotCalculateTheDynamicDisplayName18 (18), CouldNotCalculateTheDynamicDisplayName19 (19), CouldNotCalculateTheDynamicDisplayName2 (2), CouldNotCalculateTheDynamicDisplayName20 (20), CouldNotCalculateTheDynamicDisplayName21 (21), CouldNotCalculateTheDynamicDisplayName22 (22), CouldNotCalculateTheDynamicDisplayName23 (23), CouldNotCalculateTheDynamicDisplayName24 (24), CouldNotCalculateTheDynamicDisplayName25 (25), CouldNotCalculateTheDynamicDisplayName26 (26), CouldNotCalculateTheDynamicDisplayName27 (27), CouldNotCalculateTheDynamicDisplayName28 (28), CouldNotCalculateTheDynamicDisplayName29 (29), CouldNotCalculateTheDynamicDisplayName3 (3), CouldNotCalculateTheDynamicDisplayName30 (30), CouldNotCalculateTheDynamicDisplayName31 (31), CouldNotCalculateTheDynamicDisplayName32 (32), CouldNotCalculateTheDynamicDisplayName33 (33), CouldNotCalculateTheDynamicDisplayName34 (34), CouldNotCalculateTheDynamicDisplayName35 (35), CouldNotCalculateTheDynamicDisplayName4 (4), CouldNotCalculateTheDynamicDisplayName5 (5), CouldNotCalculateTheDynamicDisplayName6 (6), CouldNotCalculateTheDynamicDisplayName7 (7), CouldNotCalculateTheDynamicDisplayName8 (8), CouldNotCalculateTheDynamicDisplayName9 (9), Value0 (0)
    """
    CouldNotCalculateTheDynamicDisplayName: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName10: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName11: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName12: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName13: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName14: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName15: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName16: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName17: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName18: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName19: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName2: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName20: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName21: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName22: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName23: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName24: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName25: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName26: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName27: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName28: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName29: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName3: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName30: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName31: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName32: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName33: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName34: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName35: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName4: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName5: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName6: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName7: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName8: StopCurrent = ...
    CouldNotCalculateTheDynamicDisplayName9: StopCurrent = ...
    Value0: StopCurrent = ...
    value__ = ...


class StopTimeOperatingHoursMonitoringResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property StopTimeOperatingHoursMonitoringResponse

    enum StopTimeOperatingHoursMonitoringResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: StopTimeOperatingHoursMonitoringResponse = ...
    Signal: StopTimeOperatingHoursMonitoringResponse = ...
    value__ = ...
    Warn: StopTimeOperatingHoursMonitoringResponse = ...


class SubCategory(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SubCategory

    enum SubCategory, values: ActiveEnergies (10), ActiveFactorsCosPhi (21), ActivePowers (6), ApparentEnergies (9), ApparentPowers (5), Asymmetries (22), General (13), HarmonicOfTheLineConductorCurrent (28), HarmonicOfTheLineToNeutralVoltageLN (26), LineConductorCurrent (1), LineToLineVoltageLL (4), LineToNeutralVoltageLN (3), MeasuredVariableRelatedQualityData (12), NeutralConductorCurrent (2), None (0), PhaseAngles (20), PowerFactors (19), PowerFactorsOrPhaseAngle (8), Qualifier (25), ReactiveEnergies (11), ReactivePowers (7), Times (17), TotalHarmonicDistortions (23)
    """
    ActiveEnergies: SubCategory = ...
    ActiveFactorsCosPhi: SubCategory = ...
    ActivePowers: SubCategory = ...
    ApparentEnergies: SubCategory = ...
    ApparentPowers: SubCategory = ...
    Asymmetries: SubCategory = ...
    General: SubCategory = ...
    HarmonicOfTheLineConductorCurrent: SubCategory = ...
    HarmonicOfTheLineToNeutralVoltageLN: SubCategory = ...
    LineConductorCurrent: SubCategory = ...
    LineToLineVoltageLL: SubCategory = ...
    LineToNeutralVoltageLN: SubCategory = ...
    MeasuredVariableRelatedQualityData: SubCategory = ...
    NeutralConductorCurrent: SubCategory = ...
    PhaseAngles: SubCategory = ...
    PowerFactors: SubCategory = ...
    PowerFactorsOrPhaseAngle: SubCategory = ...
    Qualifier: SubCategory = ...
    ReactiveEnergies: SubCategory = ...
    ReactivePowers: SubCategory = ...
    Times: SubCategory = ...
    TotalHarmonicDistortions: SubCategory = ...
    value__ = ...


class SubmoduleSlotNumber(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SubmoduleSlotNumber

    enum SubmoduleSlotNumber, values: If1 (0), If2 (1), If3 (2), If4 (3)
    """
    If1: SubmoduleSlotNumber = ...
    If2: SubmoduleSlotNumber = ...
    If3: SubmoduleSlotNumber = ...
    If4: SubmoduleSlotNumber = ...
    value__ = ...


class Subnet(IEquatable, IEngineeringObject, IEngineeringServiceProvider, IMasterCopySource, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IServiceProvider'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Represents a Subnet, one of the following (SubnetMpi or SubnetIE) represents the net object """
    @property
    def IoSystems(self) -> IoSystemAssociation:
        """
        Associated IO systems

        Get: IoSystems(self: Subnet) -> IoSystemAssociation
        """
        ...

    @property
    def Name(self) -> str:
        """
        The name of the Subnet

        Get: Name(self: Subnet) -> str

        Set: Name(self: Subnet) = value
        """
        ...

    @property
    def NetType(self) -> NetType:
        """
        Particular subnet net type

        Get: NetType(self: Subnet) -> NetType
        """
        ...

    @property
    def Nodes(self) -> NodeAssociation:
        """
        Associated nodes

        Get: Nodes(self: Subnet) -> NodeAssociation
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: Subnet) -> IEngineeringObject
        """
        ...

    @property
    def TypeIdentifier(self) -> str:
        """
        The type identifier of this Subnet

        Get: TypeIdentifier(self: Subnet) -> str
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: Subnet)

            Deletes this instance.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: Subnet) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: Subnet) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class SubnetComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of Subnets """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: SubnetComposition) -> IEngineeringObject
        """
        ...


    def CreateFrom(self, masterCopy:MasterCopy) -> Subnet:
        """
        CreateFrom(self: SubnetComposition, masterCopy: MasterCopy) -> Subnet

            Create subnet from MasterCopy

            masterCopy: The source MasterCopy

            Returns: Siemens.Engineering.HW.Subnet
        """
        ...

    def Find(self, name:str) -> Subnet:
        """
        Find(self: SubnetComposition, name: str) -> Subnet

            Finds a given Subnet

            name: Name to find

            Returns: Siemens.Engineering.HW.Subnet
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: SubnetComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: SubnetComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[Subnet](enumerable: IEnumerable[Subnet], value: Subnet) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class SubstituteValue(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SubstituteValue

    enum SubstituteValue, values: Value0 (0), Value1 (1)
    """
    Value0: SubstituteValue = ...
    Value1: SubstituteValue = ...
    value__ = ...


class SubstituteValueDQ0(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SubstituteValueDQ0

    enum SubstituteValueDQ0, values: Value0 (0), Value1 (1)
    """
    Value0: SubstituteValueDQ0 = ...
    Value1: SubstituteValueDQ0 = ...
    value__ = ...


class SubstituteValueDQ1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SubstituteValueDQ1

    enum SubstituteValueDQ1, values: Value0 (0), Value1 (1)
    """
    Value0: SubstituteValueDQ1 = ...
    Value1: SubstituteValueDQ1 = ...
    value__ = ...


class SubstituteValueDQA(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SubstituteValueDQA

    enum SubstituteValueDQA, values: Value0 (0), Value1 (1)
    """
    Value0: SubstituteValueDQA = ...
    Value1: SubstituteValueDQA = ...
    value__ = ...


class SubstituteValueDQB(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SubstituteValueDQB

    enum SubstituteValueDQB, values: Value0 (0), Value1 (1)
    """
    Value0: SubstituteValueDQB = ...
    Value1: SubstituteValueDQB = ...
    value__ = ...


class SwitchingCycleCounterActuatorInclDiagnostics(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SwitchingCycleCounterActuatorInclDiagnostics

    enum SwitchingCycleCounterActuatorInclDiagnostics, values: Activated (1), Deactivated (0)
    """
    Activated: SwitchingCycleCounterActuatorInclDiagnostics = ...
    Deactivated: SwitchingCycleCounterActuatorInclDiagnostics = ...
    value__ = ...


class SwitchingCycleCounterPilotValveInclDiagnostics(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SwitchingCycleCounterPilotValveInclDiagnostics

    enum SwitchingCycleCounterPilotValveInclDiagnostics, values: Activated (1), Deactivated (0)
    """
    Activated: SwitchingCycleCounterPilotValveInclDiagnostics = ...
    Deactivated: SwitchingCycleCounterPilotValveInclDiagnostics = ...
    value__ = ...


class SwitchingFrequencyOverdrive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SwitchingFrequencyOverdrive

    enum SwitchingFrequencyOverdrive, values: OverdriveOff (8), Value1 (0), Value10 (4), Value15 (5), Value2 (1), Value20 (6), Value4 (2), Value8 (3)
    """
    OverdriveOff: SwitchingFrequencyOverdrive = ...
    Value1: SwitchingFrequencyOverdrive = ...
    Value10: SwitchingFrequencyOverdrive = ...
    Value15: SwitchingFrequencyOverdrive = ...
    Value2: SwitchingFrequencyOverdrive = ...
    Value20: SwitchingFrequencyOverdrive = ...
    Value4: SwitchingFrequencyOverdrive = ...
    Value8: SwitchingFrequencyOverdrive = ...
    value__ = ...


class SyncDomain(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Sync Domain """
    @property
    def ConvertedName(self) -> str:
        """
        Converted name of the Sync Domain

        Get: ConvertedName(self: SyncDomain) -> str
        """
        ...

    @property
    def DomainParticipants(self) -> ISyncDomainParticipantAssociation:
        """
        Association of Sync Domain Participants

        Get: DomainParticipants(self: SyncDomain) -> ISyncDomainParticipantAssociation
        """
        ...

    @property
    def IsDefault(self) -> bool:
        """
        Default state of the Sync Domain

        Get: IsDefault(self: SyncDomain) -> bool

        Set: IsDefault(self: SyncDomain) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Name of the Sync Domain

        Get: Name(self: SyncDomain) -> str

        Set: Name(self: SyncDomain) = value
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: SyncDomain) -> IEngineeringObject
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: SyncDomain)

            Deletes this instance.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: SyncDomain) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: SyncDomain) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class SyncDomainComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of Sync Domains """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: SyncDomainComposition) -> IEngineeringObject
        """
        ...


    def Find(self, name:str) -> SyncDomain:
        """
        Find(self: SyncDomainComposition, name: str) -> SyncDomain

            Finds a given Sync Domain

            name: Name to find

            Returns: Siemens.Engineering.HW.SyncDomain
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: SyncDomainComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: SyncDomainComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[SyncDomain](enumerable: IEnumerable[SyncDomain], value: SyncDomain) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class SynchronizationFrequency(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SynchronizationFrequency

    enum SynchronizationFrequency, values: Once (0), Periodic (1)
    """
    Once: SynchronizationFrequency = ...
    Periodic: SynchronizationFrequency = ...
    value__ = ...


class SyncRole(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SyncRole

    enum SyncRole, values: NotSynchronized (0), RedundantSyncMaster (4), SyncMaster (1), SyncSlave (2)
    """
    NotSynchronized: SyncRole = ...
    RedundantSyncMaster: SyncRole = ...
    SyncMaster: SyncRole = ...
    SyncSlave: SyncRole = ...
    value__ = ...


class SyslogClientActive(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SyslogClientActive

    enum SyslogClientActive, values: Active (1), Deactivated (0)
    """
    Active: SyslogClientActive = ...
    Deactivated: SyslogClientActive = ...
    value__ = ...


class SystemPowerSupplyExternal(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property SystemPowerSupplyExternal

    enum SystemPowerSupplyExternal, values: ConnectionToExternal24VSupply (1), NoConnectionToExternal24VSupply (0)
    """
    ConnectionToExternal24VSupply: SystemPowerSupplyExternal = ...
    NoConnectionToExternal24VSupply: SystemPowerSupplyExternal = ...
    value__ = ...


class TemperatureShutdown(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TemperatureShutdown

    enum TemperatureShutdown, values: OutputActiveEvenUnderOvertemperatureConditions (0), OutputDisabledUnderOvertemperatureConditions (1)
    """
    OutputActiveEvenUnderOvertemperatureConditions: TemperatureShutdown = ...
    OutputDisabledUnderOvertemperatureConditions: TemperatureShutdown = ...
    value__ = ...


class TemperatureUnit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TemperatureUnit

    enum TemperatureUnit, values: Deactivated (0), DegreesCelsius (1), DegreesFahrenheit (2), Kelvin (3)
    """
    Deactivated: TemperatureUnit = ...
    DegreesCelsius: TemperatureUnit = ...
    DegreesFahrenheit: TemperatureUnit = ...
    Kelvin: TemperatureUnit = ...
    value__ = ...


class Terminal0Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal0Function

    enum Terminal0Function, values: Input (0), Output (1)
    """
    Input: Terminal0Function = ...
    Output: Terminal0Function = ...
    value__ = ...


class Terminal16Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal16Function

    enum Terminal16Function, values: Input (0), Output (1)
    """
    Input: Terminal16Function = ...
    Output: Terminal16Function = ...
    value__ = ...


class Terminal17Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal17Function

    enum Terminal17Function, values: Input (0), Output (1)
    """
    Input: Terminal17Function = ...
    Output: Terminal17Function = ...
    value__ = ...


class Terminal18Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal18Function

    enum Terminal18Function, values: Input (0), Output (1)
    """
    Input: Terminal18Function = ...
    Output: Terminal18Function = ...
    value__ = ...


class Terminal19Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal19Function

    enum Terminal19Function, values: Input (0), Output (1)
    """
    Input: Terminal19Function = ...
    Output: Terminal19Function = ...
    value__ = ...


class Terminal1Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal1Function

    enum Terminal1Function, values: Input (0), Output (1)
    """
    Input: Terminal1Function = ...
    Output: Terminal1Function = ...
    value__ = ...


class Terminal20Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal20Function

    enum Terminal20Function, values: Input (0), Output (1)
    """
    Input: Terminal20Function = ...
    Output: Terminal20Function = ...
    value__ = ...


class Terminal21Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal21Function

    enum Terminal21Function, values: Input (0), Output (1)
    """
    Input: Terminal21Function = ...
    Output: Terminal21Function = ...
    value__ = ...


class Terminal22Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal22Function

    enum Terminal22Function, values: Input (0), Output (1)
    """
    Input: Terminal22Function = ...
    Output: Terminal22Function = ...
    value__ = ...


class Terminal23Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal23Function

    enum Terminal23Function, values: Input (0), Output (1)
    """
    Input: Terminal23Function = ...
    Output: Terminal23Function = ...
    value__ = ...


class Terminal24Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal24Function

    enum Terminal24Function, values: Input (0), Output (1)
    """
    Input: Terminal24Function = ...
    Output: Terminal24Function = ...
    value__ = ...


class Terminal25Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal25Function

    enum Terminal25Function, values: Input (0), Output (1)
    """
    Input: Terminal25Function = ...
    Output: Terminal25Function = ...
    value__ = ...


class Terminal26Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal26Function

    enum Terminal26Function, values: Input (0), Output (1)
    """
    Input: Terminal26Function = ...
    Output: Terminal26Function = ...
    value__ = ...


class Terminal27Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal27Function

    enum Terminal27Function, values: Input (0), Output (1)
    """
    Input: Terminal27Function = ...
    Output: Terminal27Function = ...
    value__ = ...


class Terminal28Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal28Function

    enum Terminal28Function, values: Input (0), Output (1)
    """
    Input: Terminal28Function = ...
    Output: Terminal28Function = ...
    value__ = ...


class Terminal29Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal29Function

    enum Terminal29Function, values: Input (0), Output (1)
    """
    Input: Terminal29Function = ...
    Output: Terminal29Function = ...
    value__ = ...


class Terminal2Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal2Function

    enum Terminal2Function, values: Input (0), Output (1)
    """
    Input: Terminal2Function = ...
    Output: Terminal2Function = ...
    value__ = ...


class Terminal30Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal30Function

    enum Terminal30Function, values: Input (0), Output (1)
    """
    Input: Terminal30Function = ...
    Output: Terminal30Function = ...
    value__ = ...


class Terminal31Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal31Function

    enum Terminal31Function, values: Input (0), Output (1)
    """
    Input: Terminal31Function = ...
    Output: Terminal31Function = ...
    value__ = ...


class Terminal3Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal3Function

    enum Terminal3Function, values: Input (0), Output (1)
    """
    Input: Terminal3Function = ...
    Output: Terminal3Function = ...
    value__ = ...


class Terminal4Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal4Function

    enum Terminal4Function, values: Input (0), Output (1)
    """
    Input: Terminal4Function = ...
    Output: Terminal4Function = ...
    value__ = ...


class Terminal5Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal5Function

    enum Terminal5Function, values: Input (0), Output (1)
    """
    Input: Terminal5Function = ...
    Output: Terminal5Function = ...
    value__ = ...


class Terminal6Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal6Function

    enum Terminal6Function, values: Input (0), Output (1)
    """
    Input: Terminal6Function = ...
    Output: Terminal6Function = ...
    value__ = ...


class Terminal7Function(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Terminal7Function

    enum Terminal7Function, values: Input (0), Output (1)
    """
    Input: Terminal7Function = ...
    Output: Terminal7Function = ...
    value__ = ...


class TestPositionFeedbackTPFStandardFunctionsType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TestPositionFeedbackTPFStandardFunctionsType

    enum TestPositionFeedbackTPFStandardFunctionsType, values: NCContact (1), NOContact (0)
    """
    NCContact: TestPositionFeedbackTPFStandardFunctionsType = ...
    NOContact: TestPositionFeedbackTPFStandardFunctionsType = ...
    value__ = ...


class TestResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TestResponse

    enum TestResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: TestResponse = ...
    Signal: TestResponse = ...
    value__ = ...
    Warn: TestResponse = ...


class ThermistorResponseToSensorFault(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ThermistorResponseToSensorFault

    enum ThermistorResponseToSensorFault, values: Deactivated (0), Signal (1), Trip (3), Warn (2)
    """
    Deactivated: ThermistorResponseToSensorFault = ...
    Signal: ThermistorResponseToSensorFault = ...
    Trip: ThermistorResponseToSensorFault = ...
    value__ = ...
    Warn: ThermistorResponseToSensorFault = ...


class ThermistorResponseToTripLevel(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property ThermistorResponseToTripLevel

    enum ThermistorResponseToTripLevel, values: None (0), Signal (1), Trip (3), Warn (2)
    """
    Signal: ThermistorResponseToTripLevel = ...
    Trip: ThermistorResponseToTripLevel = ...
    value__ = ...
    Warn: ThermistorResponseToTripLevel = ...


class TimeBaseForVelocityMeasurement(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeBaseForVelocityMeasurement

    enum TimeBaseForVelocityMeasurement, values: Value100ms (2), Value10ms (1), Value1ms (0), Value1s (3), Value60sOr1m (4)
    """
    Value100ms: TimeBaseForVelocityMeasurement = ...
    Value10ms: TimeBaseForVelocityMeasurement = ...
    Value1ms: TimeBaseForVelocityMeasurement = ...
    Value1s: TimeBaseForVelocityMeasurement = ...
    Value60sOr1m: TimeBaseForVelocityMeasurement = ...
    value__ = ...


class TimeOfDayDaylightSavingTimeStartHour(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeOfDayDaylightSavingTimeStartHour

    enum TimeOfDayDaylightSavingTimeStartHour, values: Midnight (0), Value0100AM (1), Value0100PM (13), Value0200AM (2), Value0200PM (14), Value0300AM (3), Value0300PM (15), Value0400AM (4), Value0400PM (16), Value0500AM (5), Value0500PM (17), Value0600AM (6), Value0600PM (18), Value0700AM (7), Value0700PM (19), Value0800AM (8), Value0800PM (20), Value0900AM (9), Value0900PM (21), Value1000AM (10), Value1000PM (22), Value1100AM (11), Value1100PM (23), Value1200PM (12)
    """
    Midnight: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0100AM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0100PM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0200AM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0200PM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0300AM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0300PM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0400AM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0400PM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0500AM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0500PM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0600AM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0600PM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0700AM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0700PM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0800AM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0800PM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0900AM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value0900PM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value1000AM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value1000PM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value1100AM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value1100PM: TimeOfDayDaylightSavingTimeStartHour = ...
    Value1200PM: TimeOfDayDaylightSavingTimeStartHour = ...
    value__ = ...


class TimeOfDayDaylightSavingTimeStartMonth(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeOfDayDaylightSavingTimeStartMonth

    enum TimeOfDayDaylightSavingTimeStartMonth, values: April (4), August (8), December (12), February (2), January (1), July (7), June (6), March (3), May (5), None (0), November (11), October (10), September (9)
    """
    April: TimeOfDayDaylightSavingTimeStartMonth = ...
    August: TimeOfDayDaylightSavingTimeStartMonth = ...
    December: TimeOfDayDaylightSavingTimeStartMonth = ...
    February: TimeOfDayDaylightSavingTimeStartMonth = ...
    January: TimeOfDayDaylightSavingTimeStartMonth = ...
    July: TimeOfDayDaylightSavingTimeStartMonth = ...
    June: TimeOfDayDaylightSavingTimeStartMonth = ...
    March: TimeOfDayDaylightSavingTimeStartMonth = ...
    May: TimeOfDayDaylightSavingTimeStartMonth = ...
    November: TimeOfDayDaylightSavingTimeStartMonth = ...
    October: TimeOfDayDaylightSavingTimeStartMonth = ...
    September: TimeOfDayDaylightSavingTimeStartMonth = ...
    value__ = ...


class TimeOfDayDaylightSavingTimeStartWeek(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeOfDayDaylightSavingTimeStartWeek

    enum TimeOfDayDaylightSavingTimeStartWeek, values: First (1), Fourth (4), Last (5), None (0), Second (2), Third (3)
    """
    First: TimeOfDayDaylightSavingTimeStartWeek = ...
    Fourth: TimeOfDayDaylightSavingTimeStartWeek = ...
    Last: TimeOfDayDaylightSavingTimeStartWeek = ...
    Second: TimeOfDayDaylightSavingTimeStartWeek = ...
    Third: TimeOfDayDaylightSavingTimeStartWeek = ...
    value__ = ...


class TimeOfDayDaylightSavingTimeStartWeekday(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeOfDayDaylightSavingTimeStartWeekday

    enum TimeOfDayDaylightSavingTimeStartWeekday, values: Friday (6), Monday (2), None (0), Saturday (7), Sunday (1), Thursday (5), Tuesday (3), Wednesday (4)
    """
    Friday: TimeOfDayDaylightSavingTimeStartWeekday = ...
    Monday: TimeOfDayDaylightSavingTimeStartWeekday = ...
    Saturday: TimeOfDayDaylightSavingTimeStartWeekday = ...
    Sunday: TimeOfDayDaylightSavingTimeStartWeekday = ...
    Thursday: TimeOfDayDaylightSavingTimeStartWeekday = ...
    Tuesday: TimeOfDayDaylightSavingTimeStartWeekday = ...
    value__ = ...
    Wednesday: TimeOfDayDaylightSavingTimeStartWeekday = ...


class TimeOfDayLocalTimeZone(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeOfDayLocalTimeZone

    enum TimeOfDayLocalTimeZone, values: UtcCasablanca (21), UtcCoordinatedUniversalTime (78), UtcDublinEdinburghLisbonLondon (22), UtcMinus0100Azores (19), UtcMinus0100CapeVerde (20), UtcMinus0200MidMinusatlantic (77), UtcMinus0200MidMinusatlanticMinusOld (18), UtcMinus0300Brasilia (16), UtcMinus0300BuenosAires (17), UtcMinus0300CayenneFortaleza (73), UtcMinus0300Greenland (74), UtcMinus0300Montevideo (75), UtcMinus0300Salvador (76), UtcMinus0330Newfoundland (15), UtcMinus0400Asuncion (69), UtcMinus0400AtlanticStandardTimeCanada (70), UtcMinus0400Cuiaba (71), UtcMinus0400GeorgetownLaPazManausSanJuan (14), UtcMinus0400Santiago (72), UtcMinus0430Caracas (13), UtcMinus0500BogotaLimaQuito (10), UtcMinus0500EasternStandardTimeUsaCanada (11), UtcMinus0500IndianaEast (12), UtcMinus0600CentralAmerica (68), UtcMinus0600CentralStandardTimeUsaCanada (7), UtcMinus0600GuadalajaraMexicoCityMonterrey (8), UtcMinus0600Saskatchewan (9), UtcMinus0700Arizona (5), UtcMinus0700ChihuahuaLaPazMazatlan (67), UtcMinus0700MountainStandardTimeUsaCanada (6), UtcMinus0800TijuanaLosAngelesSeattleVancouver (4), UtcMinus0900Alaska (3), UtcMinus1000Hawaii (2), UtcMinus1100MidwayIslands (65), UtcMinus1200EniwetokKwajalein (0), UtcMonroviaReykjavik (23), UtcPlus0100AmsterdamBerlinBernRomeStockholmVienna (24), UtcPlus0100BelgradeBratislavaBudapestLjubljanaPrague (27), UtcPlus0100BrusselsCopenhagenMadridParis (25), UtcPlus0100SarajevoSkopjeWarsawZagreb (26), UtcPlus0100Tripoli (101), UtcPlus0100TripoliOld (79), UtcPlus0100WestCentralAfrica (80), UtcPlus0100Windhoek (81), UtcPlus0200AthensBucharest (28), UtcPlus0200Beirut (82), UtcPlus0200Cairo (31), UtcPlus0200Damascus (83), UtcPlus0200EasternEurope (33), UtcPlus0200HararePretoria (29), UtcPlus0200HelsinkiKievRigaSofiaTallinnWilna (32), UtcPlus0200Istanbul (34), UtcPlus0200Jerusalem (30), UtcPlus0300Amman (102), UtcPlus0300AmmanOld (84), UtcPlus0300Baghdad (35), UtcPlus0300KaliningradMinsk (85), UtcPlus0300KuwaitRiyadh (36), UtcPlus0300Nairobi (37), UtcPlus0300Qatar (39), UtcPlus0330Teheran (38), UtcPlus0400AbuDhabiMuscat (40), UtcPlus0400Baku (41), UtcPlus0400PortLouis (87), UtcPlus0400Tbilisi (42), UtcPlus0400Yerevan (86), UtcPlus0430Kabul (43), UtcPlus0500AshgabatTashkent (45), UtcPlus0500IslamabadKarachi (44), UtcPlus0530MumbaiKolkataChennaiNewDelhi (46), UtcPlus0530SriJayawardenepura (88), UtcPlus0545Nepal (47), UtcPlus0600Astana (48), UtcPlus0600Daka (89), UtcPlus0600Yekaterinburg (90), UtcPlus0630YangonRangoon (49), UtcPlus0700BangkokHanoiJakarta (50), UtcPlus0700Novosibirsk (91), UtcPlus0800BeijingChongqingHongKongUrumchi (51), UtcPlus0800Krasnoyarsk (92), UtcPlus0800KualaLumpurSingapore (93), UtcPlus0800Perth (52), UtcPlus0800Taipei (94), UtcPlus0800UlaanbaatarUlanBator (95), UtcPlus0900Irkutsk (53), UtcPlus0900OsakaSapporoTokyo (96), UtcPlus0900Seoul (97), UtcPlus0930AdelaideDarwin (54), UtcPlus0930Darwin (55), UtcPlus1000BrisbaneCanberraMelbourneSydney (56), UtcPlus1000CanberraMelbourneSydney (57), UtcPlus1000GuamPortMoresby (58), UtcPlus1000Hobart (59), UtcPlus1000Yakutsk (98), UtcPlus1100Magadan (63), UtcPlus1100SolomonIslandsNewCaledonia (60), UtcPlus1100Vladivostok (61), UtcPlus1200AucklandWellington (62), UtcPlus1200CoordinatedUniversalTimePlus12 (99), UtcPlus1200Fiji (64), UtcPlus1300Nukualofa (100), UtcPlus1300Samoa (1)
    """
    UtcCasablanca: TimeOfDayLocalTimeZone = ...
    UtcCoordinatedUniversalTime: TimeOfDayLocalTimeZone = ...
    UtcDublinEdinburghLisbonLondon: TimeOfDayLocalTimeZone = ...
    UtcMinus0100Azores: TimeOfDayLocalTimeZone = ...
    UtcMinus0100CapeVerde: TimeOfDayLocalTimeZone = ...
    UtcMinus0200MidMinusatlantic: TimeOfDayLocalTimeZone = ...
    UtcMinus0200MidMinusatlanticMinusOld: TimeOfDayLocalTimeZone = ...
    UtcMinus0300Brasilia: TimeOfDayLocalTimeZone = ...
    UtcMinus0300BuenosAires: TimeOfDayLocalTimeZone = ...
    UtcMinus0300CayenneFortaleza: TimeOfDayLocalTimeZone = ...
    UtcMinus0300Greenland: TimeOfDayLocalTimeZone = ...
    UtcMinus0300Montevideo: TimeOfDayLocalTimeZone = ...
    UtcMinus0300Salvador: TimeOfDayLocalTimeZone = ...
    UtcMinus0330Newfoundland: TimeOfDayLocalTimeZone = ...
    UtcMinus0400Asuncion: TimeOfDayLocalTimeZone = ...
    UtcMinus0400AtlanticStandardTimeCanada: TimeOfDayLocalTimeZone = ...
    UtcMinus0400Cuiaba: TimeOfDayLocalTimeZone = ...
    UtcMinus0400GeorgetownLaPazManausSanJuan: TimeOfDayLocalTimeZone = ...
    UtcMinus0400Santiago: TimeOfDayLocalTimeZone = ...
    UtcMinus0430Caracas: TimeOfDayLocalTimeZone = ...
    UtcMinus0500BogotaLimaQuito: TimeOfDayLocalTimeZone = ...
    UtcMinus0500EasternStandardTimeUsaCanada: TimeOfDayLocalTimeZone = ...
    UtcMinus0500IndianaEast: TimeOfDayLocalTimeZone = ...
    UtcMinus0600CentralAmerica: TimeOfDayLocalTimeZone = ...
    UtcMinus0600CentralStandardTimeUsaCanada: TimeOfDayLocalTimeZone = ...
    UtcMinus0600GuadalajaraMexicoCityMonterrey: TimeOfDayLocalTimeZone = ...
    UtcMinus0600Saskatchewan: TimeOfDayLocalTimeZone = ...
    UtcMinus0700Arizona: TimeOfDayLocalTimeZone = ...
    UtcMinus0700ChihuahuaLaPazMazatlan: TimeOfDayLocalTimeZone = ...
    UtcMinus0700MountainStandardTimeUsaCanada: TimeOfDayLocalTimeZone = ...
    UtcMinus0800TijuanaLosAngelesSeattleVancouver: TimeOfDayLocalTimeZone = ...
    UtcMinus0900Alaska: TimeOfDayLocalTimeZone = ...
    UtcMinus1000Hawaii: TimeOfDayLocalTimeZone = ...
    UtcMinus1100MidwayIslands: TimeOfDayLocalTimeZone = ...
    UtcMinus1200EniwetokKwajalein: TimeOfDayLocalTimeZone = ...
    UtcMonroviaReykjavik: TimeOfDayLocalTimeZone = ...
    UtcPlus0100AmsterdamBerlinBernRomeStockholmVienna: TimeOfDayLocalTimeZone = ...
    UtcPlus0100BelgradeBratislavaBudapestLjubljanaPrague: TimeOfDayLocalTimeZone = ...
    UtcPlus0100BrusselsCopenhagenMadridParis: TimeOfDayLocalTimeZone = ...
    UtcPlus0100SarajevoSkopjeWarsawZagreb: TimeOfDayLocalTimeZone = ...
    UtcPlus0100Tripoli: TimeOfDayLocalTimeZone = ...
    UtcPlus0100TripoliOld: TimeOfDayLocalTimeZone = ...
    UtcPlus0100WestCentralAfrica: TimeOfDayLocalTimeZone = ...
    UtcPlus0100Windhoek: TimeOfDayLocalTimeZone = ...
    UtcPlus0200AthensBucharest: TimeOfDayLocalTimeZone = ...
    UtcPlus0200Beirut: TimeOfDayLocalTimeZone = ...
    UtcPlus0200Cairo: TimeOfDayLocalTimeZone = ...
    UtcPlus0200Damascus: TimeOfDayLocalTimeZone = ...
    UtcPlus0200EasternEurope: TimeOfDayLocalTimeZone = ...
    UtcPlus0200HararePretoria: TimeOfDayLocalTimeZone = ...
    UtcPlus0200HelsinkiKievRigaSofiaTallinnWilna: TimeOfDayLocalTimeZone = ...
    UtcPlus0200Istanbul: TimeOfDayLocalTimeZone = ...
    UtcPlus0200Jerusalem: TimeOfDayLocalTimeZone = ...
    UtcPlus0300Amman: TimeOfDayLocalTimeZone = ...
    UtcPlus0300AmmanOld: TimeOfDayLocalTimeZone = ...
    UtcPlus0300Baghdad: TimeOfDayLocalTimeZone = ...
    UtcPlus0300KaliningradMinsk: TimeOfDayLocalTimeZone = ...
    UtcPlus0300KuwaitRiyadh: TimeOfDayLocalTimeZone = ...
    UtcPlus0300Nairobi: TimeOfDayLocalTimeZone = ...
    UtcPlus0300Qatar: TimeOfDayLocalTimeZone = ...
    UtcPlus0330Teheran: TimeOfDayLocalTimeZone = ...
    UtcPlus0400AbuDhabiMuscat: TimeOfDayLocalTimeZone = ...
    UtcPlus0400Baku: TimeOfDayLocalTimeZone = ...
    UtcPlus0400PortLouis: TimeOfDayLocalTimeZone = ...
    UtcPlus0400Tbilisi: TimeOfDayLocalTimeZone = ...
    UtcPlus0400Yerevan: TimeOfDayLocalTimeZone = ...
    UtcPlus0430Kabul: TimeOfDayLocalTimeZone = ...
    UtcPlus0500AshgabatTashkent: TimeOfDayLocalTimeZone = ...
    UtcPlus0500IslamabadKarachi: TimeOfDayLocalTimeZone = ...
    UtcPlus0530MumbaiKolkataChennaiNewDelhi: TimeOfDayLocalTimeZone = ...
    UtcPlus0530SriJayawardenepura: TimeOfDayLocalTimeZone = ...
    UtcPlus0545Nepal: TimeOfDayLocalTimeZone = ...
    UtcPlus0600Astana: TimeOfDayLocalTimeZone = ...
    UtcPlus0600Daka: TimeOfDayLocalTimeZone = ...
    UtcPlus0600Yekaterinburg: TimeOfDayLocalTimeZone = ...
    UtcPlus0630YangonRangoon: TimeOfDayLocalTimeZone = ...
    UtcPlus0700BangkokHanoiJakarta: TimeOfDayLocalTimeZone = ...
    UtcPlus0700Novosibirsk: TimeOfDayLocalTimeZone = ...
    UtcPlus0800BeijingChongqingHongKongUrumchi: TimeOfDayLocalTimeZone = ...
    UtcPlus0800Krasnoyarsk: TimeOfDayLocalTimeZone = ...
    UtcPlus0800KualaLumpurSingapore: TimeOfDayLocalTimeZone = ...
    UtcPlus0800Perth: TimeOfDayLocalTimeZone = ...
    UtcPlus0800Taipei: TimeOfDayLocalTimeZone = ...
    UtcPlus0800UlaanbaatarUlanBator: TimeOfDayLocalTimeZone = ...
    UtcPlus0900Irkutsk: TimeOfDayLocalTimeZone = ...
    UtcPlus0900OsakaSapporoTokyo: TimeOfDayLocalTimeZone = ...
    UtcPlus0900Seoul: TimeOfDayLocalTimeZone = ...
    UtcPlus0930AdelaideDarwin: TimeOfDayLocalTimeZone = ...
    UtcPlus0930Darwin: TimeOfDayLocalTimeZone = ...
    UtcPlus1000BrisbaneCanberraMelbourneSydney: TimeOfDayLocalTimeZone = ...
    UtcPlus1000CanberraMelbourneSydney: TimeOfDayLocalTimeZone = ...
    UtcPlus1000GuamPortMoresby: TimeOfDayLocalTimeZone = ...
    UtcPlus1000Hobart: TimeOfDayLocalTimeZone = ...
    UtcPlus1000Yakutsk: TimeOfDayLocalTimeZone = ...
    UtcPlus1100Magadan: TimeOfDayLocalTimeZone = ...
    UtcPlus1100SolomonIslandsNewCaledonia: TimeOfDayLocalTimeZone = ...
    UtcPlus1100Vladivostok: TimeOfDayLocalTimeZone = ...
    UtcPlus1200AucklandWellington: TimeOfDayLocalTimeZone = ...
    UtcPlus1200CoordinatedUniversalTimePlus12: TimeOfDayLocalTimeZone = ...
    UtcPlus1200Fiji: TimeOfDayLocalTimeZone = ...
    UtcPlus1300Nukualofa: TimeOfDayLocalTimeZone = ...
    UtcPlus1300Samoa: TimeOfDayLocalTimeZone = ...
    value__ = ...


class TimeOfDayStandardTimeStartHour(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeOfDayStandardTimeStartHour

    enum TimeOfDayStandardTimeStartHour, values: Midnight (0), Value0100AM (1), Value0100PM (13), Value0200AM (2), Value0200PM (14), Value0300AM (3), Value0300PM (15), Value0400AM (4), Value0400PM (16), Value0500AM (5), Value0500PM (17), Value0600AM (6), Value0600PM (18), Value0700AM (7), Value0700PM (19), Value0800AM (8), Value0800PM (20), Value0900AM (9), Value0900PM (21), Value1000AM (10), Value1000PM (22), Value1100AM (11), Value1100PM (23), Value1200PM (12)
    """
    Midnight: TimeOfDayStandardTimeStartHour = ...
    Value0100AM: TimeOfDayStandardTimeStartHour = ...
    Value0100PM: TimeOfDayStandardTimeStartHour = ...
    Value0200AM: TimeOfDayStandardTimeStartHour = ...
    Value0200PM: TimeOfDayStandardTimeStartHour = ...
    Value0300AM: TimeOfDayStandardTimeStartHour = ...
    Value0300PM: TimeOfDayStandardTimeStartHour = ...
    Value0400AM: TimeOfDayStandardTimeStartHour = ...
    Value0400PM: TimeOfDayStandardTimeStartHour = ...
    Value0500AM: TimeOfDayStandardTimeStartHour = ...
    Value0500PM: TimeOfDayStandardTimeStartHour = ...
    Value0600AM: TimeOfDayStandardTimeStartHour = ...
    Value0600PM: TimeOfDayStandardTimeStartHour = ...
    Value0700AM: TimeOfDayStandardTimeStartHour = ...
    Value0700PM: TimeOfDayStandardTimeStartHour = ...
    Value0800AM: TimeOfDayStandardTimeStartHour = ...
    Value0800PM: TimeOfDayStandardTimeStartHour = ...
    Value0900AM: TimeOfDayStandardTimeStartHour = ...
    Value0900PM: TimeOfDayStandardTimeStartHour = ...
    Value1000AM: TimeOfDayStandardTimeStartHour = ...
    Value1000PM: TimeOfDayStandardTimeStartHour = ...
    Value1100AM: TimeOfDayStandardTimeStartHour = ...
    Value1100PM: TimeOfDayStandardTimeStartHour = ...
    Value1200PM: TimeOfDayStandardTimeStartHour = ...
    value__ = ...


class TimeOfDayStandardTimeStartMonth(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeOfDayStandardTimeStartMonth

    enum TimeOfDayStandardTimeStartMonth, values: April (4), August (8), December (12), February (2), January (1), July (7), June (6), March (3), May (5), None (0), November (11), October (10), September (9)
    """
    April: TimeOfDayStandardTimeStartMonth = ...
    August: TimeOfDayStandardTimeStartMonth = ...
    December: TimeOfDayStandardTimeStartMonth = ...
    February: TimeOfDayStandardTimeStartMonth = ...
    January: TimeOfDayStandardTimeStartMonth = ...
    July: TimeOfDayStandardTimeStartMonth = ...
    June: TimeOfDayStandardTimeStartMonth = ...
    March: TimeOfDayStandardTimeStartMonth = ...
    May: TimeOfDayStandardTimeStartMonth = ...
    November: TimeOfDayStandardTimeStartMonth = ...
    October: TimeOfDayStandardTimeStartMonth = ...
    September: TimeOfDayStandardTimeStartMonth = ...
    value__ = ...


class TimeOfDayStandardTimeStartWeek(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeOfDayStandardTimeStartWeek

    enum TimeOfDayStandardTimeStartWeek, values: First (1), Fourth (4), Last (5), None (0), Second (2), Third (3)
    """
    First: TimeOfDayStandardTimeStartWeek = ...
    Fourth: TimeOfDayStandardTimeStartWeek = ...
    Last: TimeOfDayStandardTimeStartWeek = ...
    Second: TimeOfDayStandardTimeStartWeek = ...
    Third: TimeOfDayStandardTimeStartWeek = ...
    value__ = ...


class TimeOfDayStandardTimeStartWeekday(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeOfDayStandardTimeStartWeekday

    enum TimeOfDayStandardTimeStartWeekday, values: Friday (6), Monday (2), None (0), Saturday (7), Sunday (1), Thursday (5), Tuesday (3), Wednesday (4)
    """
    Friday: TimeOfDayStandardTimeStartWeekday = ...
    Monday: TimeOfDayStandardTimeStartWeekday = ...
    Saturday: TimeOfDayStandardTimeStartWeekday = ...
    Sunday: TimeOfDayStandardTimeStartWeekday = ...
    Thursday: TimeOfDayStandardTimeStartWeekday = ...
    Tuesday: TimeOfDayStandardTimeStartWeekday = ...
    value__ = ...
    Wednesday: TimeOfDayStandardTimeStartWeekday = ...


class TimeOfDayTimeIntervalOnDp(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeOfDayTimeIntervalOnDp

    enum TimeOfDayTimeIntervalOnDp, values: None (0), Value10Minutes (4), Value10Seconds (2), Value12Hours (6), Value1Hour (5), Value1Minute (3), Value1Second (1), Value24Hours (7)
    """
    Value10Minutes: TimeOfDayTimeIntervalOnDp = ...
    Value10Seconds: TimeOfDayTimeIntervalOnDp = ...
    Value12Hours: TimeOfDayTimeIntervalOnDp = ...
    Value1Hour: TimeOfDayTimeIntervalOnDp = ...
    Value1Minute: TimeOfDayTimeIntervalOnDp = ...
    Value1Second: TimeOfDayTimeIntervalOnDp = ...
    Value24Hours: TimeOfDayTimeIntervalOnDp = ...
    value__ = ...


class TimeOfDayTypeOfSynchronizationOnDp(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeOfDayTypeOfSynchronizationOnDp

    enum TimeOfDayTypeOfSynchronizationOnDp, values: AsMaster (1), AsSlave (2), None (0)
    """
    AsMaster: TimeOfDayTypeOfSynchronizationOnDp = ...
    AsSlave: TimeOfDayTypeOfSynchronizationOnDp = ...
    value__ = ...


class Timer1Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Timer1Type

    enum Timer1Type, values: ClosingDelayWithMemory (1), WithClosingDelay (0), WithFleetingClosing (3), WithOpeningDelay (2)
    """
    ClosingDelayWithMemory: Timer1Type = ...
    value__ = ...
    WithClosingDelay: Timer1Type = ...
    WithFleetingClosing: Timer1Type = ...
    WithOpeningDelay: Timer1Type = ...


class Timer2Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Timer2Type

    enum Timer2Type, values: ClosingDelayWithMemory (1), WithClosingDelay (0), WithFleetingClosing (3), WithOpeningDelay (2)
    """
    ClosingDelayWithMemory: Timer2Type = ...
    value__ = ...
    WithClosingDelay: Timer2Type = ...
    WithFleetingClosing: Timer2Type = ...
    WithOpeningDelay: Timer2Type = ...


class Timer3Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Timer3Type

    enum Timer3Type, values: ClosingDelayWithMemory (1), WithClosingDelay (0), WithFleetingClosing (3), WithOpeningDelay (2)
    """
    ClosingDelayWithMemory: Timer3Type = ...
    value__ = ...
    WithClosingDelay: Timer3Type = ...
    WithFleetingClosing: Timer3Type = ...
    WithOpeningDelay: Timer3Type = ...


class Timer4Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Timer4Type

    enum Timer4Type, values: ClosingDelayWithMemory (1), WithClosingDelay (0), WithFleetingClosing (3), WithOpeningDelay (2)
    """
    ClosingDelayWithMemory: Timer4Type = ...
    value__ = ...
    WithClosingDelay: Timer4Type = ...
    WithFleetingClosing: Timer4Type = ...
    WithOpeningDelay: Timer4Type = ...


class Timer5Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Timer5Type

    enum Timer5Type, values: ClosingDelayWithMemory (1), WithClosingDelay (0), WithFleetingClosing (3), WithOpeningDelay (2)
    """
    ClosingDelayWithMemory: Timer5Type = ...
    value__ = ...
    WithClosingDelay: Timer5Type = ...
    WithFleetingClosing: Timer5Type = ...
    WithOpeningDelay: Timer5Type = ...


class Timer6Type(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property Timer6Type

    enum Timer6Type, values: ClosingDelayWithMemory (1), WithClosingDelay (0), WithFleetingClosing (3), WithOpeningDelay (2)
    """
    ClosingDelayWithMemory: Timer6Type = ...
    value__ = ...
    WithClosingDelay: Timer6Type = ...
    WithFleetingClosing: Timer6Type = ...
    WithOpeningDelay: Timer6Type = ...


class TimeSynchronizationNtp(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TimeSynchronizationNtp

    enum TimeSynchronizationNtp, values: Active (1), Deactivated (0)
    """
    Active: TimeSynchronizationNtp = ...
    Deactivated: TimeSynchronizationNtp = ...
    value__ = ...


class TM1InputsActiveSensors(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TM1InputsActiveSensors

    enum TM1InputsActiveSensors, values: Value1Sensor (0), Value2Sensors (1), Value3Sensors (2)
    """
    Value1Sensor: TM1InputsActiveSensors = ...
    Value2Sensors: TM1InputsActiveSensors = ...
    Value3Sensors: TM1InputsActiveSensors = ...
    value__ = ...


class TM1InputsResponseToSensorFaultOutOfRange(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TM1InputsResponseToSensorFaultOutOfRange

    enum TM1InputsResponseToSensorFaultOutOfRange, values: Deactivated (0), Signal (1), Trip (3), Warn (2)
    """
    Deactivated: TM1InputsResponseToSensorFaultOutOfRange = ...
    Signal: TM1InputsResponseToSensorFaultOutOfRange = ...
    Trip: TM1InputsResponseToSensorFaultOutOfRange = ...
    value__ = ...
    Warn: TM1InputsResponseToSensorFaultOutOfRange = ...


class TM1InputsSensorType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TM1InputsSensorType

    enum TM1InputsSensorType, values: Kty83 (2), Kty84 (3), Ntc (4), Pt100 (0), Pt1000 (1)
    """
    Kty83: TM1InputsSensorType = ...
    Kty84: TM1InputsSensorType = ...
    Ntc: TM1InputsSensorType = ...
    Pt100: TM1InputsSensorType = ...
    Pt1000: TM1InputsSensorType = ...
    value__ = ...


class TM1TripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TM1TripLevelResponse

    enum TM1TripLevelResponse, values: None (0), Signal (1), Trip (3)
    """
    Signal: TM1TripLevelResponse = ...
    Trip: TM1TripLevelResponse = ...
    value__ = ...


class TM1WarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TM1WarningLevelResponse

    enum TM1WarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: TM1WarningLevelResponse = ...
    Signal: TM1WarningLevelResponse = ...
    value__ = ...
    Warn: TM1WarningLevelResponse = ...


class TM2InputsActiveSensors(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TM2InputsActiveSensors

    enum TM2InputsActiveSensors, values: Value1Sensor (0), Value2Sensors (1), Value3Sensors (2)
    """
    Value1Sensor: TM2InputsActiveSensors = ...
    Value2Sensors: TM2InputsActiveSensors = ...
    Value3Sensors: TM2InputsActiveSensors = ...
    value__ = ...


class TM2InputsResponseToSensorFaultOutOfRange(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TM2InputsResponseToSensorFaultOutOfRange

    enum TM2InputsResponseToSensorFaultOutOfRange, values: Deactivated (0), Signal (1), Trip (3), Warn (2)
    """
    Deactivated: TM2InputsResponseToSensorFaultOutOfRange = ...
    Signal: TM2InputsResponseToSensorFaultOutOfRange = ...
    Trip: TM2InputsResponseToSensorFaultOutOfRange = ...
    value__ = ...
    Warn: TM2InputsResponseToSensorFaultOutOfRange = ...


class TM2InputsSensorType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TM2InputsSensorType

    enum TM2InputsSensorType, values: Kty83 (2), Kty84 (3), Ntc (4), Pt100 (0), Pt1000 (1)
    """
    Kty83: TM2InputsSensorType = ...
    Kty84: TM2InputsSensorType = ...
    Ntc: TM2InputsSensorType = ...
    Pt100: TM2InputsSensorType = ...
    Pt1000: TM2InputsSensorType = ...
    value__ = ...


class TM2TripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TM2TripLevelResponse

    enum TM2TripLevelResponse, values: None (0), Signal (1), Trip (3)
    """
    Signal: TM2TripLevelResponse = ...
    Trip: TM2TripLevelResponse = ...
    value__ = ...


class TM2WarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TM2WarningLevelResponse

    enum TM2WarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: TM2WarningLevelResponse = ...
    Signal: TM2WarningLevelResponse = ...
    value__ = ...
    Warn: TM2WarningLevelResponse = ...


class TraceTriggerEdge(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TraceTriggerEdge

    enum TraceTriggerEdge, values: Negative (1), Positive (0)
    """
    Negative: TraceTriggerEdge = ...
    Positive: TraceTriggerEdge = ...
    value__ = ...


class TransferArea(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Addressmapping between local I-Slave / I-device and remote partner """
    @property
    def Direction(self) -> TransferAreaDirection:
        """
        Direction of data communication between local and partner device

        Get: Direction(self: TransferArea) -> TransferAreaDirection

        Set: Direction(self: TransferArea) = value
        """
        ...

    @property
    def ExtendedPositionNumber(self) -> int:
        """
        Subslotnumber / Slotnumber of transfer area

        Get: ExtendedPositionNumber(self: TransferArea) -> int
        """
        ...

    @property
    def LocalAddresses(self) -> AddressComposition:
        """
        Local addresses of a transfer area

        Get: LocalAddresses(self: TransferArea) -> AddressComposition
        """
        ...

    @property
    def LocalToPartnerLength(self) -> int:
        """
        Length of transferred data from local to partner device

        Get: LocalToPartnerLength(self: TransferArea) -> int

        Set: LocalToPartnerLength(self: TransferArea) = value
        """
        ...

    @property
    def Name(self) -> str:
        """
        Name of the transfer area

        Get: Name(self: TransferArea) -> str

        Set: Name(self: TransferArea) = value
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: TransferArea) -> IEngineeringObject
        """
        ...

    @property
    def PartnerAddresses(self) -> AddressComposition:
        """
        Partner addresses of a transfer area

        Get: PartnerAddresses(self: TransferArea) -> AddressComposition
        """
        ...

    @property
    def PartnerToLocalLength(self) -> int:
        """
        Length of transferred data from partner to local device

        Get: PartnerToLocalLength(self: TransferArea) -> int

        Set: PartnerToLocalLength(self: TransferArea) = value
        """
        ...

    @property
    def PositionNumber(self) -> int:
        """
        Subslotnumber / Slotnumber of transfer area

        Get: PositionNumber(self: TransferArea) -> int
        """
        ...

    @property
    def TransferAreaMappingRules(self) -> TransferAreaMappingRuleComposition:
        """
        Mapping rules for transfer areas

        Get: TransferAreaMappingRules(self: TransferArea) -> TransferAreaMappingRuleComposition
        """
        ...

    @property
    def Type(self) -> TransferAreaType:
        """
        Transfer area type

        Get: Type(self: TransferArea) -> TransferAreaType

        Set: Type(self: TransferArea) = value
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: TransferArea)

            Deletes this instance.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: TransferArea) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: TransferArea) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class TransferAreaComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of transfer areas """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: TransferAreaComposition) -> IEngineeringObject
        """
        ...


    def Find(self, positionNumber:int, extendedPositionNumber:int = ...) -> TransferArea:
        """
        Find(self: TransferAreaComposition, positionNumber: int) -> TransferArea

            Find a transfer area by position number

            positionNumber: Subslotnumber / Slotnumber of transfer area

            Returns: Siemens.Engineering.HW.TransferArea

        Find(self: TransferAreaComposition, positionNumber: int, extendedPositionNumber: int) -> TransferArea

            Find a transfer area by position number

            positionNumber: Slotnumber of transfer area

            extendedPositionNumber: Subslotnumber of transfer area

            Returns: Siemens.Engineering.HW.TransferArea
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: TransferAreaComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: TransferAreaComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[TransferArea](enumerable: IEnumerable[TransferArea], value: TransferArea) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class TransferAreaDirection(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Direction of data communication between local and partner device

    enum (flags) TransferAreaDirection, values: Bidirectional (3), LocalToPartner (1), None (0), PartnerToLocal (2)
    """
    Bidirectional: TransferAreaDirection = ...
    LocalToPartner: TransferAreaDirection = ...
    PartnerToLocal: TransferAreaDirection = ...
    value__ = ...


class TransferAreaMappingRule(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Mapping rule for transfer area """
    @property
    def Begin(self) -> int:
        """
        Bit address of the begin of the mapped data

        Get: Begin(self: TransferAreaMappingRule) -> int

        Set: Begin(self: TransferAreaMappingRule) = value
        """
        ...

    @property
    def End(self) -> int:
        """
        Bit address of the end of the mapped data

        Get: End(self: TransferAreaMappingRule) -> int

        Set: End(self: TransferAreaMappingRule) = value
        """
        ...

    @property
    def IoType(self): # ->
        """
        Type of data to be mapped (Input or Output)

        Get: IoType(self: TransferAreaMappingRule) -> AddressIoType

        Set: IoType(self: TransferAreaMappingRule) = value
        """
        ...

    @property
    def Offset(self) -> int:
        """
        Offset of the transfered data

        Get: Offset(self: TransferAreaMappingRule) -> int

        Set: Offset(self: TransferAreaMappingRule) = value
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: TransferAreaMappingRule) -> IEngineeringObject
        """
        ...

    @property
    def PositionNumber(self) -> int:
        """
        Transfer area mapping rule number

        Get: PositionNumber(self: TransferAreaMappingRule) -> int
        """
        ...

    @property
    def Target(self) -> DeviceItem:
        """
        I/O module or sub-module to be mapped

        Get: Target(self: TransferAreaMappingRule) -> DeviceItem

        Set: Target(self: TransferAreaMappingRule) = value
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: TransferAreaMappingRule)

            Deletes this instance.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: TransferAreaMappingRule) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: TransferAreaMappingRule) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class TransferAreaMappingRuleComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Mapping rules for transfer areas """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: TransferAreaMappingRuleComposition) -> IEngineeringObject
        """
        ...


    def GetHashCode(self) -> int:
        """
        GetHashCode(self: TransferAreaMappingRuleComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: TransferAreaMappingRuleComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[TransferAreaMappingRule](enumerable: IEnumerable[TransferAreaMappingRule], value: TransferAreaMappingRule) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class TransferAreaType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Type of transfer area

    enum TransferAreaType, values: CD (2), F_Proxy_CD (24), F_PS (3), IN (5), IN_OUT (15), LOCAL_RECORD_PUB (17), LOCAL_RECORD_STO (16), MS (1), MSI (7), MSI_MSO (14), MSO (8), MSO_LOCAL (9), None (0), OUT (6), PROFISAFE_IN12_OUT6 (22), PROFISAFE_IN6_OUT12 (23), RECORD_READ_PUB (13), RECORD_READ_STO (12), RECORD_WRITE_PUB (11), RECORD_WRITE_STO (10), SUB_LOCAL_RECORD_PUB_READ (21), SUB_LOCAL_RECORD_STO_READ (20), SUB_MSI (18), SUB_MSO (19), TM (4)
    """
    CD: TransferAreaType = ...
    F_Proxy_CD: TransferAreaType = ...
    F_PS: TransferAreaType = ...
    IN: TransferAreaType = ...
    IN_OUT: TransferAreaType = ...
    LOCAL_RECORD_PUB: TransferAreaType = ...
    LOCAL_RECORD_STO: TransferAreaType = ...
    MS: TransferAreaType = ...
    MSI: TransferAreaType = ...
    MSI_MSO: TransferAreaType = ...
    MSO: TransferAreaType = ...
    MSO_LOCAL: TransferAreaType = ...
    OUT: TransferAreaType = ...
    PROFISAFE_IN12_OUT6: TransferAreaType = ...
    PROFISAFE_IN6_OUT12: TransferAreaType = ...
    RECORD_READ_PUB: TransferAreaType = ...
    RECORD_READ_STO: TransferAreaType = ...
    RECORD_WRITE_PUB: TransferAreaType = ...
    RECORD_WRITE_STO: TransferAreaType = ...
    SUB_LOCAL_RECORD_PUB_READ: TransferAreaType = ...
    SUB_LOCAL_RECORD_STO_READ: TransferAreaType = ...
    SUB_MSI: TransferAreaType = ...
    SUB_MSO: TransferAreaType = ...
    TM: TransferAreaType = ...
    value__ = ...


class TransmissionRate(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TransmissionRate

    enum TransmissionRate, values: Value125kHz (0), Value15MHz (4), Value1MHz (3), Value250kHz (1), Value2MHz (5), Value500kHz (2)
    """
    Value125kHz: TransmissionRate = ...
    Value15MHz: TransmissionRate = ...
    Value1MHz: TransmissionRate = ...
    Value250kHz: TransmissionRate = ...
    Value2MHz: TransmissionRate = ...
    Value500kHz: TransmissionRate = ...
    value__ = ...


class TransmissionRateAndDuplex(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TransmissionRateAndDuplex

    enum TransmissionRateAndDuplex, values: AsyncFiber10MbpsFullDuplex (13), AsyncFiber10MbpsHalfDuplex (12), AUI10Mbps (1), Automatic (8), FO10000MbpsFullDuplex (31), FO1000MbpsFullDuplex (26), FO1000MbpsFullDuplexLD (24), FO100MbpsFullDuplex (18), FO100MbpsFullDuplexLD (46), None (0), POFPCF100MbpsFullDuplex (54), TP1000MbpsFullDuplex (30), TP100MbpsFullDuplex (16), TP100MbpsHalfDuplex (15), TP10MbpsFullDuplex (11), TP10MbpsHalfDuplex (10), X1000MbpsFullDuplex (22)
    """
    AsyncFiber10MbpsFullDuplex: TransmissionRateAndDuplex = ...
    AsyncFiber10MbpsHalfDuplex: TransmissionRateAndDuplex = ...
    AUI10Mbps: TransmissionRateAndDuplex = ...
    Automatic: TransmissionRateAndDuplex = ...
    FO10000MbpsFullDuplex: TransmissionRateAndDuplex = ...
    FO1000MbpsFullDuplex: TransmissionRateAndDuplex = ...
    FO1000MbpsFullDuplexLD: TransmissionRateAndDuplex = ...
    FO100MbpsFullDuplex: TransmissionRateAndDuplex = ...
    FO100MbpsFullDuplexLD: TransmissionRateAndDuplex = ...
    POFPCF100MbpsFullDuplex: TransmissionRateAndDuplex = ...
    TP1000MbpsFullDuplex: TransmissionRateAndDuplex = ...
    TP100MbpsFullDuplex: TransmissionRateAndDuplex = ...
    TP100MbpsHalfDuplex: TransmissionRateAndDuplex = ...
    TP10MbpsFullDuplex: TransmissionRateAndDuplex = ...
    TP10MbpsHalfDuplex: TransmissionRateAndDuplex = ...
    value__ = ...
    X1000MbpsFullDuplex: TransmissionRateAndDuplex = ...


class TrippingClass(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TrippingClass

    enum TrippingClass, values: Class10 (0), Class510A (3)
    """
    Class10: TrippingClass = ...
    Class510A: TrippingClass = ...
    value__ = ...


class TypeInputS1(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TypeInputS1

    enum TypeInputS1, values: Close (5), Nc (0), Ncc (1), No (2), Noc (3), Open (4)
    """
    Close: TypeInputS1 = ...
    Nc: TypeInputS1 = ...
    Ncc: TypeInputS1 = ...
    No: TypeInputS1 = ...
    Noc: TypeInputS1 = ...
    Open: TypeInputS1 = ...
    value__ = ...


class TypeInputS2(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TypeInputS2

    enum TypeInputS2, values: Close (5), Nc (0), Ncc (1), No (2), Noc (3), Open (4)
    """
    Close: TypeInputS2 = ...
    Nc: TypeInputS2 = ...
    Ncc: TypeInputS2 = ...
    No: TypeInputS2 = ...
    Noc: TypeInputS2 = ...
    Open: TypeInputS2 = ...
    value__ = ...


class TypeInputS3(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TypeInputS3

    enum TypeInputS3, values: Close (5), Nc (0), Ncc (1), No (2), Noc (3), Open (4)
    """
    Close: TypeInputS3 = ...
    Nc: TypeInputS3 = ...
    Ncc: TypeInputS3 = ...
    No: TypeInputS3 = ...
    Noc: TypeInputS3 = ...
    Open: TypeInputS3 = ...
    value__ = ...


class TypeOfConsumerLoad(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property TypeOfConsumerLoad

    enum TypeOfConsumerLoad, values: Motor (0), ResistiveLoad (1)
    """
    Motor: TypeOfConsumerLoad = ...
    ResistiveLoad: TypeOfConsumerLoad = ...
    value__ = ...


class UnitsOfMeasure(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property UnitsOfMeasure

    enum UnitsOfMeasure, values: Deactivated (0), Degrees2DecimalPlaces (4), Degrees3DecimalPlaces (6), Degrees4DecimalPlaces (3), Inch4DecimalPlaces (2), Mm3DecimalPlaces (1), Pulses (5)
    """
    Deactivated: UnitsOfMeasure = ...
    Degrees2DecimalPlaces: UnitsOfMeasure = ...
    Degrees3DecimalPlaces: UnitsOfMeasure = ...
    Degrees4DecimalPlaces: UnitsOfMeasure = ...
    Inch4DecimalPlaces: UnitsOfMeasure = ...
    Mm3DecimalPlaces: UnitsOfMeasure = ...
    Pulses: UnitsOfMeasure = ...
    value__ = ...


class UpperCurrentWarningLimit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property UpperCurrentWarningLimit

    enum UpperCurrentWarningLimit, values: None (0), Value100 (32), Value103Dot13 (33), Value106Dot25 (34), Value109Dot38 (35), Value112Dot50 (36), Value115Dot63 (37), Value118Dot75 (38), Value121Dot88 (39), Value125 (40), Value128Dot13 (41), Value131Dot25 (42), Value134Dot38 (43), Value137Dot50 (44), Value140Dot63 (45), Value143Dot75 (46), Value146Dot88 (47), Value150 (48), Value153Dot13 (49), Value156Dot25 (50), Value159Dot38 (51), Value162Dot50 (52), Value165Dot63 (53), Value168Dot75 (54), Value171Dot88 (55), Value175 (56), Value178Dot13 (57), Value181Dot25 (58), Value184Dot38 (59), Value187Dot50 (60), Value190Dot63 (61), Value193Dot75 (62), Value196Dot88 (63), Value200 (64), Value203Dot13 (65), Value206Dot25 (66), Value209Dot38 (67), Value212Dot50 (68), Value215Dot63 (69), Value218Dot75 (70), Value221Dot88 (71), Value225 (72), Value228Dot13 (73), Value231Dot25 (74), Value234Dot38 (75), Value237Dot50 (76), Value240Dot63 (77), Value243Dot75 (78), Value246Dot88 (79), Value250 (80), Value253Dot13 (81), Value256Dot25 (82), Value259Dot38 (83), Value262Dot50 (84), Value265Dot63 (85), Value268Dot75 (86), Value271Dot88 (87), Value275 (88), Value278Dot13 (89), Value281Dot25 (90), Value284Dot38 (91), Value287Dot50 (92), Value290Dot63 (93), Value293Dot75 (94), Value296Dot88 (95), Value300 (96), Value303Dot13 (97), Value306Dot25 (98), Value309Dot38 (99), Value312Dot50 (100), Value315Dot63 (101), Value318Dot75 (102), Value321Dot88 (103), Value325 (104), Value328Dot13 (105), Value331Dot25 (106), Value334Dot38 (107), Value337Dot50 (108), Value340Dot63 (109), Value343Dot75 (110), Value346Dot88 (111), Value350 (112), Value353Dot13 (113), Value356Dot25 (114), Value359Dot38 (115), Value362Dot50 (116), Value365Dot63 (117), Value368Dot75 (118), Value371Dot88 (119), Value375 (120), Value378Dot13 (121), Value381Dot25 (122), Value384Dot38 (123), Value387Dot50 (124), Value390Dot63 (125), Value393Dot75 (126), Value396Dot88 (127), Value400 (128), Value50 (16), Value53Dot13 (17), Value56Dot25 (18), Value59Dot38 (19), Value62Dot50 (20), Value65Dot63 (21), Value68Dot75 (22), Value71Dot88 (23), Value75 (24), Value78Dot13 (25), Value81Dot25 (26), Value84Dot38 (27), Value87Dot50 (28), Value90Dot63 (29), Value93Dot75 (30), Value96Dot88 (31)
    """
    Value100: UpperCurrentWarningLimit = ...
    Value103Dot13: UpperCurrentWarningLimit = ...
    Value106Dot25: UpperCurrentWarningLimit = ...
    Value109Dot38: UpperCurrentWarningLimit = ...
    Value112Dot50: UpperCurrentWarningLimit = ...
    Value115Dot63: UpperCurrentWarningLimit = ...
    Value118Dot75: UpperCurrentWarningLimit = ...
    Value121Dot88: UpperCurrentWarningLimit = ...
    Value125: UpperCurrentWarningLimit = ...
    Value128Dot13: UpperCurrentWarningLimit = ...
    Value131Dot25: UpperCurrentWarningLimit = ...
    Value134Dot38: UpperCurrentWarningLimit = ...
    Value137Dot50: UpperCurrentWarningLimit = ...
    Value140Dot63: UpperCurrentWarningLimit = ...
    Value143Dot75: UpperCurrentWarningLimit = ...
    Value146Dot88: UpperCurrentWarningLimit = ...
    Value150: UpperCurrentWarningLimit = ...
    Value153Dot13: UpperCurrentWarningLimit = ...
    Value156Dot25: UpperCurrentWarningLimit = ...
    Value159Dot38: UpperCurrentWarningLimit = ...
    Value162Dot50: UpperCurrentWarningLimit = ...
    Value165Dot63: UpperCurrentWarningLimit = ...
    Value168Dot75: UpperCurrentWarningLimit = ...
    Value171Dot88: UpperCurrentWarningLimit = ...
    Value175: UpperCurrentWarningLimit = ...
    Value178Dot13: UpperCurrentWarningLimit = ...
    Value181Dot25: UpperCurrentWarningLimit = ...
    Value184Dot38: UpperCurrentWarningLimit = ...
    Value187Dot50: UpperCurrentWarningLimit = ...
    Value190Dot63: UpperCurrentWarningLimit = ...
    Value193Dot75: UpperCurrentWarningLimit = ...
    Value196Dot88: UpperCurrentWarningLimit = ...
    Value200: UpperCurrentWarningLimit = ...
    Value203Dot13: UpperCurrentWarningLimit = ...
    Value206Dot25: UpperCurrentWarningLimit = ...
    Value209Dot38: UpperCurrentWarningLimit = ...
    Value212Dot50: UpperCurrentWarningLimit = ...
    Value215Dot63: UpperCurrentWarningLimit = ...
    Value218Dot75: UpperCurrentWarningLimit = ...
    Value221Dot88: UpperCurrentWarningLimit = ...
    Value225: UpperCurrentWarningLimit = ...
    Value228Dot13: UpperCurrentWarningLimit = ...
    Value231Dot25: UpperCurrentWarningLimit = ...
    Value234Dot38: UpperCurrentWarningLimit = ...
    Value237Dot50: UpperCurrentWarningLimit = ...
    Value240Dot63: UpperCurrentWarningLimit = ...
    Value243Dot75: UpperCurrentWarningLimit = ...
    Value246Dot88: UpperCurrentWarningLimit = ...
    Value250: UpperCurrentWarningLimit = ...
    Value253Dot13: UpperCurrentWarningLimit = ...
    Value256Dot25: UpperCurrentWarningLimit = ...
    Value259Dot38: UpperCurrentWarningLimit = ...
    Value262Dot50: UpperCurrentWarningLimit = ...
    Value265Dot63: UpperCurrentWarningLimit = ...
    Value268Dot75: UpperCurrentWarningLimit = ...
    Value271Dot88: UpperCurrentWarningLimit = ...
    Value275: UpperCurrentWarningLimit = ...
    Value278Dot13: UpperCurrentWarningLimit = ...
    Value281Dot25: UpperCurrentWarningLimit = ...
    Value284Dot38: UpperCurrentWarningLimit = ...
    Value287Dot50: UpperCurrentWarningLimit = ...
    Value290Dot63: UpperCurrentWarningLimit = ...
    Value293Dot75: UpperCurrentWarningLimit = ...
    Value296Dot88: UpperCurrentWarningLimit = ...
    Value300: UpperCurrentWarningLimit = ...
    Value303Dot13: UpperCurrentWarningLimit = ...
    Value306Dot25: UpperCurrentWarningLimit = ...
    Value309Dot38: UpperCurrentWarningLimit = ...
    Value312Dot50: UpperCurrentWarningLimit = ...
    Value315Dot63: UpperCurrentWarningLimit = ...
    Value318Dot75: UpperCurrentWarningLimit = ...
    Value321Dot88: UpperCurrentWarningLimit = ...
    Value325: UpperCurrentWarningLimit = ...
    Value328Dot13: UpperCurrentWarningLimit = ...
    Value331Dot25: UpperCurrentWarningLimit = ...
    Value334Dot38: UpperCurrentWarningLimit = ...
    Value337Dot50: UpperCurrentWarningLimit = ...
    Value340Dot63: UpperCurrentWarningLimit = ...
    Value343Dot75: UpperCurrentWarningLimit = ...
    Value346Dot88: UpperCurrentWarningLimit = ...
    Value350: UpperCurrentWarningLimit = ...
    Value353Dot13: UpperCurrentWarningLimit = ...
    Value356Dot25: UpperCurrentWarningLimit = ...
    Value359Dot38: UpperCurrentWarningLimit = ...
    Value362Dot50: UpperCurrentWarningLimit = ...
    Value365Dot63: UpperCurrentWarningLimit = ...
    Value368Dot75: UpperCurrentWarningLimit = ...
    Value371Dot88: UpperCurrentWarningLimit = ...
    Value375: UpperCurrentWarningLimit = ...
    Value378Dot13: UpperCurrentWarningLimit = ...
    Value381Dot25: UpperCurrentWarningLimit = ...
    Value384Dot38: UpperCurrentWarningLimit = ...
    Value387Dot50: UpperCurrentWarningLimit = ...
    Value390Dot63: UpperCurrentWarningLimit = ...
    Value393Dot75: UpperCurrentWarningLimit = ...
    Value396Dot88: UpperCurrentWarningLimit = ...
    Value400: UpperCurrentWarningLimit = ...
    Value50: UpperCurrentWarningLimit = ...
    Value53Dot13: UpperCurrentWarningLimit = ...
    Value56Dot25: UpperCurrentWarningLimit = ...
    Value59Dot38: UpperCurrentWarningLimit = ...
    Value62Dot50: UpperCurrentWarningLimit = ...
    Value65Dot63: UpperCurrentWarningLimit = ...
    Value68Dot75: UpperCurrentWarningLimit = ...
    Value71Dot88: UpperCurrentWarningLimit = ...
    Value75: UpperCurrentWarningLimit = ...
    Value78Dot13: UpperCurrentWarningLimit = ...
    Value81Dot25: UpperCurrentWarningLimit = ...
    Value84Dot38: UpperCurrentWarningLimit = ...
    Value87Dot50: UpperCurrentWarningLimit = ...
    Value90Dot63: UpperCurrentWarningLimit = ...
    Value93Dot75: UpperCurrentWarningLimit = ...
    Value96Dot88: UpperCurrentWarningLimit = ...
    value__ = ...


class View(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    The list of possible views in the HW editor

    enum View, values: Device (0), Network (1), Topology (2)
    """
    Device: View = ...
    Network: View = ...
    Topology: View = ...
    value__ = ...


class VirtualSubType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property VirtualSubType

    enum VirtualSubType, values: Empty (0), MsoLocal (1), MsoSub (2)
    """
    Empty: VirtualSubType = ...
    MsoLocal: VirtualSubType = ...
    MsoSub: VirtualSubType = ...
    value__ = ...


class VirtualType(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property VirtualType

    enum VirtualType, values: Empty (0), MsoLocal (1)
    """
    Empty: VirtualType = ...
    MsoLocal: VirtualType = ...
    value__ = ...


class VoltageDisplay(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property VoltageDisplay

    enum VoltageDisplay, values: LineToLineVoltage (1), PhaseVoltage (0)
    """
    LineToLineVoltage: VoltageDisplay = ...
    PhaseVoltage: VoltageDisplay = ...
    value__ = ...


class VoltageLowerTripLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property VoltageLowerTripLevelResponse

    enum VoltageLowerTripLevelResponse, values: Deactivated (0), Signal (1), Trip (3)
    """
    Deactivated: VoltageLowerTripLevelResponse = ...
    Signal: VoltageLowerTripLevelResponse = ...
    Trip: VoltageLowerTripLevelResponse = ...
    value__ = ...


class VoltageLowerWarningLevelActiveStatus(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property VoltageLowerWarningLevelActiveStatus

    enum VoltageLowerWarningLevelActiveStatus, values: AlwaysExceptWithTpfOn (1), AlwaysOn (0), IfMotorIsRunningExceptTpf (2)
    """
    AlwaysExceptWithTpfOn: VoltageLowerWarningLevelActiveStatus = ...
    AlwaysOn: VoltageLowerWarningLevelActiveStatus = ...
    IfMotorIsRunningExceptTpf: VoltageLowerWarningLevelActiveStatus = ...
    value__ = ...


class VoltageLowerWarningLevelResponse(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property VoltageLowerWarningLevelResponse

    enum VoltageLowerWarningLevelResponse, values: Deactivated (0), Signal (1), Warn (2)
    """
    Deactivated: VoltageLowerWarningLevelResponse = ...
    Signal: VoltageLowerWarningLevelResponse = ...
    value__ = ...
    Warn: VoltageLowerWarningLevelResponse = ...


class VoltageState(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property VoltageState

    enum VoltageState, values: NoStatusAvailable (0), StatusOfSupplyVoltageLPlus (1), StatusOfSupplyVoltageLPlusAndFeedbackVoltage (2)
    """
    NoStatusAvailable: VoltageState = ...
    StatusOfSupplyVoltageLPlus: VoltageState = ...
    StatusOfSupplyVoltageLPlusAndFeedbackVoltage: VoltageState = ...
    value__ = ...


class VoltageTypeOfLoadForVoltageCosPhiAndPower(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property VoltageTypeOfLoadForVoltageCosPhiAndPower

    enum VoltageTypeOfLoadForVoltageCosPhiAndPower, values: OnePhase (1), TriPhase (0)
    """
    OnePhase: VoltageTypeOfLoadForVoltageCosPhiAndPower = ...
    TriPhase: VoltageTypeOfLoadForVoltageCosPhiAndPower = ...
    value__ = ...


class VolumeFlowUnit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property VolumeFlowUnit

    enum VolumeFlowUnit, values: AcreFeetPerDay (16), AcreFeetPerHour (17), AcreFeetPerMinute (18), AcreFeetPerSecond (19), BarrelBeerPerDay (28), BarrelBeerPerHour (29), BarrelBeerPerMinute (30), BarrelBeerPerSecond (31), BarrelPerDay (24), BarrelPerHour (25), BarrelPerMinute (26), BarrelPerSecond (27), BegafeetPerDay (101), BushelPerDay (32), BushelPerHour (33), BushelPerMinute (34), BushelPerSecond (35), CubiccmPerDay (36), CubiccmPerHour (37), CubiccmPerMinute (38), CubiccmPerSecond (39), CubicFeetPerDay (45), CubicFeetPerHour (46), CubicFeetPerMinute (47), CubicFeetPerSecond (48), CubicInchPerDay (61), CubicInchPerHour (62), CubicInchPerMin (63), CubicInchPerSecond (64), CubicKmPerDay (81), CubicKmPerHour (82), CubicKmPerMinute (83), CubicKmPerSecond (84), CubicmeterPerDay (89), CubicmeterPerHour (90), CubicmeterPerMinute (91), CubicmeterPerSecond (92), CubicmmPerDay (122), CubicmmPerHour (123), CubicmmPerMinute (124), CubicmmPerSecond (125), CubicyardPerDay (126), CubicyardPerHour (127), CubicyardPerMinute (128), CubicyardPerSecond (129), FluidOuncePerDay (40), FluidOuncePerHour (41), FluidOuncePerMinute (42), FluidOuncePerSecond (43), GalPerDay (53), GalPerHour (54), GalPerMinute (55), GalPerSecond (56), GalUKPerDay (49), GalUKPerHour (50), GalUKPerMinute (51), GalUKPerSecond (52), HektorliterPerDay (57), HektorliterPerHour (58), HektorliterPerMinute (59), HektorliterPerSecond (60), KilobarrelPerDay (65), KilobarrelPerHour (66), KilobarrelPerMinute (67), KilobarrelPerSecond (68), KiloGalPerDay (73), KiloGalPerHour (74), KiloGalPerMinute (75), KiloGalPerSecond (76), KiloGalUKPerDay (69), KiloGalUKPerHour (70), KiloGalUKPerMinute (71), KiloGalUKPerSecond (72), KlPerDay (77), KlPerHour (78), KlPerMinute (79), KlPerSecond (80), LitrePerDay (85), LitrePerHour (86), LitrePerMinute (87), LitrePerSecond (88), MegabarrelPerDay (94), MegabarrelPerHour (96), MegabarrelPerMinute (98), MegabarrelPerSecond (100), MegagalPerDay (111), MegagalPerHour (113), MegagalPerMinute (115), MegagalPerSecond (117), MegagalUKPerDay (103), MegagalUKPerHour (105), MegagalUKPerMinute (107), MegagalUKPerSecond (109), MegalitersPerDay (44), MicroBarrelPerDay (0), MicroBarrelPerHour (1), MicroBarrelPerMinute (2), MicroBarrelPerSecond (3), MicroCubicmeterPerDay (12), MicroCubicmeterPerHour (13), MicroCubicmeterPerMinute (14), MicroCubicmeterPerSecond (15), MicroGalPerDay (8), MicroGalPerHour (9), MicroGalPerMinute (10), MicroGalPerSecond (11), MicroGalUKPerDay (4), MicroGalUKPerHour (5), MicroGalUKPerMinute (6), MicroGalUKPerSecond (7), MilibarrelPerDay (93), MilibarrelPerHour (95), MilibarrelPerMinute (97), MilibarrelPerSecond (99), MiligalPerDay (110), MiligalPerHour (112), MiligalPerMinute (114), MiligalPerSecond (116), MiligalUKPerDay (102), MiligalUKPerHour (104), MiligalUKPerMinute (106), MiligalUKPerSecond (108), MililiterPerDay (118), MililiterPerHour (119), MililiterPerMinute (120), MililiterPerSecond (121), USBarrelPerDay (21), USBarrelPerHour (22), USBarrelPerMinute (23), USBarrelPerSecond (20)
    """
    AcreFeetPerDay: VolumeFlowUnit = ...
    AcreFeetPerHour: VolumeFlowUnit = ...
    AcreFeetPerMinute: VolumeFlowUnit = ...
    AcreFeetPerSecond: VolumeFlowUnit = ...
    BarrelBeerPerDay: VolumeFlowUnit = ...
    BarrelBeerPerHour: VolumeFlowUnit = ...
    BarrelBeerPerMinute: VolumeFlowUnit = ...
    BarrelBeerPerSecond: VolumeFlowUnit = ...
    BarrelPerDay: VolumeFlowUnit = ...
    BarrelPerHour: VolumeFlowUnit = ...
    BarrelPerMinute: VolumeFlowUnit = ...
    BarrelPerSecond: VolumeFlowUnit = ...
    BegafeetPerDay: VolumeFlowUnit = ...
    BushelPerDay: VolumeFlowUnit = ...
    BushelPerHour: VolumeFlowUnit = ...
    BushelPerMinute: VolumeFlowUnit = ...
    BushelPerSecond: VolumeFlowUnit = ...
    CubiccmPerDay: VolumeFlowUnit = ...
    CubiccmPerHour: VolumeFlowUnit = ...
    CubiccmPerMinute: VolumeFlowUnit = ...
    CubiccmPerSecond: VolumeFlowUnit = ...
    CubicFeetPerDay: VolumeFlowUnit = ...
    CubicFeetPerHour: VolumeFlowUnit = ...
    CubicFeetPerMinute: VolumeFlowUnit = ...
    CubicFeetPerSecond: VolumeFlowUnit = ...
    CubicInchPerDay: VolumeFlowUnit = ...
    CubicInchPerHour: VolumeFlowUnit = ...
    CubicInchPerMin: VolumeFlowUnit = ...
    CubicInchPerSecond: VolumeFlowUnit = ...
    CubicKmPerDay: VolumeFlowUnit = ...
    CubicKmPerHour: VolumeFlowUnit = ...
    CubicKmPerMinute: VolumeFlowUnit = ...
    CubicKmPerSecond: VolumeFlowUnit = ...
    CubicmeterPerDay: VolumeFlowUnit = ...
    CubicmeterPerHour: VolumeFlowUnit = ...
    CubicmeterPerMinute: VolumeFlowUnit = ...
    CubicmeterPerSecond: VolumeFlowUnit = ...
    CubicmmPerDay: VolumeFlowUnit = ...
    CubicmmPerHour: VolumeFlowUnit = ...
    CubicmmPerMinute: VolumeFlowUnit = ...
    CubicmmPerSecond: VolumeFlowUnit = ...
    CubicyardPerDay: VolumeFlowUnit = ...
    CubicyardPerHour: VolumeFlowUnit = ...
    CubicyardPerMinute: VolumeFlowUnit = ...
    CubicyardPerSecond: VolumeFlowUnit = ...
    FluidOuncePerDay: VolumeFlowUnit = ...
    FluidOuncePerHour: VolumeFlowUnit = ...
    FluidOuncePerMinute: VolumeFlowUnit = ...
    FluidOuncePerSecond: VolumeFlowUnit = ...
    GalPerDay: VolumeFlowUnit = ...
    GalPerHour: VolumeFlowUnit = ...
    GalPerMinute: VolumeFlowUnit = ...
    GalPerSecond: VolumeFlowUnit = ...
    GalUKPerDay: VolumeFlowUnit = ...
    GalUKPerHour: VolumeFlowUnit = ...
    GalUKPerMinute: VolumeFlowUnit = ...
    GalUKPerSecond: VolumeFlowUnit = ...
    HektorliterPerDay: VolumeFlowUnit = ...
    HektorliterPerHour: VolumeFlowUnit = ...
    HektorliterPerMinute: VolumeFlowUnit = ...
    HektorliterPerSecond: VolumeFlowUnit = ...
    KilobarrelPerDay: VolumeFlowUnit = ...
    KilobarrelPerHour: VolumeFlowUnit = ...
    KilobarrelPerMinute: VolumeFlowUnit = ...
    KilobarrelPerSecond: VolumeFlowUnit = ...
    KiloGalPerDay: VolumeFlowUnit = ...
    KiloGalPerHour: VolumeFlowUnit = ...
    KiloGalPerMinute: VolumeFlowUnit = ...
    KiloGalPerSecond: VolumeFlowUnit = ...
    KiloGalUKPerDay: VolumeFlowUnit = ...
    KiloGalUKPerHour: VolumeFlowUnit = ...
    KiloGalUKPerMinute: VolumeFlowUnit = ...
    KiloGalUKPerSecond: VolumeFlowUnit = ...
    KlPerDay: VolumeFlowUnit = ...
    KlPerHour: VolumeFlowUnit = ...
    KlPerMinute: VolumeFlowUnit = ...
    KlPerSecond: VolumeFlowUnit = ...
    LitrePerDay: VolumeFlowUnit = ...
    LitrePerHour: VolumeFlowUnit = ...
    LitrePerMinute: VolumeFlowUnit = ...
    LitrePerSecond: VolumeFlowUnit = ...
    MegabarrelPerDay: VolumeFlowUnit = ...
    MegabarrelPerHour: VolumeFlowUnit = ...
    MegabarrelPerMinute: VolumeFlowUnit = ...
    MegabarrelPerSecond: VolumeFlowUnit = ...
    MegagalPerDay: VolumeFlowUnit = ...
    MegagalPerHour: VolumeFlowUnit = ...
    MegagalPerMinute: VolumeFlowUnit = ...
    MegagalPerSecond: VolumeFlowUnit = ...
    MegagalUKPerDay: VolumeFlowUnit = ...
    MegagalUKPerHour: VolumeFlowUnit = ...
    MegagalUKPerMinute: VolumeFlowUnit = ...
    MegagalUKPerSecond: VolumeFlowUnit = ...
    MegalitersPerDay: VolumeFlowUnit = ...
    MicroBarrelPerDay: VolumeFlowUnit = ...
    MicroBarrelPerHour: VolumeFlowUnit = ...
    MicroBarrelPerMinute: VolumeFlowUnit = ...
    MicroBarrelPerSecond: VolumeFlowUnit = ...
    MicroCubicmeterPerDay: VolumeFlowUnit = ...
    MicroCubicmeterPerHour: VolumeFlowUnit = ...
    MicroCubicmeterPerMinute: VolumeFlowUnit = ...
    MicroCubicmeterPerSecond: VolumeFlowUnit = ...
    MicroGalPerDay: VolumeFlowUnit = ...
    MicroGalPerHour: VolumeFlowUnit = ...
    MicroGalPerMinute: VolumeFlowUnit = ...
    MicroGalPerSecond: VolumeFlowUnit = ...
    MicroGalUKPerDay: VolumeFlowUnit = ...
    MicroGalUKPerHour: VolumeFlowUnit = ...
    MicroGalUKPerMinute: VolumeFlowUnit = ...
    MicroGalUKPerSecond: VolumeFlowUnit = ...
    MilibarrelPerDay: VolumeFlowUnit = ...
    MilibarrelPerHour: VolumeFlowUnit = ...
    MilibarrelPerMinute: VolumeFlowUnit = ...
    MilibarrelPerSecond: VolumeFlowUnit = ...
    MiligalPerDay: VolumeFlowUnit = ...
    MiligalPerHour: VolumeFlowUnit = ...
    MiligalPerMinute: VolumeFlowUnit = ...
    MiligalPerSecond: VolumeFlowUnit = ...
    MiligalUKPerDay: VolumeFlowUnit = ...
    MiligalUKPerHour: VolumeFlowUnit = ...
    MiligalUKPerMinute: VolumeFlowUnit = ...
    MiligalUKPerSecond: VolumeFlowUnit = ...
    MililiterPerDay: VolumeFlowUnit = ...
    MililiterPerHour: VolumeFlowUnit = ...
    MililiterPerMinute: VolumeFlowUnit = ...
    MililiterPerSecond: VolumeFlowUnit = ...
    USBarrelPerDay: VolumeFlowUnit = ...
    USBarrelPerHour: VolumeFlowUnit = ...
    USBarrelPerMinute: VolumeFlowUnit = ...
    USBarrelPerSecond: VolumeFlowUnit = ...
    value__ = ...


class VolumeUnit(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property VolumeUnit

    enum VolumeUnit, values: AF (0), Bbl (1), BblBeer (3), BblUS (2), Bu (4), Cl (5), Cm (6), CubicIn (13), CubicM (16), CubicMiles (17), Cubicmm (19), CubicYd (22), Dm (7), FlOz (8), Ft (9), Gal (10), GalUk (11), Hl (12), Kl (14), L (15), Ml (18), Pints (20), Quart (21)
    """
    AF: VolumeUnit = ...
    Bbl: VolumeUnit = ...
    BblBeer: VolumeUnit = ...
    BblUS: VolumeUnit = ...
    Bu: VolumeUnit = ...
    Cl: VolumeUnit = ...
    Cm: VolumeUnit = ...
    CubicIn: VolumeUnit = ...
    CubicM: VolumeUnit = ...
    CubicMiles: VolumeUnit = ...
    Cubicmm: VolumeUnit = ...
    CubicYd: VolumeUnit = ...
    Dm: VolumeUnit = ...
    FlOz: VolumeUnit = ...
    Ft: VolumeUnit = ...
    Gal: VolumeUnit = ...
    GalUk: VolumeUnit = ...
    Hl: VolumeUnit = ...
    Kl: VolumeUnit = ...
    L: VolumeUnit = ...
    Ml: VolumeUnit = ...
    Pints: VolumeUnit = ...
    Quart: VolumeUnit = ...
    value__ = ...


class WatchAndForceTableAccess(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for WebAccess

    enum WatchAndForceTableAccess, values: None (0), Read (1), Write (2)
    """
    Read: WatchAndForceTableAccess = ...
    value__ = ...
    Write: WatchAndForceTableAccess = ...


class WatchdogBusPLCFaultReset(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property WatchdogBusPLCFaultReset

    enum WatchdogBusPLCFaultReset, values: Auto (1), Manual (0)
    """
    Auto: WatchdogBusPLCFaultReset = ...
    Manual: WatchdogBusPLCFaultReset = ...
    value__ = ...


class WatchTableAccessRule(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Represents a  Watch Table Access Rule """
    @property
    def Access(self) -> WatchAndForceTableAccess:
        """
        Represents web server access

        Get: Access(self: WatchTableAccessRule) -> WatchAndForceTableAccess

        Set: Access(self: WatchTableAccessRule) = value
        """
        ...

    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: WatchTableAccessRule) -> IEngineeringObject
        """
        ...

    @property
    def WatchTable(self) -> PlcWatchTable:
        """
        Represents Plc WatchTable

        Get: WatchTable(self: WatchTableAccessRule) -> PlcWatchTable
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: WatchTableAccessRule)

            Deletes this instance.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: WatchTableAccessRule) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: WatchTableAccessRule) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class WatchTableAccessRuleComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Composition of Watch Table Access """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: WatchTableAccessRuleComposition) -> IEngineeringObject
        """
        ...


    def Find(self, watchTable:PlcWatchTable) -> WatchTableAccessRule:
        """
        Find(self: WatchTableAccessRuleComposition, watchTable: PlcWatchTable) -> WatchTableAccessRule

            Finds a given WatchTableAccessRule by PlcWatchTable

            watchTable: Watch Table

            Returns: Siemens.Engineering.HW.WatchTableAccessRule
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: WatchTableAccessRuleComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: WatchTableAccessRuleComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[WatchTableAccessRule](enumerable: IEnumerable[WatchTableAccessRule], value: WatchTableAccessRule) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class WebserverEntryPage(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property WebserverEntryPage

    enum WebserverEntryPage, values: Awp1 (1), IntroPage (0)
    """
    Awp1: WebserverEntryPage = ...
    IntroPage: WebserverEntryPage = ...
    value__ = ...


class WebserverUser(IEquatable, IEngineeringObject, IInternalObjectAccess): # skipped bases: <type 'IEngineeringCompositionOrObject'>, <type 'IInternalBaseAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringInstance'>, <type 'object'>
    """ Represents a WebserverUser """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        EOM parent of this object

        Get: Parent(self: WebserverUser) -> IEngineeringObject
        """
        ...

    @property
    def Permissions(self) -> WebserverUserPermissions:
        """
        Represents webserver permission for WebserverUser

        Get: Permissions(self: WebserverUser) -> WebserverUserPermissions

        Set: Permissions(self: WebserverUser) = value
        """
        ...

    @property
    def UserName(self) -> str:
        """
        The name of the WebServer User

        Get: UserName(self: WebserverUser) -> str
        """
        ...


    def Delete(self): # ->
        """
        Delete(self: WebserverUser)

            Deletes this instance.
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: WebserverUser) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def SetPassword(self, password:SecureString): # ->
        """
        SetPassword(self: WebserverUser, password: SecureString)

            Set Password for Web server user

            password: Password of User
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: WebserverUser) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class WebserverUserComposition(IInternalCompositionAccess, IEngineeringComposition, IEquatable): # skipped bases: <type 'IEngineeringInstance'>, <type 'IEnumerable'>, <type 'IInternalBaseAccess'>, <type 'IInternalCollectionAccess'>, <type 'IInternalInstanceAccess'>, <type 'IEngineeringCompositionOrObject'>, <type 'object'>
    """ Represent list of Webserver Users """
    @property
    def Parent(self) -> IEngineeringObject:
        """
        Gets the parent.

        Get: Parent(self: WebserverUserComposition) -> IEngineeringObject
        """
        ...


    def Find(self, userName:str) -> WebserverUser:
        """
        Find(self: WebserverUserComposition, userName: str) -> WebserverUser

            Finds a given webserver user

            userName: Username of webserver user

            Returns: Siemens.Engineering.HW.WebserverUser
        """
        ...

    def GetHashCode(self) -> int:
        """
        GetHashCode(self: WebserverUserComposition) -> int

            Returns a hash code for this instance.

            Returns: A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
        """
        ...

    def ToString(self) -> str:
        """
        ToString(self: WebserverUserComposition) -> str

            Returns a System.String that represents the current System.Object.

            Returns: A System.String that represents the current System.Object.
        """
        ...

    def __contains__(self, *args): #cannot find CLR method
        """ __contains__[WebserverUser](enumerable: IEnumerable[WebserverUser], value: WebserverUser) -> bool """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class WebserverUserPermissions(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Represents Webserver User Permissions

    enum WebserverUserPermissions, values: AcknowledgeMessages (32), Backup (32768), ChangeApplicationParameter (16384), ChangeOperatingMode (1024), ChangeSystemParameter (8192), DoDiagnosis (1), FAdmin (131072), FlashLed (2048), ManageUserDefinedWebPages (262144), ModifyFiles (512), ModifyTag (4), ModifyTagStatus (16), None (0), OpenUserDefinedWebPages (64), ReadFiles (256), ReadTag (2), ReadTagStatus (8), Restore (65536), WriteFirmware (4096), WriteUserDefinedWebPages (128)
    """
    AcknowledgeMessages: WebserverUserPermissions = ...
    Backup: WebserverUserPermissions = ...
    ChangeApplicationParameter: WebserverUserPermissions = ...
    ChangeOperatingMode: WebserverUserPermissions = ...
    ChangeSystemParameter: WebserverUserPermissions = ...
    DoDiagnosis: WebserverUserPermissions = ...
    FAdmin: WebserverUserPermissions = ...
    FlashLed: WebserverUserPermissions = ...
    ManageUserDefinedWebPages: WebserverUserPermissions = ...
    ModifyFiles: WebserverUserPermissions = ...
    ModifyTag: WebserverUserPermissions = ...
    ModifyTagStatus: WebserverUserPermissions = ...
    OpenUserDefinedWebPages: WebserverUserPermissions = ...
    ReadFiles: WebserverUserPermissions = ...
    ReadTag: WebserverUserPermissions = ...
    ReadTagStatus: WebserverUserPermissions = ...
    Restore: WebserverUserPermissions = ...
    value__ = ...
    WriteFirmware: WebserverUserPermissions = ...
    WriteUserDefinedWebPages: WebserverUserPermissions = ...


class WithBlockCheck(Enum): # skipped bases: <type 'IComparable'>, <type 'IFormattable'>, <type 'IConvertible'>, <type 'object'>
    """
    Possible values for property WithBlockCheck

    enum WithBlockCheck, values: Activated (1), Deactivated (0)
    """
    Activated: WithBlockCheck = ...
    Deactivated: WithBlockCheck = ...
    value__ = ...


# variables with complex values
