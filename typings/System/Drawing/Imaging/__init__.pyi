# encoding: utf-8
# module System.Drawing.Imaging calls itself Imaging
# from System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
# by generator 1.145
""" no doc """
from __future__ import annotations
from System import (Array, AsyncCallback, Enum, Guid, IAsyncResult, 
    ICloneable, IDisposable, Int16, IntPtr, MulticastDelegate, Single)

from System.Drawing import Color, Image, Rectangle

from System.Drawing.Drawing2D import WrapMode

from typing import Self

"""The following names are not found in the module: field#
"""

# no functions
# classes

class BitmapData: # skipped bases: <type 'object'>, <type 'object'>
    """ BitmapData() """
    @property
    def Height(self) -> int:
        """
        Get: Height(self: BitmapData) -> int
        Set: Height(self: BitmapData) = value
        """
        ...

    @property
    def PixelFormat(self) -> PixelFormat:
        """
        Get: PixelFormat(self: BitmapData) -> PixelFormat
        Set: PixelFormat(self: BitmapData) = value
        """
        ...

    @property
    def Reserved(self) -> int:
        """
        Get: Reserved(self: BitmapData) -> int
        Set: Reserved(self: BitmapData) = value
        """
        ...

    @property
    def Scan0(self) -> IntPtr:
        """
        Get: Scan0(self: BitmapData) -> IntPtr
        Set: Scan0(self: BitmapData) = value
        """
        ...

    @property
    def Stride(self) -> int:
        """
        Get: Stride(self: BitmapData) -> int
        Set: Stride(self: BitmapData) = value
        """
        ...

    @property
    def Width(self) -> int:
        """
        Get: Width(self: BitmapData) -> int
        Set: Width(self: BitmapData) = value
        """
        ...



class ColorAdjustType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ColorAdjustType, values: Any (6), Bitmap (1), Brush (2), Count (5), Default (0), Pen (3), Text (4) """
    Any: ColorAdjustType = ...
    Bitmap: ColorAdjustType = ...
    Brush: ColorAdjustType = ...
    Count: ColorAdjustType = ...
    Default: ColorAdjustType = ...
    Pen: ColorAdjustType = ...
    Text: ColorAdjustType = ...
    value__ = ...


class ColorChannelFlag(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ColorChannelFlag, values: ColorChannelC (0), ColorChannelK (3), ColorChannelLast (4), ColorChannelM (1), ColorChannelY (2) """
    ColorChannelC: ColorChannelFlag = ...
    ColorChannelK: ColorChannelFlag = ...
    ColorChannelLast: ColorChannelFlag = ...
    ColorChannelM: ColorChannelFlag = ...
    ColorChannelY: ColorChannelFlag = ...
    value__ = ...


class ColorMap: # skipped bases: <type 'object'>, <type 'object'>
    """ ColorMap() """
    @property
    def NewColor(self) -> Color:
        """
        Get: NewColor(self: ColorMap) -> Color
        Set: NewColor(self: ColorMap) = value
        """
        ...

    @property
    def OldColor(self) -> Color:
        """
        Get: OldColor(self: ColorMap) -> Color
        Set: OldColor(self: ColorMap) = value
        """
        ...



class ColorMapType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ColorMapType, values: Brush (1), Default (0) """
    Brush: ColorMapType = ...
    Default: ColorMapType = ...
    value__ = ...


class ColorMatrix: # skipped bases: <type 'object'>, <type 'object'>
    """
    ColorMatrix()
    ColorMatrix(newColorMatrix: Array[Array[Single]])
    """
    @property
    def Matrix00(self) -> Single:
        """
        Get: Matrix00(self: ColorMatrix) -> Single
        Set: Matrix00(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix01(self) -> Single:
        """
        Get: Matrix01(self: ColorMatrix) -> Single
        Set: Matrix01(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix02(self) -> Single:
        """
        Get: Matrix02(self: ColorMatrix) -> Single
        Set: Matrix02(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix03(self) -> Single:
        """
        Get: Matrix03(self: ColorMatrix) -> Single
        Set: Matrix03(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix04(self) -> Single:
        """
        Get: Matrix04(self: ColorMatrix) -> Single
        Set: Matrix04(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix10(self) -> Single:
        """
        Get: Matrix10(self: ColorMatrix) -> Single
        Set: Matrix10(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix11(self) -> Single:
        """
        Get: Matrix11(self: ColorMatrix) -> Single
        Set: Matrix11(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix12(self) -> Single:
        """
        Get: Matrix12(self: ColorMatrix) -> Single
        Set: Matrix12(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix13(self) -> Single:
        """
        Get: Matrix13(self: ColorMatrix) -> Single
        Set: Matrix13(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix14(self) -> Single:
        """
        Get: Matrix14(self: ColorMatrix) -> Single
        Set: Matrix14(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix20(self) -> Single:
        """
        Get: Matrix20(self: ColorMatrix) -> Single
        Set: Matrix20(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix21(self) -> Single:
        """
        Get: Matrix21(self: ColorMatrix) -> Single
        Set: Matrix21(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix22(self) -> Single:
        """
        Get: Matrix22(self: ColorMatrix) -> Single
        Set: Matrix22(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix23(self) -> Single:
        """
        Get: Matrix23(self: ColorMatrix) -> Single
        Set: Matrix23(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix24(self) -> Single:
        """
        Get: Matrix24(self: ColorMatrix) -> Single
        Set: Matrix24(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix30(self) -> Single:
        """
        Get: Matrix30(self: ColorMatrix) -> Single
        Set: Matrix30(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix31(self) -> Single:
        """
        Get: Matrix31(self: ColorMatrix) -> Single
        Set: Matrix31(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix32(self) -> Single:
        """
        Get: Matrix32(self: ColorMatrix) -> Single
        Set: Matrix32(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix33(self) -> Single:
        """
        Get: Matrix33(self: ColorMatrix) -> Single
        Set: Matrix33(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix34(self) -> Single:
        """
        Get: Matrix34(self: ColorMatrix) -> Single
        Set: Matrix34(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix40(self) -> Single:
        """
        Get: Matrix40(self: ColorMatrix) -> Single
        Set: Matrix40(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix41(self) -> Single:
        """
        Get: Matrix41(self: ColorMatrix) -> Single
        Set: Matrix41(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix42(self) -> Single:
        """
        Get: Matrix42(self: ColorMatrix) -> Single
        Set: Matrix42(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix43(self) -> Single:
        """
        Get: Matrix43(self: ColorMatrix) -> Single
        Set: Matrix43(self: ColorMatrix) = value
        """
        ...

    @property
    def Matrix44(self) -> Single:
        """
        Get: Matrix44(self: ColorMatrix) -> Single
        Set: Matrix44(self: ColorMatrix) = value
        """
        ...


    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class ColorMatrixFlag(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ColorMatrixFlag, values: AltGrays (2), Default (0), SkipGrays (1) """
    AltGrays: ColorMatrixFlag = ...
    Default: ColorMatrixFlag = ...
    SkipGrays: ColorMatrixFlag = ...
    value__ = ...


class ColorMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ColorMode, values: Argb32Mode (0), Argb64Mode (1) """
    Argb32Mode: ColorMode = ...
    Argb64Mode: ColorMode = ...
    value__ = ...


class ColorPalette: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Entries(self) -> Array:
        """ Get: Entries(self: ColorPalette) -> Array[Color] """
        ...

    @property
    def Flags(self) -> int:
        """ Get: Flags(self: ColorPalette) -> int """
        ...



class EmfPlusRecordType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EmfPlusRecordType, values: BeginContainer (16423), BeginContainerNoParams (16424), Clear (16393), Comment (16387), DrawArc (16402), DrawBeziers (16409), DrawClosedCurve (16407), DrawCurve (16408), DrawDriverString (16438), DrawEllipse (16399), DrawImage (16410), DrawImagePoints (16411), DrawLines (16397), DrawPath (16405), DrawPie (16401), DrawRects (16395), DrawString (16412), EmfAbortPath (68), EmfAlphaBlend (114), EmfAngleArc (41), EmfArcTo (55), EmfBeginPath (59), EmfBitBlt (76), EmfChord (46), EmfCloseFigure (61), EmfColorCorrectPalette (111), EmfColorMatchToTargetW (121), EmfCreateBrushIndirect (39), EmfCreateColorSpace (99), EmfCreateColorSpaceW (122), EmfCreateDibPatternBrushPt (94), EmfCreateMonoBrush (93), EmfCreatePalette (49), EmfCreatePen (38), EmfDeleteColorSpace (101), EmfDeleteObject (40), EmfDrawEscape (105), EmfEllipse (42), EmfEndPath (60), EmfEof (14), EmfExcludeClipRect (29), EmfExtCreateFontIndirect (82), EmfExtCreatePen (95), EmfExtEscape (106), EmfExtFloodFill (53), EmfExtSelectClipRgn (75), EmfExtTextOutA (83), EmfExtTextOutW (84), EmfFillPath (62), EmfFillRgn (71), EmfFlattenPath (65), EmfForceUfiMapping (109), EmfFrameRgn (72), EmfGdiComment (70), EmfGlsBoundedRecord (103), EmfGlsRecord (102), EmfGradientFill (118), EmfHeader (1), EmfIntersectClipRect (30), EmfInvertRgn (73), EmfLineTo (54), EmfMaskBlt (78), EmfMax (122), EmfMin (1), EmfModifyWorldTransform (36), EmfMoveToEx (27), EmfNamedEscpae (110), EmfOffsetClipRgn (26), EmfPaintRgn (74), EmfPie (47), EmfPixelFormat (104), EmfPlgBlt (79), EmfPlusRecordBase (16384), EmfPolyBezier (2), EmfPolyBezier16 (85), EmfPolyBezierTo (5), EmfPolyBezierTo16 (88), EmfPolyDraw (56), EmfPolyDraw16 (92), EmfPolygon (3), EmfPolygon16 (86), EmfPolyline (4), EmfPolyline16 (87), EmfPolyLineTo (6), EmfPolylineTo16 (89), EmfPolyPolygon (8), EmfPolyPolygon16 (91), EmfPolyPolyline (7), EmfPolyPolyline16 (90), EmfPolyTextOutA (96), EmfPolyTextOutW (97), EmfRealizePalette (52), EmfRectangle (43), EmfReserved069 (69), EmfReserved117 (117), EmfResizePalette (51), EmfRestoreDC (34), EmfRoundArc (45), EmfRoundRect (44), EmfSaveDC (33), EmfScaleViewportExtEx (31), EmfScaleWindowExtEx (32), EmfSelectClipPath (67), EmfSelectObject (37), EmfSelectPalette (48), EmfSetArcDirection (57), EmfSetBkColor (25), EmfSetBkMode (18), EmfSetBrushOrgEx (13), EmfSetColorAdjustment (23), EmfSetColorSpace (100), EmfSetDIBitsToDevice (80), EmfSetIcmMode (98), EmfSetIcmProfileA (112), EmfSetIcmProfileW (113), EmfSetLayout (115), EmfSetLinkedUfis (119), EmfSetMapMode (17), EmfSetMapperFlags (16), EmfSetMetaRgn (28), EmfSetMiterLimit (58), EmfSetPaletteEntries (50), EmfSetPixelV (15), EmfSetPolyFillMode (19), EmfSetROP2 (20), EmfSetStretchBltMode (21), EmfSetTextAlign (22), EmfSetTextColor (24), EmfSetTextJustification (120), EmfSetViewportExtEx (11), EmfSetViewportOrgEx (12), EmfSetWindowExtEx (9), EmfSetWindowOrgEx (10), EmfSetWorldTransform (35), EmfSmallTextOut (108), EmfStartDoc (107), EmfStretchBlt (77), EmfStretchDIBits (81), EmfStrokeAndFillPath (63), EmfStrokePath (64), EmfTransparentBlt (116), EmfWidenPath (66), EndContainer (16425), EndOfFile (16386), FillClosedCurve (16406), FillEllipse (16398), FillPath (16404), FillPie (16400), FillPolygon (16396), FillRects (16394), FillRegion (16403), GetDC (16388), Header (16385), Invalid (16384), Max (16438), Min (16385), MultiFormatEnd (16391), MultiFormatSection (16390), MultiFormatStart (16389), MultiplyWorldTransform (16428), Object (16392), OffsetClip (16437), ResetClip (16433), ResetWorldTransform (16427), Restore (16422), RotateWorldTransform (16431), Save (16421), ScaleWorldTransform (16430), SetAntiAliasMode (16414), SetClipPath (16435), SetClipRect (16434), SetClipRegion (16436), SetCompositingMode (16419), SetCompositingQuality (16420), SetInterpolationMode (16417), SetPageTransform (16432), SetPixelOffsetMode (16418), SetRenderingOrigin (16413), SetTextContrast (16416), SetTextRenderingHint (16415), SetWorldTransform (16426), Total (16439), TranslateWorldTransform (16429), WmfAnimatePalette (66614), WmfArc (67607), WmfBitBlt (67874), WmfChord (67632), WmfCreateBrushIndirect (66300), WmfCreateFontIndirect (66299), WmfCreatePalette (65783), WmfCreatePatternBrush (66041), WmfCreatePenIndirect (66298), WmfCreateRegion (67327), WmfDeleteObject (66032), WmfDibBitBlt (67904), WmfDibCreatePatternBrush (65858), WmfDibStretchBlt (68417), WmfEllipse (66584), WmfEscape (67110), WmfExcludeClipRect (66581), WmfExtFloodFill (66888), WmfExtTextOut (68146), WmfFillRegion (66088), WmfFloodFill (66585), WmfFrameRegion (66601), WmfIntersectClipRect (66582), WmfInvertRegion (65834), WmfLineTo (66067), WmfMoveTo (66068), WmfOffsetCilpRgn (66080), WmfOffsetViewportOrg (66065), WmfOffsetWindowOrg (66063), WmfPaintRegion (65835), WmfPatBlt (67101), WmfPie (67610), WmfPolygon (66340), WmfPolyline (66341), WmfPolyPolygon (66872), WmfRealizePalette (65589), WmfRecordBase (65536), WmfRectangle (66587), WmfResizePalette (65849), WmfRestoreDC (65831), WmfRoundRect (67100), WmfSaveDC (65566), WmfScaleViewportExt (66578), WmfScaleWindowExt (66576), WmfSelectClipRegion (65836), WmfSelectObject (65837), WmfSelectPalette (66100), WmfSetBkColor (66049), WmfSetBkMode (65794), WmfSetDibToDev (68915), WmfSetLayout (65865), WmfSetMapMode (65795), WmfSetMapperFlags (66097), WmfSetPalEntries (65591), WmfSetPixel (66591), WmfSetPolyFillMode (65798), WmfSetRelAbs (65797), WmfSetROP2 (65796), WmfSetStretchBltMode (65799), WmfSetTextAlign (65838), WmfSetTextCharExtra (65800), WmfSetTextColor (66057), WmfSetTextJustification (66058), WmfSetViewportExt (66062), WmfSetViewportOrg (66061), WmfSetWindowExt (66060), WmfSetWindowOrg (66059), WmfStretchBlt (68387), WmfStretchDib (69443), WmfTextOut (66849) """
    BeginContainer: EmfPlusRecordType = ...
    BeginContainerNoParams: EmfPlusRecordType = ...
    Clear: EmfPlusRecordType = ...
    Comment: EmfPlusRecordType = ...
    DrawArc: EmfPlusRecordType = ...
    DrawBeziers: EmfPlusRecordType = ...
    DrawClosedCurve: EmfPlusRecordType = ...
    DrawCurve: EmfPlusRecordType = ...
    DrawDriverString: EmfPlusRecordType = ...
    DrawEllipse: EmfPlusRecordType = ...
    DrawImage: EmfPlusRecordType = ...
    DrawImagePoints: EmfPlusRecordType = ...
    DrawLines: EmfPlusRecordType = ...
    DrawPath: EmfPlusRecordType = ...
    DrawPie: EmfPlusRecordType = ...
    DrawRects: EmfPlusRecordType = ...
    DrawString: EmfPlusRecordType = ...
    EmfAbortPath: EmfPlusRecordType = ...
    EmfAlphaBlend: EmfPlusRecordType = ...
    EmfAngleArc: EmfPlusRecordType = ...
    EmfArcTo: EmfPlusRecordType = ...
    EmfBeginPath: EmfPlusRecordType = ...
    EmfBitBlt: EmfPlusRecordType = ...
    EmfChord: EmfPlusRecordType = ...
    EmfCloseFigure: EmfPlusRecordType = ...
    EmfColorCorrectPalette: EmfPlusRecordType = ...
    EmfColorMatchToTargetW: EmfPlusRecordType = ...
    EmfCreateBrushIndirect: EmfPlusRecordType = ...
    EmfCreateColorSpace: EmfPlusRecordType = ...
    EmfCreateColorSpaceW: EmfPlusRecordType = ...
    EmfCreateDibPatternBrushPt: EmfPlusRecordType = ...
    EmfCreateMonoBrush: EmfPlusRecordType = ...
    EmfCreatePalette: EmfPlusRecordType = ...
    EmfCreatePen: EmfPlusRecordType = ...
    EmfDeleteColorSpace: EmfPlusRecordType = ...
    EmfDeleteObject: EmfPlusRecordType = ...
    EmfDrawEscape: EmfPlusRecordType = ...
    EmfEllipse: EmfPlusRecordType = ...
    EmfEndPath: EmfPlusRecordType = ...
    EmfEof: EmfPlusRecordType = ...
    EmfExcludeClipRect: EmfPlusRecordType = ...
    EmfExtCreateFontIndirect: EmfPlusRecordType = ...
    EmfExtCreatePen: EmfPlusRecordType = ...
    EmfExtEscape: EmfPlusRecordType = ...
    EmfExtFloodFill: EmfPlusRecordType = ...
    EmfExtSelectClipRgn: EmfPlusRecordType = ...
    EmfExtTextOutA: EmfPlusRecordType = ...
    EmfExtTextOutW: EmfPlusRecordType = ...
    EmfFillPath: EmfPlusRecordType = ...
    EmfFillRgn: EmfPlusRecordType = ...
    EmfFlattenPath: EmfPlusRecordType = ...
    EmfForceUfiMapping: EmfPlusRecordType = ...
    EmfFrameRgn: EmfPlusRecordType = ...
    EmfGdiComment: EmfPlusRecordType = ...
    EmfGlsBoundedRecord: EmfPlusRecordType = ...
    EmfGlsRecord: EmfPlusRecordType = ...
    EmfGradientFill: EmfPlusRecordType = ...
    EmfHeader: EmfPlusRecordType = ...
    EmfIntersectClipRect: EmfPlusRecordType = ...
    EmfInvertRgn: EmfPlusRecordType = ...
    EmfLineTo: EmfPlusRecordType = ...
    EmfMaskBlt: EmfPlusRecordType = ...
    EmfMax: EmfPlusRecordType = ...
    EmfMin: EmfPlusRecordType = ...
    EmfModifyWorldTransform: EmfPlusRecordType = ...
    EmfMoveToEx: EmfPlusRecordType = ...
    EmfNamedEscpae: EmfPlusRecordType = ...
    EmfOffsetClipRgn: EmfPlusRecordType = ...
    EmfPaintRgn: EmfPlusRecordType = ...
    EmfPie: EmfPlusRecordType = ...
    EmfPixelFormat: EmfPlusRecordType = ...
    EmfPlgBlt: EmfPlusRecordType = ...
    EmfPlusRecordBase: EmfPlusRecordType = ...
    EmfPolyBezier: EmfPlusRecordType = ...
    EmfPolyBezier16: EmfPlusRecordType = ...
    EmfPolyBezierTo: EmfPlusRecordType = ...
    EmfPolyBezierTo16: EmfPlusRecordType = ...
    EmfPolyDraw: EmfPlusRecordType = ...
    EmfPolyDraw16: EmfPlusRecordType = ...
    EmfPolygon: EmfPlusRecordType = ...
    EmfPolygon16: EmfPlusRecordType = ...
    EmfPolyline: EmfPlusRecordType = ...
    EmfPolyline16: EmfPlusRecordType = ...
    EmfPolyLineTo: EmfPlusRecordType = ...
    EmfPolylineTo16: EmfPlusRecordType = ...
    EmfPolyPolygon: EmfPlusRecordType = ...
    EmfPolyPolygon16: EmfPlusRecordType = ...
    EmfPolyPolyline: EmfPlusRecordType = ...
    EmfPolyPolyline16: EmfPlusRecordType = ...
    EmfPolyTextOutA: EmfPlusRecordType = ...
    EmfPolyTextOutW: EmfPlusRecordType = ...
    EmfRealizePalette: EmfPlusRecordType = ...
    EmfRectangle: EmfPlusRecordType = ...
    EmfReserved069: EmfPlusRecordType = ...
    EmfReserved117: EmfPlusRecordType = ...
    EmfResizePalette: EmfPlusRecordType = ...
    EmfRestoreDC: EmfPlusRecordType = ...
    EmfRoundArc: EmfPlusRecordType = ...
    EmfRoundRect: EmfPlusRecordType = ...
    EmfSaveDC: EmfPlusRecordType = ...
    EmfScaleViewportExtEx: EmfPlusRecordType = ...
    EmfScaleWindowExtEx: EmfPlusRecordType = ...
    EmfSelectClipPath: EmfPlusRecordType = ...
    EmfSelectObject: EmfPlusRecordType = ...
    EmfSelectPalette: EmfPlusRecordType = ...
    EmfSetArcDirection: EmfPlusRecordType = ...
    EmfSetBkColor: EmfPlusRecordType = ...
    EmfSetBkMode: EmfPlusRecordType = ...
    EmfSetBrushOrgEx: EmfPlusRecordType = ...
    EmfSetColorAdjustment: EmfPlusRecordType = ...
    EmfSetColorSpace: EmfPlusRecordType = ...
    EmfSetDIBitsToDevice: EmfPlusRecordType = ...
    EmfSetIcmMode: EmfPlusRecordType = ...
    EmfSetIcmProfileA: EmfPlusRecordType = ...
    EmfSetIcmProfileW: EmfPlusRecordType = ...
    EmfSetLayout: EmfPlusRecordType = ...
    EmfSetLinkedUfis: EmfPlusRecordType = ...
    EmfSetMapMode: EmfPlusRecordType = ...
    EmfSetMapperFlags: EmfPlusRecordType = ...
    EmfSetMetaRgn: EmfPlusRecordType = ...
    EmfSetMiterLimit: EmfPlusRecordType = ...
    EmfSetPaletteEntries: EmfPlusRecordType = ...
    EmfSetPixelV: EmfPlusRecordType = ...
    EmfSetPolyFillMode: EmfPlusRecordType = ...
    EmfSetROP2: EmfPlusRecordType = ...
    EmfSetStretchBltMode: EmfPlusRecordType = ...
    EmfSetTextAlign: EmfPlusRecordType = ...
    EmfSetTextColor: EmfPlusRecordType = ...
    EmfSetTextJustification: EmfPlusRecordType = ...
    EmfSetViewportExtEx: EmfPlusRecordType = ...
    EmfSetViewportOrgEx: EmfPlusRecordType = ...
    EmfSetWindowExtEx: EmfPlusRecordType = ...
    EmfSetWindowOrgEx: EmfPlusRecordType = ...
    EmfSetWorldTransform: EmfPlusRecordType = ...
    EmfSmallTextOut: EmfPlusRecordType = ...
    EmfStartDoc: EmfPlusRecordType = ...
    EmfStretchBlt: EmfPlusRecordType = ...
    EmfStretchDIBits: EmfPlusRecordType = ...
    EmfStrokeAndFillPath: EmfPlusRecordType = ...
    EmfStrokePath: EmfPlusRecordType = ...
    EmfTransparentBlt: EmfPlusRecordType = ...
    EmfWidenPath: EmfPlusRecordType = ...
    EndContainer: EmfPlusRecordType = ...
    EndOfFile: EmfPlusRecordType = ...
    FillClosedCurve: EmfPlusRecordType = ...
    FillEllipse: EmfPlusRecordType = ...
    FillPath: EmfPlusRecordType = ...
    FillPie: EmfPlusRecordType = ...
    FillPolygon: EmfPlusRecordType = ...
    FillRects: EmfPlusRecordType = ...
    FillRegion: EmfPlusRecordType = ...
    GetDC: EmfPlusRecordType = ...
    Header: EmfPlusRecordType = ...
    Invalid: EmfPlusRecordType = ...
    Max: EmfPlusRecordType = ...
    Min: EmfPlusRecordType = ...
    MultiFormatEnd: EmfPlusRecordType = ...
    MultiFormatSection: EmfPlusRecordType = ...
    MultiFormatStart: EmfPlusRecordType = ...
    MultiplyWorldTransform: EmfPlusRecordType = ...
    Object: EmfPlusRecordType = ...
    OffsetClip: EmfPlusRecordType = ...
    ResetClip: EmfPlusRecordType = ...
    ResetWorldTransform: EmfPlusRecordType = ...
    Restore: EmfPlusRecordType = ...
    RotateWorldTransform: EmfPlusRecordType = ...
    Save: EmfPlusRecordType = ...
    ScaleWorldTransform: EmfPlusRecordType = ...
    SetAntiAliasMode: EmfPlusRecordType = ...
    SetClipPath: EmfPlusRecordType = ...
    SetClipRect: EmfPlusRecordType = ...
    SetClipRegion: EmfPlusRecordType = ...
    SetCompositingMode: EmfPlusRecordType = ...
    SetCompositingQuality: EmfPlusRecordType = ...
    SetInterpolationMode: EmfPlusRecordType = ...
    SetPageTransform: EmfPlusRecordType = ...
    SetPixelOffsetMode: EmfPlusRecordType = ...
    SetRenderingOrigin: EmfPlusRecordType = ...
    SetTextContrast: EmfPlusRecordType = ...
    SetTextRenderingHint: EmfPlusRecordType = ...
    SetWorldTransform: EmfPlusRecordType = ...
    Total: EmfPlusRecordType = ...
    TranslateWorldTransform: EmfPlusRecordType = ...
    value__ = ...
    WmfAnimatePalette: EmfPlusRecordType = ...
    WmfArc: EmfPlusRecordType = ...
    WmfBitBlt: EmfPlusRecordType = ...
    WmfChord: EmfPlusRecordType = ...
    WmfCreateBrushIndirect: EmfPlusRecordType = ...
    WmfCreateFontIndirect: EmfPlusRecordType = ...
    WmfCreatePalette: EmfPlusRecordType = ...
    WmfCreatePatternBrush: EmfPlusRecordType = ...
    WmfCreatePenIndirect: EmfPlusRecordType = ...
    WmfCreateRegion: EmfPlusRecordType = ...
    WmfDeleteObject: EmfPlusRecordType = ...
    WmfDibBitBlt: EmfPlusRecordType = ...
    WmfDibCreatePatternBrush: EmfPlusRecordType = ...
    WmfDibStretchBlt: EmfPlusRecordType = ...
    WmfEllipse: EmfPlusRecordType = ...
    WmfEscape: EmfPlusRecordType = ...
    WmfExcludeClipRect: EmfPlusRecordType = ...
    WmfExtFloodFill: EmfPlusRecordType = ...
    WmfExtTextOut: EmfPlusRecordType = ...
    WmfFillRegion: EmfPlusRecordType = ...
    WmfFloodFill: EmfPlusRecordType = ...
    WmfFrameRegion: EmfPlusRecordType = ...
    WmfIntersectClipRect: EmfPlusRecordType = ...
    WmfInvertRegion: EmfPlusRecordType = ...
    WmfLineTo: EmfPlusRecordType = ...
    WmfMoveTo: EmfPlusRecordType = ...
    WmfOffsetCilpRgn: EmfPlusRecordType = ...
    WmfOffsetViewportOrg: EmfPlusRecordType = ...
    WmfOffsetWindowOrg: EmfPlusRecordType = ...
    WmfPaintRegion: EmfPlusRecordType = ...
    WmfPatBlt: EmfPlusRecordType = ...
    WmfPie: EmfPlusRecordType = ...
    WmfPolygon: EmfPlusRecordType = ...
    WmfPolyline: EmfPlusRecordType = ...
    WmfPolyPolygon: EmfPlusRecordType = ...
    WmfRealizePalette: EmfPlusRecordType = ...
    WmfRecordBase: EmfPlusRecordType = ...
    WmfRectangle: EmfPlusRecordType = ...
    WmfResizePalette: EmfPlusRecordType = ...
    WmfRestoreDC: EmfPlusRecordType = ...
    WmfRoundRect: EmfPlusRecordType = ...
    WmfSaveDC: EmfPlusRecordType = ...
    WmfScaleViewportExt: EmfPlusRecordType = ...
    WmfScaleWindowExt: EmfPlusRecordType = ...
    WmfSelectClipRegion: EmfPlusRecordType = ...
    WmfSelectObject: EmfPlusRecordType = ...
    WmfSelectPalette: EmfPlusRecordType = ...
    WmfSetBkColor: EmfPlusRecordType = ...
    WmfSetBkMode: EmfPlusRecordType = ...
    WmfSetDibToDev: EmfPlusRecordType = ...
    WmfSetLayout: EmfPlusRecordType = ...
    WmfSetMapMode: EmfPlusRecordType = ...
    WmfSetMapperFlags: EmfPlusRecordType = ...
    WmfSetPalEntries: EmfPlusRecordType = ...
    WmfSetPixel: EmfPlusRecordType = ...
    WmfSetPolyFillMode: EmfPlusRecordType = ...
    WmfSetRelAbs: EmfPlusRecordType = ...
    WmfSetROP2: EmfPlusRecordType = ...
    WmfSetStretchBltMode: EmfPlusRecordType = ...
    WmfSetTextAlign: EmfPlusRecordType = ...
    WmfSetTextCharExtra: EmfPlusRecordType = ...
    WmfSetTextColor: EmfPlusRecordType = ...
    WmfSetTextJustification: EmfPlusRecordType = ...
    WmfSetViewportExt: EmfPlusRecordType = ...
    WmfSetViewportOrg: EmfPlusRecordType = ...
    WmfSetWindowExt: EmfPlusRecordType = ...
    WmfSetWindowOrg: EmfPlusRecordType = ...
    WmfStretchBlt: EmfPlusRecordType = ...
    WmfStretchDib: EmfPlusRecordType = ...
    WmfTextOut: EmfPlusRecordType = ...


class EmfType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EmfType, values: EmfOnly (3), EmfPlusDual (5), EmfPlusOnly (4) """
    EmfOnly: EmfType = ...
    EmfPlusDual: EmfType = ...
    EmfPlusOnly: EmfType = ...
    value__ = ...


class Encoder: # skipped bases: <type 'object'>, <type 'object'>
    """ Encoder(guid: Guid) """
    @property
    def Guid(self) -> Guid:
        """ Get: Guid(self: Encoder) -> Guid """
        ...


    ChrominanceTable: Encoder = ...
    ColorDepth: Encoder = ...
    Compression: Encoder = ...
    LuminanceTable: Encoder = ...
    Quality: Encoder = ...
    RenderMethod: Encoder = ...
    SaveFlag: Encoder = ...
    ScanMethod: Encoder = ...
    Transformation: Encoder = ...
    Version: Encoder = ...


class EncoderParameter(IDisposable): # skipped bases: <type 'object'>
    """
    EncoderParameter(encoder: Encoder, value: Byte)
    EncoderParameter(encoder: Encoder, value: Byte, undefined: bool)
    EncoderParameter(encoder: Encoder, value: Int16)
    EncoderParameter(encoder: Encoder, value: Int64)
    EncoderParameter(encoder: Encoder, numerator: int, denominator: int)
    EncoderParameter(encoder: Encoder, rangebegin: Int64, rangeend: Int64)
    EncoderParameter(encoder: Encoder, numerator1: int, demoninator1: int, numerator2: int, demoninator2: int)
    EncoderParameter(encoder: Encoder, value: str)
    EncoderParameter(encoder: Encoder, value: Array[Byte])
    EncoderParameter(encoder: Encoder, value: Array[Byte], undefined: bool)
    EncoderParameter(encoder: Encoder, value: Array[Int16])
    EncoderParameter(encoder: Encoder, value: Array[Int64])
    EncoderParameter(encoder: Encoder, numerator: Array[int], denominator: Array[int])
    EncoderParameter(encoder: Encoder, rangebegin: Array[Int64], rangeend: Array[Int64])
    EncoderParameter(encoder: Encoder, numerator1: Array[int], denominator1: Array[int], numerator2: Array[int], denominator2: Array[int])
    EncoderParameter(encoder: Encoder, NumberOfValues: int, Type: int, Value: int)
    EncoderParameter(encoder: Encoder, numberValues: int, type: EncoderParameterValueType, value: IntPtr)
    """
    @property
    def Encoder(self) -> Encoder:
        """
        Get: Encoder(self: EncoderParameter) -> Encoder
        Set: Encoder(self: EncoderParameter) = value
        """
        ...

    @property
    def NumberOfValues(self) -> int:
        """ Get: NumberOfValues(self: EncoderParameter) -> int """
        ...

    @property
    def Type(self) -> EncoderParameterValueType:
        """ Get: Type(self: EncoderParameter) -> EncoderParameterValueType """
        ...

    @property
    def ValueType(self) -> EncoderParameterValueType:
        """ Get: ValueType(self: EncoderParameter) -> EncoderParameterValueType """
        ...



class EncoderParameters(IDisposable): # skipped bases: <type 'object'>
    """
    EncoderParameters(count: int)
    EncoderParameters()
    """
    @property
    def Param(self) -> Array:
        """
        Get: Param(self: EncoderParameters) -> Array[EncoderParameter]
        Set: Param(self: EncoderParameters) = value
        """
        ...



class EncoderParameterValueType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EncoderParameterValueType, values: ValueTypeAscii (2), ValueTypeByte (1), ValueTypeLong (4), ValueTypeLongRange (6), ValueTypeRational (5), ValueTypeRationalRange (8), ValueTypeShort (3), ValueTypeUndefined (7) """
    ValueTypeAscii: EncoderParameterValueType = ...
    ValueTypeByte: EncoderParameterValueType = ...
    ValueTypeLong: EncoderParameterValueType = ...
    ValueTypeLongRange: EncoderParameterValueType = ...
    ValueTypeRational: EncoderParameterValueType = ...
    ValueTypeRationalRange: EncoderParameterValueType = ...
    ValueTypeShort: EncoderParameterValueType = ...
    ValueTypeUndefined: EncoderParameterValueType = ...
    value__ = ...


class EncoderValue(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EncoderValue, values: ColorTypeCMYK (0), ColorTypeYCCK (1), CompressionCCITT3 (3), CompressionCCITT4 (4), CompressionLZW (2), CompressionNone (6), CompressionRle (5), Flush (20), FrameDimensionPage (23), FrameDimensionResolution (22), FrameDimensionTime (21), LastFrame (19), MultiFrame (18), RenderNonProgressive (12), RenderProgressive (11), ScanMethodInterlaced (7), ScanMethodNonInterlaced (8), TransformFlipHorizontal (16), TransformFlipVertical (17), TransformRotate180 (14), TransformRotate270 (15), TransformRotate90 (13), VersionGif87 (9), VersionGif89 (10) """
    ColorTypeCMYK: EncoderValue = ...
    ColorTypeYCCK: EncoderValue = ...
    CompressionCCITT3: EncoderValue = ...
    CompressionCCITT4: EncoderValue = ...
    CompressionLZW: EncoderValue = ...
    CompressionNone: EncoderValue = ...
    CompressionRle: EncoderValue = ...
    Flush: EncoderValue = ...
    FrameDimensionPage: EncoderValue = ...
    FrameDimensionResolution: EncoderValue = ...
    FrameDimensionTime: EncoderValue = ...
    LastFrame: EncoderValue = ...
    MultiFrame: EncoderValue = ...
    RenderNonProgressive: EncoderValue = ...
    RenderProgressive: EncoderValue = ...
    ScanMethodInterlaced: EncoderValue = ...
    ScanMethodNonInterlaced: EncoderValue = ...
    TransformFlipHorizontal: EncoderValue = ...
    TransformFlipVertical: EncoderValue = ...
    TransformRotate180: EncoderValue = ...
    TransformRotate270: EncoderValue = ...
    TransformRotate90: EncoderValue = ...
    value__ = ...
    VersionGif87: EncoderValue = ...
    VersionGif89: EncoderValue = ...


class FrameDimension: # skipped bases: <type 'object'>, <type 'object'>
    """ FrameDimension(guid: Guid) """
    @property
    def Guid(self) -> Guid:
        """ Get: Guid(self: FrameDimension) -> Guid """
        ...

    @property
    def Page(self) -> FrameDimension:
        """ Get: Page() -> FrameDimension """
        ...

    @property
    def Resolution(self) -> FrameDimension:
        """ Get: Resolution() -> FrameDimension """
        ...

    @property
    def Time(self) -> FrameDimension:
        """ Get: Time() -> FrameDimension """
        ...


    def Equals(self, o:object) -> bool:
        """ Equals(self: FrameDimension, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: FrameDimension) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: FrameDimension) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...



class ImageAttributes(IDisposable, ICloneable): # skipped bases: <type 'object'>
    """ ImageAttributes() """
    def ClearBrushRemapTable(self): # -> 
        """ ClearBrushRemapTable(self: ImageAttributes) """
        ...

    def ClearColorKey(self, type:ColorAdjustType = ...): # -> 
        """ ClearColorKey(self: ImageAttributes, type: ColorAdjustType)ClearColorKey(self: ImageAttributes) """
        ...

    def ClearColorMatrix(self, type:ColorAdjustType = ...): # -> 
        """ ClearColorMatrix(self: ImageAttributes)ClearColorMatrix(self: ImageAttributes, type: ColorAdjustType) """
        ...

    def ClearGamma(self, type:ColorAdjustType = ...): # -> 
        """ ClearGamma(self: ImageAttributes)ClearGamma(self: ImageAttributes, type: ColorAdjustType) """
        ...

    def ClearNoOp(self, type:ColorAdjustType = ...): # -> 
        """ ClearNoOp(self: ImageAttributes)ClearNoOp(self: ImageAttributes, type: ColorAdjustType) """
        ...

    def ClearOutputChannel(self, type:ColorAdjustType = ...): # -> 
        """ ClearOutputChannel(self: ImageAttributes)ClearOutputChannel(self: ImageAttributes, type: ColorAdjustType) """
        ...

    def ClearOutputChannelColorProfile(self, type:ColorAdjustType = ...): # -> 
        """ ClearOutputChannelColorProfile(self: ImageAttributes)ClearOutputChannelColorProfile(self: ImageAttributes, type: ColorAdjustType) """
        ...

    def ClearRemapTable(self, type:ColorAdjustType = ...): # -> 
        """ ClearRemapTable(self: ImageAttributes)ClearRemapTable(self: ImageAttributes, type: ColorAdjustType) """
        ...

    def ClearThreshold(self, type:ColorAdjustType = ...): # -> 
        """ ClearThreshold(self: ImageAttributes)ClearThreshold(self: ImageAttributes, type: ColorAdjustType) """
        ...

    def GetAdjustedPalette(self, palette:ColorPalette, type:ColorAdjustType): # -> 
        """ GetAdjustedPalette(self: ImageAttributes, palette: ColorPalette, type: ColorAdjustType) """
        ...

    def SetBrushRemapTable(self, map:Array): # -> 
        """ SetBrushRemapTable(self: ImageAttributes, map: Array[ColorMap]) """
        ...

    def SetColorKey(self, colorLow:Color, colorHigh:Color, type:ColorAdjustType = ...): # -> 
        """ SetColorKey(self: ImageAttributes, colorLow: Color, colorHigh: Color)SetColorKey(self: ImageAttributes, colorLow: Color, colorHigh: Color, type: ColorAdjustType) """
        ...

    def SetColorMatrices(self, newColorMatrix:ColorMatrix, grayMatrix:ColorMatrix, *__args:ColorMatrixFlag): # -> 
        """ SetColorMatrices(self: ImageAttributes, newColorMatrix: ColorMatrix, grayMatrix: ColorMatrix)SetColorMatrices(self: ImageAttributes, newColorMatrix: ColorMatrix, grayMatrix: ColorMatrix, flags: ColorMatrixFlag)SetColorMatrices(self: ImageAttributes, newColorMatrix: ColorMatrix, grayMatrix: ColorMatrix, mode: ColorMatrixFlag, type: ColorAdjustType) """
        ...

    def SetColorMatrix(self, newColorMatrix:ColorMatrix, *__args:ColorMatrixFlag): # -> 
        """ SetColorMatrix(self: ImageAttributes, newColorMatrix: ColorMatrix, mode: ColorMatrixFlag, type: ColorAdjustType)SetColorMatrix(self: ImageAttributes, newColorMatrix: ColorMatrix)SetColorMatrix(self: ImageAttributes, newColorMatrix: ColorMatrix, flags: ColorMatrixFlag) """
        ...

    def SetGamma(self, gamma:Single, type:ColorAdjustType = ...): # -> 
        """ SetGamma(self: ImageAttributes, gamma: Single)SetGamma(self: ImageAttributes, gamma: Single, type: ColorAdjustType) """
        ...

    def SetNoOp(self, type:ColorAdjustType = ...): # -> 
        """ SetNoOp(self: ImageAttributes)SetNoOp(self: ImageAttributes, type: ColorAdjustType) """
        ...

    def SetOutputChannel(self, flags:ColorChannelFlag, type:ColorAdjustType = ...): # -> 
        """ SetOutputChannel(self: ImageAttributes, flags: ColorChannelFlag)SetOutputChannel(self: ImageAttributes, flags: ColorChannelFlag, type: ColorAdjustType) """
        ...

    def SetOutputChannelColorProfile(self, colorProfileFilename:str, type:ColorAdjustType = ...): # -> 
        """ SetOutputChannelColorProfile(self: ImageAttributes, colorProfileFilename: str)SetOutputChannelColorProfile(self: ImageAttributes, colorProfileFilename: str, type: ColorAdjustType) """
        ...

    def SetRemapTable(self, map:Array, type:ColorAdjustType = ...): # -> 
        """ SetRemapTable(self: ImageAttributes, map: Array[ColorMap])SetRemapTable(self: ImageAttributes, map: Array[ColorMap], type: ColorAdjustType) """
        ...

    def SetThreshold(self, threshold:Single, type:ColorAdjustType = ...): # -> 
        """ SetThreshold(self: ImageAttributes, threshold: Single)SetThreshold(self: ImageAttributes, threshold: Single, type: ColorAdjustType) """
        ...

    def SetWrapMode(self, mode:WrapMode, color:Color = ..., clamp:bool = ...): # -> 
        """ SetWrapMode(self: ImageAttributes, mode: WrapMode)SetWrapMode(self: ImageAttributes, mode: WrapMode, color: Color)SetWrapMode(self: ImageAttributes, mode: WrapMode, color: Color, clamp: bool) """
        ...


class ImageCodecFlags(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ImageCodecFlags, values: BlockingDecode (32), Builtin (65536), Decoder (2), Encoder (1), SeekableEncode (16), SupportBitmap (4), SupportVector (8), System (131072), User (262144) """
    BlockingDecode: ImageCodecFlags = ...
    Builtin: ImageCodecFlags = ...
    Decoder: ImageCodecFlags = ...
    Encoder: ImageCodecFlags = ...
    SeekableEncode: ImageCodecFlags = ...
    SupportBitmap: ImageCodecFlags = ...
    SupportVector: ImageCodecFlags = ...
    System: ImageCodecFlags = ...
    User: ImageCodecFlags = ...
    value__ = ...


class ImageCodecInfo: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Clsid(self) -> Guid:
        """
        Get: Clsid(self: ImageCodecInfo) -> Guid
        Set: Clsid(self: ImageCodecInfo) = value
        """
        ...

    @property
    def CodecName(self) -> str:
        """
        Get: CodecName(self: ImageCodecInfo) -> str
        Set: CodecName(self: ImageCodecInfo) = value
        """
        ...

    @property
    def DllName(self) -> str:
        """
        Get: DllName(self: ImageCodecInfo) -> str
        Set: DllName(self: ImageCodecInfo) = value
        """
        ...

    @property
    def FilenameExtension(self) -> str:
        """
        Get: FilenameExtension(self: ImageCodecInfo) -> str
        Set: FilenameExtension(self: ImageCodecInfo) = value
        """
        ...

    @property
    def Flags(self) -> ImageCodecFlags:
        """
        Get: Flags(self: ImageCodecInfo) -> ImageCodecFlags
        Set: Flags(self: ImageCodecInfo) = value
        """
        ...

    @property
    def FormatDescription(self) -> str:
        """
        Get: FormatDescription(self: ImageCodecInfo) -> str
        Set: FormatDescription(self: ImageCodecInfo) = value
        """
        ...

    @property
    def FormatID(self) -> Guid:
        """
        Get: FormatID(self: ImageCodecInfo) -> Guid
        Set: FormatID(self: ImageCodecInfo) = value
        """
        ...

    @property
    def MimeType(self) -> str:
        """
        Get: MimeType(self: ImageCodecInfo) -> str
        Set: MimeType(self: ImageCodecInfo) = value
        """
        ...

    @property
    def SignatureMasks(self) -> Array:
        """
        Get: SignatureMasks(self: ImageCodecInfo) -> Array[Array[Byte]]
        Set: SignatureMasks(self: ImageCodecInfo) = value
        """
        ...

    @property
    def SignaturePatterns(self) -> Array:
        """
        Get: SignaturePatterns(self: ImageCodecInfo) -> Array[Array[Byte]]
        Set: SignaturePatterns(self: ImageCodecInfo) = value
        """
        ...

    @property
    def Version(self) -> int:
        """
        Get: Version(self: ImageCodecInfo) -> int
        Set: Version(self: ImageCodecInfo) = value
        """
        ...


    @staticmethod
    def GetImageDecoders() -> Array:
        """ GetImageDecoders() -> Array[ImageCodecInfo] """
        ...

    @staticmethod
    def GetImageEncoders() -> Array:
        """ GetImageEncoders() -> Array[ImageCodecInfo] """
        ...


class ImageFlags(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ImageFlags, values: Caching (131072), ColorSpaceCmyk (32), ColorSpaceGray (64), ColorSpaceRgb (16), ColorSpaceYcbcr (128), ColorSpaceYcck (256), HasAlpha (2), HasRealDpi (4096), HasRealPixelSize (8192), HasTranslucent (4), None (0), PartiallyScalable (8), ReadOnly (65536), Scalable (1) """
    Caching: ImageFlags = ...
    ColorSpaceCmyk: ImageFlags = ...
    ColorSpaceGray: ImageFlags = ...
    ColorSpaceRgb: ImageFlags = ...
    ColorSpaceYcbcr: ImageFlags = ...
    ColorSpaceYcck: ImageFlags = ...
    HasAlpha: ImageFlags = ...
    HasRealDpi: ImageFlags = ...
    HasRealPixelSize: ImageFlags = ...
    HasTranslucent: ImageFlags = ...
    PartiallyScalable: ImageFlags = ...
    ReadOnly: ImageFlags = ...
    Scalable: ImageFlags = ...
    value__ = ...


class ImageFormat: # skipped bases: <type 'object'>, <type 'object'>
    """ ImageFormat(guid: Guid) """
    @property
    def Bmp(self) -> ImageFormat:
        """ Get: Bmp() -> ImageFormat """
        ...

    @property
    def Emf(self) -> ImageFormat:
        """ Get: Emf() -> ImageFormat """
        ...

    @property
    def Exif(self) -> ImageFormat:
        """ Get: Exif() -> ImageFormat """
        ...

    @property
    def Gif(self) -> ImageFormat:
        """ Get: Gif() -> ImageFormat """
        ...

    @property
    def Guid(self) -> Guid:
        """ Get: Guid(self: ImageFormat) -> Guid """
        ...

    @property
    def Icon(self) -> ImageFormat:
        """ Get: Icon() -> ImageFormat """
        ...

    @property
    def Jpeg(self) -> ImageFormat:
        """ Get: Jpeg() -> ImageFormat """
        ...

    @property
    def MemoryBmp(self) -> ImageFormat:
        """ Get: MemoryBmp() -> ImageFormat """
        ...

    @property
    def Png(self) -> ImageFormat:
        """ Get: Png() -> ImageFormat """
        ...

    @property
    def Tiff(self) -> ImageFormat:
        """ Get: Tiff() -> ImageFormat """
        ...

    @property
    def Wmf(self) -> ImageFormat:
        """ Get: Wmf() -> ImageFormat """
        ...


    def Equals(self, o:object) -> bool:
        """ Equals(self: ImageFormat, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: ImageFormat) -> int """
        ...

    def ToString(self) -> str:
        """ ToString(self: ImageFormat) -> str """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...



class ImageLockMode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ImageLockMode, values: ReadOnly (1), ReadWrite (3), UserInputBuffer (4), WriteOnly (2) """
    ReadOnly: ImageLockMode = ...
    ReadWrite: ImageLockMode = ...
    UserInputBuffer: ImageLockMode = ...
    value__ = ...
    WriteOnly: ImageLockMode = ...


class Metafile(Image): # skipped bases: <type 'IDisposable'>, <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """
    Metafile(hmetafile: IntPtr, wmfHeader: WmfPlaceableFileHeader)
    Metafile(hmetafile: IntPtr, wmfHeader: WmfPlaceableFileHeader, deleteWmf: bool)
    Metafile(henhmetafile: IntPtr, deleteEmf: bool)
    Metafile(filename: str)
    Metafile(stream: Stream)
    Metafile(referenceHdc: IntPtr, emfType: EmfType)
    Metafile(referenceHdc: IntPtr, emfType: EmfType, description: str)
    Metafile(referenceHdc: IntPtr, frameRect: RectangleF)
    Metafile(referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit)
    Metafile(referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType)
    Metafile(referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType, description: str)
    Metafile(referenceHdc: IntPtr, frameRect: Rectangle)
    Metafile(referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit)
    Metafile(referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType)
    Metafile(referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType, desc: str)
    Metafile(fileName: str, referenceHdc: IntPtr)
    Metafile(fileName: str, referenceHdc: IntPtr, type: EmfType)
    Metafile(fileName: str, referenceHdc: IntPtr, type: EmfType, description: str)
    Metafile(fileName: str, referenceHdc: IntPtr, frameRect: RectangleF)
    Metafile(fileName: str, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit)
    Metafile(fileName: str, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType)
    Metafile(fileName: str, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, desc: str)
    Metafile(fileName: str, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType, description: str)
    Metafile(fileName: str, referenceHdc: IntPtr, frameRect: Rectangle)
    Metafile(fileName: str, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit)
    Metafile(fileName: str, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType)
    Metafile(fileName: str, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, description: str)
    Metafile(fileName: str, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType, description: str)
    Metafile(stream: Stream, referenceHdc: IntPtr)
    Metafile(stream: Stream, referenceHdc: IntPtr, type: EmfType)
    Metafile(stream: Stream, referenceHdc: IntPtr, type: EmfType, description: str)
    Metafile(stream: Stream, referenceHdc: IntPtr, frameRect: RectangleF)
    Metafile(stream: Stream, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit)
    Metafile(stream: Stream, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType)
    Metafile(stream: Stream, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType, description: str)
    Metafile(stream: Stream, referenceHdc: IntPtr, frameRect: Rectangle)
    Metafile(stream: Stream, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit)
    Metafile(stream: Stream, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType)
    Metafile(stream: Stream, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType, description: str)
    """
    def GetHenhmetafile(self) -> IntPtr:
        """ GetHenhmetafile(self: Metafile) -> IntPtr """
        ...

    @staticmethod
    def GetMetafileHeader(*__args:IntPtr) -> MetafileHeader:
        """
        GetMetafileHeader(hmetafile: IntPtr, wmfHeader: WmfPlaceableFileHeader) -> MetafileHeader
        GetMetafileHeader(henhmetafile: IntPtr) -> MetafileHeader
        GetMetafileHeader(fileName: str) -> MetafileHeader
        GetMetafileHeader(stream: Stream) -> MetafileHeader
        GetMetafileHeader(self: Metafile) -> MetafileHeader
        """
        ...

    def PlayRecord(self, recordType:EmfPlusRecordType, flags:int, dataSize:int, data:Array): # -> 
        """ PlayRecord(self: Metafile, recordType: EmfPlusRecordType, flags: int, dataSize: int, data: Array[Byte]) """
        ...

    def __new__(cls, *__args:str) -> Self:
        """
        __new__(cls: type, hmetafile: IntPtr, wmfHeader: WmfPlaceableFileHeader)
        __new__(cls: type, hmetafile: IntPtr, wmfHeader: WmfPlaceableFileHeader, deleteWmf: bool)
        __new__(cls: type, henhmetafile: IntPtr, deleteEmf: bool)
        __new__(cls: type, filename: str)
        __new__(cls: type, stream: Stream)
        __new__(cls: type, referenceHdc: IntPtr, emfType: EmfType)
        __new__(cls: type, referenceHdc: IntPtr, emfType: EmfType, description: str)
        __new__(cls: type, referenceHdc: IntPtr, frameRect: RectangleF)
        __new__(cls: type, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit)
        __new__(cls: type, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType)
        __new__(cls: type, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType, description: str)
        __new__(cls: type, referenceHdc: IntPtr, frameRect: Rectangle)
        __new__(cls: type, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit)
        __new__(cls: type, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType)
        __new__(cls: type, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType, desc: str)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, type: EmfType)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, type: EmfType, description: str)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, frameRect: RectangleF)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, desc: str)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType, description: str)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, frameRect: Rectangle)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, description: str)
        __new__(cls: type, fileName: str, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType, description: str)
        __new__(cls: type, stream: Stream, referenceHdc: IntPtr)
        __new__(cls: type, stream: Stream, referenceHdc: IntPtr, type: EmfType)
        __new__(cls: type, stream: Stream, referenceHdc: IntPtr, type: EmfType, description: str)
        __new__(cls: type, stream: Stream, referenceHdc: IntPtr, frameRect: RectangleF)
        __new__(cls: type, stream: Stream, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit)
        __new__(cls: type, stream: Stream, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType)
        __new__(cls: type, stream: Stream, referenceHdc: IntPtr, frameRect: RectangleF, frameUnit: MetafileFrameUnit, type: EmfType, description: str)
        __new__(cls: type, stream: Stream, referenceHdc: IntPtr, frameRect: Rectangle)
        __new__(cls: type, stream: Stream, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit)
        __new__(cls: type, stream: Stream, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType)
        __new__(cls: type, stream: Stream, referenceHdc: IntPtr, frameRect: Rectangle, frameUnit: MetafileFrameUnit, type: EmfType, description: str)
        """
        ...


class MetafileFrameUnit(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MetafileFrameUnit, values: Document (5), GdiCompatible (7), Inch (4), Millimeter (6), Pixel (2), Point (3) """
    Document: MetafileFrameUnit = ...
    GdiCompatible: MetafileFrameUnit = ...
    Inch: MetafileFrameUnit = ...
    Millimeter: MetafileFrameUnit = ...
    Pixel: MetafileFrameUnit = ...
    Point: MetafileFrameUnit = ...
    value__ = ...


class MetafileHeader: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Bounds(self) -> Rectangle:
        """ Get: Bounds(self: MetafileHeader) -> Rectangle """
        ...

    @property
    def DpiX(self) -> Single:
        """ Get: DpiX(self: MetafileHeader) -> Single """
        ...

    @property
    def DpiY(self) -> Single:
        """ Get: DpiY(self: MetafileHeader) -> Single """
        ...

    @property
    def EmfPlusHeaderSize(self) -> int:
        """ Get: EmfPlusHeaderSize(self: MetafileHeader) -> int """
        ...

    @property
    def LogicalDpiX(self) -> int:
        """ Get: LogicalDpiX(self: MetafileHeader) -> int """
        ...

    @property
    def LogicalDpiY(self) -> int:
        """ Get: LogicalDpiY(self: MetafileHeader) -> int """
        ...

    @property
    def MetafileSize(self) -> int:
        """ Get: MetafileSize(self: MetafileHeader) -> int """
        ...

    @property
    def Type(self) -> MetafileType:
        """ Get: Type(self: MetafileHeader) -> MetafileType """
        ...

    @property
    def Version(self) -> int:
        """ Get: Version(self: MetafileHeader) -> int """
        ...

    @property
    def WmfHeader(self) -> MetaHeader:
        """ Get: WmfHeader(self: MetafileHeader) -> MetaHeader """
        ...


    def IsDisplay(self) -> bool:
        """ IsDisplay(self: MetafileHeader) -> bool """
        ...

    def IsEmf(self) -> bool:
        """ IsEmf(self: MetafileHeader) -> bool """
        ...

    def IsEmfOrEmfPlus(self) -> bool:
        """ IsEmfOrEmfPlus(self: MetafileHeader) -> bool """
        ...

    def IsEmfPlus(self) -> bool:
        """ IsEmfPlus(self: MetafileHeader) -> bool """
        ...

    def IsEmfPlusDual(self) -> bool:
        """ IsEmfPlusDual(self: MetafileHeader) -> bool """
        ...

    def IsEmfPlusOnly(self) -> bool:
        """ IsEmfPlusOnly(self: MetafileHeader) -> bool """
        ...

    def IsWmf(self) -> bool:
        """ IsWmf(self: MetafileHeader) -> bool """
        ...

    def IsWmfPlaceable(self) -> bool:
        """ IsWmfPlaceable(self: MetafileHeader) -> bool """
        ...


class MetafileType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MetafileType, values: Emf (3), EmfPlusDual (5), EmfPlusOnly (4), Invalid (0), Wmf (1), WmfPlaceable (2) """
    Emf: MetafileType = ...
    EmfPlusDual: MetafileType = ...
    EmfPlusOnly: MetafileType = ...
    Invalid: MetafileType = ...
    value__ = ...
    Wmf: MetafileType = ...
    WmfPlaceable: MetafileType = ...


class MetaHeader: # skipped bases: <type 'object'>, <type 'object'>
    """ MetaHeader() """
    @property
    def HeaderSize(self) -> Int16:
        """
        Get: HeaderSize(self: MetaHeader) -> Int16
        Set: HeaderSize(self: MetaHeader) = value
        """
        ...

    @property
    def MaxRecord(self) -> int:
        """
        Get: MaxRecord(self: MetaHeader) -> int
        Set: MaxRecord(self: MetaHeader) = value
        """
        ...

    @property
    def NoObjects(self) -> Int16:
        """
        Get: NoObjects(self: MetaHeader) -> Int16
        Set: NoObjects(self: MetaHeader) = value
        """
        ...

    @property
    def NoParameters(self) -> Int16:
        """
        Get: NoParameters(self: MetaHeader) -> Int16
        Set: NoParameters(self: MetaHeader) = value
        """
        ...

    @property
    def Size(self) -> int:
        """
        Get: Size(self: MetaHeader) -> int
        Set: Size(self: MetaHeader) = value
        """
        ...

    @property
    def Type(self) -> Int16:
        """
        Get: Type(self: MetaHeader) -> Int16
        Set: Type(self: MetaHeader) = value
        """
        ...

    @property
    def Version(self) -> Int16:
        """
        Get: Version(self: MetaHeader) -> Int16
        Set: Version(self: MetaHeader) = value
        """
        ...



class PaletteFlags(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) PaletteFlags, values: GrayScale (2), Halftone (4), HasAlpha (1) """
    GrayScale: PaletteFlags = ...
    Halftone: PaletteFlags = ...
    HasAlpha: PaletteFlags = ...
    value__ = ...


class PixelFormat(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PixelFormat, values: Alpha (262144), Canonical (2097152), DontCare (0), Extended (1048576), Format16bppArgb1555 (397319), Format16bppGrayScale (1052676), Format16bppRgb555 (135173), Format16bppRgb565 (135174), Format1bppIndexed (196865), Format24bppRgb (137224), Format32bppArgb (2498570), Format32bppPArgb (925707), Format32bppRgb (139273), Format48bppRgb (1060876), Format4bppIndexed (197634), Format64bppArgb (3424269), Format64bppPArgb (1851406), Format8bppIndexed (198659), Gdi (131072), Indexed (65536), Max (15), PAlpha (524288), Undefined (0) """
    Alpha: PixelFormat = ...
    Canonical: PixelFormat = ...
    DontCare: PixelFormat = ...
    Extended: PixelFormat = ...
    Format16bppArgb1555: PixelFormat = ...
    Format16bppGrayScale: PixelFormat = ...
    Format16bppRgb555: PixelFormat = ...
    Format16bppRgb565: PixelFormat = ...
    Format1bppIndexed: PixelFormat = ...
    Format24bppRgb: PixelFormat = ...
    Format32bppArgb: PixelFormat = ...
    Format32bppPArgb: PixelFormat = ...
    Format32bppRgb: PixelFormat = ...
    Format48bppRgb: PixelFormat = ...
    Format4bppIndexed: PixelFormat = ...
    Format64bppArgb: PixelFormat = ...
    Format64bppPArgb: PixelFormat = ...
    Format8bppIndexed: PixelFormat = ...
    Gdi: PixelFormat = ...
    Indexed: PixelFormat = ...
    Max: PixelFormat = ...
    PAlpha: PixelFormat = ...
    Undefined: PixelFormat = ...
    value__ = ...


class PlayRecordCallback(MulticastDelegate): # skipped bases: <type 'ISerializable'>, <type 'ICloneable'>, <type 'object'>
    """ PlayRecordCallback(object: object, method: IntPtr) """
    def BeginInvoke(self, recordType:EmfPlusRecordType, flags:int, dataSize:int, recordData:IntPtr, callback:AsyncCallback, object:object) -> IAsyncResult:
        """ BeginInvoke(self: PlayRecordCallback, recordType: EmfPlusRecordType, flags: int, dataSize: int, recordData: IntPtr, callback: AsyncCallback, object: object) -> IAsyncResult """
        ...

    def EndInvoke(self, result:IAsyncResult): # -> 
        """ EndInvoke(self: PlayRecordCallback, result: IAsyncResult) """
        ...

    def Invoke(self, recordType:EmfPlusRecordType, flags:int, dataSize:int, recordData:IntPtr): # -> 
        """ Invoke(self: PlayRecordCallback, recordType: EmfPlusRecordType, flags: int, dataSize: int, recordData: IntPtr) """
        ...


class PropertyItem: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Id(self) -> int:
        """
        Get: Id(self: PropertyItem) -> int
        Set: Id(self: PropertyItem) = value
        """
        ...

    @property
    def Len(self) -> int:
        """
        Get: Len(self: PropertyItem) -> int
        Set: Len(self: PropertyItem) = value
        """
        ...

    @property
    def Type(self) -> Int16:
        """
        Get: Type(self: PropertyItem) -> Int16
        Set: Type(self: PropertyItem) = value
        """
        ...

    @property
    def Value(self) -> Array:
        """
        Get: Value(self: PropertyItem) -> Array[Byte]
        Set: Value(self: PropertyItem) = value
        """
        ...



class WmfPlaceableFileHeader: # skipped bases: <type 'object'>, <type 'object'>
    """ WmfPlaceableFileHeader() """
    @property
    def BboxBottom(self) -> Int16:
        """
        Get: BboxBottom(self: WmfPlaceableFileHeader) -> Int16
        Set: BboxBottom(self: WmfPlaceableFileHeader) = value
        """
        ...

    @property
    def BboxLeft(self) -> Int16:
        """
        Get: BboxLeft(self: WmfPlaceableFileHeader) -> Int16
        Set: BboxLeft(self: WmfPlaceableFileHeader) = value
        """
        ...

    @property
    def BboxRight(self) -> Int16:
        """
        Get: BboxRight(self: WmfPlaceableFileHeader) -> Int16
        Set: BboxRight(self: WmfPlaceableFileHeader) = value
        """
        ...

    @property
    def BboxTop(self) -> Int16:
        """
        Get: BboxTop(self: WmfPlaceableFileHeader) -> Int16
        Set: BboxTop(self: WmfPlaceableFileHeader) = value
        """
        ...

    @property
    def Checksum(self) -> Int16:
        """
        Get: Checksum(self: WmfPlaceableFileHeader) -> Int16
        Set: Checksum(self: WmfPlaceableFileHeader) = value
        """
        ...

    @property
    def Hmf(self) -> Int16:
        """
        Get: Hmf(self: WmfPlaceableFileHeader) -> Int16
        Set: Hmf(self: WmfPlaceableFileHeader) = value
        """
        ...

    @property
    def Inch(self) -> Int16:
        """
        Get: Inch(self: WmfPlaceableFileHeader) -> Int16
        Set: Inch(self: WmfPlaceableFileHeader) = value
        """
        ...

    @property
    def Key(self) -> int:
        """
        Get: Key(self: WmfPlaceableFileHeader) -> int
        Set: Key(self: WmfPlaceableFileHeader) = value
        """
        ...

    @property
    def Reserved(self) -> int:
        """
        Get: Reserved(self: WmfPlaceableFileHeader) -> int
        Set: Reserved(self: WmfPlaceableFileHeader) = value
        """
        ...



