# encoding: utf-8
# module System.Runtime.InteropServices.ComTypes calls itself ComTypes
# from mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
# by generator 1.145
""" no doc """
from __future__ import annotations
from System import Array, Enum, Guid, Int16, Int64, IntPtr

from typing import Tuple as Tuple_

"""The following names are not found in the module: field#
"""

# no functions
# classes

class ADVF(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) ADVF, values: ADVF_DATAONSTOP (64), ADVF_NODATA (1), ADVF_ONLYONCE (4), ADVF_PRIMEFIRST (2), ADVFCACHE_FORCEBUILTIN (16), ADVFCACHE_NOHANDLER (8), ADVFCACHE_ONSAVE (32) """
    ADVFCACHE_FORCEBUILTIN: ADVF = ...
    ADVFCACHE_NOHANDLER: ADVF = ...
    ADVFCACHE_ONSAVE: ADVF = ...
    ADVF_DATAONSTOP: ADVF = ...
    ADVF_NODATA: ADVF = ...
    ADVF_ONLYONCE: ADVF = ...
    ADVF_PRIMEFIRST: ADVF = ...
    value__ = ...


class BINDPTR: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    lpfuncdesc = ...
    lptcomp = ...
    lpvardesc = ...


class BIND_OPTS: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    cbStruct = ...
    dwTickCountDeadline = ...
    grfFlags = ...
    grfMode = ...


class CALLCONV(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CALLCONV, values: CC_CDECL (1), CC_MACPASCAL (3), CC_MAX (9), CC_MPWCDECL (7), CC_MPWPASCAL (8), CC_MSCPASCAL (2), CC_PASCAL (2), CC_RESERVED (5), CC_STDCALL (4), CC_SYSCALL (6) """
    CC_CDECL: CALLCONV = ...
    CC_MACPASCAL: CALLCONV = ...
    CC_MAX: CALLCONV = ...
    CC_MPWCDECL: CALLCONV = ...
    CC_MPWPASCAL: CALLCONV = ...
    CC_MSCPASCAL: CALLCONV = ...
    CC_PASCAL: CALLCONV = ...
    CC_RESERVED: CALLCONV = ...
    CC_STDCALL: CALLCONV = ...
    CC_SYSCALL: CALLCONV = ...
    value__ = ...


class CONNECTDATA: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    dwCookie = ...
    pUnk = ...


class DATADIR(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DATADIR, values: DATADIR_GET (1), DATADIR_SET (2) """
    DATADIR_GET: DATADIR = ...
    DATADIR_SET: DATADIR = ...
    value__ = ...


class DESCKIND(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum DESCKIND, values: DESCKIND_FUNCDESC (1), DESCKIND_IMPLICITAPPOBJ (4), DESCKIND_MAX (5), DESCKIND_NONE (0), DESCKIND_TYPECOMP (3), DESCKIND_VARDESC (2) """
    DESCKIND_FUNCDESC: DESCKIND = ...
    DESCKIND_IMPLICITAPPOBJ: DESCKIND = ...
    DESCKIND_MAX: DESCKIND = ...
    DESCKIND_NONE: DESCKIND = ...
    DESCKIND_TYPECOMP: DESCKIND = ...
    DESCKIND_VARDESC: DESCKIND = ...
    value__ = ...


class DISPPARAMS: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    cArgs = ...
    cNamedArgs = ...
    rgdispidNamedArgs = ...
    rgvarg = ...


class DVASPECT(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) DVASPECT, values: DVASPECT_CONTENT (1), DVASPECT_DOCPRINT (8), DVASPECT_ICON (4), DVASPECT_THUMBNAIL (2) """
    DVASPECT_CONTENT: DVASPECT = ...
    DVASPECT_DOCPRINT: DVASPECT = ...
    DVASPECT_ICON: DVASPECT = ...
    DVASPECT_THUMBNAIL: DVASPECT = ...
    value__ = ...


class ELEMDESC: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def DESCUNION(self, *args): #cannot find CLR method
        """ no doc """
        ...

    desc = ...
    tdesc = ...


class EXCEPINFO: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    bstrDescription = ...
    bstrHelpFile = ...
    bstrSource = ...
    dwHelpContext = ...
    pfnDeferredFillIn = ...
    pvReserved = ...
    scode = ...
    wCode = ...
    wReserved = ...


class FILETIME: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    dwHighDateTime = ...
    dwLowDateTime = ...


class FORMATETC: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    cfFormat = ...
    dwAspect = ...
    lindex = ...
    ptd = ...
    tymed = ...


class FUNCDESC: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    callconv = ...
    cParams = ...
    cParamsOpt = ...
    cScodes = ...
    elemdescFunc = ...
    funckind = ...
    invkind = ...
    lprgelemdescParam = ...
    lprgscode = ...
    memid = ...
    oVft = ...
    wFuncFlags = ...


class FUNCFLAGS(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) FUNCFLAGS, values: FUNCFLAG_FBINDABLE (4), FUNCFLAG_FDEFAULTBIND (32), FUNCFLAG_FDEFAULTCOLLELEM (256), FUNCFLAG_FDISPLAYBIND (16), FUNCFLAG_FHIDDEN (64), FUNCFLAG_FIMMEDIATEBIND (4096), FUNCFLAG_FNONBROWSABLE (1024), FUNCFLAG_FREPLACEABLE (2048), FUNCFLAG_FREQUESTEDIT (8), FUNCFLAG_FRESTRICTED (1), FUNCFLAG_FSOURCE (2), FUNCFLAG_FUIDEFAULT (512), FUNCFLAG_FUSESGETLASTERROR (128) """
    FUNCFLAG_FBINDABLE: FUNCFLAGS = ...
    FUNCFLAG_FDEFAULTBIND: FUNCFLAGS = ...
    FUNCFLAG_FDEFAULTCOLLELEM: FUNCFLAGS = ...
    FUNCFLAG_FDISPLAYBIND: FUNCFLAGS = ...
    FUNCFLAG_FHIDDEN: FUNCFLAGS = ...
    FUNCFLAG_FIMMEDIATEBIND: FUNCFLAGS = ...
    FUNCFLAG_FNONBROWSABLE: FUNCFLAGS = ...
    FUNCFLAG_FREPLACEABLE: FUNCFLAGS = ...
    FUNCFLAG_FREQUESTEDIT: FUNCFLAGS = ...
    FUNCFLAG_FRESTRICTED: FUNCFLAGS = ...
    FUNCFLAG_FSOURCE: FUNCFLAGS = ...
    FUNCFLAG_FUIDEFAULT: FUNCFLAGS = ...
    FUNCFLAG_FUSESGETLASTERROR: FUNCFLAGS = ...
    value__ = ...


class FUNCKIND(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FUNCKIND, values: FUNC_DISPATCH (4), FUNC_NONVIRTUAL (2), FUNC_PUREVIRTUAL (1), FUNC_STATIC (3), FUNC_VIRTUAL (0) """
    FUNC_DISPATCH: FUNCKIND = ...
    FUNC_NONVIRTUAL: FUNCKIND = ...
    FUNC_PUREVIRTUAL: FUNCKIND = ...
    FUNC_STATIC: FUNCKIND = ...
    FUNC_VIRTUAL: FUNCKIND = ...
    value__ = ...


class IAdviseSink: # skipped bases: <type 'object'>
    """ no doc """
    def OnClose(self): # -> 
        """ OnClose(self: IAdviseSink) """
        ...

    def OnDataChange(self, format:FORMATETC, stgmedium:STGMEDIUM) -> Tuple_[FORMATETC, STGMEDIUM]:
        """ OnDataChange(self: IAdviseSink, format: FORMATETC, stgmedium: STGMEDIUM) -> (FORMATETC, STGMEDIUM) """
        ...

    def OnRename(self, moniker:IMoniker): # -> 
        """ OnRename(self: IAdviseSink, moniker: IMoniker) """
        ...

    def OnSave(self): # -> 
        """ OnSave(self: IAdviseSink) """
        ...

    def OnViewChange(self, aspect:int, index:int): # -> 
        """ OnViewChange(self: IAdviseSink, aspect: int, index: int) """
        ...


class IBindCtx: # skipped bases: <type 'object'>
    """ no doc """
    def EnumObjectParam(self, ppenum) -> IEnumString:
        """ EnumObjectParam(self: IBindCtx) -> IEnumString """
        ...

    def GetBindOptions(self, pbindopts:BIND_OPTS) -> BIND_OPTS:
        """ GetBindOptions(self: IBindCtx, pbindopts: BIND_OPTS) -> BIND_OPTS """
        ...

    def GetObjectParam(self, pszKey, ppunk) -> object:
        """ GetObjectParam(self: IBindCtx, pszKey: str) -> object """
        ...

    def GetRunningObjectTable(self, pprot) -> IRunningObjectTable:
        """ GetRunningObjectTable(self: IBindCtx) -> IRunningObjectTable """
        ...

    def RegisterObjectBound(self, punk:object): # -> 
        """ RegisterObjectBound(self: IBindCtx, punk: object) """
        ...

    def RegisterObjectParam(self, pszKey:str, punk:object): # -> 
        """ RegisterObjectParam(self: IBindCtx, pszKey: str, punk: object) """
        ...

    def ReleaseBoundObjects(self): # -> 
        """ ReleaseBoundObjects(self: IBindCtx) """
        ...

    def RevokeObjectBound(self, punk:object): # -> 
        """ RevokeObjectBound(self: IBindCtx, punk: object) """
        ...

    def RevokeObjectParam(self, pszKey:str) -> int:
        """ RevokeObjectParam(self: IBindCtx, pszKey: str) -> int """
        ...

    def SetBindOptions(self, pbindopts:BIND_OPTS) -> BIND_OPTS:
        """ SetBindOptions(self: IBindCtx, pbindopts: BIND_OPTS) -> BIND_OPTS """
        ...


class IConnectionPoint: # skipped bases: <type 'object'>
    """ no doc """
    def Advise(self, pUnkSink, pdwCookie) -> int:
        """ Advise(self: IConnectionPoint, pUnkSink: object) -> int """
        ...

    def EnumConnections(self, ppEnum) -> IEnumConnections:
        """ EnumConnections(self: IConnectionPoint) -> IEnumConnections """
        ...

    def GetConnectionInterface(self, pIID) -> Guid:
        """ GetConnectionInterface(self: IConnectionPoint) -> Guid """
        ...

    def GetConnectionPointContainer(self, ppCPC) -> IConnectionPointContainer:
        """ GetConnectionPointContainer(self: IConnectionPoint) -> IConnectionPointContainer """
        ...

    def Unadvise(self, dwCookie:int): # -> 
        """ Unadvise(self: IConnectionPoint, dwCookie: int) """
        ...


class IConnectionPointContainer: # skipped bases: <type 'object'>
    """ no doc """
    def EnumConnectionPoints(self, ppEnum) -> IEnumConnectionPoints:
        """ EnumConnectionPoints(self: IConnectionPointContainer) -> IEnumConnectionPoints """
        ...

    def FindConnectionPoint(self, riid, ppCP) -> Tuple_[Guid, IConnectionPoint]:
        """ FindConnectionPoint(self: IConnectionPointContainer, riid: Guid) -> (Guid, IConnectionPoint) """
        ...


class IDataObject: # skipped bases: <type 'object'>
    """ no doc """
    def DAdvise(self, pFormatetc, advf, adviseSink, connection) -> Tuple_[int, FORMATETC, int]:
        """ DAdvise(self: IDataObject, pFormatetc: FORMATETC, advf: ADVF, adviseSink: IAdviseSink) -> (int, FORMATETC, int) """
        ...

    def DUnadvise(self, connection:int): # -> 
        """ DUnadvise(self: IDataObject, connection: int) """
        ...

    def EnumDAdvise(self, enumAdvise) -> Tuple_[int, IEnumSTATDATA]:
        """ EnumDAdvise(self: IDataObject) -> (int, IEnumSTATDATA) """
        ...

    def EnumFormatEtc(self, direction:DATADIR) -> IEnumFORMATETC:
        """ EnumFormatEtc(self: IDataObject, direction: DATADIR) -> IEnumFORMATETC """
        ...

    def GetCanonicalFormatEtc(self, formatIn, formatOut) -> Tuple_[int, FORMATETC, FORMATETC]:
        """ GetCanonicalFormatEtc(self: IDataObject, formatIn: FORMATETC) -> (int, FORMATETC, FORMATETC) """
        ...

    def GetData(self, format, medium) -> Tuple_[FORMATETC, STGMEDIUM]:
        """ GetData(self: IDataObject, format: FORMATETC) -> (FORMATETC, STGMEDIUM) """
        ...

    def GetDataHere(self, format:FORMATETC, medium:STGMEDIUM) -> Tuple_[FORMATETC, STGMEDIUM]:
        """ GetDataHere(self: IDataObject, format: FORMATETC, medium: STGMEDIUM) -> (FORMATETC, STGMEDIUM) """
        ...

    def QueryGetData(self, format:FORMATETC) -> Tuple_[int, FORMATETC]:
        """ QueryGetData(self: IDataObject, format: FORMATETC) -> (int, FORMATETC) """
        ...

    def SetData(self, formatIn:FORMATETC, medium:STGMEDIUM, release:bool) -> Tuple_[FORMATETC, STGMEDIUM]:
        """ SetData(self: IDataObject, formatIn: FORMATETC, medium: STGMEDIUM, release: bool) -> (FORMATETC, STGMEDIUM) """
        ...


class IDLDESC: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    dwReserved = ...
    wIDLFlags = ...


class IDLFLAG(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) IDLFLAG, values: IDLFLAG_FIN (1), IDLFLAG_FLCID (4), IDLFLAG_FOUT (2), IDLFLAG_FRETVAL (8), IDLFLAG_NONE (0) """
    IDLFLAG_FIN: IDLFLAG = ...
    IDLFLAG_FLCID: IDLFLAG = ...
    IDLFLAG_FOUT: IDLFLAG = ...
    IDLFLAG_FRETVAL: IDLFLAG = ...
    IDLFLAG_NONE: IDLFLAG = ...
    value__ = ...


class IEnumConnectionPoints: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self, ppenum) -> IEnumConnectionPoints:
        """ Clone(self: IEnumConnectionPoints) -> IEnumConnectionPoints """
        ...

    def Next(self, celt, rgelt, pceltFetched) -> Tuple_[int, Array]:
        """ Next(self: IEnumConnectionPoints, celt: int, pceltFetched: IntPtr) -> (int, Array[IConnectionPoint]) """
        ...

    def Reset(self): # -> 
        """ Reset(self: IEnumConnectionPoints) """
        ...

    def Skip(self, celt:int) -> int:
        """ Skip(self: IEnumConnectionPoints, celt: int) -> int """
        ...


class IEnumConnections: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self, ppenum) -> IEnumConnections:
        """ Clone(self: IEnumConnections) -> IEnumConnections """
        ...

    def Next(self, celt, rgelt, pceltFetched) -> Tuple_[int, Array]:
        """ Next(self: IEnumConnections, celt: int, pceltFetched: IntPtr) -> (int, Array[CONNECTDATA]) """
        ...

    def Reset(self): # -> 
        """ Reset(self: IEnumConnections) """
        ...

    def Skip(self, celt:int) -> int:
        """ Skip(self: IEnumConnections, celt: int) -> int """
        ...


class IEnumFORMATETC: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self, newEnum) -> IEnumFORMATETC:
        """ Clone(self: IEnumFORMATETC) -> IEnumFORMATETC """
        ...

    def Next(self, celt, rgelt, pceltFetched) -> Tuple_[int, Array, Array]:
        """ Next(self: IEnumFORMATETC, celt: int) -> (int, Array[FORMATETC], Array[int]) """
        ...

    def Reset(self) -> int:
        """ Reset(self: IEnumFORMATETC) -> int """
        ...

    def Skip(self, celt:int) -> int:
        """ Skip(self: IEnumFORMATETC, celt: int) -> int """
        ...


class IEnumMoniker: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self, ppenum) -> IEnumMoniker:
        """ Clone(self: IEnumMoniker) -> IEnumMoniker """
        ...

    def Next(self, celt, rgelt, pceltFetched) -> Tuple_[int, Array]:
        """ Next(self: IEnumMoniker, celt: int, pceltFetched: IntPtr) -> (int, Array[IMoniker]) """
        ...

    def Reset(self): # -> 
        """ Reset(self: IEnumMoniker) """
        ...

    def Skip(self, celt:int) -> int:
        """ Skip(self: IEnumMoniker, celt: int) -> int """
        ...


class IEnumSTATDATA: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self, newEnum) -> IEnumSTATDATA:
        """ Clone(self: IEnumSTATDATA) -> IEnumSTATDATA """
        ...

    def Next(self, celt, rgelt, pceltFetched) -> Tuple_[int, Array, Array]:
        """ Next(self: IEnumSTATDATA, celt: int) -> (int, Array[STATDATA], Array[int]) """
        ...

    def Reset(self) -> int:
        """ Reset(self: IEnumSTATDATA) -> int """
        ...

    def Skip(self, celt:int) -> int:
        """ Skip(self: IEnumSTATDATA, celt: int) -> int """
        ...


class IEnumString: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self, ppenum) -> IEnumString:
        """ Clone(self: IEnumString) -> IEnumString """
        ...

    def Next(self, celt, rgelt, pceltFetched) -> Tuple_[int, Array]:
        """ Next(self: IEnumString, celt: int, pceltFetched: IntPtr) -> (int, Array[str]) """
        ...

    def Reset(self): # -> 
        """ Reset(self: IEnumString) """
        ...

    def Skip(self, celt:int) -> int:
        """ Skip(self: IEnumString, celt: int) -> int """
        ...


class IEnumVARIANT: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self) -> IEnumVARIANT:
        """ Clone(self: IEnumVARIANT) -> IEnumVARIANT """
        ...

    def Next(self, celt, rgVar, pceltFetched) -> Tuple_[int, Array]:
        """ Next(self: IEnumVARIANT, celt: int, pceltFetched: IntPtr) -> (int, Array[object]) """
        ...

    def Reset(self) -> int:
        """ Reset(self: IEnumVARIANT) -> int """
        ...

    def Skip(self, celt:int) -> int:
        """ Skip(self: IEnumVARIANT, celt: int) -> int """
        ...


class IMoniker: # skipped bases: <type 'object'>
    """ no doc """
    def BindToObject(self, pbc, pmkToLeft, riidResult, ppvResult) -> Tuple_[Guid, object]:
        """ BindToObject(self: IMoniker, pbc: IBindCtx, pmkToLeft: IMoniker, riidResult: Guid) -> (Guid, object) """
        ...

    def BindToStorage(self, pbc, pmkToLeft, riid, ppvObj) -> Tuple_[Guid, object]:
        """ BindToStorage(self: IMoniker, pbc: IBindCtx, pmkToLeft: IMoniker, riid: Guid) -> (Guid, object) """
        ...

    def CommonPrefixWith(self, pmkOther, ppmkPrefix) -> IMoniker:
        """ CommonPrefixWith(self: IMoniker, pmkOther: IMoniker) -> IMoniker """
        ...

    def ComposeWith(self, pmkRight, fOnlyIfNotGeneric, ppmkComposite) -> IMoniker:
        """ ComposeWith(self: IMoniker, pmkRight: IMoniker, fOnlyIfNotGeneric: bool) -> IMoniker """
        ...

    def Enum(self, fForward, ppenumMoniker) -> IEnumMoniker:
        """ Enum(self: IMoniker, fForward: bool) -> IEnumMoniker """
        ...

    def GetClassID(self, pClassID) -> Guid:
        """ GetClassID(self: IMoniker) -> Guid """
        ...

    def GetDisplayName(self, pbc, pmkToLeft, ppszDisplayName) -> str:
        """ GetDisplayName(self: IMoniker, pbc: IBindCtx, pmkToLeft: IMoniker) -> str """
        ...

    def GetSizeMax(self, pcbSize) -> Int64:
        """ GetSizeMax(self: IMoniker) -> Int64 """
        ...

    def GetTimeOfLastChange(self, pbc, pmkToLeft, pFileTime) -> FILETIME:
        """ GetTimeOfLastChange(self: IMoniker, pbc: IBindCtx, pmkToLeft: IMoniker) -> FILETIME """
        ...

    def Hash(self, pdwHash) -> int:
        """ Hash(self: IMoniker) -> int """
        ...

    def Inverse(self, ppmk) -> IMoniker:
        """ Inverse(self: IMoniker) -> IMoniker """
        ...

    def IsDirty(self) -> int:
        """ IsDirty(self: IMoniker) -> int """
        ...

    def IsEqual(self, pmkOtherMoniker:IMoniker) -> int:
        """ IsEqual(self: IMoniker, pmkOtherMoniker: IMoniker) -> int """
        ...

    def IsRunning(self, pbc:IBindCtx, pmkToLeft:IMoniker, pmkNewlyRunning:IMoniker) -> int:
        """ IsRunning(self: IMoniker, pbc: IBindCtx, pmkToLeft: IMoniker, pmkNewlyRunning: IMoniker) -> int """
        ...

    def IsSystemMoniker(self, pdwMksys) -> Tuple_[int, int]:
        """ IsSystemMoniker(self: IMoniker) -> (int, int) """
        ...

    def Load(self, pStm:IStream): # -> 
        """ Load(self: IMoniker, pStm: IStream) """
        ...

    def ParseDisplayName(self, pbc, pmkToLeft, pszDisplayName, pchEaten, ppmkOut) -> Tuple_[int, IMoniker]:
        """ ParseDisplayName(self: IMoniker, pbc: IBindCtx, pmkToLeft: IMoniker, pszDisplayName: str) -> (int, IMoniker) """
        ...

    def Reduce(self, pbc, dwReduceHowFar, ppmkToLeft, ppmkReduced) -> Tuple_[IMoniker, IMoniker]:
        """ Reduce(self: IMoniker, pbc: IBindCtx, dwReduceHowFar: int, ppmkToLeft: IMoniker) -> (IMoniker, IMoniker) """
        ...

    def RelativePathTo(self, pmkOther, ppmkRelPath) -> IMoniker:
        """ RelativePathTo(self: IMoniker, pmkOther: IMoniker) -> IMoniker """
        ...

    def Save(self, pStm:IStream, fClearDirty:bool): # -> 
        """ Save(self: IMoniker, pStm: IStream, fClearDirty: bool) """
        ...


class IMPLTYPEFLAGS(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) IMPLTYPEFLAGS, values: IMPLTYPEFLAG_FDEFAULT (1), IMPLTYPEFLAG_FDEFAULTVTABLE (8), IMPLTYPEFLAG_FRESTRICTED (4), IMPLTYPEFLAG_FSOURCE (2) """
    IMPLTYPEFLAG_FDEFAULT: IMPLTYPEFLAGS = ...
    IMPLTYPEFLAG_FDEFAULTVTABLE: IMPLTYPEFLAGS = ...
    IMPLTYPEFLAG_FRESTRICTED: IMPLTYPEFLAGS = ...
    IMPLTYPEFLAG_FSOURCE: IMPLTYPEFLAGS = ...
    value__ = ...


class INVOKEKIND(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) INVOKEKIND, values: INVOKE_FUNC (1), INVOKE_PROPERTYGET (2), INVOKE_PROPERTYPUT (4), INVOKE_PROPERTYPUTREF (8) """
    INVOKE_FUNC: INVOKEKIND = ...
    INVOKE_PROPERTYGET: INVOKEKIND = ...
    INVOKE_PROPERTYPUT: INVOKEKIND = ...
    INVOKE_PROPERTYPUTREF: INVOKEKIND = ...
    value__ = ...


class IPersistFile: # skipped bases: <type 'object'>
    """ no doc """
    def GetClassID(self, pClassID) -> Guid:
        """ GetClassID(self: IPersistFile) -> Guid """
        ...

    def GetCurFile(self, ppszFileName) -> str:
        """ GetCurFile(self: IPersistFile) -> str """
        ...

    def IsDirty(self) -> int:
        """ IsDirty(self: IPersistFile) -> int """
        ...

    def Load(self, pszFileName:str, dwMode:int): # -> 
        """ Load(self: IPersistFile, pszFileName: str, dwMode: int) """
        ...

    def Save(self, pszFileName:str, fRemember:bool): # -> 
        """ Save(self: IPersistFile, pszFileName: str, fRemember: bool) """
        ...

    def SaveCompleted(self, pszFileName:str): # -> 
        """ SaveCompleted(self: IPersistFile, pszFileName: str) """
        ...


class IRunningObjectTable: # skipped bases: <type 'object'>
    """ no doc """
    def EnumRunning(self, ppenumMoniker) -> IEnumMoniker:
        """ EnumRunning(self: IRunningObjectTable) -> IEnumMoniker """
        ...

    def GetObject(self, pmkObjectName, ppunkObject) -> Tuple_[int, object]:
        """ GetObject(self: IRunningObjectTable, pmkObjectName: IMoniker) -> (int, object) """
        ...

    def GetTimeOfLastChange(self, pmkObjectName, pfiletime) -> Tuple_[int, FILETIME]:
        """ GetTimeOfLastChange(self: IRunningObjectTable, pmkObjectName: IMoniker) -> (int, FILETIME) """
        ...

    def IsRunning(self, pmkObjectName:IMoniker) -> int:
        """ IsRunning(self: IRunningObjectTable, pmkObjectName: IMoniker) -> int """
        ...

    def NoteChangeTime(self, dwRegister:int, pfiletime:FILETIME) -> FILETIME:
        """ NoteChangeTime(self: IRunningObjectTable, dwRegister: int, pfiletime: FILETIME) -> FILETIME """
        ...

    def Register(self, grfFlags:int, punkObject:object, pmkObjectName:IMoniker) -> int:
        """ Register(self: IRunningObjectTable, grfFlags: int, punkObject: object, pmkObjectName: IMoniker) -> int """
        ...

    def Revoke(self, dwRegister:int): # -> 
        """ Revoke(self: IRunningObjectTable, dwRegister: int) """
        ...


class IStream: # skipped bases: <type 'object'>
    """ no doc """
    def Clone(self, ppstm) -> IStream:
        """ Clone(self: IStream) -> IStream """
        ...

    def Commit(self, grfCommitFlags:int): # -> 
        """ Commit(self: IStream, grfCommitFlags: int) """
        ...

    def CopyTo(self, pstm:IStream, cb:Int64, pcbRead:IntPtr, pcbWritten:IntPtr): # -> 
        """ CopyTo(self: IStream, pstm: IStream, cb: Int64, pcbRead: IntPtr, pcbWritten: IntPtr) """
        ...

    def LockRegion(self, libOffset:Int64, cb:Int64, dwLockType:int): # -> 
        """ LockRegion(self: IStream, libOffset: Int64, cb: Int64, dwLockType: int) """
        ...

    def Read(self, pv, cb, pcbRead) -> Array:
        """ Read(self: IStream, cb: int, pcbRead: IntPtr) -> Array[Byte] """
        ...

    def Revert(self): # -> 
        """ Revert(self: IStream) """
        ...

    def Seek(self, dlibMove:Int64, dwOrigin:int, plibNewPosition:IntPtr): # -> 
        """ Seek(self: IStream, dlibMove: Int64, dwOrigin: int, plibNewPosition: IntPtr) """
        ...

    def SetSize(self, libNewSize:Int64): # -> 
        """ SetSize(self: IStream, libNewSize: Int64) """
        ...

    def Stat(self, pstatstg, grfStatFlag) -> STATSTG:
        """ Stat(self: IStream, grfStatFlag: int) -> STATSTG """
        ...

    def UnlockRegion(self, libOffset:Int64, cb:Int64, dwLockType:int): # -> 
        """ UnlockRegion(self: IStream, libOffset: Int64, cb: Int64, dwLockType: int) """
        ...

    def Write(self, pv:Array, cb:int, pcbWritten:IntPtr): # -> 
        """ Write(self: IStream, pv: Array[Byte], cb: int, pcbWritten: IntPtr) """
        ...


class ITypeComp: # skipped bases: <type 'object'>
    """ no doc """
    def Bind(self, szName, lHashVal, wFlags, ppTInfo, pDescKind, pBindPtr) -> Tuple_[ITypeInfo, DESCKIND, BINDPTR]:
        """ Bind(self: ITypeComp, szName: str, lHashVal: int, wFlags: Int16) -> (ITypeInfo, DESCKIND, BINDPTR) """
        ...

    def BindType(self, szName, lHashVal, ppTInfo, ppTComp) -> Tuple_[ITypeInfo, ITypeComp]:
        """ BindType(self: ITypeComp, szName: str, lHashVal: int) -> (ITypeInfo, ITypeComp) """
        ...


class ITypeInfo: # skipped bases: <type 'object'>
    """ no doc """
    def AddressOfMember(self, memid, invKind, ppv) -> IntPtr:
        """ AddressOfMember(self: ITypeInfo, memid: int, invKind: INVOKEKIND) -> IntPtr """
        ...

    def CreateInstance(self, pUnkOuter, riid, ppvObj) -> Tuple_[Guid, object]:
        """ CreateInstance(self: ITypeInfo, pUnkOuter: object, riid: Guid) -> (Guid, object) """
        ...

    def GetContainingTypeLib(self, ppTLB, pIndex) -> Tuple_[ITypeLib, int]:
        """ GetContainingTypeLib(self: ITypeInfo) -> (ITypeLib, int) """
        ...

    def GetDllEntry(self, memid:int, invKind:INVOKEKIND, pBstrDllName:IntPtr, pBstrName:IntPtr, pwOrdinal:IntPtr): # -> 
        """ GetDllEntry(self: ITypeInfo, memid: int, invKind: INVOKEKIND, pBstrDllName: IntPtr, pBstrName: IntPtr, pwOrdinal: IntPtr) """
        ...

    def GetDocumentation(self, index, strName, strDocString, dwHelpContext, strHelpFile) -> Tuple_[str, str, int, str]:
        """ GetDocumentation(self: ITypeInfo, index: int) -> (str, str, int, str) """
        ...

    def GetFuncDesc(self, index, ppFuncDesc) -> IntPtr:
        """ GetFuncDesc(self: ITypeInfo, index: int) -> IntPtr """
        ...

    def GetIDsOfNames(self, rgszNames, cNames, pMemId) -> Array:
        """ GetIDsOfNames(self: ITypeInfo, rgszNames: Array[str], cNames: int) -> Array[int] """
        ...

    def GetImplTypeFlags(self, index, pImplTypeFlags) -> IMPLTYPEFLAGS:
        """ GetImplTypeFlags(self: ITypeInfo, index: int) -> IMPLTYPEFLAGS """
        ...

    def GetMops(self, memid, pBstrMops) -> str:
        """ GetMops(self: ITypeInfo, memid: int) -> str """
        ...

    def GetNames(self, memid, rgBstrNames, cMaxNames, pcNames) -> Tuple_[Array, int]:
        """ GetNames(self: ITypeInfo, memid: int, cMaxNames: int) -> (Array[str], int) """
        ...

    def GetRefTypeInfo(self, hRef, ppTI) -> ITypeInfo:
        """ GetRefTypeInfo(self: ITypeInfo, hRef: int) -> ITypeInfo """
        ...

    def GetRefTypeOfImplType(self, index, href) -> int:
        """ GetRefTypeOfImplType(self: ITypeInfo, index: int) -> int """
        ...

    def GetTypeAttr(self, ppTypeAttr) -> IntPtr:
        """ GetTypeAttr(self: ITypeInfo) -> IntPtr """
        ...

    def GetTypeComp(self, ppTComp) -> ITypeComp:
        """ GetTypeComp(self: ITypeInfo) -> ITypeComp """
        ...

    def GetVarDesc(self, index, ppVarDesc) -> IntPtr:
        """ GetVarDesc(self: ITypeInfo, index: int) -> IntPtr """
        ...

    def Invoke(self, pvInstance, memid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) -> Tuple_[DISPPARAMS, int]:
        """ Invoke(self: ITypeInfo, pvInstance: object, memid: int, wFlags: Int16, pDispParams: DISPPARAMS, pVarResult: IntPtr, pExcepInfo: IntPtr) -> (DISPPARAMS, int) """
        ...

    def ReleaseFuncDesc(self, pFuncDesc:IntPtr): # -> 
        """ ReleaseFuncDesc(self: ITypeInfo, pFuncDesc: IntPtr) """
        ...

    def ReleaseTypeAttr(self, pTypeAttr:IntPtr): # -> 
        """ ReleaseTypeAttr(self: ITypeInfo, pTypeAttr: IntPtr) """
        ...

    def ReleaseVarDesc(self, pVarDesc:IntPtr): # -> 
        """ ReleaseVarDesc(self: ITypeInfo, pVarDesc: IntPtr) """
        ...


class ITypeInfo2(ITypeInfo): # skipped bases: <type 'object'>
    """ no doc """
    def GetAllCustData(self, pCustData:IntPtr): # -> 
        """ GetAllCustData(self: ITypeInfo2, pCustData: IntPtr) """
        ...

    def GetAllFuncCustData(self, index:int, pCustData:IntPtr): # -> 
        """ GetAllFuncCustData(self: ITypeInfo2, index: int, pCustData: IntPtr) """
        ...

    def GetAllImplTypeCustData(self, index:int, pCustData:IntPtr): # -> 
        """ GetAllImplTypeCustData(self: ITypeInfo2, index: int, pCustData: IntPtr) """
        ...

    def GetAllParamCustData(self, indexFunc:int, indexParam:int, pCustData:IntPtr): # -> 
        """ GetAllParamCustData(self: ITypeInfo2, indexFunc: int, indexParam: int, pCustData: IntPtr) """
        ...

    def GetAllVarCustData(self, index:int, pCustData:IntPtr): # -> 
        """ GetAllVarCustData(self: ITypeInfo2, index: int, pCustData: IntPtr) """
        ...

    def GetCustData(self, guid, pVarVal) -> Tuple_[Guid, object]:
        """ GetCustData(self: ITypeInfo2, guid: Guid) -> (Guid, object) """
        ...

    def GetDocumentation2(self, memid, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll) -> Tuple_[str, int, str]:
        """ GetDocumentation2(self: ITypeInfo2, memid: int) -> (str, int, str) """
        ...

    def GetFuncCustData(self, index, guid, pVarVal) -> Tuple_[Guid, object]:
        """ GetFuncCustData(self: ITypeInfo2, index: int, guid: Guid) -> (Guid, object) """
        ...

    def GetFuncIndexOfMemId(self, memid, invKind, pFuncIndex) -> int:
        """ GetFuncIndexOfMemId(self: ITypeInfo2, memid: int, invKind: INVOKEKIND) -> int """
        ...

    def GetImplTypeCustData(self, index, guid, pVarVal) -> Tuple_[Guid, object]:
        """ GetImplTypeCustData(self: ITypeInfo2, index: int, guid: Guid) -> (Guid, object) """
        ...

    def GetParamCustData(self, indexFunc, indexParam, guid, pVarVal) -> Tuple_[Guid, object]:
        """ GetParamCustData(self: ITypeInfo2, indexFunc: int, indexParam: int, guid: Guid) -> (Guid, object) """
        ...

    def GetTypeFlags(self, pTypeFlags) -> int:
        """ GetTypeFlags(self: ITypeInfo2) -> int """
        ...

    def GetTypeKind(self, pTypeKind) -> TYPEKIND:
        """ GetTypeKind(self: ITypeInfo2) -> TYPEKIND """
        ...

    def GetVarCustData(self, index, guid, pVarVal) -> Tuple_[Guid, object]:
        """ GetVarCustData(self: ITypeInfo2, index: int, guid: Guid) -> (Guid, object) """
        ...

    def GetVarIndexOfMemId(self, memid, pVarIndex) -> int:
        """ GetVarIndexOfMemId(self: ITypeInfo2, memid: int) -> int """
        ...


class ITypeLib: # skipped bases: <type 'object'>
    """ no doc """
    def FindName(self, szNameBuf, lHashVal, ppTInfo, rgMemId, pcFound) -> Tuple_[Array, Array, Int16]:
        """ FindName(self: ITypeLib, szNameBuf: str, lHashVal: int, pcFound: Int16) -> (Array[ITypeInfo], Array[int], Int16) """
        ...

    def GetDocumentation(self, index, strName, strDocString, dwHelpContext, strHelpFile) -> Tuple_[str, str, int, str]:
        """ GetDocumentation(self: ITypeLib, index: int) -> (str, str, int, str) """
        ...

    def GetLibAttr(self, ppTLibAttr) -> IntPtr:
        """ GetLibAttr(self: ITypeLib) -> IntPtr """
        ...

    def GetTypeComp(self, ppTComp) -> ITypeComp:
        """ GetTypeComp(self: ITypeLib) -> ITypeComp """
        ...

    def GetTypeInfo(self, index, ppTI) -> ITypeInfo:
        """ GetTypeInfo(self: ITypeLib, index: int) -> ITypeInfo """
        ...

    def GetTypeInfoCount(self) -> int:
        """ GetTypeInfoCount(self: ITypeLib) -> int """
        ...

    def GetTypeInfoOfGuid(self, guid, ppTInfo) -> Tuple_[Guid, ITypeInfo]:
        """ GetTypeInfoOfGuid(self: ITypeLib, guid: Guid) -> (Guid, ITypeInfo) """
        ...

    def GetTypeInfoType(self, index, pTKind) -> TYPEKIND:
        """ GetTypeInfoType(self: ITypeLib, index: int) -> TYPEKIND """
        ...

    def IsName(self, szNameBuf:str, lHashVal:int) -> bool:
        """ IsName(self: ITypeLib, szNameBuf: str, lHashVal: int) -> bool """
        ...

    def ReleaseTLibAttr(self, pTLibAttr:IntPtr): # -> 
        """ ReleaseTLibAttr(self: ITypeLib, pTLibAttr: IntPtr) """
        ...


class ITypeLib2(ITypeLib): # skipped bases: <type 'object'>
    """ no doc """
    def GetAllCustData(self, pCustData:IntPtr): # -> 
        """ GetAllCustData(self: ITypeLib2, pCustData: IntPtr) """
        ...

    def GetCustData(self, guid, pVarVal) -> Tuple_[Guid, object]:
        """ GetCustData(self: ITypeLib2, guid: Guid) -> (Guid, object) """
        ...

    def GetDocumentation2(self, index, pbstrHelpString, pdwHelpStringContext, pbstrHelpStringDll) -> Tuple_[str, int, str]:
        """ GetDocumentation2(self: ITypeLib2, index: int) -> (str, int, str) """
        ...

    def GetLibStatistics(self, pcUniqueNames, pcchUniqueNames) -> int:
        """ GetLibStatistics(self: ITypeLib2, pcUniqueNames: IntPtr) -> int """
        ...


class LIBFLAGS(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) LIBFLAGS, values: LIBFLAG_FCONTROL (2), LIBFLAG_FHASDISKIMAGE (8), LIBFLAG_FHIDDEN (4), LIBFLAG_FRESTRICTED (1) """
    LIBFLAG_FCONTROL: LIBFLAGS = ...
    LIBFLAG_FHASDISKIMAGE: LIBFLAGS = ...
    LIBFLAG_FHIDDEN: LIBFLAGS = ...
    LIBFLAG_FRESTRICTED: LIBFLAGS = ...
    value__ = ...


class PARAMDESC: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    lpVarValue = ...
    wParamFlags = ...


class PARAMFLAG(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) PARAMFLAG, values: PARAMFLAG_FHASCUSTDATA (64), PARAMFLAG_FHASDEFAULT (32), PARAMFLAG_FIN (1), PARAMFLAG_FLCID (4), PARAMFLAG_FOPT (16), PARAMFLAG_FOUT (2), PARAMFLAG_FRETVAL (8), PARAMFLAG_NONE (0) """
    PARAMFLAG_FHASCUSTDATA: PARAMFLAG = ...
    PARAMFLAG_FHASDEFAULT: PARAMFLAG = ...
    PARAMFLAG_FIN: PARAMFLAG = ...
    PARAMFLAG_FLCID: PARAMFLAG = ...
    PARAMFLAG_FOPT: PARAMFLAG = ...
    PARAMFLAG_FOUT: PARAMFLAG = ...
    PARAMFLAG_FRETVAL: PARAMFLAG = ...
    PARAMFLAG_NONE: PARAMFLAG = ...
    value__ = ...


class STATDATA: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    advf = ...
    advSink = ...
    connection = ...
    formatetc = ...


class STATSTG: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    atime = ...
    cbSize = ...
    clsid = ...
    ctime = ...
    grfLocksSupported = ...
    grfMode = ...
    grfStateBits = ...
    mtime = ...
    pwcsName = ...
    reserved = ...
    type = ...


class STGMEDIUM: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    pUnkForRelease = ...
    tymed = ...
    unionmember = ...


class SYSKIND(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SYSKIND, values: SYS_MAC (2), SYS_WIN16 (0), SYS_WIN32 (1), SYS_WIN64 (3) """
    SYS_MAC: SYSKIND = ...
    SYS_WIN16: SYSKIND = ...
    SYS_WIN32: SYSKIND = ...
    SYS_WIN64: SYSKIND = ...
    value__ = ...


class TYMED(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) TYMED, values: TYMED_ENHMF (64), TYMED_FILE (2), TYMED_GDI (16), TYMED_HGLOBAL (1), TYMED_ISTORAGE (8), TYMED_ISTREAM (4), TYMED_MFPICT (32), TYMED_NULL (0) """
    TYMED_ENHMF: TYMED = ...
    TYMED_FILE: TYMED = ...
    TYMED_GDI: TYMED = ...
    TYMED_HGLOBAL: TYMED = ...
    TYMED_ISTORAGE: TYMED = ...
    TYMED_ISTREAM: TYMED = ...
    TYMED_MFPICT: TYMED = ...
    TYMED_NULL: TYMED = ...
    value__ = ...


class TYPEATTR: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    cbAlignment = ...
    cbSizeInstance = ...
    cbSizeVft = ...
    cFuncs = ...
    cImplTypes = ...
    cVars = ...
    dwReserved = ...
    guid = ...
    idldescType = ...
    lcid = ...
    lpstrSchema = ...
    MEMBER_ID_NIL: int = ...
    memidConstructor = ...
    memidDestructor = ...
    tdescAlias = ...
    typekind = ...
    wMajorVerNum = ...
    wMinorVerNum = ...
    wTypeFlags = ...


class TYPEDESC: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    lpValue = ...
    vt = ...


class TYPEFLAGS(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) TYPEFLAGS, values: TYPEFLAG_FAGGREGATABLE (1024), TYPEFLAG_FAPPOBJECT (1), TYPEFLAG_FCANCREATE (2), TYPEFLAG_FCONTROL (32), TYPEFLAG_FDISPATCHABLE (4096), TYPEFLAG_FDUAL (64), TYPEFLAG_FHIDDEN (16), TYPEFLAG_FLICENSED (4), TYPEFLAG_FNONEXTENSIBLE (128), TYPEFLAG_FOLEAUTOMATION (256), TYPEFLAG_FPREDECLID (8), TYPEFLAG_FPROXY (16384), TYPEFLAG_FREPLACEABLE (2048), TYPEFLAG_FRESTRICTED (512), TYPEFLAG_FREVERSEBIND (8192) """
    TYPEFLAG_FAGGREGATABLE: TYPEFLAGS = ...
    TYPEFLAG_FAPPOBJECT: TYPEFLAGS = ...
    TYPEFLAG_FCANCREATE: TYPEFLAGS = ...
    TYPEFLAG_FCONTROL: TYPEFLAGS = ...
    TYPEFLAG_FDISPATCHABLE: TYPEFLAGS = ...
    TYPEFLAG_FDUAL: TYPEFLAGS = ...
    TYPEFLAG_FHIDDEN: TYPEFLAGS = ...
    TYPEFLAG_FLICENSED: TYPEFLAGS = ...
    TYPEFLAG_FNONEXTENSIBLE: TYPEFLAGS = ...
    TYPEFLAG_FOLEAUTOMATION: TYPEFLAGS = ...
    TYPEFLAG_FPREDECLID: TYPEFLAGS = ...
    TYPEFLAG_FPROXY: TYPEFLAGS = ...
    TYPEFLAG_FREPLACEABLE: TYPEFLAGS = ...
    TYPEFLAG_FRESTRICTED: TYPEFLAGS = ...
    TYPEFLAG_FREVERSEBIND: TYPEFLAGS = ...
    value__ = ...


class TYPEKIND(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TYPEKIND, values: TKIND_ALIAS (6), TKIND_COCLASS (5), TKIND_DISPATCH (4), TKIND_ENUM (0), TKIND_INTERFACE (3), TKIND_MAX (8), TKIND_MODULE (2), TKIND_RECORD (1), TKIND_UNION (7) """
    TKIND_ALIAS: TYPEKIND = ...
    TKIND_COCLASS: TYPEKIND = ...
    TKIND_DISPATCH: TYPEKIND = ...
    TKIND_ENUM: TYPEKIND = ...
    TKIND_INTERFACE: TYPEKIND = ...
    TKIND_MAX: TYPEKIND = ...
    TKIND_MODULE: TYPEKIND = ...
    TKIND_RECORD: TYPEKIND = ...
    TKIND_UNION: TYPEKIND = ...
    value__ = ...


class TYPELIBATTR: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    guid = ...
    lcid = ...
    syskind = ...
    wLibFlags = ...
    wMajorVerNum = ...
    wMinorVerNum = ...


class VARDESC: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    def DESCUNION(self, *args): #cannot find CLR method
        """ no doc """
        ...

    desc = ...
    elemdescVar = ...
    lpstrSchema = ...
    memid = ...
    varkind = ...
    wVarFlags = ...


class VARFLAGS(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) VARFLAGS, values: VARFLAG_FBINDABLE (4), VARFLAG_FDEFAULTBIND (32), VARFLAG_FDEFAULTCOLLELEM (256), VARFLAG_FDISPLAYBIND (16), VARFLAG_FHIDDEN (64), VARFLAG_FIMMEDIATEBIND (4096), VARFLAG_FNONBROWSABLE (1024), VARFLAG_FREADONLY (1), VARFLAG_FREPLACEABLE (2048), VARFLAG_FREQUESTEDIT (8), VARFLAG_FRESTRICTED (128), VARFLAG_FSOURCE (2), VARFLAG_FUIDEFAULT (512) """
    value__ = ...
    VARFLAG_FBINDABLE: VARFLAGS = ...
    VARFLAG_FDEFAULTBIND: VARFLAGS = ...
    VARFLAG_FDEFAULTCOLLELEM: VARFLAGS = ...
    VARFLAG_FDISPLAYBIND: VARFLAGS = ...
    VARFLAG_FHIDDEN: VARFLAGS = ...
    VARFLAG_FIMMEDIATEBIND: VARFLAGS = ...
    VARFLAG_FNONBROWSABLE: VARFLAGS = ...
    VARFLAG_FREADONLY: VARFLAGS = ...
    VARFLAG_FREPLACEABLE: VARFLAGS = ...
    VARFLAG_FREQUESTEDIT: VARFLAGS = ...
    VARFLAG_FRESTRICTED: VARFLAGS = ...
    VARFLAG_FSOURCE: VARFLAGS = ...
    VARFLAG_FUIDEFAULT: VARFLAGS = ...


class VARKIND(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum VARKIND, values: VAR_CONST (2), VAR_DISPATCH (3), VAR_PERINSTANCE (0), VAR_STATIC (1) """
    value__ = ...
    VAR_CONST: VARKIND = ...
    VAR_DISPATCH: VARKIND = ...
    VAR_PERINSTANCE: VARKIND = ...
    VAR_STATIC: VARKIND = ...


