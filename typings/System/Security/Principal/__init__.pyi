# encoding: utf-8
# module System.Security.Principal calls itself Principal
# from mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
# by generator 1.145
""" no doc """
from __future__ import annotations
from Microsoft.Win32.SafeHandles import SafeAccessTokenHandle

from System import (Action, Array, Enum, IComparable, IDisposable, IntPtr, 
    SystemException, Type)

from System.Collections import ICollection, IEnumerable, IEnumerator

from System.Runtime.Serialization import (IDeserializationCallback, 
    ISerializable)

from System.Security.Claims import ClaimsIdentity, ClaimsPrincipal

from typing import Self

"""The following names are not found in the module: BoundEvent, field#
"""

# no functions
# classes

class GenericIdentity(ClaimsIdentity): # skipped bases: <type 'IIdentity'>, <type 'object'>
    """
    GenericIdentity(name: str)
    GenericIdentity(name: str, type: str)
    """
    pass

class GenericPrincipal(ClaimsPrincipal): # skipped bases: <type 'IPrincipal'>, <type 'object'>
    """ GenericPrincipal(identity: IIdentity, roles: Array[str]) """
    pass

class IdentityNotMappedException(SystemException): # skipped bases: <type '_Exception'>, <type 'ISerializable'>, <type 'object'>
    """
    IdentityNotMappedException()
    IdentityNotMappedException(message: str)
    IdentityNotMappedException(message: str, inner: Exception)
    """
    @property
    def UnmappedIdentities(self) -> IdentityReferenceCollection:
        """ Get: UnmappedIdentities(self: IdentityNotMappedException) -> IdentityReferenceCollection """
        ...


    SerializeObjectState = ...


class IdentityReference: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Value(self) -> str:
        """ Get: Value(self: IdentityReference) -> str """
        ...


    def Equals(self, o:object) -> bool:
        """ Equals(self: IdentityReference, o: object) -> bool """
        ...

    def GetHashCode(self) -> int:
        """ GetHashCode(self: IdentityReference) -> int """
        ...

    def IsValidTargetType(self, targetType:Type) -> bool:
        """ IsValidTargetType(self: IdentityReference, targetType: Type) -> bool """
        ...

    def ToString(self) -> str:
        """ ToString(self: IdentityReference) -> str """
        ...

    def Translate(self, targetType:Type) -> IdentityReference:
        """ Translate(self: IdentityReference, targetType: Type) -> IdentityReference """
        ...

    def __eq__(self, *args): #cannot find CLR method
        """ x.__eq__(y) <==> x==y """
        ...

    def __ne__(self, *args): #cannot find CLR method
        ...


class IdentityReferenceCollection(ICollection): # skipped bases: <type 'IEnumerable'>, <type 'IEnumerable[IdentityReference]'>, <type 'object'>
    """
    IdentityReferenceCollection()
    IdentityReferenceCollection(capacity: int)
    """
    def GetEnumerator(self) -> IEnumerator:
        """ GetEnumerator(self: IdentityReferenceCollection) -> IEnumerator[IdentityReference] """
        ...

    def Translate(self, targetType:Type, forceSuccess:bool = ...) -> IdentityReferenceCollection:
        """
        Translate(self: IdentityReferenceCollection, targetType: Type) -> IdentityReferenceCollection
        Translate(self: IdentityReferenceCollection, targetType: Type, forceSuccess: bool) -> IdentityReferenceCollection
        """
        ...

    def __getitem__(self, *args): #cannot find CLR method
        """ x.__getitem__(y) <==> x[y] """
        ...

    def __len__(self, *args): #cannot find CLR method
        """ x.__len__() <==> len(x) """
        ...

    def __setitem__(self, *args): #cannot find CLR method
        """ x.__setitem__(i, y) <==> x[i]= """
        ...


class IIdentity: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def AuthenticationType(self) -> str:
        """ Get: AuthenticationType(self: IIdentity) -> str """
        ...

    @property
    def IsAuthenticated(self) -> bool:
        """ Get: IsAuthenticated(self: IIdentity) -> bool """
        ...

    @property
    def Name(self) -> str:
        """ Get: Name(self: IIdentity) -> str """
        ...



class IPrincipal: # skipped bases: <type 'object'>
    """ no doc """
    @property
    def Identity(self) -> IIdentity:
        """ Get: Identity(self: IPrincipal) -> IIdentity """
        ...


    def IsInRole(self, role:str) -> bool:
        """ IsInRole(self: IPrincipal, role: str) -> bool """
        ...


class NTAccount(IdentityReference): # skipped bases: <type 'object'>
    """
    NTAccount(domainName: str, accountName: str)
    NTAccount(name: str)
    """
    def __new__(cls, *__args:str) -> Self:
        """
        __new__(cls: type, domainName: str, accountName: str)
        __new__(cls: type, name: str)
        """
        ...


class PrincipalPolicy(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PrincipalPolicy, values: NoPrincipal (1), UnauthenticatedPrincipal (0), WindowsPrincipal (2) """
    NoPrincipal: PrincipalPolicy = ...
    UnauthenticatedPrincipal: PrincipalPolicy = ...
    value__ = ...
    WindowsPrincipal: PrincipalPolicy = ...


class SecurityIdentifier(IdentityReference, IComparable): # skipped bases: <type 'object'>
    """
    SecurityIdentifier(sddlForm: str)
    SecurityIdentifier(binaryForm: Array[Byte], offset: int)
    SecurityIdentifier(binaryForm: IntPtr)
    SecurityIdentifier(sidType: WellKnownSidType, domainSid: SecurityIdentifier)
    """
    @property
    def AccountDomainSid(self) -> SecurityIdentifier:
        """ Get: AccountDomainSid(self: SecurityIdentifier) -> SecurityIdentifier """
        ...

    @property
    def BinaryLength(self) -> int:
        """ Get: BinaryLength(self: SecurityIdentifier) -> int """
        ...


    def GetBinaryForm(self, binaryForm:Array, offset:int): # -> 
        """ GetBinaryForm(self: SecurityIdentifier, binaryForm: Array[Byte], offset: int) """
        ...

    def IsAccountSid(self) -> bool:
        """ IsAccountSid(self: SecurityIdentifier) -> bool """
        ...

    def IsEqualDomainSid(self, sid:SecurityIdentifier) -> bool:
        """ IsEqualDomainSid(self: SecurityIdentifier, sid: SecurityIdentifier) -> bool """
        ...

    def IsWellKnown(self, type:WellKnownSidType) -> bool:
        """ IsWellKnown(self: SecurityIdentifier, type: WellKnownSidType) -> bool """
        ...

    def __new__(cls, *__args:str) -> Self:
        """
        __new__(cls: type, sddlForm: str)
        __new__(cls: type, binaryForm: Array[Byte], offset: int)
        __new__(cls: type, binaryForm: IntPtr)
        __new__(cls: type, sidType: WellKnownSidType, domainSid: SecurityIdentifier)
        """
        ...

    MaxBinaryLength: int = ...
    MinBinaryLength: int = ...


class TokenAccessLevels(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) TokenAccessLevels, values: AdjustDefault (128), AdjustGroups (64), AdjustPrivileges (32), AdjustSessionId (256), AllAccess (983551), AssignPrimary (1), Duplicate (2), Impersonate (4), MaximumAllowed (33554432), Query (8), QuerySource (16), Read (131080), Write (131296) """
    AdjustDefault: TokenAccessLevels = ...
    AdjustGroups: TokenAccessLevels = ...
    AdjustPrivileges: TokenAccessLevels = ...
    AdjustSessionId: TokenAccessLevels = ...
    AllAccess: TokenAccessLevels = ...
    AssignPrimary: TokenAccessLevels = ...
    Duplicate: TokenAccessLevels = ...
    Impersonate: TokenAccessLevels = ...
    MaximumAllowed: TokenAccessLevels = ...
    Query: TokenAccessLevels = ...
    QuerySource: TokenAccessLevels = ...
    Read: TokenAccessLevels = ...
    value__ = ...
    Write: TokenAccessLevels = ...


class TokenImpersonationLevel(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TokenImpersonationLevel, values: Anonymous (1), Delegation (4), Identification (2), Impersonation (3), None (0) """
    Anonymous: TokenImpersonationLevel = ...
    Delegation: TokenImpersonationLevel = ...
    Identification: TokenImpersonationLevel = ...
    Impersonation: TokenImpersonationLevel = ...
    value__ = ...


class WellKnownSidType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WellKnownSidType, values: AccountAdministratorSid (38), AccountCertAdminsSid (46), AccountComputersSid (44), AccountControllersSid (45), AccountDomainAdminsSid (41), AccountDomainGuestsSid (43), AccountDomainUsersSid (42), AccountEnterpriseAdminsSid (48), AccountGuestSid (39), AccountKrbtgtSid (40), AccountPolicyAdminsSid (49), AccountRasAndIasServersSid (50), AccountSchemaAdminsSid (47), AnonymousSid (13), AuthenticatedUserSid (17), BatchSid (10), BuiltinAccountOperatorsSid (30), BuiltinAdministratorsSid (26), BuiltinAuthorizationAccessSid (59), BuiltinBackupOperatorsSid (33), BuiltinDomainSid (25), BuiltinGuestsSid (28), BuiltinIncomingForestTrustBuildersSid (56), BuiltinNetworkConfigurationOperatorsSid (37), BuiltinPerformanceLoggingUsersSid (58), BuiltinPerformanceMonitoringUsersSid (57), BuiltinPowerUsersSid (29), BuiltinPreWindows2000CompatibleAccessSid (35), BuiltinPrintOperatorsSid (32), BuiltinRemoteDesktopUsersSid (36), BuiltinReplicatorSid (34), BuiltinSystemOperatorsSid (31), BuiltinUsersSid (27), CreatorGroupServerSid (6), CreatorGroupSid (4), CreatorOwnerServerSid (5), CreatorOwnerSid (3), DialupSid (8), DigestAuthenticationSid (52), EnterpriseControllersSid (15), InteractiveSid (11), LocalServiceSid (23), LocalSid (2), LocalSystemSid (22), LogonIdsSid (21), MaxDefined (60), NetworkServiceSid (24), NetworkSid (9), NTAuthoritySid (7), NtlmAuthenticationSid (51), NullSid (0), OtherOrganizationSid (55), ProxySid (14), RemoteLogonIdSid (20), RestrictedCodeSid (18), SChannelAuthenticationSid (53), SelfSid (16), ServiceSid (12), TerminalServerSid (19), ThisOrganizationSid (54), WinBuiltinTerminalServerLicenseServersSid (60), WorldSid (1) """
    AccountAdministratorSid: WellKnownSidType = ...
    AccountCertAdminsSid: WellKnownSidType = ...
    AccountComputersSid: WellKnownSidType = ...
    AccountControllersSid: WellKnownSidType = ...
    AccountDomainAdminsSid: WellKnownSidType = ...
    AccountDomainGuestsSid: WellKnownSidType = ...
    AccountDomainUsersSid: WellKnownSidType = ...
    AccountEnterpriseAdminsSid: WellKnownSidType = ...
    AccountGuestSid: WellKnownSidType = ...
    AccountKrbtgtSid: WellKnownSidType = ...
    AccountPolicyAdminsSid: WellKnownSidType = ...
    AccountRasAndIasServersSid: WellKnownSidType = ...
    AccountSchemaAdminsSid: WellKnownSidType = ...
    AnonymousSid: WellKnownSidType = ...
    AuthenticatedUserSid: WellKnownSidType = ...
    BatchSid: WellKnownSidType = ...
    BuiltinAccountOperatorsSid: WellKnownSidType = ...
    BuiltinAdministratorsSid: WellKnownSidType = ...
    BuiltinAuthorizationAccessSid: WellKnownSidType = ...
    BuiltinBackupOperatorsSid: WellKnownSidType = ...
    BuiltinDomainSid: WellKnownSidType = ...
    BuiltinGuestsSid: WellKnownSidType = ...
    BuiltinIncomingForestTrustBuildersSid: WellKnownSidType = ...
    BuiltinNetworkConfigurationOperatorsSid: WellKnownSidType = ...
    BuiltinPerformanceLoggingUsersSid: WellKnownSidType = ...
    BuiltinPerformanceMonitoringUsersSid: WellKnownSidType = ...
    BuiltinPowerUsersSid: WellKnownSidType = ...
    BuiltinPreWindows2000CompatibleAccessSid: WellKnownSidType = ...
    BuiltinPrintOperatorsSid: WellKnownSidType = ...
    BuiltinRemoteDesktopUsersSid: WellKnownSidType = ...
    BuiltinReplicatorSid: WellKnownSidType = ...
    BuiltinSystemOperatorsSid: WellKnownSidType = ...
    BuiltinUsersSid: WellKnownSidType = ...
    CreatorGroupServerSid: WellKnownSidType = ...
    CreatorGroupSid: WellKnownSidType = ...
    CreatorOwnerServerSid: WellKnownSidType = ...
    CreatorOwnerSid: WellKnownSidType = ...
    DialupSid: WellKnownSidType = ...
    DigestAuthenticationSid: WellKnownSidType = ...
    EnterpriseControllersSid: WellKnownSidType = ...
    InteractiveSid: WellKnownSidType = ...
    LocalServiceSid: WellKnownSidType = ...
    LocalSid: WellKnownSidType = ...
    LocalSystemSid: WellKnownSidType = ...
    LogonIdsSid: WellKnownSidType = ...
    MaxDefined: WellKnownSidType = ...
    NetworkServiceSid: WellKnownSidType = ...
    NetworkSid: WellKnownSidType = ...
    NTAuthoritySid: WellKnownSidType = ...
    NtlmAuthenticationSid: WellKnownSidType = ...
    NullSid: WellKnownSidType = ...
    OtherOrganizationSid: WellKnownSidType = ...
    ProxySid: WellKnownSidType = ...
    RemoteLogonIdSid: WellKnownSidType = ...
    RestrictedCodeSid: WellKnownSidType = ...
    SChannelAuthenticationSid: WellKnownSidType = ...
    SelfSid: WellKnownSidType = ...
    ServiceSid: WellKnownSidType = ...
    TerminalServerSid: WellKnownSidType = ...
    ThisOrganizationSid: WellKnownSidType = ...
    value__ = ...
    WinBuiltinTerminalServerLicenseServersSid: WellKnownSidType = ...
    WorldSid: WellKnownSidType = ...


class WindowsAccountType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WindowsAccountType, values: Anonymous (3), Guest (1), Normal (0), System (2) """
    Anonymous: WindowsAccountType = ...
    Guest: WindowsAccountType = ...
    Normal: WindowsAccountType = ...
    System: WindowsAccountType = ...
    value__ = ...


class WindowsBuiltInRole(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum WindowsBuiltInRole, values: AccountOperator (548), Administrator (544), BackupOperator (551), Guest (546), PowerUser (547), PrintOperator (550), Replicator (552), SystemOperator (549), User (545) """
    AccountOperator: WindowsBuiltInRole = ...
    Administrator: WindowsBuiltInRole = ...
    BackupOperator: WindowsBuiltInRole = ...
    Guest: WindowsBuiltInRole = ...
    PowerUser: WindowsBuiltInRole = ...
    PrintOperator: WindowsBuiltInRole = ...
    Replicator: WindowsBuiltInRole = ...
    SystemOperator: WindowsBuiltInRole = ...
    User: WindowsBuiltInRole = ...
    value__ = ...


class WindowsIdentity(IDisposable, ClaimsIdentity, IDeserializationCallback, ISerializable): # skipped bases: <type 'IIdentity'>, <type 'object'>
    """
    WindowsIdentity(userToken: IntPtr)
    WindowsIdentity(userToken: IntPtr, type: str)
    WindowsIdentity(userToken: IntPtr, type: str, acctType: WindowsAccountType)
    WindowsIdentity(userToken: IntPtr, type: str, acctType: WindowsAccountType, isAuthenticated: bool)
    WindowsIdentity(sUserPrincipalName: str)
    WindowsIdentity(sUserPrincipalName: str, type: str)
    WindowsIdentity(info: SerializationInfo, context: StreamingContext)
    """
    @property
    def AccessToken(self) -> SafeAccessTokenHandle:
        """ Get: AccessToken(self: WindowsIdentity) -> SafeAccessTokenHandle """
        ...

    @property
    def DeviceClaims(self) -> IEnumerable:
        """ Get: DeviceClaims(self: WindowsIdentity) -> IEnumerable[Claim] """
        ...

    @property
    def Groups(self) -> IdentityReferenceCollection:
        """ Get: Groups(self: WindowsIdentity) -> IdentityReferenceCollection """
        ...

    @property
    def ImpersonationLevel(self) -> TokenImpersonationLevel:
        """ Get: ImpersonationLevel(self: WindowsIdentity) -> TokenImpersonationLevel """
        ...

    @property
    def IsAnonymous(self) -> bool:
        """ Get: IsAnonymous(self: WindowsIdentity) -> bool """
        ...

    @property
    def IsGuest(self) -> bool:
        """ Get: IsGuest(self: WindowsIdentity) -> bool """
        ...

    @property
    def IsSystem(self) -> bool:
        """ Get: IsSystem(self: WindowsIdentity) -> bool """
        ...

    @property
    def Owner(self) -> SecurityIdentifier:
        """ Get: Owner(self: WindowsIdentity) -> SecurityIdentifier """
        ...

    @property
    def Token(self) -> IntPtr:
        """ Get: Token(self: WindowsIdentity) -> IntPtr """
        ...

    @property
    def User(self) -> SecurityIdentifier:
        """ Get: User(self: WindowsIdentity) -> SecurityIdentifier """
        ...

    @property
    def UserClaims(self) -> IEnumerable:
        """ Get: UserClaims(self: WindowsIdentity) -> IEnumerable[Claim] """
        ...


    @staticmethod
    def GetAnonymous() -> WindowsIdentity:
        """ GetAnonymous() -> WindowsIdentity """
        ...

    @staticmethod
    def GetCurrent(*__args) -> WindowsIdentity:
        """
        GetCurrent() -> WindowsIdentity
        GetCurrent(ifImpersonating: bool) -> WindowsIdentity
        GetCurrent(desiredAccess: TokenAccessLevels) -> WindowsIdentity
        """
        ...

    def Impersonate(self, userToken=None) -> WindowsImpersonationContext:
        """
        Impersonate(self: WindowsIdentity) -> WindowsImpersonationContext
        Impersonate(userToken: IntPtr) -> WindowsImpersonationContext
        """
        ...

    @staticmethod
    def RunImpersonated(safeAccessTokenHandle:SafeAccessTokenHandle, *__args:Action): # -> 
        """ RunImpersonated(safeAccessTokenHandle: SafeAccessTokenHandle, action: Action)RunImpersonated[T](safeAccessTokenHandle: SafeAccessTokenHandle, func: Func[T]) -> T """
        ...

    DefaultIssuer: str = ...


class WindowsImpersonationContext(IDisposable): # skipped bases: <type 'object'>
    """ no doc """
    def Undo(self): # -> 
        """ Undo(self: WindowsImpersonationContext) """
        ...


class WindowsPrincipal(ClaimsPrincipal): # skipped bases: <type 'IPrincipal'>, <type 'object'>
    """ WindowsPrincipal(ntIdentity: WindowsIdentity) """
    @property
    def DeviceClaims(self) -> IEnumerable:
        """ Get: DeviceClaims(self: WindowsPrincipal) -> IEnumerable[Claim] """
        ...

    @property
    def UserClaims(self) -> IEnumerable:
        """ Get: UserClaims(self: WindowsPrincipal) -> IEnumerable[Claim] """
        ...



