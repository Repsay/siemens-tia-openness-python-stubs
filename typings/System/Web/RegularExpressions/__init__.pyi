# encoding: utf-8
# module System.Web.RegularExpressions calls itself RegularExpressions
# from System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
# by generator 1.145
""" no doc """
from __future__ import annotations
from System.Text.RegularExpressions import Regex

"""The following names are not found in the module: field#
"""

# no functions
# classes

class AspCodeRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    AspCodeRegex()
    AspCodeRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class AspEncodedExprRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    AspEncodedExprRegex()
    AspEncodedExprRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class AspExprRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    AspExprRegex()
    AspExprRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class CommentRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    CommentRegex()
    CommentRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class DatabindExprRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    DatabindExprRegex()
    DatabindExprRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class DataBindRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    DataBindRegex()
    DataBindRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class DirectiveRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    DirectiveRegex()
    DirectiveRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class EndTagRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    EndTagRegex()
    EndTagRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class GTRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    GTRegex()
    GTRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class IncludeRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    IncludeRegex()
    IncludeRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class LTRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    LTRegex()
    LTRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class RunatServerRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    RunatServerRegex()
    RunatServerRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class ServerTagsRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    ServerTagsRegex()
    ServerTagsRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class SimpleDirectiveRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    SimpleDirectiveRegex()
    SimpleDirectiveRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class TagRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    TagRegex()
    TagRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class TagRegex35(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    TagRegex35()
    TagRegex35(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


class TextRegex(Regex): # skipped bases: <type 'ISerializable'>, <type 'object'>
    """
    TextRegex()
    TextRegex(A_1: TimeSpan)
    """
    capnames = ...
    caps = ...
    capsize = ...
    capslist = ...
    factory = ...
    internalMatchTimeout = ...
    pattern = ...
    roptions = ...


