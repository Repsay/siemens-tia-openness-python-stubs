# encoding: utf-8
# module System.Windows.Forms.VisualStyles calls itself VisualStyles
# from System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
# by generator 1.145
""" no doc """
from __future__ import annotations
from Babel import Region

from System import Char, Enum, IntPtr

from System.Drawing import (Color, Font, Graphics, IDeviceContext, Image, 
    Rectangle)

from System.Web.UI import Control

from System.Windows.Forms import Padding, TextFormatFlags

from Windows.Foundation import Point, Size

"""The following names are not found in the module: field#
"""

# no functions
# classes

class BackgroundType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BackgroundType, values: BorderFill (1), ImageFile (0), None (2) """
    BorderFill: BackgroundType = ...
    ImageFile: BackgroundType = ...
    value__ = ...


class BooleanProperty(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BooleanProperty, values: AlwaysShowSizingBar (2208), AutoSize (2202), BackgroundFill (2205), BorderOnly (2203), Composited (2204), GlyphOnly (2207), GlyphTransparent (2206), IntegralSizing (2211), MirrorImage (2209), SourceGrow (2212), SourceShrink (2213), Transparent (2201), UniformSizing (2210) """
    AlwaysShowSizingBar: BooleanProperty = ...
    AutoSize: BooleanProperty = ...
    BackgroundFill: BooleanProperty = ...
    BorderOnly: BooleanProperty = ...
    Composited: BooleanProperty = ...
    GlyphOnly: BooleanProperty = ...
    GlyphTransparent: BooleanProperty = ...
    IntegralSizing: BooleanProperty = ...
    MirrorImage: BooleanProperty = ...
    SourceGrow: BooleanProperty = ...
    SourceShrink: BooleanProperty = ...
    Transparent: BooleanProperty = ...
    UniformSizing: BooleanProperty = ...
    value__ = ...


class BorderType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum BorderType, values: Ellipse (2), Rectangle (0), RoundedRectangle (1) """
    Ellipse: BorderType = ...
    Rectangle: BorderType = ...
    RoundedRectangle: BorderType = ...
    value__ = ...


class CheckBoxState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum CheckBoxState, values: CheckedDisabled (8), CheckedHot (6), CheckedNormal (5), CheckedPressed (7), MixedDisabled (12), MixedHot (10), MixedNormal (9), MixedPressed (11), UncheckedDisabled (4), UncheckedHot (2), UncheckedNormal (1), UncheckedPressed (3) """
    CheckedDisabled: CheckBoxState = ...
    CheckedHot: CheckBoxState = ...
    CheckedNormal: CheckBoxState = ...
    CheckedPressed: CheckBoxState = ...
    MixedDisabled: CheckBoxState = ...
    MixedHot: CheckBoxState = ...
    MixedNormal: CheckBoxState = ...
    MixedPressed: CheckBoxState = ...
    UncheckedDisabled: CheckBoxState = ...
    UncheckedHot: CheckBoxState = ...
    UncheckedNormal: CheckBoxState = ...
    UncheckedPressed: CheckBoxState = ...
    value__ = ...


class ColorProperty(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ColorProperty, values: AccentColorHint (3823), BorderColor (3801), BorderColorHint (3822), EdgeDarkShadowColor (3807), EdgeFillColor (3808), EdgeHighlightColor (3805), EdgeLightColor (3804), EdgeShadowColor (3806), FillColor (3802), FillColorHint (3821), GlowColor (3816), GlyphTextColor (3819), GlyphTransparentColor (3820), GradientColor1 (3810), GradientColor2 (3811), GradientColor3 (3812), GradientColor4 (3813), GradientColor5 (3814), ShadowColor (3815), TextBorderColor (3817), TextColor (3803), TextShadowColor (3818), TransparentColor (3809) """
    AccentColorHint: ColorProperty = ...
    BorderColor: ColorProperty = ...
    BorderColorHint: ColorProperty = ...
    EdgeDarkShadowColor: ColorProperty = ...
    EdgeFillColor: ColorProperty = ...
    EdgeHighlightColor: ColorProperty = ...
    EdgeLightColor: ColorProperty = ...
    EdgeShadowColor: ColorProperty = ...
    FillColor: ColorProperty = ...
    FillColorHint: ColorProperty = ...
    GlowColor: ColorProperty = ...
    GlyphTextColor: ColorProperty = ...
    GlyphTransparentColor: ColorProperty = ...
    GradientColor1: ColorProperty = ...
    GradientColor2: ColorProperty = ...
    GradientColor3: ColorProperty = ...
    GradientColor4: ColorProperty = ...
    GradientColor5: ColorProperty = ...
    ShadowColor: ColorProperty = ...
    TextBorderColor: ColorProperty = ...
    TextColor: ColorProperty = ...
    TextShadowColor: ColorProperty = ...
    TransparentColor: ColorProperty = ...
    value__ = ...


class ComboBoxState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ComboBoxState, values: Disabled (4), Hot (2), Normal (1), Pressed (3) """
    Disabled: ComboBoxState = ...
    Hot: ComboBoxState = ...
    Normal: ComboBoxState = ...
    Pressed: ComboBoxState = ...
    value__ = ...


class ContentAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ContentAlignment, values: Center (1), Left (0), Right (2) """
    Center: ContentAlignment = ...
    Left: ContentAlignment = ...
    Right: ContentAlignment = ...
    value__ = ...


class EdgeEffects(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) EdgeEffects, values: FillInterior (2048), Flat (4096), Mono (32768), None (0), Soft (16384) """
    FillInterior: EdgeEffects = ...
    Flat: EdgeEffects = ...
    Mono: EdgeEffects = ...
    Soft: EdgeEffects = ...
    value__ = ...


class Edges(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) Edges, values: Bottom (8), Diagonal (16), Left (1), Right (4), Top (2) """
    Bottom: Edges = ...
    Diagonal: Edges = ...
    Left: Edges = ...
    Right: Edges = ...
    Top: Edges = ...
    value__ = ...


class EdgeStyle(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EdgeStyle, values: Bump (9), Etched (6), Raised (5), Sunken (10) """
    Bump: EdgeStyle = ...
    Etched: EdgeStyle = ...
    Raised: EdgeStyle = ...
    Sunken: EdgeStyle = ...
    value__ = ...


class EnumProperty(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum EnumProperty, values: BackgroundType (4001), BorderType (4002), ContentAlignment (4006), FillType (4003), GlyphFontSizingType (4014), GlyphType (4012), HorizontalAlignment (4005), IconEffect (4009), ImageLayout (4011), ImageSelectType (4013), OffsetType (4008), SizingType (4004), TextShadowType (4010), TrueSizeScalingType (4015), VerticalAlignment (4007) """
    BackgroundType: EnumProperty = ...
    BorderType: EnumProperty = ...
    ContentAlignment: EnumProperty = ...
    FillType: EnumProperty = ...
    GlyphFontSizingType: EnumProperty = ...
    GlyphType: EnumProperty = ...
    HorizontalAlignment: EnumProperty = ...
    IconEffect: EnumProperty = ...
    ImageLayout: EnumProperty = ...
    ImageSelectType: EnumProperty = ...
    OffsetType: EnumProperty = ...
    SizingType: EnumProperty = ...
    TextShadowType: EnumProperty = ...
    TrueSizeScalingType: EnumProperty = ...
    value__ = ...
    VerticalAlignment: EnumProperty = ...


class FilenameProperty(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FilenameProperty, values: GlyphImageFile (3008), ImageFile (3001), ImageFile1 (3002), ImageFile2 (3003), ImageFile3 (3004), ImageFile4 (3005), ImageFile5 (3006), StockImageFile (3007) """
    GlyphImageFile: FilenameProperty = ...
    ImageFile: FilenameProperty = ...
    ImageFile1: FilenameProperty = ...
    ImageFile2: FilenameProperty = ...
    ImageFile3: FilenameProperty = ...
    ImageFile4: FilenameProperty = ...
    ImageFile5: FilenameProperty = ...
    StockImageFile: FilenameProperty = ...
    value__ = ...


class FillType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FillType, values: HorizontalGradient (2), RadialGradient (3), Solid (0), TileImage (4), VerticalGradient (1) """
    HorizontalGradient: FillType = ...
    RadialGradient: FillType = ...
    Solid: FillType = ...
    TileImage: FillType = ...
    value__ = ...
    VerticalGradient: FillType = ...


class FontProperty(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum FontProperty, values: GlyphFont (2601) """
    GlyphFont: FontProperty = ...
    value__ = ...


class GlyphFontSizingType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum GlyphFontSizingType, values: Dpi (2), None (0), Size (1) """
    Dpi: GlyphFontSizingType = ...
    Size: GlyphFontSizingType = ...
    value__ = ...


class GlyphType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum GlyphType, values: FontGlyph (2), ImageGlyph (1), None (0) """
    FontGlyph: GlyphType = ...
    ImageGlyph: GlyphType = ...
    value__ = ...


class GroupBoxState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum GroupBoxState, values: Disabled (2), Normal (1) """
    Disabled: GroupBoxState = ...
    Normal: GroupBoxState = ...
    value__ = ...


class HitTestCode(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum HitTestCode, values: Bottom (15), BottomLeft (16), BottomRight (17), Client (1), Left (10), Nowhere (0), Right (11), Top (12), TopLeft (13), TopRight (14) """
    Bottom: HitTestCode = ...
    BottomLeft: HitTestCode = ...
    BottomRight: HitTestCode = ...
    Client: HitTestCode = ...
    Left: HitTestCode = ...
    Nowhere: HitTestCode = ...
    Right: HitTestCode = ...
    Top: HitTestCode = ...
    TopLeft: HitTestCode = ...
    TopRight: HitTestCode = ...
    value__ = ...


class HitTestOptions(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) HitTestOptions, values: BackgroundSegment (0), Caption (4), FixedBorder (2), ResizingBorder (240), ResizingBorderBottom (128), ResizingBorderLeft (16), ResizingBorderRight (64), ResizingBorderTop (32), SizingTemplate (256), SystemSizingMargins (512) """
    BackgroundSegment: HitTestOptions = ...
    Caption: HitTestOptions = ...
    FixedBorder: HitTestOptions = ...
    ResizingBorder: HitTestOptions = ...
    ResizingBorderBottom: HitTestOptions = ...
    ResizingBorderLeft: HitTestOptions = ...
    ResizingBorderRight: HitTestOptions = ...
    ResizingBorderTop: HitTestOptions = ...
    SizingTemplate: HitTestOptions = ...
    SystemSizingMargins: HitTestOptions = ...
    value__ = ...


class HorizontalAlign(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum HorizontalAlign, values: Center (1), Left (0), Right (2) """
    Center: HorizontalAlign = ...
    Left: HorizontalAlign = ...
    Right: HorizontalAlign = ...
    value__ = ...


class IconEffect(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum IconEffect, values: Alpha (4), Glow (1), None (0), Pulse (3), Shadow (2) """
    Alpha: IconEffect = ...
    Glow: IconEffect = ...
    Pulse: IconEffect = ...
    Shadow: IconEffect = ...
    value__ = ...


class ImageOrientation(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ImageOrientation, values: Horizontal (1), Vertical (0) """
    Horizontal: ImageOrientation = ...
    value__ = ...
    Vertical: ImageOrientation = ...


class ImageSelectType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ImageSelectType, values: Dpi (2), None (0), Size (1) """
    Dpi: ImageSelectType = ...
    Size: ImageSelectType = ...
    value__ = ...


class IntegerProperty(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum IntegerProperty, values: AlphaLevel (2402), AlphaThreshold (2415), BorderSize (2403), GlyphIndex (2418), GradientRatio1 (2406), GradientRatio2 (2407), GradientRatio3 (2408), GradientRatio4 (2409), GradientRatio5 (2410), Height (2417), ImageCount (2401), MinDpi1 (2420), MinDpi2 (2421), MinDpi3 (2422), MinDpi4 (2423), MinDpi5 (2424), ProgressChunkSize (2411), ProgressSpaceSize (2412), RoundCornerHeight (2405), RoundCornerWidth (2404), Saturation (2413), TextBorderSize (2414), TrueSizeStretchMark (2419), Width (2416) """
    AlphaLevel: IntegerProperty = ...
    AlphaThreshold: IntegerProperty = ...
    BorderSize: IntegerProperty = ...
    GlyphIndex: IntegerProperty = ...
    GradientRatio1: IntegerProperty = ...
    GradientRatio2: IntegerProperty = ...
    GradientRatio3: IntegerProperty = ...
    GradientRatio4: IntegerProperty = ...
    GradientRatio5: IntegerProperty = ...
    Height: IntegerProperty = ...
    ImageCount: IntegerProperty = ...
    MinDpi1: IntegerProperty = ...
    MinDpi2: IntegerProperty = ...
    MinDpi3: IntegerProperty = ...
    MinDpi4: IntegerProperty = ...
    MinDpi5: IntegerProperty = ...
    ProgressChunkSize: IntegerProperty = ...
    ProgressSpaceSize: IntegerProperty = ...
    RoundCornerHeight: IntegerProperty = ...
    RoundCornerWidth: IntegerProperty = ...
    Saturation: IntegerProperty = ...
    TextBorderSize: IntegerProperty = ...
    TrueSizeStretchMark: IntegerProperty = ...
    value__ = ...
    Width: IntegerProperty = ...


class MarginProperty(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum MarginProperty, values: CaptionMargins (3603), ContentMargins (3602), SizingMargins (3601) """
    CaptionMargins: MarginProperty = ...
    ContentMargins: MarginProperty = ...
    SizingMargins: MarginProperty = ...
    value__ = ...


class OffsetType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum OffsetType, values: AboveLastButton (12), BelowLastButton (13), BottomLeft (3), BottomMiddle (5), BottomRight (4), LeftOfCaption (8), LeftOfLastButton (10), MiddleLeft (6), MiddleRight (7), RightOfCaption (9), RightOfLastButton (11), TopLeft (0), TopMiddle (2), TopRight (1) """
    AboveLastButton: OffsetType = ...
    BelowLastButton: OffsetType = ...
    BottomLeft: OffsetType = ...
    BottomMiddle: OffsetType = ...
    BottomRight: OffsetType = ...
    LeftOfCaption: OffsetType = ...
    LeftOfLastButton: OffsetType = ...
    MiddleLeft: OffsetType = ...
    MiddleRight: OffsetType = ...
    RightOfCaption: OffsetType = ...
    RightOfLastButton: OffsetType = ...
    TopLeft: OffsetType = ...
    TopMiddle: OffsetType = ...
    TopRight: OffsetType = ...
    value__ = ...


class PointProperty(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PointProperty, values: MinSize (3403), MinSize1 (3404), MinSize2 (3405), MinSize3 (3406), MinSize4 (3407), MinSize5 (3408), Offset (3401), TextShadowOffset (3402) """
    MinSize: PointProperty = ...
    MinSize1: PointProperty = ...
    MinSize2: PointProperty = ...
    MinSize3: PointProperty = ...
    MinSize4: PointProperty = ...
    MinSize5: PointProperty = ...
    Offset: PointProperty = ...
    TextShadowOffset: PointProperty = ...
    value__ = ...


class PushButtonState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum PushButtonState, values: Default (5), Disabled (4), Hot (2), Normal (1), Pressed (3) """
    Default: PushButtonState = ...
    Disabled: PushButtonState = ...
    Hot: PushButtonState = ...
    Normal: PushButtonState = ...
    Pressed: PushButtonState = ...
    value__ = ...


class RadioButtonState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum RadioButtonState, values: CheckedDisabled (8), CheckedHot (6), CheckedNormal (5), CheckedPressed (7), UncheckedDisabled (4), UncheckedHot (2), UncheckedNormal (1), UncheckedPressed (3) """
    CheckedDisabled: RadioButtonState = ...
    CheckedHot: RadioButtonState = ...
    CheckedNormal: RadioButtonState = ...
    CheckedPressed: RadioButtonState = ...
    UncheckedDisabled: RadioButtonState = ...
    UncheckedHot: RadioButtonState = ...
    UncheckedNormal: RadioButtonState = ...
    UncheckedPressed: RadioButtonState = ...
    value__ = ...


class ScrollBarArrowButtonState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ScrollBarArrowButtonState, values: DownDisabled (8), DownHot (6), DownNormal (5), DownPressed (7), LeftDisabled (12), LeftHot (10), LeftNormal (9), LeftPressed (11), RightDisabled (16), RightHot (14), RightNormal (13), RightPressed (15), UpDisabled (4), UpHot (2), UpNormal (1), UpPressed (3) """
    DownDisabled: ScrollBarArrowButtonState = ...
    DownHot: ScrollBarArrowButtonState = ...
    DownNormal: ScrollBarArrowButtonState = ...
    DownPressed: ScrollBarArrowButtonState = ...
    LeftDisabled: ScrollBarArrowButtonState = ...
    LeftHot: ScrollBarArrowButtonState = ...
    LeftNormal: ScrollBarArrowButtonState = ...
    LeftPressed: ScrollBarArrowButtonState = ...
    RightDisabled: ScrollBarArrowButtonState = ...
    RightHot: ScrollBarArrowButtonState = ...
    RightNormal: ScrollBarArrowButtonState = ...
    RightPressed: ScrollBarArrowButtonState = ...
    UpDisabled: ScrollBarArrowButtonState = ...
    UpHot: ScrollBarArrowButtonState = ...
    UpNormal: ScrollBarArrowButtonState = ...
    UpPressed: ScrollBarArrowButtonState = ...
    value__ = ...


class ScrollBarSizeBoxState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ScrollBarSizeBoxState, values: LeftAlign (2), RightAlign (1) """
    LeftAlign: ScrollBarSizeBoxState = ...
    RightAlign: ScrollBarSizeBoxState = ...
    value__ = ...


class ScrollBarState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ScrollBarState, values: Disabled (4), Hot (2), Normal (1), Pressed (3) """
    Disabled: ScrollBarState = ...
    Hot: ScrollBarState = ...
    Normal: ScrollBarState = ...
    Pressed: ScrollBarState = ...
    value__ = ...


class SizingType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum SizingType, values: FixedSize (0), Stretch (1), Tile (2) """
    FixedSize: SizingType = ...
    Stretch: SizingType = ...
    Tile: SizingType = ...
    value__ = ...


class StringProperty(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum StringProperty, values: Text (3201) """
    Text: StringProperty = ...
    value__ = ...


class TabItemState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TabItemState, values: Disabled (4), Hot (2), Normal (1), Selected (3) """
    Disabled: TabItemState = ...
    Hot: TabItemState = ...
    Normal: TabItemState = ...
    Selected: TabItemState = ...
    value__ = ...


class TextBoxState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TextBoxState, values: Assist (7), Disabled (4), Hot (2), Normal (1), Readonly (6), Selected (3) """
    Assist: TextBoxState = ...
    Disabled: TextBoxState = ...
    Hot: TextBoxState = ...
    Normal: TextBoxState = ...
    Readonly: TextBoxState = ...
    Selected: TextBoxState = ...
    value__ = ...


class TextMetrics: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Ascent(self) -> int:
        """
        Get: Ascent(self: TextMetrics) -> int
        Set: Ascent(self: TextMetrics) = value
        """
        ...

    @property
    def AverageCharWidth(self) -> int:
        """
        Get: AverageCharWidth(self: TextMetrics) -> int
        Set: AverageCharWidth(self: TextMetrics) = value
        """
        ...

    @property
    def BreakChar(self) -> Char:
        """
        Get: BreakChar(self: TextMetrics) -> Char
        Set: BreakChar(self: TextMetrics) = value
        """
        ...

    @property
    def CharSet(self) -> TextMetricsCharacterSet:
        """
        Get: CharSet(self: TextMetrics) -> TextMetricsCharacterSet
        Set: CharSet(self: TextMetrics) = value
        """
        ...

    @property
    def DefaultChar(self) -> Char:
        """
        Get: DefaultChar(self: TextMetrics) -> Char
        Set: DefaultChar(self: TextMetrics) = value
        """
        ...

    @property
    def Descent(self) -> int:
        """
        Get: Descent(self: TextMetrics) -> int
        Set: Descent(self: TextMetrics) = value
        """
        ...

    @property
    def DigitizedAspectX(self) -> int:
        """
        Get: DigitizedAspectX(self: TextMetrics) -> int
        Set: DigitizedAspectX(self: TextMetrics) = value
        """
        ...

    @property
    def DigitizedAspectY(self) -> int:
        """
        Get: DigitizedAspectY(self: TextMetrics) -> int
        Set: DigitizedAspectY(self: TextMetrics) = value
        """
        ...

    @property
    def ExternalLeading(self) -> int:
        """
        Get: ExternalLeading(self: TextMetrics) -> int
        Set: ExternalLeading(self: TextMetrics) = value
        """
        ...

    @property
    def FirstChar(self) -> Char:
        """
        Get: FirstChar(self: TextMetrics) -> Char
        Set: FirstChar(self: TextMetrics) = value
        """
        ...

    @property
    def Height(self) -> int:
        """
        Get: Height(self: TextMetrics) -> int
        Set: Height(self: TextMetrics) = value
        """
        ...

    @property
    def InternalLeading(self) -> int:
        """
        Get: InternalLeading(self: TextMetrics) -> int
        Set: InternalLeading(self: TextMetrics) = value
        """
        ...

    @property
    def Italic(self) -> bool:
        """
        Get: Italic(self: TextMetrics) -> bool
        Set: Italic(self: TextMetrics) = value
        """
        ...

    @property
    def LastChar(self) -> Char:
        """
        Get: LastChar(self: TextMetrics) -> Char
        Set: LastChar(self: TextMetrics) = value
        """
        ...

    @property
    def MaxCharWidth(self) -> int:
        """
        Get: MaxCharWidth(self: TextMetrics) -> int
        Set: MaxCharWidth(self: TextMetrics) = value
        """
        ...

    @property
    def Overhang(self) -> int:
        """
        Get: Overhang(self: TextMetrics) -> int
        Set: Overhang(self: TextMetrics) = value
        """
        ...

    @property
    def PitchAndFamily(self) -> TextMetricsPitchAndFamilyValues:
        """
        Get: PitchAndFamily(self: TextMetrics) -> TextMetricsPitchAndFamilyValues
        Set: PitchAndFamily(self: TextMetrics) = value
        """
        ...

    @property
    def StruckOut(self) -> bool:
        """
        Get: StruckOut(self: TextMetrics) -> bool
        Set: StruckOut(self: TextMetrics) = value
        """
        ...

    @property
    def Underlined(self) -> bool:
        """
        Get: Underlined(self: TextMetrics) -> bool
        Set: Underlined(self: TextMetrics) = value
        """
        ...

    @property
    def Weight(self) -> int:
        """
        Get: Weight(self: TextMetrics) -> int
        Set: Weight(self: TextMetrics) = value
        """
        ...



class TextMetricsCharacterSet(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TextMetricsCharacterSet, values: Ansi (0), Arabic (178), Baltic (186), ChineseBig5 (136), Default (1), EastEurope (238), Gb2312 (134), Greek (161), Hangul (129), Hebrew (177), Johab (130), Mac (77), Oem (255), Russian (204), ShiftJis (128), Symbol (2), Thai (222), Turkish (162), Vietnamese (163) """
    Ansi: TextMetricsCharacterSet = ...
    Arabic: TextMetricsCharacterSet = ...
    Baltic: TextMetricsCharacterSet = ...
    ChineseBig5: TextMetricsCharacterSet = ...
    Default: TextMetricsCharacterSet = ...
    EastEurope: TextMetricsCharacterSet = ...
    Gb2312: TextMetricsCharacterSet = ...
    Greek: TextMetricsCharacterSet = ...
    Hangul: TextMetricsCharacterSet = ...
    Hebrew: TextMetricsCharacterSet = ...
    Johab: TextMetricsCharacterSet = ...
    Mac: TextMetricsCharacterSet = ...
    Oem: TextMetricsCharacterSet = ...
    Russian: TextMetricsCharacterSet = ...
    ShiftJis: TextMetricsCharacterSet = ...
    Symbol: TextMetricsCharacterSet = ...
    Thai: TextMetricsCharacterSet = ...
    Turkish: TextMetricsCharacterSet = ...
    value__ = ...
    Vietnamese: TextMetricsCharacterSet = ...


class TextMetricsPitchAndFamilyValues(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum (flags) TextMetricsPitchAndFamilyValues, values: Device (8), FixedPitch (1), TrueType (4), Vector (2) """
    Device: TextMetricsPitchAndFamilyValues = ...
    FixedPitch: TextMetricsPitchAndFamilyValues = ...
    TrueType: TextMetricsPitchAndFamilyValues = ...
    value__ = ...
    Vector: TextMetricsPitchAndFamilyValues = ...


class TextShadowType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TextShadowType, values: Continuous (2), None (0), Single (1) """
    Continuous: TextShadowType = ...
    Single: TextShadowType = ...
    value__ = ...


class ThemeSizeType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ThemeSizeType, values: Draw (2), Minimum (0), True (1) """
    Draw: ThemeSizeType = ...
    Minimum: ThemeSizeType = ...
    value__ = ...


class ToolBarState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum ToolBarState, values: Checked (5), Disabled (4), Hot (2), HotChecked (6), Normal (1), Pressed (3) """
    Checked: ToolBarState = ...
    Disabled: ToolBarState = ...
    Hot: ToolBarState = ...
    HotChecked: ToolBarState = ...
    Normal: ToolBarState = ...
    Pressed: ToolBarState = ...
    value__ = ...


class TrackBarThumbState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TrackBarThumbState, values: Disabled (5), Hot (2), Normal (1), Pressed (3) """
    Disabled: TrackBarThumbState = ...
    Hot: TrackBarThumbState = ...
    Normal: TrackBarThumbState = ...
    Pressed: TrackBarThumbState = ...
    value__ = ...


class TrueSizeScalingType(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum TrueSizeScalingType, values: Dpi (2), None (0), Size (1) """
    Dpi: TrueSizeScalingType = ...
    Size: TrueSizeScalingType = ...
    value__ = ...


class VerticalAlignment(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum VerticalAlignment, values: Bottom (2), Center (1), Top (0) """
    Bottom: VerticalAlignment = ...
    Center: VerticalAlignment = ...
    Top: VerticalAlignment = ...
    value__ = ...


class VisualStyleElement: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def ClassName(self) -> str:
        """ Get: ClassName(self: VisualStyleElement) -> str """
        ...

    @property
    def Part(self) -> int:
        """ Get: Part(self: VisualStyleElement) -> int """
        ...

    @property
    def State(self) -> int:
        """ Get: State(self: VisualStyleElement) -> int """
        ...


    def Button(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def ComboBox(self, *args): #cannot find CLR method
        """ no doc """
        ...

    @staticmethod
    def CreateElement(className:str, part:int, state:int) -> VisualStyleElement:
        """ CreateElement(className: str, part: int, state: int) -> VisualStyleElement """
        ...

    def ExplorerBar(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def Header(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def ListView(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def Menu(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def MenuBand(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def Page(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def ProgressBar(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def Rebar(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def ScrollBar(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def Spin(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def StartPanel(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def Status(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def Tab(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def TaskBand(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def Taskbar(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def TaskbarClock(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def TextBox(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def ToolBar(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def ToolTip(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def TrackBar(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def TrayNotify(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def TreeView(self, *args): #cannot find CLR method
        """ no doc """
        ...

    def Window(self, *args): #cannot find CLR method
        """ no doc """
        ...



class VisualStyleInformation: # skipped bases: <type 'object'>, <type 'object'>
    """ no doc """
    @property
    def Author(self) -> str:
        """ Get: Author() -> str """
        ...

    @property
    def ColorScheme(self) -> str:
        """ Get: ColorScheme() -> str """
        ...

    @property
    def Company(self) -> str:
        """ Get: Company() -> str """
        ...

    @property
    def ControlHighlightHot(self) -> Color:
        """ Get: ControlHighlightHot() -> Color """
        ...

    @property
    def Copyright(self) -> str:
        """ Get: Copyright() -> str """
        ...

    @property
    def Description(self) -> str:
        """ Get: Description() -> str """
        ...

    @property
    def DisplayName(self) -> str:
        """ Get: DisplayName() -> str """
        ...

    @property
    def IsEnabledByUser(self) -> bool:
        """ Get: IsEnabledByUser() -> bool """
        ...

    @property
    def IsSupportedByOS(self) -> bool:
        """ Get: IsSupportedByOS() -> bool """
        ...

    @property
    def MinimumColorDepth(self) -> int:
        """ Get: MinimumColorDepth() -> int """
        ...

    @property
    def Size(self) -> str:
        """ Get: Size() -> str """
        ...

    @property
    def SupportsFlatMenus(self) -> bool:
        """ Get: SupportsFlatMenus() -> bool """
        ...

    @property
    def TextControlBorder(self) -> Color:
        """ Get: TextControlBorder() -> Color """
        ...

    @property
    def Url(self) -> str:
        """ Get: Url() -> str """
        ...

    @property
    def Version(self) -> str:
        """ Get: Version() -> str """
        ...


    __all__: list = ...


class VisualStyleRenderer: # skipped bases: <type 'object'>, <type 'object'>
    """
    VisualStyleRenderer(element: VisualStyleElement)
    VisualStyleRenderer(className: str, part: int, state: int)
    """
    @property
    def Class(self) -> str:
        """ Get: Class(self: VisualStyleRenderer) -> str """
        ...

    @property
    def Handle(self) -> IntPtr:
        """ Get: Handle(self: VisualStyleRenderer) -> IntPtr """
        ...

    @property
    def IsSupported(self) -> bool:
        """ Get: IsSupported() -> bool """
        ...

    @property
    def LastHResult(self) -> int:
        """ Get: LastHResult(self: VisualStyleRenderer) -> int """
        ...

    @property
    def Part(self) -> int:
        """ Get: Part(self: VisualStyleRenderer) -> int """
        ...

    @property
    def State(self) -> int:
        """ Get: State(self: VisualStyleRenderer) -> int """
        ...


    def DrawBackground(self, dc:IDeviceContext, bounds:Rectangle, clipRectangle:Rectangle = ...): # -> 
        """ DrawBackground(self: VisualStyleRenderer, dc: IDeviceContext, bounds: Rectangle)DrawBackground(self: VisualStyleRenderer, dc: IDeviceContext, bounds: Rectangle, clipRectangle: Rectangle) """
        ...

    def DrawEdge(self, dc:IDeviceContext, bounds:Rectangle, edges:Edges, style:EdgeStyle, effects:EdgeEffects) -> Rectangle:
        """ DrawEdge(self: VisualStyleRenderer, dc: IDeviceContext, bounds: Rectangle, edges: Edges, style: EdgeStyle, effects: EdgeEffects) -> Rectangle """
        ...

    def DrawImage(self, g:Graphics, bounds:Rectangle, *__args:Image): # -> 
        """ DrawImage(self: VisualStyleRenderer, g: Graphics, bounds: Rectangle, image: Image)DrawImage(self: VisualStyleRenderer, g: Graphics, bounds: Rectangle, imageList: ImageList, imageIndex: int) """
        ...

    def DrawParentBackground(self, dc:IDeviceContext, bounds:Rectangle, childControl:Control): # -> 
        """ DrawParentBackground(self: VisualStyleRenderer, dc: IDeviceContext, bounds: Rectangle, childControl: Control) """
        ...

    def DrawText(self, dc:IDeviceContext, bounds:Rectangle, textToDraw:str, drawDisabled:bool = ..., flags:TextFormatFlags = ...): # -> 
        """ DrawText(self: VisualStyleRenderer, dc: IDeviceContext, bounds: Rectangle, textToDraw: str)DrawText(self: VisualStyleRenderer, dc: IDeviceContext, bounds: Rectangle, textToDraw: str, drawDisabled: bool)DrawText(self: VisualStyleRenderer, dc: IDeviceContext, bounds: Rectangle, textToDraw: str, drawDisabled: bool, flags: TextFormatFlags) """
        ...

    def GetBackgroundContentRectangle(self, dc:IDeviceContext, bounds:Rectangle) -> Rectangle:
        """ GetBackgroundContentRectangle(self: VisualStyleRenderer, dc: IDeviceContext, bounds: Rectangle) -> Rectangle """
        ...

    def GetBackgroundExtent(self, dc:IDeviceContext, contentBounds:Rectangle) -> Rectangle:
        """ GetBackgroundExtent(self: VisualStyleRenderer, dc: IDeviceContext, contentBounds: Rectangle) -> Rectangle """
        ...

    def GetBackgroundRegion(self, dc:IDeviceContext, bounds:Rectangle) -> Region:
        """ GetBackgroundRegion(self: VisualStyleRenderer, dc: IDeviceContext, bounds: Rectangle) -> Region """
        ...

    def GetBoolean(self, prop:BooleanProperty) -> bool:
        """ GetBoolean(self: VisualStyleRenderer, prop: BooleanProperty) -> bool """
        ...

    def GetColor(self, prop:ColorProperty) -> Color:
        """ GetColor(self: VisualStyleRenderer, prop: ColorProperty) -> Color """
        ...

    def GetEnumValue(self, prop:EnumProperty) -> int:
        """ GetEnumValue(self: VisualStyleRenderer, prop: EnumProperty) -> int """
        ...

    def GetFilename(self, prop:FilenameProperty) -> str:
        """ GetFilename(self: VisualStyleRenderer, prop: FilenameProperty) -> str """
        ...

    def GetFont(self, dc:IDeviceContext, prop:FontProperty) -> Font:
        """ GetFont(self: VisualStyleRenderer, dc: IDeviceContext, prop: FontProperty) -> Font """
        ...

    def GetInteger(self, prop:IntegerProperty) -> int:
        """ GetInteger(self: VisualStyleRenderer, prop: IntegerProperty) -> int """
        ...

    def GetMargins(self, dc:IDeviceContext, prop:MarginProperty) -> Padding:
        """ GetMargins(self: VisualStyleRenderer, dc: IDeviceContext, prop: MarginProperty) -> Padding """
        ...

    def GetPartSize(self, dc:IDeviceContext, *__args:ThemeSizeType) -> Size:
        """
        GetPartSize(self: VisualStyleRenderer, dc: IDeviceContext, type: ThemeSizeType) -> Size
        GetPartSize(self: VisualStyleRenderer, dc: IDeviceContext, bounds: Rectangle, type: ThemeSizeType) -> Size
        """
        ...

    def GetPoint(self, prop:PointProperty) -> Point:
        """ GetPoint(self: VisualStyleRenderer, prop: PointProperty) -> Point """
        ...

    def GetString(self, prop:StringProperty) -> str:
        """ GetString(self: VisualStyleRenderer, prop: StringProperty) -> str """
        ...

    def GetTextExtent(self, dc, *__args) -> Rectangle:
        """
        GetTextExtent(self: VisualStyleRenderer, dc: IDeviceContext, textToDraw: str, flags: TextFormatFlags) -> Rectangle
        GetTextExtent(self: VisualStyleRenderer, dc: IDeviceContext, bounds: Rectangle, textToDraw: str, flags: TextFormatFlags) -> Rectangle
        """
        ...

    def GetTextMetrics(self, dc:IDeviceContext) -> TextMetrics:
        """ GetTextMetrics(self: VisualStyleRenderer, dc: IDeviceContext) -> TextMetrics """
        ...

    def HitTestBackground(self, *__args) -> HitTestCode:
        """
        HitTestBackground(self: VisualStyleRenderer, dc: IDeviceContext, backgroundRectangle: Rectangle, pt: Point, options: HitTestOptions) -> HitTestCode
        HitTestBackground(self: VisualStyleRenderer, g: Graphics, backgroundRectangle: Rectangle, region: Region, pt: Point, options: HitTestOptions) -> HitTestCode
        HitTestBackground(self: VisualStyleRenderer, dc: IDeviceContext, backgroundRectangle: Rectangle, hRgn: IntPtr, pt: Point, options: HitTestOptions) -> HitTestCode
        """
        ...

    def IsBackgroundPartiallyTransparent(self) -> bool:
        """ IsBackgroundPartiallyTransparent(self: VisualStyleRenderer) -> bool """
        ...

    @staticmethod
    def IsElementDefined(element:VisualStyleElement) -> bool:
        """ IsElementDefined(element: VisualStyleElement) -> bool """
        ...

    def SetParameters(self, *__args:VisualStyleElement): # -> 
        """ SetParameters(self: VisualStyleRenderer, element: VisualStyleElement)SetParameters(self: VisualStyleRenderer, className: str, part: int, state: int) """
        ...



class VisualStyleState(Enum): # skipped bases: <type 'IFormattable'>, <type 'IConvertible'>, <type 'IComparable'>, <type 'object'>
    """ enum VisualStyleState, values: ClientAndNonClientAreasEnabled (3), ClientAreaEnabled (2), NonClientAreaEnabled (1), NoneEnabled (0) """
    ClientAndNonClientAreasEnabled: VisualStyleState = ...
    ClientAreaEnabled: VisualStyleState = ...
    NonClientAreaEnabled: VisualStyleState = ...
    NoneEnabled: VisualStyleState = ...
    value__ = ...


